record_number,buggy_code,fixed_code,code_similarity
124001,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    boolean strValueSet=false;
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=(String)param.getListItemsDisplayName()[nbInList];
        strValueSet=true;
      }
      nbInList++;
    }
    if (!strValueSet) {
      strValue=name;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    combo.setText(strValue);
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    boolean strValueSet=false;
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=(String)param.getListItemsDisplayName()[nbInList];
        strValueSet=true;
      }
      nbInList++;
    }
    if (!strValueSet) {
      strValue=name;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (param.isRepositoryValueUsed()) {
      combo.removeModifyListener(modifySelection);
      combo.setText(strValue);
      combo.addModifyListener(modifySelection);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.9228925289652418
124002,"@Override public Control createControl(final Composite subComposite,final IElementParameter param,final int numInRow,final int nbInRow,final int top,final Control lastControl){
  DecoratedField dField=new DecoratedField(subComposite,SWT.BORDER,cbCtrl);
  if (param.isRequired()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_REQUIRED);
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.TOP,false);
  }
  if (param.isRepositoryValueUsed()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_CONTENT_PROPOSAL);
    decoration.setDescription(Messages.getString(""String_Node_Str""));
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.BOTTOM,false);
  }
  Control cLayout=dField.getLayoutControl();
  CCombo combo=(CCombo)dField.getControl();
  FormData data;
  combo.setItems(getListToDisplay(param));
  combo.setEditable(true);
  cLayout.setBackground(subComposite.getBackground());
  combo.setEnabled(!param.isReadOnly());
  combo.addSelectionListener(listenerSelection);
  combo.addModifyListener(modifySelection);
  combo.setData(PARAMETER_NAME,param.getName());
  if (elem instanceof Node) {
    combo.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  CLabel labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName());
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  data.top=new FormAttachment(0,top);
  cLayout.setLayoutData(data);
  hashCurControls.put(param.getName(),combo);
  Point initialSize=dField.getLayoutControl().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return cLayout;
}","@Override public Control createControl(final Composite subComposite,final IElementParameter param,final int numInRow,final int nbInRow,final int top,final Control lastControl){
  DecoratedField dField=new DecoratedField(subComposite,SWT.BORDER,cbCtrl);
  if (param.isRequired()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_REQUIRED);
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.TOP,false);
  }
  if (param.isRepositoryValueUsed()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_CONTENT_PROPOSAL);
    decoration.setDescription(Messages.getString(""String_Node_Str""));
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.BOTTOM,false);
  }
  Control cLayout=dField.getLayoutControl();
  CCombo combo=(CCombo)dField.getControl();
  FormData data;
  combo.setItems(getListToDisplay(param));
  combo.setEditable(!param.isReadOnly() && !param.isRepositoryValueUsed());
  combo.setEnabled(!param.isReadOnly() && !param.isRepositoryValueUsed());
  cLayout.setBackground(subComposite.getBackground());
  combo.addSelectionListener(listenerSelection);
  combo.addModifyListener(modifySelection);
  combo.setData(PARAMETER_NAME,param.getName());
  if (elem instanceof Node) {
    combo.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  CLabel labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName());
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  data.top=new FormAttachment(0,top);
  cLayout.setLayoutData(data);
  hashCurControls.put(param.getName(),combo);
  Point initialSize=dField.getLayoutControl().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return cLayout;
}",0.9677058054881464
124003,"private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String prefix=service.getXPathPrefixValue(selected);
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          TreeNode pNode=parentNode;
          if (MdmConceptType.RECEIVE.equals(selected.getConceptType())) {
            if (prefix != null) {
              String[] preValues=prefix.split(XmlMapUtil.XPATH_SEPARATOR);
              for (              String value : preValues) {
                if (!""String_Node_Str"".equals(value)) {
                  TreeNode createTreeNode=createModel();
                  createTreeNode.setName(value);
                  createTreeNode.setNodeType(NodeType.ELEMENT);
                  createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
                  createTreeNode.setXpath(XmlMapUtil.getXPath(pNode.getXpath(),createTreeNode.getName(),createTreeNode.getNodeType()));
                  pNode.getChildren().add(createTreeNode);
                  pNode=createTreeNode;
                }
              }
              loopExpression=prefix + loopExpression;
            }
          }
          prepareEmfTree(list,pNode,prefix,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}","private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String prefix=service.getXPathPrefixValue(selected);
          prefix=TalendTextUtils.removeQuotes(prefix);
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          TreeNode pNode=parentNode;
          if (MdmConceptType.RECEIVE.equals(selected.getConceptType())) {
            if (prefix != null && !""String_Node_Str"".equals(prefix)) {
              String[] preValues=prefix.split(XmlMapUtil.XPATH_SEPARATOR);
              for (              String value : preValues) {
                if (!""String_Node_Str"".equals(value)) {
                  TreeNode createTreeNode=createModel();
                  createTreeNode.setName(value);
                  createTreeNode.setNodeType(NodeType.ELEMENT);
                  createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
                  createTreeNode.setXpath(XmlMapUtil.getXPath(pNode.getXpath(),createTreeNode.getName(),createTreeNode.getNodeType()));
                  pNode.getChildren().add(createTreeNode);
                  pNode=createTreeNode;
                }
              }
              loopExpression=prefix + loopExpression;
            }
          }
          prepareEmfTree(list,pNode,prefix,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}",0.9807611877875366
124004,"@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}","@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}",0.7536907536907537
124005,"@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}","@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}",0.7436823104693141
124006,"@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    if (!alreadyEditedByUser) {
      refreshNewJob();
      try {
        ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    try {
      Item newCreated=null;
      if (processObject.getProperty() != null && processObject.getProperty().getItem() != null) {
        newCreated=processObject.getProperty().getItem();
      }
      if (!(newCreated instanceof BusinessProcessItem)) {
        ProxyRepositoryFactory.getInstance().lock(processObject);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
    boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
    openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    processObject.getProperty().setVersion(originalVersion);
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}","@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    if (!alreadyEditedByUser) {
      refreshNewJob();
      try {
        ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    try {
      Item newCreated=null;
      if (processObject.getProperty() != null && processObject.getProperty().getItem() != null) {
        newCreated=processObject.getProperty().getItem();
      }
      if (!(newCreated instanceof BusinessProcessItem)) {
        ProxyRepositoryFactory.getInstance().lock(processObject);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
    boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
    openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}",0.9830696641687484
124007,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  boolean allowAutoSwitch=true;
  IElementParameter elemParam=elem.getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (elemParam != null) {
    allowAutoSwitch=(Boolean)elemParam.getValue();
  }
  if (!allowAutoSwitch && (elem instanceof Node)) {
    Node node=(Node)elem;
    boolean isSchemaEmpty=false;
    if (node.getMetadataList().size() > 0) {
      isSchemaEmpty=node.getMetadataList().get(0).getListColumns().size() == 0;
    }
 else {
      isSchemaEmpty=true;
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType().equals(EParameterFieldType.MEMO_SQL)) {
        if (curParam.getDefaultValues().size() > 0) {
        }
      }
    }
    if (isSchemaEmpty) {
      allowAutoSwitch=true;
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName)) {
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
 else {
    oldMetadata=(String)elem.getPropertyValue(propertyName);
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName) && (EmfComponent.BUILTIN.equals(value))) {
    for (    IElementParameter param : elem.getElementParameters()) {
      boolean paramFlag=JobSettingsConstants.isExtraParameter(param.getName());
      boolean extraFlag=JobSettingsConstants.isExtraParameter(propertyName.split(""String_Node_Str"")[0]);
      if (paramFlag == extraFlag) {
        if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
          IElementParameter querystoreParam=elem.getElementParameterFromField(EParameterFieldType.QUERYSTORE_TYPE,param.getCategory());
          if (querystoreParam != null) {
            Map<String,IElementParameter> childParam=querystoreParam.getChildParameters();
            if (childParam != null) {
              IElementParameter queryTypeParam=childParam.get(EParameterName.QUERYSTORE_TYPE.getName());
              if (queryTypeParam != null && EmfComponent.REPOSITORY.equals(queryTypeParam.getValue())) {
                continue;
              }
            }
          }
        }
        param.setReadOnly(false);
        param.setRepositoryValueUsed(false);
      }
    }
  }
 else {
    oldValues.clear();
    IElementParameter propertyParam=elem.getElementParameter(propertyName);
    EComponentCategory currentCategory=propertyParam.getCategory();
    for (    IElementParameter param : elem.getElementParameters()) {
      String repositoryValue=param.getRepositoryValue();
      boolean b=elem instanceof INode && (((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str""));
      if ((""String_Node_Str"".equals(repositoryValue) || (param.isShow(elem.getElementParameters())) || b) && (repositoryValue != null) && (!param.getName().equals(propertyTypeName))) {
        IElementParameter relatedPropertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE,param.getCategory());
        if (relatedPropertyParam == null) {
          continue;
        }
        if (!relatedPropertyParam.getCategory().equals(currentCategory) && !repositoryValue.equals(""String_Node_Str"")) {
          continue;
        }
        Object objectValue;
        if (connection instanceof XmlFileConnection && this.dragAndDropAction == true && repositoryValue.equals(""String_Node_Str"") && reOpenXSDBool == true) {
          objectValue=RepositoryToComponentProperty.getXmlAndXSDFileValue((XmlFileConnection)connection,repositoryValue);
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else {
          objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
        }
        if (objectValue != null) {
          oldValues.put(param.getName(),param.getValue());
          if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String dbVersion=""String_Node_Str"";
            if (connection instanceof DatabaseConnection) {
              dbVersion=((DatabaseConnection)connection).getDbVersionString();
            }
            boolean found=false;
            String[] list=param.getListRepositoryItems();
            for (int i=0; (i < list.length) && (!found); i++) {
              if (objectValue.equals(list[i])) {
                found=true;
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
            IElementParameter elementParameter=null;
            IElementParameter elementParameter2=null;
            if (EParameterName.DB_TYPE.getName().equals(param.getName())) {
              elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
              elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
            }
 else {
              elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
              elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
            }
            String dbType=""String_Node_Str"";
            if (param.getValue() != null) {
              int indexOfItemFromList=param.getIndexOfItemFromList(param.getValue().toString());
              if (indexOfItemFromList != -1) {
                dbType=param.getListItemsDisplayCodeName()[indexOfItemFromList];
              }
            }
            if (StatsAndLogsConstants.JDBC.equals(dbType)) {
              IElementParameter dbNameParm=elem.getElementParameter(EParameterName.DBNAME.getName());
              if (dbNameParm != null) {
                dbNameParm.setValue(""String_Node_Str"");
              }
            }
 else {
              IElementParameter rulParam=elem.getElementParameter(EParameterName.URL.getName());
              if (rulParam != null) {
                rulParam.setValue(""String_Node_Str"");
              }
              IElementParameter classParam=elem.getElementParameter(EParameterName.DRIVER_CLASS.getName());
              if (classParam != null) {
                classParam.setValue(""String_Node_Str"");
              }
              IElementParameter jarParam=elem.getElementParameter(EParameterName.DRIVER_JAR.getName());
              if (jarParam != null) {
                jarParam.setValue(new ArrayList<Map<String,Object>>());
              }
            }
            setDbVersion(elementParameter,dbVersion);
            DesignerUtilities.setSchemaDB(elementParameter2,param.getValue());
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.equals(list[i])) {
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.toString().toUpperCase().equals(list[i])) {
                elem.setPropertyValue(param.getName(),objectValue);
              }
            }
          }
 else {
            if (repositoryValue.equals(""String_Node_Str"")) {
              IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
              if (connection instanceof FTPConnection) {
                if (((FTPConnection)connection).getEcoding() != null) {
                  paramEncoding.setValue(((FTPConnection)connection).getEcoding());
                }
 else {
                  paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                }
              }
 else {
                if (objectValue instanceof String) {
                  String str=TalendTextUtils.removeQuotes((String)objectValue);
                  if (str.equals(EmfComponent.ENCODING_TYPE_UTF_8)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_UTF_8);
                  }
 else                   if (str.equals(EmfComponent.ENCODING_TYPE_ISO_8859_15)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_ISO_8859_15);
                  }
 else {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                  }
                }
              }
            }
 else             if (repositoryValue.equals(""String_Node_Str"")) {
              setOtherProperties();
            }
            if (repositoryValue.equals(""String_Node_Str"")) {
              List list=new ArrayList();
              Object[] listItemsValue=elem.getElementParameter(""String_Node_Str"").getListItemsValue();
              for (int i=0; i < listItemsValue.length; i++) {
                list.add(listItemsValue[i]);
              }
              if (list != null && !list.contains(objectValue)) {
                objectValue=""String_Node_Str"";
              }
            }
            if (repositoryValue.equals(EParameterName.FILE_PATH.getName())) {
              String filePath=""String_Node_Str"";
              if (connection.isContextMode()) {
                ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
                if (contextItem != null) {
                  String selectedContext=contextItem.getDefaultContext();
                  final ContextType contextTypeByName=ContextUtils.getContextTypeByName(contextItem,selectedContext,true);
                  filePath=ConnectionContextHelper.getOriginalValue(contextTypeByName,objectValue.toString());
                }
              }
 else {
                filePath=TalendTextUtils.removeQuotes(objectValue.toString());
              }
              boolean versionCheckFor2007=false;
              if (filePath != null && filePath.endsWith(""String_Node_Str"")) {
                versionCheckFor2007=true;
              }
              if (elem.getElementParameter(""String_Node_Str"") != null) {
                elem.setPropertyValue(""String_Node_Str"",versionCheckFor2007);
              }
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE)) {
              if (objectValue != null) {
                objectValue=objectValue.toString().replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
            elem.setPropertyValue(param.getName(),objectValue);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"")) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          if (((Node)elem).getMetadataList().size() > 0) {
            IMetadataTable metaTable=((Node)elem).getMetadataList().get(0);
            RepositoryToComponentProperty.getTableXmlFileValue(connection,""String_Node_Str"",param,table,metaTable);
            param.setRepositoryValueUsed(true);
          }
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"") && connection != null) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          table.clear();
          ArrayList parameters=((WSDLSchemaConnection)connection).getParameters();
          for (          Object object : parameters) {
            Map<String,Object> map2=new HashMap<String,Object>();
            map2.put(""String_Node_Str"",TalendTextUtils.addQuotes(object.toString()));
            table.add(map2);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TEXT) && ""String_Node_Str"".equals(param.getRepositoryValue())) {
          param.setRepositoryValueUsed(true);
        }
 else {
          String paramName=param.getName();
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.retrieveSAPParams(elem,connection,param,getSapFunctionLabel());
          }
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.getSAPIDocParams(elem,connection,param,getSapIDocLabel());
          }
        }
        if (param.isRepositoryValueUsed()) {
          param.setReadOnly(false);
        }
      }
    }
    IElementParameter parentParameter=propertyParam.getParentParameter();
    if (parentParameter != null) {
      IElementParameter param=parentParameter.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      if (param != null && propertyParam == param) {
        ConnectionItem connItem=UpdateRepositoryUtils.getConnectionItemByItemId((String)param.getValue());
        if (connItem != null) {
          if (elem instanceof Node) {
            ConnectionContextHelper.addContextForNodeParameter((Node)elem,connItem,ignoreContextMode);
          }
 else           if (elem instanceof Process) {
            ConnectionContextHelper.addContextForProcessParameter((Process)elem,connItem,param.getCategory(),ignoreContextMode);
          }
        }
      }
    }
  }
  for (  IElementParameter curParam : elem.getElementParameters()) {
    if (curParam.getFieldType().equals(EParameterFieldType.AS400_CHECK)) {
      setOtherProperties();
    }
  }
  if (elem instanceof Node) {
    ((Process)((Node)elem).getProcess()).checkProcess();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  boolean allowAutoSwitch=true;
  IElementParameter elemParam=elem.getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (elemParam != null) {
    elemParam.setValue(Boolean.FALSE);
    allowAutoSwitch=(Boolean)elemParam.getValue();
  }
  if (!allowAutoSwitch && (elem instanceof Node)) {
    Node node=(Node)elem;
    boolean isSchemaEmpty=false;
    if (node.getMetadataList().size() > 0) {
      isSchemaEmpty=node.getMetadataList().get(0).getListColumns().size() == 0;
    }
 else {
      isSchemaEmpty=true;
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType().equals(EParameterFieldType.MEMO_SQL)) {
        if (curParam.getDefaultValues().size() > 0) {
        }
      }
    }
    if (isSchemaEmpty) {
      allowAutoSwitch=true;
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName)) {
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
 else {
    oldMetadata=(String)elem.getPropertyValue(propertyName);
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName) && (EmfComponent.BUILTIN.equals(value))) {
    for (    IElementParameter param : elem.getElementParameters()) {
      boolean paramFlag=JobSettingsConstants.isExtraParameter(param.getName());
      boolean extraFlag=JobSettingsConstants.isExtraParameter(propertyName.split(""String_Node_Str"")[0]);
      if (paramFlag == extraFlag) {
        if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
          IElementParameter querystoreParam=elem.getElementParameterFromField(EParameterFieldType.QUERYSTORE_TYPE,param.getCategory());
          if (querystoreParam != null) {
            Map<String,IElementParameter> childParam=querystoreParam.getChildParameters();
            if (childParam != null) {
              IElementParameter queryTypeParam=childParam.get(EParameterName.QUERYSTORE_TYPE.getName());
              if (queryTypeParam != null && EmfComponent.REPOSITORY.equals(queryTypeParam.getValue())) {
                continue;
              }
            }
          }
        }
        param.setReadOnly(false);
        param.setRepositoryValueUsed(false);
      }
    }
  }
 else {
    oldValues.clear();
    IElementParameter propertyParam=elem.getElementParameter(propertyName);
    EComponentCategory currentCategory=propertyParam.getCategory();
    for (    IElementParameter param : elem.getElementParameters()) {
      String repositoryValue=param.getRepositoryValue();
      boolean b=elem instanceof INode && (((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str""));
      if ((""String_Node_Str"".equals(repositoryValue) || (param.isShow(elem.getElementParameters())) || b) && (repositoryValue != null) && (!param.getName().equals(propertyTypeName))) {
        IElementParameter relatedPropertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE,param.getCategory());
        if (relatedPropertyParam == null) {
          continue;
        }
        if (!relatedPropertyParam.getCategory().equals(currentCategory) && !repositoryValue.equals(""String_Node_Str"")) {
          continue;
        }
        Object objectValue;
        if (connection instanceof XmlFileConnection && this.dragAndDropAction == true && repositoryValue.equals(""String_Node_Str"") && reOpenXSDBool == true) {
          objectValue=RepositoryToComponentProperty.getXmlAndXSDFileValue((XmlFileConnection)connection,repositoryValue);
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else {
          objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
        }
        if (objectValue != null) {
          oldValues.put(param.getName(),param.getValue());
          if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String dbVersion=""String_Node_Str"";
            if (connection instanceof DatabaseConnection) {
              dbVersion=((DatabaseConnection)connection).getDbVersionString();
            }
            boolean found=false;
            String[] list=param.getListRepositoryItems();
            for (int i=0; (i < list.length) && (!found); i++) {
              if (objectValue.equals(list[i])) {
                found=true;
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
            IElementParameter elementParameter=null;
            IElementParameter elementParameter2=null;
            if (EParameterName.DB_TYPE.getName().equals(param.getName())) {
              elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
              elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
            }
 else {
              elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
              elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
            }
            String dbType=""String_Node_Str"";
            if (param.getValue() != null) {
              int indexOfItemFromList=param.getIndexOfItemFromList(param.getValue().toString());
              if (indexOfItemFromList != -1) {
                dbType=param.getListItemsDisplayCodeName()[indexOfItemFromList];
              }
            }
            if (StatsAndLogsConstants.JDBC.equals(dbType)) {
              IElementParameter dbNameParm=elem.getElementParameter(EParameterName.DBNAME.getName());
              if (dbNameParm != null) {
                dbNameParm.setValue(""String_Node_Str"");
              }
            }
 else {
              IElementParameter rulParam=elem.getElementParameter(EParameterName.URL.getName());
              if (rulParam != null) {
                rulParam.setValue(""String_Node_Str"");
              }
              IElementParameter classParam=elem.getElementParameter(EParameterName.DRIVER_CLASS.getName());
              if (classParam != null) {
                classParam.setValue(""String_Node_Str"");
              }
              IElementParameter jarParam=elem.getElementParameter(EParameterName.DRIVER_JAR.getName());
              if (jarParam != null) {
                jarParam.setValue(new ArrayList<Map<String,Object>>());
              }
            }
            setDbVersion(elementParameter,dbVersion);
            DesignerUtilities.setSchemaDB(elementParameter2,param.getValue());
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.equals(list[i])) {
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.toString().toUpperCase().equals(list[i])) {
                elem.setPropertyValue(param.getName(),objectValue);
              }
            }
          }
 else {
            if (repositoryValue.equals(""String_Node_Str"")) {
              IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
              if (connection instanceof FTPConnection) {
                if (((FTPConnection)connection).getEcoding() != null) {
                  paramEncoding.setValue(((FTPConnection)connection).getEcoding());
                }
 else {
                  paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                }
              }
 else {
                if (objectValue instanceof String) {
                  String str=TalendTextUtils.removeQuotes((String)objectValue);
                  if (str.equals(EmfComponent.ENCODING_TYPE_UTF_8)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_UTF_8);
                  }
 else                   if (str.equals(EmfComponent.ENCODING_TYPE_ISO_8859_15)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_ISO_8859_15);
                  }
 else {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                  }
                }
              }
            }
 else             if (repositoryValue.equals(""String_Node_Str"")) {
              setOtherProperties();
            }
            if (repositoryValue.equals(""String_Node_Str"")) {
              List list=new ArrayList();
              Object[] listItemsValue=elem.getElementParameter(""String_Node_Str"").getListItemsValue();
              for (int i=0; i < listItemsValue.length; i++) {
                list.add(listItemsValue[i]);
              }
              if (list != null && !list.contains(objectValue)) {
                objectValue=""String_Node_Str"";
              }
            }
            if (repositoryValue.equals(EParameterName.FILE_PATH.getName())) {
              String filePath=""String_Node_Str"";
              if (connection.isContextMode()) {
                ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
                if (contextItem != null) {
                  String selectedContext=contextItem.getDefaultContext();
                  final ContextType contextTypeByName=ContextUtils.getContextTypeByName(contextItem,selectedContext,true);
                  filePath=ConnectionContextHelper.getOriginalValue(contextTypeByName,objectValue.toString());
                }
              }
 else {
                filePath=TalendTextUtils.removeQuotes(objectValue.toString());
              }
              boolean versionCheckFor2007=false;
              if (filePath != null && filePath.endsWith(""String_Node_Str"")) {
                versionCheckFor2007=true;
              }
              if (elem.getElementParameter(""String_Node_Str"") != null) {
                elem.setPropertyValue(""String_Node_Str"",versionCheckFor2007);
              }
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE)) {
              if (objectValue != null) {
                objectValue=objectValue.toString().replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
            elem.setPropertyValue(param.getName(),objectValue);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"")) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          if (((Node)elem).getMetadataList().size() > 0) {
            IMetadataTable metaTable=((Node)elem).getMetadataList().get(0);
            RepositoryToComponentProperty.getTableXmlFileValue(connection,""String_Node_Str"",param,table,metaTable);
            param.setRepositoryValueUsed(true);
          }
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"") && connection != null) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          table.clear();
          ArrayList parameters=((WSDLSchemaConnection)connection).getParameters();
          for (          Object object : parameters) {
            Map<String,Object> map2=new HashMap<String,Object>();
            map2.put(""String_Node_Str"",TalendTextUtils.addQuotes(object.toString()));
            table.add(map2);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TEXT) && ""String_Node_Str"".equals(param.getRepositoryValue())) {
          param.setRepositoryValueUsed(true);
        }
 else {
          String paramName=param.getName();
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.retrieveSAPParams(elem,connection,param,getSapFunctionLabel());
          }
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.getSAPIDocParams(elem,connection,param,getSapIDocLabel());
          }
        }
        if (param.isRepositoryValueUsed()) {
          param.setReadOnly(false);
        }
      }
    }
    IElementParameter parentParameter=propertyParam.getParentParameter();
    if (parentParameter != null) {
      IElementParameter param=parentParameter.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      if (param != null && propertyParam == param) {
        ConnectionItem connItem=UpdateRepositoryUtils.getConnectionItemByItemId((String)param.getValue());
        if (connItem != null) {
          if (elem instanceof Node) {
            ConnectionContextHelper.addContextForNodeParameter((Node)elem,connItem,ignoreContextMode);
          }
 else           if (elem instanceof Process) {
            ConnectionContextHelper.addContextForProcessParameter((Process)elem,connItem,param.getCategory(),ignoreContextMode);
          }
        }
      }
    }
  }
  for (  IElementParameter curParam : elem.getElementParameters()) {
    if (curParam.getFieldType().equals(EParameterFieldType.AS400_CHECK)) {
      setOtherProperties();
    }
  }
  if (elem instanceof Node) {
    ((Process)((Node)elem).getProcess()).checkProcess();
  }
}",0.9987061672693496
124008,"private void deleteNoUseTable(){
  if (SQLBuilderRepositoryNodeManager.tList == null || SQLBuilderRepositoryNodeManager.tList.size() == 0) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}","private void deleteNoUseTable(){
  DatabaseConnection connection=(DatabaseConnection)SQLBuilderRepositoryNodeManager.getItem(SQLBuilderRepositoryNodeManager.getRoot(nodeInEditor)).getConnection();
  if (SQLBuilderRepositoryNodeManager.tList instanceof List) {
    if (SQLBuilderRepositoryNodeManager.tList.size() == 0) {
      SQLBuilderRepositoryNodeManager.tList.addAll(ConnectionHelper.getTables(connection));
    }
  }
 else {
    SQLBuilderRepositoryNodeManager.tList=new ArrayList<MetadataTable>();
    SQLBuilderRepositoryNodeManager.tList.addAll(ConnectionHelper.getTables(connection));
  }
  if (SQLBuilderRepositoryNodeManager.tList == null || SQLBuilderRepositoryNodeManager.tList.size() == 0) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}",0.5737226277372263
124009,"@Override public void cancelPressed(){
  SQLBuilderRepositoryNodeManager.tList=null;
  super.cancelPressed();
}","@Override public void cancelPressed(){
  super.cancelPressed();
  SQLBuilderRepositoryNodeManager.tList=null;
}",0.7747747747747747
124010,"private void createTosProjectArea(final Composite parent){
  tosProjectComposite=toolkit.createComposite(parent);
  tosProjectComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosProjectComposite.setLayout(new FormLayout());
  tosProjectComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tosProjectComposite.setBackground(parent.getBackground());
  openProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  openProjectBtn.setText(Messages.getString(""String_Node_Str""));
  openProjectBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  Image image=ImageProvider.getImage(ERepositoryImages.OPEN_PROJECT_ICON);
  openProjectBtn.setImage(image);
  openProjectBtn.setVisible(false);
  Label createProjectLabel=toolkit.createLabel(tosProjectComposite,Messages.getString(""String_Node_Str""));
  createProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  createProjectBtn.setBackground(tosProjectComposite.getBackground());
  createProjectBtn.setText(Messages.getString(""String_Node_Str""));
  FormData data=new FormData();
  data.top=new FormAttachment(createProjectLabel,-HORIZONTAL_SPACE,SWT.CENTER);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(0,30 + HORIZONTAL_SPACE);
  createProjectBtn.setLayoutData(data);
  createProjectBtn.setEnabled(true);
  GC gc=new GC(createProjectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(createProjectBtn,0,SWT.BOTTOM);
  createProjectLabel.setLayoutData(data);
  projectText=toolkit.createText(tosProjectComposite,""String_Node_Str"",SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,0,SWT.TOP);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,0,SWT.BOTTOM);
  Point btPoint=createProjectBtn.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  projectText.setLayoutData(data);
  projectText.setText(DEFAULT_PROJECT_NAME);
  advanced=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  advanced.setText(Messages.getString(""String_Node_Str""));
  advanced.setBackground(tosProjectComposite.getBackground());
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE + 50);
  advanced.setLayoutData(data);
  createProjectBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      NewProjectWizard newPrjWiz=new NewProjectWizard(new Project[]{});
      newPrjWiz.setDefaultProjectName(projectText.getText());
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        populateProjectList();
        projectText.setText(project.getLabel());
        dialog.advanced();
      }
    }
  }
);
  advanced.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialog.advanced();
    }
  }
);
}","private void createTosProjectArea(final Composite parent){
  tosProjectComposite=toolkit.createComposite(parent);
  tosProjectComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosProjectComposite.setLayout(new FormLayout());
  tosProjectComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tosProjectComposite.setBackground(parent.getBackground());
  openProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  openProjectBtn.setText(Messages.getString(""String_Node_Str""));
  openProjectBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  Image image=ImageProvider.getImage(ERepositoryImages.OPEN_PROJECT_ICON);
  openProjectBtn.setImage(image);
  openProjectBtn.setVisible(false);
  Label createProjectLabel=toolkit.createLabel(tosProjectComposite,Messages.getString(""String_Node_Str""));
  createProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  createProjectBtn.setBackground(tosProjectComposite.getBackground());
  createProjectBtn.setText(Messages.getString(""String_Node_Str""));
  FormData data=new FormData();
  data.top=new FormAttachment(createProjectLabel,-HORIZONTAL_SPACE,SWT.CENTER);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(0,30 + HORIZONTAL_SPACE);
  createProjectBtn.setLayoutData(data);
  createProjectBtn.setEnabled(true);
  GC gc=new GC(createProjectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(createProjectBtn,0,SWT.BOTTOM);
  createProjectLabel.setLayoutData(data);
  projectText=toolkit.createText(tosProjectComposite,""String_Node_Str"",SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,0,SWT.TOP);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,0,SWT.BOTTOM);
  Point btPoint=createProjectBtn.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  projectText.setLayoutData(data);
  projectText.setText(DEFAULT_PROJECT_NAME);
  projectText.setBackground(GREY_COLOR);
  projectText.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      if (projectText.getText().equals(DEFAULT_PROJECT_NAME)) {
        projectText.setBackground(null);
        projectText.setText(""String_Node_Str"");
      }
    }
    public void focusLost(    FocusEvent e){
      if (projectText.getText() == ""String_Node_Str"") {
        projectText.setText(DEFAULT_PROJECT_NAME);
        projectText.setBackground(GREY_COLOR);
      }
    }
  }
);
  advanced=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  advanced.setText(Messages.getString(""String_Node_Str""));
  advanced.setBackground(tosProjectComposite.getBackground());
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE + 50);
  advanced.setLayoutData(data);
  createProjectBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      NewProjectWizard newPrjWiz=new NewProjectWizard(new Project[]{});
      newPrjWiz.setDefaultProjectName(projectText.getText());
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        populateProjectList();
        projectText.setText(project.getLabel());
        dialog.advanced();
      }
    }
  }
);
  advanced.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialog.advanced();
    }
  }
);
}",0.9311698508243916
124011,"private void createDownComposite(Composite parent){
  FormData data=null;
  createAccount=new Composite(parent,SWT.NONE);
  createAccount.setBackground(parent.getBackground());
  createAccount.setLayout(new FormLayout());
  Label createLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.bottom=new FormAttachment(0,30);
  createLabel.setText(Messages.getString(""String_Node_Str""));
  createLabel.setLayoutData(data);
  createLabel.setFont(font);
  createLabel.setBackground(createAccount.getBackground());
  createLabel.forceFocus();
  link=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(createLabel,0,SWT.TOP);
  data.left=new FormAttachment(createLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(createLabel,0,SWT.BOTTOM);
  link.setText(Messages.getString(""String_Node_Str""));
  link.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  link.setBackground(createAccount.getBackground());
  link.setFont(font);
  link.setLayoutData(data);
  Label userNameLabel=new Label(createAccount,SWT.RIGHT);
  userNameLabel.setFont(font);
  GC gc=new GC(userNameLabel);
  Point tmpSize;
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(createLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(createLabel,40,SWT.BOTTOM);
  userNameLabel.setText(Messages.getString(""String_Node_Str""));
  userNameLabel.setLayoutData(data);
  userNameLabel.setBackground(createAccount.getBackground());
  userNameText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameLabel,10,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,200,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,0,SWT.BOTTOM);
  userNameText.setLayoutData(data);
  userNameText.setFont(font);
  Label needLabelforUserName=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(userNameText,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,5,SWT.RIGHT);
  data.right=new FormAttachment(userNameText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameText,0,SWT.BOTTOM);
  needLabelforUserName.setText(""String_Node_Str"");
  needLabelforUserName.setFont(font);
  needLabelforUserName.setLayoutData(data);
  Color red=new Color(null,255,0,0);
  needLabelforUserName.setForeground(red);
  needLabelforUserName.setBackground(createAccount.getBackground());
  red.dispose();
  Label emailLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(userNameLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,25,SWT.BOTTOM);
  emailLabel.setText(Messages.getString(""String_Node_Str""));
  emailLabel.setBackground(createAccount.getBackground());
  emailLabel.setLayoutData(data);
  emailLabel.setFont(font);
  emailText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,0,SWT.LEFT);
  data.right=new FormAttachment(userNameText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  emailText.setLayoutData(data);
  emailText.setFont(font);
  Label needLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,5,SWT.RIGHT);
  data.right=new FormAttachment(emailText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  needLabel.setText(""String_Node_Str"");
  needLabel.setFont(font);
  needLabel.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel.setForeground(red);
  needLabel.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,25,SWT.BOTTOM);
  passwordLabel.setLayoutData(data);
  passwordLabel.setBackground(createAccount.getBackground());
  passwordLabel.setText(Messages.getString(""String_Node_Str""));
  passwordLabel.setFont(font);
  passwordText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,0,SWT.BOTTOM);
  passwordText.setLayoutData(data);
  passwordText.setEchoChar('*');
  passwordText.setFont(font);
  Label needLabelforPassword=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordText,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordText,0,SWT.BOTTOM);
  needLabelforPassword.setText(""String_Node_Str"");
  needLabelforPassword.setFont(font);
  needLabelforPassword.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPassword.setForeground(red);
  needLabelforPassword.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordAgainLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,25,SWT.BOTTOM);
  passwordAgainLabel.setLayoutData(data);
  passwordAgainLabel.setBackground(createAccount.getBackground());
  passwordAgainLabel.setText(Messages.getString(""String_Node_Str""));
  passwordAgainLabel.setFont(font);
  passwordAgainText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,0,SWT.LEFT);
  data.right=new FormAttachment(passwordText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,0,SWT.BOTTOM);
  passwordAgainText.setLayoutData(data);
  passwordAgainText.setEchoChar('*');
  passwordAgainText.setFont(font);
  Label needLabelforPasswordAgain=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainText,0,SWT.TOP);
  data.left=new FormAttachment(passwordAgainText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainText,0,SWT.BOTTOM);
  needLabelforPasswordAgain.setText(""String_Node_Str"");
  needLabelforPasswordAgain.setFont(font);
  needLabelforPasswordAgain.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPasswordAgain.setForeground(red);
  needLabelforPasswordAgain.setBackground(createAccount.getBackground());
  red.dispose();
  password2ValidateLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(needLabelforPasswordAgain,0,SWT.TOP);
  data.left=new FormAttachment(needLabelforPasswordAgain,10,SWT.RIGHT);
  data.right=new FormAttachment(needLabelforPasswordAgain,110,SWT.RIGHT);
  data.bottom=new FormAttachment(needLabelforPasswordAgain,0,SWT.BOTTOM);
  password2ValidateLabel.setBackground(createAccount.getBackground());
  password2ValidateLabel.setLayoutData(data);
  Label countryLabel=new Label(createAccount,SWT.RIGHT);
  countryLabel.setFont(font);
  gc=new GC(countryLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordAgainLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,25,SWT.BOTTOM);
  countryLabel.setText(Messages.getString(""String_Node_Str""));
  countryLabel.setLayoutData(data);
  countryLabel.setBackground(createAccount.getBackground());
  countryCombo=new Combo(createAccount,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.top=new FormAttachment(countryLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(countryLabel,0,SWT.BOTTOM);
  countryCombo.setLayoutData(data);
  countryCombo.setItems(initiateCountryList());
  countryCombo.select(countryToSelect);
  countryCombo.setFont(font);
  agreeButton=new Button(createAccount,SWT.CHECK);
  gc=new GC(agreeButton);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(countryCombo,20,SWT.BOTTOM);
  data.left=new FormAttachment(countryCombo,0,SWT.LEFT);
  agreeButton.setText(Messages.getString(""String_Node_Str""));
  agreeButton.setLayoutData(data);
  agreeButton.setFont(font);
  agreeButton.setBackground(createAccount.getBackground());
  agreeButton.setSelection(false);
  improveButton=new Button(createAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(agreeButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(agreeButton,0,SWT.LEFT);
  data.right=new FormAttachment(agreeButton,500,SWT.LEFT);
  data.bottom=new FormAttachment(agreeButton,30,SWT.BOTTOM);
  improveButton.setText(Messages.getString(""String_Node_Str""));
  improveButton.setLayoutData(data);
  improveButton.setBackground(createAccount.getBackground());
  improveButton.setFont(font);
  improveButton.setSelection(true);
  final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
  if (preferenceStore.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED)) {
    improveButton.setSelection(true);
  }
 else {
    improveButton.setSelection(false);
  }
  improveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED,improveButton.getSelection());
    }
  }
);
  Hyperlink readMore=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,5,SWT.LEFT);
  data.right=new FormAttachment(improveButton,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButton,20,SWT.BOTTOM);
  readMore.setText(Messages.getString(""String_Node_Str""));
  readMore.setBackground(createAccount.getBackground());
  readMore.setLayoutData(data);
  readMore.setFont(font);
  Color blue=new Color(null,0,0,255);
  readMore.setForeground(blue);
  blue.dispose();
  readMore.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  createAccountButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMore,10,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,0,SWT.LEFT);
  data.right=new FormAttachment(improveButton,180,SWT.LEFT);
  data.bottom=new FormAttachment(readMore,35,SWT.BOTTOM);
  createAccountButton.setLayoutData(data);
  createAccountButton.setText(Messages.getString(""String_Node_Str""));
  createAccountButton.setEnabled(false);
  createAccountButton.setFont(font);
  proxySettingButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButton.setText(Messages.getString(""String_Node_Str""));
  proxySettingButton.setLayoutData(data);
  proxySettingButton.setFont(font);
  skipButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButton.setText(Messages.getString(""String_Node_Str""));
  skipButton.setLayoutData(data);
  skipButton.setFont(font);
  connectAccount=new Composite(parent,SWT.NONE);
  connectAccount.setBackground(parent.getBackground());
  connectAccount.setLayout(new FormLayout());
  Label loginLabel=new Label(connectAccount,SWT.NONE);
  loginLabel.setFont(font);
  gc=new GC(loginLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.right=new FormAttachment(0,10 + labelSize.x);
  data.bottom=new FormAttachment(0,30);
  loginLabel.setText(Messages.getString(""String_Node_Str""));
  loginLabel.setLayoutData(data);
  loginLabel.setBackground(connectAccount.getBackground());
  loginLabel.forceFocus();
  linkToCreate=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(loginLabel,0,SWT.TOP);
  data.left=new FormAttachment(loginLabel,5,SWT.RIGHT);
  data.bottom=new FormAttachment(loginLabel,0,SWT.BOTTOM);
  linkToCreate.setText(Messages.getString(""String_Node_Str""));
  linkToCreate.setLayoutData(data);
  linkToCreate.setBackground(connectAccount.getBackground());
  linkToCreate.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  linkToCreate.setFont(font);
  Label emailLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  emailLabelInConnect.setFont(font);
  gc=new GC(emailLabelInConnect);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  int newSize=gc.stringExtent(Messages.getString(""String_Node_Str"")).x;
  if (newSize > labelSize.x) {
    labelSize.x=newSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(loginLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(loginLabel,40,SWT.BOTTOM);
  emailLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  emailLabelInConnect.setLayoutData(data);
  emailLabelInConnect.setBackground(connectAccount.getBackground());
  usernameTextForConnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(emailLabelInConnect,10,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,200,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  usernameTextForConnect.setLayoutData(data);
  usernameTextForConnect.setFont(font);
  Label needLabel1=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,5,SWT.RIGHT);
  data.right=new FormAttachment(usernameTextForConnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  needLabel1.setText(""String_Node_Str"");
  needLabel1.setFont(font);
  needLabel1.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel1.setForeground(red);
  needLabel1.setBackground(connectAccount.getBackground());
  red.dispose();
  Label passwordLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabelInConnect,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,25,SWT.BOTTOM);
  passwordLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  passwordLabelInConnect.setLayoutData(data);
  passwordLabelInConnect.setBackground(connectAccount.getBackground());
  passwordLabelInConnect.setFont(font);
  passwordTextForconnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,0,SWT.LEFT);
  data.right=new FormAttachment(usernameTextForConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  passwordTextForconnect.setLayoutData(data);
  passwordTextForconnect.setEchoChar('*');
  passwordTextForconnect.setFont(font);
  Label needLabel2=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(passwordTextForconnect,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordTextForconnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  needLabel2.setText(""String_Node_Str"");
  needLabel2.setFont(font);
  needLabel2.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel2.setForeground(red);
  needLabel2.setBackground(connectAccount.getBackground());
  red.dispose();
  improveButtonInConnect=new Button(connectAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(passwordTextForconnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(passwordTextForconnect,0,SWT.LEFT);
  data.right=new FormAttachment(passwordTextForconnect,500,SWT.LEFT);
  data.bottom=new FormAttachment(passwordTextForconnect,30,SWT.BOTTOM);
  improveButtonInConnect.setText(Messages.getString(""String_Node_Str""));
  improveButtonInConnect.setBackground(connectAccount.getBackground());
  improveButtonInConnect.setLayoutData(data);
  improveButtonInConnect.setSelection(true);
  improveButtonInConnect.setFont(font);
  Hyperlink readMoreInConnect=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButtonInConnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,5,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButtonInConnect,20,SWT.BOTTOM);
  readMoreInConnect.setText(Messages.getString(""String_Node_Str""));
  readMoreInConnect.setFont(font);
  readMoreInConnect.setLayoutData(data);
  blue=new Color(null,0,0,255);
  readMoreInConnect.setForeground(blue);
  readMoreInConnect.setBackground(connectAccount.getBackground());
  blue.dispose();
  readMoreInConnect.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  connectButton=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMoreInConnect,20,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,0,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,80,SWT.LEFT);
  data.bottom=new FormAttachment(readMoreInConnect,45,SWT.BOTTOM);
  connectButton.setText(Messages.getString(""String_Node_Str""));
  connectButton.setLayoutData(data);
  connectButton.setEnabled(false);
  connectButton.setFont(font);
  skipButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  skipButtonForConnect.setLayoutData(data);
  skipButtonForConnect.setFont(font);
  proxySettingButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  proxySettingButtonForConnect.setLayoutData(data);
  proxySettingButtonForConnect.setFont(font);
  stackLayout.topControl=createAccount;
  parent.layout();
}","private void createDownComposite(Composite parent){
  FormData data=null;
  createAccount=new Composite(parent,SWT.NONE);
  createAccount.setBackground(parent.getBackground());
  createAccount.setLayout(new FormLayout());
  Label createLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.bottom=new FormAttachment(0,30);
  createLabel.setText(Messages.getString(""String_Node_Str""));
  createLabel.setLayoutData(data);
  createLabel.setFont(font);
  createLabel.setBackground(createAccount.getBackground());
  createLabel.forceFocus();
  link=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(createLabel,0,SWT.TOP);
  data.left=new FormAttachment(createLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(createLabel,0,SWT.BOTTOM);
  link.setText(Messages.getString(""String_Node_Str""));
  link.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  link.setBackground(createAccount.getBackground());
  link.setFont(font);
  link.setLayoutData(data);
  Label userNameLabel=new Label(createAccount,SWT.RIGHT);
  userNameLabel.setFont(font);
  GC gc=new GC(userNameLabel);
  Point tmpSize;
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(createLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(createLabel,40,SWT.BOTTOM);
  userNameLabel.setText(Messages.getString(""String_Node_Str""));
  userNameLabel.setLayoutData(data);
  userNameLabel.setBackground(createAccount.getBackground());
  userNameText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameLabel,10,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,200,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,0,SWT.BOTTOM);
  userNameText.setLayoutData(data);
  userNameText.setFont(font);
  userNameText.forceFocus();
  Label needLabelforUserName=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(userNameText,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,5,SWT.RIGHT);
  data.right=new FormAttachment(userNameText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameText,0,SWT.BOTTOM);
  needLabelforUserName.setText(""String_Node_Str"");
  needLabelforUserName.setFont(font);
  needLabelforUserName.setLayoutData(data);
  Color red=new Color(null,255,0,0);
  needLabelforUserName.setForeground(red);
  needLabelforUserName.setBackground(createAccount.getBackground());
  red.dispose();
  Label emailLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(userNameLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,25,SWT.BOTTOM);
  emailLabel.setText(Messages.getString(""String_Node_Str""));
  emailLabel.setBackground(createAccount.getBackground());
  emailLabel.setLayoutData(data);
  emailLabel.setFont(font);
  emailText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,0,SWT.LEFT);
  data.right=new FormAttachment(userNameText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  emailText.setLayoutData(data);
  emailText.setFont(font);
  Label needLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,5,SWT.RIGHT);
  data.right=new FormAttachment(emailText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  needLabel.setText(""String_Node_Str"");
  needLabel.setFont(font);
  needLabel.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel.setForeground(red);
  needLabel.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,25,SWT.BOTTOM);
  passwordLabel.setLayoutData(data);
  passwordLabel.setBackground(createAccount.getBackground());
  passwordLabel.setText(Messages.getString(""String_Node_Str""));
  passwordLabel.setFont(font);
  passwordText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,0,SWT.BOTTOM);
  passwordText.setLayoutData(data);
  passwordText.setEchoChar('*');
  passwordText.setFont(font);
  Label needLabelforPassword=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordText,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordText,0,SWT.BOTTOM);
  needLabelforPassword.setText(""String_Node_Str"");
  needLabelforPassword.setFont(font);
  needLabelforPassword.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPassword.setForeground(red);
  needLabelforPassword.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordAgainLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,25,SWT.BOTTOM);
  passwordAgainLabel.setLayoutData(data);
  passwordAgainLabel.setBackground(createAccount.getBackground());
  passwordAgainLabel.setText(Messages.getString(""String_Node_Str""));
  passwordAgainLabel.setFont(font);
  passwordAgainText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,0,SWT.LEFT);
  data.right=new FormAttachment(passwordText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,0,SWT.BOTTOM);
  passwordAgainText.setLayoutData(data);
  passwordAgainText.setEchoChar('*');
  passwordAgainText.setFont(font);
  Label needLabelforPasswordAgain=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainText,0,SWT.TOP);
  data.left=new FormAttachment(passwordAgainText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainText,0,SWT.BOTTOM);
  needLabelforPasswordAgain.setText(""String_Node_Str"");
  needLabelforPasswordAgain.setFont(font);
  needLabelforPasswordAgain.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPasswordAgain.setForeground(red);
  needLabelforPasswordAgain.setBackground(createAccount.getBackground());
  red.dispose();
  password2ValidateLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(needLabelforPasswordAgain,0,SWT.TOP);
  data.left=new FormAttachment(needLabelforPasswordAgain,10,SWT.RIGHT);
  data.right=new FormAttachment(needLabelforPasswordAgain,110,SWT.RIGHT);
  data.bottom=new FormAttachment(needLabelforPasswordAgain,0,SWT.BOTTOM);
  password2ValidateLabel.setBackground(createAccount.getBackground());
  password2ValidateLabel.setLayoutData(data);
  Label countryLabel=new Label(createAccount,SWT.RIGHT);
  countryLabel.setFont(font);
  gc=new GC(countryLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordAgainLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,25,SWT.BOTTOM);
  countryLabel.setText(Messages.getString(""String_Node_Str""));
  countryLabel.setLayoutData(data);
  countryLabel.setBackground(createAccount.getBackground());
  countryCombo=new Combo(createAccount,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.top=new FormAttachment(countryLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(countryLabel,0,SWT.BOTTOM);
  countryCombo.setLayoutData(data);
  countryCombo.setItems(initiateCountryList());
  countryCombo.select(countryToSelect);
  countryCombo.setFont(font);
  agreeButton=new Button(createAccount,SWT.CHECK);
  gc=new GC(agreeButton);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(countryCombo,20,SWT.BOTTOM);
  data.left=new FormAttachment(countryCombo,0,SWT.LEFT);
  agreeButton.setText(Messages.getString(""String_Node_Str""));
  agreeButton.setLayoutData(data);
  agreeButton.setFont(font);
  agreeButton.setBackground(createAccount.getBackground());
  agreeButton.setSelection(false);
  improveButton=new Button(createAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(agreeButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(agreeButton,0,SWT.LEFT);
  data.right=new FormAttachment(agreeButton,500,SWT.LEFT);
  data.bottom=new FormAttachment(agreeButton,30,SWT.BOTTOM);
  improveButton.setText(Messages.getString(""String_Node_Str""));
  improveButton.setLayoutData(data);
  improveButton.setBackground(createAccount.getBackground());
  improveButton.setFont(font);
  improveButton.setSelection(true);
  final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
  if (preferenceStore.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED)) {
    improveButton.setSelection(true);
  }
 else {
    improveButton.setSelection(false);
  }
  improveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED,improveButton.getSelection());
    }
  }
);
  Hyperlink readMore=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,5,SWT.LEFT);
  data.right=new FormAttachment(improveButton,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButton,20,SWT.BOTTOM);
  readMore.setText(Messages.getString(""String_Node_Str""));
  readMore.setBackground(createAccount.getBackground());
  readMore.setLayoutData(data);
  readMore.setFont(font);
  Color blue=new Color(null,0,0,255);
  readMore.setForeground(blue);
  blue.dispose();
  readMore.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  createAccountButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMore,10,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,0,SWT.LEFT);
  data.right=new FormAttachment(improveButton,180,SWT.LEFT);
  data.bottom=new FormAttachment(readMore,35,SWT.BOTTOM);
  createAccountButton.setLayoutData(data);
  createAccountButton.setText(Messages.getString(""String_Node_Str""));
  createAccountButton.setEnabled(false);
  createAccountButton.setFont(font);
  proxySettingButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButton.setText(Messages.getString(""String_Node_Str""));
  proxySettingButton.setLayoutData(data);
  proxySettingButton.setFont(font);
  skipButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButton.setText(Messages.getString(""String_Node_Str""));
  skipButton.setLayoutData(data);
  skipButton.setFont(font);
  connectAccount=new Composite(parent,SWT.NONE);
  connectAccount.setBackground(parent.getBackground());
  connectAccount.setLayout(new FormLayout());
  Label loginLabel=new Label(connectAccount,SWT.NONE);
  loginLabel.setFont(font);
  gc=new GC(loginLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.right=new FormAttachment(0,10 + labelSize.x);
  data.bottom=new FormAttachment(0,30);
  loginLabel.setText(Messages.getString(""String_Node_Str""));
  loginLabel.setLayoutData(data);
  loginLabel.setBackground(connectAccount.getBackground());
  linkToCreate=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(loginLabel,0,SWT.TOP);
  data.left=new FormAttachment(loginLabel,5,SWT.RIGHT);
  data.bottom=new FormAttachment(loginLabel,0,SWT.BOTTOM);
  linkToCreate.setText(Messages.getString(""String_Node_Str""));
  linkToCreate.setLayoutData(data);
  linkToCreate.setBackground(connectAccount.getBackground());
  linkToCreate.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  linkToCreate.setFont(font);
  Label emailLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  emailLabelInConnect.setFont(font);
  gc=new GC(emailLabelInConnect);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  int newSize=gc.stringExtent(Messages.getString(""String_Node_Str"")).x;
  if (newSize > labelSize.x) {
    labelSize.x=newSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(loginLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(loginLabel,40,SWT.BOTTOM);
  emailLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  emailLabelInConnect.setLayoutData(data);
  emailLabelInConnect.setBackground(connectAccount.getBackground());
  usernameTextForConnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(emailLabelInConnect,10,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,200,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  usernameTextForConnect.setLayoutData(data);
  usernameTextForConnect.setFont(font);
  Label needLabel1=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,5,SWT.RIGHT);
  data.right=new FormAttachment(usernameTextForConnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  needLabel1.setText(""String_Node_Str"");
  needLabel1.setFont(font);
  needLabel1.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel1.setForeground(red);
  needLabel1.setBackground(connectAccount.getBackground());
  red.dispose();
  Label passwordLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabelInConnect,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,25,SWT.BOTTOM);
  passwordLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  passwordLabelInConnect.setLayoutData(data);
  passwordLabelInConnect.setBackground(connectAccount.getBackground());
  passwordLabelInConnect.setFont(font);
  passwordTextForconnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,0,SWT.LEFT);
  data.right=new FormAttachment(usernameTextForConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  passwordTextForconnect.setLayoutData(data);
  passwordTextForconnect.setEchoChar('*');
  passwordTextForconnect.setFont(font);
  Label needLabel2=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(passwordTextForconnect,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordTextForconnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  needLabel2.setText(""String_Node_Str"");
  needLabel2.setFont(font);
  needLabel2.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel2.setForeground(red);
  needLabel2.setBackground(connectAccount.getBackground());
  red.dispose();
  improveButtonInConnect=new Button(connectAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(passwordTextForconnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(passwordTextForconnect,0,SWT.LEFT);
  data.right=new FormAttachment(passwordTextForconnect,500,SWT.LEFT);
  data.bottom=new FormAttachment(passwordTextForconnect,30,SWT.BOTTOM);
  improveButtonInConnect.setText(Messages.getString(""String_Node_Str""));
  improveButtonInConnect.setBackground(connectAccount.getBackground());
  improveButtonInConnect.setLayoutData(data);
  improveButtonInConnect.setSelection(true);
  improveButtonInConnect.setFont(font);
  Hyperlink readMoreInConnect=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButtonInConnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,5,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButtonInConnect,20,SWT.BOTTOM);
  readMoreInConnect.setText(Messages.getString(""String_Node_Str""));
  readMoreInConnect.setFont(font);
  readMoreInConnect.setLayoutData(data);
  blue=new Color(null,0,0,255);
  readMoreInConnect.setForeground(blue);
  readMoreInConnect.setBackground(connectAccount.getBackground());
  blue.dispose();
  readMoreInConnect.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  connectButton=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMoreInConnect,20,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,0,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,80,SWT.LEFT);
  data.bottom=new FormAttachment(readMoreInConnect,45,SWT.BOTTOM);
  connectButton.setText(Messages.getString(""String_Node_Str""));
  connectButton.setLayoutData(data);
  connectButton.setEnabled(false);
  connectButton.setFont(font);
  skipButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  skipButtonForConnect.setLayoutData(data);
  skipButtonForConnect.setFont(font);
  proxySettingButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  proxySettingButtonForConnect.setLayoutData(data);
  proxySettingButtonForConnect.setFont(font);
  stackLayout.topControl=createAccount;
  parent.layout();
}",0.9986223862238622
124012,"/** 
 * DOC smallet Comment method ""afterImportAs"".
 * @param newName
 * @param technicalName
 * @throws InvocationTargetException
 */
private static void afterImportAs(String newName,String technicalName) throws InvocationTargetException {
  final IWorkspace workspace=org.eclipse.core.resources.ResourcesPlugin.getWorkspace();
  IContainer containers=(IProject)workspace.getRoot().findMember(new Path(technicalName));
  IResource file2=containers.findMember(IProjectDescription.DESCRIPTION_FILE_NAME);
  try {
    FilesUtils.replaceInFile(""String_Node_Str"",file2.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
    IResource file3=containers.findMember(OLD_TALEND_PROJECT_FILE_NAME);
    if (file3 == null || !file3.exists()) {
      file3=containers.findMember(TALEND_PROJECT_FILE_NAME);
    }
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + newName + ""String_Node_Str"");
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
}","/** 
 * DOC smallet Comment method ""afterImportAs"".
 * @param newName
 * @param technicalName
 * @throws InvocationTargetException
 */
private static void afterImportAs(String newName,String technicalName) throws InvocationTargetException {
  final IWorkspace workspace=org.eclipse.core.resources.ResourcesPlugin.getWorkspace();
  IContainer containers=(IProject)workspace.getRoot().findMember(new Path(technicalName));
  IResource file2=containers.findMember(IProjectDescription.DESCRIPTION_FILE_NAME);
  try {
    FilesUtils.replaceInFile(""String_Node_Str"",file2.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
    IResource file3=containers.findMember(OLD_TALEND_PROJECT_FILE_NAME);
    if (file3 == null || !file3.exists()) {
      file3=containers.findMember(TALEND_PROJECT_FILE_NAME);
    }
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + newName + ""String_Node_Str"");
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
    final IProject project=workspace.getRoot().getProject(technicalName);
    XmiResourceManager xmiManager=new XmiResourceManager();
    try {
      final Project loadProject=xmiManager.loadProject(project);
      loadProject.setLocal(true);
      xmiManager.saveResource(loadProject.eResource());
    }
 catch (    PersistenceException e) {
    }
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
}",0.8688462983840661
124013,"private boolean collectProjectFilesFromDirectory(Collection files,File directory,Set directoriesVisited){
  File[] contents=directory.listFiles();
  if (contents == null)   return false;
  if (directoriesVisited == null) {
    directoriesVisited=new HashSet();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
    }
  }
  final String dotProject=""String_Node_Str"";
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (contents[i].isDirectory()) {
      if (!contents[i].getName().equals(METADATA_FOLDER)) {
        try {
          String canonicalPath=contents[i].getCanonicalPath();
          if (!directoriesVisited.add(canonicalPath)) {
            continue;
          }
        }
 catch (        IOException exception) {
          StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
        }
        collectProjectFilesFromDirectory(files,contents[i],directoriesVisited);
      }
    }
  }
  return true;
}","private boolean collectProjectFilesFromDirectory(Collection files,File directory,Set directoriesVisited){
  File[] contents=directory.listFiles();
  if (contents == null)   return false;
  if (directoriesVisited == null) {
    directoriesVisited=new HashSet();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
    }
  }
  final String dotProject=TALEND_PROJECT;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (contents[i].isDirectory()) {
      if (!contents[i].getName().equals(METADATA_FOLDER)) {
        try {
          String canonicalPath=contents[i].getCanonicalPath();
          if (!directoriesVisited.add(canonicalPath)) {
            continue;
          }
        }
 catch (        IOException exception) {
          StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
        }
        collectProjectFilesFromDirectory(files,contents[i],directoriesVisited);
      }
    }
  }
  return true;
}",0.9891750653228816
124014,"private boolean collectProjectFilesFromProvider(Collection files,Object entry,int level){
  List children=structureProvider.getChildren(entry);
  if (children == null) {
    children=new ArrayList(1);
  }
  boolean isContainsFile=false;
  Iterator childrenEnum=children.iterator();
  for (int i=0; i < children.size(); i++) {
    Object child=children.get(i);
    if (!structureProvider.isFolder(child)) {
      String elementLabel=structureProvider.getLabel(child);
      if (elementLabel.equals(""String_Node_Str"")) {
        isContainsFile=true;
      }
    }
  }
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    if (structureProvider.isFolder(child)) {
      collectProjectFilesFromProvider(files,child,level + 1);
    }
    String elementLabel=structureProvider.getLabel(child);
    if (elementLabel.equals(""String_Node_Str"") && isContainsFile) {
      files.add(new TalendProjectRecord(child,entry,level));
    }
  }
  return true;
}","private boolean collectProjectFilesFromProvider(Collection files,Object entry,int level){
  List children=structureProvider.getChildren(entry);
  if (children == null) {
    children=new ArrayList(1);
  }
  boolean isContainsFile=false;
  Iterator childrenEnum=children.iterator();
  for (int i=0; i < children.size(); i++) {
    Object child=children.get(i);
    if (!structureProvider.isFolder(child)) {
      String elementLabel=structureProvider.getLabel(child);
      if (elementLabel.equals(TALEND_PROJECT)) {
        isContainsFile=true;
      }
    }
  }
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    if (structureProvider.isFolder(child)) {
      collectProjectFilesFromProvider(files,child,level + 1);
    }
    String elementLabel=structureProvider.getLabel(child);
    if (elementLabel.equals(""String_Node_Str"") && isContainsFile) {
      files.add(new TalendProjectRecord(child,entry,level));
    }
  }
  return true;
}",0.6469673405909798
124015,"private void createTosProjectArea(final Composite parent){
  tosProjectComposite=toolkit.createComposite(parent);
  tosProjectComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosProjectComposite.setLayout(new FormLayout());
  tosProjectComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tosProjectComposite.setBackground(parent.getBackground());
  openProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  openProjectBtn.setText(Messages.getString(""String_Node_Str""));
  openProjectBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  Image image=ImageProvider.getImage(ERepositoryImages.OPEN_PROJECT_ICON);
  openProjectBtn.setImage(image);
  openProjectBtn.setVisible(false);
  Label createProjectLabel=toolkit.createLabel(tosProjectComposite,Messages.getString(""String_Node_Str""));
  createProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  createProjectBtn.setBackground(tosProjectComposite.getBackground());
  createProjectBtn.setText(Messages.getString(""String_Node_Str""));
  FormData data=new FormData();
  data.top=new FormAttachment(createProjectLabel,-HORIZONTAL_SPACE,SWT.CENTER);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(0,30 + HORIZONTAL_SPACE);
  createProjectBtn.setLayoutData(data);
  createProjectBtn.setEnabled(true);
  GC gc=new GC(createProjectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(createProjectBtn,0,SWT.BOTTOM);
  createProjectLabel.setLayoutData(data);
  projectText=toolkit.createText(tosProjectComposite,""String_Node_Str"",SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,0,SWT.TOP);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,0,SWT.BOTTOM);
  Point btPoint=createProjectBtn.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  projectText.setLayoutData(data);
  projectText.setText(DEFAULT_PROJECT_NAME);
  projectText.setBackground(GREY_COLOR);
  projectText.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      projectText.setBackground(null);
      projectText.setText(""String_Node_Str"");
    }
  }
);
  advanced=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  advanced.setText(Messages.getString(""String_Node_Str""));
  advanced.setBackground(tosProjectComposite.getBackground());
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE + 50);
  advanced.setLayoutData(data);
  createProjectBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      NewProjectWizard newPrjWiz=new NewProjectWizard(new Project[]{});
      newPrjWiz.setDefaultProjectName(projectText.getText());
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        populateProjectList();
        projectText.setText(project.getLabel());
        dialog.advanced();
      }
    }
  }
);
  advanced.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialog.advanced();
    }
  }
);
}","private void createTosProjectArea(final Composite parent){
  tosProjectComposite=toolkit.createComposite(parent);
  tosProjectComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosProjectComposite.setLayout(new FormLayout());
  tosProjectComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tosProjectComposite.setBackground(parent.getBackground());
  openProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  openProjectBtn.setText(Messages.getString(""String_Node_Str""));
  openProjectBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  Image image=ImageProvider.getImage(ERepositoryImages.OPEN_PROJECT_ICON);
  openProjectBtn.setImage(image);
  openProjectBtn.setVisible(false);
  Label createProjectLabel=toolkit.createLabel(tosProjectComposite,Messages.getString(""String_Node_Str""));
  createProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  createProjectBtn.setBackground(tosProjectComposite.getBackground());
  createProjectBtn.setText(Messages.getString(""String_Node_Str""));
  FormData data=new FormData();
  data.top=new FormAttachment(createProjectLabel,-HORIZONTAL_SPACE,SWT.CENTER);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(0,30 + HORIZONTAL_SPACE);
  createProjectBtn.setLayoutData(data);
  createProjectBtn.setEnabled(true);
  GC gc=new GC(createProjectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(10,HORIZONTAL_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(createProjectBtn,0,SWT.BOTTOM);
  createProjectLabel.setLayoutData(data);
  projectText=toolkit.createText(tosProjectComposite,""String_Node_Str"",SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,0,SWT.TOP);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,0,SWT.BOTTOM);
  Point btPoint=createProjectBtn.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  projectText.setLayoutData(data);
  projectText.setText(DEFAULT_PROJECT_NAME);
  projectText.setBackground(GREY_COLOR);
  projectText.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      projectText.setBackground(null);
      projectText.setText(""String_Node_Str"");
    }
    public void focusLost(    FocusEvent e){
      projectText.setText(DEFAULT_PROJECT_NAME);
      projectText.setBackground(GREY_COLOR);
    }
  }
);
  advanced=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  advanced.setText(Messages.getString(""String_Node_Str""));
  advanced.setBackground(tosProjectComposite.getBackground());
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE + 50);
  advanced.setLayoutData(data);
  createProjectBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      NewProjectWizard newPrjWiz=new NewProjectWizard(new Project[]{});
      newPrjWiz.setDefaultProjectName(projectText.getText());
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        populateProjectList();
        projectText.setText(project.getLabel());
        dialog.advanced();
      }
    }
  }
);
  advanced.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialog.advanced();
    }
  }
);
}",0.980726943474324
124016,"private void createTosActionArea(Composite parent){
  tosActionComposite=toolkit.createComposite(parent);
  tosActionComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosActionComposite.setLayout(new FormLayout());
  tosActionComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  repositoryComposite.setBackground(parent.getBackground());
  FormData data;
  manageProjectsButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButton.setBackground(tosActionComposite.getBackground());
  manageProjectsButton.setText(Messages.getString(""String_Node_Str""));
  manageProjectsButton.setVisible(false);
  manageViewer=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  manageViewer.setContentProvider(new ArrayContentProvider());
  manageViewer.setInput(getManageElements());
  manageViewer.getCombo().setVisible(false);
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(100,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButton.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  data=new FormData();
  data.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(0,LEFTSPACE);
  data.bottom=new FormAttachment(manageProjectsButton,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  manageProjectLabel1.setVisible(false);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,HORIZONTAL_SPACE);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point pbtnPoint=manageProjectsButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - pbtnPoint.x);
  manageViewer.getControl().setLayoutData(data);
  manageProjectsButtonTemp=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButtonTemp.setBackground(tosActionComposite.getBackground());
  manageProjectsButtonTemp.setText(Messages.getString(""String_Node_Str""));
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButtonTemp.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  GC gc=new GC(manageProjectLabel1);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(manageProjectsButtonTemp,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  importCombo=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,10,SWT.RIGHT);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point btPoint=manageProjectsButtonTemp.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  importCombo.getCombo().setLayoutData(data);
  importCombo.setContentProvider(new ArrayContentProvider());
  List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
  for (int i=0; i < demoProjectList.size(); i++) {
    DemoProjectBean bean=(DemoProjectBean)demoProjectList.get(i);
    importCombo.add(bean.getProjectName());
  }
  importCombo.setSelection(new StructuredSelection(new Object[]{importCombo.getElementAt(0)}));
  manageProjectsButtonTemp.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      NewImportProjectWizard newPrjWiz=new NewImportProjectWizard();
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        final String newName=newPrjWiz.getName();
        final String technicalName=newPrjWiz.getTechnicalName();
        final String demoProjName=importCombo.getCombo().getItem(importCombo.getCombo().getSelectionIndex());
        ProgressDialog progressDialog=new ProgressDialog(getShell()){
          private IProgressMonitor monitorWrap;
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitorWrap=new EventLoopProgressMonitor(monitor);
            try {
              final List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
              DemoProjectBean demoProjectBean=null;
              for (              DemoProjectBean bean : demoProjectList) {
                if (bean.getProjectName().equals(demoProjName)) {
                  demoProjectBean=bean;
                  break;
                }
              }
              if (null == demoProjectBean) {
                throw new IOException(""String_Node_Str"");
              }
              String techName=demoProjectBean.getProjectName();
              String demoFilePath=demoProjectBean.getDemoProjectFilePath();
              EDemoProjectFileType demoProjectFileType=demoProjectBean.getDemoProjectFileType();
              String pluginID=org.talend.resources.ResourcesPlugin.PLUGIN_ID;
              if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
 else               if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
              Bundle bundle=Platform.getBundle(pluginID);
              URL url=FileLocator.resolve(bundle.getEntry(demoFilePath));
              String filePath=new Path(url.getFile()).toOSString();
              if (demoProjectFileType.getName().equalsIgnoreCase(""String_Node_Str"")) {
                ImportProjectsUtilities.importProjectAs(getShell(),newName,technicalName,filePath,monitorWrap);
              }
 else {
                ImportProjectsUtilities.importArchiveProjectAs(getShell(),newName,technicalName,filePath,monitorWrap);
              }
            }
 catch (            IOException e) {
              throw new InvocationTargetException(e);
            }
catch (            TarException e) {
              throw new InvocationTargetException(e);
            }
            monitorWrap.done();
          }
        }
;
        try {
          progressDialog.executeProcess();
        }
 catch (        InvocationTargetException e1) {
          MessageBoxExceptionHandler.process(e1.getTargetException(),getShell());
        }
catch (        InterruptedException e1) {
        }
        dialog.advanced();
      }
    }
  }
);
}","private void createTosActionArea(Composite parent){
  tosActionComposite=toolkit.createComposite(parent);
  tosActionComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosActionComposite.setLayout(new FormLayout());
  tosActionComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  repositoryComposite.setBackground(parent.getBackground());
  FormData data;
  manageProjectsButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButton.setBackground(tosActionComposite.getBackground());
  manageProjectsButton.setText(Messages.getString(""String_Node_Str""));
  manageProjectsButton.setVisible(false);
  manageViewer=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  manageViewer.setContentProvider(new ArrayContentProvider());
  manageViewer.setInput(getManageElements());
  manageViewer.getCombo().setVisible(false);
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(100,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButton.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  data=new FormData();
  data.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(0,LEFTSPACE);
  data.bottom=new FormAttachment(manageProjectsButton,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  manageProjectLabel1.setVisible(false);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,HORIZONTAL_SPACE);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point pbtnPoint=manageProjectsButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - pbtnPoint.x);
  manageViewer.getControl().setLayoutData(data);
  manageProjectsButtonTemp=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButtonTemp.setBackground(tosActionComposite.getBackground());
  manageProjectsButtonTemp.setText(Messages.getString(""String_Node_Str""));
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButtonTemp.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  GC gc=new GC(manageProjectLabel1);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.left=new FormAttachment(10,HORIZONTAL_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(manageProjectsButtonTemp,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  importCombo=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,10,SWT.RIGHT);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point btPoint=manageProjectsButtonTemp.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  importCombo.getCombo().setLayoutData(data);
  importCombo.setContentProvider(new ArrayContentProvider());
  List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
  for (int i=0; i < demoProjectList.size(); i++) {
    DemoProjectBean bean=(DemoProjectBean)demoProjectList.get(i);
    importCombo.add(bean.getProjectName());
  }
  importCombo.setSelection(new StructuredSelection(new Object[]{importCombo.getElementAt(0)}));
  manageProjectsButtonTemp.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      NewImportProjectWizard newPrjWiz=new NewImportProjectWizard();
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        final String newName=newPrjWiz.getName();
        final String technicalName=newPrjWiz.getTechnicalName();
        final String demoProjName=importCombo.getCombo().getItem(importCombo.getCombo().getSelectionIndex());
        ProgressDialog progressDialog=new ProgressDialog(getShell()){
          private IProgressMonitor monitorWrap;
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitorWrap=new EventLoopProgressMonitor(monitor);
            try {
              final List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
              DemoProjectBean demoProjectBean=null;
              for (              DemoProjectBean bean : demoProjectList) {
                if (bean.getProjectName().equals(demoProjName)) {
                  demoProjectBean=bean;
                  break;
                }
              }
              if (null == demoProjectBean) {
                throw new IOException(""String_Node_Str"");
              }
              String techName=demoProjectBean.getProjectName();
              String demoFilePath=demoProjectBean.getDemoProjectFilePath();
              EDemoProjectFileType demoProjectFileType=demoProjectBean.getDemoProjectFileType();
              String pluginID=org.talend.resources.ResourcesPlugin.PLUGIN_ID;
              if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
 else               if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
              Bundle bundle=Platform.getBundle(pluginID);
              URL url=FileLocator.resolve(bundle.getEntry(demoFilePath));
              String filePath=new Path(url.getFile()).toOSString();
              if (demoProjectFileType.getName().equalsIgnoreCase(""String_Node_Str"")) {
                ImportProjectsUtilities.importProjectAs(getShell(),newName,technicalName,filePath,monitorWrap);
              }
 else {
                ImportProjectsUtilities.importArchiveProjectAs(getShell(),newName,technicalName,filePath,monitorWrap);
              }
            }
 catch (            IOException e) {
              throw new InvocationTargetException(e);
            }
catch (            TarException e) {
              throw new InvocationTargetException(e);
            }
            monitorWrap.done();
          }
        }
;
        try {
          progressDialog.executeProcess();
        }
 catch (        InvocationTargetException e1) {
          MessageBoxExceptionHandler.process(e1.getTargetException(),getShell());
        }
catch (        InterruptedException e1) {
        }
        dialog.advanced();
      }
    }
  }
);
}",0.9997171545750247
124017,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT && node.getChildren().isEmpty()) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}",0.7207977207977208
124018,"@Override public JobScriptsManager createJobScriptsManager(){
  Map<ExportChoice,Object> exportChoiceMap=getExportChoiceMap();
  String launcher=(getCurrentExportType() == JobExportType.POJO) ? launcherCombo.getText() : ""String_Node_Str"";
  String context=(contextCombo == null || contextCombo.isDisposed()) ? ""String_Node_Str"" : contextCombo.getText();
  JobScriptsManager manager=JobScriptsManagerFactory.createManagerInstance(exportChoiceMap,context,launcher,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES,getCurrentExportType());
  manager.setDestinationPath(getDestinationValue());
  return manager;
}","@Override public JobScriptsManager createJobScriptsManager(){
  Map<ExportChoice,Object> exportChoiceMap=getExportChoiceMap();
  String launcher=(getCurrentExportType1() == JobExportType.POJO) ? launcherCombo.getText() : ""String_Node_Str"";
  String context=(contextCombo == null || contextCombo.isDisposed()) ? ""String_Node_Str"" : contextCombo.getText();
  JobScriptsManager manager=JobScriptsManagerFactory.createManagerInstance(exportChoiceMap,context,launcher,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES,getCurrentExportType1());
  manager.setDestinationPath(getDestinationValue());
  return manager;
}",0.9983498349834984
124019,"@Override protected void internalSaveWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    if (getCurrentExportType().equals(JobExportType.PETALSESB)) {
      String[] directoryNames=settings.getArray(PETALS_EXPORT_DESTINATIONS);
      if (directoryNames == null)       directoryNames=new String[0];
      directoryNames=addToHistory(directoryNames,saDestinationFilePath);
      settings.put(PETALS_EXPORT_DESTINATIONS,directoryNames);
      return;
    }
    String[] directoryNames=new String[1];
    String destinationValue=getDestinationValue();
    if (destinationValue != null) {
      destinationValue=destinationValue.substring(0,destinationValue.lastIndexOf(File.separator));
    }
    directoryNames[0]=destinationValue;
    settings.put(STORE_EXPORTTYPE_ID,getCurrentExportType().toString());
    settings.put(STORE_DESTINATION_NAMES_ID,directoryNames);
    if (getCurrentExportType().equals(JobExportType.OSGI)) {
      return;
    }
    if (contextButton != null) {
      settings.put(STORE_CONTEXT_ID,contextButton.getSelection());
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      settings.put(STORE_SOURCE_ID,jobScriptButton.getSelection());
    }
    if (applyToChildrenButton != null) {
      settings.put(APPLY_TO_CHILDREN_ID,applyToChildrenButton.getSelection());
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      settings.put(STORE_JOB_ID,jobItemButton.getSelection());
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      settings.put(STORE_DEPENDENCIES_ID,exportDependencies.getSelection());
    }
    if (getCurrentExportType().equals(JobExportType.POJO)) {
      settings.put(STORE_SHELL_LAUNCHER_ID,shellLauncherButton.getSelection());
      settings.put(STORE_SYSTEM_ROUTINE_ID,systemRoutineButton.getSelection());
      settings.put(STORE_USER_ROUTINE_ID,userRoutineButton.getSelection());
      settings.put(STORE_MODEL_ID,modelButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
      return;
    }
 else     if (getCurrentExportType().equals(JobExportType.WSZIP)) {
      settings.put(STORE_WEBXML_ID,webXMLButton.getSelection());
      settings.put(STORE_CONFIGFILE_ID,configFileButton.getSelection());
      settings.put(STORE_AXISLIB_ID,axisLibButton.getSelection());
      settings.put(STORE_WSDD_ID,wsddButton.getSelection());
      settings.put(STORE_WSDL_ID,wsdlButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
    }
  }
}","@Override protected void internalSaveWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    if (getCurrentExportType1().equals(JobExportType.PETALSESB)) {
      String[] directoryNames=settings.getArray(PETALS_EXPORT_DESTINATIONS);
      if (directoryNames == null)       directoryNames=new String[0];
      directoryNames=addToHistory(directoryNames,saDestinationFilePath);
      settings.put(PETALS_EXPORT_DESTINATIONS,directoryNames);
      return;
    }
    String[] directoryNames=new String[1];
    String destinationValue=getDestinationValue();
    if (destinationValue != null) {
      destinationValue=destinationValue.substring(0,destinationValue.lastIndexOf(File.separator));
    }
    directoryNames[0]=destinationValue;
    settings.put(STORE_EXPORTTYPE_ID,getCurrentExportType1().toString());
    settings.put(STORE_DESTINATION_NAMES_ID,directoryNames);
    if (getCurrentExportType1().equals(JobExportType.OSGI)) {
      return;
    }
    if (contextButton != null) {
      settings.put(STORE_CONTEXT_ID,contextButton.getSelection());
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      settings.put(STORE_SOURCE_ID,jobScriptButton.getSelection());
    }
    if (applyToChildrenButton != null) {
      settings.put(APPLY_TO_CHILDREN_ID,applyToChildrenButton.getSelection());
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      settings.put(STORE_JOB_ID,jobItemButton.getSelection());
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      settings.put(STORE_DEPENDENCIES_ID,exportDependencies.getSelection());
    }
    if (getCurrentExportType1().equals(JobExportType.POJO)) {
      settings.put(STORE_SHELL_LAUNCHER_ID,shellLauncherButton.getSelection());
      settings.put(STORE_SYSTEM_ROUTINE_ID,systemRoutineButton.getSelection());
      settings.put(STORE_USER_ROUTINE_ID,userRoutineButton.getSelection());
      settings.put(STORE_MODEL_ID,modelButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
      return;
    }
 else     if (getCurrentExportType1().equals(JobExportType.WSZIP)) {
      settings.put(STORE_WEBXML_ID,webXMLButton.getSelection());
      settings.put(STORE_CONFIGFILE_ID,configFileButton.getSelection());
      settings.put(STORE_AXISLIB_ID,axisLibButton.getSelection());
      settings.put(STORE_WSDD_ID,wsddButton.getSelection());
      settings.put(STORE_WSDL_ID,wsdlButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
    }
  }
}",0.9990251511015792
124020,"protected void restoreWidgetValuesForWS(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    webXMLButton.setSelection(settings.getBoolean(STORE_WEBXML_ID));
    configFileButton.setSelection(settings.getBoolean(STORE_CONFIGFILE_ID));
    axisLibButton.setSelection(settings.getBoolean(STORE_AXISLIB_ID));
    wsddButton.setSelection(settings.getBoolean(STORE_WSDD_ID));
    wsdlButton.setSelection(settings.getBoolean(STORE_WSDL_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    if (chkButton.isVisible()) {
      zipOption=String.valueOf(chkButton.getSelection());
    }
 else {
      zipOption=""String_Node_Str"";
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","protected void restoreWidgetValuesForWS(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    webXMLButton.setSelection(settings.getBoolean(STORE_WEBXML_ID));
    configFileButton.setSelection(settings.getBoolean(STORE_CONFIGFILE_ID));
    axisLibButton.setSelection(settings.getBoolean(STORE_AXISLIB_ID));
    wsddButton.setSelection(settings.getBoolean(STORE_WSDD_ID));
    wsdlButton.setSelection(settings.getBoolean(STORE_WSDL_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    if (chkButton.isVisible()) {
      zipOption=String.valueOf(chkButton.getSelection());
    }
 else {
      zipOption=""String_Node_Str"";
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9677083333333332
124021,"/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  JobExportType jobExportType=getCurrentExportType();
switch (jobExportType) {
case WSWAR:
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  break;
case JBOSSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case OSGI:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case PETALSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
default :
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
}
if (jobExportType.equals(JobExportType.PETALSESB)) {
IPath destPath=new Path(saDestinationFilePath);
String fileName, directory;
if (destPath.toFile().isDirectory()) {
fileName=getPetalsDefaultSaName();
directory=destPath.toOSString();
}
 else {
fileName=destPath.lastSegment();
directory=destPath.removeLastSegments(1).toOSString();
}
dialog.setFileName(fileName);
dialog.setFilterPath(directory);
}
 else {
dialog.setText(""String_Node_Str"");
dialog.setFileName((String)getDefaultFileName().get(0));
String currentSourceString=getDestinationValue();
int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
if (lastSeparatorIndex != -1) {
dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
}
}
String selectedFileName=dialog.open();
if (selectedFileName == null) {
return;
}
if (!selectedFileName.endsWith(getOutputSuffix())) selectedFileName+=getOutputSuffix();
if (selectedFileName != null && !selectedFileName.endsWith(getSelectedJobVersion() + getOutputSuffix())) {
String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
File file=new File(b);
String str=file.getName();
String s=(String)getDefaultFileName().get(0);
if (str.equals(s)) {
selectedFileName=b + ((JobExportType.OSGI.equals(jobExportType)) ? ""String_Node_Str"" : ""String_Node_Str"") + getDefaultFileName().get(1)+ getOutputSuffix();
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
if (selectedFileName != null) {
setErrorMessage(null);
saDestinationFilePath=selectedFileName;
setDestinationValue(selectedFileName);
if (getDialogSettings() != null) {
IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
if (section == null) {
section=getDialogSettings().addNewSection(DESTINATION_FILE);
}
section.put(DESTINATION_FILE,selectedFileName);
}
}
}","/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  JobExportType jobExportType=getCurrentExportType1();
switch (jobExportType) {
case WSWAR:
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  break;
case JBOSSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case OSGI:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case PETALSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
default :
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
}
if (jobExportType.equals(JobExportType.PETALSESB)) {
IPath destPath=new Path(saDestinationFilePath);
String fileName, directory;
if (destPath.toFile().isDirectory()) {
fileName=getPetalsDefaultSaName();
directory=destPath.toOSString();
}
 else {
fileName=destPath.lastSegment();
directory=destPath.removeLastSegments(1).toOSString();
}
dialog.setFileName(fileName);
dialog.setFilterPath(directory);
}
 else {
dialog.setText(""String_Node_Str"");
dialog.setFileName((String)getDefaultFileName().get(0));
String currentSourceString=getDestinationValue();
int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
if (lastSeparatorIndex != -1) {
dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
}
}
String selectedFileName=dialog.open();
if (selectedFileName == null) {
return;
}
if (!selectedFileName.endsWith(getOutputSuffix())) selectedFileName+=getOutputSuffix();
if (selectedFileName != null && !selectedFileName.endsWith(getSelectedJobVersion() + getOutputSuffix())) {
String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
File file=new File(b);
String str=file.getName();
String s=(String)getDefaultFileName().get(0);
if (str.equals(s)) {
if (getDefaultFileName().get(1) != null && !""String_Node_Str"".equals(getDefaultFileName().get(1))) {
selectedFileName=b + ((JobExportType.OSGI.equals(jobExportType)) ? ""String_Node_Str"" : ""String_Node_Str"") + getDefaultFileName().get(1)+ getOutputSuffix();
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
if (selectedFileName != null) {
setErrorMessage(null);
saDestinationFilePath=selectedFileName;
setDestinationValue(selectedFileName);
if (getDialogSettings() != null) {
IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
if (section == null) {
section=getDialogSettings().addNewSection(DESTINATION_FILE);
}
section.put(DESTINATION_FILE,selectedFileName);
}
}
}",0.9713221601489758
124022,"protected void createExportTypeGroup(Composite parent){
  Group optionsGroup=new Group(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(Messages.getString(""String_Node_Str""));
  optionsGroup.setFont(parent.getFont());
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  left.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,true,false));
  left.setLayout(new GridLayout(3,false));
  Label label=new Label(left,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  exportTypeCombo=new Combo(left,SWT.PUSH);
  GridData gd=new GridData();
  gd.horizontalSpan=1;
  exportTypeCombo.setLayoutData(gd);
  for (  JobExportType exportType : JobExportType.values()) {
    if (!Boolean.getBoolean(""String_Node_Str"" + exportType.toString() + ""String_Node_Str"")) {
      exportTypeCombo.add(exportType.label);
    }
  }
  exportTypeCombo.setText(getCurrentExportType().label);
  if (exportTypeFixed != null) {
    left.setVisible(false);
    optionsGroup.setVisible(false);
    exportTypeCombo.setText(exportTypeFixed.label);
  }
  chkButton=new Button(left,SWT.CHECK);
  chkButton.setText(Messages.getString(""String_Node_Str""));
  JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
  if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.PETALSESB) || comboType.equals(JobExportType.OSGI)) {
    chkButton.setVisible(false);
    zipOption=null;
  }
 else {
    chkButton.setVisible(true);
    zipOption=String.valueOf(chkButton.getSelection());
  }
  chkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      chkButton.setSelection(chkButton.getSelection());
      zipOption=String.valueOf(chkButton.getSelection());
    }
  }
);
  exportTypeCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      destinationNameFieldInnerComposite.dispose();
      GridLayout layout=new GridLayout();
      destinationNameFieldInnerComposite=new Composite(destinationNameFieldComposite,SWT.NONE);
      GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
      destinationNameFieldInnerComposite.setLayoutData(gridData);
      destinationNameFieldInnerComposite.setLayout(layout);
      createDestinationGroup(destinationNameFieldInnerComposite);
      destinationNameFieldComposite.layout();
      optionsGroupComposite.dispose();
      createOptionsGroupButtons(pageComposite);
      pageComposite.layout();
      JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
      if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.OSGI)) {
        chkButton.setVisible(false);
        zipOption=null;
      }
 else {
        chkButton.setVisible(true);
        zipOption=String.valueOf(chkButton.getSelection());
      }
      checkExport();
    }
  }
);
}","protected void createExportTypeGroup(Composite parent){
  Group optionsGroup=new Group(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(Messages.getString(""String_Node_Str""));
  optionsGroup.setFont(parent.getFont());
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  left.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,true,false));
  left.setLayout(new GridLayout(3,false));
  Label label=new Label(left,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  exportTypeCombo=new Combo(left,SWT.PUSH);
  GridData gd=new GridData();
  gd.horizontalSpan=1;
  exportTypeCombo.setLayoutData(gd);
  for (  JobExportType exportType : JobExportType.values()) {
    if (!Boolean.getBoolean(""String_Node_Str"" + exportType.toString() + ""String_Node_Str"")) {
      exportTypeCombo.add(exportType.label);
    }
  }
  exportTypeCombo.setText(getCurrentExportType1().label);
  if (exportTypeFixed != null) {
    left.setVisible(false);
    optionsGroup.setVisible(false);
    exportTypeCombo.setText(exportTypeFixed.label);
  }
  chkButton=new Button(left,SWT.CHECK);
  chkButton.setText(Messages.getString(""String_Node_Str""));
  JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
  if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.PETALSESB) || comboType.equals(JobExportType.OSGI)) {
    chkButton.setVisible(false);
    zipOption=null;
  }
 else {
    chkButton.setVisible(true);
    zipOption=String.valueOf(chkButton.getSelection());
  }
  chkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      chkButton.setSelection(chkButton.getSelection());
      zipOption=String.valueOf(chkButton.getSelection());
    }
  }
);
  exportTypeCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      destinationNameFieldInnerComposite.dispose();
      GridLayout layout=new GridLayout();
      destinationNameFieldInnerComposite=new Composite(destinationNameFieldComposite,SWT.NONE);
      GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
      destinationNameFieldInnerComposite.setLayoutData(gridData);
      destinationNameFieldInnerComposite.setLayout(layout);
      createDestinationGroup(destinationNameFieldInnerComposite);
      destinationNameFieldComposite.layout();
      optionsGroupComposite.dispose();
      createOptionsGroupButtons(pageComposite);
      pageComposite.layout();
      JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
      if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.OSGI)) {
        chkButton.setVisible(false);
        zipOption=null;
      }
 else {
        chkButton.setVisible(true);
        zipOption=String.valueOf(chkButton.getSelection());
      }
      checkExport();
    }
  }
);
}",0.9998435789144376
124023,"@Override protected String getOutputSuffix(){
switch (getCurrentExportType()) {
case WSWAR:
    return ""String_Node_Str"";
case JBOSSESB:
  return ""String_Node_Str"";
case OSGI:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","@Override protected String getOutputSuffix(){
switch (getCurrentExportType1()) {
case WSWAR:
    return ""String_Node_Str"";
case JBOSSESB:
  return ""String_Node_Str"";
case OSGI:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9979296066252588
124024,"protected void restoreWidgetValuesForESB(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
    if (section == null) {
      section=getDialogSettings().addNewSection(DESTINATION_FILE);
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    }
    if (contextButton != null && !contextButton.isDisposed()) {
      contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    }
    if (applyToChildrenButton != null && !applyToChildrenButton.isDisposed()) {
      applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    }
    if (section.get(ESB_EXPORT_TYPE) != null) {
      esbTypeCombo.setText(section.get(ESB_EXPORT_TYPE));
      if (section.get(ESB_SERVICE_NAME) != null) {
        esbServiceName.setText(section.get(ESB_SERVICE_NAME));
      }
      if (section.get(ESB_CATEGORY) != null) {
        esbCategory.setText(section.get(ESB_CATEGORY));
      }
      if (section.get(QUERY_MESSAGE_NAME) != null) {
        esbQueueMessageName.setText(section.get(QUERY_MESSAGE_NAME));
      }
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","protected void restoreWidgetValuesForESB(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
    if (section == null) {
      section=getDialogSettings().addNewSection(DESTINATION_FILE);
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    }
    if (contextButton != null && !contextButton.isDisposed()) {
      contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    }
    if (applyToChildrenButton != null && !applyToChildrenButton.isDisposed()) {
      applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    }
    if (section.get(ESB_EXPORT_TYPE) != null) {
      esbTypeCombo.setText(section.get(ESB_EXPORT_TYPE));
      if (section.get(ESB_SERVICE_NAME) != null) {
        esbServiceName.setText(section.get(ESB_SERVICE_NAME));
      }
      if (section.get(ESB_CATEGORY) != null) {
        esbCategory.setText(section.get(ESB_CATEGORY));
      }
      if (section.get(QUERY_MESSAGE_NAME) != null) {
        esbQueueMessageName.setText(section.get(QUERY_MESSAGE_NAME));
      }
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9753231492361928
124025,"protected void restoreWidgetValuesForOSGI(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestinationForOSGI();
    }
  }
 else {
    setDefaultDestinationForOSGI();
  }
}","protected void restoreWidgetValuesForOSGI(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestinationForOSGI();
    }
  }
 else {
    setDefaultDestinationForOSGI();
  }
}",0.910144927536232
124026,"protected void restoreWidgetValuesForPOJO(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    shellLauncherButton.setSelection(settings.getBoolean(STORE_SHELL_LAUNCHER_ID));
    systemRoutineButton.setSelection(settings.getBoolean(STORE_SYSTEM_ROUTINE_ID));
    userRoutineButton.setSelection(settings.getBoolean(STORE_USER_ROUTINE_ID));
    modelButton.setSelection(settings.getBoolean(STORE_MODEL_ID));
    jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setEnabled(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    zipOption=String.valueOf(chkButton.getSelection());
  }
  launcherCombo.setItems(JobScriptsManager.getLauncher());
  if (JobScriptsManager.getLauncher().length > 0) {
    launcherCombo.select(0);
  }
  if (getProcessItem() != null && contextCombo != null) {
    ProcessItem item=getProcessItem();
    try {
      String id=item.getProperty().getId();
      IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
      item=(ProcessItem)lastVersion.getProperty().getItem();
    }
 catch (    PersistenceException e) {
      throw new RuntimeException(e);
    }
    List<String> contextNames;
    contextNames=getJobContexts(item);
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","protected void restoreWidgetValuesForPOJO(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    shellLauncherButton.setSelection(settings.getBoolean(STORE_SHELL_LAUNCHER_ID));
    systemRoutineButton.setSelection(settings.getBoolean(STORE_SYSTEM_ROUTINE_ID));
    userRoutineButton.setSelection(settings.getBoolean(STORE_USER_ROUTINE_ID));
    modelButton.setSelection(settings.getBoolean(STORE_MODEL_ID));
    jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setEnabled(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    zipOption=String.valueOf(chkButton.getSelection());
  }
  launcherCombo.setItems(JobScriptsManager.getLauncher());
  if (JobScriptsManager.getLauncher().length > 0) {
    launcherCombo.select(0);
  }
  if (getProcessItem() != null && contextCombo != null) {
    ProcessItem item=getProcessItem();
    try {
      String id=item.getProperty().getId();
      IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
      item=(ProcessItem)lastVersion.getProperty().getItem();
    }
 catch (    PersistenceException e) {
      throw new RuntimeException(e);
    }
    List<String> contextNames;
    contextNames=getJobContexts(item);
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9728546409807356
124027,"protected void createOptionsGroupButtons(Composite parent){
  GridLayout layout=new GridLayout();
  optionsGroupComposite=new Composite(parent,SWT.NONE);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
  gridData.minimumHeight=200;
  optionsGroupComposite.setLayoutData(gridData);
  optionsGroupComposite.setLayout(layout);
  Group optionsGroup=new Group(optionsGroupComposite,SWT.NONE);
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(IDEWorkbenchMessages.WizardExportPage_options);
  optionsGroup.setFont(parent.getFont());
  Font font=optionsGroup.getFont();
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  gridData=new GridData(SWT.LEFT,SWT.TOP,true,false);
  left.setLayoutData(gridData);
  left.setLayout(new GridLayout(3,true));
switch (getCurrentExportType()) {
case POJO:
    createOptions(left,font);
  restoreWidgetValuesForPOJO();
break;
case JBOSSESB:
createOptionsForJbossESB(left,font);
restoreWidgetValuesForESB();
break;
case PETALSESB:
createOptionsforPetalsESB(left,font);
restoreWidgetValuesForPetalsESB();
restoreWidgetValues();
break;
case OSGI:
createOptionsForOSGIESB(left,font);
restoreWidgetValuesForOSGI();
break;
default :
createOptionsForWS(left,font);
break;
}
}","protected void createOptionsGroupButtons(Composite parent){
  GridLayout layout=new GridLayout();
  optionsGroupComposite=new Composite(parent,SWT.NONE);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
  gridData.minimumHeight=200;
  optionsGroupComposite.setLayoutData(gridData);
  optionsGroupComposite.setLayout(layout);
  Group optionsGroup=new Group(optionsGroupComposite,SWT.NONE);
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(IDEWorkbenchMessages.WizardExportPage_options);
  optionsGroup.setFont(parent.getFont());
  Font font=optionsGroup.getFont();
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  gridData=new GridData(SWT.LEFT,SWT.TOP,true,false);
  left.setLayoutData(gridData);
  left.setLayout(new GridLayout(3,true));
switch (getCurrentExportType1()) {
case POJO:
    createOptions(left,font);
  restoreWidgetValuesForPOJO();
break;
case JBOSSESB:
createOptionsForJbossESB(left,font);
restoreWidgetValuesForESB();
break;
case PETALSESB:
createOptionsforPetalsESB(left,font);
restoreWidgetValuesForPetalsESB();
restoreWidgetValues();
break;
case OSGI:
createOptionsForOSGIESB(left,font);
restoreWidgetValuesForOSGI();
break;
default :
createOptionsForWS(left,font);
break;
}
}",0.9996450124245652
124028,"@Override public boolean checkExport(){
  setErrorMessage(null);
  if (!super.checkExport()) {
    return false;
  }
  if (getCurrentExportType().equals(JobExportType.PETALSESB)) {
    chkButton.setVisible(false);
    zipOption=null;
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    validateOptionsGroup();
  }
  if (getCurrentExportType().equals(JobExportType.JBOSSESB)) {
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    String requiredJar=""String_Node_Str"";
    List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
    for (    ModuleNeeded current : toCheck) {
      if (requiredJar.equals(current.getModuleName())) {
        if (current.getStatus() == ELibraryInstallStatus.NOT_INSTALLED) {
          StringBuilder buff=new StringBuilder();
          buff.append(Messages.getString(""String_Node_Str""));
          buff.append(Messages.getString(""String_Node_Str""));
          setErrorMessage(buff.toString());
          break;
        }
      }
    }
  }
  if (getCurrentExportType().equals(JobExportType.OSGI)) {
    if (isMultiNodes()) {
      setErrorMessage(""String_Node_Str"");
    }
  }
  if (getCheckNodes().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
  boolean noError=getErrorMessage() == null;
  setPageComplete(noError);
  return noError;
}","@Override public boolean checkExport(){
  setErrorMessage(null);
  if (!super.checkExport()) {
    return false;
  }
  if (getCurrentExportType1().equals(JobExportType.PETALSESB)) {
    chkButton.setVisible(false);
    zipOption=null;
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    validateOptionsGroup();
  }
  if (getCurrentExportType1().equals(JobExportType.JBOSSESB)) {
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    String requiredJar=""String_Node_Str"";
    List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
    for (    ModuleNeeded current : toCheck) {
      if (requiredJar.equals(current.getModuleName())) {
        if (current.getStatus() == ELibraryInstallStatus.NOT_INSTALLED) {
          StringBuilder buff=new StringBuilder();
          buff.append(Messages.getString(""String_Node_Str""));
          buff.append(Messages.getString(""String_Node_Str""));
          setErrorMessage(buff.toString());
          break;
        }
      }
    }
  }
  if (getCurrentExportType1().equals(JobExportType.OSGI)) {
    if (isMultiNodes()) {
      setErrorMessage(""String_Node_Str"");
    }
  }
  if (getCheckNodes().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
  boolean noError=getErrorMessage() == null;
  setPageComplete(noError);
  return noError;
}",0.9989320042719828
124029,"private String initExpression(DbMapComponent component,ExternalDbMapEntry dbMapEntry){
  String expression=dbMapEntry.getExpression();
  if (expression != null) {
    List<Map<String,String>> itemNameList=null;
    MapExpressionParser mapParser1=new MapExpressionParser(""String_Node_Str"");
    itemNameList=mapParser1.parseInTableEntryLocations(expression);
    if (itemNameList == null || itemNameList.isEmpty()) {
      MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
      itemNameList=mapParser2.parseInTableEntryLocations(expression);
    }
    for (    Map<String,String> itemNamemap : itemNameList) {
      Set<Entry<String,String>> set=itemNamemap.entrySet();
      Iterator<Entry<String,String>> ite=set.iterator();
      while (ite.hasNext()) {
        Entry<String,String> entry=ite.next();
        String columnValue=entry.getKey();
        String tableValue=entry.getValue();
        List<IConnection> inputConnections=(List<IConnection>)component.getIncomingConnections();
        if (inputConnections == null) {
          return expression;
        }
        for (        IConnection iconn : inputConnections) {
          IMetadataTable metadataTable=iconn.getMetadataTable();
          String tName=iconn.getName();
          if (tableValue.equals(tName) && metadataTable != null) {
            List<IMetadataColumn> lColumn=metadataTable.getListColumns();
            String tableName=metadataTable.getTableName();
            String tableColneName=tableName;
            tableColneName=MetadataToolHelper.validateTableName(tableColneName);
            if (tableValue.contains(""String_Node_Str"") && tableName != null) {
              MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
              List<Map<String,String>> tableNameList=mapParser2.parseInTableEntryLocations(tableValue);
              for (              Map<String,String> tableNameMap : tableNameList) {
                Set<Entry<String,String>> setTable=tableNameMap.entrySet();
                Iterator<Entry<String,String>> iteTable=setTable.iterator();
                while (iteTable.hasNext()) {
                  Entry<String,String> tableEntry=iteTable.next();
                  String tableLabel=tableEntry.getKey();
                  String schemaValue=tableEntry.getValue();
                  if (tableLabel.equals(metadataTable.getLabel()) && tableColneName.equals(tableLabel)) {
                    tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                    expression=expression.replaceFirst(tableValue,schemaValue + ""String_Node_Str"" + tableName);
                  }
                }
              }
            }
 else             if (tableName != null) {
              if (tableValue.equals(metadataTable.getLabel()) && tableColneName.equals(tableValue)) {
                tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                expression=expression.replaceFirst(tableValue,tableName);
              }
            }
            for (            IMetadataColumn co : lColumn) {
              if (columnValue.equals(co.getLabel())) {
                String oriName=co.getOriginalDbColumnName();
                oriName=oriName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                expression=expression.replaceFirst(""String_Node_Str"" + co.getLabel(),""String_Node_Str"" + oriName);
              }
            }
          }
        }
      }
    }
  }
  return expression;
}","private String initExpression(DbMapComponent component,ExternalDbMapEntry dbMapEntry){
  String expression=dbMapEntry.getExpression();
  boolean flag=false;
  if (expression != null) {
    List<Map<String,String>> itemNameList=null;
    MapExpressionParser mapParser1=new MapExpressionParser(""String_Node_Str"");
    itemNameList=mapParser1.parseInTableEntryLocations(expression);
    if (itemNameList == null || itemNameList.isEmpty()) {
      MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
      itemNameList=mapParser2.parseInTableEntryLocations(expression);
    }
    for (    Map<String,String> itemNamemap : itemNameList) {
      Set<Entry<String,String>> set=itemNamemap.entrySet();
      Iterator<Entry<String,String>> ite=set.iterator();
      while (ite.hasNext()) {
        Entry<String,String> entry=ite.next();
        String columnValue=entry.getKey();
        String tableValue=entry.getValue();
        List<IConnection> inputConnections=(List<IConnection>)component.getIncomingConnections();
        if (inputConnections == null) {
          return expression;
        }
        for (        IConnection iconn : inputConnections) {
          IMetadataTable metadataTable=iconn.getMetadataTable();
          String tName=iconn.getName();
          if (metadataTable != null && metadataTable.getLabel().equals(tName)) {
            List<IMetadataColumn> lColumn=metadataTable.getListColumns();
            String tableName=metadataTable.getTableName();
            String tableColneName=tableName;
            tableColneName=MetadataToolHelper.validateTableName(tableColneName);
            if (tableValue.contains(""String_Node_Str"") && tableName != null) {
              MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
              List<Map<String,String>> tableNameList=mapParser2.parseInTableEntryLocations(tableValue);
              for (              Map<String,String> tableNameMap : tableNameList) {
                Set<Entry<String,String>> setTable=tableNameMap.entrySet();
                Iterator<Entry<String,String>> iteTable=setTable.iterator();
                while (iteTable.hasNext()) {
                  Entry<String,String> tableEntry=iteTable.next();
                  String tableLabel=tableEntry.getKey();
                  String schemaValue=tableEntry.getValue();
                  if (tableLabel.equals(metadataTable.getLabel()) && tableColneName.equals(tableLabel)) {
                    tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                    expression=expression.replaceFirst(tableValue,schemaValue + ""String_Node_Str"" + tableName);
                  }
                }
              }
            }
 else             if (tableName != null) {
              if (tableValue.equals(metadataTable.getLabel()) && tableColneName.equals(tableValue)) {
                tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                expression=expression.replaceFirst(tableValue,tableName);
              }
            }
            for (            IMetadataColumn co : lColumn) {
              if (columnValue.equals(co.getLabel())) {
                String oriName=co.getOriginalDbColumnName();
                oriName=oriName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                if (!oriName.equals(co.getLabel())) {
                  Set<Dbms> types=MetadataTalendType.getDbmsSet();
                  Iterator iterator=types.iterator();
                  EDatabaseTypeName type=null;
                  while (iterator.hasNext()) {
                    Dbms dbms=(Dbms)iterator.next();
                    if (dbms.getId().equals(metadataTable.getDbms())) {
                      type=EDatabaseTypeName.getTypeFromDbType(dbms.getProduct());
                      flag=true;
                      break;
                    }
                  }
                  oriName=TalendQuoteUtils.getQuoteByDBType(type) + oriName + TalendQuoteUtils.getQuoteByDBType(type);
                }
                expression=expression.replaceFirst(""String_Node_Str"" + co.getLabel(),""String_Node_Str"" + oriName);
              }
            }
          }
        }
      }
    }
  }
  if (flag) {
    expression=TalendQuoteUtils.checkStringQuotationMarks(expression);
  }
  return expression;
}",0.8827357407171111
124030,"/** 
 * DOC smallet Comment method ""afterImportAs"".
 * @param newName
 * @param technicalName
 * @throws InvocationTargetException
 */
private static void afterImportAs(String newName,String technicalName) throws InvocationTargetException {
  final IWorkspace workspace=org.eclipse.core.resources.ResourcesPlugin.getWorkspace();
  IContainer containers=(IProject)workspace.getRoot().findMember(new Path(technicalName));
  IResource file2=containers.findMember(IProjectDescription.DESCRIPTION_FILE_NAME);
  try {
    FilesUtils.replaceInFile(""String_Node_Str"",file2.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
    IResource file3=containers.findMember(OLD_TALEND_PROJECT_FILE_NAME);
    if (file3 == null || !file3.exists()) {
      file3=containers.findMember(TALEND_PROJECT_FILE_NAME);
    }
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + newName + ""String_Node_Str"");
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
}","/** 
 * DOC smallet Comment method ""afterImportAs"".
 * @param newName
 * @param technicalName
 * @throws InvocationTargetException
 */
private static void afterImportAs(String newName,String technicalName) throws InvocationTargetException {
  final IWorkspace workspace=org.eclipse.core.resources.ResourcesPlugin.getWorkspace();
  IContainer containers=(IProject)workspace.getRoot().findMember(new Path(technicalName));
  IResource file2=containers.findMember(IProjectDescription.DESCRIPTION_FILE_NAME);
  try {
    FilesUtils.replaceInFile(""String_Node_Str"",file2.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
    IResource file3=containers.findMember(OLD_TALEND_PROJECT_FILE_NAME);
    if (file3 == null || !file3.exists()) {
      file3=containers.findMember(TALEND_PROJECT_FILE_NAME);
    }
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + newName + ""String_Node_Str"");
    replaceInFile(""String_Node_Str"",file3.getLocation().toOSString(),""String_Node_Str"" + technicalName + ""String_Node_Str"");
    final IProject project=workspace.getRoot().getProject(technicalName);
    XmiResourceManager xmiManager=new XmiResourceManager();
    try {
      final Project loadProject=xmiManager.loadProject(project);
      loadProject.setLocal(true);
      xmiManager.saveResource(loadProject.eResource());
    }
 catch (    PersistenceException e) {
    }
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
}",0.8688462983840661
124031,"private boolean collectProjectFilesFromDirectory(Collection files,File directory,Set directoriesVisited){
  File[] contents=directory.listFiles();
  if (contents == null)   return false;
  if (directoriesVisited == null) {
    directoriesVisited=new HashSet();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
    }
  }
  final String dotProject=""String_Node_Str"";
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (contents[i].isDirectory()) {
      if (!contents[i].getName().equals(METADATA_FOLDER)) {
        try {
          String canonicalPath=contents[i].getCanonicalPath();
          if (!directoriesVisited.add(canonicalPath)) {
            continue;
          }
        }
 catch (        IOException exception) {
          StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
        }
        collectProjectFilesFromDirectory(files,contents[i],directoriesVisited);
      }
    }
  }
  return true;
}","private boolean collectProjectFilesFromDirectory(Collection files,File directory,Set directoriesVisited){
  File[] contents=directory.listFiles();
  if (contents == null)   return false;
  if (directoriesVisited == null) {
    directoriesVisited=new HashSet();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
    }
  }
  final String dotProject=TALEND_PROJECT;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (contents[i].isDirectory()) {
      if (!contents[i].getName().equals(METADATA_FOLDER)) {
        try {
          String canonicalPath=contents[i].getCanonicalPath();
          if (!directoriesVisited.add(canonicalPath)) {
            continue;
          }
        }
 catch (        IOException exception) {
          StatusManager.getManager().handle(StatusUtil.newStatus(IStatus.ERROR,exception.getLocalizedMessage(),exception));
        }
        collectProjectFilesFromDirectory(files,contents[i],directoriesVisited);
      }
    }
  }
  return true;
}",0.9891750653228816
124032,"private boolean collectProjectFilesFromProvider(Collection files,Object entry,int level){
  List children=structureProvider.getChildren(entry);
  if (children == null) {
    children=new ArrayList(1);
  }
  boolean isContainsFile=false;
  Iterator childrenEnum=children.iterator();
  for (int i=0; i < children.size(); i++) {
    Object child=children.get(i);
    if (!structureProvider.isFolder(child)) {
      String elementLabel=structureProvider.getLabel(child);
      if (elementLabel.equals(""String_Node_Str"")) {
        isContainsFile=true;
      }
    }
  }
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    if (structureProvider.isFolder(child)) {
      collectProjectFilesFromProvider(files,child,level + 1);
    }
    String elementLabel=structureProvider.getLabel(child);
    if (elementLabel.equals(""String_Node_Str"") && isContainsFile) {
      files.add(new TalendProjectRecord(child,entry,level));
    }
  }
  return true;
}","private boolean collectProjectFilesFromProvider(Collection files,Object entry,int level){
  List children=structureProvider.getChildren(entry);
  if (children == null) {
    children=new ArrayList(1);
  }
  boolean isContainsFile=false;
  Iterator childrenEnum=children.iterator();
  for (int i=0; i < children.size(); i++) {
    Object child=children.get(i);
    if (!structureProvider.isFolder(child)) {
      String elementLabel=structureProvider.getLabel(child);
      if (elementLabel.equals(TALEND_PROJECT)) {
        isContainsFile=true;
      }
    }
  }
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    if (structureProvider.isFolder(child)) {
      collectProjectFilesFromProvider(files,child,level + 1);
    }
    String elementLabel=structureProvider.getLabel(child);
    if (elementLabel.equals(""String_Node_Str"") && isContainsFile) {
      files.add(new TalendProjectRecord(child,entry,level));
    }
  }
  return true;
}",0.6469673405909798
124033,"/** 
 * DOC JKWANG Comment method ""isOracleAmazonStringContained"".
 * @param string
 * @return
 */
private static boolean isOracleAmazonStringContained(String dbType,String emfName){
  if (dbType != null && emfName != null && Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(dbType).matches()) {
    for (    String amazonString : ORACLE_AMAZON_STRING) {
      if (emfName.equals(amazonString)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC JKWANG Comment method ""isOracleAmazonStringContained"".
 * @param string
 * @return
 */
private static boolean isOracleAmazonStringContained(String dbType,String emfName){
  if (dbType != null && !dbType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName()) && emfName != null && Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(dbType).matches()) {
    for (    String amazonString : ORACLE_AMAZON_STRING) {
      if (emfName.equals(amazonString)) {
        return true;
      }
    }
  }
  return false;
}",0.933728981206726
124034,"private boolean checkItem(ItemRecord itemRecord,boolean overwrite){
  boolean result=false;
  try {
    Item item=itemRecord.getItem();
    if (item instanceof TDQItem) {
      return false;
    }
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    cache.initialize(itemType);
    boolean isAllowMultipleName=(itemType == ERepositoryObjectType.SQLPATTERNS || itemType == ERepositoryObjectType.METADATA_FILE_XML);
    String itemPath=null;
    if (item.getState() != null) {
      itemPath=item.getState().getPath();
    }
    boolean nameAvailable=true;
    IRepositoryViewObject itemWithSameId=null;
    IRepositoryViewObject itemWithSameName=null;
    for (    IRepositoryViewObject current : cache.getItemsFromRepository().get(itemType)) {
      if (itemRecord.getProperty().getLabel().equalsIgnoreCase(current.getLabel()) && itemRecord.getProperty().getId() != current.getId()) {
        if (!isAllowMultipleName || current.getPath().equals(itemPath)) {
          nameAvailable=false;
        }
        if (!nameAvailable) {
          itemWithSameName=current;
        }
      }
      if (itemRecord.getProperty().getId().equalsIgnoreCase(current.getId())) {
        itemWithSameId=current;
      }
    }
    itemRecord.setExistingItemWithSameId(itemWithSameId);
    boolean idAvailable=itemWithSameId == null;
    boolean isSystem=false;
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getRoutineItem())) {
      RoutineItem routineItem=(RoutineItem)item;
      if (item instanceof RoutineItem) {
        RoutineItem rItem=(RoutineItem)item;
        Set<String> set=routineExtModulesMap.get(rItem.getProperty().getId());
        if (set == null) {
          set=new HashSet<String>();
          routineExtModulesMap.put(rItem.getProperty().getId(),set);
        }
        for (        IMPORTType type : (List<IMPORTType>)rItem.getImports()) {
          set.add(type.getMODULE());
        }
      }
      if (routineItem.isBuiltIn()) {
        isSystem=true;
      }
    }
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getSQLPatternItem())) {
      SQLPatternItem sqlPatternItem=(SQLPatternItem)item;
      if (sqlPatternItem.isSystem()) {
        isSystem=true;
      }
    }
    if (isSystem) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return result;
    }
    if (nameAvailable) {
      if (idAvailable) {
        if (!isSystem) {
          result=true;
        }
      }
 else {
        itemRecord.setState(State.ID_EXISTED);
        result=true;
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (!isSystem && overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          result=true;
        }
      }
 else {
        itemRecord.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          result=true;
        }
        if (!isSystem && overwrite && !itemWithSameName.getProperty().getLabel().equals(itemWithSameId.getProperty().getLabel())) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          result=true;
        }
      }
      if (!result && !isSystem) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (result && overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
        result=false;
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return result;
}","private boolean checkItem(ItemRecord itemRecord,boolean overwrite){
  boolean result=false;
  try {
    Item item=itemRecord.getItem();
    if (item instanceof TDQItem) {
      return false;
    }
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    cache.initialize(itemType);
    boolean isAllowMultipleName=(itemType == ERepositoryObjectType.SQLPATTERNS || itemType == ERepositoryObjectType.METADATA_FILE_XML);
    String itemPath=null;
    if (item.getState() != null) {
      itemPath=item.getState().getPath();
    }
    boolean nameAvailable=true;
    IRepositoryViewObject itemWithSameId=null;
    IRepositoryViewObject itemWithSameName=null;
    for (    IRepositoryViewObject current : cache.getItemsFromRepository().get(itemType)) {
      if (itemRecord.getProperty().getLabel().equalsIgnoreCase(current.getLabel()) && itemRecord.getProperty().getId() != current.getId()) {
        if (!isAllowMultipleName || current.getPath().equals(itemPath)) {
          nameAvailable=false;
        }
        if (!nameAvailable) {
          itemWithSameName=current;
        }
      }
      if (itemRecord.getProperty().getId().equalsIgnoreCase(current.getId())) {
        itemWithSameId=current;
      }
    }
    itemRecord.setExistingItemWithSameId(itemWithSameId);
    boolean idAvailable=itemWithSameId == null;
    boolean isSystem=false;
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getRoutineItem())) {
      RoutineItem routineItem=(RoutineItem)item;
      if (item instanceof RoutineItem) {
        RoutineItem rItem=(RoutineItem)item;
        Set<String> set=routineExtModulesMap.get(rItem.getProperty().getId());
        if (set == null) {
          set=new HashSet<String>();
          routineExtModulesMap.put(rItem.getProperty().getId(),set);
        }
        for (        IMPORTType type : (List<IMPORTType>)rItem.getImports()) {
          set.add(type.getMODULE());
        }
      }
      if (routineItem.isBuiltIn()) {
        isSystem=true;
      }
    }
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getSQLPatternItem())) {
      SQLPatternItem sqlPatternItem=(SQLPatternItem)item;
      if (sqlPatternItem.isSystem()) {
        isSystem=true;
      }
    }
    if (isSystem) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return result;
    }
    if (nameAvailable) {
      if (idAvailable) {
        if (!isSystem) {
          result=true;
        }
      }
 else {
        itemRecord.setState(State.ID_EXISTED);
        result=true;
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (!isSystem && overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          result=true;
        }
      }
 else {
        itemRecord.setState(State.NAME_EXISTED);
        if (overwrite) {
          result=true;
        }
        if (!isSystem && overwrite && !itemWithSameName.getProperty().getLabel().equals(itemWithSameId.getProperty().getLabel())) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          itemRecord.setState(State.NAME_AND_ID_EXISTED);
          result=true;
        }
      }
      if (!result && !isSystem) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (result && overwrite && itemRecord.getState() == State.NAME_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
        result=false;
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return result;
}",0.9388150609080842
124035,"private void importItemRecord(ResourcesManager manager,ItemRecord itemRecord,boolean overwrite,IPath destinationPath,final Set<String> overwriteDeletedItems,String contentType,final IProgressMonitor monitor){
  monitor.subTask(Messages.getString(""String_Node_Str"") + itemRecord.getItemName());
  resolveItem(manager,itemRecord);
  int num=0;
  for (  Object obj : itemRecord.getResourceSet().getResources()) {
    if (!(obj instanceof PropertiesProjectResourceImpl)) {
      if (obj instanceof XMIResourceImpl) {
        num++;
        if (num > 2) {
          try {
            throw new InvocationTargetException(new PersistenceException(""String_Node_Str"" + itemRecord.getLabel() + ""String_Node_Str""));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
          return;
        }
      }
    }
  }
  final Item item=itemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=new Path(item.getState().getPath());
    if (destinationPath != null && itemType.name().equals(contentType)) {
      path=destinationPath.append(path);
    }
    try {
      repFactory.createParentFoldersRecursively(ProjectManager.getInstance().getCurrentProject(),itemType,path,true);
    }
 catch (    Exception e) {
      logError(e);
      path=new Path(""String_Node_Str"");
    }
    try {
      Item tmpItem=item;
      String id=itemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=itemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !itemRecord.isLocked() && (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED) && !deletedItems.contains(id)) {
        if (!overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (itemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || itemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          repFactory.forceDeleteObjectPhysical(lastVersion,itemRecord.getProperty().getVersion());
        }
        lastVersion=null;
      }
      User author=itemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      if (item instanceof JobletProcessItem) {
        hasJoblets=true;
      }
      if (tmpItem instanceof ProcessItem && !statAndLogsSettingsReloaded && !implicitSettingsReloaded) {
        ProcessItem processItem=(ProcessItem)tmpItem;
        ParametersType paType=processItem.getProcess().getParameters();
        boolean statsPSettingRemoved=false;
        if (itemRecord.isRemoveProjectStatslog()) {
          if (paType != null) {
            String paramName=""String_Node_Str"";
            EList listParamType=paType.getElementParameter();
            for (int j=0; j < listParamType.size(); j++) {
              ElementParameterType pType=(ElementParameterType)listParamType.get(j);
              if (pType != null && paramName.equals(pType.getName())) {
                pType.setValue(Boolean.FALSE.toString());
                statsPSettingRemoved=true;
                break;
              }
            }
          }
        }
        String statslogUsePSetting=null;
        String implicitUsePSetting=null;
        if (paType != null) {
          EList listParamType=paType.getElementParameter();
          for (int j=0; j < listParamType.size(); j++) {
            ElementParameterType pType=(ElementParameterType)listParamType.get(j);
            if (pType != null) {
              if (!statsPSettingRemoved && ""String_Node_Str"".equals(pType.getName())) {
                statslogUsePSetting=pType.getValue();
              }
              if (""String_Node_Str"".equals(pType.getName())) {
                implicitUsePSetting=pType.getValue();
              }
              if (statsPSettingRemoved && implicitUsePSetting != null || !statsPSettingRemoved && implicitUsePSetting != null && statslogUsePSetting != null) {
                break;
              }
            }
          }
        }
        if (statslogUsePSetting != null && Boolean.parseBoolean(statslogUsePSetting) && !statAndLogsSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          statAndLogsSettingsReloaded=true;
        }
        if (implicitUsePSetting != null && Boolean.parseBoolean(implicitUsePSetting) && !implicitSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          implicitSettingsReloaded=true;
        }
      }
      if (lastVersion == null || itemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !itemRecord.getMigrationTasksToApply().isEmpty();
        repFactory.create(tmpItem,path,true);
        if (isConnectionEmptyBeforeMigration) {
          InputStream is=manager.getStream(itemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
          try {
            URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
            URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
            URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
            OutputStream os=new FileOutputStream(fileURL.getFile());
            try {
              FileCopyUtils.copyStreams(is,os);
            }
  finally {
              os.close();
            }
          }
  finally {
            is.close();
          }
        }
 else {
          copyScreenshotFile(manager,itemRecord);
          boolean haveRef=copyReferenceFiles(manager,tmpItem,itemRecord.getPath());
          if (haveRef) {
            repFactory.save(tmpItem,true);
          }
        }
        repFactory.unloadResources(tmpItem.getProperty());
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        itemRecord.addError(e.getMessage());
        logError(e);
      }
      if (tmpItem != null) {
        RelationshipItemBuilder.getInstance().addOrUpdateItem(tmpItem,true);
        if (tmpItem.getState() != null) {
          if (itemType != null) {
            final Set<String> folders=restoreFolder.getFolders(itemType);
            if (folders != null) {
              for (              String folderPath : folders) {
                if (folderPath != null && folderPath.equals(path.toString())) {
                  FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
                  if (folderItem != null) {
                    folderItem.getState().setDeleted(false);
                    while (!(folderItem.getParent() instanceof Project)) {
                      folderItem=(FolderItem)folderItem.getParent();
                      if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                        break;
                      }
                      folderItem.getState().setDeleted(false);
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      itemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=itemRecord.getLabel();
  for (  Resource resource : itemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(itemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","private void importItemRecord(ResourcesManager manager,ItemRecord itemRecord,boolean overwrite,IPath destinationPath,final Set<String> overwriteDeletedItems,String contentType,final IProgressMonitor monitor){
  monitor.subTask(Messages.getString(""String_Node_Str"") + itemRecord.getItemName());
  resolveItem(manager,itemRecord);
  int num=0;
  for (  Object obj : itemRecord.getResourceSet().getResources()) {
    if (!(obj instanceof PropertiesProjectResourceImpl)) {
      if (obj instanceof XMIResourceImpl) {
        num++;
        if (num > 2) {
          try {
            throw new InvocationTargetException(new PersistenceException(""String_Node_Str"" + itemRecord.getLabel() + ""String_Node_Str""));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
          return;
        }
      }
    }
  }
  final Item item=itemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=new Path(item.getState().getPath());
    if (destinationPath != null && itemType.name().equals(contentType)) {
      path=destinationPath.append(path);
    }
    try {
      repFactory.createParentFoldersRecursively(ProjectManager.getInstance().getCurrentProject(),itemType,path,true);
    }
 catch (    Exception e) {
      logError(e);
      path=new Path(""String_Node_Str"");
    }
    try {
      Item tmpItem=item;
      String id=itemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=itemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !itemRecord.isLocked() && (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED) && !deletedItems.contains(id)) {
        if (!overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (itemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || itemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          repFactory.forceDeleteObjectPhysical(lastVersion,itemRecord.getProperty().getVersion());
        }
        lastVersion=null;
      }
      User author=itemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      if (item instanceof JobletProcessItem) {
        hasJoblets=true;
      }
      if (tmpItem instanceof ProcessItem && !statAndLogsSettingsReloaded && !implicitSettingsReloaded) {
        ProcessItem processItem=(ProcessItem)tmpItem;
        ParametersType paType=processItem.getProcess().getParameters();
        boolean statsPSettingRemoved=false;
        if (itemRecord.isRemoveProjectStatslog()) {
          if (paType != null) {
            String paramName=""String_Node_Str"";
            EList listParamType=paType.getElementParameter();
            for (int j=0; j < listParamType.size(); j++) {
              ElementParameterType pType=(ElementParameterType)listParamType.get(j);
              if (pType != null && paramName.equals(pType.getName())) {
                pType.setValue(Boolean.FALSE.toString());
                statsPSettingRemoved=true;
                break;
              }
            }
          }
        }
        String statslogUsePSetting=null;
        String implicitUsePSetting=null;
        if (paType != null) {
          EList listParamType=paType.getElementParameter();
          for (int j=0; j < listParamType.size(); j++) {
            ElementParameterType pType=(ElementParameterType)listParamType.get(j);
            if (pType != null) {
              if (!statsPSettingRemoved && ""String_Node_Str"".equals(pType.getName())) {
                statslogUsePSetting=pType.getValue();
              }
              if (""String_Node_Str"".equals(pType.getName())) {
                implicitUsePSetting=pType.getValue();
              }
              if (statsPSettingRemoved && implicitUsePSetting != null || !statsPSettingRemoved && implicitUsePSetting != null && statslogUsePSetting != null) {
                break;
              }
            }
          }
        }
        if (statslogUsePSetting != null && Boolean.parseBoolean(statslogUsePSetting) && !statAndLogsSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          statAndLogsSettingsReloaded=true;
        }
        if (implicitUsePSetting != null && Boolean.parseBoolean(implicitUsePSetting) && !implicitSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          implicitSettingsReloaded=true;
        }
      }
      if (lastVersion == null || itemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !itemRecord.getMigrationTasksToApply().isEmpty();
        repFactory.create(tmpItem,path,true);
        if (isConnectionEmptyBeforeMigration) {
          InputStream is=manager.getStream(itemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
          try {
            URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
            URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
            URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
            OutputStream os=new FileOutputStream(fileURL.getFile());
            try {
              FileCopyUtils.copyStreams(is,os);
            }
  finally {
              os.close();
            }
          }
  finally {
            is.close();
          }
        }
 else {
          copyScreenshotFile(manager,itemRecord);
          boolean haveRef=copyReferenceFiles(manager,tmpItem,itemRecord.getPath());
          if (haveRef) {
            repFactory.save(tmpItem,true);
          }
          repFactory.unloadResources(tmpItem.getProperty());
        }
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        itemRecord.addError(e.getMessage());
        logError(e);
      }
      if (tmpItem != null) {
        RelationshipItemBuilder.getInstance().addOrUpdateItem(tmpItem,true);
        if (tmpItem.getState() != null) {
          if (itemType != null) {
            final Set<String> folders=restoreFolder.getFolders(itemType);
            if (folders != null) {
              for (              String folderPath : folders) {
                if (folderPath != null && folderPath.equals(path.toString())) {
                  FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
                  if (folderItem != null) {
                    folderItem.getState().setDeleted(false);
                    while (!(folderItem.getParent() instanceof Project)) {
                      folderItem=(FolderItem)folderItem.getParent();
                      if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                        break;
                      }
                      folderItem.getState().setDeleted(false);
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      itemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=itemRecord.getLabel();
  for (  Resource resource : itemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(itemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.9934902896821092
124036,"/** 
 * DOC amaumont Comment method ""updateGridDataHeightForTableConstraints"".
 */
public void updateGridDataHeightForTableGlobalMap(){
  int moreSpace=WindowSystem.isGTK() ? tableForGlobalMap.getItemHeight() : 0;
  int size=((InputTable)abstractDataMapTable).getGlobalMapEntries().size();
  tableForGlobalMapGridData.heightHint=size * (tableForGlobalMap.getItemHeight() + tableForGlobalMap.getItemHeight() / 2) + moreSpace;
  if (WindowSystem.isGTK()) {
    tableViewerCreatorForGlobalMap.layout();
  }
}","/** 
 * DOC amaumont Comment method ""updateGridDataHeightForTableConstraints"".
 */
public void updateGridDataHeightForTableGlobalMap(){
  int moreSpace=WindowSystem.isGTK() ? tableForGlobalMap.getItemHeight() : 0;
  int size=((InputTable)abstractDataMapTable).getGlobalMapEntries().size();
  if (size < 3) {
    tableForGlobalMapGridData.heightHint=size * (tableForGlobalMap.getItemHeight() + tableForGlobalMap.getItemHeight() / 2) + moreSpace;
  }
 else {
    tableForGlobalMapGridData.heightHint=size * (tableForGlobalMap.getItemHeight()) + moreSpace;
  }
  if (WindowSystem.isGTK() || WindowSystem.isOSX()) {
    tableViewerCreatorForGlobalMap.layout();
  }
}",0.8654670094258783
124037,"public void drop(DropTargetEvent event){
  if (transfer.isSupportedType(event.currentDataType)) {
    ISelection selection=transfer.getSelection();
    if (selection instanceof TreeSelection) {
      Object[] objects=((TreeSelection)selection).toArray();
      List<Object> asList=Arrays.asList(objects);
      boolean created=false;
      for (      Object obj : objects) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode sourceNode=(RepositoryNode)obj;
          Item item=sourceNode.getObject().getProperty().getItem();
          if (item instanceof ContextItem) {
            ContextItem contextItem=(ContextItem)item;
            EList context=contextItem.getContext();
            Set<String> contextSet=new HashSet<String>();
            Iterator iterator=context.iterator();
            while (iterator.hasNext()) {
              Object repositoryObject=iterator.next();
              if (repositoryObject instanceof ContextTypeImpl) {
                EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                Iterator contextParas=contextParameters.iterator();
                while (contextParas.hasNext()) {
                  ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                  String name=contextParameterType.getName();
                  contextSet.add(name);
                }
              }
            }
            IEditorInput editorInput=part.getEditorInput();
            if (editorInput instanceof JobEditorInput) {
              JobEditorInput jobInput=(JobEditorInput)editorInput;
              IProcess2 process=jobInput.getLoadedProcess();
              IContextManager contextManager=process.getContextManager();
              Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
              if (addedContext != null && addedContext.size() > 0) {
                ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                created=true;
              }
            }
          }
        }
      }
      if (created) {
        RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
      }
    }
  }
}","public void drop(DropTargetEvent event){
  if (transfer.isSupportedType(event.currentDataType)) {
    ISelection selection=transfer.getSelection();
    if (selection instanceof TreeSelection) {
      Object[] objects=((TreeSelection)selection).toArray();
      List<Object> asList=Arrays.asList(objects);
      boolean created=false;
      for (      Object obj : objects) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode sourceNode=(RepositoryNode)obj;
          Item item=sourceNode.getObject().getProperty().getItem();
          if (item instanceof ContextItem) {
            ContextItem contextItem=(ContextItem)item;
            EList context=contextItem.getContext();
            Set<String> contextSet=new HashSet<String>();
            Iterator iterator=context.iterator();
            while (iterator.hasNext()) {
              Object repositoryObject=iterator.next();
              if (repositoryObject instanceof ContextTypeImpl) {
                EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                Iterator contextParas=contextParameters.iterator();
                while (contextParas.hasNext()) {
                  ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                  String name=contextParameterType.getName();
                  contextSet.add(name);
                }
              }
            }
            IEditorInput editorInput=part.getEditorInput();
            if (editorInput instanceof JobEditorInput) {
              JobEditorInput jobInput=(JobEditorInput)editorInput;
              IProcess2 process=jobInput.getLoadedProcess();
              IContextManager contextManager=process.getContextManager();
              List<IContext> listContext=contextManager.getListContext();
              if (!ConnectionContextHelper.containsVariable(contextManager)) {
                ConnectionContextHelper.addContextVarForJob(process,contextItem,contextManager);
                created=true;
              }
 else {
                Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
                if (addedContext != null && addedContext.size() > 0) {
                  ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                  created=true;
                }
              }
            }
          }
        }
      }
      if (created) {
        RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
      }
    }
  }
}",0.9325429272281276
124038,"public void initialDrop(){
  int operations=DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT;
  DropTarget target=new DropTarget(contextComposite,operations);
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  target.setTransfer(new Transfer[]{transfer});
  target.addDropListener(new DropTargetListener(){
    public void dropAccept(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        ISelection selection=transfer.getSelection();
        if (selection instanceof TreeSelection) {
          Object[] objects=((TreeSelection)selection).toArray();
          List<Object> asList=Arrays.asList(objects);
          boolean created=false;
          for (          Object obj : objects) {
            if (obj instanceof RepositoryNode) {
              RepositoryNode sourceNode=(RepositoryNode)obj;
              Item item=sourceNode.getObject().getProperty().getItem();
              if (item instanceof ContextItem) {
                ContextItem contextItem=(ContextItem)item;
                EList context=contextItem.getContext();
                Set<String> contextSet=new HashSet<String>();
                Iterator iterator=context.iterator();
                while (iterator.hasNext()) {
                  Object repositoryObject=iterator.next();
                  if (repositoryObject instanceof ContextTypeImpl) {
                    EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                    Iterator contextParas=contextParameters.iterator();
                    while (contextParas.hasNext()) {
                      ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                      String name=contextParameterType.getName();
                      contextSet.add(name);
                    }
                  }
                }
                IEditorInput editorInput=part.getEditorInput();
                if (editorInput instanceof JobEditorInput) {
                  JobEditorInput jobInput=(JobEditorInput)editorInput;
                  IProcess2 process=jobInput.getLoadedProcess();
                  IContextManager contextManager=process.getContextManager();
                  Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
                  if (addedContext != null && addedContext.size() > 0) {
                    ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                    created=true;
                  }
                }
              }
            }
          }
          if (created) {
            RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
          }
        }
      }
    }
    public void dragOver(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        IEditorInput editorInput=part.getEditorInput();
        if (!(editorInput instanceof JobEditorInput)) {
          event.detail=DND.DROP_NONE;
        }
 else {
          ISelection selection=transfer.getSelection();
          if (selection instanceof TreeSelection) {
            Object[] objects=((TreeSelection)selection).toArray();
            for (            Object obj : objects) {
              if (obj instanceof RepositoryNode) {
                RepositoryNode sourceNode=(RepositoryNode)obj;
                Item item=sourceNode.getObject().getProperty().getItem();
                if (!(item instanceof ContextItem)) {
                  event.detail=DND.DROP_NONE;
                }
              }
            }
          }
        }
      }
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragEnter(    DropTargetEvent event){
      if (event.detail == DND.DROP_DEFAULT) {
        if ((event.operations & DND.DROP_COPY) != 0) {
          event.detail=DND.DROP_COPY;
        }
 else {
          event.detail=DND.DROP_NONE;
        }
      }
      for (int i=0; i < event.dataTypes.length; i++) {
        if (transfer.isSupportedType(event.dataTypes[i])) {
          event.currentDataType=event.dataTypes[i];
          if (event.detail != DND.DROP_COPY) {
            event.detail=DND.DROP_NONE;
          }
          break;
        }
      }
    }
  }
);
}","public void initialDrop(){
  int operations=DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT;
  DropTarget target=new DropTarget(contextComposite,operations);
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  target.setTransfer(new Transfer[]{transfer});
  target.addDropListener(new DropTargetListener(){
    public void dropAccept(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        ISelection selection=transfer.getSelection();
        if (selection instanceof TreeSelection) {
          Object[] objects=((TreeSelection)selection).toArray();
          List<Object> asList=Arrays.asList(objects);
          boolean created=false;
          for (          Object obj : objects) {
            if (obj instanceof RepositoryNode) {
              RepositoryNode sourceNode=(RepositoryNode)obj;
              Item item=sourceNode.getObject().getProperty().getItem();
              if (item instanceof ContextItem) {
                ContextItem contextItem=(ContextItem)item;
                EList context=contextItem.getContext();
                Set<String> contextSet=new HashSet<String>();
                Iterator iterator=context.iterator();
                while (iterator.hasNext()) {
                  Object repositoryObject=iterator.next();
                  if (repositoryObject instanceof ContextTypeImpl) {
                    EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                    Iterator contextParas=contextParameters.iterator();
                    while (contextParas.hasNext()) {
                      ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                      String name=contextParameterType.getName();
                      contextSet.add(name);
                    }
                  }
                }
                IEditorInput editorInput=part.getEditorInput();
                if (editorInput instanceof JobEditorInput) {
                  JobEditorInput jobInput=(JobEditorInput)editorInput;
                  IProcess2 process=jobInput.getLoadedProcess();
                  IContextManager contextManager=process.getContextManager();
                  List<IContext> listContext=contextManager.getListContext();
                  if (!ConnectionContextHelper.containsVariable(contextManager)) {
                    ConnectionContextHelper.addContextVarForJob(process,contextItem,contextManager);
                    created=true;
                  }
 else {
                    Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
                    if (addedContext != null && addedContext.size() > 0) {
                      ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                      created=true;
                    }
                  }
                }
              }
            }
          }
          if (created) {
            RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
          }
        }
      }
    }
    public void dragOver(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        IEditorInput editorInput=part.getEditorInput();
        if (!(editorInput instanceof JobEditorInput)) {
          event.detail=DND.DROP_NONE;
        }
 else {
          ISelection selection=transfer.getSelection();
          if (selection instanceof TreeSelection) {
            Object[] objects=((TreeSelection)selection).toArray();
            for (            Object obj : objects) {
              if (obj instanceof RepositoryNode) {
                RepositoryNode sourceNode=(RepositoryNode)obj;
                Item item=sourceNode.getObject().getProperty().getItem();
                if (!(item instanceof ContextItem)) {
                  event.detail=DND.DROP_NONE;
                }
              }
            }
          }
        }
      }
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragEnter(    DropTargetEvent event){
      if (event.detail == DND.DROP_DEFAULT) {
        if ((event.operations & DND.DROP_COPY) != 0) {
          event.detail=DND.DROP_COPY;
        }
 else {
          event.detail=DND.DROP_NONE;
        }
      }
      for (int i=0; i < event.dataTypes.length; i++) {
        if (transfer.isSupportedType(event.dataTypes[i])) {
          event.currentDataType=event.dataTypes[i];
          if (event.detail != DND.DROP_COPY) {
            event.detail=DND.DROP_NONE;
          }
          break;
        }
      }
    }
  }
);
}",0.9619436680283808
124039,"public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMinLinkInput() == 0) & (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if ((getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkOutput() != 0)) {
    if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ROUTE_WHEN) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                int first=schemaName.indexOf(""String_Node_Str"");
                int second=schemaName.lastIndexOf(""String_Node_Str"");
                if (first > 0 && first < second) {
                  schemaName=schemaName.substring(first + 1,second);
                  break;
                }
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (schemaName != null && nodeTable.getLabel() != null && nodeTable.getLabel().equals(schemaName)) {
              if (!metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
  }
  int jobletBuildConnectorNum=0;
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (nbMaxOut != -1) {
        if (curLinkOut > nbMaxOut) {
          String errorMessage=Messages.getString(""String_Node_Str"",typeName);
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
      if (nbMinOut != 0) {
        if (curLinkOut < nbMinOut) {
          String errorMessage=Messages.getString(""String_Node_Str"",typeName);
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          if (curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinIn != 0) {
          if (curLinkIn < nbMinIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<? extends IConnection> outgoingConnections=this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}","public void checkLinks(){
  boolean isJoblet=false;
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent(this)) {
      isJoblet=true;
    }
  }
  if (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName())) {
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMinLinkInput() == 0) & (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() != 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
    if ((getCurrentActiveLinksNbInput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbInput(EConnectionType.FLOW_REF) > 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if ((getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkInput() == 0) && (getConnectorFromType(EConnectionType.FLOW_MAIN).getMaxLinkOutput() != 0)) {
    if ((getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MAIN) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_MERGE) == 0) && (getCurrentActiveLinksNbOutput(EConnectionType.FLOW_REF) == 0)&& (getCurrentActiveLinksNbOutput(EConnectionType.ITERATE) == 0)) {
      String errorMessage=Messages.getString(""String_Node_Str"");
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
  if (!isJoblet) {
    if (!isSubProcessStart() || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_OK) > 0) || getCurrentActiveLinksNbOutput(EConnectionType.ON_SUBJOB_ERROR) > 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if ((!isELTComponent() && !isSubProcessStart()) || (!(Boolean)getPropertyValue(EParameterName.STARTABLE.getName()))) {
      if ((getCurrentActiveLinksNbInput(EConnectionType.ON_SUBJOB_OK) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.RUN_IF) > 0) || (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_OK) > 0)|| (getCurrentActiveLinksNbInput(EConnectionType.ON_COMPONENT_ERROR) > 0)) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
    }
    if (isHL7Output()) {
      if (getIncomingConnections(EConnectionType.FLOW_MERGE).size() <= 0) {
        String errorMessage=Messages.getString(""String_Node_Str"");
        Problems.add(ProblemStatus.ERROR,this,errorMessage);
      }
 else {
        List<Map<String,String>> maps=(List<Map<String,String>>)ElementParameterParser.getObjectValue(this,""String_Node_Str"");
        List<IMetadataTable> tables=this.getMetadataList();
        for (        IConnection connection : getIncomingConnections(EConnectionType.FLOW_MERGE)) {
          IMetadataTable metadataTable=connection.getMetadataTable();
          String rowName=connection.getUniqueName();
          String schemaName=null;
          for (          Map<String,String> map : maps) {
            if (map.containsValue(rowName)) {
              if (map.get(""String_Node_Str"") != null && map.get(""String_Node_Str"").equals(rowName)) {
                schemaName=map.get(""String_Node_Str"");
                int first=schemaName.indexOf(""String_Node_Str"");
                int second=schemaName.lastIndexOf(""String_Node_Str"");
                if (first > 0 && first < second) {
                  schemaName=schemaName.substring(first + 1,second);
                  break;
                }
              }
            }
          }
          for (          IMetadataTable nodeTable : tables) {
            if (schemaName != null && nodeTable.getLabel() != null && nodeTable.getLabel().equals(schemaName)) {
              if (!metadataTable.sameMetadataAs(nodeTable,IMetadataColumn.OPTIONS_NONE)) {
                String errorMessage=Messages.getString(""String_Node_Str"");
                Problems.add(ProblemStatus.ERROR,this,errorMessage);
              }
            }
          }
        }
      }
    }
  }
  int jobletBuildConnectorNum=0;
  for (  INodeConnector nodeConnector : listConnector) {
    if (!nodeConnector.getDefaultConnectionType().hasConnectionCategory(IConnectionCategory.USE_HASH) && nodeConnector.getDefaultConnectionType() != EConnectionType.FLOW_MERGE) {
      int nbMaxOut;
      nbMaxOut=nodeConnector.getMaxLinkOutput();
      int nbMaxIn;
      nbMaxIn=nodeConnector.getMaxLinkInput();
      int nbMinOut;
      nbMinOut=nodeConnector.getMinLinkOutput();
      int nbMinIn;
      nbMinIn=nodeConnector.getMinLinkInput();
      int curLinkOut;
      curLinkOut=nodeConnector.getCurLinkNbOutput();
      int curLinkIn;
      curLinkIn=nodeConnector.getCurLinkNbInput();
      String typeName=nodeConnector.getMenuName();
      if (nodeConnector.getDefaultConnectionType() == EConnectionType.FLOW_MAIN) {
        typeName=""String_Node_Str"";
        if (isJoblet) {
          if (nodeConnector.isBuiltIn()) {
            jobletBuildConnectorNum++;
          }
          continue;
        }
      }
      if (nbMaxOut != -1) {
        if (curLinkOut > nbMaxOut) {
          String errorMessage=Messages.getString(""String_Node_Str"",typeName);
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
      if (nbMinOut != 0) {
        if (curLinkOut < nbMinOut) {
          String errorMessage=Messages.getString(""String_Node_Str"",typeName);
          Problems.add(ProblemStatus.WARNING,this,errorMessage);
        }
      }
      if (!isJoblet) {
        if (nbMaxIn != -1) {
          if (curLinkIn > nbMaxIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
        if (nbMinIn != 0) {
          if (curLinkIn < nbMinIn) {
            String errorMessage=Messages.getString(""String_Node_Str"",typeName);
            Problems.add(ProblemStatus.WARNING,this,errorMessage);
          }
        }
      }
    }
  }
  if (isJoblet) {
    List<? extends IConnection> outgoingConnections=this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    for (    IConnection con : outgoingConnections) {
      INodeConnector connector=this.getConnectorFromName(con.getConnectorName());
      if (connector == null && con instanceof Connection) {
        ((Connection)con).disconnect();
      }
    }
    String typeName=""String_Node_Str"";
    outgoingConnections=this.getOutgoingConnections(EConnectionType.FLOW_MAIN);
    if (outgoingConnections.size() > jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
 else     if (outgoingConnections.size() < jobletBuildConnectorNum) {
      String errorMessage=Messages.getString(""String_Node_Str"",typeName);
      Problems.add(ProblemStatus.WARNING,this,errorMessage);
    }
  }
}",0.99551631372008
124040,"private void createDownComposite(Composite parent){
  FormData data=null;
  createAccount=new Composite(parent,SWT.NONE);
  createAccount.setBackground(parent.getBackground());
  createAccount.setLayout(new FormLayout());
  Label createLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.bottom=new FormAttachment(0,30);
  createLabel.setText(Messages.getString(""String_Node_Str""));
  createLabel.setLayoutData(data);
  createLabel.setFont(font);
  createLabel.setBackground(createAccount.getBackground());
  createLabel.forceFocus();
  link=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(createLabel,0,SWT.TOP);
  data.left=new FormAttachment(createLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(createLabel,0,SWT.BOTTOM);
  link.setText(Messages.getString(""String_Node_Str""));
  link.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  link.setBackground(createAccount.getBackground());
  link.setFont(font);
  link.setLayoutData(data);
  Label userNameLabel=new Label(createAccount,SWT.RIGHT);
  userNameLabel.setFont(font);
  GC gc=new GC(userNameLabel);
  Point tmpSize;
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(createLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(createLabel,40,SWT.BOTTOM);
  userNameLabel.setText(Messages.getString(""String_Node_Str""));
  userNameLabel.setLayoutData(data);
  userNameLabel.setBackground(createAccount.getBackground());
  userNameText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameLabel,10,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,200,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,0,SWT.BOTTOM);
  userNameText.setLayoutData(data);
  userNameText.setFont(font);
  Label needLabelforUserName=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(userNameText,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,5,SWT.RIGHT);
  data.right=new FormAttachment(userNameText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameText,0,SWT.BOTTOM);
  needLabelforUserName.setText(""String_Node_Str"");
  needLabelforUserName.setFont(font);
  needLabelforUserName.setLayoutData(data);
  Color red=new Color(null,255,0,0);
  needLabelforUserName.setForeground(red);
  needLabelforUserName.setBackground(createAccount.getBackground());
  red.dispose();
  Label emailLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(userNameLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,25,SWT.BOTTOM);
  emailLabel.setText(Messages.getString(""String_Node_Str""));
  emailLabel.setBackground(createAccount.getBackground());
  emailLabel.setLayoutData(data);
  emailLabel.setFont(font);
  emailText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,0,SWT.LEFT);
  data.right=new FormAttachment(userNameText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  emailText.setLayoutData(data);
  emailText.setFont(font);
  Label needLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,5,SWT.RIGHT);
  data.right=new FormAttachment(emailText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  needLabel.setText(""String_Node_Str"");
  needLabel.setFont(font);
  needLabel.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel.setForeground(red);
  needLabel.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,25,SWT.BOTTOM);
  passwordLabel.setLayoutData(data);
  passwordLabel.setBackground(createAccount.getBackground());
  passwordLabel.setText(Messages.getString(""String_Node_Str""));
  passwordLabel.setFont(font);
  passwordText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,0,SWT.BOTTOM);
  passwordText.setLayoutData(data);
  passwordText.setEchoChar('*');
  passwordText.setFont(font);
  Label needLabelforPassword=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordText,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordText,0,SWT.BOTTOM);
  needLabelforPassword.setText(""String_Node_Str"");
  needLabelforPassword.setFont(font);
  needLabelforPassword.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPassword.setForeground(red);
  needLabelforPassword.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordAgainLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,25,SWT.BOTTOM);
  passwordAgainLabel.setLayoutData(data);
  passwordAgainLabel.setBackground(createAccount.getBackground());
  passwordAgainLabel.setText(Messages.getString(""String_Node_Str""));
  passwordAgainLabel.setFont(font);
  passwordAgainText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,0,SWT.LEFT);
  data.right=new FormAttachment(passwordText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,0,SWT.BOTTOM);
  passwordAgainText.setLayoutData(data);
  passwordAgainText.setEchoChar('*');
  passwordAgainText.setFont(font);
  Label needLabelforPasswordAgain=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainText,0,SWT.TOP);
  data.left=new FormAttachment(passwordAgainText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainText,0,SWT.BOTTOM);
  needLabelforPasswordAgain.setText(""String_Node_Str"");
  needLabelforPasswordAgain.setFont(font);
  needLabelforPasswordAgain.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPasswordAgain.setForeground(red);
  needLabelforPasswordAgain.setBackground(createAccount.getBackground());
  red.dispose();
  password2ValidateLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(needLabelforPasswordAgain,0,SWT.TOP);
  data.left=new FormAttachment(needLabelforPasswordAgain,10,SWT.RIGHT);
  data.right=new FormAttachment(needLabelforPasswordAgain,110,SWT.RIGHT);
  data.bottom=new FormAttachment(needLabelforPasswordAgain,0,SWT.BOTTOM);
  password2ValidateLabel.setBackground(createAccount.getBackground());
  password2ValidateLabel.setLayoutData(data);
  Label countryLabel=new Label(createAccount,SWT.RIGHT);
  countryLabel.setFont(font);
  gc=new GC(countryLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordAgainLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,25,SWT.BOTTOM);
  countryLabel.setText(Messages.getString(""String_Node_Str""));
  countryLabel.setLayoutData(data);
  countryLabel.setBackground(createAccount.getBackground());
  countryCombo=new Combo(createAccount,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.top=new FormAttachment(countryLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(countryLabel,0,SWT.BOTTOM);
  countryCombo.setLayoutData(data);
  countryCombo.setItems(initiateCountryList());
  countryCombo.select(countryToSelect);
  countryCombo.setFont(font);
  agreeButton=new Button(createAccount,SWT.CHECK);
  gc=new GC(agreeButton);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(countryCombo,20,SWT.BOTTOM);
  data.left=new FormAttachment(countryCombo,0,SWT.LEFT);
  agreeButton.setText(Messages.getString(""String_Node_Str""));
  agreeButton.setLayoutData(data);
  agreeButton.setFont(font);
  agreeButton.setBackground(createAccount.getBackground());
  agreeButton.setSelection(false);
  improveButton=new Button(createAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(agreeButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(agreeButton,0,SWT.LEFT);
  data.right=new FormAttachment(agreeButton,500,SWT.LEFT);
  data.bottom=new FormAttachment(agreeButton,30,SWT.BOTTOM);
  improveButton.setText(Messages.getString(""String_Node_Str""));
  improveButton.setLayoutData(data);
  improveButton.setBackground(createAccount.getBackground());
  improveButton.setFont(font);
  improveButton.setSelection(true);
  final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
  if (preferenceStore.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED)) {
    improveButton.setSelection(true);
  }
 else {
    improveButton.setSelection(false);
  }
  improveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED,improveButton.getSelection());
    }
  }
);
  Hyperlink readMore=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,5,SWT.LEFT);
  data.right=new FormAttachment(improveButton,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButton,20,SWT.BOTTOM);
  readMore.setText(Messages.getString(""String_Node_Str""));
  readMore.setBackground(createAccount.getBackground());
  readMore.setLayoutData(data);
  readMore.setFont(font);
  Color blue=new Color(null,0,0,255);
  readMore.setForeground(blue);
  blue.dispose();
  readMore.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  createAccountButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMore,10,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,0,SWT.LEFT);
  data.right=new FormAttachment(improveButton,180,SWT.LEFT);
  data.bottom=new FormAttachment(readMore,35,SWT.BOTTOM);
  createAccountButton.setLayoutData(data);
  createAccountButton.setText(Messages.getString(""String_Node_Str""));
  createAccountButton.setEnabled(false);
  createAccountButton.setFont(font);
  proxySettingButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButton.setText(Messages.getString(""String_Node_Str""));
  proxySettingButton.setLayoutData(data);
  proxySettingButton.setFont(font);
  skipButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButton.setText(Messages.getString(""String_Node_Str""));
  skipButton.setLayoutData(data);
  skipButton.setFont(font);
  connectAccount=new Composite(parent,SWT.NONE);
  connectAccount.setBackground(parent.getBackground());
  connectAccount.setLayout(new FormLayout());
  Label loginLabel=new Label(connectAccount,SWT.NONE);
  loginLabel.setFont(font);
  gc=new GC(loginLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.right=new FormAttachment(0,10 + labelSize.x);
  data.bottom=new FormAttachment(0,30);
  loginLabel.setText(Messages.getString(""String_Node_Str""));
  loginLabel.setLayoutData(data);
  loginLabel.setBackground(connectAccount.getBackground());
  loginLabel.forceFocus();
  linkToCreate=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(loginLabel,0,SWT.TOP);
  data.left=new FormAttachment(loginLabel,5,SWT.RIGHT);
  data.bottom=new FormAttachment(loginLabel,0,SWT.BOTTOM);
  linkToCreate.setText(Messages.getString(""String_Node_Str""));
  linkToCreate.setLayoutData(data);
  linkToCreate.setBackground(connectAccount.getBackground());
  linkToCreate.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  linkToCreate.setFont(font);
  Label emailLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  emailLabelInConnect.setFont(font);
  gc=new GC(emailLabelInConnect);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  int newSize=gc.stringExtent(Messages.getString(""String_Node_Str"")).x;
  if (newSize > labelSize.x) {
    labelSize.x=newSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(loginLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(loginLabel,40,SWT.BOTTOM);
  emailLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  emailLabelInConnect.setLayoutData(data);
  emailLabelInConnect.setBackground(connectAccount.getBackground());
  usernameTextForConnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(emailLabelInConnect,10,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,200,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  usernameTextForConnect.setLayoutData(data);
  usernameTextForConnect.setFont(font);
  Label needLabel1=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,5,SWT.RIGHT);
  data.right=new FormAttachment(usernameTextForConnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  needLabel1.setText(""String_Node_Str"");
  needLabel1.setFont(font);
  needLabel1.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel1.setForeground(red);
  needLabel1.setBackground(connectAccount.getBackground());
  red.dispose();
  Label passwordLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabelInConnect,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,25,SWT.BOTTOM);
  passwordLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  passwordLabelInConnect.setLayoutData(data);
  passwordLabelInConnect.setBackground(connectAccount.getBackground());
  passwordLabelInConnect.setFont(font);
  passwordTextForconnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,0,SWT.LEFT);
  data.right=new FormAttachment(usernameTextForConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  passwordTextForconnect.setLayoutData(data);
  passwordTextForconnect.setEchoChar('*');
  passwordTextForconnect.setFont(font);
  Label needLabel2=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(passwordTextForconnect,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordTextForconnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  needLabel2.setText(""String_Node_Str"");
  needLabel2.setFont(font);
  needLabel2.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel2.setForeground(red);
  needLabel2.setBackground(connectAccount.getBackground());
  red.dispose();
  improveButtonInConnect=new Button(connectAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(passwordTextForconnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(passwordTextForconnect,0,SWT.LEFT);
  data.right=new FormAttachment(passwordTextForconnect,500,SWT.LEFT);
  data.bottom=new FormAttachment(passwordTextForconnect,30,SWT.BOTTOM);
  improveButtonInConnect.setText(Messages.getString(""String_Node_Str""));
  improveButtonInConnect.setBackground(connectAccount.getBackground());
  improveButtonInConnect.setLayoutData(data);
  improveButtonInConnect.setSelection(true);
  improveButtonInConnect.setFont(font);
  Hyperlink readMoreInConnect=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButtonInConnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,5,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButtonInConnect,20,SWT.BOTTOM);
  readMoreInConnect.setText(Messages.getString(""String_Node_Str""));
  readMoreInConnect.setFont(font);
  readMoreInConnect.setLayoutData(data);
  blue=new Color(null,0,0,255);
  readMoreInConnect.setForeground(blue);
  readMoreInConnect.setBackground(connectAccount.getBackground());
  blue.dispose();
  readMoreInConnect.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  connectButton=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMoreInConnect,20,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,0,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,80,SWT.LEFT);
  data.bottom=new FormAttachment(readMoreInConnect,45,SWT.BOTTOM);
  connectButton.setText(Messages.getString(""String_Node_Str""));
  connectButton.setLayoutData(data);
  connectButton.setEnabled(false);
  connectButton.setFont(font);
  skipButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  skipButtonForConnect.setLayoutData(data);
  skipButtonForConnect.setFont(font);
  proxySettingButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  proxySettingButtonForConnect.setLayoutData(data);
  proxySettingButtonForConnect.setFont(font);
  stackLayout.topControl=createAccount;
  parent.layout();
}","private void createDownComposite(Composite parent){
  FormData data=null;
  createAccount=new Composite(parent,SWT.NONE);
  createAccount.setBackground(parent.getBackground());
  createAccount.setLayout(new FormLayout());
  Label createLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.bottom=new FormAttachment(0,30);
  createLabel.setText(Messages.getString(""String_Node_Str""));
  createLabel.setLayoutData(data);
  createLabel.setFont(font);
  createLabel.setBackground(createAccount.getBackground());
  createLabel.forceFocus();
  link=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(createLabel,0,SWT.TOP);
  data.left=new FormAttachment(createLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(createLabel,0,SWT.BOTTOM);
  link.setText(Messages.getString(""String_Node_Str""));
  link.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  link.setBackground(createAccount.getBackground());
  link.setFont(font);
  link.setLayoutData(data);
  Label userNameLabel=new Label(createAccount,SWT.RIGHT);
  userNameLabel.setFont(font);
  GC gc=new GC(userNameLabel);
  Point tmpSize;
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  tmpSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  if (tmpSize.x > labelSize.x) {
    labelSize=tmpSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(createLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(createLabel,40,SWT.BOTTOM);
  userNameLabel.setText(Messages.getString(""String_Node_Str""));
  userNameLabel.setLayoutData(data);
  userNameLabel.setBackground(createAccount.getBackground());
  userNameText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameLabel,10,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,200,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,0,SWT.BOTTOM);
  userNameText.setLayoutData(data);
  userNameText.setFont(font);
  userNameText.forceFocus();
  Label needLabelforUserName=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(userNameText,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,5,SWT.RIGHT);
  data.right=new FormAttachment(userNameText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameText,0,SWT.BOTTOM);
  needLabelforUserName.setText(""String_Node_Str"");
  needLabelforUserName.setFont(font);
  needLabelforUserName.setLayoutData(data);
  Color red=new Color(null,255,0,0);
  needLabelforUserName.setForeground(red);
  needLabelforUserName.setBackground(createAccount.getBackground());
  red.dispose();
  Label emailLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(userNameLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(userNameLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(userNameLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(userNameLabel,25,SWT.BOTTOM);
  emailLabel.setText(Messages.getString(""String_Node_Str""));
  emailLabel.setBackground(createAccount.getBackground());
  emailLabel.setLayoutData(data);
  emailLabel.setFont(font);
  emailText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(userNameText,0,SWT.LEFT);
  data.right=new FormAttachment(userNameText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  emailText.setLayoutData(data);
  emailText.setFont(font);
  Label needLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,5,SWT.RIGHT);
  data.right=new FormAttachment(emailText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,0,SWT.BOTTOM);
  needLabel.setText(""String_Node_Str"");
  needLabel.setFont(font);
  needLabel.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel.setForeground(red);
  needLabel.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabel,25,SWT.BOTTOM);
  passwordLabel.setLayoutData(data);
  passwordLabel.setBackground(createAccount.getBackground());
  passwordLabel.setText(Messages.getString(""String_Node_Str""));
  passwordLabel.setFont(font);
  passwordText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,0,SWT.BOTTOM);
  passwordText.setLayoutData(data);
  passwordText.setEchoChar('*');
  passwordText.setFont(font);
  Label needLabelforPassword=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordText,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordText,0,SWT.BOTTOM);
  needLabelforPassword.setText(""String_Node_Str"");
  needLabelforPassword.setFont(font);
  needLabelforPassword.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPassword.setForeground(red);
  needLabelforPassword.setBackground(createAccount.getBackground());
  red.dispose();
  Label passwordAgainLabel=new Label(createAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(passwordLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabel,25,SWT.BOTTOM);
  passwordAgainLabel.setLayoutData(data);
  passwordAgainLabel.setBackground(createAccount.getBackground());
  passwordAgainLabel.setText(Messages.getString(""String_Node_Str""));
  passwordAgainLabel.setFont(font);
  passwordAgainText=new Text(createAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,0,SWT.TOP);
  data.left=new FormAttachment(passwordText,0,SWT.LEFT);
  data.right=new FormAttachment(passwordText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,0,SWT.BOTTOM);
  passwordAgainText.setLayoutData(data);
  passwordAgainText.setEchoChar('*');
  passwordAgainText.setFont(font);
  Label needLabelforPasswordAgain=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordAgainText,0,SWT.TOP);
  data.left=new FormAttachment(passwordAgainText,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainText,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainText,0,SWT.BOTTOM);
  needLabelforPasswordAgain.setText(""String_Node_Str"");
  needLabelforPasswordAgain.setFont(font);
  needLabelforPasswordAgain.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabelforPasswordAgain.setForeground(red);
  needLabelforPasswordAgain.setBackground(createAccount.getBackground());
  red.dispose();
  password2ValidateLabel=new Label(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(needLabelforPasswordAgain,0,SWT.TOP);
  data.left=new FormAttachment(needLabelforPasswordAgain,10,SWT.RIGHT);
  data.right=new FormAttachment(needLabelforPasswordAgain,110,SWT.RIGHT);
  data.bottom=new FormAttachment(needLabelforPasswordAgain,0,SWT.BOTTOM);
  password2ValidateLabel.setBackground(createAccount.getBackground());
  password2ValidateLabel.setLayoutData(data);
  Label countryLabel=new Label(createAccount,SWT.RIGHT);
  countryLabel.setFont(font);
  gc=new GC(countryLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(passwordAgainLabel,5,SWT.BOTTOM);
  data.left=new FormAttachment(passwordAgainLabel,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(passwordAgainLabel,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordAgainLabel,25,SWT.BOTTOM);
  countryLabel.setText(Messages.getString(""String_Node_Str""));
  countryLabel.setLayoutData(data);
  countryLabel.setBackground(createAccount.getBackground());
  countryCombo=new Combo(createAccount,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.top=new FormAttachment(countryLabel,0,SWT.TOP);
  data.left=new FormAttachment(emailText,0,SWT.LEFT);
  data.right=new FormAttachment(emailText,0,SWT.RIGHT);
  data.bottom=new FormAttachment(countryLabel,0,SWT.BOTTOM);
  countryCombo.setLayoutData(data);
  countryCombo.setItems(initiateCountryList());
  countryCombo.select(countryToSelect);
  countryCombo.setFont(font);
  agreeButton=new Button(createAccount,SWT.CHECK);
  gc=new GC(agreeButton);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(countryCombo,20,SWT.BOTTOM);
  data.left=new FormAttachment(countryCombo,0,SWT.LEFT);
  agreeButton.setText(Messages.getString(""String_Node_Str""));
  agreeButton.setLayoutData(data);
  agreeButton.setFont(font);
  agreeButton.setBackground(createAccount.getBackground());
  agreeButton.setSelection(false);
  improveButton=new Button(createAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(agreeButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(agreeButton,0,SWT.LEFT);
  data.right=new FormAttachment(agreeButton,500,SWT.LEFT);
  data.bottom=new FormAttachment(agreeButton,30,SWT.BOTTOM);
  improveButton.setText(Messages.getString(""String_Node_Str""));
  improveButton.setLayoutData(data);
  improveButton.setBackground(createAccount.getBackground());
  improveButton.setFont(font);
  improveButton.setSelection(true);
  final IPreferenceStore preferenceStore=CoreRuntimePlugin.getInstance().getPreferenceStore();
  if (preferenceStore.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED)) {
    improveButton.setSelection(true);
  }
 else {
    improveButton.setSelection(false);
  }
  improveButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preferenceStore.setValue(ITalendCorePrefConstants.DATA_COLLECTOR_ENABLED,improveButton.getSelection());
    }
  }
);
  Hyperlink readMore=new Hyperlink(createAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButton,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,5,SWT.LEFT);
  data.right=new FormAttachment(improveButton,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButton,20,SWT.BOTTOM);
  readMore.setText(Messages.getString(""String_Node_Str""));
  readMore.setBackground(createAccount.getBackground());
  readMore.setLayoutData(data);
  readMore.setFont(font);
  Color blue=new Color(null,0,0,255);
  readMore.setForeground(blue);
  blue.dispose();
  readMore.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  createAccountButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMore,10,SWT.BOTTOM);
  data.left=new FormAttachment(improveButton,0,SWT.LEFT);
  data.right=new FormAttachment(improveButton,180,SWT.LEFT);
  data.bottom=new FormAttachment(readMore,35,SWT.BOTTOM);
  createAccountButton.setLayoutData(data);
  createAccountButton.setText(Messages.getString(""String_Node_Str""));
  createAccountButton.setEnabled(false);
  createAccountButton.setFont(font);
  proxySettingButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButton.setText(Messages.getString(""String_Node_Str""));
  proxySettingButton.setLayoutData(data);
  proxySettingButton.setFont(font);
  skipButton=new Button(createAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButton.setText(Messages.getString(""String_Node_Str""));
  skipButton.setLayoutData(data);
  skipButton.setFont(font);
  connectAccount=new Composite(parent,SWT.NONE);
  connectAccount.setBackground(parent.getBackground());
  connectAccount.setLayout(new FormLayout());
  Label loginLabel=new Label(connectAccount,SWT.NONE);
  loginLabel.setFont(font);
  gc=new GC(loginLabel);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,10);
  data.right=new FormAttachment(0,10 + labelSize.x);
  data.bottom=new FormAttachment(0,30);
  loginLabel.setText(Messages.getString(""String_Node_Str""));
  loginLabel.setLayoutData(data);
  loginLabel.setBackground(connectAccount.getBackground());
  linkToCreate=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(loginLabel,0,SWT.TOP);
  data.left=new FormAttachment(loginLabel,5,SWT.RIGHT);
  data.bottom=new FormAttachment(loginLabel,0,SWT.BOTTOM);
  linkToCreate.setText(Messages.getString(""String_Node_Str""));
  linkToCreate.setLayoutData(data);
  linkToCreate.setBackground(connectAccount.getBackground());
  linkToCreate.setForeground(LoginComposite.YELLOW_GREEN_COLOR);
  linkToCreate.setFont(font);
  Label emailLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  emailLabelInConnect.setFont(font);
  gc=new GC(emailLabelInConnect);
  labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  int newSize=gc.stringExtent(Messages.getString(""String_Node_Str"")).x;
  if (newSize > labelSize.x) {
    labelSize.x=newSize;
  }
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(loginLabel,20,SWT.BOTTOM);
  data.left=new FormAttachment(0,170 - labelSize.x);
  data.right=new FormAttachment(0,170);
  data.bottom=new FormAttachment(loginLabel,40,SWT.BOTTOM);
  emailLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  emailLabelInConnect.setLayoutData(data);
  emailLabelInConnect.setBackground(connectAccount.getBackground());
  usernameTextForConnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(emailLabelInConnect,10,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,200,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  usernameTextForConnect.setLayoutData(data);
  usernameTextForConnect.setFont(font);
  Label needLabel1=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,5,SWT.RIGHT);
  data.right=new FormAttachment(usernameTextForConnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,0,SWT.BOTTOM);
  needLabel1.setText(""String_Node_Str"");
  needLabel1.setFont(font);
  needLabel1.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel1.setForeground(red);
  needLabel1.setBackground(connectAccount.getBackground());
  red.dispose();
  Label passwordLabelInConnect=new Label(connectAccount,SWT.RIGHT);
  data=new FormData();
  data.top=new FormAttachment(emailLabelInConnect,5,SWT.BOTTOM);
  data.left=new FormAttachment(emailLabelInConnect,-labelSize.x,SWT.RIGHT);
  data.right=new FormAttachment(emailLabelInConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(emailLabelInConnect,25,SWT.BOTTOM);
  passwordLabelInConnect.setText(Messages.getString(""String_Node_Str""));
  passwordLabelInConnect.setLayoutData(data);
  passwordLabelInConnect.setBackground(connectAccount.getBackground());
  passwordLabelInConnect.setFont(font);
  passwordTextForconnect=new Text(connectAccount,SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(usernameTextForConnect,0,SWT.LEFT);
  data.right=new FormAttachment(usernameTextForConnect,0,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  passwordTextForconnect.setLayoutData(data);
  passwordTextForconnect.setEchoChar('*');
  passwordTextForconnect.setFont(font);
  Label needLabel2=new Label(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(passwordLabelInConnect,0,SWT.TOP);
  data.left=new FormAttachment(passwordTextForconnect,5,SWT.RIGHT);
  data.right=new FormAttachment(passwordTextForconnect,10,SWT.RIGHT);
  data.bottom=new FormAttachment(passwordLabelInConnect,0,SWT.BOTTOM);
  needLabel2.setText(""String_Node_Str"");
  needLabel2.setFont(font);
  needLabel2.setLayoutData(data);
  red=new Color(null,255,0,0);
  needLabel2.setForeground(red);
  needLabel2.setBackground(connectAccount.getBackground());
  red.dispose();
  improveButtonInConnect=new Button(connectAccount,SWT.CHECK);
  data=new FormData();
  data.top=new FormAttachment(passwordTextForconnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(passwordTextForconnect,0,SWT.LEFT);
  data.right=new FormAttachment(passwordTextForconnect,500,SWT.LEFT);
  data.bottom=new FormAttachment(passwordTextForconnect,30,SWT.BOTTOM);
  improveButtonInConnect.setText(Messages.getString(""String_Node_Str""));
  improveButtonInConnect.setBackground(connectAccount.getBackground());
  improveButtonInConnect.setLayoutData(data);
  improveButtonInConnect.setSelection(true);
  improveButtonInConnect.setFont(font);
  Hyperlink readMoreInConnect=new Hyperlink(connectAccount,SWT.NONE);
  data=new FormData();
  data.top=new FormAttachment(improveButtonInConnect,0,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,5,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,100,SWT.LEFT);
  data.bottom=new FormAttachment(improveButtonInConnect,20,SWT.BOTTOM);
  readMoreInConnect.setText(Messages.getString(""String_Node_Str""));
  readMoreInConnect.setFont(font);
  readMoreInConnect.setLayoutData(data);
  blue=new Color(null,0,0,255);
  readMoreInConnect.setForeground(blue);
  readMoreInConnect.setBackground(connectAccount.getBackground());
  blue.dispose();
  readMoreInConnect.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      String url=""String_Node_Str"";
      TalendBrowserLaunchHelper.openURL(url);
    }
  }
);
  connectButton=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(readMoreInConnect,20,SWT.BOTTOM);
  data.left=new FormAttachment(improveButtonInConnect,0,SWT.LEFT);
  data.right=new FormAttachment(improveButtonInConnect,80,SWT.LEFT);
  data.bottom=new FormAttachment(readMoreInConnect,45,SWT.BOTTOM);
  connectButton.setText(Messages.getString(""String_Node_Str""));
  connectButton.setLayoutData(data);
  connectButton.setEnabled(false);
  connectButton.setFont(font);
  skipButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.right=new FormAttachment(100,-20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  data.width=60;
  skipButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  skipButtonForConnect.setLayoutData(data);
  skipButtonForConnect.setFont(font);
  proxySettingButtonForConnect=new Button(connectAccount,SWT.PUSH);
  data=new FormData();
  data.left=new FormAttachment(0,20);
  data.bottom=new FormAttachment(100,-20);
  data.height=25;
  proxySettingButtonForConnect.setText(Messages.getString(""String_Node_Str""));
  proxySettingButtonForConnect.setLayoutData(data);
  proxySettingButtonForConnect.setFont(font);
  stackLayout.topControl=createAccount;
  parent.layout();
}",0.9986223862238622
124041,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  boolean allowAutoSwitch=true;
  IElementParameter elemParam=elem.getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (elemParam != null) {
    elemParam.setValue(Boolean.FALSE);
    allowAutoSwitch=(Boolean)elemParam.getValue();
  }
  if (!allowAutoSwitch && (elem instanceof Node)) {
    Node node=(Node)elem;
    boolean isSchemaEmpty=false;
    if (node.getMetadataList().size() > 0) {
      isSchemaEmpty=node.getMetadataList().get(0).getListColumns().size() == 0;
    }
 else {
      isSchemaEmpty=true;
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType().equals(EParameterFieldType.MEMO_SQL)) {
        if (curParam.getDefaultValues().size() > 0) {
        }
      }
    }
    if (isSchemaEmpty) {
      allowAutoSwitch=true;
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName)) {
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
 else {
    oldMetadata=(String)elem.getPropertyValue(propertyName);
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName) && (EmfComponent.BUILTIN.equals(value))) {
    for (    IElementParameter param : elem.getElementParameters()) {
      boolean paramFlag=JobSettingsConstants.isExtraParameter(param.getName());
      boolean extraFlag=JobSettingsConstants.isExtraParameter(propertyName.split(""String_Node_Str"")[0]);
      if (paramFlag == extraFlag) {
        if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
          IElementParameter querystoreParam=elem.getElementParameterFromField(EParameterFieldType.QUERYSTORE_TYPE,param.getCategory());
          if (querystoreParam != null) {
            Map<String,IElementParameter> childParam=querystoreParam.getChildParameters();
            if (childParam != null) {
              IElementParameter queryTypeParam=childParam.get(EParameterName.QUERYSTORE_TYPE.getName());
              if (queryTypeParam != null && EmfComponent.REPOSITORY.equals(queryTypeParam.getValue())) {
                continue;
              }
            }
          }
        }
        param.setReadOnly(false);
        param.setRepositoryValueUsed(false);
      }
    }
  }
 else {
    oldValues.clear();
    IElementParameter propertyParam=elem.getElementParameter(propertyName);
    EComponentCategory currentCategory=propertyParam.getCategory();
    for (    IElementParameter param : elem.getElementParameters()) {
      String repositoryValue=param.getRepositoryValue();
      boolean b=elem instanceof INode && (((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str""));
      if ((""String_Node_Str"".equals(repositoryValue) || (param.isShow(elem.getElementParameters())) || b) && (repositoryValue != null) && (!param.getName().equals(propertyTypeName))) {
        IElementParameter relatedPropertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE,param.getCategory());
        if (relatedPropertyParam == null) {
          continue;
        }
        if (!relatedPropertyParam.getCategory().equals(currentCategory) && !repositoryValue.equals(""String_Node_Str"")) {
          continue;
        }
        Object objectValue;
        if (connection instanceof XmlFileConnection && this.dragAndDropAction == true && repositoryValue.equals(""String_Node_Str"") && reOpenXSDBool == true) {
          objectValue=RepositoryToComponentProperty.getXmlAndXSDFileValue((XmlFileConnection)connection,repositoryValue);
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else {
          objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
        }
        if (objectValue != null) {
          oldValues.put(param.getName(),param.getValue());
          if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String dbVersion=""String_Node_Str"";
            if (connection instanceof DatabaseConnection) {
              dbVersion=((DatabaseConnection)connection).getDbVersionString();
            }
            boolean found=false;
            String[] list=param.getListRepositoryItems();
            for (int i=0; (i < list.length) && (!found); i++) {
              if (objectValue.equals(list[i])) {
                found=true;
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
            IElementParameter elementParameter=null;
            IElementParameter elementParameter2=null;
            if (EParameterName.DB_TYPE.getName().equals(param.getName())) {
              elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
              elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
            }
 else {
              elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
              elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
            }
            String dbType=""String_Node_Str"";
            if (param.getValue() != null) {
              int indexOfItemFromList=param.getIndexOfItemFromList(param.getValue().toString());
              if (indexOfItemFromList != -1) {
                dbType=param.getListItemsDisplayCodeName()[indexOfItemFromList];
              }
            }
            if (StatsAndLogsConstants.JDBC.equals(dbType)) {
              IElementParameter dbNameParm=elem.getElementParameter(EParameterName.DBNAME.getName());
              if (dbNameParm != null) {
                dbNameParm.setValue(""String_Node_Str"");
              }
            }
 else {
              IElementParameter rulParam=elem.getElementParameter(EParameterName.URL.getName());
              if (rulParam != null) {
                rulParam.setValue(""String_Node_Str"");
              }
              IElementParameter classParam=elem.getElementParameter(EParameterName.DRIVER_CLASS.getName());
              if (classParam != null) {
                classParam.setValue(""String_Node_Str"");
              }
              IElementParameter jarParam=elem.getElementParameter(EParameterName.DRIVER_JAR.getName());
              if (jarParam != null) {
                jarParam.setValue(new ArrayList<Map<String,Object>>());
              }
            }
            setDbVersion(elementParameter,dbVersion);
            DesignerUtilities.setSchemaDB(elementParameter2,param.getValue());
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.equals(list[i])) {
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.toString().toUpperCase().equals(list[i])) {
                elem.setPropertyValue(param.getName(),objectValue);
              }
            }
          }
 else {
            if (repositoryValue.equals(""String_Node_Str"")) {
              IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
              if (connection instanceof FTPConnection) {
                if (((FTPConnection)connection).getEcoding() != null) {
                  paramEncoding.setValue(((FTPConnection)connection).getEcoding());
                }
 else {
                  paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                }
              }
 else {
                if (objectValue instanceof String) {
                  String str=TalendTextUtils.removeQuotes((String)objectValue);
                  if (str.equals(EmfComponent.ENCODING_TYPE_UTF_8)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_UTF_8);
                  }
 else                   if (str.equals(EmfComponent.ENCODING_TYPE_ISO_8859_15)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_ISO_8859_15);
                  }
 else {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                  }
                }
              }
            }
 else             if (repositoryValue.equals(""String_Node_Str"")) {
              setOtherProperties();
            }
            if (repositoryValue.equals(""String_Node_Str"")) {
              List list=new ArrayList();
              Object[] listItemsValue=elem.getElementParameter(""String_Node_Str"").getListItemsValue();
              for (int i=0; i < listItemsValue.length; i++) {
                list.add(listItemsValue[i]);
              }
              if (list != null && !list.contains(objectValue)) {
                objectValue=""String_Node_Str"";
              }
            }
            if (repositoryValue.equals(EParameterName.FILE_PATH.getName())) {
              String filePath=""String_Node_Str"";
              if (connection.isContextMode()) {
                ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
                if (contextItem != null) {
                  String selectedContext=contextItem.getDefaultContext();
                  final ContextType contextTypeByName=ContextUtils.getContextTypeByName(contextItem,selectedContext,true);
                  filePath=ConnectionContextHelper.getOriginalValue(contextTypeByName,objectValue.toString());
                }
              }
 else {
                filePath=TalendTextUtils.removeQuotes(objectValue.toString());
              }
              boolean versionCheckFor2007=false;
              if (filePath != null && filePath.endsWith(""String_Node_Str"")) {
                versionCheckFor2007=true;
              }
              if (elem.getElementParameter(""String_Node_Str"") != null) {
                elem.setPropertyValue(""String_Node_Str"",versionCheckFor2007);
              }
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE)) {
              if (objectValue != null) {
                objectValue=objectValue.toString().replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
            elem.setPropertyValue(param.getName(),objectValue);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"")) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          if (((Node)elem).getMetadataList().size() > 0) {
            IMetadataTable metaTable=((Node)elem).getMetadataList().get(0);
            RepositoryToComponentProperty.getTableXmlFileValue(connection,""String_Node_Str"",param,table,metaTable);
            param.setRepositoryValueUsed(true);
          }
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"") && connection != null) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          table.clear();
          ArrayList parameters=((WSDLSchemaConnection)connection).getParameters();
          for (          Object object : parameters) {
            Map<String,Object> map2=new HashMap<String,Object>();
            map2.put(""String_Node_Str"",TalendTextUtils.addQuotes(object.toString()));
            table.add(map2);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TEXT) && ""String_Node_Str"".equals(param.getRepositoryValue())) {
          param.setRepositoryValueUsed(true);
        }
 else {
          String paramName=param.getName();
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.retrieveSAPParams(elem,connection,param,getSapFunctionLabel());
          }
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.getSAPIDocParams(elem,connection,param,getSapIDocLabel());
          }
        }
        if (param.isRepositoryValueUsed()) {
          param.setReadOnly(false);
        }
      }
    }
    IElementParameter parentParameter=propertyParam.getParentParameter();
    if (parentParameter != null) {
      IElementParameter param=parentParameter.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      if (param != null && propertyParam == param) {
        ConnectionItem connItem=UpdateRepositoryUtils.getConnectionItemByItemId((String)param.getValue());
        if (connItem != null) {
          if (elem instanceof Node) {
            ConnectionContextHelper.addContextForNodeParameter((Node)elem,connItem,ignoreContextMode);
          }
 else           if (elem instanceof Process) {
            ConnectionContextHelper.addContextForProcessParameter((Process)elem,connItem,param.getCategory(),ignoreContextMode);
          }
        }
      }
    }
  }
  for (  IElementParameter curParam : elem.getElementParameters()) {
    if (curParam.getFieldType().equals(EParameterFieldType.AS400_CHECK)) {
      setOtherProperties();
    }
  }
  if (elem instanceof Node) {
    ((Process)((Node)elem).getProcess()).checkProcess();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  boolean allowAutoSwitch=true;
  IElementParameter elemParam=elem.getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (elemParam != null) {
    elemParam.setValue(Boolean.FALSE);
    allowAutoSwitch=(Boolean)elemParam.getValue();
  }
  if (!allowAutoSwitch && (elem instanceof Node)) {
    Node node=(Node)elem;
    boolean isSchemaEmpty=false;
    if (node.getMetadataList().size() > 0) {
      isSchemaEmpty=node.getMetadataList().get(0).getListColumns().size() == 0;
    }
 else {
      isSchemaEmpty=true;
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType().equals(EParameterFieldType.MEMO_SQL)) {
        if (curParam.getDefaultValues().size() > 0) {
        }
      }
    }
    if (isSchemaEmpty) {
      allowAutoSwitch=true;
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName)) {
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
 else {
    oldMetadata=(String)elem.getPropertyValue(propertyName);
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName) && (EmfComponent.BUILTIN.equals(value))) {
    for (    IElementParameter param : elem.getElementParameters()) {
      boolean paramFlag=JobSettingsConstants.isExtraParameter(param.getName());
      boolean extraFlag=JobSettingsConstants.isExtraParameter(propertyName.split(""String_Node_Str"")[0]);
      if (paramFlag == extraFlag) {
        if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
          IElementParameter querystoreParam=elem.getElementParameterFromField(EParameterFieldType.QUERYSTORE_TYPE,param.getCategory());
          if (querystoreParam != null) {
            Map<String,IElementParameter> childParam=querystoreParam.getChildParameters();
            if (childParam != null) {
              IElementParameter queryTypeParam=childParam.get(EParameterName.QUERYSTORE_TYPE.getName());
              if (queryTypeParam != null && EmfComponent.REPOSITORY.equals(queryTypeParam.getValue())) {
                continue;
              }
            }
          }
        }
        param.setReadOnly(false);
        param.setRepositoryValueUsed(false);
      }
    }
  }
 else {
    oldValues.clear();
    IElementParameter propertyParam=elem.getElementParameter(propertyName);
    EComponentCategory currentCategory=propertyParam.getCategory();
    for (    IElementParameter param : elem.getElementParameters()) {
      String repositoryValue=param.getRepositoryValue();
      boolean b=elem instanceof INode && (((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str""));
      if ((""String_Node_Str"".equals(repositoryValue) || (param.isShow(elem.getElementParameters())) || b) && (repositoryValue != null) && (!param.getName().equals(propertyTypeName))) {
        IElementParameter relatedPropertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE,param.getCategory());
        if (relatedPropertyParam == null) {
          continue;
        }
        if (!relatedPropertyParam.getCategory().equals(currentCategory) && !repositoryValue.equals(""String_Node_Str"")) {
          continue;
        }
        Object objectValue=null;
        if (connection instanceof XmlFileConnection && this.dragAndDropAction == true && repositoryValue.equals(""String_Node_Str"") && reOpenXSDBool == true) {
          objectValue=RepositoryToComponentProperty.getXmlAndXSDFileValue((XmlFileConnection)connection,repositoryValue);
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof MDMConnection) {
          if (table == null) {
            IMetadataTable metaTable=null;
            if (((Node)elem).getMetadataList().size() > 0) {
              metaTable=((Node)elem).getMetadataList().get(0);
            }
            objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,metaTable);
          }
 else {
            objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
          }
        }
 else {
          objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
        }
        if (objectValue != null) {
          oldValues.put(param.getName(),param.getValue());
          if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String dbVersion=""String_Node_Str"";
            if (connection instanceof DatabaseConnection) {
              dbVersion=((DatabaseConnection)connection).getDbVersionString();
            }
            boolean found=false;
            String[] list=param.getListRepositoryItems();
            for (int i=0; (i < list.length) && (!found); i++) {
              if (objectValue.equals(list[i])) {
                found=true;
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
            IElementParameter elementParameter=null;
            IElementParameter elementParameter2=null;
            if (EParameterName.DB_TYPE.getName().equals(param.getName())) {
              elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
              elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
            }
 else {
              elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
              elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
            }
            String dbType=""String_Node_Str"";
            if (param.getValue() != null) {
              int indexOfItemFromList=param.getIndexOfItemFromList(param.getValue().toString());
              if (indexOfItemFromList != -1) {
                dbType=param.getListItemsDisplayCodeName()[indexOfItemFromList];
              }
            }
            if (StatsAndLogsConstants.JDBC.equals(dbType)) {
              IElementParameter dbNameParm=elem.getElementParameter(EParameterName.DBNAME.getName());
              if (dbNameParm != null) {
                dbNameParm.setValue(""String_Node_Str"");
              }
            }
 else {
              IElementParameter rulParam=elem.getElementParameter(EParameterName.URL.getName());
              if (rulParam != null) {
                rulParam.setValue(""String_Node_Str"");
              }
              IElementParameter classParam=elem.getElementParameter(EParameterName.DRIVER_CLASS.getName());
              if (classParam != null) {
                classParam.setValue(""String_Node_Str"");
              }
              IElementParameter jarParam=elem.getElementParameter(EParameterName.DRIVER_JAR.getName());
              if (jarParam != null) {
                jarParam.setValue(new ArrayList<Map<String,Object>>());
              }
            }
            setDbVersion(elementParameter,dbVersion);
            DesignerUtilities.setSchemaDB(elementParameter2,param.getValue());
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.equals(list[i])) {
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.toString().toUpperCase().equals(list[i])) {
                elem.setPropertyValue(param.getName(),objectValue);
              }
            }
          }
 else {
            if (repositoryValue.equals(""String_Node_Str"")) {
              IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
              if (connection instanceof FTPConnection) {
                if (((FTPConnection)connection).getEcoding() != null) {
                  paramEncoding.setValue(((FTPConnection)connection).getEcoding());
                }
 else {
                  paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                }
              }
 else {
                if (objectValue instanceof String) {
                  String str=TalendTextUtils.removeQuotes((String)objectValue);
                  if (str.equals(EmfComponent.ENCODING_TYPE_UTF_8)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_UTF_8);
                  }
 else                   if (str.equals(EmfComponent.ENCODING_TYPE_ISO_8859_15)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_ISO_8859_15);
                  }
 else {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                  }
                }
              }
            }
 else             if (repositoryValue.equals(""String_Node_Str"")) {
              setOtherProperties();
            }
            if (repositoryValue.equals(""String_Node_Str"")) {
              List list=new ArrayList();
              Object[] listItemsValue=elem.getElementParameter(""String_Node_Str"").getListItemsValue();
              for (int i=0; i < listItemsValue.length; i++) {
                list.add(listItemsValue[i]);
              }
              if (list != null && !list.contains(objectValue)) {
                objectValue=""String_Node_Str"";
              }
            }
            if (repositoryValue.equals(EParameterName.FILE_PATH.getName())) {
              String filePath=""String_Node_Str"";
              if (connection.isContextMode()) {
                ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
                if (contextItem != null) {
                  String selectedContext=contextItem.getDefaultContext();
                  final ContextType contextTypeByName=ContextUtils.getContextTypeByName(contextItem,selectedContext,true);
                  filePath=ConnectionContextHelper.getOriginalValue(contextTypeByName,objectValue.toString());
                }
              }
 else {
                filePath=TalendTextUtils.removeQuotes(objectValue.toString());
              }
              boolean versionCheckFor2007=false;
              if (filePath != null && filePath.endsWith(""String_Node_Str"")) {
                versionCheckFor2007=true;
              }
              if (elem.getElementParameter(""String_Node_Str"") != null) {
                elem.setPropertyValue(""String_Node_Str"",versionCheckFor2007);
              }
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE)) {
              if (objectValue != null) {
                objectValue=objectValue.toString().replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
            elem.setPropertyValue(param.getName(),objectValue);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"")) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          if (((Node)elem).getMetadataList().size() > 0) {
            IMetadataTable metaTable=((Node)elem).getMetadataList().get(0);
            RepositoryToComponentProperty.getTableXmlFileValue(connection,""String_Node_Str"",param,table,metaTable);
            param.setRepositoryValueUsed(true);
          }
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"") && connection != null) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          table.clear();
          ArrayList parameters=((WSDLSchemaConnection)connection).getParameters();
          for (          Object object : parameters) {
            Map<String,Object> map2=new HashMap<String,Object>();
            map2.put(""String_Node_Str"",TalendTextUtils.addQuotes(object.toString()));
            table.add(map2);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TEXT) && ""String_Node_Str"".equals(param.getRepositoryValue())) {
          param.setRepositoryValueUsed(true);
        }
 else {
          String paramName=param.getName();
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.retrieveSAPParams(elem,connection,param,getSapFunctionLabel());
          }
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.getSAPIDocParams(elem,connection,param,getSapIDocLabel());
          }
        }
        if (param.isRepositoryValueUsed()) {
          param.setReadOnly(false);
        }
      }
    }
    IElementParameter parentParameter=propertyParam.getParentParameter();
    if (parentParameter != null) {
      IElementParameter param=parentParameter.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      if (param != null && propertyParam == param) {
        ConnectionItem connItem=UpdateRepositoryUtils.getConnectionItemByItemId((String)param.getValue());
        if (connItem != null) {
          if (elem instanceof Node) {
            ConnectionContextHelper.addContextForNodeParameter((Node)elem,connItem,ignoreContextMode);
          }
 else           if (elem instanceof Process) {
            ConnectionContextHelper.addContextForProcessParameter((Process)elem,connItem,param.getCategory(),ignoreContextMode);
          }
        }
      }
    }
  }
  for (  IElementParameter curParam : elem.getElementParameters()) {
    if (curParam.getFieldType().equals(EParameterFieldType.AS400_CHECK)) {
      setOtherProperties();
    }
  }
  if (elem instanceof Node) {
    ((Process)((Node)elem).getProcess()).checkProcess();
  }
}",0.9831910873672552
124042,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    boolean strValueSet=false;
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=(String)param.getListItemsDisplayName()[nbInList];
        strValueSet=true;
      }
      nbInList++;
    }
    if (!strValueSet) {
      strValue=name;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    combo.setText(strValue);
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    boolean strValueSet=false;
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=(String)param.getListItemsDisplayName()[nbInList];
        strValueSet=true;
      }
      nbInList++;
    }
    if (!strValueSet) {
      strValue=name;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (param.isRepositoryValueUsed()) {
      combo.removeModifyListener(modifySelection);
      combo.setText(strValue);
      combo.addModifyListener(modifySelection);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.9228925289652418
124043,"@Override public Control createControl(final Composite subComposite,final IElementParameter param,final int numInRow,final int nbInRow,final int top,final Control lastControl){
  DecoratedField dField=new DecoratedField(subComposite,SWT.BORDER,cbCtrl);
  if (param.isRequired()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_REQUIRED);
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.TOP,false);
  }
  if (param.isRepositoryValueUsed()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_CONTENT_PROPOSAL);
    decoration.setDescription(Messages.getString(""String_Node_Str""));
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.BOTTOM,false);
  }
  Control cLayout=dField.getLayoutControl();
  CCombo combo=(CCombo)dField.getControl();
  FormData data;
  combo.setItems(getListToDisplay(param));
  combo.setEditable(true);
  cLayout.setBackground(subComposite.getBackground());
  combo.setEnabled(!param.isReadOnly());
  combo.addSelectionListener(listenerSelection);
  combo.addModifyListener(modifySelection);
  combo.setData(PARAMETER_NAME,param.getName());
  if (elem instanceof Node) {
    combo.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  CLabel labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName());
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  data.top=new FormAttachment(0,top);
  cLayout.setLayoutData(data);
  hashCurControls.put(param.getName(),combo);
  Point initialSize=dField.getLayoutControl().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return cLayout;
}","@Override public Control createControl(final Composite subComposite,final IElementParameter param,final int numInRow,final int nbInRow,final int top,final Control lastControl){
  DecoratedField dField=new DecoratedField(subComposite,SWT.BORDER,cbCtrl);
  if (param.isRequired()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_REQUIRED);
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.TOP,false);
  }
  if (param.isRepositoryValueUsed()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_CONTENT_PROPOSAL);
    decoration.setDescription(Messages.getString(""String_Node_Str""));
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.BOTTOM,false);
  }
  Control cLayout=dField.getLayoutControl();
  CCombo combo=(CCombo)dField.getControl();
  FormData data;
  combo.setItems(getListToDisplay(param));
  combo.setEditable(!param.isReadOnly() && !param.isRepositoryValueUsed());
  combo.setEnabled(!param.isReadOnly() && !param.isRepositoryValueUsed());
  cLayout.setBackground(subComposite.getBackground());
  combo.addSelectionListener(listenerSelection);
  combo.addModifyListener(modifySelection);
  combo.setData(PARAMETER_NAME,param.getName());
  if (elem instanceof Node) {
    combo.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  CLabel labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName());
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  data.top=new FormAttachment(0,top);
  cLayout.setLayoutData(data);
  hashCurControls.put(param.getName(),combo);
  Point initialSize=dField.getLayoutControl().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return cLayout;
}",0.9677058054881464
124044,"private String initExpression(DbMapComponent component,ExternalDbMapEntry dbMapEntry){
  String expression=dbMapEntry.getExpression();
  if (expression != null) {
    List<Map<String,String>> itemNameList=null;
    MapExpressionParser mapParser1=new MapExpressionParser(""String_Node_Str"");
    itemNameList=mapParser1.parseInTableEntryLocations(expression);
    if (itemNameList == null || itemNameList.isEmpty()) {
      MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
      itemNameList=mapParser2.parseInTableEntryLocations(expression);
    }
    for (    Map<String,String> itemNamemap : itemNameList) {
      Set<Entry<String,String>> set=itemNamemap.entrySet();
      Iterator<Entry<String,String>> ite=set.iterator();
      while (ite.hasNext()) {
        Entry<String,String> entry=ite.next();
        String columnValue=entry.getKey();
        String tableValue=entry.getValue();
        List<IConnection> inputConnections=(List<IConnection>)component.getIncomingConnections();
        if (inputConnections == null) {
          return expression;
        }
        for (        IConnection iconn : inputConnections) {
          IMetadataTable metadataTable=iconn.getMetadataTable();
          String tName=iconn.getName();
          if (tableValue.equals(tName) && metadataTable != null) {
            List<IMetadataColumn> lColumn=metadataTable.getListColumns();
            String tableName=metadataTable.getTableName();
            String tableColneName=tableName;
            tableColneName=MetadataToolHelper.validateTableName(tableColneName);
            if (tableValue.contains(""String_Node_Str"") && tableName != null) {
              MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
              List<Map<String,String>> tableNameList=mapParser2.parseInTableEntryLocations(tableValue);
              for (              Map<String,String> tableNameMap : tableNameList) {
                Set<Entry<String,String>> setTable=tableNameMap.entrySet();
                Iterator<Entry<String,String>> iteTable=setTable.iterator();
                while (iteTable.hasNext()) {
                  Entry<String,String> tableEntry=iteTable.next();
                  String tableLabel=tableEntry.getKey();
                  String schemaValue=tableEntry.getValue();
                  if (tableLabel.equals(metadataTable.getLabel()) && tableColneName.equals(tableLabel)) {
                    tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                    expression=expression.replaceFirst(tableValue,schemaValue + ""String_Node_Str"" + tableName);
                  }
                }
              }
            }
 else             if (tableName != null) {
              if (tableValue.equals(metadataTable.getLabel()) && tableColneName.equals(tableValue)) {
                tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                expression=expression.replaceFirst(tableValue,tableName);
              }
            }
            for (            IMetadataColumn co : lColumn) {
              if (columnValue.equals(co.getLabel())) {
                String oriName=co.getOriginalDbColumnName();
                oriName=oriName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                expression=expression.replaceFirst(""String_Node_Str"" + co.getLabel(),""String_Node_Str"" + oriName);
              }
            }
          }
        }
      }
    }
  }
  return expression;
}","private String initExpression(DbMapComponent component,ExternalDbMapEntry dbMapEntry){
  String expression=dbMapEntry.getExpression();
  boolean flag=false;
  if (expression != null) {
    List<Map<String,String>> itemNameList=null;
    MapExpressionParser mapParser1=new MapExpressionParser(""String_Node_Str"");
    itemNameList=mapParser1.parseInTableEntryLocations(expression);
    if (itemNameList == null || itemNameList.isEmpty()) {
      MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
      itemNameList=mapParser2.parseInTableEntryLocations(expression);
    }
    for (    Map<String,String> itemNamemap : itemNameList) {
      Set<Entry<String,String>> set=itemNamemap.entrySet();
      Iterator<Entry<String,String>> ite=set.iterator();
      while (ite.hasNext()) {
        Entry<String,String> entry=ite.next();
        String columnValue=entry.getKey();
        String tableValue=entry.getValue();
        List<IConnection> inputConnections=(List<IConnection>)component.getIncomingConnections();
        if (inputConnections == null) {
          return expression;
        }
        for (        IConnection iconn : inputConnections) {
          IMetadataTable metadataTable=iconn.getMetadataTable();
          String tName=iconn.getName();
          if (metadataTable != null && metadataTable.getLabel().equals(tName)) {
            List<IMetadataColumn> lColumn=metadataTable.getListColumns();
            String tableName=metadataTable.getTableName();
            String tableColneName=tableName;
            tableColneName=MetadataToolHelper.validateTableName(tableColneName);
            if (tableValue.contains(""String_Node_Str"") && tableName != null) {
              MapExpressionParser mapParser2=new MapExpressionParser(""String_Node_Str"");
              List<Map<String,String>> tableNameList=mapParser2.parseInTableEntryLocations(tableValue);
              for (              Map<String,String> tableNameMap : tableNameList) {
                Set<Entry<String,String>> setTable=tableNameMap.entrySet();
                Iterator<Entry<String,String>> iteTable=setTable.iterator();
                while (iteTable.hasNext()) {
                  Entry<String,String> tableEntry=iteTable.next();
                  String tableLabel=tableEntry.getKey();
                  String schemaValue=tableEntry.getValue();
                  if (tableLabel.equals(metadataTable.getLabel()) && tableColneName.equals(tableLabel)) {
                    tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                    expression=expression.replaceFirst(tableValue,schemaValue + ""String_Node_Str"" + tableName);
                  }
                }
              }
            }
 else             if (tableName != null) {
              if (tableValue.equals(metadataTable.getLabel()) && tableColneName.equals(tableValue)) {
                tableName=tableName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                expression=expression.replaceFirst(tableValue,tableName);
              }
            }
            for (            IMetadataColumn co : lColumn) {
              if (columnValue.equals(co.getLabel())) {
                String oriName=co.getOriginalDbColumnName();
                oriName=oriName.replaceAll(""String_Node_Str"",""String_Node_Str"");
                if (!oriName.equals(co.getLabel())) {
                  Set<Dbms> types=MetadataTalendType.getDbmsSet();
                  Iterator iterator=types.iterator();
                  EDatabaseTypeName type=null;
                  while (iterator.hasNext()) {
                    Dbms dbms=(Dbms)iterator.next();
                    if (dbms.getId().equals(metadataTable.getDbms())) {
                      type=EDatabaseTypeName.getTypeFromDbType(dbms.getProduct());
                      flag=true;
                      break;
                    }
                  }
                  oriName=TalendQuoteUtils.getQuoteByDBType(type) + oriName + TalendQuoteUtils.getQuoteByDBType(type);
                }
                expression=expression.replaceFirst(""String_Node_Str"" + co.getLabel(),""String_Node_Str"" + oriName);
              }
            }
          }
        }
      }
    }
  }
  if (flag) {
    expression=TalendQuoteUtils.checkStringQuotationMarks(expression);
  }
  return expression;
}",0.8827357407171111
124045,"public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT || node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}","public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=true;
  if (selection.isEmpty()) {
    setEnabled(false);
    return;
  }
  List<RepositoryNode> nodes=(List<RepositoryNode>)selection.toList();
  for (  RepositoryNode node : nodes) {
    if (node.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.PROCESS) {
      canWork=false;
      break;
    }
    if (node.getType() != ENodeType.REPOSITORY_ELEMENT && node.getChildren().isEmpty()) {
      canWork=false;
      break;
    }
    if (canWork && node.getObject() != null && ProxyRepositoryFactory.getInstance().getStatus(node.getObject()) == ERepositoryStatus.DELETED) {
      canWork=false;
      break;
    }
  }
  setEnabled(canWork);
}",0.7207977207977208
124046,"protected void restoreWidgetValuesForWS(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    webXMLButton.setSelection(settings.getBoolean(STORE_WEBXML_ID));
    configFileButton.setSelection(settings.getBoolean(STORE_CONFIGFILE_ID));
    axisLibButton.setSelection(settings.getBoolean(STORE_AXISLIB_ID));
    wsddButton.setSelection(settings.getBoolean(STORE_WSDD_ID));
    wsdlButton.setSelection(settings.getBoolean(STORE_WSDL_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    if (chkButton.isVisible()) {
      zipOption=String.valueOf(chkButton.getSelection());
    }
 else {
      zipOption=""String_Node_Str"";
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","protected void restoreWidgetValuesForWS(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    webXMLButton.setSelection(settings.getBoolean(STORE_WEBXML_ID));
    configFileButton.setSelection(settings.getBoolean(STORE_CONFIGFILE_ID));
    axisLibButton.setSelection(settings.getBoolean(STORE_AXISLIB_ID));
    wsddButton.setSelection(settings.getBoolean(STORE_WSDD_ID));
    wsdlButton.setSelection(settings.getBoolean(STORE_WSDL_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    if (chkButton.isVisible()) {
      zipOption=String.valueOf(chkButton.getSelection());
    }
 else {
      zipOption=""String_Node_Str"";
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9677083333333332
124047,"/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  JobExportType jobExportType=getCurrentExportType();
switch (jobExportType) {
case WSWAR:
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  break;
case JBOSSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case OSGI:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case PETALSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
default :
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
}
if (jobExportType.equals(JobExportType.PETALSESB)) {
IPath destPath=new Path(saDestinationFilePath);
String fileName, directory;
if (destPath.toFile().isDirectory()) {
fileName=getPetalsDefaultSaName();
directory=destPath.toOSString();
}
 else {
fileName=destPath.lastSegment();
directory=destPath.removeLastSegments(1).toOSString();
}
dialog.setFileName(fileName);
dialog.setFilterPath(directory);
}
 else {
dialog.setText(""String_Node_Str"");
dialog.setFileName((String)getDefaultFileName().get(0));
String currentSourceString=getDestinationValue();
int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
if (lastSeparatorIndex != -1) {
dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
}
}
String selectedFileName=dialog.open();
if (selectedFileName == null) {
return;
}
if (!selectedFileName.endsWith(getOutputSuffix())) selectedFileName+=getOutputSuffix();
if (selectedFileName != null && !selectedFileName.endsWith(getSelectedJobVersion() + getOutputSuffix())) {
String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
File file=new File(b);
String str=file.getName();
String s=(String)getDefaultFileName().get(0);
if (str.equals(s)) {
selectedFileName=b + ((JobExportType.OSGI.equals(jobExportType)) ? ""String_Node_Str"" : ""String_Node_Str"") + getDefaultFileName().get(1)+ getOutputSuffix();
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
if (selectedFileName != null) {
setErrorMessage(null);
saDestinationFilePath=selectedFileName;
setDestinationValue(selectedFileName);
if (getDialogSettings() != null) {
IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
if (section == null) {
section=getDialogSettings().addNewSection(DESTINATION_FILE);
}
section.put(DESTINATION_FILE,selectedFileName);
}
}
}","/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  JobExportType jobExportType=getCurrentExportType();
switch (jobExportType) {
case WSWAR:
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  break;
case JBOSSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case OSGI:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case PETALSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
default :
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
}
if (jobExportType.equals(JobExportType.PETALSESB)) {
IPath destPath=new Path(saDestinationFilePath);
String fileName, directory;
if (destPath.toFile().isDirectory()) {
fileName=getPetalsDefaultSaName();
directory=destPath.toOSString();
}
 else {
fileName=destPath.lastSegment();
directory=destPath.removeLastSegments(1).toOSString();
}
dialog.setFileName(fileName);
dialog.setFilterPath(directory);
}
 else {
dialog.setText(""String_Node_Str"");
dialog.setFileName((String)getDefaultFileName().get(0));
String currentSourceString=getDestinationValue();
int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
if (lastSeparatorIndex != -1) {
dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
}
}
String selectedFileName=dialog.open();
if (selectedFileName == null) {
return;
}
if (!selectedFileName.endsWith(getOutputSuffix())) selectedFileName+=getOutputSuffix();
if (selectedFileName != null && !selectedFileName.endsWith(getSelectedJobVersion() + getOutputSuffix())) {
String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
File file=new File(b);
String str=file.getName();
String s=(String)getDefaultFileName().get(0);
if (str.equals(s)) {
if (getDefaultFileName().get(1) != null && !""String_Node_Str"".equals(getDefaultFileName().get(1))) {
selectedFileName=b + ((JobExportType.OSGI.equals(jobExportType)) ? ""String_Node_Str"" : ""String_Node_Str"") + getDefaultFileName().get(1)+ getOutputSuffix();
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
if (selectedFileName != null) {
setErrorMessage(null);
saDestinationFilePath=selectedFileName;
setDestinationValue(selectedFileName);
if (getDialogSettings() != null) {
IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
if (section == null) {
section=getDialogSettings().addNewSection(DESTINATION_FILE);
}
section.put(DESTINATION_FILE,selectedFileName);
}
}
}",0.9715030731979885
124048,"protected void restoreWidgetValuesForESB(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
    if (section == null) {
      section=getDialogSettings().addNewSection(DESTINATION_FILE);
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    }
    if (contextButton != null && !contextButton.isDisposed()) {
      contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    }
    if (applyToChildrenButton != null && !applyToChildrenButton.isDisposed()) {
      applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    }
    if (section.get(ESB_EXPORT_TYPE) != null) {
      esbTypeCombo.setText(section.get(ESB_EXPORT_TYPE));
      if (section.get(ESB_SERVICE_NAME) != null) {
        esbServiceName.setText(section.get(ESB_SERVICE_NAME));
      }
      if (section.get(ESB_CATEGORY) != null) {
        esbCategory.setText(section.get(ESB_CATEGORY));
      }
      if (section.get(QUERY_MESSAGE_NAME) != null) {
        esbQueueMessageName.setText(section.get(QUERY_MESSAGE_NAME));
      }
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","protected void restoreWidgetValuesForESB(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
    if (section == null) {
      section=getDialogSettings().addNewSection(DESTINATION_FILE);
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    }
    if (contextButton != null && !contextButton.isDisposed()) {
      contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    }
    if (applyToChildrenButton != null && !applyToChildrenButton.isDisposed()) {
      applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    }
    if (section.get(ESB_EXPORT_TYPE) != null) {
      esbTypeCombo.setText(section.get(ESB_EXPORT_TYPE));
      if (section.get(ESB_SERVICE_NAME) != null) {
        esbServiceName.setText(section.get(ESB_SERVICE_NAME));
      }
      if (section.get(ESB_CATEGORY) != null) {
        esbCategory.setText(section.get(ESB_CATEGORY));
      }
      if (section.get(QUERY_MESSAGE_NAME) != null) {
        esbQueueMessageName.setText(section.get(QUERY_MESSAGE_NAME));
      }
    }
  }
  if (getProcessItem() != null && contextCombo != null) {
    try {
      setProcessItem((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(getProcessItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=getJobContexts(getProcessItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9753231492361928
124049,"protected void restoreWidgetValuesForOSGI(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestinationForOSGI();
    }
  }
 else {
    setDefaultDestinationForOSGI();
  }
}","protected void restoreWidgetValuesForOSGI(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestinationForOSGI();
    }
  }
 else {
    setDefaultDestinationForOSGI();
  }
}",0.910144927536232
124050,"protected void restoreWidgetValuesForPOJO(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    shellLauncherButton.setSelection(settings.getBoolean(STORE_SHELL_LAUNCHER_ID));
    systemRoutineButton.setSelection(settings.getBoolean(STORE_SYSTEM_ROUTINE_ID));
    userRoutineButton.setSelection(settings.getBoolean(STORE_USER_ROUTINE_ID));
    modelButton.setSelection(settings.getBoolean(STORE_MODEL_ID));
    jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setEnabled(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    zipOption=String.valueOf(chkButton.getSelection());
  }
  launcherCombo.setItems(JobScriptsManager.getLauncher());
  if (JobScriptsManager.getLauncher().length > 0) {
    launcherCombo.select(0);
  }
  if (getProcessItem() != null && contextCombo != null) {
    ProcessItem item=getProcessItem();
    try {
      String id=item.getProperty().getId();
      IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
      item=(ProcessItem)lastVersion.getProperty().getItem();
    }
 catch (    PersistenceException e) {
      throw new RuntimeException(e);
    }
    List<String> contextNames;
    contextNames=getJobContexts(item);
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","protected void restoreWidgetValuesForPOJO(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    String[] directoryNames=settings.getArray(STORE_DESTINATION_NAMES_ID);
    if (directoryNames != null && directoryNames.length > 0) {
      String fileName=getDefaultFileNameWithType();
      for (int i=0; i < directoryNames.length; i++) {
        String destination=new Path(directoryNames[i]).append(fileName).toOSString();
        addDestinationItem(destination);
        setDestinationValue(destination);
      }
    }
 else {
      setDefaultDestination();
    }
    shellLauncherButton.setSelection(settings.getBoolean(STORE_SHELL_LAUNCHER_ID));
    systemRoutineButton.setSelection(settings.getBoolean(STORE_SYSTEM_ROUTINE_ID));
    userRoutineButton.setSelection(settings.getBoolean(STORE_USER_ROUTINE_ID));
    modelButton.setSelection(settings.getBoolean(STORE_MODEL_ID));
    jobItemButton.setSelection(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setEnabled(settings.getBoolean(STORE_JOB_ID));
    exportDependencies.setSelection(settings.getBoolean(STORE_DEPENDENCIES_ID));
    jobScriptButton.setSelection(settings.getBoolean(STORE_SOURCE_ID));
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
    applyToChildrenButton.setSelection(settings.getBoolean(APPLY_TO_CHILDREN_ID));
    chkButton.setSelection(settings.getBoolean(EXTRACT_ZIP_FILE));
    zipOption=String.valueOf(chkButton.getSelection());
  }
  launcherCombo.setItems(JobScriptsManager.getLauncher());
  if (JobScriptsManager.getLauncher().length > 0) {
    launcherCombo.select(0);
  }
  if (getProcessItem() != null && contextCombo != null) {
    ProcessItem item=getProcessItem();
    try {
      String id=item.getProperty().getId();
      IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(id);
      item=(ProcessItem)lastVersion.getProperty().getItem();
    }
 catch (    PersistenceException e) {
      throw new RuntimeException(e);
    }
    List<String> contextNames;
    contextNames=getJobContexts(item);
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9728546409807356
124051,"/** 
 * yzhang Comment method ""setDefaultDestination"".
 */
protected void setDefaultDestination(){
  String userDir=System.getProperty(""String_Node_Str"");
  IPath path=new Path(userDir);
  int length=nodes.length;
  String destinationFile=""String_Node_Str"";
  if (getDialogSettings() != null) {
    IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
    if (section != null) {
      destinationFile=section.get(DESTINATION_FILE);
    }
  }
  if (destinationFile == null || ""String_Node_Str"".equals(destinationFile)) {
    if (length == 1) {
      path=path.append(this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix());
    }
 else     if (length > 1) {
      path=path.append(this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix());
    }
  }
 else {
    IPreferenceStore store=RepositoryManager.getPreferenceStore();
    if (store.getBoolean(IRepositoryPrefConstants.USE_EXPORT_SAVE)) {
      path=new Path(destinationFile);
    }
 else {
      path=path.append(this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix());
    }
  }
  setDestinationValue(path.toOSString());
}","/** 
 * yzhang Comment method ""setDefaultDestination"".
 */
protected void setDefaultDestination(){
  String userDir=System.getProperty(""String_Node_Str"");
  IPath path=new Path(userDir);
  int length=nodes.length;
  String destinationFile=""String_Node_Str"";
  if (getDialogSettings() != null) {
    IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
    if (section != null) {
      destinationFile=section.get(DESTINATION_FILE);
    }
  }
  if (destinationFile == null || ""String_Node_Str"".equals(destinationFile)) {
    if (length == 1) {
      path=path.append(getDefaultFileNameWithType());
    }
 else     if (length > 1) {
      path=path.append(getDefaultFileNameWithType());
    }
  }
 else {
    IPreferenceStore store=RepositoryManager.getPreferenceStore();
    if (store.getBoolean(IRepositoryPrefConstants.USE_EXPORT_SAVE)) {
      path=new Path(destinationFile);
    }
 else {
      path=path.append(getDefaultFileNameWithType());
    }
  }
  setDestinationValue(path.toOSString());
}",0.7598944591029023
124052,"protected void setDefaultDestinationForOSGI(){
  String bundleName=this.getDefaultFileName().get(0) + ""String_Node_Str"" + this.getDefaultFileName().get(1)+ getOutputSuffix();
  String userDir=System.getProperty(""String_Node_Str"");
  IPath path=new Path(userDir).append(bundleName);
  setDestinationValue(path.toOSString());
}","protected void setDefaultDestinationForOSGI(){
  String bundleName=getDefaultFileNameWithType();
  String userDir=System.getProperty(""String_Node_Str"");
  IPath path=new Path(userDir).append(bundleName);
  setDestinationValue(path.toOSString());
}",0.8356643356643356
124053,"protected List<String> getDefaultFileName(){
  List<String> list=null;
  if (nodes.length >= 1) {
    String label=null;
    String version=null;
    RepositoryNode node=nodes[0];
    if (node.getType() == ENodeType.SYSTEM_FOLDER || node.getType() == ENodeType.SIMPLE_FOLDER) {
      label=node.getProperties(EProperties.LABEL).toString();
    }
 else     if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      IRepositoryViewObject repositoryObject=node.getObject();
      if (repositoryObject.getProperty().getItem() instanceof ProcessItem) {
        ProcessItem processItem=(ProcessItem)repositoryObject.getProperty().getItem();
        label=processItem.getProperty().getLabel();
        version=processItem.getProperty().getVersion();
        list=new ArrayList<String>();
        list.add(label);
        list.add(version);
      }
    }
    return list;
  }
  return null;
}","protected List<String> getDefaultFileName(){
  List<String> list=new ArrayList<String>();
  if (nodes.length >= 1) {
    String label=""String_Node_Str"";
    String version=""String_Node_Str"";
    if (nodes.length > 1) {
      label=ProjectManager.getInstance().getCurrentProject().getLabel();
    }
 else {
      RepositoryNode node=nodes[0];
      if (node.getType() == ENodeType.SYSTEM_FOLDER || node.getType() == ENodeType.SIMPLE_FOLDER) {
        label=node.getProperties(EProperties.LABEL).toString();
      }
 else       if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
        IRepositoryViewObject repositoryObject=node.getObject();
        if (repositoryObject.getProperty().getItem() instanceof ProcessItem) {
          ProcessItem processItem=(ProcessItem)repositoryObject.getProperty().getItem();
          label=processItem.getProperty().getLabel();
          version=processItem.getProperty().getVersion();
        }
      }
    }
    list.add(label);
    list.add(version);
    return list;
  }
  return null;
}",0.744258872651357
124054,"@Override public JobScriptsManager createJobScriptsManager(){
  Map<ExportChoice,Object> exportChoiceMap=getExportChoiceMap();
  String launcher=(getCurrentExportType() == JobExportType.POJO) ? launcherCombo.getText() : ""String_Node_Str"";
  String context=(contextCombo == null || contextCombo.isDisposed()) ? ""String_Node_Str"" : contextCombo.getText();
  JobScriptsManager manager=JobScriptsManagerFactory.createManagerInstance(exportChoiceMap,context,launcher,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES,getCurrentExportType());
  manager.setDestinationPath(getDestinationValue());
  return manager;
}","@Override public JobScriptsManager createJobScriptsManager(){
  Map<ExportChoice,Object> exportChoiceMap=getExportChoiceMap();
  String launcher=(getCurrentExportType1() == JobExportType.POJO) ? launcherCombo.getText() : ""String_Node_Str"";
  String context=(contextCombo == null || contextCombo.isDisposed()) ? ""String_Node_Str"" : contextCombo.getText();
  JobScriptsManager manager=JobScriptsManagerFactory.createManagerInstance(exportChoiceMap,context,launcher,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES,getCurrentExportType1());
  manager.setDestinationPath(getDestinationValue());
  return manager;
}",0.9983498349834984
124055,"@Override protected void internalSaveWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    if (getCurrentExportType().equals(JobExportType.PETALSESB)) {
      String[] directoryNames=settings.getArray(PETALS_EXPORT_DESTINATIONS);
      if (directoryNames == null)       directoryNames=new String[0];
      directoryNames=addToHistory(directoryNames,saDestinationFilePath);
      settings.put(PETALS_EXPORT_DESTINATIONS,directoryNames);
      return;
    }
    String[] directoryNames=new String[1];
    String destinationValue=getDestinationValue();
    if (destinationValue != null) {
      destinationValue=destinationValue.substring(0,destinationValue.lastIndexOf(File.separator));
    }
    directoryNames[0]=destinationValue;
    settings.put(STORE_EXPORTTYPE_ID,getCurrentExportType().toString());
    settings.put(STORE_DESTINATION_NAMES_ID,directoryNames);
    if (getCurrentExportType().equals(JobExportType.OSGI)) {
      return;
    }
    if (contextButton != null) {
      settings.put(STORE_CONTEXT_ID,contextButton.getSelection());
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      settings.put(STORE_SOURCE_ID,jobScriptButton.getSelection());
    }
    if (applyToChildrenButton != null) {
      settings.put(APPLY_TO_CHILDREN_ID,applyToChildrenButton.getSelection());
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      settings.put(STORE_JOB_ID,jobItemButton.getSelection());
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      settings.put(STORE_DEPENDENCIES_ID,exportDependencies.getSelection());
    }
    if (getCurrentExportType().equals(JobExportType.POJO)) {
      settings.put(STORE_SHELL_LAUNCHER_ID,shellLauncherButton.getSelection());
      settings.put(STORE_SYSTEM_ROUTINE_ID,systemRoutineButton.getSelection());
      settings.put(STORE_USER_ROUTINE_ID,userRoutineButton.getSelection());
      settings.put(STORE_MODEL_ID,modelButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
      return;
    }
 else     if (getCurrentExportType().equals(JobExportType.WSZIP)) {
      settings.put(STORE_WEBXML_ID,webXMLButton.getSelection());
      settings.put(STORE_CONFIGFILE_ID,configFileButton.getSelection());
      settings.put(STORE_AXISLIB_ID,axisLibButton.getSelection());
      settings.put(STORE_WSDD_ID,wsddButton.getSelection());
      settings.put(STORE_WSDL_ID,wsdlButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
    }
  }
}","@Override protected void internalSaveWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    if (getCurrentExportType1().equals(JobExportType.PETALSESB)) {
      String[] directoryNames=settings.getArray(PETALS_EXPORT_DESTINATIONS);
      if (directoryNames == null)       directoryNames=new String[0];
      directoryNames=addToHistory(directoryNames,saDestinationFilePath);
      settings.put(PETALS_EXPORT_DESTINATIONS,directoryNames);
      return;
    }
    String[] directoryNames=new String[1];
    String destinationValue=getDestinationValue();
    if (destinationValue != null) {
      destinationValue=destinationValue.substring(0,destinationValue.lastIndexOf(File.separator));
    }
    directoryNames[0]=destinationValue;
    settings.put(STORE_EXPORTTYPE_ID,getCurrentExportType1().toString());
    settings.put(STORE_DESTINATION_NAMES_ID,directoryNames);
    if (getCurrentExportType1().equals(JobExportType.OSGI)) {
      return;
    }
    if (contextButton != null) {
      settings.put(STORE_CONTEXT_ID,contextButton.getSelection());
    }
    if (jobScriptButton != null && !jobScriptButton.isDisposed()) {
      settings.put(STORE_SOURCE_ID,jobScriptButton.getSelection());
    }
    if (applyToChildrenButton != null) {
      settings.put(APPLY_TO_CHILDREN_ID,applyToChildrenButton.getSelection());
    }
    if (jobItemButton != null && !jobItemButton.isDisposed()) {
      settings.put(STORE_JOB_ID,jobItemButton.getSelection());
    }
    if (exportDependencies != null && !exportDependencies.isDisposed()) {
      settings.put(STORE_DEPENDENCIES_ID,exportDependencies.getSelection());
    }
    if (getCurrentExportType1().equals(JobExportType.POJO)) {
      settings.put(STORE_SHELL_LAUNCHER_ID,shellLauncherButton.getSelection());
      settings.put(STORE_SYSTEM_ROUTINE_ID,systemRoutineButton.getSelection());
      settings.put(STORE_USER_ROUTINE_ID,userRoutineButton.getSelection());
      settings.put(STORE_MODEL_ID,modelButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
      return;
    }
 else     if (getCurrentExportType1().equals(JobExportType.WSZIP)) {
      settings.put(STORE_WEBXML_ID,webXMLButton.getSelection());
      settings.put(STORE_CONFIGFILE_ID,configFileButton.getSelection());
      settings.put(STORE_AXISLIB_ID,axisLibButton.getSelection());
      settings.put(STORE_WSDD_ID,wsddButton.getSelection());
      settings.put(STORE_WSDL_ID,wsdlButton.getSelection());
      settings.put(EXTRACT_ZIP_FILE,chkButton.getSelection());
    }
  }
}",0.9990251511015792
124056,"/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  JobExportType jobExportType=getCurrentExportType();
switch (jobExportType) {
case WSWAR:
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  break;
case JBOSSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case OSGI:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case PETALSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
default :
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
}
if (jobExportType.equals(JobExportType.PETALSESB)) {
IPath destPath=new Path(saDestinationFilePath);
String fileName, directory;
if (destPath.toFile().isDirectory()) {
fileName=getPetalsDefaultSaName();
directory=destPath.toOSString();
}
 else {
fileName=destPath.lastSegment();
directory=destPath.removeLastSegments(1).toOSString();
}
dialog.setFileName(fileName);
dialog.setFilterPath(directory);
}
 else {
dialog.setText(""String_Node_Str"");
dialog.setFileName((String)getDefaultFileName().get(0));
String currentSourceString=getDestinationValue();
int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
if (lastSeparatorIndex != -1) {
dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
}
}
String selectedFileName=dialog.open();
if (selectedFileName == null) {
return;
}
if (!selectedFileName.endsWith(getOutputSuffix())) selectedFileName+=getOutputSuffix();
if (selectedFileName != null && !selectedFileName.endsWith(getSelectedJobVersion() + getOutputSuffix())) {
String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
File file=new File(b);
String str=file.getName();
String s=(String)getDefaultFileName().get(0);
if (str.equals(s)) {
if (getDefaultFileName().get(1) != null && !""String_Node_Str"".equals(getDefaultFileName().get(1))) {
selectedFileName=b + ((JobExportType.OSGI.equals(jobExportType)) ? ""String_Node_Str"" : ""String_Node_Str"") + getDefaultFileName().get(1)+ getOutputSuffix();
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
if (selectedFileName != null) {
setErrorMessage(null);
saDestinationFilePath=selectedFileName;
setDestinationValue(selectedFileName);
if (getDialogSettings() != null) {
IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
if (section == null) {
section=getDialogSettings().addNewSection(DESTINATION_FILE);
}
section.put(DESTINATION_FILE,selectedFileName);
}
}
}","/** 
 * Open an appropriate destination browser so that the user can specify a source to import from.
 */
@Override protected void handleDestinationBrowseButtonPressed(){
  FileDialog dialog=new FileDialog(getContainer().getShell(),SWT.SAVE);
  JobExportType jobExportType=getCurrentExportType1();
switch (jobExportType) {
case WSWAR:
    dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
  break;
case JBOSSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case OSGI:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
case PETALSESB:
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
break;
default :
dialog.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str""});
}
if (jobExportType.equals(JobExportType.PETALSESB)) {
IPath destPath=new Path(saDestinationFilePath);
String fileName, directory;
if (destPath.toFile().isDirectory()) {
fileName=getPetalsDefaultSaName();
directory=destPath.toOSString();
}
 else {
fileName=destPath.lastSegment();
directory=destPath.removeLastSegments(1).toOSString();
}
dialog.setFileName(fileName);
dialog.setFilterPath(directory);
}
 else {
dialog.setText(""String_Node_Str"");
dialog.setFileName((String)getDefaultFileName().get(0));
String currentSourceString=getDestinationValue();
int lastSeparatorIndex=currentSourceString.lastIndexOf(File.separator);
if (lastSeparatorIndex != -1) {
dialog.setFilterPath(currentSourceString.substring(0,lastSeparatorIndex));
}
}
String selectedFileName=dialog.open();
if (selectedFileName == null) {
return;
}
if (!selectedFileName.endsWith(getOutputSuffix())) selectedFileName+=getOutputSuffix();
if (selectedFileName != null && !selectedFileName.endsWith(getSelectedJobVersion() + getOutputSuffix())) {
String b=selectedFileName.substring(0,(selectedFileName.length() - 4));
File file=new File(b);
String str=file.getName();
String s=(String)getDefaultFileName().get(0);
if (str.equals(s)) {
if (getDefaultFileName().get(1) != null && !""String_Node_Str"".equals(getDefaultFileName().get(1))) {
selectedFileName=b + ((JobExportType.OSGI.equals(jobExportType)) ? ""String_Node_Str"" : ""String_Node_Str"") + getDefaultFileName().get(1)+ getOutputSuffix();
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
 else {
selectedFileName=b + getOutputSuffix();
}
}
if (selectedFileName != null) {
setErrorMessage(null);
saDestinationFilePath=selectedFileName;
setDestinationValue(selectedFileName);
if (getDialogSettings() != null) {
IDialogSettings section=getDialogSettings().getSection(DESTINATION_FILE);
if (section == null) {
section=getDialogSettings().addNewSection(DESTINATION_FILE);
}
section.put(DESTINATION_FILE,selectedFileName);
}
}
}",0.9998189389824372
124057,"protected void createExportTypeGroup(Composite parent){
  Group optionsGroup=new Group(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(Messages.getString(""String_Node_Str""));
  optionsGroup.setFont(parent.getFont());
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  left.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,true,false));
  left.setLayout(new GridLayout(3,false));
  Label label=new Label(left,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  exportTypeCombo=new Combo(left,SWT.PUSH);
  GridData gd=new GridData();
  gd.horizontalSpan=1;
  exportTypeCombo.setLayoutData(gd);
  for (  JobExportType exportType : JobExportType.values()) {
    if (!Boolean.getBoolean(""String_Node_Str"" + exportType.toString() + ""String_Node_Str"")) {
      exportTypeCombo.add(exportType.label);
    }
  }
  exportTypeCombo.setText(getCurrentExportType().label);
  if (exportTypeFixed != null) {
    left.setVisible(false);
    optionsGroup.setVisible(false);
    exportTypeCombo.setText(exportTypeFixed.label);
  }
  chkButton=new Button(left,SWT.CHECK);
  chkButton.setText(Messages.getString(""String_Node_Str""));
  JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
  if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.PETALSESB) || comboType.equals(JobExportType.OSGI)) {
    chkButton.setVisible(false);
    zipOption=null;
  }
 else {
    chkButton.setVisible(true);
    zipOption=String.valueOf(chkButton.getSelection());
  }
  chkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      chkButton.setSelection(chkButton.getSelection());
      zipOption=String.valueOf(chkButton.getSelection());
    }
  }
);
  exportTypeCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      destinationNameFieldInnerComposite.dispose();
      GridLayout layout=new GridLayout();
      destinationNameFieldInnerComposite=new Composite(destinationNameFieldComposite,SWT.NONE);
      GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
      destinationNameFieldInnerComposite.setLayoutData(gridData);
      destinationNameFieldInnerComposite.setLayout(layout);
      createDestinationGroup(destinationNameFieldInnerComposite);
      destinationNameFieldComposite.layout();
      optionsGroupComposite.dispose();
      createOptionsGroupButtons(pageComposite);
      pageComposite.layout();
      JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
      if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.OSGI)) {
        chkButton.setVisible(false);
        zipOption=null;
      }
 else {
        chkButton.setVisible(true);
        zipOption=String.valueOf(chkButton.getSelection());
      }
      checkExport();
    }
  }
);
}","protected void createExportTypeGroup(Composite parent){
  Group optionsGroup=new Group(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(Messages.getString(""String_Node_Str""));
  optionsGroup.setFont(parent.getFont());
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  left.setLayoutData(new GridData(SWT.LEFT,SWT.TOP,true,false));
  left.setLayout(new GridLayout(3,false));
  Label label=new Label(left,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  exportTypeCombo=new Combo(left,SWT.PUSH);
  GridData gd=new GridData();
  gd.horizontalSpan=1;
  exportTypeCombo.setLayoutData(gd);
  for (  JobExportType exportType : JobExportType.values()) {
    if (!Boolean.getBoolean(""String_Node_Str"" + exportType.toString() + ""String_Node_Str"")) {
      exportTypeCombo.add(exportType.label);
    }
  }
  exportTypeCombo.setText(getCurrentExportType1().label);
  if (exportTypeFixed != null) {
    left.setVisible(false);
    optionsGroup.setVisible(false);
    exportTypeCombo.setText(exportTypeFixed.label);
  }
  chkButton=new Button(left,SWT.CHECK);
  chkButton.setText(Messages.getString(""String_Node_Str""));
  JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
  if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.PETALSESB) || comboType.equals(JobExportType.OSGI)) {
    chkButton.setVisible(false);
    zipOption=null;
  }
 else {
    chkButton.setVisible(true);
    zipOption=String.valueOf(chkButton.getSelection());
  }
  chkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      chkButton.setSelection(chkButton.getSelection());
      zipOption=String.valueOf(chkButton.getSelection());
    }
  }
);
  exportTypeCombo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      destinationNameFieldInnerComposite.dispose();
      GridLayout layout=new GridLayout();
      destinationNameFieldInnerComposite=new Composite(destinationNameFieldComposite,SWT.NONE);
      GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
      destinationNameFieldInnerComposite.setLayoutData(gridData);
      destinationNameFieldInnerComposite.setLayout(layout);
      createDestinationGroup(destinationNameFieldInnerComposite);
      destinationNameFieldComposite.layout();
      optionsGroupComposite.dispose();
      createOptionsGroupButtons(pageComposite);
      pageComposite.layout();
      JobExportType comboType=JobExportType.getTypeFromString(exportTypeCombo.getText());
      if (comboType.equals(JobExportType.WSWAR) || comboType.equals(JobExportType.OSGI)) {
        chkButton.setVisible(false);
        zipOption=null;
      }
 else {
        chkButton.setVisible(true);
        zipOption=String.valueOf(chkButton.getSelection());
      }
      checkExport();
    }
  }
);
}",0.9998435789144376
124058,"@Override protected String getOutputSuffix(){
switch (getCurrentExportType()) {
case WSWAR:
    return ""String_Node_Str"";
case JBOSSESB:
  return ""String_Node_Str"";
case OSGI:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","@Override protected String getOutputSuffix(){
switch (getCurrentExportType1()) {
case WSWAR:
    return ""String_Node_Str"";
case JBOSSESB:
  return ""String_Node_Str"";
case OSGI:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9979296066252588
124059,"protected void createOptionsGroupButtons(Composite parent){
  GridLayout layout=new GridLayout();
  optionsGroupComposite=new Composite(parent,SWT.NONE);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
  gridData.minimumHeight=200;
  optionsGroupComposite.setLayoutData(gridData);
  optionsGroupComposite.setLayout(layout);
  Group optionsGroup=new Group(optionsGroupComposite,SWT.NONE);
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(IDEWorkbenchMessages.WizardExportPage_options);
  optionsGroup.setFont(parent.getFont());
  Font font=optionsGroup.getFont();
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  gridData=new GridData(SWT.LEFT,SWT.TOP,true,false);
  left.setLayoutData(gridData);
  left.setLayout(new GridLayout(3,true));
switch (getCurrentExportType()) {
case POJO:
    createOptions(left,font);
  restoreWidgetValuesForPOJO();
break;
case JBOSSESB:
createOptionsForJbossESB(left,font);
restoreWidgetValuesForESB();
break;
case PETALSESB:
createOptionsforPetalsESB(left,font);
restoreWidgetValuesForPetalsESB();
restoreWidgetValues();
break;
case OSGI:
createOptionsForOSGIESB(left,font);
restoreWidgetValuesForOSGI();
break;
default :
createOptionsForWS(left,font);
break;
}
}","protected void createOptionsGroupButtons(Composite parent){
  GridLayout layout=new GridLayout();
  optionsGroupComposite=new Composite(parent,SWT.NONE);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
  gridData.minimumHeight=200;
  optionsGroupComposite.setLayoutData(gridData);
  optionsGroupComposite.setLayout(layout);
  Group optionsGroup=new Group(optionsGroupComposite,SWT.NONE);
  optionsGroup.setLayout(layout);
  optionsGroup.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL));
  optionsGroup.setText(IDEWorkbenchMessages.WizardExportPage_options);
  optionsGroup.setFont(parent.getFont());
  Font font=optionsGroup.getFont();
  optionsGroup.setLayout(new GridLayout(1,true));
  Composite left=new Composite(optionsGroup,SWT.NONE);
  gridData=new GridData(SWT.LEFT,SWT.TOP,true,false);
  left.setLayoutData(gridData);
  left.setLayout(new GridLayout(3,true));
switch (getCurrentExportType1()) {
case POJO:
    createOptions(left,font);
  restoreWidgetValuesForPOJO();
break;
case JBOSSESB:
createOptionsForJbossESB(left,font);
restoreWidgetValuesForESB();
break;
case PETALSESB:
createOptionsforPetalsESB(left,font);
restoreWidgetValuesForPetalsESB();
restoreWidgetValues();
break;
case OSGI:
createOptionsForOSGIESB(left,font);
restoreWidgetValuesForOSGI();
break;
default :
createOptionsForWS(left,font);
break;
}
}",0.9996450124245652
124060,"@Override public boolean checkExport(){
  setErrorMessage(null);
  if (!super.checkExport()) {
    return false;
  }
  if (getCurrentExportType().equals(JobExportType.PETALSESB)) {
    chkButton.setVisible(false);
    zipOption=null;
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    validateOptionsGroup();
  }
  if (getCurrentExportType().equals(JobExportType.JBOSSESB)) {
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    String requiredJar=""String_Node_Str"";
    List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
    for (    ModuleNeeded current : toCheck) {
      if (requiredJar.equals(current.getModuleName())) {
        if (current.getStatus() == ELibraryInstallStatus.NOT_INSTALLED) {
          StringBuilder buff=new StringBuilder();
          buff.append(Messages.getString(""String_Node_Str""));
          buff.append(Messages.getString(""String_Node_Str""));
          setErrorMessage(buff.toString());
          break;
        }
      }
    }
  }
  if (getCurrentExportType().equals(JobExportType.OSGI)) {
    if (isMultiNodes()) {
      setErrorMessage(""String_Node_Str"");
    }
  }
  if (getCheckNodes().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
  boolean noError=getErrorMessage() == null;
  setPageComplete(noError);
  return noError;
}","@Override public boolean checkExport(){
  setErrorMessage(null);
  if (!super.checkExport()) {
    return false;
  }
  if (getCurrentExportType1().equals(JobExportType.PETALSESB)) {
    chkButton.setVisible(false);
    zipOption=null;
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    validateOptionsGroup();
  }
  if (getCurrentExportType1().equals(JobExportType.JBOSSESB)) {
    if (isMultiNodes()) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
    }
    String requiredJar=""String_Node_Str"";
    List<ModuleNeeded> toCheck=ModulesNeededProvider.getModulesNeeded();
    for (    ModuleNeeded current : toCheck) {
      if (requiredJar.equals(current.getModuleName())) {
        if (current.getStatus() == ELibraryInstallStatus.NOT_INSTALLED) {
          StringBuilder buff=new StringBuilder();
          buff.append(Messages.getString(""String_Node_Str""));
          buff.append(Messages.getString(""String_Node_Str""));
          setErrorMessage(buff.toString());
          break;
        }
      }
    }
  }
  if (getCurrentExportType1().equals(JobExportType.OSGI)) {
    if (isMultiNodes()) {
      setErrorMessage(""String_Node_Str"");
    }
  }
  if (getCheckNodes().length == 0) {
    setErrorMessage(Messages.getString(""String_Node_Str""));
  }
  boolean noError=getErrorMessage() == null;
  setPageComplete(noError);
  return noError;
}",0.9989320042719828
124061,"protected String getDefaultFileNameWithType(){
  String version=""String_Node_Str"";
  List<String> defaultFileName=getDefaultFileName();
  if (defaultFileName.get(1) != null && !""String_Node_Str"".equals(defaultFileName.get(1))) {
    version=((JobExportType.OSGI.equals(getCurrentExportType())) ? ""String_Node_Str"" : ""String_Node_Str"") + defaultFileName.get(1);
  }
  String fileName=defaultFileName.get(0) + version + getOutputSuffix();
  return fileName;
}","protected String getDefaultFileNameWithType(){
  String version=""String_Node_Str"";
  List<String> defaultFileName=getDefaultFileName();
  if (defaultFileName.get(1) != null && !""String_Node_Str"".equals(defaultFileName.get(1))) {
    version=((JobExportType.OSGI.equals(getCurrentExportType1())) ? ""String_Node_Str"" : ""String_Node_Str"") + defaultFileName.get(1);
  }
  String fileName=defaultFileName.get(0) + version + getOutputSuffix();
  return fileName;
}",0.9989071038251366
124062,"public void writeComment(String commentText) throws IOException {
  checkClosed();
  checkInit();
  outputStream.write(userSettings.Comment);
  outputStream.write(commentText);
  if (useCustomRecordDelimiter) {
    outputStream.write(userSettings.RecordDelimiter);
  }
 else {
    outputStream.println();
  }
  firstColumn=true;
}","public void writeComment(String commentText) throws IOException {
  checkClosed();
  checkInit();
  outputStream.write(userSettings.Comment);
  outputStream.write(commentText);
  if (useCustomRecordDelimiter) {
    outputStream.write(userSettings.RecordDelimiter);
  }
 else   if (useCRLFRecordDelimiter) {
    outputStream.print(CRLF);
  }
 else {
    outputStream.println();
  }
  firstColumn=true;
}",0.8934426229508197
124063,"/** 
 * Ends the current record by sending the record delimiter.
 * @exception IOException Thrown if an error occurs while writing data to the destination stream.
 */
public void endRecord() throws IOException {
  checkClosed();
  checkInit();
  if (useCustomRecordDelimiter) {
    outputStream.write(userSettings.RecordDelimiter);
  }
 else {
    outputStream.println();
  }
  firstColumn=true;
}","/** 
 * Ends the current record by sending the record delimiter.
 * @exception IOException Thrown if an error occurs while writing data to the destination stream.
 */
public void endRecord() throws IOException {
  checkClosed();
  checkInit();
  if (useCustomRecordDelimiter) {
    outputStream.write(userSettings.RecordDelimiter);
  }
 else   if (useCRLFRecordDelimiter) {
    outputStream.print(CRLF);
  }
 else {
    outputStream.println();
  }
  firstColumn=true;
}",0.9099307159353348
124064,"private void createTosProjectArea(final Composite parent){
  tosProjectComposite=toolkit.createComposite(parent);
  tosProjectComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosProjectComposite.setLayout(new FormLayout());
  tosProjectComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tosProjectComposite.setBackground(parent.getBackground());
  openProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  openProjectBtn.setText(Messages.getString(""String_Node_Str""));
  openProjectBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  Image image=ImageProvider.getImage(ERepositoryImages.OPEN_PROJECT_ICON);
  openProjectBtn.setImage(image);
  openProjectBtn.setVisible(false);
  Label createProjectLabel=toolkit.createLabel(tosProjectComposite,Messages.getString(""String_Node_Str""));
  createProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  createProjectBtn.setBackground(tosProjectComposite.getBackground());
  createProjectBtn.setText(Messages.getString(""String_Node_Str""));
  FormData data=new FormData();
  data.top=new FormAttachment(createProjectLabel,-HORIZONTAL_SPACE,SWT.CENTER);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(0,30 + HORIZONTAL_SPACE);
  createProjectBtn.setLayoutData(data);
  createProjectBtn.setEnabled(true);
  GC gc=new GC(createProjectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(createProjectBtn,0,SWT.BOTTOM);
  createProjectLabel.setLayoutData(data);
  projectText=toolkit.createText(tosProjectComposite,""String_Node_Str"",SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,0,SWT.TOP);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,0,SWT.BOTTOM);
  Point btPoint=createProjectBtn.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  projectText.setLayoutData(data);
  projectText.setText(DEFAULT_PROJECT_NAME);
  advanced=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  advanced.setText(Messages.getString(""String_Node_Str""));
  advanced.setBackground(tosProjectComposite.getBackground());
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE + 50);
  advanced.setLayoutData(data);
  createProjectBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      NewProjectWizard newPrjWiz=new NewProjectWizard(new Project[]{});
      newPrjWiz.setDefaultProjectName(projectText.getText());
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        populateProjectList();
        projectText.setText(project.getLabel());
        dialog.advanced();
      }
    }
  }
);
  advanced.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialog.advanced();
    }
  }
);
}","private void createTosProjectArea(final Composite parent){
  tosProjectComposite=toolkit.createComposite(parent);
  tosProjectComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosProjectComposite.setLayout(new FormLayout());
  tosProjectComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tosProjectComposite.setBackground(parent.getBackground());
  openProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  openProjectBtn.setText(Messages.getString(""String_Node_Str""));
  openProjectBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  Image image=ImageProvider.getImage(ERepositoryImages.OPEN_PROJECT_ICON);
  openProjectBtn.setImage(image);
  openProjectBtn.setVisible(false);
  Label createProjectLabel=toolkit.createLabel(tosProjectComposite,Messages.getString(""String_Node_Str""));
  createProjectBtn=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  createProjectBtn.setBackground(tosProjectComposite.getBackground());
  createProjectBtn.setText(Messages.getString(""String_Node_Str""));
  FormData data=new FormData();
  data.top=new FormAttachment(createProjectLabel,-HORIZONTAL_SPACE,SWT.CENTER);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(0,30 + HORIZONTAL_SPACE);
  createProjectBtn.setLayoutData(data);
  createProjectBtn.setEnabled(true);
  GC gc=new GC(createProjectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(createProjectBtn,0,SWT.BOTTOM);
  createProjectLabel.setLayoutData(data);
  projectText=toolkit.createText(tosProjectComposite,""String_Node_Str"",SWT.BORDER);
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,0,SWT.TOP);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,0,SWT.BOTTOM);
  Point btPoint=createProjectBtn.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  projectText.setLayoutData(data);
  projectText.setText(DEFAULT_PROJECT_NAME);
  projectText.setBackground(GREY_COLOR);
  projectText.addFocusListener(new FocusAdapter(){
    public void focusGained(    FocusEvent e){
      projectText.setBackground(null);
      projectText.setText(""String_Node_Str"");
    }
  }
);
  advanced=toolkit.createButton(tosProjectComposite,null,SWT.PUSH);
  advanced.setText(Messages.getString(""String_Node_Str""));
  advanced.setBackground(tosProjectComposite.getBackground());
  data=new FormData();
  data.top=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE);
  data.left=new FormAttachment(createProjectLabel,10,SWT.RIGHT);
  data.bottom=new FormAttachment(createProjectLabel,HORIZONTAL_TWO_SPACE + 50);
  advanced.setLayoutData(data);
  createProjectBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      NewProjectWizard newPrjWiz=new NewProjectWizard(new Project[]{});
      newPrjWiz.setDefaultProjectName(projectText.getText());
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        populateProjectList();
        projectText.setText(project.getLabel());
        dialog.advanced();
      }
    }
  }
);
  advanced.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      dialog.advanced();
    }
  }
);
}",0.9677682578539372
124065,"private boolean checkItem(ItemRecord itemRecord,boolean overwrite){
  boolean result=false;
  try {
    Item item=itemRecord.getItem();
    if (item instanceof TDQItem) {
      return false;
    }
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    cache.initialize(itemType);
    boolean isAllowMultipleName=(itemType == ERepositoryObjectType.SQLPATTERNS || itemType == ERepositoryObjectType.METADATA_FILE_XML);
    String itemPath=null;
    if (item.getState() != null) {
      itemPath=item.getState().getPath();
    }
    boolean nameAvailable=true;
    IRepositoryViewObject itemWithSameId=null;
    IRepositoryViewObject itemWithSameName=null;
    for (    IRepositoryViewObject current : cache.getItemsFromRepository().get(itemType)) {
      if (itemRecord.getProperty().getLabel().equalsIgnoreCase(current.getLabel()) && itemRecord.getProperty().getId() != current.getId()) {
        if (!isAllowMultipleName || current.getPath().equals(itemPath)) {
          nameAvailable=false;
        }
        if (!nameAvailable) {
          itemWithSameName=current;
        }
      }
      if (itemRecord.getProperty().getId().equalsIgnoreCase(current.getId())) {
        itemWithSameId=current;
      }
    }
    itemRecord.setExistingItemWithSameId(itemWithSameId);
    boolean idAvailable=itemWithSameId == null;
    boolean isSystem=false;
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getRoutineItem())) {
      RoutineItem routineItem=(RoutineItem)item;
      if (item instanceof RoutineItem) {
        RoutineItem rItem=(RoutineItem)item;
        Set<String> set=routineExtModulesMap.get(rItem.getProperty().getId());
        if (set == null) {
          set=new HashSet<String>();
          routineExtModulesMap.put(rItem.getProperty().getId(),set);
        }
        for (        IMPORTType type : (List<IMPORTType>)rItem.getImports()) {
          set.add(type.getMODULE());
        }
      }
      if (routineItem.isBuiltIn()) {
        isSystem=true;
      }
    }
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getSQLPatternItem())) {
      SQLPatternItem sqlPatternItem=(SQLPatternItem)item;
      if (sqlPatternItem.isSystem()) {
        isSystem=true;
      }
    }
    if (isSystem) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return result;
    }
    if (nameAvailable) {
      if (idAvailable) {
        if (!isSystem) {
          result=true;
        }
      }
 else {
        itemRecord.setState(State.ID_EXISTED);
        result=true;
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (!isSystem && overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          result=true;
        }
      }
 else {
        itemRecord.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          result=true;
        }
        if (!isSystem && overwrite && !itemWithSameName.getProperty().getLabel().equals(itemWithSameId.getProperty().getLabel())) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          result=true;
        }
      }
      if (!result && !isSystem) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (result && overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
        result=false;
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return result;
}","private boolean checkItem(ItemRecord itemRecord,boolean overwrite){
  boolean result=false;
  try {
    Item item=itemRecord.getItem();
    if (item instanceof TDQItem) {
      return false;
    }
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    cache.initialize(itemType);
    boolean isAllowMultipleName=(itemType == ERepositoryObjectType.SQLPATTERNS || itemType == ERepositoryObjectType.METADATA_FILE_XML);
    String itemPath=null;
    if (item.getState() != null) {
      itemPath=item.getState().getPath();
    }
    boolean nameAvailable=true;
    IRepositoryViewObject itemWithSameId=null;
    IRepositoryViewObject itemWithSameName=null;
    for (    IRepositoryViewObject current : cache.getItemsFromRepository().get(itemType)) {
      if (itemRecord.getProperty().getLabel().equalsIgnoreCase(current.getLabel()) && itemRecord.getProperty().getId() != current.getId()) {
        if (!isAllowMultipleName || current.getPath().equals(itemPath)) {
          nameAvailable=false;
        }
        if (!nameAvailable) {
          itemWithSameName=current;
        }
      }
      if (itemRecord.getProperty().getId().equalsIgnoreCase(current.getId())) {
        itemWithSameId=current;
      }
    }
    itemRecord.setExistingItemWithSameId(itemWithSameId);
    boolean idAvailable=itemWithSameId == null;
    boolean isSystem=false;
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getRoutineItem())) {
      RoutineItem routineItem=(RoutineItem)item;
      if (item instanceof RoutineItem) {
        RoutineItem rItem=(RoutineItem)item;
        Set<String> set=routineExtModulesMap.get(rItem.getProperty().getId());
        if (set == null) {
          set=new HashSet<String>();
          routineExtModulesMap.put(rItem.getProperty().getId(),set);
        }
        for (        IMPORTType type : (List<IMPORTType>)rItem.getImports()) {
          set.add(type.getMODULE());
        }
      }
      if (routineItem.isBuiltIn()) {
        isSystem=true;
      }
    }
    if (item.eClass().equals(PropertiesPackage.eINSTANCE.getSQLPatternItem())) {
      SQLPatternItem sqlPatternItem=(SQLPatternItem)item;
      if (sqlPatternItem.isSystem()) {
        isSystem=true;
      }
    }
    if (isSystem) {
      itemRecord.addError(Messages.getString(""String_Node_Str""));
      return result;
    }
    if (nameAvailable) {
      if (idAvailable) {
        if (!isSystem) {
          result=true;
        }
      }
 else {
        itemRecord.setState(State.ID_EXISTED);
        result=true;
      }
    }
 else {
      if (idAvailable) {
        itemRecord.setState(State.NAME_EXISTED);
        if (!isSystem && overwrite) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          result=true;
        }
      }
 else {
        itemRecord.setState(State.NAME_EXISTED);
        if (overwrite) {
          result=true;
        }
        if (!isSystem && overwrite && !itemWithSameName.getProperty().getLabel().equals(itemWithSameId.getProperty().getLabel())) {
          itemRecord.setExistingItemWithSameId(itemWithSameName);
          itemRecord.setState(State.NAME_AND_ID_EXISTED);
          result=true;
        }
      }
      if (!result && !isSystem) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (result && overwrite && itemRecord.getState() == State.NAME_EXISTED) {
      if (checkIfLocked(itemRecord)) {
        itemRecord.addError(Messages.getString(""String_Node_Str""));
        result=false;
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + itemRecord.getPath(),e);
  }
  return result;
}",0.9388150609080842
124066,"private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String prefix=service.getXPathPrefixValue(selected);
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          TreeNode pNode=parentNode;
          if (MdmConceptType.RECEIVE.equals(selected.getConceptType())) {
            if (prefix != null) {
              String[] preValues=prefix.split(XmlMapUtil.XPATH_SEPARATOR);
              for (              String value : preValues) {
                if (!""String_Node_Str"".equals(value)) {
                  TreeNode createTreeNode=createModel();
                  createTreeNode.setName(value);
                  createTreeNode.setNodeType(NodeType.ELEMENT);
                  createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
                  createTreeNode.setXpath(XmlMapUtil.getXPath(pNode.getXpath(),createTreeNode.getName(),createTreeNode.getNodeType()));
                  pNode.getChildren().add(createTreeNode);
                  pNode=createTreeNode;
                }
              }
              loopExpression=prefix + loopExpression;
            }
          }
          prepareEmfTree(list,pNode,prefix,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}","private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String prefix=service.getXPathPrefixValue(selected);
          prefix=TalendTextUtils.removeQuotes(prefix);
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          TreeNode pNode=parentNode;
          if (MdmConceptType.RECEIVE.equals(selected.getConceptType())) {
            if (prefix != null && !""String_Node_Str"".equals(prefix)) {
              String[] preValues=prefix.split(XmlMapUtil.XPATH_SEPARATOR);
              for (              String value : preValues) {
                if (!""String_Node_Str"".equals(value)) {
                  TreeNode createTreeNode=createModel();
                  createTreeNode.setName(value);
                  createTreeNode.setNodeType(NodeType.ELEMENT);
                  createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
                  createTreeNode.setXpath(XmlMapUtil.getXPath(pNode.getXpath(),createTreeNode.getName(),createTreeNode.getNodeType()));
                  pNode.getChildren().add(createTreeNode);
                  pNode=createTreeNode;
                }
              }
              loopExpression=prefix + loopExpression;
            }
          }
          prepareEmfTree(list,pNode,prefix,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}",0.9807611877875366
124067,"/** 
 * Return a list of all files in the project Method as taken in org.eclipse.ui.internal.wizards.datatransfer.WizardProjectsImportPage.
 * @param provider The provider for the parent file
 * @param entry The root directory of the project
 * @return A list of all files in the project
 */
public static void getFilesForProject(Collection files,IImportStructureProvider provider,Object entry){
  List children=provider.getChildren(entry);
  Iterator childrenEnum=children.iterator();
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    files.add(child);
    if (provider.isFolder(child)) {
      getFilesForProject(files,provider,child);
    }
  }
}","/** 
 * Return a list of all files in the project Method as taken in org.eclipse.ui.internal.wizards.datatransfer.WizardProjectsImportPage.
 * @param provider The provider for the parent file
 * @param entry The root directory of the project
 * @return A list of all files in the project
 */
public static void getFilesForProject(Collection files,IImportStructureProvider provider,Object entry){
  List children=provider.getChildren(entry);
  Iterator childrenEnum=children.iterator();
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    createUserDefinedIfSqlpattern(child);
    files.add(child);
    if (provider.isFolder(child)) {
      getFilesForProject(files,provider,child);
    }
  }
}",0.9569583931133429
124068,"/** 
 * DOC amaumont Comment method ""updateGridDataHeightForTableConstraints"".
 */
public void updateGridDataHeightForTableGlobalMap(){
  int moreSpace=WindowSystem.isGTK() ? tableForGlobalMap.getItemHeight() : 0;
  int size=((InputTable)abstractDataMapTable).getGlobalMapEntries().size();
  tableForGlobalMapGridData.heightHint=size * (tableForGlobalMap.getItemHeight() + tableForGlobalMap.getItemHeight() / 2) + moreSpace;
  if (WindowSystem.isGTK()) {
    tableViewerCreatorForGlobalMap.layout();
  }
}","/** 
 * DOC amaumont Comment method ""updateGridDataHeightForTableConstraints"".
 */
public void updateGridDataHeightForTableGlobalMap(){
  int moreSpace=WindowSystem.isGTK() ? tableForGlobalMap.getItemHeight() : 0;
  int size=((InputTable)abstractDataMapTable).getGlobalMapEntries().size();
  if (size < 3) {
    tableForGlobalMapGridData.heightHint=size * (tableForGlobalMap.getItemHeight() + tableForGlobalMap.getItemHeight() / 2) + moreSpace;
  }
 else {
    tableForGlobalMapGridData.heightHint=size * (tableForGlobalMap.getItemHeight()) + moreSpace;
  }
  if (WindowSystem.isGTK() || WindowSystem.isOSX()) {
    tableViewerCreatorForGlobalMap.layout();
  }
}",0.8654670094258783
124069,"protected void initConnectionParametersWithContext(IElement element,IContext context){
  if (connParameters == null) {
    connParameters=new ConnectionParameters();
  }
  Object value=elem.getPropertyValue(""String_Node_Str"");
  IElementParameter compList=elem.getElementParameterFromField(EParameterFieldType.COMPONENT_LIST);
  if (value != null && (value instanceof Boolean) && ((Boolean)value) && compList != null) {
    if (connectionNode == null) {
      Object compValue=compList.getValue();
      if (compValue != null && !compValue.equals(""String_Node_Str"")) {
        List<? extends INode> nodes=part.getProcess().getGraphicalNodes();
        for (        INode node : nodes) {
          if (node.getUniqueName().equals(compValue) && (node instanceof Node)) {
            connectionNode=(Node)node;
            break;
          }
        }
      }
    }
    if (connectionNode != null) {
      element=connectionNode;
    }
  }
  connParameters.setDbName(getParameterValueWithContext(element,EConnectionParameterName.SID.getName(),context));
  connParameters.setPassword(getParameterValueWithContext(element,EConnectionParameterName.PASSWORD.getName(),context));
  connParameters.setPort(getParameterValueWithContext(element,EConnectionParameterName.PORT.getName(),context));
  connParameters.setSchema(getParameterValueWithContext(element,EConnectionParameterName.SCHEMA.getName(),context));
  connParameters.setHost(getParameterValueWithContext(element,EConnectionParameterName.SERVER_NAME.getName(),context));
  connParameters.setUserName(getParameterValueWithContext(element,EConnectionParameterName.USERNAME.getName(),context));
  connParameters.setDirectory(getParameterValueWithContext(element,EConnectionParameterName.DIRECTORY.getName(),context));
  connParameters.setHttps(Boolean.parseBoolean(getParameterValueWithContext(element,EConnectionParameterName.HTTPS.getName(),context)));
  connParameters.setUrl(TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,EConnectionParameterName.URL.getName(),context)));
  connParameters.setDriverClass(TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,EConnectionParameterName.DRIVER_CLASS.getName(),context)));
  connParameters.setDriverJar(TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,EConnectionParameterName.DRIVER_JAR.getName(),context)));
  final String dbTypeByClassName=ExtractMetaDataUtils.getDbTypeByClassName(connParameters.getDriverClass());
  if (connParameters.getDbType() == null || EDatabaseTypeName.MYSQL.getDisplayName().equals(connParameters.getDbType()) && !EDatabaseTypeName.MYSQL.getProduct().equals(dbTypeByClassName)) {
    if (dbTypeByClassName != null && !""String_Node_Str"".equals(dbTypeByClassName)) {
      connParameters.setDbType(dbTypeByClassName);
    }
  }
  if (connParameters.getDbType().equals(EDatabaseTypeName.SQLITE.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.ACCESS.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.FIREBIRD.getXmlName())) {
    connParameters.setFilename(getParameterValueWithContext(element,EConnectionParameterName.FILE.getName(),context));
  }
  connParameters.setJdbcProperties(getParameterValueWithContext(element,EConnectionParameterName.PROPERTIES_STRING.getName(),context));
  connParameters.setDatasource(getParameterValueWithContext(element,EConnectionParameterName.DATASOURCE.getName(),context));
}","protected void initConnectionParametersWithContext(IElement element,IContext context){
  if (connParameters == null) {
    connParameters=new ConnectionParameters();
  }
  Object value=elem.getPropertyValue(""String_Node_Str"");
  IElementParameter compList=elem.getElementParameterFromField(EParameterFieldType.COMPONENT_LIST);
  if (value != null && (value instanceof Boolean) && ((Boolean)value) && compList != null) {
    if (connectionNode == null) {
      Object compValue=compList.getValue();
      if (compValue != null && !compValue.equals(""String_Node_Str"")) {
        List<? extends INode> nodes=part.getProcess().getGraphicalNodes();
        for (        INode node : nodes) {
          if (node.getUniqueName().equals(compValue) && (node instanceof Node)) {
            connectionNode=(Node)node;
            break;
          }
        }
      }
    }
    if (connectionNode != null) {
      element=connectionNode;
    }
  }
  connParameters.setDbName(getParameterValueWithContext(element,EConnectionParameterName.SID.getName(),context));
  connParameters.setPassword(getParameterValueWithContext(element,EConnectionParameterName.PASSWORD.getName(),context));
  connParameters.setPort(getParameterValueWithContext(element,EConnectionParameterName.PORT.getName(),context));
  connParameters.setSchema(getParameterValueWithContext(element,EConnectionParameterName.SCHEMA.getName(),context));
  connParameters.setHost(getParameterValueWithContext(element,EConnectionParameterName.SERVER_NAME.getName(),context));
  connParameters.setUserName(getParameterValueWithContext(element,EConnectionParameterName.USERNAME.getName(),context));
  connParameters.setDirectory(getParameterValueWithContext(element,EConnectionParameterName.DIRECTORY.getName(),context));
  connParameters.setHttps(Boolean.parseBoolean(getParameterValueWithContext(element,EConnectionParameterName.HTTPS.getName(),context)));
  String url=TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,EConnectionParameterName.URL.getName(),context));
  if (StringUtils.isEmpty(url)) {
    url=TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,""String_Node_Str"" + EConnectionParameterName.URL.getName(),context));
  }
  connParameters.setUrl(url);
  connParameters.setDriverClass(TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,EConnectionParameterName.DRIVER_CLASS.getName(),context)));
  connParameters.setDriverJar(TalendTextUtils.removeQuotesIfExist(getParameterValueWithContext(element,EConnectionParameterName.DRIVER_JAR.getName(),context)));
  final String dbTypeByClassName=ExtractMetaDataUtils.getDbTypeByClassName(connParameters.getDriverClass());
  if (connParameters.getDbType() == null || EDatabaseTypeName.MYSQL.getDisplayName().equals(connParameters.getDbType()) && !EDatabaseTypeName.MYSQL.getProduct().equals(dbTypeByClassName)) {
    if (dbTypeByClassName != null && !""String_Node_Str"".equals(dbTypeByClassName)) {
      connParameters.setDbType(dbTypeByClassName);
    }
  }
  if (connParameters.getDbType().equals(EDatabaseTypeName.SQLITE.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.ACCESS.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.FIREBIRD.getXmlName())) {
    connParameters.setFilename(getParameterValueWithContext(element,EConnectionParameterName.FILE.getName(),context));
  }
  connParameters.setJdbcProperties(getParameterValueWithContext(element,EConnectionParameterName.PROPERTIES_STRING.getName(),context));
  connParameters.setDatasource(getParameterValueWithContext(element,EConnectionParameterName.DATASOURCE.getName(),context));
}",0.9646129987311434
124070,"private void setAllConnectionParameters(String typ,IElement element){
  String type=null;
  if (typ != null && !typ.equals(""String_Node_Str"")) {
    type=typ;
  }
 else {
    type=getValueFromRepositoryName(element,""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    IElementParameter ele=element.getElementParameter(""String_Node_Str"");
    if (ele != null) {
      type=(String)ele.getValue();
    }
 else     type=""String_Node_Str"";
  }
  if (StringUtils.trimToNull(type) == null && StringUtils.trimToNull(connParameters.getDbType()) == null) {
    type=EDatabaseTypeName.GENERAL_JDBC.getXmlName();
  }
  connParameters.setDbType(type);
  String frameWorkKey=getValueFromRepositoryName(element,""String_Node_Str"");
  connParameters.setFrameworkType(frameWorkKey);
  String schema=getValueFromRepositoryName(element,EConnectionParameterName.SCHEMA.getName());
  connParameters.setSchema(schema);
  String userName=getValueFromRepositoryName(element,EConnectionParameterName.USERNAME.getName());
  connParameters.setUserName(userName);
  String password=getValueFromRepositoryName(element,EConnectionParameterName.PASSWORD.getName());
  connParameters.setPassword(password);
  String host=getValueFromRepositoryName(element,EConnectionParameterName.SERVER_NAME.getName());
  connParameters.setHost(host);
  String port=getValueFromRepositoryName(element,EConnectionParameterName.PORT.getName());
  connParameters.setPort(port);
  boolean https=Boolean.parseBoolean(getValueFromRepositoryName(element,EConnectionParameterName.HTTPS.getName()));
  connParameters.setHttps(https);
  boolean isOracleOCI=type.equals(EDatabaseTypeName.ORACLE_OCI.getXmlName()) || type.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName());
  if (isOracleOCI) {
    String localServiceName=getValueFromRepositoryNameAndParameterName(element,EConnectionParameterName.SID.getName(),EParameterName.LOCAL_SERVICE_NAME.getName());
    connParameters.setLocalServiceName(localServiceName);
  }
  String datasource=getValueFromRepositoryName(element,EConnectionParameterName.DATASOURCE.getName());
  connParameters.setDatasource(datasource);
  String dbName=getValueFromRepositoryName(element,EConnectionParameterName.SID.getName());
  connParameters.setDbName(dbName);
  if (connParameters.getDbType().equals(EDatabaseTypeName.SQLITE.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.ACCESS.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.FIREBIRD.getXmlName())) {
    String file=getValueFromRepositoryName(element,EConnectionParameterName.FILE.getName());
    connParameters.setFilename(file);
  }
  String dir=getValueFromRepositoryName(element,EConnectionParameterName.DIRECTORY.getName());
  connParameters.setDirectory(dir);
  String url=getValueFromRepositoryName(element,EConnectionParameterName.URL.getName());
  connParameters.setUrl(TalendTextUtils.removeQuotes(url));
  String driverJar=getValueFromRepositoryName(element,EConnectionParameterName.DRIVER_JAR.getName());
  connParameters.setDriverJar(TalendTextUtils.removeQuotes(driverJar));
  String driverClass=getValueFromRepositoryName(element,EConnectionParameterName.DRIVER_CLASS.getName());
  connParameters.setDriverClass(TalendTextUtils.removeQuotes(driverClass));
  if (driverClass != null && !""String_Node_Str"".equals(driverClass)) {
    if (driverClass.startsWith(""String_Node_Str"") && driverClass.endsWith(""String_Node_Str"")) {
      driverClass=TalendTextUtils.removeQuotes(driverClass);
    }
    String dbTypeByClassName=""String_Node_Str"";
    if (driverJar != null && !""String_Node_Str"".equals(driverJar)) {
      dbTypeByClassName=ExtractMetaDataUtils.getDbTypeByClassNameAndDriverJar(driverClass,driverJar);
    }
 else {
      dbTypeByClassName=ExtractMetaDataUtils.getDbTypeByClassName(driverClass);
    }
    if (dbTypeByClassName != null) {
      connParameters.setDbType(dbTypeByClassName);
    }
  }
  String jdbcProps=getValueFromRepositoryName(element,EConnectionParameterName.PROPERTIES_STRING.getName());
  connParameters.setJdbcProperties(jdbcProps);
  String realTableName=null;
  if (EmfComponent.REPOSITORY.equals(elem.getPropertyValue(EParameterName.SCHEMA_TYPE.getName()))) {
    final Object propertyValue=elem.getPropertyValue(EParameterName.REPOSITORY_SCHEMA_TYPE.getName());
    IMetadataTable metadataTable=null;
    String connectionId=propertyValue.toString().split(""String_Node_Str"")[0];
    String tableLabel=propertyValue.toString().split(""String_Node_Str"")[1];
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    Item item=null;
    try {
      IRepositoryViewObject repobj=factory.getLastVersion(connectionId);
      if (repobj != null) {
        Property property=repobj.getProperty();
        if (property != null) {
          item=property.getItem();
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    if (item != null && item instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)item).getConnection();
      for (      org.talend.core.model.metadata.builder.connection.MetadataTable table : ConnectionHelper.getTables(connection)) {
        if (table.getLabel().equals(tableLabel)) {
          metadataTable=ConvertionHelper.convert(table);
          break;
        }
      }
    }
    if (metadataTable != null) {
      realTableName=metadataTable.getTableName();
    }
  }
  connParameters.setSchemaName(QueryUtil.getTableName(elem,connParameters.getMetadataTable(),TalendTextUtils.removeQuotes(schema),type,realTableName));
}","private void setAllConnectionParameters(String typ,IElement element){
  String type=null;
  if (typ != null && !typ.equals(""String_Node_Str"")) {
    type=typ;
  }
 else {
    type=getValueFromRepositoryName(element,""String_Node_Str"");
  }
  if (type.equals(""String_Node_Str"")) {
    IElementParameter ele=element.getElementParameter(""String_Node_Str"");
    if (ele != null) {
      type=(String)ele.getValue();
    }
 else     type=""String_Node_Str"";
  }
  if (StringUtils.trimToNull(type) == null && StringUtils.trimToNull(connParameters.getDbType()) == null) {
    type=EDatabaseTypeName.GENERAL_JDBC.getXmlName();
  }
  connParameters.setDbType(type);
  String frameWorkKey=getValueFromRepositoryName(element,""String_Node_Str"");
  connParameters.setFrameworkType(frameWorkKey);
  String schema=getValueFromRepositoryName(element,EConnectionParameterName.SCHEMA.getName());
  connParameters.setSchema(schema);
  String userName=getValueFromRepositoryName(element,EConnectionParameterName.USERNAME.getName());
  connParameters.setUserName(userName);
  String password=getValueFromRepositoryName(element,EConnectionParameterName.PASSWORD.getName());
  connParameters.setPassword(password);
  String host=getValueFromRepositoryName(element,EConnectionParameterName.SERVER_NAME.getName());
  connParameters.setHost(host);
  String port=getValueFromRepositoryName(element,EConnectionParameterName.PORT.getName());
  connParameters.setPort(port);
  boolean https=Boolean.parseBoolean(getValueFromRepositoryName(element,EConnectionParameterName.HTTPS.getName()));
  connParameters.setHttps(https);
  boolean isOracleOCI=type.equals(EDatabaseTypeName.ORACLE_OCI.getXmlName()) || type.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName());
  if (isOracleOCI) {
    String localServiceName=getValueFromRepositoryNameAndParameterName(element,EConnectionParameterName.SID.getName(),EParameterName.LOCAL_SERVICE_NAME.getName());
    connParameters.setLocalServiceName(localServiceName);
  }
  String datasource=getValueFromRepositoryName(element,EConnectionParameterName.DATASOURCE.getName());
  connParameters.setDatasource(datasource);
  String dbName=getValueFromRepositoryName(element,EConnectionParameterName.SID.getName());
  connParameters.setDbName(dbName);
  if (connParameters.getDbType().equals(EDatabaseTypeName.SQLITE.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.ACCESS.getXmlName()) || connParameters.getDbType().equals(EDatabaseTypeName.FIREBIRD.getXmlName())) {
    String file=getValueFromRepositoryName(element,EConnectionParameterName.FILE.getName());
    connParameters.setFilename(file);
  }
  String dir=getValueFromRepositoryName(element,EConnectionParameterName.DIRECTORY.getName());
  connParameters.setDirectory(dir);
  String url=getValueFromRepositoryName(element,EConnectionParameterName.URL.getName());
  if (StringUtils.isEmpty(url)) {
    url=getValueFromRepositoryName(element,""String_Node_Str"" + EConnectionParameterName.URL.getName());
  }
  connParameters.setUrl(TalendTextUtils.removeQuotes(url));
  String driverJar=getValueFromRepositoryName(element,EConnectionParameterName.DRIVER_JAR.getName());
  connParameters.setDriverJar(TalendTextUtils.removeQuotes(driverJar));
  String driverClass=getValueFromRepositoryName(element,EConnectionParameterName.DRIVER_CLASS.getName());
  connParameters.setDriverClass(TalendTextUtils.removeQuotes(driverClass));
  if (driverClass != null && !""String_Node_Str"".equals(driverClass)) {
    if (driverClass.startsWith(""String_Node_Str"") && driverClass.endsWith(""String_Node_Str"")) {
      driverClass=TalendTextUtils.removeQuotes(driverClass);
    }
    String dbTypeByClassName=""String_Node_Str"";
    if (driverJar != null && !""String_Node_Str"".equals(driverJar)) {
      dbTypeByClassName=ExtractMetaDataUtils.getDbTypeByClassNameAndDriverJar(driverClass,driverJar);
    }
 else {
      dbTypeByClassName=ExtractMetaDataUtils.getDbTypeByClassName(driverClass);
    }
    if (dbTypeByClassName != null) {
      connParameters.setDbType(dbTypeByClassName);
    }
  }
  String jdbcProps=getValueFromRepositoryName(element,EConnectionParameterName.PROPERTIES_STRING.getName());
  connParameters.setJdbcProperties(jdbcProps);
  String realTableName=null;
  if (EmfComponent.REPOSITORY.equals(elem.getPropertyValue(EParameterName.SCHEMA_TYPE.getName()))) {
    final Object propertyValue=elem.getPropertyValue(EParameterName.REPOSITORY_SCHEMA_TYPE.getName());
    IMetadataTable metadataTable=null;
    String connectionId=propertyValue.toString().split(""String_Node_Str"")[0];
    String tableLabel=propertyValue.toString().split(""String_Node_Str"")[1];
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    Item item=null;
    try {
      IRepositoryViewObject repobj=factory.getLastVersion(connectionId);
      if (repobj != null) {
        Property property=repobj.getProperty();
        if (property != null) {
          item=property.getItem();
        }
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
    if (item != null && item instanceof ConnectionItem) {
      Connection connection=((ConnectionItem)item).getConnection();
      for (      org.talend.core.model.metadata.builder.connection.MetadataTable table : ConnectionHelper.getTables(connection)) {
        if (table.getLabel().equals(tableLabel)) {
          metadataTable=ConvertionHelper.convert(table);
          break;
        }
      }
    }
    if (metadataTable != null) {
      realTableName=metadataTable.getTableName();
    }
  }
  connParameters.setSchemaName(QueryUtil.getTableName(elem,connParameters.getMetadataTable(),TalendTextUtils.removeQuotes(schema),type,realTableName));
}",0.9874135791526324
124071,"public static SessionTreeNode getSessionTreeNode(DatabaseConnection dbconnection,RepositoryNode repositoryNode,String selectedContext) throws Exception {
  IMetadataConnection iMetadataConnection=null;
  iMetadataConnection=ConvertionHelper.convert(dbconnection,false,selectedContext);
  String url=dbconnection.getURL();
  if (url == null || url.equals(""String_Node_Str"")) {
    url=iMetadataConnection.getUrl();
  }
  SQLConnection connection=null;
  DriverShim wapperDriver=null;
  List list=createSQLConnection(dbconnection,selectedContext,iMetadataConnection);
  if (list != null && list.size() > 0) {
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof SQLConnection) {
        connection=(SQLConnection)list.get(i);
      }
      if (list.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)list.get(i);
      }
    }
  }
  ISQLAlias alias=createSQLAlias(""String_Node_Str"",url,dbconnection.getUsername(),dbconnection.getPassword(),dbconnection.getSID().length() == 0 ? (dbconnection.getDatasourceName().length() == 0 ? ""String_Node_Str"" : dbconnection.getDatasourceName()) : dbconnection.getSID());
  SessionTreeModel stm=new SessionTreeModel();
  SessionTreeNode session;
  if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
    session=stm.createSessionTreeNode(new SQLConnection[]{connection,connection},alias,null,dbconnection.getPassword(),repositoryNode,wapperDriver);
  }
 else {
    session=stm.createSessionTreeNode(new SQLConnection[]{connection,connection},alias,null,dbconnection.getPassword(),repositoryNode);
  }
  return session;
}","public static SessionTreeNode getSessionTreeNode(DatabaseConnection dbconnection,RepositoryNode repositoryNode,String selectedContext) throws Exception {
  IMetadataConnection iMetadataConnection=null;
  iMetadataConnection=ConvertionHelper.convert(dbconnection,false,selectedContext);
  String url=dbconnection.getURL();
  if (url == null || url.equals(""String_Node_Str"")) {
    url=iMetadataConnection.getUrl();
  }
  SQLConnection connection=null;
  DriverShim wapperDriver=null;
  List list=createSQLConnection(dbconnection,selectedContext,iMetadataConnection);
  if (list != null && list.size() > 0) {
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof SQLConnection) {
        connection=(SQLConnection)list.get(i);
      }
      if (list.get(i) instanceof DriverShim) {
        wapperDriver=(DriverShim)list.get(i);
      }
    }
  }
  ISQLAlias alias=createSQLAlias(""String_Node_Str"",url,dbconnection.getUsername(),dbconnection.getPassword(),dbconnection.getSID() == null || dbconnection.getSID().length() == 0 ? (dbconnection.getDatasourceName() == null || dbconnection.getDatasourceName().length() == 0 ? ""String_Node_Str"" : dbconnection.getDatasourceName()) : dbconnection.getSID());
  SessionTreeModel stm=new SessionTreeModel();
  SessionTreeNode session;
  if (wapperDriver != null && (iMetadataConnection.getDriverClass().equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || iMetadataConnection.getDbType().equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| iMetadataConnection.getDbType().equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName()))) {
    session=stm.createSessionTreeNode(new SQLConnection[]{connection,connection},alias,null,dbconnection.getPassword(),repositoryNode,wapperDriver);
  }
 else {
    session=stm.createSessionTreeNode(new SQLConnection[]{connection,connection},alias,null,dbconnection.getPassword(),repositoryNode);
  }
  return session;
}",0.9815833532647692
124072,"/** 
 * fixed Table .
 * @param metaFromDB MetadataTable from Database
 * @param metaFromEMF MetadataTable from Emf
 * @param iMetadataConnection contain Connection.
 */
@SuppressWarnings(""String_Node_Str"") private void fixedTables(List<MetadataTable> metaFromDB,List<MetadataTable> metaFromEMF,IMetadataConnection iMetadataConnection,RepositoryNode oldNode){
  List<MetadataTable> removeEmfDB=new ArrayList<MetadataTable>();
  for (  MetadataTable emf : metaFromEMF) {
    boolean flag=modifyOldOneTableFromDB(metaFromDB,emf);
    if (flag) {
      removeEmfDB.add(emf);
    }
  }
  for (  MetadataTable metadataTable : removeEmfDB) {
    if (metadataTable.getLabel() == null || ""String_Node_Str"".equals(metadataTable.getLabel())) {
      metaFromEMF.remove(metadataTable);
    }
  }
  while (!metaFromDB.isEmpty()) {
    MetadataTable db=metaFromDB.remove(0);
    modifyOldOneTableFromEMF(metaFromEMF,iMetadataConnection,db);
  }
}","/** 
 * fixed Table .
 * @param metaFromDB MetadataTable from Database
 * @param metaFromEMF MetadataTable from Emf
 * @param iMetadataConnection contain Connection.
 */
@SuppressWarnings(""String_Node_Str"") private void fixedTables(List<MetadataTable> metaFromDB,List<MetadataTable> metaFromEMF,IMetadataConnection iMetadataConnection,RepositoryNode oldNode){
  List<MetadataTable> removeEmfDB=new ArrayList<MetadataTable>();
  for (  MetadataTable emf : metaFromEMF) {
    boolean flag=modifyOldOneTableFromDB(metaFromDB,emf);
    if (flag) {
      removeEmfDB.add(emf);
    }
  }
  for (  MetadataTable metadataTable : removeEmfDB) {
    if (metadataTable.getLabel() == null || ""String_Node_Str"".equals(metadataTable.getLabel())) {
      metaFromEMF.remove(metadataTable);
    }
  }
  int nbTables=0;
  while (!metaFromDB.isEmpty() && nbTables < 500) {
    MetadataTable db=metaFromDB.remove(0);
    modifyOldOneTableFromEMF(metaFromEMF,iMetadataConnection,db);
    nbTables++;
  }
}",0.97288842544317
124073,"/** 
 * dev Comment method ""ModifyOldConnection"".
 * @param tablesFromEMF
 * @param iMetadataConnection
 * @param tablesFromDB
 */
@SuppressWarnings(""String_Node_Str"") private void modifyOldConnection(List<MetadataTable> tablesFromEMF,IMetadataConnection iMetadataConnection,List<MetadataTable> tablesFromDB,RepositoryNode oldNode){
  for (  MetadataTable tableFromDB : tablesFromDB) {
    List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
    columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,tableFromDB.getSourceName()));
    for (    MetadataTable tableFromEMF : tablesFromEMF) {
      List<MetadataColumn> columnsFromEMF=tableFromEMF.getColumns();
      if (tableFromDB.getSourceName().equals(tableFromEMF.getSourceName())) {
        fixedColumns(columnsFromDB,columnsFromEMF);
      }
    }
  }
  fixedTables(tablesFromDB,tablesFromEMF,iMetadataConnection,oldNode);
}","/** 
 * dev Comment method ""ModifyOldConnection"".
 * @param tablesFromEMF
 * @param iMetadataConnection
 * @param tablesFromDB
 */
@SuppressWarnings(""String_Node_Str"") private void modifyOldConnection(List<MetadataTable> tablesFromEMF,IMetadataConnection iMetadataConnection,List<MetadataTable> tablesFromDB,RepositoryNode oldNode){
  for (  MetadataTable tableFromDB : tablesFromDB) {
    MetadataTable tableFromModel=null;
    for (    MetadataTable tableFromEMF : tablesFromEMF) {
      if (tableFromDB.getSourceName().equals(tableFromEMF.getSourceName())) {
        tableFromModel=tableFromEMF;
      }
    }
    if (tableFromModel != null) {
      List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
      columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,tableFromDB.getSourceName()));
      List<MetadataColumn> columnsFromEMF=tableFromModel.getColumns();
      fixedColumns(columnsFromDB,columnsFromEMF);
    }
  }
  fixedTables(tablesFromDB,tablesFromEMF,iMetadataConnection,oldNode);
}",0.6233766233766234
124074,"/** 
 * dev Comment method ""modifyOldRepositoryNode"".
 * @param connection
 * @param iMetadataConnection
 */
@SuppressWarnings(""String_Node_Str"") private void modifyOldRepositoryNode(DatabaseConnection connection,IMetadataConnection iMetadataConnection,RepositoryNode oldNode) throws Exception {
  boolean status=new ManagerConnection().check(iMetadataConnection);
  connection.setDivergency(!status);
  if (status) {
    List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
    Set<MetadataTable> tablesetFromEMF=ConnectionHelper.getTables(connection);
    List<MetadataTable> tablesFromEMF=new ArrayList<MetadataTable>();
    tablesFromEMF.addAll(tablesetFromEMF);
    if (oldNode.getProperties(EProperties.CONTENT_TYPE) == RepositoryNodeType.DATABASE) {
      modifyOldConnection(tablesFromEMF,iMetadataConnection,tablesFromDB,oldNode);
      restoreConnection(connection,tablesFromEMF);
    }
 else     if (oldNode.getProperties(EProperties.CONTENT_TYPE) == RepositoryNodeType.TABLE) {
      MetadataTable metadataTable=((MetadataTableRepositoryObject)oldNode.getObject()).getTable();
      modifyOldOneTableFromDB(tablesFromDB,metadataTable);
      MetadataTable tableFromDB=null;
      for (      MetadataTable table : tablesFromDB) {
        if (table.getSourceName().equals(metadataTable.getSourceName())) {
          tableFromDB=table;
        }
      }
      if (tableFromDB != null) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,tableFromDB.getSourceName()));
        fixedColumns(columnsFromDB,metadataTable.getColumns());
      }
      restoreConnection(connection,tablesFromEMF);
    }
 else     if (oldNode.getProperties(EProperties.CONTENT_TYPE) == RepositoryNodeType.COLUMN) {
      MetadataColumn metadataColumn=((MetadataColumnRepositoryObject)oldNode.getObject()).getColumn();
      modifyOneColumnFromDB(iMetadataConnection,tablesFromDB,metadataColumn);
    }
  }
 else {
    Set<MetadataTable> tableset=ConnectionHelper.getTables(connection);
    List<MetadataTable> tablesFromEMF=new ArrayList<MetadataTable>();
    tablesFromEMF.addAll(tableset);
    for (    MetadataTable tableFromEMF : tablesFromEMF) {
      List<MetadataColumn> columnsFromEMF=tableFromEMF.getColumns();
      for (      MetadataColumn column : columnsFromEMF) {
        column.setOriginalField(""String_Node_Str"");
        column.setDivergency(true);
        column.setSynchronised(false);
      }
      tableFromEMF.setSourceName(""String_Node_Str"");
      tableFromEMF.setDivergency(true);
    }
  }
}","/** 
 * dev Comment method ""modifyOldRepositoryNode"".
 * @param connection
 * @param iMetadataConnection
 */
@SuppressWarnings(""String_Node_Str"") private void modifyOldRepositoryNode(DatabaseConnection connection,IMetadataConnection iMetadataConnection,RepositoryNode oldNode) throws Exception {
  boolean status=new ManagerConnection().check(iMetadataConnection);
  connection.setDivergency(!status);
  if (status) {
    List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
    ExtractMetaDataUtils.isReconnect=false;
    Set<MetadataTable> tablesetFromEMF=ConnectionHelper.getTables(connection);
    List<MetadataTable> tablesFromEMF=new ArrayList<MetadataTable>();
    tablesFromEMF.addAll(tablesetFromEMF);
    if (oldNode.getProperties(EProperties.CONTENT_TYPE) == RepositoryNodeType.DATABASE) {
      modifyOldConnection(tablesFromEMF,iMetadataConnection,tablesFromDB,oldNode);
      restoreConnection(connection,tablesFromEMF);
    }
 else     if (oldNode.getProperties(EProperties.CONTENT_TYPE) == RepositoryNodeType.TABLE) {
      MetadataTable metadataTable=((MetadataTableRepositoryObject)oldNode.getObject()).getTable();
      modifyOldOneTableFromDB(tablesFromDB,metadataTable);
      MetadataTable tableFromDB=null;
      for (      MetadataTable table : tablesFromDB) {
        if (table.getSourceName().equals(metadataTable.getSourceName())) {
          tableFromDB=table;
        }
      }
      if (tableFromDB != null) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,tableFromDB.getSourceName()));
        fixedColumns(columnsFromDB,metadataTable.getColumns());
      }
      restoreConnection(connection,tablesFromEMF);
    }
 else     if (oldNode.getProperties(EProperties.CONTENT_TYPE) == RepositoryNodeType.COLUMN) {
      MetadataColumn metadataColumn=((MetadataColumnRepositoryObject)oldNode.getObject()).getColumn();
      modifyOneColumnFromDB(iMetadataConnection,tablesFromDB,metadataColumn);
    }
  }
 else {
    Set<MetadataTable> tableset=ConnectionHelper.getTables(connection);
    List<MetadataTable> tablesFromEMF=new ArrayList<MetadataTable>();
    tablesFromEMF.addAll(tableset);
    for (    MetadataTable tableFromEMF : tablesFromEMF) {
      List<MetadataColumn> columnsFromEMF=tableFromEMF.getColumns();
      for (      MetadataColumn column : columnsFromEMF) {
        column.setOriginalField(""String_Node_Str"");
        column.setDivergency(true);
        column.setSynchronised(false);
      }
      tableFromEMF.setSourceName(""String_Node_Str"");
      tableFromEMF.setDivergency(true);
    }
  }
  ExtractMetaDataUtils.isReconnect=true;
}",0.9844918810436052
124075,"/** 
 * dev Comment method ""createNewRepositoryNode"".
 * @param node
 * @param parameters
 * @param connection
 * @param iMetadataConnection
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private RepositoryNode createNewRepositoryNode(RepositoryNode node,ConnectionParameters parameters,DatabaseConnection connection,IMetadataConnection iMetadataConnection){
  ManagerConnection managerConnection=new ManagerConnection();
  boolean status=managerConnection.check(iMetadataConnection);
  connection.setDivergency(!status);
  ConnectionHelper.getTables(connection).clear();
  if (status) {
    try {
      List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
      ExtractMetaDataUtils.isReconnect=false;
      for (      MetadataTable table : tablesFromDB) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,table.getSourceName()));
        table.getColumns().clear();
        for (        MetadataColumn column : columnsFromDB) {
          column.setLabel(""String_Node_Str"");
          table.getColumns().add(column);
        }
        table.setLabel(""String_Node_Str"");
        ConnectionHelper.getTables(connection).add(table);
      }
      ExtractMetaDataUtils.isReconnect=true;
    }
 catch (    Exception e) {
      if (parameters != null) {
        parameters.setConnectionComment(e.getMessage());
      }
      return null;
    }
  }
 else {
    if (parameters != null) {
      parameters.setConnectionComment(managerConnection.getMessageException() == null ? ""String_Node_Str"" : managerConnection.getMessageException());
    }
  }
  DatabaseConnectionItem item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  item.setProperty(connectionProperty);
  updatePackage(iMetadataConnection);
  DatabaseConnection dbConn=(DatabaseConnection)iMetadataConnection.getCurrentConnection();
  item.setConnection(dbConn);
  RepositoryObject object=new RepositoryObject(connectionProperty);
  object.setLabel(""String_Node_Str"");
  ItemState state=PropertiesFactory.eINSTANCE.createItemState();
  state.setDeleted(false);
  item.setState(state);
  if (node == null) {
    node=new RepositoryNode(null,null,ENodeType.SYSTEM_FOLDER);
  }
  RepositoryNode newNode=new RepositoryNode(object,node,ENodeType.SYSTEM_FOLDER);
  return newNode;
}","/** 
 * dev Comment method ""createNewRepositoryNode"".
 * @param node
 * @param parameters
 * @param connection
 * @param iMetadataConnection
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private RepositoryNode createNewRepositoryNode(RepositoryNode node,ConnectionParameters parameters,DatabaseConnection connection,IMetadataConnection iMetadataConnection){
  ManagerConnection managerConnection=new ManagerConnection();
  boolean status=managerConnection.check(iMetadataConnection);
  connection.setDivergency(!status);
  ConnectionHelper.getTables(connection).clear();
  if (status) {
    try {
      List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection,500);
      ExtractMetaDataUtils.isReconnect=false;
      for (      MetadataTable table : tablesFromDB) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,table.getSourceName()));
        table.getColumns().clear();
        for (        MetadataColumn column : columnsFromDB) {
          column.setLabel(""String_Node_Str"");
          table.getColumns().add(column);
        }
        table.setLabel(""String_Node_Str"");
        ConnectionHelper.getTables(connection).add(table);
      }
      ExtractMetaDataUtils.isReconnect=true;
    }
 catch (    Exception e) {
      if (parameters != null) {
        parameters.setConnectionComment(e.getMessage());
      }
      return null;
    }
  }
 else {
    if (parameters != null) {
      parameters.setConnectionComment(managerConnection.getMessageException() == null ? ""String_Node_Str"" : managerConnection.getMessageException());
    }
  }
  DatabaseConnectionItem item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  item.setProperty(connectionProperty);
  updatePackage(iMetadataConnection);
  DatabaseConnection dbConn=(DatabaseConnection)iMetadataConnection.getCurrentConnection();
  item.setConnection(dbConn);
  RepositoryObject object=new RepositoryObject(connectionProperty);
  object.setLabel(""String_Node_Str"");
  ItemState state=PropertiesFactory.eINSTANCE.createItemState();
  state.setDeleted(false);
  item.setState(state);
  if (node == null) {
    node=new RepositoryNode(null,null,ENodeType.SYSTEM_FOLDER);
  }
  RepositoryNode newNode=new RepositoryNode(object,node,ENodeType.SYSTEM_FOLDER);
  return newNode;
}",0.9992784992784992
124076,"/** 
 * dev Comment method ""restoreConnection"".
 * @param connection
 * @param tablesFromEMF
 */
@SuppressWarnings(""String_Node_Str"") private void restoreConnection(DatabaseConnection connection,List<MetadataTable> tablesFromEMF){
  tablesFromEMF=sortTableColumn(tablesFromEMF);
  if (tList == null) {
    tList=new ArrayList<MetadataTable>();
    tList.addAll(ConnectionHelper.getTables(connection));
  }
  Catalog c=(Catalog)ConnectionHelper.getPackage(connection.getSID(),connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(connection.getSID(),connection,Schema.class);
  Schema schema=(Schema)ConnectionHelper.getPackage(connection.getUiSchema(),connection,Schema.class);
  if (c != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,c);
  }
 else   if (s != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,s);
  }
 else   if (schema != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,schema);
  }
}","/** 
 * dev Comment method ""restoreConnection"".
 * @param connection
 * @param tablesFromEMF
 */
@SuppressWarnings(""String_Node_Str"") private void restoreConnection(DatabaseConnection connection,List<MetadataTable> tablesFromEMF){
  tablesFromEMF=sortTableColumn(tablesFromEMF);
  if (tList == null) {
    tList=new ArrayList<MetadataTable>();
    tList.addAll(ConnectionHelper.getTables(connection));
  }
  Catalog c=(Catalog)ConnectionHelper.getPackage(connection.getSID(),connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(connection.getSID(),connection,Schema.class);
  Schema schema=(Schema)ConnectionHelper.getPackage(connection.getUiSchema(),connection,Schema.class);
  if (c != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,c);
  }
 else   if (s != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,s);
  }
 else   if (schema != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,schema);
  }
 else {
    Schema defaultSchema=null;
    List<Schema> schemas=ConnectionHelper.getSchema(connection);
    if (schemas.size() > 0) {
      for (      Schema sch : schemas) {
        if (""String_Node_Str"".equals(sch.getName())) {
          defaultSchema=sch;
          break;
        }
      }
    }
    if (defaultSchema == null) {
      defaultSchema=SchemaHelper.createSchema(""String_Node_Str"");
      ConnectionHelper.addSchema(defaultSchema,connection);
    }
    PackageHelper.addMetadataTable(tablesFromEMF,defaultSchema);
  }
}",0.7804276315789473
124077,"private void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<RelationshipItemBuilder.Relation> relations;
  if (item instanceof JobletProcessItem) {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOBLET_RELATION);
  }
 else {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  }
  for (  RelationshipItemBuilder.Relation relation : relations) {
    IRepositoryViewObject obj=null;
    String id=relation.getId();
    try {
      if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(id);
      }
 else {
        if (id != null && id.indexOf(""String_Node_Str"") != -1) {
          id=id.substring(0,id.lastIndexOf(""String_Node_Str""));
        }
        obj=factory.getLastVersion(id);
      }
      if (obj != null) {
        RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
        if (repositoryNode != null) {
          if (!repositoryObjects.contains(obj)) {
            repositoryObjects.add(obj);
            checkAllVerSionLatest(repositoryObjects,obj);
            checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
          }
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}","private void checkItemDependencies(IRepositoryViewObject obj,List<IRepositoryViewObject> repositoryObjects){
  if (obj != null) {
    RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
    if (repositoryNode != null) {
      if (!repositoryObjects.contains(obj)) {
        repositoryObjects.add(obj);
        checkAllVerSionLatest(repositoryObjects,obj);
        checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
      }
    }
  }
}",0.4260465116279069
124078,"private void refreshExportDependNodes(){
  checkedNodes.clear();
  Object[] checkedObj=((CheckboxTreeViewer)viewer).getCheckedElements();
  for (int i=0; i < checkedObj.length; i++) {
    if (checkedObj[i] instanceof RepositoryNode) {
      RepositoryNode checkedNode=(RepositoryNode)checkedObj[i];
      if (checkedNode != null && !RepositoryNode.NO_ID.equals(checkedNode.getId())) {
        if (checkedNode.getChildren().isEmpty()) {
          checkedNodes.add(checkedNode);
        }
      }
    }
  }
  allNode.clear();
  allNode.addAll(repositoryNodes);
  allNode.addAll(checkedNodes);
}","private void refreshExportDependNodes(){
  checkedNodes.clear();
  Object[] checkedObj=((CheckboxTreeViewer)viewer).getCheckedElements();
  for (int i=0; i < checkedObj.length; i++) {
    if (checkedObj[i] instanceof RepositoryNode) {
      RepositoryNode checkedNode=(RepositoryNode)checkedObj[i];
      if (checkedNode != null && !RepositoryNode.NO_ID.equals(checkedNode.getId())) {
        if (ENodeType.REPOSITORY_ELEMENT.equals(checkedNode.getType())) {
          checkedNodes.add(checkedNode);
        }
      }
    }
  }
  allNode.clear();
  allNode.addAll(repositoryNodes);
  allNode.addAll(checkedNodes);
}",0.9511184755592378
124079,"/** 
 * init the LoopEntry according by ""nodePaths"" and ""loopPath"".
 * @return
 */
private void initLoopEntry(){
  Map<String,LoopEntry> entryMap=new HashMap<String,LoopEntry>();
  FunctionRegister funcRegister=new FunctionRegister();
  Function function=null;
  if (this.loopPath.indexOf(""String_Node_Str"") >= 0 && this.loopPath.indexOf(""String_Node_Str"") >= 0) {
    if (nodePaths.length > 0) {
      String strTmp=loopPath.substring(loopPath.lastIndexOf(""String_Node_Str""));
      String strFuncName=strTmp.substring(strTmp.indexOf(""String_Node_Str"") + 2,strTmp.indexOf(""String_Node_Str""));
      if (funcRegister.isFuncRegistered(strFuncName)) {
        function=funcRegister.getFunction(strFuncName);
      }
    }
    loopPath=loopPath.substring(0,loopPath.lastIndexOf(""String_Node_Str""));
  }
  for (int m=0; m < nodePaths.length; m++) {
    String column=nodePaths[m];
    String resultCol=this.loopPath;
    boolean isAsXML=this.asXMLs[m];
    String tmpLoopPath=null;
    String[] splits=column.split(""String_Node_Str"");
    for (    String tmp : splits) {
      if (tmp.equals(""String_Node_Str"")) {
        resultCol=resultCol.substring(0,resultCol.lastIndexOf(""String_Node_Str""));
        tmpLoopPath=resultCol;
      }
 else       if (tmp.equals(""String_Node_Str"")) {
        tmpLoopPath=resultCol;
      }
 else {
        if (tmp.indexOf(""String_Node_Str"") >= 0 && tmp.indexOf(""String_Node_Str"") >= 0) {
          resultCol=resultCol.substring(0,resultCol.lastIndexOf(""String_Node_Str""));
          tmpLoopPath=resultCol;
          String strFuncName=tmp.substring(tmp.indexOf(""String_Node_Str"") + 2,tmp.indexOf(""String_Node_Str""));
          if (funcRegister.isFuncRegistered(strFuncName)) {
            function=funcRegister.getFunction(strFuncName);
          }
        }
 else {
          resultCol+=""String_Node_Str"" + tmp;
        }
      }
    }
    if (tmpLoopPath == null) {
      tmpLoopPath=loopPath;
    }
    if (!entryMap.containsKey(tmpLoopPath)) {
      entryMap.put(tmpLoopPath,new LoopEntry(tmpLoopPath));
    }
    if (function == null) {
      entryMap.get(tmpLoopPath).addPath(resultCol,column,isAsXML);
    }
 else {
      entryMap.get(tmpLoopPath).addPath(column,column,isAsXML);
      entryMap.get(tmpLoopPath).addFunction(column,function);
      function=null;
    }
  }
  String[] splits=loopPath.split(""String_Node_Str"");
  String path=""String_Node_Str"";
  LoopEntry tmpentry=null;
  for (  String tmp : splits) {
    if (tmp.trim().length() > 0) {
      path+=""String_Node_Str"" + tmp;
      if (entryMap.containsKey(path)) {
        if (tmpentry == null) {
          tmpentry=entryMap.get(path);
          this.entry=tmpentry;
        }
 else {
          tmpentry.setSubLoop(entryMap.get(path));
          tmpentry=entryMap.get(path);
        }
      }
    }
  }
}","/** 
 * init the LoopEntry according by ""nodePaths"" and ""loopPath"".
 * @return
 */
private void initLoopEntry(){
  Map<String,LoopEntry> entryMap=new HashMap<String,LoopEntry>();
  FunctionRegister funcRegister=new FunctionRegister();
  Function function=null;
  if (this.loopPath.indexOf(""String_Node_Str"") >= 0 && this.loopPath.indexOf(""String_Node_Str"") >= 0) {
    if (nodePaths.length > 0) {
      String strTmp=loopPath.substring(loopPath.lastIndexOf(""String_Node_Str""));
      String strFuncName=strTmp.substring(strTmp.indexOf(""String_Node_Str"") + 2,strTmp.indexOf(""String_Node_Str""));
      if (funcRegister.isFuncRegistered(strFuncName)) {
        function=funcRegister.getFunction(strFuncName);
      }
    }
    loopPath=loopPath.substring(0,loopPath.lastIndexOf(""String_Node_Str""));
  }
  for (int m=0; m < nodePaths.length; m++) {
    String column=nodePaths[m];
    String resultCol=this.loopPath;
    boolean isAsXML=this.asXMLs[m];
    boolean isDot=false;
    String tmpLoopPath=null;
    String[] splits=column.split(""String_Node_Str"");
    for (    String tmp : splits) {
      if (tmp.equals(""String_Node_Str"")) {
        resultCol=resultCol.substring(0,resultCol.lastIndexOf(""String_Node_Str""));
        tmpLoopPath=resultCol;
      }
 else       if (tmp.equals(""String_Node_Str"")) {
        tmpLoopPath=resultCol;
        isDot=true;
      }
 else {
        if (tmp.indexOf(""String_Node_Str"") >= 0 && tmp.indexOf(""String_Node_Str"") >= 0) {
          resultCol=resultCol.substring(0,resultCol.lastIndexOf(""String_Node_Str""));
          tmpLoopPath=resultCol;
          String strFuncName=tmp.substring(tmp.indexOf(""String_Node_Str"") + 2,tmp.indexOf(""String_Node_Str""));
          if (funcRegister.isFuncRegistered(strFuncName)) {
            function=funcRegister.getFunction(strFuncName);
          }
        }
 else {
          resultCol+=""String_Node_Str"" + tmp;
        }
      }
    }
    if (tmpLoopPath == null) {
      tmpLoopPath=loopPath;
    }
    if (!entryMap.containsKey(tmpLoopPath)) {
      entryMap.put(tmpLoopPath,new LoopEntry(tmpLoopPath));
    }
    if (function == null) {
      entryMap.get(tmpLoopPath).addPath(resultCol,column,isAsXML,isDot);
    }
 else {
      entryMap.get(tmpLoopPath).addPath(column,column,isAsXML,isDot);
      entryMap.get(tmpLoopPath).addFunction(column,function);
      function=null;
    }
  }
  String[] splits=loopPath.split(""String_Node_Str"");
  String path=""String_Node_Str"";
  LoopEntry tmpentry=null;
  for (  String tmp : splits) {
    if (tmp.trim().length() > 0) {
      path+=""String_Node_Str"" + tmp;
      if (entryMap.containsKey(path)) {
        if (tmpentry == null) {
          tmpentry=entryMap.get(path);
          this.entry=tmpentry;
        }
 else {
          tmpentry.setSubLoop(entryMap.get(path));
          tmpentry=entryMap.get(path);
        }
      }
    }
  }
}",0.989945316634327
124080,"public void addPath(String path,String originalPath,Boolean asXML){
  paths.add(path);
  originalPaths.add(originalPath);
  asXMLs.add(asXML);
}","public void addPath(String path,String originalPath,Boolean asXML,boolean isDot){
  paths.add(path);
  originalPaths.add(originalPath);
  asXMLs.add(asXML);
  isDots.add(isDot);
}",0.891640866873065
124081,"public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping) {
    for (int i=0; i < selectColumns.size(); i++) {
      if (outputTexts[i]) {
        if (!currentRowHaveValue[i]) {
          if (currentRow[i] == null) {
            currentRow[i]=""String_Node_Str"";
          }
        }
        currentRowHaveValue[i]=true;
      }
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        currentRow[i]+=""String_Node_Str"" + qName + ""String_Node_Str"";
        if (this.currentPath.equals(column)) {
          currentRowHaveValue[i]=true;
        }
      }
      outputTexts[i]=false;
    }
  }
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
    reset();
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping) {
    for (int i=0; i < selectColumns.size(); i++) {
      if (outputTexts[i]) {
        if (!currentRowHaveValue[i]) {
          if (currentRow[i] == null) {
            currentRow[i]=""String_Node_Str"";
          }
        }
        currentRowHaveValue[i]=true;
      }
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      boolean isDot=this.isDots.get(i);
      if ((asXML || isDot) && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        if (asXML) {
          currentRow[i]+=""String_Node_Str"" + qName + ""String_Node_Str"";
        }
        if (this.currentPath.equals(column)) {
          currentRowHaveValue[i]=true;
        }
      }
      outputTexts[i]=false;
    }
  }
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
    reset();
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}",0.977671451355662
124082,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  selectColumns.clear();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          selectColumns.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    selectColumns.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < selectColumns.size(); i++) {
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      outputTexts[i]=false;
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ escapeEntityHelper.escapeAttributeEntities(attributes.getValue(m))+ ""String_Node_Str"";
          }
        }
        outputTexts[i]=true;
        currentRowHaveValue[i]=false;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
              currentRowHaveValue[i]=true;
            }
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputTexts[i]=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  selectColumns.clear();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          selectColumns.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    selectColumns.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < selectColumns.size(); i++) {
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      boolean isDot=this.isDots.get(i);
      outputTexts[i]=false;
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ escapeEntityHelper.escapeAttributeEntities(attributes.getValue(m))+ ""String_Node_Str"";
          }
        }
        outputTexts[i]=true;
        currentRowHaveValue[i]=false;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else       if (isDot && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        outputTexts[i]=true;
        currentRowHaveValue[i]=false;
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
              currentRowHaveValue[i]=true;
            }
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputTexts[i]=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}",0.9651664611590628
124083,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  boolean allowAutoSwitch=true;
  IElementParameter elemParam=elem.getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (elemParam != null) {
    allowAutoSwitch=(Boolean)elemParam.getValue();
  }
  if (!allowAutoSwitch && (elem instanceof Node)) {
    Node node=(Node)elem;
    boolean isSchemaEmpty=false;
    if (node.getMetadataList().size() > 0) {
      isSchemaEmpty=node.getMetadataList().get(0).getListColumns().size() == 0;
    }
 else {
      isSchemaEmpty=true;
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType().equals(EParameterFieldType.MEMO_SQL)) {
        if (curParam.getDefaultValues().size() > 0) {
        }
      }
    }
    if (isSchemaEmpty) {
      allowAutoSwitch=true;
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName)) {
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
 else {
    oldMetadata=(String)elem.getPropertyValue(propertyName);
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName) && (EmfComponent.BUILTIN.equals(value))) {
    for (    IElementParameter param : elem.getElementParameters()) {
      boolean paramFlag=JobSettingsConstants.isExtraParameter(param.getName());
      boolean extraFlag=JobSettingsConstants.isExtraParameter(propertyName.split(""String_Node_Str"")[0]);
      if (paramFlag == extraFlag) {
        if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
          IElementParameter querystoreParam=elem.getElementParameterFromField(EParameterFieldType.QUERYSTORE_TYPE,param.getCategory());
          if (querystoreParam != null) {
            Map<String,IElementParameter> childParam=querystoreParam.getChildParameters();
            if (childParam != null) {
              IElementParameter queryTypeParam=childParam.get(EParameterName.QUERYSTORE_TYPE.getName());
              if (queryTypeParam != null && EmfComponent.REPOSITORY.equals(queryTypeParam.getValue())) {
                continue;
              }
            }
          }
        }
        param.setReadOnly(false);
        param.setRepositoryValueUsed(false);
      }
    }
  }
 else {
    oldValues.clear();
    IElementParameter propertyParam=elem.getElementParameter(propertyName);
    EComponentCategory currentCategory=propertyParam.getCategory();
    for (    IElementParameter param : elem.getElementParameters()) {
      String repositoryValue=param.getRepositoryValue();
      boolean b=elem instanceof INode && (((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str""));
      if ((""String_Node_Str"".equals(repositoryValue) || (param.isShow(elem.getElementParameters())) || b) && (repositoryValue != null) && (!param.getName().equals(propertyTypeName))) {
        IElementParameter relatedPropertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE,param.getCategory());
        if (relatedPropertyParam == null) {
          continue;
        }
        if (!relatedPropertyParam.getCategory().equals(currentCategory) && !repositoryValue.equals(""String_Node_Str"")) {
          continue;
        }
        Object objectValue;
        if (connection instanceof XmlFileConnection && this.dragAndDropAction == true && repositoryValue.equals(""String_Node_Str"") && reOpenXSDBool == true) {
          objectValue=RepositoryToComponentProperty.getXmlAndXSDFileValue((XmlFileConnection)connection,repositoryValue);
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else {
          objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
        }
        if (objectValue != null) {
          oldValues.put(param.getName(),param.getValue());
          if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String dbVersion=""String_Node_Str"";
            if (connection instanceof DatabaseConnection) {
              dbVersion=((DatabaseConnection)connection).getDbVersionString();
            }
            boolean found=false;
            String[] list=param.getListRepositoryItems();
            for (int i=0; (i < list.length) && (!found); i++) {
              if (objectValue.equals(list[i])) {
                found=true;
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
            IElementParameter elementParameter=null;
            IElementParameter elementParameter2=null;
            if (EParameterName.DB_TYPE.getName().equals(param.getName())) {
              elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
              elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
            }
 else {
              elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
              elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
            }
            String dbType=""String_Node_Str"";
            if (param.getValue() != null) {
              int indexOfItemFromList=param.getIndexOfItemFromList(param.getValue().toString());
              if (indexOfItemFromList != -1) {
                dbType=param.getListItemsDisplayCodeName()[indexOfItemFromList];
              }
            }
            if (StatsAndLogsConstants.JDBC.equals(dbType)) {
              IElementParameter dbNameParm=elem.getElementParameter(EParameterName.DBNAME.getName());
              if (dbNameParm != null) {
                dbNameParm.setValue(""String_Node_Str"");
              }
            }
 else {
              IElementParameter rulParam=elem.getElementParameter(EParameterName.URL.getName());
              if (rulParam != null) {
                rulParam.setValue(""String_Node_Str"");
              }
              IElementParameter classParam=elem.getElementParameter(EParameterName.DRIVER_CLASS.getName());
              if (classParam != null) {
                classParam.setValue(""String_Node_Str"");
              }
              IElementParameter jarParam=elem.getElementParameter(EParameterName.DRIVER_JAR.getName());
              if (jarParam != null) {
                jarParam.setValue(new ArrayList<Map<String,Object>>());
              }
            }
            setDbVersion(elementParameter,dbVersion);
            DesignerUtilities.setSchemaDB(elementParameter2,param.getValue());
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.equals(list[i])) {
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.toString().toUpperCase().equals(list[i])) {
                elem.setPropertyValue(param.getName(),objectValue);
              }
            }
          }
 else {
            if (repositoryValue.equals(""String_Node_Str"")) {
              IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
              if (connection instanceof FTPConnection) {
                if (((FTPConnection)connection).getEcoding() != null) {
                  paramEncoding.setValue(((FTPConnection)connection).getEcoding());
                }
 else {
                  paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                }
              }
 else {
                if (objectValue instanceof String) {
                  String str=TalendTextUtils.removeQuotes((String)objectValue);
                  if (str.equals(EmfComponent.ENCODING_TYPE_UTF_8)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_UTF_8);
                  }
 else                   if (str.equals(EmfComponent.ENCODING_TYPE_ISO_8859_15)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_ISO_8859_15);
                  }
 else {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                  }
                }
              }
            }
 else             if (repositoryValue.equals(""String_Node_Str"")) {
              setOtherProperties();
            }
            if (repositoryValue.equals(""String_Node_Str"")) {
              List list=new ArrayList();
              Object[] listItemsValue=elem.getElementParameter(""String_Node_Str"").getListItemsValue();
              for (int i=0; i < listItemsValue.length; i++) {
                list.add(listItemsValue[i]);
              }
              if (list != null && !list.contains(objectValue)) {
                objectValue=""String_Node_Str"";
              }
            }
            if (repositoryValue.equals(EParameterName.FILE_PATH.getName())) {
              String filePath=""String_Node_Str"";
              if (connection.isContextMode()) {
                ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
                if (contextItem != null) {
                  String selectedContext=contextItem.getDefaultContext();
                  final ContextType contextTypeByName=ContextUtils.getContextTypeByName(contextItem,selectedContext,true);
                  filePath=ConnectionContextHelper.getOriginalValue(contextTypeByName,objectValue.toString());
                }
              }
 else {
                filePath=TalendTextUtils.removeQuotes(objectValue.toString());
              }
              boolean versionCheckFor2007=false;
              if (filePath != null && filePath.endsWith(""String_Node_Str"")) {
                versionCheckFor2007=true;
              }
              if (elem.getElementParameter(""String_Node_Str"") != null) {
                elem.setPropertyValue(""String_Node_Str"",versionCheckFor2007);
              }
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE)) {
              if (objectValue != null) {
                objectValue=objectValue.toString().replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
            elem.setPropertyValue(param.getName(),objectValue);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"")) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          if (((Node)elem).getMetadataList().size() > 0) {
            IMetadataTable metaTable=((Node)elem).getMetadataList().get(0);
            RepositoryToComponentProperty.getTableXmlFileValue(connection,""String_Node_Str"",param,table,metaTable);
            param.setRepositoryValueUsed(true);
          }
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"") && connection != null) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          table.clear();
          ArrayList parameters=((WSDLSchemaConnection)connection).getParameters();
          for (          Object object : parameters) {
            Map<String,Object> map2=new HashMap<String,Object>();
            map2.put(""String_Node_Str"",TalendTextUtils.addQuotes(object.toString()));
            table.add(map2);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TEXT) && ""String_Node_Str"".equals(param.getRepositoryValue())) {
          param.setRepositoryValueUsed(true);
        }
 else {
          String paramName=param.getName();
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.retrieveSAPParams(elem,connection,param,getSapFunctionLabel());
          }
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.getSAPIDocParams(elem,connection,param,getSapIDocLabel());
          }
        }
        if (param.isRepositoryValueUsed()) {
          param.setReadOnly(false);
        }
      }
    }
    IElementParameter parentParameter=propertyParam.getParentParameter();
    if (parentParameter != null) {
      IElementParameter param=parentParameter.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      if (param != null && propertyParam == param) {
        ConnectionItem connItem=UpdateRepositoryUtils.getConnectionItemByItemId((String)param.getValue());
        if (connItem != null) {
          if (elem instanceof Node) {
            ConnectionContextHelper.addContextForNodeParameter((Node)elem,connItem,ignoreContextMode);
          }
 else           if (elem instanceof Process) {
            ConnectionContextHelper.addContextForProcessParameter((Process)elem,connItem,param.getCategory(),ignoreContextMode);
          }
        }
      }
    }
  }
  for (  IElementParameter curParam : elem.getElementParameters()) {
    if (curParam.getFieldType().equals(EParameterFieldType.AS400_CHECK)) {
      setOtherProperties();
    }
  }
  if (elem instanceof Node) {
    ((Process)((Node)elem).getProcess()).checkProcess();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  boolean allowAutoSwitch=true;
  IElementParameter elemParam=elem.getElementParameter(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName());
  if (elemParam != null) {
    elemParam.setValue(Boolean.FALSE);
    allowAutoSwitch=(Boolean)elemParam.getValue();
  }
  if (!allowAutoSwitch && (elem instanceof Node)) {
    Node node=(Node)elem;
    boolean isSchemaEmpty=false;
    if (node.getMetadataList().size() > 0) {
      isSchemaEmpty=node.getMetadataList().get(0).getListColumns().size() == 0;
    }
 else {
      isSchemaEmpty=true;
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType().equals(EParameterFieldType.MEMO_SQL)) {
        if (curParam.getDefaultValues().size() > 0) {
        }
      }
    }
    if (isSchemaEmpty) {
      allowAutoSwitch=true;
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName)) {
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
 else {
    oldMetadata=(String)elem.getPropertyValue(propertyName);
    elem.setPropertyValue(propertyName,value);
    if (allowAutoSwitch) {
      setOtherProperties();
    }
  }
  if (propertyName.split(""String_Node_Str"")[1].equals(propertyTypeName) && (EmfComponent.BUILTIN.equals(value))) {
    for (    IElementParameter param : elem.getElementParameters()) {
      boolean paramFlag=JobSettingsConstants.isExtraParameter(param.getName());
      boolean extraFlag=JobSettingsConstants.isExtraParameter(propertyName.split(""String_Node_Str"")[0]);
      if (paramFlag == extraFlag) {
        if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
          IElementParameter querystoreParam=elem.getElementParameterFromField(EParameterFieldType.QUERYSTORE_TYPE,param.getCategory());
          if (querystoreParam != null) {
            Map<String,IElementParameter> childParam=querystoreParam.getChildParameters();
            if (childParam != null) {
              IElementParameter queryTypeParam=childParam.get(EParameterName.QUERYSTORE_TYPE.getName());
              if (queryTypeParam != null && EmfComponent.REPOSITORY.equals(queryTypeParam.getValue())) {
                continue;
              }
            }
          }
        }
        param.setReadOnly(false);
        param.setRepositoryValueUsed(false);
      }
    }
  }
 else {
    oldValues.clear();
    IElementParameter propertyParam=elem.getElementParameter(propertyName);
    EComponentCategory currentCategory=propertyParam.getCategory();
    for (    IElementParameter param : elem.getElementParameters()) {
      String repositoryValue=param.getRepositoryValue();
      boolean b=elem instanceof INode && (((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"") || ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str"")|| ((INode)elem).getComponent().getName().equals(""String_Node_Str""));
      if ((""String_Node_Str"".equals(repositoryValue) || (param.isShow(elem.getElementParameters())) || b) && (repositoryValue != null) && (!param.getName().equals(propertyTypeName))) {
        IElementParameter relatedPropertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE,param.getCategory());
        if (relatedPropertyParam == null) {
          continue;
        }
        if (!relatedPropertyParam.getCategory().equals(currentCategory) && !repositoryValue.equals(""String_Node_Str"")) {
          continue;
        }
        Object objectValue;
        if (connection instanceof XmlFileConnection && this.dragAndDropAction == true && repositoryValue.equals(""String_Node_Str"") && reOpenXSDBool == true) {
          objectValue=RepositoryToComponentProperty.getXmlAndXSDFileValue((XmlFileConnection)connection,repositoryValue);
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else         if (connection instanceof SalesforceSchemaConnection && ""String_Node_Str"".equals(repositoryValue)) {
          if (this.moduleUnit != null) {
            objectValue=moduleUnit.getModuleName();
          }
 else {
            objectValue=null;
          }
        }
 else {
          objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,table);
        }
        if (objectValue != null) {
          oldValues.put(param.getName(),param.getValue());
          if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String dbVersion=""String_Node_Str"";
            if (connection instanceof DatabaseConnection) {
              dbVersion=((DatabaseConnection)connection).getDbVersionString();
            }
            boolean found=false;
            String[] list=param.getListRepositoryItems();
            for (int i=0; (i < list.length) && (!found); i++) {
              if (objectValue.equals(list[i])) {
                found=true;
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
            IElementParameter elementParameter=null;
            IElementParameter elementParameter2=null;
            if (EParameterName.DB_TYPE.getName().equals(param.getName())) {
              elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
              elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
            }
 else {
              elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
              elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
            }
            String dbType=""String_Node_Str"";
            if (param.getValue() != null) {
              int indexOfItemFromList=param.getIndexOfItemFromList(param.getValue().toString());
              if (indexOfItemFromList != -1) {
                dbType=param.getListItemsDisplayCodeName()[indexOfItemFromList];
              }
            }
            if (StatsAndLogsConstants.JDBC.equals(dbType)) {
              IElementParameter dbNameParm=elem.getElementParameter(EParameterName.DBNAME.getName());
              if (dbNameParm != null) {
                dbNameParm.setValue(""String_Node_Str"");
              }
            }
 else {
              IElementParameter rulParam=elem.getElementParameter(EParameterName.URL.getName());
              if (rulParam != null) {
                rulParam.setValue(""String_Node_Str"");
              }
              IElementParameter classParam=elem.getElementParameter(EParameterName.DRIVER_CLASS.getName());
              if (classParam != null) {
                classParam.setValue(""String_Node_Str"");
              }
              IElementParameter jarParam=elem.getElementParameter(EParameterName.DRIVER_JAR.getName());
              if (jarParam != null) {
                jarParam.setValue(new ArrayList<Map<String,Object>>());
              }
            }
            setDbVersion(elementParameter,dbVersion);
            DesignerUtilities.setSchemaDB(elementParameter2,param.getValue());
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.equals(list[i])) {
                elem.setPropertyValue(param.getName(),param.getListItemsValue()[i]);
              }
            }
          }
 else           if (param.getFieldType().equals(EParameterFieldType.CLOSED_LIST) && param.getRepositoryValue().equals(""String_Node_Str"")) {
            String[] list=param.getListItemsDisplayName();
            for (int i=0; i < list.length; i++) {
              if (objectValue.toString().toUpperCase().equals(list[i])) {
                elem.setPropertyValue(param.getName(),objectValue);
              }
            }
          }
 else {
            if (repositoryValue.equals(""String_Node_Str"")) {
              IElementParameter paramEncoding=param.getChildParameters().get(EParameterName.ENCODING_TYPE.getName());
              if (connection instanceof FTPConnection) {
                if (((FTPConnection)connection).getEcoding() != null) {
                  paramEncoding.setValue(((FTPConnection)connection).getEcoding());
                }
 else {
                  paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                }
              }
 else {
                if (objectValue instanceof String) {
                  String str=TalendTextUtils.removeQuotes((String)objectValue);
                  if (str.equals(EmfComponent.ENCODING_TYPE_UTF_8)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_UTF_8);
                  }
 else                   if (str.equals(EmfComponent.ENCODING_TYPE_ISO_8859_15)) {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_ISO_8859_15);
                  }
 else {
                    paramEncoding.setValue(EmfComponent.ENCODING_TYPE_CUSTOM);
                  }
                }
              }
            }
 else             if (repositoryValue.equals(""String_Node_Str"")) {
              setOtherProperties();
            }
            if (repositoryValue.equals(""String_Node_Str"")) {
              List list=new ArrayList();
              Object[] listItemsValue=elem.getElementParameter(""String_Node_Str"").getListItemsValue();
              for (int i=0; i < listItemsValue.length; i++) {
                list.add(listItemsValue[i]);
              }
              if (list != null && !list.contains(objectValue)) {
                objectValue=""String_Node_Str"";
              }
            }
            if (repositoryValue.equals(EParameterName.FILE_PATH.getName())) {
              String filePath=""String_Node_Str"";
              if (connection.isContextMode()) {
                ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
                if (contextItem != null) {
                  String selectedContext=contextItem.getDefaultContext();
                  final ContextType contextTypeByName=ContextUtils.getContextTypeByName(contextItem,selectedContext,true);
                  filePath=ConnectionContextHelper.getOriginalValue(contextTypeByName,objectValue.toString());
                }
              }
 else {
                filePath=TalendTextUtils.removeQuotes(objectValue.toString());
              }
              boolean versionCheckFor2007=false;
              if (filePath != null && filePath.endsWith(""String_Node_Str"")) {
                versionCheckFor2007=true;
              }
              if (elem.getElementParameter(""String_Node_Str"") != null) {
                elem.setPropertyValue(""String_Node_Str"",versionCheckFor2007);
              }
            }
            if (param.getFieldType().equals(EParameterFieldType.FILE)) {
              if (objectValue != null) {
                objectValue=objectValue.toString().replace(""String_Node_Str"",""String_Node_Str"");
              }
            }
            elem.setPropertyValue(param.getName(),objectValue);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"")) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          if (((Node)elem).getMetadataList().size() > 0) {
            IMetadataTable metaTable=((Node)elem).getMetadataList().get(0);
            RepositoryToComponentProperty.getTableXmlFileValue(connection,""String_Node_Str"",param,table,metaTable);
            param.setRepositoryValueUsed(true);
          }
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TABLE) && param.getRepositoryValue().equals(""String_Node_Str"") && connection != null) {
          List<Map<String,Object>> table=(List<Map<String,Object>>)elem.getPropertyValue(param.getName());
          table.clear();
          ArrayList parameters=((WSDLSchemaConnection)connection).getParameters();
          for (          Object object : parameters) {
            Map<String,Object> map2=new HashMap<String,Object>();
            map2.put(""String_Node_Str"",TalendTextUtils.addQuotes(object.toString()));
            table.add(map2);
          }
          param.setRepositoryValueUsed(true);
        }
 else         if (param.getFieldType().equals(EParameterFieldType.TEXT) && ""String_Node_Str"".equals(param.getRepositoryValue())) {
          param.setRepositoryValueUsed(true);
        }
 else {
          String paramName=param.getName();
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.retrieveSAPParams(elem,connection,param,getSapFunctionLabel());
          }
          if (""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName) || ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)|| ""String_Node_Str"".equals(paramName)) {
            SAPParametersUtils.getSAPIDocParams(elem,connection,param,getSapIDocLabel());
          }
        }
        if (param.isRepositoryValueUsed()) {
          param.setReadOnly(false);
        }
      }
    }
    IElementParameter parentParameter=propertyParam.getParentParameter();
    if (parentParameter != null) {
      IElementParameter param=parentParameter.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      if (param != null && propertyParam == param) {
        ConnectionItem connItem=UpdateRepositoryUtils.getConnectionItemByItemId((String)param.getValue());
        if (connItem != null) {
          if (elem instanceof Node) {
            ConnectionContextHelper.addContextForNodeParameter((Node)elem,connItem,ignoreContextMode);
          }
 else           if (elem instanceof Process) {
            ConnectionContextHelper.addContextForProcessParameter((Process)elem,connItem,param.getCategory(),ignoreContextMode);
          }
        }
      }
    }
  }
  for (  IElementParameter curParam : elem.getElementParameters()) {
    if (curParam.getFieldType().equals(EParameterFieldType.AS400_CHECK)) {
      setOtherProperties();
    }
  }
  if (elem instanceof Node) {
    ((Process)((Node)elem).getProcess()).checkProcess();
  }
}",0.9987061672693496
124084,"private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                String name=convertorMapper.get(p.getName());
                if (name != null) {
                  convertorMapper.remove(p.getName());
                  TOSLoginComposite.this.projectListViewer.getList().remove(name);
                }
                if (TOSLoginComposite.this.projectListViewer.getList().getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (TOSLoginComposite.this.projectListViewer.getSelection().isEmpty()) {
                  TOSLoginComposite.this.projectListViewer.getList().select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              convertorMapper.put(newProject.toUpperCase(),newProject);
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
          TOSLoginComposite.this.projectListViewer.setInput(new ArrayList(convertorMapper.values()));
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (!TOSLoginComposite.this.projectListViewer.getSelection().isEmpty()) {
        String selection=TOSLoginComposite.this.projectListViewer.getList().getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection.toUpperCase());
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}","private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
      }
      refresh();
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                String name=convertorMapper.get(p.getName());
                if (name != null) {
                  convertorMapper.remove(p.getName());
                  TOSLoginComposite.this.projectListViewer.getList().remove(name);
                }
                if (TOSLoginComposite.this.projectListViewer.getList().getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (TOSLoginComposite.this.projectListViewer.getSelection().isEmpty()) {
                  TOSLoginComposite.this.projectListViewer.getList().select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              convertorMapper.put(newProject.toUpperCase(),newProject);
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
          TOSLoginComposite.this.projectListViewer.setInput(new ArrayList(convertorMapper.values()));
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (!TOSLoginComposite.this.projectListViewer.getSelection().isEmpty()) {
        String selection=TOSLoginComposite.this.projectListViewer.getList().getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection.toUpperCase());
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}",0.9990070921985816
124085,"public HttpEntity sendToServer(List<NameValuePair> qparams,String strAPIUrl) throws paloexception {
  try {
    URI uri=URIUtils.createURI(""String_Node_Str"",strServer,Integer.valueOf(strPort),strAPIUrl,URLEncodedUtils.format(qparams,""String_Node_Str""),null);
    HttpGet req=new HttpGet(uri);
    System.out.println(req.getURI());
    HttpResponse rsp=paloHttpClient.execute(paloTargetHost,req);
    HttpEntity entity=rsp.getEntity();
    if (rsp.getStatusLine().getStatusCode() != 200) {
      CsvReader csv=new CsvReader(entity.getContent(),Charset.forName(""String_Node_Str""));
      csv.setDelimiter(';');
      csv.setTextQualifier('""');
      csv.readRecord();
      paloexception plX=new paloexception(csv.get(0),csv.get(1),csv.get(2));
      csv.close();
      entity.consumeContent();
      throw (plX);
    }
 else {
      return entity;
    }
  }
 catch (  Exception e) {
    throw new paloexception(e.getMessage());
  }
}","public HttpEntity sendToServer(List<NameValuePair> qparams,String strAPIUrl) throws paloexception {
  try {
    URI uri=URIUtils.createURI(""String_Node_Str"",strServer,Integer.valueOf(strPort),strAPIUrl,URLEncodedUtils.format(qparams,""String_Node_Str""),null);
    HttpGet req=new HttpGet(uri);
    HttpResponse rsp=paloHttpClient.execute(paloTargetHost,req);
    HttpEntity entity=rsp.getEntity();
    if (rsp.getStatusLine().getStatusCode() != 200) {
      CsvReader csv=new CsvReader(entity.getContent(),Charset.forName(""String_Node_Str""));
      csv.setDelimiter(';');
      csv.setTextQualifier('""');
      csv.readRecord();
      paloexception plX=new paloexception(csv.get(0),csv.get(1),csv.get(2));
      csv.close();
      entity.consumeContent();
      throw (plX);
    }
 else {
      return entity;
    }
  }
 catch (  Exception e) {
    throw new paloexception(e.getMessage());
  }
}",0.9791894852135816
124086,"public void drop(DropTargetEvent event){
  if (transfer.isSupportedType(event.currentDataType)) {
    ISelection selection=transfer.getSelection();
    if (selection instanceof TreeSelection) {
      Object[] objects=((TreeSelection)selection).toArray();
      List<Object> asList=Arrays.asList(objects);
      boolean created=false;
      for (      Object obj : objects) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode sourceNode=(RepositoryNode)obj;
          Item item=sourceNode.getObject().getProperty().getItem();
          if (item instanceof ContextItem) {
            ContextItem contextItem=(ContextItem)item;
            EList context=contextItem.getContext();
            Set<String> contextSet=new HashSet<String>();
            Iterator iterator=context.iterator();
            while (iterator.hasNext()) {
              Object repositoryObject=iterator.next();
              if (repositoryObject instanceof ContextTypeImpl) {
                EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                Iterator contextParas=contextParameters.iterator();
                while (contextParas.hasNext()) {
                  ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                  String name=contextParameterType.getName();
                  contextSet.add(name);
                }
              }
            }
            IEditorInput editorInput=part.getEditorInput();
            if (editorInput instanceof JobEditorInput) {
              JobEditorInput jobInput=(JobEditorInput)editorInput;
              IProcess2 process=jobInput.getLoadedProcess();
              IContextManager contextManager=process.getContextManager();
              Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
              if (addedContext != null && addedContext.size() > 0) {
                ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                created=true;
              }
            }
          }
        }
      }
      if (created) {
        RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
      }
    }
  }
}","public void drop(DropTargetEvent event){
  if (transfer.isSupportedType(event.currentDataType)) {
    ISelection selection=transfer.getSelection();
    if (selection instanceof TreeSelection) {
      Object[] objects=((TreeSelection)selection).toArray();
      List<Object> asList=Arrays.asList(objects);
      boolean created=false;
      for (      Object obj : objects) {
        if (obj instanceof RepositoryNode) {
          RepositoryNode sourceNode=(RepositoryNode)obj;
          Item item=sourceNode.getObject().getProperty().getItem();
          if (item instanceof ContextItem) {
            ContextItem contextItem=(ContextItem)item;
            EList context=contextItem.getContext();
            Set<String> contextSet=new HashSet<String>();
            Iterator iterator=context.iterator();
            while (iterator.hasNext()) {
              Object repositoryObject=iterator.next();
              if (repositoryObject instanceof ContextTypeImpl) {
                EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                Iterator contextParas=contextParameters.iterator();
                while (contextParas.hasNext()) {
                  ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                  String name=contextParameterType.getName();
                  contextSet.add(name);
                }
              }
            }
            IEditorInput editorInput=part.getEditorInput();
            if (editorInput instanceof JobEditorInput) {
              JobEditorInput jobInput=(JobEditorInput)editorInput;
              IProcess2 process=jobInput.getLoadedProcess();
              IContextManager contextManager=process.getContextManager();
              List<IContext> listContext=contextManager.getListContext();
              if (!ConnectionContextHelper.containsVariable(contextManager)) {
                ConnectionContextHelper.addContextVarForJob(process,contextItem,contextManager);
                created=true;
              }
 else {
                Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
                if (addedContext != null && addedContext.size() > 0) {
                  ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                  created=true;
                }
              }
            }
          }
        }
      }
      if (created) {
        RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
      }
    }
  }
}",0.9325429272281276
124087,"public void initialDrop(){
  int operations=DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT;
  DropTarget target=new DropTarget(contextComposite,operations);
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  target.setTransfer(new Transfer[]{transfer});
  target.addDropListener(new DropTargetListener(){
    public void dropAccept(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        ISelection selection=transfer.getSelection();
        if (selection instanceof TreeSelection) {
          Object[] objects=((TreeSelection)selection).toArray();
          List<Object> asList=Arrays.asList(objects);
          boolean created=false;
          for (          Object obj : objects) {
            if (obj instanceof RepositoryNode) {
              RepositoryNode sourceNode=(RepositoryNode)obj;
              Item item=sourceNode.getObject().getProperty().getItem();
              if (item instanceof ContextItem) {
                ContextItem contextItem=(ContextItem)item;
                EList context=contextItem.getContext();
                Set<String> contextSet=new HashSet<String>();
                Iterator iterator=context.iterator();
                while (iterator.hasNext()) {
                  Object repositoryObject=iterator.next();
                  if (repositoryObject instanceof ContextTypeImpl) {
                    EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                    Iterator contextParas=contextParameters.iterator();
                    while (contextParas.hasNext()) {
                      ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                      String name=contextParameterType.getName();
                      contextSet.add(name);
                    }
                  }
                }
                IEditorInput editorInput=part.getEditorInput();
                if (editorInput instanceof JobEditorInput) {
                  JobEditorInput jobInput=(JobEditorInput)editorInput;
                  IProcess2 process=jobInput.getLoadedProcess();
                  IContextManager contextManager=process.getContextManager();
                  Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
                  if (addedContext != null && addedContext.size() > 0) {
                    ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                    created=true;
                  }
                }
              }
            }
          }
          if (created) {
            RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
          }
        }
      }
    }
    public void dragOver(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        IEditorInput editorInput=part.getEditorInput();
        if (!(editorInput instanceof JobEditorInput)) {
          event.detail=DND.DROP_NONE;
        }
 else {
          ISelection selection=transfer.getSelection();
          if (selection instanceof TreeSelection) {
            Object[] objects=((TreeSelection)selection).toArray();
            for (            Object obj : objects) {
              if (obj instanceof RepositoryNode) {
                RepositoryNode sourceNode=(RepositoryNode)obj;
                Item item=sourceNode.getObject().getProperty().getItem();
                if (!(item instanceof ContextItem)) {
                  event.detail=DND.DROP_NONE;
                }
              }
            }
          }
        }
      }
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragEnter(    DropTargetEvent event){
      if (event.detail == DND.DROP_DEFAULT) {
        if ((event.operations & DND.DROP_COPY) != 0) {
          event.detail=DND.DROP_COPY;
        }
 else {
          event.detail=DND.DROP_NONE;
        }
      }
      for (int i=0; i < event.dataTypes.length; i++) {
        if (transfer.isSupportedType(event.dataTypes[i])) {
          event.currentDataType=event.dataTypes[i];
          if (event.detail != DND.DROP_COPY) {
            event.detail=DND.DROP_NONE;
          }
          break;
        }
      }
    }
  }
);
}","public void initialDrop(){
  int operations=DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT;
  DropTarget target=new DropTarget(contextComposite,operations);
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  target.setTransfer(new Transfer[]{transfer});
  target.addDropListener(new DropTargetListener(){
    public void dropAccept(    DropTargetEvent event){
    }
    public void drop(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        ISelection selection=transfer.getSelection();
        if (selection instanceof TreeSelection) {
          Object[] objects=((TreeSelection)selection).toArray();
          List<Object> asList=Arrays.asList(objects);
          boolean created=false;
          for (          Object obj : objects) {
            if (obj instanceof RepositoryNode) {
              RepositoryNode sourceNode=(RepositoryNode)obj;
              Item item=sourceNode.getObject().getProperty().getItem();
              if (item instanceof ContextItem) {
                ContextItem contextItem=(ContextItem)item;
                EList context=contextItem.getContext();
                Set<String> contextSet=new HashSet<String>();
                Iterator iterator=context.iterator();
                while (iterator.hasNext()) {
                  Object repositoryObject=iterator.next();
                  if (repositoryObject instanceof ContextTypeImpl) {
                    EList contextParameters=((ContextTypeImpl)repositoryObject).getContextParameter();
                    Iterator contextParas=contextParameters.iterator();
                    while (contextParas.hasNext()) {
                      ContextParameterTypeImpl contextParameterType=(ContextParameterTypeImpl)contextParas.next();
                      String name=contextParameterType.getName();
                      contextSet.add(name);
                    }
                  }
                }
                IEditorInput editorInput=part.getEditorInput();
                if (editorInput instanceof JobEditorInput) {
                  JobEditorInput jobInput=(JobEditorInput)editorInput;
                  IProcess2 process=jobInput.getLoadedProcess();
                  IContextManager contextManager=process.getContextManager();
                  List<IContext> listContext=contextManager.getListContext();
                  if (!ConnectionContextHelper.containsVariable(contextManager)) {
                    ConnectionContextHelper.addContextVarForJob(process,contextItem,contextManager);
                    created=true;
                  }
 else {
                    Set<String> addedContext=ConnectionContextHelper.checkAndAddContextVariables(contextItem,contextSet,contextManager,false);
                    if (addedContext != null && addedContext.size() > 0) {
                      ConnectionContextHelper.addContextVarForJob(process,contextItem,contextSet);
                      created=true;
                    }
                  }
                }
              }
            }
          }
          if (created) {
            RepositoryPlugin.getDefault().getDesignerCoreService().switchToCurContextsView();
          }
        }
      }
    }
    public void dragOver(    DropTargetEvent event){
      if (transfer.isSupportedType(event.currentDataType)) {
        IEditorInput editorInput=part.getEditorInput();
        if (!(editorInput instanceof JobEditorInput)) {
          event.detail=DND.DROP_NONE;
        }
 else {
          ISelection selection=transfer.getSelection();
          if (selection instanceof TreeSelection) {
            Object[] objects=((TreeSelection)selection).toArray();
            for (            Object obj : objects) {
              if (obj instanceof RepositoryNode) {
                RepositoryNode sourceNode=(RepositoryNode)obj;
                Item item=sourceNode.getObject().getProperty().getItem();
                if (!(item instanceof ContextItem)) {
                  event.detail=DND.DROP_NONE;
                }
              }
            }
          }
        }
      }
    }
    public void dragOperationChanged(    DropTargetEvent event){
    }
    public void dragLeave(    DropTargetEvent event){
    }
    public void dragEnter(    DropTargetEvent event){
      if (event.detail == DND.DROP_DEFAULT) {
        if ((event.operations & DND.DROP_COPY) != 0) {
          event.detail=DND.DROP_COPY;
        }
 else {
          event.detail=DND.DROP_NONE;
        }
      }
      for (int i=0; i < event.dataTypes.length; i++) {
        if (transfer.isSupportedType(event.dataTypes[i])) {
          event.currentDataType=event.dataTypes[i];
          if (event.detail != DND.DROP_COPY) {
            event.detail=DND.DROP_NONE;
          }
          break;
        }
      }
    }
  }
);
}",0.9619436680283808
124088,"private void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<RelationshipItemBuilder.Relation> relations;
  if (item instanceof JobletProcessItem) {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOBLET_RELATION);
  }
 else {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  }
  for (  RelationshipItemBuilder.Relation relation : relations) {
    IRepositoryViewObject obj=null;
    String id=relation.getId();
    try {
      if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(id);
      }
 else {
        if (id != null && id.indexOf(""String_Node_Str"") != -1) {
          id=id.substring(0,id.lastIndexOf(""String_Node_Str""));
        }
        obj=factory.getLastVersion(id);
      }
      if (obj != null) {
        RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
        if (repositoryNode != null) {
          if (!repositoryObjects.contains(obj)) {
            repositoryObjects.add(obj);
            checkAllVerSionLatest(repositoryObjects,obj);
            checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
          }
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}","private void checkItemDependencies(IRepositoryViewObject obj,List<IRepositoryViewObject> repositoryObjects){
  if (obj != null) {
    RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
    if (repositoryNode != null) {
      if (!repositoryObjects.contains(obj)) {
        repositoryObjects.add(obj);
        checkAllVerSionLatest(repositoryObjects,obj);
        checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
      }
    }
  }
}",0.4260465116279069
124089,"private void refreshExportDependNodes(){
  checkedNodes.clear();
  Object[] checkedObj=((CheckboxTreeViewer)viewer).getCheckedElements();
  for (int i=0; i < checkedObj.length; i++) {
    if (checkedObj[i] instanceof RepositoryNode) {
      RepositoryNode checkedNode=(RepositoryNode)checkedObj[i];
      if (checkedNode != null && !RepositoryNode.NO_ID.equals(checkedNode.getId())) {
        if (checkedNode.getChildren().isEmpty()) {
          checkedNodes.add(checkedNode);
        }
      }
    }
  }
  allNode.clear();
  allNode.addAll(repositoryNodes);
  allNode.addAll(checkedNodes);
}","private void refreshExportDependNodes(){
  checkedNodes.clear();
  Object[] checkedObj=((CheckboxTreeViewer)viewer).getCheckedElements();
  for (int i=0; i < checkedObj.length; i++) {
    if (checkedObj[i] instanceof RepositoryNode) {
      RepositoryNode checkedNode=(RepositoryNode)checkedObj[i];
      if (checkedNode != null && !RepositoryNode.NO_ID.equals(checkedNode.getId())) {
        if (ENodeType.REPOSITORY_ELEMENT.equals(checkedNode.getType())) {
          checkedNodes.add(checkedNode);
        }
      }
    }
  }
  allNode.clear();
  allNode.addAll(repositoryNodes);
  allNode.addAll(checkedNodes);
}",0.9511184755592378
124090,"/** 
 * DOC mhelleboid Comment method ""getEClass"".
 * @param type
 * @return
 */
private EClass getEClass(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.BUSINESS_PROCESS) {
    return BusinessPackage.eINSTANCE.getBusinessProcess();
  }
 else   if (type == ERepositoryObjectType.PROCESS) {
    return BusinessPackage.eINSTANCE.getProcess();
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return BusinessPackage.eINSTANCE.getRoutine();
  }
 else   if (type == ERepositoryObjectType.DOCUMENTATION || type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC) {
    return BusinessPackage.eINSTANCE.getDocumentation();
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return BusinessPackage.eINSTANCE.getDatabaseMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
    return BusinessPackage.eINSTANCE.getSapFunctionMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_SAP_FUNCTION) {
    return BusinessPackage.eINSTANCE.getSAPFunction();
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return BusinessPackage.eINSTANCE.getTableMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    return BusinessPackage.eINSTANCE.getFileDelimitedMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    return BusinessPackage.eINSTANCE.getFilePositionalMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    return BusinessPackage.eINSTANCE.getFileRegexpMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    return BusinessPackage.eINSTANCE.getFileXmlMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    return BusinessPackage.eINSTANCE.getFileExcelMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    return BusinessPackage.eINSTANCE.getFileLdifMetadata();
  }
 else   if (type == ERepositoryObjectType.CONTEXT) {
    return BusinessPackage.eINSTANCE.getContext();
  }
 else   if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    return BusinessPackage.eINSTANCE.getGenericSchemaMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_QUERY) {
    return BusinessPackage.eINSTANCE.getQuery();
  }
 else   if (type == ERepositoryObjectType.JOBLET) {
    return BusinessPackage.eINSTANCE.getJoblet();
  }
 else   if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    return BusinessPackage.eINSTANCE.getLdap();
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    return BusinessPackage.eINSTANCE.getSalesforce();
  }
 else   if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    return BusinessPackage.eINSTANCE.getWsdl();
  }
 else   if (type == ERepositoryObjectType.SQLPATTERNS) {
    return BusinessPackage.eINSTANCE.getSQLPattern();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    return BusinessPackage.eINSTANCE.getCopybook();
  }
 else   if (type == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return BusinessPackage.eINSTANCE.getMDM();
  }
  return null;
}","/** 
 * DOC mhelleboid Comment method ""getEClass"".
 * @param type
 * @return
 */
private EClass getEClass(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.BUSINESS_PROCESS) {
    return BusinessPackage.eINSTANCE.getBusinessProcess();
  }
 else   if (type == ERepositoryObjectType.PROCESS) {
    return BusinessPackage.eINSTANCE.getProcess();
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return BusinessPackage.eINSTANCE.getRoutine();
  }
 else   if (type == ERepositoryObjectType.DOCUMENTATION || type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC) {
    return BusinessPackage.eINSTANCE.getDocumentation();
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return BusinessPackage.eINSTANCE.getDatabaseMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS) {
    return BusinessPackage.eINSTANCE.getSapFunctionMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_SAP_FUNCTION) {
    return BusinessPackage.eINSTANCE.getSAPFunction();
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return BusinessPackage.eINSTANCE.getTableMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    return BusinessPackage.eINSTANCE.getFileDelimitedMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    return BusinessPackage.eINSTANCE.getFilePositionalMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    return BusinessPackage.eINSTANCE.getFileRegexpMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    return BusinessPackage.eINSTANCE.getFileXmlMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    return BusinessPackage.eINSTANCE.getFileExcelMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    return BusinessPackage.eINSTANCE.getFileLdifMetadata();
  }
 else   if (type == ERepositoryObjectType.CONTEXT) {
    return BusinessPackage.eINSTANCE.getContext();
  }
 else   if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    return BusinessPackage.eINSTANCE.getGenericSchemaMetadata();
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_QUERY) {
    return BusinessPackage.eINSTANCE.getQuery();
  }
 else   if (type == ERepositoryObjectType.JOBLET) {
    return BusinessPackage.eINSTANCE.getJoblet();
  }
 else   if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    return BusinessPackage.eINSTANCE.getLdap();
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    return BusinessPackage.eINSTANCE.getSalesforce();
  }
 else   if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    return BusinessPackage.eINSTANCE.getWsdl();
  }
 else   if (type == ERepositoryObjectType.SQLPATTERNS) {
    return BusinessPackage.eINSTANCE.getSQLPattern();
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    return BusinessPackage.eINSTANCE.getCopybook();
  }
 else   if (type == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return BusinessPackage.eINSTANCE.getMDM();
  }
 else   if (type == ERepositoryObjectType.getTypeFromKey(""String_Node_Str"")) {
    return BusinessPackage.eINSTANCE.getService();
  }
  return null;
}",0.9757743023612389
124091,"/** 
 * DOC hcw Comment method ""createItemList"".
 * @param workArea
 */
private void createItemList(Composite workArea){
  Composite itemComposite=new Composite(workArea,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).applyTo(itemComposite);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).hint(500,300).applyTo(itemComposite);
  Label label=new Label(itemComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).applyTo(label);
  createTreeViewer(itemComposite);
  createSelectionButton(itemComposite);
  exportItemsTreeViewer.refresh();
  viewer=exportItemsTreeViewer.getViewer();
  viewer.expandAll();
  viewer.collapseAll();
  viewer.expandToLevel(2);
  addTreeCheckedSelection();
  if (!selection.isEmpty()) {
    Set<RepositoryNode> newSelection=new HashSet<RepositoryNode>();
    for (    RepositoryNode currentNode : (List<RepositoryNode>)selection.toList()) {
      List<IRepositoryViewObject> objects=null;
      if (currentNode.getContentType() != null && currentNode.getObject() != null && currentNode.getObjectType() != ERepositoryObjectType.FOLDER) {
        try {
          objects=exportItemsTreeViewer.getAll(currentNode.getObjectType());
        }
 catch (        IllegalArgumentException e) {
          objects=new ArrayList<IRepositoryViewObject>();
        }
        for (        IRepositoryViewObject nodeToSelect : objects) {
          if (currentNode.getObject().getId().equals(nodeToSelect.getId())) {
            newSelection.add((RepositoryNode)nodeToSelect.getRepositoryNode());
          }
        }
      }
 else {
        newSelection.add(currentNode);
      }
    }
    repositoryNodes.addAll(newSelection);
    repositoryNodes.addAll(checkedNodes);
    Set<RepositoryNode> nodes=new HashSet<RepositoryNode>();
    for (    RepositoryNode node : repositoryNodes) {
      expandRoot(node);
      expandParent(viewer,node);
      checkElement(node,nodes);
    }
    ((CheckboxTreeViewer)viewer).setCheckedElements(nodes.toArray());
  }
}","/** 
 * DOC hcw Comment method ""createItemList"".
 * @param workArea
 */
private void createItemList(Composite workArea){
  Composite itemComposite=new Composite(workArea,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).applyTo(itemComposite);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).hint(500,300).applyTo(itemComposite);
  Label label=new Label(itemComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).applyTo(label);
  createTreeViewer(itemComposite);
  createSelectionButton(itemComposite);
  exportItemsTreeViewer.refresh();
  viewer=exportItemsTreeViewer.getViewer();
  viewer.expandAll();
  viewer.collapseAll();
  viewer.expandToLevel(2);
  addTreeCheckedSelection();
  if (!selection.isEmpty()) {
    Set<RepositoryNode> newSelection=new HashSet<RepositoryNode>();
    for (    RepositoryNode currentNode : (List<RepositoryNode>)selection.toList()) {
      newSelection.add(currentNode);
    }
    repositoryNodes.addAll(newSelection);
    repositoryNodes.addAll(checkedNodes);
    Set<RepositoryNode> nodes=new HashSet<RepositoryNode>();
    for (    RepositoryNode node : repositoryNodes) {
      expandRoot(node);
      expandParent(viewer,node);
      checkElement(node,nodes);
    }
    ((CheckboxTreeViewer)viewer).setCheckedElements(nodes.toArray());
  }
}",0.7839721254355401
124092,"@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}","@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}",0.7536907536907537
124093,"@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}","@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}",0.7436823104693141
124094,"@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    if (!alreadyEditedByUser) {
      refreshNewJob();
      try {
        ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    try {
      Item newCreated=null;
      if (processObject.getProperty() != null && processObject.getProperty().getItem() != null) {
        newCreated=processObject.getProperty().getItem();
      }
      if (!(newCreated instanceof BusinessProcessItem)) {
        ProxyRepositoryFactory.getInstance().lock(processObject);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
    boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
    openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    processObject.getProperty().setVersion(originalVersion);
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}","@Override public boolean performFinish(){
  if (mainPage.isCreateNewVersionJob()) {
    if (!alreadyEditedByUser) {
      refreshNewJob();
      try {
        ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
    try {
      Item newCreated=null;
      if (processObject.getProperty() != null && processObject.getProperty().getItem() != null) {
        newCreated=processObject.getProperty().getItem();
      }
      if (!(newCreated instanceof BusinessProcessItem)) {
        ProxyRepositoryFactory.getInstance().lock(processObject);
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
catch (    LoginException e) {
      ExceptionHandler.process(e);
    }
    boolean locked=processObject.getRepositoryStatus().equals(ERepositoryStatus.LOCK_BY_USER);
    openAnotherVersion((RepositoryNode)processObject.getRepositoryNode(),!locked);
    try {
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    StructuredSelection selection=(StructuredSelection)mainPage.getSelection();
    RepositoryNode node=(RepositoryNode)selection.getFirstElement();
    boolean lastVersion=node.getObject().getVersion().equals(processObject.getVersion());
    if (lastVersion) {
      lockObject(processObject);
    }
    ERepositoryStatus status=node.getObject().getRepositoryStatus();
    boolean isLocked=false;
    if (status == ERepositoryStatus.LOCK_BY_USER) {
      isLocked=true;
    }
    openAnotherVersion(node,!lastVersion || !isLocked);
  }
  return true;
}",0.9830696641687484
124095,"public void getAllExistPaloDimensionElements(paloelements pleles) throws paloexception {
  tPaloDimensionElements tPaloDimele=null;
  int elementPosition=0;
  String elementName=""String_Node_Str"";
  int elementParentPosition=0;
  int elementLevel=0;
  for (  paloelement plElm : pleles.getElements()) {
    elementPosition=(int)plElm.getElementPosition();
    elementName=plElm.getName();
    elementParentPosition=(int)plElm.getFatherPaloelement().getElementPosition();
    elementLevel=getElementLevel(elementName,elementPosition);
    tPaloDimele=new tPaloDimensionElements(elementPosition,elementName,elementParentPosition,elementLevel);
    lstPaloDimensionElements.add(tPaloDimele);
  }
}","public void getAllExistPaloDimensionElements(paloelements pleles) throws paloexception {
  tPaloDimensionElements tPaloDimele=null;
  int elementPosition=0;
  String elementName=""String_Node_Str"";
  int elementParentPosition=0;
  int elementLevel=0;
  for (  paloelement plElm : pleles.getElements()) {
    elementPosition=(int)plElm.getElementPosition();
    elementName=plElm.getName();
    elementParentPosition=(int)plElm.getFatherPaloelement().getElementPosition();
    if (elementParentPosition == 0 && elementPosition == 0) {
      elementParentPosition=-1;
    }
    elementLevel=getElementLevel(elementName,elementPosition);
    tPaloDimele=new tPaloDimensionElements(elementPosition,elementName,elementParentPosition,elementLevel);
    lstPaloDimensionElements.add(tPaloDimele);
  }
}",0.9327956989247312
124096,"private void deleteNoUseTable(){
  if (SQLBuilderRepositoryNodeManager.tList == null || SQLBuilderRepositoryNodeManager.tList.size() == 0) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}","private void deleteNoUseTable(){
  connection=(DatabaseConnection)SQLBuilderRepositoryNodeManager.getItem(SQLBuilderRepositoryNodeManager.getRoot(nodeInEditor)).getConnection();
  if (SQLBuilderRepositoryNodeManager.tList instanceof List) {
    if (SQLBuilderRepositoryNodeManager.tList.size() == 0) {
      SQLBuilderRepositoryNodeManager.tList.addAll(ConnectionHelper.getTables(connection));
    }
  }
 else {
    SQLBuilderRepositoryNodeManager.tList=new ArrayList<MetadataTable>();
    SQLBuilderRepositoryNodeManager.tList.addAll(ConnectionHelper.getTables(connection));
  }
  if (SQLBuilderRepositoryNodeManager.tList == null || SQLBuilderRepositoryNodeManager.tList.size() == 0) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}",0.5817912657290896
124097,"@Override public void cancelPressed(){
  SQLBuilderRepositoryNodeManager.tList=null;
  super.cancelPressed();
}","@Override public void cancelPressed(){
  super.cancelPressed();
  SQLBuilderRepositoryNodeManager.tList=null;
}",0.7747747747747747
124098,"/** 
 * DOC hcw Comment method ""createItemList"".
 * @param workArea
 */
private void createItemList(Composite workArea){
  Composite itemComposite=new Composite(workArea,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).applyTo(itemComposite);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).hint(500,300).applyTo(itemComposite);
  Label label=new Label(itemComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).applyTo(label);
  createTreeViewer(itemComposite);
  createSelectionButton(itemComposite);
  exportItemsTreeViewer.refresh();
  viewer=exportItemsTreeViewer.getViewer();
  viewer.expandAll();
  viewer.collapseAll();
  viewer.expandToLevel(2);
  addTreeCheckedSelection();
  if (!selection.isEmpty()) {
    Set<RepositoryNode> newSelection=new HashSet<RepositoryNode>();
    for (    RepositoryNode currentNode : (List<RepositoryNode>)selection.toList()) {
      List<IRepositoryViewObject> objects=null;
      if (currentNode.getContentType() != null && currentNode.getObject() != null && currentNode.getObjectType() != ERepositoryObjectType.FOLDER) {
        try {
          objects=exportItemsTreeViewer.getAll(currentNode.getObjectType());
        }
 catch (        IllegalArgumentException e) {
          objects=new ArrayList<IRepositoryViewObject>();
        }
        for (        IRepositoryViewObject nodeToSelect : objects) {
          if (currentNode.getObject().getId().equals(nodeToSelect.getId())) {
            newSelection.add((RepositoryNode)nodeToSelect.getRepositoryNode());
          }
        }
      }
 else {
        newSelection.add(currentNode);
      }
    }
    repositoryNodes.addAll(newSelection);
    repositoryNodes.addAll(checkedNodes);
    Set<RepositoryNode> nodes=new HashSet<RepositoryNode>();
    for (    RepositoryNode node : repositoryNodes) {
      expandRoot(node);
      expandParent(viewer,node);
      checkElement(node,nodes);
    }
    ((CheckboxTreeViewer)viewer).setCheckedElements(nodes.toArray());
  }
}","/** 
 * DOC hcw Comment method ""createItemList"".
 * @param workArea
 */
private void createItemList(Composite workArea){
  Composite itemComposite=new Composite(workArea,SWT.NONE);
  GridLayoutFactory.swtDefaults().numColumns(2).applyTo(itemComposite);
  GridDataFactory.swtDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).hint(500,300).applyTo(itemComposite);
  Label label=new Label(itemComposite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.swtDefaults().span(2,1).applyTo(label);
  createTreeViewer(itemComposite);
  createSelectionButton(itemComposite);
  exportItemsTreeViewer.refresh();
  viewer=exportItemsTreeViewer.getViewer();
  viewer.expandAll();
  viewer.collapseAll();
  viewer.expandToLevel(2);
  addTreeCheckedSelection();
  if (!selection.isEmpty()) {
    Set<RepositoryNode> newSelection=new HashSet<RepositoryNode>();
    for (    RepositoryNode currentNode : (List<RepositoryNode>)selection.toList()) {
      newSelection.add(currentNode);
    }
    repositoryNodes.addAll(newSelection);
    repositoryNodes.addAll(checkedNodes);
    Set<RepositoryNode> nodes=new HashSet<RepositoryNode>();
    for (    RepositoryNode node : repositoryNodes) {
      expandRoot(node);
      expandParent(viewer,node);
      checkElement(node,nodes);
    }
    ((CheckboxTreeViewer)viewer).setCheckedElements(nodes.toArray());
  }
}",0.7839721254355401
124099,"private void needContextModeParameters(){
  legalParameters.clear();
  for (  IElementParameter parameter : node.getElementParameters()) {
    if (parameter.isDynamicSettings() && parameter.isShow(node.getElementParameters()) && parameter.getCategory() != EComponentCategory.TECHNICAL && (parameter.getFieldType() == EParameterFieldType.CHECK || parameter.getFieldType() == EParameterFieldType.CLOSED_LIST) || parameter.getFieldType() == EParameterFieldType.MODULE_LIST || parameter.getFieldType() == EParameterFieldType.RADIO || parameter.getFieldType() == EParameterFieldType.COMPONENT_LIST) {
      legalParameters.add(parameter);
    }
  }
}","private void needContextModeParameters(){
  legalParameters.clear();
  for (  IElementParameter parameter : node.getElementParameters()) {
    if (parameter.isDynamicSettings() && parameter.isShow(node.getElementParameters()) && parameter.getCategory() != EComponentCategory.TECHNICAL && (parameter.getFieldType() == EParameterFieldType.CHECK || parameter.getFieldType() == EParameterFieldType.CLOSED_LIST || parameter.getFieldType() == EParameterFieldType.MODULE_LIST || parameter.getFieldType() == EParameterFieldType.RADIO || parameter.getFieldType() == EParameterFieldType.COMPONENT_LIST)) {
      legalParameters.add(parameter);
    }
  }
}",0.9984496124031008
124100,"public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}",0.9556259904912836
124101,"private void importItemRecord(ResourcesManager manager,ItemRecord itemRecord,boolean overwrite,IPath destinationPath,final Set<String> overwriteDeletedItems,String contentType,final IProgressMonitor monitor){
  monitor.subTask(Messages.getString(""String_Node_Str"") + itemRecord.getItemName());
  resolveItem(manager,itemRecord);
  int num=0;
  for (  Object obj : itemRecord.getResourceSet().getResources()) {
    if (!(obj instanceof PropertiesProjectResourceImpl)) {
      if (obj instanceof XMIResourceImpl) {
        num++;
        if (num > 2) {
          try {
            throw new InvocationTargetException(new PersistenceException(""String_Node_Str"" + itemRecord.getLabel() + ""String_Node_Str""));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
          return;
        }
      }
    }
  }
  final Item item=itemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=new Path(item.getState().getPath());
    if (destinationPath != null && itemType.name().equals(contentType)) {
      path=destinationPath.append(path);
    }
    try {
      repFactory.createParentFoldersRecursively(ProjectManager.getInstance().getCurrentProject(),itemType,path,true);
    }
 catch (    Exception e) {
      logError(e);
      path=new Path(""String_Node_Str"");
    }
    try {
      Item tmpItem=item;
      String id=itemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=itemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !itemRecord.isLocked() && (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED) && !deletedItems.contains(id)) {
        if (!overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (itemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || itemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          repFactory.forceDeleteObjectPhysical(lastVersion,itemRecord.getProperty().getVersion());
        }
        lastVersion=null;
      }
      User author=itemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      if (item instanceof JobletProcessItem) {
        hasJoblets=true;
      }
      if (tmpItem instanceof ProcessItem && !statAndLogsSettingsReloaded && !implicitSettingsReloaded) {
        ProcessItem processItem=(ProcessItem)tmpItem;
        ParametersType paType=processItem.getProcess().getParameters();
        boolean statsPSettingRemoved=false;
        if (itemRecord.isRemoveProjectStatslog()) {
          if (paType != null) {
            String paramName=""String_Node_Str"";
            EList listParamType=paType.getElementParameter();
            for (int j=0; j < listParamType.size(); j++) {
              ElementParameterType pType=(ElementParameterType)listParamType.get(j);
              if (pType != null && paramName.equals(pType.getName())) {
                pType.setValue(Boolean.FALSE.toString());
                statsPSettingRemoved=true;
                break;
              }
            }
          }
        }
        String statslogUsePSetting=null;
        String implicitUsePSetting=null;
        if (paType != null) {
          EList listParamType=paType.getElementParameter();
          for (int j=0; j < listParamType.size(); j++) {
            ElementParameterType pType=(ElementParameterType)listParamType.get(j);
            if (pType != null) {
              if (!statsPSettingRemoved && ""String_Node_Str"".equals(pType.getName())) {
                statslogUsePSetting=pType.getValue();
              }
              if (""String_Node_Str"".equals(pType.getName())) {
                implicitUsePSetting=pType.getValue();
              }
              if (statsPSettingRemoved && implicitUsePSetting != null || !statsPSettingRemoved && implicitUsePSetting != null && statslogUsePSetting != null) {
                break;
              }
            }
          }
        }
        if (statslogUsePSetting != null && Boolean.parseBoolean(statslogUsePSetting) && !statAndLogsSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          statAndLogsSettingsReloaded=true;
        }
        if (implicitUsePSetting != null && Boolean.parseBoolean(implicitUsePSetting) && !implicitSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          implicitSettingsReloaded=true;
        }
      }
      if (lastVersion == null || itemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !itemRecord.getMigrationTasksToApply().isEmpty();
        repFactory.create(tmpItem,path,true);
        if (isConnectionEmptyBeforeMigration) {
          InputStream is=manager.getStream(itemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
          try {
            URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
            URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
            URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
            OutputStream os=new FileOutputStream(fileURL.getFile());
            try {
              FileCopyUtils.copyStreams(is,os);
            }
  finally {
              os.close();
            }
          }
  finally {
            is.close();
          }
        }
 else {
          copyScreenshotFile(manager,itemRecord);
          boolean haveRef=copyReferenceFiles(manager,tmpItem,itemRecord.getPath());
          if (haveRef) {
            repFactory.save(tmpItem,true);
          }
          repFactory.unloadResources(tmpItem.getProperty());
        }
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        itemRecord.addError(e.getMessage());
        logError(e);
      }
      if (tmpItem != null) {
        RelationshipItemBuilder.getInstance().addOrUpdateItem(tmpItem,true);
        if (tmpItem.getState() != null) {
          if (itemType != null) {
            final Set<String> folders=restoreFolder.getFolders(itemType);
            if (folders != null) {
              for (              String folderPath : folders) {
                if (folderPath != null && folderPath.equals(path.toString())) {
                  FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
                  if (folderItem != null) {
                    folderItem.getState().setDeleted(false);
                    while (!(folderItem.getParent() instanceof Project)) {
                      folderItem=(FolderItem)folderItem.getParent();
                      if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                        break;
                      }
                      folderItem.getState().setDeleted(false);
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      itemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=itemRecord.getLabel();
  for (  Resource resource : itemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(itemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","private void importItemRecord(ResourcesManager manager,ItemRecord itemRecord,boolean overwrite,IPath destinationPath,final Set<String> overwriteDeletedItems,String contentType,final IProgressMonitor monitor){
  monitor.subTask(Messages.getString(""String_Node_Str"") + itemRecord.getItemName());
  resolveItem(manager,itemRecord);
  int num=0;
  for (  Object obj : itemRecord.getResourceSet().getResources()) {
    if (!(obj instanceof PropertiesProjectResourceImpl)) {
      if (obj instanceof XMIResourceImpl) {
        num++;
        if (num > 2) {
          try {
            throw new InvocationTargetException(new PersistenceException(""String_Node_Str"" + itemRecord.getLabel() + ""String_Node_Str""));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
          return;
        }
      }
    }
  }
  final Item item=itemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=new Path(item.getState().getPath());
    if (destinationPath != null && itemType.name().equals(contentType)) {
      path=destinationPath.append(path);
    }
    try {
      repFactory.createParentFoldersRecursively(ProjectManager.getInstance().getCurrentProject(),itemType,path,true);
    }
 catch (    Exception e) {
      logError(e);
      path=new Path(""String_Node_Str"");
    }
    try {
      Item tmpItem=item;
      String id=itemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=itemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !itemRecord.isLocked() && (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED) && !deletedItems.contains(id)) {
        if (!overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (itemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || itemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          repFactory.forceDeleteObjectPhysical(lastVersion,itemRecord.getProperty().getVersion());
        }
        lastVersion=null;
      }
      User author=itemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      if (item instanceof JobletProcessItem) {
        hasJoblets=true;
      }
      if (tmpItem instanceof ProcessItem && !statAndLogsSettingsReloaded && !implicitSettingsReloaded) {
        ProcessItem processItem=(ProcessItem)tmpItem;
        ParametersType paType=processItem.getProcess().getParameters();
        boolean statsPSettingRemoved=false;
        if (itemRecord.isRemoveProjectStatslog()) {
          if (paType != null) {
            String paramName=""String_Node_Str"";
            EList listParamType=paType.getElementParameter();
            for (int j=0; j < listParamType.size(); j++) {
              ElementParameterType pType=(ElementParameterType)listParamType.get(j);
              if (pType != null && paramName.equals(pType.getName())) {
                pType.setValue(Boolean.FALSE.toString());
                statsPSettingRemoved=true;
                break;
              }
            }
          }
        }
        String statslogUsePSetting=null;
        String implicitUsePSetting=null;
        if (paType != null) {
          EList listParamType=paType.getElementParameter();
          for (int j=0; j < listParamType.size(); j++) {
            ElementParameterType pType=(ElementParameterType)listParamType.get(j);
            if (pType != null) {
              if (!statsPSettingRemoved && ""String_Node_Str"".equals(pType.getName())) {
                statslogUsePSetting=pType.getValue();
              }
              if (""String_Node_Str"".equals(pType.getName())) {
                implicitUsePSetting=pType.getValue();
              }
              if (statsPSettingRemoved && implicitUsePSetting != null || !statsPSettingRemoved && implicitUsePSetting != null && statslogUsePSetting != null) {
                break;
              }
            }
          }
        }
        if (statslogUsePSetting != null && Boolean.parseBoolean(statslogUsePSetting) && !statAndLogsSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          statAndLogsSettingsReloaded=true;
        }
        if (implicitUsePSetting != null && Boolean.parseBoolean(implicitUsePSetting) && !implicitSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          implicitSettingsReloaded=true;
        }
      }
      if (lastVersion == null || itemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !itemRecord.getMigrationTasksToApply().isEmpty();
        repFactory.create(tmpItem,path,true);
        if (isConnectionEmptyBeforeMigration) {
          InputStream is=manager.getStream(itemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
          try {
            URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
            URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
            URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
            OutputStream os=new FileOutputStream(fileURL.getFile());
            try {
              FileCopyUtils.copyStreams(is,os);
            }
  finally {
              os.close();
            }
          }
  finally {
            is.close();
          }
        }
 else {
          copyScreenshotFile(manager,itemRecord);
          boolean haveRef=copyReferenceFiles(manager,tmpItem,itemRecord.getPath());
          if (haveRef) {
            repFactory.save(tmpItem,true);
          }
        }
        repFactory.unloadResources(tmpItem.getProperty());
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        itemRecord.addError(e.getMessage());
        logError(e);
      }
      if (tmpItem != null) {
        RelationshipItemBuilder.getInstance().addOrUpdateItem(tmpItem,true);
        if (tmpItem.getState() != null) {
          if (itemType != null) {
            final Set<String> folders=restoreFolder.getFolders(itemType);
            if (folders != null) {
              for (              String folderPath : folders) {
                if (folderPath != null && folderPath.equals(path.toString())) {
                  FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
                  if (folderItem != null) {
                    folderItem.getState().setDeleted(false);
                    while (!(folderItem.getParent() instanceof Project)) {
                      folderItem=(FolderItem)folderItem.getParent();
                      if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                        break;
                      }
                      folderItem.getState().setDeleted(false);
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      itemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=itemRecord.getLabel();
  for (  Resource resource : itemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(itemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.9990235434523164
124102,"private void importItemRecord(ResourcesManager manager,ItemRecord itemRecord,boolean overwrite,IPath destinationPath,final Set<String> overwriteDeletedItems,String contentType,final IProgressMonitor monitor){
  monitor.subTask(Messages.getString(""String_Node_Str"") + itemRecord.getItemName());
  resolveItem(manager,itemRecord);
  int num=0;
  for (  Object obj : itemRecord.getResourceSet().getResources()) {
    if (!(obj instanceof PropertiesProjectResourceImpl)) {
      if (obj instanceof XMIResourceImpl) {
        num++;
        if (num > 2) {
          try {
            throw new InvocationTargetException(new PersistenceException(""String_Node_Str"" + itemRecord.getLabel() + ""String_Node_Str""));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
          return;
        }
      }
    }
  }
  final Item item=itemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=new Path(item.getState().getPath());
    if (destinationPath != null && itemType.name().equals(contentType)) {
      path=destinationPath.append(path);
    }
    try {
      repFactory.createParentFoldersRecursively(ProjectManager.getInstance().getCurrentProject(),itemType,path,true);
    }
 catch (    Exception e) {
      logError(e);
      path=new Path(""String_Node_Str"");
    }
    try {
      Item tmpItem=item;
      String id=itemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=itemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !itemRecord.isLocked() && (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED) && !deletedItems.contains(id)) {
        if (!overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (itemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || itemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          repFactory.forceDeleteObjectPhysical(lastVersion,itemRecord.getProperty().getVersion());
        }
        lastVersion=null;
      }
      User author=itemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      if (item instanceof JobletProcessItem) {
        hasJoblets=true;
      }
      if (tmpItem instanceof ProcessItem && !statAndLogsSettingsReloaded && !implicitSettingsReloaded) {
        ProcessItem processItem=(ProcessItem)tmpItem;
        ParametersType paType=processItem.getProcess().getParameters();
        boolean statsPSettingRemoved=false;
        if (itemRecord.isRemoveProjectStatslog()) {
          if (paType != null) {
            String paramName=""String_Node_Str"";
            EList listParamType=paType.getElementParameter();
            for (int j=0; j < listParamType.size(); j++) {
              ElementParameterType pType=(ElementParameterType)listParamType.get(j);
              if (pType != null && paramName.equals(pType.getName())) {
                pType.setValue(Boolean.FALSE.toString());
                statsPSettingRemoved=true;
                break;
              }
            }
          }
        }
        String statslogUsePSetting=null;
        String implicitUsePSetting=null;
        if (paType != null) {
          EList listParamType=paType.getElementParameter();
          for (int j=0; j < listParamType.size(); j++) {
            ElementParameterType pType=(ElementParameterType)listParamType.get(j);
            if (pType != null) {
              if (!statsPSettingRemoved && ""String_Node_Str"".equals(pType.getName())) {
                statslogUsePSetting=pType.getValue();
              }
              if (""String_Node_Str"".equals(pType.getName())) {
                implicitUsePSetting=pType.getValue();
              }
              if (statsPSettingRemoved && implicitUsePSetting != null || !statsPSettingRemoved && implicitUsePSetting != null && statslogUsePSetting != null) {
                break;
              }
            }
          }
        }
        if (statslogUsePSetting != null && Boolean.parseBoolean(statslogUsePSetting) && !statAndLogsSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          statAndLogsSettingsReloaded=true;
        }
        if (implicitUsePSetting != null && Boolean.parseBoolean(implicitUsePSetting) && !implicitSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          implicitSettingsReloaded=true;
        }
      }
      if (lastVersion == null || itemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !itemRecord.getMigrationTasksToApply().isEmpty();
        repFactory.create(tmpItem,path,true);
        if (isConnectionEmptyBeforeMigration) {
          InputStream is=manager.getStream(itemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
          try {
            URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
            URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
            URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
            OutputStream os=new FileOutputStream(fileURL.getFile());
            try {
              FileCopyUtils.copyStreams(is,os);
            }
  finally {
              os.close();
            }
          }
  finally {
            is.close();
          }
        }
 else {
          copyScreenshotFile(manager,itemRecord);
          boolean haveRef=copyReferenceFiles(manager,tmpItem,itemRecord.getPath());
          if (haveRef) {
            repFactory.save(tmpItem,true);
          }
          repFactory.unloadResources(tmpItem.getProperty());
        }
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        itemRecord.addError(e.getMessage());
        logError(e);
      }
      if (tmpItem != null) {
        RelationshipItemBuilder.getInstance().addOrUpdateItem(tmpItem,true);
        if (tmpItem.getState() != null) {
          if (itemType != null) {
            final Set<String> folders=restoreFolder.getFolders(itemType);
            if (folders != null) {
              for (              String folderPath : folders) {
                if (folderPath != null && folderPath.equals(path.toString())) {
                  FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
                  if (folderItem != null) {
                    folderItem.getState().setDeleted(false);
                    while (!(folderItem.getParent() instanceof Project)) {
                      folderItem=(FolderItem)folderItem.getParent();
                      if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                        break;
                      }
                      folderItem.getState().setDeleted(false);
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      itemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=itemRecord.getLabel();
  for (  Resource resource : itemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(itemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}","private void importItemRecord(ResourcesManager manager,ItemRecord itemRecord,boolean overwrite,IPath destinationPath,final Set<String> overwriteDeletedItems,String contentType,final IProgressMonitor monitor){
  monitor.subTask(Messages.getString(""String_Node_Str"") + itemRecord.getItemName());
  resolveItem(manager,itemRecord);
  int num=0;
  for (  Object obj : itemRecord.getResourceSet().getResources()) {
    if (!(obj instanceof PropertiesProjectResourceImpl)) {
      if (obj instanceof XMIResourceImpl) {
        num++;
        if (num > 2) {
          try {
            throw new InvocationTargetException(new PersistenceException(""String_Node_Str"" + itemRecord.getLabel() + ""String_Node_Str""));
          }
 catch (          InvocationTargetException e) {
            ExceptionHandler.process(e);
          }
          return;
        }
      }
    }
  }
  final Item item=itemRecord.getItem();
  if (item != null) {
    ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=new Path(item.getState().getPath());
    if (destinationPath != null && itemType.name().equals(contentType)) {
      path=destinationPath.append(path);
    }
    try {
      repFactory.createParentFoldersRecursively(ProjectManager.getInstance().getCurrentProject(),itemType,path,true);
    }
 catch (    Exception e) {
      logError(e);
      path=new Path(""String_Node_Str"");
    }
    try {
      Item tmpItem=item;
      String id=itemRecord.getProperty().getId();
      IRepositoryViewObject lastVersion=itemRecord.getExistingItemWithSameId();
      if (lastVersion != null && overwrite && !itemRecord.isLocked() && (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED) && !deletedItems.contains(id)) {
        if (!overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (itemRecord.getState().equals(ItemRecord.State.NAME_EXISTED) || itemRecord.getState().equals(ItemRecord.State.NAME_AND_ID_EXISTED)) {
          repFactory.forceDeleteObjectPhysical(lastVersion,itemRecord.getProperty().getVersion());
        }
        lastVersion=null;
      }
      User author=itemRecord.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      if (item instanceof JobletProcessItem) {
        hasJoblets=true;
      }
      if (tmpItem instanceof ProcessItem && !statAndLogsSettingsReloaded && !implicitSettingsReloaded) {
        ProcessItem processItem=(ProcessItem)tmpItem;
        ParametersType paType=processItem.getProcess().getParameters();
        boolean statsPSettingRemoved=false;
        if (itemRecord.isRemoveProjectStatslog()) {
          if (paType != null) {
            String paramName=""String_Node_Str"";
            EList listParamType=paType.getElementParameter();
            for (int j=0; j < listParamType.size(); j++) {
              ElementParameterType pType=(ElementParameterType)listParamType.get(j);
              if (pType != null && paramName.equals(pType.getName())) {
                pType.setValue(Boolean.FALSE.toString());
                statsPSettingRemoved=true;
                break;
              }
            }
          }
        }
        String statslogUsePSetting=null;
        String implicitUsePSetting=null;
        if (paType != null) {
          EList listParamType=paType.getElementParameter();
          for (int j=0; j < listParamType.size(); j++) {
            ElementParameterType pType=(ElementParameterType)listParamType.get(j);
            if (pType != null) {
              if (!statsPSettingRemoved && ""String_Node_Str"".equals(pType.getName())) {
                statslogUsePSetting=pType.getValue();
              }
              if (""String_Node_Str"".equals(pType.getName())) {
                implicitUsePSetting=pType.getValue();
              }
              if (statsPSettingRemoved && implicitUsePSetting != null || !statsPSettingRemoved && implicitUsePSetting != null && statslogUsePSetting != null) {
                break;
              }
            }
          }
        }
        if (statslogUsePSetting != null && Boolean.parseBoolean(statslogUsePSetting) && !statAndLogsSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          statAndLogsSettingsReloaded=true;
        }
        if (implicitUsePSetting != null && Boolean.parseBoolean(implicitUsePSetting) && !implicitSettingsReloaded) {
          CorePlugin.getDefault().getDesignerCoreService().reloadParamFromProjectSettings(paType,""String_Node_Str"");
          implicitSettingsReloaded=true;
        }
      }
      if (lastVersion == null || itemRecord.getState().equals(ItemRecord.State.ID_EXISTED)) {
        boolean isConnectionEmptyBeforeMigration=tmpItem instanceof ConnectionItem && ((ConnectionItem)tmpItem).getConnection().eResource() == null && !itemRecord.getMigrationTasksToApply().isEmpty();
        repFactory.create(tmpItem,path,true);
        if (isConnectionEmptyBeforeMigration) {
          InputStream is=manager.getStream(itemRecord.getPath().removeFileExtension().addFileExtension(FileConstants.ITEM_EXTENSION));
          try {
            URI propertyResourceURI=EcoreUtil.getURI(((ConnectionItem)tmpItem).getProperty());
            URI relativePlateformDestUri=propertyResourceURI.trimFileExtension().appendFileExtension(FileConstants.ITEM_EXTENSION);
            URL fileURL=FileLocator.toFileURL(new java.net.URL(""String_Node_Str"" + relativePlateformDestUri.toPlatformString(true)));
            OutputStream os=new FileOutputStream(fileURL.getFile());
            try {
              FileCopyUtils.copyStreams(is,os);
            }
  finally {
              os.close();
            }
          }
  finally {
            is.close();
          }
        }
 else {
          copyScreenshotFile(manager,itemRecord);
          boolean haveRef=copyReferenceFiles(manager,tmpItem,itemRecord.getPath());
          if (haveRef) {
            repFactory.save(tmpItem,true);
          }
        }
        repFactory.unloadResources(tmpItem.getProperty());
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        itemRecord.setImportPath(path.toPortableString());
        itemRecord.setItemId(itemRecord.getProperty().getId());
        itemRecord.setRepositoryType(itemType);
        itemRecord.setItemVersion(itemRecord.getProperty().getVersion());
        itemRecord.setImported(true);
        cache.addToCache(tmpItem);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        itemRecord.addError(e.getMessage());
        logError(e);
      }
      if (tmpItem != null) {
        RelationshipItemBuilder.getInstance().addOrUpdateItem(tmpItem,true);
        if (tmpItem.getState() != null) {
          if (itemType != null) {
            final Set<String> folders=restoreFolder.getFolders(itemType);
            if (folders != null) {
              for (              String folderPath : folders) {
                if (folderPath != null && folderPath.equals(path.toString())) {
                  FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
                  if (folderItem != null) {
                    folderItem.getState().setDeleted(false);
                    while (!(folderItem.getParent() instanceof Project)) {
                      folderItem=(FolderItem)folderItem.getParent();
                      if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                        break;
                      }
                      folderItem.getState().setDeleted(false);
                    }
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      itemRecord.addError(e.getMessage());
      logError(e);
    }
  }
  String label=itemRecord.getLabel();
  for (  Resource resource : itemRecord.getResourceSet().getResources()) {
    if (!(resource instanceof ByteArrayResource)) {
      resource.unload();
    }
  }
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
  applyMigrationTasks(itemRecord,monitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"" + label);
}",0.9990235434523164
124103,"private void buildProcess(){
  process=new Process(property);
  process.getContextManager().getListContext().addAll(node.getProcess().getContextManager().getListContext());
  process.getContextManager().setDefaultContext(this.selectContext);
  outputComponent=ComponentsFactoryProvider.getInstance().get(EDatabaseComponentName.FILEDELIMITED.getOutPutComponentName());
  if (node.getComponent().getModulesNeeded().size() > 0) {
    for (    ModuleNeeded module : node.getComponent().getModulesNeeded()) {
      if (module.isRequired()) {
        Node libNode1=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
        libNode1.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"");
        NodeContainer nc=null;
        if (libNode1.isJoblet()) {
          nc=new JobletContainer(libNode1);
        }
 else {
          nc=new NodeContainer(libNode1);
        }
        process.addNodeContainer(nc);
      }
    }
  }
 else {
    if (node.getComponent().getName().equals(""String_Node_Str"")) {
      List<String> drivers=EDatabaseVersion4Drivers.getDrivers(info.getTrueDBTypeForJDBC(),info.getDbVersion());
      String moduleNeedName=""String_Node_Str"";
      Node libNode1=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
      if (drivers.size() > 0) {
        moduleNeedName=drivers.get(0).toString();
        libNode1.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + moduleNeedName + ""String_Node_Str"");
      }
      process.addNodeContainer(new NodeContainer(libNode1));
    }
  }
  for (  IElementParameter param : node.getElementParameters()) {
    Set<String> neededLibraries=new HashSet<String>();
    JavaProcessUtil.findMoreLibraries(process,neededLibraries,param,true);
    if (param.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
      if (!""String_Node_Str"".equals(param.getValue())) {
        String moduleValue=(String)param.getValue();
        neededLibraries.add(moduleValue);
      }
      if (param.isShow(node.getElementParameters())) {
        JavaProcessUtil.findMoreLibraries(process,neededLibraries,param,true);
      }
 else {
        JavaProcessUtil.findMoreLibraries(process,neededLibraries,param,false);
      }
    }
    for (    String lib : neededLibraries) {
      Node libNode1=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
      libNode1.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + lib + ""String_Node_Str"");
      process.addNodeContainer(new NodeContainer(libNode1));
    }
  }
  for (  ModuleNeeded module : outputComponent.getModulesNeeded()) {
    Node libNode2=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
    libNode2.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"");
    process.addNodeContainer(new NodeContainer(libNode2));
  }
  int fetchSize=maximumRowsToPreview;
  if (maximumRowsToPreview > 1000) {
    fetchSize=1000;
  }
  String codeStart, codeMain, codeEnd;
  temppath=(Path)buildTempCSVFilename();
  memoSQL=memoSQL.replace(""String_Node_Str"",""String_Node_Str"");
  codeStart=""String_Node_Str"" + info.getDriverClassName() + ""String_Node_Str""+ ""String_Node_Str""+ info.getUrl()+ ""String_Node_Str""+ ""String_Node_Str""+ info.getUsername()+ ""String_Node_Str""+ info.getPwd()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ fetchSize+ ""String_Node_Str""+ ""String_Node_Str""+ memoSQL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ temppath+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  codeMain=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  codeEnd=""String_Node_Str"" + ""String_Node_Str"" + maximumRowsToPreview + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  IComponent component=null;
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    component=ComponentsFactoryProvider.getInstance().get(""String_Node_Str"");
  break;
case PERL:
default :
component=ComponentsFactoryProvider.getInstance().get(""String_Node_Str"");
break;
}
Node flexNode=new Node(component,process);
flexNode.setPropertyValue(""String_Node_Str"",codeStart);
flexNode.setPropertyValue(""String_Node_Str"",codeMain);
flexNode.setPropertyValue(""String_Node_Str"",codeEnd);
process.addNodeContainer(new NodeContainer(flexNode));
}","private void buildProcess(){
  process=new Process(property);
  process.getContextManager().getListContext().addAll(node.getProcess().getContextManager().getListContext());
  process.getContextManager().setDefaultContext(this.selectContext);
  outputComponent=ComponentsFactoryProvider.getInstance().get(EDatabaseComponentName.FILEDELIMITED.getOutPutComponentName());
  if (node.getComponent().getModulesNeeded().size() > 0) {
    for (    ModuleNeeded module : node.getComponent().getModulesNeeded()) {
      if (module.isRequired(node.getElementParameters())) {
        Node libNode1=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
        libNode1.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"");
        NodeContainer nc=null;
        if (libNode1.isJoblet()) {
          nc=new JobletContainer(libNode1);
        }
 else {
          nc=new NodeContainer(libNode1);
        }
        process.addNodeContainer(nc);
      }
    }
  }
 else {
    if (node.getComponent().getName().equals(""String_Node_Str"")) {
      List<String> drivers=EDatabaseVersion4Drivers.getDrivers(info.getTrueDBTypeForJDBC(),info.getDbVersion());
      String moduleNeedName=""String_Node_Str"";
      Node libNode1=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
      if (drivers.size() > 0) {
        moduleNeedName=drivers.get(0).toString();
        libNode1.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + moduleNeedName + ""String_Node_Str"");
      }
      process.addNodeContainer(new NodeContainer(libNode1));
    }
  }
  for (  IElementParameter param : node.getElementParameters()) {
    Set<String> neededLibraries=new HashSet<String>();
    JavaProcessUtil.findMoreLibraries(process,neededLibraries,param,true);
    if (param.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
      if (!""String_Node_Str"".equals(param.getValue())) {
        String moduleValue=(String)param.getValue();
        neededLibraries.add(moduleValue);
      }
      if (param.isShow(node.getElementParameters())) {
        JavaProcessUtil.findMoreLibraries(process,neededLibraries,param,true);
      }
 else {
        JavaProcessUtil.findMoreLibraries(process,neededLibraries,param,false);
      }
    }
    for (    String lib : neededLibraries) {
      Node libNode1=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
      libNode1.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + lib + ""String_Node_Str"");
      process.addNodeContainer(new NodeContainer(libNode1));
    }
  }
  for (  ModuleNeeded module : outputComponent.getModulesNeeded()) {
    Node libNode2=new Node(ComponentsFactoryProvider.getInstance().get(LIB_NODE),process);
    libNode2.setPropertyValue(""String_Node_Str"",""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"");
    process.addNodeContainer(new NodeContainer(libNode2));
  }
  int fetchSize=maximumRowsToPreview;
  if (maximumRowsToPreview > 1000) {
    fetchSize=1000;
  }
  String codeStart, codeMain, codeEnd;
  temppath=(Path)buildTempCSVFilename();
  memoSQL=memoSQL.replace(""String_Node_Str"",""String_Node_Str"");
  codeStart=""String_Node_Str"" + info.getDriverClassName() + ""String_Node_Str""+ ""String_Node_Str""+ info.getUrl()+ ""String_Node_Str""+ ""String_Node_Str""+ info.getUsername()+ ""String_Node_Str""+ info.getPwd()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ fetchSize+ ""String_Node_Str""+ ""String_Node_Str""+ memoSQL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ temppath+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  codeMain=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  codeEnd=""String_Node_Str"" + ""String_Node_Str"" + maximumRowsToPreview + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  IComponent component=null;
switch (LanguageManager.getCurrentLanguage()) {
case JAVA:
    component=ComponentsFactoryProvider.getInstance().get(""String_Node_Str"");
  break;
case PERL:
default :
component=ComponentsFactoryProvider.getInstance().get(""String_Node_Str"");
break;
}
Node flexNode=new Node(component,process);
flexNode.setPropertyValue(""String_Node_Str"",codeStart);
flexNode.setPropertyValue(""String_Node_Str"",codeMain);
flexNode.setPropertyValue(""String_Node_Str"",codeEnd);
process.addNodeContainer(new NodeContainer(flexNode));
}",0.9973126306360108
124104,"private static void getNeededLibraries(final IProcess process,boolean withChildrens,Set<ProcessItem> searchItems,Set<String> neededLibraries,Set<String> bundleDefinedLibraries,boolean... isExportOSGI){
  boolean exportOSGI=false;
  if (isExportOSGI != null && isExportOSGI.length == 1) {
    exportOSGI=isExportOSGI[0];
  }
  IElementParameter headerParameter=process.getElementParameter(EParameterName.HEADER_LIBRARY.getName());
  if (headerParameter != null) {
    Object value=headerParameter.getValue();
    if (value != null) {
      String headerLibraries=(String)value;
      if (headerLibraries.indexOf(File.separatorChar) > 0 && headerLibraries.length() > headerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=headerLibraries.substring(headerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter footerParameter=process.getElementParameter(EParameterName.FOOTER_LIBRARY.getName());
  if (footerParameter != null) {
    Object value=footerParameter.getValue();
    if (value != null) {
      String footerLibraries=(String)value;
      if (footerLibraries.indexOf(File.separatorChar) > 0 && footerLibraries.length() > footerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=footerLibraries.substring(footerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter elementParameter=process.getElementParameter(EParameterName.DRIVER_JAR.getName());
  if (elementParameter != null && elementParameter.getFieldType() == EParameterFieldType.TABLE) {
    getModulsInTable(process,elementParameter,neededLibraries);
  }
  if (process instanceof IProcess2) {
    Item item=((IProcess2)process).getProperty().getItem();
    if (item instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededForRoutines=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)item);
      if (modulesNeededForRoutines != null) {
        for (        ModuleNeeded moduleNeeded : modulesNeededForRoutines) {
          neededLibraries.add(moduleNeeded.getModuleName());
        }
      }
    }
  }
  List<? extends INode> nodeList=process.getGeneratingNodes();
  for (  INode node : nodeList) {
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    boolean flag=false;
    for (    ModuleNeeded needed : moduleList) {
      if (needed.getRequiredIf() != null) {
        flag=true;
      }
    }
    for (    ModuleNeeded needed : moduleList) {
      if (flag) {
        if (needed.isShowRequiredIf(node.getElementParameters())) {
          if (!exportOSGI) {
            neededLibraries.add(needed.getModuleName());
          }
 else           if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
            neededLibraries.add(needed.getModuleName());
          }
 else {
            bundleDefinedLibraries.add(needed.getModuleName());
          }
        }
      }
 else {
        if (needed.isRequired()) {
          if (!exportOSGI) {
            neededLibraries.add(needed.getModuleName());
          }
 else           if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
            neededLibraries.add(needed.getModuleName());
          }
 else {
            bundleDefinedLibraries.add(needed.getModuleName());
          }
        }
      }
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType() == null) {
        continue;
      }
      if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
        if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
          neededLibraries.add(getModuleValue(process,(String)curParam.getValue()));
        }
      }
 else       if (curParam.getFieldType() == EParameterFieldType.TABLE) {
        getModulsInTable(process,curParam,neededLibraries);
      }
      if (curParam.isShow(node.getElementParameters())) {
        findMoreLibraries(process,neededLibraries,curParam,true);
      }
 else {
        findMoreLibraries(process,neededLibraries,curParam,false);
      }
    }
    if (withChildrens) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        IElementParameter processVersionParam=node.getElementParameter(EParameterName.PROCESS_TYPE_VERSION.getName());
        ProcessItem processItem=null;
        if (processVersionParam != null) {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue(),(String)processVersionParam.getValue());
        }
 else {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue());
        }
        String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
        if (processItem != null && !searchItems.contains(processItem)) {
          searchItems.add(processItem);
          JobInfo subJobInfo=new JobInfo(processItem,context);
          IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
          IProcess child=service.getProcessFromItem(subJobInfo.getProcessItem());
          JavaProcessUtil.getNeededLibraries(child,true,searchItems,neededLibraries,bundleDefinedLibraries,isExportOSGI);
        }
      }
    }
  }
}","private static void getNeededLibraries(final IProcess process,boolean withChildrens,Set<ProcessItem> searchItems,Set<String> neededLibraries,Set<String> bundleDefinedLibraries,boolean... isExportOSGI){
  boolean exportOSGI=false;
  if (isExportOSGI != null && isExportOSGI.length == 1) {
    exportOSGI=isExportOSGI[0];
  }
  IElementParameter headerParameter=process.getElementParameter(EParameterName.HEADER_LIBRARY.getName());
  if (headerParameter != null) {
    Object value=headerParameter.getValue();
    if (value != null) {
      String headerLibraries=(String)value;
      if (headerLibraries.indexOf(File.separatorChar) > 0 && headerLibraries.length() > headerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=headerLibraries.substring(headerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter footerParameter=process.getElementParameter(EParameterName.FOOTER_LIBRARY.getName());
  if (footerParameter != null) {
    Object value=footerParameter.getValue();
    if (value != null) {
      String footerLibraries=(String)value;
      if (footerLibraries.indexOf(File.separatorChar) > 0 && footerLibraries.length() > footerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=footerLibraries.substring(footerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter elementParameter=process.getElementParameter(EParameterName.DRIVER_JAR.getName());
  if (elementParameter != null && elementParameter.getFieldType() == EParameterFieldType.TABLE) {
    getModulsInTable(process,elementParameter,neededLibraries);
  }
  if (process instanceof IProcess2) {
    Item item=((IProcess2)process).getProperty().getItem();
    if (item instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededForRoutines=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)item);
      if (modulesNeededForRoutines != null) {
        for (        ModuleNeeded moduleNeeded : modulesNeededForRoutines) {
          neededLibraries.add(moduleNeeded.getModuleName());
        }
      }
    }
  }
  List<? extends INode> nodeList=process.getGeneratingNodes();
  for (  INode node : nodeList) {
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    for (    ModuleNeeded needed : moduleList) {
      if (needed.isRequired(node.getElementParameters())) {
        if (!exportOSGI) {
          neededLibraries.add(needed.getModuleName());
        }
 else         if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
          neededLibraries.add(needed.getModuleName());
        }
 else {
          bundleDefinedLibraries.add(needed.getModuleName());
        }
      }
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType() == null) {
        continue;
      }
      if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
        if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
          neededLibraries.add(getModuleValue(process,(String)curParam.getValue()));
        }
      }
 else       if (curParam.getFieldType() == EParameterFieldType.TABLE) {
        getModulsInTable(process,curParam,neededLibraries);
      }
      if (curParam.isShow(node.getElementParameters())) {
        findMoreLibraries(process,neededLibraries,curParam,true);
      }
 else {
        findMoreLibraries(process,neededLibraries,curParam,false);
      }
    }
    if (withChildrens) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        IElementParameter processVersionParam=node.getElementParameter(EParameterName.PROCESS_TYPE_VERSION.getName());
        ProcessItem processItem=null;
        if (processVersionParam != null) {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue(),(String)processVersionParam.getValue());
        }
 else {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue());
        }
        String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
        if (processItem != null && !searchItems.contains(processItem)) {
          searchItems.add(processItem);
          JobInfo subJobInfo=new JobInfo(processItem,context);
          IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
          IProcess child=service.getProcessFromItem(subJobInfo.getProcessItem());
          JavaProcessUtil.getNeededLibraries(child,true,searchItems,neededLibraries,bundleDefinedLibraries,isExportOSGI);
        }
      }
    }
  }
}",0.9365064255116612
124105,"public ArrayList<InputTable> prepareInputTables(List<IOConnection> inputConnections,ExternalMapperData externalData){
  ArrayList<InputTable> inputDataMapTables=new ArrayList<InputTable>();
  ArrayList<IOConnection> remainingConnections=new ArrayList<IOConnection>(inputConnections);
  if (externalData == null || externalData.getInputTables().size() == 0) {
    for (    IOConnection connection : inputConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
    }
  }
 else {
    Map<String,IOConnection> nameToInputConnection=new HashMap<String,IOConnection>();
    for (    IOConnection connection : inputConnections) {
      nameToInputConnection.put(connection.getName(),connection);
    }
    for (    ExternalMapperTable persistentTable : externalData.getInputTables()) {
      IOConnection connection=nameToInputConnection.get(persistentTable.getName());
      if (connection != null) {
        InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
        inputTable.initFromExternalData(persistentTable);
        inputDataMapTables.add(inputTable);
        remainingConnections.remove(connection);
        if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
          inputTable.setActivateCondensedTool(false);
        }
      }
    }
    for (    IOConnection connection : remainingConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
      if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
        inputTable.setActivateCondensedTool(false);
      }
    }
  }
  Collections.sort(inputDataMapTables,new Comparator<InputTable>(){
    public int compare(    InputTable o1,    InputTable o2){
      if (o1.isMainConnection()) {
        return -1;
      }
 else       if (o2.isMainConnection()) {
        return 1;
      }
      return 0;
    }
  }
);
  return inputDataMapTables;
}","public ArrayList<InputTable> prepareInputTables(List<IOConnection> inputConnections,ExternalMapperData externalData){
  ArrayList<InputTable> inputDataMapTables=new ArrayList<InputTable>();
  ArrayList<IOConnection> remainingConnections=new ArrayList<IOConnection>(inputConnections);
  if (externalData == null || externalData.getInputTables().size() == 0) {
    for (    IOConnection connection : inputConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
    }
  }
 else {
    Map<String,IOConnection> nameToInputConnection=new HashMap<String,IOConnection>();
    for (    IOConnection connection : inputConnections) {
      nameToInputConnection.put(connection.getName(),connection);
    }
    for (    ExternalMapperTable persistentTable : externalData.getInputTables()) {
      IOConnection connection=nameToInputConnection.get(persistentTable.getName());
      if (connection != null) {
        InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
        inputTable.initFromExternalData(persistentTable);
        inputDataMapTables.add(inputTable);
        remainingConnections.remove(connection);
        if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
          inputTable.setActivateCondensedTool(false);
          inputTable.setPersistent(false);
        }
      }
    }
    for (    IOConnection connection : remainingConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
      if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
        inputTable.setActivateCondensedTool(false);
        inputTable.setPersistent(false);
      }
    }
  }
  Collections.sort(inputDataMapTables,new Comparator<InputTable>(){
    public int compare(    InputTable o1,    InputTable o2){
      if (o1.isMainConnection()) {
        return -1;
      }
 else       if (o2.isMainConnection()) {
        return 1;
      }
      return 0;
    }
  }
);
  return inputDataMapTables;
}",0.98079561042524
124106,"private void needContextModeParameters(){
  legalParameters.clear();
  for (  IElementParameter parameter : node.getElementParameters()) {
    if (parameter.isDynamicSettings() && parameter.isShow(node.getElementParameters()) && parameter.getCategory() != EComponentCategory.TECHNICAL && (parameter.getFieldType() == EParameterFieldType.CHECK || parameter.getFieldType() == EParameterFieldType.CLOSED_LIST) || parameter.getFieldType() == EParameterFieldType.MODULE_LIST || parameter.getFieldType() == EParameterFieldType.RADIO || parameter.getFieldType() == EParameterFieldType.COMPONENT_LIST) {
      legalParameters.add(parameter);
    }
  }
}","private void needContextModeParameters(){
  legalParameters.clear();
  for (  IElementParameter parameter : node.getElementParameters()) {
    if (parameter.isDynamicSettings() && parameter.isShow(node.getElementParameters()) && parameter.getCategory() != EComponentCategory.TECHNICAL && (parameter.getFieldType() == EParameterFieldType.CHECK || parameter.getFieldType() == EParameterFieldType.CLOSED_LIST || parameter.getFieldType() == EParameterFieldType.MODULE_LIST || parameter.getFieldType() == EParameterFieldType.RADIO || parameter.getFieldType() == EParameterFieldType.COMPONENT_LIST)) {
      legalParameters.add(parameter);
    }
  }
}",0.9984496124031008
124107,"public ArrayList<InputTable> prepareInputTables(List<IOConnection> inputConnections,ExternalMapperData externalData){
  ArrayList<InputTable> inputDataMapTables=new ArrayList<InputTable>();
  ArrayList<IOConnection> remainingConnections=new ArrayList<IOConnection>(inputConnections);
  if (externalData == null || externalData.getInputTables().size() == 0) {
    for (    IOConnection connection : inputConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
    }
  }
 else {
    Map<String,IOConnection> nameToInputConnection=new HashMap<String,IOConnection>();
    for (    IOConnection connection : inputConnections) {
      nameToInputConnection.put(connection.getName(),connection);
    }
    for (    ExternalMapperTable persistentTable : externalData.getInputTables()) {
      IOConnection connection=nameToInputConnection.get(persistentTable.getName());
      if (connection != null) {
        InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
        inputTable.initFromExternalData(persistentTable);
        inputDataMapTables.add(inputTable);
        remainingConnections.remove(connection);
        if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
          inputTable.setActivateCondensedTool(false);
        }
      }
    }
    for (    IOConnection connection : remainingConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
      if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
        inputTable.setActivateCondensedTool(false);
      }
    }
  }
  Collections.sort(inputDataMapTables,new Comparator<InputTable>(){
    public int compare(    InputTable o1,    InputTable o2){
      if (o1.isMainConnection()) {
        return -1;
      }
 else       if (o2.isMainConnection()) {
        return 1;
      }
      return 0;
    }
  }
);
  return inputDataMapTables;
}","public ArrayList<InputTable> prepareInputTables(List<IOConnection> inputConnections,ExternalMapperData externalData){
  ArrayList<InputTable> inputDataMapTables=new ArrayList<InputTable>();
  ArrayList<IOConnection> remainingConnections=new ArrayList<IOConnection>(inputConnections);
  if (externalData == null || externalData.getInputTables().size() == 0) {
    for (    IOConnection connection : inputConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
    }
  }
 else {
    Map<String,IOConnection> nameToInputConnection=new HashMap<String,IOConnection>();
    for (    IOConnection connection : inputConnections) {
      nameToInputConnection.put(connection.getName(),connection);
    }
    for (    ExternalMapperTable persistentTable : externalData.getInputTables()) {
      IOConnection connection=nameToInputConnection.get(persistentTable.getName());
      if (connection != null) {
        InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
        inputTable.initFromExternalData(persistentTable);
        inputDataMapTables.add(inputTable);
        remainingConnections.remove(connection);
        if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
          inputTable.setActivateCondensedTool(false);
          inputTable.setPersistent(false);
        }
      }
    }
    for (    IOConnection connection : remainingConnections) {
      InputTable inputTable=new InputTable(this.mapperManager,connection,connection.getName());
      inputTable.initFromExternalData(null);
      inputDataMapTables.add(inputTable);
      if (EConnectionType.FLOW_MAIN == connection.getConnectionType()) {
        inputTable.setActivateCondensedTool(false);
        inputTable.setPersistent(false);
      }
    }
  }
  Collections.sort(inputDataMapTables,new Comparator<InputTable>(){
    public int compare(    InputTable o1,    InputTable o2){
      if (o1.isMainConnection()) {
        return -1;
      }
 else       if (o2.isMainConnection()) {
        return 1;
      }
      return 0;
    }
  }
);
  return inputDataMapTables;
}",0.98079561042524
124108,"public HttpEntity sendToServer(List<NameValuePair> qparams,String strAPIUrl) throws paloexception {
  try {
    URI uri=URIUtils.createURI(""String_Node_Str"",strServer,Integer.valueOf(strPort),strAPIUrl,URLEncodedUtils.format(qparams,""String_Node_Str""),null);
    HttpGet req=new HttpGet(uri);
    System.out.println(req.getURI());
    HttpResponse rsp=paloHttpClient.execute(paloTargetHost,req);
    HttpEntity entity=rsp.getEntity();
    if (rsp.getStatusLine().getStatusCode() != 200) {
      CsvReader csv=new CsvReader(entity.getContent(),Charset.forName(""String_Node_Str""));
      csv.setDelimiter(';');
      csv.setTextQualifier('""');
      csv.readRecord();
      paloexception plX=new paloexception(csv.get(0),csv.get(1),csv.get(2));
      csv.close();
      entity.consumeContent();
      throw (plX);
    }
 else {
      return entity;
    }
  }
 catch (  Exception e) {
    throw new paloexception(e.getMessage());
  }
}","public HttpEntity sendToServer(List<NameValuePair> qparams,String strAPIUrl) throws paloexception {
  try {
    URI uri=URIUtils.createURI(""String_Node_Str"",strServer,Integer.valueOf(strPort),strAPIUrl,URLEncodedUtils.format(qparams,""String_Node_Str""),null);
    HttpGet req=new HttpGet(uri);
    HttpResponse rsp=paloHttpClient.execute(paloTargetHost,req);
    HttpEntity entity=rsp.getEntity();
    if (rsp.getStatusLine().getStatusCode() != 200) {
      CsvReader csv=new CsvReader(entity.getContent(),Charset.forName(""String_Node_Str""));
      csv.setDelimiter(';');
      csv.setTextQualifier('""');
      csv.readRecord();
      paloexception plX=new paloexception(csv.get(0),csv.get(1),csv.get(2));
      csv.close();
      entity.consumeContent();
      throw (plX);
    }
 else {
      return entity;
    }
  }
 catch (  Exception e) {
    throw new paloexception(e.getMessage());
  }
}",0.9791894852135816
124109,"public void getAllExistPaloDimensionElements(paloelements pleles) throws paloexception {
  tPaloDimensionElements tPaloDimele=null;
  int elementPosition=0;
  String elementName=""String_Node_Str"";
  int elementParentPosition=0;
  int elementLevel=0;
  for (  paloelement plElm : pleles.getElements()) {
    elementPosition=(int)plElm.getElementPosition();
    elementName=plElm.getName();
    elementParentPosition=(int)plElm.getFatherPaloelement().getElementPosition();
    if (elementParentPosition == 0) {
      elementParentPosition=-1;
    }
    elementLevel=getElementLevel(elementName,elementPosition);
    tPaloDimele=new tPaloDimensionElements(elementPosition,elementName,elementParentPosition,elementLevel);
    lstPaloDimensionElements.add(tPaloDimele);
  }
}","public void getAllExistPaloDimensionElements(paloelements pleles) throws paloexception {
  tPaloDimensionElements tPaloDimele=null;
  int elementPosition=0;
  String elementName=""String_Node_Str"";
  int elementParentPosition=0;
  int elementLevel=0;
  for (  paloelement plElm : pleles.getElements()) {
    elementPosition=(int)plElm.getElementPosition();
    elementName=plElm.getName();
    elementParentPosition=(int)plElm.getFatherPaloelement().getElementPosition();
    elementLevel=getElementLevel(elementName,elementPosition);
    tPaloDimele=new tPaloDimensionElements(elementPosition,elementName,elementParentPosition,elementLevel);
    lstPaloDimensionElements.add(tPaloDimele);
  }
}",0.9480874316939892
124110,"public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (name.getDBType() != null && pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        if (isOracleAmazonStringContained(name.getDBType(),emfComponent.getName())) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}",0.9578555934304308
124111,"@Override public boolean except(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (component != null && (component.getName().equals(""String_Node_Str"") || component.getName().equals(""String_Node_Str""))) {
    return true;
  }
  return false;
}","@Override public boolean except(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  if (component != null && component.getName().startsWith(""String_Node_Str"")) {
    return true;
  }
  return false;
}",0.8822495606326889
124112,"public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (name.getDBType() != null && pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}",0.9957691145361136
124113,"private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          prepareEmfTree(list,parentNode,null,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}","private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String prefix=service.getXPathPrefixValue(selected);
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          TreeNode pNode=parentNode;
          if (MdmConceptType.RECEIVE.equals(selected.getConceptType())) {
            if (prefix != null) {
              String[] preValues=prefix.split(XmlMapUtil.XPATH_SEPARATOR);
              for (              String value : preValues) {
                if (!""String_Node_Str"".equals(value)) {
                  TreeNode createTreeNode=createModel();
                  createTreeNode.setName(value);
                  createTreeNode.setNodeType(NodeType.ELEMENT);
                  createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
                  createTreeNode.setXpath(XmlMapUtil.getXPath(pNode.getXpath(),createTreeNode.getName(),createTreeNode.getNodeType()));
                  pNode.getChildren().add(createTreeNode);
                  pNode=createTreeNode;
                }
              }
              loopExpression=prefix + loopExpression;
            }
          }
          prepareEmfTree(list,pNode,prefix,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}",0.7282549972987574
124114,"/** 
 * DOC YeXiaowei Comment method ""addCodeGenerateButton"".
 * @param parent
 */
private void addCodeGenerateButton(final Composite parent){
  codeGenereateButton=new Button(parent,SWT.CENTER);
  codeGenereateButton.setText(Messages.getString(""String_Node_Str""));
  codeGenereateButton.setToolTipText(Messages.getString(""String_Node_Str""));
  GridData layoutData=new GridData();
  layoutData.horizontalAlignment=SWT.CENTER;
  codeGenereateButton.setLayoutData(layoutData);
  codeGenereateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (elem instanceof Node) {
        ISampleCodeFactory factory=JavaSampleCodeFactory.getInstance();
        executeCommand(factory.generateCodeForParameters((Node)elem));
        refresh(curParameter,false);
      }
    }
  }
);
}","/** 
 * DOC YeXiaowei Comment method ""addCodeGenerateButton"".
 * @param parent
 */
private void addCodeGenerateButton(final Composite parent){
  codeGenereateButton=new Button(parent,SWT.CENTER);
  codeGenereateButton.setText(Messages.getString(""String_Node_Str""));
  codeGenereateButton.setToolTipText(Messages.getString(""String_Node_Str""));
  codeGenereateButton.setEnabled(!elem.isReadOnly());
  GridData layoutData=new GridData();
  layoutData.horizontalAlignment=SWT.CENTER;
  codeGenereateButton.setLayoutData(layoutData);
  codeGenereateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (elem instanceof Node) {
        ISampleCodeFactory factory=JavaSampleCodeFactory.getInstance();
        executeCommand(factory.generateCodeForParameters((Node)elem));
        refresh(curParameter,false);
      }
    }
  }
);
}",0.9689298043728424
124115,"private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    ERepositoryObjectType type=object.getRepositoryNode().getContentType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else       if (isDocumentStatus()) {
        if (ERepositoryObjectType.DOCUMENTATION.equals(type) || ERepositoryObjectType.BUSINESS_PROCESS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}","private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    ERepositoryObjectType type=object.getRepositoryNode().getContentType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else       if (isDocumentStatus()) {
        if (ERepositoryObjectType.DOCUMENTATION.equals(type) || ERepositoryObjectType.BUSINESS_PROCESS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS) || type.equals(ERepositoryObjectType.JOB_DOC)|| type.equals(ERepositoryObjectType.JOBLET_DOC)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}",0.9915284787310744
124116,"/** 
 * dev Comment method ""restoreConnection"".
 * @param connection
 * @param tablesFromEMF
 */
@SuppressWarnings(""String_Node_Str"") private void restoreConnection(DatabaseConnection connection,List<MetadataTable> tablesFromEMF){
  tablesFromEMF=sortTableColumn(tablesFromEMF);
  tList=new ArrayList<MetadataTable>();
  tList.addAll(ConnectionHelper.getTables(connection));
  Catalog c=(Catalog)ConnectionHelper.getPackage(connection.getSID(),connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(connection.getSID(),connection,Schema.class);
  Schema schema=(Schema)ConnectionHelper.getPackage(connection.getUiSchema(),connection,Schema.class);
  if (c != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,c);
  }
 else   if (s != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,s);
  }
 else   if (schema != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,schema);
  }
}","/** 
 * dev Comment method ""restoreConnection"".
 * @param connection
 * @param tablesFromEMF
 */
@SuppressWarnings(""String_Node_Str"") private void restoreConnection(DatabaseConnection connection,List<MetadataTable> tablesFromEMF){
  tablesFromEMF=sortTableColumn(tablesFromEMF);
  if (tList == null) {
    tList=new ArrayList<MetadataTable>();
    tList.addAll(ConnectionHelper.getTables(connection));
  }
  Catalog c=(Catalog)ConnectionHelper.getPackage(connection.getSID(),connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(connection.getSID(),connection,Schema.class);
  Schema schema=(Schema)ConnectionHelper.getPackage(connection.getUiSchema(),connection,Schema.class);
  if (c != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,c);
  }
 else   if (s != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,s);
  }
 else   if (schema != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,schema);
  }
}",0.9833958221746116
124117,"@SuppressWarnings(""String_Node_Str"") public INode buildNodeFromNode(final INode graphicalNode,final IProcess process){
  if (buildGraphicalMap.containsKey(graphicalNode)) {
    return (INode)buildGraphicalMap.get(graphicalNode);
  }
  Node newGraphicalNode=new Node(graphicalNode.getComponent(),(IProcess2)process);
  newGraphicalNode.setMetadataList(graphicalNode.getMetadataList());
  IExternalData externalData=graphicalNode.getExternalData();
  IExternalNode externalNode=graphicalNode.getExternalNode();
  if (externalNode != null) {
    AbstractExternalData externalEmfData=((IExternalNode)externalNode).getExternalEmfData();
    ((IExternalNode)newGraphicalNode.getExternalNode()).setExternalEmfData(externalEmfData);
  }
  if (externalData != null) {
    newGraphicalNode.setExternalData(externalData);
  }
  copyElementParametersValue(graphicalNode,newGraphicalNode);
  newGraphicalNode.setDummy(graphicalNode.isDummy());
  ValidationRulesUtil.createRejectConnector(newGraphicalNode);
  ValidationRulesUtil.updateRejectMetatable(newGraphicalNode,graphicalNode);
  NodeContainer nc=null;
  if (newGraphicalNode.isJoblet()) {
    nc=new JobletContainer(newGraphicalNode);
  }
 else {
    nc=new NodeContainer(newGraphicalNode);
  }
  ((Process)process).addNodeContainer(nc);
  buildGraphicalMap.put(graphicalNode,newGraphicalNode);
  IConnection dataConnec;
  for (  IConnection connection : (List<IConnection>)graphicalNode.getOutgoingConnections()) {
    if (!connection.isActivate()) {
      continue;
    }
    INode connTarget=connection.getTarget();
    if (connTarget.getJobletNode() != null) {
      connTarget=connTarget.getJobletNode();
    }
    INode target=buildNodeFromNode(connTarget,process);
    dataConnec=new Connection(newGraphicalNode,target,connection.getLineStyle(),connection.getConnectorName(),connection.getMetaName(),connection.getName(),connection.getUniqueName(),connection.isMonitorConnection());
    copyElementParametersValue(connection,dataConnec);
    dataConnec.setTraceConnection(connection.isTraceConnection());
  }
  newGraphicalNode.setActivate(graphicalNode.isActivate());
  newGraphicalNode.setStart(graphicalNode.isStart());
  return newGraphicalNode;
}","@SuppressWarnings(""String_Node_Str"") public INode buildNodeFromNode(final INode graphicalNode,final IProcess process){
  if (buildGraphicalMap.containsKey(graphicalNode)) {
    return (INode)buildGraphicalMap.get(graphicalNode);
  }
  Node newGraphicalNode=new Node(graphicalNode.getComponent(),(IProcess2)process);
  newGraphicalNode.setMetadataList(graphicalNode.getMetadataList());
  IExternalNode externalNode=graphicalNode.getExternalNode();
  if (externalNode != null) {
    AbstractExternalData externalEmfData=((IExternalNode)externalNode).getExternalEmfData();
    ((IExternalNode)newGraphicalNode.getExternalNode()).setExternalEmfData(externalEmfData);
  }
  if (graphicalNode.getExternalData() != null) {
    newGraphicalNode.setExternalData(graphicalNode.getExternalData());
  }
  copyElementParametersValue(graphicalNode,newGraphicalNode);
  newGraphicalNode.setDummy(graphicalNode.isDummy());
  ValidationRulesUtil.createRejectConnector(newGraphicalNode);
  ValidationRulesUtil.updateRejectMetatable(newGraphicalNode,graphicalNode);
  NodeContainer nc=null;
  if (newGraphicalNode.isJoblet()) {
    nc=new JobletContainer(newGraphicalNode);
  }
 else {
    nc=new NodeContainer(newGraphicalNode);
  }
  ((Process)process).addNodeContainer(nc);
  buildGraphicalMap.put(graphicalNode,newGraphicalNode);
  IConnection dataConnec;
  for (  IConnection connection : (List<IConnection>)graphicalNode.getOutgoingConnections()) {
    if (!connection.isActivate()) {
      continue;
    }
    INode connTarget=connection.getTarget();
    if (connTarget.getJobletNode() != null) {
      connTarget=connTarget.getJobletNode();
    }
    INode target=buildNodeFromNode(connTarget,process);
    dataConnec=new Connection(newGraphicalNode,target,connection.getLineStyle(),connection.getConnectorName(),connection.getMetaName(),connection.getName(),connection.getUniqueName(),connection.isMonitorConnection());
    copyElementParametersValue(connection,dataConnec);
    dataConnec.setTraceConnection(connection.isTraceConnection());
  }
  newGraphicalNode.setActivate(graphicalNode.isActivate());
  newGraphicalNode.setStart(graphicalNode.isStart());
  return newGraphicalNode;
}",0.9762557077625572
124118,"public AbstractExternalData getExternalEmfData(){
  final MapperData emfMapperData=MapperFactory.eINSTANCE.createMapperData();
  initMapperMain(false);
  mapperMain.createModelFromExternalData(getIncomingConnections(),getOutgoingConnections(),externalData,getMetadataList(),false);
  ExternalMapperData data=mapperMain.buildExternalData();
  if (mapperMain != null && data != null) {
    if (externalData != null) {
      MapperHelper.saveDataToEmf(data,emfMapperData);
    }
  }
  return emfMapperData;
}","public AbstractExternalData getExternalEmfData(){
  final MapperData emfMapperData=MapperFactory.eINSTANCE.createMapperData();
  initMapperMain(false);
  mapperMain.createModelFromExternalData(getIncomingConnections(),getOutgoingConnections(),externalData,getMetadataList(),false);
  ExternalMapperData data=mapperMain.buildExternalData();
  if (mapperMain != null && data != null) {
    if (externalData != null) {
      this.externalData=data;
      MapperHelper.saveDataToEmf(data,emfMapperData);
    }
  }
  return emfMapperData;
}",0.971153846153846
124119,"/** 
 * Hook method for restoring widget values to the values that they held last time this wizard was used to completion.
 */
protected void restoreWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
  }
  if (process.length > 0) {
    try {
      process[0].setProcess((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(process[0].getItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=manager.getJobContextsComboValue((ProcessItem)process[0].getItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","/** 
 * Hook method for restoring widget values to the values that they held last time this wizard was used to completion.
 */
protected void restoreWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
  }
  if (process.length > 0) {
    try {
      process[0].setProcess((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(process[0].getItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    if (manager == null) {
      manager=new JobJavaScriptsManager(getExportChoiceMap(),contextCombo.getText(),""String_Node_Str"",IProcessor.NO_STATISTICS,IProcessor.NO_TRACES);
    }
    List<String> contextNames=manager.getJobContextsComboValue((ProcessItem)process[0].getItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9009204114780726
124120,"private Map<ExportChoice,Object> getExportChoiceMap(){
  Map<ExportChoice,Object> exportChoiceMap=new EnumMap<ExportChoice,Object>(ExportChoice.class);
  exportChoiceMap.put(ExportChoice.needLauncher,true);
  exportChoiceMap.put(ExportChoice.needSystemRoutine,true);
  exportChoiceMap.put(ExportChoice.needUserRoutine,true);
  exportChoiceMap.put(ExportChoice.needTalendLibraries,true);
  exportChoiceMap.put(ExportChoice.needJobItem,true);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,false);
  exportChoiceMap.put(ExportChoice.needContext,contextButton.getSelection());
  return exportChoiceMap;
}","protected Map<ExportChoice,Object> getExportChoiceMap(){
  Map<ExportChoice,Object> exportChoiceMap=new EnumMap<ExportChoice,Object>(ExportChoice.class);
  exportChoiceMap.put(ExportChoice.needLauncher,true);
  exportChoiceMap.put(ExportChoice.needSystemRoutine,true);
  exportChoiceMap.put(ExportChoice.needUserRoutine,true);
  exportChoiceMap.put(ExportChoice.needTalendLibraries,true);
  exportChoiceMap.put(ExportChoice.needJobItem,true);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,false);
  exportChoiceMap.put(ExportChoice.needContext,contextButton.getSelection());
  return exportChoiceMap;
}",0.9909228441754916
124121,"public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}","public static List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  EDatabaseComponentName name=EDatabaseComponentName.getCorrespondingComponentName(item,type);
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (name == null) {
    return neededComponents;
  }
  String productNameWanted=filterProductNameWanted(name,item);
  boolean hl7Related=false;
  boolean hl7Output=false;
  if (item instanceof HL7ConnectionItem) {
    hl7Related=true;
    EList list=((HL7Connection)((HL7ConnectionItem)item).getConnection()).getRoot();
    if (list != null && list.size() > 0) {
      hl7Output=true;
    }
  }
  MdmConceptType mdmType=null;
  if (item instanceof MDMConnectionItem) {
    MDMConnectionItem mdmItem=(MDMConnectionItem)item;
    if (seletetedNode != null && seletetedNode.getObject() instanceof MetadataTableRepositoryObject) {
      MetadataTableRepositoryObject object=(MetadataTableRepositoryObject)seletetedNode.getObject();
      if (mdmItem.getConnection() instanceof MDMConnection) {
        MDMConnection connection=(MDMConnection)mdmItem.getConnection();
        for (        Object obj : connection.getSchemas()) {
          if (obj instanceof Concept && object.getLabel().equals(((Concept)obj).getLabel())) {
            mdmType=((Concept)obj).getConceptType();
          }
        }
      }
    }
  }
  Set<IComponent> components=ComponentsFactoryProvider.getInstance().getComponents();
  EmfComponent emfComponent=null;
  for (  IComponent component : components) {
    if (component instanceof EmfComponent) {
      emfComponent=(EmfComponent)component;
      String componentProductname=emfComponent.getRepositoryType();
      boolean value=true;
      if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
        if (emfComponent.getName().toUpperCase().endsWith(MAP)) {
          value=false;
        }
      }
      if (hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
 else       if (hl7Related && !hl7Output && !component.getName().equals(""String_Node_Str"")) {
        value=false;
      }
      boolean flag=filterComponent(component,name,type);
      if (((componentProductname != null && productNameWanted.endsWith(componentProductname)) && value) || flag) {
        Pattern pattern=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(name.getDBType()).matches() && (emfComponent.getName().equals(""String_Node_Str"") || emfComponent.getName().equals(""String_Node_Str""))) {
          continue;
        }
        if (item instanceof MDMConnectionItem) {
          if (MdmConceptType.INPUT.equals(mdmType) && emfComponent.getName().endsWith(INPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.OUTPUT.equals(mdmType) && emfComponent.getName().endsWith(OUTPUT)) {
            neededComponents.add(emfComponent);
          }
 else           if (MdmConceptType.RECEIVE.equals(mdmType) && emfComponent.getName().endsWith(RECEIVE)) {
            neededComponents.add(emfComponent);
          }
        }
 else {
          neededComponents.add(emfComponent);
        }
      }
    }
  }
  return sortFilteredComponnents(item,seletetedNode,type,neededComponents);
}",0.9556259904912836
124122,"private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          prepareEmfTree(list,parentNode,null,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}","private void prepareEmfTreeFromMdm(MDMConnection connection,String selectedConcept){
  if (connection == null || selectedConcept == null) {
    return;
  }
  EList<Concept> schemas=connection.getSchemas();
  Concept selected=null;
  for (int i=0; i < schemas.size(); i++) {
    Concept concept=schemas.get(i);
    if (selectedConcept.equals(concept.getLabel())) {
      selected=concept;
      break;
    }
  }
  if (selected != null) {
    if (!MdmConceptType.OUTPUT.equals(selected.getConceptType())) {
      IMDMProviderService service=(IMDMProviderService)GlobalServiceRegister.getDefault().getService(IMDMProviderService.class);
      if (service != null) {
        boolean initConcepts=service.initConcepts(connection);
        if (initConcepts) {
          String prefix=service.getXPathPrefixValue(selected);
          String loopExpression=selected.getLoopExpression();
          EList<ConceptTarget> conceptTargets=selected.getConceptTargets();
          if (conceptTargets == null || loopExpression == null) {
            return;
          }
          this.schemaTargets=conceptTargets;
          List<FOXTreeNode> list=TreeUtil.getFoxTreeNodesForXmlMap(getTempTemplateXSDFile().getAbsolutePath(),loopExpression);
          TreeNode pNode=parentNode;
          if (MdmConceptType.RECEIVE.equals(selected.getConceptType())) {
            if (prefix != null) {
              String[] preValues=prefix.split(XmlMapUtil.XPATH_SEPARATOR);
              for (              String value : preValues) {
                if (!""String_Node_Str"".equals(value)) {
                  TreeNode createTreeNode=createModel();
                  createTreeNode.setName(value);
                  createTreeNode.setNodeType(NodeType.ELEMENT);
                  createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
                  createTreeNode.setXpath(XmlMapUtil.getXPath(pNode.getXpath(),createTreeNode.getName(),createTreeNode.getNodeType()));
                  pNode.getChildren().add(createTreeNode);
                  pNode=createTreeNode;
                }
              }
              loopExpression=prefix + loopExpression;
            }
          }
          prepareEmfTree(list,pNode,prefix,loopExpression);
        }
      }
    }
 else {
      prepareModelFromOutput(selected.getRoot(),selected.getLoop(),selected.getGroup());
    }
  }
}",0.7282549972987574
124123,"private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    ERepositoryObjectType type=object.getRepositoryNode().getContentType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else       if (isDocumentStatus()) {
        if (ERepositoryObjectType.DOCUMENTATION.equals(type) || ERepositoryObjectType.BUSINESS_PROCESS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}","private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    ERepositoryObjectType type=object.getRepositoryNode().getContentType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else       if (isDocumentStatus()) {
        if (ERepositoryObjectType.DOCUMENTATION.equals(type) || ERepositoryObjectType.BUSINESS_PROCESS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS) || type.equals(ERepositoryObjectType.JOB_DOC)|| type.equals(ERepositoryObjectType.JOBLET_DOC)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}",0.9915284787310744
124124,"/** 
 * Hook method for restoring widget values to the values that they held last time this wizard was used to completion.
 */
protected void restoreWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
  }
  if (process.length > 0) {
    try {
      process[0].setProcess((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(process[0].getItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    List<String> contextNames=manager.getJobContextsComboValue((ProcessItem)process[0].getItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}","/** 
 * Hook method for restoring widget values to the values that they held last time this wizard was used to completion.
 */
protected void restoreWidgetValues(){
  IDialogSettings settings=getDialogSettings();
  if (settings != null) {
    contextButton.setSelection(settings.getBoolean(STORE_CONTEXT_ID));
  }
  if (process.length > 0) {
    try {
      process[0].setProcess((ProcessItem)ProxyRepositoryFactory.getInstance().getUptodateProperty(process[0].getItem().getProperty()).getItem());
    }
 catch (    PersistenceException e) {
      e.printStackTrace();
    }
    if (manager == null) {
      manager=new JobJavaScriptsManager(getExportChoiceMap(),contextCombo.getText(),""String_Node_Str"",IProcessor.NO_STATISTICS,IProcessor.NO_TRACES);
    }
    List<String> contextNames=manager.getJobContextsComboValue((ProcessItem)process[0].getItem());
    contextCombo.setItems(contextNames.toArray(new String[contextNames.size()]));
    if (contextNames.size() > 0) {
      contextCombo.select(0);
    }
  }
}",0.9009204114780726
124125,"private Map<ExportChoice,Object> getExportChoiceMap(){
  Map<ExportChoice,Object> exportChoiceMap=new EnumMap<ExportChoice,Object>(ExportChoice.class);
  exportChoiceMap.put(ExportChoice.needLauncher,true);
  exportChoiceMap.put(ExportChoice.needSystemRoutine,true);
  exportChoiceMap.put(ExportChoice.needUserRoutine,true);
  exportChoiceMap.put(ExportChoice.needTalendLibraries,true);
  exportChoiceMap.put(ExportChoice.needJobItem,true);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,false);
  exportChoiceMap.put(ExportChoice.needContext,contextButton.getSelection());
  return exportChoiceMap;
}","protected Map<ExportChoice,Object> getExportChoiceMap(){
  Map<ExportChoice,Object> exportChoiceMap=new EnumMap<ExportChoice,Object>(ExportChoice.class);
  exportChoiceMap.put(ExportChoice.needLauncher,true);
  exportChoiceMap.put(ExportChoice.needSystemRoutine,true);
  exportChoiceMap.put(ExportChoice.needUserRoutine,true);
  exportChoiceMap.put(ExportChoice.needTalendLibraries,true);
  exportChoiceMap.put(ExportChoice.needJobItem,true);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,false);
  exportChoiceMap.put(ExportChoice.needContext,contextButton.getSelection());
  return exportChoiceMap;
}",0.9909228441754916
124126,"@SuppressWarnings(""String_Node_Str"") public INode buildNodeFromNode(final INode graphicalNode,final IProcess process){
  if (buildGraphicalMap.containsKey(graphicalNode)) {
    return (INode)buildGraphicalMap.get(graphicalNode);
  }
  Node newGraphicalNode=new Node(graphicalNode.getComponent(),(IProcess2)process);
  newGraphicalNode.setMetadataList(graphicalNode.getMetadataList());
  IExternalData externalData=graphicalNode.getExternalData();
  IExternalNode externalNode=graphicalNode.getExternalNode();
  if (externalNode != null) {
    AbstractExternalData externalEmfData=((IExternalNode)externalNode).getExternalEmfData();
    ((IExternalNode)newGraphicalNode.getExternalNode()).setExternalEmfData(externalEmfData);
  }
  if (externalData != null) {
    newGraphicalNode.setExternalData(externalData);
  }
  copyElementParametersValue(graphicalNode,newGraphicalNode);
  newGraphicalNode.setDummy(graphicalNode.isDummy());
  ValidationRulesUtil.createRejectConnector(newGraphicalNode);
  ValidationRulesUtil.updateRejectMetatable(newGraphicalNode,graphicalNode);
  NodeContainer nc=null;
  if (newGraphicalNode.isJoblet()) {
    nc=new JobletContainer(newGraphicalNode);
  }
 else {
    nc=new NodeContainer(newGraphicalNode);
  }
  ((Process)process).addNodeContainer(nc);
  buildGraphicalMap.put(graphicalNode,newGraphicalNode);
  IConnection dataConnec;
  for (  IConnection connection : (List<IConnection>)graphicalNode.getOutgoingConnections()) {
    if (!connection.isActivate()) {
      continue;
    }
    INode connTarget=connection.getTarget();
    if (connTarget.getJobletNode() != null) {
      connTarget=connTarget.getJobletNode();
    }
    INode target=buildNodeFromNode(connTarget,process);
    dataConnec=new Connection(newGraphicalNode,target,connection.getLineStyle(),connection.getConnectorName(),connection.getMetaName(),connection.getName(),connection.getUniqueName(),connection.isMonitorConnection());
    copyElementParametersValue(connection,dataConnec);
    dataConnec.setTraceConnection(connection.isTraceConnection());
  }
  newGraphicalNode.setActivate(graphicalNode.isActivate());
  newGraphicalNode.setStart(graphicalNode.isStart());
  return newGraphicalNode;
}","@SuppressWarnings(""String_Node_Str"") public INode buildNodeFromNode(final INode graphicalNode,final IProcess process){
  if (buildGraphicalMap.containsKey(graphicalNode)) {
    return (INode)buildGraphicalMap.get(graphicalNode);
  }
  Node newGraphicalNode=new Node(graphicalNode.getComponent(),(IProcess2)process);
  newGraphicalNode.setMetadataList(graphicalNode.getMetadataList());
  IExternalNode externalNode=graphicalNode.getExternalNode();
  if (externalNode != null) {
    AbstractExternalData externalEmfData=((IExternalNode)externalNode).getExternalEmfData();
    ((IExternalNode)newGraphicalNode.getExternalNode()).setExternalEmfData(externalEmfData);
  }
  if (graphicalNode.getExternalData() != null) {
    newGraphicalNode.setExternalData(graphicalNode.getExternalData());
  }
  copyElementParametersValue(graphicalNode,newGraphicalNode);
  newGraphicalNode.setDummy(graphicalNode.isDummy());
  ValidationRulesUtil.createRejectConnector(newGraphicalNode);
  ValidationRulesUtil.updateRejectMetatable(newGraphicalNode,graphicalNode);
  NodeContainer nc=null;
  if (newGraphicalNode.isJoblet()) {
    nc=new JobletContainer(newGraphicalNode);
  }
 else {
    nc=new NodeContainer(newGraphicalNode);
  }
  ((Process)process).addNodeContainer(nc);
  buildGraphicalMap.put(graphicalNode,newGraphicalNode);
  IConnection dataConnec;
  for (  IConnection connection : (List<IConnection>)graphicalNode.getOutgoingConnections()) {
    if (!connection.isActivate()) {
      continue;
    }
    INode connTarget=connection.getTarget();
    if (connTarget.getJobletNode() != null) {
      connTarget=connTarget.getJobletNode();
    }
    INode target=buildNodeFromNode(connTarget,process);
    dataConnec=new Connection(newGraphicalNode,target,connection.getLineStyle(),connection.getConnectorName(),connection.getMetaName(),connection.getName(),connection.getUniqueName(),connection.isMonitorConnection());
    copyElementParametersValue(connection,dataConnec);
    dataConnec.setTraceConnection(connection.isTraceConnection());
  }
  newGraphicalNode.setActivate(graphicalNode.isActivate());
  newGraphicalNode.setStart(graphicalNode.isStart());
  return newGraphicalNode;
}",0.9762557077625572
124127,"public AbstractExternalData getExternalEmfData(){
  final MapperData emfMapperData=MapperFactory.eINSTANCE.createMapperData();
  initMapperMain(false);
  mapperMain.createModelFromExternalData(getIncomingConnections(),getOutgoingConnections(),externalData,getMetadataList(),false);
  ExternalMapperData data=mapperMain.buildExternalData();
  if (mapperMain != null && data != null) {
    if (externalData != null) {
      MapperHelper.saveDataToEmf(data,emfMapperData);
    }
  }
  return emfMapperData;
}","public AbstractExternalData getExternalEmfData(){
  final MapperData emfMapperData=MapperFactory.eINSTANCE.createMapperData();
  initMapperMain(false);
  mapperMain.createModelFromExternalData(getIncomingConnections(),getOutgoingConnections(),externalData,getMetadataList(),false);
  ExternalMapperData data=mapperMain.buildExternalData();
  if (mapperMain != null && data != null) {
    if (externalData != null) {
      this.externalData=data;
      MapperHelper.saveDataToEmf(data,emfMapperData);
    }
  }
  return emfMapperData;
}",0.971153846153846
124128,"/** 
 * dev Comment method ""restoreConnection"".
 * @param connection
 * @param tablesFromEMF
 */
@SuppressWarnings(""String_Node_Str"") private void restoreConnection(DatabaseConnection connection,List<MetadataTable> tablesFromEMF){
  tablesFromEMF=sortTableColumn(tablesFromEMF);
  tList=new ArrayList<MetadataTable>();
  tList.addAll(ConnectionHelper.getTables(connection));
  Catalog c=(Catalog)ConnectionHelper.getPackage(connection.getSID(),connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(connection.getSID(),connection,Schema.class);
  Schema schema=(Schema)ConnectionHelper.getPackage(connection.getUiSchema(),connection,Schema.class);
  if (c != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,c);
  }
 else   if (s != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,s);
  }
 else   if (schema != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,schema);
  }
}","/** 
 * dev Comment method ""restoreConnection"".
 * @param connection
 * @param tablesFromEMF
 */
@SuppressWarnings(""String_Node_Str"") private void restoreConnection(DatabaseConnection connection,List<MetadataTable> tablesFromEMF){
  tablesFromEMF=sortTableColumn(tablesFromEMF);
  if (tList == null) {
    tList=new ArrayList<MetadataTable>();
    tList.addAll(ConnectionHelper.getTables(connection));
  }
  Catalog c=(Catalog)ConnectionHelper.getPackage(connection.getSID(),connection,Catalog.class);
  Schema s=(Schema)ConnectionHelper.getPackage(connection.getSID(),connection,Schema.class);
  Schema schema=(Schema)ConnectionHelper.getPackage(connection.getUiSchema(),connection,Schema.class);
  if (c != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,c);
  }
 else   if (s != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,s);
  }
 else   if (schema != null) {
    PackageHelper.addMetadataTable(tablesFromEMF,schema);
  }
}",0.9833958221746116
124129,"/** 
 * The <code>MultiPageEditorPart</code> implementation of this <code>IWorkbenchPart</code> method disposes all nested editors. Subclasses may extend.
 */
@Override public void dispose(){
  getSite().setSelectionProvider(null);
  getSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(this);
  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);
  getSite().getWorkbenchWindow().getPartService().removePartListener(partListener);
  super.dispose();
  if (isKeepPropertyLocked()) {
    return;
  }
  IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
  IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  try {
    getProcess().getProperty().eAdapters().remove(dirtyListener);
    Property property=getProcess().getProperty();
    if (property.eResource() == null || property.getItem().eResource() == null) {
      property=repFactory.getUptodateProperty(property);
    }
    JobletUtil jUtil=new JobletUtil();
    jUtil.makeSureUnlockJoblet(getProcess());
    Item item=getProcess().getProperty().getItem();
    boolean keep=jUtil.keepLockJoblet(item);
    if (keep) {
      repFactory.unlock(property.getItem());
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
  if (AbstractProcessProvider.isExtensionProcessForJoblet(getProcess())) {
    RepositoryManager.refresh(ERepositoryObjectType.JOBLET);
  }
 else {
    RepositoryManager.refresh(ERepositoryObjectType.PROCESS);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      RepositoryManager.refresh(camelService.getRoutes());
    }
  }
  processEditorInput.setRepositoryNode(null);
  processEditorInput.setLoadedProcess(null);
  processEditorInput=null;
  designerEditor=null;
  codeEditor=null;
  if (processor instanceof IJavaBreakpointListener) {
    JDIDebugModel.removeJavaBreakpointListener((IJavaBreakpointListener)processor);
  }
  processor=null;
  dirtyListener=null;
}","/** 
 * The <code>MultiPageEditorPart</code> implementation of this <code>IWorkbenchPart</code> method disposes all nested editors. Subclasses may extend.
 */
@Override public void dispose(){
  getSite().setSelectionProvider(null);
  getSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(this);
  ResourcesPlugin.getWorkspace().removeResourceChangeListener(this);
  getSite().getWorkbenchWindow().getPartService().removePartListener(partListener);
  super.dispose();
  if (isKeepPropertyLocked()) {
    return;
  }
  IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
  IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  try {
    getProcess().getProperty().eAdapters().remove(dirtyListener);
    Property property=getProcess().getProperty();
    if (property.eResource() == null || property.getItem().eResource() == null) {
      property=repFactory.getUptodateProperty(property);
    }
    JobletUtil jUtil=new JobletUtil();
    jUtil.makeSureUnlockJoblet(getProcess());
    Item item=getProcess().getProperty().getItem();
    boolean keep=jUtil.keepLockJoblet(item);
    if (keep) {
      repFactory.unlock(property.getItem());
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  LoginException e) {
    ExceptionHandler.process(e);
  }
  if (AbstractProcessProvider.isExtensionProcessForJoblet(getProcess())) {
    RepositoryManager.refresh(ERepositoryObjectType.JOBLET);
  }
 else {
    RepositoryManager.refresh(ERepositoryObjectType.PROCESS);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
      ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
      RepositoryManager.refresh(camelService.getRoutes());
    }
  }
  processEditorInput.dispose();
  processEditorInput=null;
  designerEditor=null;
  codeEditor=null;
  if (processor instanceof IJavaBreakpointListener) {
    JDIDebugModel.removeJavaBreakpointListener((IJavaBreakpointListener)processor);
  }
  processor=null;
  dirtyListener=null;
}",0.9829040346478232
124130,"/** 
 * DOC YeXiaowei Comment method ""addCodeGenerateButton"".
 * @param parent
 */
private void addCodeGenerateButton(final Composite parent){
  codeGenereateButton=new Button(parent,SWT.CENTER);
  codeGenereateButton.setText(Messages.getString(""String_Node_Str""));
  codeGenereateButton.setToolTipText(Messages.getString(""String_Node_Str""));
  GridData layoutData=new GridData();
  layoutData.horizontalAlignment=SWT.CENTER;
  codeGenereateButton.setLayoutData(layoutData);
  codeGenereateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (elem instanceof Node) {
        ISampleCodeFactory factory=JavaSampleCodeFactory.getInstance();
        executeCommand(factory.generateCodeForParameters((Node)elem));
        refresh(curParameter,false);
      }
    }
  }
);
}","/** 
 * DOC YeXiaowei Comment method ""addCodeGenerateButton"".
 * @param parent
 */
private void addCodeGenerateButton(final Composite parent){
  codeGenereateButton=new Button(parent,SWT.CENTER);
  codeGenereateButton.setText(Messages.getString(""String_Node_Str""));
  codeGenereateButton.setToolTipText(Messages.getString(""String_Node_Str""));
  codeGenereateButton.setEnabled(!elem.isReadOnly());
  GridData layoutData=new GridData();
  layoutData.horizontalAlignment=SWT.CENTER;
  codeGenereateButton.setLayoutData(layoutData);
  codeGenereateButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (elem instanceof Node) {
        ISampleCodeFactory factory=JavaSampleCodeFactory.getInstance();
        executeCommand(factory.generateCodeForParameters((Node)elem));
        refresh(curParameter,false);
      }
    }
  }
);
}",0.9689298043728424
124131,"/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"") || (curParam.getRepositoryValue() != null && curParam.getRepositoryValue().equals(""String_Node_Str""))) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}",0.982605729877217
124132,"/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"") || (curParam.getRepositoryValue() != null && curParam.getRepositoryValue().equals(""String_Node_Str""))) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}",0.982605729877217
124133,"private void copyElementParametersValue(IElement sourceElement,IElement targetElement){
  for (  IElementParameter sourceParam : sourceElement.getElementParameters()) {
    IElementParameter targetParam=targetElement.getElementParameter(sourceParam.getName());
    if (targetParam != null) {
      targetParam.setContextMode(sourceParam.isContextMode());
      targetParam.setValue(sourceParam.getValue());
      if (targetParam.getFieldType() == EParameterFieldType.TABLE) {
        targetParam.setListItemsValue(ArrayUtils.clone(sourceParam.getListItemsValue()));
        targetParam.setListItemsDisplayCodeName(sourceParam.getListItemsDisplayCodeName());
      }
      for (      String name : targetParam.getChildParameters().keySet()) {
        IElementParameter targetChildParam=targetParam.getChildParameters().get(name);
        if (sourceParam.getChildParameters() == null) {
          continue;
        }
        IElementParameter sourceChildParam=sourceParam.getChildParameters().get(name);
        targetChildParam.setValue(sourceChildParam.getValue());
        if (targetChildParam.getFieldType() == EParameterFieldType.TABLE) {
          targetChildParam.setListItemsValue(sourceChildParam.getListItemsValue());
          targetChildParam.setListItemsDisplayCodeName(sourceChildParam.getListItemsDisplayCodeName());
        }
      }
    }
  }
}","private void copyElementParametersValue(IElement sourceElement,IElement targetElement){
  for (  IElementParameter sourceParam : sourceElement.getElementParameters()) {
    IElementParameter targetParam=targetElement.getElementParameter(sourceParam.getName());
    if (targetParam != null) {
      if (sourceParam.getName().equals(EParameterName.DB_TYPE.getName()) && sourceParam.getValue().toString().matches(""String_Node_Str"")) {
        sourceElement.getElementParameter(EParameterName.DBNAME.getName()).setValue(sourceElement.getElementParameter(EParameterName.DBFILE.getName()).getValue());
      }
      targetParam.setContextMode(sourceParam.isContextMode());
      targetParam.setValue(sourceParam.getValue());
      if (targetParam.getFieldType() == EParameterFieldType.TABLE) {
        targetParam.setListItemsValue(ArrayUtils.clone(sourceParam.getListItemsValue()));
        targetParam.setListItemsDisplayCodeName(sourceParam.getListItemsDisplayCodeName());
      }
      for (      String name : targetParam.getChildParameters().keySet()) {
        IElementParameter targetChildParam=targetParam.getChildParameters().get(name);
        if (sourceParam.getChildParameters() == null) {
          continue;
        }
        IElementParameter sourceChildParam=sourceParam.getChildParameters().get(name);
        targetChildParam.setValue(sourceChildParam.getValue());
        if (targetChildParam.getFieldType() == EParameterFieldType.TABLE) {
          targetChildParam.setListItemsValue(sourceChildParam.getListItemsValue());
          targetChildParam.setListItemsDisplayCodeName(sourceChildParam.getListItemsDisplayCodeName());
        }
      }
    }
  }
}",0.897029702970297
124134,"/** 
 * DOC zli Comment method ""getUrl"".
 * @param process
 */
private static String getUrl(IProcess process){
  String processDBType=(String)process.getElementParameter(EParameterName.DB_TYPE.getName()).getValue();
  if (StatsAndLogsConstants.JDBC_OUTPUT.equals(processDBType)) {
    IElementParameter urlParam=process.getElementParameter(EParameterName.URL.getName());
    if (urlParam != null && urlParam.getValue() != null) {
      return urlParam.getValue().toString();
    }
  }
  int indexOfItemFromList=process.getElementParameter(EParameterName.DB_TYPE.getName()).getIndexOfItemFromList(processDBType);
  String[] listItemsDisplayName=process.getElementParameter(EParameterName.DB_TYPE.getName()).getListItemsDisplayName();
  processDBType=listItemsDisplayName[indexOfItemFromList];
  IElementParameter param=process.getElementParameter(EParameterName.FILENAME.getName());
  final String empty=""String_Node_Str"";
  String processDBFileName=empty;
  if (param != null) {
    processDBFileName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DATASOURCE.getName());
  String processDBDatasouce=empty;
  if (param != null) {
    processDBDatasouce=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DBNAME.getName());
  String processDBName=empty;
  if (param != null) {
    processDBName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.HOST.getName());
  String processHost=empty;
  if (param != null) {
    processHost=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PORT.getName());
  String processDBPort=empty;
  if (param != null) {
    processDBPort=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PASS.getName());
  String processDBPass=empty;
  if (param != null) {
    processDBPass=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.SCHEMA_DB.getName());
  String processDBSID=empty;
  if (param != null) {
    processDBSID=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.USER.getName());
  String processDBUser=empty;
  if (param != null) {
    processDBUser=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PROPERTIES.getName());
  String processDBAdditionParameters=empty;
  if (param != null) {
    processDBAdditionParameters=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DB_VERSION.getName());
  String processDBVersion=empty;
  if (param != null) {
    processDBVersion=(String)param.getValue();
  }
  if (processDBType.equals(""String_Node_Str"")) {
    processDBSID=processDBName;
  }
  String dbURL=DatabaseConnStrUtil.getURLString(true,processDBType,processDBVersion,processHost,processDBUser,processDBPass,processDBPort,processDBSID,processDBFileName,processDBDatasouce,processDBFileName,processDBAdditionParameters);
  return dbURL;
}","/** 
 * DOC zli Comment method ""getUrl"".
 * @param process
 */
private static String getUrl(IProcess process){
  String processDBType=(String)process.getElementParameter(EParameterName.DB_TYPE.getName()).getValue();
  if (StatsAndLogsConstants.JDBC_OUTPUT.equals(processDBType)) {
    IElementParameter urlParam=process.getElementParameter(EParameterName.URL.getName());
    if (urlParam != null && urlParam.getValue() != null) {
      return urlParam.getValue().toString();
    }
  }
  int indexOfItemFromList=process.getElementParameter(EParameterName.DB_TYPE.getName()).getIndexOfItemFromList(processDBType);
  String[] listItemsDisplayName=process.getElementParameter(EParameterName.DB_TYPE.getName()).getListItemsDisplayName();
  processDBType=listItemsDisplayName[indexOfItemFromList];
  IElementParameter param=process.getElementParameter(EParameterName.DBFILE.getName());
  final String empty=""String_Node_Str"";
  String processDBFileName=empty;
  if (param != null) {
    processDBFileName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DATASOURCE.getName());
  String processDBDatasouce=empty;
  if (param != null) {
    processDBDatasouce=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DBNAME.getName());
  String processDBName=empty;
  if (param != null) {
    processDBName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.HOST.getName());
  String processHost=empty;
  if (param != null) {
    processHost=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PORT.getName());
  String processDBPort=empty;
  if (param != null) {
    processDBPort=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PASS.getName());
  String processDBPass=empty;
  if (param != null) {
    processDBPass=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.SCHEMA_DB.getName());
  String processDBSID=empty;
  if (param != null) {
    processDBSID=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.USER.getName());
  String processDBUser=empty;
  if (param != null) {
    processDBUser=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PROPERTIES.getName());
  String processDBAdditionParameters=empty;
  if (param != null) {
    processDBAdditionParameters=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DB_VERSION.getName());
  String processDBVersion=empty;
  if (param != null) {
    processDBVersion=(String)param.getValue();
  }
  if (processDBType.equals(""String_Node_Str"")) {
    processDBSID=processDBName;
  }
  String dbURL=DatabaseConnStrUtil.getURLString(true,processDBType,processDBVersion,processHost,processDBUser,processDBPass,processDBPort,processDBSID,processDBFileName,processDBDatasouce,processDBFileName,processDBAdditionParameters);
  return dbURL;
}",0.9989837398373984
124135,"public List<ModuleNeeded> getModulesNeeded(){
  List<String> moduleNames=new ArrayList<String>();
  List<ModuleNeeded> componentImportNeedsList=new ArrayList<ModuleNeeded>();
  if (!isAlreadyLoad) {
    if (compType.getCODEGENERATION().getIMPORTS() != null) {
      EList emfImportList=compType.getCODEGENERATION().getIMPORTS().getIMPORT();
      info.getImportType().addAll(emfImportList);
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list);
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      List<String> componentList=info.getComponentNames();
      for (      IMultipleComponentManager multipleComponentManager : getMultipleComponentManagers()) {
        for (        IMultipleComponentItem multipleComponentItem : multipleComponentManager.getItemList()) {
          IComponent component=ComponentsFactoryProvider.getInstance().get(multipleComponentItem.getComponent());
          componentList.add(multipleComponentItem.getComponent());
          if (component == null) {
            continue;
          }
          for (          ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
            if (!moduleNames.contains(moduleNeeded.getModuleName())) {
              ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL());
              componentImportNeedsList.add(componentImportNeeds);
            }
          }
        }
      }
    }
  }
 else {
    if (info != null) {
      EList emfImportList=info.getImportType();
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list);
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      for (      String name : info.getComponentNames()) {
        IComponent component=ComponentsFactoryProvider.getInstance().get(name);
        if (component == null) {
          continue;
        }
        for (        ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
          if (!moduleNames.contains(moduleNeeded.getModuleName())) {
            ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL());
            componentImportNeedsList.add(componentImportNeeds);
          }
        }
      }
    }
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
  }
  return componentImportNeedsList;
}","public List<ModuleNeeded> getModulesNeeded(){
  List<String> moduleNames=new ArrayList<String>();
  List<ModuleNeeded> componentImportNeedsList=new ArrayList<ModuleNeeded>();
  if (!isAlreadyLoad) {
    if (compType.getCODEGENERATION().getIMPORTS() != null) {
      EList emfImportList=compType.getCODEGENERATION().getIMPORTS().getIMPORT();
      info.getImportType().addAll(emfImportList);
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list,importType.getREQUIREDIF());
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      List<String> componentList=info.getComponentNames();
      for (      IMultipleComponentManager multipleComponentManager : getMultipleComponentManagers()) {
        for (        IMultipleComponentItem multipleComponentItem : multipleComponentManager.getItemList()) {
          IComponent component=ComponentsFactoryProvider.getInstance().get(multipleComponentItem.getComponent());
          componentList.add(multipleComponentItem.getComponent());
          if (component == null) {
            continue;
          }
          for (          ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
            if (!moduleNames.contains(moduleNeeded.getModuleName())) {
              ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL(),moduleNeeded.getRequiredIf());
              componentImportNeedsList.add(componentImportNeeds);
            }
          }
        }
      }
    }
  }
 else {
    if (info != null) {
      EList emfImportList=info.getImportType();
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list,importType.getREQUIREDIF());
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      for (      String name : info.getComponentNames()) {
        IComponent component=ComponentsFactoryProvider.getInstance().get(name);
        if (component == null) {
          continue;
        }
        for (        ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
          if (!moduleNames.contains(moduleNeeded.getModuleName())) {
            ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL(),moduleNeeded.getRequiredIf());
            componentImportNeedsList.add(componentImportNeeds);
          }
        }
      }
    }
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
  }
  return componentImportNeedsList;
}",0.9865426150523344
124136,"private static void getNeededLibraries(final IProcess process,boolean withChildrens,Set<ProcessItem> searchItems,Set<String> neededLibraries,Set<String> bundleDefinedLibraries,boolean... isExportOSGI){
  boolean exportOSGI=false;
  if (isExportOSGI != null && isExportOSGI.length == 1) {
    exportOSGI=isExportOSGI[0];
  }
  IElementParameter headerParameter=process.getElementParameter(EParameterName.HEADER_LIBRARY.getName());
  if (headerParameter != null) {
    Object value=headerParameter.getValue();
    if (value != null) {
      String headerLibraries=(String)value;
      if (headerLibraries.indexOf(File.separatorChar) > 0 && headerLibraries.length() > headerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=headerLibraries.substring(headerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter footerParameter=process.getElementParameter(EParameterName.FOOTER_LIBRARY.getName());
  if (footerParameter != null) {
    Object value=footerParameter.getValue();
    if (value != null) {
      String footerLibraries=(String)value;
      if (footerLibraries.indexOf(File.separatorChar) > 0 && footerLibraries.length() > footerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=footerLibraries.substring(footerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter elementParameter=process.getElementParameter(EParameterName.DRIVER_JAR.getName());
  if (elementParameter != null && elementParameter.getFieldType() == EParameterFieldType.TABLE) {
    getModulsInTable(process,elementParameter,neededLibraries);
  }
  if (process instanceof IProcess2) {
    Item item=((IProcess2)process).getProperty().getItem();
    if (item instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededForRoutines=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)item);
      if (modulesNeededForRoutines != null) {
        for (        ModuleNeeded moduleNeeded : modulesNeededForRoutines) {
          neededLibraries.add(moduleNeeded.getModuleName());
        }
      }
    }
  }
  List<? extends INode> nodeList=process.getGeneratingNodes();
  for (  INode node : nodeList) {
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    for (    ModuleNeeded needed : moduleList) {
      if (needed.isRequired()) {
        if (!exportOSGI) {
          neededLibraries.add(needed.getModuleName());
        }
 else         if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
          neededLibraries.add(needed.getModuleName());
        }
 else {
          bundleDefinedLibraries.add(needed.getModuleName());
        }
      }
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType() == null) {
        continue;
      }
      if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
        if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
          neededLibraries.add(getModuleValue(process,(String)curParam.getValue()));
        }
      }
 else       if (curParam.getFieldType() == EParameterFieldType.TABLE) {
        getModulsInTable(process,curParam,neededLibraries);
      }
      if (curParam.isShow(node.getElementParameters())) {
        findMoreLibraries(process,neededLibraries,curParam,true);
      }
 else {
        findMoreLibraries(process,neededLibraries,curParam,false);
      }
    }
    if (withChildrens) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        IElementParameter processVersionParam=node.getElementParameter(EParameterName.PROCESS_TYPE_VERSION.getName());
        ProcessItem processItem=null;
        if (processVersionParam != null) {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue(),(String)processVersionParam.getValue());
        }
 else {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue());
        }
        String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
        if (processItem != null && !searchItems.contains(processItem)) {
          searchItems.add(processItem);
          JobInfo subJobInfo=new JobInfo(processItem,context);
          IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
          IProcess child=service.getProcessFromItem(subJobInfo.getProcessItem());
          JavaProcessUtil.getNeededLibraries(child,true,searchItems,neededLibraries,bundleDefinedLibraries,isExportOSGI);
        }
      }
    }
  }
}","private static void getNeededLibraries(final IProcess process,boolean withChildrens,Set<ProcessItem> searchItems,Set<String> neededLibraries,Set<String> bundleDefinedLibraries,boolean... isExportOSGI){
  boolean exportOSGI=false;
  if (isExportOSGI != null && isExportOSGI.length == 1) {
    exportOSGI=isExportOSGI[0];
  }
  IElementParameter headerParameter=process.getElementParameter(EParameterName.HEADER_LIBRARY.getName());
  if (headerParameter != null) {
    Object value=headerParameter.getValue();
    if (value != null) {
      String headerLibraries=(String)value;
      if (headerLibraries.indexOf(File.separatorChar) > 0 && headerLibraries.length() > headerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=headerLibraries.substring(headerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter footerParameter=process.getElementParameter(EParameterName.FOOTER_LIBRARY.getName());
  if (footerParameter != null) {
    Object value=footerParameter.getValue();
    if (value != null) {
      String footerLibraries=(String)value;
      if (footerLibraries.indexOf(File.separatorChar) > 0 && footerLibraries.length() > footerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=footerLibraries.substring(footerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter elementParameter=process.getElementParameter(EParameterName.DRIVER_JAR.getName());
  if (elementParameter != null && elementParameter.getFieldType() == EParameterFieldType.TABLE) {
    getModulsInTable(process,elementParameter,neededLibraries);
  }
  if (process instanceof IProcess2) {
    Item item=((IProcess2)process).getProperty().getItem();
    if (item instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededForRoutines=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)item);
      if (modulesNeededForRoutines != null) {
        for (        ModuleNeeded moduleNeeded : modulesNeededForRoutines) {
          neededLibraries.add(moduleNeeded.getModuleName());
        }
      }
    }
  }
  List<? extends INode> nodeList=process.getGeneratingNodes();
  for (  INode node : nodeList) {
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    boolean flag=false;
    for (    ModuleNeeded needed : moduleList) {
      if (needed.getRequiredIf() != null) {
        flag=true;
      }
    }
    for (    ModuleNeeded needed : moduleList) {
      if (flag) {
        if (needed.isShowRequiredIf(node.getElementParameters())) {
          if (!exportOSGI) {
            neededLibraries.add(needed.getModuleName());
          }
 else           if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
            neededLibraries.add(needed.getModuleName());
          }
 else {
            bundleDefinedLibraries.add(needed.getModuleName());
          }
        }
      }
 else {
        if (needed.isRequired()) {
          if (!exportOSGI) {
            neededLibraries.add(needed.getModuleName());
          }
 else           if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
            neededLibraries.add(needed.getModuleName());
          }
 else {
            bundleDefinedLibraries.add(needed.getModuleName());
          }
        }
      }
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType() == null) {
        continue;
      }
      if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
        if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
          neededLibraries.add(getModuleValue(process,(String)curParam.getValue()));
        }
      }
 else       if (curParam.getFieldType() == EParameterFieldType.TABLE) {
        getModulsInTable(process,curParam,neededLibraries);
      }
      if (curParam.isShow(node.getElementParameters())) {
        findMoreLibraries(process,neededLibraries,curParam,true);
      }
 else {
        findMoreLibraries(process,neededLibraries,curParam,false);
      }
    }
    if (withChildrens) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        IElementParameter processVersionParam=node.getElementParameter(EParameterName.PROCESS_TYPE_VERSION.getName());
        ProcessItem processItem=null;
        if (processVersionParam != null) {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue(),(String)processVersionParam.getValue());
        }
 else {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue());
        }
        String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
        if (processItem != null && !searchItems.contains(processItem)) {
          searchItems.add(processItem);
          JobInfo subJobInfo=new JobInfo(processItem,context);
          IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
          IProcess child=service.getProcessFromItem(subJobInfo.getProcessItem());
          JavaProcessUtil.getNeededLibraries(child,true,searchItems,neededLibraries,bundleDefinedLibraries,isExportOSGI);
        }
      }
    }
  }
}",0.9389196411528916
124137,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  IElementParameter dqRuler=node.getElementParameter(""String_Node_Str"");
  String newQuery=""String_Node_Str"";
  if (dqRuler != null || !""String_Node_Str"".equals(dqRuler.getValue())) {
    newQuery=generateNewQueryFromDQRuler(dqRuler);
    if (newQuery == null || ""String_Node_Str"".equals(newQuery)) {
      newQuery=generateNewQuery();
    }
  }
 else {
    newQuery=generateNewQuery();
  }
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  IElementParameter dqRuler=node.getElementParameter(""String_Node_Str"");
  String newQuery=""String_Node_Str"";
  if (dqRuler != null && !""String_Node_Str"".equals(dqRuler.getValue())) {
    newQuery=generateNewQueryFromDQRuler(dqRuler);
    if (newQuery == null || ""String_Node_Str"".equals(newQuery)) {
      newQuery=generateNewQuery();
    }
  }
 else {
    newQuery=generateNewQuery();
  }
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}",0.9984650805832692
124138,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  IElementParameter dqRuler=node.getElementParameter(""String_Node_Str"");
  String newQuery=""String_Node_Str"";
  if (dqRuler != null || !""String_Node_Str"".equals(dqRuler.getValue())) {
    newQuery=generateNewQueryFromDQRuler(dqRuler);
    if (newQuery == null || ""String_Node_Str"".equals(newQuery)) {
      newQuery=generateNewQuery();
    }
  }
 else {
    newQuery=generateNewQuery();
  }
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  IElementParameter dqRuler=node.getElementParameter(""String_Node_Str"");
  String newQuery=""String_Node_Str"";
  if (dqRuler != null && !""String_Node_Str"".equals(dqRuler.getValue())) {
    newQuery=generateNewQueryFromDQRuler(dqRuler);
    if (newQuery == null || ""String_Node_Str"".equals(newQuery)) {
      newQuery=generateNewQuery();
    }
  }
 else {
    newQuery=generateNewQuery();
  }
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}",0.9984650805832692
124139,"public static long StringToLong(String strIn){
  if (null == strIn || strIn.length() == 0)   return -1l;
  return Long.valueOf(strIn);
}","public static long StringToLong(String strIn){
  if (null == strIn || strIn.length() == 0)   return -1l;
  if (strIn.length() > 18) {
    strIn=strIn.substring(0,18);
  }
  return Long.valueOf(strIn);
}",0.8047337278106509
124140,"public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectList().add(projectCollection[i].getLabel());
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    tosLoginComposite.getConvertorMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i].getLabel());
    try {
      tosLoginComposite.setStatusArea();
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (tosLoginComposite.getProjectList().getItemCount() > 0) {
    tosLoginComposite.getProjectList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}","public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  Map<String,String> convertorMapper=tosLoginComposite.getConvertorMappper();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    convertorMapper.put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i].getLabel());
  }
  ListViewer projectListViewer=tosLoginComposite.getProjectListViewer();
  projectListViewer.setInput(new ArrayList(convertorMapper.values()));
  try {
    tosLoginComposite.setStatusArea();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (projectListViewer.getList().getItemCount() > 0) {
    projectListViewer.getList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}",0.581943645773433
124141,"private void createTosActionArea(Composite parent){
  tosActionComposite=toolkit.createComposite(parent);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=140;
  tosActionComposite.setLayoutData(gd);
  tosActionComposite.setLayout(new FormLayout());
  tosActionComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  FormData data;
  Label projectLabel=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  GC gc=new GC(projectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,50);
  data.bottom=new FormAttachment(0,30);
  projectLabel.setBackground(tosActionComposite.getBackground());
  projectLabel.setLayoutData(data);
  openButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(projectLabel,0,SWT.TOP);
  gc=new GC(openButton);
  Point labelSizeOpenButton=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  int width=OPEN_IMAGE.getBounds().width;
  gc=new GC(openButton);
  Point labelSizeDeleteButton=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  if (labelSizeOpenButton.x + width > labelSizeDeleteButton.x) {
    data.left=new FormAttachment(100,-20 - labelSizeOpenButton.x - width- 10);
  }
 else {
    data.left=new FormAttachment(100,-20 - labelSizeDeleteButton.x - 10);
  }
  data.right=new FormAttachment(100,-10);
  openButton.setText(Messages.getString(""String_Node_Str""));
  openButton.setLayoutData(data);
  openButton.setImage(OPEN_IMAGE);
  projectList=new List(tosActionComposite,SWT.BORDER | SWT.V_SCROLL);
  data=new FormData();
  data.top=new FormAttachment(projectLabel,0,SWT.TOP);
  data.left=new FormAttachment(projectLabel,10,SWT.RIGHT);
  data.right=new FormAttachment(openButton,-10,SWT.LEFT);
  data.bottom=new FormAttachment(0,100);
  projectList.setLayoutData(data);
  deleteButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(openButton,5,SWT.BOTTOM);
  data.left=new FormAttachment(openButton,0,SWT.LEFT);
  data.right=new FormAttachment(openButton,0,SWT.RIGHT);
  deleteButton.setText(Messages.getString(""String_Node_Str""));
  deleteButton.setLayoutData(data);
  createButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(projectList,10,SWT.BOTTOM);
  data.left=new FormAttachment(projectList,0,SWT.LEFT);
  data.right=new FormAttachment(projectList,65,SWT.LEFT);
  createButton.setText(Messages.getString(""String_Node_Str""));
  createButton.setLayoutData(data);
  importButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(createButton,0,SWT.TOP);
  data.left=new FormAttachment(createButton,10,SWT.RIGHT);
  importButton.setText(Messages.getString(""String_Node_Str""));
  importButton.setLayoutData(data);
  demoProjectButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(importButton,0,SWT.TOP);
  data.left=new FormAttachment(importButton,10,SWT.RIGHT);
  data.right=new FormAttachment(100,-10);
  demoProjectButton.setText(Messages.getString(""String_Node_Str""));
  demoProjectButton.setLayoutData(data);
  enableOpenAndDelete(false);
}","private void createTosActionArea(Composite parent){
  tosActionComposite=toolkit.createComposite(parent);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=140;
  tosActionComposite.setLayoutData(gd);
  tosActionComposite.setLayout(new FormLayout());
  tosActionComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  FormData data;
  Label projectLabel=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  GC gc=new GC(projectLabel);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.top=new FormAttachment(0,10);
  data.left=new FormAttachment(0,50);
  data.bottom=new FormAttachment(0,30);
  projectLabel.setBackground(tosActionComposite.getBackground());
  projectLabel.setLayoutData(data);
  openButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(projectLabel,0,SWT.TOP);
  gc=new GC(openButton);
  Point labelSizeOpenButton=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  int width=OPEN_IMAGE.getBounds().width;
  gc=new GC(openButton);
  Point labelSizeDeleteButton=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  if (labelSizeOpenButton.x + width > labelSizeDeleteButton.x) {
    data.left=new FormAttachment(100,-20 - labelSizeOpenButton.x - width- 10);
  }
 else {
    data.left=new FormAttachment(100,-20 - labelSizeDeleteButton.x - 10);
  }
  data.right=new FormAttachment(100,-10);
  openButton.setText(Messages.getString(""String_Node_Str""));
  openButton.setLayoutData(data);
  openButton.setImage(OPEN_IMAGE);
  Composite projectListViewerContainer=new Composite(tosActionComposite,SWT.NONE);
  projectListViewerContainer.setLayout(new FillLayout());
  this.projectListViewer=new ListViewer(projectListViewerContainer);
  this.projectListViewer.setContentProvider(new TableViewerContentProvider());
  this.projectListViewer.setLabelProvider(new ILabelProvider(){
    public void removeListener(    ILabelProviderListener listener){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void dispose(){
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public String getText(    Object element){
      if (element != null) {
        return element.toString();
      }
      return null;
    }
    public Image getImage(    Object element){
      return null;
    }
  }
);
  this.projectListViewer.setSorter(new ViewerSorter());
  data=new FormData();
  data.top=new FormAttachment(projectLabel,0,SWT.TOP);
  data.left=new FormAttachment(projectLabel,10,SWT.RIGHT);
  data.right=new FormAttachment(openButton,-10,SWT.LEFT);
  data.bottom=new FormAttachment(0,100);
  projectListViewerContainer.setLayoutData(data);
  deleteButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(openButton,5,SWT.BOTTOM);
  data.left=new FormAttachment(openButton,0,SWT.LEFT);
  data.right=new FormAttachment(openButton,0,SWT.RIGHT);
  deleteButton.setText(Messages.getString(""String_Node_Str""));
  deleteButton.setLayoutData(data);
  createButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(projectListViewerContainer,10,SWT.BOTTOM);
  data.left=new FormAttachment(projectListViewerContainer,0,SWT.LEFT);
  data.right=new FormAttachment(projectListViewerContainer,65,SWT.LEFT);
  createButton.setText(Messages.getString(""String_Node_Str""));
  createButton.setLayoutData(data);
  importButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(createButton,0,SWT.TOP);
  data.left=new FormAttachment(createButton,10,SWT.RIGHT);
  importButton.setText(Messages.getString(""String_Node_Str""));
  importButton.setLayoutData(data);
  demoProjectButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  data=new FormData();
  data.top=new FormAttachment(importButton,0,SWT.TOP);
  data.left=new FormAttachment(importButton,10,SWT.RIGHT);
  data.right=new FormAttachment(100,-10);
  demoProjectButton.setText(Messages.getString(""String_Node_Str""));
  demoProjectButton.setLayoutData(data);
  enableOpenAndDelete(false);
}",0.8769667268506577
124142,"public void setStatusArea() throws PersistenceException {
  String productName=brandingService.getFullProductName();
  if (productName != null) {
    String[] split=productName.split(""String_Node_Str"");
    if (split != null && split.length > 3) {
      productName=brandingService.getShortProductName();
    }
  }
  if (loginComposite.getConnection() != null) {
    if (!loginComposite.isWorkSpaceSame()) {
      iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      colorComposite.setBackground(RED_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str""));
      statusLabel.setBackground(RED_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
      statusLabel.setFont(font);
    }
 else     if (inuse) {
      iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      colorComposite.setBackground(RED_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str""));
      statusLabel.setBackground(RED_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
      statusLabel.setFont(font);
    }
 else     if (projectList.getItemCount() > 0) {
      iconLabel.setImage(LOGIN_CORRECT_IMAGE);
      onIconLabel.setImage(LOGIN_CORRECT_IMAGE);
      colorComposite.setBackground(YELLOW_GREEN_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str"",productName));
      int size=loginComposite.calStatusLabelFont(11,statusLabel.getText());
      statusLabel.setBackground(YELLOW_GREEN_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,size,SWT.BOLD);
      statusLabel.setFont(font);
    }
 else {
      iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      colorComposite.setBackground(RED_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str""));
      statusLabel.setBackground(RED_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
      statusLabel.setFont(font);
    }
  }
}","public void setStatusArea() throws PersistenceException {
  String productName=brandingService.getFullProductName();
  if (productName != null) {
    String[] split=productName.split(""String_Node_Str"");
    if (split != null && split.length > 3) {
      productName=brandingService.getShortProductName();
    }
  }
  if (loginComposite.getConnection() != null) {
    if (!loginComposite.isWorkSpaceSame()) {
      iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      colorComposite.setBackground(RED_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str""));
      statusLabel.setBackground(RED_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
      statusLabel.setFont(font);
    }
 else     if (inuse) {
      iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      colorComposite.setBackground(RED_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str""));
      statusLabel.setBackground(RED_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
      statusLabel.setFont(font);
    }
 else     if (this.projectListViewer.getList().getItemCount() > 0) {
      iconLabel.setImage(LOGIN_CORRECT_IMAGE);
      onIconLabel.setImage(LOGIN_CORRECT_IMAGE);
      colorComposite.setBackground(YELLOW_GREEN_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str"",productName));
      int size=loginComposite.calStatusLabelFont(11,statusLabel.getText());
      statusLabel.setBackground(YELLOW_GREEN_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,size,SWT.BOLD);
      statusLabel.setFont(font);
    }
 else {
      iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
      colorComposite.setBackground(RED_COLOR);
      onIconLabel.setBackground(colorComposite.getBackground());
      statusLabel.setText(Messages.getString(""String_Node_Str""));
      statusLabel.setBackground(RED_COLOR);
      statusLabel.setForeground(WHITE_COLOR);
      Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
      statusLabel.setFont(font);
    }
  }
}",0.9958092197166234
124143,"private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      convertorMapper.put(pro.getTechnicalLabel(),pro.getLabel());
      projectList.add(convertorMapper.get(pro.getTechnicalLabel()));
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}","private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  this.projectListViewer.getList().removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      convertorMapper.put(pro.getTechnicalLabel(),pro.getLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      enableOpenAndDelete(true);
    }
    this.projectListViewer.setInput(new ArrayList(convertorMapper.values()));
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}",0.8596491228070176
124144,"private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                String name=convertorMapper.get(p.getName());
                if (name != null) {
                  projectList.remove(name);
                }
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              convertorMapper.put(newProject.toUpperCase(),newProject);
              projectList.add(convertorMapper.get(newProject.toUpperCase()));
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection.toUpperCase());
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}","private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                String name=convertorMapper.get(p.getName());
                if (name != null) {
                  convertorMapper.remove(p.getName());
                  TOSLoginComposite.this.projectListViewer.getList().remove(name);
                }
                if (TOSLoginComposite.this.projectListViewer.getList().getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (TOSLoginComposite.this.projectListViewer.getSelection().isEmpty()) {
                  TOSLoginComposite.this.projectListViewer.getList().select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              convertorMapper.put(newProject.toUpperCase(),newProject);
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
          TOSLoginComposite.this.projectListViewer.setInput(new ArrayList(convertorMapper.values()));
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (!TOSLoginComposite.this.projectListViewer.getSelection().isEmpty()) {
        String selection=TOSLoginComposite.this.projectListViewer.getList().getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection.toUpperCase());
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}",0.9513693185923838
124145,"@Override public ExecutionResult execute(Item item){
  ProcessType processType=getProcessType(item);
  if (getProject().getLanguage() != ECodeLanguage.JAVA || processType == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  String[] componentsName=new String[]{""String_Node_Str""};
  try {
    for (int i=0; i < componentsName.length; i++) {
      IComponentFilter filter=new NameComponentFilter(componentsName[i]);
      ModifyComponentsAction.searchAndModify(item,processType,filter,Arrays.<IComponentConversion>asList(new IComponentConversion(){
        public void transform(        NodeType node){
          if (ComponentUtilities.getNodeProperty(node,""String_Node_Str"") == null) {
            ComponentUtilities.addNodeProperty(node,""String_Node_Str"",""String_Node_Str"");
            ComponentUtilities.getNodeProperty(node,""String_Node_Str"").setValue(""String_Node_Str"");
          }
        }
      }
));
    }
    return ExecutionResult.SUCCESS_NO_ALERT;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return ExecutionResult.FAILURE;
  }
}","@Override public ExecutionResult execute(Item item){
  ProcessType processType=getProcessType(item);
  if (getProject().getLanguage() != ECodeLanguage.JAVA || processType == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  String[] componentsName=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  try {
    for (int i=0; i < componentsName.length; i++) {
      IComponentFilter filter=new NameComponentFilter(componentsName[i]);
      ModifyComponentsAction.searchAndModify(item,processType,filter,Arrays.<IComponentConversion>asList(new IComponentConversion(){
        public void transform(        NodeType node){
          if (ComponentUtilities.getNodeProperty(node,""String_Node_Str"") == null) {
            ComponentUtilities.addNodeProperty(node,""String_Node_Str"",""String_Node_Str"");
            ComponentUtilities.getNodeProperty(node,""String_Node_Str"").setValue(""String_Node_Str"");
          }
        }
      }
));
    }
    return ExecutionResult.SUCCESS_NO_ALERT;
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    return ExecutionResult.FAILURE;
  }
}",0.9674502712477396
124146,"private void copyElementParametersValue(IElement sourceElement,IElement targetElement){
  for (  IElementParameter sourceParam : sourceElement.getElementParameters()) {
    IElementParameter targetParam=targetElement.getElementParameter(sourceParam.getName());
    if (targetParam != null) {
      targetParam.setContextMode(sourceParam.isContextMode());
      targetParam.setValue(sourceParam.getValue());
      if (targetParam.getFieldType() == EParameterFieldType.TABLE) {
        targetParam.setListItemsValue(ArrayUtils.clone(sourceParam.getListItemsValue()));
        targetParam.setListItemsDisplayCodeName(sourceParam.getListItemsDisplayCodeName());
      }
      for (      String name : targetParam.getChildParameters().keySet()) {
        IElementParameter targetChildParam=targetParam.getChildParameters().get(name);
        if (sourceParam.getChildParameters() == null) {
          continue;
        }
        IElementParameter sourceChildParam=sourceParam.getChildParameters().get(name);
        targetChildParam.setValue(sourceChildParam.getValue());
        if (targetChildParam.getFieldType() == EParameterFieldType.TABLE) {
          targetChildParam.setListItemsValue(sourceChildParam.getListItemsValue());
          targetChildParam.setListItemsDisplayCodeName(sourceChildParam.getListItemsDisplayCodeName());
        }
      }
    }
  }
}","private void copyElementParametersValue(IElement sourceElement,IElement targetElement){
  for (  IElementParameter sourceParam : sourceElement.getElementParameters()) {
    IElementParameter targetParam=targetElement.getElementParameter(sourceParam.getName());
    if (targetParam != null) {
      if (sourceParam.getName().equals(EParameterName.DB_TYPE.getName()) && sourceParam.getValue().toString().matches(""String_Node_Str"")) {
        sourceElement.getElementParameter(EParameterName.DBNAME.getName()).setValue(sourceElement.getElementParameter(EParameterName.DBFILE.getName()).getValue());
      }
      targetParam.setContextMode(sourceParam.isContextMode());
      targetParam.setValue(sourceParam.getValue());
      if (targetParam.getFieldType() == EParameterFieldType.TABLE) {
        targetParam.setListItemsValue(ArrayUtils.clone(sourceParam.getListItemsValue()));
        targetParam.setListItemsDisplayCodeName(sourceParam.getListItemsDisplayCodeName());
      }
      for (      String name : targetParam.getChildParameters().keySet()) {
        IElementParameter targetChildParam=targetParam.getChildParameters().get(name);
        if (sourceParam.getChildParameters() == null) {
          continue;
        }
        IElementParameter sourceChildParam=sourceParam.getChildParameters().get(name);
        targetChildParam.setValue(sourceChildParam.getValue());
        if (targetChildParam.getFieldType() == EParameterFieldType.TABLE) {
          targetChildParam.setListItemsValue(sourceChildParam.getListItemsValue());
          targetChildParam.setListItemsDisplayCodeName(sourceChildParam.getListItemsDisplayCodeName());
        }
      }
    }
  }
}",0.897029702970297
124147,"/** 
 * DOC zli Comment method ""getUrl"".
 * @param process
 */
private static String getUrl(IProcess process){
  String processDBType=(String)process.getElementParameter(EParameterName.DB_TYPE.getName()).getValue();
  if (StatsAndLogsConstants.JDBC_OUTPUT.equals(processDBType)) {
    IElementParameter urlParam=process.getElementParameter(EParameterName.URL.getName());
    if (urlParam != null && urlParam.getValue() != null) {
      return urlParam.getValue().toString();
    }
  }
  int indexOfItemFromList=process.getElementParameter(EParameterName.DB_TYPE.getName()).getIndexOfItemFromList(processDBType);
  String[] listItemsDisplayName=process.getElementParameter(EParameterName.DB_TYPE.getName()).getListItemsDisplayName();
  processDBType=listItemsDisplayName[indexOfItemFromList];
  IElementParameter param=process.getElementParameter(EParameterName.FILENAME.getName());
  final String empty=""String_Node_Str"";
  String processDBFileName=empty;
  if (param != null) {
    processDBFileName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DATASOURCE.getName());
  String processDBDatasouce=empty;
  if (param != null) {
    processDBDatasouce=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DBNAME.getName());
  String processDBName=empty;
  if (param != null) {
    processDBName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.HOST.getName());
  String processHost=empty;
  if (param != null) {
    processHost=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PORT.getName());
  String processDBPort=empty;
  if (param != null) {
    processDBPort=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PASS.getName());
  String processDBPass=empty;
  if (param != null) {
    processDBPass=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.SCHEMA_DB.getName());
  String processDBSID=empty;
  if (param != null) {
    processDBSID=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.USER.getName());
  String processDBUser=empty;
  if (param != null) {
    processDBUser=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PROPERTIES.getName());
  String processDBAdditionParameters=empty;
  if (param != null) {
    processDBAdditionParameters=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DB_VERSION.getName());
  String processDBVersion=empty;
  if (param != null) {
    processDBVersion=(String)param.getValue();
  }
  if (processDBType.equals(""String_Node_Str"")) {
    processDBSID=processDBName;
  }
  String dbURL=DatabaseConnStrUtil.getURLString(true,processDBType,processDBVersion,processHost,processDBUser,processDBPass,processDBPort,processDBSID,processDBFileName,processDBDatasouce,processDBFileName,processDBAdditionParameters);
  return dbURL;
}","/** 
 * DOC zli Comment method ""getUrl"".
 * @param process
 */
private static String getUrl(IProcess process){
  String processDBType=(String)process.getElementParameter(EParameterName.DB_TYPE.getName()).getValue();
  if (StatsAndLogsConstants.JDBC_OUTPUT.equals(processDBType)) {
    IElementParameter urlParam=process.getElementParameter(EParameterName.URL.getName());
    if (urlParam != null && urlParam.getValue() != null) {
      return urlParam.getValue().toString();
    }
  }
  int indexOfItemFromList=process.getElementParameter(EParameterName.DB_TYPE.getName()).getIndexOfItemFromList(processDBType);
  String[] listItemsDisplayName=process.getElementParameter(EParameterName.DB_TYPE.getName()).getListItemsDisplayName();
  processDBType=listItemsDisplayName[indexOfItemFromList];
  IElementParameter param=process.getElementParameter(EParameterName.DBFILE.getName());
  final String empty=""String_Node_Str"";
  String processDBFileName=empty;
  if (param != null) {
    processDBFileName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DATASOURCE.getName());
  String processDBDatasouce=empty;
  if (param != null) {
    processDBDatasouce=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DBNAME.getName());
  String processDBName=empty;
  if (param != null) {
    processDBName=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.HOST.getName());
  String processHost=empty;
  if (param != null) {
    processHost=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PORT.getName());
  String processDBPort=empty;
  if (param != null) {
    processDBPort=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PASS.getName());
  String processDBPass=empty;
  if (param != null) {
    processDBPass=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.SCHEMA_DB.getName());
  String processDBSID=empty;
  if (param != null) {
    processDBSID=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.USER.getName());
  String processDBUser=empty;
  if (param != null) {
    processDBUser=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.PROPERTIES.getName());
  String processDBAdditionParameters=empty;
  if (param != null) {
    processDBAdditionParameters=(String)param.getValue();
  }
  param=process.getElementParameter(EParameterName.DB_VERSION.getName());
  String processDBVersion=empty;
  if (param != null) {
    processDBVersion=(String)param.getValue();
  }
  if (processDBType.equals(""String_Node_Str"")) {
    processDBSID=processDBName;
  }
  String dbURL=DatabaseConnStrUtil.getURLString(true,processDBType,processDBVersion,processHost,processDBUser,processDBPass,processDBPort,processDBSID,processDBFileName,processDBDatasouce,processDBFileName,processDBAdditionParameters);
  return dbURL;
}",0.9989837398373984
124148,"public List<ModuleNeeded> getModulesNeeded(){
  List<String> moduleNames=new ArrayList<String>();
  List<ModuleNeeded> componentImportNeedsList=new ArrayList<ModuleNeeded>();
  if (!isAlreadyLoad) {
    if (compType.getCODEGENERATION().getIMPORTS() != null) {
      EList emfImportList=compType.getCODEGENERATION().getIMPORTS().getIMPORT();
      info.getImportType().addAll(emfImportList);
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list);
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      List<String> componentList=info.getComponentNames();
      for (      IMultipleComponentManager multipleComponentManager : getMultipleComponentManagers()) {
        for (        IMultipleComponentItem multipleComponentItem : multipleComponentManager.getItemList()) {
          IComponent component=ComponentsFactoryProvider.getInstance().get(multipleComponentItem.getComponent());
          componentList.add(multipleComponentItem.getComponent());
          if (component == null) {
            continue;
          }
          for (          ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
            if (!moduleNames.contains(moduleNeeded.getModuleName())) {
              ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL());
              componentImportNeedsList.add(componentImportNeeds);
            }
          }
        }
      }
    }
  }
 else {
    if (info != null) {
      EList emfImportList=info.getImportType();
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list);
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      for (      String name : info.getComponentNames()) {
        IComponent component=ComponentsFactoryProvider.getInstance().get(name);
        if (component == null) {
          continue;
        }
        for (        ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
          if (!moduleNames.contains(moduleNeeded.getModuleName())) {
            ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL());
            componentImportNeedsList.add(componentImportNeeds);
          }
        }
      }
    }
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>());
    componentImportNeedsList.add(componentImportNeeds);
  }
  return componentImportNeedsList;
}","public List<ModuleNeeded> getModulesNeeded(){
  List<String> moduleNames=new ArrayList<String>();
  List<ModuleNeeded> componentImportNeedsList=new ArrayList<ModuleNeeded>();
  if (!isAlreadyLoad) {
    if (compType.getCODEGENERATION().getIMPORTS() != null) {
      EList emfImportList=compType.getCODEGENERATION().getIMPORTS().getIMPORT();
      info.getImportType().addAll(emfImportList);
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list,importType.getREQUIREDIF());
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      List<String> componentList=info.getComponentNames();
      for (      IMultipleComponentManager multipleComponentManager : getMultipleComponentManagers()) {
        for (        IMultipleComponentItem multipleComponentItem : multipleComponentManager.getItemList()) {
          IComponent component=ComponentsFactoryProvider.getInstance().get(multipleComponentItem.getComponent());
          componentList.add(multipleComponentItem.getComponent());
          if (component == null) {
            continue;
          }
          for (          ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
            if (!moduleNames.contains(moduleNeeded.getModuleName())) {
              ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL(),moduleNeeded.getRequiredIf());
              componentImportNeedsList.add(componentImportNeeds);
            }
          }
        }
      }
    }
  }
 else {
    if (info != null) {
      EList emfImportList=info.getImportType();
      for (int i=0; i < emfImportList.size(); i++) {
        IMPORTType importType=(IMPORTType)emfImportList.get(i);
        String msg=getTranslatedValue(importType.getNAME() + ""String_Node_Str"");
        if (msg.startsWith(Messages.KEY_NOT_FOUND_PREFIX)) {
          msg=Messages.getString(""String_Node_Str"");
        }
        List<String> list=getInstallURL(importType);
        ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),importType.getMODULE(),msg,importType.isREQUIRED(),list,importType.getREQUIREDIF());
        initBundleID(importType,componentImportNeeds);
        moduleNames.add(importType.getMODULE());
        componentImportNeeds.setShow(importType.isSHOW());
        componentImportNeedsList.add(componentImportNeeds);
      }
      for (      String name : info.getComponentNames()) {
        IComponent component=ComponentsFactoryProvider.getInstance().get(name);
        if (component == null) {
          continue;
        }
        for (        ModuleNeeded moduleNeeded : component.getModulesNeeded()) {
          if (!moduleNames.contains(moduleNeeded.getModuleName())) {
            ModuleNeeded componentImportNeeds=new ModuleNeeded(this.getName(),moduleNeeded.getModuleName(),moduleNeeded.getInformationMsg(),moduleNeeded.isRequired(),moduleNeeded.getInstallURL(),moduleNeeded.getRequiredIf());
            componentImportNeedsList.add(componentImportNeeds);
          }
        }
      }
    }
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
  }
  if (ArrayUtils.contains(JavaTypesManager.getJavaTypesLabels(),""String_Node_Str"") && ""String_Node_Str"".equals(name)) {
    ModuleNeeded componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
    componentImportNeeds=new ModuleNeeded(""String_Node_Str"",""String_Node_Str"",Messages.getString(""String_Node_Str""),true,new ArrayList<String>(),null);
    componentImportNeedsList.add(componentImportNeeds);
  }
  return componentImportNeedsList;
}",0.9865426150523344
124149,"private static void getNeededLibraries(final IProcess process,boolean withChildrens,Set<ProcessItem> searchItems,Set<String> neededLibraries,Set<String> bundleDefinedLibraries,boolean... isExportOSGI){
  boolean exportOSGI=false;
  if (isExportOSGI != null && isExportOSGI.length == 1) {
    exportOSGI=isExportOSGI[0];
  }
  IElementParameter headerParameter=process.getElementParameter(EParameterName.HEADER_LIBRARY.getName());
  if (headerParameter != null) {
    Object value=headerParameter.getValue();
    if (value != null) {
      String headerLibraries=(String)value;
      if (headerLibraries.indexOf(File.separatorChar) > 0 && headerLibraries.length() > headerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=headerLibraries.substring(headerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter footerParameter=process.getElementParameter(EParameterName.FOOTER_LIBRARY.getName());
  if (footerParameter != null) {
    Object value=footerParameter.getValue();
    if (value != null) {
      String footerLibraries=(String)value;
      if (footerLibraries.indexOf(File.separatorChar) > 0 && footerLibraries.length() > footerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=footerLibraries.substring(footerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter elementParameter=process.getElementParameter(EParameterName.DRIVER_JAR.getName());
  if (elementParameter != null && elementParameter.getFieldType() == EParameterFieldType.TABLE) {
    getModulsInTable(process,elementParameter,neededLibraries);
  }
  if (process instanceof IProcess2) {
    Item item=((IProcess2)process).getProperty().getItem();
    if (item instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededForRoutines=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)item);
      if (modulesNeededForRoutines != null) {
        for (        ModuleNeeded moduleNeeded : modulesNeededForRoutines) {
          neededLibraries.add(moduleNeeded.getModuleName());
        }
      }
    }
  }
  List<? extends INode> nodeList=process.getGeneratingNodes();
  for (  INode node : nodeList) {
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    for (    ModuleNeeded needed : moduleList) {
      if (needed.isRequired()) {
        if (!exportOSGI) {
          neededLibraries.add(needed.getModuleName());
        }
 else         if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
          neededLibraries.add(needed.getModuleName());
        }
 else {
          bundleDefinedLibraries.add(needed.getModuleName());
        }
      }
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType() == null) {
        continue;
      }
      if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
        if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
          neededLibraries.add(getModuleValue(process,(String)curParam.getValue()));
        }
      }
 else       if (curParam.getFieldType() == EParameterFieldType.TABLE) {
        getModulsInTable(process,curParam,neededLibraries);
      }
      if (curParam.isShow(node.getElementParameters())) {
        findMoreLibraries(process,neededLibraries,curParam,true);
      }
 else {
        findMoreLibraries(process,neededLibraries,curParam,false);
      }
    }
    if (withChildrens) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        IElementParameter processVersionParam=node.getElementParameter(EParameterName.PROCESS_TYPE_VERSION.getName());
        ProcessItem processItem=null;
        if (processVersionParam != null) {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue(),(String)processVersionParam.getValue());
        }
 else {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue());
        }
        String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
        if (processItem != null && !searchItems.contains(processItem)) {
          searchItems.add(processItem);
          JobInfo subJobInfo=new JobInfo(processItem,context);
          IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
          IProcess child=service.getProcessFromItem(subJobInfo.getProcessItem());
          JavaProcessUtil.getNeededLibraries(child,true,searchItems,neededLibraries,bundleDefinedLibraries,isExportOSGI);
        }
      }
    }
  }
}","private static void getNeededLibraries(final IProcess process,boolean withChildrens,Set<ProcessItem> searchItems,Set<String> neededLibraries,Set<String> bundleDefinedLibraries,boolean... isExportOSGI){
  boolean exportOSGI=false;
  if (isExportOSGI != null && isExportOSGI.length == 1) {
    exportOSGI=isExportOSGI[0];
  }
  IElementParameter headerParameter=process.getElementParameter(EParameterName.HEADER_LIBRARY.getName());
  if (headerParameter != null) {
    Object value=headerParameter.getValue();
    if (value != null) {
      String headerLibraries=(String)value;
      if (headerLibraries.indexOf(File.separatorChar) > 0 && headerLibraries.length() > headerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=headerLibraries.substring(headerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter footerParameter=process.getElementParameter(EParameterName.FOOTER_LIBRARY.getName());
  if (footerParameter != null) {
    Object value=footerParameter.getValue();
    if (value != null) {
      String footerLibraries=(String)value;
      if (footerLibraries.indexOf(File.separatorChar) > 0 && footerLibraries.length() > footerLibraries.lastIndexOf(File.separatorChar) + 2) {
        String substring=footerLibraries.substring(footerLibraries.lastIndexOf(File.separatorChar) + 2);
        if (!""String_Node_Str"".equals(substring)) {
          neededLibraries.add(getModuleValue(process,substring));
        }
      }
    }
  }
  IElementParameter elementParameter=process.getElementParameter(EParameterName.DRIVER_JAR.getName());
  if (elementParameter != null && elementParameter.getFieldType() == EParameterFieldType.TABLE) {
    getModulsInTable(process,elementParameter,neededLibraries);
  }
  if (process instanceof IProcess2) {
    Item item=((IProcess2)process).getProperty().getItem();
    if (item instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededForRoutines=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)item);
      if (modulesNeededForRoutines != null) {
        for (        ModuleNeeded moduleNeeded : modulesNeededForRoutines) {
          neededLibraries.add(moduleNeeded.getModuleName());
        }
      }
    }
  }
  List<? extends INode> nodeList=process.getGeneratingNodes();
  for (  INode node : nodeList) {
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    boolean flag=false;
    for (    ModuleNeeded needed : moduleList) {
      if (needed.getRequiredIf() != null) {
        flag=true;
      }
    }
    for (    ModuleNeeded needed : moduleList) {
      if (flag) {
        if (needed.isShowRequiredIf(node.getElementParameters())) {
          if (!exportOSGI) {
            neededLibraries.add(needed.getModuleName());
          }
 else           if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
            neededLibraries.add(needed.getModuleName());
          }
 else {
            bundleDefinedLibraries.add(needed.getModuleName());
          }
        }
      }
 else {
        if (needed.isRequired()) {
          if (!exportOSGI) {
            neededLibraries.add(needed.getModuleName());
          }
 else           if (needed.getBundleName() == null && needed.getBundleVersion() == null) {
            neededLibraries.add(needed.getModuleName());
          }
 else {
            bundleDefinedLibraries.add(needed.getModuleName());
          }
        }
      }
    }
    for (    IElementParameter curParam : node.getElementParameters()) {
      if (curParam.getFieldType() == null) {
        continue;
      }
      if (curParam.getFieldType().equals(EParameterFieldType.MODULE_LIST)) {
        if (curParam.getValue() != null && !""String_Node_Str"".equals(curParam.getValue())) {
          neededLibraries.add(getModuleValue(process,(String)curParam.getValue()));
        }
      }
 else       if (curParam.getFieldType() == EParameterFieldType.TABLE) {
        getModulsInTable(process,curParam,neededLibraries);
      }
      if (curParam.isShow(node.getElementParameters())) {
        findMoreLibraries(process,neededLibraries,curParam,true);
      }
 else {
        findMoreLibraries(process,neededLibraries,curParam,false);
      }
    }
    if (withChildrens) {
      if (node.getComponent().getName().equals(""String_Node_Str"")) {
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        IElementParameter processVersionParam=node.getElementParameter(EParameterName.PROCESS_TYPE_VERSION.getName());
        ProcessItem processItem=null;
        if (processVersionParam != null) {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue(),(String)processVersionParam.getValue());
        }
 else {
          processItem=ItemCacheManager.getProcessItem((String)processIdparam.getValue());
        }
        String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
        if (processItem != null && !searchItems.contains(processItem)) {
          searchItems.add(processItem);
          JobInfo subJobInfo=new JobInfo(processItem,context);
          IDesignerCoreService service=CorePlugin.getDefault().getDesignerCoreService();
          IProcess child=service.getProcessFromItem(subJobInfo.getProcessItem());
          JavaProcessUtil.getNeededLibraries(child,true,searchItems,neededLibraries,bundleDefinedLibraries,isExportOSGI);
        }
      }
    }
  }
}",0.9389196411528916
124150,"public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  Map<String,String> convertorMapper=tosLoginComposite.getConvertorMappper();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    convertorMapper.put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i].getLabel());
  }
  ListViewer projectListViewer=tosLoginComposite.getProjectListViewer();
  projectListViewer.setInput(new ArrayList(convertorMapper.values()));
  try {
    tosLoginComposite.setStatusArea();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (projectListViewer.getList().getItemCount() > 0) {
    projectListViewer.getList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}","public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  Map<String,String> convertorMapper=tosLoginComposite.getConvertorMapper();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    convertorMapper.put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i].getLabel());
  }
  ListViewer projectListViewer=tosLoginComposite.getProjectListViewer();
  projectListViewer.setInput(new ArrayList(convertorMapper.values()));
  try {
    tosLoginComposite.setStatusArea();
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  if (projectListViewer.getList().getItemCount() > 0) {
    projectListViewer.getList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}",0.9994556341861732
124151,"/** 
 * DOC jliu Comment method ""getDate"". <br> DB Type ---------> jtds driver return type<br> DATE -------------> nvarchar<br> DATETIME ---------> datetime<br> DATETIME2 --------> nvarchar<br> DTIME ------------> nvarchar<br> SMALLDATETIME ----> smalldatetime<br> DATETIMEOFFSET ---> nvarchar<br> TIMESTAMP --------> timestamp<br>
 * @param rsmd
 * @param rs
 * @param index
 * @return the java.util.Date convert from db
 * @throws SQLException
 */
public java.util.Date getDate(final java.sql.ResultSetMetaData rsmd,final java.sql.ResultSet rs,int index) throws SQLException {
  if (rs.getObject(index) == null) {
    return null;
  }
  if (columnDBTypeMapping.get(index) != null) {
switch (columnDBTypeMapping.get(index)) {
case STRING_TO_JAVA_SQL_DATE:
      return new java.util.Date(java.sql.Date.valueOf(rs.getString(index)).getTime());
case STRING_TO_JAVA_SQL_TIME:
    String tempDateString=rs.getString(index);
  tempDateString=tempDateString.indexOf(""String_Node_Str"") == -1 ? tempDateString : tempDateString.substring(0,tempDateString.indexOf(""String_Node_Str""));
return new java.util.Date(java.sql.Time.valueOf(tempDateString).getTime());
case STRING_TO_JAVA_SQL_TIMESTAMP:
return new java.util.Date(java.sql.Timestamp.valueOf(rs.getString(index)).getTime());
case JAVA_SQL_DATE:
return new java.util.Date(rs.getTimestamp(index).getTime());
default :
return null;
}
}
 else {
if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
String tempDateString=rs.getString(index);
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_DATE);
return new java.util.Date(java.sql.Date.valueOf(tempDateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae1) {
try {
tempDateString=tempDateString.indexOf(""String_Node_Str"") == -1 ? tempDateString : tempDateString.substring(0,tempDateString.indexOf(""String_Node_Str""));
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIME);
return new java.util.Date(java.sql.Time.valueOf(tempDateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae2) {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIMESTAMP);
return new java.util.Date(java.sql.Timestamp.valueOf(rs.getString(index)).getTime());
}
}
}
 else if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index)) || ""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
columnDBTypeMapping.put(index,JAVA_SQL_DATE);
return new java.util.Date(rs.getTimestamp(index).getTime());
}
}
return null;
}","/** 
 * DOC jliu Comment method ""getDate"". <br> DB Type ---------> jtds driver return type<br> DATE -------------> nvarchar<br> DATETIME ---------> datetime<br> DATETIME2 --------> nvarchar<br> DTIME ------------> nvarchar<br> SMALLDATETIME ----> smalldatetime<br> DATETIMEOFFSET ---> nvarchar<br> TIMESTAMP --------> timestamp<br>
 * @param rsmd
 * @param rs
 * @param index
 * @return the java.util.Date convert from db
 * @throws SQLException
 */
public java.util.Date getDate(final java.sql.ResultSetMetaData rsmd,final java.sql.ResultSet rs,int index) throws SQLException {
  if (rs.getObject(index) == null) {
    return null;
  }
  if (columnDBTypeMapping.get(index) != null) {
switch (columnDBTypeMapping.get(index)) {
case STRING_TO_JAVA_SQL_DATE:
      return new java.util.Date(java.sql.Date.valueOf(rs.getString(index)).getTime());
case STRING_TO_JAVA_SQL_TIMESTAMP:
    return new java.util.Date(java.sql.Timestamp.valueOf(rs.getString(index)).getTime());
case STRING_TO_JAVA_SQL_TIME:
  return new java.util.Date(java.sql.Timestamp.valueOf(DATE_STRING_FOR_TIME + rs.getString(index)).getTime());
case JAVA_SQL_DATE:
return new java.util.Date(rs.getTimestamp(index).getTime());
case DB_TYPE_DATETIMEOFFSET:
return parseDatetimeOffset(rs.getString(index));
default :
return null;
}
}
 else {
if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
String dateString=rs.getString(index);
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_DATE);
return new java.util.Date(java.sql.Date.valueOf(dateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae1) {
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIMESTAMP);
return new java.util.Date(java.sql.Timestamp.valueOf(dateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae2) {
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIME);
return new java.util.Date(java.sql.Timestamp.valueOf(DATE_STRING_FOR_TIME + dateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae3) {
columnDBTypeMapping.put(index,DB_TYPE_DATETIMEOFFSET);
return parseDatetimeOffset(dateString);
}
}
}
}
 else if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index)) || ""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
columnDBTypeMapping.put(index,JAVA_SQL_DATE);
return new java.util.Date(rs.getTimestamp(index).getTime());
}
}
return null;
}",0.4065040650406504
124152,"private void addWsdlNeedLib(RoutineItem routineItem){
  List<IMPORTType> wsdlNeedImport=new ArrayList<IMPORTType>();
  IMPORTType type1=ComponentFactory.eINSTANCE.createIMPORTType();
  type1.setMODULE(""String_Node_Str"");
  type1.setREQUIRED(true);
  type1.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type1);
  IMPORTType type2=ComponentFactory.eINSTANCE.createIMPORTType();
  type2.setMODULE(""String_Node_Str"");
  type2.setREQUIRED(true);
  type2.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type2);
  routineItem.getImports().addAll(wsdlNeedImport);
  try {
    CorePlugin.getDefault().getProxyRepositoryFactory().save(routineItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
}","private void addWsdlNeedLib(RoutineItem routineItem){
  List<IMPORTType> wsdlNeedImport=new ArrayList<IMPORTType>();
  IMPORTType type1=ComponentFactory.eINSTANCE.createIMPORTType();
  type1.setMODULE(""String_Node_Str"");
  type1.setREQUIRED(true);
  type1.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type1);
  IMPORTType type2=ComponentFactory.eINSTANCE.createIMPORTType();
  type2.setMODULE(""String_Node_Str"");
  type2.setREQUIRED(true);
  type2.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type2);
  routineItem.getImports().addAll(wsdlNeedImport);
  try {
    CorePlugin.getDefault().getProxyRepositoryFactory().save(routineItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
  CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<String>(),null);
}",0.945664739884393
124153,"public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectList().add(projectCollection[i].getLabel().toUpperCase());
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    try {
      tosLoginComposite.setStatusArea();
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (tosLoginComposite.getProjectList().getItemCount() > 0) {
    tosLoginComposite.getProjectList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}","public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectList().add(projectCollection[i].getLabel());
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    tosLoginComposite.getConvertorMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i].getLabel());
    try {
      tosLoginComposite.setStatusArea();
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (tosLoginComposite.getProjectList().getItemCount() > 0) {
    tosLoginComposite.getProjectList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}",0.8823529411764706
124154,"private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      projectList.add(pro.getLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}","private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      convertorMapper.put(pro.getTechnicalLabel(),pro.getLabel());
      projectList.add(convertorMapper.get(pro.getTechnicalLabel()));
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}",0.9358255451713396
124155,"private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                projectList.remove(p.getName());
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              projectList.add(newProject);
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection);
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}","private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                String name=convertorMapper.get(p.getName());
                if (name != null)                 projectList.remove(name);
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              convertorMapper.put(newProject.toUpperCase(),newProject);
              projectList.add(convertorMapper.get(newProject.toUpperCase()));
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection.toUpperCase());
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}",0.9807836661161988
124156,"public static long StringToLong(String strIn){
  if (null == strIn || strIn.length() == 0)   return -1l;
  return Long.valueOf(strIn);
}","public static long StringToLong(String strIn){
  if (null == strIn || strIn.length() == 0)   return -1l;
  if (strIn.length() > 18) {
    strIn=strIn.substring(0,18);
  }
  return Long.valueOf(strIn);
}",0.8047337278106509
124157,"@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if ((propName.equals(EParameterName.DBNAME.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName())) && elem instanceof Node) {
    Node node=(Node)elem;
    IElementParameter dqRulerParam=node.getElementParameter(""String_Node_Str"");
    if (dqRulerParam != null) {
      ITDQRuleService rulerService=null;
      try {
        rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
      }
 catch (      RuntimeException e) {
      }
      if (rulerService != null) {
        IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
        IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
        IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
        IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
        Object value=dqRulerParam.getValue();
        String previousDisplayName=null;
        if (value != null && !""String_Node_Str"".equals(value) && dqRulerParam.getListItemsValue().length > 0) {
          int ruleIndex=dqRulerParam.getIndexOfItemFromList((String)value);
          previousDisplayName=dqRulerParam.getListItemsDisplayName()[ruleIndex];
        }
        rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,dqRulerParam);
        if (previousDisplayName != null) {
          String[] names=dqRulerParam.getListItemsDisplayName();
          Integer valueIndex=null;
          for (int i=0; i < names.length; i++) {
            if (previousDisplayName.equals(names[i])) {
              valueIndex=i;
            }
          }
          if (valueIndex != null) {
            dqRulerParam.setValue(dqRulerParam.getListItemsValue()[valueIndex]);
          }
 else {
            dqRulerParam.setValue(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}","@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}",0.9126631678105236
124158,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  if (realDBType != null) {
    dbType=realDBType;
  }
  if (node != null && node instanceof INode) {
    process=((INode)node).getProcess();
  }
  if (this.realTableId != null && this.dbNameAndDbTypeMap.containsKey(this.realTableId)) {
    dbType=this.dbNameAndDbTypeMap.get(this.realTableId);
  }
  if (dbType == null || dbType.equals(""String_Node_Str"")) {
    IElementParameter ptParam=node.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (ptParam != null && ptParam.getRepositoryValue() != null) {
      if (ptParam.getRepositoryValue().endsWith(EDatabaseTypeName.GENERAL_JDBC.getProduct())) {
        dbType=EDatabaseTypeName.GENERAL_JDBC.getDisplayName();
      }
    }
  }
  if (dbType != null && dbType.equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    String driverClassName=node.getElementParameter(""String_Node_Str"").getValue().toString();
    driverClassName=TalendTextUtils.removeQuotes(driverClassName);
    if (driverClassName != null && !""String_Node_Str"".equals(driverClassName)) {
      boolean isContextModeDriverClass=ContextParameterUtils.containContextVariables(driverClassName);
      if (isContextModeDriverClass) {
        driverClassName=JavaProcessUtil.getContextOriginalValue(process,driverClassName);
      }
    }
    String driverJarName=node.getElementParameter(""String_Node_Str"").getValue().toString();
    if (driverJarName != null && driverJarName.startsWith(""String_Node_Str"") && driverJarName.endsWith(""String_Node_Str"")) {
      driverJarName=driverJarName.substring(1,driverJarName.length() - 1);
      if (driverJarName != null && driverJarName.startsWith(""String_Node_Str"") && driverJarName.endsWith(""String_Node_Str"")) {
        driverJarName=driverJarName.substring(1,driverJarName.length() - 1);
      }
    }
    if (driverJarName != null && !""String_Node_Str"".equals(driverJarName)) {
      boolean isContextMode=ContextParameterUtils.containContextVariables(driverJarName);
      if (isContextMode) {
        driverJarName=JavaProcessUtil.getContextOriginalValue(process,driverJarName);
      }
      dbType=ExtractMetaDataUtils.getDbTypeByClassNameAndDriverJar(driverClassName,driverJarName);
    }
 else {
      dbType=ExtractMetaDataUtils.getDbTypeByClassName(driverClassName);
    }
    DatabaseConnection dbConn=null;
    if (dbType == null) {
      if (conn != null) {
        if (conn instanceof DatabaseConnection) {
          dbConn=(DatabaseConnection)conn;
        }
        driverClassName=DatabaseConnectionParameterUtil.getTrueParamValue(dbConn,driverClassName);
        dbType=ExtractMetaDataUtils.getDbTypeByClassName(driverClassName);
      }
    }
  }
  if (dbNameAndSchemaMap != null) {
    schema=this.dbNameAndSchemaMap.get(this.realTableId);
  }
  String propertyType=(String)node.getPropertyValue(EParameterName.PROPERTY_TYPE.getName());
  boolean isTeradata=false;
  if (dbType != null) {
    isTeradata=dbType.equals(EDatabaseTypeName.TERADATA.getDisplayName());
  }
  if (propertyType != null && !propertyType.equals(EmfComponent.REPOSITORY)) {
    for (    IElementParameter param : this.node.getElementParameters()) {
      if (param.getRepositoryValue() != null) {
        if ((!isTeradata && param.getRepositoryValue().equals(""String_Node_Str"")) || (isTeradata && param.getRepositoryValue().equals(""String_Node_Str""))) {
          schema=(String)param.getValue();
          schema=schema.replace(""String_Node_Str"",""String_Node_Str"");
          schema=schema.replace(""String_Node_Str"",""String_Node_Str"");
          break;
        }
      }
    }
  }
 else   if (schema == null) {
    IElementParameter param=node.getElementParameter(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
    if (param != null) {
      try {
        IRepositoryViewObject object=DesignerPlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().getLastVersion((String)param.getValue());
        if (object != null) {
          Item item=object.getProperty().getItem();
          if (item != null && item instanceof DatabaseConnectionItem) {
            if (isTeradata) {
              schema=(String)RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)item).getConnection(),""String_Node_Str"",null);
            }
 else {
              schema=(String)RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)item).getConnection(),""String_Node_Str"",null);
            }
            schema=TalendTextUtils.removeQuotes(schema);
          }
        }
      }
 catch (      PersistenceException e) {
      }
    }
  }
  if (conn instanceof DatabaseConnection && conn.isContextMode()) {
    schema=DatabaseConnectionParameterUtil.getContextTrueValue((DatabaseConnection)conn,schema);
  }
  String newQuery=null;
  realTableName=QueryUtil.getTableName(node,newOutputMetadataTable,schema,dbType,realTableName);
  if (realTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && realTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && realTableName.length() > 2) {
    realTableName=realTableName.substring(1,realTableName.length() - 1);
  }
  newQuery=TalendTextUtils.addSQLQuotes(QueryUtil.generateNewQuery(node,newOutputMetadataTable,dbType,schema,realTableName));
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  IElementParameter dqRuler=node.getElementParameter(""String_Node_Str"");
  String newQuery=""String_Node_Str"";
  if (dqRuler != null || !""String_Node_Str"".equals(dqRuler.getValue())) {
    newQuery=generateNewQueryFromDQRuler(dqRuler);
    if (newQuery == null || ""String_Node_Str"".equals(newQuery)) {
      newQuery=generateNewQuery();
    }
  }
 else {
    newQuery=generateNewQuery();
  }
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}",0.2737837837837837
124159,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameter(EParameterName.TABLE.getName());
      List<IMetadataTable> metadataList=node.getMetadataList();
      IMetadataTable metadataTable=null;
      if (metadataList != null && !metadataList.isEmpty()) {
        metadataTable=metadataList.get(0);
      }
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,metadataTable,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.9486255924170616
124160,"@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}","@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}",0.8344988344988346
124161,"@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}","@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}",0.7436823104693141
124162,"public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectList().add(projectCollection[i].getLabel().toUpperCase());
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    try {
      tosLoginComposite.setStatusArea();
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (tosLoginComposite.getProjectList().getItemCount() > 0) {
    tosLoginComposite.getProjectList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}","public void advanced(){
  stackLayout.topControl=tosLoginComposite;
  base.layout();
  Project[] projectCollection=tosLoginComposite.readProject();
  for (int i=0; i < projectCollection.length; i++) {
    tosLoginComposite.getProjectList().add(projectCollection[i].getLabel());
    tosLoginComposite.getProjectMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i]);
    tosLoginComposite.getConvertorMap().put(projectCollection[i].getLabel().toUpperCase(),projectCollection[i].getLabel());
    try {
      tosLoginComposite.setStatusArea();
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (tosLoginComposite.getProjectList().getItemCount() > 0) {
    tosLoginComposite.getProjectList().select(0);
    tosLoginComposite.enableOpenAndDelete(true);
  }
}",0.8823529411764706
124163,"private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      projectList.add(pro.getLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}","private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      convertorMapper.put(pro.getTechnicalLabel(),pro.getLabel());
      projectList.add(convertorMapper.get(pro.getTechnicalLabel()));
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}",0.9358255451713396
124164,"private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                projectList.remove(p.getName());
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              projectList.add(newProject);
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection);
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}","private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                String name=convertorMapper.get(p.getName());
                if (name != null) {
                  projectList.remove(name);
                }
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              convertorMapper.put(newProject.toUpperCase(),newProject);
              projectList.add(convertorMapper.get(newProject.toUpperCase()));
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection.toUpperCase());
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}",0.97886690647482
124165,"private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}","private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    ERepositoryObjectType type=object.getRepositoryNode().getContentType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else       if (isDocumentStatus()) {
        if (ERepositoryObjectType.DOCUMENTATION.equals(type) || ERepositoryObjectType.BUSINESS_PROCESS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}",0.9440264268673152
124166,"private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS) && !type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}","private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}",0.9933296275708728
124167,"private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        ERepositoryObjectType type=object.getRepositoryNode().getContentType();
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}","private void addItemElements(List<RepositoryObject> elements){
  if (elements == null || elements.isEmpty()) {
    return;
  }
  final Color redColor=Display.getDefault().getSystemColor(SWT.COLOR_RED);
  for (  final RepositoryObject object : elements) {
    if (object.isDeleted()) {
      continue;
    }
    TableItem tableItem=null;
    ERepositoryObjectType objectType=object.getRepositoryNode().getObjectType();
    ERepositoryObjectType type=object.getRepositoryNode().getContentType();
    if (!objectType.equals(ERepositoryObjectType.JOB_DOC) && !objectType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      if (isTechinalStatus()) {
        if (!ERepositoryObjectType.DOCUMENTATION.equals(type) && !ERepositoryObjectType.BUSINESS_PROCESS.equals(type) && !ERepositoryObjectType.JOBLETS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else       if (isDocumentStatus()) {
        if (ERepositoryObjectType.DOCUMENTATION.equals(type) || ERepositoryObjectType.BUSINESS_PROCESS.equals(type)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
 else {
        itemTable.setRedraw(false);
        tableItem=new TableItem(itemTable,SWT.NONE);
      }
    }
 else {
      if (isDocumentStatus()) {
        if (type.equals(ERepositoryObjectType.JOBS) || type.equals(ERepositoryObjectType.JOBLETS)) {
          itemTable.setRedraw(false);
          tableItem=new TableItem(itemTable,SWT.NONE);
        }
      }
    }
    if (tableItem != null) {
      tableItem.setData(object);
      try {
        statusHelper.getStatusList(object.getProperty());
      }
 catch (      PersistenceException e1) {
      }
      object.getProperty().setOldStatusCode(statusHelper.getStatusCode(object.getStatusCode()));
      ERepositoryObjectType itemType=object.getRepositoryObjectType();
      tableItem.setImage(getItemsImage(CoreImageProvider.getIcon(itemType)));
      tableItem.setText(object.getLabel());
      tableItem.setText(1,statusHelper.getStatusLabel(object.getStatusCode()));
      TableEditor versionEditor=null;
      if (isFixedstatus()) {
        String version=statusCombo.getText();
        tableItem.setText(2,version);
        if (!object.getProperty().getOldStatusCode().equals(statusHelper.getStatusCode(version))) {
          tableItem.setForeground(2,redColor);
        }
 else {
          tableItem.setForeground(2,Display.getDefault().getSystemColor(SWT.COLOR_BLACK));
        }
      }
 else {
        versionEditor=new TableEditor(itemTable);
        Composite versionComposit=new Composite(itemTable,SWT.NONE);
        GridLayout layout=new GridLayout(3,false);
        layout.horizontalSpacing=1;
        layout.verticalSpacing=0;
        layout.marginHeight=0;
        layout.marginWidth=0;
        versionComposit.setLayout(layout);
        final CCombo statusItemCombo=new CCombo(versionComposit,SWT.BORDER | SWT.READ_ONLY);
        GridData data=new GridData(GridData.FILL_HORIZONTAL);
        statusItemCombo.setLayoutData(data);
        statusItemCombo.setEditable(false);
        if (!type.equals(ERepositoryObjectType.DOCUMENTATION) && !type.equals(ERepositoryObjectType.BUSINESS_PROCESS)) {
          statusItemCombo.setItems(toArray(technicalStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
 else {
          statusItemCombo.setItems(toArray(documentStatusList));
          statusItemCombo.select(0);
          if (!object.getProperty().getOldStatusCode().equals(""String_Node_Str"")) {
            statusItemCombo.setForeground(redColor);
          }
 else {
            statusItemCombo.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
        }
        statusItemCombo.addSelectionListener(new SelectionAdapter(){
          public void widgetSelected(          SelectionEvent e){
            String version=statusItemCombo.getText();
            String status=statusHelper.getStatusCode(version);
            if (!status.equals(object.getProperty().getOldStatusCode())) {
              statusItemCombo.setForeground(redColor);
            }
            object.getProperty().setStatusCode(statusHelper.getStatusCode(version));
          }
        }
);
        versionEditor.minimumWidth=itemTable.getColumn(2).getWidth();
        versionEditor.setEditor(versionComposit,tableItem,2);
      }
      TableEditor delEditor=new TableEditor(itemTable);
      Label delLabel=new Label(itemTable,SWT.CENTER);
      delLabel.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
      delLabel.setImage(ImageProvider.getImage(EImage.DELETE_ICON));
      delLabel.setToolTipText(Messages.getString(""String_Node_Str""));
      delLabel.pack();
      addLabelMouseListener(delLabel,object,tableItem);
      delEditor.minimumWidth=25;
      delEditor.horizontalAlignment=SWT.CENTER;
      delEditor.setEditor(delLabel,tableItem,3);
      if (isFixedstatus()) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{delEditor});
      }
 else       if (versionEditor != null) {
        tableItem.setData(ITEM_EDITOR_KEY,new TableEditor[]{versionEditor,delEditor});
      }
      itemTable.setRedraw(true);
    }
  }
}",0.9440264268673152
124168,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameter(EParameterName.TABLE.getName());
      List<IMetadataTable> metadataList=node.getMetadataList();
      IMetadataTable metadataTable=null;
      if (metadataList != null && !metadataList.isEmpty()) {
        metadataTable=metadataList.get(0);
      }
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,metadataTable,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
      List<IMetadataTable> metadataList=node.getMetadataList();
      IMetadataTable metadataTable=null;
      if (metadataList != null && !metadataList.isEmpty()) {
        metadataTable=metadataList.get(0);
      }
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,metadataTable,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.99346167816927
124169,"@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}","@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    int featureID=notification.getFeatureID(Properties.class);
    if (featureID == PropertiesPackage.PROPERTY__INFORMATIONS) {
      return;
    }
 else     if (featureID == PropertiesPackage.PROPERTY__MAX_INFORMATION_LEVEL) {
      updateTitleImage();
      return;
    }
    if (Display.getCurrent() != null) {
      propertyIsDirty=true;
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
}",0.8344988344988346
124170,"@Override public void notifyChanged(Notification notification){
  if (notification.getEventType() != Notification.REMOVING_ADAPTER) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}","@Override public void notifyChanged(Notification notification){
  Object oldValue=notification.getOldValue();
  Object newValue=notification.getNewValue();
  boolean changed=(newValue == null && oldValue != null) || (newValue != null && !newValue.equals(oldValue));
  if (notification.getEventType() != Notification.REMOVING_ADAPTER && changed) {
    propertyIsDirty=true;
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        firePropertyChange(IEditorPart.PROP_DIRTY);
      }
    }
);
  }
}",0.7436823104693141
124171,"private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      projectList.add(pro.getTechnicalLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}","private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      projectList.add(pro.getLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}",0.994067237969677
124172,"private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                projectList.remove(p.getName());
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              projectList.add(newProject.toUpperCase());
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection);
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}","private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                projectList.remove(p.getName());
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              projectList.add(newProject);
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection);
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}",0.998933414596983
124173,"private void addWsdlNeedLib(RoutineItem routineItem){
  List<IMPORTType> wsdlNeedImport=new ArrayList<IMPORTType>();
  IMPORTType type1=ComponentFactory.eINSTANCE.createIMPORTType();
  type1.setMODULE(""String_Node_Str"");
  type1.setREQUIRED(true);
  type1.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type1);
  IMPORTType type2=ComponentFactory.eINSTANCE.createIMPORTType();
  type2.setMODULE(""String_Node_Str"");
  type2.setREQUIRED(true);
  type2.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type2);
  routineItem.getImports().addAll(wsdlNeedImport);
  try {
    CorePlugin.getDefault().getProxyRepositoryFactory().save(routineItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
}","private void addWsdlNeedLib(RoutineItem routineItem){
  List<IMPORTType> wsdlNeedImport=new ArrayList<IMPORTType>();
  IMPORTType type1=ComponentFactory.eINSTANCE.createIMPORTType();
  type1.setMODULE(""String_Node_Str"");
  type1.setREQUIRED(true);
  type1.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type1);
  IMPORTType type2=ComponentFactory.eINSTANCE.createIMPORTType();
  type2.setMODULE(""String_Node_Str"");
  type2.setREQUIRED(true);
  type2.setNAME(routineItem.getProperty().getLabel());
  wsdlNeedImport.add(type2);
  routineItem.getImports().addAll(wsdlNeedImport);
  try {
    CorePlugin.getDefault().getProxyRepositoryFactory().save(routineItem);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
  CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<String>(),null);
}",0.945664739884393
124174,"private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      projectList.add(pro.getTechnicalLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}","private void refresh(){
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  Project[] projects=null;
  try {
    projects=repositoryFactory.readProject();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
catch (  BusinessException e1) {
    ExceptionHandler.process(e1);
  }
  projectList.removeAll();
  projectsMap.clear();
  if (projects != null) {
    for (int i=0; i < projects.length; i++) {
      Project pro=projects[i];
      projectList.add(pro.getLabel());
      projectsMap.put(pro.getTechnicalLabel(),pro);
      sortProjects();
      enableOpenAndDelete(true);
    }
  }
  try {
    setStatusArea();
  }
 catch (  PersistenceException e1) {
    ExceptionHandler.process(e1);
  }
}",0.994067237969677
124175,"private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                projectList.remove(p.getName());
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              projectList.add(newProject.toUpperCase());
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection);
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}","private void addListener(){
  createButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Project project=null;
      ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
      NewProjectWizard newPrjWiz=new NewProjectWizard(null);
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        project=newPrjWiz.getProject();
        refresh();
      }
    }
  }
);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Shell activeShell=Display.getCurrent().getActiveShell();
      SelectDeleteProjectDialog dialog=new SelectDeleteProjectDialog(activeShell,true);
      if (dialog.open() == Dialog.OK) {
        CorePlugin.getDefault().getRepositoryLocalProviderService().resetXmiResourceSet();
        java.util.List<Object> delList=dialog.getDelList();
        if (delList.size() != 0) {
          for (          Object obj : delList) {
            if (obj instanceof IProject) {
              IProject p=(IProject)obj;
              if (projectsMap.containsKey(p.getName())) {
                projectsMap.remove(p.getName());
                projectList.remove(p.getName());
                if (projectList.getItemCount() == 0) {
                  enableOpenAndDelete(false);
                }
 else                 if (projectList.getSelection().length == 0) {
                  projectList.select(0);
                }
                try {
                  setStatusArea();
                }
 catch (                PersistenceException e1) {
                  ExceptionHandler.process(e1);
                }
              }
            }
          }
        }
      }
    }
  }
);
  importButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction.getInstance().setShell(getShell());
      ImportProjectAsAction.getInstance().run();
      String newProject=ImportProjectAsAction.getInstance().getProjectName();
      if (newProject != null) {
        ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
        Project[] projects=null;
        try {
          projects=repositoryFactory.readProject();
        }
 catch (        PersistenceException e1) {
          e1.printStackTrace();
        }
catch (        BusinessException e1) {
          e1.printStackTrace();
        }
        if (!projectsMap.containsKey(newProject.toUpperCase())) {
          for (int i=0; i < projects.length; i++) {
            if (projects[i].getLabel().toUpperCase().equals(newProject.toUpperCase())) {
              projectsMap.put(newProject.toUpperCase(),projects[i]);
              projectList.add(newProject);
              sortProjects();
              enableOpenAndDelete(true);
              try {
                setStatusArea();
              }
 catch (              PersistenceException e1) {
                ExceptionHandler.process(e1);
              }
            }
          }
        }
      }
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              ProxyRepositoryFactory.getInstance().initialize();
            }
 catch (            PersistenceException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        new ProgressMonitorDialog(getShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e1) {
        e1.getTargetException();
      }
catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  changeButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      DirectoryDialog dirDialog=new DirectoryDialog(dialog.getShell());
      String path=dirDialog.open();
      if (path == null || ""String_Node_Str"".equals(path)) {
        workspaceText.setText(getRecentWorkSpace());
        loginComposite.getConnection().setWorkSpace(getRecentWorkSpace());
      }
 else {
        workspaceText.setText(path);
        loginComposite.getConnection().setWorkSpace(path);
        if (!path.equals(oldPath)) {
          oldPath=path;
          restartBut.setVisible(true);
          openButton.setEnabled(false);
          deleteButton.setEnabled(false);
          createButton.setEnabled(false);
          importButton.setEnabled(false);
          demoProjectButton.setEnabled(false);
          changeButton.setEnabled(false);
        }
      }
      PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
      java.util.List<ConnectionBean> list=new ArrayList<ConnectionBean>();
      list.add(loginComposite.getConnection());
      prefManipulator.saveConnections(list);
      loginComposite.storedConnections=list;
      perReader.saveConnections(loginComposite.storedConnections);
      if (!loginComposite.isWorkSpaceSame()) {
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
      }
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      LoginComposite.isRestart=true;
      perReader.saveLastConnectionBean(loginComposite.getConnection());
      dialog.okPressed();
    }
  }
);
  openButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Context ctx=CorePlugin.getContext();
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,loginComposite.getRepositoryContext());
      if (projectList.getSelectionCount() > 0) {
        String selection=projectList.getSelection()[0];
        if (selection != null && !selection.equals(""String_Node_Str"")) {
          Project project=(Project)projectsMap.get(selection);
          boolean flag=dialog.logIn(project);
          if (flag) {
            dialog.okPressed();
          }
        }
      }
    }
  }
);
  demoProjectButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ImportDemoProjectAction action=ImportDemoProjectAction.getInstance();
      action.setShell(getShell());
      action.run();
      refresh();
    }
  }
);
}",0.998933414596983
124176,"/** 
 * DOC jliu Comment method ""getDate"". <br> DB Type ---------> jtds driver return type<br> DATE -------------> nvarchar<br> DATETIME ---------> datetime<br> DATETIME2 --------> nvarchar<br> DTIME ------------> nvarchar<br> SMALLDATETIME ----> smalldatetime<br> DATETIMEOFFSET ---> nvarchar<br> TIMESTAMP --------> timestamp<br>
 * @param rsmd
 * @param rs
 * @param index
 * @return the java.util.Date convert from db
 * @throws SQLException
 */
public java.util.Date getDate(final java.sql.ResultSetMetaData rsmd,final java.sql.ResultSet rs,int index) throws SQLException {
  if (rs.getObject(index) == null) {
    return null;
  }
  if (columnDBTypeMapping.get(index) != null) {
switch (columnDBTypeMapping.get(index)) {
case STRING_TO_JAVA_SQL_DATE:
      return new java.util.Date(java.sql.Date.valueOf(rs.getString(index)).getTime());
case STRING_TO_JAVA_SQL_TIME:
    String tempDateString=rs.getString(index);
  tempDateString=tempDateString.indexOf(""String_Node_Str"") == -1 ? tempDateString : tempDateString.substring(0,tempDateString.indexOf(""String_Node_Str""));
return new java.util.Date(java.sql.Time.valueOf(tempDateString).getTime());
case STRING_TO_JAVA_SQL_TIMESTAMP:
return new java.util.Date(java.sql.Timestamp.valueOf(rs.getString(index)).getTime());
case JAVA_SQL_DATE:
return new java.util.Date(rs.getTimestamp(index).getTime());
default :
return null;
}
}
 else {
if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
String tempDateString=rs.getString(index);
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_DATE);
return new java.util.Date(java.sql.Date.valueOf(tempDateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae1) {
try {
tempDateString=tempDateString.indexOf(""String_Node_Str"") == -1 ? tempDateString : tempDateString.substring(0,tempDateString.indexOf(""String_Node_Str""));
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIME);
return new java.util.Date(java.sql.Time.valueOf(tempDateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae2) {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIMESTAMP);
return new java.util.Date(java.sql.Timestamp.valueOf(rs.getString(index)).getTime());
}
}
}
 else if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index)) || ""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
columnDBTypeMapping.put(index,JAVA_SQL_DATE);
return new java.util.Date(rs.getTimestamp(index).getTime());
}
}
return null;
}","/** 
 * DOC jliu Comment method ""getDate"". <br> DB Type ---------> jtds driver return type<br> DATE -------------> nvarchar<br> DATETIME ---------> datetime<br> DATETIME2 --------> nvarchar<br> DTIME ------------> nvarchar<br> SMALLDATETIME ----> smalldatetime<br> DATETIMEOFFSET ---> nvarchar<br> TIMESTAMP --------> timestamp<br>
 * @param rsmd
 * @param rs
 * @param index
 * @return the java.util.Date convert from db
 * @throws SQLException
 */
public java.util.Date getDate(final java.sql.ResultSetMetaData rsmd,final java.sql.ResultSet rs,int index) throws SQLException {
  if (rs.getObject(index) == null) {
    return null;
  }
  if (columnDBTypeMapping.get(index) != null) {
switch (columnDBTypeMapping.get(index)) {
case STRING_TO_JAVA_SQL_DATE:
      return new java.util.Date(java.sql.Date.valueOf(rs.getString(index)).getTime());
case STRING_TO_JAVA_SQL_TIMESTAMP:
    return new java.util.Date(java.sql.Timestamp.valueOf(rs.getString(index)).getTime());
case STRING_TO_JAVA_SQL_TIME:
  return new java.util.Date(java.sql.Timestamp.valueOf(DATE_STRING_FOR_TIME + rs.getString(index)).getTime());
case JAVA_SQL_DATE:
return new java.util.Date(rs.getTimestamp(index).getTime());
case DB_TYPE_DATETIMEOFFSET:
return parseDatetimeOffset(rs.getString(index));
default :
return null;
}
}
 else {
if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
String dateString=rs.getString(index);
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_DATE);
return new java.util.Date(java.sql.Date.valueOf(dateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae1) {
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIMESTAMP);
return new java.util.Date(java.sql.Timestamp.valueOf(dateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae2) {
try {
columnDBTypeMapping.put(index,STRING_TO_JAVA_SQL_TIME);
return new java.util.Date(java.sql.Timestamp.valueOf(DATE_STRING_FOR_TIME + dateString).getTime());
}
 catch (java.lang.IllegalArgumentException iae3) {
columnDBTypeMapping.put(index,DB_TYPE_DATETIMEOFFSET);
return parseDatetimeOffset(dateString);
}
}
}
}
 else if (""String_Node_Str"".equals(rsmd.getColumnTypeName(index)) || ""String_Node_Str"".equals(rsmd.getColumnTypeName(index))) {
columnDBTypeMapping.put(index,JAVA_SQL_DATE);
return new java.util.Date(rs.getTimestamp(index).getTime());
}
}
return null;
}",0.4065040650406504
124177,"@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if ((propName.equals(EParameterName.DBNAME.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName())) && elem instanceof Node) {
    Node node=(Node)elem;
    IElementParameter dqRulerParam=node.getElementParameter(""String_Node_Str"");
    if (dqRulerParam != null) {
      ITDQRuleService rulerService=null;
      try {
        rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
      }
 catch (      RuntimeException e) {
      }
      if (rulerService != null) {
        IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
        IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
        IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
        IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
        Object value=dqRulerParam.getValue();
        String previousDisplayName=null;
        if (value != null && !""String_Node_Str"".equals(value) && dqRulerParam.getListItemsValue().length > 0) {
          int ruleIndex=dqRulerParam.getIndexOfItemFromList((String)value);
          previousDisplayName=dqRulerParam.getListItemsDisplayName()[ruleIndex];
        }
        rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,dqRulerParam);
        if (previousDisplayName != null) {
          String[] names=dqRulerParam.getListItemsDisplayName();
          Integer valueIndex=null;
          for (int i=0; i < names.length; i++) {
            if (previousDisplayName.equals(names[i])) {
              valueIndex=i;
            }
          }
          if (valueIndex != null) {
            dqRulerParam.setValue(dqRulerParam.getListItemsValue()[valueIndex]);
          }
 else {
            dqRulerParam.setValue(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}","@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}",0.9126631678105236
124178,"@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  if (realDBType != null) {
    dbType=realDBType;
  }
  if (node != null && node instanceof INode) {
    process=((INode)node).getProcess();
  }
  if (this.realTableId != null && this.dbNameAndDbTypeMap.containsKey(this.realTableId)) {
    dbType=this.dbNameAndDbTypeMap.get(this.realTableId);
  }
  if (dbType == null || dbType.equals(""String_Node_Str"")) {
    IElementParameter ptParam=node.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (ptParam != null && ptParam.getRepositoryValue() != null) {
      if (ptParam.getRepositoryValue().endsWith(EDatabaseTypeName.GENERAL_JDBC.getProduct())) {
        dbType=EDatabaseTypeName.GENERAL_JDBC.getDisplayName();
      }
    }
  }
  if (dbType != null && dbType.equals(EDatabaseTypeName.GENERAL_JDBC.getDisplayName())) {
    String driverClassName=node.getElementParameter(""String_Node_Str"").getValue().toString();
    driverClassName=TalendTextUtils.removeQuotes(driverClassName);
    if (driverClassName != null && !""String_Node_Str"".equals(driverClassName)) {
      boolean isContextModeDriverClass=ContextParameterUtils.containContextVariables(driverClassName);
      if (isContextModeDriverClass) {
        driverClassName=JavaProcessUtil.getContextOriginalValue(process,driverClassName);
      }
    }
    String driverJarName=node.getElementParameter(""String_Node_Str"").getValue().toString();
    if (driverJarName != null && driverJarName.startsWith(""String_Node_Str"") && driverJarName.endsWith(""String_Node_Str"")) {
      driverJarName=driverJarName.substring(1,driverJarName.length() - 1);
      if (driverJarName != null && driverJarName.startsWith(""String_Node_Str"") && driverJarName.endsWith(""String_Node_Str"")) {
        driverJarName=driverJarName.substring(1,driverJarName.length() - 1);
      }
    }
    if (driverJarName != null && !""String_Node_Str"".equals(driverJarName)) {
      boolean isContextMode=ContextParameterUtils.containContextVariables(driverJarName);
      if (isContextMode) {
        driverJarName=JavaProcessUtil.getContextOriginalValue(process,driverJarName);
      }
      dbType=ExtractMetaDataUtils.getDbTypeByClassNameAndDriverJar(driverClassName,driverJarName);
    }
 else {
      dbType=ExtractMetaDataUtils.getDbTypeByClassName(driverClassName);
    }
    DatabaseConnection dbConn=null;
    if (dbType == null) {
      if (conn != null) {
        if (conn instanceof DatabaseConnection) {
          dbConn=(DatabaseConnection)conn;
        }
        driverClassName=DatabaseConnectionParameterUtil.getTrueParamValue(dbConn,driverClassName);
        dbType=ExtractMetaDataUtils.getDbTypeByClassName(driverClassName);
      }
    }
  }
  if (dbNameAndSchemaMap != null) {
    schema=this.dbNameAndSchemaMap.get(this.realTableId);
  }
  String propertyType=(String)node.getPropertyValue(EParameterName.PROPERTY_TYPE.getName());
  boolean isTeradata=false;
  if (dbType != null) {
    isTeradata=dbType.equals(EDatabaseTypeName.TERADATA.getDisplayName());
  }
  if (propertyType != null && !propertyType.equals(EmfComponent.REPOSITORY)) {
    for (    IElementParameter param : this.node.getElementParameters()) {
      if (param.getRepositoryValue() != null) {
        if ((!isTeradata && param.getRepositoryValue().equals(""String_Node_Str"")) || (isTeradata && param.getRepositoryValue().equals(""String_Node_Str""))) {
          schema=(String)param.getValue();
          schema=schema.replace(""String_Node_Str"",""String_Node_Str"");
          schema=schema.replace(""String_Node_Str"",""String_Node_Str"");
          break;
        }
      }
    }
  }
 else   if (schema == null) {
    IElementParameter param=node.getElementParameter(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
    if (param != null) {
      try {
        IRepositoryViewObject object=DesignerPlugin.getDefault().getRepositoryService().getProxyRepositoryFactory().getLastVersion((String)param.getValue());
        if (object != null) {
          Item item=object.getProperty().getItem();
          if (item != null && item instanceof DatabaseConnectionItem) {
            if (isTeradata) {
              schema=(String)RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)item).getConnection(),""String_Node_Str"",null);
            }
 else {
              schema=(String)RepositoryToComponentProperty.getValue(((DatabaseConnectionItem)item).getConnection(),""String_Node_Str"",null);
            }
            schema=TalendTextUtils.removeQuotes(schema);
          }
        }
      }
 catch (      PersistenceException e) {
      }
    }
  }
  if (conn instanceof DatabaseConnection && conn.isContextMode()) {
    schema=DatabaseConnectionParameterUtil.getContextTrueValue((DatabaseConnection)conn,schema);
  }
  String newQuery=null;
  realTableName=QueryUtil.getTableName(node,newOutputMetadataTable,schema,dbType,realTableName);
  if (realTableName.startsWith(TalendTextUtils.QUOTATION_MARK) && realTableName.endsWith(TalendTextUtils.QUOTATION_MARK) && realTableName.length() > 2) {
    realTableName=realTableName.substring(1,realTableName.length() - 1);
  }
  newQuery=TalendTextUtils.addSQLQuotes(QueryUtil.generateNewQuery(node,newOutputMetadataTable,dbType,schema,realTableName));
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void execute(){
  IElementParameter dqRuler=node.getElementParameter(""String_Node_Str"");
  String newQuery=""String_Node_Str"";
  if (dqRuler != null || !""String_Node_Str"".equals(dqRuler.getValue())) {
    newQuery=generateNewQueryFromDQRuler(dqRuler);
    if (newQuery == null || ""String_Node_Str"".equals(newQuery)) {
      newQuery=generateNewQuery();
    }
  }
 else {
    newQuery=generateNewQuery();
  }
  for (  IElementParameter param : (List<IElementParameter>)node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.MEMO_SQL) {
      oldValue=node.getPropertyValue(param.getName());
      this.propName=param.getName();
      String sql=null;
      try {
        if (QueryUtil.needFormatSQL(dbType)) {
          sql=fomatQuery(newQuery);
        }
 else {
          sql=newQuery;
        }
        node.setPropertyValue(param.getName(),sql);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e,Priority.WARN);
        node.setPropertyValue(param.getName(),newQuery);
      }
      param.setRepositoryValueUsed(false);
    }
  }
  node.setPropertyValue(EParameterName.UPDATE_COMPONENTS.getName(),Boolean.TRUE);
  if (this.node instanceof Node) {
    ((Node)this.node).checkAndRefreshNode();
  }
}",0.2737837837837837
124179,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
      List<IMetadataTable> metadataList=node.getMetadataList();
      IMetadataTable metadataTable=null;
      if (metadataList != null && !metadataList.isEmpty()) {
        metadataTable=metadataList.get(0);
      }
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,metadataTable,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.9562582844158304
124180,"@SuppressWarnings(""String_Node_Str"") private void updateSchema(){
  Object updateObject=result.getUpdateObject();
  if (updateObject == null) {
    return;
  }
  if (updateObject instanceof Node) {
    Node node=(Node)updateObject;
    boolean builtIn=true;
    final IExternalNode externalNode=node.getExternalNode();
    if (result.getResultType() == EUpdateResult.UPDATE) {
      if (result.isChecked()) {
        if (result.getParameter() instanceof List) {
          if (PluginChecker.isEBCDICPluginLoaded()) {
            IEBCDICProviderService service=(IEBCDICProviderService)GlobalServiceRegister.getDefault().getService(IEBCDICProviderService.class);
            if (service != null) {
              if (service.isEbcdicNode(node)) {
                List<Object> parameter=(List<Object>)result.getParameter();
                if (parameter.size() >= 2) {
                  IMetadataTable newTable=(IMetadataTable)parameter.get(0);
                  String schemaName=(String)parameter.get(1);
                  IMetadataTable metadataTable=MetadataTool.getMetadataTableFromNode(node,schemaName);
                  if (metadataTable != null) {
                    MetadataTool.copyTable(newTable,metadataTable);
                  }
                  syncSchemaForEBCDIC(node,metadataTable);
                }
                return;
              }
            }
          }
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
            IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
            if (service == null || externalNode == null || externalNode.getExternalData() == null)             return;
            List<Object> parameter=(List<Object>)result.getParameter();
            if (parameter.size() == 2) {
              if (node.getComponent() != null && ""String_Node_Str"".equals(node.getComponent().getName())) {
                IMetadataTable newTable=(IMetadataTable)parameter.get(0);
                String schemaId=(String)parameter.get(1);
                service.updateMapperTableEntries(externalNode,schemaId,newTable);
                node.setMetadataList(externalNode.getMetadataList());
                syncSchemaForTMap(node);
                for (                IExternalMapTable latestTable : externalNode.getExternalData().getOutputTables()) {
                  for (                  IMetadataTable tableExsit : node.getMetadataList()) {
                    if (latestTable.getName().equals(tableExsit.getTableName())) {
                      List<IMetadataColumn> newColumns=newTable.getListColumns();
                      for (                      IMetadataColumn column : tableExsit.getListColumns()) {
                        for (                        IMetadataColumn newColumn : newColumns) {
                          if (newColumn.getLabel().equals(column.getLabel())) {
                            column.setTalendType(newColumn.getTalendType());
                            column.setNullable(newColumn.isNullable());
                            column.setComment(newColumn.getComment());
                            column.setDefault(newColumn.getDefault());
                            column.setLength(newColumn.getLength());
                            column.setType(newColumn.getType());
                            column.setKey(newColumn.isKey());
                            column.setPrecision(newColumn.getPrecision());
                            break;
                          }
                        }
                      }
                      break;
                    }
                  }
                }
              }
            }
            return;
          }
        }
 else         if (result.getParameter() instanceof IMetadataTable) {
          IMetadataTable newTable=(IMetadataTable)result.getParameter();
          if (newTable != null) {
            for (            INodeConnector nodeConnector : node.getListConnector()) {
              if (nodeConnector.getBaseSchema().equals(newTable.getAttachedConnector())) {
                List<IElementParameter> params=node.getElementParametersFromField(EParameterFieldType.SCHEMA_TYPE);
                if (params != null) {
                  for (                  IElementParameter param : params) {
                    ChangeMetadataCommand cmd=null;
                    if (param.getChildParameters() != null && param.getChildParameters().get(""String_Node_Str"") != null && result.getContextModeConnectionItem() != null) {
                      final Object value=param.getChildParameters().get(""String_Node_Str"").getValue();
                      String idAndName=result.getContextModeConnectionItem().getProperty().getId() + UpdatesConstants.SEGMENT_LINE + newTable.getLabel();
                      if (idAndName.equals(value)) {
                        cmd=new ChangeMetadataCommand(node,param,null,newTable);
                      }
                    }
 else {
                      cmd=new ChangeMetadataCommand(node,param,null,newTable);
                    }
                    if (cmd != null) {
                      String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
                      IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
                      Connection repositoryConn=null;
                      if (lastVersion != null) {
                        final Item item=lastVersion.getProperty().getItem();
                        if (item != null && item instanceof ConnectionItem) {
                          repositoryConn=((ConnectionItem)item).getConnection();
                        }
                      }
                      cmd.setConnection(repositoryConn);
                      cmd.setRepositoryMode(true);
                      cmd.execute(true);
                    }
                  }
                }
 else {
                  MetadataTool.copyTable(newTable,node.getMetadataFromConnector(nodeConnector.getName()));
                }
              }
            }
            builtIn=false;
          }
        }
      }
    }
 else     if (result.getResultType() == EUpdateResult.RENAME) {
      List<Object> parameter=(List<Object>)result.getParameter();
      if (parameter.size() >= 3) {
        IMetadataTable newTable=(IMetadataTable)parameter.get(0);
        String oldSourceId=(String)parameter.get(1);
        String newSourceId=(String)parameter.get(2);
        if (PluginChecker.isEBCDICPluginLoaded()) {
          IEBCDICProviderService service=(IEBCDICProviderService)GlobalServiceRegister.getDefault().getService(IEBCDICProviderService.class);
          if (service != null) {
            if (service.isEbcdicNode(node)) {
              String[] sourceIdAndChildName=UpdateManagerUtils.getSourceIdAndChildName(oldSourceId);
              final String oldSchemaName=sourceIdAndChildName[1];
              sourceIdAndChildName=UpdateManagerUtils.getSourceIdAndChildName(newSourceId);
              final String newSchemaName=sourceIdAndChildName[1];
              Map<String,Object> lineValue=(Map<String,Object>)parameter.get(3);
              if (lineValue != null) {
                IMetadataTable metadataTable=MetadataTool.getMetadataTableFromNode(node,oldSchemaName);
                Object schemaName=lineValue.get(IEbcdicConstant.FIELD_SCHEMA);
                if (metadataTable != null && schemaName != null) {
                  lineValue.put(IEbcdicConstant.FIELD_SCHEMA,newSchemaName);
                  MetadataTool.copyTable(newTable,metadataTable);
                  syncSchemaForEBCDIC(node,metadataTable);
                  metadataTable.setLabel(newSchemaName);
                }
              }
              return;
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          if (service == null || externalNode == null || externalNode.getExternalData() == null)           return;
          IExternalData externalData=externalNode.getExternalData();
          parameter=(List<Object>)result.getParameter();
          if (parameter.size() == 3) {
            if (node.getComponent() != null && ""String_Node_Str"".equals(node.getComponent().getName())) {
              newTable=(IMetadataTable)parameter.get(0);
              String schemaId=(String)parameter.get(1);
              String newSchemaId=(String)parameter.get(2);
              service.renameMapperTable(externalNode,schemaId,newSchemaId,newTable);
              node.setMetadataList(externalNode.getMetadataList());
              syncSchemaForTMap(node);
            }
          }
          return;
        }
        String schemaParamName=UpdatesConstants.SCHEMA + UpdatesConstants.COLON + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
        IElementParameter repositoryParam=node.getElementParameter(schemaParamName);
        if (repositoryParam != null && oldSourceId.equals(repositoryParam.getValue())) {
          node.setPropertyValue(schemaParamName,newSourceId);
          if (newTable != null) {
            for (            INodeConnector nodeConnector : node.getListConnector()) {
              if (nodeConnector.getBaseSchema().equals(newTable.getAttachedConnector())) {
                MetadataTool.copyTable(newTable,node.getMetadataFromConnector(nodeConnector.getName()));
              }
            }
          }
          builtIn=false;
        }
        schemaParamName=UpdatesConstants.SCHEMA_TARGET + UpdatesConstants.COLON + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
        repositoryParam=node.getElementParameter(schemaParamName);
        if (repositoryParam != null && oldSourceId.equals(repositoryParam.getValue())) {
          node.setPropertyValue(schemaParamName,newSourceId);
          if (newTable != null) {
            for (            INodeConnector nodeConnector : node.getListConnector()) {
              if (nodeConnector.getBaseSchema().equals(repositoryParam.getContext())) {
                MetadataTool.copyTable(newTable,node.getMetadataFromConnector(nodeConnector.getName()));
              }
            }
          }
          builtIn=false;
        }
      }
    }
 else     if (result.getResultType() == EUpdateResult.BUIL_IN) {
      if (UpdatesConstants.SCHEMA_TARGET.equals(result.getParameter())) {
        node.setPropertyValue(UpdatesConstants.SCHEMA_TARGET + ""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
      }
 else {
        if (PluginChecker.isEBCDICPluginLoaded()) {
          IEBCDICProviderService service=(IEBCDICProviderService)GlobalServiceRegister.getDefault().getService(IEBCDICProviderService.class);
          if (service != null) {
            if (service.isEbcdicNode(node)) {
              Object parameter=result.getParameter();
              if (parameter instanceof Map) {
                Map<String,Object> lineValue=(Map<String,Object>)parameter;
                lineValue.remove(IEbcdicConstant.FIELD_SCHEMA + IEbcdicConstant.REF_TYPE);
              }
              return;
            }
          }
        }
        node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
        for (        IElementParameter param : node.getElementParameters()) {
          SAPParametersUtils.setNoRepositoryParams(param);
        }
      }
    }
 else     if (result.getResultType() == EUpdateResult.DELETE) {
      node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
    }
 else     if (result.getResultType() == EUpdateResult.RELOAD) {
      List<Object> parameter=(List<Object>)result.getParameter();
      String connectionId=null;
      String tableLabel=null;
      IRepositoryViewObject toReload=null;
      IMetadataTable tableToReload=null;
      if (parameter instanceof List) {
        List listParameter=(List)parameter;
        connectionId=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        tableLabel=((String)listParameter.get(0)).split(UpdatesConstants.SEGMENT_LINE)[0];
      }
      if (connectionId != null) {
        try {
          toReload=ProxyRepositoryFactory.getInstance().getLastVersion(connectionId);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
      if (toReload != null) {
        Item item=toReload.getProperty().getItem();
        if (item != null && item instanceof DatabaseConnectionItem) {
          DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
          Connection connection=dbItem.getConnection();
          if (connection instanceof DatabaseConnection) {
            DatabaseConnection dbConn=(DatabaseConnection)connection;
            Set<MetadataTable> tables=ProjectNodeHelper.getTablesFromSpecifiedDataPackage(dbConn);
            if (tables != null && !tables.isEmpty()) {
              Iterator it=tables.iterator();
              while (it.hasNext()) {
                MetadataTable table=(MetadataTable)it.next();
                String label=table.getLabel();
                if (tableLabel != null) {
                  if (label != null && label.equals(tableLabel)) {
                    tableToReload=ConvertionHelper.convert(table);
                    break;
                  }
                }
              }
            }
          }
        }
        if (tableToReload != null) {
          int index=-1;
          List<IMetadataTable> tablesInNode=node.getMetadataList();
          for (          IMetadataTable table : tablesInNode) {
            if (table.getLabel().equals(tableToReload.getLabel())) {
              index=tablesInNode.indexOf(table);
              break;
            }
          }
          if (index >= 0) {
            IMetadataTable oldTable=tablesInNode.get(index);
            tableToReload.setAttachedConnector(oldTable.getAttachedConnector());
            tableToReload.setDbms(oldTable.getDbms());
            tablesInNode.remove(index);
            tablesInNode.add(index,tableToReload);
          }
        }
      }
    }
    if (builtIn) {
      node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void updateSchema(){
  Object updateObject=result.getUpdateObject();
  if (updateObject == null) {
    return;
  }
  if (updateObject instanceof Node) {
    Node node=(Node)updateObject;
    boolean builtIn=true;
    final IExternalNode externalNode=node.getExternalNode();
    if (result.getResultType() == EUpdateResult.UPDATE) {
      if (result.isChecked()) {
        if (result.getParameter() instanceof List) {
          if (PluginChecker.isEBCDICPluginLoaded()) {
            IEBCDICProviderService service=(IEBCDICProviderService)GlobalServiceRegister.getDefault().getService(IEBCDICProviderService.class);
            if (service != null) {
              if (service.isEbcdicNode(node)) {
                List<Object> parameter=(List<Object>)result.getParameter();
                if (parameter.size() >= 2) {
                  IMetadataTable newTable=(IMetadataTable)parameter.get(0);
                  String schemaName=(String)parameter.get(1);
                  IMetadataTable metadataTable=MetadataTool.getMetadataTableFromNode(node,schemaName);
                  if (metadataTable != null) {
                    MetadataTool.copyTable(newTable,metadataTable);
                  }
                  syncSchemaForEBCDIC(node,metadataTable);
                }
                return;
              }
            }
          }
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
            IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
            if (service == null || externalNode == null || externalNode.getExternalData() == null)             return;
            List<Object> parameter=(List<Object>)result.getParameter();
            if (parameter.size() == 2) {
              if (node.getComponent() != null && ""String_Node_Str"".equals(node.getComponent().getName())) {
                IMetadataTable newTable=(IMetadataTable)parameter.get(0);
                String schemaId=(String)parameter.get(1);
                service.updateMapperTableEntries(externalNode,schemaId,newTable);
                node.setMetadataList(externalNode.getMetadataList());
                syncSchemaForTMap(node);
                for (                IExternalMapTable latestTable : externalNode.getExternalData().getOutputTables()) {
                  for (                  IMetadataTable tableExsit : node.getMetadataList()) {
                    if (latestTable.getName().equals(tableExsit.getTableName())) {
                      List<IMetadataColumn> newColumns=newTable.getListColumns();
                      for (                      IMetadataColumn column : tableExsit.getListColumns()) {
                        for (                        IMetadataColumn newColumn : newColumns) {
                          if (newColumn.getLabel().equals(column.getLabel())) {
                            column.setTalendType(newColumn.getTalendType());
                            column.setNullable(newColumn.isNullable());
                            column.setComment(newColumn.getComment());
                            column.setDefault(newColumn.getDefault());
                            column.setLength(newColumn.getLength());
                            column.setType(newColumn.getType());
                            column.setKey(newColumn.isKey());
                            column.setPrecision(newColumn.getPrecision());
                            break;
                          }
                        }
                      }
                      break;
                    }
                  }
                }
              }
            }
            return;
          }
        }
 else         if (result.getParameter() instanceof IMetadataTable) {
          IMetadataTable newTable=(IMetadataTable)result.getParameter();
          if (newTable != null) {
            for (            INodeConnector nodeConnector : node.getListConnector()) {
              if (nodeConnector.getBaseSchema().equals(newTable.getAttachedConnector())) {
                List<IElementParameter> params=node.getElementParametersFromField(EParameterFieldType.SCHEMA_TYPE);
                if (params != null) {
                  for (                  IElementParameter param : params) {
                    ChangeMetadataCommand cmd=null;
                    if (param.getChildParameters() != null && param.getChildParameters().get(""String_Node_Str"") != null && result.getContextModeConnectionItem() != null) {
                      final Object value=param.getChildParameters().get(""String_Node_Str"").getValue();
                      String idAndName=result.getContextModeConnectionItem().getProperty().getId() + UpdatesConstants.SEGMENT_LINE + newTable.getLabel();
                      if (idAndName.equals(value)) {
                        cmd=new ChangeMetadataCommand(node,param,null,newTable);
                      }
                    }
 else {
                      cmd=new ChangeMetadataCommand(node,param,null,newTable);
                    }
                    if (cmd != null) {
                      String propertyValue=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
                      IRepositoryViewObject lastVersion=UpdateRepositoryUtils.getRepositoryObjectById(propertyValue);
                      Connection repositoryConn=null;
                      if (lastVersion != null) {
                        final Item item=lastVersion.getProperty().getItem();
                        if (item != null && item instanceof ConnectionItem) {
                          repositoryConn=((ConnectionItem)item).getConnection();
                        }
                      }
                      cmd.setConnection(repositoryConn);
                      cmd.setRepositoryMode(true);
                      cmd.execute(true);
                    }
                  }
                }
 else {
                  MetadataTool.copyTable(newTable,node.getMetadataFromConnector(nodeConnector.getName()));
                }
              }
            }
            builtIn=false;
          }
        }
      }
    }
 else     if (result.getResultType() == EUpdateResult.RENAME) {
      List<Object> parameter=(List<Object>)result.getParameter();
      if (parameter.size() >= 3) {
        IMetadataTable newTable=(IMetadataTable)parameter.get(0);
        String oldSourceId=(String)parameter.get(1);
        String newSourceId=(String)parameter.get(2);
        if (PluginChecker.isEBCDICPluginLoaded()) {
          IEBCDICProviderService service=(IEBCDICProviderService)GlobalServiceRegister.getDefault().getService(IEBCDICProviderService.class);
          if (service != null) {
            if (service.isEbcdicNode(node)) {
              String[] sourceIdAndChildName=UpdateManagerUtils.getSourceIdAndChildName(oldSourceId);
              final String oldSchemaName=sourceIdAndChildName[1];
              sourceIdAndChildName=UpdateManagerUtils.getSourceIdAndChildName(newSourceId);
              final String newSchemaName=sourceIdAndChildName[1];
              Map<String,Object> lineValue=(Map<String,Object>)parameter.get(3);
              if (lineValue != null) {
                IMetadataTable metadataTable=MetadataTool.getMetadataTableFromNode(node,oldSchemaName);
                Object schemaName=lineValue.get(IEbcdicConstant.FIELD_SCHEMA);
                if (metadataTable != null && schemaName != null) {
                  lineValue.put(IEbcdicConstant.FIELD_SCHEMA,newSchemaName);
                  MetadataTool.copyTable(newTable,metadataTable);
                  syncSchemaForEBCDIC(node,metadataTable);
                  metadataTable.setLabel(newSchemaName);
                }
              }
              return;
            }
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerMapperService.class)) {
          IDesignerMapperService service=(IDesignerMapperService)GlobalServiceRegister.getDefault().getService(IDesignerMapperService.class);
          if (service == null || externalNode == null || externalNode.getExternalData() == null)           return;
          IExternalData externalData=externalNode.getExternalData();
          parameter=(List<Object>)result.getParameter();
          if (parameter.size() == 3) {
            if (node.getComponent() != null && ""String_Node_Str"".equals(node.getComponent().getName())) {
              newTable=(IMetadataTable)parameter.get(0);
              String schemaId=(String)parameter.get(1);
              String newSchemaId=(String)parameter.get(2);
              service.renameMapperTable(externalNode,schemaId,newSchemaId,newTable);
              node.setMetadataList(externalNode.getMetadataList());
              syncSchemaForTMap(node);
            }
          }
          return;
        }
        String schemaParamName=UpdatesConstants.SCHEMA + UpdatesConstants.COLON + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
        IElementParameter repositoryParam=node.getElementParameter(schemaParamName);
        if (repositoryParam != null && oldSourceId.equals(repositoryParam.getValue())) {
          node.setPropertyValue(schemaParamName,newSourceId);
          if (newTable != null) {
            for (            INodeConnector nodeConnector : node.getListConnector()) {
              if (nodeConnector.getBaseSchema().equals(newTable.getAttachedConnector())) {
                MetadataTool.copyTable(newTable,node.getMetadataFromConnector(nodeConnector.getName()));
              }
            }
          }
          builtIn=false;
        }
        schemaParamName=UpdatesConstants.SCHEMA_TARGET + UpdatesConstants.COLON + EParameterName.REPOSITORY_SCHEMA_TYPE.getName();
        repositoryParam=node.getElementParameter(schemaParamName);
        if (repositoryParam != null && oldSourceId.equals(repositoryParam.getValue())) {
          node.setPropertyValue(schemaParamName,newSourceId);
          if (newTable != null) {
            for (            INodeConnector nodeConnector : node.getListConnector()) {
              if (nodeConnector.getBaseSchema().equals(repositoryParam.getContext())) {
                MetadataTool.copyTable(newTable,node.getMetadataFromConnector(nodeConnector.getName()));
              }
            }
          }
          builtIn=false;
        }
      }
    }
 else     if (result.getResultType() == EUpdateResult.BUIL_IN) {
      if (UpdatesConstants.SCHEMA_TARGET.equals(result.getParameter())) {
        node.setPropertyValue(UpdatesConstants.SCHEMA_TARGET + ""String_Node_Str"" + EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
      }
 else {
        if (PluginChecker.isEBCDICPluginLoaded()) {
          IEBCDICProviderService service=(IEBCDICProviderService)GlobalServiceRegister.getDefault().getService(IEBCDICProviderService.class);
          if (service != null) {
            if (service.isEbcdicNode(node)) {
              Object parameter=result.getParameter();
              if (parameter instanceof Map) {
                Map<String,Object> lineValue=(Map<String,Object>)parameter;
                lineValue.remove(IEbcdicConstant.FIELD_SCHEMA + IEbcdicConstant.REF_TYPE);
              }
              return;
            }
          }
        }
        node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
        for (        IElementParameter param : node.getElementParameters()) {
          SAPParametersUtils.setNoRepositoryParams(param);
        }
      }
    }
 else     if (result.getResultType() == EUpdateResult.DELETE) {
      node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
    }
 else     if (result.getResultType() == EUpdateResult.RELOAD) {
      List<Object> parameter=(List<Object>)result.getParameter();
      String connectionId=null;
      String tableLabel=null;
      IRepositoryViewObject toReload=null;
      IMetadataTable tableToReload=null;
      if (parameter instanceof List) {
        List listParameter=(List)parameter;
        connectionId=(String)node.getPropertyValue(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
        tableLabel=((String)listParameter.get(0)).split(UpdatesConstants.SEGMENT_LINE)[0];
      }
      if (connectionId != null) {
        try {
          toReload=ProxyRepositoryFactory.getInstance().getLastVersion(connectionId);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
      if (toReload != null) {
        Item item=toReload.getProperty().getItem();
        if (item != null && item instanceof DatabaseConnectionItem) {
          DatabaseConnectionItem dbItem=(DatabaseConnectionItem)item;
          Connection connection=dbItem.getConnection();
          if (connection instanceof DatabaseConnection) {
            DatabaseConnection dbConn=(DatabaseConnection)connection;
            Set<MetadataTable> tables=ProjectNodeHelper.getTablesFromSpecifiedDataPackage(dbConn);
            if (tables != null && !tables.isEmpty()) {
              Iterator it=tables.iterator();
              while (it.hasNext() && tableToReload == null) {
                MetadataTable table=(MetadataTable)it.next();
                String label=table.getLabel();
                if (tableLabel != null) {
                  if (label != null && label.equals(tableLabel)) {
                    tableToReload=ConvertionHelper.convert(table);
                    break;
                  }
                }
              }
            }
            Set<org.talend.core.model.metadata.builder.connection.MetadataTable> newTables=ConnectionHelper.getTables(connection);
            if (newTables != null && !newTables.isEmpty() && tableToReload == null) {
              Iterator it=newTables.iterator();
              while (it.hasNext() && tableToReload == null) {
                MetadataTable table=(MetadataTable)it.next();
                String label=table.getLabel();
                if (tableLabel != null) {
                  if (label != null && label.equals(tableLabel)) {
                    tableToReload=ConvertionHelper.convert(table);
                    break;
                  }
                }
              }
            }
          }
        }
        if (tableToReload != null) {
          int index=-1;
          List<IMetadataTable> tablesInNode=node.getMetadataList();
          for (          IMetadataTable table : tablesInNode) {
            if (table.getLabel().equals(tableToReload.getLabel())) {
              index=tablesInNode.indexOf(table);
              break;
            }
          }
          if (index >= 0) {
            IMetadataTable oldTable=tablesInNode.get(index);
            tableToReload.setAttachedConnector(oldTable.getAttachedConnector());
            tableToReload.setDbms(oldTable.getDbms());
            tablesInNode.remove(index);
            tablesInNode.add(index,tableToReload);
            builtIn=false;
          }
        }
      }
    }
    if (builtIn) {
      node.setPropertyValue(EParameterName.SCHEMA_TYPE.getName(),EmfComponent.BUILTIN);
    }
  }
}",0.9744366979892896
124181,"/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTablesListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
    public void handleEvent(    ListenableListEvent<FilterTableEntry> event){
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        resizeAtExpandedSize();
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
  }
}","/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTablesListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
    public void handleEvent(    ListenableListEvent<FilterTableEntry> event){
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
        MetadataTableEditorView metadataTableEditorView=null;
        if (getZone() == Zone.INPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
        }
 else         if (getZone() == Zone.OUTPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
        }
        if (metadataTableEditorView != null) {
          metadataTableEditorView.getTableViewerCreator().refresh();
        }
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        resizeAtExpandedSize();
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
  }
}",0.932111142938986
124182,"public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
    MetadataTableEditorView metadataTableEditorView=null;
    if (getZone() == Zone.INPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
    }
 else     if (getZone() == Zone.OUTPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
    }
    if (metadataTableEditorView != null) {
      metadataTableEditorView.getTableViewerCreator().refresh();
    }
  }
}",0.5616161616161616
124183,"private void addListenerForWSDLCom(){
  refreshbut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
          getDataFromNet();
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setSystem(true);
      job.schedule();
      ProgressMonitorDialog progressDialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell().getShell());
      IRunnableWithProgress runnable=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
          boolean f=true;
          while (f) {
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            if (monitor.isCanceled()) {
              job.done(Status.OK_STATUS);
              job.cancel();
            }
            if (job.getResult() != null && job.getResult().isOK()) {
              monitor.done();
              f=false;
            }
          }
        }
      }
;
      try {
        progressDialog.run(true,true,runnable);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
catch (      WebServiceCancelException e1) {
        return;
      }
      if (connection != null) {
        if (listTable.getItemCount() > 0) {
          listTable.setSelection(listTable.getItem(0));
        }
        if (currentFunction != null) {
          if (currentFunction.getName() != null) {
            connection.setMethodName(currentFunction.getName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setServerNameSpace(currentFunction.getServerNameSpace());
          }
          if (currentFunction.getServerName() != null) {
            connection.setServerName(currentFunction.getServerName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setPortNameSpace(currentFunction.getServerNameSpace());
          }
        }
        if (currentPortName != null) {
          connection.setPortName(currentPortName.getPortName());
        }
 else         if (currentPortName == null && !allPortNames.isEmpty()) {
          currentPortName=allPortNames.get(0);
          connection.setPortName(currentPortName.getPortName());
        }
      }
      isFirst=false;
    }
  }
);
  listTable=listTableView.getTable();
  portListTable=portListTableView.getTable();
  listTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TableItem[] item=listTable.getSelection();
      currentFunction=(Function)item[0].getData();
      List<ParameterInfo> listIn=currentFunction.getInputParameters();
      List<ParameterInfo> listOut=currentFunction.getOutputParameters();
      ExtendedTableModel<InputMappingData> columnModel=expressinPutTableView.getExtendedTableModel();
      columnModel.removeAll();
      if (listIn != null) {
        for (int i=0; i < listIn.size(); i++) {
          ParameterInfo pa=listIn.get(i);
          InputMappingData inData=new InputMappingData();
          inData.setParameterName(pa.getName());
          inData.setParameter(pa);
          columnModel.add(inData);
        }
      }
      expressTableForIn.setSelection(0);
      ExtendedTableModel<OutPutMappingData> rowForOutput=rowoutPutTableView.getExtendedTableModel();
      rowForOutput.removeAll();
      if (listOut != null) {
        for (int i=0; i < listOut.size(); i++) {
          OutPutMappingData outData=new OutPutMappingData();
          ParameterInfo pa=listOut.get(i);
          outData.setParameter(pa);
          rowForOutput.add(outData);
        }
      }
      ExtendedTableModel<OutPutMappingData> exforoutput=expressoutPutTableView.getExtendedTableModel();
      exforoutput.removeAll();
      for (      IMetadataColumn column : forOutColumnList) {
        OutPutMappingData outData=new OutPutMappingData();
        outData.setOutputColumnValue(column.getLabel());
        outData.setMetadataColumn(column);
        exforoutput.add(outData);
      }
      rowTableForout.setSelection(0);
      if (connection != null) {
        if (currentPortName != null) {
          connection.setPortName(currentPortName.getPortName());
        }
 else         if (currentPortName == null && allPortNames != null) {
          currentPortName=allPortNames.get(0);
          connection.setPortName(currentPortName.getPortName());
        }
        if (currentFunction != null) {
          if (currentFunction.getName() != null) {
            connection.setMethodName(currentFunction.getName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setServerNameSpace(currentFunction.getServerNameSpace());
          }
          if (currentFunction.getServerName() != null) {
            connection.setServerName(currentFunction.getServerName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setPortNameSpace(currentFunction.getServerNameSpace());
          }
        }
      }
    }
  }
);
  portListTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TableItem[] item=portListTable.getSelection();
      currentPortName=(PortNames)item[0].getData();
      if (connection != null) {
        if (currentPortName != null) {
          connection.setPortName(currentPortName.getPortName());
        }
 else         if (currentPortName == null && allPortNames != null) {
          currentPortName=allPortNames.get(0);
          connection.setPortName(currentPortName.getPortName());
        }
 else {
          connection.setPortName(""String_Node_Str"");
        }
      }
    }
  }
);
}","private void addListenerForWSDLCom(){
  refreshbut.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      final Job job=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
          getDataFromNet();
          monitor.done();
          return Status.OK_STATUS;
        }
      }
;
      job.setSystem(true);
      job.schedule();
      ProgressMonitorDialog progressDialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell().getShell());
      IRunnableWithProgress runnable=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor){
          monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
          boolean f=true;
          while (f) {
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            if (monitor.isCanceled()) {
              job.done(Status.OK_STATUS);
              job.cancel();
            }
            if (monitor.isCanceled() || (job.getResult() != null && job.getResult().isOK())) {
              monitor.done();
              f=false;
            }
          }
        }
      }
;
      try {
        progressDialog.run(true,true,runnable);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
catch (      WebServiceCancelException e1) {
        return;
      }
      if (connection != null) {
        if (listTable.getItemCount() > 0) {
          listTable.setSelection(listTable.getItem(0));
        }
        if (currentFunction != null) {
          if (currentFunction.getName() != null) {
            connection.setMethodName(currentFunction.getName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setServerNameSpace(currentFunction.getServerNameSpace());
          }
          if (currentFunction.getServerName() != null) {
            connection.setServerName(currentFunction.getServerName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setPortNameSpace(currentFunction.getServerNameSpace());
          }
        }
        if (currentPortName != null) {
          connection.setPortName(currentPortName.getPortName());
        }
 else         if (currentPortName == null && !allPortNames.isEmpty()) {
          currentPortName=allPortNames.get(0);
          connection.setPortName(currentPortName.getPortName());
        }
      }
      isFirst=false;
    }
  }
);
  listTable=listTableView.getTable();
  portListTable=portListTableView.getTable();
  listTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TableItem[] item=listTable.getSelection();
      currentFunction=(Function)item[0].getData();
      List<ParameterInfo> listIn=currentFunction.getInputParameters();
      List<ParameterInfo> listOut=currentFunction.getOutputParameters();
      ExtendedTableModel<InputMappingData> columnModel=expressinPutTableView.getExtendedTableModel();
      columnModel.removeAll();
      if (listIn != null) {
        for (int i=0; i < listIn.size(); i++) {
          ParameterInfo pa=listIn.get(i);
          InputMappingData inData=new InputMappingData();
          inData.setParameterName(pa.getName());
          inData.setParameter(pa);
          columnModel.add(inData);
        }
      }
      expressTableForIn.setSelection(0);
      ExtendedTableModel<OutPutMappingData> rowForOutput=rowoutPutTableView.getExtendedTableModel();
      rowForOutput.removeAll();
      if (listOut != null) {
        for (int i=0; i < listOut.size(); i++) {
          OutPutMappingData outData=new OutPutMappingData();
          ParameterInfo pa=listOut.get(i);
          outData.setParameter(pa);
          rowForOutput.add(outData);
        }
      }
      ExtendedTableModel<OutPutMappingData> exforoutput=expressoutPutTableView.getExtendedTableModel();
      exforoutput.removeAll();
      for (      IMetadataColumn column : forOutColumnList) {
        OutPutMappingData outData=new OutPutMappingData();
        outData.setOutputColumnValue(column.getLabel());
        outData.setMetadataColumn(column);
        exforoutput.add(outData);
      }
      rowTableForout.setSelection(0);
      if (connection != null) {
        if (currentPortName != null) {
          connection.setPortName(currentPortName.getPortName());
        }
 else         if (currentPortName == null && allPortNames != null) {
          currentPortName=allPortNames.get(0);
          connection.setPortName(currentPortName.getPortName());
        }
        if (currentFunction != null) {
          if (currentFunction.getName() != null) {
            connection.setMethodName(currentFunction.getName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setServerNameSpace(currentFunction.getServerNameSpace());
          }
          if (currentFunction.getServerName() != null) {
            connection.setServerName(currentFunction.getServerName());
          }
          if (currentFunction.getServerNameSpace() != null) {
            connection.setPortNameSpace(currentFunction.getServerNameSpace());
          }
        }
      }
    }
  }
);
  portListTable.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TableItem[] item=portListTable.getSelection();
      currentPortName=(PortNames)item[0].getData();
      if (connection != null) {
        if (currentPortName != null) {
          connection.setPortName(currentPortName.getPortName());
        }
 else         if (currentPortName == null && allPortNames != null) {
          currentPortName=allPortNames.get(0);
          connection.setPortName(currentPortName.getPortName());
        }
 else {
          connection.setPortName(""String_Node_Str"");
        }
      }
    }
  }
);
}",0.997900855804941
124184,"/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTablesListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
    public void handleEvent(    ListenableListEvent<FilterTableEntry> event){
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        resizeAtExpandedSize();
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
  }
}","/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTablesListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
    public void handleEvent(    ListenableListEvent<FilterTableEntry> event){
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
        MetadataTableEditorView metadataTableEditorView=null;
        if (getZone() == Zone.INPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
        }
 else         if (getZone() == Zone.OUTPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
        }
        if (metadataTableEditorView != null) {
          metadataTableEditorView.getTableViewerCreator().refresh();
        }
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
      mapperManager.getUiManager().refreshSqlExpression();
    }
  }
);
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        resizeAtExpandedSize();
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpressionIfNeeded(event,tableViewerCreator,tableEntry);
        mapperManager.getUiManager().refreshSqlExpression();
      }
    }
);
  }
}",0.932111142938986
124185,"public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
    MetadataTableEditorView metadataTableEditorView=null;
    if (getZone() == Zone.INPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
    }
 else     if (getZone() == Zone.OUTPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
    }
    if (metadataTableEditorView != null) {
      metadataTableEditorView.getTableViewerCreator().refresh();
    }
  }
}",0.5616161616161616
124186,"/** 
 * Calculates the contents of page 2 when the it is activated.
 */
@Override protected void pageChange(final int newPageIndex){
  super.pageChange(newPageIndex);
  setName();
  if (newPageIndex == 1) {
    if (codeEditor instanceof ISyntaxCheckableEditor) {
      moveCursorToSelectedComponent();
    }
    codeSync();
    if (codeEditor instanceof ISyntaxCheckableEditor && LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
      ((ISyntaxCheckableEditor)codeEditor).validateSyntax();
    }
  }
 else   if (newPageIndex == 0 && oldPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      try {
        boolean isDirty=getEditor(2).isDirty();
        getEditor(2).doSave(null);
        IProcess2 oldProcess=getProcess();
        ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
        URI uri=URI.createFileURI(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString());
        Resource resource=new ResourceSetImpl().getResource(uri,true);
        ProcessType processTypeTemp=(ProcessType)resource.getContents().get(0);
        if (processTypeTemp.getAuthor() != null) {
          ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
          Item item=oldProcess.getProperty().getItem();
          if (item instanceof ProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
 else           if (item instanceof JobletProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
          oldProcess.getUpdateManager().updateAll();
          designerEditor.setDirty(isDirty);
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(true);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(true);
        }
      }
    }
  }
 else   if (newPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      ICreateXtextProcessService convertJobtoScriptService=CorePlugin.getDefault().getCreateXtextProcessService();
      String scriptValue;
      try {
        scriptValue=convertJobtoScriptService.convertJobtoScript(getProcess().saveXmlFile());
        IFile file=(IFile)getEditor(2).getEditorInput().getAdapter(IResource.class);
        ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(scriptValue.getBytes());
        if (file.exists()) {
          ((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider().getDocument(getEditor(2).getEditorInput()).set(scriptValue);
          boolean isReadjob=((JobEditorInput)getEditor(0).getEditorInput()).isReadOnly();
          IProxyRepositoryFactory rFactory=ProxyRepositoryFactory.getInstance();
          if (isReadjob || rFactory.isUserReadOnlyOnCurrentProject()) {
            IDocumentProvider provider=((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider();
            Class p=provider.getClass();
            Class[] type=new Class[1];
            type[0]=Boolean.TYPE;
            Object[] para=new Object[1];
            para[0]=Boolean.TRUE;
            Method method=p.getMethod(""String_Node_Str"",type);
            method.invoke(provider,para);
          }
          IAction action=((AbstractDecoratedTextEditor)getEditor(2)).getAction(""String_Node_Str"");
          action.run();
          getEditor(2).doSave(null);
        }
 else {
          file.create(byteArrayInputStream,true,null);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
catch (      SecurityException e) {
        ExceptionHandler.process(e);
      }
catch (      NoSuchMethodException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalArgumentException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalAccessException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(false);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(false);
        }
      }
    }
  }
  oldPageIndex=getActivePage();
}","/** 
 * Calculates the contents of page 2 when the it is activated.
 */
@Override protected void pageChange(final int newPageIndex){
  super.pageChange(newPageIndex);
  setName();
  if (newPageIndex == 1) {
    if (codeEditor instanceof ISyntaxCheckableEditor) {
      moveCursorToSelectedComponent();
    }
    codeSync();
    if (codeEditor instanceof ISyntaxCheckableEditor && LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
      ((ISyntaxCheckableEditor)codeEditor).validateSyntax();
    }
  }
 else   if (newPageIndex == 0 && oldPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      try {
        boolean isDirty=getEditor(2).isDirty();
        getEditor(2).doSave(null);
        IProcess2 oldProcess=getProcess();
        ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
        ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
        Item item=oldProcess.getProperty().getItem();
        if (item instanceof ProcessItem) {
          ((Process)oldProcess).updateProcess(processType);
        }
 else         if (item instanceof JobletProcessItem) {
          ((Process)oldProcess).updateProcess(processType);
        }
        oldProcess.getUpdateManager().updateAll();
        designerEditor.setDirty(isDirty);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(true);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(true);
        }
      }
    }
  }
 else   if (newPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      ICreateXtextProcessService convertJobtoScriptService=CorePlugin.getDefault().getCreateXtextProcessService();
      String scriptValue;
      try {
        scriptValue=convertJobtoScriptService.convertJobtoScript(getProcess().saveXmlFile());
        IFile file=(IFile)getEditor(2).getEditorInput().getAdapter(IResource.class);
        ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(scriptValue.getBytes());
        if (file.exists()) {
          ((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider().getDocument(getEditor(2).getEditorInput()).set(scriptValue);
          boolean isReadjob=((JobEditorInput)getEditor(0).getEditorInput()).isReadOnly();
          IProxyRepositoryFactory rFactory=ProxyRepositoryFactory.getInstance();
          if (isReadjob || rFactory.isUserReadOnlyOnCurrentProject()) {
            IDocumentProvider provider=((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider();
            Class p=provider.getClass();
            Class[] type=new Class[1];
            type[0]=Boolean.TYPE;
            Object[] para=new Object[1];
            para[0]=Boolean.TRUE;
            Method method=p.getMethod(""String_Node_Str"",type);
            method.invoke(provider,para);
          }
          IAction action=((AbstractDecoratedTextEditor)getEditor(2)).getAction(""String_Node_Str"");
          action.run();
          getEditor(2).doSave(null);
        }
 else {
          file.create(byteArrayInputStream,true,null);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
catch (      SecurityException e) {
        ExceptionHandler.process(e);
      }
catch (      NoSuchMethodException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalArgumentException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalAccessException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(false);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(false);
        }
      }
    }
  }
  oldPageIndex=getActivePage();
}",0.8781975600157418
124187,"@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode source=connection.getSource();
    if (source != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || !connection.isActivate() || source.isReadOnly()|| !source.isActivate();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : source.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}","@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode source=connection.getSource();
    if (source != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || !connection.isActivate() || source.isReadOnly();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : source.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}",0.9846564376250834
124188,"@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode target=connection.getTarget();
    if (target != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || !connection.isActivate() || target.isReadOnly()|| !target.isActivate();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : target.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}","@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode target=connection.getTarget();
    if (target != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || target.isReadOnly() || connection.getTable().isReadOnly();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : target.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}",0.926441351888668
124189,"@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode source=connection.getSource();
    if (source != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || !connection.isActivate() || source.isReadOnly()|| !source.isActivate();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : source.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}","@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode source=connection.getSource();
    if (source != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || !connection.isActivate() || source.isReadOnly();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : source.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}",0.9846564376250834
124190,"@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode target=connection.getTarget();
    if (target != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || !connection.isActivate() || target.isReadOnly()|| !target.isActivate();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : target.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}","@Override public boolean hasReadOnlyMetadataColumns(){
  boolean hasReadOnlyMetadataColumns=false;
  IOConnection connection=getConnection();
  if (connection != null) {
    INode target=connection.getTarget();
    if (target != null) {
      hasReadOnlyMetadataColumns=connection.isReadOnly() || target.isReadOnly() || connection.getTable().isReadOnly();
      if (!hasReadOnlyMetadataColumns) {
        for (        IElementParameter param : target.getElementParameters()) {
          if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
            if (param.isReadOnly()) {
              hasReadOnlyMetadataColumns=true;
              break;
            }
          }
        }
      }
    }
  }
  return hasReadOnlyMetadataColumns;
}",0.926441351888668
124191,"/** 
 * Getter for targetExecutionTabItem.
 * @return the targetExecutionTabItem
 */
protected static RunProcessContext getProcessContext(){
  return processContext;
}","/** 
 * Getter for targetExecutionTabItem.
 * @return the targetExecutionTabItem
 */
public static RunProcessContext getProcessContext(){
  return processContext;
}",0.9667673716012084
124192,"/** 
 * Getter for targetExecutionTabItem.
 * @return the targetExecutionTabItem
 */
protected static RunProcessContext getProcessContext(){
  return processContext;
}","/** 
 * Getter for targetExecutionTabItem.
 * @return the targetExecutionTabItem
 */
public static RunProcessContext getProcessContext(){
  return processContext;
}",0.9667673716012084
124193,"/** 
 * DOC dev Comment method ""createHeaderComposite"".
 * @param parent a TabItem 's Control
 * @param tabItem a TabItem
 */
private void createHeaderComposite(Composite parent,CTabItem tabItem){
  int labelStyle=SWT.WRAP | SWT.MULTI;
  Text tmpLabel=new Text(parent,labelStyle);
  tmpLabel.setText(TextUtil.removeLineBreaks(sqlExecution.getSqlStatement()));
  tmpLabel.setLayoutData(new FillLayout());
  int parentWidth=this.getClientArea().width;
  Point idealSize=tmpLabel.computeSize(parentWidth - 30,SWT.DEFAULT);
  if (idealSize.y > 60) {
    labelStyle=SWT.WRAP | SWT.MULTI | SWT.V_SCROLL;
  }
  tmpLabel.dispose();
  Composite headerComposite=new Composite(parent,SWT.FILL);
  headerComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  GridLayout hLayout=new GridLayout();
  hLayout.numColumns=2;
  hLayout.marginLeft=0;
  hLayout.horizontalSpacing=0;
  hLayout.verticalSpacing=0;
  hLayout.marginWidth=0;
  hLayout.marginHeight=0;
  headerComposite.setLayout(hLayout);
  Text label=new Text(headerComposite,labelStyle);
  label.setEditable(false);
  label.setBackground(this.getBackground());
  label.setText(TextUtil.removeLineBreaks(sqlExecution.getSqlStatement()));
  label.setToolTipText(TextUtil.getWrappedText(sqlExecution.getSqlStatement()));
  GridData labelGridData=new GridData(SWT.FILL,SWT.TOP,true,true);
  label.setLayoutData(labelGridData);
  label.setVisible(true);
  ToolBarManager toolBarMgr=new ToolBarManager(SWT.FLAT);
  toolBarMgr.createControl(headerComposite);
  toolBarMgr.add(new CloseSQLResultTabAction(tabItem));
  toolBarMgr.update(true);
  GridData gid=new GridData();
  gid.horizontalAlignment=SWT.RIGHT;
  gid.verticalAlignment=SWT.TOP;
  toolBarMgr.getControl().setLayoutData(gid);
}","/** 
 * DOC dev Comment method ""createHeaderComposite"".
 * @param parent a TabItem 's Control
 * @param tabItem a TabItem
 */
private void createHeaderComposite(Composite parent,CTabItem tabItem){
  Composite headerComposite=new Composite(parent,SWT.FILL);
  headerComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  GridLayout hLayout=new GridLayout();
  hLayout.numColumns=2;
  hLayout.marginLeft=0;
  hLayout.horizontalSpacing=0;
  hLayout.verticalSpacing=0;
  hLayout.marginWidth=0;
  hLayout.marginHeight=0;
  headerComposite.setLayout(hLayout);
  Text label=new Text(headerComposite,SWT.H_SCROLL);
  label.setEditable(false);
  label.setBackground(this.getBackground());
  label.setText(TextUtil.removeLineBreaks(sqlExecution.getSqlStatement()));
  label.setToolTipText(TextUtil.getWrappedText(sqlExecution.getSqlStatement()));
  GridData labelGridData=new GridData(SWT.FILL,SWT.TOP,true,true);
  label.setLayoutData(labelGridData);
  label.setVisible(true);
  ToolBarManager toolBarMgr=new ToolBarManager(SWT.FLAT);
  toolBarMgr.createControl(headerComposite);
  toolBarMgr.add(new CloseSQLResultTabAction(tabItem));
  toolBarMgr.update(true);
  GridData gid=new GridData();
  gid.horizontalAlignment=SWT.RIGHT;
  gid.verticalAlignment=SWT.TOP;
  toolBarMgr.getControl().setLayoutData(gid);
}",0.8532200065380844
124194,"/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTableForColumnsListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpression(event,tableViewerCreator,tableEntry);
    }
  }
);
  if (abstractDataMapTable instanceof InputTable) {
    InputTable inputTable=(InputTable)abstractDataMapTable;
    inputTable.getTableGlobalMapEntriesModel().addAfterOperationListListener(new IListenableListListener<GlobalMapEntry>(){
      public void handleEvent(      ListenableListEvent<GlobalMapEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    inputTable.getTableGlobalMapEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<GlobalMapEntry>(){
      public void handleEvent(      ModifiedBeanEvent<GlobalMapEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForGlobalMap;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
}","/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTableForColumnsListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
        MetadataTableEditorView metadataTableEditorView=null;
        if (getZone() == Zone.INPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
        }
 else         if (getZone() == Zone.OUTPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
        }
        if (metadataTableEditorView != null) {
          metadataTableEditorView.getTableViewerCreator().refresh();
        }
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpression(event,tableViewerCreator,tableEntry);
    }
  }
);
  if (abstractDataMapTable instanceof InputTable) {
    InputTable inputTable=(InputTable)abstractDataMapTable;
    inputTable.getTableGlobalMapEntriesModel().addAfterOperationListListener(new IListenableListListener<GlobalMapEntry>(){
      public void handleEvent(      ListenableListEvent<GlobalMapEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    inputTable.getTableGlobalMapEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<GlobalMapEntry>(){
      public void handleEvent(      ModifiedBeanEvent<GlobalMapEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForGlobalMap;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
}",0.9398477157360406
124195,"public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
    MetadataTableEditorView metadataTableEditorView=null;
    if (getZone() == Zone.INPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
    }
 else     if (getZone() == Zone.OUTPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
    }
    if (metadataTableEditorView != null) {
      metadataTableEditorView.getTableViewerCreator().refresh();
    }
  }
}",0.5616161616161616
124196,"private void onSelectedEntries(IStructuredSelection selection,AbstractInOutTree selectedTree){
  EList<? extends TreeNode> nodes=null;
  if (selectedTree instanceof InputXmlTree) {
    nodes=((InputXmlTree)selectedTree).getNodes();
  }
 else {
    nodes=((OutputXmlTree)selectedTree).getNodes();
  }
  List<Integer> selectionIndices=new ArrayList<Integer>();
  Iterator iterator=selection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof TreeNodeEditPart) {
      TreeNode model=(TreeNode)((TreeNodeEditPart)obj).getModel();
      if (model.eContainer() == selectedTree) {
        selectionIndices.add(nodes.indexOf(model));
      }
    }
  }
  int selections[]=new int[selectionIndices.size()];
  for (int i=0; i < selectionIndices.size(); i++) {
    selections[i]=selectionIndices.get(i);
  }
  MetadataTableEditorView metaEditorView=null;
  if (selectedTree instanceof InputXmlTree) {
    metaEditorView=mapperUI.getTabFolderEditors().getInputMetaEditorView();
  }
 else {
    metaEditorView=mapperUI.getTabFolderEditors().getOutputMetaEditorView();
  }
  metaEditorView.getExtendedTableViewer().getTableViewerCreator().getSelectionHelper().setSelection(selections);
}","private void onSelectedEntries(IStructuredSelection selection,AbstractInOutTree selectedTree){
  EList<? extends TreeNode> nodes=null;
  if (selectedTree instanceof InputXmlTree) {
    nodes=((InputXmlTree)selectedTree).getNodes();
  }
 else {
    nodes=((OutputXmlTree)selectedTree).getNodes();
  }
  List<Integer> selectionIndices=new ArrayList<Integer>();
  Iterator iterator=selection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof TreeNodeEditPart) {
      TreeNode model=(TreeNode)((TreeNodeEditPart)obj).getModel();
      if (model.eContainer() == selectedTree) {
        selectionIndices.add(nodes.indexOf(model));
      }
    }
  }
  int selections[]=new int[selectionIndices.size()];
  for (int i=0; i < selectionIndices.size(); i++) {
    selections[i]=selectionIndices.get(i);
  }
  MetadataTableEditorView metaEditorView=null;
  if (selectedTree instanceof InputXmlTree) {
    metaEditorView=mapperUI.getTabFolderEditors().getInputMetaEditorView();
  }
 else {
    metaEditorView=mapperUI.getTabFolderEditors().getOutputMetaEditorView();
  }
  if (metaEditorView != null) {
    metaEditorView.getTableViewerCreator().refresh();
  }
  metaEditorView.getExtendedTableViewer().getTableViewerCreator().getSelectionHelper().setSelection(selections);
}",0.9644268774703556
124197,"/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTableForColumnsListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpression(event,tableViewerCreator,tableEntry);
    }
  }
);
  if (abstractDataMapTable instanceof InputTable) {
    InputTable inputTable=(InputTable)abstractDataMapTable;
    inputTable.getTableGlobalMapEntriesModel().addAfterOperationListListener(new IListenableListListener<GlobalMapEntry>(){
      public void handleEvent(      ListenableListEvent<GlobalMapEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    inputTable.getTableGlobalMapEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<GlobalMapEntry>(){
      public void handleEvent(      ModifiedBeanEvent<GlobalMapEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForGlobalMap;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
}","/** 
 * DOC amaumont Comment method ""addTableForColumnsListeners"".
 */
private void addTableForColumnsListeners(){
  tableViewerCreatorForColumns.addCellValueModifiedListener(new ITableCellValueModifiedListener(){
    public void cellValueModified(    TableCellValueModifiedEvent e){
      unselectAllEntriesIfErrorDetected(e);
    }
  }
);
  final TableViewer tableViewerForEntries=tableViewerCreatorForColumns.getTableViewer();
  tableViewerForEntries.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
      if (selectionIndices.length > 0) {
        selectThisDataMapTableView();
        onSelectedEntries(event.getSelection(),selectionIndices);
        MetadataTableEditorView metadataTableEditorView=null;
        if (getZone() == Zone.INPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
        }
 else         if (getZone() == Zone.OUTPUTS) {
          metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
        }
        if (metadataTableEditorView != null) {
          metadataTableEditorView.getTableViewerCreator().refresh();
        }
      }
    }
  }
);
  tableForEntries.addListener(SWT.DragDetect,new Listener(){
    public void handleEvent(    Event event){
      onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
    }
  }
);
  tableViewerCreatorForColumns.getSelectionHelper().addAfterSelectionListener(new ILineSelectionListener(){
    public void handle(    LineSelectionEvent e){
      if (forceExecuteSelectionEvent) {
        forceExecuteSelectionEvent=false;
        onSelectedEntries(tableViewerForEntries.getSelection(),tableViewerForEntries.getTable().getSelectionIndices());
      }
    }
  }
);
  tableForEntries.addListener(SWT.KeyDown,new Listener(){
    public void handleEvent(    Event event){
      processEnterKeyDown(tableViewerCreatorForColumns,event);
    }
  }
);
  abstractDataMapTable.getTableColumnsEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<IColumnEntry>(){
    public void handleEvent(    ModifiedBeanEvent<IColumnEntry> event){
      TableViewerCreator tableViewerCreator=tableViewerCreatorForColumns;
      ITableEntry tableEntry=event.bean;
      parseExpression(event,tableViewerCreator,tableEntry);
    }
  }
);
  if (abstractDataMapTable instanceof InputTable) {
    InputTable inputTable=(InputTable)abstractDataMapTable;
    inputTable.getTableGlobalMapEntriesModel().addAfterOperationListListener(new IListenableListListener<GlobalMapEntry>(){
      public void handleEvent(      ListenableListEvent<GlobalMapEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    inputTable.getTableGlobalMapEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<GlobalMapEntry>(){
      public void handleEvent(      ModifiedBeanEvent<GlobalMapEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForGlobalMap;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
  if (abstractDataMapTable instanceof OutputTable) {
    OutputTable outputTable=(OutputTable)abstractDataMapTable;
    outputTable.getTableFiltersEntriesModel().addAfterOperationListListener(new IListenableListListener<FilterTableEntry>(){
      public void handleEvent(      ListenableListEvent<FilterTableEntry> event){
        if (DataMapTableView.this.canBeResizedAtPreferedSize()) {
          resizeAtExpandedSize();
        }
      }
    }
);
    outputTable.getTableFiltersEntriesModel().addModifiedBeanListener(new IModifiedBeanListener<FilterTableEntry>(){
      public void handleEvent(      ModifiedBeanEvent<FilterTableEntry> event){
        TableViewerCreator tableViewerCreator=tableViewerCreatorForFilters;
        ITableEntry tableEntry=event.bean;
        parseExpression(event,tableViewerCreator,tableEntry);
      }
    }
);
  }
}",0.9398477157360406
124198,"public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  int[] selectionIndices=tableViewerForEntries.getTable().getSelectionIndices();
  if (selectionIndices.length > 0) {
    selectThisDataMapTableView();
    onSelectedEntries(event.getSelection(),selectionIndices);
    MetadataTableEditorView metadataTableEditorView=null;
    if (getZone() == Zone.INPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getInputMetaEditorView();
    }
 else     if (getZone() == Zone.OUTPUTS) {
      metadataTableEditorView=mapperManager.getUiManager().getOutputMetaEditorView();
    }
    if (metadataTableEditorView != null) {
      metadataTableEditorView.getTableViewerCreator().refresh();
    }
  }
}",0.5616161616161616
124199,"private void onSelectedEntries(IStructuredSelection selection,AbstractInOutTree selectedTree){
  EList<? extends TreeNode> nodes=null;
  if (selectedTree instanceof InputXmlTree) {
    nodes=((InputXmlTree)selectedTree).getNodes();
  }
 else {
    nodes=((OutputXmlTree)selectedTree).getNodes();
  }
  List<Integer> selectionIndices=new ArrayList<Integer>();
  Iterator iterator=selection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof TreeNodeEditPart) {
      TreeNode model=(TreeNode)((TreeNodeEditPart)obj).getModel();
      if (model.eContainer() == selectedTree) {
        selectionIndices.add(nodes.indexOf(model));
      }
    }
  }
  int selections[]=new int[selectionIndices.size()];
  for (int i=0; i < selectionIndices.size(); i++) {
    selections[i]=selectionIndices.get(i);
  }
  MetadataTableEditorView metaEditorView=null;
  if (selectedTree instanceof InputXmlTree) {
    metaEditorView=mapperUI.getTabFolderEditors().getInputMetaEditorView();
  }
 else {
    metaEditorView=mapperUI.getTabFolderEditors().getOutputMetaEditorView();
  }
  metaEditorView.getExtendedTableViewer().getTableViewerCreator().getSelectionHelper().setSelection(selections);
}","private void onSelectedEntries(IStructuredSelection selection,AbstractInOutTree selectedTree){
  EList<? extends TreeNode> nodes=null;
  if (selectedTree instanceof InputXmlTree) {
    nodes=((InputXmlTree)selectedTree).getNodes();
  }
 else {
    nodes=((OutputXmlTree)selectedTree).getNodes();
  }
  List<Integer> selectionIndices=new ArrayList<Integer>();
  Iterator iterator=selection.iterator();
  while (iterator.hasNext()) {
    Object obj=iterator.next();
    if (obj instanceof TreeNodeEditPart) {
      TreeNode model=(TreeNode)((TreeNodeEditPart)obj).getModel();
      if (model.eContainer() == selectedTree) {
        selectionIndices.add(nodes.indexOf(model));
      }
    }
  }
  int selections[]=new int[selectionIndices.size()];
  for (int i=0; i < selectionIndices.size(); i++) {
    selections[i]=selectionIndices.get(i);
  }
  MetadataTableEditorView metaEditorView=null;
  if (selectedTree instanceof InputXmlTree) {
    metaEditorView=mapperUI.getTabFolderEditors().getInputMetaEditorView();
  }
 else {
    metaEditorView=mapperUI.getTabFolderEditors().getOutputMetaEditorView();
  }
  if (metaEditorView != null) {
    metaEditorView.getTableViewerCreator().refresh();
  }
  metaEditorView.getExtendedTableViewer().getTableViewerCreator().getSelectionHelper().setSelection(selections);
}",0.9644268774703556
124200,"/** 
 * Calculates the contents of page 2 when the it is activated.
 */
@Override protected void pageChange(final int newPageIndex){
  super.pageChange(newPageIndex);
  setName();
  if (newPageIndex == 1) {
    if (codeEditor instanceof ISyntaxCheckableEditor) {
      moveCursorToSelectedComponent();
    }
    codeSync();
    if (codeEditor instanceof ISyntaxCheckableEditor && LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
      ((ISyntaxCheckableEditor)codeEditor).validateSyntax();
    }
  }
 else   if (newPageIndex == 0 && oldPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      try {
        boolean isDirty=getEditor(2).isDirty();
        getEditor(2).doSave(null);
        IProcess2 oldProcess=getProcess();
        ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
        URI uri=URI.createFileURI(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString());
        Resource resource=new ResourceSetImpl().getResource(uri,true);
        ProcessType processTypeTemp=(ProcessType)resource.getContents().get(0);
        if (processTypeTemp.getAuthor() != null) {
          ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
          Item item=oldProcess.getProperty().getItem();
          if (item instanceof ProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
 else           if (item instanceof JobletProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
          oldProcess.getUpdateManager().updateAll();
          designerEditor.setDirty(isDirty);
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(true);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(true);
        }
      }
    }
  }
 else   if (newPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      ICreateXtextProcessService convertJobtoScriptService=CorePlugin.getDefault().getCreateXtextProcessService();
      String scriptValue;
      try {
        scriptValue=convertJobtoScriptService.convertJobtoScript(getProcess().saveXmlFile());
        IFile file=(IFile)getEditor(2).getEditorInput().getAdapter(IResource.class);
        ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(scriptValue.getBytes());
        if (file.exists()) {
          ((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider().getDocument(getEditor(2).getEditorInput()).set(scriptValue);
          boolean isReadjob=((JobEditorInput)getEditor(0).getEditorInput()).isReadOnly();
          IProxyRepositoryFactory rFactory=ProxyRepositoryFactory.getInstance();
          if (isReadjob || rFactory.isUserReadOnlyOnCurrentProject()) {
            IDocumentProvider provider=((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider();
            Class p=provider.getClass();
            Class[] type=new Class[1];
            type[0]=Boolean.TYPE;
            Object[] para=new Object[1];
            para[0]=Boolean.TRUE;
            Method method=p.getMethod(""String_Node_Str"",type);
            method.invoke(provider,para);
          }
          IAction action=((AbstractDecoratedTextEditor)getEditor(2)).getAction(""String_Node_Str"");
          action.run();
          getEditor(2).doSave(null);
        }
 else {
          file.create(byteArrayInputStream,true,null);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
catch (      SecurityException e) {
        ExceptionHandler.process(e);
      }
catch (      NoSuchMethodException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalArgumentException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalAccessException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(false);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(false);
        }
      }
    }
  }
  oldPageIndex=getActivePage();
}","/** 
 * Calculates the contents of page 2 when the it is activated.
 */
@Override protected void pageChange(final int newPageIndex){
  super.pageChange(newPageIndex);
  setName();
  if (newPageIndex == 1) {
    if (codeEditor instanceof ISyntaxCheckableEditor) {
      moveCursorToSelectedComponent();
    }
    codeSync();
    if (codeEditor instanceof ISyntaxCheckableEditor && LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
      ((ISyntaxCheckableEditor)codeEditor).validateSyntax();
    }
  }
 else   if (newPageIndex == 0 && oldPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      try {
        boolean isDirty=getEditor(2).isDirty();
        getEditor(2).doSave(null);
        IProcess2 oldProcess=getProcess();
        ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
        ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
        Item item=oldProcess.getProperty().getItem();
        if (item instanceof ProcessItem) {
          ((Process)oldProcess).updateProcess(processType);
        }
 else         if (item instanceof JobletProcessItem) {
          ((Process)oldProcess).updateProcess(processType);
        }
        oldProcess.getUpdateManager().updateAll();
        designerEditor.setDirty(isDirty);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(true);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(true);
        }
      }
    }
  }
 else   if (newPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      ICreateXtextProcessService convertJobtoScriptService=CorePlugin.getDefault().getCreateXtextProcessService();
      String scriptValue;
      try {
        scriptValue=convertJobtoScriptService.convertJobtoScript(getProcess().saveXmlFile());
        IFile file=(IFile)getEditor(2).getEditorInput().getAdapter(IResource.class);
        ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(scriptValue.getBytes());
        if (file.exists()) {
          ((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider().getDocument(getEditor(2).getEditorInput()).set(scriptValue);
          boolean isReadjob=((JobEditorInput)getEditor(0).getEditorInput()).isReadOnly();
          IProxyRepositoryFactory rFactory=ProxyRepositoryFactory.getInstance();
          if (isReadjob || rFactory.isUserReadOnlyOnCurrentProject()) {
            IDocumentProvider provider=((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider();
            Class p=provider.getClass();
            Class[] type=new Class[1];
            type[0]=Boolean.TYPE;
            Object[] para=new Object[1];
            para[0]=Boolean.TRUE;
            Method method=p.getMethod(""String_Node_Str"",type);
            method.invoke(provider,para);
          }
          IAction action=((AbstractDecoratedTextEditor)getEditor(2)).getAction(""String_Node_Str"");
          action.run();
          getEditor(2).doSave(null);
        }
 else {
          file.create(byteArrayInputStream,true,null);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
catch (      SecurityException e) {
        ExceptionHandler.process(e);
      }
catch (      NoSuchMethodException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalArgumentException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalAccessException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(false);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(false);
        }
      }
    }
  }
  oldPageIndex=getActivePage();
}",0.8781975600157418
124201,"/** 
 * Parse the XML file. Buffer the result in LoopEntry.
 * @param is InputStream
 */
public void parse(java.io.InputStream is,String charset){
  this.charset=charset;
  try {
    DefaultHandler hd=null;
    SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();
    if (rootPath == null || rootPath.equals(""String_Node_Str"")) {
      hd=newHandler();
    }
 else {
      hd=newHandler2();
    }
    org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
    inSource.setEncoding(this.charset);
    saxParser.parse(is,hd);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Parse the XML file. Buffer the result in LoopEntry.
 * @param is InputStream
 */
public void parse(java.io.InputStream is,String charset){
  this.charset=charset;
  try {
    DefaultHandler hd=null;
    SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();
    if (rootPath == null || rootPath.equals(""String_Node_Str"")) {
      hd=newHandler();
    }
 else {
      hd=newHandler2();
    }
    saxParser.setProperty(""String_Node_Str"",hd);
    org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
    inSource.setEncoding(this.charset);
    saxParser.parse(is,hd);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9678688524590164
124202,"public void register(DefaultHandler handler){
  handlerList.add(handler);
}","public void register(DefaultHandler2 handler){
  handlerList.add(handler);
}",0.9933774834437086
124203,"/** 
 * Deal with the bug 4402: the content <quotes_encoded>&quot;hello world&quot;</quotes_encoded>. In this case, ""characters"" will be called three time. first: "" second: hello world third: ""
 */
public void characters(char ch[],int start,int length) throws SAXException {
  if (isLooping) {
    String text=new String(ch,start,length);
    if (text.length() > 0) {
      if (outputText) {
        for (        int indexOfColumn : indexOfColumns) {
          if (indexOfColumn >= 0 && !currentRowHaveValue[indexOfColumn]) {
            if (currentRow[indexOfColumn] == null) {
              currentRow[indexOfColumn]=text;
            }
 else {
              currentRow[indexOfColumn]+=text;
            }
          }
        }
      }
      if (this.entry.hasFunctions()) {
        Map<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",loopPath);
        map.put(""String_Node_Str"",currentPath);
        map.put(""String_Node_Str"",text);
        listArgs.add(map);
      }
    }
  }
}","/** 
 * Deal with the bug 4402: the content <quotes_encoded>&quot;hello world&quot;</quotes_encoded>. In this case, ""characters"" will be called three time. first: "" second: hello world third: ""
 */
public void characters(char ch[],int start,int length) throws SAXException {
  if (isLooping) {
    String text=new String(ch,start,length);
    if (text.length() > 0) {
      for (int i=0; i < selectColumns.size(); i++) {
        if (outputTexts[i] && !currentRowHaveValue[i]) {
          if (this.asXMLs.get(i) && !inCDATA) {
            text=escapeEntityHelper.escapeElementEntities(text);
          }
          if (currentRow[i] == null) {
            currentRow[i]=text;
          }
 else {
            currentRow[i]+=text;
          }
        }
      }
      if (this.entry.hasFunctions()) {
        Map<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",loopPath);
        map.put(""String_Node_Str"",currentPath);
        map.put(""String_Node_Str"",text);
        listArgs.add(map);
      }
    }
  }
}",0.8272506082725061
124204,"public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping && outputText) {
    for (    int indexOfColumn : indexOfColumns) {
      if (indexOfColumn >= 0) {
        if (currentRow[indexOfColumn] == null) {
          currentRow[indexOfColumn]=""String_Node_Str"";
        }
        if (currentRow[indexOfColumn].trim().startsWith(""String_Node_Str"")) {
          currentRow[indexOfColumn]=currentRow[indexOfColumn] + ""String_Node_Str"" + qName+ ""String_Node_Str"";
        }
 else {
          currentRowHaveValue[indexOfColumn]=true;
        }
      }
    }
  }
  outputText=false;
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping) {
    for (int i=0; i < selectColumns.size(); i++) {
      if (outputTexts[i]) {
        if (!currentRowHaveValue[i]) {
          if (currentRow[i] == null) {
            currentRow[i]=""String_Node_Str"";
          }
        }
        currentRowHaveValue[i]=true;
      }
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        currentRow[i]+=""String_Node_Str"" + qName + ""String_Node_Str"";
        if (this.currentPath.equals(column)) {
          currentRowHaveValue[i]=true;
        }
      }
      outputTexts[i]=false;
    }
  }
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
    reset();
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}",0.1747793908340449
124205,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  List<String> loopCols=new ArrayList<String>();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        loopCols.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          loopCols.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          loopCols.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    loopCols.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    indexOfColumns[0]=loopCols.indexOf(currentPath);
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < loopCols.size(); i++) {
      String column=loopCols.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        indexOfColumns[1]=i;
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ attributes.getValue(m)+ ""String_Node_Str"";
          }
        }
        outputText=true;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
            }
            currentRowHaveValue[i]=true;
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputText=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  selectColumns.clear();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          selectColumns.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    selectColumns.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < selectColumns.size(); i++) {
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      outputTexts[i]=false;
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ escapeEntityHelper.escapeAttributeEntities(attributes.getValue(m))+ ""String_Node_Str"";
          }
        }
        outputTexts[i]=true;
        currentRowHaveValue[i]=false;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
              currentRowHaveValue[i]=true;
            }
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputTexts[i]=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}",0.5554840784818269
124206,"@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}","@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if ((propName.equals(EParameterName.DBNAME.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName())) && elem instanceof Node) {
    Node node=(Node)elem;
    IElementParameter dqRulerParam=node.getElementParameter(""String_Node_Str"");
    if (dqRulerParam != null) {
      ITDQRuleService rulerService=null;
      try {
        rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
      }
 catch (      RuntimeException e) {
      }
      if (rulerService != null) {
        IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
        IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
        IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
        IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
        Object value=dqRulerParam.getValue();
        String previousDisplayName=null;
        if (value != null && !""String_Node_Str"".equals(value) && dqRulerParam.getListItemsValue().length > 0) {
          int ruleIndex=dqRulerParam.getIndexOfItemFromList((String)value);
          previousDisplayName=dqRulerParam.getListItemsDisplayName()[ruleIndex];
        }
        rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,dqRulerParam);
        if (previousDisplayName != null) {
          String[] names=dqRulerParam.getListItemsDisplayName();
          Integer valueIndex=null;
          for (int i=0; i < names.length; i++) {
            if (previousDisplayName.equals(names[i])) {
              valueIndex=i;
            }
          }
          if (valueIndex != null) {
            dqRulerParam.setValue(dqRulerParam.getListItemsValue()[valueIndex]);
          }
 else {
            dqRulerParam.setValue(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}",0.9126631678105236
124207,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  try {
    if (isPatternList) {
      ITDQPatternService service=null;
      try {
        service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
      }
 catch (      RuntimeException e) {
      }
      if (service != null && elem instanceof Node) {
        Node node=(Node)elem;
        IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
        service.overridePatternList(typeParam,param);
      }
    }
  }
 catch (  Exception e) {
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.7611033193080879
124208,"private void updateStatus(){
  final MapperSettingModel defaultModel=settingsManager.getDefaultModel();
  if (defaultModel.isDieOnError() == dieOnErrorButton.getSelection()) {
    dieOnErrorButton.setBackground(null);
  }
 else {
    dieOnErrorButton.setBackground(color);
  }
  if (defaultModel.isLookInParallel() == lookupInParallelButton.getSelection()) {
    lookupInParallelButton.setBackground(null);
  }
 else {
    lookupInParallelButton.setBackground(color);
  }
  if (defaultModel.getTempDataDir().equals(directoryField.getText())) {
    directoryField.getTextControl().setBackground(null);
    directoryField.setToolTipText(null);
  }
 else {
    directoryField.getTextControl().setBackground(color);
    directoryField.setToolTipText(""String_Node_Str"");
  }
  if (defaultModel.getRowBufferSize().equals(sizeField.getText())) {
    sizeField.getTextControl().setBackground(null);
    sizeField.setToolTipText(null);
  }
 else {
    sizeField.getTextControl().setBackground(color);
    sizeField.setToolTipText(""String_Node_Str"");
  }
}","private void updateStatus(){
  final MapperSettingModel defaultModel=settingsManager.getDefaultModel();
  if (defaultModel.isDieOnError() == dieOnErrorButton.getSelection()) {
    dieOnErrorButton.setBackground(null);
  }
 else {
    dieOnErrorButton.setBackground(color);
  }
  if (defaultModel.isLookInParallel() == lookupInParallelButton.getSelection()) {
    lookupInParallelButton.setBackground(null);
  }
 else {
    lookupInParallelButton.setBackground(color);
  }
  if (defaultModel.getTempDataDir().equals(directoryField.getText())) {
    directoryField.getTextControl().setBackground(null);
    directoryField.setToolTipText(null);
  }
 else {
    if (directoryField.getText() != null && !directoryField.getText().startsWith(QUOTATION_MARK) && !directoryField.getText().endsWith(QUOTATION_MARK)) {
      directoryField.setText(TalendQuoteUtils.addQuotesIfNotExist(directoryField.getText()));
    }
    directoryField.getTextControl().setBackground(color);
    directoryField.setToolTipText(""String_Node_Str"");
  }
  if (defaultModel.getRowBufferSize().equals(sizeField.getText())) {
    sizeField.getTextControl().setBackground(null);
    sizeField.setToolTipText(null);
  }
 else {
    sizeField.getTextControl().setBackground(color);
    sizeField.setToolTipText(""String_Node_Str"");
  }
}",0.8917306052855924
124209,"private void updateStatus(){
  final MapperSettingModel defaultModel=settingsManager.getDefaultModel();
  if (defaultModel.isDieOnError() == dieOnErrorButton.getSelection()) {
    dieOnErrorButton.setBackground(null);
  }
 else {
    dieOnErrorButton.setBackground(color);
  }
  if (defaultModel.isLookInParallel() == lookupInParallelButton.getSelection()) {
    lookupInParallelButton.setBackground(null);
  }
 else {
    lookupInParallelButton.setBackground(color);
  }
  if (defaultModel.getTempDataDir().equals(directoryField.getText())) {
    directoryField.getTextControl().setBackground(null);
    directoryField.setToolTipText(null);
  }
 else {
    directoryField.getTextControl().setBackground(color);
    directoryField.setToolTipText(""String_Node_Str"");
  }
  if (defaultModel.getRowBufferSize().equals(sizeField.getText())) {
    sizeField.getTextControl().setBackground(null);
    sizeField.setToolTipText(null);
  }
 else {
    sizeField.getTextControl().setBackground(color);
    sizeField.setToolTipText(""String_Node_Str"");
  }
}","private void updateStatus(){
  final MapperSettingModel defaultModel=settingsManager.getDefaultModel();
  if (defaultModel.isDieOnError() == dieOnErrorButton.getSelection()) {
    dieOnErrorButton.setBackground(null);
  }
 else {
    dieOnErrorButton.setBackground(color);
  }
  if (defaultModel.isLookInParallel() == lookupInParallelButton.getSelection()) {
    lookupInParallelButton.setBackground(null);
  }
 else {
    lookupInParallelButton.setBackground(color);
  }
  if (defaultModel.getTempDataDir().equals(directoryField.getText())) {
    directoryField.getTextControl().setBackground(null);
    directoryField.setToolTipText(null);
  }
 else {
    if (directoryField.getText() != null && !directoryField.getText().startsWith(QUOTATION_MARK) && !directoryField.getText().endsWith(QUOTATION_MARK)) {
      directoryField.setText(TalendQuoteUtils.addQuotesIfNotExist(directoryField.getText()));
    }
    directoryField.getTextControl().setBackground(color);
    directoryField.setToolTipText(""String_Node_Str"");
  }
  if (defaultModel.getRowBufferSize().equals(sizeField.getText())) {
    sizeField.getTextControl().setBackground(null);
    sizeField.setToolTipText(null);
  }
 else {
    sizeField.getTextControl().setBackground(color);
    sizeField.setToolTipText(""String_Node_Str"");
  }
}",0.8917306052855924
124210,"private void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<RelationshipItemBuilder.Relation> relations;
  if (item instanceof JobletProcessItem) {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOBLET_RELATION);
  }
 else {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  }
  for (  RelationshipItemBuilder.Relation relation : relations) {
    IRepositoryViewObject obj=null;
    try {
      if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(relation.getId());
      }
 else {
        obj=factory.getLastVersion(relation.getId());
      }
      if (obj != null) {
        RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
        if (repositoryNode != null) {
          if (!repositoryObjects.contains(obj)) {
            repositoryObjects.add(obj);
            checkAllVerSionLatest(repositoryObjects,obj);
            checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
          }
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}","private void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<RelationshipItemBuilder.Relation> relations;
  if (item instanceof JobletProcessItem) {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOBLET_RELATION);
  }
 else {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  }
  for (  RelationshipItemBuilder.Relation relation : relations) {
    IRepositoryViewObject obj=null;
    String id=relation.getId();
    try {
      if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(id);
      }
 else {
        if (id != null && id.indexOf(""String_Node_Str"") != -1) {
          id=id.substring(0,id.lastIndexOf(""String_Node_Str""));
        }
        obj=factory.getLastVersion(id);
      }
      if (obj != null) {
        RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
        if (repositoryNode != null) {
          if (!repositoryObjects.contains(obj)) {
            repositoryObjects.add(obj);
            checkAllVerSionLatest(repositoryObjects,obj);
            checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
          }
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}",0.9350486350800126
124211,"@Override public Object[] getChildren(Object parent){
  RepositoryNode repositoryNode=((RepositoryNode)parent);
  ERepositoryObjectType objectType=repositoryNode.getObjectType();
  if (objectType != null) {
    if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS || objectType == ERepositoryObjectType.METADATA_FILE_BRMS || objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED || objectType == ERepositoryObjectType.METADATA_FILE_EBCDIC || objectType == ERepositoryObjectType.METADATA_FILE_EXCEL || objectType == ERepositoryObjectType.METADATA_FILE_FTP || objectType == ERepositoryObjectType.METADATA_FILE_HL7 || objectType == ERepositoryObjectType.METADATA_FILE_LDIF || objectType == ERepositoryObjectType.METADATA_FILE_POSITIONAL || objectType == ERepositoryObjectType.METADATA_FILE_REGEXP || objectType == ERepositoryObjectType.METADATA_FILE_XML) {
      return new Object[0];
    }
  }
  if (!repositoryNode.isInitialized()) {
    if (repositoryNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)repositoryNode.getParent()).initializeChildren(parent);
    }
    repositoryNode.setInitialized(true);
  }
  return repositoryNode.getChildren().toArray();
}","@Override public Object[] getChildren(Object parent){
  RepositoryNode repositoryNode=((RepositoryNode)parent);
  ERepositoryObjectType objectType=repositoryNode.getObjectType();
  if (objectType != null) {
    if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS || objectType == ERepositoryObjectType.METADATA_FILE_BRMS || objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED || objectType == ERepositoryObjectType.METADATA_FILE_EBCDIC || objectType == ERepositoryObjectType.METADATA_FILE_EXCEL || objectType == ERepositoryObjectType.METADATA_FILE_FTP || objectType == ERepositoryObjectType.METADATA_FILE_HL7 || objectType == ERepositoryObjectType.METADATA_FILE_LDIF || objectType == ERepositoryObjectType.METADATA_FILE_POSITIONAL || objectType == ERepositoryObjectType.METADATA_FILE_REGEXP || objectType == ERepositoryObjectType.METADATA_FILE_XML || objectType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
      return new Object[0];
    }
  }
  if (!repositoryNode.isInitialized()) {
    if (repositoryNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)repositoryNode.getParent()).initializeChildren(parent);
    }
    repositoryNode.setInitialized(true);
  }
  return repositoryNode.getChildren().toArray();
}",0.9745248685806712
124212,"@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}","@Override public void execute(){
  IElementParameter currentParam=elem.getElementParameter(propName);
  oldElementValues.clear();
  if (currentParam == null) {
    return;
  }
  if (currentParam.isRepositoryValueUsed()) {
    if (currentParam.getFieldType() == EParameterFieldType.MEMO_SQL) {
      Object queryStoreValue=elem.getPropertyValue(EParameterName.QUERYSTORE_TYPE.getName());
      if (!EmfComponent.BUILTIN.equals(queryStoreValue) || !EmfComponent.TNS_FILE.equals(queryStoreValue)) {
        elem.setPropertyValue(EParameterName.QUERYSTORE_TYPE.getName(),EmfComponent.BUILTIN);
      }
      currentParam.setRepositoryValueUsed(false);
    }
 else {
      toUpdate=true;
      String oldValueString=elem.getPropertyValue(propName).toString();
      if (!oldValueString.endsWith(""String_Node_Str"") && !oldValueString.endsWith(""String_Node_Str"")) {
        elem.setPropertyValue(propertyTypeName,EmfComponent.BUILTIN);
      }
      for (      IElementParameter param : elem.getElementParameters()) {
        if (param.getCategory().equals(currentParam.getCategory())) {
          param.setRepositoryValueUsed(false);
        }
      }
    }
    repositoryValueWasUsed=true;
  }
 else {
    repositoryValueWasUsed=false;
  }
  oldValue=elem.getPropertyValue(propName);
  elem.setPropertyValue(propName,newValue);
  if ((propName.equals(EParameterName.DBNAME.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName()) || propName.equals(EParameterName.SCHEMA_DB.getName())) && elem instanceof Node) {
    Node node=(Node)elem;
    IElementParameter dqRulerParam=node.getElementParameter(""String_Node_Str"");
    if (dqRulerParam != null) {
      ITDQRuleService rulerService=null;
      try {
        rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
      }
 catch (      RuntimeException e) {
      }
      if (rulerService != null) {
        IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
        IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
        IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
        IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
        Object value=dqRulerParam.getValue();
        String previousDisplayName=null;
        if (value != null && !""String_Node_Str"".equals(value) && dqRulerParam.getListItemsValue().length > 0) {
          int ruleIndex=dqRulerParam.getIndexOfItemFromList((String)value);
          previousDisplayName=dqRulerParam.getListItemsDisplayName()[ruleIndex];
        }
        rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,dqRulerParam);
        if (previousDisplayName != null) {
          String[] names=dqRulerParam.getListItemsDisplayName();
          Integer valueIndex=null;
          for (int i=0; i < names.length; i++) {
            if (previousDisplayName.equals(names[i])) {
              valueIndex=i;
            }
          }
          if (valueIndex != null) {
            dqRulerParam.setValue(dqRulerParam.getListItemsValue()[valueIndex]);
          }
 else {
            dqRulerParam.setValue(""String_Node_Str"");
          }
        }
      }
    }
  }
  if (propName.contains(EParameterName.USE_DYNAMIC_JOB.getName()) && newValue.equals(false)) {
    IElementParameter processParam=elem.getElementParameter(EParameterName.PROCESS.getName());
    IElementParameter processTypeParameter=elem.getElementParameter(EParameterName.PROCESS_TYPE_PROCESS.getName());
    final String parentName=processParam.getName() + ""String_Node_Str"";
    elem.setPropertyValue(parentName + processTypeParameter.getName(),""String_Node_Str"");
    elem.setPropertyValue(processParam.getName(),""String_Node_Str"");
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    boolean isSelectUseDynamic=false;
    IElementParameter useDynamicJobParameter=elem.getElementParameter(EParameterName.USE_DYNAMIC_JOB.getName());
    if (useDynamicJobParameter != null && useDynamicJobParameter instanceof IElementParameter) {
      Object useDynamicJobValue=(Object)useDynamicJobParameter.getValue();
      if (useDynamicJobValue != null && useDynamicJobValue instanceof Boolean) {
        isSelectUseDynamic=(Boolean)useDynamicJobValue;
      }
    }
    if (isSelectUseDynamic) {
      StringBuffer labels=new StringBuffer(""String_Node_Str"");
      if (newValue != null) {
        String[] strValues=newValue.toString().split(""String_Node_Str"");
        for (int i=0; i < strValues.length; i++) {
          String strValue=strValues[i];
          ProcessItem processItem=ItemCacheManager.getProcessItem((String)strValue);
          if (processItem != null) {
            String label=processItem.getProperty().getLabel();
            if (i > 0) {
              labels.append(""String_Node_Str"");
            }
            labels.append(label);
          }
        }
      }
      currentParam.getParentParameter().setValue(labels.toString());
    }
 else {
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_VERSION.getName())) {
    boolean isJobletComponent=false;
    IJobletProviderService service=null;
    if (PluginChecker.isJobLetPluginLoaded()) {
      service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    }
    if (elem instanceof Node) {
      if (service != null) {
        isJobletComponent=service.isJobletComponent((Node)elem);
      }
    }
    if (isJobletComponent) {
      String id=service.getJobletComponentItem((Node)elem).getId();
      String version=(String)newValue;
      IComponent newComponent=service.setPropertyForJobletComponent(id,version);
      reloadNode((Node)elem,newComponent);
    }
 else {
      IElementParameter processIdParam=currentParam.getParentParameter().getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
      ProcessItem processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)newValue);
      if (processItem != null) {
        currentParam.getParentParameter().setValue(processItem.getProperty().getLabel());
      }
    }
  }
  if (propName.contains(EParameterName.PROCESS_TYPE_CONTEXT.getName())) {
    if (elem instanceof Node) {
      Node node=(Node)elem;
      List<IContext> listContext=node.getProcess().getContextManager().getListContext();
      List<String> values=new ArrayList<String>();
      for (      IContext context : listContext) {
        values.add(context.getName());
      }
      currentParam.setListItemsDisplayName(values.toArray(new String[0]));
      currentParam.setListItemsValue(values.toArray(new String[0]));
      currentParam.setValue(newValue);
    }
  }
  if (propName.equals(EParameterName.VALIDATION_RULES.getName())) {
    if (elem instanceof INode) {
      ValidationRulesUtil.createRejectConnector((INode)elem);
      ValidationRulesUtil.updateRejectMetatable((INode)elem,null);
      if (newValue != null && (!(Boolean)newValue)) {
        ValidationRulesUtil.removeRejectConnector((INode)elem);
        ValidationRulesUtil.removeRejectConnection((INode)elem);
      }
    }
  }
  String dbType=""String_Node_Str"";
  if (newValue instanceof String) {
    dbType=(String)newValue;
  }
  if (propName.equals(EParameterName.DB_TYPE.getName())) {
    IElementParameter elementParameter=elem.getElementParameter(EParameterName.DB_VERSION.getName());
    IElementParameter elementParameter2=elem.getElementParameter(EParameterName.SCHEMA_DB.getName());
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
 else   if (propName.equals(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()))) {
    IElementParameter elementParameter=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_VERSION.getName()));
    IElementParameter elementParameter2=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.SCHEMA_DB.getName()));
    setDbVersion(elementParameter,dbType);
    DesignerUtilities.setSchemaDB(elementParameter2,newValue);
  }
  if (!toUpdate && (currentParam.getFieldType().equals(EParameterFieldType.RADIO) || currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST) || currentParam.getFieldType().equals(EParameterFieldType.CHECK)|| currentParam.getFieldType().equals(EParameterFieldType.AS400_CHECK))) {
    toUpdate=false;
    for (int i=0; i < elem.getElementParameters().size(); i++) {
      IElementParameter testedParam=elem.getElementParameters().get(i);
      String showIf=testedParam.getShowIf();
      String notShowIf=testedParam.getNotShowIf();
      if (showIf != null) {
        if (showIf.contains(currentParam.getName())) {
          toUpdate=true;
        }
      }
 else {
        if (notShowIf != null) {
          if (notShowIf.contains(currentParam.getName())) {
            toUpdate=true;
          }
        }
      }
      if (testedParam.getFieldType() == EParameterFieldType.TABLE) {
        String[] tmpShowIfs=testedParam.getListItemsShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
        tmpShowIfs=testedParam.getListItemsNotShowIf();
        if (tmpShowIfs != null) {
          for (          String show : tmpShowIfs) {
            if (show != null && show.contains(currentParam.getName())) {
              toUpdate=true;
            }
          }
        }
      }
      if (currentParam.getFieldType().equals(EParameterFieldType.CLOSED_LIST)) {
        if (testedParam.getListItemsShowIf() != null) {
          for (int j=0; j < testedParam.getListItemsShowIf().length && !toUpdate; j++) {
            showIf=testedParam.getListItemsShowIf()[j];
            notShowIf=testedParam.getListItemsNotShowIf()[j];
            if (showIf != null) {
              if (showIf.contains(currentParam.getName())) {
                toUpdate=true;
              }
            }
 else {
              if (notShowIf != null) {
                if (notShowIf.contains(currentParam.getName())) {
                  toUpdate=true;
                }
              }
            }
          }
        }
      }
      setDefaultValues(currentParam,testedParam);
    }
  }
  if (currentParam.getName().equals(EParameterName.PROCESS_TYPE_PROCESS.getName())) {
    toUpdate=true;
  }
  if (toUpdate) {
    elem.setPropertyValue(updataComponentParamName,new Boolean(true));
  }
  boolean updateCode=false;
  if (getNewValue() instanceof String && elem instanceof INode) {
    INode curNode=(INode)elem;
    String uniqueName=curNode.getUniqueName();
    IProcess process=curNode.getProcess();
    if (process != null && process instanceof IProcess2) {
      IProcess2 process2=(IProcess2)process;
      List<? extends INode> generatingNodes=null;
      if (process2.isProcessModified()) {
        process2.setProcessModified(false);
        generatingNodes=process2.getGeneratingNodes();
        if (generatingNodes != null) {
          for (          INode genNode : generatingNodes) {
            if (genNode.getUniqueName().equals(uniqueName)) {
              IElementParameter genParam=genNode.getElementParameter(propName);
              if (genParam != null) {
                genParam.setValue(newValue);
                break;
              }
            }
          }
        }
        CodeView.refreshCodeView(elem);
        process2.setProcessModified(true);
        updateCode=true;
      }
    }
  }
  if (elem instanceof IGraphicalNode) {
    ((IGraphicalNode)elem).checkAndRefreshNode();
  }
  if (needUpdateMonitorConnection()) {
    ((Connection)elem).setMonitorConnection((Boolean)currentParam.getValue());
  }
}",0.9126631678105236
124213,"@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  try {
    if (isPatternList) {
      ITDQPatternService service=null;
      try {
        service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
      }
 catch (      RuntimeException e) {
      }
      if (service != null && elem instanceof Node) {
        Node node=(Node)elem;
        IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
        service.overridePatternList(typeParam,param);
      }
    }
  }
 catch (  Exception e) {
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}","@Override public void refresh(IElementParameter param,boolean check){
  String paramName=param.getName();
  boolean isPatternList=StringUtils.equals(paramName,""String_Node_Str"");
  boolean isRule=StringUtils.equals(paramName,""String_Node_Str"");
  CCombo combo=(CCombo)hashCurControls.get(paramName);
  if (combo == null || combo.isDisposed()) {
    return;
  }
  if (isPatternList) {
    ITDQPatternService service=null;
    try {
      service=(ITDQPatternService)GlobalServiceRegister.getDefault().getService(ITDQPatternService.class);
    }
 catch (    RuntimeException e) {
    }
    if (service != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      service.overridePatternList(typeParam,param);
    }
  }
  if (isRule) {
    ITDQRuleService rulerService=null;
    try {
      rulerService=(ITDQRuleService)GlobalServiceRegister.getDefault().getService(ITDQRuleService.class);
    }
 catch (    RuntimeException e) {
    }
    if (rulerService != null && elem instanceof Node) {
      Node node=(Node)elem;
      IElementParameter typeParam=node.getElementParameter(""String_Node_Str"");
      IElementParameter dbParam=node.getElementParameter(EParameterName.DBNAME.getName());
      IElementParameter schemaParam=node.getElementParameter(EParameterName.SCHEMA_DB.getName());
      IElementParameter tableParam=node.getElementParameterFromField(EParameterFieldType.DBTABLE);
      rulerService.overrideRuleList(typeParam,dbParam,schemaParam,tableParam,param);
    }
  }
  Object value=param.getValue();
  if (value instanceof String) {
    String strValue=""String_Node_Str"";
    int nbInList=0, nbMax=param.getListItemsValue().length;
    String name=(String)value;
    while (strValue.equals(new String(""String_Node_Str"")) && nbInList < nbMax) {
      if (name.equals(param.getListItemsValue()[nbInList])) {
        strValue=param.getListItemsDisplayName()[nbInList];
      }
      nbInList++;
    }
    String[] paramItems=getListToDisplay(param);
    String[] comboItems=combo.getItems();
    if (!Arrays.equals(paramItems,comboItems)) {
      combo.setItems(paramItems);
    }
    if (isPatternList || isRule) {
      combo.setText(""String_Node_Str"".equals(strValue) ? (String)value : strValue);
    }
 else {
      combo.setText(strValue);
    }
    combo.setVisible(true);
  }
  if (param.isContextMode()) {
    combo.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
    combo.setEnabled(false);
  }
}",0.7611033193080879
124214,"/** 
 * Test if the selected item is a node.
 * @return true/false
 */
@SuppressWarnings(""String_Node_Str"") private boolean canPerformAction(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  List parts=getSelectedObjects();
  if (parts.size() == 1) {
    Object o=parts.get(0);
    if (!(o instanceof NodePart)) {
      return false;
    }
    nodePart=(NodePart)o;
    if (!(nodePart.getModel() instanceof Node)) {
      return false;
    }
    Node node=(Node)nodePart.getModel();
    if (!node.isActivate()) {
      return false;
    }
    if (node.getJobletNode() != null) {
      return false;
    }
    if (connecType.hasConnectionCategory(IConnectionCategory.EXECUTION_ORDER)) {
      if (!(Boolean)node.getPropertyValue(EParameterName.STARTABLE.getName()) || (!node.getProcessStartNode(false).equals(node))) {
        boolean jobletOk=false;
        if (PluginChecker.isJobLetPluginLoaded()) {
          IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          if (service != null && service.isJobletComponent(node)) {
            jobletOk=true;
          }
        }
        if (!jobletOk) {
          return false;
        }
      }
    }
    menuList=new ArrayList<String>();
    if (curNodeConnector == null) {
      curNodeConnector=node.getConnectorFromType(connecType);
    }
    if (curNodeConnector.getMaxLinkOutput() != -1) {
      if (curNodeConnector.getCurLinkNbOutput() >= curNodeConnector.getMaxLinkOutput()) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() == 0) {
      return false;
    }
    if (!curNodeConnector.isMultiSchema()) {
    }
    if (curNodeConnector.isMultiSchema()) {
      for (int i=0; i < node.getMetadataList().size(); i++) {
        IMetadataTable table=(node.getMetadataList().get(i));
        if (table.getAttachedConnector() == null || table.getAttachedConnector().equals(curNodeConnector.getName())) {
          String name=table.getTableName();
          if (connecType.equals(EConnectionType.TABLE)) {
            name=table.getLabel() + ""String_Node_Str"" + name+ ""String_Node_Str"";
          }
          boolean nameUsed=false;
          for (          Connection connec : (List<Connection>)node.getOutgoingConnections()) {
            if (connec.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
              if (connec.getMetadataTable().getTableName().equals(table.getTableName())) {
                nameUsed=true;
              }
            }
          }
          if (!nameUsed) {
            menuList.add(name);
          }
        }
      }
      if ((curNodeConnector.getMaxLinkOutput() == -1 || node.getMetadataList().size() < curNodeConnector.getMaxLinkOutput()) && curNodeConnector.isBuiltIn()) {
        menuList.add(getNewOutputMenuName());
      }
    }
 else {
      String menuName;
      boolean addDefaultName=false;
      if (connecType.equals(EConnectionType.TABLE)) {
        addDefaultName=addDefaultName();
        menuName=getNewOutputMenuName();
      }
 else {
        menuName=curNodeConnector.getMenuName();
      }
      if (!addDefaultName) {
        setText(menuName);
        menuList.add(menuName);
      }
    }
    return true;
  }
  return false;
}","/** 
 * Test if the selected item is a node.
 * @return true/false
 */
@SuppressWarnings(""String_Node_Str"") private boolean canPerformAction(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  List parts=getSelectedObjects();
  if (parts.size() == 1) {
    Object o=parts.get(0);
    if (!(o instanceof NodePart)) {
      return false;
    }
    nodePart=(NodePart)o;
    if (!(nodePart.getModel() instanceof Node)) {
      return false;
    }
    Node node=(Node)nodePart.getModel();
    if (!node.isActivate()) {
      return false;
    }
    if (node.getJobletNode() != null) {
      return false;
    }
    if (connecType.hasConnectionCategory(IConnectionCategory.EXECUTION_ORDER)) {
      if (!(Boolean)node.getPropertyValue(EParameterName.STARTABLE.getName()) || (!node.getProcessStartNode(false).equals(node))) {
        if (!node.isELTComponent()) {
          boolean jobletOk=false;
          if (PluginChecker.isJobLetPluginLoaded()) {
            IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
            if (service != null && service.isJobletComponent(node)) {
              jobletOk=true;
            }
          }
          if (!jobletOk) {
            return false;
          }
        }
      }
    }
    menuList=new ArrayList<String>();
    if (curNodeConnector == null) {
      curNodeConnector=node.getConnectorFromType(connecType);
    }
    if (curNodeConnector.getMaxLinkOutput() != -1) {
      if (curNodeConnector.getCurLinkNbOutput() >= curNodeConnector.getMaxLinkOutput()) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() == 0) {
      return false;
    }
    if (!curNodeConnector.isMultiSchema()) {
    }
    if (curNodeConnector.isMultiSchema()) {
      for (int i=0; i < node.getMetadataList().size(); i++) {
        IMetadataTable table=(node.getMetadataList().get(i));
        if (table.getAttachedConnector() == null || table.getAttachedConnector().equals(curNodeConnector.getName())) {
          String name=table.getTableName();
          if (connecType.equals(EConnectionType.TABLE)) {
            name=table.getLabel() + ""String_Node_Str"" + name+ ""String_Node_Str"";
          }
          boolean nameUsed=false;
          for (          Connection connec : (List<Connection>)node.getOutgoingConnections()) {
            if (connec.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
              if (connec.getMetadataTable().getTableName().equals(table.getTableName())) {
                nameUsed=true;
              }
            }
          }
          if (!nameUsed) {
            menuList.add(name);
          }
        }
      }
      if ((curNodeConnector.getMaxLinkOutput() == -1 || node.getMetadataList().size() < curNodeConnector.getMaxLinkOutput()) && curNodeConnector.isBuiltIn()) {
        menuList.add(getNewOutputMenuName());
      }
    }
 else {
      String menuName;
      boolean addDefaultName=false;
      if (connecType.equals(EConnectionType.TABLE)) {
        addDefaultName=addDefaultName();
        menuName=getNewOutputMenuName();
      }
 else {
        menuName=curNodeConnector.getMenuName();
      }
      if (!addDefaultName) {
        setText(menuName);
        menuList.add(menuName);
      }
    }
    return true;
  }
  return false;
}",0.9858646616541352
124215,"/** 
 * Test if the selected item is a node.
 * @return true/false
 */
@SuppressWarnings(""String_Node_Str"") private boolean canPerformAction(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  List parts=getSelectedObjects();
  if (parts.size() == 1) {
    Object o=parts.get(0);
    if (!(o instanceof NodePart)) {
      return false;
    }
    nodePart=(NodePart)o;
    if (!(nodePart.getModel() instanceof Node)) {
      return false;
    }
    Node node=(Node)nodePart.getModel();
    if (!node.isActivate()) {
      return false;
    }
    if (node.getJobletNode() != null) {
      return false;
    }
    if (connecType.hasConnectionCategory(IConnectionCategory.EXECUTION_ORDER)) {
      if (!(Boolean)node.getPropertyValue(EParameterName.STARTABLE.getName()) || (!node.getProcessStartNode(false).equals(node))) {
        boolean jobletOk=false;
        if (PluginChecker.isJobLetPluginLoaded()) {
          IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          if (service != null && service.isJobletComponent(node)) {
            jobletOk=true;
          }
        }
        if (!jobletOk) {
          return false;
        }
      }
    }
    menuList=new ArrayList<String>();
    if (curNodeConnector == null) {
      curNodeConnector=node.getConnectorFromType(connecType);
    }
    if (curNodeConnector.getMaxLinkOutput() != -1) {
      if (curNodeConnector.getCurLinkNbOutput() >= curNodeConnector.getMaxLinkOutput()) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() == 0) {
      return false;
    }
    if (!curNodeConnector.isMultiSchema()) {
    }
    if (curNodeConnector.isMultiSchema()) {
      for (int i=0; i < node.getMetadataList().size(); i++) {
        IMetadataTable table=(node.getMetadataList().get(i));
        if (table.getAttachedConnector() == null || table.getAttachedConnector().equals(curNodeConnector.getName())) {
          String name=table.getTableName();
          if (connecType.equals(EConnectionType.TABLE)) {
            name=table.getLabel() + ""String_Node_Str"" + name+ ""String_Node_Str"";
          }
          boolean nameUsed=false;
          for (          Connection connec : (List<Connection>)node.getOutgoingConnections()) {
            if (connec.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
              if (connec.getMetadataTable().getTableName().equals(table.getTableName())) {
                nameUsed=true;
              }
            }
          }
          if (!nameUsed) {
            menuList.add(name);
          }
        }
      }
      if ((curNodeConnector.getMaxLinkOutput() == -1 || node.getMetadataList().size() < curNodeConnector.getMaxLinkOutput()) && curNodeConnector.isBuiltIn()) {
        menuList.add(getNewOutputMenuName());
      }
    }
 else {
      String menuName;
      boolean addDefaultName=false;
      if (connecType.equals(EConnectionType.TABLE)) {
        addDefaultName=addDefaultName();
        menuName=getNewOutputMenuName();
      }
 else {
        menuName=curNodeConnector.getMenuName();
      }
      if (!addDefaultName) {
        setText(menuName);
        menuList.add(menuName);
      }
    }
    return true;
  }
  return false;
}","/** 
 * Test if the selected item is a node.
 * @return true/false
 */
@SuppressWarnings(""String_Node_Str"") private boolean canPerformAction(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  List parts=getSelectedObjects();
  if (parts.size() == 1) {
    Object o=parts.get(0);
    if (!(o instanceof NodePart)) {
      return false;
    }
    nodePart=(NodePart)o;
    if (!(nodePart.getModel() instanceof Node)) {
      return false;
    }
    Node node=(Node)nodePart.getModel();
    if (!node.isActivate()) {
      return false;
    }
    if (node.getJobletNode() != null) {
      return false;
    }
    if (connecType.hasConnectionCategory(IConnectionCategory.EXECUTION_ORDER)) {
      if (!(Boolean)node.getPropertyValue(EParameterName.STARTABLE.getName()) || (!node.getProcessStartNode(false).equals(node))) {
        if (!node.isELTComponent()) {
          boolean jobletOk=false;
          if (PluginChecker.isJobLetPluginLoaded()) {
            IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
            if (service != null && service.isJobletComponent(node)) {
              jobletOk=true;
            }
          }
          if (!jobletOk) {
            return false;
          }
        }
      }
    }
    menuList=new ArrayList<String>();
    if (curNodeConnector == null) {
      curNodeConnector=node.getConnectorFromType(connecType);
    }
    if (curNodeConnector.getMaxLinkOutput() != -1) {
      if (curNodeConnector.getCurLinkNbOutput() >= curNodeConnector.getMaxLinkOutput()) {
        return false;
      }
    }
    if (curNodeConnector.getMaxLinkOutput() == 0) {
      return false;
    }
    if (!curNodeConnector.isMultiSchema()) {
    }
    if (curNodeConnector.isMultiSchema()) {
      for (int i=0; i < node.getMetadataList().size(); i++) {
        IMetadataTable table=(node.getMetadataList().get(i));
        if (table.getAttachedConnector() == null || table.getAttachedConnector().equals(curNodeConnector.getName())) {
          String name=table.getTableName();
          if (connecType.equals(EConnectionType.TABLE)) {
            name=table.getLabel() + ""String_Node_Str"" + name+ ""String_Node_Str"";
          }
          boolean nameUsed=false;
          for (          Connection connec : (List<Connection>)node.getOutgoingConnections()) {
            if (connec.getLineStyle().hasConnectionCategory(IConnectionCategory.FLOW)) {
              if (connec.getMetadataTable().getTableName().equals(table.getTableName())) {
                nameUsed=true;
              }
            }
          }
          if (!nameUsed) {
            menuList.add(name);
          }
        }
      }
      if ((curNodeConnector.getMaxLinkOutput() == -1 || node.getMetadataList().size() < curNodeConnector.getMaxLinkOutput()) && curNodeConnector.isBuiltIn()) {
        menuList.add(getNewOutputMenuName());
      }
    }
 else {
      String menuName;
      boolean addDefaultName=false;
      if (connecType.equals(EConnectionType.TABLE)) {
        addDefaultName=addDefaultName();
        menuName=getNewOutputMenuName();
      }
 else {
        menuName=curNodeConnector.getMenuName();
      }
      if (!addDefaultName) {
        setText(menuName);
        menuList.add(menuName);
      }
    }
    return true;
  }
  return false;
}",0.9858646616541352
124216,"/** 
 * Parse the XML file. Buffer the result in LoopEntry.
 * @param is InputStream
 */
public void parse(java.io.InputStream is,String charset){
  this.charset=charset;
  try {
    DefaultHandler hd=null;
    SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();
    if (rootPath == null || rootPath.equals(""String_Node_Str"")) {
      hd=newHandler();
    }
 else {
      hd=newHandler2();
    }
    org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
    inSource.setEncoding(this.charset);
    saxParser.parse(is,hd);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Parse the XML file. Buffer the result in LoopEntry.
 * @param is InputStream
 */
public void parse(java.io.InputStream is,String charset){
  this.charset=charset;
  try {
    DefaultHandler hd=null;
    SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();
    if (rootPath == null || rootPath.equals(""String_Node_Str"")) {
      hd=newHandler();
    }
 else {
      hd=newHandler2();
    }
    saxParser.setProperty(""String_Node_Str"",hd);
    org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
    inSource.setEncoding(this.charset);
    saxParser.parse(is,hd);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9678688524590164
124217,"public void register(DefaultHandler handler){
  handlerList.add(handler);
}","public void register(DefaultHandler2 handler){
  handlerList.add(handler);
}",0.9933774834437086
124218,"/** 
 * Deal with the bug 4402: the content <quotes_encoded>&quot;hello world&quot;</quotes_encoded>. In this case, ""characters"" will be called three time. first: "" second: hello world third: ""
 */
public void characters(char ch[],int start,int length) throws SAXException {
  if (isLooping) {
    String text=new String(ch,start,length);
    if (text.length() > 0) {
      if (outputText) {
        for (        int indexOfColumn : indexOfColumns) {
          if (indexOfColumn >= 0 && !currentRowHaveValue[indexOfColumn]) {
            if (currentRow[indexOfColumn] == null) {
              currentRow[indexOfColumn]=text;
            }
 else {
              currentRow[indexOfColumn]+=text;
            }
          }
        }
      }
      if (this.entry.hasFunctions()) {
        Map<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",loopPath);
        map.put(""String_Node_Str"",currentPath);
        map.put(""String_Node_Str"",text);
        listArgs.add(map);
      }
    }
  }
}","/** 
 * Deal with the bug 4402: the content <quotes_encoded>&quot;hello world&quot;</quotes_encoded>. In this case, ""characters"" will be called three time. first: "" second: hello world third: ""
 */
public void characters(char ch[],int start,int length) throws SAXException {
  if (isLooping) {
    String text=new String(ch,start,length);
    if (text.length() > 0) {
      for (int i=0; i < selectColumns.size(); i++) {
        if (outputTexts[i] && !currentRowHaveValue[i]) {
          if (this.asXMLs.get(i) && !inCDATA) {
            text=escapeEntityHelper.escapeElementEntities(text);
          }
          if (currentRow[i] == null) {
            currentRow[i]=text;
          }
 else {
            currentRow[i]+=text;
          }
        }
      }
      if (this.entry.hasFunctions()) {
        Map<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",loopPath);
        map.put(""String_Node_Str"",currentPath);
        map.put(""String_Node_Str"",text);
        listArgs.add(map);
      }
    }
  }
}",0.8272506082725061
124219,"public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping && outputText) {
    for (    int indexOfColumn : indexOfColumns) {
      if (indexOfColumn >= 0) {
        if (currentRow[indexOfColumn] == null) {
          currentRow[indexOfColumn]=""String_Node_Str"";
        }
        if (currentRow[indexOfColumn].trim().startsWith(""String_Node_Str"")) {
          currentRow[indexOfColumn]=currentRow[indexOfColumn] + ""String_Node_Str"" + qName+ ""String_Node_Str"";
        }
 else {
          currentRowHaveValue[indexOfColumn]=true;
        }
      }
    }
  }
  outputText=false;
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping) {
    for (int i=0; i < selectColumns.size(); i++) {
      if (outputTexts[i]) {
        if (!currentRowHaveValue[i]) {
          if (currentRow[i] == null) {
            currentRow[i]=""String_Node_Str"";
          }
        }
        currentRowHaveValue[i]=true;
      }
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        currentRow[i]+=""String_Node_Str"" + qName + ""String_Node_Str"";
        if (this.currentPath.equals(column)) {
          currentRowHaveValue[i]=true;
        }
      }
      outputTexts[i]=false;
    }
  }
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
    reset();
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}",0.1747793908340449
124220,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  List<String> loopCols=new ArrayList<String>();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        loopCols.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          loopCols.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          loopCols.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    loopCols.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    indexOfColumns[0]=loopCols.indexOf(currentPath);
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < loopCols.size(); i++) {
      String column=loopCols.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        indexOfColumns[1]=i;
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ attributes.getValue(m)+ ""String_Node_Str"";
          }
        }
        outputText=true;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
            }
            currentRowHaveValue[i]=true;
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputText=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  selectColumns.clear();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          selectColumns.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          selectColumns.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    selectColumns.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < selectColumns.size(); i++) {
      String column=selectColumns.get(i);
      boolean asXML=this.asXMLs.get(i);
      outputTexts[i]=false;
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ escapeEntityHelper.escapeAttributeEntities(attributes.getValue(m))+ ""String_Node_Str"";
          }
        }
        outputTexts[i]=true;
        currentRowHaveValue[i]=false;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
              currentRowHaveValue[i]=true;
            }
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputTexts[i]=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}",0.5554840784818269
124221,"/** 
 * DOC hwang JobletContainerFigure constructor comment.
 * @param model
 */
public JobletContainerFigure(final JobletContainer jobletContainer){
  setLayoutManager(new FreeformLayout());
  this.jobletContainer=jobletContainer;
  outlineFigure=new RoundedRectangle();
  rectFig=new RoundedRectangle();
  titleFigure=new SimpleHtmlFigure();
  titleFigure.setOpaque(true);
  collapseFigure=new JobletCollapseFigure();
  collapseFigure.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      doCollapse();
    }
  }
);
  initSubJobTitleColor();
  updateData();
  initializejobletContainer(jobletContainer.getJobletContainerRectangle());
}","/** 
 * DOC hwang JobletContainerFigure constructor comment.
 * @param model
 */
public JobletContainerFigure(final JobletContainer jobletContainer){
  setLayoutManager(new FreeformLayout());
  this.jobletContainer=jobletContainer;
  outlineFigure=new RoundedRectangle();
  rectFig=new RoundedRectangle();
  titleFigure=new SimpleHtmlFigure();
  titleFigure.setOpaque(true);
  collapseFigure=new JobletCollapseFigure();
  collapseFigure.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      doCollapse();
    }
  }
);
  errorFigure=new ImageFigure();
  errorFigure.setImage(ImageProvider.getImage(EImage.ERROR_SMALL));
  errorFigure.setVisible(false);
  errorFigure.setSize(errorFigure.getPreferredSize());
  this.add(errorFigure);
  htmlStatusHint=new SimpleHtmlFigure();
  initSubJobTitleColor();
  updateData();
  initializejobletContainer(jobletContainer.getJobletContainerRectangle());
}",0.8381538461538461
124222,"@Override public void paint(Graphics graphics){
  graphics.setAlpha(100);
  super.paint(graphics);
}","@Override public void paint(Graphics graphics){
  graphics.setAlpha(100);
  errorFigure.setLocation(jobletContainer.getErrorLocation());
  super.paint(graphics);
}",0.7604562737642585
124223,"public void propertyChange(PropertyChangeEvent changeEvent){
  String prop=changeEvent.getPropertyName();
  boolean needUpdateSubjob=false;
  if (prop.equals(EParameterName.HINT.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONTENT.equals(prop)) {
    refresh();
    List<AbstractGraphicalEditPart> childrens=getChildren();
    for (    AbstractGraphicalEditPart part : childrens) {
      part.refresh();
    }
    needUpdateSubjob=true;
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONNECTIONS.equals(prop)) {
    refreshSourceConnections();
  }
 else   if (JobletContainer.UPDATE_JOBLET_TITLE_COLOR.equals(prop)) {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateSubJobTitleColor();
      refreshVisuals();
    }
  }
 else   if (JobletContainer.UPDATE_JOBLET_DISPLAY.equals(prop)) {
    needUpdateSubjob=true;
  }
 else {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateData();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(EParameterName.ACTIVATE.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
    if (node.isActivate()) {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
 else {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(Node.PERFORMANCE_DATA)) {
    refreshVisuals();
  }
  if (needUpdateSubjob) {
    EditPart editPart=getParent();
    if (editPart != null) {
      while ((!(editPart instanceof ProcessPart)) && (!(editPart instanceof SubjobContainerPart))) {
        editPart=editPart.getParent();
      }
      if (editPart instanceof SubjobContainerPart) {
        NodeContainer nc=(NodeContainer)getModel();
        boolean isCollapse=((JobletContainer)this.getModel()).isCollapsed();
        int changewidth=((JobletContainer)this.getModel()).getChangeWidth();
        int changeheight=((JobletContainer)this.getModel()).getChangeHeight();
        ((SubjobContainer)editPart.getModel()).refreshNodesLocation(isCollapse,nc,changewidth,changeheight);
        editPart.refresh();
      }
    }
  }
}","public void propertyChange(PropertyChangeEvent changeEvent){
  String prop=changeEvent.getPropertyName();
  boolean needUpdateSubjob=false;
  if (prop.equals(EParameterName.HINT.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONTENT.equals(prop)) {
    refresh();
    List<AbstractGraphicalEditPart> childrens=getChildren();
    for (    AbstractGraphicalEditPart part : childrens) {
      part.refresh();
    }
    needUpdateSubjob=true;
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONNECTIONS.equals(prop)) {
    refreshSourceConnections();
  }
 else   if (JobletContainer.UPDATE_JOBLET_TITLE_COLOR.equals(prop)) {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateSubJobTitleColor();
      refreshVisuals();
    }
  }
 else   if (JobletContainer.UPDATE_JOBLET_DISPLAY.equals(prop)) {
    needUpdateSubjob=true;
  }
 else {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateData();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(EParameterName.ACTIVATE.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
    if (node.isActivate()) {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
 else {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(Node.PERFORMANCE_DATA)) {
    refreshVisuals();
  }
  if (needUpdateSubjob) {
    EditPart editPart=getParent();
    if (editPart != null) {
      while ((!(editPart instanceof ProcessPart)) && (!(editPart instanceof SubjobContainerPart))) {
        editPart=editPart.getParent();
      }
      if (editPart instanceof SubjobContainerPart) {
        NodeContainer nc=(NodeContainer)getModel();
        boolean isCollapse=((JobletContainer)this.getModel()).isCollapsed();
        int changewidth=((JobletContainer)this.getModel()).getChangeWidth();
        int changeheight=((JobletContainer)this.getModel()).getChangeHeight();
        ((SubjobContainer)editPart.getModel()).refreshNodesLocation(isCollapse,nc,changewidth,changeheight);
        editPart.refresh();
      }
    }
  }
  if (changeEvent.getPropertyName().equals(Node.UPDATE_STATUS)) {
    Node node=((NodeContainer)getModel()).getNode();
    ((JobletContainerFigure)getFigure()).updateStatus(node.getStatus());
  }
}",0.9583510412239694
124224,"@Override protected IFigure createFigure(){
  JobletContainerFigure JobletContainerFigure=new JobletContainerFigure((JobletContainer)this.getModel());
  return JobletContainerFigure;
}","@Override protected IFigure createFigure(){
  JobletContainerFigure JobletContainerFigure=new JobletContainerFigure((JobletContainer)this.getModel());
  Node node=((NodeContainer)getModel()).getNode();
  JobletContainerFigure.updateStatus(node.getStatus());
  return JobletContainerFigure;
}",0.7747368421052632
124225,"public static List<String> getStatusList(ProblemStatus status,Node element){
  List<String> statusList=new ArrayList<String>();
  for (  Problem problem : problemList.getProblemList()) {
    if (problem.getNodeName() != null && problem.getNodeName().equals(element.getLabel()) && problem.getStatus().equals(status)) {
      statusList.add(problem.getDescription());
    }
  }
  return statusList;
}","public static List<String> getStatusList(ProblemStatus status,Node element){
  List<String> statusList=new ArrayList<String>();
  for (  Problem problem : problemList.getProblemList()) {
    String elementUniqueName=element.getLabel();
    if (element.isJoblet()) {
      elementUniqueName=element.getUniqueName();
    }
    if (problem.getNodeName() != null && problem.getNodeName().equals(elementUniqueName) && problem.getStatus().equals(status)) {
      statusList.add(problem.getDescription());
    }
  }
  return statusList;
}",0.8331539289558665
124226,"private void addGroupMultiSchemaSettings(final Composite mainComposite){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),180);
  Composite composite=new Composite(group,SWT.NONE);
  GridLayout gridLayout=new GridLayout(4,false);
  gridLayout.marginHeight=1;
  composite.setLayout(gridLayout);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  composite.setLayoutData(gd);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  useMultiSaparators=new Button(group,SWT.CHECK);
  Composite multiComp=new Composite(group,SWT.NONE);
  gridLayout=new GridLayout(2,false);
  gridLayout.marginHeight=1;
  multiComp.setLayout(gridLayout);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  multiComp.setLayoutData(gd);
  useMultiSaparators.setText(Messages.getString(""String_Node_Str""));
  multiSeparatorsText=new LabelledText(multiComp,""String_Node_Str"",1,true);
  multiSeparatorsText.setEditable(false);
  keyValuesText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyValuesText.setEditable(false);
  keyIndexText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyIndexText.setEditable(false);
}","private void addGroupMultiSchemaSettings(final Composite mainComposite){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),210);
  Composite composite=new Composite(group,SWT.NONE);
  GridLayout gridLayout=new GridLayout(4,false);
  gridLayout.marginHeight=1;
  composite.setLayout(gridLayout);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  composite.setLayoutData(gd);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  useMultiSaparators=new Button(group,SWT.CHECK);
  Composite multiComp=new Composite(group,SWT.NONE);
  gridLayout=new GridLayout(2,false);
  gridLayout.marginHeight=1;
  multiComp.setLayout(gridLayout);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  multiComp.setLayoutData(gd);
  useMultiSaparators.setText(Messages.getString(""String_Node_Str""));
  multiSeparatorsText=new LabelledText(multiComp,""String_Node_Str"",1,true);
  multiSeparatorsText.setEditable(false);
  keyValuesText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyValuesText.setEditable(false);
  keyIndexText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyIndexText.setEditable(false);
}",0.9995698924731182
124227,"@Override public void run(){
  TreeNode treeNode=null;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
  }
  IInputValidator validataor=new IInputValidator(){
    public String isValid(    String newText){
      String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ATTRIBUT);
      EList<TreeNode> children=parent.getChildren();
      boolean exist=false;
      for (      TreeNode child : children) {
        if (child.getXpath() != null && child.getXpath().equals(xpath)) {
          exist=true;
          break;
        }
      }
      if (exist) {
        return ""String_Node_Str"" + newText + ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
;
  InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
  int open=dialog.open();
  if (open == Window.OK) {
    treeNode.setName(dialog.getValue());
    treeNode.setNodeType(NodeType.ATTRIBUT);
    treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
    treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
    final EList<TreeNode> children=parent.getChildren();
    int index=0;
    for (int i=0; i < children.size(); i++) {
      final TreeNode child=children.get(i);
      if (child.getNodeType() == NodeType.NAME_SPACE || child.getNodeType() == NodeType.ATTRIBUT) {
        if (i == children.size() - 1) {
          index=children.size();
        }
        continue;
      }
 else {
        index=i;
        break;
      }
    }
    children.add(index,treeNode);
  }
  if (open == Window.OK && mapperManager != null) {
    TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
    if (input) {
      if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
        mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
      }
    }
 else {
      if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
        mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
      }
    }
  }
}","@Override public void run(){
  TreeNode treeNode=null;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
  }
  IInputValidator validataor=new IInputValidator(){
    public String isValid(    String newText){
      String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ATTRIBUT);
      EList<TreeNode> children=parent.getChildren();
      boolean exist=false;
      for (      TreeNode child : children) {
        if (child.getXpath() != null && child.getXpath().equals(xpath)) {
          exist=true;
          break;
        }
      }
      if (exist) {
        return ""String_Node_Str"" + newText + ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
;
  String label=""String_Node_Str"";
  InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
  int open=-1;
  while (!StringUtil.validateLabelForXML(label)) {
    open=dialog.open();
    if (open == InputDialog.OK) {
      label=dialog.getValue().trim();
    }
    if (open == InputDialog.CANCEL) {
      return;
    }
  }
  if (open == Window.OK) {
    treeNode.setName(label);
    treeNode.setNodeType(NodeType.ATTRIBUT);
    treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
    treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
    final EList<TreeNode> children=parent.getChildren();
    int index=0;
    for (int i=0; i < children.size(); i++) {
      final TreeNode child=children.get(i);
      if (child.getNodeType() == NodeType.NAME_SPACE || child.getNodeType() == NodeType.ATTRIBUT) {
        if (i == children.size() - 1) {
          index=children.size();
        }
        continue;
      }
 else {
        index=i;
        break;
      }
    }
    children.add(index,treeNode);
  }
  if (open == Window.OK && mapperManager != null) {
    TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
    if (input) {
      if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
        mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
      }
    }
 else {
      if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
        mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
      }
    }
  }
}",0.9335094671950682
124228,"@Override public void run(){
  TreeNode treeNode=null;
  boolean needWarning=false;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
    if (!parent.getOutgoingConnections().isEmpty()) {
      needWarning=true;
    }
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
    OutputTreeNode outputTreeNode=(OutputTreeNode)treeNode;
    EList<Connection> incomingConnections=parent.getIncomingConnections();
    if (!incomingConnections.isEmpty()) {
      needWarning=true;
    }
  }
  boolean canContinue=true;
  if (needWarning) {
    canContinue=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
  }
  if (canContinue) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ELEMENT);
        EList<TreeNode> children=parent.getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getXpath() != null && child.getXpath().equals(xpath)) {
            exist=true;
            break;
          }
        }
        if (exist) {
          return ""String_Node_Str"" + newText + ""String_Node_Str"";
        }
 else {
          return null;
        }
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
    int open=dialog.open();
    if (open == Window.OK) {
      XmlMapUtil.detachNodeConnections(parent,mapperManager.getCopyOfMapData(),false);
      treeNode.setName(dialog.getValue());
      treeNode.setNodeType(NodeType.ELEMENT);
      treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
      treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
      parent.getChildren().add(treeNode);
      parent.setExpression(""String_Node_Str"");
      if (!input) {
        OutputTreeNode output=(OutputTreeNode)parent;
        if (!XmlMapUtil.isExpressionEditable(output) && output.isAggregate()) {
          output.setAggregate(false);
        }
      }
      if (parent.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)parent.eContainer()).getType())) {
        if (parent.isLoop()) {
          parent.setLoop(false);
        }
      }
    }
    if (open == Window.OK && mapperManager != null) {
      TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
    }
  }
}","@Override public void run(){
  TreeNode treeNode=null;
  boolean needWarning=false;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
    if (!parent.getOutgoingConnections().isEmpty()) {
      needWarning=true;
    }
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
    OutputTreeNode outputTreeNode=(OutputTreeNode)treeNode;
    EList<Connection> incomingConnections=parent.getIncomingConnections();
    if (!incomingConnections.isEmpty()) {
      needWarning=true;
    }
  }
  boolean canContinue=true;
  if (needWarning) {
    canContinue=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
  }
  if (canContinue) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ELEMENT);
        EList<TreeNode> children=parent.getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getXpath() != null && child.getXpath().equals(xpath)) {
            exist=true;
            break;
          }
        }
        if (exist) {
          return ""String_Node_Str"" + newText + ""String_Node_Str"";
        }
 else {
          return null;
        }
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
    int open=-1;
    String label=""String_Node_Str"";
    while (!StringUtil.validateLabelForXML(label)) {
      open=dialog.open();
      if (open == InputDialog.OK) {
        label=dialog.getValue().trim();
      }
      if (open == InputDialog.CANCEL) {
        return;
      }
    }
    if (open == Window.OK) {
      XmlMapUtil.detachNodeConnections(parent,mapperManager.getCopyOfMapData(),false);
      treeNode.setName(label);
      treeNode.setNodeType(NodeType.ELEMENT);
      treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
      treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
      parent.getChildren().add(treeNode);
      parent.setExpression(""String_Node_Str"");
      if (!input) {
        OutputTreeNode output=(OutputTreeNode)parent;
        if (!XmlMapUtil.isExpressionEditable(output) && output.isAggregate()) {
          output.setAggregate(false);
        }
      }
      if (parent.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)parent.eContainer()).getType())) {
        if (parent.isLoop()) {
          parent.setLoop(false);
        }
      }
    }
    if (open == Window.OK && mapperManager != null) {
      TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
    }
  }
}",0.9482352941176472
124229,"private void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<RelationshipItemBuilder.Relation> relations;
  if (item instanceof JobletProcessItem) {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOBLET_RELATION);
  }
 else {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  }
  for (  RelationshipItemBuilder.Relation relation : relations) {
    IRepositoryViewObject obj=null;
    try {
      if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(relation.getId());
      }
 else {
        obj=factory.getLastVersion(relation.getId());
      }
      if (obj != null) {
        RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
        if (repositoryNode != null) {
          if (!repositoryObjects.contains(obj)) {
            repositoryObjects.add(obj);
            checkAllVerSionLatest(repositoryObjects,obj);
            checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
          }
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}","private void checkItemDependencies(Item item,List<IRepositoryViewObject> repositoryObjects){
  if (item == null) {
    return;
  }
  IProxyRepositoryFactory factory=CorePlugin.getDefault().getProxyRepositoryFactory();
  RelationshipItemBuilder builder=RelationshipItemBuilder.getInstance();
  List<RelationshipItemBuilder.Relation> relations;
  if (item instanceof JobletProcessItem) {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOBLET_RELATION);
  }
 else {
    relations=builder.getItemsRelatedTo(item.getProperty().getId(),item.getProperty().getVersion(),RelationshipItemBuilder.JOB_RELATION);
  }
  for (  RelationshipItemBuilder.Relation relation : relations) {
    IRepositoryViewObject obj=null;
    String id=relation.getId();
    try {
      if (RelationshipItemBuilder.ROUTINE_RELATION.equals(relation.getType())) {
        obj=RoutinesUtil.getRoutineFromName(id);
      }
 else {
        if (id != null && id.indexOf(""String_Node_Str"") != -1) {
          id=id.substring(0,id.lastIndexOf(""String_Node_Str""));
        }
        obj=factory.getLastVersion(id);
      }
      if (obj != null) {
        RepositoryNode repositoryNode=RepositoryNodeUtilities.getRepositoryNode(obj,false);
        if (repositoryNode != null) {
          if (!repositoryObjects.contains(obj)) {
            repositoryObjects.add(obj);
            checkAllVerSionLatest(repositoryObjects,obj);
            checkItemDependencies(obj.getProperty().getItem(),repositoryObjects);
          }
        }
      }
    }
 catch (    PersistenceException et) {
      ExceptionHandler.process(et);
    }
  }
}",0.9350486350800126
124230,"@Override public Object[] getChildren(Object parent){
  RepositoryNode repositoryNode=((RepositoryNode)parent);
  ERepositoryObjectType objectType=repositoryNode.getObjectType();
  if (objectType != null) {
    if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS || objectType == ERepositoryObjectType.METADATA_FILE_BRMS || objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED || objectType == ERepositoryObjectType.METADATA_FILE_EBCDIC || objectType == ERepositoryObjectType.METADATA_FILE_EXCEL || objectType == ERepositoryObjectType.METADATA_FILE_FTP || objectType == ERepositoryObjectType.METADATA_FILE_HL7 || objectType == ERepositoryObjectType.METADATA_FILE_LDIF || objectType == ERepositoryObjectType.METADATA_FILE_POSITIONAL || objectType == ERepositoryObjectType.METADATA_FILE_REGEXP || objectType == ERepositoryObjectType.METADATA_FILE_XML) {
      return new Object[0];
    }
  }
  if (!repositoryNode.isInitialized()) {
    if (repositoryNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)repositoryNode.getParent()).initializeChildren(parent);
    }
    repositoryNode.setInitialized(true);
  }
  return repositoryNode.getChildren().toArray();
}","@Override public Object[] getChildren(Object parent){
  RepositoryNode repositoryNode=((RepositoryNode)parent);
  ERepositoryObjectType objectType=repositoryNode.getObjectType();
  if (objectType != null) {
    if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS || objectType == ERepositoryObjectType.METADATA_FILE_BRMS || objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED || objectType == ERepositoryObjectType.METADATA_FILE_EBCDIC || objectType == ERepositoryObjectType.METADATA_FILE_EXCEL || objectType == ERepositoryObjectType.METADATA_FILE_FTP || objectType == ERepositoryObjectType.METADATA_FILE_HL7 || objectType == ERepositoryObjectType.METADATA_FILE_LDIF || objectType == ERepositoryObjectType.METADATA_FILE_POSITIONAL || objectType == ERepositoryObjectType.METADATA_FILE_REGEXP || objectType == ERepositoryObjectType.METADATA_FILE_XML || objectType == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
      return new Object[0];
    }
  }
  if (!repositoryNode.isInitialized()) {
    if (repositoryNode.getParent() instanceof ProjectRepositoryNode) {
      ((ProjectRepositoryNode)repositoryNode.getParent()).initializeChildren(parent);
    }
    repositoryNode.setInitialized(true);
  }
  return repositoryNode.getChildren().toArray();
}",0.9745248685806712
124231,"/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"") || (curParam.getRepositoryValue() != null && curParam.getRepositoryValue().equals(""String_Node_Str""))) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}",0.982605729877217
124232,"public void updateJobletNodes(boolean update){
  if (!isCollapsed()) {
    refreshJobletNodes(update,isCollapsed());
    updateSubjobContainer();
    transferLocation(update);
    refreshJobletConnections();
  }
}","public void updateJobletNodes(boolean update){
  refreshJobletNodes(update,isCollapsed());
  updateSubjobContainer();
  transferLocation(update);
  refreshJobletConnections();
}",0.9076923076923076
124233,"public void refreshJobletNodes(boolean update,boolean coll){
  if (!coll) {
    JobletUtil util=new JobletUtil();
    IProcess jobletProcess=this.getNode().getComponent().getProcess();
    Set<IConnection> conns=new HashSet<IConnection>();
    List<? extends INode> jobletNodes=jobletProcess.getGraphicalNodes();
    boolean lockByOther=false;
    if (jobletProcess instanceof IProcess2) {
      lockByOther=util.lockByOthers(((IProcess2)jobletProcess).getProperty().getItem());
    }
    for (    NodeContainer nc : nodeContainers) {
      if (this.node.getProcess() instanceof IProcess2) {
        ((IProcess2)this.node.getProcess()).removeUniqueNodeName(nc.getNode().getUniqueName());
      }
    }
    nodeContainers.clear();
    jobletElements.clear();
    for (    INode inode : jobletNodes) {
      if ((inode instanceof Node)) {
        Node temNode=(Node)inode;
        conns.addAll(temNode.getIncomingConnections());
        conns.addAll(temNode.getOutgoingConnections());
        Node jnode=util.cloneNode(temNode,this.node.getProcess(),lockByOther);
        NodeContainer nodeContainer=util.cloneNodeContainer(temNode.getNodeContainer(),jnode);
        jnode.setJobletnode(this.node);
        jnode.setJoblet_unique_name(temNode.getUniqueName());
        this.nodeContainers.add(nodeContainer);
        this.jobletElements.add(jnode);
        this.jobletElements.add(jnode.getNodeLabel());
        this.jobletElements.add(jnode.getNodeError());
        this.jobletElements.add(jnode.getNodeProgressBar());
      }
    }
    for (Iterator<IConnection> iter=conns.iterator(); iter.hasNext(); ) {
      IConnection con=iter.next();
      String sourceName=con.getSource().getUniqueName();
      String targetName=con.getTarget().getUniqueName();
      Node sourceNode=null;
      Node targetNode=null;
      for (      NodeContainer nodeC : nodeContainers) {
        Node connNode=nodeC.getNode();
        if (connNode.getJoblet_unique_name().equals(sourceName)) {
          sourceNode=connNode;
        }
        if (connNode.getJoblet_unique_name().equals(targetName)) {
          targetNode=connNode;
        }
        if (sourceNode != null && targetNode != null) {
          util.cloneConnection(con,sourceNode,targetNode);
          break;
        }
      }
    }
  }
}","public void refreshJobletNodes(boolean update,boolean coll){
  if (!coll || update) {
    JobletUtil util=new JobletUtil();
    IProcess jobletProcess=this.getNode().getComponent().getProcess();
    Set<IConnection> conns=new HashSet<IConnection>();
    List<? extends INode> jobletNodes=jobletProcess.getGraphicalNodes();
    boolean lockByOther=false;
    if (jobletProcess instanceof IProcess2) {
      lockByOther=util.lockByOthers(((IProcess2)jobletProcess).getProperty().getItem());
    }
    for (    NodeContainer nc : nodeContainers) {
      if (this.node.getProcess() instanceof IProcess2) {
        ((IProcess2)this.node.getProcess()).removeUniqueNodeName(nc.getNode().getUniqueName());
      }
    }
    nodeContainers.clear();
    jobletElements.clear();
    for (    INode inode : jobletNodes) {
      if ((inode instanceof Node)) {
        Node temNode=(Node)inode;
        conns.addAll(temNode.getIncomingConnections());
        conns.addAll(temNode.getOutgoingConnections());
        Node jnode=util.cloneNode(temNode,this.node.getProcess(),lockByOther);
        NodeContainer nodeContainer=util.cloneNodeContainer(temNode.getNodeContainer(),jnode);
        jnode.setJobletnode(this.node);
        jnode.setJoblet_unique_name(temNode.getUniqueName());
        this.nodeContainers.add(nodeContainer);
        this.jobletElements.add(jnode);
        this.jobletElements.add(jnode.getNodeLabel());
        this.jobletElements.add(jnode.getNodeError());
        this.jobletElements.add(jnode.getNodeProgressBar());
      }
    }
    for (Iterator<IConnection> iter=conns.iterator(); iter.hasNext(); ) {
      IConnection con=iter.next();
      String sourceName=con.getSource().getUniqueName();
      String targetName=con.getTarget().getUniqueName();
      Node sourceNode=null;
      Node targetNode=null;
      for (      NodeContainer nodeC : nodeContainers) {
        Node connNode=nodeC.getNode();
        if (connNode.getJoblet_unique_name().equals(sourceName)) {
          sourceNode=connNode;
        }
        if (connNode.getJoblet_unique_name().equals(targetName)) {
          targetNode=connNode;
        }
        if (sourceNode != null && targetNode != null) {
          util.cloneConnection(con,sourceNode,targetNode);
          break;
        }
      }
    }
  }
}",0.9978156400174748
124234,"public boolean checkModify(JobletContainer jobletContainer){
  IProcess process=jobletContainer.getNode().getComponent().getProcess();
  List<? extends INode> nodeList=process.getGraphicalNodes();
  List<NodeContainer> containerList=jobletContainer.getNodeContainers();
  for (  NodeContainer nodeCon : containerList) {
    Node node=nodeCon.getNode();
    String jobletUnique=node.getJoblet_unique_name();
    if (jobletUnique == null || ""String_Node_Str"".equals(jobletUnique)) {
      continue;
    }
    for (    INode nodeOra : nodeList) {
      if (nodeOra.getUniqueName().equals(jobletUnique)) {
        List<? extends IElementParameter> paras=node.getElementParameters();
        for (        IElementParameter para : paras) {
          if (para == null) {
            continue;
          }
          String paraName=para.getName();
          if (paraName != null) {
            if (paraName.equals(EParameterName.UNIQUE_NAME.getName())) {
              continue;
            }
            if (paraName.equals(EParameterName.UPDATE_COMPONENTS.getName())) {
              continue;
            }
            IElementParameter paraOra=nodeOra.getElementParameter(paraName);
            if (paraOra == null || para == null) {
              continue;
            }
            if (para.getValue() != null) {
              if (paraOra.getValue() != null) {
                if (!para.getValue().equals(paraOra.getValue())) {
                  return true;
                }
              }
 else {
                return true;
              }
            }
 else {
              if (paraOra.getValue() != null) {
                return true;
              }
            }
            if (paraOra.getChildParameters() != null && para.getChildParameters() != null) {
              Map<String,IElementParameter> paraChild=para.getChildParameters();
              Map<String,IElementParameter> paraOraChild=paraOra.getChildParameters();
              Iterator<Entry<String,IElementParameter>> ite=paraChild.entrySet().iterator();
              while (ite.hasNext()) {
                Entry<String,IElementParameter> entry=ite.next();
                String key=entry.getKey();
                IElementParameter c=entry.getValue();
                if (key != null && c != null) {
                  IElementParameter oc=paraOraChild.get(key);
                  if (oc != null) {
                    if (c.getValue() != null) {
                      if (oc.getValue() != null) {
                        if (!oc.getValue().equals(c.getValue())) {
                          return true;
                        }
                      }
 else {
                        return true;
                      }
                    }
 else {
                      if (oc.getValue() != null) {
                        return true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        List<IMetadataTable> nodeTables=node.getMetadataList();
        List<IMetadataTable> oraTables=nodeOra.getMetadataList();
        if (nodeTables.size() != oraTables.size()) {
          return true;
        }
        IExternalNode OraExternalNode=nodeOra.getExternalNode();
        if (OraExternalNode != null) {
          IExternalNode externalNode=node.getExternalNode();
          if (externalNode == null) {
            return true;
          }
          IExternalData oraData=nodeOra.getExternalData();
          IExternalData data=node.getExternalData();
          if (oraData != null) {
            if (data == null) {
              return true;
            }
            List<IMetadataTable> oraMetaList=OraExternalNode.getMetadataList();
            List<IMetadataTable> metaList=externalNode.getMetadataList();
            if (oraMetaList != null) {
              if (metaList == null) {
                return true;
              }
              if (oraMetaList.size() != metaList.size()) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}","public boolean checkModify(JobletContainer jobletContainer){
  IProcess process=jobletContainer.getNode().getComponent().getProcess();
  List<? extends INode> nodeList=process.getGraphicalNodes();
  List<NodeContainer> containerList=jobletContainer.getNodeContainers();
  for (  NodeContainer nodeCon : containerList) {
    Node node=nodeCon.getNode();
    String jobletUnique=node.getJoblet_unique_name();
    if (jobletUnique == null || ""String_Node_Str"".equals(jobletUnique)) {
      continue;
    }
    for (    INode nodeOra : nodeList) {
      if (nodeOra.getUniqueName().equals(jobletUnique)) {
        List<? extends IElementParameter> paras=node.getElementParameters();
        for (        IElementParameter para : paras) {
          if (para == null) {
            continue;
          }
          String paraName=para.getName();
          if (paraName != null) {
            if (paraName.equals(EParameterName.UNIQUE_NAME.getName())) {
              continue;
            }
            if (paraName.equals(EParameterName.UPDATE_COMPONENTS.getName())) {
              continue;
            }
            IElementParameter paraOra=nodeOra.getElementParameter(paraName);
            if (paraOra == null || para == null) {
              continue;
            }
            if (para.getValue() != null) {
              if (paraOra.getValue() != null) {
                if (para.getValue() instanceof IMetadataTable) {
                  boolean isSame=((MetadataTable)para.getValue()).sameMetadataAs((MetadataTable)paraOra.getValue());
                  if (!isSame) {
                    return true;
                  }
                }
 else {
                  if (!para.getValue().equals(paraOra.getValue())) {
                    return true;
                  }
                }
              }
 else {
                return true;
              }
            }
 else {
              if (paraOra.getValue() != null) {
                return true;
              }
            }
            if (paraOra.getChildParameters() != null && para.getChildParameters() != null) {
              Map<String,IElementParameter> paraChild=para.getChildParameters();
              Map<String,IElementParameter> paraOraChild=paraOra.getChildParameters();
              Iterator<Entry<String,IElementParameter>> ite=paraChild.entrySet().iterator();
              while (ite.hasNext()) {
                Entry<String,IElementParameter> entry=ite.next();
                String key=entry.getKey();
                IElementParameter c=entry.getValue();
                if (key != null && c != null) {
                  IElementParameter oc=paraOraChild.get(key);
                  if (oc != null) {
                    if (c.getValue() != null) {
                      if (oc.getValue() != null) {
                        if (!oc.getValue().equals(c.getValue())) {
                          return true;
                        }
                      }
 else {
                        return true;
                      }
                    }
 else {
                      if (oc.getValue() != null) {
                        return true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        List<IMetadataTable> nodeTables=node.getMetadataList();
        List<IMetadataTable> oraTables=nodeOra.getMetadataList();
        if (nodeTables.size() != oraTables.size()) {
          return true;
        }
        IExternalNode OraExternalNode=nodeOra.getExternalNode();
        if (OraExternalNode != null) {
          IExternalNode externalNode=node.getExternalNode();
          if (externalNode == null) {
            return true;
          }
          IExternalData oraData=nodeOra.getExternalData();
          IExternalData data=node.getExternalData();
          if (oraData != null) {
            if (data == null) {
              return true;
            }
            List<IMetadataTable> oraMetaList=OraExternalNode.getMetadataList();
            List<IMetadataTable> metaList=externalNode.getMetadataList();
            if (oraMetaList != null) {
              if (metaList == null) {
                return true;
              }
              if (oraMetaList.size() != metaList.size()) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}",0.9624645892351276
124235,"/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}","/** 
 * DOC YeXiaowei Comment method ""findMoreLibraries"".
 * @param neededLibraries
 * @param curParam
 */
public static void findMoreLibraries(final IProcess process,Set<String> neededLibraries,IElementParameter curParam,boolean flag){
  Object value=curParam.getValue();
  if (curParam.getName().equals(""String_Node_Str"")) {
    if (value != null && value instanceof List) {
      List list=(List)value;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof HashMap) {
          HashMap map=(HashMap)list.get(i);
          Object object=map.get(""String_Node_Str"");
          if (object != null && object instanceof String) {
            String driverName=(String)object;
            if (driverName != null && !""String_Node_Str"".equals(driverName)) {
              boolean isContextMode=ContextParameterUtils.containContextVariables(driverName);
              if (isContextMode) {
                getModulsInTable(process,curParam,neededLibraries);
              }
 else {
                neededLibraries.add((driverName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str""));
              }
            }
          }
        }
      }
    }
  }
  if (curParam.getName().equals(""String_Node_Str"") || (curParam.getRepositoryValue() != null && curParam.getRepositoryValue().equals(""String_Node_Str""))) {
    String jdbcName=(String)value;
    if (jdbcName != null && !jdbcName.equals(""String_Node_Str"") && !jdbcName.equals(""String_Node_Str"")) {
      if (jdbcName.contains(""String_Node_Str"")) {
        if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
          jdbcName=jdbcName.replace('5','6');
        }
 else {
          jdbcName=jdbcName.replace('6','5');
        }
      }
      if (flag == true) {
        String jars=(jdbcName).replaceAll(TalendTextUtils.QUOTATION_MARK,""String_Node_Str"").replaceAll(TalendTextUtils.SINGLE_QUOTE,""String_Node_Str"");
        String separator=""String_Node_Str"";
        if (jars.contains(separator)) {
          for (          String jar : jars.split(separator)) {
            neededLibraries.add(jar);
          }
        }
 else {
          neededLibraries.add(jars);
        }
      }
    }
  }
  String separator=""String_Node_Str"";
  if (curParam.getName().equals(""String_Node_Str"")) {
    String path=(String)value;
    if (path == null || path.equals(""String_Node_Str"")) {
      return;
    }
    for (    String jar : path.split(separator)) {
      neededLibraries.add(jar);
    }
  }
  if (curParam.getName().equals(""String_Node_Str"")) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> line : tableValues) {
      if (line.containsKey(""String_Node_Str"") && !StringUtils.isEmpty((String)line.get(""String_Node_Str""))) {
        String path=(String)line.get(""String_Node_Str"");
        neededLibraries.add(TalendTextUtils.removeQuotes(path));
      }
    }
  }
}",0.982605729877217
124236,"/** 
 * DOC dev Comment method ""createHeaderComposite"".
 * @param parent a TabItem 's Control
 * @param tabItem a TabItem
 */
private void createHeaderComposite(Composite parent,CTabItem tabItem){
  int labelStyle=SWT.WRAP | SWT.MULTI;
  Text tmpLabel=new Text(parent,labelStyle);
  tmpLabel.setText(TextUtil.removeLineBreaks(sqlExecution.getSqlStatement()));
  tmpLabel.setLayoutData(new FillLayout());
  int parentWidth=this.getClientArea().width;
  Point idealSize=tmpLabel.computeSize(parentWidth - 30,SWT.DEFAULT);
  if (idealSize.y > 60) {
    labelStyle=SWT.WRAP | SWT.MULTI | SWT.V_SCROLL;
  }
  tmpLabel.dispose();
  Composite headerComposite=new Composite(parent,SWT.FILL);
  headerComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  GridLayout hLayout=new GridLayout();
  hLayout.numColumns=2;
  hLayout.marginLeft=0;
  hLayout.horizontalSpacing=0;
  hLayout.verticalSpacing=0;
  hLayout.marginWidth=0;
  hLayout.marginHeight=0;
  headerComposite.setLayout(hLayout);
  Text label=new Text(headerComposite,labelStyle);
  label.setEditable(false);
  label.setBackground(this.getBackground());
  label.setText(TextUtil.removeLineBreaks(sqlExecution.getSqlStatement()));
  label.setToolTipText(TextUtil.getWrappedText(sqlExecution.getSqlStatement()));
  GridData labelGridData=new GridData(SWT.FILL,SWT.TOP,true,true);
  label.setLayoutData(labelGridData);
  label.setVisible(true);
  ToolBarManager toolBarMgr=new ToolBarManager(SWT.FLAT);
  toolBarMgr.createControl(headerComposite);
  toolBarMgr.add(new CloseSQLResultTabAction(tabItem));
  toolBarMgr.update(true);
  GridData gid=new GridData();
  gid.horizontalAlignment=SWT.RIGHT;
  gid.verticalAlignment=SWT.TOP;
  toolBarMgr.getControl().setLayoutData(gid);
}","/** 
 * DOC dev Comment method ""createHeaderComposite"".
 * @param parent a TabItem 's Control
 * @param tabItem a TabItem
 */
private void createHeaderComposite(Composite parent,CTabItem tabItem){
  Composite headerComposite=new Composite(parent,SWT.FILL);
  headerComposite.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  GridLayout hLayout=new GridLayout();
  hLayout.numColumns=2;
  hLayout.marginLeft=0;
  hLayout.horizontalSpacing=0;
  hLayout.verticalSpacing=0;
  hLayout.marginWidth=0;
  hLayout.marginHeight=0;
  headerComposite.setLayout(hLayout);
  Text label=new Text(headerComposite,SWT.H_SCROLL);
  label.setEditable(false);
  label.setBackground(this.getBackground());
  label.setText(TextUtil.removeLineBreaks(sqlExecution.getSqlStatement()));
  label.setToolTipText(TextUtil.getWrappedText(sqlExecution.getSqlStatement()));
  GridData labelGridData=new GridData(SWT.FILL,SWT.TOP,true,true);
  label.setLayoutData(labelGridData);
  label.setVisible(true);
  ToolBarManager toolBarMgr=new ToolBarManager(SWT.FLAT);
  toolBarMgr.createControl(headerComposite);
  toolBarMgr.add(new CloseSQLResultTabAction(tabItem));
  toolBarMgr.update(true);
  GridData gid=new GridData();
  gid.horizontalAlignment=SWT.RIGHT;
  gid.verticalAlignment=SWT.TOP;
  toolBarMgr.getControl().setLayoutData(gid);
}",0.8532200065380844
124237,"/** 
 * dev Comment method ""createNewRepositoryNode"".
 * @param node
 * @param parameters
 * @param connection
 * @param iMetadataConnection
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private RepositoryNode createNewRepositoryNode(RepositoryNode node,ConnectionParameters parameters,DatabaseConnection connection,IMetadataConnection iMetadataConnection){
  ManagerConnection managerConnection=new ManagerConnection();
  boolean status=managerConnection.check(iMetadataConnection);
  connection.setDivergency(!status);
  ConnectionHelper.getTables(connection).clear();
  if (status) {
    try {
      List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
      ExtractMetaDataUtils.isReconnect=false;
      for (      MetadataTable table : tablesFromDB) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,table.getSourceName()));
        table.getColumns().clear();
        for (        MetadataColumn column : columnsFromDB) {
          column.setLabel(""String_Node_Str"");
          table.getColumns().add(column);
        }
        table.setLabel(""String_Node_Str"");
        ConnectionHelper.getTables(connection).add(table);
      }
      ExtractMetaDataUtils.isReconnect=true;
    }
 catch (    Exception e) {
      if (parameters != null) {
        parameters.setConnectionComment(e.getMessage());
      }
      return null;
    }
  }
 else {
    if (parameters != null) {
      parameters.setConnectionComment(managerConnection.getMessageException() == null ? ""String_Node_Str"" : managerConnection.getMessageException());
    }
  }
  DatabaseConnectionItem item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  item.setProperty(connectionProperty);
  item.setConnection(connection);
  RepositoryObject object=new RepositoryObject(connectionProperty);
  object.setLabel(""String_Node_Str"");
  ItemState state=PropertiesFactory.eINSTANCE.createItemState();
  state.setDeleted(false);
  item.setState(state);
  if (node == null) {
    node=new RepositoryNode(null,null,ENodeType.SYSTEM_FOLDER);
  }
  RepositoryNode newNode=new RepositoryNode(object,node,ENodeType.SYSTEM_FOLDER);
  return newNode;
}","/** 
 * dev Comment method ""createNewRepositoryNode"".
 * @param node
 * @param parameters
 * @param connection
 * @param iMetadataConnection
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private RepositoryNode createNewRepositoryNode(RepositoryNode node,ConnectionParameters parameters,DatabaseConnection connection,IMetadataConnection iMetadataConnection){
  ManagerConnection managerConnection=new ManagerConnection();
  boolean status=managerConnection.check(iMetadataConnection);
  connection.setDivergency(!status);
  ConnectionHelper.getTables(connection).clear();
  if (status) {
    try {
      List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
      ExtractMetaDataUtils.isReconnect=false;
      for (      MetadataTable table : tablesFromDB) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,table.getSourceName()));
        table.getColumns().clear();
        for (        MetadataColumn column : columnsFromDB) {
          column.setLabel(""String_Node_Str"");
          table.getColumns().add(column);
        }
        table.setLabel(""String_Node_Str"");
        ConnectionHelper.getTables(connection).add(table);
      }
      ExtractMetaDataUtils.isReconnect=true;
    }
 catch (    Exception e) {
      if (parameters != null) {
        parameters.setConnectionComment(e.getMessage());
      }
      return null;
    }
  }
 else {
    if (parameters != null) {
      parameters.setConnectionComment(managerConnection.getMessageException() == null ? ""String_Node_Str"" : managerConnection.getMessageException());
    }
  }
  DatabaseConnectionItem item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  item.setProperty(connectionProperty);
  updatePackage(iMetadataConnection);
  DatabaseConnection dbConn=(DatabaseConnection)iMetadataConnection.getCurrentConnection();
  item.setConnection(dbConn);
  RepositoryObject object=new RepositoryObject(connectionProperty);
  object.setLabel(""String_Node_Str"");
  ItemState state=PropertiesFactory.eINSTANCE.createItemState();
  state.setDeleted(false);
  item.setState(state);
  if (node == null) {
    node=new RepositoryNode(null,null,ENodeType.SYSTEM_FOLDER);
  }
  RepositoryNode newNode=new RepositoryNode(object,node,ENodeType.SYSTEM_FOLDER);
  return newNode;
}",0.9663834503140007
124238,"private void deleteNoUseTable(){
  if (SQLBuilderRepositoryNodeManager.tList == null) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}","private void deleteNoUseTable(){
  if (SQLBuilderRepositoryNodeManager.tList == null || SQLBuilderRepositoryNodeManager.tList.size() == 0) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}",0.929427430093209
124239,"public void initializejobletContainer(Rectangle rectangle){
  disposeColors();
  Point location=this.getLocation();
  collapseFigure.setCollapsed(jobletContainer.isCollapsed());
  titleFigure.setText(""String_Node_Str"" + title + ""String_Node_Str"");
  Dimension preferedSize=titleFigure.getPreferredSize();
  preferedSize=preferedSize.getExpanded(0,3);
  rectangle.width+=32;
  collapseFigure.setLocation(new Point(location.x,location.y));
  collapseFigure.setSize(preferedSize.height,preferedSize.height);
  titleFigure.setSize(preferedSize.width,preferedSize.height - 2);
  titleFigure.setLocation(new Point((rectangle.width - preferedSize.height) / 2 + location.x,location.y + 1));
  titleFigure.setVisible(showTitle);
  outlineFigure.setLocation(new Point(location.x,location.y));
  outlineFigure.setVisible(showTitle);
  outlineFigure.setBackgroundColor(new Color(Display.getDefault(),new RGB(130,240,100)));
  outlineFigure.setForegroundColor(new Color(Display.getDefault(),new RGB(205,190,165)));
  outlineFigure.setSize(rectangle.width,preferedSize.height);
  rectFig.setLocation(new Point(location.x,location.y));
  rectFig.setSize(new Dimension(rectangle.width,rectangle.height));
  rectFig.setBackgroundColor(new Color(Display.getDefault(),new RGB(195,240,190)));
  rectFig.setForegroundColor(new Color(Display.getDefault(),new RGB(205,190,165)));
}","public void initializejobletContainer(Rectangle rectangle){
  disposeColors();
  Point location=this.getLocation();
  collapseFigure.setCollapsed(jobletContainer.isCollapsed());
  titleFigure.setText(""String_Node_Str"" + title + ""String_Node_Str"");
  Dimension preferedSize=titleFigure.getPreferredSize();
  preferedSize=preferedSize.getExpanded(0,3);
  rectangle.width+=32;
  collapseFigure.setLocation(new Point(location.x,location.y));
  collapseFigure.setSize(preferedSize.height,preferedSize.height);
  titleFigure.setSize(preferedSize.width,preferedSize.height - 2);
  titleFigure.setLocation(new Point((rectangle.width - preferedSize.height) / 2 + location.x,location.y + 1));
  titleFigure.setVisible(showTitle);
  outlineFigure.setLocation(new Point(location.x,location.y));
  outlineFigure.setVisible(showTitle);
  outlineFigure.setBackgroundColor(new Color(Display.getDefault(),new RGB(130,240,100)));
  outlineFigure.setForegroundColor(new Color(Display.getDefault(),new RGB(220,120,120)));
  outlineFigure.setSize(rectangle.width,preferedSize.height);
  rectFig.setLocation(new Point(location.x,location.y));
  rectFig.setSize(new Dimension(rectangle.width,rectangle.height));
  rectFig.setBackgroundColor(new Color(Display.getDefault(),new RGB(130,240,100)));
  rectFig.setForegroundColor(new Color(Display.getDefault(),new RGB(220,120,120)));
}",0.9904270986745214
124240,"@Override public void paint(Graphics graphics){
  if (graphics.getAlpha() != -1) {
    graphics.setAlpha(-1);
  }
  errorFigure.setLocation(jobletContainer.getErrorLocation());
  super.paint(graphics);
}","@Override public void paint(Graphics graphics){
  graphics.setAlpha(100);
  errorFigure.setLocation(jobletContainer.getErrorLocation());
  super.paint(graphics);
}",0.8797814207650273
124241,"public void characters(char ch[],int start,int length) throws SAXException {
  String text=new String(ch,start,length);
  if (text.length() <= 0)   return;
  for (  XMLNode node : nodes.getNodesCollection()) {
    if (node.isLooping) {
      if (node.outputText && node.hasValue == false) {
        node.addTextValue(text);
      }
    }
  }
}","public void characters(char ch[],int start,int length) throws SAXException {
  String text=new String(ch,start,length);
  if (text.length() <= 0)   return;
  for (  XMLNode node : nodes.getNodesCollection()) {
    if (node.isLooping) {
      if (node.outputText && node.hasValue == false) {
        if (node.isAsXML && !inCDATA) {
          text=escapeEntityHelper.escapeElementEntities(text);
        }
        node.addTextValue(text);
      }
    }
  }
}",0.8385481852315394
124242,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  this.currentPath=this.currentPath + ""String_Node_Str"" + qName;
  for (  XMLNode node : nodes.getNodesCollection()) {
    node.outputText=false;
    if (this.currentPath.equals(node.loopPath)) {
      node.isLooping=true;
    }
    if (node.isLooping) {
      if (node.isAsXML && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.addTextValue(""String_Node_Str"" + qName);
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            node.addTextValue(""String_Node_Str"" + attributes.getQName(m) + ""String_Node_Str""+ ""String_Node_Str""+ attributes.getValue(m)+ ""String_Node_Str"");
          }
        }
        node.outputText=true;
        node.hasValue=false;
        node.addTextValue(""String_Node_Str"");
      }
 else       if (node.isDot && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.outputText=true;
        node.hasValue=false;
      }
 else {
        int index=node.nodePath.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(node.nodePath.substring(0,index - 1))) {
            String attribute=attributes.getValue(node.nodePath.substring(index + 1));
            if (attribute != null && false == node.hasValue) {
              node.addTextValue(attribute);
              node.hasValue=true;
            }
          }
        }
 else {
          if (currentPath.equals(node.nodePath)) {
            node.outputText=true;
          }
        }
      }
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  this.currentPath=this.currentPath + ""String_Node_Str"" + qName;
  for (  XMLNode node : nodes.getNodesCollection()) {
    node.outputText=false;
    if (this.currentPath.equals(node.loopPath)) {
      node.isLooping=true;
    }
    if (node.isLooping) {
      if (node.isAsXML && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.addTextValue(""String_Node_Str"" + qName);
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            node.addTextValue(""String_Node_Str"" + attributes.getQName(m) + ""String_Node_Str""+ ""String_Node_Str""+ escapeEntityHelper.escapeAttributeEntities(attributes.getValue(m))+ ""String_Node_Str"");
          }
        }
        node.outputText=true;
        node.hasValue=false;
        node.addTextValue(""String_Node_Str"");
      }
 else       if (node.isDot && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.outputText=true;
        node.hasValue=false;
      }
 else {
        int index=node.nodePath.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(node.nodePath.substring(0,index - 1))) {
            String attribute=attributes.getValue(node.nodePath.substring(index + 1));
            if (attribute != null && false == node.hasValue) {
              node.addTextValue(attribute);
              node.hasValue=true;
            }
          }
        }
 else {
          if (currentPath.equals(node.nodePath)) {
            node.outputText=true;
          }
        }
      }
    }
  }
}",0.9868270332187858
124243,"public Object call() throws Exception {
  try {
    DefaultHandler hd=new SimpleSAXLoopHandler(nodes,bcache);
    SAXParser saxParser=null;
    if (!ignoreDTD) {
      saxParser=SAXParserFactory.newInstance().newSAXParser();
    }
 else {
      SAXParserFactory spf=SAXParserFactory.newInstance();
      spf.setFeature(""String_Node_Str"",false);
      saxParser=spf.newSAXParser();
    }
    if (fileURL != null) {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(new java.io.FileInputStream(fileURL));
      inSource.setEncoding(this.charset);
      saxParser.parse(inSource,hd);
    }
 else {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
      inSource.setEncoding(this.charset);
      saxParser.parse(is,hd);
    }
  }
  finally {
    bcache.notifyErrorOccurred();
  }
  return null;
}","public Object call() throws Exception {
  try {
    DefaultHandler hd=new SimpleSAXLoopHandler(nodes,bcache);
    SAXParser saxParser=null;
    if (!ignoreDTD) {
      saxParser=SAXParserFactory.newInstance().newSAXParser();
    }
 else {
      SAXParserFactory spf=SAXParserFactory.newInstance();
      spf.setFeature(""String_Node_Str"",false);
      saxParser=spf.newSAXParser();
    }
    saxParser.setProperty(""String_Node_Str"",hd);
    if (fileURL != null) {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(new java.io.FileInputStream(fileURL));
      inSource.setEncoding(this.charset);
      saxParser.parse(inSource,hd);
    }
 else {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
      inSource.setEncoding(this.charset);
      saxParser.parse(is,hd);
    }
  }
  finally {
    bcache.notifyErrorOccurred();
  }
  return null;
}",0.971395213076474
124244,"@Override public void run(){
  TreeNode treeNode=null;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
  }
  IInputValidator validataor=new IInputValidator(){
    public String isValid(    String newText){
      String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ATTRIBUT);
      EList<TreeNode> children=parent.getChildren();
      boolean exist=false;
      for (      TreeNode child : children) {
        if (child.getXpath() != null && child.getXpath().equals(xpath)) {
          exist=true;
          break;
        }
      }
      if (exist) {
        return ""String_Node_Str"" + newText + ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
;
  InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
  int open=dialog.open();
  if (open == Window.OK) {
    treeNode.setName(dialog.getValue());
    treeNode.setNodeType(NodeType.ATTRIBUT);
    treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
    treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
    final EList<TreeNode> children=parent.getChildren();
    int index=0;
    for (int i=0; i < children.size(); i++) {
      final TreeNode child=children.get(i);
      if (child.getNodeType() == NodeType.NAME_SPACE || child.getNodeType() == NodeType.ATTRIBUT) {
        if (i == children.size() - 1) {
          index=children.size();
        }
        continue;
      }
 else {
        index=i;
        break;
      }
    }
    children.add(index,treeNode);
  }
  if (open == Window.OK && mapperManager != null) {
    TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
    if (input) {
      if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
        mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
      }
    }
 else {
      if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
        mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
      }
    }
  }
}","@Override public void run(){
  TreeNode treeNode=null;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
  }
  IInputValidator validataor=new IInputValidator(){
    public String isValid(    String newText){
      String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ATTRIBUT);
      EList<TreeNode> children=parent.getChildren();
      boolean exist=false;
      for (      TreeNode child : children) {
        if (child.getXpath() != null && child.getXpath().equals(xpath)) {
          exist=true;
          break;
        }
      }
      if (exist) {
        return ""String_Node_Str"" + newText + ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
;
  String label=""String_Node_Str"";
  InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
  int open=-1;
  while (!StringUtil.validateLabelForXML(label)) {
    open=dialog.open();
    if (open == InputDialog.OK) {
      label=dialog.getValue().trim();
    }
    if (open == InputDialog.CANCEL) {
      return;
    }
  }
  if (open == Window.OK) {
    treeNode.setName(label);
    treeNode.setNodeType(NodeType.ATTRIBUT);
    treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
    treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
    final EList<TreeNode> children=parent.getChildren();
    int index=0;
    for (int i=0; i < children.size(); i++) {
      final TreeNode child=children.get(i);
      if (child.getNodeType() == NodeType.NAME_SPACE || child.getNodeType() == NodeType.ATTRIBUT) {
        if (i == children.size() - 1) {
          index=children.size();
        }
        continue;
      }
 else {
        index=i;
        break;
      }
    }
    children.add(index,treeNode);
  }
  if (open == Window.OK && mapperManager != null) {
    TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
    if (input) {
      if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
        mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
      }
    }
 else {
      if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
        mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
      }
    }
  }
}",0.9335094671950682
124245,"@Override public void run(){
  TreeNode treeNode=null;
  boolean needWarning=false;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
    if (!parent.getOutgoingConnections().isEmpty()) {
      needWarning=true;
    }
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
    OutputTreeNode outputTreeNode=(OutputTreeNode)treeNode;
    EList<Connection> incomingConnections=parent.getIncomingConnections();
    if (!incomingConnections.isEmpty()) {
      needWarning=true;
    }
  }
  boolean canContinue=true;
  if (needWarning) {
    canContinue=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
  }
  if (canContinue) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ELEMENT);
        EList<TreeNode> children=parent.getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getXpath() != null && child.getXpath().equals(xpath)) {
            exist=true;
            break;
          }
        }
        if (exist) {
          return ""String_Node_Str"" + newText + ""String_Node_Str"";
        }
 else {
          return null;
        }
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
    int open=dialog.open();
    if (open == Window.OK) {
      XmlMapUtil.detachNodeConnections(parent,mapperManager.getCopyOfMapData(),false);
      treeNode.setName(dialog.getValue());
      treeNode.setNodeType(NodeType.ELEMENT);
      treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
      treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
      parent.getChildren().add(treeNode);
      parent.setExpression(""String_Node_Str"");
      if (!input) {
        OutputTreeNode output=(OutputTreeNode)parent;
        if (!XmlMapUtil.isExpressionEditable(output) && output.isAggregate()) {
          output.setAggregate(false);
        }
      }
      if (parent.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)parent.eContainer()).getType())) {
        if (parent.isLoop()) {
          parent.setLoop(false);
        }
      }
    }
    if (open == Window.OK && mapperManager != null) {
      TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
    }
  }
}","@Override public void run(){
  TreeNode treeNode=null;
  boolean needWarning=false;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
    if (!parent.getOutgoingConnections().isEmpty()) {
      needWarning=true;
    }
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
    OutputTreeNode outputTreeNode=(OutputTreeNode)treeNode;
    EList<Connection> incomingConnections=parent.getIncomingConnections();
    if (!incomingConnections.isEmpty()) {
      needWarning=true;
    }
  }
  boolean canContinue=true;
  if (needWarning) {
    canContinue=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
  }
  if (canContinue) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ELEMENT);
        EList<TreeNode> children=parent.getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getXpath() != null && child.getXpath().equals(xpath)) {
            exist=true;
            break;
          }
        }
        if (exist) {
          return ""String_Node_Str"" + newText + ""String_Node_Str"";
        }
 else {
          return null;
        }
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
    int open=-1;
    String label=""String_Node_Str"";
    while (!StringUtil.validateLabelForXML(label)) {
      open=dialog.open();
      if (open == InputDialog.OK) {
        label=dialog.getValue().trim();
      }
      if (open == InputDialog.CANCEL) {
        return;
      }
    }
    if (open == Window.OK) {
      XmlMapUtil.detachNodeConnections(parent,mapperManager.getCopyOfMapData(),false);
      treeNode.setName(label);
      treeNode.setNodeType(NodeType.ELEMENT);
      treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
      treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
      parent.getChildren().add(treeNode);
      parent.setExpression(""String_Node_Str"");
      if (!input) {
        OutputTreeNode output=(OutputTreeNode)parent;
        if (!XmlMapUtil.isExpressionEditable(output) && output.isAggregate()) {
          output.setAggregate(false);
        }
      }
      if (parent.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)parent.eContainer()).getType())) {
        if (parent.isLoop()) {
          parent.setLoop(false);
        }
      }
    }
    if (open == Window.OK && mapperManager != null) {
      TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
    }
  }
}",0.9482352941176472
124246,"public void updateJobletNodes(boolean update){
  if (!isCollapsed()) {
    refreshJobletNodes(update,isCollapsed());
    updateSubjobContainer();
    transferLocation(update);
    refreshJobletConnections();
  }
}","public void updateJobletNodes(boolean update){
  refreshJobletNodes(update,isCollapsed());
  updateSubjobContainer();
  transferLocation(update);
  refreshJobletConnections();
}",0.9076923076923076
124247,"public void refreshJobletNodes(boolean update,boolean coll){
  if (!coll) {
    JobletUtil util=new JobletUtil();
    IProcess jobletProcess=this.getNode().getComponent().getProcess();
    Set<IConnection> conns=new HashSet<IConnection>();
    List<? extends INode> jobletNodes=jobletProcess.getGraphicalNodes();
    boolean lockByOther=false;
    if (jobletProcess instanceof IProcess2) {
      lockByOther=util.lockByOthers(((IProcess2)jobletProcess).getProperty().getItem());
    }
    for (    NodeContainer nc : nodeContainers) {
      if (this.node.getProcess() instanceof IProcess2) {
        ((IProcess2)this.node.getProcess()).removeUniqueNodeName(nc.getNode().getUniqueName());
      }
    }
    nodeContainers.clear();
    jobletElements.clear();
    for (    INode inode : jobletNodes) {
      if ((inode instanceof Node)) {
        Node temNode=(Node)inode;
        conns.addAll(temNode.getIncomingConnections());
        conns.addAll(temNode.getOutgoingConnections());
        Node jnode=util.cloneNode(temNode,this.node.getProcess(),lockByOther);
        NodeContainer nodeContainer=util.cloneNodeContainer(temNode.getNodeContainer(),jnode);
        jnode.setJobletnode(this.node);
        jnode.setJoblet_unique_name(temNode.getUniqueName());
        this.nodeContainers.add(nodeContainer);
        this.jobletElements.add(jnode);
        this.jobletElements.add(jnode.getNodeLabel());
        this.jobletElements.add(jnode.getNodeError());
        this.jobletElements.add(jnode.getNodeProgressBar());
      }
    }
    for (Iterator<IConnection> iter=conns.iterator(); iter.hasNext(); ) {
      IConnection con=iter.next();
      String sourceName=con.getSource().getUniqueName();
      String targetName=con.getTarget().getUniqueName();
      Node sourceNode=null;
      Node targetNode=null;
      for (      NodeContainer nodeC : nodeContainers) {
        Node connNode=nodeC.getNode();
        if (connNode.getJoblet_unique_name().equals(sourceName)) {
          sourceNode=connNode;
        }
        if (connNode.getJoblet_unique_name().equals(targetName)) {
          targetNode=connNode;
        }
        if (sourceNode != null && targetNode != null) {
          util.cloneConnection(con,sourceNode,targetNode);
          break;
        }
      }
    }
  }
}","public void refreshJobletNodes(boolean update,boolean coll){
  if (!coll || update) {
    JobletUtil util=new JobletUtil();
    IProcess jobletProcess=this.getNode().getComponent().getProcess();
    Set<IConnection> conns=new HashSet<IConnection>();
    List<? extends INode> jobletNodes=jobletProcess.getGraphicalNodes();
    boolean lockByOther=false;
    if (jobletProcess instanceof IProcess2) {
      lockByOther=util.lockByOthers(((IProcess2)jobletProcess).getProperty().getItem());
    }
    for (    NodeContainer nc : nodeContainers) {
      if (this.node.getProcess() instanceof IProcess2) {
        ((IProcess2)this.node.getProcess()).removeUniqueNodeName(nc.getNode().getUniqueName());
      }
    }
    nodeContainers.clear();
    jobletElements.clear();
    for (    INode inode : jobletNodes) {
      if ((inode instanceof Node)) {
        Node temNode=(Node)inode;
        conns.addAll(temNode.getIncomingConnections());
        conns.addAll(temNode.getOutgoingConnections());
        Node jnode=util.cloneNode(temNode,this.node.getProcess(),lockByOther);
        NodeContainer nodeContainer=util.cloneNodeContainer(temNode.getNodeContainer(),jnode);
        jnode.setJobletnode(this.node);
        jnode.setJoblet_unique_name(temNode.getUniqueName());
        this.nodeContainers.add(nodeContainer);
        this.jobletElements.add(jnode);
        this.jobletElements.add(jnode.getNodeLabel());
        this.jobletElements.add(jnode.getNodeError());
        this.jobletElements.add(jnode.getNodeProgressBar());
      }
    }
    for (Iterator<IConnection> iter=conns.iterator(); iter.hasNext(); ) {
      IConnection con=iter.next();
      String sourceName=con.getSource().getUniqueName();
      String targetName=con.getTarget().getUniqueName();
      Node sourceNode=null;
      Node targetNode=null;
      for (      NodeContainer nodeC : nodeContainers) {
        Node connNode=nodeC.getNode();
        if (connNode.getJoblet_unique_name().equals(sourceName)) {
          sourceNode=connNode;
        }
        if (connNode.getJoblet_unique_name().equals(targetName)) {
          targetNode=connNode;
        }
        if (sourceNode != null && targetNode != null) {
          util.cloneConnection(con,sourceNode,targetNode);
          break;
        }
      }
    }
  }
}",0.9978156400174748
124248,"public boolean checkModify(JobletContainer jobletContainer){
  IProcess process=jobletContainer.getNode().getComponent().getProcess();
  List<? extends INode> nodeList=process.getGraphicalNodes();
  List<NodeContainer> containerList=jobletContainer.getNodeContainers();
  for (  NodeContainer nodeCon : containerList) {
    Node node=nodeCon.getNode();
    String jobletUnique=node.getJoblet_unique_name();
    if (jobletUnique == null || ""String_Node_Str"".equals(jobletUnique)) {
      continue;
    }
    for (    INode nodeOra : nodeList) {
      if (nodeOra.getUniqueName().equals(jobletUnique)) {
        List<? extends IElementParameter> paras=node.getElementParameters();
        for (        IElementParameter para : paras) {
          if (para == null) {
            continue;
          }
          String paraName=para.getName();
          if (paraName != null) {
            if (paraName.equals(EParameterName.UNIQUE_NAME.getName())) {
              continue;
            }
            if (paraName.equals(EParameterName.UPDATE_COMPONENTS.getName())) {
              continue;
            }
            IElementParameter paraOra=nodeOra.getElementParameter(paraName);
            if (paraOra == null || para == null) {
              continue;
            }
            if (para.getValue() != null) {
              if (paraOra.getValue() != null) {
                if (!para.getValue().equals(paraOra.getValue())) {
                  return true;
                }
              }
 else {
                return true;
              }
            }
 else {
              if (paraOra.getValue() != null) {
                return true;
              }
            }
            if (paraOra.getChildParameters() != null && para.getChildParameters() != null) {
              Map<String,IElementParameter> paraChild=para.getChildParameters();
              Map<String,IElementParameter> paraOraChild=paraOra.getChildParameters();
              Iterator<Entry<String,IElementParameter>> ite=paraChild.entrySet().iterator();
              while (ite.hasNext()) {
                Entry<String,IElementParameter> entry=ite.next();
                String key=entry.getKey();
                IElementParameter c=entry.getValue();
                if (key != null && c != null) {
                  IElementParameter oc=paraOraChild.get(key);
                  if (oc != null) {
                    if (c.getValue() != null) {
                      if (oc.getValue() != null) {
                        if (!oc.getValue().equals(c.getValue())) {
                          return true;
                        }
                      }
 else {
                        return true;
                      }
                    }
 else {
                      if (oc.getValue() != null) {
                        return true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        List<IMetadataTable> nodeTables=node.getMetadataList();
        List<IMetadataTable> oraTables=nodeOra.getMetadataList();
        if (nodeTables.size() != oraTables.size()) {
          return true;
        }
        IExternalNode OraExternalNode=nodeOra.getExternalNode();
        if (OraExternalNode != null) {
          IExternalNode externalNode=node.getExternalNode();
          if (externalNode == null) {
            return true;
          }
          IExternalData oraData=nodeOra.getExternalData();
          IExternalData data=node.getExternalData();
          if (oraData != null) {
            if (data == null) {
              return true;
            }
            List<IMetadataTable> oraMetaList=OraExternalNode.getMetadataList();
            List<IMetadataTable> metaList=externalNode.getMetadataList();
            if (oraMetaList != null) {
              if (metaList == null) {
                return true;
              }
              if (oraMetaList.size() != metaList.size()) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}","public boolean checkModify(JobletContainer jobletContainer){
  IProcess process=jobletContainer.getNode().getComponent().getProcess();
  List<? extends INode> nodeList=process.getGraphicalNodes();
  List<NodeContainer> containerList=jobletContainer.getNodeContainers();
  for (  NodeContainer nodeCon : containerList) {
    Node node=nodeCon.getNode();
    String jobletUnique=node.getJoblet_unique_name();
    if (jobletUnique == null || ""String_Node_Str"".equals(jobletUnique)) {
      continue;
    }
    for (    INode nodeOra : nodeList) {
      if (nodeOra.getUniqueName().equals(jobletUnique)) {
        List<? extends IElementParameter> paras=node.getElementParameters();
        for (        IElementParameter para : paras) {
          if (para == null) {
            continue;
          }
          String paraName=para.getName();
          if (paraName != null) {
            if (paraName.equals(EParameterName.UNIQUE_NAME.getName())) {
              continue;
            }
            if (paraName.equals(EParameterName.UPDATE_COMPONENTS.getName())) {
              continue;
            }
            IElementParameter paraOra=nodeOra.getElementParameter(paraName);
            if (paraOra == null || para == null) {
              continue;
            }
            if (para.getValue() != null) {
              if (paraOra.getValue() != null) {
                if (para.getValue() instanceof IMetadataTable) {
                  boolean isSame=((MetadataTable)para.getValue()).sameMetadataAs((MetadataTable)paraOra.getValue());
                  if (!isSame) {
                    return true;
                  }
                }
 else {
                  if (!para.getValue().equals(paraOra.getValue())) {
                    return true;
                  }
                }
              }
 else {
                return true;
              }
            }
 else {
              if (paraOra.getValue() != null) {
                return true;
              }
            }
            if (paraOra.getChildParameters() != null && para.getChildParameters() != null) {
              Map<String,IElementParameter> paraChild=para.getChildParameters();
              Map<String,IElementParameter> paraOraChild=paraOra.getChildParameters();
              Iterator<Entry<String,IElementParameter>> ite=paraChild.entrySet().iterator();
              while (ite.hasNext()) {
                Entry<String,IElementParameter> entry=ite.next();
                String key=entry.getKey();
                IElementParameter c=entry.getValue();
                if (key != null && c != null) {
                  IElementParameter oc=paraOraChild.get(key);
                  if (oc != null) {
                    if (c.getValue() != null) {
                      if (oc.getValue() != null) {
                        if (!oc.getValue().equals(c.getValue())) {
                          return true;
                        }
                      }
 else {
                        return true;
                      }
                    }
 else {
                      if (oc.getValue() != null) {
                        return true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        List<IMetadataTable> nodeTables=node.getMetadataList();
        List<IMetadataTable> oraTables=nodeOra.getMetadataList();
        if (nodeTables.size() != oraTables.size()) {
          return true;
        }
        IExternalNode OraExternalNode=nodeOra.getExternalNode();
        if (OraExternalNode != null) {
          IExternalNode externalNode=node.getExternalNode();
          if (externalNode == null) {
            return true;
          }
          IExternalData oraData=nodeOra.getExternalData();
          IExternalData data=node.getExternalData();
          if (oraData != null) {
            if (data == null) {
              return true;
            }
            List<IMetadataTable> oraMetaList=OraExternalNode.getMetadataList();
            List<IMetadataTable> metaList=externalNode.getMetadataList();
            if (oraMetaList != null) {
              if (metaList == null) {
                return true;
              }
              if (oraMetaList.size() != metaList.size()) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}",0.9624645892351276
124249,"public void initializejobletContainer(Rectangle rectangle){
  disposeColors();
  Point location=this.getLocation();
  collapseFigure.setCollapsed(jobletContainer.isCollapsed());
  titleFigure.setText(""String_Node_Str"" + title + ""String_Node_Str"");
  Dimension preferedSize=titleFigure.getPreferredSize();
  preferedSize=preferedSize.getExpanded(0,3);
  rectangle.width+=32;
  collapseFigure.setLocation(new Point(location.x,location.y));
  collapseFigure.setSize(preferedSize.height,preferedSize.height);
  titleFigure.setSize(preferedSize.width,preferedSize.height - 2);
  titleFigure.setLocation(new Point((rectangle.width - preferedSize.height) / 2 + location.x,location.y + 1));
  titleFigure.setVisible(showTitle);
  outlineFigure.setLocation(new Point(location.x,location.y));
  outlineFigure.setVisible(showTitle);
  outlineFigure.setBackgroundColor(new Color(Display.getDefault(),new RGB(130,240,100)));
  outlineFigure.setForegroundColor(new Color(Display.getDefault(),new RGB(220,120,120)));
  outlineFigure.setSize(rectangle.width,preferedSize.height);
  rectFig.setLocation(new Point(location.x,location.y));
  rectFig.setSize(new Dimension(rectangle.width,rectangle.height));
  rectFig.setBackgroundColor(new Color(Display.getDefault(),new RGB(130,240,100)));
  rectFig.setForegroundColor(new Color(Display.getDefault(),new RGB(220,120,120)));
}","public void initializejobletContainer(Rectangle rectangle){
  disposeColors();
  Point location=this.getLocation();
  collapseFigure.setCollapsed(jobletContainer.isCollapsed());
  titleFigure.setText(""String_Node_Str"" + title + ""String_Node_Str"");
  Dimension preferedSize=titleFigure.getPreferredSize();
  preferedSize=preferedSize.getExpanded(0,3);
  rectangle.width+=32;
  collapseFigure.setLocation(new Point(location.x,location.y));
  collapseFigure.setSize(preferedSize.height,preferedSize.height);
  titleFigure.setSize(preferedSize.width,preferedSize.height - 2);
  titleFigure.setLocation(new Point((rectangle.width - preferedSize.height) / 2 + location.x,location.y + 1));
  titleFigure.setVisible(showTitle);
  outlineFigure.setLocation(new Point(location.x,location.y));
  outlineFigure.setVisible(showTitle);
  outlineFigure.setBackgroundColor(new Color(Display.getDefault(),new RGB(130,240,100)));
  outlineFigure.setForegroundColor(new Color(Display.getDefault(),new RGB(205,190,165)));
  outlineFigure.setSize(rectangle.width,preferedSize.height);
  rectFig.setLocation(new Point(location.x,location.y));
  rectFig.setSize(new Dimension(rectangle.width,rectangle.height));
  rectFig.setBackgroundColor(new Color(Display.getDefault(),new RGB(195,240,190)));
  rectFig.setForegroundColor(new Color(Display.getDefault(),new RGB(205,190,165)));
}",0.991899852724595
124250,"/** 
 * DOC hwang JobletContainerFigure constructor comment.
 * @param model
 */
public JobletContainerFigure(final JobletContainer jobletContainer){
  setLayoutManager(new FreeformLayout());
  this.jobletContainer=jobletContainer;
  outlineFigure=new RoundedRectangle();
  rectFig=new RoundedRectangle();
  titleFigure=new SimpleHtmlFigure();
  titleFigure.setOpaque(true);
  collapseFigure=new JobletCollapseFigure();
  collapseFigure.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      doCollapse();
    }
  }
);
  initSubJobTitleColor();
  updateData();
  initializejobletContainer(jobletContainer.getJobletContainerRectangle());
}","/** 
 * DOC hwang JobletContainerFigure constructor comment.
 * @param model
 */
public JobletContainerFigure(final JobletContainer jobletContainer){
  setLayoutManager(new FreeformLayout());
  this.jobletContainer=jobletContainer;
  outlineFigure=new RoundedRectangle();
  rectFig=new RoundedRectangle();
  titleFigure=new SimpleHtmlFigure();
  titleFigure.setOpaque(true);
  collapseFigure=new JobletCollapseFigure();
  collapseFigure.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      doCollapse();
    }
  }
);
  errorFigure=new ImageFigure();
  errorFigure.setImage(ImageProvider.getImage(EImage.ERROR_SMALL));
  errorFigure.setVisible(false);
  errorFigure.setSize(errorFigure.getPreferredSize());
  this.add(errorFigure);
  htmlStatusHint=new SimpleHtmlFigure();
  initSubJobTitleColor();
  updateData();
  initializejobletContainer(jobletContainer.getJobletContainerRectangle());
}",0.8381538461538461
124251,"@Override public void paint(Graphics graphics){
  graphics.setAlpha(100);
  super.paint(graphics);
}","@Override public void paint(Graphics graphics){
  if (graphics.getAlpha() != -1) {
    graphics.setAlpha(-1);
  }
  errorFigure.setLocation(jobletContainer.getErrorLocation());
  super.paint(graphics);
}",0.4554455445544554
124252,"public void propertyChange(PropertyChangeEvent changeEvent){
  String prop=changeEvent.getPropertyName();
  boolean needUpdateSubjob=false;
  if (prop.equals(EParameterName.HINT.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONTENT.equals(prop)) {
    refresh();
    List<AbstractGraphicalEditPart> childrens=getChildren();
    for (    AbstractGraphicalEditPart part : childrens) {
      part.refresh();
    }
    needUpdateSubjob=true;
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONNECTIONS.equals(prop)) {
    refreshSourceConnections();
  }
 else   if (JobletContainer.UPDATE_JOBLET_TITLE_COLOR.equals(prop)) {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateSubJobTitleColor();
      refreshVisuals();
    }
  }
 else   if (JobletContainer.UPDATE_JOBLET_DISPLAY.equals(prop)) {
    needUpdateSubjob=true;
  }
 else {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateData();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(EParameterName.ACTIVATE.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
    if (node.isActivate()) {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
 else {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(Node.PERFORMANCE_DATA)) {
    refreshVisuals();
  }
  if (needUpdateSubjob) {
    EditPart editPart=getParent();
    if (editPart != null) {
      while ((!(editPart instanceof ProcessPart)) && (!(editPart instanceof SubjobContainerPart))) {
        editPart=editPart.getParent();
      }
      if (editPart instanceof SubjobContainerPart) {
        NodeContainer nc=(NodeContainer)getModel();
        boolean isCollapse=((JobletContainer)this.getModel()).isCollapsed();
        int changewidth=((JobletContainer)this.getModel()).getChangeWidth();
        int changeheight=((JobletContainer)this.getModel()).getChangeHeight();
        ((SubjobContainer)editPart.getModel()).refreshNodesLocation(isCollapse,nc,changewidth,changeheight);
        editPart.refresh();
      }
    }
  }
}","public void propertyChange(PropertyChangeEvent changeEvent){
  String prop=changeEvent.getPropertyName();
  boolean needUpdateSubjob=false;
  if (prop.equals(EParameterName.HINT.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONTENT.equals(prop)) {
    refresh();
    List<AbstractGraphicalEditPart> childrens=getChildren();
    for (    AbstractGraphicalEditPart part : childrens) {
      part.refresh();
    }
    needUpdateSubjob=true;
  }
 else   if (JobletContainer.UPDATE_JOBLET_CONNECTIONS.equals(prop)) {
    refreshSourceConnections();
  }
 else   if (JobletContainer.UPDATE_JOBLET_TITLE_COLOR.equals(prop)) {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateSubJobTitleColor();
      refreshVisuals();
    }
  }
 else   if (JobletContainer.UPDATE_JOBLET_DISPLAY.equals(prop)) {
    needUpdateSubjob=true;
  }
 else {
    if (getFigure() instanceof JobletContainerFigure) {
      ((JobletContainerFigure)getFigure()).updateData();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(EParameterName.ACTIVATE.getName())) {
    Node node=((NodeContainer)getModel()).getNode();
    if (node.isActivate()) {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
 else {
      ((JobletContainerFigure)figure).repaint();
      refreshVisuals();
    }
  }
  if (changeEvent.getPropertyName().equals(Node.PERFORMANCE_DATA)) {
    refreshVisuals();
  }
  if (needUpdateSubjob) {
    EditPart editPart=getParent();
    if (editPart != null) {
      while ((!(editPart instanceof ProcessPart)) && (!(editPart instanceof SubjobContainerPart))) {
        editPart=editPart.getParent();
      }
      if (editPart instanceof SubjobContainerPart) {
        NodeContainer nc=(NodeContainer)getModel();
        boolean isCollapse=((JobletContainer)this.getModel()).isCollapsed();
        int changewidth=((JobletContainer)this.getModel()).getChangeWidth();
        int changeheight=((JobletContainer)this.getModel()).getChangeHeight();
        ((SubjobContainer)editPart.getModel()).refreshNodesLocation(isCollapse,nc,changewidth,changeheight);
        editPart.refresh();
      }
    }
  }
  if (changeEvent.getPropertyName().equals(Node.UPDATE_STATUS)) {
    Node node=((NodeContainer)getModel()).getNode();
    ((JobletContainerFigure)getFigure()).updateStatus(node.getStatus());
  }
}",0.9583510412239694
124253,"@Override protected IFigure createFigure(){
  JobletContainerFigure JobletContainerFigure=new JobletContainerFigure((JobletContainer)this.getModel());
  return JobletContainerFigure;
}","@Override protected IFigure createFigure(){
  JobletContainerFigure JobletContainerFigure=new JobletContainerFigure((JobletContainer)this.getModel());
  Node node=((NodeContainer)getModel()).getNode();
  JobletContainerFigure.updateStatus(node.getStatus());
  return JobletContainerFigure;
}",0.7747368421052632
124254,"public static List<String> getStatusList(ProblemStatus status,Node element){
  List<String> statusList=new ArrayList<String>();
  for (  Problem problem : problemList.getProblemList()) {
    if (problem.getNodeName() != null && problem.getNodeName().equals(element.getLabel()) && problem.getStatus().equals(status)) {
      statusList.add(problem.getDescription());
    }
  }
  return statusList;
}","public static List<String> getStatusList(ProblemStatus status,Node element){
  List<String> statusList=new ArrayList<String>();
  for (  Problem problem : problemList.getProblemList()) {
    String elementUniqueName=element.getLabel();
    if (element.isJoblet()) {
      elementUniqueName=element.getUniqueName();
    }
    if (problem.getNodeName() != null && problem.getNodeName().equals(elementUniqueName) && problem.getStatus().equals(status)) {
      statusList.add(problem.getDescription());
    }
  }
  return statusList;
}",0.8331539289558665
124255,"@Override public ExecutionResult execute(Item item){
  byte[] screenshotStream=null;
  EList nodeList=null;
  try {
    if (item instanceof ProcessItem) {
      ProcessItem process=(ProcessItem)item;
      screenshotStream=process.getProcess().getScreenshot();
      process.getProcess().getScreenshots().put(""String_Node_Str"",screenshotStream);
      nodeList=process.getProcess().getNode();
      for (int i=0; i < nodeList.size(); i++) {
        String nodeName;
        NodeType node=(NodeType)nodeList.get(i);
        if (node.getScreenshot() != null && node.getScreenshot().length > 0) {
          EList params=node.getElementParameter();
          for (int j=0; j < params.size(); j++) {
            ElementParameterType type=(ElementParameterType)params.get(j);
            if (""String_Node_Str"".equals(type.getName())) {
              nodeName=type.getValue();
              process.getProcess().getScreenshots().put(nodeName,node.getScreenshot());
              break;
            }
          }
          node.setScreenshot(null);
        }
      }
      process.getProcess().setScreenshot(null);
    }
 else     if (item instanceof JobletProcessItem) {
      JobletProcessItem joblet=(JobletProcessItem)item;
      screenshotStream=((JobletProcessItem)item).getJobletProcess().getScreenshot();
      joblet.getJobletProcess().getScreenshots().put(""String_Node_Str"",screenshotStream);
      nodeList=joblet.getJobletProcess().getNode();
      for (int i=0; i < nodeList.size(); i++) {
        String nodeName;
        NodeType node=(NodeType)nodeList.get(i);
        if (node.getScreenshot() != null && node.getScreenshot().length > 0) {
          EList params=node.getElementParameter();
          for (int j=0; j < params.size(); j++) {
            ElementParameterType type=(ElementParameterType)params.get(j);
            if (""String_Node_Str"".equals(type.getName())) {
              nodeName=type.getValue();
              joblet.getJobletProcess().getScreenshots().put(nodeName,node.getScreenshot());
              break;
            }
          }
          node.setScreenshot(null);
        }
      }
      joblet.getJobletProcess().setScreenshot(null);
    }
    ProxyRepositoryFactory.getInstance().save(item,true);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return ExecutionResult.FAILURE;
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  byte[] screenshotStream=null;
  EList nodeList=null;
  try {
    if (item instanceof ProcessItem) {
      ProcessItem process=(ProcessItem)item;
      screenshotStream=process.getProcess().getScreenshot();
      process.getProcess().getScreenshots().put(""String_Node_Str"",screenshotStream);
      nodeList=process.getProcess().getNode();
      for (int i=0; i < nodeList.size(); i++) {
        String nodeName;
        NodeType node=(NodeType)nodeList.get(i);
        if (node.getScreenshot() != null && node.getScreenshot().length > 0) {
          EList params=node.getElementParameter();
          for (int j=0; j < params.size(); j++) {
            ElementParameterType type=(ElementParameterType)params.get(j);
            if (""String_Node_Str"".equals(type.getName())) {
              nodeName=type.getValue();
              process.getProcess().getScreenshots().put(nodeName,node.getScreenshot());
              break;
            }
          }
          node.setScreenshot(null);
        }
      }
      process.getProcess().setScreenshot(null);
    }
 else     if (item instanceof JobletProcessItem) {
      JobletProcessItem joblet=(JobletProcessItem)item;
      screenshotStream=((JobletProcessItem)item).getJobletProcess().getScreenshot();
      joblet.getJobletProcess().getScreenshots().put(""String_Node_Str"",screenshotStream);
      nodeList=joblet.getJobletProcess().getNode();
      for (int i=0; i < nodeList.size(); i++) {
        String nodeName;
        NodeType node=(NodeType)nodeList.get(i);
        if (node.getScreenshot() != null && node.getScreenshot().length > 0) {
          EList params=node.getElementParameter();
          for (int j=0; j < params.size(); j++) {
            ElementParameterType type=(ElementParameterType)params.get(j);
            if (""String_Node_Str"".equals(type.getName())) {
              nodeName=type.getValue();
              joblet.getJobletProcess().getScreenshots().put(nodeName,node.getScreenshot());
              break;
            }
          }
          node.setScreenshot(null);
        }
      }
      joblet.getJobletProcess().setScreenshot(null);
    }
    ProxyRepositoryFactory.getInstance().save(item,true);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return ExecutionResult.FAILURE;
  }
  return ExecutionResult.SUCCESS_NO_ALERT;
}",0.9951892909433172
124256,"/** 
 * Saves the multi-page editor's document.
 */
@Override public void doSave(final IProgressMonitor monitor){
  if (!isDirty()) {
    return;
  }
  updateRunJobContext();
  designerEditor.getProcess().getProperty().eAdapters().remove(dirtyListener);
  IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
  IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  display=getSite().getShell().getDisplay();
  repFactory.addRepositoryWorkUnitListener(repositoryWorkListener);
  if (getActivePage() == 0) {
    getEditor(0).doSave(monitor);
  }
 else   if (getActivePage() == 2) {
    getEditor(2).doSave(monitor);
    try {
      IProcess2 oldProcess=getProcess();
      ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
      ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
      IProcess2 newProcess=null;
      Item item=getProcess().getProperty().getItem();
      if (item instanceof ProcessItem) {
        ((Process)designerEditor.getProcess()).updateProcess(processType);
      }
 else       if (item instanceof JobletProcessItem) {
        AbstractProcessProvider processProvider=AbstractProcessProvider.findProcessProviderFromPID(IComponent.JOBLET_PID);
        if (processProvider != null) {
          newProcess=processProvider.buildNewGraphicProcess(item);
        }
        designerEditor.setProcess(newProcess);
        Boolean lastVersion=null;
        if (oldProcess instanceof ILastVersionChecker) {
          lastVersion=((ILastVersionChecker)oldProcess).isLastVersion(item);
        }
        if (designerEditor.getEditorInput() instanceof JobEditorInput) {
          ((JobEditorInput)designerEditor.getEditorInput()).checkInit(lastVersion,null,true);
        }
      }
      getEditor(0).doSave(monitor);
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (processEditorInput != null) {
    propertyInformation=new ArrayList(processEditorInput.getItem().getProperty().getInformations());
    propertyIsDirty=false;
    firePropertyChange(IEditorPart.PROP_DIRTY);
    if (processEditorInput.getItem() instanceof ProcessItem) {
      RepositoryManager.refresh(ERepositoryObjectType.PROCESS);
    }
 else {
      RepositoryManager.refresh(ERepositoryObjectType.JOBLET);
    }
  }
  if (designerEditor != null && dirtyListener != null)   designerEditor.getProcess().getProperty().eAdapters().add(dirtyListener);
}","/** 
 * Saves the multi-page editor's document.
 */
@Override public void doSave(final IProgressMonitor monitor){
  if (!isDirty()) {
    return;
  }
  updateRunJobContext();
  designerEditor.getProcess().getProperty().eAdapters().remove(dirtyListener);
  IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
  IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  display=getSite().getShell().getDisplay();
  repFactory.addRepositoryWorkUnitListener(repositoryWorkListener);
  if (getActivePage() == 0 || getActivePage() == 1) {
    getEditor(0).doSave(monitor);
  }
 else   if (getActivePage() == 2) {
    getEditor(2).doSave(monitor);
    try {
      IProcess2 oldProcess=getProcess();
      ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
      ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
      IProcess2 newProcess=null;
      Item item=getProcess().getProperty().getItem();
      if (item instanceof ProcessItem) {
        ((Process)designerEditor.getProcess()).updateProcess(processType);
      }
 else       if (item instanceof JobletProcessItem) {
        AbstractProcessProvider processProvider=AbstractProcessProvider.findProcessProviderFromPID(IComponent.JOBLET_PID);
        if (processProvider != null) {
          newProcess=processProvider.buildNewGraphicProcess(item);
        }
        designerEditor.setProcess(newProcess);
        Boolean lastVersion=null;
        if (oldProcess instanceof ILastVersionChecker) {
          lastVersion=((ILastVersionChecker)oldProcess).isLastVersion(item);
        }
        if (designerEditor.getEditorInput() instanceof JobEditorInput) {
          ((JobEditorInput)designerEditor.getEditorInput()).checkInit(lastVersion,null,true);
        }
      }
      getEditor(0).doSave(monitor);
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  if (processEditorInput != null) {
    propertyInformation=new ArrayList(processEditorInput.getItem().getProperty().getInformations());
    propertyIsDirty=false;
    firePropertyChange(IEditorPart.PROP_DIRTY);
    if (processEditorInput.getItem() instanceof ProcessItem) {
      RepositoryManager.refresh(ERepositoryObjectType.PROCESS);
    }
 else {
      RepositoryManager.refresh(ERepositoryObjectType.JOBLET);
    }
  }
  if (designerEditor != null && dirtyListener != null)   designerEditor.getProcess().getProperty().eAdapters().add(dirtyListener);
}",0.9953596287703016
124257,"private void addGroupMultiSchemaSettings(final Composite mainComposite){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),180);
  Composite composite=new Composite(group,SWT.NONE);
  GridLayout gridLayout=new GridLayout(4,false);
  gridLayout.marginHeight=1;
  composite.setLayout(gridLayout);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  composite.setLayoutData(gd);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  useMultiSaparators=new Button(group,SWT.CHECK);
  Composite multiComp=new Composite(group,SWT.NONE);
  gridLayout=new GridLayout(2,false);
  gridLayout.marginHeight=1;
  multiComp.setLayout(gridLayout);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  multiComp.setLayoutData(gd);
  useMultiSaparators.setText(Messages.getString(""String_Node_Str""));
  multiSeparatorsText=new LabelledText(multiComp,""String_Node_Str"",1,true);
  multiSeparatorsText.setEditable(false);
  keyValuesText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyValuesText.setEditable(false);
  keyIndexText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyIndexText.setEditable(false);
}","private void addGroupMultiSchemaSettings(final Composite mainComposite){
  Group group=Form.createGroup(mainComposite,1,Messages.getString(""String_Node_Str""),210);
  Composite composite=new Composite(group,SWT.NONE);
  GridLayout gridLayout=new GridLayout(4,false);
  gridLayout.marginHeight=1;
  composite.setLayout(gridLayout);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  composite.setLayoutData(gd);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,3,true,SWT.NONE);
  String[] fieldSeparatorData=getFieldSeparatorStyleSupportByLanguage();
  fieldSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),fieldSeparatorData,1,true,SWT.READ_ONLY);
  fieldSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  GridData gridData=new GridData(SWT.FILL,SWT.BOTTOM,true,false);
  gridData.minimumWidth=80;
  fieldSeparatorText.setLayoutData(gridData);
  String[] rowSeparatorData={RowSeparator.STANDART_EOL_LITERAL.getLiteral(),RowSeparator.CUSTOM_STRING_LITERAL.getLiteral()};
  rowSeparatorCombo=new LabelledCombo(composite,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),rowSeparatorData,1,true,SWT.READ_ONLY);
  rowSeparatorText=new LabelledText(composite,""String_Node_Str"",1,true,SWT.RIGHT);
  useMultiSaparators=new Button(group,SWT.CHECK);
  Composite multiComp=new Composite(group,SWT.NONE);
  gridLayout=new GridLayout(2,false);
  gridLayout.marginHeight=1;
  multiComp.setLayout(gridLayout);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  multiComp.setLayoutData(gd);
  useMultiSaparators.setText(Messages.getString(""String_Node_Str""));
  multiSeparatorsText=new LabelledText(multiComp,""String_Node_Str"",1,true);
  multiSeparatorsText.setEditable(false);
  keyValuesText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyValuesText.setEditable(false);
  keyIndexText=new LabelledText(multiComp,Messages.getString(""String_Node_Str""),1,true);
  keyIndexText.setEditable(false);
}",0.9995698924731182
124258,"public void characters(char ch[],int start,int length) throws SAXException {
  String text=new String(ch,start,length);
  if (text.length() <= 0)   return;
  for (  XMLNode node : nodes.getNodesCollection()) {
    if (node.isLooping) {
      if (node.outputText && node.hasValue == false) {
        node.addTextValue(text);
      }
    }
  }
}","public void characters(char ch[],int start,int length) throws SAXException {
  String text=new String(ch,start,length);
  if (text.length() <= 0)   return;
  for (  XMLNode node : nodes.getNodesCollection()) {
    if (node.isLooping) {
      if (node.outputText && node.hasValue == false) {
        if (node.isAsXML && !inCDATA) {
          text=escapeEntityHelper.escapeElementEntities(text);
        }
        node.addTextValue(text);
      }
    }
  }
}",0.8385481852315394
124259,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  this.currentPath=this.currentPath + ""String_Node_Str"" + qName;
  for (  XMLNode node : nodes.getNodesCollection()) {
    node.outputText=false;
    if (this.currentPath.equals(node.loopPath)) {
      node.isLooping=true;
    }
    if (node.isLooping) {
      if (node.isAsXML && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.addTextValue(""String_Node_Str"" + qName);
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            node.addTextValue(""String_Node_Str"" + attributes.getQName(m) + ""String_Node_Str""+ ""String_Node_Str""+ attributes.getValue(m)+ ""String_Node_Str"");
          }
        }
        node.outputText=true;
        node.hasValue=false;
        node.addTextValue(""String_Node_Str"");
      }
 else       if (node.isDot && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.outputText=true;
        node.hasValue=false;
      }
 else {
        int index=node.nodePath.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(node.nodePath.substring(0,index - 1))) {
            String attribute=attributes.getValue(node.nodePath.substring(index + 1));
            if (attribute != null && false == node.hasValue) {
              node.addTextValue(attribute);
              node.hasValue=true;
            }
          }
        }
 else {
          if (currentPath.equals(node.nodePath)) {
            node.outputText=true;
          }
        }
      }
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  this.currentPath=this.currentPath + ""String_Node_Str"" + qName;
  for (  XMLNode node : nodes.getNodesCollection()) {
    node.outputText=false;
    if (this.currentPath.equals(node.loopPath)) {
      node.isLooping=true;
    }
    if (node.isLooping) {
      if (node.isAsXML && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.addTextValue(""String_Node_Str"" + qName);
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            node.addTextValue(""String_Node_Str"" + attributes.getQName(m) + ""String_Node_Str""+ ""String_Node_Str""+ escapeEntityHelper.escapeAttributeEntities(attributes.getValue(m))+ ""String_Node_Str"");
          }
        }
        node.outputText=true;
        node.hasValue=false;
        node.addTextValue(""String_Node_Str"");
      }
 else       if (node.isDot && (this.currentPath.equals(node.nodePath) || this.currentPath.startsWith(node.nodePath + ""String_Node_Str""))) {
        node.outputText=true;
        node.hasValue=false;
      }
 else {
        int index=node.nodePath.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(node.nodePath.substring(0,index - 1))) {
            String attribute=attributes.getValue(node.nodePath.substring(index + 1));
            if (attribute != null && false == node.hasValue) {
              node.addTextValue(attribute);
              node.hasValue=true;
            }
          }
        }
 else {
          if (currentPath.equals(node.nodePath)) {
            node.outputText=true;
          }
        }
      }
    }
  }
}",0.9868270332187858
124260,"public Object call() throws Exception {
  try {
    DefaultHandler hd=new SimpleSAXLoopHandler(nodes,bcache);
    SAXParser saxParser=null;
    if (!ignoreDTD) {
      saxParser=SAXParserFactory.newInstance().newSAXParser();
    }
 else {
      SAXParserFactory spf=SAXParserFactory.newInstance();
      spf.setFeature(""String_Node_Str"",false);
      saxParser=spf.newSAXParser();
    }
    if (fileURL != null) {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(new java.io.FileInputStream(fileURL));
      inSource.setEncoding(this.charset);
      saxParser.parse(inSource,hd);
    }
 else {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
      inSource.setEncoding(this.charset);
      saxParser.parse(is,hd);
    }
  }
  finally {
    bcache.notifyErrorOccurred();
  }
  return null;
}","public Object call() throws Exception {
  try {
    DefaultHandler hd=new SimpleSAXLoopHandler(nodes,bcache);
    SAXParser saxParser=null;
    if (!ignoreDTD) {
      saxParser=SAXParserFactory.newInstance().newSAXParser();
    }
 else {
      SAXParserFactory spf=SAXParserFactory.newInstance();
      spf.setFeature(""String_Node_Str"",false);
      saxParser=spf.newSAXParser();
    }
    saxParser.setProperty(""String_Node_Str"",hd);
    if (fileURL != null) {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(new java.io.FileInputStream(fileURL));
      inSource.setEncoding(this.charset);
      saxParser.parse(inSource,hd);
    }
 else {
      org.xml.sax.InputSource inSource=new org.xml.sax.InputSource(is);
      inSource.setEncoding(this.charset);
      saxParser.parse(is,hd);
    }
  }
  finally {
    bcache.notifyErrorOccurred();
  }
  return null;
}",0.971395213076474
124261,"private void createTisBlankArea(Composite parent){
  tisBlankCompoiste=toolkit.createComposite(parent);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=-20;
  tisBlankCompoiste.setLayoutData(gd);
  tisBlankCompoiste.setVisible(false);
  tisBlankCompoiste.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tisBlankCompoiste.setBackground(parent.getBackground());
}","private void createTisBlankArea(Composite parent){
  tisBlankCompoiste=toolkit.createComposite(parent);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=20;
  tisBlankCompoiste.setLayoutData(gd);
  tisBlankCompoiste.setVisible(true);
  tisBlankCompoiste.setBackgroundMode(SWT.INHERIT_DEFAULT);
  tisBlankCompoiste.setBackground(parent.getBackground());
}",0.9893617021276596
124262,"private void createTisRepositoryArea(Composite parent){
  tisRepositoryComposite=toolkit.createComposite(parent);
  tisRepositoryComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  tisRepositoryComposite.setLayout(new FormLayout());
  tisRepositoryComposite.setBackground(GREY_COLOR);
  FormData formData;
  Composite group=new Composite(tisRepositoryComposite,SWT.None);
  manageConnectionsButton=toolkit.createButton(tisRepositoryComposite,null,SWT.PUSH);
  manageConnectionsButton.setBackground(GREY_COLOR);
  manageConnectionsButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  formData=new FormData();
  formData.top=new FormAttachment(group,HORIZONTAL_SPACE,SWT.CENTER);
  formData.right=new FormAttachment(100,-HORIZONTAL_TWO_SPACE);
  manageConnectionsButton.setLayoutData(formData);
  group.setLayout(new FormLayout());
  formData=new FormData();
  formData.top=new FormAttachment(0,0);
  formData.left=new FormAttachment(0,-HORIZONTAL_SPACE);
  formData.right=new FormAttachment(manageConnectionsButton,-HORIZONTAL_SPACE);
  formData.bottom=new FormAttachment(100,-2);
  group.setLayoutData(formData);
  Label connectionLabel=toolkit.createLabel(group,null);
  connectionLabel.setBackground(tisRepositoryComposite.getBackground());
  connectionLabel.setText(""String_Node_Str"");
  formData=new FormData();
  formData.top=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  formData.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  formData.right=new FormAttachment(0,LEFTSPACE);
  connectionLabel.setLayoutData(formData);
  connectionsViewer=new ComboViewer(group,SWT.BORDER | SWT.READ_ONLY);
  connectionsViewer.setContentProvider(new ArrayContentProvider());
  connectionsViewer.setLabelProvider(new ConnectionLabelProvider());
  formData=new FormData();
  formData.top=new FormAttachment(connectionLabel,0,SWT.CENTER);
  formData.left=new FormAttachment(connectionLabel,HORIZONTAL_SPACE);
  formData.right=new FormAttachment(95,12);
  connectionsViewer.getControl().setLayoutData(formData);
  Label emailLabel=toolkit.createLabel(group,null);
  emailLabel.setBackground(tisRepositoryComposite.getBackground());
  emailLabel.setText(Messages.getString(""String_Node_Str""));
  formData=new FormData();
  formData.top=new FormAttachment(connectionLabel,HORIZONTAL_TWO_SPACE);
  formData.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  formData.right=new FormAttachment(0,LEFTSPACE);
  emailLabel.setLayoutData(formData);
  user=toolkit.createText(group,null,SWT.BORDER);
  user.setEditable(false);
  user.setEnabled(false);
  formData=new FormData();
  formData.top=new FormAttachment(emailLabel,0,SWT.CENTER);
  formData.left=new FormAttachment(emailLabel,HORIZONTAL_SPACE);
  formData.right=new FormAttachment(95,12);
  user.setLayoutData(formData);
  passwordComposite=toolkit.createComposite(parent);
  GridData gd=new GridData(GridData.FILL_BOTH);
  passwordComposite.setLayoutData(gd);
  passwordComposite.setLayout(new FormLayout());
  passwordComposite.setBackground(GREY_COLOR);
  passwordLabel=toolkit.createLabel(passwordComposite,null);
  passwordLabel.setBackground(passwordComposite.getBackground());
  passwordLabel.setText(Messages.getString(""String_Node_Str""));
  formData=new FormData();
  formData.top=new FormAttachment(passwordComposite,3,SWT.TOP);
  formData.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE - 5);
  formData.right=new FormAttachment(0,LEFTSPACE - 5);
  formData.bottom=new FormAttachment(100,-1);
  passwordLabel.setLayoutData(formData);
  passwordText=toolkit.createText(passwordComposite,null,SWT.PASSWORD | SWT.BORDER);
  passwordText.setEditable(false);
  passwordText.setEnabled(false);
  formData=new FormData();
  formData.top=new FormAttachment(passwordComposite,1,SWT.TOP);
  formData.left=new FormAttachment(passwordLabel,HORIZONTAL_SPACE);
  formData.right=new FormAttachment(100,-45);
  formData.bottom=new FormAttachment(100,-1);
  passwordText.setLayoutData(formData);
}","private void createTisRepositoryArea(Composite parent){
  tisRepositoryComposite=toolkit.createComposite(parent);
  tisRepositoryComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  tisRepositoryComposite.setLayout(new FormLayout());
  tisRepositoryComposite.setBackground(GREY_COLOR);
  FormData formData;
  Composite group=new Composite(tisRepositoryComposite,SWT.None);
  manageConnectionsButton=toolkit.createButton(tisRepositoryComposite,null,SWT.PUSH);
  manageConnectionsButton.setBackground(GREY_COLOR);
  manageConnectionsButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  formData=new FormData();
  formData.top=new FormAttachment(group,HORIZONTAL_SPACE,SWT.CENTER);
  formData.right=new FormAttachment(100,-HORIZONTAL_TWO_SPACE);
  manageConnectionsButton.setLayoutData(formData);
  group.setLayout(new FormLayout());
  formData=new FormData();
  formData.top=new FormAttachment(0,0);
  formData.left=new FormAttachment(0,-HORIZONTAL_SPACE);
  formData.right=new FormAttachment(manageConnectionsButton,-HORIZONTAL_SPACE);
  formData.bottom=new FormAttachment(100,-2);
  group.setLayoutData(formData);
  Label connectionLabel=toolkit.createLabel(group,null);
  connectionLabel.setBackground(tisRepositoryComposite.getBackground());
  connectionLabel.setText(""String_Node_Str"");
  formData=new FormData();
  formData.top=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  formData.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  formData.right=new FormAttachment(0,LEFTSPACE);
  connectionLabel.setLayoutData(formData);
  connectionsViewer=new ComboViewer(group,SWT.BORDER | SWT.READ_ONLY);
  connectionsViewer.setContentProvider(new ArrayContentProvider());
  connectionsViewer.setLabelProvider(new ConnectionLabelProvider());
  formData=new FormData();
  formData.top=new FormAttachment(connectionLabel,0,SWT.CENTER);
  formData.left=new FormAttachment(connectionLabel,HORIZONTAL_SPACE);
  formData.right=new FormAttachment(95,12);
  connectionsViewer.getControl().setLayoutData(formData);
  Label emailLabel=toolkit.createLabel(group,null);
  emailLabel.setBackground(tisRepositoryComposite.getBackground());
  emailLabel.setText(Messages.getString(""String_Node_Str""));
  formData=new FormData();
  formData.top=new FormAttachment(connectionLabel,HORIZONTAL_TWO_SPACE);
  formData.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  formData.right=new FormAttachment(0,LEFTSPACE);
  emailLabel.setLayoutData(formData);
  user=toolkit.createText(group,null,SWT.BORDER);
  user.setEditable(false);
  user.setEnabled(false);
  formData=new FormData();
  formData.top=new FormAttachment(emailLabel,0,SWT.CENTER);
  formData.left=new FormAttachment(emailLabel,HORIZONTAL_SPACE);
  formData.right=new FormAttachment(95,12);
  user.setLayoutData(formData);
  passwordComposite=toolkit.createComposite(parent);
  GridData gd=new GridData(GridData.FILL_BOTH);
  passwordComposite.setLayoutData(gd);
  passwordComposite.setLayout(new FormLayout());
  passwordComposite.setBackground(GREY_COLOR);
  passwordLabel=toolkit.createLabel(passwordComposite,null);
  passwordLabel.setBackground(passwordComposite.getBackground());
  passwordLabel.setText(Messages.getString(""String_Node_Str""));
  formData=new FormData();
  formData.top=new FormAttachment(passwordComposite,3,SWT.TOP);
  formData.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE - 5);
  formData.right=new FormAttachment(0,LEFTSPACE - 5);
  passwordLabel.setLayoutData(formData);
  passwordText=toolkit.createText(passwordComposite,null,SWT.PASSWORD | SWT.BORDER);
  passwordText.setEditable(false);
  passwordText.setEnabled(false);
  formData=new FormData();
  formData.top=new FormAttachment(passwordComposite,1,SWT.TOP);
  formData.left=new FormAttachment(passwordLabel,HORIZONTAL_SPACE);
  formData.right=new FormAttachment(100,-45);
  passwordText.setLayoutData(formData);
}",0.8942652329749103
124263,"private void displayPasswordComposite(){
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    if (getConnection() != null) {
      boolean local=RepositoryConstants.REPOSITORY_LOCAL_ID.equals(getConnection().getRepositoryId());
      if (local) {
        GridData layoutData=(GridData)passwordComposite.getLayoutData();
        layoutData.heightHint=-20;
        passwordComposite.setLayoutData(layoutData);
        passwordComposite.setVisible(false);
        passwordComposite.layout();
        formBody.layout();
        formBody.pack();
        GridData layoutData2=(GridData)tisBlankCompoiste.getLayoutData();
        layoutData2.heightHint=20;
        tisBlankCompoiste.setLayoutData(layoutData2);
        tisBlankCompoiste.setVisible(true);
        tisBlankCompoiste.layout();
        formBody.layout();
        formBody.pack();
      }
 else {
        GridData layoutData=(GridData)passwordComposite.getLayoutData();
        layoutData.heightHint=24;
        passwordComposite.setLayoutData(layoutData);
        passwordComposite.setVisible(true);
        passwordComposite.layout();
        formBody.layout();
        formBody.pack();
        GridData layoutData2=(GridData)tisBlankCompoiste.getLayoutData();
        layoutData2.heightHint=-20;
        tisBlankCompoiste.setLayoutData(layoutData2);
        tisBlankCompoiste.setVisible(false);
        tisBlankCompoiste.layout();
        formBody.layout();
        formBody.pack();
      }
    }
 else {
      GridData layoutData=(GridData)passwordComposite.getLayoutData();
      layoutData.heightHint=20;
      passwordComposite.setLayoutData(layoutData);
      passwordComposite.setVisible(true);
      passwordComposite.layout();
      formBody.layout();
      formBody.pack();
      GridData layoutData2=(GridData)tisBlankCompoiste.getLayoutData();
      layoutData2.heightHint=-20;
      tisBlankCompoiste.setLayoutData(layoutData2);
      tisBlankCompoiste.setVisible(false);
      tisBlankCompoiste.layout();
      formBody.layout();
      formBody.pack();
    }
    getShell().pack();
  }
}","private void displayPasswordComposite(){
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    if (getConnection() != null) {
      boolean local=RepositoryConstants.REPOSITORY_LOCAL_ID.equals(getConnection().getRepositoryId());
      if (local) {
        GridData layoutData=(GridData)passwordComposite.getLayoutData();
        passwordComposite.setVisible(false);
        layoutData.exclude=true;
        GridData layoutData2=(GridData)tisBlankCompoiste.getLayoutData();
        tisBlankCompoiste.setVisible(true);
        layoutData2.exclude=false;
        formBody.layout();
      }
 else {
        GridData layoutData=(GridData)passwordComposite.getLayoutData();
        passwordComposite.setVisible(true);
        layoutData.exclude=false;
        GridData layoutData2=(GridData)tisBlankCompoiste.getLayoutData();
        tisBlankCompoiste.setVisible(false);
        layoutData2.exclude=true;
        formBody.layout();
      }
    }
 else {
      GridData layoutData=(GridData)passwordComposite.getLayoutData();
      passwordComposite.setVisible(true);
      layoutData.exclude=false;
      GridData layoutData2=(GridData)tisBlankCompoiste.getLayoutData();
      tisBlankCompoiste.setVisible(false);
      layoutData2.exclude=true;
      formBody.layout();
    }
    getShell().pack();
  }
}",0.2059523809523809
124264,"private static void copyFileL(String srcFileName,FileInputStream srcInputStream,String desFileName,boolean delSrc) throws Exception {
  File source=new File(srcFileName);
  File dest=new File(desFileName);
  FileChannel in=null, out=null;
  try {
    in=srcInputStream.getChannel();
    out=new FileOutputStream(dest).getChannel();
    long size=in.size();
    long position=0;
    final long MAP_SIZE=102400000;
    MappedByteBuffer buf=null;
    while (true) {
      if (position + MAP_SIZE >= size) {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,size - position);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        break;
      }
 else {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,MAP_SIZE);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        position+=MAP_SIZE;
      }
    }
    in.close();
    out.close();
    if (delSrc) {
      source.delete();
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}","private static void copyFileL(String srcFileName,FileInputStream srcInputStream,String desFileName,boolean delSrc) throws Exception {
  File source=new File(srcFileName);
  File dest=new File(desFileName);
  FileChannel in=null, out=null;
  try {
    in=srcInputStream.getChannel();
    out=new FileOutputStream(dest).getChannel();
    long size=in.size();
    long position=0;
    final long MAP_SIZE=33525760;
    MappedByteBuffer buf=null;
    while (true) {
      if (position + MAP_SIZE >= size) {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,size - position);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        break;
      }
 else {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,MAP_SIZE);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        position+=MAP_SIZE;
      }
    }
    in.close();
    out.close();
    if (delSrc) {
      source.delete();
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}",0.993939393939394
124265,"/** 
 * dev Comment method ""createNewRepositoryNode"".
 * @param node
 * @param parameters
 * @param connection
 * @param iMetadataConnection
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private RepositoryNode createNewRepositoryNode(RepositoryNode node,ConnectionParameters parameters,DatabaseConnection connection,IMetadataConnection iMetadataConnection){
  ManagerConnection managerConnection=new ManagerConnection();
  boolean status=managerConnection.check(iMetadataConnection);
  connection.setDivergency(!status);
  ConnectionHelper.getTables(connection).clear();
  if (status) {
    try {
      List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
      ExtractMetaDataUtils.isReconnect=false;
      for (      MetadataTable table : tablesFromDB) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,table.getSourceName()));
        table.getColumns().clear();
        for (        MetadataColumn column : columnsFromDB) {
          column.setLabel(""String_Node_Str"");
          table.getColumns().add(column);
        }
        table.setLabel(""String_Node_Str"");
        ConnectionHelper.getTables(connection).add(table);
      }
      ExtractMetaDataUtils.isReconnect=true;
    }
 catch (    Exception e) {
      if (parameters != null) {
        parameters.setConnectionComment(e.getMessage());
      }
      return null;
    }
  }
 else {
    if (parameters != null) {
      parameters.setConnectionComment(managerConnection.getMessageException() == null ? ""String_Node_Str"" : managerConnection.getMessageException());
    }
  }
  DatabaseConnectionItem item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  item.setProperty(connectionProperty);
  item.setConnection(connection);
  RepositoryObject object=new RepositoryObject(connectionProperty);
  object.setLabel(""String_Node_Str"");
  ItemState state=PropertiesFactory.eINSTANCE.createItemState();
  state.setDeleted(false);
  item.setState(state);
  if (node == null) {
    node=new RepositoryNode(null,null,ENodeType.SYSTEM_FOLDER);
  }
  RepositoryNode newNode=new RepositoryNode(object,node,ENodeType.SYSTEM_FOLDER);
  return newNode;
}","/** 
 * dev Comment method ""createNewRepositoryNode"".
 * @param node
 * @param parameters
 * @param connection
 * @param iMetadataConnection
 * @return
 */
@SuppressWarnings(""String_Node_Str"") private RepositoryNode createNewRepositoryNode(RepositoryNode node,ConnectionParameters parameters,DatabaseConnection connection,IMetadataConnection iMetadataConnection){
  ManagerConnection managerConnection=new ManagerConnection();
  boolean status=managerConnection.check(iMetadataConnection);
  connection.setDivergency(!status);
  ConnectionHelper.getTables(connection).clear();
  if (status) {
    try {
      List<MetadataTable> tablesFromDB=ExtractMetaDataFromDataBase.returnMetaTablesFormConnection(iMetadataConnection);
      ExtractMetaDataUtils.isReconnect=false;
      for (      MetadataTable table : tablesFromDB) {
        List<MetadataColumn> columnsFromDB=new ArrayList<MetadataColumn>();
        columnsFromDB.addAll(ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(iMetadataConnection,table.getSourceName()));
        table.getColumns().clear();
        for (        MetadataColumn column : columnsFromDB) {
          column.setLabel(""String_Node_Str"");
          table.getColumns().add(column);
        }
        table.setLabel(""String_Node_Str"");
        ConnectionHelper.getTables(connection).add(table);
      }
      ExtractMetaDataUtils.isReconnect=true;
    }
 catch (    Exception e) {
      if (parameters != null) {
        parameters.setConnectionComment(e.getMessage());
      }
      return null;
    }
  }
 else {
    if (parameters != null) {
      parameters.setConnectionComment(managerConnection.getMessageException() == null ? ""String_Node_Str"" : managerConnection.getMessageException());
    }
  }
  DatabaseConnectionItem item=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  item.setProperty(connectionProperty);
  updatePackage(iMetadataConnection);
  DatabaseConnection dbConn=(DatabaseConnection)iMetadataConnection.getCurrentConnection();
  item.setConnection(dbConn);
  RepositoryObject object=new RepositoryObject(connectionProperty);
  object.setLabel(""String_Node_Str"");
  ItemState state=PropertiesFactory.eINSTANCE.createItemState();
  state.setDeleted(false);
  item.setState(state);
  if (node == null) {
    node=new RepositoryNode(null,null,ENodeType.SYSTEM_FOLDER);
  }
  RepositoryNode newNode=new RepositoryNode(object,node,ENodeType.SYSTEM_FOLDER);
  return newNode;
}",0.9663834503140007
124266,"private void deleteNoUseTable(){
  if (SQLBuilderRepositoryNodeManager.tList == null) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}","private void deleteNoUseTable(){
  if (SQLBuilderRepositoryNodeManager.tList == null || SQLBuilderRepositoryNodeManager.tList.size() == 0) {
    return;
  }
  IRepositoryViewObject repositoryObject=node.getObject();
  Item item=repositoryObject.getProperty().getItem();
  if (item instanceof DatabaseConnectionItem) {
    manager.deleteNouseTables(((DatabaseConnectionItem)item).getConnection());
  }
}",0.929427430093209
124267,"private static void copyFileL(String srcFileName,FileInputStream srcInputStream,String desFileName,boolean delSrc) throws Exception {
  File source=new File(srcFileName);
  File dest=new File(desFileName);
  FileChannel in=null, out=null;
  try {
    in=srcInputStream.getChannel();
    out=new FileOutputStream(dest).getChannel();
    long size=in.size();
    long position=0;
    final long MAP_SIZE=102400000;
    MappedByteBuffer buf=null;
    while (true) {
      if (position + MAP_SIZE >= size) {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,size - position);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        break;
      }
 else {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,MAP_SIZE);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        position+=MAP_SIZE;
      }
    }
    in.close();
    out.close();
    if (delSrc) {
      source.delete();
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}","private static void copyFileL(String srcFileName,FileInputStream srcInputStream,String desFileName,boolean delSrc) throws Exception {
  File source=new File(srcFileName);
  File dest=new File(desFileName);
  FileChannel in=null, out=null;
  try {
    in=srcInputStream.getChannel();
    out=new FileOutputStream(dest).getChannel();
    long size=in.size();
    long position=0;
    final long MAP_SIZE=33525760;
    MappedByteBuffer buf=null;
    while (true) {
      if (position + MAP_SIZE >= size) {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,size - position);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        break;
      }
 else {
        buf=in.map(FileChannel.MapMode.READ_ONLY,position,MAP_SIZE);
        out.write(buf);
        if (delSrc) {
          clean(buf);
        }
        position+=MAP_SIZE;
      }
    }
    in.close();
    out.close();
    if (delSrc) {
      source.delete();
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
}",0.993939393939394
124268,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitorWrap=new EventLoopProgressMonitor(monitor);
  try {
    DemoProjectBean demoProjectBean=demoProjectList.get(selectedDemoProjectIndex);
    String techName=demoProjectBean.getProjectName();
    if (checkProjectIsExisting(techName)) {
      boolean reImportFlag=MessageDialog.openQuestion(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      if (!reImportFlag) {
        return;
      }
    }
    String demoFilePath=demoProjectBean.getDemoProjectFilePath();
    EDemoProjectFileType demoProjectFileType=demoProjectBean.getDemoProjectFileType();
    String pluginID=ResourcesPlugin.PLUGIN_ID;
    if (techName.equals(""String_Node_Str"")) {
      pluginID=""String_Node_Str"";
    }
 else     if (techName.equals(""String_Node_Str"")) {
      pluginID=ResourcesPlugin.TDQ_PLUGIN_ID;
    }
    Bundle bundle=Platform.getBundle(pluginID);
    URL url=FileLocator.resolve(bundle.getEntry(demoFilePath));
    String filePath=new Path(url.getFile()).toOSString();
    if (demoProjectFileType.getName().equalsIgnoreCase(""String_Node_Str"")) {
      ImportProjectsUtilities.importProjectAs(shell,techName,techName,filePath,monitorWrap);
    }
 else {
      ImportProjectsUtilities.importArchiveProject(shell,techName,filePath,monitorWrap);
    }
    lastImportedName=techName;
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
catch (  TarException e) {
    throw new InvocationTargetException(e);
  }
  monitorWrap.done();
  MessageDialog.openInformation(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  prefManipulator.setValue(DEMO_ALREADY_IMPORTED,true);
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitorWrap=new EventLoopProgressMonitor(monitor);
  try {
    DemoProjectBean demoProjectBean=demoProjectList.get(selectedDemoProjectIndex);
    String techName=demoProjectBean.getProjectName();
    if (checkProjectIsExisting(techName)) {
      boolean reImportFlag=MessageDialog.openQuestion(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      if (!reImportFlag) {
        return;
      }
    }
    String demoFilePath=demoProjectBean.getDemoProjectFilePath();
    EDemoProjectFileType demoProjectFileType=demoProjectBean.getDemoProjectFileType();
    String pluginID=ResourcesPlugin.PLUGIN_ID;
    if (techName.equals(""String_Node_Str"")) {
      pluginID=""String_Node_Str"";
    }
 else     if (techName.equals(""String_Node_Str"")) {
      pluginID=ResourcesPlugin.TDQ_PLUGIN_ID;
    }
    Bundle bundle=Platform.getBundle(pluginID);
    URL url=FileLocator.resolve(bundle.getEntry(demoFilePath));
    String filePath=new Path(url.getFile()).toOSString();
    if (demoProjectFileType.getName().equalsIgnoreCase(""String_Node_Str"")) {
      ImportProjectsUtilities.importProjectAs(shell,techName,techName,filePath,monitorWrap);
    }
 else {
      ImportProjectsUtilities.importArchiveProjectAs(shell,techName,techName,filePath,monitorWrap);
    }
    lastImportedName=techName;
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
catch (  TarException e) {
    throw new InvocationTargetException(e);
  }
  monitorWrap.done();
  MessageDialog.openInformation(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
  prefManipulator.setValue(DEMO_ALREADY_IMPORTED,true);
}",0.9938943456331298
124269,"private void createTosActionArea(Composite parent){
  tosActionComposite=toolkit.createComposite(parent);
  tosActionComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosActionComposite.setLayout(new FormLayout());
  tosActionComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  repositoryComposite.setBackground(parent.getBackground());
  FormData data;
  manageProjectsButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButton.setBackground(tosActionComposite.getBackground());
  manageProjectsButton.setText(Messages.getString(""String_Node_Str""));
  manageProjectsButton.setVisible(false);
  manageViewer=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  manageViewer.setContentProvider(new ArrayContentProvider());
  manageViewer.setInput(getManageElements());
  manageViewer.getCombo().setVisible(false);
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(100,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButton.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  data=new FormData();
  data.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(0,LEFTSPACE);
  data.bottom=new FormAttachment(manageProjectsButton,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  manageProjectLabel1.setVisible(false);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,HORIZONTAL_SPACE);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point pbtnPoint=manageProjectsButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - pbtnPoint.x);
  manageViewer.getControl().setLayoutData(data);
  manageProjectsButtonTemp=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButtonTemp.setBackground(tosActionComposite.getBackground());
  manageProjectsButtonTemp.setText(Messages.getString(""String_Node_Str""));
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButtonTemp.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  GC gc=new GC(manageProjectLabel1);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(manageProjectsButtonTemp,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  importCombo=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,10,SWT.RIGHT);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point btPoint=manageProjectsButtonTemp.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  importCombo.getCombo().setLayoutData(data);
  importCombo.setContentProvider(new ArrayContentProvider());
  List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
  for (int i=0; i < demoProjectList.size(); i++) {
    DemoProjectBean bean=(DemoProjectBean)demoProjectList.get(i);
    importCombo.add(bean.getProjectName());
  }
  importCombo.setSelection(new StructuredSelection(new Object[]{importCombo.getElementAt(0)}));
  manageProjectsButtonTemp.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      NewImportProjectWizard newPrjWiz=new NewImportProjectWizard();
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        final String newName=newPrjWiz.getName();
        final String demoProjName=importCombo.getCombo().getItem(importCombo.getCombo().getSelectionIndex());
        ProgressDialog progressDialog=new ProgressDialog(getShell()){
          private IProgressMonitor monitorWrap;
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitorWrap=new EventLoopProgressMonitor(monitor);
            try {
              final List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
              DemoProjectBean demoProjectBean=null;
              for (              DemoProjectBean bean : demoProjectList) {
                if (bean.getProjectName().equals(demoProjName)) {
                  demoProjectBean=bean;
                  break;
                }
              }
              if (null == demoProjectBean) {
                throw new IOException(""String_Node_Str"");
              }
              String techName=demoProjectBean.getProjectName();
              String demoFilePath=demoProjectBean.getDemoProjectFilePath();
              EDemoProjectFileType demoProjectFileType=demoProjectBean.getDemoProjectFileType();
              String pluginID=org.talend.resources.ResourcesPlugin.PLUGIN_ID;
              if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
 else               if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
              Bundle bundle=Platform.getBundle(pluginID);
              URL url=FileLocator.resolve(bundle.getEntry(demoFilePath));
              String filePath=new Path(url.getFile()).toOSString();
              if (demoProjectFileType.getName().equalsIgnoreCase(""String_Node_Str"")) {
                ImportProjectsUtilities.importProjectAs(getShell(),newName,newName,filePath,monitorWrap);
              }
 else {
                ImportProjectsUtilities.importArchiveProject(getShell(),newName,filePath,monitorWrap);
              }
            }
 catch (            IOException e) {
              throw new InvocationTargetException(e);
            }
catch (            TarException e) {
              throw new InvocationTargetException(e);
            }
            monitorWrap.done();
          }
        }
;
        try {
          progressDialog.executeProcess();
        }
 catch (        InvocationTargetException e1) {
          MessageBoxExceptionHandler.process(e1.getTargetException(),getShell());
        }
catch (        InterruptedException e1) {
        }
        dialog.advanced();
      }
    }
  }
);
}","private void createTosActionArea(Composite parent){
  tosActionComposite=toolkit.createComposite(parent);
  tosActionComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  tosActionComposite.setLayout(new FormLayout());
  tosActionComposite.setBackgroundMode(SWT.INHERIT_DEFAULT);
  repositoryComposite.setBackground(parent.getBackground());
  FormData data;
  manageProjectsButton=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButton.setBackground(tosActionComposite.getBackground());
  manageProjectsButton.setText(Messages.getString(""String_Node_Str""));
  manageProjectsButton.setVisible(false);
  manageViewer=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  manageViewer.setContentProvider(new ArrayContentProvider());
  manageViewer.setInput(getManageElements());
  manageViewer.getCombo().setVisible(false);
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(100,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButton.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  data=new FormData();
  data.left=new FormAttachment(0,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(0,LEFTSPACE);
  data.bottom=new FormAttachment(manageProjectsButton,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  manageProjectLabel1.setVisible(false);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,HORIZONTAL_SPACE);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point pbtnPoint=manageProjectsButton.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - pbtnPoint.x);
  manageViewer.getControl().setLayoutData(data);
  manageProjectsButtonTemp=toolkit.createButton(tosActionComposite,null,SWT.PUSH);
  manageProjectsButtonTemp.setBackground(tosActionComposite.getBackground());
  manageProjectsButtonTemp.setText(Messages.getString(""String_Node_Str""));
  data=new FormData();
  data.top=new FormAttachment(0,HORIZONTAL_THREE_SPACE);
  data.right=new FormAttachment(90,-HORIZONTAL_TWO_SPACE);
  data.bottom=new FormAttachment(100,-HORIZONTAL_FOUR_SPACE);
  manageProjectsButtonTemp.setLayoutData(data);
  manageProjectLabel1=toolkit.createLabel(tosActionComposite,Messages.getString(""String_Node_Str""));
  manageProjectLabel1.setBackground(tosActionComposite.getBackground());
  GC gc=new GC(manageProjectLabel1);
  Point labelSize=gc.stringExtent(Messages.getString(""String_Node_Str""));
  gc.dispose();
  data=new FormData();
  data.left=new FormAttachment(10,HORIZONTAL_TWO_SPACE);
  data.right=new FormAttachment(10,HORIZONTAL_TWO_SPACE + labelSize.x);
  data.bottom=new FormAttachment(manageProjectsButtonTemp,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  manageProjectLabel1.setLayoutData(data);
  importCombo=new ComboViewer(tosActionComposite,SWT.BORDER | SWT.READ_ONLY);
  data=new FormData();
  data.left=new FormAttachment(manageProjectLabel1,10,SWT.RIGHT);
  data.bottom=new FormAttachment(manageProjectLabel1,HORIZONTAL_FOUR_SPACE,SWT.CENTER);
  Point btPoint=manageProjectsButtonTemp.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  data.right=new FormAttachment(100,-HORIZONTAL_THREE_SPACE - btPoint.x - 50);
  importCombo.getCombo().setLayoutData(data);
  importCombo.setContentProvider(new ArrayContentProvider());
  List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
  for (int i=0; i < demoProjectList.size(); i++) {
    DemoProjectBean bean=(DemoProjectBean)demoProjectList.get(i);
    importCombo.add(bean.getProjectName());
  }
  importCombo.setSelection(new StructuredSelection(new Object[]{importCombo.getElementAt(0)}));
  manageProjectsButtonTemp.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      NewImportProjectWizard newPrjWiz=new NewImportProjectWizard();
      WizardDialog newProjectDialog=new WizardDialog(getShell(),newPrjWiz);
      newProjectDialog.setTitle(Messages.getString(""String_Node_Str""));
      if (newProjectDialog.open() == Window.OK) {
        final String newName=newPrjWiz.getName();
        final String demoProjName=importCombo.getCombo().getItem(importCombo.getCombo().getSelectionIndex());
        ProgressDialog progressDialog=new ProgressDialog(getShell()){
          private IProgressMonitor monitorWrap;
          @Override public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitorWrap=new EventLoopProgressMonitor(monitor);
            try {
              final List<DemoProjectBean> demoProjectList=ImportProjectsUtilities.getAllDemoProjects();
              DemoProjectBean demoProjectBean=null;
              for (              DemoProjectBean bean : demoProjectList) {
                if (bean.getProjectName().equals(demoProjName)) {
                  demoProjectBean=bean;
                  break;
                }
              }
              if (null == demoProjectBean) {
                throw new IOException(""String_Node_Str"");
              }
              String techName=demoProjectBean.getProjectName();
              String demoFilePath=demoProjectBean.getDemoProjectFilePath();
              EDemoProjectFileType demoProjectFileType=demoProjectBean.getDemoProjectFileType();
              String pluginID=org.talend.resources.ResourcesPlugin.PLUGIN_ID;
              if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
 else               if (techName.equals(""String_Node_Str"")) {
                pluginID=""String_Node_Str"";
              }
              Bundle bundle=Platform.getBundle(pluginID);
              URL url=FileLocator.resolve(bundle.getEntry(demoFilePath));
              String filePath=new Path(url.getFile()).toOSString();
              if (demoProjectFileType.getName().equalsIgnoreCase(""String_Node_Str"")) {
                ImportProjectsUtilities.importProjectAs(getShell(),newName,newName,filePath,monitorWrap);
              }
 else {
                ImportProjectsUtilities.importArchiveProjectAs(getShell(),newName,newName,filePath,monitorWrap);
              }
            }
 catch (            IOException e) {
              throw new InvocationTargetException(e);
            }
catch (            TarException e) {
              throw new InvocationTargetException(e);
            }
            monitorWrap.done();
          }
        }
;
        try {
          progressDialog.executeProcess();
        }
 catch (        InvocationTargetException e1) {
          MessageBoxExceptionHandler.process(e1.getTargetException(),getShell());
        }
catch (        InterruptedException e1) {
        }
        dialog.advanced();
      }
    }
  }
);
}",0.9992847947360892
124270,"private boolean isloginDialogDisabled(){
  boolean startable=Boolean.parseBoolean(System.getProperty(""String_Node_Str""));
  PreferenceManipulator preferenceManipulator=new PreferenceManipulator();
  ConnectionBean lastBean=null;
  if (startable) {
    final ConnectionUserPerReader instance=ConnectionUserPerReader.getInstance();
    instance.forceReadConnections();
    final String lastConncetion=ConnectionUserPerReader.getInstance().readLastConncetion();
    for (    ConnectionBean bean : instance.readConnections()) {
      if (bean.getName().equals(lastConncetion)) {
        lastBean=bean;
        break;
      }
    }
  }
  if (ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"") || startable) {
    boolean deleteProjectIfExist=ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"");
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    brandingService.getBrandingConfiguration().setUseProductRegistration(false);
    ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
    String projectName=""String_Node_Str"";
    int index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        projectName=Platform.getApplicationArgs()[index + 1];
      }
    }
    String language=""String_Node_Str"";
    index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        language=Platform.getApplicationArgs()[index + 1];
      }
    }
    String login=""String_Node_Str"";
    index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        login=Platform.getApplicationArgs()[index + 1];
      }
    }
    String password=""String_Node_Str"";
    index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        password=Platform.getApplicationArgs()[index + 1];
      }
    }
    String branch=null;
    if (startable && lastBean != null) {
      final String lastProject=preferenceManipulator.getLastProject();
      if (lastProject != null) {
        projectName=lastProject;
      }
      final String lastSVNBranch=preferenceManipulator.getLastSVNBranch();
      if (lastSVNBranch != null) {
        branch=lastSVNBranch;
      }
      final String lastUser=lastBean.getUser();
      if (lastUser != null) {
        login=lastUser;
      }
      final String lastPass=lastBean.getPassword();
      if (lastPass != null) {
        password=lastPass;
      }
    }
    User userInfo=PropertiesFactoryImpl.eINSTANCE.createUser();
    userInfo.setLogin(login);
    try {
      userInfo.setPassword(PasswordHelper.encryptPasswd(password));
    }
 catch (    NoSuchAlgorithmException e) {
      ExceptionHandler.process(e);
    }
    try {
      ConnectionBean bean=ConnectionBean.getDefaultConnectionBean();
      if (startable && lastBean != null) {
        bean=lastBean;
      }
      Context ctx=CorePlugin.getContext();
      RepositoryContext repositoryContext=new RepositoryContext();
      repositoryContext.setUser(userInfo);
      repositoryContext.setClearPassword(password);
      repositoryContext.setFields(bean.getDynamicFields());
      String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + projectName;
      if (branch != null) {
        repositoryContext.getFields().put(branchKey,branch);
      }
 else {
        repositoryContext.getFields().put(branchKey,SVNConstant.EMPTY);
      }
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,repositoryContext);
      repositoryFactory.setRepositoryFactoryFromProvider(RepositoryFactoryProvider.getRepositoriyById(bean.getRepositoryId()));
      Project project=null;
      for (      Project p : repositoryFactory.readProject()) {
        if (p.getLabel().equals(projectName) || p.getTechnicalLabel().equals(projectName)) {
          project=p;
          break;
        }
      }
      if (!startable) {
        if (deleteProjectIfExist && project != null) {
          ResourceModelUtils.getProject(project).delete(true,new NullProgressMonitor());
        }
        if (project == null || deleteProjectIfExist) {
          Project projectInfor=ProjectHelper.createProject(projectName,""String_Node_Str"",language,userInfo);
          project=repositoryFactory.createProject(projectInfor);
        }
      }
      repositoryContext.setProject(project);
      repositoryFactory.logOnProject(project,new NullProgressMonitor());
    }
 catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
catch (    LoginException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
catch (    BusinessException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
catch (    CoreException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
    return true;
  }
  return false;
}","private boolean isloginDialogDisabled(){
  boolean reload=Boolean.parseBoolean(System.getProperty(""String_Node_Str""));
  PreferenceManipulator preferenceManipulator=new PreferenceManipulator();
  ConnectionBean lastBean=null;
  if (reload) {
    final ConnectionUserPerReader instance=ConnectionUserPerReader.getInstance();
    instance.forceReadConnections();
    final String lastConncetion=ConnectionUserPerReader.getInstance().readLastConncetion();
    for (    ConnectionBean bean : instance.readConnections()) {
      if (bean.getName().equals(lastConncetion)) {
        lastBean=bean;
        break;
      }
    }
  }
  if (ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND) && reload) {
    boolean deleteProjectIfExist=ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"");
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    brandingService.getBrandingConfiguration().setUseProductRegistration(false);
    ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
    String projectName=""String_Node_Str"";
    int index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        projectName=Platform.getApplicationArgs()[index + 1];
      }
    }
    String language=""String_Node_Str"";
    index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        language=Platform.getApplicationArgs()[index + 1];
      }
    }
    String login=""String_Node_Str"";
    index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        login=Platform.getApplicationArgs()[index + 1];
      }
    }
    String password=""String_Node_Str"";
    index=ArrayUtils.indexOf(Platform.getApplicationArgs(),""String_Node_Str"");
    if (index > 0) {
      if (index + 1 < Platform.getApplicationArgs().length) {
        password=Platform.getApplicationArgs()[index + 1];
      }
    }
    String branch=null;
    if (reload && lastBean != null) {
      final String lastProject=preferenceManipulator.getLastProject();
      if (lastProject != null) {
        projectName=lastProject;
      }
      final String lastSVNBranch=preferenceManipulator.getLastSVNBranch();
      if (lastSVNBranch != null) {
        branch=lastSVNBranch;
      }
      final String lastUser=lastBean.getUser();
      if (lastUser != null) {
        login=lastUser;
      }
      final String lastPass=lastBean.getPassword();
      if (lastPass != null) {
        password=lastPass;
      }
    }
    User userInfo=PropertiesFactoryImpl.eINSTANCE.createUser();
    userInfo.setLogin(login);
    try {
      userInfo.setPassword(PasswordHelper.encryptPasswd(password));
    }
 catch (    NoSuchAlgorithmException e) {
      ExceptionHandler.process(e);
    }
    try {
      ConnectionBean bean=ConnectionBean.getDefaultConnectionBean();
      if (reload && lastBean != null) {
        bean=lastBean;
      }
      Context ctx=CorePlugin.getContext();
      RepositoryContext repositoryContext=new RepositoryContext();
      repositoryContext.setUser(userInfo);
      repositoryContext.setClearPassword(password);
      repositoryContext.setFields(bean.getDynamicFields());
      String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + projectName;
      if (branch != null) {
        repositoryContext.getFields().put(branchKey,branch);
      }
 else {
        repositoryContext.getFields().put(branchKey,SVNConstant.EMPTY);
      }
      ctx.putProperty(Context.REPOSITORY_CONTEXT_KEY,repositoryContext);
      repositoryFactory.setRepositoryFactoryFromProvider(RepositoryFactoryProvider.getRepositoriyById(bean.getRepositoryId()));
      Project project=null;
      for (      Project p : repositoryFactory.readProject()) {
        if (p.getLabel().equals(projectName) || p.getTechnicalLabel().equals(projectName)) {
          project=p;
          break;
        }
      }
      if (!reload) {
        if (deleteProjectIfExist && project != null) {
          ResourceModelUtils.getProject(project).delete(true,new NullProgressMonitor());
        }
        if (project == null || deleteProjectIfExist) {
          Project projectInfor=ProjectHelper.createProject(projectName,""String_Node_Str"",language,userInfo);
          project=repositoryFactory.createProject(projectInfor);
        }
      }
      repositoryContext.setProject(project);
      repositoryFactory.logOnProject(project,new NullProgressMonitor());
    }
 catch (    PersistenceException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
catch (    LoginException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
catch (    BusinessException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
catch (    CoreException e) {
      MessageBoxExceptionHandler.process(e,new Shell());
      repositoryFactory.logOffProject();
      return false;
    }
    return true;
  }
  return false;
}",0.9849430774880646
124271,"private void addListeners(){
  if (connectionsViewer != null) {
    connectionsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        try {
          final ConnectionBean connection=getConnection();
          if (connection == null) {
            return;
          }
          if (beforeConnBean != null && connection.equals(beforeConnBean)) {
            return;
          }
          beforeConnBean=connection;
          user.setText(connection.getUser() == null ? ""String_Node_Str"" : connection.getUser());
          passwordText.setText(connection.getPassword() == null ? ""String_Node_Str"" : connection.getPassword());
          updateServerFields();
          updateVisible();
          if (validateFields()) {
            populateProjectList();
            validateProject();
          }
          setStatusArea();
          validateUpdate();
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
catch (        JSONException e) {
          ExceptionHandler.process(e);
        }
        displayPasswordComposite();
      }
    }
);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ModifyListener modifyListener=new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        unpopulateProjectList();
        dialog.updateButtons();
        setRepositoryContextInContext();
      }
    }
;
    passwordText.addModifyListener(modifyListener);
    fillProjectsBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (validateFields()) {
          populateProjectList();
          validateProject();
        }
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
        setRepositoryContextInContext();
      }
    }
);
    branchesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
        String branch=getBranch();
        if (branch == null) {
          branch=SVNConstant.EMPTY;
        }
        prefManipulator.setLastSVNBranch(branch);
      }
    }
);
  }
  if (projectViewer != null) {
    projectViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
        Project project=getProject();
        prefManipulator.setLastProject(project.getLabel());
        setBranchesSetting(project,false);
        dialog.updateButtons();
        setRepositoryContextInContext();
      }
    }
);
  }
  manageConnectionsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        ConnectionsDialog connectionsDialog=new ConnectionsDialog(getShell());
        int open=connectionsDialog.open();
        if (open == Window.OK) {
          PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
          prefManipulator.saveConnections(connectionsDialog.getConnections());
          LoginComposite.this.storedConnections=connectionsDialog.getConnections();
          perReader.saveConnections(LoginComposite.this.storedConnections);
          fillContents();
          final ConnectionBean connection=getConnection();
          if (connection == null) {
            return;
          }
          beforeConnBean=connection;
          user.setText(connection.getUser() == null ? ""String_Node_Str"" : connection.getUser());
          passwordText.setText(connection.getPassword() == null ? ""String_Node_Str"" : connection.getPassword());
          updateServerFields();
          updateVisible();
          if (validateFields()) {
            populateProjectList();
            validateProject();
          }
          setStatusArea();
          validateUpdate();
          displayPasswordComposite();
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
catch (      JSONException e2) {
        ExceptionHandler.process(e2);
      }
    }
  }
);
  manageProjectsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ManageItem item=null;
      if (!manageViewer.getSelection().isEmpty()) {
        IStructuredSelection sel=(IStructuredSelection)manageViewer.getSelection();
        item=(ManageItem)sel.getFirstElement();
      }
      item.run();
      try {
        setStatusArea();
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  openProjectBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setRepositoryContextInContext();
      dialog.okPressed();
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isRestart=true;
      perReader.saveLastConnectionBean(getConnection());
      dialog.okPressed();
    }
  }
);
  updateBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
        afterUpdate=false;
        if (tisService != null) {
          JSONObject archivaProperties=getArchivaServicesProperties(getAdminURL());
          String archivaServicesURL=archivaProperties.getString(ARCHIVA_SERVICES_URL_KEY) + ARCHIVA_SERVICES_SEGMENT;
          String repository=archivaProperties.getString(ARCHIVA_REPOSITORY_KEY);
          String username=archivaProperties.getString(ARCHIVA_USER);
          String password=archivaProperties.getString(ARCHIVA_USER_PWD);
          List<String> repositories=new ArrayList<String>();
          if (repository != null) {
            repositories.add(repository);
          }
          tisService.downLoadAndInstallUpdateSites(archivaServicesURL,username,password,updateSiteToInstall,repositories);
          afterUpdate=true;
          tisService.setNeedResartAfterUpdate(afterUpdate);
          updateSiteToInstall.clear();
        }
        setStatusArea();
        validateUpdate();
      }
 catch (      Exception e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
}","private void addListeners(){
  if (connectionsViewer != null) {
    connectionsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        try {
          final ConnectionBean connection=getConnection();
          if (connection == null) {
            return;
          }
          if (beforeConnBean != null && connection.equals(beforeConnBean)) {
            return;
          }
          beforeConnBean=connection;
          user.setText(connection.getUser() == null ? ""String_Node_Str"" : connection.getUser());
          passwordText.setText(connection.getPassword() == null ? ""String_Node_Str"" : connection.getPassword());
          updateServerFields();
          updateVisible();
          if (validateFields()) {
            populateProjectList();
            validateProject();
          }
          setStatusArea();
          validateUpdate();
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
catch (        JSONException e) {
          ExceptionHandler.process(e);
        }
        displayPasswordComposite();
      }
    }
);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ModifyListener modifyListener=new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        unpopulateProjectList();
        dialog.updateButtons();
        setRepositoryContextInContext();
      }
    }
;
    passwordText.addModifyListener(modifyListener);
    fillProjectsBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (validateFields()) {
          populateProjectList();
          validateProject();
        }
        try {
          setStatusArea();
        }
 catch (        PersistenceException e1) {
          ExceptionHandler.process(e1);
        }
        setRepositoryContextInContext();
      }
    }
);
    branchesViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
        String branch=getBranch();
        if (branch == null) {
          branch=SVNConstant.EMPTY;
        }
        prefManipulator.setLastSVNBranch(branch);
      }
    }
);
  }
  if (projectViewer != null) {
    projectViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      public void selectionChanged(      SelectionChangedEvent event){
        PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
        Project project=getProject();
        prefManipulator.setLastProject(project.getLabel());
        setBranchesSetting(project,false);
        dialog.updateButtons();
        setRepositoryContextInContext();
      }
    }
);
  }
  manageConnectionsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        ConnectionsDialog connectionsDialog=new ConnectionsDialog(getShell());
        int open=connectionsDialog.open();
        if (open == Window.OK) {
          PreferenceManipulator prefManipulator=new PreferenceManipulator(CorePlugin.getDefault().getPreferenceStore());
          prefManipulator.saveConnections(connectionsDialog.getConnections());
          LoginComposite.this.storedConnections=connectionsDialog.getConnections();
          perReader.saveConnections(LoginComposite.this.storedConnections);
          fillContents();
          final ConnectionBean connection=getConnection();
          if (connection == null) {
            return;
          }
          beforeConnBean=connection;
          user.setText(connection.getUser() == null ? ""String_Node_Str"" : connection.getUser());
          passwordText.setText(connection.getPassword() == null ? ""String_Node_Str"" : connection.getPassword());
          updateServerFields();
          updateVisible();
          if (validateFields()) {
            populateProjectList();
            validateProject();
          }
          setStatusArea();
          validateUpdate();
          displayPasswordComposite();
        }
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
catch (      JSONException e2) {
        ExceptionHandler.process(e2);
      }
    }
  }
);
  manageProjectsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ManageItem item=null;
      if (!manageViewer.getSelection().isEmpty()) {
        IStructuredSelection sel=(IStructuredSelection)manageViewer.getSelection();
        item=(ManageItem)sel.getFirstElement();
      }
      item.run();
      try {
        setStatusArea();
      }
 catch (      PersistenceException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  openProjectBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setRepositoryContextInContext();
      dialog.okPressed();
    }
  }
);
  restartBut.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isRestart=true;
      perReader.saveLastConnectionBean(getConnection());
      dialog.okPressed();
    }
  }
);
  updateBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      try {
        ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
        afterUpdate=false;
        if (tisService != null) {
          JSONObject archivaProperties=getArchivaServicesProperties(getAdminURL());
          String archivaServicesURL=archivaProperties.getString(ARCHIVA_SERVICES_URL_KEY) + ARCHIVA_SERVICES_SEGMENT;
          String repository=archivaProperties.getString(ARCHIVA_REPOSITORY_KEY);
          String username=archivaProperties.getString(ARCHIVA_USER);
          String password=archivaProperties.getString(ARCHIVA_USER_PWD);
          List<String> repositories=new ArrayList<String>();
          if (repository != null) {
            repositories.add(repository);
          }
          tisService.downLoadAndInstallUpdateSites(archivaServicesURL,username,password,updateSiteToInstall,repositories);
          afterUpdate=true;
          tisService.setNeedResartAfterUpdate(afterUpdate);
          updateSiteToInstall.clear();
        }
        isRestart=true;
        perReader.saveLastConnectionBean(getConnection());
        dialog.okPressed();
      }
 catch (      Exception e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
}",0.9899304013031244
124272,"@Override public void widgetSelected(SelectionEvent e){
  try {
    ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
    afterUpdate=false;
    if (tisService != null) {
      JSONObject archivaProperties=getArchivaServicesProperties(getAdminURL());
      String archivaServicesURL=archivaProperties.getString(ARCHIVA_SERVICES_URL_KEY) + ARCHIVA_SERVICES_SEGMENT;
      String repository=archivaProperties.getString(ARCHIVA_REPOSITORY_KEY);
      String username=archivaProperties.getString(ARCHIVA_USER);
      String password=archivaProperties.getString(ARCHIVA_USER_PWD);
      List<String> repositories=new ArrayList<String>();
      if (repository != null) {
        repositories.add(repository);
      }
      tisService.downLoadAndInstallUpdateSites(archivaServicesURL,username,password,updateSiteToInstall,repositories);
      afterUpdate=true;
      tisService.setNeedResartAfterUpdate(afterUpdate);
      updateSiteToInstall.clear();
    }
    setStatusArea();
    validateUpdate();
  }
 catch (  Exception e1) {
    ExceptionHandler.process(e1);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  try {
    ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
    afterUpdate=false;
    if (tisService != null) {
      JSONObject archivaProperties=getArchivaServicesProperties(getAdminURL());
      String archivaServicesURL=archivaProperties.getString(ARCHIVA_SERVICES_URL_KEY) + ARCHIVA_SERVICES_SEGMENT;
      String repository=archivaProperties.getString(ARCHIVA_REPOSITORY_KEY);
      String username=archivaProperties.getString(ARCHIVA_USER);
      String password=archivaProperties.getString(ARCHIVA_USER_PWD);
      List<String> repositories=new ArrayList<String>();
      if (repository != null) {
        repositories.add(repository);
      }
      tisService.downLoadAndInstallUpdateSites(archivaServicesURL,username,password,updateSiteToInstall,repositories);
      afterUpdate=true;
      tisService.setNeedResartAfterUpdate(afterUpdate);
      updateSiteToInstall.clear();
    }
    isRestart=true;
    perReader.saveLastConnectionBean(getConnection());
    dialog.okPressed();
  }
 catch (  Exception e1) {
    ExceptionHandler.process(e1);
  }
}",0.9463203463203465
124273,"@Override public void run(){
  try {
    TreeNode docRoot=null;
    for (    Object obj : getSelectedObjects()) {
      TreeNodeEditPart nodePart=(TreeNodeEditPart)obj;
      TreeNode treeNode=(TreeNode)nodePart.getModel();
      if (treeNode.eContainer() instanceof TreeNode) {
        TreeNode parent=(TreeNode)treeNode.eContainer();
        if (docRoot == null) {
          docRoot=XmlMapUtil.getTreeNodeRoot(parent);
        }
        XmlMapUtil.detachNodeConnections(treeNode,mapperManager.getCopyOfMapData(),true);
        parent.getChildren().remove(treeNode);
      }
    }
    if (mapperManager != null) {
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
      if (docRoot != null && docRoot.eContainer() instanceof AbstractInOutTree) {
        mapperManager.getProblemsAnalyser().checkLoopProblems((AbstractInOutTree)docRoot.eContainer());
        mapperManager.getMapperUI().updateStatusBar();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  try {
    TreeNode docRoot=null;
    for (    Object obj : getSelectedObjects()) {
      TreeNodeEditPart nodePart=(TreeNodeEditPart)obj;
      TreeNode treeNode=(TreeNode)nodePart.getModel();
      if (treeNode.eContainer() instanceof TreeNode) {
        TreeNode parent=(TreeNode)treeNode.eContainer();
        if (docRoot == null) {
          docRoot=XmlMapUtil.getTreeNodeRoot(parent);
        }
        XmlMapUtil.detachNodeConnections(treeNode,mapperManager.getCopyOfMapData(),true);
        if (treeNode.isLoop()) {
          if (treeNode instanceof OutputTreeNode && XmlMapUtil.findUpGroupNode((OutputTreeNode)treeNode) != null) {
            XmlMapUtil.cleanSubGroup(docRoot);
          }
          XmlMapUtil.clearMainNode(docRoot);
        }
        parent.getChildren().remove(treeNode);
      }
    }
    if (mapperManager != null) {
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
      if (docRoot != null && docRoot.eContainer() instanceof AbstractInOutTree) {
        mapperManager.getProblemsAnalyser().checkLoopProblems((AbstractInOutTree)docRoot.eContainer());
        mapperManager.getMapperUI().updateStatusBar();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9102082622055307
124274,"@Override public void run(){
  TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
  TreeNode model=(TreeNode)nodePart.getModel();
  AbstractInOutTree abstractTree=null;
  TreeNode docRoot=null;
  if (model instanceof OutputTreeNode) {
    OutputTreeNode outputNode=(OutputTreeNode)model;
    docRoot=(OutputTreeNode)XmlMapUtil.getTreeNodeRoot(outputNode);
    if (docRoot != null) {
      cleanSubLoop(docRoot);
      XmlMapUtil.cleanSubGroup(outputNode);
      if (findUpGroupNode(outputNode) == null) {
        XmlMapUtil.cleanSubGroup(docRoot);
      }
      if (docRoot.eContainer() instanceof AbstractInOutTree) {
        abstractTree=(AbstractInOutTree)docRoot.eContainer();
      }
    }
  }
 else   if (model instanceof TreeNode) {
    docRoot=XmlMapUtil.getTreeNodeRoot(model);
    if (docRoot != null) {
      cleanSubLoop(docRoot);
    }
    if (docRoot.eContainer() instanceof AbstractInOutTree) {
      abstractTree=(AbstractInOutTree)docRoot.eContainer();
    }
  }
  model.setLoop(true);
  XmlMapUtil.clearMainNode(docRoot);
  XmlMapUtil.upsetMainNode(model);
  if (abstractTree != null) {
    mapperManager.getProblemsAnalyser().checkLoopProblems(abstractTree);
    mapperManager.getMapperUI().updateStatusBar();
  }
}","@Override public void run(){
  TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
  TreeNode model=(TreeNode)nodePart.getModel();
  AbstractInOutTree abstractTree=null;
  TreeNode docRoot=null;
  if (model instanceof OutputTreeNode) {
    OutputTreeNode outputNode=(OutputTreeNode)model;
    docRoot=(OutputTreeNode)XmlMapUtil.getTreeNodeRoot(outputNode);
    if (docRoot != null) {
      cleanSubLoop(docRoot);
      XmlMapUtil.cleanSubGroup(outputNode);
      List<TreeNode> newLoopUpGroups=new ArrayList<TreeNode>();
      findUpGroupNode(newLoopUpGroups,outputNode);
      XmlMapUtil.cleanSubGroup(docRoot,newLoopUpGroups);
      if (!newLoopUpGroups.isEmpty()) {
        TreeNode rootGroup=newLoopUpGroups.get(newLoopUpGroups.size() - 1);
        upsetGroup(outputNode,rootGroup);
      }
      if (docRoot.eContainer() instanceof AbstractInOutTree) {
        abstractTree=(AbstractInOutTree)docRoot.eContainer();
      }
    }
  }
 else   if (model instanceof TreeNode) {
    docRoot=XmlMapUtil.getTreeNodeRoot(model);
    if (docRoot != null) {
      cleanSubLoop(docRoot);
    }
    if (docRoot.eContainer() instanceof AbstractInOutTree) {
      abstractTree=(AbstractInOutTree)docRoot.eContainer();
    }
  }
  model.setLoop(true);
  XmlMapUtil.clearMainNode(docRoot);
  XmlMapUtil.upsetMainNode(model);
  if (abstractTree != null) {
    mapperManager.getProblemsAnalyser().checkLoopProblems(abstractTree);
    mapperManager.getMapperUI().updateStatusBar();
  }
}",0.8654545454545455
124275,"private TreeNode findUpGroupNode(OutputTreeNode node){
  if (node.eContainer() instanceof OutputTreeNode) {
    OutputTreeNode parent=(OutputTreeNode)node.eContainer();
    if (parent.isGroup()) {
      return parent;
    }
 else {
      return findUpGroupNode(parent);
    }
  }
  return null;
}","private void findUpGroupNode(List<TreeNode> newLoopUpGroups,OutputTreeNode node){
  if (node.eContainer() instanceof OutputTreeNode) {
    OutputTreeNode parent=(OutputTreeNode)node.eContainer();
    if (parent.isGroup()) {
      newLoopUpGroups.add(parent);
    }
    findUpGroupNode(newLoopUpGroups,parent);
  }
}",0.6579378068739771
124276,"public static void cleanSubGroup(TreeNode node){
  for (  TreeNode treeNode : node.getChildren()) {
    TreeNode child=treeNode;
    if (child.isGroup()) {
      child.setGroup(false);
    }
    cleanSubGroup(child);
  }
}","public static void cleanSubGroup(TreeNode node){
  cleanSubGroup(node,null);
}",0.4666666666666667
124277,"private void prepareEmfTree(List<FOXTreeNode> list,TreeNode parent,String xmlPath,String absoluteXPathQuery){
  if (list == null || list.isEmpty()) {
    return;
  }
  String xPath=parent.getXpath();
  for (  FOXTreeNode foxNode : list) {
    TreeNode createTreeNode=createModel();
    createTreeNode.setName(foxNode.getLabel());
    if (foxNode instanceof Element) {
      createTreeNode.setNodeType(NodeType.ELEMENT);
    }
 else     if (foxNode instanceof Attribute) {
      createTreeNode.setNodeType(NodeType.ATTRIBUT);
    }
 else     if (foxNode instanceof NameSpaceNode) {
      createTreeNode.setNodeType(NodeType.NAME_SPACE);
      createTreeNode.setDefaultValue(foxNode.getDefaultValue());
      if (createTreeNode.getName() == null || createTreeNode.getName().equals(""String_Node_Str"")) {
        createTreeNode.setName(XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX);
      }
    }
    createTreeNode.setXpath(XmlMapUtil.getXPath(xPath,createTreeNode.getName(),createTreeNode.getNodeType()));
    if (foxNode.getDataType() != null && ""String_Node_Str"".equals(foxNode.getDataType())) {
      createTreeNode.setType(foxNode.getDataType());
    }
 else {
      createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
    }
    String tempXpath=null;
    if (xmlPath == null) {
      if (foxNode instanceof Attribute) {
        tempXpath=XmlMapUtil.XPATH_SEPARATOR + XmlMapUtil.XPATH_ATTRIBUTE + foxNode.getLabel();
      }
 else {
        tempXpath=XmlMapUtil.XPATH_SEPARATOR + foxNode.getLabel();
      }
    }
 else {
      if (foxNode instanceof Attribute) {
        tempXpath=xmlPath + XmlMapUtil.XPATH_SEPARATOR + XmlMapUtil.XPATH_ATTRIBUTE+ foxNode.getLabel();
      }
 else {
        tempXpath=xmlPath + XmlMapUtil.XPATH_SEPARATOR + foxNode.getLabel();
      }
    }
    if (tempXpath.equals(absoluteXPathQuery)) {
      if (!(parent.eContainer() instanceof AbstractInOutTree)) {
        createTreeNode.setLoop(true);
      }
    }
 else     if (!isMappedChild(tempXpath,absoluteXPathQuery)) {
      continue;
    }
    parent.getChildren().add(createTreeNode);
    if (foxNode.getChildren() != null && !foxNode.getChildren().isEmpty()) {
      prepareEmfTree(foxNode.getChildren(),createTreeNode,tempXpath,absoluteXPathQuery);
    }
  }
}","private void prepareEmfTree(List<FOXTreeNode> list,TreeNode parent,String xmlPath,String absoluteXPathQuery){
  if (list == null || list.isEmpty()) {
    return;
  }
  String xPath=parent.getXpath();
  for (  FOXTreeNode foxNode : list) {
    TreeNode createTreeNode=createModel();
    createTreeNode.setName(foxNode.getLabel());
    if (foxNode instanceof Element) {
      createTreeNode.setNodeType(NodeType.ELEMENT);
    }
 else     if (foxNode instanceof Attribute) {
      createTreeNode.setNodeType(NodeType.ATTRIBUT);
    }
 else     if (foxNode instanceof NameSpaceNode) {
      createTreeNode.setNodeType(NodeType.NAME_SPACE);
      createTreeNode.setDefaultValue(foxNode.getDefaultValue());
      if (createTreeNode.getName() == null || createTreeNode.getName().equals(""String_Node_Str"")) {
        createTreeNode.setName(XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX);
      }
    }
    createTreeNode.setXpath(XmlMapUtil.getXPath(xPath,createTreeNode.getName(),createTreeNode.getNodeType()));
    if (foxNode.getDataType() != null && ""String_Node_Str"".equals(foxNode.getDataType())) {
      createTreeNode.setType(foxNode.getDataType());
    }
 else {
      createTreeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
    }
    String tempXpath=null;
    if (xmlPath == null) {
      if (foxNode instanceof Attribute) {
        tempXpath=XmlMapUtil.XPATH_SEPARATOR + XmlMapUtil.XPATH_ATTRIBUTE + foxNode.getLabel();
      }
 else {
        tempXpath=XmlMapUtil.XPATH_SEPARATOR + foxNode.getLabel();
      }
    }
 else {
      if (foxNode instanceof Attribute) {
        tempXpath=xmlPath + XmlMapUtil.XPATH_SEPARATOR + XmlMapUtil.XPATH_ATTRIBUTE+ foxNode.getLabel();
      }
 else {
        tempXpath=xmlPath + XmlMapUtil.XPATH_SEPARATOR + foxNode.getLabel();
      }
    }
    if (tempXpath.equals(absoluteXPathQuery)) {
      if (!(parent.eContainer() instanceof AbstractInOutTree)) {
        createTreeNode.setLoop(true);
      }
    }
 else     if (!isMappedChild(tempXpath,absoluteXPathQuery)) {
      continue;
    }
    parent.getChildren().add(createTreeNode);
    if (createTreeNode.isLoop()) {
      XmlMapUtil.upsetMainNode(createTreeNode);
    }
    if (foxNode.getChildren() != null && !foxNode.getChildren().isEmpty()) {
      prepareEmfTree(foxNode.getChildren(),createTreeNode,tempXpath,absoluteXPathQuery);
    }
  }
}",0.9805549486563252
124278,"@Override public void run(){
  OutputTreeNodeEditPart nodePart=(OutputTreeNodeEditPart)getSelectedObjects().get(0);
  OutputTreeNode model=(OutputTreeNode)nodePart.getModel();
  OutputTreeNode outputDocumentRoot=(OutputTreeNode)XmlMapUtil.getTreeNodeRoot(model);
  if (outputDocumentRoot != null) {
    XmlMapUtil.cleanSubGroup(outputDocumentRoot);
  }
  if (!isRemove) {
    model.setGroup(true);
    if (!subGroupTraceNames.isEmpty()) {
      for (      TreeNode groupNode : subGroupTraceNames) {
        groupNode.setGroup(true);
      }
    }
  }
 else {
    model.setMain(false);
    model.setGroup(false);
    if (!subGroupTraceNames.isEmpty()) {
      for (      TreeNode groupNode : subGroupTraceNames) {
        groupNode.setGroup(false);
      }
    }
  }
}","@Override public void run(){
  OutputTreeNodeEditPart nodePart=(OutputTreeNodeEditPart)getSelectedObjects().get(0);
  OutputTreeNode model=(OutputTreeNode)nodePart.getModel();
  OutputTreeNode outputDocumentRoot=(OutputTreeNode)XmlMapUtil.getTreeNodeRoot(model);
  if (outputDocumentRoot != null) {
    XmlMapUtil.cleanSubGroup(outputDocumentRoot);
  }
  if (!isRemove) {
    model.setGroup(true);
    if (!subGroupTraceNames.isEmpty()) {
      for (      TreeNode groupNode : subGroupTraceNames) {
        groupNode.setGroup(true);
      }
    }
  }
 else {
    model.setGroup(false);
    if (!subGroupTraceNames.isEmpty()) {
      for (      TreeNode groupNode : subGroupTraceNames) {
        groupNode.setGroup(false);
      }
    }
  }
}",0.8116710875331565
124279,"@Override public void run(){
  TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
  TreeNode model=(TreeNode)nodePart.getModel();
  AbstractInOutTree abstractTree=null;
  if (model instanceof OutputTreeNode) {
    OutputTreeNode outputNode=(OutputTreeNode)model;
    OutputTreeNode outputDocumentRoot=(OutputTreeNode)XmlMapUtil.getTreeNodeRoot(outputNode);
    if (outputDocumentRoot != null) {
      cleanSubLoop(outputDocumentRoot);
      XmlMapUtil.cleanSubGroup(outputNode);
      if (findUpGroupNode(outputNode) == null) {
        XmlMapUtil.cleanSubGroup(outputDocumentRoot);
      }
      if (outputDocumentRoot.eContainer() instanceof AbstractInOutTree) {
        abstractTree=(AbstractInOutTree)outputDocumentRoot.eContainer();
      }
    }
  }
 else   if (model instanceof TreeNode) {
    TreeNode inputDocumentRoot=XmlMapUtil.getTreeNodeRoot(model);
    if (inputDocumentRoot != null) {
      cleanSubLoop(inputDocumentRoot);
    }
    if (inputDocumentRoot.eContainer() instanceof AbstractInOutTree) {
      abstractTree=(AbstractInOutTree)inputDocumentRoot.eContainer();
    }
  }
  model.setLoop(true);
  if (abstractTree != null) {
    mapperManager.getProblemsAnalyser().checkLoopProblems(abstractTree);
    mapperManager.getMapperUI().updateStatusBar();
  }
}","@Override public void run(){
  TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
  TreeNode model=(TreeNode)nodePart.getModel();
  AbstractInOutTree abstractTree=null;
  TreeNode docRoot=null;
  if (model instanceof OutputTreeNode) {
    OutputTreeNode outputNode=(OutputTreeNode)model;
    docRoot=(OutputTreeNode)XmlMapUtil.getTreeNodeRoot(outputNode);
    if (docRoot != null) {
      cleanSubLoop(docRoot);
      XmlMapUtil.cleanSubGroup(outputNode);
      if (findUpGroupNode(outputNode) == null) {
        XmlMapUtil.cleanSubGroup(docRoot);
      }
      if (docRoot.eContainer() instanceof AbstractInOutTree) {
        abstractTree=(AbstractInOutTree)docRoot.eContainer();
      }
    }
  }
 else   if (model instanceof TreeNode) {
    docRoot=XmlMapUtil.getTreeNodeRoot(model);
    if (docRoot != null) {
      cleanSubLoop(docRoot);
    }
    if (docRoot.eContainer() instanceof AbstractInOutTree) {
      abstractTree=(AbstractInOutTree)docRoot.eContainer();
    }
  }
  model.setLoop(true);
  XmlMapUtil.clearMainNode(docRoot);
  XmlMapUtil.upsetMainNode(model);
  if (abstractTree != null) {
    mapperManager.getProblemsAnalyser().checkLoopProblems(abstractTree);
    mapperManager.getMapperUI().updateStatusBar();
  }
}",0.4391389432485323
124280,"public static void cleanSubGroup(OutputTreeNode node){
  for (  TreeNode treeNode : node.getChildren()) {
    OutputTreeNode outputNode=(OutputTreeNode)treeNode;
    if (outputNode.isGroup()) {
      outputNode.setGroup(false);
    }
    cleanSubGroup(outputNode);
  }
}","public static void cleanSubGroup(TreeNode node){
  for (  TreeNode treeNode : node.getChildren()) {
    TreeNode child=treeNode;
    if (child.isGroup()) {
      child.setGroup(false);
    }
    cleanSubGroup(child);
  }
}",0.8211382113821138
124281,"@Override public String[] getCommandLine() throws ProcessorException {
  String command;
  try {
    command=getInterpreter();
  }
 catch (  ProcessorException e1) {
    command=""String_Node_Str"";
  }
  boolean win32=false;
  String classPathSeparator;
  if (targetPlatform == null) {
    targetPlatform=Platform.getOS();
    win32=Platform.OS_WIN32.equals(targetPlatform);
    classPathSeparator=JavaUtils.JAVA_CLASSPATH_SEPARATOR;
  }
 else {
    win32=targetPlatform.equals(Platform.OS_WIN32);
    if (win32) {
      classPathSeparator=""String_Node_Str"";
    }
 else {
      classPathSeparator=""String_Node_Str"";
    }
  }
  Set<String> neededLibraries=JavaProcessorUtilities.getNeededLibrariesForProcess(process);
  boolean exportingJob=ProcessorUtilities.isExportConfig();
  String unixRootPathVar=""String_Node_Str"";
  String unixRootPath=unixRootPathVar + ""String_Node_Str"";
  StringBuffer libPath=new StringBuffer();
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  File[] jarFiles=libDir.listFiles(FilesUtils.getAcceptJARFilesFilter());
  if (jarFiles != null && jarFiles.length > 0) {
    for (    File jarFile : jarFiles) {
      if (jarFile.isFile() && neededLibraries.contains(jarFile.getName())) {
        if (!win32 && exportingJob) {
          libPath.append(unixRootPath);
        }
        String singleLibPath=new Path(jarFile.getAbsolutePath()).toPortableString();
        if (exportingJob) {
          singleLibPath=singleLibPath.replace(new Path(libDir.getAbsolutePath()).toPortableString(),""String_Node_Str"");
        }
        libPath.append(singleLibPath).append(classPathSeparator);
      }
    }
  }
  String projectPath;
  if (exportingJob) {
    projectPath=getCodeLocation();
    if (projectPath != null) {
      projectPath=projectPath.replace(ProcessorUtilities.TEMP_JAVA_CLASSPATH_SEPARATOR,classPathSeparator);
    }
  }
 else {
    IFolder classesFolder=JavaProcessorUtilities.getJavaProject().getProject().getFolder(JavaUtils.JAVA_CLASSES_DIRECTORY);
    IPath projectFolderPath=classesFolder.getFullPath().removeFirstSegments(1);
    projectPath=Path.fromOSString(getCodeProject().getLocation().toOSString()).append(projectFolderPath).toOSString() + classPathSeparator;
  }
  IPath classPath=getCodePath().removeFirstSegments(1);
  String className=classPath.toString().replace('/','.');
  String exportJar=""String_Node_Str"";
  if (exportingJob) {
    String version=""String_Node_Str"";
    if (process.getVersion() != null) {
      version=""String_Node_Str"" + process.getVersion();
      version=version.replace(""String_Node_Str"",""String_Node_Str"");
    }
    exportJar=classPathSeparator + (!win32 && exportingJob ? unixRootPath : ""String_Node_Str"") + process.getName().toLowerCase()+ version+ ""String_Node_Str""+ classPathSeparator;
    JobInfo lastMainJob=LastGenerationInfo.getInstance().getLastMainJob();
    Set<JobInfo> infos=null;
    if (lastMainJob == null && property != null) {
      infos=ProcessorUtilities.getChildrenJobInfo((ProcessItem)property.getItem());
    }
 else {
      infos=LastGenerationInfo.getInstance().getLastGeneratedjobs();
    }
    for (    JobInfo jobInfo : infos) {
      if (lastMainJob != null && lastMainJob.equals(jobInfo)) {
        continue;
      }
      if (jobInfo.getJobVersion() != null) {
        version=""String_Node_Str"" + jobInfo.getJobVersion();
        version=version.replace(""String_Node_Str"",""String_Node_Str"");
      }
      exportJar+=(!win32 && exportingJob ? unixRootPath : ""String_Node_Str"") + jobInfo.getJobName().toLowerCase() + version+ ""String_Node_Str""+ classPathSeparator;
    }
  }
  String libFolder=""String_Node_Str"";
  if (exportingJob) {
    libFolder=new Path(this.getCodeLocation()) + classPathSeparator;
  }
 else {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString() + classPathSeparator;
  }
  String portableCommand=new Path(command).toPortableString();
  String portableProjectPath=new Path(projectPath).toPortableString();
  if (!win32 && exportingJob) {
    portableProjectPath=unixRootPathVar + classPathSeparator + portableProjectPath;
    String libraryPath=ProcessorUtilities.getLibraryPath();
    if (libraryPath != null) {
      portableProjectPath=portableProjectPath.replace(libraryPath,unixRootPath + libraryPath);
      libFolder=libFolder.replace(libraryPath,unixRootPath + libraryPath);
    }
  }
  String[] strings;
  List<String> tmpParams=new ArrayList<String>();
  tmpParams.add(portableCommand);
  String[] proxyParameters=getProxyParameters();
  if (proxyParameters != null && proxyParameters.length > 0) {
    for (    String str : proxyParameters) {
      tmpParams.add(str);
    }
  }
  tmpParams.add(""String_Node_Str"");
  tmpParams.add(libPath.toString() + portableProjectPath + exportJar+ libFolder);
  tmpParams.add(className);
  strings=tmpParams.toArray(new String[0]);
  String[] cmd2=addVMArguments(strings,exportingJob);
  if (!exportingJob) {
    return cmd2;
  }
 else {
    List<String> list=new ArrayList<String>();
    if (""String_Node_Str"".equals(classPathSeparator)) {
      list.add(""String_Node_Str"");
      list.add(""String_Node_Str"");
    }
 else {
      list.add(""String_Node_Str"");
      list.add(""String_Node_Str"");
    }
    list.addAll(Arrays.asList(cmd2));
    return list.toArray(new String[0]);
  }
}","@Override public String[] getCommandLine() throws ProcessorException {
  String command;
  try {
    command=getInterpreter();
  }
 catch (  ProcessorException e1) {
    command=""String_Node_Str"";
  }
  boolean win32=false;
  String classPathSeparator;
  if (targetPlatform == null) {
    targetPlatform=Platform.getOS();
    win32=Platform.OS_WIN32.equals(targetPlatform);
    classPathSeparator=JavaUtils.JAVA_CLASSPATH_SEPARATOR;
  }
 else {
    win32=targetPlatform.equals(Platform.OS_WIN32);
    if (win32) {
      classPathSeparator=""String_Node_Str"";
    }
 else {
      classPathSeparator=""String_Node_Str"";
    }
  }
  Set<String> neededLibraries=JavaProcessorUtilities.getNeededLibrariesForProcess(process);
  boolean exportingJob=ProcessorUtilities.isExportConfig();
  String unixRootPathVar=""String_Node_Str"";
  String unixRootPath=unixRootPathVar + ""String_Node_Str"";
  StringBuffer libPath=new StringBuffer();
  File libDir=JavaProcessorUtilities.getJavaProjectLibFolder();
  File[] jarFiles=libDir.listFiles(FilesUtils.getAcceptJARFilesFilter());
  if (jarFiles != null && jarFiles.length > 0) {
    for (    File jarFile : jarFiles) {
      if (jarFile.isFile() && neededLibraries.contains(jarFile.getName())) {
        if (!win32 && exportingJob) {
          libPath.append(unixRootPath);
        }
        String singleLibPath=new Path(jarFile.getAbsolutePath()).toPortableString();
        if (exportingJob) {
          singleLibPath=singleLibPath.replace(new Path(libDir.getAbsolutePath()).toPortableString(),""String_Node_Str"");
        }
        libPath.append(singleLibPath).append(classPathSeparator);
      }
    }
  }
  String projectPath;
  if (exportingJob) {
    projectPath=getCodeLocation();
    if (projectPath != null) {
      projectPath=projectPath.replace(ProcessorUtilities.TEMP_JAVA_CLASSPATH_SEPARATOR,classPathSeparator);
    }
  }
 else {
    IFolder classesFolder=JavaProcessorUtilities.getJavaProject().getProject().getFolder(JavaUtils.JAVA_CLASSES_DIRECTORY);
    IPath projectFolderPath=classesFolder.getFullPath().removeFirstSegments(1);
    projectPath=Path.fromOSString(getCodeProject().getLocation().toOSString()).append(projectFolderPath).toOSString() + classPathSeparator;
  }
  IPath classPath=getCodePath().removeFirstSegments(1);
  String className=classPath.toString().replace('/','.');
  String exportJar=""String_Node_Str"";
  if (exportingJob) {
    String version=""String_Node_Str"";
    if (process.getVersion() != null) {
      version=""String_Node_Str"" + process.getVersion();
      version=version.replace(""String_Node_Str"",""String_Node_Str"");
    }
    exportJar=classPathSeparator + (!win32 && exportingJob ? unixRootPath : ""String_Node_Str"") + process.getName().toLowerCase()+ version+ ""String_Node_Str""+ classPathSeparator;
    JobInfo lastMainJob=LastGenerationInfo.getInstance().getLastMainJob();
    Set<JobInfo> infos=null;
    if (lastMainJob == null && property != null) {
      infos=ProcessorUtilities.getChildrenJobInfo((ProcessItem)property.getItem());
    }
 else {
      infos=LastGenerationInfo.getInstance().getLastGeneratedjobs();
    }
    for (    JobInfo jobInfo : infos) {
      if (lastMainJob != null && lastMainJob.equals(jobInfo)) {
        continue;
      }
      if (jobInfo.getJobVersion() != null) {
        version=""String_Node_Str"" + jobInfo.getJobVersion();
        version=version.replace(""String_Node_Str"",""String_Node_Str"");
      }
      exportJar+=(!win32 && exportingJob ? unixRootPath : ""String_Node_Str"") + jobInfo.getJobName().toLowerCase() + version+ ""String_Node_Str""+ classPathSeparator;
    }
  }
  String libFolder=""String_Node_Str"";
  if (exportingJob) {
    String tmp=this.getCodeLocation();
    tmp=tmp.replace(ProcessorUtilities.TEMP_JAVA_CLASSPATH_SEPARATOR,classPathSeparator);
    libFolder=new Path(tmp) + classPathSeparator;
  }
 else {
    libFolder=new Path(libDir.getAbsolutePath()).toPortableString() + classPathSeparator;
  }
  String portableCommand=new Path(command).toPortableString();
  String portableProjectPath=new Path(projectPath).toPortableString();
  if (!win32 && exportingJob) {
    portableProjectPath=unixRootPathVar + classPathSeparator + portableProjectPath;
    String libraryPath=ProcessorUtilities.getLibraryPath();
    if (libraryPath != null) {
      portableProjectPath=portableProjectPath.replace(libraryPath,unixRootPath + libraryPath);
      libFolder=libFolder.replace(libraryPath,unixRootPath + libraryPath);
    }
  }
  String[] strings;
  List<String> tmpParams=new ArrayList<String>();
  tmpParams.add(portableCommand);
  String[] proxyParameters=getProxyParameters();
  if (proxyParameters != null && proxyParameters.length > 0) {
    for (    String str : proxyParameters) {
      tmpParams.add(str);
    }
  }
  tmpParams.add(""String_Node_Str"");
  if (exportingJob) {
    tmpParams.add(libPath.toString() + portableProjectPath + exportJar);
  }
 else {
    tmpParams.add(libPath.toString() + portableProjectPath + exportJar+ libFolder);
  }
  tmpParams.add(className);
  strings=tmpParams.toArray(new String[0]);
  String[] cmd2=addVMArguments(strings,exportingJob);
  if (!exportingJob) {
    return cmd2;
  }
 else {
    List<String> list=new ArrayList<String>();
    if (""String_Node_Str"".equals(classPathSeparator)) {
      list.add(""String_Node_Str"");
      list.add(""String_Node_Str"");
    }
 else {
      list.add(""String_Node_Str"");
      list.add(""String_Node_Str"");
    }
    list.addAll(Arrays.asList(cmd2));
    return list.toArray(new String[0]);
  }
}",0.9755060541639708
124282,"private static void sortClasspath(Set<String> jobModuleList,IProcess process) throws CoreException, BusinessException {
  IClasspathEntry[] entries=javaProject.getRawClasspath();
  IClasspathEntry jreClasspathEntry=JavaCore.newContainerEntry(new Path(""String_Node_Str""));
  IClasspathEntry classpathEntry=JavaCore.newSourceEntry(javaProject.getPath().append(JavaUtils.JAVA_SRC_DIRECTORY));
  boolean changesDone=false;
  if (!ArrayUtils.contains(entries,jreClasspathEntry)) {
    entries=(IClasspathEntry[])ArrayUtils.add(entries,jreClasspathEntry);
    changesDone=true;
  }
  if (!ArrayUtils.contains(entries,classpathEntry)) {
    IClasspathEntry source=null;
    for (    IClasspathEntry entry : entries) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
        source=entry;
        break;
      }
    }
    if (source != null) {
      entries=(IClasspathEntry[])ArrayUtils.remove(entries,ArrayUtils.indexOf(entries,source));
    }
    entries=(IClasspathEntry[])ArrayUtils.add(entries,classpathEntry);
    changesDone=true;
  }
  Set<String> listModulesReallyNeeded=jobModuleList;
  if (listModulesReallyNeeded == null) {
    listModulesReallyNeeded=new HashSet<String>();
  }
 else {
    if (process != null && process instanceof IProcess2 && ((IProcess2)process).getProperty() != null && ((IProcess2)process).getProperty().getItem() instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededs=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)((IProcess2)process).getProperty().getItem());
      for (      ModuleNeeded moduleNeeded : modulesNeededs) {
        listModulesReallyNeeded.add(moduleNeeded.getModuleName());
      }
    }
 else {
      for (      ModuleNeeded moduleNeeded : ModulesNeededProvider.getModulesNeededForRoutines()) {
        listModulesReallyNeeded.add(moduleNeeded.getModuleName());
      }
    }
  }
  File libDir=getJavaProjectLibFolder();
  if ((libDir != null) && (libDir.isDirectory())) {
    Set<String> jarsNeedRetrieve=new HashSet<String>(listModulesReallyNeeded);
    for (    File externalLib : libDir.listFiles(FilesUtils.getAcceptJARFilesFilter())) {
      jarsNeedRetrieve.remove(externalLib.getName());
    }
    if (!jarsNeedRetrieve.isEmpty()) {
      ILibraryManagerService repositoryBundleService=CorePlugin.getDefault().getRepositoryBundleService();
      repositoryBundleService.retrieve(jarsNeedRetrieve,libDir.getAbsolutePath());
    }
    for (    File externalLib : libDir.listFiles(FilesUtils.getAcceptJARFilesFilter())) {
      if (externalLib.isFile() && listModulesReallyNeeded.contains(externalLib.getName())) {
        IClasspathEntry newEntry=JavaCore.newLibraryEntry(new Path(externalLib.getAbsolutePath()),null,null);
        if (!ArrayUtils.contains(entries,newEntry)) {
          entries=(IClasspathEntry[])ArrayUtils.add(entries,newEntry);
          changesDone=true;
        }
      }
    }
  }
  String missingJars=null;
  int exchange=2;
  for (  String jar : listModulesReallyNeeded) {
    int index=indexOfEntry(entries,jar);
    if (index < 0) {
      if (missingJars == null) {
        missingJars=""String_Node_Str"" + jar;
      }
 else {
        missingJars=missingJars + ""String_Node_Str"" + jar;
      }
    }
    if (index >= 0 && index != exchange) {
      IClasspathEntry entry=entries[index];
      IClasspathEntry first=entries[exchange];
      entries[index]=first;
      entries[exchange]=entry;
      changesDone=true;
      exchange++;
    }
  }
  if (changesDone) {
    javaProject.setRawClasspath(entries,null);
    javaProject.setOutputLocation(javaProject.getPath().append(JavaUtils.JAVA_CLASSES_DIRECTORY),null);
  }
  if (missingJars != null) {
    throw new BusinessException(missingJars);
  }
}","private static void sortClasspath(Set<String> jobModuleList,IProcess process) throws CoreException, BusinessException {
  IClasspathEntry[] entries=javaProject.getRawClasspath();
  IClasspathEntry jreClasspathEntry=JavaCore.newContainerEntry(new Path(""String_Node_Str""));
  IClasspathEntry classpathEntry=JavaCore.newSourceEntry(javaProject.getPath().append(JavaUtils.JAVA_SRC_DIRECTORY));
  boolean changesDone=false;
  if (!ArrayUtils.contains(entries,jreClasspathEntry)) {
    entries=(IClasspathEntry[])ArrayUtils.add(entries,jreClasspathEntry);
    changesDone=true;
  }
  if (!ArrayUtils.contains(entries,classpathEntry)) {
    IClasspathEntry source=null;
    for (    IClasspathEntry entry : entries) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
        source=entry;
        break;
      }
    }
    if (source != null) {
      entries=(IClasspathEntry[])ArrayUtils.remove(entries,ArrayUtils.indexOf(entries,source));
    }
    entries=(IClasspathEntry[])ArrayUtils.add(entries,classpathEntry);
    changesDone=true;
  }
  Set<String> listModulesReallyNeeded=jobModuleList;
  if (listModulesReallyNeeded == null) {
    listModulesReallyNeeded=new HashSet<String>();
  }
 else {
    if (process != null && process instanceof IProcess2 && ((IProcess2)process).getProperty() != null && ((IProcess2)process).getProperty().getItem() instanceof ProcessItem) {
      List<ModuleNeeded> modulesNeededs=ModulesNeededProvider.getModulesNeededForRoutines((ProcessItem)((IProcess2)process).getProperty().getItem());
      for (      ModuleNeeded moduleNeeded : modulesNeededs) {
        listModulesReallyNeeded.add(moduleNeeded.getModuleName());
      }
    }
 else {
      for (      ModuleNeeded moduleNeeded : ModulesNeededProvider.getModulesNeededForRoutines()) {
        listModulesReallyNeeded.add(moduleNeeded.getModuleName());
      }
    }
  }
  File libDir=getJavaProjectLibFolder();
  if ((libDir != null) && (libDir.isDirectory())) {
    Set<String> jarsNeedRetrieve=new HashSet<String>(listModulesReallyNeeded);
    for (    File externalLib : libDir.listFiles(FilesUtils.getAcceptJARFilesFilter())) {
      jarsNeedRetrieve.remove(externalLib.getName());
    }
    List<IClasspathEntry> entriesToRemove=new ArrayList<IClasspathEntry>();
    for (    IClasspathEntry entry : entries) {
      if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
        boolean found=false;
        for (        File externalLib : libDir.listFiles(FilesUtils.getAcceptJARFilesFilter())) {
          if (entry.getPath().toPortableString().endsWith(externalLib.getName())) {
            found=true;
            break;
          }
        }
        if (!found) {
          entriesToRemove.add(entry);
        }
      }
    }
    for (    IClasspathEntry entry : entriesToRemove) {
      entries=(IClasspathEntry[])ArrayUtils.remove(entries,ArrayUtils.indexOf(entries,entry));
      changesDone=true;
    }
    if (!jarsNeedRetrieve.isEmpty()) {
      ILibraryManagerService repositoryBundleService=CorePlugin.getDefault().getRepositoryBundleService();
      repositoryBundleService.retrieve(jarsNeedRetrieve,libDir.getAbsolutePath());
    }
    for (    File externalLib : libDir.listFiles(FilesUtils.getAcceptJARFilesFilter())) {
      if (externalLib.isFile() && listModulesReallyNeeded.contains(externalLib.getName())) {
        IClasspathEntry newEntry=JavaCore.newLibraryEntry(new Path(externalLib.getAbsolutePath()),null,null);
        if (!ArrayUtils.contains(entries,newEntry)) {
          entries=(IClasspathEntry[])ArrayUtils.add(entries,newEntry);
          changesDone=true;
        }
      }
    }
  }
  String missingJars=null;
  int exchange=2;
  for (  String jar : listModulesReallyNeeded) {
    int index=indexOfEntry(entries,jar);
    if (index < 0) {
      if (missingJars == null) {
        missingJars=""String_Node_Str"" + jar;
      }
 else {
        missingJars=missingJars + ""String_Node_Str"" + jar;
      }
    }
    if (index >= 0 && index != exchange) {
      IClasspathEntry entry=entries[index];
      IClasspathEntry first=entries[exchange];
      entries[index]=first;
      entries[exchange]=entry;
      changesDone=true;
      exchange++;
    }
  }
  if (changesDone) {
    javaProject.setRawClasspath(entries,null);
    javaProject.setOutputLocation(javaProject.getPath().append(JavaUtils.JAVA_CLASSES_DIRECTORY),null);
  }
  if (missingJars != null) {
    throw new BusinessException(missingJars);
  }
}",0.9107797604497678
124283,"private void propagateDatas(boolean isExecute){
  String baseConnectorForCurrentNode=node.getConnectorFromName(currentConnector).getBaseSchema();
  if (outputdataContainer != null && (!outputdataContainer.getInputs().isEmpty() || !outputdataContainer.getOuputs().isEmpty())) {
    for (    IODataComponent currentIO : outputdataContainer.getInputs()) {
      INode sourceNode=currentIO.getSource();
      if (currentIO.hasChanged() && (sourceNode.getConnectorFromName(currentIO.getConnection().getConnectorName()).getBaseSchema().equals(baseConnectorForCurrentNode))) {
        sourceNode.metadataOutputChanged(currentIO,currentIO.getName());
        if (isExecute) {
          currentIO.setTable(oldInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
 else {
          currentIO.setTable(newInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
      }
    }
    for (    IODataComponent currentIO : outputdataContainer.getOuputs()) {
      INodeConnector nodeConnector=null;
      String baseConnector=null;
      Node sourceNode=(Node)currentIO.getSource();
      nodeConnector=sourceNode.getConnectorFromName(currentIO.getConnection().getConnectorName());
      baseConnector=nodeConnector.getBaseSchema();
      INode targetNode=currentIO.getTarget();
      boolean sourceIsBuiltIn=((Node)currentIO.getSource()).getConnectorFromType(currentIO.getConnection().getLineStyle()).isMultiSchema();
      boolean targetIsBuiltIn=((Node)targetNode).getConnectorFromType(currentIO.getConnection().getLineStyle()).isMultiSchema();
      if (baseConnector.equals(baseConnectorForCurrentNode) && (targetIsBuiltIn || (!targetNode.getMetadataFromConnector(baseConnector).sameMetadataAs(newOutputMetadata)))) {
        targetNode.metadataInputChanged(currentIO,currentIO.getUniqueName());
        if (isExecute) {
          if (targetNode instanceof Node) {
            if (((Node)targetNode).getComponent().isSchemaAutoPropagated() && getPropagate() && targetNode.getMetadataList().size() > 0) {
              IMetadataTable tmpClone;
              if (sourceIsBuiltIn) {
                IMetadataTable tab=node.getMetadataTable(currentIO.getConnection().getMetadataTable().getTableName());
                if (tab == null && node.getJobletNode() != null) {
                  tab=node.getJobletNode().getMetadataTable(currentIO.getConnection().getMetadataTable().getTableName());
                }
                tmpClone=tab.clone(true);
              }
 else {
                IMetadataTable tab=node.getMetadataFromConnector(currentIO.getConnection().getConnectorName());
                if (tab == null && node.getJobletNode() != null) {
                  tab=node.getJobletNode().getMetadataFromConnector(currentIO.getConnection().getConnectorName());
                }
                tmpClone=tab.clone(true);
              }
              IMetadataTable toCopy=newOutputMetadata.clone();
              String dbmsId=null;
              IMetadataTable copy;
              if (((Node)targetNode).getMetadataFromConnector(baseConnector) != null) {
                dbmsId=targetNode.getMetadataFromConnector(baseConnector).getDbms();
                MetadataTool.copyTable(dbmsId,toCopy,tmpClone);
                toCopy=tmpClone;
                copy=((Node)targetNode).getMetadataFromConnector(baseConnector).clone(true);
              }
 else {
                final String mainConnector=""String_Node_Str"";
                dbmsId=targetNode.getMetadataFromConnector(mainConnector).getDbms();
                MetadataTool.copyTable(dbmsId,toCopy,tmpClone);
                toCopy=tmpClone;
                copy=((Node)targetNode).getMetadataFromConnector(mainConnector).clone(true);
              }
              MetadataTool.copyTable(dbmsId,toCopy,copy);
              ChangeMetadataCommand cmd=new ChangeMetadataCommand((Node)targetNode,null,null,copy,inputSchemaParam);
              if (outputdataContainer.getOuputs().size() > 0) {
                List<ColumnNameChanged> columnNameChanged=outputdataContainer.getOuputs().get(0).getColumnNameChanged();
                for (                IODataComponent dataComp : cmd.outputdataContainer.getOuputs()) {
                  dataComp.setColumnNameChanged(columnNameChanged);
                }
              }
              cmd.execute(true);
              propagatedChange.add(cmd);
            }
          }
          currentIO.setTable(oldOutputMetadata);
          currentIO.setColumnNameChanged(null);
        }
 else {
          if (targetNode instanceof Node) {
            if (!targetIsBuiltIn && getPropagate()) {
              if (((Node)targetNode).getComponent().isSchemaAutoPropagated()) {
                if (outputdataContainer.getOuputs().size() > 0) {
                  List<ColumnNameChanged> columnNameChanged=outputdataContainer.getOuputs().get(0).getColumnNameChanged();
                  for (                  ChangeMetadataCommand cmd : propagatedChange) {
                    for (                    IODataComponent dataComp : cmd.outputdataContainer.getOuputs()) {
                      dataComp.setColumnNameChanged(columnNameChanged);
                    }
                  }
                }
              }
            }
          }
          currentIO.setTable(newOutputMetadata);
          currentIO.setColumnNameChanged(null);
        }
      }
    }
  }
 else   if (dataComponent != null) {
    for (    IConnection outgoingConnection : node.getOutgoingConnections()) {
      if (outgoingConnection.getConnectorName().equals(currentConnector)) {
        outgoingConnection.getTarget().metadataInputChanged(dataComponent,outgoingConnection.getName());
      }
    }
  }
 else {
    if (!node.getOutgoingConnections().isEmpty()) {
      for (      IConnection outgoingConnection : node.getOutgoingConnections()) {
        final Node target=(Node)outgoingConnection.getTarget();
        if (target != null && target.getExternalNode() != null) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IXmlMapService.class)) {
            final IXmlMapService service=(IXmlMapService)GlobalServiceRegister.getDefault().getService(IXmlMapService.class);
            if (service.isXmlMapComponent(target.getExternalNode())) {
              IODataComponent output=new IODataComponent(outgoingConnection,newOutputMetadata);
              target.metadataInputChanged(output,outgoingConnection.getUniqueName());
            }
          }
        }
      }
    }
  }
  if (inputdataContainer != null) {
    for (    IODataComponent currentIO : inputdataContainer.getOuputs()) {
      if (currentIO.hasChanged() && (currentIO.getSource().getConnectorFromName(currentIO.getConnection().getConnectorName()).getBaseSchema().equals(currentConnector))) {
        INode targetNode=currentIO.getTarget();
        targetNode.metadataInputChanged(currentIO,currentIO.getUniqueName());
        if (isExecute) {
          currentIO.setTable(oldInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
 else {
          currentIO.setTable(newInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
      }
    }
  }
}","private void propagateDatas(boolean isExecute){
  String baseConnectorForCurrentNode=node.getConnectorFromName(currentConnector).getBaseSchema();
  if (outputdataContainer != null && (!outputdataContainer.getInputs().isEmpty() || !outputdataContainer.getOuputs().isEmpty())) {
    for (    IODataComponent currentIO : outputdataContainer.getInputs()) {
      INode sourceNode=currentIO.getSource();
      if (currentIO.hasChanged() && (sourceNode.getConnectorFromName(currentIO.getConnection().getConnectorName()).getBaseSchema().equals(baseConnectorForCurrentNode))) {
        sourceNode.metadataOutputChanged(currentIO,currentIO.getName());
        if (isExecute) {
          currentIO.setTable(oldInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
 else {
          currentIO.setTable(newInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
      }
    }
    for (    IODataComponent currentIO : outputdataContainer.getOuputs()) {
      INodeConnector nodeConnector=null;
      String baseConnector=null;
      Node sourceNode=(Node)currentIO.getSource();
      nodeConnector=sourceNode.getConnectorFromName(currentIO.getConnection().getConnectorName());
      baseConnector=nodeConnector.getBaseSchema();
      INode targetNode=currentIO.getTarget();
      boolean sourceIsBuiltIn=((Node)currentIO.getSource()).getConnectorFromType(currentIO.getConnection().getLineStyle()).isMultiSchema();
      boolean targetIsBuiltIn=((Node)targetNode).getConnectorFromType(currentIO.getConnection().getLineStyle()).isMultiSchema();
      boolean isJoblet=((Node)targetNode).isJoblet();
      if (!isJoblet && baseConnector.equals(baseConnectorForCurrentNode) && (targetIsBuiltIn || (!targetNode.getMetadataFromConnector(baseConnector).sameMetadataAs(newOutputMetadata)))) {
        targetNode.metadataInputChanged(currentIO,currentIO.getUniqueName());
        if (isExecute) {
          if (targetNode instanceof Node) {
            if (((Node)targetNode).getComponent().isSchemaAutoPropagated() && getPropagate() && targetNode.getMetadataList().size() > 0) {
              IMetadataTable tmpClone;
              if (sourceIsBuiltIn) {
                IMetadataTable tab=node.getMetadataTable(currentIO.getConnection().getMetadataTable().getTableName());
                if (tab == null && node.getJobletNode() != null) {
                  tab=node.getJobletNode().getMetadataTable(currentIO.getConnection().getMetadataTable().getTableName());
                }
                tmpClone=tab.clone(true);
              }
 else {
                IMetadataTable tab=node.getMetadataFromConnector(currentIO.getConnection().getConnectorName());
                if (tab == null && node.getJobletNode() != null) {
                  tab=node.getJobletNode().getMetadataFromConnector(currentIO.getConnection().getConnectorName());
                }
                tmpClone=tab.clone(true);
              }
              IMetadataTable toCopy=newOutputMetadata.clone();
              String dbmsId=null;
              IMetadataTable copy;
              if (((Node)targetNode).getMetadataFromConnector(baseConnector) != null) {
                dbmsId=targetNode.getMetadataFromConnector(baseConnector).getDbms();
                MetadataTool.copyTable(dbmsId,toCopy,tmpClone);
                toCopy=tmpClone;
                copy=((Node)targetNode).getMetadataFromConnector(baseConnector).clone(true);
              }
 else {
                final String mainConnector=""String_Node_Str"";
                dbmsId=targetNode.getMetadataFromConnector(mainConnector).getDbms();
                MetadataTool.copyTable(dbmsId,toCopy,tmpClone);
                toCopy=tmpClone;
                copy=((Node)targetNode).getMetadataFromConnector(mainConnector).clone(true);
              }
              MetadataTool.copyTable(dbmsId,toCopy,copy);
              ChangeMetadataCommand cmd=new ChangeMetadataCommand((Node)targetNode,null,null,copy,inputSchemaParam);
              if (outputdataContainer.getOuputs().size() > 0) {
                List<ColumnNameChanged> columnNameChanged=outputdataContainer.getOuputs().get(0).getColumnNameChanged();
                for (                IODataComponent dataComp : cmd.outputdataContainer.getOuputs()) {
                  dataComp.setColumnNameChanged(columnNameChanged);
                }
              }
              cmd.execute(true);
              propagatedChange.add(cmd);
            }
          }
          currentIO.setTable(oldOutputMetadata);
          currentIO.setColumnNameChanged(null);
        }
 else {
          if (targetNode instanceof Node) {
            if (!targetIsBuiltIn && getPropagate()) {
              if (((Node)targetNode).getComponent().isSchemaAutoPropagated()) {
                if (outputdataContainer.getOuputs().size() > 0) {
                  List<ColumnNameChanged> columnNameChanged=outputdataContainer.getOuputs().get(0).getColumnNameChanged();
                  for (                  ChangeMetadataCommand cmd : propagatedChange) {
                    for (                    IODataComponent dataComp : cmd.outputdataContainer.getOuputs()) {
                      dataComp.setColumnNameChanged(columnNameChanged);
                    }
                  }
                }
              }
            }
          }
          currentIO.setTable(newOutputMetadata);
          currentIO.setColumnNameChanged(null);
        }
      }
    }
  }
 else   if (dataComponent != null) {
    for (    IConnection outgoingConnection : node.getOutgoingConnections()) {
      if (outgoingConnection.getConnectorName().equals(currentConnector)) {
        outgoingConnection.getTarget().metadataInputChanged(dataComponent,outgoingConnection.getName());
      }
    }
  }
 else {
    if (!node.getOutgoingConnections().isEmpty()) {
      for (      IConnection outgoingConnection : node.getOutgoingConnections()) {
        final Node target=(Node)outgoingConnection.getTarget();
        if (target != null && target.getExternalNode() != null) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IXmlMapService.class)) {
            final IXmlMapService service=(IXmlMapService)GlobalServiceRegister.getDefault().getService(IXmlMapService.class);
            if (service.isXmlMapComponent(target.getExternalNode())) {
              IODataComponent output=new IODataComponent(outgoingConnection,newOutputMetadata);
              target.metadataInputChanged(output,outgoingConnection.getUniqueName());
            }
          }
        }
      }
    }
  }
  if (inputdataContainer != null) {
    for (    IODataComponent currentIO : inputdataContainer.getOuputs()) {
      if (currentIO.hasChanged() && (currentIO.getSource().getConnectorFromName(currentIO.getConnection().getConnectorName()).getBaseSchema().equals(currentConnector))) {
        INode targetNode=currentIO.getTarget();
        targetNode.metadataInputChanged(currentIO,currentIO.getUniqueName());
        if (isExecute) {
          currentIO.setTable(oldInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
 else {
          currentIO.setTable(newInputMetadata);
          currentIO.setColumnNameChanged(null);
        }
      }
    }
  }
}",0.9953507737145236
124284,"/** 
 * DOC qzhang Comment method ""loadNode"".
 * @param nType
 * @param component
 * @return
 */
protected Node loadNode(NodeType nType,IComponent component,Hashtable<String,Node> nodesHashtable,EList listParamType){
  Node nc;
  nc=new Node(component,this);
  nc.setLocation(new Point(nType.getPosX(),nType.getPosY()));
  Point offset=new Point(nType.getOffsetLabelX(),nType.getOffsetLabelY());
  nc.getNodeLabel().setOffset(offset);
  if (nType.isSetSizeX()) {
    nc.setSize(new Dimension(nType.getSizeX(),nType.getSizeY()));
  }
  loadElementParameters(nc,listParamType);
  IElementParameter processParam=nc.getElementParameterFromField(EParameterFieldType.PROCESS_TYPE);
  if (processParam != null) {
    IElementParameter processIdParam=processParam.getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
    IElementParameter processVersionParam=processParam.getChildParameters().get(EParameterName.PROCESS_TYPE_VERSION.getName());
    ProcessItem processItem=null;
    if (processVersionParam != null) {
      processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)processVersionParam.getValue());
    }
 else {
      processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue());
    }
    if (processItem != null) {
      nc.setPropertyValue(processParam.getName(),processItem.getProperty().getLabel());
    }
  }
  if (nc.getExternalNode() != null && nType.getNodeData() != null) {
    nc.getExternalNode().buildExternalData(nType.getNodeData());
    nc.setExternalData(nc.getExternalNode().getExternalData());
  }
  loadSchema(nc,nType);
  ValidationRulesUtil.createRejectConnector(nc);
  loadColumnsBasedOnSchema(nc,listParamType);
  NodeContainer nodeContainer=null;
  if (nc.isJoblet()) {
    nodeContainer=new JobletContainer(nc);
  }
 else {
    nodeContainer=new NodeContainer(nc);
  }
  addNodeContainer(nodeContainer);
  nodesHashtable.put(nc.getUniqueName(),nc);
  updateAllMappingTypes();
  nc.setNeedLoadLib(false);
  return nc;
}","/** 
 * DOC qzhang Comment method ""loadNode"".
 * @param nType
 * @param component
 * @return
 */
protected Node loadNode(NodeType nType,IComponent component,Hashtable<String,Node> nodesHashtable,EList listParamType){
  Node nc;
  nc=new Node(component,this);
  nc.setLocation(new Point(nType.getPosX(),nType.getPosY()));
  Point offset=new Point(nType.getOffsetLabelX(),nType.getOffsetLabelY());
  nc.getNodeLabel().setOffset(offset);
  if (nType.isSetSizeX()) {
    nc.setSize(new Dimension(nType.getSizeX(),nType.getSizeY()));
  }
  loadElementParameters(nc,listParamType);
  IElementParameter processParam=nc.getElementParameterFromField(EParameterFieldType.PROCESS_TYPE);
  if (processParam != null) {
    IElementParameter processIdParam=processParam.getChildParameters().get(EParameterName.PROCESS_TYPE_PROCESS.getName());
    IElementParameter processVersionParam=processParam.getChildParameters().get(EParameterName.PROCESS_TYPE_VERSION.getName());
    ProcessItem processItem=null;
    if (processVersionParam != null) {
      processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue(),(String)processVersionParam.getValue());
    }
 else {
      processItem=ItemCacheManager.getProcessItem((String)processIdParam.getValue());
    }
    if (processItem != null) {
      nc.setPropertyValue(processParam.getName(),processItem.getProperty().getLabel());
    }
  }
  if (nc.getExternalNode() != null && nType.getNodeData() != null) {
    nc.getExternalNode().buildExternalData(EcoreUtil.copy(nType.getNodeData()));
    nc.setExternalData(nc.getExternalNode().getExternalData());
  }
  loadSchema(nc,nType);
  ValidationRulesUtil.createRejectConnector(nc);
  loadColumnsBasedOnSchema(nc,listParamType);
  NodeContainer nodeContainer=null;
  if (nc.isJoblet()) {
    nodeContainer=new JobletContainer(nc);
  }
 else {
    nodeContainer=new NodeContainer(nc);
  }
  addNodeContainer(nodeContainer);
  nodesHashtable.put(nc.getUniqueName(),nc);
  updateAllMappingTypes();
  nc.setNeedLoadLib(false);
  return nc;
}",0.9960532807104094
124285,"public void rebuildInputTree(InputXmlTree inputTree,IMetadataTable metadataTable,XmlMapData mapData){
  if (metadataTable != null && metadataTable.getListColumns() != null) {
    List<IMetadataColumn> listColumns=metadataTable.getListColumns();
    EList<TreeNode> nodes=inputTree.getNodes();
    for (int i=0; i < listColumns.size(); i++) {
      IMetadataColumn column=listColumns.get(i);
      TreeNode found=null;
      int j=0;
      for (; j < nodes.size(); j++) {
        TreeNode node=nodes.get(j);
        if (node.getName() != null && node.getName().equals(column.getLabel())) {
          found=node;
          break;
        }
      }
      if (found != null) {
        found.setType(column.getTalendType());
        if (i != j) {
          TreeNode temp=nodes.get(j);
          nodes.remove(j);
          nodes.add(i,temp);
        }
      }
 else {
        found=XmlmapFactory.eINSTANCE.createTreeNode();
        found.setName(column.getLabel());
        found.setType(column.getTalendType());
        found.setNullable(column.isNullable());
        found.setXpath(XmlMapUtil.getXPath(inputTree.getName(),found.getName(),found.getNodeType()));
        nodes.add(i,found);
      }
      if (XmlMapUtil.DOCUMENT.equals(found.getType())) {
        EList<TreeNode> children=found.getChildren();
        if (children.isEmpty()) {
          XmlMapUtil.detachConnectionsTarget(found,mapData);
          TreeNode treeRoot=XmlmapFactory.eINSTANCE.createTreeNode();
          treeRoot.setName(""String_Node_Str"");
          treeRoot.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
          treeRoot.setNodeType(NodeType.ELEMENT);
          treeRoot.setXpath(XmlMapUtil.getXPath(found.getXpath(),treeRoot.getName(),treeRoot.getNodeType()));
          children.add(treeRoot);
        }
      }
 else {
        EList<TreeNode> children=found.getChildren();
        if (!children.isEmpty()) {
          XmlMapUtil.detachConnectionsTarget(found,mapData);
          found.getChildren().clear();
        }
      }
    }
    if (nodes.size() > listColumns.size()) {
      List unUsed=new ArrayList();
      for (int i=listColumns.size(); i < nodes.size(); i++) {
        XmlMapUtil.detachConnectionsTarget(nodes.get(i),mapData);
        unUsed.add(nodes.get(i));
      }
      nodes.removeAll(unUsed);
    }
  }
  if (inputTree.isLookup()) {
    rebuildInputNodesConnections(inputTree.getNodes(),mapData);
  }
}","public void rebuildInputTree(InputXmlTree inputTree,IMetadataTable metadataTable,XmlMapData mapData){
  if (metadataTable != null && metadataTable.getListColumns() != null) {
    List<IMetadataColumn> listColumns=metadataTable.getListColumns();
    EList<TreeNode> nodes=inputTree.getNodes();
    for (int i=0; i < listColumns.size(); i++) {
      IMetadataColumn column=listColumns.get(i);
      TreeNode found=null;
      int j=0;
      for (; j < nodes.size(); j++) {
        TreeNode node=nodes.get(j);
        if (node.getName() != null && node.getName().equals(column.getLabel())) {
          found=node;
          break;
        }
      }
      if (found != null) {
        found.setType(column.getTalendType());
        if (i != j) {
          TreeNode temp=nodes.get(j);
          nodes.remove(j);
          nodes.add(i,temp);
        }
      }
 else {
        found=XmlmapFactory.eINSTANCE.createTreeNode();
        found.setName(column.getLabel());
        found.setType(column.getTalendType());
        found.setNullable(column.isNullable());
        found.setXpath(XmlMapUtil.getXPath(inputTree.getName(),found.getName(),found.getNodeType()));
        nodes.add(i,found);
      }
      if (XmlMapUtil.DOCUMENT.equals(found.getType())) {
        EList<TreeNode> children=found.getChildren();
        if (children.isEmpty()) {
          XmlMapUtil.detachNodeConnections(found,mapData,true);
          TreeNode treeRoot=XmlmapFactory.eINSTANCE.createTreeNode();
          treeRoot.setName(""String_Node_Str"");
          treeRoot.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
          treeRoot.setNodeType(NodeType.ELEMENT);
          treeRoot.setXpath(XmlMapUtil.getXPath(found.getXpath(),treeRoot.getName(),treeRoot.getNodeType()));
          children.add(treeRoot);
        }
      }
 else {
        EList<TreeNode> children=found.getChildren();
        if (!children.isEmpty()) {
          XmlMapUtil.detachNodeConnections(found,mapData,true);
          found.getChildren().clear();
        }
      }
    }
    if (nodes.size() > listColumns.size()) {
      List unUsed=new ArrayList();
      for (int i=listColumns.size(); i < nodes.size(); i++) {
        XmlMapUtil.detachNodeConnections(nodes.get(i),mapData,true);
        unUsed.add(nodes.get(i));
      }
      nodes.removeAll(unUsed);
    }
  }
  if (inputTree.isLookup()) {
    rebuildInputNodesConnections(inputTree.getNodes(),mapData);
  }
}",0.990630855715178
124286,"private static void statsAndLogsParametersFinalPart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=(List<IElementParameter>)process.getElementParameters();
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_RUNTIME_ERRORS.getName()));
  param.setDisplayName(EParameterName.CATCH_RUNTIME_ERRORS.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(90);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_USER_ERRORS.getName()));
  param.setDisplayName(EParameterName.CATCH_USER_ERRORS.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(90);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_USER_WARNING.getName()));
  param.setDisplayName(EParameterName.CATCH_USER_WARNING.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(90);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_REALTIME_STATS.getName()));
  param.setDisplayName(EParameterName.CATCH_REALTIME_STATS.getDisplayName() + ""String_Node_Str"" + EParameterName.TSTATCATCHER_STATS.getDisplayName()+ ""String_Node_Str"");
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(91);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
}","private static List<IElementParameter> statsAndLogsParametersFinalPart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=new ArrayList<IElementParameter>();
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_RUNTIME_ERRORS.getName()));
  param.setDisplayName(EParameterName.CATCH_RUNTIME_ERRORS.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(90);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_USER_ERRORS.getName()));
  param.setDisplayName(EParameterName.CATCH_USER_ERRORS.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(90);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_USER_WARNING.getName()));
  param.setDisplayName(EParameterName.CATCH_USER_WARNING.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(90);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(""String_Node_Str"");
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.CATCH_REALTIME_STATS.getName()));
  param.setDisplayName(EParameterName.CATCH_REALTIME_STATS.getDisplayName() + ""String_Node_Str"" + EParameterName.TSTATCATCHER_STATS.getDisplayName()+ ""String_Node_Str"");
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(91);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  return paramList;
}",0.9810070671378092
124287,"private static void statsAndLogsParametersTitlePart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=(List<IElementParameter>)process.getElementParameters();
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(EParameterName.UPDATE_COMPONENTS.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.UPDATE_COMPONENTS.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setRequired(false);
  param.setShow(false);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_STATCATCHER_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_STATCATCHER_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_STATCATCHER_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_LOGCATCHER_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_LOGCATCHER_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_LOGCATCHER_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_METERCATCHER_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_METERCATCHER_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_METERCATCHER_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_CONSOLE_FLAG.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.ON_CONSOLE_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(2);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
}","private static List<IElementParameter> statsAndLogsParametersTitlePart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=new ArrayList<IElementParameter>();
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(EParameterName.UPDATE_COMPONENTS.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.UPDATE_COMPONENTS.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  param.setReadOnly(true);
  param.setRequired(false);
  param.setShow(false);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_STATCATCHER_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_STATCATCHER_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_STATCATCHER_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_LOGCATCHER_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_LOGCATCHER_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_LOGCATCHER_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_METERCATCHER_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_METERCATCHER_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_METERCATCHER_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(1);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_CONSOLE_FLAG.getName());
  param.setValue(Boolean.FALSE);
  param.setDisplayName(EParameterName.ON_CONSOLE_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(2);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  return paramList;
}",0.9829093799682036
124288,"private static void statsAndLogsParametersFilePart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=(List<IElementParameter>)process.getElementParameters();
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_FILES_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_FILES_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_FILES_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(10);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILE_PATH.getName());
  param.setValue(addQuotes(replaceSlash(preferenceStore.getString(languagePrefix + EParameterName.FILE_PATH.getName()))));
  param.setDisplayName(EParameterName.FILE_PATH.getDisplayName());
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setNumRow(11);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILENAME_STATS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.FILENAME_STATS.getName())));
  param.setDisplayName(EParameterName.FILENAME_STATS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setRequired(true);
  param.setNumRow(12);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILENAME_LOGS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.FILENAME_LOGS.getName())));
  param.setDisplayName(EParameterName.FILENAME_LOGS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setNumRow(13);
  param.setRequired(true);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILENAME_METTER.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.FILENAME_METTER.getName())));
  param.setDisplayName(EParameterName.FILENAME_METTER.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setRequired(true);
  param.setNumRow(14);
  paramList.add(param);
  ElementParameter encodingParam=new ElementParameter(process);
  encodingParam.setName(EParameterName.ENCODING.getName());
  encodingParam.setDisplayName(EParameterName.ENCODING.getDisplayName());
  encodingParam.setCategory(EComponentCategory.STATSANDLOGS);
  encodingParam.setFieldType(EParameterFieldType.ENCODING_TYPE);
  encodingParam.setShowIf(""String_Node_Str"");
  encodingParam.setValue(ENCODING_TYPE_ISO_8859_15);
  encodingParam.setNumRow(15);
  paramList.add(encodingParam);
  ElementParameter childPram=new ElementParameter(process);
  childPram.setName(EParameterName.ENCODING_TYPE.getName());
  childPram.setDisplayName(EParameterName.ENCODING_TYPE.getDisplayName());
  childPram.setFieldType(EParameterFieldType.TECHNICAL);
  childPram.setCategory(EComponentCategory.STATSANDLOGS);
  childPram.setListItemsDisplayName(new String[]{ENCODING_TYPE_ISO_8859_15,ENCODING_TYPE_UTF_8,ENCODING_TYPE_CUSTOM});
  childPram.setListItemsDisplayCodeName(new String[]{ENCODING_TYPE_ISO_8859_15,ENCODING_TYPE_UTF_8,ENCODING_TYPE_CUSTOM});
  childPram.setListItemsValue(new String[]{ENCODING_TYPE_ISO_8859_15,ENCODING_TYPE_UTF_8,ENCODING_TYPE_CUSTOM});
  childPram.setValue(ENCODING_TYPE_ISO_8859_15);
  childPram.setNumRow(15);
  childPram.setShowIf(""String_Node_Str"");
  childPram.setParentParameter(encodingParam);
}","private static List<IElementParameter> statsAndLogsParametersFilePart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=new ArrayList<IElementParameter>();
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_FILES_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_FILES_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_FILES_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(10);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILE_PATH.getName());
  param.setValue(addQuotes(replaceSlash(preferenceStore.getString(languagePrefix + EParameterName.FILE_PATH.getName()))));
  param.setDisplayName(EParameterName.FILE_PATH.getDisplayName());
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setNumRow(11);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILENAME_STATS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.FILENAME_STATS.getName())));
  param.setDisplayName(EParameterName.FILENAME_STATS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setRequired(true);
  param.setNumRow(12);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILENAME_LOGS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.FILENAME_LOGS.getName())));
  param.setDisplayName(EParameterName.FILENAME_LOGS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setNumRow(13);
  param.setRequired(true);
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.FILENAME_METTER.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.FILENAME_METTER.getName())));
  param.setDisplayName(EParameterName.FILENAME_METTER.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setShowIf(""String_Node_Str"");
  param.setRequired(true);
  param.setNumRow(14);
  paramList.add(param);
  ElementParameter encodingParam=new ElementParameter(process);
  encodingParam.setName(EParameterName.ENCODING.getName());
  encodingParam.setDisplayName(EParameterName.ENCODING.getDisplayName());
  encodingParam.setCategory(EComponentCategory.STATSANDLOGS);
  encodingParam.setFieldType(EParameterFieldType.ENCODING_TYPE);
  encodingParam.setShowIf(""String_Node_Str"");
  encodingParam.setValue(ENCODING_TYPE_ISO_8859_15);
  encodingParam.setNumRow(15);
  paramList.add(encodingParam);
  ElementParameter childPram=new ElementParameter(process);
  childPram.setName(EParameterName.ENCODING_TYPE.getName());
  childPram.setDisplayName(EParameterName.ENCODING_TYPE.getDisplayName());
  childPram.setFieldType(EParameterFieldType.TECHNICAL);
  childPram.setCategory(EComponentCategory.STATSANDLOGS);
  childPram.setListItemsDisplayName(new String[]{ENCODING_TYPE_ISO_8859_15,ENCODING_TYPE_UTF_8,ENCODING_TYPE_CUSTOM});
  childPram.setListItemsDisplayCodeName(new String[]{ENCODING_TYPE_ISO_8859_15,ENCODING_TYPE_UTF_8,ENCODING_TYPE_CUSTOM});
  childPram.setListItemsValue(new String[]{ENCODING_TYPE_ISO_8859_15,ENCODING_TYPE_UTF_8,ENCODING_TYPE_CUSTOM});
  childPram.setValue(ENCODING_TYPE_ISO_8859_15);
  childPram.setNumRow(15);
  childPram.setShowIf(""String_Node_Str"");
  childPram.setParentParameter(encodingParam);
  return paramList;
}",0.9895580378824672
124289,"private static void statsAndLogsParametersDBPart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=(List<IElementParameter>)process.getElementParameters();
  int languageType=0;
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
    languageType=1;
  }
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_DATABASE_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_DATABASE_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_DATABASE_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(50);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  ElementParameter parentPropertyType=new ElementParameter(process);
  parentPropertyType.setName(EParameterName.PROPERTY_TYPE.getName());
  parentPropertyType.setDisplayName(EParameterName.PROPERTY_TYPE.getDisplayName());
  parentPropertyType.setValue(""String_Node_Str"");
  parentPropertyType.setCategory(EComponentCategory.STATSANDLOGS);
  parentPropertyType.setFieldType(EParameterFieldType.PROPERTY_TYPE);
  parentPropertyType.setRepositoryValue(ERepositoryCategoryType.DATABASE.getName());
  parentPropertyType.setNumRow(51);
  parentPropertyType.setShowIf(""String_Node_Str"");
  paramList.add(parentPropertyType);
  param=new ElementParameter(process);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setName(EParameterName.PROPERTY_TYPE.getName());
  param.setDisplayName(EParameterName.PROPERTY_TYPE.getDisplayName());
  param.setListItemsDisplayName(new String[]{EmfComponent.TEXT_BUILTIN,EmfComponent.TEXT_REPOSITORY});
  param.setListItemsDisplayCodeName(new String[]{EmfComponent.BUILTIN,EmfComponent.REPOSITORY});
  param.setListItemsValue(new String[]{EmfComponent.BUILTIN,EmfComponent.REPOSITORY});
  param.setValue(preferenceStore.getString(languagePrefix + EParameterName.PROPERTY_TYPE.getName()));
  param.setNumRow(51);
  param.setFieldType(EParameterFieldType.TECHNICAL);
  param.setRepositoryValue(ERepositoryCategoryType.DATABASE.getName());
  param.setShowIf(""String_Node_Str"");
  param.setParentParameter(parentPropertyType);
  param=new ElementParameter(process);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setName(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
  param.setDisplayName(EParameterName.REPOSITORY_PROPERTY_TYPE.getDisplayName());
  param.setListItemsDisplayName(new String[]{});
  param.setListItemsValue(new String[]{});
  param.setNumRow(51);
  param.setFieldType(EParameterFieldType.TECHNICAL);
  param.setValue(preferenceStore.getString(languagePrefix + EParameterName.REPOSITORY_PROPERTY_TYPE.getName()));
  param.setShow(false);
  param.setRequired(true);
  param.setParentParameter(parentPropertyType);
  param=new ElementParameter(process);
  param.setName(EParameterName.DB_TYPE.getName());
  String type=preferenceStore.getString(languagePrefix + EParameterName.DB_TYPE.getName());
  if (type == null || ""String_Node_Str"".equals(type.trim())) {
    type=StatsAndLogsConstants.DB_COMPONENTS[languageType][0];
  }
  param.setValue(type);
  param.setDisplayName(EParameterName.DB_TYPE.getDisplayName());
  param.setFieldType(EParameterFieldType.CLOSED_LIST);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setListItemsDisplayName(StatsAndLogsConstants.DISPLAY_DBNAMES[languageType]);
  param.setListItemsValue(StatsAndLogsConstants.DB_COMPONENTS[languageType]);
  param.setListRepositoryItems(StatsAndLogsConstants.REPOSITORY_ITEMS[languageType]);
  param.setListItemsDisplayCodeName(StatsAndLogsConstants.CODE_LIST[languageType]);
  param.setNumRow(52);
  param.setRepositoryValue(""String_Node_Str"");
  param.setRequired(true);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  if (process.getElementParameter(EParameterName.DB_VERSION.getName()) == null) {
    param=new ElementParameter(process);
    param.setName(EParameterName.DB_VERSION.getName());
    param.setDisplayName(EParameterName.DB_VERSION.getDisplayName());
    param.setFieldType(EParameterFieldType.CLOSED_LIST);
    param.setCategory(EComponentCategory.STATSANDLOGS);
    param.setValue(StatsAndLogsConstants.DB_VERSION_DRIVER[1]);
    param.setListItemsDisplayName(StatsAndLogsConstants.DB_VERSION_DISPLAY);
    param.setListItemsValue(StatsAndLogsConstants.DB_VERSION_DRIVER);
    param.setListItemsDisplayCodeName(StatsAndLogsConstants.DB_VERSION_CODE);
    param.setNumRow(52);
    param.setRepositoryValue(""String_Node_Str"");
    param.setRequired(true);
    param.setShowIf(""String_Node_Str"");
    paramList.add(param);
  }
  param=new ElementParameter(process);
  param.setName(EParameterName.URL.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.URL.getName())));
  param.setDisplayName(EParameterName.URL.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  List<ModuleNeeded> moduleNeededList=ModulesNeededProvider.getModulesNeeded();
  Set<String> moduleNameList=new TreeSet<String>();
  Set<String> moduleValueList=new TreeSet<String>();
  for (  ModuleNeeded module : moduleNeededList) {
    String moduleName=module.getModuleName();
    moduleNameList.add(moduleName);
    moduleValueList.add(TalendTextUtils.addQuotes(moduleName));
  }
  Comparator<String> comprarator=new IgnoreCaseComparator();
  String[] moduleNameArray=moduleNameList.toArray(new String[0]);
  String[] moduleValueArray=moduleValueList.toArray(new String[0]);
  Arrays.sort(moduleNameArray,comprarator);
  Arrays.sort(moduleValueArray,comprarator);
  ElementParameter childParam=new ElementParameter(process);
  childParam.setName(""String_Node_Str"");
  childParam.setDisplayName(""String_Node_Str"");
  childParam.setFieldType(EParameterFieldType.MODULE_LIST);
  childParam.setListItemsDisplayName(moduleNameArray);
  childParam.setListItemsValue(moduleValueArray);
  param=new ElementParameter(process);
  param.setName(EParameterName.DRIVER_JAR.getName());
  param.setDisplayName(EParameterName.DRIVER_JAR.getDisplayName());
  param.setFieldType(EParameterFieldType.TABLE);
  param.setListItemsDisplayCodeName(new String[]{""String_Node_Str""});
  param.setListItemsDisplayName(new String[]{""String_Node_Str""});
  param.setListItemsValue(new ElementParameter[]{childParam});
  param.setValue(new ArrayList<Map<String,Object>>());
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DRIVER_CLASS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DRIVER_CLASS.getName())));
  param.setDisplayName(EParameterName.DRIVER_CLASS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(57);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.HOST.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.HOST.getName())));
  param.setDisplayName(EParameterName.HOST.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.PORT.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.PORT.getName())));
  param.setDisplayName(EParameterName.PORT.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DATASOURCE.getName());
  param.setDisplayName(EParameterName.DATASOURCE.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DATASOURCE.getName())));
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DBNAME.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DBNAME.getName())));
  param.setDisplayName(EParameterName.DBNAME.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.LOCAL_SERVICE_NAME.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.LOCAL_SERVICE_NAME.getName())));
  param.setDisplayName(EParameterName.LOCAL_SERVICE_NAME.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.PROPERTIES.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.PROPERTIES.getName())));
  param.setDisplayName(EParameterName.PROPERTIES.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.SCHEMA_DB.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.SCHEMA_DB.getName())));
  param.setDisplayName(EParameterName.SCHEMA_DB.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.USER.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.USER.getName())));
  param.setDisplayName(EParameterName.USER.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(55);
  param.setRequired(true);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.PASS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.PASS.getName())));
  param.setDisplayName(EParameterName.PASS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(55);
  param.setRequired(true);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DBFILE.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DBFILE.getName())));
  param.setDisplayName(EParameterName.DBFILE.getDisplayName());
  param.setFieldType(EParameterFieldType.FILE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(56);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.TABLE_STATS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.TABLE_STATS.getName())));
  param.setDisplayName(EParameterName.TABLE_STATS.getDisplayName());
  param.setFieldType(EParameterFieldType.DBTABLE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(57);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.TABLE_LOGS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.TABLE_LOGS.getName())));
  param.setDisplayName(EParameterName.TABLE_LOGS.getDisplayName());
  param.setFieldType(EParameterFieldType.DBTABLE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(58);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.TABLE_METER.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.TABLE_METER.getName())));
  param.setDisplayName(EParameterName.TABLE_METER.getDisplayName());
  param.setFieldType(EParameterFieldType.DBTABLE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(59);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
}","private static List<IElementParameter> statsAndLogsParametersDBPart(IProcess process){
  ElementParameter param;
  IPreferenceStore preferenceStore=DesignerPlugin.getDefault().getPreferenceStore();
  List<IElementParameter> paramList=new ArrayList<IElementParameter>();
  int languageType=0;
  if (LanguageManager.getCurrentLanguage().equals(ECodeLanguage.JAVA)) {
    languageType=1;
  }
  String languagePrefix=LanguageManager.getCurrentLanguage().toString() + ""String_Node_Str"";
  param=new ElementParameter(process);
  param.setName(EParameterName.ON_DATABASE_FLAG.getName());
  param.setValue(preferenceStore.getBoolean(languagePrefix + EParameterName.ON_DATABASE_FLAG.getName()));
  param.setDisplayName(EParameterName.ON_DATABASE_FLAG.getDisplayName());
  param.setFieldType(EParameterFieldType.CHECK);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(50);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  ElementParameter parentPropertyType=new ElementParameter(process);
  parentPropertyType.setName(EParameterName.PROPERTY_TYPE.getName());
  parentPropertyType.setDisplayName(EParameterName.PROPERTY_TYPE.getDisplayName());
  parentPropertyType.setValue(""String_Node_Str"");
  parentPropertyType.setCategory(EComponentCategory.STATSANDLOGS);
  parentPropertyType.setFieldType(EParameterFieldType.PROPERTY_TYPE);
  parentPropertyType.setRepositoryValue(ERepositoryCategoryType.DATABASE.getName());
  parentPropertyType.setNumRow(51);
  parentPropertyType.setShowIf(""String_Node_Str"");
  paramList.add(parentPropertyType);
  param=new ElementParameter(process);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setName(EParameterName.PROPERTY_TYPE.getName());
  param.setDisplayName(EParameterName.PROPERTY_TYPE.getDisplayName());
  param.setListItemsDisplayName(new String[]{EmfComponent.TEXT_BUILTIN,EmfComponent.TEXT_REPOSITORY});
  param.setListItemsDisplayCodeName(new String[]{EmfComponent.BUILTIN,EmfComponent.REPOSITORY});
  param.setListItemsValue(new String[]{EmfComponent.BUILTIN,EmfComponent.REPOSITORY});
  param.setValue(preferenceStore.getString(languagePrefix + EParameterName.PROPERTY_TYPE.getName()));
  param.setNumRow(51);
  param.setFieldType(EParameterFieldType.TECHNICAL);
  param.setRepositoryValue(ERepositoryCategoryType.DATABASE.getName());
  param.setShowIf(""String_Node_Str"");
  param.setParentParameter(parentPropertyType);
  param=new ElementParameter(process);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setName(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
  param.setDisplayName(EParameterName.REPOSITORY_PROPERTY_TYPE.getDisplayName());
  param.setListItemsDisplayName(new String[]{});
  param.setListItemsValue(new String[]{});
  param.setNumRow(51);
  param.setFieldType(EParameterFieldType.TECHNICAL);
  param.setValue(preferenceStore.getString(languagePrefix + EParameterName.REPOSITORY_PROPERTY_TYPE.getName()));
  param.setShow(false);
  param.setRequired(true);
  param.setParentParameter(parentPropertyType);
  param=new ElementParameter(process);
  param.setName(EParameterName.DB_TYPE.getName());
  String type=preferenceStore.getString(languagePrefix + EParameterName.DB_TYPE.getName());
  if (type == null || ""String_Node_Str"".equals(type.trim())) {
    type=StatsAndLogsConstants.DB_COMPONENTS[languageType][0];
  }
  param.setValue(type);
  param.setDisplayName(EParameterName.DB_TYPE.getDisplayName());
  param.setFieldType(EParameterFieldType.CLOSED_LIST);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setListItemsDisplayName(StatsAndLogsConstants.DISPLAY_DBNAMES[languageType]);
  param.setListItemsValue(StatsAndLogsConstants.DB_COMPONENTS[languageType]);
  param.setListRepositoryItems(StatsAndLogsConstants.REPOSITORY_ITEMS[languageType]);
  param.setListItemsDisplayCodeName(StatsAndLogsConstants.CODE_LIST[languageType]);
  param.setNumRow(52);
  param.setRepositoryValue(""String_Node_Str"");
  param.setRequired(true);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  if (process.getElementParameter(EParameterName.DB_VERSION.getName()) == null) {
    param=new ElementParameter(process);
    param.setName(EParameterName.DB_VERSION.getName());
    param.setDisplayName(EParameterName.DB_VERSION.getDisplayName());
    param.setFieldType(EParameterFieldType.CLOSED_LIST);
    param.setCategory(EComponentCategory.STATSANDLOGS);
    param.setValue(StatsAndLogsConstants.DB_VERSION_DRIVER[1]);
    param.setListItemsDisplayName(StatsAndLogsConstants.DB_VERSION_DISPLAY);
    param.setListItemsValue(StatsAndLogsConstants.DB_VERSION_DRIVER);
    param.setListItemsDisplayCodeName(StatsAndLogsConstants.DB_VERSION_CODE);
    param.setNumRow(52);
    param.setRepositoryValue(""String_Node_Str"");
    param.setRequired(true);
    param.setShowIf(""String_Node_Str"");
    paramList.add(param);
  }
  param=new ElementParameter(process);
  param.setName(EParameterName.URL.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.URL.getName())));
  param.setDisplayName(EParameterName.URL.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  List<ModuleNeeded> moduleNeededList=ModulesNeededProvider.getModulesNeeded();
  Set<String> moduleNameList=new TreeSet<String>();
  Set<String> moduleValueList=new TreeSet<String>();
  for (  ModuleNeeded module : moduleNeededList) {
    String moduleName=module.getModuleName();
    moduleNameList.add(moduleName);
    moduleValueList.add(TalendTextUtils.addQuotes(moduleName));
  }
  Comparator<String> comprarator=new IgnoreCaseComparator();
  String[] moduleNameArray=moduleNameList.toArray(new String[0]);
  String[] moduleValueArray=moduleValueList.toArray(new String[0]);
  Arrays.sort(moduleNameArray,comprarator);
  Arrays.sort(moduleValueArray,comprarator);
  ElementParameter childParam=new ElementParameter(process);
  childParam.setName(""String_Node_Str"");
  childParam.setDisplayName(""String_Node_Str"");
  childParam.setFieldType(EParameterFieldType.MODULE_LIST);
  childParam.setListItemsDisplayName(moduleNameArray);
  childParam.setListItemsValue(moduleValueArray);
  param=new ElementParameter(process);
  param.setName(EParameterName.DRIVER_JAR.getName());
  param.setDisplayName(EParameterName.DRIVER_JAR.getDisplayName());
  param.setFieldType(EParameterFieldType.TABLE);
  param.setListItemsDisplayCodeName(new String[]{""String_Node_Str""});
  param.setListItemsDisplayName(new String[]{""String_Node_Str""});
  param.setListItemsValue(new ElementParameter[]{childParam});
  param.setValue(new ArrayList<Map<String,Object>>());
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DRIVER_CLASS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DRIVER_CLASS.getName())));
  param.setDisplayName(EParameterName.DRIVER_CLASS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(57);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.HOST.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.HOST.getName())));
  param.setDisplayName(EParameterName.HOST.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.PORT.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.PORT.getName())));
  param.setDisplayName(EParameterName.PORT.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DATASOURCE.getName());
  param.setDisplayName(EParameterName.DATASOURCE.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DATASOURCE.getName())));
  param.setNumRow(53);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DBNAME.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DBNAME.getName())));
  param.setDisplayName(EParameterName.DBNAME.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.LOCAL_SERVICE_NAME.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.LOCAL_SERVICE_NAME.getName())));
  param.setDisplayName(EParameterName.LOCAL_SERVICE_NAME.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.PROPERTIES.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.PROPERTIES.getName())));
  param.setDisplayName(EParameterName.PROPERTIES.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.SCHEMA_DB.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.SCHEMA_DB.getName())));
  param.setDisplayName(EParameterName.SCHEMA_DB.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(54);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.USER.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.USER.getName())));
  param.setDisplayName(EParameterName.USER.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(55);
  param.setRequired(true);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.PASS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.PASS.getName())));
  param.setDisplayName(EParameterName.PASS.getDisplayName());
  param.setFieldType(EParameterFieldType.TEXT);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(55);
  param.setRequired(true);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.DBFILE.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.DBFILE.getName())));
  param.setDisplayName(EParameterName.DBFILE.getDisplayName());
  param.setFieldType(EParameterFieldType.FILE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(56);
  param.setRepositoryValue(""String_Node_Str"");
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.TABLE_STATS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.TABLE_STATS.getName())));
  param.setDisplayName(EParameterName.TABLE_STATS.getDisplayName());
  param.setFieldType(EParameterFieldType.DBTABLE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(57);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.TABLE_LOGS.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.TABLE_LOGS.getName())));
  param.setDisplayName(EParameterName.TABLE_LOGS.getDisplayName());
  param.setFieldType(EParameterFieldType.DBTABLE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(58);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  param=new ElementParameter(process);
  param.setName(EParameterName.TABLE_METER.getName());
  param.setValue(addQuotes(preferenceStore.getString(languagePrefix + EParameterName.TABLE_METER.getName())));
  param.setDisplayName(EParameterName.TABLE_METER.getDisplayName());
  param.setFieldType(EParameterFieldType.DBTABLE);
  param.setCategory(EComponentCategory.STATSANDLOGS);
  param.setNumRow(59);
  param.setShowIf(""String_Node_Str"");
  paramList.add(param);
  return paramList;
}",0.9969113633098692
124290,"/** 
 * Creates parameters for tabbed page 'Main'.
 */
private void createMainParameters(){
  ElementParameter param;
  param=new ElementParameter(this);
  param.setName(EParameterName.COMP_DEFAULT_FILE_DIR.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setDisplayName(EParameterName.COMP_DEFAULT_FILE_DIR.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPreferenceStore().getString(TalendDesignerPrefConstants.COMP_DEFAULT_FILE_DIR));
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.PRODUCT_ROOT_DIR.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setDisplayName(EParameterName.PRODUCT_ROOT_DIR.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPreferenceStore().getString(TalendDesignerPrefConstants.PRODUCT_ROOT_DIR));
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.COMP_DEFAULT_PROJECT_DIR.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setDisplayName(EParameterName.COMP_DEFAULT_PROJECT_DIR.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPreferenceStore().getString(TalendDesignerPrefConstants.COMP_DEFAULT_PROJECT_DIR));
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.JOB_RUN_VM_ARGUMENTS.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.JOB_RUN_VM_ARGUMENTS.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  IRunProcessService service=DesignerPlugin.getDefault().getRunProcessService();
  if (service != null) {
    param.setValue(service.getPreferenceStore().getString(""String_Node_Str""));
  }
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.JOB_RUN_VM_ARGUMENTS_OPTION.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.CHECK);
  param.setDisplayName(EParameterName.JOB_RUN_VM_ARGUMENTS_OPTION.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(false);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.AUTHOR.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.AUTHOR.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.STATUS.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.STATUS.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.NAME.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.NAME.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.VERSION.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.VERSION.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.PURPOSE.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.PURPOSE.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.DESCRIPTION.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.DESCRIPTION.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(SCREEN_OFFSET_X);
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setShow(false);
  param.setReadOnly(false);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(SCREEN_OFFSET_Y);
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setShow(false);
  param.setReadOnly(false);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.SCHEMA_OPTIONS.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.SCHEMA_OPTIONS.getDisplayName());
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPluginPreferences().getString(TalendDesignerPrefConstants.SCHEMA_OPTIONS));
  param.setReadOnly(true);
  addElementParameter(param);
}","/** 
 * Creates parameters for tabbed page 'Main'.
 */
private void createMainParameters(){
  ElementParameter param;
  param=new ElementParameter(this);
  param.setName(EParameterName.COMP_DEFAULT_FILE_DIR.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setDisplayName(EParameterName.COMP_DEFAULT_FILE_DIR.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPreferenceStore().getString(TalendDesignerPrefConstants.COMP_DEFAULT_FILE_DIR));
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.PRODUCT_ROOT_DIR.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setDisplayName(EParameterName.PRODUCT_ROOT_DIR.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPreferenceStore().getString(TalendDesignerPrefConstants.PRODUCT_ROOT_DIR));
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.COMP_DEFAULT_PROJECT_DIR.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.DIRECTORY);
  param.setDisplayName(EParameterName.COMP_DEFAULT_PROJECT_DIR.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPreferenceStore().getString(TalendDesignerPrefConstants.COMP_DEFAULT_PROJECT_DIR));
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.JOB_RUN_VM_ARGUMENTS.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.JOB_RUN_VM_ARGUMENTS.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  IRunProcessService service=DesignerPlugin.getDefault().getRunProcessService();
  if (service != null) {
    param.setValue(service.getPreferenceStore().getString(""String_Node_Str""));
  }
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.JOB_RUN_VM_ARGUMENTS_OPTION.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.CHECK);
  param.setDisplayName(EParameterName.JOB_RUN_VM_ARGUMENTS_OPTION.getDisplayName());
  param.setNumRow(99);
  param.setShow(false);
  param.setValue(false);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.AUTHOR.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.AUTHOR.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.STATUS.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.STATUS.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.NAME.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.NAME.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.VERSION.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.VERSION.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.PURPOSE.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.PURPOSE.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.DESCRIPTION.getName());
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.DESCRIPTION.getDisplayName());
  param.setShow(false);
  param.setReadOnly(true);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(SCREEN_OFFSET_X);
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setShow(false);
  param.setReadOnly(false);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(SCREEN_OFFSET_Y);
  param.setCategory(EComponentCategory.TECHNICAL);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setShow(false);
  param.setReadOnly(false);
  addElementParameter(param);
  param=new ElementParameter(this);
  param.setName(EParameterName.SCHEMA_OPTIONS.getName());
  param.setCategory(EComponentCategory.MAIN);
  param.setFieldType(EParameterFieldType.TEXT);
  param.setDisplayName(EParameterName.SCHEMA_OPTIONS.getDisplayName());
  param.setShow(false);
  param.setValue(DesignerPlugin.getDefault().getPluginPreferences().getString(TalendDesignerPrefConstants.SCHEMA_OPTIONS));
  param.setReadOnly(true);
  addElementParameter(param);
}",0.997021929428752
124291,"/** 
 * create parameters for tabbed page 'Job Settings'.
 */
protected void createJobSettingsParameters(){
  JobSettingsManager.createJobSettingsParemeters(this);
}","/** 
 * create parameters for tabbed page 'Job Settings'.
 */
protected void createJobSettingsParameters(){
  ((List<IElementParameter>)this.getElementParameters()).addAll(JobSettingsManager.getJobSettingsParameters(this));
}",0.7384615384615385
124292,"private void saveElementParameter(IElementParameter param,ProcessType process,TalendFileFactory fileFact,List<? extends IElementParameter> paramList,EList listParamType){
  ElementParameterType pType;
  boolean isJoblet=false;
  if (param.getElement() instanceof INode && PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent((INode)param.getElement())) {
      isJoblet=true;
    }
  }
  if (param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.PROPERTY_TYPE) || param.getFieldType().equals(EParameterFieldType.VALIDATION_RULE_TYPE)|| param.getName().equals(EParameterName.UPDATE_COMPONENTS.getName())) {
    return;
  }
  if (param.getParentParameter() != null) {
    if (param.getParentParameter().getFieldType().equals(EParameterFieldType.PROPERTY_TYPE)) {
      IElementParameter paramBuiltInRepository=param.getParentParameter().getChildParameters().get(EParameterName.PROPERTY_TYPE.getName());
      if (paramBuiltInRepository.getValue().equals(EmfComponent.BUILTIN)) {
        return;
      }
    }
    if (param.getParentParameter().getFieldType().equals(EParameterFieldType.SCHEMA_TYPE)) {
      IElementParameter paramBuiltInRepository=param.getParentParameter().getChildParameters().get(EParameterName.SCHEMA_TYPE.getName());
      if (isJoblet && param.getName().equals(EParameterName.CONNECTION.getName())) {
      }
 else       if (paramBuiltInRepository.getValue().equals(EmfComponent.BUILTIN)) {
        return;
      }
    }
    if (param.getParentParameter().getFieldType().equals(EParameterFieldType.VALIDATION_RULE_TYPE)) {
      IElementParameter paramBuiltInRepository=param.getParentParameter().getChildParameters().get(EParameterName.VALIDATION_RULE_TYPE.getName());
      if (paramBuiltInRepository.getValue().equals(EmfComponent.BUILTIN)) {
        return;
      }
    }
  }
  if (param.getElement() instanceof Process) {
    if (isJoblet) {
      if (param != null && !(param.getName().equals(EParameterName.STARTABLE.getName()))) {
        return;
      }
    }
  }
  if (param.getElement() instanceof Node) {
    Node curNode=(Node)param.getElement();
    IComponent component=ComponentsFactoryProvider.getInstance().get(curNode.getComponent().getName());
    if (param != null && param.getName().equals(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName())) {
      return;
    }
    if (component instanceof EmfComponent) {
      DataNode tempNode=new DataNode();
      tempNode.setElementParameters(new ArrayList<IElementParameter>());
      ((EmfComponent)component).addMainParameters((List<ElementParameter>)tempNode.getElementParameters(),tempNode);
      ((EmfComponent)component).addViewParameters((List<ElementParameter>)tempNode.getElementParameters(),tempNode);
      IElementParameter tmpParam1=tempNode.getElementParameter(param.getName());
      if (tmpParam1 != null && tmpParam1.getValue() != null && tmpParam1.getValue().equals(param.getValue())) {
        return;
      }
      if (tmpParam1 != null && StringUtils.equals(tmpParam1.getValue() == null ? null : tmpParam1.getValue().toString(),param.getValue() == null ? null : param.getValue().toString())) {
        return;
      }
    }
  }
  if (param.getElement() instanceof SubjobContainer) {
    SubjobContainer subjob=new SubjobContainer(this);
    IElementParameter subjobParam=subjob.getElementParameter(param.getName());
    if (subjobParam != null && subjobParam.getValue() != null && subjobParam.getValue().equals(param.getValue())) {
      return;
    }
  }
  pType=fileFact.createElementParameterType();
  if (param.getParentParameter() != null) {
    pType.setName(param.getParentParameter().getName() + ""String_Node_Str"" + param.getName());
  }
 else {
    pType.setName(param.getName());
  }
  pType.setField(param.getFieldType().getName());
  if (param.isContextMode()) {
    pType.setContextMode(param.isContextMode());
  }
  Object value=param.getValue();
  if (param.getFieldType().equals(EParameterFieldType.TABLE) && value != null) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> currentLine : tableValues) {
      for (int i=0; i < param.getListItemsDisplayCodeName().length; i++) {
        ElementValueType elementValue=fileFact.createElementValueType();
        elementValue.setElementRef(param.getListItemsDisplayCodeName()[i]);
        Object o=currentLine.get(param.getListItemsDisplayCodeName()[i]);
        String strValue=""String_Node_Str"";
        if (o instanceof Integer) {
          IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
          if (tmpParam.getListItemsValue().length == 0) {
            strValue=""String_Node_Str"";
          }
 else {
            strValue=(String)tmpParam.getListItemsValue()[(Integer)o];
          }
        }
 else {
          if (o instanceof String) {
            strValue=(String)o;
          }
 else {
            if (o instanceof Boolean) {
              strValue=((Boolean)o).toString();
            }
          }
        }
        elementValue.setValue(strValue);
        Object object=currentLine.get(param.getListItemsDisplayCodeName()[i] + IEbcdicConstant.REF_TYPE);
        if (object != null) {
          elementValue.setType((String)object);
        }
        pType.getElementValue().add(elementValue);
      }
    }
  }
 else {
    if (value == null) {
      pType.setValue(""String_Node_Str"");
    }
 else {
      if (value instanceof Boolean) {
        pType.setValue(((Boolean)value).toString());
      }
 else {
        if (value instanceof String) {
          pType.setValue((String)value);
        }
      }
    }
  }
  listParamType.add(pType);
}","private void saveElementParameter(IElementParameter param,ProcessType process,TalendFileFactory fileFact,List<? extends IElementParameter> paramList,EList listParamType){
  ElementParameterType pType;
  boolean isJoblet=false;
  if (param.getElement() instanceof INode && PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null && service.isJobletComponent((INode)param.getElement())) {
      isJoblet=true;
    }
  }
  if (param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.PROPERTY_TYPE) || param.getFieldType().equals(EParameterFieldType.VALIDATION_RULE_TYPE)|| param.getName().equals(EParameterName.UPDATE_COMPONENTS.getName())) {
    return;
  }
  if (param.getParentParameter() != null) {
    if (param.getParentParameter().getFieldType().equals(EParameterFieldType.PROPERTY_TYPE)) {
      IElementParameter paramBuiltInRepository=param.getParentParameter().getChildParameters().get(EParameterName.PROPERTY_TYPE.getName());
      if (paramBuiltInRepository.getValue().equals(EmfComponent.BUILTIN)) {
        return;
      }
    }
    if (param.getParentParameter().getFieldType().equals(EParameterFieldType.SCHEMA_TYPE)) {
      IElementParameter paramBuiltInRepository=param.getParentParameter().getChildParameters().get(EParameterName.SCHEMA_TYPE.getName());
      if (isJoblet && param.getName().equals(EParameterName.CONNECTION.getName())) {
      }
 else       if (paramBuiltInRepository.getValue().equals(EmfComponent.BUILTIN)) {
        return;
      }
    }
    if (param.getParentParameter().getFieldType().equals(EParameterFieldType.VALIDATION_RULE_TYPE)) {
      IElementParameter paramBuiltInRepository=param.getParentParameter().getChildParameters().get(EParameterName.VALIDATION_RULE_TYPE.getName());
      if (paramBuiltInRepository.getValue().equals(EmfComponent.BUILTIN)) {
        return;
      }
    }
  }
  if (param.getElement() instanceof Process) {
    if (param.isReadOnly() && param.getCategory() == EComponentCategory.TECHNICAL) {
      return;
    }
    if (isJoblet) {
      if (param != null && !(param.getName().equals(EParameterName.STARTABLE.getName()))) {
        return;
      }
    }
    for (    IElementParameter currentParam : JobSettingsManager.getJobSettingsParameters(this)) {
      if (currentParam.getName().equals(param.getName())) {
        if (currentParam.getValue() != null && currentParam.getValue().equals(param.getValue())) {
          return;
        }
      }
    }
  }
  if (param.getElement() instanceof Node) {
    Node curNode=(Node)param.getElement();
    IComponent component=ComponentsFactoryProvider.getInstance().get(curNode.getComponent().getName());
    if (param != null && param.getName().equals(EParameterName.REPOSITORY_ALLOW_AUTO_SWITCH.getName())) {
      return;
    }
    if (component instanceof EmfComponent) {
      DataNode tempNode=new DataNode();
      tempNode.setElementParameters(new ArrayList<IElementParameter>());
      ((EmfComponent)component).addMainParameters((List<ElementParameter>)tempNode.getElementParameters(),tempNode);
      ((EmfComponent)component).addViewParameters((List<ElementParameter>)tempNode.getElementParameters(),tempNode);
      IElementParameter tmpParam1=tempNode.getElementParameter(param.getName());
      if (tmpParam1 != null && tmpParam1.getValue() != null && tmpParam1.getValue().equals(param.getValue())) {
        return;
      }
      if (tmpParam1 != null && StringUtils.equals(tmpParam1.getValue() == null ? null : tmpParam1.getValue().toString(),param.getValue() == null ? null : param.getValue().toString())) {
        return;
      }
    }
  }
  if (param.getElement() instanceof SubjobContainer) {
    SubjobContainer subjob=new SubjobContainer(this);
    IElementParameter subjobParam=subjob.getElementParameter(param.getName());
    if (subjobParam != null && subjobParam.getValue() != null && subjobParam.getValue().equals(param.getValue())) {
      return;
    }
  }
  pType=fileFact.createElementParameterType();
  if (param.getParentParameter() != null) {
    pType.setName(param.getParentParameter().getName() + ""String_Node_Str"" + param.getName());
  }
 else {
    pType.setName(param.getName());
  }
  pType.setField(param.getFieldType().getName());
  if (param.isContextMode()) {
    pType.setContextMode(param.isContextMode());
  }
  Object value=param.getValue();
  if (param.getFieldType().equals(EParameterFieldType.TABLE) && value != null) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)value;
    for (    Map<String,Object> currentLine : tableValues) {
      for (int i=0; i < param.getListItemsDisplayCodeName().length; i++) {
        ElementValueType elementValue=fileFact.createElementValueType();
        elementValue.setElementRef(param.getListItemsDisplayCodeName()[i]);
        Object o=currentLine.get(param.getListItemsDisplayCodeName()[i]);
        String strValue=""String_Node_Str"";
        if (o instanceof Integer) {
          IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
          if (tmpParam.getListItemsValue().length == 0) {
            strValue=""String_Node_Str"";
          }
 else {
            strValue=(String)tmpParam.getListItemsValue()[(Integer)o];
          }
        }
 else {
          if (o instanceof String) {
            strValue=(String)o;
          }
 else {
            if (o instanceof Boolean) {
              strValue=((Boolean)o).toString();
            }
          }
        }
        elementValue.setValue(strValue);
        Object object=currentLine.get(param.getListItemsDisplayCodeName()[i] + IEbcdicConstant.REF_TYPE);
        if (object != null) {
          elementValue.setType((String)object);
        }
        pType.getElementValue().add(elementValue);
      }
    }
  }
 else {
    if (value == null) {
      pType.setValue(""String_Node_Str"");
    }
 else {
      if (value instanceof Boolean) {
        pType.setValue(((Boolean)value).toString());
      }
 else {
        if (value instanceof String) {
          pType.setValue((String)value);
        }
      }
    }
  }
  listParamType.add(pType);
}",0.966570367313248
124293,"public boolean finish(){
  BusyIndicator.showWhile(Display.getDefault(),new Runnable(){
    public void run(){
      for (Iterator<File> iter=newJarFiles.values().iterator(); iter.hasNext(); ) {
        File file=iter.next();
        try {
          CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      try {
        CorePlugin.getDefault().getProxyRepositoryFactory().save(getSelectedRoutine());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
      CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
    }
  }
);
  return true;
}","public boolean finish(){
  BusyIndicator.showWhile(Display.getDefault(),new Runnable(){
    public void run(){
      for (Iterator<File> iter=newJarFiles.values().iterator(); iter.hasNext(); ) {
        File file=iter.next();
        try {
          CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      try {
        CorePlugin.getDefault().getProxyRepositoryFactory().save(getSelectedRoutine());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
      CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
      CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<String>(),null);
    }
  }
);
  return true;
}",0.9352708058124174
124294,"public void loadXmlFile(boolean loadScreenshots){
  this.loadScreenshots=loadScreenshots;
  init();
  Hashtable<String,Node> nodesHashtable=new Hashtable<String,Node>();
  setActivate(false);
  ProcessType processType=getProcessType();
  if (processType.getParameters() != null) {
    routinesDependencies=new ArrayList<RoutinesParameterType>(processType.getParameters().getRoutinesParameter());
  }
  loadProjectParameters(processType);
  try {
    loadNodes(processType,nodesHashtable);
  }
 catch (  PersistenceException e) {
    return;
  }
  repositoryId=processType.getRepositoryContextId();
  loadConnections(processType,nodesHashtable);
  loadRejectConnector(nodesHashtable);
  loadContexts(processType);
  loadNotes(processType);
  loadSubjobs(processType);
  initExternalComponents();
  setActivate(true);
  checkStartNodes();
  checkNodeTableParameters();
  XmiResourceManager resourceManager=new XmiResourceManager();
  if (this.loadScreenshots) {
    if (property.eResource() != null) {
      resourceManager.loadScreenshots(property,processType);
    }
  }
  this.updateManager.retrieveRefInformation();
}","public void loadXmlFile(boolean loadScreenshots){
  this.loadScreenshots=loadScreenshots;
  init();
  Hashtable<String,Node> nodesHashtable=new Hashtable<String,Node>();
  setActivate(false);
  ProcessType processType=getProcessType();
  if (processType.getParameters() != null) {
    routinesDependencies=new ArrayList<RoutinesParameterType>(processType.getParameters().getRoutinesParameter());
  }
  loadProjectParameters(processType);
  try {
    loadNodes(processType,nodesHashtable);
  }
 catch (  PersistenceException e) {
    return;
  }
  repositoryId=processType.getRepositoryContextId();
  loadConnections(processType,nodesHashtable);
  loadRejectConnector(nodesHashtable);
  loadContexts(processType);
  loadNotes(processType);
  loadSubjobs(processType);
  initExternalComponents();
  setActivate(true);
  checkStartNodes();
  checkNodeTableParameters();
  XmiResourceManager resourceManager=new XmiResourceManager();
  if (this.loadScreenshots) {
    if (property.eResource() != null) {
      resourceManager.loadScreenshots(property,processType);
    }
  }
  this.updateManager.retrieveRefInformation();
  checkRoutineDependencies();
}",0.9867724867724867
124295,"public static boolean isExpressionEditable(TreeNode treeNode){
  List children=treeNode.getChildren();
  boolean haschild=false;
  for (int i=0; i < children.size(); i++) {
    TreeNode child=(TreeNode)children.get(i);
    if (NodeType.ATTRIBUT != child.getNodeType() && NodeType.NAME_SPACE != child.getNodeType()) {
      haschild=true;
      break;
    }
  }
  return !haschild;
}","public static boolean isExpressionEditable(TreeNode treeNode){
  List children=treeNode.getChildren();
  boolean haschild=false;
  boolean isNameSpace=false;
  if (children.size() > 0) {
    for (int i=0; i < children.size(); i++) {
      TreeNode child=(TreeNode)children.get(i);
      if (NodeType.ATTRIBUT != child.getNodeType() && NodeType.NAME_SPACE != child.getNodeType()) {
        haschild=true;
        break;
      }
    }
  }
 else   if (NodeType.NAME_SPACE.equals(treeNode.getNodeType())) {
    isNameSpace=true;
  }
  return !haschild && !isNameSpace;
}",0.79957805907173
124296,"private void prepareModelFromOutput(List<XMLFileNode> root,List<XMLFileNode> loop,List<XMLFileNode> group){
  TreeNode rootNode=null;
  TreeNode lastTreeNode=parentNode;
  TreeNode temp=null;
  TreeNode mainNode=parentNode;
  String mainPath=null;
  String lastXmlPath=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  List<TreeNode> groupElements=new ArrayList<TreeNode>();
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
      groupElements.add(temp);
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  isFirst=true;
  TreeNode loopElement=null;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopElement=temp;
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  if (loopElement != null && !groupElements.isEmpty()) {
    fillGroup(loopElement,groupElements);
  }
  if (rootNode != null) {
    parentNode.getChildren().add(rootNode);
  }
}","private void prepareModelFromOutput(List<XMLFileNode> root,List<XMLFileNode> loop,List<XMLFileNode> group){
  TreeNode rootNode=null;
  TreeNode lastTreeNode=parentNode;
  TreeNode temp=null;
  TreeNode mainNode=parentNode;
  String mainPath=null;
  String lastXmlPath=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        mainNode=temp;
        mainPath=newPath;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  List<TreeNode> groupElements=new ArrayList<TreeNode>();
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
      groupElements.add(temp);
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  isFirst=true;
  TreeNode loopElement=null;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        XmlMapUtil.upsetMainNode(temp);
        loopElement=temp;
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  if (loopElement != null && !groupElements.isEmpty()) {
    fillGroup(loopElement,groupElements);
  }
  if (rootNode != null) {
    parentNode.getChildren().add(rootNode);
  }
}",0.9870725604670558
124297,"public void initModel(){
  IMetadataTable metadataTable=foxComponent.getMetadataTable();
  if (metadataTable == null) {
    metadataTable=new MetadataTable();
  }
  String componentName=foxComponent.getComponent().getName();
  IConnection inConn=null;
  for (  IConnection conn : foxComponent.getIncomingConnections()) {
    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) || (conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
      inConn=conn;
      break;
    }
  }
  if (inConn != null) {
    metadataTable=inConn.getMetadataTable();
  }
  treeData=new ArrayList<FOXTreeNode>();
  FOXTreeNode rootNode=null;
  FOXTreeNode current=null;
  FOXTreeNode temp=null;
  FOXTreeNode mainNode=null;
  String mainPath=null;
  String currentPath=null;
  String defaultValue=null;
  int nodeOrder=0;
  boolean haveOrder=true;
  List<Map<String,String>> rootTable=(List<Map<String,String>>)foxComponent.getTableList(FileOutputXMLComponent.ROOT);
  for (  Map<String,String> rootMap : rootTable) {
    String newPath=rootMap.get(FileOutputXMLComponent.PATH);
    defaultValue=rootMap.get(FileOutputXMLComponent.VALUE);
    String orderValue=rootMap.get(FileOutputXMLComponent.ORDER);
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=Integer.valueOf(rootMap.get(FileOutputXMLComponent.ORDER)).intValue();
    }
    if (rootMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      current.addChild(temp);
    }
 else     if (rootMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (rootMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=rootMap.get(FileOutputXMLComponent.COLUMN);
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(metadataTable.getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  boolean isFirst=true;
  List<Map<String,String>> groupTable=(List<Map<String,String>>)foxComponent.getTableList(FileOutputXMLComponent.GROUP);
  for (  Map<String,String> groupMap : groupTable) {
    String newPath=groupMap.get(FileOutputXMLComponent.PATH);
    defaultValue=groupMap.get(FileOutputXMLComponent.VALUE);
    String orderValue=groupMap.get(FileOutputXMLComponent.ORDER);
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=Integer.valueOf(groupMap.get(FileOutputXMLComponent.ORDER)).intValue();
    }
    if (groupMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      current.addChild(temp);
    }
 else     if (groupMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      if (groupMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=groupMap.get(FileOutputXMLComponent.COLUMN);
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(metadataTable.getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  isFirst=true;
  List<Map<String,String>> loopTable=(List<Map<String,String>>)foxComponent.getTableList(FileOutputXMLComponent.LOOP);
  for (  Map<String,String> loopMap : loopTable) {
    String newPath=loopMap.get(FileOutputXMLComponent.PATH);
    defaultValue=loopMap.get(FileOutputXMLComponent.VALUE);
    String orderValue=loopMap.get(FileOutputXMLComponent.ORDER);
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=Integer.valueOf(loopMap.get(FileOutputXMLComponent.ORDER)).intValue();
    }
    if (loopMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      current.addChild(temp);
    }
 else     if (loopMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      if (loopMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
        temp.setMain(true);
      }
      if (isFirst) {
        temp.setLoop(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=loopMap.get(FileOutputXMLComponent.COLUMN);
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(metadataTable.getColumn(columnName));
    }
  }
  if (rootNode == null) {
    rootNode=new Element(""String_Node_Str"");
  }
  rootNode.setParent(null);
  if (haveOrder) {
    orderNode(rootNode);
  }
  treeData.add(rootNode);
}","public void initModel(){
  IMetadataTable metadataTable=foxComponent.getMetadataTable();
  if (metadataTable == null) {
    metadataTable=new MetadataTable();
  }
  String componentName=foxComponent.getComponent().getName();
  IConnection inConn=null;
  for (  IConnection conn : foxComponent.getIncomingConnections()) {
    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) || (conn.getLineStyle().equals(EConnectionType.FLOW_REF))) {
      inConn=conn;
      break;
    }
  }
  if (inConn != null) {
    metadataTable=inConn.getMetadataTable();
  }
  treeData=new ArrayList<FOXTreeNode>();
  FOXTreeNode rootNode=null;
  FOXTreeNode current=null;
  FOXTreeNode temp=null;
  FOXTreeNode mainNode=null;
  String mainPath=null;
  String currentPath=null;
  String defaultValue=null;
  int nodeOrder=0;
  boolean haveOrder=true;
  List<Map<String,String>> rootTable=(List<Map<String,String>>)foxComponent.getTableList(FileOutputXMLComponent.ROOT);
  for (  Map<String,String> rootMap : rootTable) {
    String newPath=rootMap.get(FileOutputXMLComponent.PATH);
    defaultValue=rootMap.get(FileOutputXMLComponent.VALUE);
    String orderValue=rootMap.get(FileOutputXMLComponent.ORDER);
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=Integer.valueOf(rootMap.get(FileOutputXMLComponent.ORDER)).intValue();
    }
    if (rootMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      current.addChild(temp);
    }
 else     if (rootMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (rootMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=rootMap.get(FileOutputXMLComponent.COLUMN);
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(metadataTable.getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  boolean isFirst=true;
  List<Map<String,String>> groupTable=(List<Map<String,String>>)foxComponent.getTableList(FileOutputXMLComponent.GROUP);
  for (  Map<String,String> groupMap : groupTable) {
    String newPath=groupMap.get(FileOutputXMLComponent.PATH);
    defaultValue=groupMap.get(FileOutputXMLComponent.VALUE);
    String orderValue=groupMap.get(FileOutputXMLComponent.ORDER);
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=Integer.valueOf(groupMap.get(FileOutputXMLComponent.ORDER)).intValue();
    }
    if (groupMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      current.addChild(temp);
    }
 else     if (groupMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      if (groupMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=groupMap.get(FileOutputXMLComponent.COLUMN);
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(metadataTable.getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  isFirst=true;
  List<Map<String,String>> loopTable=(List<Map<String,String>>)foxComponent.getTableList(FileOutputXMLComponent.LOOP);
  for (  Map<String,String> loopMap : loopTable) {
    String newPath=loopMap.get(FileOutputXMLComponent.PATH);
    defaultValue=loopMap.get(FileOutputXMLComponent.VALUE);
    String orderValue=loopMap.get(FileOutputXMLComponent.ORDER);
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=Integer.valueOf(loopMap.get(FileOutputXMLComponent.ORDER)).intValue();
    }
    if (loopMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      current.addChild(temp);
    }
 else     if (loopMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (loopMap.get(FileOutputXMLComponent.ATTRIBUTE).equals(""String_Node_Str"")) {
        temp.setMain(true);
      }
      if (isFirst) {
        temp.setLoop(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=loopMap.get(FileOutputXMLComponent.COLUMN);
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(metadataTable.getColumn(columnName));
    }
  }
  if (rootNode == null) {
    rootNode=new Element(""String_Node_Str"");
  }
  rootNode.setParent(null);
  if (haveOrder) {
    orderNode(rootNode);
  }
  treeData.add(rootNode);
}",0.995011041138464
124298,"@Override protected void createColumns(final TableViewerCreator<TreeSchemaTableEntry> tableViewerCreator,Table table){
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setId(ID_COLUMN_XPATH);
  column.setWeight(20);
  column.setModifiable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<TreeSchemaTableEntry,Object>(){
    public Object get(    TreeSchemaTableEntry bean){
      return bean.getXPath();
    }
    public void set(    TreeSchemaTableEntry bean,    Object value){
      if (isValidName) {
        bean.setName((String)value);
        XmlMapData mapperData=XmlMapUtil.getXmlMapData(bean.getTreeNode());
        XmlMapUtil.updateXPathAndExpression(mapperData,bean.getTreeNode(),bean.getName(),XmlMapUtil.getXPathLength(bean.getXPath()),true);
        if (!bean.getTreeNode().getChildren().isEmpty()) {
          refresh();
        }
      }
    }
  }
);
  final TextCellEditor cellEditor=new TextCellEditor(tableViewerCreator.getTable());
  cellEditor.addListener(new DialogErrorForCellEditorListener(cellEditor,column){
    @Override public void newValidValueTyped(    int itemIndex,    Object previousValue,    Object newValue,    CELL_EDITOR_STATE state){
    }
    @Override public String validateValue(    String newValue,    int beanPosition){
      return validateXPath(newValue,beanPosition);
    }
  }
);
  column.setCellEditor(cellEditor);
  column.setColumnCellModifier(new ColumnCellModifier(column){
    @Override public Object getValue(    Object bean){
      TreeSchemaTableEntry entry=(TreeSchemaTableEntry)bean;
      return entry.getName();
    }
    @Override public boolean modify(    Object bean,    Object value){
      return false;
    }
  }
);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setId(ID_COLUMN_KEY);
  column.setDisplayedValue(""String_Node_Str"");
  column.setWeight(10);
  column.setModifiable(true);
  CheckboxTableEditorContent checkbox=new CheckboxTableEditorContent();
  column.setTableEditorContent(checkbox);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<TreeSchemaTableEntry,Boolean>(){
    public Boolean get(    TreeSchemaTableEntry bean){
      return bean.isKey();
    }
    public void set(    TreeSchemaTableEntry bean,    Boolean value){
      bean.setKey(value);
    }
  }
);
  String[] arrayTalendTypes=new String[0];
  try {
    arrayTalendTypes=MetadataTalendType.getTalendTypesLabels();
  }
 catch (  NoClassDefFoundError e) {
    ExceptionHandler.process(e);
  }
catch (  ExceptionInInitializerError e) {
    ExceptionHandler.process(e);
  }
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setId(ID_COLUMN_TYPE);
  column.setBeanPropertyAccessors(getTalendTypeAccessor());
  column.setModifiable(true);
  column.setWeight(20);
  ComboBoxCellEditor typeComboEditor=new ComboBoxCellEditor(tableViewerCreator.getTable(),arrayTalendTypes,SWT.READ_ONLY);
  CCombo typeCombo=(CCombo)typeComboEditor.getControl();
  CellEditorValueAdapter comboValueAdapter=new JavaTypeComboValueAdapter<TreeSchemaTableEntry>(JavaTypesManager.getDefaultJavaType(),getNullableAccessor());
  typeCombo.setEditable(false);
  column.setCellEditor(typeComboEditor,comboValueAdapter);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setId(ID_COLUMN_NULLABLE);
  column.setBeanPropertyAccessors(getNullableAccessor());
  column.setWeight(20);
  column.setDisplayedValue(""String_Node_Str"");
  column.setModifiable(true);
  column.setTableColumnSelectionListener(new CheckColumnSelectionListener(column,tableViewerCreator));
  column.setImageHeader(ImageProvider.getImage(EImage.CHECKED_ICON));
  CheckboxTableEditorContent nullableCheckbox=new CheckboxTableEditorContent();
  column.setTableEditorContent(nullableCheckbox);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setId(ID_COLUMN_PATTERN);
  column.setWeight(20);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<TreeSchemaTableEntry,String>(){
    public String get(    TreeSchemaTableEntry bean){
      return bean.getPattern();
    }
    public void set(    TreeSchemaTableEntry bean,    String value){
      bean.setPattern(value);
    }
  }
);
  final ColumnCellModifier columnCellModifier=new ColumnCellModifier(column){
    public boolean canModify(    Object bean){
      boolean typeIsDate=currentBeanHasJavaDateType(bean) && !isReadOnly();
      return typeIsDate;
    }
  }
;
  column.setColorProvider(new IColumnColorProvider(){
    public Color getBackgroundColor(    Object bean){
      if (!columnCellModifier.canModify(bean)) {
        return READONLY_CELL_BG_COLOR;
      }
      return null;
    }
    public Color getForegroundColor(    Object bean){
      return null;
    }
  }
);
  column.setLabelProvider(new IColumnLabelProvider(){
    public String getLabel(    Object bean){
      if (!currentBeanHasJavaDateType(bean)) {
        return ""String_Node_Str"";
      }
      return null;
    }
  }
);
  column.setColumnCellModifier(columnCellModifier);
  JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
  TextCellEditorWithProposal patternCellEditor=new TextCellEditorWithProposal(tableViewerCreator.getTable(),column);
  ContentProposalAdapterExtended contentProposalAdapter=patternCellEditor.getContentProposalAdapter();
  contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
  patternCellEditor.setContentProposalProvider(proposalProvider);
  column.setCellEditor(patternCellEditor,CellEditorValueAdapterFactory.getNullToEmptyStringTextAdapater());
  tableViewerCreator.setCellModifier(new XmlCellModifier(tableViewerCreator));
}","@Override protected void createColumns(final TableViewerCreator<TreeSchemaTableEntry> tableViewerCreator,Table table){
  TableViewerCreatorColumn column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setId(ID_COLUMN_XPATH);
  column.setWeight(20);
  column.setModifiable(true);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<TreeSchemaTableEntry,Object>(){
    public Object get(    TreeSchemaTableEntry bean){
      return bean.getXPath();
    }
    public void set(    TreeSchemaTableEntry bean,    Object value){
      if (isValidName) {
        bean.setName((String)value);
        XmlMapData mapperData=XmlMapUtil.getXmlMapData(bean.getTreeNode());
        XmlMapUtil.updateXPathAndExpression(mapperData,bean.getTreeNode(),bean.getName(),XmlMapUtil.getXPathLength(bean.getXPath()),true);
        if (!bean.getTreeNode().getChildren().isEmpty()) {
          refresh();
        }
      }
    }
  }
);
  final TextCellEditor cellEditor=new TextCellEditor(tableViewerCreator.getTable());
  cellEditor.addListener(new DialogErrorForCellEditorListener(cellEditor,column){
    @Override public void newValidValueTyped(    int itemIndex,    Object previousValue,    Object newValue,    CELL_EDITOR_STATE state){
    }
    @Override public String validateValue(    String newValue,    int beanPosition){
      return validateXPath(newValue,beanPosition);
    }
  }
);
  column.setCellEditor(cellEditor);
  column.setColumnCellModifier(new ColumnCellModifier(column){
    @Override public Object getValue(    Object bean){
      TreeSchemaTableEntry entry=(TreeSchemaTableEntry)bean;
      return entry.getName();
    }
    @Override public boolean modify(    Object bean,    Object value){
      return false;
    }
  }
);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setId(ID_COLUMN_KEY);
  column.setDisplayedValue(""String_Node_Str"");
  column.setWeight(10);
  column.setModifiable(true);
  CheckboxTableEditorContent checkbox=new CheckboxTableEditorContent();
  column.setTableEditorContent(checkbox);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<TreeSchemaTableEntry,Boolean>(){
    public Boolean get(    TreeSchemaTableEntry bean){
      return bean.isKey();
    }
    public void set(    TreeSchemaTableEntry bean,    Boolean value){
      bean.setKey(value);
    }
  }
);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setId(ID_COLUMN_TYPE);
  column.setBeanPropertyAccessors(getTalendTypeAccessor());
  column.setModifiable(true);
  column.setWeight(20);
  TreeSchemaJavaTypeComboValueAdapter comboValueAdapter=new TreeSchemaJavaTypeComboValueAdapter<TreeSchemaTableEntry>(JavaTypesManager.getDefaultJavaType(),getNullableAccessor());
  ComboBoxCellEditor typeComboEditor=new ComboBoxCellEditor(tableViewerCreator.getTable(),comboValueAdapter.getTalendTypesLabels(),SWT.READ_ONLY);
  CCombo typeCombo=(CCombo)typeComboEditor.getControl();
  typeCombo.setEditable(false);
  column.setCellEditor(typeComboEditor,comboValueAdapter);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setToolTipHeader(""String_Node_Str"");
  column.setId(ID_COLUMN_NULLABLE);
  column.setBeanPropertyAccessors(getNullableAccessor());
  column.setWeight(20);
  column.setDisplayedValue(""String_Node_Str"");
  column.setModifiable(true);
  column.setTableColumnSelectionListener(new CheckColumnSelectionListener(column,tableViewerCreator));
  column.setImageHeader(ImageProvider.getImage(EImage.CHECKED_ICON));
  CheckboxTableEditorContent nullableCheckbox=new CheckboxTableEditorContent();
  column.setTableEditorContent(nullableCheckbox);
  column=new TableViewerCreatorColumn(tableViewerCreator);
  column.setTitle(""String_Node_Str"");
  column.setId(ID_COLUMN_PATTERN);
  column.setWeight(20);
  column.setBeanPropertyAccessors(new IBeanPropertyAccessors<TreeSchemaTableEntry,String>(){
    public String get(    TreeSchemaTableEntry bean){
      return bean.getPattern();
    }
    public void set(    TreeSchemaTableEntry bean,    String value){
      bean.setPattern(value);
    }
  }
);
  final ColumnCellModifier columnCellModifier=new ColumnCellModifier(column){
    public boolean canModify(    Object bean){
      boolean typeIsDate=currentBeanHasJavaDateType(bean) && !isReadOnly();
      return typeIsDate;
    }
  }
;
  column.setColorProvider(new IColumnColorProvider(){
    public Color getBackgroundColor(    Object bean){
      if (!columnCellModifier.canModify(bean)) {
        return READONLY_CELL_BG_COLOR;
      }
      return null;
    }
    public Color getForegroundColor(    Object bean){
      return null;
    }
  }
);
  column.setLabelProvider(new IColumnLabelProvider(){
    public String getLabel(    Object bean){
      if (!currentBeanHasJavaDateType(bean)) {
        return ""String_Node_Str"";
      }
      return null;
    }
  }
);
  column.setColumnCellModifier(columnCellModifier);
  JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
  TextCellEditorWithProposal patternCellEditor=new TextCellEditorWithProposal(tableViewerCreator.getTable(),column);
  ContentProposalAdapterExtended contentProposalAdapter=patternCellEditor.getContentProposalAdapter();
  contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
  patternCellEditor.setContentProposalProvider(proposalProvider);
  column.setCellEditor(patternCellEditor,CellEditorValueAdapterFactory.getNullToEmptyStringTextAdapater());
  tableViewerCreator.setCellModifier(new XmlCellModifier(tableViewerCreator));
}",0.9449983383183782
124299,"@Override protected Command createButtonCommand(Button button){
  FileItem repositoryFileItem=null;
  LinkRulesItem linkItem=null;
  Map<String,FileItem> repositoryFileItemMap=null;
  Map<String,LinkRulesItem> repositoryLinkRulesItemMap=null;
  String paramName=(String)button.getData(PARAMETER_NAME);
  IElementParameter param=elem.getElementParameter(paramName);
  Object data=button.getData(NAME);
  if (data != null && data.equals(REPOSITORY_CHOICE)) {
    IElementParameter dbTypeParam=null;
    if (elem instanceof org.talend.designer.core.ui.editor.process.Process || elem instanceof StatsAndLogsElement || elem instanceof ImplicitContextLoadElement) {
      if (EParameterName.PROPERTY_TYPE.getName().equals(paramName)) {
        dbTypeParam=elem.getElementParameter(EParameterName.DB_TYPE.getName());
      }
 else       if (JobSettingsConstants.getExtraParameterName(EParameterName.PROPERTY_TYPE.getName()).equals(paramName)) {
        dbTypeParam=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()));
      }
    }
    RepositoryReviewDialog dialog=null;
    if (dbTypeParam != null) {
      String[] listRepositoryItems=dbTypeParam.getListRepositoryItems();
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue(),listRepositoryItems);
    }
 else {
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue());
    }
    if (dialog.open() == RepositoryReviewDialog.OK) {
      String id=dialog.getResult().getObject().getId();
      IElementParameter repositoryParam=param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      String fullParamName=paramName + ""String_Node_Str"" + getRepositoryChoiceParamName();
      Connection repositoryConnection=null;
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      Item item=null;
      try {
        IRepositoryViewObject repobj=factory.getLastVersion(id);
        if (repobj != null) {
          Property property=repobj.getProperty();
          if (property != null) {
            item=property.getItem();
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      if (item != null) {
        if (item instanceof ConnectionItem) {
          repositoryConnection=((ConnectionItem)item).getConnection();
        }
      }
 else {
        repositoryConnection=null;
        if (repositoryParam != null) {
          item=dialog.getResult().getObject().getProperty().getItem();
          if (item instanceof ConnectionItem) {
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
        }
      }
      if (repositoryConnection != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        RepositoryNode selectNode=dialog.getResult();
        ChangeValuesFromRepository changeValuesFromRepository=null;
        if (selectNode.getObjectType() == ERepositoryObjectType.SERVICESOPERATION) {
          if (isJobAlreadyAssignToServiceOperation()) {
            MessageDialog.openInformation(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"");
          }
 else {
            String serviceId=item.getProperty().getId();
            String portId=selectNode.getParent().getObject().getId();
            String operationId=selectNode.getObject().getId();
            changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,param.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId);
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              service.updateOperation((INode)elem,serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId,selectNode);
            }
          }
        }
 else {
          changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,fullParamName,id);
        }
        if (changeValuesFromRepository != null) {
          compoundCommand.add(changeValuesFromRepository);
        }
        updateDBType(compoundCommand,repositoryConnection);
        return compoundCommand;
      }
      if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
        repositoryFileItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryFileItemMap();
        repositoryLinkRulesItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryLinkRulesItemMap();
      }
      if (repositoryFileItemMap.containsKey(id)) {
        repositoryFileItem=repositoryFileItemMap.get(id);
      }
 else       if (repositoryLinkRulesItemMap.containsKey(id)) {
        linkItem=repositoryLinkRulesItemMap.get(id);
      }
 else {
        if (!repositoryFileItemMap.isEmpty()) {
          repositoryFileItem=repositoryFileItemMap.values().iterator().next();
        }
 else {
          repositoryFileItem=null;
        }
      }
      if (repositoryFileItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=repositoryFileItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
      if (linkItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=linkItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
    }
  }
 else {
    if (elem instanceof INode) {
      INode node=(INode)elem;
      final IRepositoryService repositoryService=CorePlugin.getDefault().getRepositoryService();
      if (param != null) {
        RepositoryNode realNode=null;
        String repositoryValue=param.getRepositoryValue();
        if (repositoryValue != null && repositoryValue.startsWith(ERepositoryCategoryType.DATABASE.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_CONNECTIONS);
        }
 else         if (ERepositoryCategoryType.DELIMITED.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_DELIMITED);
        }
        if (ERepositoryCategoryType.POSITIONAL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
        }
        if (ERepositoryCategoryType.REGEX.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_REGEXP);
        }
        if (ERepositoryCategoryType.XML.getName().equals(repositoryValue) || repositoryValue.startsWith(ERepositoryCategoryType.XML.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_XML);
        }
        if (ERepositoryCategoryType.LDIF.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
        }
        if (ERepositoryCategoryType.EXCEL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EXCEL);
        }
        if (ERepositoryCategoryType.GENERIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
        }
        if (ERepositoryCategoryType.LDAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
        }
        if (ERepositoryCategoryType.WSDL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.WEBSERVICE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.SALESFORCE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
        }
        if (ERepositoryCategoryType.EBCDIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EBCDIC);
        }
        if (ERepositoryCategoryType.MDM.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_MDMCONNECTION);
        }
        if (ERepositoryCategoryType.SAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAPCONNECTIONS);
        }
        if (ERepositoryCategoryType.SAPIDOC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAP_IDOC);
        }
        if (ERepositoryCategoryType.HEADERFOOTER.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_HEADER_FOOTER);
        }
        if (ERepositoryCategoryType.BRMS.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_BRMS);
        }
        if (ERepositoryCategoryType.HL7.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_HL7);
        }
        if (realNode != null) {
          ConnectionItem connItem=repositoryService.openMetadataConnection(true,realNode,node);
          if (connItem != null) {
            RepositoryManager.refreshCreatedNode(ERepositoryObjectType.METADATA_CONNECTIONS);
            IElementParameter propertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
            propertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
            Command cmd=new ChangeValuesFromRepository((Element)node,connItem.getConnection(),propertyParam.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),connItem.getProperty().getId());
            executeCommand(cmd);
            if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
              ((MultipleThreadDynamicComposite)dynamicProperty).updateRepositoryList();
            }
          }
        }
      }
    }
  }
  return null;
}","@Override protected Command createButtonCommand(Button button){
  FileItem repositoryFileItem=null;
  LinkRulesItem linkItem=null;
  Map<String,FileItem> repositoryFileItemMap=null;
  Map<String,LinkRulesItem> repositoryLinkRulesItemMap=null;
  String paramName=(String)button.getData(PARAMETER_NAME);
  IElementParameter param=elem.getElementParameter(paramName);
  Object data=button.getData(NAME);
  if (data != null && data.equals(REPOSITORY_CHOICE)) {
    IElementParameter dbTypeParam=null;
    if (elem instanceof org.talend.designer.core.ui.editor.process.Process || elem instanceof StatsAndLogsElement || elem instanceof ImplicitContextLoadElement) {
      if (EParameterName.PROPERTY_TYPE.getName().equals(paramName)) {
        dbTypeParam=elem.getElementParameter(EParameterName.DB_TYPE.getName());
      }
 else       if (JobSettingsConstants.getExtraParameterName(EParameterName.PROPERTY_TYPE.getName()).equals(paramName)) {
        dbTypeParam=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()));
      }
    }
    RepositoryReviewDialog dialog=null;
    if (dbTypeParam != null) {
      String[] listRepositoryItems=dbTypeParam.getListRepositoryItems();
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue(),listRepositoryItems);
    }
 else {
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue());
    }
    if (dialog.open() == RepositoryReviewDialog.OK) {
      String id=dialog.getResult().getObject().getId();
      IElementParameter repositoryParam=param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      String fullParamName=paramName + ""String_Node_Str"" + getRepositoryChoiceParamName();
      Connection repositoryConnection=null;
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      Item item=null;
      try {
        IRepositoryViewObject repobj=factory.getLastVersion(id);
        if (repobj != null) {
          Property property=repobj.getProperty();
          if (property != null) {
            item=property.getItem();
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      if (item != null) {
        if (item instanceof ConnectionItem) {
          repositoryConnection=((ConnectionItem)item).getConnection();
        }
      }
 else {
        repositoryConnection=null;
        if (repositoryParam != null) {
          item=dialog.getResult().getObject().getProperty().getItem();
          if (item instanceof ConnectionItem) {
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
        }
      }
      if (repositoryConnection != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        RepositoryNode selectNode=dialog.getResult();
        ChangeValuesFromRepository changeValuesFromRepository=null;
        if (selectNode.getObjectType() == ERepositoryObjectType.SERVICESOPERATION) {
          String serviceId=item.getProperty().getId();
          String portId=selectNode.getParent().getObject().getId();
          String operationId=selectNode.getObject().getId();
          changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,param.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId);
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
            IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
            boolean foundInOpen=false;
            IProcess2 process=null;
            IEditorReference[] reference=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
            process=(IProcess2)RepositoryPlugin.getDefault().getDesignerCoreService().getCurrentProcess();
            String jobID=process.getProperty().getId();
            service.deleteOldRelation(jobID);
            service.updateOperation((INode)elem,serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId,selectNode);
          }
        }
 else {
          changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,fullParamName,id);
        }
        if (changeValuesFromRepository != null) {
          compoundCommand.add(changeValuesFromRepository);
        }
        updateDBType(compoundCommand,repositoryConnection);
        return compoundCommand;
      }
      if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
        repositoryFileItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryFileItemMap();
        repositoryLinkRulesItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryLinkRulesItemMap();
      }
      if (repositoryFileItemMap.containsKey(id)) {
        repositoryFileItem=repositoryFileItemMap.get(id);
      }
 else       if (repositoryLinkRulesItemMap.containsKey(id)) {
        linkItem=repositoryLinkRulesItemMap.get(id);
      }
 else {
        if (!repositoryFileItemMap.isEmpty()) {
          repositoryFileItem=repositoryFileItemMap.values().iterator().next();
        }
 else {
          repositoryFileItem=null;
        }
      }
      if (repositoryFileItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=repositoryFileItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
      if (linkItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=linkItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
    }
  }
 else {
    if (elem instanceof INode) {
      INode node=(INode)elem;
      final IRepositoryService repositoryService=CorePlugin.getDefault().getRepositoryService();
      if (param != null) {
        RepositoryNode realNode=null;
        String repositoryValue=param.getRepositoryValue();
        if (repositoryValue != null && repositoryValue.startsWith(ERepositoryCategoryType.DATABASE.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_CONNECTIONS);
        }
 else         if (ERepositoryCategoryType.DELIMITED.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_DELIMITED);
        }
        if (ERepositoryCategoryType.POSITIONAL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
        }
        if (ERepositoryCategoryType.REGEX.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_REGEXP);
        }
        if (ERepositoryCategoryType.XML.getName().equals(repositoryValue) || repositoryValue.startsWith(ERepositoryCategoryType.XML.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_XML);
        }
        if (ERepositoryCategoryType.LDIF.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
        }
        if (ERepositoryCategoryType.EXCEL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EXCEL);
        }
        if (ERepositoryCategoryType.GENERIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
        }
        if (ERepositoryCategoryType.LDAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
        }
        if (ERepositoryCategoryType.WSDL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.WEBSERVICE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.SALESFORCE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
        }
        if (ERepositoryCategoryType.EBCDIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EBCDIC);
        }
        if (ERepositoryCategoryType.MDM.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_MDMCONNECTION);
        }
        if (ERepositoryCategoryType.SAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAPCONNECTIONS);
        }
        if (ERepositoryCategoryType.SAPIDOC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAP_IDOC);
        }
        if (ERepositoryCategoryType.HEADERFOOTER.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_HEADER_FOOTER);
        }
        if (ERepositoryCategoryType.BRMS.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_BRMS);
        }
        if (ERepositoryCategoryType.HL7.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_HL7);
        }
        if (realNode != null) {
          ConnectionItem connItem=repositoryService.openMetadataConnection(true,realNode,node);
          if (connItem != null) {
            RepositoryManager.refreshCreatedNode(ERepositoryObjectType.METADATA_CONNECTIONS);
            IElementParameter propertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
            propertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
            Command cmd=new ChangeValuesFromRepository((Element)node,connItem.getConnection(),propertyParam.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),connItem.getProperty().getId());
            executeCommand(cmd);
            if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
              ((MultipleThreadDynamicComposite)dynamicProperty).updateRepositoryList();
            }
          }
        }
      }
    }
  }
  return null;
}",0.969199178644764
124300,"private void prepareModelFromOutput(List<XMLFileNode> root,List<XMLFileNode> loop,List<XMLFileNode> group){
  TreeNode rootNode=null;
  TreeNode lastTreeNode=parentNode;
  TreeNode temp=null;
  TreeNode mainNode=parentNode;
  String mainPath=null;
  String lastXmlPath=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  List<TreeNode> groupElements=new ArrayList<TreeNode>();
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
      groupElements.add(temp);
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  isFirst=true;
  TreeNode loopElement=null;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopElement=temp;
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    temp.setType(type);
  }
  if (loopElement != null && !groupElements.isEmpty()) {
    fillGroup(loopElement,groupElements);
  }
  if (rootNode != null) {
    parentNode.getChildren().add(rootNode);
  }
}","private void prepareModelFromOutput(List<XMLFileNode> root,List<XMLFileNode> loop,List<XMLFileNode> group){
  TreeNode rootNode=null;
  TreeNode lastTreeNode=parentNode;
  TreeNode temp=null;
  TreeNode mainNode=parentNode;
  String mainPath=null;
  String lastXmlPath=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  List<TreeNode> groupElements=new ArrayList<TreeNode>();
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
      groupElements.add(temp);
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  isFirst=true;
  TreeNode loopElement=null;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopElement=temp;
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    if (type == null) {
      type=JavaTypesManager.getDefaultJavaType().getId();
    }
    temp.setType(type);
  }
  if (loopElement != null && !groupElements.isEmpty()) {
    fillGroup(loopElement,groupElements);
  }
  if (rootNode != null) {
    parentNode.getChildren().add(rootNode);
  }
}",0.971830985915493
124301,"@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  if (getSelectedObjects().get(0) instanceof TreeNodeEditPart) {
    TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
    TreeNode model=(TreeNode)nodePart.getModel();
    if (model.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)model.eContainer()).getType())) {
      if (model.getChildren().isEmpty()) {
        return true;
      }
      return false;
    }
    if (NodeType.ATTRIBUT.equals(model.getNodeType()) || NodeType.NAME_SPACE.equals(model.getNodeType()) || !(model.eContainer() instanceof TreeNode)) {
      return false;
    }
    if (model.isLoop()) {
      return false;
    }
  }
 else {
    return false;
  }
  return true;
}","@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  if (getSelectedObjects().get(0) instanceof TreeNodeEditPart) {
    TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
    TreeNode model=(TreeNode)nodePart.getModel();
    if (model.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)model.eContainer()).getType())) {
      if (XmlMapUtil.isExpressionEditable(model)) {
        return true;
      }
      return false;
    }
    if (NodeType.ATTRIBUT.equals(model.getNodeType()) || NodeType.NAME_SPACE.equals(model.getNodeType()) || !(model.eContainer() instanceof TreeNode)) {
      return false;
    }
    if (model.isLoop()) {
      return false;
    }
  }
 else {
    return false;
  }
  return true;
}",0.959752321981424
124302,"private void fillContents(){
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  boolean isOnlyRemoteConnection=brandingService.getBrandingConfiguration().isOnlyRemoteConnection();
  for (  ConnectionBean bean : storedConnections) {
    String user2=bean.getUser();
    String repositoryId2=bean.getRepositoryId();
    String workSpace=bean.getWorkSpace();
    String name=bean.getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      boolean valid=Pattern.matches(RepositoryConstants.MAIL_PATTERN,user2);
      if (valid && RepositoryConstants.REPOSITORY_REMOTE_ID.equals(repositoryId2)) {
        String url=bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL);
        valid=url != null || !""String_Node_Str"".equals(url);
      }
      bean.setComplete(valid);
    }
  }
  if (!isOnlyRemoteConnection) {
    connectionsViewer.setInput(storedConnections);
  }
 else {
    List<ILoginConnectionService> loginConnectionServices=LoginConnectionManager.getRemoteConnectionService();
    List<ConnectionBean> lastRemoteConnections=new ArrayList<ConnectionBean>();
    if (loginConnectionServices.size() > 0) {
      for (      ILoginConnectionService loginConncetion : loginConnectionServices) {
        for (        ConnectionBean bean : storedConnections) {
          String errorMsg=loginConncetion.checkConnectionValidation(bean.getName(),bean.getDescription(),bean.getUser(),bean.getPassword(),bean.getWorkSpace(),bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
          if (errorMsg != null && errorMsg.equals(""String_Node_Str"") && bean.isComplete()) {
            lastRemoteConnections.add(bean);
          }
        }
      }
    }
    if (lastRemoteConnections.size() > 0) {
      storedConnections=lastRemoteConnections;
    }
    connectionsViewer.setInput(storedConnections);
  }
  if (storedConnections.size() == 0) {
  }
 else   if (storedConnections.size() == 1) {
    connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
  }
 else {
    boolean selected=false;
    for (    ConnectionBean curent : storedConnections) {
      String stringValue=((LabelProvider)connectionsViewer.getLabelProvider()).getText(curent);
      if (stringValue.equals(lastConnection)) {
        selectLast(stringValue,connectionsViewer.getCombo());
        selected=true;
      }
    }
    if (!selected) {
      connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
    }
  }
  if (getConnection() != null) {
    user.setText(getConnection().getUser());
    passwordText.setText(getConnection().getPassword());
    if (!isAuthenticationNeeded()) {
    }
    setRepositoryContextInContext();
  }
  boolean tisRemote=isSVNProviderPluginLoadedRemote();
  if (svnBranchLabel != null) {
    svnBranchLabel.setVisible(tisRemote);
  }
  if (branchesViewer != null) {
    branchesViewer.getControl().setVisible(tisRemote);
  }
  if (validateFields()) {
    populateProjectList();
    validateProject();
  }
 else {
    if (storedConnections.size() > 0) {
      user.setText(storedConnections.get(0).getUser());
    }
    setRepositoryContextInContext();
    populateProjectList();
  }
  manageViewer.setInput(getManageElements());
  setManageViewer();
}","private void fillContents(){
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  boolean isOnlyRemoteConnection=brandingService.getBrandingConfiguration().isOnlyRemoteConnection();
  for (  ConnectionBean bean : storedConnections) {
    String user2=bean.getUser();
    String repositoryId2=bean.getRepositoryId();
    String workSpace=bean.getWorkSpace();
    String name=bean.getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      boolean valid=Pattern.matches(RepositoryConstants.MAIL_PATTERN,user2);
      if (valid && RepositoryConstants.REPOSITORY_REMOTE_ID.equals(repositoryId2)) {
        String url=bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL);
        valid=url != null || !""String_Node_Str"".equals(url);
      }
      bean.setComplete(valid);
    }
  }
  if (!isOnlyRemoteConnection) {
    connectionsViewer.setInput(storedConnections);
  }
 else {
    List<ILoginConnectionService> loginConnectionServices=LoginConnectionManager.getRemoteConnectionService();
    List<ConnectionBean> lastRemoteConnections=new ArrayList<ConnectionBean>();
    if (loginConnectionServices.size() > 0) {
      for (      ILoginConnectionService loginConncetion : loginConnectionServices) {
        for (        ConnectionBean bean : storedConnections) {
          String errorMsg=loginConncetion.checkConnectionValidation(bean.getName(),bean.getDescription(),bean.getUser(),bean.getPassword(),bean.getWorkSpace(),bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
          if (StringUtils.isEmpty(errorMsg) && bean.isComplete()) {
            lastRemoteConnections.add(bean);
          }
        }
      }
    }
    if (lastRemoteConnections.size() > 0) {
      storedConnections=lastRemoteConnections;
    }
    connectionsViewer.setInput(storedConnections);
  }
  if (storedConnections.size() == 0) {
  }
 else   if (storedConnections.size() == 1) {
    connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
  }
 else {
    boolean selected=false;
    for (    ConnectionBean curent : storedConnections) {
      String stringValue=((LabelProvider)connectionsViewer.getLabelProvider()).getText(curent);
      if (stringValue.equals(lastConnection)) {
        selectLast(stringValue,connectionsViewer.getCombo());
        selected=true;
      }
    }
    if (!selected) {
      connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
    }
  }
  if (getConnection() != null) {
    user.setText(getConnection().getUser());
    passwordText.setText(getConnection().getPassword());
    if (!isAuthenticationNeeded()) {
    }
    setRepositoryContextInContext();
  }
  boolean tisRemote=isSVNProviderPluginLoadedRemote();
  if (svnBranchLabel != null) {
    svnBranchLabel.setVisible(tisRemote);
  }
  if (branchesViewer != null) {
    branchesViewer.getControl().setVisible(tisRemote);
  }
  if (validateFields()) {
    populateProjectList();
    validateProject();
  }
 else {
    if (storedConnections.size() > 0) {
      user.setText(storedConnections.get(0).getUser());
    }
    setRepositoryContextInContext();
    populateProjectList();
  }
  manageViewer.setInput(getManageElements());
  setManageViewer();
}",0.9907552268525104
124303,"private void updateVisible(){
  List<ILoginConnectionService> loginConnectionServices=LoginConnectionManager.getRemoteConnectionService();
  String errorMsg=null;
  if (loginConnectionServices.size() > 0 && getConnection() != null && getConnection().isComplete()) {
    for (    ILoginConnectionService loginConncetion : loginConnectionServices) {
      errorMsg=loginConncetion.checkConnectionValidation(getConnection().getName(),getConnection().getDescription(),getConnection().getUser(),getConnection().getPassword(),getConnection().getWorkSpace(),getConnection().getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
      if (errorMsg != null) {
        break;
      }
    }
  }
  if (getConnection() == null) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(false);
    }
    projectViewer.getControl().setEnabled(false);
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
  }
 else   if (errorMsg != null) {
    iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
    onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
    colorComposite.setBackground(RED_COLOR);
    onIconLabel.setBackground(colorComposite.getBackground());
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    projectViewer.getControl().setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(true);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
    statusLabel.setText(errorMsg);
    statusLabel.setBackground(RED_COLOR);
    statusLabel.setForeground(WHITE_COLOR);
    Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
    statusLabel.setFont(font);
  }
 else   if (getConnection() != null && projectViewer != null && projectViewer.getInput() == null) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    projectViewer.getControl().setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(true);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
    statusLabel.setText(Messages.getString(""String_Node_Str""));
    statusLabel.setBackground(RED_COLOR);
    statusLabel.setForeground(WHITE_COLOR);
    Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
    statusLabel.setFont(font);
    restartBut.setVisible(false);
  }
 else   if (!isWorkSpaceSame()) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (projectViewer != null) {
      projectViewer.getControl().setEnabled(false);
    }
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(false);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
    restartBut.setVisible(true);
  }
 else   if (inuse) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    openProjectBtn.setEnabled(false);
    restartBut.setVisible(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(false);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
  }
 else {
    manageViewer.getControl().setEnabled(true);
    manageProjectsButton.setEnabled(true);
    if (projectViewer != null) {
      final Object input=projectViewer.getInput();
      boolean enabled=input != null && ((input instanceof Project[]) && ((Project[])input).length > 0);
      openProjectBtn.setEnabled(enabled);
    }
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(true);
    }
    if (PluginChecker.isSVNProviderPluginLoaded() && branchesViewer != null) {
      branchesViewer.getControl().setEnabled(true);
    }
    restartBut.setVisible(false);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    manageViewer.getControl().setEnabled(true);
    manageProjectsButton.setEnabled(true);
  }
}","private void updateVisible(){
  List<ILoginConnectionService> loginConnectionServices=LoginConnectionManager.getRemoteConnectionService();
  String errorMsg=null;
  if (loginConnectionServices.size() > 0 && getConnection() != null && getConnection().isComplete()) {
    for (    ILoginConnectionService loginConncetion : loginConnectionServices) {
      errorMsg=loginConncetion.checkConnectionValidation(getConnection().getName(),getConnection().getDescription(),getConnection().getUser(),getConnection().getPassword(),getConnection().getWorkSpace(),getConnection().getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
      if (StringUtils.isEmpty(errorMsg)) {
        break;
      }
    }
  }
  if (getConnection() == null) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(false);
    }
    projectViewer.getControl().setEnabled(false);
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
  }
 else   if (errorMsg != null) {
    iconLabel.setImage(LOGIN_CRITICAL_IMAGE);
    onIconLabel.setImage(LOGIN_CRITICAL_IMAGE);
    colorComposite.setBackground(RED_COLOR);
    onIconLabel.setBackground(colorComposite.getBackground());
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    projectViewer.getControl().setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(true);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
    statusLabel.setText(errorMsg);
    statusLabel.setBackground(RED_COLOR);
    statusLabel.setForeground(WHITE_COLOR);
    Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
    statusLabel.setFont(font);
  }
 else   if (getConnection() != null && projectViewer != null && projectViewer.getInput() == null) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    projectViewer.getControl().setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(true);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
    statusLabel.setText(Messages.getString(""String_Node_Str""));
    statusLabel.setBackground(RED_COLOR);
    statusLabel.setForeground(WHITE_COLOR);
    Font font=new Font(null,LoginComposite.FONT_ARIAL,9,SWT.BOLD);
    statusLabel.setFont(font);
    restartBut.setVisible(false);
  }
 else   if (!isWorkSpaceSame()) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    openProjectBtn.setEnabled(false);
    if (projectViewer != null) {
      projectViewer.getControl().setEnabled(false);
    }
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(false);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
    restartBut.setVisible(true);
  }
 else   if (inuse) {
    manageViewer.getControl().setEnabled(false);
    manageProjectsButton.setEnabled(false);
    openProjectBtn.setEnabled(false);
    restartBut.setVisible(false);
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(false);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
  }
 else {
    manageViewer.getControl().setEnabled(true);
    manageProjectsButton.setEnabled(true);
    if (projectViewer != null) {
      final Object input=projectViewer.getInput();
      boolean enabled=input != null && ((input instanceof Project[]) && ((Project[])input).length > 0);
      openProjectBtn.setEnabled(enabled);
    }
    if (fillProjectsBtn != null) {
      fillProjectsBtn.setEnabled(true);
    }
    if (PluginChecker.isSVNProviderPluginLoaded() && branchesViewer != null) {
      branchesViewer.getControl().setEnabled(true);
    }
    restartBut.setVisible(false);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    manageViewer.getControl().setEnabled(true);
    manageProjectsButton.setEnabled(true);
  }
}",0.99655949697473
124304,"private boolean validateFields(){
  String errorMsg=null;
  boolean valid=true;
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  boolean isOnlyRemoteConnection=brandingService.getBrandingConfiguration().isOnlyRemoteConnection();
  boolean usesMailCheck=brandingService.getBrandingConfiguration().isUseMailLoginCheck();
  LabelText emptyUrl=null;
  if (getRepository() != null) {
    for (    LabelText currentUrlLabel : dynamicRequiredControls.get(getRepository()).values()) {
      if (valid && currentUrlLabel.getText().length() == 0) {
        emptyUrl=currentUrlLabel;
      }
    }
  }
  if (valid && getRepository() == null) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && getName().length() == 0) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && getUser().length() == 0) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && usesMailCheck && !Pattern.matches(RepositoryConstants.MAIL_PATTERN,getUser())) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && emptyUrl != null) {
    errorMsg=Messages.getString(""String_Node_Str"",emptyUrl.getLabel());
  }
 else   if (valid && isOnlyRemoteConnection) {
    List<ILoginConnectionService> loginConnections=LoginConnectionManager.getRemoteConnectionService();
    for (    ILoginConnectionService loginConncetion : loginConnections) {
      errorMsg=loginConncetion.checkConnectionValidation(getName(),getDesc(),getUser(),getPassword(),getWorkspace(),connection.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
    }
  }
  if (errorMsg != null && !errorMsg.equals(""String_Node_Str"")) {
    valid=false;
  }
  if (!valid) {
    dialog.setErrorMessage(errorMsg);
  }
 else {
    dialog.setErrorMessage(null);
  }
  if (connection != null) {
    connection.setComplete(valid);
  }
  return valid;
}","private boolean validateFields(){
  String errorMsg=null;
  boolean valid=true;
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  boolean isOnlyRemoteConnection=brandingService.getBrandingConfiguration().isOnlyRemoteConnection();
  boolean usesMailCheck=brandingService.getBrandingConfiguration().isUseMailLoginCheck();
  LabelText emptyUrl=null;
  if (getRepository() != null) {
    for (    LabelText currentUrlLabel : dynamicRequiredControls.get(getRepository()).values()) {
      if (valid && currentUrlLabel.getText().length() == 0) {
        emptyUrl=currentUrlLabel;
      }
    }
  }
  if (valid && getRepository() == null) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && getName().length() == 0) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && getUser().length() == 0) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && usesMailCheck && !Pattern.matches(RepositoryConstants.MAIL_PATTERN,getUser())) {
    errorMsg=Messages.getString(""String_Node_Str"");
  }
 else   if (valid && emptyUrl != null) {
    errorMsg=Messages.getString(""String_Node_Str"",emptyUrl.getLabel());
  }
 else   if (valid && isOnlyRemoteConnection) {
    List<ILoginConnectionService> loginConnections=LoginConnectionManager.getRemoteConnectionService();
    for (    ILoginConnectionService loginConncetion : loginConnections) {
      errorMsg=loginConncetion.checkConnectionValidation(getName(),getDesc(),getUser(),getPassword(),getWorkspace(),connection.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
    }
  }
  if (errorMsg != null && !errorMsg.equals(""String_Node_Str"")) {
    valid=false;
  }
  if (!valid) {
    dialog.setErrorMessage(errorMsg);
  }
 else {
    dialog.setErrorMessage(null);
  }
  if (connection != null) {
    connection.setComplete(valid);
    connectionsListComposite.refresh(connection);
  }
  return valid;
}",0.9873225152129818
124305,"@Override protected Command createButtonCommand(Button button){
  FileItem repositoryFileItem=null;
  LinkRulesItem linkItem=null;
  Map<String,FileItem> repositoryFileItemMap=null;
  Map<String,LinkRulesItem> repositoryLinkRulesItemMap=null;
  String paramName=(String)button.getData(PARAMETER_NAME);
  IElementParameter param=elem.getElementParameter(paramName);
  Object data=button.getData(NAME);
  if (data != null && data.equals(REPOSITORY_CHOICE)) {
    IElementParameter dbTypeParam=null;
    if (elem instanceof org.talend.designer.core.ui.editor.process.Process || elem instanceof StatsAndLogsElement || elem instanceof ImplicitContextLoadElement) {
      if (EParameterName.PROPERTY_TYPE.getName().equals(paramName)) {
        dbTypeParam=elem.getElementParameter(EParameterName.DB_TYPE.getName());
      }
 else       if (JobSettingsConstants.getExtraParameterName(EParameterName.PROPERTY_TYPE.getName()).equals(paramName)) {
        dbTypeParam=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()));
      }
    }
    RepositoryReviewDialog dialog=null;
    if (dbTypeParam != null) {
      String[] listRepositoryItems=dbTypeParam.getListRepositoryItems();
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue(),listRepositoryItems);
    }
 else {
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue());
    }
    if (dialog.open() == RepositoryReviewDialog.OK) {
      String id=dialog.getResult().getObject().getId();
      IElementParameter repositoryParam=param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      String fullParamName=paramName + ""String_Node_Str"" + getRepositoryChoiceParamName();
      Connection repositoryConnection=null;
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      Item item=null;
      try {
        IRepositoryViewObject repobj=factory.getLastVersion(id);
        if (repobj != null) {
          Property property=repobj.getProperty();
          if (property != null) {
            item=property.getItem();
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      if (item != null) {
        if (item instanceof ConnectionItem) {
          repositoryConnection=((ConnectionItem)item).getConnection();
        }
      }
 else {
        repositoryConnection=null;
        if (repositoryParam != null) {
          item=dialog.getResult().getObject().getProperty().getItem();
          if (item instanceof ConnectionItem) {
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
        }
      }
      if (repositoryConnection != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        RepositoryNode selectNode=dialog.getResult();
        ChangeValuesFromRepository changeValuesFromRepository=null;
        if (selectNode.getObjectType() == ERepositoryObjectType.SERVICESOPERATION) {
          if (isJobAlreadyAssignToServiceOperation()) {
            MessageDialog.openInformation(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"");
          }
 else {
            String serviceId=item.getProperty().getId();
            String portId=selectNode.getParent().getObject().getId();
            String operationId=selectNode.getObject().getId();
            changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,param.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId);
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              service.updateOperation((INode)elem,serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId,selectNode);
            }
          }
        }
 else {
          changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,fullParamName,id);
        }
        compoundCommand.add(changeValuesFromRepository);
        updateDBType(compoundCommand,repositoryConnection);
        return compoundCommand;
      }
      if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
        repositoryFileItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryFileItemMap();
        repositoryLinkRulesItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryLinkRulesItemMap();
      }
      if (repositoryFileItemMap.containsKey(id)) {
        repositoryFileItem=repositoryFileItemMap.get(id);
      }
 else       if (repositoryLinkRulesItemMap.containsKey(id)) {
        linkItem=repositoryLinkRulesItemMap.get(id);
      }
 else {
        if (!repositoryFileItemMap.isEmpty()) {
          repositoryFileItem=repositoryFileItemMap.values().iterator().next();
        }
 else {
          repositoryFileItem=null;
        }
      }
      if (repositoryFileItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=repositoryFileItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
      if (linkItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=linkItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
    }
  }
 else {
    if (elem instanceof INode) {
      INode node=(INode)elem;
      final IRepositoryService repositoryService=CorePlugin.getDefault().getRepositoryService();
      if (param != null) {
        RepositoryNode realNode=null;
        String repositoryValue=param.getRepositoryValue();
        if (repositoryValue != null && repositoryValue.startsWith(ERepositoryCategoryType.DATABASE.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_CONNECTIONS);
        }
 else         if (ERepositoryCategoryType.DELIMITED.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_DELIMITED);
        }
        if (ERepositoryCategoryType.POSITIONAL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
        }
        if (ERepositoryCategoryType.REGEX.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_REGEXP);
        }
        if (ERepositoryCategoryType.XML.getName().equals(repositoryValue) || repositoryValue.startsWith(ERepositoryCategoryType.XML.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_XML);
        }
        if (ERepositoryCategoryType.LDIF.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
        }
        if (ERepositoryCategoryType.EXCEL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EXCEL);
        }
        if (ERepositoryCategoryType.GENERIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
        }
        if (ERepositoryCategoryType.LDAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
        }
        if (ERepositoryCategoryType.WSDL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.WEBSERVICE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.SALESFORCE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
        }
        if (ERepositoryCategoryType.EBCDIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EBCDIC);
        }
        if (ERepositoryCategoryType.MDM.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_MDMCONNECTION);
        }
        if (ERepositoryCategoryType.SAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAPCONNECTIONS);
        }
        if (ERepositoryCategoryType.SAPIDOC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAP_IDOC);
        }
        if (ERepositoryCategoryType.HEADERFOOTER.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_HEADER_FOOTER);
        }
        if (ERepositoryCategoryType.BRMS.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_BRMS);
        }
        if (ERepositoryCategoryType.HL7.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_HL7);
        }
        if (realNode != null) {
          ConnectionItem connItem=repositoryService.openMetadataConnection(true,realNode,node);
          if (connItem != null) {
            RepositoryManager.refreshCreatedNode(ERepositoryObjectType.METADATA_CONNECTIONS);
            IElementParameter propertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
            propertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
            Command cmd=new ChangeValuesFromRepository((Element)node,connItem.getConnection(),propertyParam.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),connItem.getProperty().getId());
            executeCommand(cmd);
            if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
              ((MultipleThreadDynamicComposite)dynamicProperty).updateRepositoryList();
            }
          }
        }
      }
    }
  }
  return null;
}","@Override protected Command createButtonCommand(Button button){
  FileItem repositoryFileItem=null;
  LinkRulesItem linkItem=null;
  Map<String,FileItem> repositoryFileItemMap=null;
  Map<String,LinkRulesItem> repositoryLinkRulesItemMap=null;
  String paramName=(String)button.getData(PARAMETER_NAME);
  IElementParameter param=elem.getElementParameter(paramName);
  Object data=button.getData(NAME);
  if (data != null && data.equals(REPOSITORY_CHOICE)) {
    IElementParameter dbTypeParam=null;
    if (elem instanceof org.talend.designer.core.ui.editor.process.Process || elem instanceof StatsAndLogsElement || elem instanceof ImplicitContextLoadElement) {
      if (EParameterName.PROPERTY_TYPE.getName().equals(paramName)) {
        dbTypeParam=elem.getElementParameter(EParameterName.DB_TYPE.getName());
      }
 else       if (JobSettingsConstants.getExtraParameterName(EParameterName.PROPERTY_TYPE.getName()).equals(paramName)) {
        dbTypeParam=elem.getElementParameter(JobSettingsConstants.getExtraParameterName(EParameterName.DB_TYPE.getName()));
      }
    }
    RepositoryReviewDialog dialog=null;
    if (dbTypeParam != null) {
      String[] listRepositoryItems=dbTypeParam.getListRepositoryItems();
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue(),listRepositoryItems);
    }
 else {
      dialog=new RepositoryReviewDialog(Display.getCurrent().getActiveShell(),ERepositoryObjectType.METADATA,param.getRepositoryValue());
    }
    if (dialog.open() == RepositoryReviewDialog.OK) {
      String id=dialog.getResult().getObject().getId();
      IElementParameter repositoryParam=param.getChildParameters().get(EParameterName.REPOSITORY_PROPERTY_TYPE.getName());
      String fullParamName=paramName + ""String_Node_Str"" + getRepositoryChoiceParamName();
      Connection repositoryConnection=null;
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      Item item=null;
      try {
        IRepositoryViewObject repobj=factory.getLastVersion(id);
        if (repobj != null) {
          Property property=repobj.getProperty();
          if (property != null) {
            item=property.getItem();
          }
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      if (item != null) {
        if (item instanceof ConnectionItem) {
          repositoryConnection=((ConnectionItem)item).getConnection();
        }
      }
 else {
        repositoryConnection=null;
        if (repositoryParam != null) {
          item=dialog.getResult().getObject().getProperty().getItem();
          if (item instanceof ConnectionItem) {
            repositoryConnection=((ConnectionItem)item).getConnection();
          }
        }
      }
      if (repositoryConnection != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        RepositoryNode selectNode=dialog.getResult();
        ChangeValuesFromRepository changeValuesFromRepository=null;
        if (selectNode.getObjectType() == ERepositoryObjectType.SERVICESOPERATION) {
          if (isJobAlreadyAssignToServiceOperation()) {
            MessageDialog.openInformation(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"");
          }
 else {
            String serviceId=item.getProperty().getId();
            String portId=selectNode.getParent().getObject().getId();
            String operationId=selectNode.getObject().getId();
            changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,param.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId);
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              service.updateOperation((INode)elem,serviceId + ""String_Node_Str"" + portId+ ""String_Node_Str""+ operationId,selectNode);
            }
          }
        }
 else {
          changeValuesFromRepository=new ChangeValuesFromRepository(elem,repositoryConnection,fullParamName,id);
        }
        if (changeValuesFromRepository != null) {
          compoundCommand.add(changeValuesFromRepository);
        }
        updateDBType(compoundCommand,repositoryConnection);
        return compoundCommand;
      }
      if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
        repositoryFileItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryFileItemMap();
        repositoryLinkRulesItemMap=((MultipleThreadDynamicComposite)dynamicProperty).getRepositoryLinkRulesItemMap();
      }
      if (repositoryFileItemMap.containsKey(id)) {
        repositoryFileItem=repositoryFileItemMap.get(id);
      }
 else       if (repositoryLinkRulesItemMap.containsKey(id)) {
        linkItem=repositoryLinkRulesItemMap.get(id);
      }
 else {
        if (!repositoryFileItemMap.isEmpty()) {
          repositoryFileItem=repositoryFileItemMap.values().iterator().next();
        }
 else {
          repositoryFileItem=null;
        }
      }
      if (repositoryFileItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=repositoryFileItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
      if (linkItem != null) {
        CompoundCommand compoundCommand=new CompoundCommand();
        final String showId=linkItem.getProperty().getId();
        Command command=new PropertyChangeCommand(elem,EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),showId);
        compoundCommand.add(command);
        return compoundCommand;
      }
    }
  }
 else {
    if (elem instanceof INode) {
      INode node=(INode)elem;
      final IRepositoryService repositoryService=CorePlugin.getDefault().getRepositoryService();
      if (param != null) {
        RepositoryNode realNode=null;
        String repositoryValue=param.getRepositoryValue();
        if (repositoryValue != null && repositoryValue.startsWith(ERepositoryCategoryType.DATABASE.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_CONNECTIONS);
        }
 else         if (ERepositoryCategoryType.DELIMITED.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_DELIMITED);
        }
        if (ERepositoryCategoryType.POSITIONAL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_POSITIONAL);
        }
        if (ERepositoryCategoryType.REGEX.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_REGEXP);
        }
        if (ERepositoryCategoryType.XML.getName().equals(repositoryValue) || repositoryValue.startsWith(ERepositoryCategoryType.XML.getName())) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_XML);
        }
        if (ERepositoryCategoryType.LDIF.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_LDIF);
        }
        if (ERepositoryCategoryType.EXCEL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EXCEL);
        }
        if (ERepositoryCategoryType.GENERIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_GENERIC_SCHEMA);
        }
        if (ERepositoryCategoryType.LDAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_LDAP_SCHEMA);
        }
        if (ERepositoryCategoryType.WSDL.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.WEBSERVICE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_WSDL_SCHEMA);
        }
        if (ERepositoryCategoryType.SALESFORCE.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA);
        }
        if (ERepositoryCategoryType.EBCDIC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_EBCDIC);
        }
        if (ERepositoryCategoryType.MDM.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_MDMCONNECTION);
        }
        if (ERepositoryCategoryType.SAP.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAPCONNECTIONS);
        }
        if (ERepositoryCategoryType.SAPIDOC.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_SAP_IDOC);
        }
        if (ERepositoryCategoryType.HEADERFOOTER.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_HEADER_FOOTER);
        }
        if (ERepositoryCategoryType.BRMS.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_BRMS);
        }
        if (ERepositoryCategoryType.HL7.getName().equals(repositoryValue)) {
          realNode=(RepositoryNode)repositoryService.getRootRepositoryNode(ERepositoryObjectType.METADATA_FILE_HL7);
        }
        if (realNode != null) {
          ConnectionItem connItem=repositoryService.openMetadataConnection(true,realNode,node);
          if (connItem != null) {
            RepositoryManager.refreshCreatedNode(ERepositoryObjectType.METADATA_CONNECTIONS);
            IElementParameter propertyParam=elem.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
            propertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName()).setValue(EmfComponent.REPOSITORY);
            Command cmd=new ChangeValuesFromRepository((Element)node,connItem.getConnection(),propertyParam.getName() + ""String_Node_Str"" + EParameterName.REPOSITORY_PROPERTY_TYPE.getName(),connItem.getProperty().getId());
            executeCommand(cmd);
            if (dynamicProperty instanceof MultipleThreadDynamicComposite) {
              ((MultipleThreadDynamicComposite)dynamicProperty).updateRepositoryList();
            }
          }
        }
      }
    }
  }
  return null;
}",0.995581477553906
124306,"private void prepareModelFromOutput(List<XMLFileNode> root,List<XMLFileNode> loop,List<XMLFileNode> group){
  TreeNode rootNode=null;
  TreeNode lastTreeNode=parentNode;
  TreeNode temp=null;
  TreeNode mainNode=null;
  String mainPath=null;
  String lastXmlPath=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  List<TreeNode> groupElements=new ArrayList<TreeNode>();
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
      groupElements.add(temp);
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  isFirst=true;
  TreeNode loopElement=null;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopElement=temp;
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    temp.setType(type);
  }
  if (loopElement != null && !groupElements.isEmpty()) {
    fillGroup(loopElement,groupElements);
  }
  if (rootNode != null) {
    parentNode.getChildren().add(rootNode);
  }
}","private void prepareModelFromOutput(List<XMLFileNode> root,List<XMLFileNode> loop,List<XMLFileNode> group){
  TreeNode rootNode=null;
  TreeNode lastTreeNode=parentNode;
  TreeNode temp=null;
  TreeNode mainNode=parentNode;
  String mainPath=null;
  String lastXmlPath=null;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  List<TreeNode> groupElements=new ArrayList<TreeNode>();
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
      groupElements.add(temp);
    }
    temp.setType(type);
  }
  lastTreeNode=mainNode;
  lastXmlPath=mainPath;
  isFirst=true;
  TreeNode loopElement=null;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    String type=node.getType();
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.ATTRIBUT);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=createModel();
      temp.setName(newPath);
      temp.setDefaultValue(node.getDefaultValue());
      temp.setNodeType(NodeType.NAME_SPACE);
      temp.setXpath(XmlMapUtil.getXPath(lastTreeNode.getXpath(),temp.getName(),temp.getNodeType()));
      lastTreeNode.getChildren().add(temp);
    }
 else {
      temp=this.addElement(lastTreeNode,lastXmlPath,node);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        loopElement=temp;
        isFirst=false;
      }
      lastTreeNode=temp;
      lastXmlPath=newPath;
    }
    temp.setType(type);
  }
  if (loopElement != null && !groupElements.isEmpty()) {
    fillGroup(loopElement,groupElements);
  }
  if (rootNode != null) {
    parentNode.getChildren().add(rootNode);
  }
}",0.9917044574715186
124307,"protected void populateTOSProjectList(){
  Project[] projects=null;
  if (getConnection() != null) {
    String user2=getConnection().getUser();
    String repositoryId2=getConnection().getRepositoryId();
    String workSpace=getConnection().getWorkSpace();
    String name=getConnection().getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      getConnection().setComplete(true);
    }
  }
  if (getConnection() == null || !getConnection().isComplete()) {
    return;
  }
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  repositoryFactory.setRepositoryFactoryFromProvider(RepositoryFactoryProvider.getRepositoriyById(getConnection().getRepositoryId()));
  boolean initialized=false;
  final String newLine=""String_Node_Str"";
  try {
    try {
      repositoryFactory.checkAvailability();
    }
 catch (    WarningException e) {
      String warnings=e.getMessage();
      if (warnings != null && !warnings.equals(lastWarnings)) {
        lastWarnings=warnings;
        MessageDialog.openWarning(getShell(),""String_Node_Str"",warnings);
      }
    }
    try {
      IRunnableWithProgress op=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            ProxyRepositoryFactory.getInstance().initialize();
          }
 catch (          PersistenceException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      new ProgressMonitorDialog(getShell()).run(true,false,op);
    }
 catch (    InvocationTargetException e) {
      throw (Exception)e.getTargetException();
    }
catch (    InterruptedException e) {
    }
    initialized=true;
  }
 catch (  Exception e) {
    projects=new Project[0];
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
  }
}","protected void populateTOSProjectList(){
  Project[] projects=null;
  if (getConnection() != null) {
    String user2=getConnection().getUser();
    String repositoryId2=getConnection().getRepositoryId();
    String workSpace=getConnection().getWorkSpace();
    String name=getConnection().getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      boolean valid=Pattern.matches(RepositoryConstants.MAIL_PATTERN,user2);
      if (valid && RepositoryConstants.REPOSITORY_REMOTE_ID.equals(repositoryId2)) {
        String url=getConnection().getDynamicFields().get(RepositoryConstants.REPOSITORY_URL);
        valid=url != null || !""String_Node_Str"".equals(url);
      }
      getConnection().setComplete(valid);
    }
  }
  if (getConnection() == null || !getConnection().isComplete()) {
    return;
  }
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  repositoryFactory.setRepositoryFactoryFromProvider(RepositoryFactoryProvider.getRepositoriyById(getConnection().getRepositoryId()));
  boolean initialized=false;
  final String newLine=""String_Node_Str"";
  try {
    try {
      repositoryFactory.checkAvailability();
    }
 catch (    WarningException e) {
      String warnings=e.getMessage();
      if (warnings != null && !warnings.equals(lastWarnings)) {
        lastWarnings=warnings;
        MessageDialog.openWarning(getShell(),""String_Node_Str"",warnings);
      }
    }
    try {
      IRunnableWithProgress op=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            ProxyRepositoryFactory.getInstance().initialize();
          }
 catch (          PersistenceException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      new ProgressMonitorDialog(getShell()).run(true,false,op);
    }
 catch (    InvocationTargetException e) {
      throw (Exception)e.getTargetException();
    }
catch (    InterruptedException e) {
    }
    initialized=true;
  }
 catch (  Exception e) {
    projects=new Project[0];
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
  }
}",0.917339149400218
124308,"protected void populateProjectList(){
  Project[] projects=null;
  if (getConnection() != null) {
    String user2=getConnection().getUser();
    String repositoryId2=getConnection().getRepositoryId();
    String workSpace=getConnection().getWorkSpace();
    String name=getConnection().getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      getConnection().setComplete(true);
    }
  }
  if (getConnection() == null || !getConnection().isComplete()) {
    return;
  }
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  repositoryFactory.setRepositoryFactoryFromProvider(RepositoryFactoryProvider.getRepositoriyById(getConnection().getRepositoryId()));
  boolean initialized=false;
  final String newLine=""String_Node_Str"";
  try {
    try {
      repositoryFactory.checkAvailability();
    }
 catch (    WarningException e) {
      String warnings=e.getMessage();
      if (warnings != null && !warnings.equals(lastWarnings)) {
        lastWarnings=warnings;
        MessageDialog.openWarning(getShell(),""String_Node_Str"",warnings);
      }
    }
    try {
      IRunnableWithProgress op=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            ProxyRepositoryFactory.getInstance().initialize();
          }
 catch (          PersistenceException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      new ProgressMonitorDialog(getShell()).run(true,false,op);
    }
 catch (    InvocationTargetException e) {
      throw (Exception)e.getTargetException();
    }
catch (    InterruptedException e) {
    }
    initialized=true;
  }
 catch (  Exception e) {
    projects=new Project[0];
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
  }
  if (initialized) {
    try {
      projects=repositoryFactory.readProject();
      Arrays.sort(projects,new Comparator<Project>(){
        public int compare(        Project p1,        Project p2){
          return p1.getLabel().compareTo(p2.getLabel());
        }
      }
);
    }
 catch (    PersistenceException e) {
      projects=new Project[0];
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
    }
catch (    BusinessException e) {
      projects=new Project[0];
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
    }
  }
  if (projectViewer != null) {
    projectViewer.setInput(projects);
  }
  if (projects.length > 0) {
    selectLastUsedProject();
    if (projectViewer != null) {
      projectViewer.getControl().setEnabled(true);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(true);
    }
  }
 else {
    if (projectViewer != null) {
      projectViewer.getControl().setEnabled(false);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
  }
}","protected void populateProjectList(){
  Project[] projects=null;
  if (getConnection() != null) {
    String user2=getConnection().getUser();
    String repositoryId2=getConnection().getRepositoryId();
    String workSpace=getConnection().getWorkSpace();
    String name=getConnection().getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      boolean valid=Pattern.matches(RepositoryConstants.MAIL_PATTERN,user2);
      if (valid && RepositoryConstants.REPOSITORY_REMOTE_ID.equals(repositoryId2)) {
        String url=getConnection().getDynamicFields().get(RepositoryConstants.REPOSITORY_URL);
        valid=url != null || !""String_Node_Str"".equals(url);
      }
      getConnection().setComplete(valid);
    }
  }
  if (getConnection() == null || !getConnection().isComplete()) {
    return;
  }
  ProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  repositoryFactory.setRepositoryFactoryFromProvider(RepositoryFactoryProvider.getRepositoriyById(getConnection().getRepositoryId()));
  boolean initialized=false;
  final String newLine=""String_Node_Str"";
  try {
    try {
      repositoryFactory.checkAvailability();
    }
 catch (    WarningException e) {
      String warnings=e.getMessage();
      if (warnings != null && !warnings.equals(lastWarnings)) {
        lastWarnings=warnings;
        MessageDialog.openWarning(getShell(),""String_Node_Str"",warnings);
      }
    }
    try {
      IRunnableWithProgress op=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            ProxyRepositoryFactory.getInstance().initialize();
          }
 catch (          PersistenceException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      new ProgressMonitorDialog(getShell()).run(true,false,op);
    }
 catch (    InvocationTargetException e) {
      throw (Exception)e.getTargetException();
    }
catch (    InterruptedException e) {
    }
    initialized=true;
  }
 catch (  Exception e) {
    projects=new Project[0];
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
  }
  if (initialized) {
    try {
      projects=repositoryFactory.readProject();
      Arrays.sort(projects,new Comparator<Project>(){
        public int compare(        Project p1,        Project p2){
          return p1.getLabel().compareTo(p2.getLabel());
        }
      }
);
    }
 catch (    PersistenceException e) {
      projects=new Project[0];
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
    }
catch (    BusinessException e) {
      projects=new Project[0];
      MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + newLine + e.getMessage());
    }
  }
  if (projectViewer != null) {
    projectViewer.setInput(projects);
  }
  if (projects.length > 0) {
    selectLastUsedProject();
    if (projectViewer != null) {
      projectViewer.getControl().setEnabled(true);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(true);
    }
  }
 else {
    if (projectViewer != null) {
      projectViewer.getControl().setEnabled(false);
    }
    if (branchesViewer != null) {
      branchesViewer.getControl().setEnabled(false);
    }
  }
}",0.9462944594020122
124309,"private void fillContents(){
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  boolean isOnlyRemoteConnection=brandingService.getBrandingConfiguration().isOnlyRemoteConnection();
  for (  ConnectionBean bean : storedConnections) {
    String user2=bean.getUser();
    String repositoryId2=bean.getRepositoryId();
    String workSpace=bean.getWorkSpace();
    String name=bean.getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      bean.setComplete(true);
    }
  }
  if (!isOnlyRemoteConnection) {
    connectionsViewer.setInput(storedConnections);
  }
 else {
    List<ILoginConnectionService> loginConnectionServices=LoginConnectionManager.getRemoteConnectionService();
    List<ConnectionBean> lastRemoteConnections=new ArrayList<ConnectionBean>();
    if (loginConnectionServices.size() > 0) {
      for (      ILoginConnectionService loginConncetion : loginConnectionServices) {
        for (        ConnectionBean bean : storedConnections) {
          String errorMsg=loginConncetion.checkConnectionValidation(bean.getName(),bean.getDescription(),bean.getUser(),bean.getPassword(),bean.getWorkSpace(),bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
          if (errorMsg != null && errorMsg.equals(""String_Node_Str"") && bean.isComplete()) {
            lastRemoteConnections.add(bean);
          }
        }
      }
    }
    if (lastRemoteConnections.size() > 0) {
      storedConnections=lastRemoteConnections;
    }
    connectionsViewer.setInput(storedConnections);
  }
  if (storedConnections.size() == 0) {
  }
 else   if (storedConnections.size() == 1) {
    connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
  }
 else {
    boolean selected=false;
    for (    ConnectionBean curent : storedConnections) {
      String stringValue=((LabelProvider)connectionsViewer.getLabelProvider()).getText(curent);
      if (stringValue.equals(lastConnection)) {
        selectLast(stringValue,connectionsViewer.getCombo());
        selected=true;
      }
    }
    if (!selected) {
      connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
    }
  }
  if (getConnection() != null) {
    user.setText(getConnection().getUser());
    passwordText.setText(getConnection().getPassword());
    if (!isAuthenticationNeeded()) {
    }
    setRepositoryContextInContext();
  }
  boolean tisRemote=isSVNProviderPluginLoadedRemote();
  if (svnBranchLabel != null) {
    svnBranchLabel.setVisible(tisRemote);
  }
  if (branchesViewer != null) {
    branchesViewer.getControl().setVisible(tisRemote);
  }
  if (validateFields()) {
    populateProjectList();
    validateProject();
  }
 else {
    if (storedConnections.size() > 0) {
      user.setText(storedConnections.get(0).getUser());
    }
    setRepositoryContextInContext();
    populateProjectList();
  }
  manageViewer.setInput(getManageElements());
  setManageViewer();
}","private void fillContents(){
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  boolean isOnlyRemoteConnection=brandingService.getBrandingConfiguration().isOnlyRemoteConnection();
  for (  ConnectionBean bean : storedConnections) {
    String user2=bean.getUser();
    String repositoryId2=bean.getRepositoryId();
    String workSpace=bean.getWorkSpace();
    String name=bean.getName();
    if (user2 != null && !""String_Node_Str"".equals(user2) && repositoryId2 != null && !""String_Node_Str"".equals(repositoryId2) && workSpace != null && !""String_Node_Str"".equals(workSpace) && name != null && !""String_Node_Str"".equals(name)) {
      boolean valid=Pattern.matches(RepositoryConstants.MAIL_PATTERN,user2);
      if (valid && RepositoryConstants.REPOSITORY_REMOTE_ID.equals(repositoryId2)) {
        String url=bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL);
        valid=url != null || !""String_Node_Str"".equals(url);
      }
      bean.setComplete(valid);
    }
  }
  if (!isOnlyRemoteConnection) {
    connectionsViewer.setInput(storedConnections);
  }
 else {
    List<ILoginConnectionService> loginConnectionServices=LoginConnectionManager.getRemoteConnectionService();
    List<ConnectionBean> lastRemoteConnections=new ArrayList<ConnectionBean>();
    if (loginConnectionServices.size() > 0) {
      for (      ILoginConnectionService loginConncetion : loginConnectionServices) {
        for (        ConnectionBean bean : storedConnections) {
          String errorMsg=loginConncetion.checkConnectionValidation(bean.getName(),bean.getDescription(),bean.getUser(),bean.getPassword(),bean.getWorkSpace(),bean.getDynamicFields().get(RepositoryConstants.REPOSITORY_URL));
          if (errorMsg != null && errorMsg.equals(""String_Node_Str"") && bean.isComplete()) {
            lastRemoteConnections.add(bean);
          }
        }
      }
    }
    if (lastRemoteConnections.size() > 0) {
      storedConnections=lastRemoteConnections;
    }
    connectionsViewer.setInput(storedConnections);
  }
  if (storedConnections.size() == 0) {
  }
 else   if (storedConnections.size() == 1) {
    connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
  }
 else {
    boolean selected=false;
    for (    ConnectionBean curent : storedConnections) {
      String stringValue=((LabelProvider)connectionsViewer.getLabelProvider()).getText(curent);
      if (stringValue.equals(lastConnection)) {
        selectLast(stringValue,connectionsViewer.getCombo());
        selected=true;
      }
    }
    if (!selected) {
      connectionsViewer.setSelection(new StructuredSelection(new Object[]{storedConnections.get(0)}));
    }
  }
  if (getConnection() != null) {
    user.setText(getConnection().getUser());
    passwordText.setText(getConnection().getPassword());
    if (!isAuthenticationNeeded()) {
    }
    setRepositoryContextInContext();
  }
  boolean tisRemote=isSVNProviderPluginLoadedRemote();
  if (svnBranchLabel != null) {
    svnBranchLabel.setVisible(tisRemote);
  }
  if (branchesViewer != null) {
    branchesViewer.getControl().setVisible(tisRemote);
  }
  if (validateFields()) {
    populateProjectList();
    validateProject();
  }
 else {
    if (storedConnections.size() > 0) {
      user.setText(storedConnections.get(0).getUser());
    }
    setRepositoryContextInContext();
    populateProjectList();
  }
  manageViewer.setInput(getManageElements());
  setManageViewer();
}",0.7548961424332344
124310,"public boolean performCancel(){
  selectedItems=null;
  repositoryUtil.clearAllData();
  return true;
}","public boolean performCancel(){
  selectedItems=null;
  repositoryUtil.clearAllData();
  if (sourceFile != null) {
    try {
      sourceFile.close();
    }
 catch (    IOException e) {
    }
  }
  return true;
}",0.5650793650793651
124311,"public void updateItemsList(final String path,boolean isneedUpdate){
  if (!isneedUpdate) {
    if (path.equals(lastPath)) {
      return;
    }
  }
  lastPath=path;
  if (path == null || path.length() == 0) {
    selectedItems=new ArrayList<ItemRecord>();
    checkTreeViewer.refresh(true);
    TreeItem topItem=checkTreeViewer.getTree().getTopItem();
    if (topItem != null) {
      checkTreeViewer.setSubtreeChecked(topItem.getData(),false);
    }
    checkValidItems();
    return;
  }
  final boolean dirSelected=this.itemFromDirectoryRadio.getSelection();
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        monitor.beginTask(DataTransferMessages.WizardProjectsImportPage_SearchingMessage,100);
        File directory=new File(path);
        monitor.worked(10);
        if (!dirSelected && ArchiveFileManipulations.isTarFile(path)) {
          TarFile sourceTarFile=getSpecifiedTarSourceFile(path);
          if (sourceTarFile == null) {
            return;
          }
          TarLeveledStructureProvider provider=new TarLeveledStructureProvider(sourceTarFile);
          manager=ResourcesManagerFactory.getInstance().createResourcesManager(provider);
          if (!manager.collectPath2Object(provider.getRoot())) {
            return;
          }
        }
 else         if (!dirSelected && ArchiveFileManipulations.isZipFile(path)) {
          ZipFile sourceFile=getSpecifiedZipSourceFile(path);
          if (sourceFile == null) {
            return;
          }
          ZipLeveledStructureProvider provider=new ZipLeveledStructureProvider(sourceFile);
          manager=ResourcesManagerFactory.getInstance().createResourcesManager(provider);
          if (!manager.collectPath2Object(provider.getRoot())) {
            return;
          }
        }
 else         if (dirSelected && directory.isDirectory()) {
          manager=ResourcesManagerFactory.getInstance().createResourcesManager();
          if (!manager.collectPath2Object(directory)) {
            return;
          }
        }
 else {
          monitor.worked(60);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    IDEWorkbenchPlugin.log(e.getMessage(),e);
  }
catch (  InterruptedException e) {
  }
  populateItems();
}","public void updateItemsList(final String path,boolean isneedUpdate){
  if (!isneedUpdate) {
    if (path.equals(lastPath)) {
      return;
    }
  }
  lastPath=path;
  if (path == null || path.length() == 0) {
    selectedItems=new ArrayList<ItemRecord>();
    checkTreeViewer.refresh(true);
    TreeItem topItem=checkTreeViewer.getTree().getTopItem();
    if (topItem != null) {
      checkTreeViewer.setSubtreeChecked(topItem.getData(),false);
    }
    checkValidItems();
    return;
  }
  final boolean dirSelected=this.itemFromDirectoryRadio.getSelection();
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        monitor.beginTask(DataTransferMessages.WizardProjectsImportPage_SearchingMessage,100);
        File directory=new File(path);
        monitor.worked(10);
        if (!dirSelected && ArchiveFileManipulations.isTarFile(path)) {
          TarFile sourceTarFile=getSpecifiedTarSourceFile(path);
          if (sourceTarFile == null) {
            return;
          }
          TarLeveledStructureProvider provider=new TarLeveledStructureProvider(sourceTarFile);
          manager=ResourcesManagerFactory.getInstance().createResourcesManager(provider);
          if (!manager.collectPath2Object(provider.getRoot())) {
            return;
          }
        }
 else         if (!dirSelected && ArchiveFileManipulations.isZipFile(path)) {
          sourceFile=getSpecifiedZipSourceFile(path);
          if (sourceFile == null) {
            return;
          }
          ZipLeveledStructureProvider provider=new ZipLeveledStructureProvider(sourceFile);
          manager=ResourcesManagerFactory.getInstance().createResourcesManager(provider);
          if (!manager.collectPath2Object(provider.getRoot())) {
            return;
          }
        }
 else         if (dirSelected && directory.isDirectory()) {
          manager=ResourcesManagerFactory.getInstance().createResourcesManager();
          if (!manager.collectPath2Object(directory)) {
            return;
          }
        }
 else {
          monitor.worked(60);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    IDEWorkbenchPlugin.log(e.getMessage(),e);
  }
catch (  InterruptedException e) {
  }
  populateItems();
}",0.998280309544282
124312,"/** 
 * Calculates the contents of page 2 when the it is activated.
 */
@Override protected void pageChange(final int newPageIndex){
  super.pageChange(newPageIndex);
  setName();
  if (newPageIndex == 1) {
    if (codeEditor instanceof ISyntaxCheckableEditor) {
      moveCursorToSelectedComponent();
    }
    codeSync();
    if (codeEditor instanceof ISyntaxCheckableEditor && LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
      ((ISyntaxCheckableEditor)codeEditor).validateSyntax();
    }
  }
 else   if (newPageIndex == 0 && oldPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      try {
        boolean isDirty=getEditor(2).isDirty();
        getEditor(2).doSave(null);
        IProcess2 oldProcess=getProcess();
        ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
        URI uri=URI.createFileURI(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString());
        Resource resource=new ResourceSetImpl().getResource(uri,true);
        ProcessType processTypeTemp=(ProcessType)resource.getContents().get(0);
        if (processTypeTemp.getAuthor() != null) {
          ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
          Item item=oldProcess.getProperty().getItem();
          if (item instanceof ProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
 else           if (item instanceof JobletProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
          oldProcess.getUpdateManager().updateAll();
          designerEditor.setDirty(isDirty);
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(true);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(true);
        }
      }
    }
  }
 else   if (newPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      ICreateXtextProcessService convertJobtoScriptService=CorePlugin.getDefault().getCreateXtextProcessService();
      String scriptValue;
      try {
        scriptValue=convertJobtoScriptService.convertJobtoScript(getProcess().saveXmlFile());
        IFile file=(IFile)getEditor(2).getEditorInput().getAdapter(IResource.class);
        ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(scriptValue.getBytes());
        if (file.exists()) {
          ((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider().getDocument(getEditor(2).getEditorInput()).set(scriptValue);
          IProxyRepositoryFactory rFactory=ProxyRepositoryFactory.getInstance();
          if (rFactory.isUserReadOnlyOnCurrentProject()) {
            IDocumentProvider provider=((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider();
            Class p=provider.getClass();
            Class[] type=new Class[1];
            type[0]=Boolean.TYPE;
            Object[] para=new Object[1];
            para[0]=Boolean.TRUE;
            Method method=p.getMethod(""String_Node_Str"",type);
            method.invoke(provider,para);
          }
          IAction action=((AbstractDecoratedTextEditor)getEditor(2)).getAction(""String_Node_Str"");
          action.run();
          getEditor(2).doSave(null);
        }
 else {
          file.create(byteArrayInputStream,true,null);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
catch (      SecurityException e) {
        ExceptionHandler.process(e);
      }
catch (      NoSuchMethodException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalArgumentException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalAccessException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(false);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(false);
        }
      }
    }
  }
  oldPageIndex=getActivePage();
}","/** 
 * Calculates the contents of page 2 when the it is activated.
 */
@Override protected void pageChange(final int newPageIndex){
  super.pageChange(newPageIndex);
  setName();
  if (newPageIndex == 1) {
    if (codeEditor instanceof ISyntaxCheckableEditor) {
      moveCursorToSelectedComponent();
    }
    codeSync();
    if (codeEditor instanceof ISyntaxCheckableEditor && LanguageManager.getCurrentLanguage() == ECodeLanguage.PERL) {
      ((ISyntaxCheckableEditor)codeEditor).validateSyntax();
    }
  }
 else   if (newPageIndex == 0 && oldPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      try {
        boolean isDirty=getEditor(2).isDirty();
        getEditor(2).doSave(null);
        IProcess2 oldProcess=getProcess();
        ICreateXtextProcessService n=CorePlugin.getDefault().getCreateXtextProcessService();
        URI uri=URI.createFileURI(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString());
        Resource resource=new ResourceSetImpl().getResource(uri,true);
        ProcessType processTypeTemp=(ProcessType)resource.getContents().get(0);
        if (processTypeTemp.getAuthor() != null) {
          ProcessType processType=n.convertDesignerEditorInput(((IFile)getEditor(2).getEditorInput().getAdapter(IResource.class)).getLocation().toOSString(),oldProcess.getProperty());
          Item item=oldProcess.getProperty().getItem();
          if (item instanceof ProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
 else           if (item instanceof JobletProcessItem) {
            ((Process)oldProcess).updateProcess(processType);
          }
          oldProcess.getUpdateManager().updateAll();
          designerEditor.setDirty(isDirty);
        }
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(true);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(true);
        }
      }
    }
  }
 else   if (newPageIndex == 2) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICreateXtextProcessService.class)) {
      ICreateXtextProcessService convertJobtoScriptService=CorePlugin.getDefault().getCreateXtextProcessService();
      String scriptValue;
      try {
        scriptValue=convertJobtoScriptService.convertJobtoScript(getProcess().saveXmlFile());
        IFile file=(IFile)getEditor(2).getEditorInput().getAdapter(IResource.class);
        ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(scriptValue.getBytes());
        if (file.exists()) {
          ((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider().getDocument(getEditor(2).getEditorInput()).set(scriptValue);
          boolean isReadjob=((JobEditorInput)getEditor(0).getEditorInput()).isReadOnly();
          IProxyRepositoryFactory rFactory=ProxyRepositoryFactory.getInstance();
          if (isReadjob || rFactory.isUserReadOnlyOnCurrentProject()) {
            IDocumentProvider provider=((AbstractDecoratedTextEditor)getEditor(2)).getDocumentProvider();
            Class p=provider.getClass();
            Class[] type=new Class[1];
            type[0]=Boolean.TYPE;
            Object[] para=new Object[1];
            para[0]=Boolean.TRUE;
            Method method=p.getMethod(""String_Node_Str"",type);
            method.invoke(provider,para);
          }
          IAction action=((AbstractDecoratedTextEditor)getEditor(2)).getAction(""String_Node_Str"");
          action.run();
          getEditor(2).doSave(null);
        }
 else {
          file.create(byteArrayInputStream,true,null);
        }
      }
 catch (      PartInitException e) {
        ExceptionHandler.process(e);
      }
catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
catch (      IOException e) {
        ExceptionHandler.process(e);
      }
catch (      SecurityException e) {
        ExceptionHandler.process(e);
      }
catch (      NoSuchMethodException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalArgumentException e) {
        ExceptionHandler.process(e);
      }
catch (      IllegalAccessException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
      IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (workbenchPage != null) {
        IViewPart view=workbenchPage.findView(ContextsView.ID);
        if (view != null) {
          ContextsView contextsView=(ContextsView)view;
          contextsView.getContextViewComposite().setTabEnable(false);
          contextsView.getContextViewComposite().getContextTemplateComposite().getViewer().getTree().setEnabled(false);
        }
      }
    }
  }
  oldPageIndex=getActivePage();
}",0.9901180082509834
124313,"/** 
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#createActions()
 */
protected void createActions(){
  ImportTreeFromXml importAction=new ImportTreeFromXml(this,getGraphicalViewer().getControl().getShell());
  importAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(importAction);
  getSelectionActions().add(importAction.getId());
  CreateAttributeAction createAttribute=new CreateAttributeAction(this);
  createAttribute.setMapperManager(mapperManager);
  getActionRegistry().registerAction(createAttribute);
  getSelectionActions().add(createAttribute.getId());
  CreateElementAction createElement=new CreateElementAction(this);
  createElement.setMapperManager(mapperManager);
  getActionRegistry().registerAction(createElement);
  getSelectionActions().add(createElement.getId());
  DeleteTreeNodeAction deleteAction=new DeleteTreeNodeAction(this);
  deleteAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(deleteAction);
  getSelectionActions().add(deleteAction.getId());
  SetLoopAction loopAction=new SetLoopAction(this);
  loopAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(loopAction);
  getSelectionActions().add(loopAction.getId());
  IAction groupAction=new SetGroupAction(this);
  getActionRegistry().registerAction(groupAction);
  getSelectionActions().add(groupAction.getId());
  ImportTreeFromRepository importFromRepository=new ImportTreeFromRepository(this,getGraphicalViewer().getControl().getShell());
  importFromRepository.setMapperManager(mapperManager);
  getActionRegistry().registerAction(importFromRepository);
  getSelectionActions().add(importFromRepository.getId());
  CreateNameSpaceAction createNameSpaceInput=new CreateNameSpaceAction(this);
  createNameSpaceInput.setMapperManager(mapperManager);
  getActionRegistry().registerAction(createNameSpaceInput);
  getSelectionActions().add(createNameSpaceInput.getId());
  FixValueAction fixValueAction=new FixValueAction(this);
  getActionRegistry().registerAction(fixValueAction);
  getSelectionActions().add(fixValueAction.getId());
  SetAggregateAction aggreagteAction=new SetAggregateAction(this);
  getActionRegistry().registerAction(aggreagteAction);
  getSelectionActions().add(aggreagteAction.getId());
  RenameTreeNodeAction renameTreeNodeAction=new RenameTreeNodeAction(this);
  renameTreeNodeAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(renameTreeNodeAction);
  getSelectionActions().add(renameTreeNodeAction.getId());
}","/** 
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#createActions()
 */
protected void createActions(){
  ImportTreeFromXml importAction=new ImportTreeFromXml(this,getGraphicalViewer().getControl().getShell());
  importAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(importAction);
  getSelectionActions().add(importAction.getId());
  CreateAttributeAction createAttribute=new CreateAttributeAction(this);
  createAttribute.setMapperManager(mapperManager);
  getActionRegistry().registerAction(createAttribute);
  getSelectionActions().add(createAttribute.getId());
  CreateElementAction createElement=new CreateElementAction(this);
  createElement.setMapperManager(mapperManager);
  getActionRegistry().registerAction(createElement);
  getSelectionActions().add(createElement.getId());
  DeleteTreeNodeAction deleteAction=new DeleteTreeNodeAction(this);
  deleteAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(deleteAction);
  getSelectionActions().add(deleteAction.getId());
  SetLoopAction loopAction=new SetLoopAction(this);
  loopAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(loopAction);
  getSelectionActions().add(loopAction.getId());
  IAction groupAction=new SetGroupAction(this);
  getActionRegistry().registerAction(groupAction);
  getSelectionActions().add(groupAction.getId());
  ImportTreeFromRepository importFromRepository=new ImportTreeFromRepository(this,getGraphicalViewer().getControl().getShell());
  importFromRepository.setMapperManager(mapperManager);
  getActionRegistry().registerAction(importFromRepository);
  getSelectionActions().add(importFromRepository.getId());
  CreateNameSpaceAction createNameSpaceInput=new CreateNameSpaceAction(this);
  createNameSpaceInput.setMapperManager(mapperManager);
  getActionRegistry().registerAction(createNameSpaceInput);
  getSelectionActions().add(createNameSpaceInput.getId());
  FixValueAction fixValueAction=new FixValueAction(this);
  getActionRegistry().registerAction(fixValueAction);
  getSelectionActions().add(fixValueAction.getId());
  fixValueAction.setMapperManager(mapperManager);
  SetAggregateAction aggreagteAction=new SetAggregateAction(this);
  getActionRegistry().registerAction(aggreagteAction);
  getSelectionActions().add(aggreagteAction.getId());
  RenameTreeNodeAction renameTreeNodeAction=new RenameTreeNodeAction(this);
  renameTreeNodeAction.setMapperManager(mapperManager);
  getActionRegistry().registerAction(renameTreeNodeAction);
  getSelectionActions().add(renameTreeNodeAction.getId());
}",0.990226739640344
124314,"@Override public void run(){
  String prefix=null;
  String defaultValue=null;
  while (!isValidPrefix(prefix) || !StringUtil.validateLabelForNameSpace(prefix) || !StringUtil.validateLabelForFixedValue(defaultValue)) {
    NameSpaceDialog nsDialog=new NameSpaceDialog(null);
    int status=nsDialog.open();
    if (status == nsDialog.OK) {
      defaultValue=nsDialog.getNSValue();
      if (defaultValue != null) {
        defaultValue=defaultValue.trim();
      }
      prefix=nsDialog.getPrefix().trim();
    }
    if (status == nsDialog.CANCEL) {
      return;
    }
  }
  TreeNode createdNode=null;
  if (input) {
    createdNode=XmlmapFactory.eINSTANCE.createTreeNode();
  }
 else {
    createdNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
  }
  createdNode.setName(prefix);
  createdNode.setNodeType(NodeType.NAME_SPACE);
  createdNode.setDefaultValue(defaultValue);
  createdNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
  String label=createdNode.getName();
  if (prefix == null || ""String_Node_Str"".equals(prefix)) {
    label=XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX;
    createdNode.setName(XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX);
  }
  createdNode.setXpath(XmlMapUtil.getXPath(parent.getXpath(),label,NodeType.NAME_SPACE));
  final EList<TreeNode> children=parent.getChildren();
  int index=0;
  for (int i=0; i < children.size(); i++) {
    final TreeNode treeNode=children.get(i);
    if (treeNode.getNodeType() == NodeType.NAME_SPACE) {
      if (i == children.size() - 1) {
        index=children.size();
      }
      continue;
    }
 else {
      index=i;
      break;
    }
  }
  children.add(index,createdNode);
  TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
  if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
    mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
  }
 else   if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
    mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
  }
}","@Override public void run(){
  String prefix=null;
  String defaultValue=null;
  NameSpaceDialog nsDialog=new NameSpaceDialog(null);
  nsDialog.setParentNode(parent);
  int status=nsDialog.open();
  if (status == nsDialog.OK) {
    defaultValue=nsDialog.getNSValue();
    if (defaultValue != null) {
      defaultValue=defaultValue.trim();
    }
    prefix=nsDialog.getPrefix().trim();
  }
  if (status == nsDialog.CANCEL) {
    return;
  }
  TreeNode createdNode=null;
  if (input) {
    createdNode=XmlmapFactory.eINSTANCE.createTreeNode();
  }
 else {
    createdNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
  }
  createdNode.setName(prefix);
  createdNode.setNodeType(NodeType.NAME_SPACE);
  createdNode.setDefaultValue(defaultValue);
  createdNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
  String label=createdNode.getName();
  if (prefix == null || ""String_Node_Str"".equals(prefix)) {
    label=XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX;
    createdNode.setName(XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX);
  }
  createdNode.setXpath(XmlMapUtil.getXPath(parent.getXpath(),label,NodeType.NAME_SPACE));
  final EList<TreeNode> children=parent.getChildren();
  int index=0;
  for (int i=0; i < children.size(); i++) {
    final TreeNode treeNode=children.get(i);
    if (treeNode.getNodeType() == NodeType.NAME_SPACE) {
      if (i == children.size() - 1) {
        index=children.size();
      }
      continue;
    }
 else {
      index=i;
      break;
    }
  }
  children.add(index,createdNode);
  TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
  if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
    mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
  }
 else   if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
    mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
  }
}",0.906810035842294
124315,"@Override public void run(){
  if (selectedNode != null) {
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",selectedNode.getDefaultValue(),null);
    if (dialog.open() == Window.OK) {
      selectedNode.setDefaultValue(dialog.getValue());
    }
  }
}","@Override public void run(){
  if (selectedNode != null) {
    NameSpaceDialog nsDialog=new NameSpaceDialog(null);
    nsDialog.setCurrentNode(selectedNode);
    nsDialog.setParentNode((TreeNode)selectedNode.eContainer());
    int status=nsDialog.open();
    if (status == nsDialog.OK) {
      String defaultValue=nsDialog.getNSValue();
      if (defaultValue != null) {
        defaultValue=defaultValue.trim();
      }
      String prefix=nsDialog.getPrefix().trim();
      selectedNode.setDefaultValue(defaultValue);
      if (prefix == null || ""String_Node_Str"".equals(prefix)) {
        prefix=XmlMapUtil.DEFAULT_NAME_SPACE_PREFIX;
      }
      selectedNode.setName(prefix);
      XmlMapData externalEmfData=(XmlMapData)mapperManager.getCopyOfMapData();
      XmlMapUtil.updateXPathAndExpression(externalEmfData,selectedNode,prefix,XmlMapUtil.getXPathLength(selectedNode.getXpath()),true);
    }
  }
}",0.2272727272727272
124316,"@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
 else {
    boolean enable=true;
    for (    Object obj : getSelectedObjects()) {
      if (obj instanceof TreeNodeEditPart) {
        TreeNodeEditPart nodePart=(TreeNodeEditPart)obj;
        this.selectedNode=(TreeNode)nodePart.getModel();
        int xPathLength=XmlMapUtil.getXPathLength(selectedNode.getXpath());
        if (xPathLength <= 2) {
          enable=false;
        }
      }
 else {
        enable=false;
      }
    }
    return enable;
  }
}","@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
 else {
    boolean enable=true;
    for (    Object obj : getSelectedObjects()) {
      if (obj instanceof TreeNodeEditPart) {
        TreeNodeEditPart nodePart=(TreeNodeEditPart)obj;
        this.selectedNode=(TreeNode)nodePart.getModel();
        if (NodeType.NAME_SPACE.equals(selectedNode.getNodeType())) {
          return false;
        }
        int xPathLength=XmlMapUtil.getXPathLength(selectedNode.getXpath());
        if (xPathLength <= 2) {
          enable=false;
        }
      }
 else {
        enable=false;
      }
    }
    return enable;
  }
}",0.9163987138263664
124317,"public String isValid(String newText){
  String xpath=XmlMapUtil.getXPath(((TreeNode)selectedNode.eContainer()).getXpath(),newText,selectedNode.getNodeType());
  EList<TreeNode> children=((TreeNode)selectedNode.eContainer()).getChildren();
  boolean exist=false;
  for (  TreeNode child : children) {
    if (child.getNodeType().equals(selectedNode.getNodeType())) {
      if (child.getXpath() != null && child.getXpath().equals(xpath) && !child.equals(selectedNode)) {
        exist=true;
        break;
      }
    }
  }
  if (exist) {
    if (selectedNode.getNodeType().equals(NodeType.ATTRIBUT)) {
      return ""String_Node_Str"" + newText + ""String_Node_Str"";
    }
 else     if (selectedNode.getNodeType().equals(NodeType.ELEMENT)) {
      return ""String_Node_Str"" + newText + ""String_Node_Str"";
    }
 else     if (selectedNode.getNodeType().equals(NodeType.NAME_SPACE)) {
      return ""String_Node_Str"" + newText + ""String_Node_Str"";
    }
  }
  return null;
}","public String isValid(String newText){
  String xpath=XmlMapUtil.getXPath(((TreeNode)selectedNode.eContainer()).getXpath(),newText,selectedNode.getNodeType());
  EList<TreeNode> children=((TreeNode)selectedNode.eContainer()).getChildren();
  boolean exist=false;
  for (  TreeNode child : children) {
    if (child.getNodeType().equals(selectedNode.getNodeType())) {
      if (child.getXpath() != null && child.getXpath().equals(xpath) && !child.equals(selectedNode)) {
        exist=true;
        break;
      }
    }
  }
  if (exist) {
    if (selectedNode.getNodeType().equals(NodeType.ATTRIBUT)) {
      return ""String_Node_Str"" + newText + ""String_Node_Str"";
    }
 else     if (selectedNode.getNodeType().equals(NodeType.ELEMENT)) {
      return ""String_Node_Str"" + newText + ""String_Node_Str"";
    }
  }
  return null;
}",0.9041248606465998
124318,"@Override public void run(){
  if (selectedNode != null) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(((TreeNode)selectedNode.eContainer()).getXpath(),newText,selectedNode.getNodeType());
        EList<TreeNode> children=((TreeNode)selectedNode.eContainer()).getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getNodeType().equals(selectedNode.getNodeType())) {
            if (child.getXpath() != null && child.getXpath().equals(xpath) && !child.equals(selectedNode)) {
              exist=true;
              break;
            }
          }
        }
        if (exist) {
          if (selectedNode.getNodeType().equals(NodeType.ATTRIBUT)) {
            return ""String_Node_Str"" + newText + ""String_Node_Str"";
          }
 else           if (selectedNode.getNodeType().equals(NodeType.ELEMENT)) {
            return ""String_Node_Str"" + newText + ""String_Node_Str"";
          }
 else           if (selectedNode.getNodeType().equals(NodeType.NAME_SPACE)) {
            return ""String_Node_Str"" + newText + ""String_Node_Str"";
          }
        }
        return null;
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",selectedNode.getName(),validataor);
    if (dialog.open() == Window.OK) {
      selectedNode.setName(dialog.getValue());
      XmlMapData externalEmfData=(XmlMapData)mapperManager.getCopyOfMapData();
      XmlMapUtil.updateXPathAndExpression(externalEmfData,selectedNode,dialog.getValue(),XmlMapUtil.getXPathLength(selectedNode.getXpath()),true);
      TabFolderEditors tabFolderEditors=mapperManager.getMapperUI().getTabFolderEditors();
      if (tabFolderEditors != null) {
        if (selectedNode instanceof OutputTreeNode) {
          tabFolderEditors.getOutputTreeSchemaEditor().refresh();
        }
 else         if (selectedNode instanceof TreeNode) {
          tabFolderEditors.getInputTreeSchemaEditor().refresh();
        }
      }
    }
  }
}","@Override public void run(){
  if (selectedNode != null) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(((TreeNode)selectedNode.eContainer()).getXpath(),newText,selectedNode.getNodeType());
        EList<TreeNode> children=((TreeNode)selectedNode.eContainer()).getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getNodeType().equals(selectedNode.getNodeType())) {
            if (child.getXpath() != null && child.getXpath().equals(xpath) && !child.equals(selectedNode)) {
              exist=true;
              break;
            }
          }
        }
        if (exist) {
          if (selectedNode.getNodeType().equals(NodeType.ATTRIBUT)) {
            return ""String_Node_Str"" + newText + ""String_Node_Str"";
          }
 else           if (selectedNode.getNodeType().equals(NodeType.ELEMENT)) {
            return ""String_Node_Str"" + newText + ""String_Node_Str"";
          }
        }
        return null;
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",selectedNode.getName(),validataor);
    if (dialog.open() == Window.OK) {
      selectedNode.setName(dialog.getValue());
      XmlMapData externalEmfData=(XmlMapData)mapperManager.getCopyOfMapData();
      XmlMapUtil.updateXPathAndExpression(externalEmfData,selectedNode,dialog.getValue(),XmlMapUtil.getXPathLength(selectedNode.getXpath()),true);
      TabFolderEditors tabFolderEditors=mapperManager.getMapperUI().getTabFolderEditors();
      if (tabFolderEditors != null) {
        if (selectedNode instanceof OutputTreeNode) {
          tabFolderEditors.getOutputTreeSchemaEditor().refresh();
        }
 else         if (selectedNode instanceof TreeNode) {
          tabFolderEditors.getInputTreeSchemaEditor().refresh();
        }
      }
    }
  }
}",0.96061814556331
124319,"public void run(IIntroSite site,Properties params){
  PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
  setRepositoryNode(params);
  doRun();
}","public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    setRepositoryNode(params);
    doRun();
  }
}",0.6561014263074485
124320,"public void run(IIntroSite site,Properties params){
  PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
  selectRootObject(params);
  doRun();
}","public void run(IIntroSite site,Properties params){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    MessageDialog.openWarning(null,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    PlatformUI.getWorkbench().getIntroManager().closeIntro(PlatformUI.getWorkbench().getIntroManager().getIntro());
    selectRootObject(params);
    doRun();
  }
}",0.6550079491255962
124321,"@Override public void run(){
  TreeNode treeNode=null;
  boolean needWarning=false;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
    if (!parent.getOutgoingConnections().isEmpty()) {
      needWarning=true;
    }
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
    OutputTreeNode outputTreeNode=(OutputTreeNode)treeNode;
    EList<Connection> incomingConnections=parent.getIncomingConnections();
    if (!incomingConnections.isEmpty()) {
      needWarning=true;
    }
  }
  boolean canContinue=true;
  if (needWarning) {
    canContinue=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
  }
  if (canContinue) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ELEMENT);
        EList<TreeNode> children=parent.getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getXpath() != null && child.getXpath().equals(xpath)) {
            exist=true;
            break;
          }
        }
        if (exist) {
          return ""String_Node_Str"" + newText + ""String_Node_Str"";
        }
 else {
          return null;
        }
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
    int open=dialog.open();
    if (open == Window.OK) {
      XmlMapUtil.detachNodeConnections(parent,mapperManager.getCopyOfMapData(),false);
      treeNode.setName(dialog.getValue());
      treeNode.setNodeType(NodeType.ELEMENT);
      treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
      treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
      parent.getChildren().add(treeNode);
      parent.setExpression(""String_Node_Str"");
      if (!input) {
        OutputTreeNode output=(OutputTreeNode)parent;
        if (!XmlMapUtil.isExpressionEditable(output) && output.isAggregate()) {
          output.setAggregate(false);
        }
      }
    }
    if (open == Window.OK && mapperManager != null) {
      TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
    }
  }
}","@Override public void run(){
  TreeNode treeNode=null;
  boolean needWarning=false;
  if (input) {
    treeNode=XmlmapFactory.eINSTANCE.createTreeNode();
    if (!parent.getOutgoingConnections().isEmpty()) {
      needWarning=true;
    }
  }
 else {
    treeNode=XmlmapFactory.eINSTANCE.createOutputTreeNode();
    OutputTreeNode outputTreeNode=(OutputTreeNode)treeNode;
    EList<Connection> incomingConnections=parent.getIncomingConnections();
    if (!incomingConnections.isEmpty()) {
      needWarning=true;
    }
  }
  boolean canContinue=true;
  if (needWarning) {
    canContinue=MessageDialog.openConfirm(null,""String_Node_Str"",""String_Node_Str"");
  }
  if (canContinue) {
    IInputValidator validataor=new IInputValidator(){
      public String isValid(      String newText){
        String xpath=XmlMapUtil.getXPath(parent.getXpath(),newText,NodeType.ELEMENT);
        EList<TreeNode> children=parent.getChildren();
        boolean exist=false;
        for (        TreeNode child : children) {
          if (child.getXpath() != null && child.getXpath().equals(xpath)) {
            exist=true;
            break;
          }
        }
        if (exist) {
          return ""String_Node_Str"" + newText + ""String_Node_Str"";
        }
 else {
          return null;
        }
      }
    }
;
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",validataor);
    int open=dialog.open();
    if (open == Window.OK) {
      XmlMapUtil.detachNodeConnections(parent,mapperManager.getCopyOfMapData(),false);
      treeNode.setName(dialog.getValue());
      treeNode.setNodeType(NodeType.ELEMENT);
      treeNode.setXpath(XmlMapUtil.getXPath(this.parent.getXpath(),treeNode.getName(),treeNode.getNodeType()));
      treeNode.setType(XmlMapUtil.DEFAULT_DATA_TYPE);
      parent.getChildren().add(treeNode);
      parent.setExpression(""String_Node_Str"");
      if (!input) {
        OutputTreeNode output=(OutputTreeNode)parent;
        if (!XmlMapUtil.isExpressionEditable(output) && output.isAggregate()) {
          output.setAggregate(false);
        }
      }
      if (parent.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)parent.eContainer()).getType())) {
        if (parent.isLoop()) {
          parent.setLoop(false);
        }
      }
    }
    if (open == Window.OK && mapperManager != null) {
      TreeNode docRoot=XmlMapUtil.getTreeNodeRoot(parent);
      if (input) {
        if (docRoot != null && docRoot.eContainer() instanceof InputXmlTree) {
          mapperManager.refreshInputTreeSchemaEditor((InputXmlTree)docRoot.eContainer());
        }
      }
 else {
        if (docRoot != null && docRoot.eContainer() instanceof OutputXmlTree) {
          mapperManager.refreshOutputTreeSchemaEditor((OutputXmlTree)docRoot.eContainer());
        }
      }
    }
  }
}",0.9621542940320232
124322,"@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  if (getSelectedObjects().get(0) instanceof TreeNodeEditPart) {
    TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
    TreeNode model=(TreeNode)nodePart.getModel();
    if (model.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)model.eContainer()).getType())) {
      return false;
    }
    if (NodeType.ATTRIBUT.equals(model.getNodeType()) || NodeType.NAME_SPACE.equals(model.getNodeType()) || !(model.eContainer() instanceof TreeNode)) {
      return false;
    }
    if (model.isLoop()) {
      return false;
    }
  }
 else {
    return false;
  }
  return true;
}","@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  if (getSelectedObjects().get(0) instanceof TreeNodeEditPart) {
    TreeNodeEditPart nodePart=(TreeNodeEditPart)getSelectedObjects().get(0);
    TreeNode model=(TreeNode)nodePart.getModel();
    if (model.eContainer() instanceof TreeNode && XmlMapUtil.DOCUMENT.equals(((TreeNode)model.eContainer()).getType())) {
      if (model.getChildren().isEmpty()) {
        return true;
      }
      return false;
    }
    if (NodeType.ATTRIBUT.equals(model.getNodeType()) || NodeType.NAME_SPACE.equals(model.getNodeType()) || !(model.eContainer() instanceof TreeNode)) {
      return false;
    }
    if (model.isLoop()) {
      return false;
    }
  }
 else {
    return false;
  }
  return true;
}",0.9530638852672751
124323,"/** 
 * DOC smallet Comment method ""openRoutineEditor"".
 * @param item
 * @throws SystemException
 * @throws PartInitException
 */
public IEditorPart openSQLPatternEditor(SQLPatternItem item,boolean readOnly) throws SystemException, PartInitException {
  if (item == null) {
    return null;
  }
  ICodeGeneratorService service=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  ECodeLanguage lang=((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getProject().getLanguage();
  ISQLPatternSynchronizer routineSynchronizer=service.getSQLPatternSynchronizer();
  IWorkbenchPage page=getActivePage();
  IEditorReference[] editorParts=page.getEditorReferences();
  String talendEditorID=""String_Node_Str"" + lang.getCaseName() + ""String_Node_Str"";
  boolean found=false;
  IEditorPart talendEditor=null;
  for (  IEditorReference reference : editorParts) {
    IEditorPart editor=reference.getEditor(false);
    if (talendEditorID.equals(editor.getSite().getId())) {
      RepositoryEditorInput editorInput=(RepositoryEditorInput)editor.getEditorInput();
      if (editorInput.getItem().equals(item)) {
        page.bringToTop(editor);
        found=true;
        talendEditor=editor;
        break;
      }
    }
  }
  if (!found) {
    routineSynchronizer.syncSQLPattern(item,true);
    IFile file=routineSynchronizer.getSQLPatternFile(item);
    RepositoryEditorInput input=new RepositoryEditorInput(file,item);
    input.setReadOnly(readOnly);
    talendEditor=page.openEditor(input,talendEditorID);
  }
  return talendEditor;
}","/** 
 * DOC smallet Comment method ""openRoutineEditor"".
 * @param item
 * @throws SystemException
 * @throws PartInitException
 */
public IEditorPart openSQLPatternEditor(SQLPatternItem item,boolean readOnly) throws SystemException, PartInitException {
  if (item == null) {
    return null;
  }
  ICodeGeneratorService service=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
  ECodeLanguage lang=((RepositoryContext)CorePlugin.getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getProject().getLanguage();
  ISQLPatternSynchronizer routineSynchronizer=service.getSQLPatternSynchronizer();
  IWorkbenchPage page=getActivePage();
  IEditorReference[] editorParts=page.getEditorReferences();
  String talendEditorID=""String_Node_Str"" + lang.getCaseName() + ""String_Node_Str"";
  boolean found=false;
  IEditorPart talendEditor=null;
  for (  IEditorReference reference : editorParts) {
    IEditorPart editor=reference.getEditor(false);
    if (talendEditorID.equals(editor.getSite().getId())) {
      RepositoryEditorInput editorInput=(RepositoryEditorInput)editor.getEditorInput();
      Item item2=editorInput.getItem();
      if (item2 != null && item2 instanceof SQLPatternItem && item2.getProperty().getId().equals(item.getProperty().getId())) {
        if (item2.getProperty().getVersion().equals(item.getProperty().getVersion())) {
          page.bringToTop(editor);
          found=true;
          talendEditor=editor;
          break;
        }
 else {
          page.closeEditor(editor,false);
        }
      }
    }
  }
  if (!found) {
    routineSynchronizer.syncSQLPattern(item,true);
    IFile file=routineSynchronizer.getSQLPatternFile(item);
    RepositoryEditorInput input=new RepositoryEditorInput(file,item);
    input.setReadOnly(readOnly);
    talendEditor=page.openEditor(input,talendEditorID);
  }
  return talendEditor;
}",0.7885162023877202
124324,"/** 
 * Deal with the bug 4402: the content <quotes_encoded>&quot;hello world&quot;</quotes_encoded>. In this case, ""characters"" will be called three time. first: "" second: hello world third: ""
 */
public void characters(char ch[],int start,int length) throws SAXException {
  if (isLooping) {
    String text=new String(ch,start,length);
    if (text.length() > 0) {
      if (outputText && indexOfColumn >= 0 && false == currentRowHaveValue[indexOfColumn]) {
        if (currentRow[indexOfColumn] == null) {
          currentRow[indexOfColumn]=text;
        }
 else {
          currentRow[indexOfColumn]+=text;
        }
      }
      if (this.entry.hasFunctions()) {
        Map<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",loopPath);
        map.put(""String_Node_Str"",currentPath);
        map.put(""String_Node_Str"",text);
        listArgs.add(map);
      }
    }
  }
}","/** 
 * Deal with the bug 4402: the content <quotes_encoded>&quot;hello world&quot;</quotes_encoded>. In this case, ""characters"" will be called three time. first: "" second: hello world third: ""
 */
public void characters(char ch[],int start,int length) throws SAXException {
  if (isLooping) {
    String text=new String(ch,start,length);
    if (text.length() > 0) {
      if (outputText) {
        for (        int indexOfColumn : indexOfColumns) {
          if (indexOfColumn >= 0 && !currentRowHaveValue[indexOfColumn]) {
            if (currentRow[indexOfColumn] == null) {
              currentRow[indexOfColumn]=text;
            }
 else {
              currentRow[indexOfColumn]+=text;
            }
          }
        }
      }
      if (this.entry.hasFunctions()) {
        Map<String,Object> map=new HashMap<String,Object>();
        map.put(""String_Node_Str"",loopPath);
        map.put(""String_Node_Str"",currentPath);
        map.put(""String_Node_Str"",text);
        listArgs.add(map);
      }
    }
  }
}",0.8242612752721618
124325,"public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping && outputText && indexOfColumn >= 0) {
    if (currentRow[indexOfColumn] == null) {
      currentRow[indexOfColumn]=""String_Node_Str"";
    }
    if (currentRow[indexOfColumn].trim().startsWith(""String_Node_Str"")) {
      currentRow[indexOfColumn]=currentRow[indexOfColumn] + ""String_Node_Str"" + qName+ ""String_Node_Str"";
    }
 else {
      currentRowHaveValue[indexOfColumn]=true;
    }
  }
  outputText=false;
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}","public void endElement(String uri,String localName,String qName) throws SAXException {
  String loopPath=this.loopPath;
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
  }
  if (isLooping && outputText) {
    for (    int indexOfColumn : indexOfColumns) {
      if (indexOfColumn >= 0) {
        if (currentRow[indexOfColumn] == null) {
          currentRow[indexOfColumn]=""String_Node_Str"";
        }
        if (currentRow[indexOfColumn].trim().startsWith(""String_Node_Str"")) {
          currentRow[indexOfColumn]=currentRow[indexOfColumn] + ""String_Node_Str"" + qName+ ""String_Node_Str"";
        }
 else {
          currentRowHaveValue[indexOfColumn]=true;
        }
      }
    }
  }
  outputText=false;
  if (currentPath.equals(loopPath)) {
    isLooping=false;
    if (this.entry.hasFunctions()) {
      entry.execFunctions(listArgs);
      List<Map<String,String>> results=entry.getFunctionResults();
      for (int i=0; i < results.size(); i++) {
        Map<String,String> map=results.get(i);
        String strKey=map.get(""String_Node_Str"");
        int index=this.loopCols.indexOf(strKey);
        if (index >= 0 && currentRowHaveValue[index] == false) {
          currentRow[index]=map.get(""String_Node_Str"");
          currentRowHaveValue[index]=true;
        }
      }
    }
    currentRow[currentRow.length - 1]=Integer.toString(subLoopCount);
    entry.getRows().add(currentRow);
    if (this.entry.getOriginalLoopPath() != null) {
      this.saxLooper.addLoopOrder(this.entry.getOriginalLoopPath());
    }
  }
  currentPath=currentPath.substring(0,currentPath.lastIndexOf(""String_Node_Str""));
}",0.3801295896328294
124326,"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  List<String> loopCols=new ArrayList<String>();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        loopCols.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          loopCols.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          loopCols.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    loopCols.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    indexOfColumn=loopCols.indexOf(currentPath);
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < loopCols.size(); i++) {
      String column=loopCols.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        indexOfColumn=i;
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ attributes.getValue(m)+ ""String_Node_Str"";
          }
        }
        outputText=true;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
            }
            currentRowHaveValue[i]=true;
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputText=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}","public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  String loopPath=this.loopPath;
  String subLoopPath=this.subLoopPath;
  List<String> loopCols=new ArrayList<String>();
  if (loopPath.indexOf(""String_Node_Str"") != -1) {
    loopPath=this.loopPath.replace(""String_Node_Str"",qName);
    subLoopPath=this.subLoopPath.replace(""String_Node_Str"",qName);
    for (    String loopCol : this.loopCols) {
      if (loopCol.indexOf(""String_Node_Str"") != -1) {
        loopCols.add(loopCol.replace(""String_Node_Str"",qName));
      }
 else       if (currentPath.length() > 0) {
        if (this.loopPath.indexOf(""String_Node_Str"") < this.loopPath.length() - 1) {
          String parent=currentPath.substring(currentPath.lastIndexOf(""String_Node_Str"") + 1);
          loopCols.add(loopCol.replace(""String_Node_Str"",parent));
        }
 else         if (this.loopPath.indexOf(""String_Node_Str"") == this.loopPath.length() - 1) {
          loopCols.add(loopCol.replace(""String_Node_Str"",qName));
        }
      }
    }
  }
 else {
    loopCols.addAll(this.loopCols);
  }
  currentPath+=""String_Node_Str"" + qName;
  if (currentPath.equals(loopPath)) {
    isLooping=true;
    subLoopCount=0;
    currentRow=new String[this.loopCols.size() + 1];
    currentRowHaveValue=new boolean[this.loopCols.size() + 1];
  }
  if (isLooping) {
    indexOfColumns[0]=loopCols.indexOf(currentPath);
    if (currentPath.equals(subLoopPath)) {
      subLoopCount++;
    }
    for (int i=0; i < loopCols.size(); i++) {
      String column=loopCols.get(i);
      boolean asXML=this.asXMLs.get(i);
      if (asXML && (currentPath.equals(column) || currentPath.startsWith(column + ""String_Node_Str""))) {
        indexOfColumns[1]=i;
        if (currentRow[i] == null)         currentRow[i]=""String_Node_Str"";
        currentRow[i]=currentRow[i] + ""String_Node_Str"" + qName;
        if (attributes.getLength() > 0) {
          for (int m=0; m < attributes.getLength(); m++) {
            currentRow[i]=currentRow[i] + ""String_Node_Str"" + attributes.getQName(m)+ ""String_Node_Str""+ ""String_Node_Str""+ attributes.getValue(m)+ ""String_Node_Str"";
          }
        }
        outputText=true;
        currentRow[i]=currentRow[i] + ""String_Node_Str"";
      }
 else {
        int index=column.lastIndexOf(""String_Node_Str"");
        if (index > 0) {
          if (currentPath.equals(column.substring(0,index - 1))) {
            String attribute=attributes.getValue(column.substring(index + 1));
            if (attribute != null && false == currentRowHaveValue[i]) {
              currentRow[i]=attribute;
            }
            currentRowHaveValue[i]=true;
          }
        }
 else {
          if (currentPath.equals(column)) {
            outputText=true;
          }
        }
      }
    }
    if (this.entry.hasFunctions()) {
      Map<String,Object> map=new HashMap<String,Object>();
      map.put(""String_Node_Str"",loopPath);
      map.put(""String_Node_Str"",currentPath);
      map.put(""String_Node_Str"",attributes);
      listArgs.add(map);
    }
  }
}",0.9987025624391828
124327,"@Override public Status process() throws EventDeliveryException {
  Status result=Status.READY;
  Channel channel=getChannel();
  Transaction transaction=channel.getTransaction();
  Event event=null;
  String eventTopic=topic;
  String eventKey=null;
  try {
    transaction.begin();
    event=channel.take();
    if (event != null) {
      if (metaDataExtractor != null) {
        eventTopic=metaDataExtractor.extractTopic(EventHelper.dumpEvent(event),context);
        eventKey=metaDataExtractor.extractKey(EventHelper.dumpEvent(event),context);
      }
      logger.debug(""String_Node_Str"" + EventHelper.dumpEvent(event));
      KeyedMessage<String,String> data=new KeyedMessage<String,String>(eventTopic,eventKey,EventHelper.dumpEvent(event));
      producer.send(data);
    }
 else {
      result=Status.BACKOFF;
    }
    transaction.commit();
  }
 catch (  Exception ex) {
    transaction.rollback();
    String errorMsg=""String_Node_Str"" + event;
    logger.error(errorMsg);
    throw new EventDeliveryException(errorMsg,ex);
  }
 finally {
    transaction.close();
  }
  return result;
}","@Override public Status process() throws EventDeliveryException {
  Status result=Status.READY;
  Channel channel=getChannel();
  Transaction transaction=channel.getTransaction();
  Event event=null;
  String eventTopic=topic;
  String eventKey=null;
  try {
    transaction.begin();
    event=channel.take();
    if (event != null) {
      String eventBody=new String(event.getBody());
      if (metaDataExtractor != null) {
        eventTopic=metaDataExtractor.extractTopic(eventBody,context);
        eventKey=metaDataExtractor.extractKey(eventBody,context);
      }
      logger.debug(""String_Node_Str"" + eventBody);
      KeyedMessage<String,String> data=new KeyedMessage<String,String>(eventTopic,eventKey,eventBody);
      producer.send(data);
    }
 else {
      result=Status.BACKOFF;
    }
    transaction.commit();
  }
 catch (  Exception ex) {
    transaction.rollback();
    String errorMsg=""String_Node_Str"" + event;
    logger.error(errorMsg);
    throw new EventDeliveryException(errorMsg,ex);
  }
 finally {
    transaction.close();
  }
  return result;
}",0.7776752767527675
124328,"@Override public void configure(Context context){
  this.context=context;
  Map<String,String> params=context.getParameters();
  producerProps=new Properties();
  for (  String key : params.keySet()) {
    String value=params.get(key).trim();
    key=key.trim();
    if (key.startsWith(Constants.PROPERTY_PREFIX)) {
      key=key.substring(Constants.PROPERTY_PREFIX.length() + 1,key.length());
      producerProps.put(key.trim(),value);
      logger.debug(""String_Node_Str"" + key + ""String_Node_Str""+ value);
    }
  }
  String metaDataExtractorClassName=context.getString(Constants.METADATA_EXTRACTOR);
  if (metaDataExtractorClassName != null) {
    try {
      Class metaDatExtractorClazz=Class.forName(metaDataExtractorClassName.trim());
      Object metaDataExtractorObj=metaDatExtractorClazz.newInstance();
      if (metaDataExtractorObj instanceof MetaDataExtractor) {
        metaDataExtractor=(MetaDataExtractor)metaDataExtractorObj;
      }
 else {
        String errorMsg=""String_Node_Str"" + ""String_Node_Str"";
        logger.error(errorMsg);
        throw new IllegalArgumentException(errorMsg);
      }
    }
 catch (    ClassNotFoundException e) {
      String errorMsg=""String_Node_Str"";
      logger.error(errorMsg,e);
      throw new IllegalArgumentException(errorMsg,e);
    }
catch (    InstantiationException e) {
      String errorMsg=""String_Node_Str"";
      logger.error(errorMsg,e);
      throw new IllegalArgumentException(errorMsg,e);
    }
catch (    IllegalAccessException e) {
      String errorMsg=""String_Node_Str"";
      logger.error(errorMsg,e);
      throw new IllegalArgumentException(errorMsg,e);
    }
  }
  if (metaDataExtractor != null) {
    topic=context.getString(Constants.TOPIC,Constants.DEFAULT_TOPIC);
    if (topic.equals(Constants.DEFAULT_TOPIC)) {
      logger.warn(""String_Node_Str"" + Constants.DEFAULT_TOPIC);
    }
  }
}","@Override public void configure(Context context){
  this.context=context;
  Map<String,String> params=context.getParameters();
  producerProps=new Properties();
  for (  String key : params.keySet()) {
    String value=params.get(key).trim();
    key=key.trim();
    if (key.startsWith(Constants.PROPERTY_PREFIX)) {
      key=key.substring(Constants.PROPERTY_PREFIX.length() + 1,key.length());
      producerProps.put(key.trim(),value);
      logger.debug(""String_Node_Str"" + key + ""String_Node_Str""+ value);
    }
  }
  String metaDataExtractorClassName=context.getString(Constants.METADATA_EXTRACTOR);
  if (metaDataExtractorClassName != null) {
    try {
      Class metaDatExtractorClazz=Class.forName(metaDataExtractorClassName.trim());
      Object metaDataExtractorObj=metaDatExtractorClazz.newInstance();
      if (metaDataExtractorObj instanceof MetaDataExtractor) {
        metaDataExtractor=(MetaDataExtractor)metaDataExtractorObj;
      }
 else {
        String errorMsg=""String_Node_Str"" + ""String_Node_Str"";
        logger.error(errorMsg);
        throw new IllegalArgumentException(errorMsg);
      }
    }
 catch (    ClassNotFoundException e) {
      String errorMsg=""String_Node_Str"";
      logger.error(errorMsg,e);
      throw new IllegalArgumentException(errorMsg,e);
    }
catch (    InstantiationException e) {
      String errorMsg=""String_Node_Str"";
      logger.error(errorMsg,e);
      throw new IllegalArgumentException(errorMsg,e);
    }
catch (    IllegalAccessException e) {
      String errorMsg=""String_Node_Str"";
      logger.error(errorMsg,e);
      throw new IllegalArgumentException(errorMsg,e);
    }
  }
  if (metaDataExtractor == null) {
    topic=context.getString(Constants.TOPIC,Constants.DEFAULT_TOPIC);
    if (topic.equals(Constants.DEFAULT_TOPIC)) {
      logger.warn(""String_Node_Str"" + Constants.DEFAULT_TOPIC);
    }
 else {
      logger.info(""String_Node_Str"" + topic);
    }
  }
}",0.983701366982124
124329,"public boolean equals(Object other){
  if (other == null)   return false;
  if (other instanceof Keyword) {
    Keyword otherK=(Keyword)other;
    return ((name.equals(otherK.name)) && (namespace.equals(otherK.namespace)));
  }
 else {
    return false;
  }
}","public boolean equals(Object other){
  if (other == null)   return false;
  if (other instanceof Keyword) {
    Keyword otherK=(Keyword)other;
    return ((name.equals(otherK.name)) && ((namespace == null && otherK.namespace == null) || (namespace.equals(otherK.namespace))));
  }
 else {
    return false;
  }
}",0.9071803852889668
124330,"public boolean equals(Object other){
  if (other == null)   return false;
  if (other instanceof Symbol) {
    Symbol otherS=(Symbol)other;
    return ((name.equals(otherS.name)) && (namespace.equals(otherS.namespace)));
  }
 else {
    return false;
  }
}","public boolean equals(Object other){
  if (other == null)   return false;
  if (other instanceof Symbol) {
    Symbol otherS=(Symbol)other;
    return ((name.equals(otherS.name)) && ((this.namespace == null && otherS.namespace == null) || (namespace.equals(otherS.namespace))));
  }
 else {
    return false;
  }
}",0.8982456140350877
124331,"@Test public void testGetNamespace() throws Exception {
}","@Test public void testGetNamespace() throws Exception {
  assertEquals(Keyword.of(""String_Node_Str"").getNamespace(),null);
  assertEquals(Keyword.of(""String_Node_Str"",""String_Node_Str"").getNamespace(),""String_Node_Str"");
}",0.4086021505376344
124332,"@Test public void testGetName() throws Exception {
}","@Test public void testGetName() throws Exception {
  assertEquals(Keyword.of(""String_Node_Str"").getName(),""String_Node_Str"");
}",0.5810055865921788
124333,"@Test public void testEquals() throws Exception {
}","@Test public void testEquals() throws Exception {
  assertEquals(Keyword.of(""String_Node_Str""),Keyword.of(""String_Node_Str""));
  assertEquals(Keyword.of(""String_Node_Str"",""String_Node_Str""),Keyword.of(""String_Node_Str"",""String_Node_Str""));
  assertNotEquals(Keyword.of(""String_Node_Str""),Keyword.of(""String_Node_Str""));
  assertNotEquals(Keyword.of(""String_Node_Str""),null);
}",0.2388758782201405
124334,"/** 
 * Retrieves the CSRF token from the server session.
 * @param request {@link HttpServletRequest} to retrieve the current session from.
 * @param response {@link HttpServletResponse} to send additional information.
 * @return the Spring Security {@link CsrfToken}
 */
@GET @Path(""String_Node_Str"") CsrfToken getCsrfToken(@Context HttpServletRequest request,@Context HttpServletResponse response);","/** 
 * @param request {@link HttpServletRequest} to retrieve the current session from.
 * @param response {@link HttpServletResponse} to send additional information.
 * @return the Spring Security {@link CsrfToken} from the server session.
 */
@GET @Path(""String_Node_Str"") CsrfToken getCsrfToken(@Context HttpServletRequest request,@Context HttpServletResponse response);",0.8992248062015504
124335,"@Override public int getModificationCounter(){
  return 0;
}","@Override @GeneratedValue(strategy=GenerationType.TABLE) public int getModificationCounter(){
  return 0;
}",0.718562874251497
124336,"/** 
 * @return the unique identifier of this {@link AccessControl}. Has to be unique for all   {@link AccessControl} in a{@link AccessControlSchema}.
 */
public String getId(){
  return this.id;
}","/** 
 * @return the unique identifier of {@link AbstractAccessControl}. Has to be unique for all  {@link AbstractAccessControl} in a {@link AccessControlSchema}.
 */
public String getId();",0.8883116883116883
124337,"/** 
 * @param id is the {@link AccessControl#getId() ID} of the requested {@link AccessControl}.
 * @return the requested {@link AccessControl} or {@code null} if not found.
 */
AccessControl getAccessControl(String id);","/** 
 * @param id is the {@link AbstractAccessControl#getId() ID} of the requested {@link AbstractAccessControl}.
 * @return the requested {@link AccessControl} or {@code null} if not found.
 */
AccessControl getAccessControl(String id);",0.965065502183406
124338,"/** 
 * This method collects the   {@link AccessControl}s contained in the   {@link AccessControl}{@link AccessControl#getId() identified} by the given <code>groupId</code>.
 * @param id is the {@link AccessControl#getId() ID} of the {@link AccessControl} (typically an{@link AccessControlGroup}) to collect.
 * @param permissions is the {@link Set} where to {@link Set#add(Object) add} the collected {@link AccessControl}s. This will include the   {@link AccessControl} {@link AccessControl#getId() identified} by the given<code>groupId</code>.
 * @return {@code true} if the given <code>groupId</code> has been found, {@code false} otherwise.
 */
boolean collectAccessControls(String id,Set<AccessControl> permissions);","/** 
 * This method collects the   {@link AbstractAccessControl}s contained in the   {@link AbstractAccessControl}{@link AbstractAccessControl#getId() identified} by the given <code>groupId</code>.
 * @param id is the {@link AbstractAccessControl#getId() ID} of the {@link AbstractAccessControl} (typically an{@link AccessControlGroup}) to collect.
 * @param permissions is the {@link Set} where to {@link Set#add(Object) add} the collected{@link AbstractAccessControl}s. This will include the   {@link AbstractAccessControl}{@link AbstractAccessControl#getId() identified} by the given <code>groupId</code>.
 * @return {@code true} if the given <code>groupId</code> has been found, {@code false} otherwise.
 */
boolean collectAccessControls(String id,Set<AccessControl> permissions);",0.8372093023255814
124339,"/** 
 * This method collects the   {@link AccessControl#getId() IDs} of all {@link AccessControlPermission}s (or more precisely of all   {@link AccessControl}s) contained in the   {@link AccessControl} {@link AccessControl#getId() identified} by the given <code>groupId</code>.
 * @see #collectAccessControls(String,Set)
 * @param id is the {@link AccessControl#getId() ID} of the {@link AccessControl} (typically an{@link AccessControlGroup}) to collect.
 * @param permissions is the {@link Set} where to {@link Set#add(Object) add} the collected{@link AccessControl#getId() IDs}. This will include the given <code>groupId</code>.
 * @return {@code true} if the given <code>groupId</code> has been found, {@code false} otherwise.
 */
boolean collectAccessControlIds(String id,Set<String> permissions);","/** 
 * This method collects the   {@link AbstractAccessControl#getId() IDs} of all {@link AccessControlPermission}s (or more precisely of all   {@link AbstractAccessControl}s) contained in the   {@link AbstractAccessControl}{@link AbstractAccessControl#getId() identified} by the given <code>groupId</code>.
 * @see #collectAccessControls(String,Set)
 * @param id is the {@link AbstractAccessControl#getId() ID} of the {@link AbstractAccessControl} (typically an{@link AccessControlGroup}) to collect.
 * @param permissions is the {@link Set} where to {@link Set#add(Object) add} the collected{@link AbstractAccessControl#getId() IDs}. This will include the given <code>groupId</code>.
 * @return {@code true} if the given <code>groupId</code> has been found, {@code false} otherwise.
 */
boolean collectAccessControlIds(String id,Set<String> permissions);",0.9415310427968656
124340,"/** 
 * @param principal is the {@link Principal} (user).
 * @return the {@link Collection} of {@link AccessControl#getId() IDs} with the groups of the given {@link Principal}.
 */
Collection<String> getAccessControlIds(P principal);","/** 
 * @param principal is the {@link Principal} (user).
 * @return the {@link Collection} of {@link AbstractAccessControl#getId() IDs} with the groups of the given {@link Principal}.
 */
Collection<String> getAccessControlIds(P principal);",0.9831223628691984
124341,"/** 
 * Suggests to use   {@link #doSetUp()} method before each tests.
 */
@Before public final void setUp(){
  if (!INITIALIZED) {
    INITIALIZED=true;
  }
  doSetUp(INITIALIZED);
}","/** 
 * Suggests to use   {@link #doSetUp()} method before each tests.
 */
@Before public final void setUp(){
  doSetUp(INITIALIZED);
  if (!INITIALIZED) {
    INITIALIZED=true;
  }
}",0.8688524590163934
124342,"/** 
 * Exception handling depending on technical Exception or not.
 * @param exception the exception thrown
 * @return the response build from error status
 */
protected Response handleGenericError(Throwable exception){
  NlsRuntimeException userError=TechnicalErrorUserException.getOrCreateUserException(exception);
  if (userError.isTechnical()) {
    LOG.error(""String_Node_Str"",exception);
  }
 else {
    LOG.warn(""String_Node_Str"",exception.getMessage());
  }
  return createResponse(userError);
}","/** 
 * Exception handling depending on technical Exception or not.
 * @param exception the exception thrown
 * @return the response build from error status
 */
protected Response handleGenericError(Throwable exception){
  NlsRuntimeException userError=TechnicalErrorUserException.getOrCreateUserException(exception);
  if (userError.isTechnical()) {
    LOG.error(""String_Node_Str"",userError);
  }
 else {
    LOG.warn(""String_Node_Str"",exception.getMessage());
  }
  return createResponse(userError);
}",0.9821428571428572
124343,"/** 
 * @param exposeInternalErrorDetails - {@code true} if internal exception details shall be exposed to clients(useful for debugging and testing),  {@code false} if such details are hidden to prevent <ahref=""https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"">Sensitive Data Exposure</a> (default, has to be used in production environment).
 */
public void setExposeInternalErrorDetails(boolean exposeInternalErrorDetails){
  this.exposeInternalErrorDetails=exposeInternalErrorDetails;
  if (exposeInternalErrorDetails) {
    String message=""String_Node_Str"";
    LOG.warn(message);
    System.err.println(message);
  }
}","/** 
 * @param exposeInternalErrorDetails - {@code true} if internal exception details shall be exposed to clients (usefulfor debugging and testing),  {@code false} if such details are hidden to prevent<a href=""https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"">Sensitive Data Exposure</a> (default, has to be used in production environment).
 */
public void setExposeInternalErrorDetails(boolean exposeInternalErrorDetails){
  this.exposeInternalErrorDetails=exposeInternalErrorDetails;
  if (exposeInternalErrorDetails) {
    String message=""String_Node_Str"";
    LOG.warn(message);
    System.err.println(message);
  }
}",0.9968944099378882
124344,"/** 
 * Checks that the given   {@link AccessControlGroup} has no cyclic {@link AccessControlGroup#getInherits() inheritancegraph}.
 * @param group is the {@link AccessControlGroup} to check.
 * @param visitedGroups is where the {@link AccessControlGroup} are collected to detect cycles.
 */
protected void checkForCyclicDependencies(AccessControlGroup group,Set<AccessControlGroup> visitedGroups){
  boolean added=visitedGroups.add(group);
  if (!added) {
    throw new IllegalStateException(""String_Node_Str"" + group);
  }
  for (  AccessControlGroup inheritedGroup : group.getInherits()) {
    checkForCyclicDependencies(inheritedGroup,visitedGroups);
  }
}","/** 
 * Checks that the given   {@link AccessControlGroup} has no cyclic {@link AccessControlGroup#getInherits() inheritancegraph}.
 * @param group is the {@link AccessControlGroup} to check.
 * @param nodeCycle the {@link NodeCycle} used to detect cycles.
 */
protected void checkForCyclicDependencies(AccessControlGroup group,NodeCycle<AccessControlGroup> nodeCycle){
  for (  AccessControlGroup inheritedGroup : group.getInherits()) {
    List<AccessControlGroup> inverseCycle=nodeCycle.getInverseCycle();
    if (inverseCycle.contains(inheritedGroup)) {
      throw new NodeCycleException(nodeCycle);
    }
    inverseCycle.add(inheritedGroup);
    checkForCyclicDependencies(inheritedGroup,nodeCycle);
    AccessControlGroup removed=inverseCycle.remove(inverseCycle.size() - 1);
    assert(removed == inheritedGroup);
  }
}",0.592741935483871
124345,"/** 
 * Performs the required initialization of this class.
 * @param config is the {@link AccessControlSchema}.
 */
protected void initialize(AccessControlSchema config){
  LOG.debug(""String_Node_Str"");
  List<AccessControlGroup> groups=config.getGroups();
  if (groups.size() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Set<AccessControlGroup> toplevelGroups=new HashSet<>(groups);
  for (  AccessControlGroup group : groups) {
    collectAccessControls(group,toplevelGroups);
    checkForCyclicDependencies(group,new HashSet<AccessControlGroup>());
  }
}","/** 
 * Performs the required initialization of this class.
 * @param config is the {@link AccessControlSchema}.
 */
protected void initialize(AccessControlSchema config){
  LOG.debug(""String_Node_Str"");
  List<AccessControlGroup> groups=config.getGroups();
  if (groups.size() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Set<AccessControlGroup> toplevelGroups=new HashSet<>(groups);
  for (  AccessControlGroup group : groups) {
    collectAccessControls(group,toplevelGroups);
    NodeCycle<AccessControlGroup> nodeCycle=new NodeCycle<>(group);
    checkForCyclicDependencies(group,nodeCycle);
  }
}",0.9107438016528926
124346,"/** 
 * Tests that   {@link AccessControlProviderImpl} properly detects cyclic inheritance of {@link AccessControlGroup}s.
 */
@Test public void testProviderCyclic(){
  try {
    createProvider(SCHEMA_XML_CYCLIC);
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
    assertThat(e.getMessage()).startsWith(""String_Node_Str"");
  }
}","/** 
 * Tests that   {@link AccessControlProviderImpl} properly detects cyclic inheritance of {@link AccessControlGroup}s.
 */
@Test public void testProviderCyclic(){
  try {
    createProvider(SCHEMA_XML_CYCLIC);
    fail(""String_Node_Str"");
  }
 catch (  NodeCycleException e) {
    assertThat(e).hasMessageContaining(""String_Node_Str"");
  }
}",0.9166666666666666
124347,"/** 
 * This test method updates a saved staffMemberEntity. It demonstrates the approach when there is a method call in the method under test. To solve this you need to override the   {@code @Inject} of the tested method by using theappropriate setter  {@code setStaffMemberDao()}.
 */
@Test public void testSaveStaffMember(){
  StaffMemberEto staffMemberEto=Mockito.mock(StaffMemberEto.class);
  StaffMemberDao staffMemberDao=Mockito.mock(StaffMemberDao.class);
  StaffMemberEntity staffMemberEntity=Mockito.mock(StaffMemberEntity.class);
  long id=1L;
  Mockito.when(staffMemberEto.getId()).thenReturn(id);
  Mockito.when(staffMemberDao.find(id)).thenReturn(staffMemberEntity);
  Mockito.when(staffMemberEto.getName()).thenReturn(""String_Node_Str"");
  Mockito.when(staffMemberEntity.getName()).thenReturn(""String_Node_Str"");
  Mockito.when(this.beanMapper.map(staffMemberEto,StaffMemberEntity.class)).thenReturn(staffMemberEntity);
  Mockito.when(staffMemberDao.save(staffMemberEntity)).thenReturn(staffMemberEntity);
  Mockito.when(this.beanMapper.map(staffMemberEntity,StaffMemberEto.class)).thenReturn(staffMemberEto);
  this.staffmanagementImpl.setStaffMemberDao(staffMemberDao);
  StaffMemberEto resultEto=this.staffmanagementImpl.saveStaffMember(staffMemberEto);
  Mockito.verify(staffMemberEto).getId();
  Mockito.verify(staffMemberDao).find(id);
  Mockito.verify(staffMemberEto,Mockito.atLeastOnce()).getName();
  Mockito.verify(staffMemberEntity,Mockito.atLeastOnce()).getName();
  Mockito.verify(this.beanMapper).map(staffMemberEto,StaffMemberEntity.class);
  Mockito.verify(staffMemberDao).save(staffMemberEntity);
  Mockito.verify(this.beanMapper).map(staffMemberEntity,StaffMemberEto.class);
  assertThat(resultEto.getId()).isEqualTo(staffMemberEto.getId());
}","/** 
 * This test method updates a saved staffMemberEntity. It demonstrates the approach when there is a method call in the method under test. To solve this in the given case you need to override the   {@code @Inject} of the tested method byusing the appropriate setter  {@code setStaffMemberDao()}.
 */
@Test public void testSaveStaffMember(){
  StaffMemberEto staffMemberEto=Mockito.mock(StaffMemberEto.class);
  StaffMemberDao staffMemberDao=Mockito.mock(StaffMemberDao.class);
  StaffMemberEntity staffMemberEntity=Mockito.mock(StaffMemberEntity.class);
  long id=1L;
  Mockito.when(staffMemberEto.getId()).thenReturn(id);
  Mockito.when(staffMemberDao.find(id)).thenReturn(staffMemberEntity);
  Mockito.when(staffMemberEto.getName()).thenReturn(""String_Node_Str"");
  Mockito.when(staffMemberEntity.getName()).thenReturn(""String_Node_Str"");
  Mockito.when(this.beanMapper.map(staffMemberEto,StaffMemberEntity.class)).thenReturn(staffMemberEntity);
  Mockito.when(staffMemberDao.save(staffMemberEntity)).thenReturn(staffMemberEntity);
  Mockito.when(this.beanMapper.map(staffMemberEntity,StaffMemberEto.class)).thenReturn(staffMemberEto);
  this.staffmanagementImpl.setStaffMemberDao(staffMemberDao);
  StaffMemberEto resultEto=this.staffmanagementImpl.saveStaffMember(staffMemberEto);
  Mockito.verify(staffMemberEto).getId();
  Mockito.verify(staffMemberDao).find(id);
  Mockito.verify(staffMemberEto,Mockito.atLeastOnce()).getName();
  Mockito.verify(staffMemberEntity,Mockito.atLeastOnce()).getName();
  Mockito.verify(this.beanMapper).map(staffMemberEto,StaffMemberEntity.class);
  Mockito.verify(staffMemberDao).save(staffMemberEntity);
  Mockito.verify(this.beanMapper).map(staffMemberEntity,StaffMemberEto.class);
  assertThat(resultEto.getId()).isEqualTo(staffMemberEto.getId());
}",0.9943946188340808
124348,"/** 
 * Provides login credentials and permissions and resets database. The database is migrated to Version 0002 in order to have a common basis for test.
 */
@Before public void setUp(){
  TestUtil.login(""String_Node_Str"",PermissionConstants.SAVE_ORDER_POSITION,PermissionConstants.SAVE_ORDER,PermissionConstants.FIND_TABLE,PermissionConstants.FIND_ORDER,PermissionConstants.SAVE_TABLE);
  this.dbTestHelper.setMigrationVersion(""String_Node_Str"");
  this.dbTestHelper.resetDatabase();
}","/** 
 * Provides login credentials and permissions and resets database. The database is migrated to Version 0002 in order to have a common basis for test.
 */
@Before public void setUp(){
  TestUtil.login(""String_Node_Str"",PermissionConstants.SAVE_ORDER_POSITION,PermissionConstants.SAVE_ORDER,PermissionConstants.FIND_TABLE,PermissionConstants.FIND_ORDER,PermissionConstants.SAVE_TABLE,PermissionConstants.FIND_OFFER);
  this.dbTestHelper.setMigrationVersion(""String_Node_Str"");
  this.dbTestHelper.resetDatabase();
}",0.9691542288557214
124349,"/** 
 * This test method tests if a table is releasable without and with an open order attached to it.
 */
@Test public void testIsTableReleasable(){
  Long tableNumber=101L;
  Long offerId=2L;
  TableEto table=this.tablemanagement.findTable(tableNumber);
  assertThat(table.getState()).isEqualTo(TableState.OCCUPIED);
  assertThat(this.tablemanagement.isTableReleasable(table)).isTrue();
  OrderEto newOrder=new OrderEtoBuilder().tableId(table.getId()).createNew();
  OrderEto order=this.salesmanagement.saveOrder(newOrder);
  long orderId=order.getId();
  OrderPositionEto orderPosition=new OrderPositionEtoBuilder().orderId(orderId).offerId(offerId).createNew();
  assertThat(this.tablemanagement.isTableReleasable(table)).isFalse();
  assertThat(table.getState()).isEqualTo(TableState.OCCUPIED);
}","/** 
 * This test method tests if a table is releasable without and with an open order attached to it.
 */
@Test public void testIsTableReleasable(){
  Long tableNumber=101L;
  Long offerId=2L;
  TableEto table=this.tablemanagement.findTable(tableNumber);
  assertThat(table.getState()).isEqualTo(TableState.OCCUPIED);
  assertThat(this.tablemanagement.isTableReleasable(table)).isTrue();
  OrderEto newOrder=new OrderEtoBuilder().tableId(table.getId()).createNew();
  OrderEto order=this.salesmanagement.saveOrder(newOrder);
  long orderId=order.getId();
  OrderPositionEto newOrderPosition=new OrderPositionEtoBuilder().orderId(orderId).offerId(offerId).createNew();
  OrderPositionEto orderPosition=this.salesmanagement.saveOrderPosition(newOrderPosition);
  assertThat(order).isNotNull();
  assertThat(orderPosition).isNotNull();
  assertThat(this.tablemanagement.isTableReleasable(table)).isFalse();
  assertThat(table.getState()).isEqualTo(TableState.OCCUPIED);
}",0.903954802259887
124350,"@Test public void findOrders(){
  PaginatedListTo<OrderCto> orders=this.helper.getService().findOrders(new MyUriInfo(null,null));
  assertThat(orders).isNotNull();
  assertThat(orders).isNotNull();
}","@Test public void findOrders(){
  PaginatedListTo<OrderCto> orders=this.helper.getService().findOrders(null);
  assertThat(orders).isNotNull();
  assertThat(orders).isNotNull();
}",0.9470899470899472
124351,"@Override @Id @GeneratedValue(strategy=GenerationType.SEQUENCE) public Long getId(){
  return this.id;
}","@Override @Id @GeneratedValue(strategy=GenerationType.AUTO) public Long getId(){
  return this.id;
}",0.9509803921568628
124352,"private void stopBatch(ConfigurableApplicationContext ctx,String jobName) throws Exception {
  int returnCode=0;
  try {
    findBeans(ctx);
    Set<Long> runningJobExecutionIDs=operator.getRunningExecutions(jobName);
    if (runningJobExecutionIDs.isEmpty()) {
      throw new JobExecutionNotRunningException(""String_Node_Str"" + jobName + ""String_Node_Str"");
    }
    LOG.info(""String_Node_Str"",runningJobExecutionIDs.size());
    for (    Long id : runningJobExecutionIDs) {
      operator.stop(id);
    }
  }
 catch (  Exception e) {
    returnCode=1;
    throw e;
  }
 finally {
    final int returnCodeResult=returnCode;
    SpringApplication.exit(ctx,new ExitCodeGenerator(){
      @Override public int getExitCode(){
        return returnCodeResult;
      }
    }
);
  }
}","private void stopBatch(ConfigurableApplicationContext ctx,String jobName) throws Exception {
  int returnCode=0;
  try {
    findBeans(ctx);
    Set<Long> runningJobExecutionIDs=operator.getRunningExecutions(jobName);
    if (runningJobExecutionIDs.isEmpty()) {
      throw new JobExecutionNotRunningException(""String_Node_Str"" + jobName + ""String_Node_Str"");
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",runningJobExecutionIDs.size());
    int stoppedCount=0;
    for (    Long id : runningJobExecutionIDs) {
      try {
        operator.stop(id);
        stoppedCount++;
      }
 catch (      JobExecutionNotRunningException e) {
      }
    }
    LOG.info(""String_Node_Str"",stoppedCount);
  }
 catch (  Exception e) {
    returnCode=1;
    throw e;
  }
 finally {
    final int returnCodeResult=returnCode;
    SpringApplication.exit(ctx,new ExitCodeGenerator(){
      @Override public int getExitCode(){
        return returnCodeResult;
      }
    }
);
  }
}",0.8838268792710706
124353,"protected void findBeans(ConfigurableApplicationContext ctx){
  launcher=ctx.getBean(JobLauncher.class);
  locator=ctx.getBean(JobLocator.class);
  operator=ctx.getBean(JobOperator.class);
  try {
    parametersConverter=ctx.getBean(JobParametersConverter.class);
  }
 catch (  NoSuchBeanDefinitionException e) {
    parametersConverter=new DefaultJobParametersConverter();
  }
}","private void findBeans(ConfigurableApplicationContext ctx){
  launcher=ctx.getBean(JobLauncher.class);
  locator=ctx.getBean(JobLocator.class);
  operator=ctx.getBean(JobOperator.class);
  try {
    parametersConverter=ctx.getBean(JobParametersConverter.class);
  }
 catch (  NoSuchBeanDefinitionException e) {
    parametersConverter=new DefaultJobParametersConverter();
  }
}",0.1719576719576719
124354,"/** 
 * Delegates to   {@link Offermanagement#findProductByRevision}.
 * @param id ID of the {@link ProductEto}
 * @param revision revision of the {@link ProductEto}
 * @return the {@link ProductEto}
 */
@GET @Path(""String_Node_Str"") public ProductEto findProductByRevision(@PathParam(""String_Node_Str"") Long id,@PathParam(""String_Node_Str"") Long revision){
  if (revision != null) {
    return this.offerManagement.findProductByRevision(id,revision);
  }
 else {
    return this.offerManagement.findProduct(id);
  }
}","/** 
 * Delegates to   {@link Offermanagement#findProductByRevision}.
 * @param id ID of the {@link ProductEto}
 * @param revision revision of the {@link ProductEto}
 * @return the {@link ProductEto}
 */
@GET @Path(""String_Node_Str"") public ProductEto findProductByRevision(@PathParam(""String_Node_Str"") long id,@PathParam(""String_Node_Str"") Long revision){
  if (revision != null) {
    return this.offerManagement.findProductByRevision(id,revision);
  }
 else {
    return this.offerManagement.findProduct(id);
  }
}",0.998069498069498
124355,"/** 
 * Delegates to   {@link Offermanagement#deleteOffer}.
 * @param id ID of the {@link OfferEto} to delete
 */
@DELETE @Path(""String_Node_Str"") public void deleteOffer(@PathParam(""String_Node_Str"") Long id){
  this.offerManagement.deleteOffer(id);
}","/** 
 * Delegates to   {@link Offermanagement#deleteOffer}.
 * @param id ID of the {@link OfferEto} to delete
 */
@DELETE @Path(""String_Node_Str"") public void deleteOffer(@PathParam(""String_Node_Str"") long id){
  this.offerManagement.deleteOffer(id);
}",0.996031746031746
124356,"/** 
 * Delegates to   {@link Offermanagement#findOffer}.
 * @param id the ID of the {@link OfferEto}
 * @return the {@link OfferEto}
 */
@GET @Path(""String_Node_Str"") public OfferEto getOffer(@PathParam(""String_Node_Str"") Long id){
  return this.offerManagement.findOffer(id);
}","/** 
 * Delegates to   {@link Offermanagement#findOffer}.
 * @param id the ID of the {@link OfferEto}
 * @return the {@link OfferEto}
 */
@GET @Path(""String_Node_Str"") public OfferEto getOffer(@PathParam(""String_Node_Str"") long id){
  return this.offerManagement.findOffer(id);
}",0.996415770609319
124357,"/** 
 * Delegates to   {@link Offermanagement#findProduct}.
 * @param id ID of the {@link ProductEto}
 * @return the {@link ProductEto}
 */
@GET @Path(""String_Node_Str"") public ProductEto findProduct(@PathParam(""String_Node_Str"") Long id){
  return this.offerManagement.findProduct(id);
}","/** 
 * Delegates to   {@link Offermanagement#findProduct}.
 * @param id ID of the {@link ProductEto}
 * @return the {@link ProductEto}
 */
@GET @Path(""String_Node_Str"") public ProductEto findProduct(@PathParam(""String_Node_Str"") long id){
  return this.offerManagement.findProduct(id);
}",0.9965277777777778
124358,"@SuppressWarnings(""String_Node_Str"") @Consumes(""String_Node_Str"") @POST @Path(""String_Node_Str"") public void updateProductPicture(@PathParam(""String_Node_Str"") Long productId,@Multipart(value=""String_Node_Str"",type=MediaType.APPLICATION_JSON) BinaryObjectEto binaryObjectEto,@Multipart(value=""String_Node_Str"",type=MediaType.APPLICATION_OCTET_STREAM) InputStream picture) throws SerialException, SQLException, IOException {
  Blob blob=new SerialBlob(IOUtils.readBytesFromStream(picture));
  this.offerManagement.updateProductPicture(productId,blob,binaryObjectEto);
}","@SuppressWarnings(""String_Node_Str"") @Consumes(""String_Node_Str"") @POST @Path(""String_Node_Str"") public void updateProductPicture(@PathParam(""String_Node_Str"") long productId,@Multipart(value=""String_Node_Str"",type=MediaType.APPLICATION_JSON) BinaryObjectEto binaryObjectEto,@Multipart(value=""String_Node_Str"",type=MediaType.APPLICATION_OCTET_STREAM) InputStream picture) throws SerialException, SQLException, IOException {
  Blob blob=new SerialBlob(IOUtils.readBytesFromStream(picture));
  this.offerManagement.updateProductPicture(productId,blob,binaryObjectEto);
}",0.9982394366197184
124359,"/** 
 * Delegates to   {@link Offermanagement#isProductInUseByOffer}.
 * @param id ID of the {@link ProductEto}
 * @return true, if there are no offers, that use the given ProductEto. false otherwise.
 */
@GET @Path(""String_Node_Str"") public boolean isProductInUseByOffer(@PathParam(""String_Node_Str"") Long id){
  return this.offerManagement.isProductInUseByOffer(findProduct(id));
}","/** 
 * Delegates to   {@link Offermanagement#isProductInUseByOffer}.
 * @param id ID of the {@link ProductEto}
 * @return true, if there are no offers, that use the given ProductEto. false otherwise.
 */
@GET @Path(""String_Node_Str"") public boolean isProductInUseByOffer(@PathParam(""String_Node_Str"") long id){
  return this.offerManagement.isProductInUseByOffer(findProduct(id));
}",0.9973890339425588
124360,"/** 
 * Delegates to   {@link Offermanagement#deleteProduct}.
 * @param id ID of the ProductEto to delete
 */
@DELETE @Path(""String_Node_Str"") public void deleteProduct(@PathParam(""String_Node_Str"") Long id){
  this.offerManagement.deleteProduct(id);
}","/** 
 * Delegates to   {@link Offermanagement#deleteProduct}.
 * @param id ID of the ProductEto to delete
 */
@DELETE @Path(""String_Node_Str"") public void deleteProduct(@PathParam(""String_Node_Str"") long id){
  this.offerManagement.deleteProduct(id);
}",0.996031746031746
124361,"/** 
 * This method will return a   {@link BillCto bill} identified the given id.
 * @param id is the {@link BillEto#getId() id} of the Bill to fetch.
 * @return the {@link BillCto bill} for the given id.
 */
BillCto findBill(Long id);","/** 
 * This method will return a   {@link BillCto bill} identified the given id.
 * @param id is the {@link BillEto#getId() id} of the Bill to fetch.
 * @return the {@link BillCto bill} for the given id.
 */
BillCto findBill(long id);",0.9957446808510638
124362,"/** 
 * This method returns an   {@link OrderEto order}.
 * @param orderId identifier of the searched {@link OrderEto order}
 * @return the {@link OrderEto order} with the given identifier. Will be {@code null} if the {@link OrderEto order} does not exist.
 */
OrderEto findOrder(Long orderId);","/** 
 * This method returns an   {@link OrderEto order}.
 * @param orderId identifier of the searched {@link OrderEto order}
 * @return the {@link OrderEto order} with the given identifier. Will be {@code null} if the {@link OrderEto order}does not exist.
 */
OrderEto findOrder(long orderId);",0.9948892674616696
124363,"/** 
 * This method returns a the   {@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.datatype.OrderState#OPEN open} {@link OrderEto order} for the specified table.
 * @param tableId the {@link io.oasp.gastronomy.restaurant.tablemanagement.common.api.Table#getId() table ID} therequested order shall be  {@link OrderEto#getTableId() associated} with.
 * @return the {@link OrderEto order} {@link OrderEto#getTableId() associated} with the given <code>tableId</code> in{@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.datatype.OrderState#OPEN open}{@link OrderEto#getState() state} or {@code null} if no such {@link OrderEto order} exists.
 */
OrderEto findOpenOrderForTable(Long tableId);","/** 
 * This method returns a the   {@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.datatype.OrderState#OPEN open} {@link OrderEto order} for the specified table.
 * @param tableId the {@link io.oasp.gastronomy.restaurant.tablemanagement.common.api.Table#getId() table ID} therequested order shall be  {@link OrderEto#getTableId() associated} with.
 * @return the {@link OrderEto order} {@link OrderEto#getTableId() associated} with the given <code>tableId</code> in{@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.datatype.OrderState#OPEN open}{@link OrderEto#getState() state} or {@code null} if no such {@link OrderEto order} exists.
 */
OrderEto findOpenOrderForTable(long tableId);",0.99860529986053
124364,"/** 
 * @param orderPositionId is the {@link OrderPositionEto#getId() ID} of the requested {@link OrderPositionEto}.
 * @return the {@link OrderPositionEto} with the given ID. Will be {@code null} if the {@link OrderPositionEto}does not exist.
 */
OrderPositionEto findOrderPosition(Long orderPositionId);","/** 
 * @param orderPositionId is the {@link OrderPositionEto#getId() ID} of the requested {@link OrderPositionEto}.
 * @return the {@link OrderPositionEto} with the given ID. Will be {@code null} if the {@link OrderPositionEto} doesnot exist.
 */
OrderPositionEto findOrderPosition(long orderPositionId);",0.980327868852459
124365,"/** 
 * @param orderId for which the {@link OrderPositionEto}s are requested.
 * @return the {@link List} of all {@link OrderPositionEto}s   {@link OrderPositionEto#getId() associated} with thegiven <code>orderId</code>. Will be the empty  {@link List} if no such {@link OrderPositionEto} exists.
 */
List<OrderPositionEto> findOpenOrderPositionsByOrderId(Long orderId);","/** 
 * @param orderId for which the {@link OrderPositionEto}s are requested.
 * @return the {@link List} of all {@link OrderPositionEto}s   {@link OrderPositionEto#getId() associated} with thegiven <code>orderId</code>. Will be the empty  {@link List} if no such {@link OrderPositionEto} exists.
 */
List<OrderPositionEto> findOpenOrderPositionsByOrderId(long orderId);",0.9972972972972972
124366,"/** 
 * @param orderId is the {@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.Order#getId() ID} of the{@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.Order} for which the{@link OrderPositionEto positions} are requested.
 * @return the {@link List} of {@link OrderPositionEto}s   {@link OrderPositionEto#getOrderId() associated} with thegiven <code>orderId</code>.
 */
List<OrderPositionEto> findOrderPositionsByOrderId(Long orderId);","/** 
 * @param orderId is the {@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.Order#getId() ID} of the{@link io.oasp.gastronomy.restaurant.salesmanagement.common.api.Order} for which the{@link OrderPositionEto positions} are requested.
 * @return the {@link List} of {@link OrderPositionEto}s   {@link OrderPositionEto#getOrderId() associated} with thegiven <code>orderId</code>.
 */
List<OrderPositionEto> findOrderPositionsByOrderId(long orderId);",0.9978494623655914
124367,"/** 
 * This method deletes a   {@link BillEto} from the database by its given id.
 * @param billId the ID of the {@link BillEto} that has to be deleted.
 */
void deleteBill(Long billId);","/** 
 * This method deletes a   {@link BillEto} from the database by its given id.
 * @param billId the ID of the {@link BillEto} that has to be deleted.
 */
void deleteBill(long billId);",0.9946524064171124
124368,"/** 
 * @param id is the {@link OrderEto#getId() ID} of the order to delete.
 */
void deleteOrder(Long id);","/** 
 * @param id is the {@link OrderEto#getId() ID} of the order to delete.
 */
void deleteOrder(long id);",0.9906542056074766
124369,"@Override public OrderEto findOrder(Long id){
  return this.ucFindOrder.findOrder(id);
}","@Override public OrderEto findOrder(long id){
  return this.ucFindOrder.findOrder(id);
}",0.9886363636363636
124370,"@Override public BillCto findBill(Long id){
  return this.ucFindBill.findBill(id);
}","@Override public BillCto findBill(long id){
  return this.ucFindBill.findBill(id);
}",0.988095238095238
124371,"@Override public void deleteOrder(Long id){
  this.ucManageOrder.deleteOrder(id);
}","@Override public void deleteOrder(long id){
  this.ucManageOrder.deleteOrder(id);
}",0.9879518072289156
124372,"@Override public List<OrderPositionEto> findOrderPositionsByOrderId(Long orderId){
  return this.ucFindOrderPosition.findOrderPositionsByOrderId(orderId);
}","@Override public List<OrderPositionEto> findOrderPositionsByOrderId(long orderId){
  return this.ucFindOrderPosition.findOrderPositionsByOrderId(orderId);
}",0.9935897435897436
124373,"@Override public List<OrderPositionEto> findOpenOrderPositionsByOrderId(Long orderId){
  return this.ucFindOrderPosition.findOpenOrderPositionsByOrderId(orderId);
}","@Override public List<OrderPositionEto> findOpenOrderPositionsByOrderId(long orderId){
  return this.ucFindOrderPosition.findOpenOrderPositionsByOrderId(orderId);
}",0.9939024390243902
124374,"@Override public OrderPositionEto findOrderPosition(Long orderPositionId){
  return this.ucFindOrderPosition.findOrderPosition(orderPositionId);
}","@Override public OrderPositionEto findOrderPosition(long orderPositionId){
  return this.ucFindOrderPosition.findOrderPosition(orderPositionId);
}",0.9931506849315068
124375,"@Override public void deleteBill(Long billId){
  this.ucManageBill.deleteBill(billId);
}","@Override public void deleteBill(long billId){
  this.ucManageBill.deleteBill(billId);
}",0.9886363636363636
124376,"@Override public OrderEto findOpenOrderForTable(Long tableId){
  return this.ucFindOrder.findOpenOrderForTable(tableId);
}","@Override public OrderEto findOpenOrderForTable(long tableId){
  return this.ucFindOrder.findOpenOrderForTable(tableId);
}",0.9918032786885246
124377,"@Override @RolesAllowed(PermissionConstants.FIND_BILL) public BillCto findBill(Long id){
  LOG.debug(""String_Node_Str"" + id + ""String_Node_Str"");
  BillCto billCto=new BillCto();
  BillEto bill=getBeanMapper().map(getBillDao().findOne(id),BillEto.class);
  if (bill == null) {
    return null;
  }
  billCto.setBill(bill);
  List<OrderPositionEto> orderPositions=new ArrayList<>();
  for (  Long orderPositionId : bill.getOrderPositionIds()) {
    OrderPositionEto position=this.salesmanagement.findOrderPosition(orderPositionId);
    orderPositions.add(position);
  }
  billCto.setPositions(orderPositions);
  return billCto;
}","@Override @RolesAllowed(PermissionConstants.FIND_BILL) public BillCto findBill(long id){
  LOG.debug(""String_Node_Str"" + id + ""String_Node_Str"");
  BillCto billCto=new BillCto();
  BillEto bill=getBeanMapper().map(getBillDao().findOne(id),BillEto.class);
  if (bill == null) {
    return null;
  }
  billCto.setBill(bill);
  List<OrderPositionEto> orderPositions=new ArrayList<>();
  for (  Long orderPositionId : bill.getOrderPositionIds()) {
    OrderPositionEto position=this.salesmanagement.findOrderPosition(orderPositionId);
    orderPositions.add(position);
  }
  billCto.setPositions(orderPositions);
  return billCto;
}",0.998407643312102
124378,"@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public OrderEto findOrder(Long orderId){
  LOG.debug(""String_Node_Str"");
  return getBeanMapper().map(getOrderDao().findOne(orderId),OrderEto.class);
}","@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public OrderEto findOrder(long orderId){
  LOG.debug(""String_Node_Str"");
  return getBeanMapper().map(getOrderDao().findOne(orderId),OrderEto.class);
}",0.9951690821256038
124379,"@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public OrderEto findOpenOrderForTable(Long tableId){
  OrderEntity order=getOrderDao().findOpenOrderByTable(tableId);
  return getBeanMapper().map(order,OrderEto.class);
}","@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public OrderEto findOpenOrderForTable(long tableId){
  OrderEntity order=getOrderDao().findOpenOrderByTable(tableId);
  return getBeanMapper().map(order,OrderEto.class);
}",0.9955947136563876
124380,"@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public OrderPositionEto findOrderPosition(Long orderPositionId){
  LOG.debug(""String_Node_Str"");
  OrderPositionEntity orderPositionEntities=getOrderPositionDao().findOne(orderPositionId);
  OrderPositionEto orderPositionBo=getBeanMapper().map(orderPositionEntities,OrderPositionEto.class);
  return orderPositionBo;
}","@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public OrderPositionEto findOrderPosition(long orderPositionId){
  LOG.debug(""String_Node_Str"");
  OrderPositionEntity orderPositionEntities=getOrderPositionDao().findOne(orderPositionId);
  OrderPositionEto orderPositionBo=getBeanMapper().map(orderPositionEntities,OrderPositionEto.class);
  return orderPositionBo;
}",0.9973890339425588
124381,"@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public List<OrderPositionEto> findOpenOrderPositionsByOrderId(Long orderId){
  LOG.debug(""String_Node_Str"" + orderId + ""String_Node_Str"");
  return getBeanMapper().mapList(getOrderPositionDao().findOpenOrderPositionsByOrder(orderId),OrderPositionEto.class);
}","@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public List<OrderPositionEto> findOpenOrderPositionsByOrderId(long orderId){
  LOG.debug(""String_Node_Str"" + orderId + ""String_Node_Str"");
  return getBeanMapper().mapList(getOrderPositionDao().findOpenOrderPositionsByOrder(orderId),OrderPositionEto.class);
}",0.9969135802469136
124382,"@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public List<OrderPositionEto> findOrderPositionsByOrderId(Long orderId){
  List<OrderPositionEntity> positions=getOrderPositionDao().findOrderPositionsByOrder(orderId);
  return getBeanMapper().mapList(positions,OrderPositionEto.class);
}","@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public List<OrderPositionEto> findOrderPositionsByOrderId(long orderId){
  List<OrderPositionEntity> positions=getOrderPositionDao().findOrderPositionsByOrder(orderId);
  return getBeanMapper().mapList(positions,OrderPositionEto.class);
}",0.9966996699669968
124383,"@Override @RolesAllowed(PermissionConstants.DELETE_BILL) public void deleteBill(Long billId){
  getBillDao().delete(billId);
}","@Override @RolesAllowed(PermissionConstants.DELETE_BILL) public void deleteBill(long billId){
  getBillDao().delete(billId);
}",0.992063492063492
124384,"@Override @RolesAllowed(PermissionConstants.DELETE_ORDER) public void deleteOrder(Long id){
  getOrderDao().delete(id);
}","@Override @RolesAllowed(PermissionConstants.DELETE_ORDER) public void deleteOrder(long id){
  getOrderDao().delete(id);
}",0.9917355371900828
124385,"@Override public boolean isValid(Money value,ConstraintValidatorContext context){
  return value.getValue().compareTo(BigDecimal.ZERO) >= 0;
}","@Override public boolean isValid(Money value,ConstraintValidatorContext context){
  if (value == null) {
    return true;
  }
  return value.getValue().compareTo(BigDecimal.ZERO) >= 0;
}",0.8658536585365854
124386,"/** 
 * Sets the field 'comment'.
 * @param comment new value for comment
 */
public void setComment(String comment){
  this.comment=comment;
}","/** 
 * Sets the field 'comment'.
 * @param comment new value for comment
 */
@Override public void setComment(String comment){
  this.comment=comment;
}",0.9662162162162162
124387,"/** 
 * Returns the field 'comment'.
 * @return Comment as string
 */
public String getComment(){
  return this.comment;
}","/** 
 * Returns the field 'comment'.
 * @return Comment as string
 */
@Override public String getComment(){
  return this.comment;
}",0.9606299212598424
124388,"/** 
 * Saves or updates the given   {@link OrderPositionEto}.
 * @param orderPosition is the {@link OrderPositionEto} to persist.
 * @return the saved {@link OrderPositionEto}.
 */
OrderPositionEto saveOrderPosition(OrderPositionEto orderPosition);","/** 
 * Saves or updates the given   {@link OrderPositionEto}.
 * @param orderPosition is the {@link OrderPositionEto} to persist.
 * @return the saved {@link OrderPositionEto}.
 */
OrderPositionEto saveOrderPosition(@Valid OrderPositionEto orderPosition);",0.986138613861386
124389,"/** 
 * @param currentOrderPosition is the current {@link OrderPosition} from the persistence.
 * @param updateOrderPosition is the new {@link OrderPosition} to update to.
 */
private void verifyUpdate(OrderPosition currentOrderPosition,OrderPosition updateOrderPosition){
  if (!Objects.equals(currentOrderPosition.getOrderId(),currentOrderPosition.getOrderId())) {
    throw new IllegalPropertyChangeException(updateOrderPosition,""String_Node_Str"");
  }
  if (!Objects.equals(currentOrderPosition.getOfferId(),currentOrderPosition.getOfferId())) {
    throw new IllegalPropertyChangeException(updateOrderPosition,""String_Node_Str"");
  }
  OrderPositionState currentState=currentOrderPosition.getState();
  OrderPositionState newState=updateOrderPosition.getState();
  ProductOrderState newDrinkState=updateOrderPosition.getDrinkState();
  verifyOrderPositionStateChange(updateOrderPosition,currentState,newState);
  verifyDrinkStateChange(updateOrderPosition,currentState,newState,newDrinkState);
}","/** 
 * @param currentOrderPosition is the current {@link OrderPosition} from the persistence.
 * @param updateOrderPosition is the new {@link OrderPosition} to update to.
 */
private void verifyUpdate(OrderPosition currentOrderPosition,OrderPosition updateOrderPosition){
  if (!Objects.equals(currentOrderPosition.getOrderId(),currentOrderPosition.getOrderId())) {
    throw new IllegalPropertyChangeException(updateOrderPosition,""String_Node_Str"");
  }
  if (!Objects.equals(currentOrderPosition.getOfferId(),currentOrderPosition.getOfferId())) {
    throw new IllegalPropertyChangeException(updateOrderPosition,""String_Node_Str"");
  }
  if (!Objects.equals(currentOrderPosition.getPrice(),currentOrderPosition.getPrice())) {
    throw new IllegalPropertyChangeException(updateOrderPosition,""String_Node_Str"");
  }
  if (!Objects.equals(currentOrderPosition.getOfferName(),currentOrderPosition.getOfferName())) {
    throw new IllegalPropertyChangeException(updateOrderPosition,""String_Node_Str"");
  }
  OrderPositionState currentState=currentOrderPosition.getState();
  OrderPositionState newState=updateOrderPosition.getState();
  ProductOrderState newDrinkState=updateOrderPosition.getDrinkState();
  verifyOrderPositionStateChange(updateOrderPosition,currentState,newState);
  verifyDrinkStateChange(updateOrderPosition,currentState,newState,newDrinkState);
}",0.8453085376162299
124390,"@Override @RolesAllowed(PermissionConstants.SAVE_ORDER_POSITION) public OrderPositionEto saveOrderPosition(OrderPositionEto orderPosition){
  Objects.requireNonNull(orderPosition,""String_Node_Str"");
  Long orderPositionId=orderPosition.getId();
  String action;
  if (orderPositionId == null) {
    action=""String_Node_Str"";
  }
 else {
    OrderPositionEntity targetOrderPosition=getOrderPositionDao().find(orderPositionId);
    verifyUpdate(targetOrderPosition,orderPosition);
    action=""String_Node_Str"";
  }
  OrderPositionEntity orderPositionEntity=getBeanMapper().map(orderPosition,OrderPositionEntity.class);
  orderPositionEntity=getOrderPositionDao().save(orderPositionEntity);
  LOG.debug(""String_Node_Str"",orderPositionEntity.getId(),action);
  return getBeanMapper().map(orderPositionEntity,OrderPositionEto.class);
}","@Override @RolesAllowed(PermissionConstants.SAVE_ORDER_POSITION) public OrderPositionEto saveOrderPosition(OrderPositionEto orderPosition){
  Objects.requireNonNull(orderPosition,""String_Node_Str"");
  Long orderPositionId=orderPosition.getId();
  String action;
  if (orderPositionId == null) {
    action=""String_Node_Str"";
    Long offerId=orderPosition.getOfferId();
    OfferEto offer=this.offerManagement.findOffer(offerId);
    Objects.requireNonNull(offer,""String_Node_Str"" + offerId);
    orderPosition.setPrice(offer.getPrice());
    orderPosition.setOfferName(offer.getName());
  }
 else {
    OrderPositionEntity targetOrderPosition=getOrderPositionDao().find(orderPositionId);
    verifyUpdate(targetOrderPosition,orderPosition);
    action=""String_Node_Str"";
  }
  OrderPositionEntity orderPositionEntity=getBeanMapper().map(orderPosition,OrderPositionEntity.class);
  orderPositionEntity=getOrderPositionDao().save(orderPositionEntity);
  LOG.debug(""String_Node_Str"",orderPositionEntity.getId(),action);
  return getBeanMapper().map(orderPositionEntity,OrderPositionEto.class);
}",0.8632345293811753
124391,"/** 
 * Gets the profile of the user being currently logged in.
 * @param request provided by the RS-Context
 * @return the {@link UserData} taken from the Spring Security context
 */
@Produces(MediaType.APPLICATION_JSON) @GET @Path(""String_Node_Str"") public UserDetailsClientTo getCurrentUser(@Context HttpServletRequest request){
  if (request.getRemoteUser() == null) {
    throw new NoActiveUserException();
  }
  return UserData.get().toClientTo();
}","/** 
 * Gets the profile of the user being currently logged in.
 * @param request provided by the RS-Context
 * @return the {@link UserData} taken from the Spring Security context
 */
@Produces(MediaType.APPLICATION_JSON) @GET @Path(""String_Node_Str"") @PermitAll public UserDetailsClientTo getCurrentUser(@Context HttpServletRequest request){
  if (request.getRemoteUser() == null) {
    throw new NoActiveUserException();
  }
  return UserData.get().toClientTo();
}",0.988056460369164
124392,"/** 
 * Retrieves the CSRF token from the server session.
 * @param request {@link HttpServletRequest} to retrieve the current session from
 * @param response {@link HttpServletResponse} to send additional information
 * @return the Spring Security {@link CsrfToken}
 */
@Produces(MediaType.APPLICATION_JSON) @GET @Path(""String_Node_Str"") public CsrfToken getCsrfToken(@Context HttpServletRequest request,@Context HttpServletResponse response){
  CsrfToken token=this.csrfTokenRepository.loadToken(request);
  if (token == null) {
    LOG.warn(""String_Node_Str"");
    token=this.csrfTokenRepository.generateToken(request);
    this.csrfTokenRepository.saveToken(token,request,response);
  }
  return token;
}","/** 
 * Retrieves the CSRF token from the server session.
 * @param request {@link HttpServletRequest} to retrieve the current session from
 * @param response {@link HttpServletResponse} to send additional information
 * @return the Spring Security {@link CsrfToken}
 */
@Produces(MediaType.APPLICATION_JSON) @GET @Path(""String_Node_Str"") @PermitAll public CsrfToken getCsrfToken(@Context HttpServletRequest request,@Context HttpServletResponse response){
  CsrfToken token=this.csrfTokenRepository.loadToken(request);
  if (token == null) {
    LOG.warn(""String_Node_Str"");
    token=this.csrfTokenRepository.generateToken(request);
    this.csrfTokenRepository.saveToken(token,request,response);
  }
  return token;
}",0.99229152067274
124393,"/** 
 * Sets the field 'ucFindProduct'.
 * @param ucFindProduct New value for ucFindProduct
 */
@Inject public void setUcFindProduct(UcFindProductImpl ucFindProduct){
  this.ucFindProduct=ucFindProduct;
}","/** 
 * Sets the field 'ucFindProduct'.
 * @param ucFindProduct New value for ucFindProduct
 */
@Inject public void setUcFindProduct(UcFindProduct ucFindProduct){
  this.ucFindProduct=ucFindProduct;
}",0.99009900990099
124394,"/** 
 * Sets the field 'ucManageOffer'.
 * @param ucManageOffer New value for ucManageOffer
 */
@Inject public void setUcManageOffer(UcManageOfferImpl ucManageOffer){
  this.ucManageOffer=ucManageOffer;
}","/** 
 * Sets the field 'ucManageOffer'.
 * @param ucManageOffer New value for ucManageOffer
 */
@Inject public void setUcManageOffer(UcManageOffer ucManageOffer){
  this.ucManageOffer=ucManageOffer;
}",0.99009900990099
124395,"/** 
 * Sets the field 'ucManageProduct'.
 * @param ucManageProduct New value for ucManageProduct
 */
@Inject public void setUcManageProduct(UcManageProductImpl ucManageProduct){
  this.ucManageProduct=ucManageProduct;
}","/** 
 * Sets the field 'ucManageProduct'.
 * @param ucManageProduct New value for ucManageProduct
 */
@Inject public void setUcManageProduct(UcManageProduct ucManageProduct){
  this.ucManageProduct=ucManageProduct;
}",0.9908256880733946
124396,"/** 
 * Sets the field 'ucFindOffer'.
 * @param ucFindOffer New value for ucFindOffer
 */
@Inject public void setUcFindOffer(UcFindOfferImpl ucFindOffer){
  this.ucFindOffer=ucFindOffer;
}","/** 
 * Sets the field 'ucFindOffer'.
 * @param ucFindOffer New value for ucFindOffer
 */
@Inject public void setUcFindOffer(UcFindOffer ucFindOffer){
  this.ucFindOffer=ucFindOffer;
}",0.989247311827957
124397,"/** 
 * @param ucFindOrderPosition the {@link UcFindOrderPosition} to {@link Inject}.
 */
@Inject public void setUcFindOrderPosition(UcFindOrderPositionImpl ucFindOrderPosition){
  this.ucFindOrderPosition=ucFindOrderPosition;
}","/** 
 * @param ucFindOrderPosition the {@link UcFindOrderPosition} to {@link Inject}.
 */
@Inject public void setUcFindOrderPosition(UcFindOrderPosition ucFindOrderPosition){
  this.ucFindOrderPosition=ucFindOrderPosition;
}",0.991150442477876
124398,"/** 
 * Marks the   {@link BillEntity} and its contained {@link OrderPositionEntity}s as payed.
 * @param bill {@link BillEntity} to be payed
 */
private void markBillAndOrderPositionsAsPayed(BillEto bill){
  bill.setPayed(true);
  LOG.debug(""String_Node_Str"" + bill.getId() + ""String_Node_Str"");
  update(bill);
  for (  Long orderPositionId : bill.getOrderPositionIds()) {
    OrderPositionEto orderPosition=this.ucFindOrderPosition.findOrderPosition(orderPositionId);
    verifyNotClosed(orderPosition);
    this.ucManageOrderPosition.markOrderPositionAs(orderPosition,OrderPositionState.PAYED);
    LOG.debug(""String_Node_Str"",orderPositionId,bill.getId());
  }
}","/** 
 * Marks the   {@link BillEntity} and its contained {@link OrderPositionEntity}s as payed.
 * @param bill {@link BillEntity} to be payed
 */
private void markBillAndOrderPositionsAsPayed(BillEto bill){
  bill.setPayed(true);
  LOG.debug(""String_Node_Str"" + bill.getId() + ""String_Node_Str"");
  update(bill);
  for (  Long orderPositionId : bill.getOrderPositionIds()) {
    OrderPositionEto orderPosition=this.salesmanagement.findOrderPosition(orderPositionId);
    verifyNotClosed(orderPosition);
    this.salesmanagement.markOrderPositionAs(orderPosition,OrderPositionState.PAYED);
    LOG.debug(""String_Node_Str"",orderPositionId,bill.getId());
  }
}",0.947129909365559
124399,"/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.SAVE_BILL) public BillEto createBill(List<OrderPositionEto> orderPositions,Money tip){
  Objects.requireNonNull(orderPositions,""String_Node_Str"");
  Money total=Money.ZERO;
  for (  OrderPositionEto position : orderPositions) {
    OrderPositionEto orderPosition=this.ucFindOrderPosition.findOrderPosition(position.getId());
    verifyNotClosed(orderPosition);
    total=total.add(orderPosition.getPrice());
  }
  Money localTip=tip;
  if (localTip == null) {
    localTip=Money.ZERO;
  }
  BillEntity bill=new BillEntity();
  List<OrderPositionEntity> myOrderPositions=new ArrayList<>();
  for (  OrderPositionEto position : orderPositions) {
    myOrderPositions.add(getBeanMapper().map(position,OrderPositionEntity.class));
  }
  bill.setOrderPositions(myOrderPositions);
  bill.setTip(localTip);
  bill.setPayed(false);
  bill.setTotal(total);
  getBillDao().save(bill);
  BillEto returnBill=getBeanMapper().map(bill,BillEto.class);
  LOG.debug(""String_Node_Str"",returnBill.getId());
  return returnBill;
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.SAVE_BILL) public BillEto createBill(List<OrderPositionEto> orderPositions,Money tip){
  Objects.requireNonNull(orderPositions,""String_Node_Str"");
  Money total=Money.ZERO;
  for (  OrderPositionEto position : orderPositions) {
    OrderPositionEto orderPosition=this.salesmanagement.findOrderPosition(position.getId());
    verifyNotClosed(orderPosition);
    total=total.add(orderPosition.getPrice());
  }
  Money localTip=tip;
  if (localTip == null) {
    localTip=Money.ZERO;
  }
  BillEntity bill=new BillEntity();
  List<OrderPositionEntity> myOrderPositions=new ArrayList<>();
  for (  OrderPositionEto position : orderPositions) {
    myOrderPositions.add(getBeanMapper().map(position,OrderPositionEntity.class));
  }
  bill.setOrderPositions(myOrderPositions);
  bill.setTip(localTip);
  bill.setPayed(false);
  bill.setTotal(total);
  getBillDao().save(bill);
  BillEto returnBill=getBeanMapper().map(bill,BillEto.class);
  LOG.debug(""String_Node_Str"",returnBill.getId());
  return returnBill;
}",0.9842300556586272
124400,"/** 
 * This method updates a   {@link BillEntity} by checking the existence of a bill with that {@link BillEntity#getId() id} in the database. If no such {@link BillEntity} exists, a new bill will be created by calling{@link UcManageBillImpl#create(List,Money)}. Otherwise, the existing   {@link BillEntity} will be updated byoverriding the set  {@link BillEntity#getOrderPositions() order positions},   {@link BillEntity#getTip() tip} and the{@link BillEntity#getTotal() total amount}.
 * @param bill The {@link BillEntity} to update.
 * @return the updated {@link BillEntity}
 */
private BillEto update(BillEto bill){
  Objects.requireNonNull(bill,""String_Node_Str"");
  Long billId=bill.getId();
  BillEntity targetBill=getBillDao().findOne(billId);
  List<Long> orderPositionIds=bill.getOrderPositionIds();
  if (targetBill == null) {
    List<OrderPositionEto> orderPositions=new ArrayList<>();
    for (    Long id : orderPositionIds) {
      OrderPositionEto position=this.ucFindOrderPosition.findOrderPosition(id);
      orderPositions.add(position);
    }
    return createBill(orderPositions,bill.getTip());
  }
 else {
    targetBill.setOrderPositionIds(orderPositionIds);
    targetBill.setPayed(bill.isPayed());
    targetBill.setTip(bill.getTip());
    targetBill.setTotal(bill.getTotal());
    getBillDao().save(targetBill);
    LOG.debug(""String_Node_Str"",billId);
    return getBeanMapper().map(targetBill,BillEto.class);
  }
}","/** 
 * This method updates a   {@link BillEntity} by checking the existence of a bill with that {@link BillEntity#getId() id} in the database. If no such {@link BillEntity} exists, a new bill will be created by calling{@link UcManageBillImpl#create(List,Money)}. Otherwise, the existing   {@link BillEntity} will be updated byoverriding the set  {@link BillEntity#getOrderPositions() order positions},   {@link BillEntity#getTip() tip} and the{@link BillEntity#getTotal() total amount}.
 * @param bill The {@link BillEntity} to update.
 * @return the updated {@link BillEntity}
 */
private BillEto update(BillEto bill){
  Objects.requireNonNull(bill,""String_Node_Str"");
  Long billId=bill.getId();
  BillEntity targetBill=getBillDao().findOne(billId);
  List<Long> orderPositionIds=bill.getOrderPositionIds();
  if (targetBill == null) {
    List<OrderPositionEto> orderPositions=new ArrayList<>();
    for (    Long id : orderPositionIds) {
      OrderPositionEto position=this.salesmanagement.findOrderPosition(id);
      orderPositions.add(position);
    }
    return createBill(orderPositions,bill.getTip());
  }
 else {
    targetBill.setOrderPositionIds(orderPositionIds);
    targetBill.setPayed(bill.isPayed());
    targetBill.setTip(bill.getTip());
    targetBill.setTotal(bill.getTotal());
    getBillDao().save(targetBill);
    LOG.debug(""String_Node_Str"",billId);
    return getBeanMapper().map(targetBill,BillEto.class);
  }
}",0.9882108183079056
124401,"/** 
 * {@inheritDoc}
 */
@Override protected UserProfile retrievePrincipal(String username,UsernamePasswordAuthenticationToken authentication){
  try {
    return this.usermanagement.findUserProfileByLogin(username);
  }
 catch (  RuntimeException e) {
    UsernameNotFoundException exception=new UsernameNotFoundException(""String_Node_Str"",e);
    LOG.warn(""String_Node_Str"",username,exception);
    throw exception;
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected UserProfile retrievePrincipal(String username,UsernamePasswordAuthenticationToken authentication){
  try {
    return this.usermanagement.findUserProfileByLogin(username);
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    UsernameNotFoundException exception=new UsernameNotFoundException(""String_Node_Str"",e);
    LOG.warn(""String_Node_Str"",username,exception);
    throw exception;
  }
}",0.9713631156930126
124402,"/** 
 * {@inheritDoc}
 */
@Override public OfferCto findOfferCto(Long id){
  LOG.debug(""String_Node_Str"",id);
  OfferCto result=new OfferCto();
  OfferEto offerEto=findOffer(id);
  if (offerEto == null) {
    return null;
  }
  result.setOffer(offerEto);
  Long mealId=offerEto.getMealId();
  if (mealId != null) {
    result.setMeal(this.offerManagement.findMeal(mealId));
  }
  Long drinkId=offerEto.getDrinkId();
  if (drinkId != null) {
    result.setDrink(this.offerManagement.findDrink(drinkId));
  }
  Long sideDishId=offerEto.getSideDishId();
  if (sideDishId != null) {
    result.setSideDish(this.offerManagement.findSideDish(sideDishId));
  }
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_OFFER) public OfferCto findOfferCto(Long id){
  LOG.debug(""String_Node_Str"",id);
  OfferCto result=new OfferCto();
  OfferEto offerEto=findOffer(id);
  if (offerEto == null) {
    return null;
  }
  result.setOffer(offerEto);
  Long mealId=offerEto.getMealId();
  if (mealId != null) {
    result.setMeal(this.offerManagement.findMeal(mealId));
  }
  Long drinkId=offerEto.getDrinkId();
  if (drinkId != null) {
    result.setDrink(this.offerManagement.findDrink(drinkId));
  }
  Long sideDishId=offerEto.getSideDishId();
  if (sideDishId != null) {
    result.setSideDish(this.offerManagement.findSideDish(sideDishId));
  }
  return result;
}",0.966906474820144
124403,"/** 
 * {@inheritDoc}
 */
@Override public BinaryObjectEto findProductPicture(Long productId){
  return getUcManageBinaryObject().findBinaryObject(findProduct(productId).getPictureId());
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_PRODUCT) public BinaryObjectEto findProductPicture(Long productId){
  return getUcManageBinaryObject().findBinaryObject(findProduct(productId).getPictureId());
}",0.8867924528301887
124404,"/** 
 * {@inheritDoc}
 */
@Override public SideDishEto findSideDish(Long id){
  ProductEto product=findProduct(id);
  try {
    return (SideDishEto)product;
  }
 catch (  ClassCastException e) {
    throw new ObjectMismatchException(product,SideDishEto.class,e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_PRODUCT) public SideDishEto findSideDish(Long id){
  ProductEto product=findProduct(id);
  try {
    return (SideDishEto)product;
  }
 catch (  ClassCastException e) {
    throw new ObjectMismatchException(product,SideDishEto.class,e);
  }
}",0.9178082191780822
124405,"/** 
 * {@inheritDoc}
 */
@Override public DrinkEto findDrink(Long id){
  ProductEto product=findProduct(id);
  try {
    return (DrinkEto)product;
  }
 catch (  ClassCastException e) {
    throw new ObjectMismatchException(product,DrinkEto.class,e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_PRODUCT) public DrinkEto findDrink(Long id){
  ProductEto product=findProduct(id);
  try {
    return (DrinkEto)product;
  }
 catch (  ClassCastException e) {
    throw new ObjectMismatchException(product,DrinkEto.class,e);
  }
}",0.9142857142857144
124406,"/** 
 * {@inheritDoc}
 */
@Override public MealEto findMeal(Long id){
  ProductEto product=findProduct(id);
  try {
    return (MealEto)product;
  }
 catch (  ClassCastException e) {
    throw new ObjectMismatchException(product,MealEto.class,e);
  }
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_PRODUCT) public MealEto findMeal(Long id){
  ProductEto product=findProduct(id);
  try {
    return (MealEto)product;
  }
 catch (  ClassCastException e) {
    throw new ObjectMismatchException(product,MealEto.class,e);
  }
}",0.9130434782608696
124407,"/** 
 * {@inheritDoc}
 */
@Override public void changeTable(OrderEto order,TableEto newTable){
  long oldTableId=order.getTableId();
  TableState oldTableState=this.tableManagement.findTable(oldTableId).getState();
  order.setTableId(newTable.getId());
  this.tableManagement.markTableAs(this.tableManagement.findTable(oldTableId),TableState.FREE);
  this.tableManagement.markTableAs(newTable,oldTableState);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.SAVE_TABLE) public void changeTable(OrderEto order,TableEto newTable){
  long oldTableId=order.getTableId();
  TableState oldTableState=this.tableManagement.findTable(oldTableId).getState();
  order.setTableId(newTable.getId());
  this.tableManagement.markTableAs(this.tableManagement.findTable(oldTableId),TableState.FREE);
  this.tableManagement.markTableAs(newTable,oldTableState);
}",0.9468822170900691
124408,"/** 
 * {@inheritDoc}
 */
@Override public List<OrderEto> findOrderEtos(OrderSearchCriteriaTo criteria){
  criteria.limitMaximumHitCount(MAXIMUM_HIT_LIMIT);
  List<OrderEntity> orders=getOrderDao().findOrders(criteria);
  return getBeanMapper().mapList(orders,OrderEto.class);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public List<OrderEto> findOrderEtos(OrderSearchCriteriaTo criteria){
  criteria.limitMaximumHitCount(MAXIMUM_HIT_LIMIT);
  List<OrderEntity> orders=getOrderDao().findOrders(criteria);
  return getBeanMapper().mapList(orders,OrderEto.class);
}",0.9235880398671096
124409,"/** 
 * {@inheritDoc}
 */
@Override public OrderCto findOrderCto(OrderEto order){
  OrderCto result=new OrderCto();
  result.setOrder(order);
  List<OrderPositionEto> positions=this.salesManagement.findOrderPositionsByOrderId(order.getId());
  result.setPositions(positions);
  return result;
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public OrderCto findOrderCto(OrderEto order){
  OrderCto result=new OrderCto();
  result.setOrder(order);
  List<OrderPositionEto> positions=this.salesManagement.findOrderPositionsByOrderId(order.getId());
  result.setPositions(positions);
  return result;
}",0.9274447949526814
124410,"/** 
 * {@inheritDoc}
 */
@Override public OrderEto findOpenOrderForTable(Long tableId){
  OrderEntity order=getOrderDao().findOpenOrderByTable(tableId);
  return getBeanMapper().map(order,OrderEto.class);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_ORDER) public OrderEto findOpenOrderForTable(Long tableId){
  OrderEntity order=getOrderDao().findOpenOrderByTable(tableId);
  return getBeanMapper().map(order,OrderEto.class);
}",0.9
124411,"/** 
 * {@inheritDoc}
 */
@Override public List<OrderPositionEto> findOpenOrderPositionsByOrderId(Long orderId){
  LOG.debug(""String_Node_Str"" + orderId + ""String_Node_Str"");
  return getBeanMapper().mapList(getOrderPositionDao().findOpenOrderPositionsByOrder(orderId),OrderPositionEto.class);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public List<OrderPositionEto> findOpenOrderPositionsByOrderId(Long orderId){
  LOG.debug(""String_Node_Str"" + orderId + ""String_Node_Str"");
  return getBeanMapper().mapList(getOrderPositionDao().findOpenOrderPositionsByOrder(orderId),OrderPositionEto.class);
}",0.9147286821705426
124412,"/** 
 * {@inheritDoc}
 */
@Override public List<OrderPositionEto> findOrderPositionsByOrderId(Long orderId){
  List<OrderPositionEntity> positions=getOrderPositionDao().findOrderPositionsByOrder(orderId);
  return getBeanMapper().mapList(positions,OrderPositionEto.class);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_ORDER_POSITION) public List<OrderPositionEto> findOrderPositionsByOrderId(Long orderId){
  List<OrderPositionEntity> positions=getOrderPositionDao().findOrderPositionsByOrder(orderId);
  return getBeanMapper().mapList(positions,OrderPositionEto.class);
}",0.9087893864013268
124413,"/** 
 * {@inheritDoc}
 */
@Override public void deleteOrder(Long id){
  getOrderDao().delete(id);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.DELETE_ORDER) public void deleteOrder(Long id){
  getOrderDao().delete(id);
}",0.8048780487804879
124414,"/** 
 * {@inheritDoc}
 */
@Override public StaffMemberEto findStaffMember(Long id){
  return getBeanMapper().map(getStaffMemberDao().find(id),StaffMemberEto.class);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_STAFF_MEMBER) public StaffMemberEto findStaffMember(Long id){
  return getBeanMapper().map(getStaffMemberDao().find(id),StaffMemberEto.class);
}",0.8623376623376623
124415,"/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.FIND_STAFF_MEMBER) public StaffMemberEto findStaffMemberByLogin(String login){
  return getBeanMapper().map(getStaffMemberDao().findByLogin(login),StaffMemberEto.class);
}","/** 
 * {@inheritDoc}Do not extract this method as a service, because of PermitAll. (only for login)
 */
@Override @RolesAllowed(PermissionConstants.FIND_STAFF_MEMBER) public StaffMemberEto findStaffMemberByLogin(String login){
  return privateFindStaffMemberByLogin(login);
}",0.6808510638297872
124416,"/** 
 * {@inheritDoc}
 */
@Override public void deleteStaffMember(Long staffMemberId){
  getStaffMemberDao().delete(staffMemberId);
}","/** 
 * {@inheritDoc}
 */
@Override @RolesAllowed(PermissionConstants.DELETE_STAFF_MEMBER) public void deleteStaffMember(Long staffMemberId){
  getStaffMemberDao().delete(staffMemberId);
}",0.8286604361370716
124417,"/** 
 * Check if all relevant methods in use case implementations have permission checks i.e.   {@link RolesAllowed},  {@link DenyAll} or {@link PermitAll} annotation is applied. This is only checked for methods that are declared inthe corresponding interface and thus have the  {@link Override} annotations applied.
 */
@Test public void permissionCheckAnnotationPresent(){
  String packageName=""String_Node_Str"";
  Filter<String> filter=new Filter<String>(){
    @Override public boolean accept(    String value){
      return value.contains(""String_Node_Str"") && value.endsWith(""String_Node_Str"");
    }
  }
;
  ReflectionUtil ru=ReflectionUtilImpl.getInstance();
  Set<String> classNames=ru.findClassNames(packageName,true,filter);
  Set<Class<?>> classes=ru.loadClasses(classNames);
  for (  Class<?> clazz : classes) {
    Method[] methods=clazz.getDeclaredMethods();
    for (    Method method : methods) {
      if (method.getAnnotation(Override.class) != null) {
        assertTrue(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ clazz.getSimpleName()+ ""String_Node_Str"",method.getAnnotation(RolesAllowed.class) != null || method.getAnnotation(DenyAll.class) != null || method.getAnnotation(PermitAll.class) != null);
      }
    }
  }
}","/** 
 * Check if all relevant methods in use case implementations have permission checks i.e.   {@link RolesAllowed},  {@link DenyAll} or {@link PermitAll} annotation is applied. This is only checked for methods that are declared inthe corresponding interface and thus have the  {@link Override} annotations applied.
 */
@Test public void permissionCheckAnnotationPresent(){
  String packageName=""String_Node_Str"";
  Filter<String> filter=new Filter<String>(){
    @Override public boolean accept(    String value){
      return value.contains(""String_Node_Str"") && value.endsWith(""String_Node_Str"");
    }
  }
;
  ReflectionUtil ru=ReflectionUtilImpl.getInstance();
  Set<String> classNames=ru.findClassNames(packageName,true,filter);
  Set<Class<?>> classes=ru.loadClasses(classNames);
  for (  Class<?> clazz : classes) {
    Method[] methods=clazz.getDeclaredMethods();
    for (    Method method : methods) {
      Method parentMethod=ru.getParentMethod(method);
      if (parentMethod != null) {
        Class<?> declaringClass=parentMethod.getDeclaringClass();
        if (declaringClass.isInterface() && declaringClass.getSimpleName().startsWith(""String_Node_Str"")) {
          assertTrue(""String_Node_Str"" + method.getName() + ""String_Node_Str""+ clazz.getSimpleName()+ ""String_Node_Str"",method.getAnnotation(RolesAllowed.class) != null || method.getAnnotation(DenyAll.class) != null || method.getAnnotation(PermitAll.class) != null);
        }
      }
    }
  }
}",0.8709677419354839
124418,"@Override public void load(){
  System.out.println(""String_Node_Str"");
  scriptData=ScriptProviderMemory.collect(scriptProvider);
  Set<String> executed=new HashSet<String>();
  Iterator<IScriptIterator> scripts=scriptProvider.getScripts();
  while (scripts.hasNext()) {
    IScriptIterator script=scripts.next();
    if (!executed.contains(script.getGroupName())) {
      executed.add(script.getGroupName());
      Map<String,byte[]> classes=new HashMap<String,byte[]>();
      IEnvironmentGlobal environmentGlobal=GlobalRegistry.makeGlobalEnvironment(classes);
      List<ZenParsedFile> files=new ArrayList<ZenParsedFile>();
      while (script.next()) {
        Reader reader=null;
        try {
          reader=new InputStreamReader(new BufferedInputStream(script.open()),""String_Node_Str"");
          String filename=script.getName();
          String className=extractClassName(filename);
          ZenTokener parser=new ZenTokener(reader,environmentGlobal.getEnvironment());
          ZenParsedFile pfile=new ZenParsedFile(filename,className,parser,environmentGlobal);
          files.add(pfile);
        }
 catch (        IOException ex) {
          MineTweakerAPI.logError(""String_Node_Str"" + script.getName() + ""String_Node_Str""+ ex.getMessage());
        }
catch (        ParseException ex) {
          MineTweakerAPI.logError(""String_Node_Str"" + ex.getFile().getFileName() + ""String_Node_Str""+ ex.getLine()+ ""String_Node_Str""+ ex.getExplanation());
        }
catch (        Exception ex) {
          MineTweakerAPI.logError(""String_Node_Str"" + script.getName() + ""String_Node_Str""+ ex.toString(),ex);
        }
        if (reader != null) {
          try {
            reader.close();
          }
 catch (          IOException ex) {
          }
        }
      }
      try {
        String filename=script.getGroupName();
        System.out.println(""String_Node_Str"" + filename);
        compileScripts(filename,files,environmentGlobal,DEBUG);
        ZenModule module=new ZenModule(classes,MineTweakerAPI.class.getClassLoader());
        module.getMain().run();
      }
 catch (      Throwable ex) {
        MineTweakerAPI.logError(""String_Node_Str"" + script.getGroupName() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
  }
  if (wereStuck.size() > 0) {
    MineTweakerAPI.logWarning(Integer.toString(wereStuck.size()) + ""String_Node_Str"");
    for (    IUndoableAction action : wereStuck) {
      MineTweakerAPI.logInfo(""String_Node_Str"" + action.describe());
    }
  }
}","@Override public void load(){
  System.out.println(""String_Node_Str"");
  scriptData=ScriptProviderMemory.collect(scriptProvider);
  Set<String> executed=new HashSet<String>();
  Iterator<IScriptIterator> scripts=scriptProvider.getScripts();
  while (scripts.hasNext()) {
    IScriptIterator script=scripts.next();
    if (!executed.contains(script.getGroupName())) {
      executed.add(script.getGroupName());
      Map<String,byte[]> classes=new HashMap<String,byte[]>();
      IEnvironmentGlobal environmentGlobal=GlobalRegistry.makeGlobalEnvironment(classes);
      List<ZenParsedFile> files=new ArrayList<ZenParsedFile>();
      while (script.next()) {
        Reader reader=null;
        try {
          reader=new InputStreamReader(new BufferedInputStream(script.open()));
          String filename=script.getName();
          String className=extractClassName(filename);
          ZenTokener parser=new ZenTokener(reader,environmentGlobal.getEnvironment());
          ZenParsedFile pfile=new ZenParsedFile(filename,className,parser,environmentGlobal);
          files.add(pfile);
        }
 catch (        IOException ex) {
          MineTweakerAPI.logError(""String_Node_Str"" + script.getName() + ""String_Node_Str""+ ex.getMessage());
        }
catch (        ParseException ex) {
          MineTweakerAPI.logError(""String_Node_Str"" + ex.getFile().getFileName() + ""String_Node_Str""+ ex.getLine()+ ""String_Node_Str""+ ex.getExplanation());
        }
catch (        Exception ex) {
          MineTweakerAPI.logError(""String_Node_Str"" + script.getName() + ""String_Node_Str""+ ex.toString(),ex);
        }
        if (reader != null) {
          try {
            reader.close();
          }
 catch (          IOException ex) {
          }
        }
      }
      try {
        String filename=script.getGroupName();
        System.out.println(""String_Node_Str"" + filename);
        compileScripts(filename,files,environmentGlobal,DEBUG);
        ZenModule module=new ZenModule(classes,MineTweakerAPI.class.getClassLoader());
        module.getMain().run();
      }
 catch (      Throwable ex) {
        MineTweakerAPI.logError(""String_Node_Str"" + script.getGroupName() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
  }
  if (wereStuck.size() > 0) {
    MineTweakerAPI.logWarning(Integer.toString(wereStuck.size()) + ""String_Node_Str"");
    for (    IUndoableAction action : wereStuck) {
      MineTweakerAPI.logInfo(""String_Node_Str"" + action.describe());
    }
  }
}",0.9963811821471652
124419,"@Override public void compile(boolean result,IEnvironmentMethod environment){
  if (!result)   return;
  Method method=interfaceClass.getMethods()[0];
  String clsName=environment.makeClassName();
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
  cw.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC,clsName,null,""String_Node_Str"",new String[]{internal(interfaceClass)});
  MethodOutput constructor=new MethodOutput(cw,Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  constructor.start();
  constructor.loadObject(0);
  constructor.invokeSpecial(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  constructor.ret();
  constructor.end();
  MethodOutput output=new MethodOutput(cw,Opcodes.ACC_PUBLIC,method.getName(),descriptor(method),null,null);
  IEnvironmentClass environmentClass=new EnvironmentClass(cw,environment);
  IEnvironmentMethod environmentMethod=new EnvironmentMethod(output,environmentClass);
  for (int i=0; i < arguments.size(); i++) {
    environmentMethod.putValue(arguments.get(i).getName(),new SymbolArgument(i + 1,environment.getType(method.getGenericParameterTypes()[i])),getPosition());
  }
  output.start();
  for (  Statement statement : statements) {
    statement.compile(environmentMethod);
  }
  output.ret();
  output.end();
  environment.putClass(clsName,cw.toByteArray());
  environment.getOutput().newObject(clsName);
  environment.getOutput().dup();
  environment.getOutput().construct(clsName);
}","@Override public void compile(boolean result,IEnvironmentMethod environment){
  if (!result)   return;
  Method method=interfaceClass.getMethods()[0];
  String clsName=environment.makeClassName();
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
  cw.visit(Opcodes.V1_6,Opcodes.ACC_PUBLIC,clsName,null,""String_Node_Str"",new String[]{internal(interfaceClass)});
  MethodOutput constructor=new MethodOutput(cw,Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  constructor.start();
  constructor.loadObject(0);
  constructor.invokeSpecial(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  constructor.ret();
  constructor.end();
  MethodOutput output=new MethodOutput(cw,Opcodes.ACC_PUBLIC,method.getName(),descriptor(method),null,null);
  IEnvironmentClass environmentClass=new EnvironmentClass(cw,environment);
  IEnvironmentMethod environmentMethod=new EnvironmentMethod(output,environmentClass);
  for (int i=0; i < arguments.size(); i++) {
    environmentMethod.putValue(arguments.get(i).getName(),new SymbolArgument(i + 1,environment.getType(method.getGenericParameterTypes()[i])),getPosition());
  }
  output.start();
  for (  Statement statement : statements) {
    statement.compile(environmentMethod);
  }
  output.end();
  environment.putClass(clsName,cw.toByteArray());
  environment.getOutput().newObject(clsName);
  environment.getOutput().dup();
  environment.getOutput().construct(clsName);
}",0.9944941500344116
124420,"private int processChar(CharStream stream){
  if (stream.optional('\\')) {
    if (stream.optional('u'))     return UNICODE_ESCAPE;
    if (stream.optional('e'))     return -1;
    if (stream.optional('r'))     return '\r';
    if (stream.optional('n'))     return '\n';
    if (stream.optional('t'))     return '\t';
    if (stream.optional('['))     return '[';
    if (stream.optional(']'))     return ']';
    if (stream.optional('('))     return '(';
    if (stream.optional(')'))     return ')';
    if (stream.optional('.'))     return '.';
    if (stream.optional('+'))     return '+';
    if (stream.optional('-'))     return '-';
    if (stream.optional('\\'))     return '\\';
    if (stream.optional('{'))     return '{';
    if (stream.optional('}'))     return '}';
    if (stream.optional('?'))     return '?';
    if (stream.optional('*'))     return '*';
    if (stream.optional('~'))     return '~';
    if (stream.optional('|'))     return '|';
    if (stream.optional('^'))     return '^';
    throw new IllegalArgumentException(""String_Node_Str"" + stream.next());
  }
 else {
    if (stream.peek('[') || stream.peek(']') || stream.peek('(')|| stream.peek(')')|| stream.peek('{')|| stream.peek('}')|| stream.peek('.')|| stream.peek('-')|| stream.peek('+')|| stream.peek('?')|| stream.peek('*')) {
      throw new IllegalArgumentException(""String_Node_Str"" + stream.next());
    }
 else {
      return stream.next();
    }
  }
}","private int processChar(CharStream stream){
  if (stream.optional('\\')) {
    if (stream.optional('e'))     return -1;
    if (stream.optional('r'))     return '\r';
    if (stream.optional('n'))     return '\n';
    if (stream.optional('t'))     return '\t';
    if (stream.optional('['))     return '[';
    if (stream.optional(']'))     return ']';
    if (stream.optional('('))     return '(';
    if (stream.optional(')'))     return ')';
    if (stream.optional('.'))     return '.';
    if (stream.optional('+'))     return '+';
    if (stream.optional('-'))     return '-';
    if (stream.optional('\\'))     return '\\';
    if (stream.optional('{'))     return '{';
    if (stream.optional('}'))     return '}';
    if (stream.optional('?'))     return '?';
    if (stream.optional('*'))     return '*';
    if (stream.optional('~'))     return '~';
    if (stream.optional('|'))     return '|';
    if (stream.optional('^'))     return '^';
    throw new IllegalArgumentException(""String_Node_Str"" + stream.next());
  }
 else {
    if (stream.peek('[') || stream.peek(']') || stream.peek('(')|| stream.peek(')')|| stream.peek('{')|| stream.peek('}')|| stream.peek('.')|| stream.peek('-')|| stream.peek('+')|| stream.peek('?')|| stream.peek('*')) {
      throw new IllegalArgumentException(""String_Node_Str"" + stream.next());
    }
 else {
      return stream.next();
    }
  }
}",0.9799083538949594
124421,"/** 
 * Advances to the next token.
 */
private void advanceToken(){
  if (nextChar < 0) {
    next=null;
    return;
  }
  try {
    int state=0;
    StringBuilder value=new StringBuilder();
    int tLine=line;
    int tLineOffset=lineOffset;
    int _fakeNextChar=nextChar > 127 ? NFA.UNICODE_ESCAPE : nextChar;
    while (dfa.transitions[state].containsKey(_fakeNextChar)) {
      if (nextChar < 0)       value.append((char)nextChar);
 else       value.appendCodePoint(nextChar);
      state=dfa.transitions[state].get(_fakeNextChar);
      line=reader.line;
      lineOffset=reader.lineOffset;
      nextChar=reader.read();
      _fakeNextChar=nextChar > 127 ? NFA.UNICODE_ESCAPE : nextChar;
    }
    if (line < 0)     throw new IllegalStateException(""String_Node_Str"");
    if (dfa.finals[state] != CompiledDFA.NOFINAL) {
      if (state == 0)       throw new TokenException(file,line,lineOffset,(char)nextChar);
      next=process(new Token(value.toString(),dfa.finals[state],new ZenPosition(file,tLine,tLineOffset)));
    }
 else {
      if (nextChar < 0 && value.length() == 0) {
        return;
      }
      throw new TokenException(file,line,lineOffset,(char)nextChar);
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}","/** 
 * Advances to the next token.
 */
private void advanceToken(){
  if (nextChar < 0) {
    next=null;
    return;
  }
  try {
    int state=0;
    StringBuilder value=new StringBuilder();
    int tLine=line;
    int tLineOffset=lineOffset;
    while (dfa.transitions[state].containsKey(nextChar)) {
      value.append((char)nextChar);
      state=dfa.transitions[state].get(nextChar);
      line=reader.line;
      lineOffset=reader.lineOffset;
      nextChar=reader.read();
    }
    if (line < 0)     throw new IllegalStateException(""String_Node_Str"");
    if (dfa.finals[state] != CompiledDFA.NOFINAL) {
      if (state == 0)       throw new TokenException(file,line,lineOffset,(char)nextChar);
      next=process(new Token(value.toString(),dfa.finals[state],new ZenPosition(file,tLine,tLineOffset)));
    }
 else {
      if (nextChar < 0 && value.length() == 0) {
        return;
      }
      throw new TokenException(file,line,lineOffset,(char)nextChar);
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}",0.7553610503282275
124422,"public static Statement read(ZenTokener parser,IEnvironmentGlobal environment,ZenType returnType){
  Token next=parser.peek();
switch (next.getType()) {
case T_AOPEN:
{
      Token t=parser.next();
      ArrayList<Statement> statements=new ArrayList<Statement>();
      while (parser.optional(T_ACLOSE) == null) {
        statements.add(read(parser,environment,returnType));
      }
      return new StatementBlock(t.getPosition(),statements);
    }
case T_RETURN:
{
    parser.next();
    ParsedExpression expression=null;
    if (parser.peek() != null && !parser.isNext(T_SEMICOLON)) {
      expression=ParsedExpression.read(parser,environment);
    }
    parser.required(T_SEMICOLON,""String_Node_Str"");
    return new StatementReturn(next.getPosition(),returnType,expression);
  }
case T_VAR:
case T_VAL:
{
  Token start=parser.next();
  String name=parser.required(T_ID,""String_Node_Str"").getValue();
  ZenType type=null;
  ParsedExpression initializer=null;
  if (parser.optional(T_AS) != null) {
    type=ZenType.read(parser,environment);
  }
  if (parser.optional(T_ASSIGN) != null) {
    initializer=ParsedExpression.read(parser,environment);
  }
  parser.required(T_SEMICOLON,""String_Node_Str"");
  return new StatementVar(start.getPosition(),name,type,initializer,start.getType() == T_VAL);
}
case T_IF:
{
Token t=parser.next();
ParsedExpression expression=ParsedExpression.read(parser,environment);
Statement onIf=read(parser,environment,returnType);
Statement onElse=null;
if (parser.optional(T_ELSE) != null) {
  onElse=read(parser,environment,returnType);
}
return new StatementIf(t.getPosition(),expression,onIf,onElse);
}
case T_FOR:
{
Token t=parser.next();
String name=parser.required(T_ID,""String_Node_Str"").getValue();
List<String> names=new ArrayList<String>();
names.add(name);
while (parser.optional(T_COMMA) != null) {
names.add(parser.required(T_ID,""String_Node_Str"").getValue());
}
parser.required(T_IN,""String_Node_Str"");
ParsedExpression source=ParsedExpression.read(parser,environment);
Statement content=read(parser,environment,null);
return new StatementForeach(t.getPosition(),names.toArray(new String[names.size()]),source,content);
}
case T_VERSION:
{
Token t=parser.next();
parser.required(T_INTVALUE,""String_Node_Str"");
parser.required(T_SEMICOLON,""String_Node_Str"");
return new StatementNull(t.getPosition());
}
}
ZenPosition position=parser.peek().getPosition();
StatementExpression result=new StatementExpression(position,ParsedExpression.read(parser,environment));
parser.required(T_SEMICOLON,""String_Node_Str"");
return result;
}","public static Statement read(ZenTokener parser,IEnvironmentGlobal environment,ZenType returnType){
  Token next=parser.peek();
switch (next.getType()) {
case T_AOPEN:
{
      Token t=parser.next();
      ArrayList<Statement> statements=new ArrayList<Statement>();
      while (parser.optional(T_ACLOSE) == null) {
        statements.add(read(parser,environment,returnType));
      }
      return new StatementBlock(t.getPosition(),statements);
    }
case T_RETURN:
{
    parser.next();
    ParsedExpression expression=ParsedExpression.read(parser,environment);
    parser.required(T_SEMICOLON,""String_Node_Str"");
    return new StatementReturn(next.getPosition(),returnType,expression);
  }
case T_VAR:
case T_VAL:
{
  Token start=parser.next();
  String name=parser.required(T_ID,""String_Node_Str"").getValue();
  ZenType type=null;
  ParsedExpression initializer=null;
  if (parser.optional(T_AS) != null) {
    type=ZenType.read(parser,environment);
  }
  if (parser.optional(T_ASSIGN) != null) {
    initializer=ParsedExpression.read(parser,environment);
  }
  parser.required(T_SEMICOLON,""String_Node_Str"");
  return new StatementVar(start.getPosition(),name,type,initializer,start.getType() == T_VAL);
}
case T_IF:
{
Token t=parser.next();
ParsedExpression expression=ParsedExpression.read(parser,environment);
Statement onIf=read(parser,environment,returnType);
Statement onElse=null;
if (parser.optional(T_ELSE) != null) {
  onElse=read(parser,environment,returnType);
}
return new StatementIf(t.getPosition(),expression,onIf,onElse);
}
case T_FOR:
{
Token t=parser.next();
String name=parser.required(T_ID,""String_Node_Str"").getValue();
List<String> names=new ArrayList<String>();
names.add(name);
while (parser.optional(T_COMMA) != null) {
names.add(parser.required(T_ID,""String_Node_Str"").getValue());
}
parser.required(T_IN,""String_Node_Str"");
ParsedExpression source=ParsedExpression.read(parser,environment);
Statement content=read(parser,environment,null);
return new StatementForeach(t.getPosition(),names.toArray(new String[names.size()]),source,content);
}
case T_VERSION:
{
Token t=parser.next();
parser.required(T_INTVALUE,""String_Node_Str"");
parser.required(T_SEMICOLON,""String_Node_Str"");
return new StatementNull(t.getPosition());
}
}
ZenPosition position=parser.peek().getPosition();
StatementExpression result=new StatementExpression(position,ParsedExpression.read(parser,environment));
parser.required(T_SEMICOLON,""String_Node_Str"");
return result;
}",0.3854848304580607
124423,"@Override public void compile(IEnvironmentMethod environment){
  Expression cList=list.compile(environment,ZenType.ANYARRAY).eval(environment);
  ZenType listType=cList.getType();
  IZenIterator iterator=listType.makeIterator(varnames.length,environment);
  if (iterator == null) {
    environment.error(getPosition(),""String_Node_Str"" + varnames.length + ""String_Node_Str"");
    return;
  }
  MethodOutput methodOutput=environment.getOutput();
  environment.getOutput().position(getPosition());
  IEnvironmentMethod local=new EnvironmentScope(environment);
  int[] localVariables=new int[varnames.length];
  for (int i=0; i < localVariables.length; i++) {
    SymbolLocal localVar=new SymbolLocal(iterator.getType(i),true);
    local.putValue(varnames[i],localVar,getPosition());
    localVariables[i]=local.getLocal(localVar);
  }
  cList.compile(true,environment);
  iterator.compileStart(localVariables);
  Label repeat=new Label();
  Label exit=new Label();
  methodOutput.label(repeat);
  iterator.compilePreIterate(localVariables,exit);
  body.compile(local);
  iterator.compilePostIterate(localVariables,exit,repeat);
  methodOutput.label(exit);
  iterator.compileEnd();
}","@Override public void compile(IEnvironmentMethod environment){
  Expression cList=list.compile(environment,ZenType.ANYARRAY).eval(environment);
  ZenType listType=cList.getType();
  IZenIterator iterator=listType.makeIterator(varnames.length,environment);
  if (iterator == null) {
    environment.error(getPosition(),""String_Node_Str"" + varnames.length + ""String_Node_Str"");
    return;
  }
  MethodOutput methodOutput=environment.getOutput();
  environment.getOutput().position(getPosition());
  IEnvironmentMethod local=new EnvironmentScope(environment);
  int[] localVariables=new int[varnames.length];
  for (int i=0; i < localVariables.length; i++) {
    SymbolLocal localVar=new SymbolLocal(iterator.getType(i),true);
    local.putValue(varnames[i],localVar,getPosition());
    localVariables[i]=local.getLocal(localVar);
  }
  cList.compile(true,environment);
  iterator.compileStart(localVariables);
  Label repeat=new Label();
  Label exit=new Label();
  methodOutput.label(repeat);
  iterator.compilePreIterate(localVariables,exit);
  body.compile(local);
  iterator.compilePostIterate(localVariables,exit,repeat);
  methodOutput.label(exit);
}",0.9892933618843684
124424,"@Override public void signalLockError(){
  MineTweakerAPI.getLogger().logError(""String_Node_Str"");
  if (Minecraft.isGuiEnabled()) {
    Minecraft.getMinecraft().displayGuiScreen(new GuiCannotRemodify(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
}","@Override public void signalLockError(){
  MineTweakerAPI.getLogger().logError(""String_Node_Str"");
  if (Minecraft.isGuiEnabled()) {
  }
}",0.6882793017456359
124425,"@Override public int getBurnTime(ItemStack fuel){
  IItemStack stack=new MCItemStack(fuel);
  String name=fuel.getUnlocalizedName();
  if (quickList.containsKey(name)) {
    for (    SetFuelPattern override : quickList.get(name)) {
      if (override.getPattern().matches(stack)) {
        return override.getValue();
      }
    }
  }
  int max=0;
  for (  IFuelHandler handler : original) {
    max=Math.max(max,handler.getBurnTime(fuel));
  }
  return max;
}","@Override public int getBurnTime(ItemStack fuel){
  if (quickList.containsKey(fuel.getItem())) {
    IItemStack stack=MineTweakerMC.getIItemStack(fuel);
    for (    SetFuelPattern override : quickList.get(fuel.getItem())) {
      if (override.getPattern().matches(stack)) {
        return override.getValue();
      }
    }
  }
  int max=0;
  for (  IFuelHandler handler : original) {
    max=Math.max(max,handler.getBurnTime(fuel));
  }
  return max;
}",0.7344262295081967
124426,"public void removeFuelPattern(SetFuelPattern pattern){
  for (  IItemStack item : pattern.getPattern().getItems()) {
    if (!quickList.containsKey(item.getName())) {
      quickList.put(item.getName(),new ArrayList<SetFuelPattern>());
    }
    quickList.get(item.getName()).add(pattern);
  }
}","public void removeFuelPattern(SetFuelPattern pattern){
  for (  IItemStack item : pattern.getPattern().getItems()) {
    ItemStack itemStack=MineTweakerMC.getItemStack(item);
    Item mcItem=itemStack.getItem();
    if (quickList.containsKey(mcItem)) {
      quickList.get(mcItem).remove(pattern);
    }
  }
}",0.6059602649006622
124427,"public void addFuelPattern(SetFuelPattern pattern){
  List<IItemStack> items=pattern.getPattern().getItems();
  if (items == null) {
    MineTweakerAPI.logError(""String_Node_Str"");
    return;
  }
  for (  IItemStack item : pattern.getPattern().getItems()) {
    if (!quickList.containsKey(item.getName())) {
      quickList.put(item.getName(),new ArrayList<SetFuelPattern>());
    }
    quickList.get(item.getName()).add(pattern);
  }
}","public void addFuelPattern(SetFuelPattern pattern){
  List<IItemStack> items=pattern.getPattern().getItems();
  if (items == null) {
    MineTweakerAPI.logError(""String_Node_Str"");
    return;
  }
  for (  IItemStack item : pattern.getPattern().getItems()) {
    ItemStack itemStack=MineTweakerMC.getItemStack(item);
    Item mcItem=itemStack.getItem();
    if (!quickList.containsKey(mcItem)) {
      quickList.put(mcItem,new ArrayList<SetFuelPattern>());
    }
    quickList.get(mcItem).add(pattern);
  }
}",0.8359788359788359
124428,"@Override public int getBurnTime(ItemStack fuel){
  IItemStack stack=getIItemStack(fuel);
  String name=fuel.getUnlocalizedName();
  if (quickList.containsKey(name)) {
    for (    SetFuelPattern override : quickList.get(name)) {
      if (override.getPattern().matches(stack)) {
        return override.getValue();
      }
    }
  }
  int max=0;
  for (  IFuelHandler handler : original) {
    max=Math.max(max,handler.getBurnTime(fuel));
  }
  return max;
}","@Override public int getBurnTime(ItemStack fuel){
  if (quickList.containsKey(fuel.getItem())) {
    IItemStack stack=MineTweakerMC.getIItemStack(fuel);
    for (    SetFuelPattern override : quickList.get(fuel.getItem())) {
      if (override.getPattern().matches(stack)) {
        return override.getValue();
      }
    }
  }
  int max=0;
  for (  IFuelHandler handler : original) {
    max=Math.max(max,handler.getBurnTime(fuel));
  }
  return max;
}",0.7382256297918949
124429,"public void removeFuelPattern(SetFuelPattern pattern){
  for (  IItemStack item : pattern.getPattern().getItems()) {
    if (!quickList.containsKey(item.getName())) {
      quickList.put(item.getName(),new ArrayList<SetFuelPattern>());
    }
    quickList.get(item.getName()).add(pattern);
  }
}","public void removeFuelPattern(SetFuelPattern pattern){
  for (  IItemStack item : pattern.getPattern().getItems()) {
    ItemStack itemStack=MineTweakerMC.getItemStack(item);
    Item mcItem=itemStack.getItem();
    if (quickList.containsKey(mcItem)) {
      quickList.get(mcItem).remove(pattern);
    }
  }
}",0.6059602649006622
124430,"public void addFuelPattern(SetFuelPattern pattern){
  List<IItemStack> items=pattern.getPattern().getItems();
  if (items == null) {
    MineTweakerAPI.logError(""String_Node_Str"");
    return;
  }
  for (  IItemStack item : pattern.getPattern().getItems()) {
    if (!quickList.containsKey(item.getName())) {
      quickList.put(item.getName(),new ArrayList<SetFuelPattern>());
    }
    quickList.get(item.getName()).add(pattern);
  }
}","public void addFuelPattern(SetFuelPattern pattern){
  List<IItemStack> items=pattern.getPattern().getItems();
  if (items == null) {
    MineTweakerAPI.logError(""String_Node_Str"");
    return;
  }
  for (  IItemStack item : pattern.getPattern().getItems()) {
    ItemStack itemStack=MineTweakerMC.getItemStack(item);
    Item mcItem=itemStack.getItem();
    if (!quickList.containsKey(mcItem)) {
      quickList.put(mcItem,new ArrayList<SetFuelPattern>());
    }
    quickList.get(mcItem).add(pattern);
  }
}",0.8359788359788359
124431,"private CtClass generateCtClass(String className,Class<?> interface1){
  try {
    ClassPool pool=ClassPool.getDefault();
    CtClass cc=pool.makeClass(className);
    CtClass resolveCtClass=resolveCtClass(interface1);
    cc.addInterface(resolveCtClass);
    Class<?> scriptHelperClass=ScriptHelper.class;
    pool.insertClassPath(new ClassClassPath(Object.class));
    pool.insertClassPath(new ClassClassPath(scriptHelperClass));
    StringBuilder constructorBody=new StringBuilder();
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    CtClass objectCtClass=resolveCtClass(Object.class);
    addConstructors(cc,constructorBody,objectCtClass);
    Set<CtMethod> methods=findAllMethods(resolveCtClass,new HashSet<CtMethod>());
    for (    CtMethod method : methods) {
      DelegateCode annotation=(DelegateCode)method.getAnnotation(DelegateCode.class);
      if (annotation != null && annotation.ignore())       continue;
      if (!method.getDeclaringClass().equals(objectCtClass))       cc.addMethod(createDelegateMethod(interface1,cc,scriptHelperClass,method,annotation));
    }
    return cc;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private CtClass generateCtClass(String className,Class<?> interface1){
  try {
    ClassPool pool=ClassPool.getDefault();
    CtClass cc=pool.makeClass(className);
    cc.addInterface(resolveCtClass(Keep.class));
    CtClass resolveCtClass=resolveCtClass(interface1);
    cc.addInterface(resolveCtClass);
    Class<?> scriptHelperClass=ScriptHelper.class;
    pool.insertClassPath(new ClassClassPath(Object.class));
    pool.insertClassPath(new ClassClassPath(scriptHelperClass));
    StringBuilder constructorBody=new StringBuilder();
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    CtClass objectCtClass=resolveCtClass(Object.class);
    addConstructors(cc,constructorBody,objectCtClass);
    Set<CtMethod> methods=findAllMethods(resolveCtClass,new HashSet<CtMethod>());
    for (    CtMethod method : methods) {
      DelegateCode annotation=(DelegateCode)method.getAnnotation(DelegateCode.class);
      if (annotation != null && annotation.ignore())       continue;
      if (!method.getDeclaringClass().equals(objectCtClass))       cc.addMethod(createDelegateMethod(interface1,cc,scriptHelperClass,method,annotation));
    }
    return cc;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9811465948441708
124432,"/** 
 * Returns the enum constant of the specified enum type with the specified name. Note: This method (signature only) is required by the JDK compiler!
 */
public static <T extends Enum<T>>T valueOf(Class<T> enumType,String name){
  ScriptHelper.put(""String_Node_Str"",enumType,null);
  ScriptHelper.put(""String_Node_Str"",name,null);
  return (T)ScriptHelper.eval(""String_Node_Str"",null);
}","/** 
 * Returns the enum constant of the specified enum type with the specified name. Note: This method (signature only) is required by the JDK compiler!
 */
public static <T extends Enum<T>>T valueOf(Class<T> enumType,String name){
  String enumDragomeName=NamingUtils.javaToDragomeNotation(enumType);
  ScriptHelper.put(""String_Node_Str"",enumType,null);
  ScriptHelper.put(""String_Node_Str"",enumDragomeName,null);
  ScriptHelper.put(""String_Node_Str"",name,null);
  return (T)ScriptHelper.eval(""String_Node_Str"",null);
}",0.8333333333333334
124433,"/** 
 * Creates a matcher that will match the given input against this pattern.
 */
public Matcher matcher(CharSequence input){
  return new Matcher(ScriptHelper.eval(""String_Node_Str"",this),input);
}","/** 
 * Creates a matcher that will match the given input against this pattern.
 */
public Matcher matcher(CharSequence input){
  regex=regex.replace(""String_Node_Str"",""String_Node_Str"");
  return new Matcher(ScriptHelper.eval(""String_Node_Str"",this),input);
}",0.7043478260869566
124434,"protected void runChild(FrameworkMethod child,RunNotifier notifier){
  Description spec1=Description.createTestDescription(clazz,child.getName());
  String sourceCode=""String_Node_Str"" + javaToDragomeNotation(clazz) + ""String_Node_Str""+ javaMethodNameToDragomeNotation(child.getName())+ ""String_Node_Str"";
  ScriptResult executeJavaScript=page.executeJavaScript(sourceCode);
  String resultSource=""String_Node_Str"";
  executeJavaScript=page.executeJavaScript(resultSource);
  notifier.fireTestStarted(spec1);
  if (executeJavaScript.getJavaScriptResult().toString().equals(""String_Node_Str""))   notifier.fireTestFailure(new Failure(spec1,new Exception(""String_Node_Str"")));
 else   notifier.fireTestFinished(spec1);
  failed=false;
}","protected void runChild(FrameworkMethod child,RunNotifier notifier){
  Description spec1=Description.createTestDescription(clazz,child.getName());
  String sourceCode=""String_Node_Str"" + NamingUtils.javaToDragomeNotation(clazz) + ""String_Node_Str""+ javaMethodNameToDragomeNotation(child.getName())+ ""String_Node_Str"";
  ScriptResult executeJavaScript=page.executeJavaScript(sourceCode);
  String resultSource=""String_Node_Str"";
  executeJavaScript=page.executeJavaScript(resultSource);
  notifier.fireTestStarted(spec1);
  if (executeJavaScript.getJavaScriptResult().toString().equals(""String_Node_Str""))   notifier.fireTestFailure(new Failure(spec1,new Exception(""String_Node_Str"")));
 else   notifier.fireTestFinished(spec1);
  failed=false;
}",0.9918809201623816
124435,"public static void compileWithMainClass(Classpath classPath,String target){
  ServiceLocator serviceLocator=ServiceLocator.getInstance();
  DragomeConfigurator configurator=serviceLocator.getConfigurator();
  String mainClassName=VisualActivity.class.getName();
  CompilerType defaultCompilerType=configurator.getDefaultCompilerType();
  BytecodeTransformer bytecodeTransformer=configurator.getBytecodeTransformer();
  ClasspathFileFilter classpathFilter=configurator.getClasspathFilter();
  if (classpathFilter == null)   classpathFilter=new DefaultClasspathFileFilter();
  BytecodeToJavascriptCompiler bytecodeToJavascriptCompiler=WebServiceLocator.getInstance().getBytecodeToJavascriptCompiler();
  configurator.sortClassPath(classPath);
  classPath=process(classPath,configurator);
  List<ClasspathEntry> extraClasspath=configurator.getExtraClasspath(classPath);
  classPath.addEntries(extraClasspath);
  BytecodeToJavascriptCompilerConfiguration compilerConfiguration=new BytecodeToJavascriptCompilerConfiguration(classPath,target,mainClassName,defaultCompilerType,bytecodeTransformer,classpathFilter,configurator.isCheckingCast(),configurator.isCaching());
  bytecodeToJavascriptCompiler.configure(compilerConfiguration);
  bytecodeToJavascriptCompiler.compile();
}","public static void compileWithMainClass(Classpath classPath,String target){
  ServiceLocator serviceLocator=ServiceLocator.getInstance();
  DragomeConfigurator configurator=serviceLocator.getConfigurator();
  String mainClassName=VisualActivity.class.getName();
  CompilerType defaultCompilerType=configurator.getDefaultCompilerType();
  BytecodeTransformer bytecodeTransformer=configurator.getBytecodeTransformer();
  ClasspathFileFilter classpathFilter=configurator.getClasspathFilter();
  if (classpathFilter == null)   classpathFilter=new DefaultClasspathFileFilter();
  BytecodeToJavascriptCompiler bytecodeToJavascriptCompiler=WebServiceLocator.getInstance().getBytecodeToJavascriptCompiler();
  List<ClasspathEntry> extraClasspath=configurator.getExtraClasspath(classPath);
  classPath.addEntries(extraClasspath);
  configurator.sortClassPath(classPath);
  classPath=process(classPath,configurator);
  BytecodeToJavascriptCompilerConfiguration compilerConfiguration=new BytecodeToJavascriptCompilerConfiguration(classPath,target,mainClassName,defaultCompilerType,bytecodeTransformer,classpathFilter,configurator.isCheckingCast(),configurator.isCaching());
  bytecodeToJavascriptCompiler.configure(compilerConfiguration);
  bytecodeToJavascriptCompiler.compile();
}",0.932336742722266
124436,"private String normalizeAccess(FieldAccess fr){
  String prefix=""String_Node_Str"";
  if (fr.getFirstChild() instanceof FieldRead) {
    FieldRead fieldRead=(FieldRead)fr.getFirstChild();
  }
  if (fr.getType() == null && ""String_Node_Str"".equals(fr.getName()))   prefix=""String_Node_Str"";
  String name=prefix + fr.getName();
  if (!fr.getName().matches(""String_Node_Str"")) {
    return ""String_Node_Str"" + name + FIELD_TYPE_SEPARATOR+ normalizeExpression(fr.getFieldType())+ ""String_Node_Str"";
  }
  return ""String_Node_Str"" + name + FIELD_TYPE_SEPARATOR+ normalizeExpression(fr.getFieldType());
}","private String normalizeAccess(FieldAccess fr){
  String prefix=""String_Node_Str"";
  if (fr.getFirstChild() instanceof FieldRead) {
    FieldRead fieldRead=(FieldRead)fr.getFirstChild();
  }
  if (fr.getType() == null && ""String_Node_Str"".equals(fr.getName()))   prefix=""String_Node_Str"";
  String name=prefix + fr.getName();
  String name2=name;
  if (!prefix.equals(""String_Node_Str""))   name2+=FIELD_TYPE_SEPARATOR + normalizeExpression(fr.getFieldType());
  if (!fr.getName().matches(""String_Node_Str"")) {
    return ""String_Node_Str"" + name2 + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + name2;
}",0.7555923777961889
124437,"private void bracket(ASTNode node,InfixExpression.Operator op){
  if ((node instanceof InfixExpression && ((InfixExpression)node).getOperator() == op) || node instanceof NumberLiteral || node instanceof NullLiteral|| node instanceof FieldAccess|| node instanceof VariableBinding) {
    node.visit(this);
  }
 else {
    print(""String_Node_Str"");
    node.visit(this);
    print(""String_Node_Str"");
  }
}","private void bracket(ASTNode node,InfixExpression.Operator op){
  boolean b=false;
  if (b || node instanceof NumberLiteral || node instanceof NullLiteral|| node instanceof FieldAccess|| node instanceof VariableBinding) {
    node.visit(this);
  }
 else {
    print(""String_Node_Str"");
    node.visit(this);
    print(""String_Node_Str"");
  }
}",0.8579088471849866
124438,"private void bracket(ASTNode node,InfixExpression.Operator op){
  if ((node instanceof InfixExpression && ((InfixExpression)node).getOperator() == op) || node instanceof NumberLiteral || node instanceof NullLiteral|| node instanceof FieldAccess|| node instanceof VariableBinding) {
    node.visit(this);
  }
 else {
    print(""String_Node_Str"");
    node.visit(this);
    print(""String_Node_Str"");
  }
}","private void bracket(ASTNode node,InfixExpression.Operator op){
  boolean b=false;
  if (b || node instanceof NumberLiteral || node instanceof NullLiteral|| node instanceof FieldAccess|| node instanceof VariableBinding) {
    node.visit(this);
  }
 else {
    print(""String_Node_Str"");
    node.visit(this);
    print(""String_Node_Str"");
  }
}",0.8579088471849866
124439,"public void handleEvent(Event event){
  String type=event.getType();
  if (type.equals(CLICK))   visualComponent.getListener(ClickListener.class).clickPerformed(visualComponent);
 else   if (type.equals(DBLCLICK))   visualComponent.getListener(DoubleClickListener.class).doubleClickPerformed(visualComponent);
 else   if (type.equals(MOUSEOVER))   visualComponent.getListener(MouseOverListener.class).mouseOverPerformed(visualComponent);
 else   if (type.equals(MOUSEOUT))   visualComponent.getListener(MouseOutListener.class).mouseOutPerformed(visualComponent);
 else   if (type.equals(MOUSEDOWN))   visualComponent.getListener(MouseDownListener.class).mouseDownPerformed(null);
 else   if (type.equals(MOUSEUP))   visualComponent.getListener(MouseUpListener.class).mouseUpPerformed(visualComponent);
 else   if (type.equals(BLUR))   visualComponent.getListener(BlurListener.class).blurPerformed(visualComponent);
 else   if (type.equals(INPUT))   visualComponent.getListener(InputListener.class).inputPerformed(visualComponent);
 else   if (event instanceof KeyboardEvent) {
    KeyboardEvent keyboardEvent=(KeyboardEvent)event;
    int keyId=Integer.parseInt(keyboardEvent.getKeyIdentifier());
    if (type.equals(KEYUP))     visualComponent.getListener(KeyUpListener.class).keyupPerformed(visualComponent,keyId);
 else     if (type.equals(KEYDOWN))     visualComponent.getListener(KeyDownListener.class).keydownPerformed(visualComponent,keyId);
 else     if (type.equals(KEYPRESS))     visualComponent.getListener(KeyPressListener.class).keypressPerformed(visualComponent,keyId);
  }
}","public void handleEvent(Event event){
  String type=event.getType();
  if (type.equals(CLICK))   visualComponent.getListener(ClickListener.class).clickPerformed(visualComponent);
 else   if (type.equals(DBLCLICK))   visualComponent.getListener(DoubleClickListener.class).doubleClickPerformed(visualComponent);
 else   if (type.equals(MOUSEOVER))   visualComponent.getListener(MouseOverListener.class).mouseOverPerformed(visualComponent);
 else   if (type.equals(MOUSEOUT))   visualComponent.getListener(MouseOutListener.class).mouseOutPerformed(visualComponent);
 else   if (type.equals(MOUSEDOWN))   visualComponent.getListener(MouseDownListener.class).mouseDownPerformed(null);
 else   if (type.equals(MOUSEUP))   visualComponent.getListener(MouseUpListener.class).mouseUpPerformed(visualComponent);
 else   if (type.equals(BLUR))   visualComponent.getListener(BlurListener.class).blurPerformed(visualComponent);
 else   if (type.equals(INPUT))   visualComponent.getListener(InputListener.class).inputPerformed(visualComponent);
 else   if (event instanceof KeyboardEvent) {
    KeyboardEvent keyboardEvent=(KeyboardEvent)event;
    int keyId=keyboardEvent.getKeyCode();
    if (type.equals(KEYUP))     visualComponent.getListener(KeyUpListener.class).keyupPerformed(visualComponent,keyId);
 else     if (type.equals(KEYDOWN))     visualComponent.getListener(KeyDownListener.class).keydownPerformed(visualComponent,keyId);
 else     if (type.equals(KEYPRESS))     visualComponent.getListener(KeyPressListener.class).keypressPerformed(visualComponent,keyId);
  }
}",0.9803424223208624
124440,"public void handleEvent(Event event){
  String type=event.getType();
  if (type.equals(CLICK))   visualComponent.getListener(ClickListener.class).clickPerformed(visualComponent);
 else   if (type.equals(DBLCLICK))   visualComponent.getListener(DoubleClickListener.class).doubleClickPerformed(visualComponent);
 else   if (type.equals(MOUSEOVER))   visualComponent.getListener(MouseOverListener.class).mouseOverPerformed(visualComponent);
 else   if (type.equals(MOUSEOUT))   visualComponent.getListener(MouseOutListener.class).mouseOutPerformed(visualComponent);
 else   if (type.equals(MOUSEDOWN))   visualComponent.getListener(MouseDownListener.class).mouseDownPerformed(null);
 else   if (type.equals(MOUSEUP))   visualComponent.getListener(MouseUpListener.class).mouseUpPerformed(visualComponent);
 else   if (type.equals(BLUR))   visualComponent.getListener(BlurListener.class).blurPerformed(visualComponent);
 else   if (type.equals(INPUT))   visualComponent.getListener(InputListener.class).inputPerformed(visualComponent);
 else   if (event instanceof KeyboardEvent) {
    KeyboardEvent keyboardEvent=(KeyboardEvent)event;
    int keyId=Integer.parseInt(keyboardEvent.getKeyIdentifier());
    if (type.equals(KEYUP))     visualComponent.getListener(KeyUpListener.class).keyupPerformed(visualComponent,keyId);
 else     if (type.equals(KEYDOWN))     visualComponent.getListener(KeyDownListener.class).keydownPerformed(visualComponent,keyId);
 else     if (type.equals(KEYPRESS))     visualComponent.getListener(KeyPressListener.class).keypressPerformed(visualComponent,keyId);
  }
}","public void handleEvent(Event event){
  String type=event.getType();
  if (type.equals(CLICK))   visualComponent.getListener(ClickListener.class).clickPerformed(visualComponent);
 else   if (type.equals(DBLCLICK))   visualComponent.getListener(DoubleClickListener.class).doubleClickPerformed(visualComponent);
 else   if (type.equals(MOUSEOVER))   visualComponent.getListener(MouseOverListener.class).mouseOverPerformed(visualComponent);
 else   if (type.equals(MOUSEOUT))   visualComponent.getListener(MouseOutListener.class).mouseOutPerformed(visualComponent);
 else   if (type.equals(MOUSEDOWN))   visualComponent.getListener(MouseDownListener.class).mouseDownPerformed(null);
 else   if (type.equals(MOUSEUP))   visualComponent.getListener(MouseUpListener.class).mouseUpPerformed(visualComponent);
 else   if (type.equals(BLUR))   visualComponent.getListener(BlurListener.class).blurPerformed(visualComponent);
 else   if (type.equals(INPUT))   visualComponent.getListener(InputListener.class).inputPerformed(visualComponent);
 else   if (event instanceof KeyboardEvent) {
    KeyboardEvent keyboardEvent=(KeyboardEvent)event;
    int keyId=keyboardEvent.getKeyCode();
    if (type.equals(KEYUP))     visualComponent.getListener(KeyUpListener.class).keyupPerformed(visualComponent,keyId);
 else     if (type.equals(KEYDOWN))     visualComponent.getListener(KeyDownListener.class).keydownPerformed(visualComponent,keyId);
 else     if (type.equals(KEYPRESS))     visualComponent.getListener(KeyPressListener.class).keypressPerformed(visualComponent,keyId);
  }
}",0.9803424223208624
124441,"public String getSubTypeExtractorFor(Class<?> interface1,String methodName){
  if (interface1.equals(HTMLCanvasElement.class) && methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return null;
}","public String getSubTypeExtractorFor(Class<?> interface1,String methodName){
  if (HTMLCanvasElement.class.isAssignableFrom(interface1) && methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return null;
}",0.9311377245508982
124442,"public Class<? extends SubTypeFactory> getSubTypeFactoryClassFor(Class<?> interface1,String methodName){
  if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return NodeSubTypeFactory.class;
 else   if (interface1.equals(HTMLCanvasElement.class) && methodName.equals(""String_Node_Str""))   return ContextSubTypeFactory.class;
  return null;
}","public Class<? extends SubTypeFactory> getSubTypeFactoryClassFor(Class<?> interface1,String methodName){
  if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return NodeSubTypeFactory.class;
 else   if (HTMLCanvasElement.class.isAssignableFrom(interface1) && methodName.equals(""String_Node_Str""))   return ContextSubTypeFactory.class;
  return null;
}",0.9393139841688656
124443,"@SuppressWarnings(""String_Node_Str"") public static <T>T createFrom(Object instance,Class<T> type){
  try {
    ScriptHelper.put(""String_Node_Str"",instance,null);
    if (type.equals(Float.class))     return (T)new Float(ScriptHelper.evalFloat(""String_Node_Str"",null));
 else     if (type.equals(Integer.class))     return (T)new Integer(ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(Double.class))     return (T)new Double(ScriptHelper.evalDouble(""String_Node_Str"",null));
 else     if (type.equals(Long.class))     return (T)new Long(ScriptHelper.evalLong(""String_Node_Str"",null));
 else     if (type.equals(Boolean.class))     return (T)new Boolean(ScriptHelper.evalBoolean(""String_Node_Str"",null));
 else     if (type.equals(Short.class))     return (T)new Short((short)ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(String.class))     return (T)ScriptHelper.eval(""String_Node_Str"",null);
 else {
      String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
      Class<?> class2=Class.forName(delegateClassName);
      Object newInstance=class2.newInstance();
      ScriptHelper.put(""String_Node_Str"",newInstance,null);
      ScriptHelper.eval(""String_Node_Str"",null);
      return (T)newInstance;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public static <T>T createFrom(Object instance,Class<T> type){
  try {
    if (instance == null)     return null;
    ScriptHelper.put(""String_Node_Str"",instance,null);
    if (type.equals(Float.class))     return (T)new Float(ScriptHelper.evalFloat(""String_Node_Str"",null));
 else     if (type.equals(Integer.class))     return (T)new Integer(ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(Double.class))     return (T)new Double(ScriptHelper.evalDouble(""String_Node_Str"",null));
 else     if (type.equals(Long.class))     return (T)new Long(ScriptHelper.evalLong(""String_Node_Str"",null));
 else     if (type.equals(Boolean.class))     return (T)new Boolean(ScriptHelper.evalBoolean(""String_Node_Str"",null));
 else     if (type.equals(Short.class))     return (T)new Short((short)ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(String.class))     return (T)ScriptHelper.eval(""String_Node_Str"",null);
 else {
      String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
      Class<?> class2=Class.forName(delegateClassName);
      Object newInstance=class2.newInstance();
      ScriptHelper.put(""String_Node_Str"",newInstance,null);
      ScriptHelper.eval(""String_Node_Str"",null);
      return (T)newInstance;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9844484629294756
124444,"public static <T>T createFromNode(Object instance,Class<T> type){
  try {
    String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
    Class<?> class2=Class.forName(delegateClassName);
    Object newInstance=class2.newInstance();
    ScriptHelper.put(""String_Node_Str"",newInstance,null);
    ScriptHelper.put(""String_Node_Str"",instance,null);
    ScriptHelper.eval(""String_Node_Str"",null);
    return (T)newInstance;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public static <T>T createFromNode(Object instance,Class<T> type){
  try {
    if (instance == null)     return null;
    String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
    Class<?> class2=Class.forName(delegateClassName);
    Object newInstance=class2.newInstance();
    ScriptHelper.put(""String_Node_Str"",newInstance,null);
    ScriptHelper.put(""String_Node_Str"",instance,null);
    ScriptHelper.eval(""String_Node_Str"",null);
    return (T)newInstance;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9602220166512488
124445,"public String getSubTypeExtractorFor(Class<?> interface1,String methodName){
  if (interface1.equals(HTMLCanvasElement.class) && methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return null;
}","public String getSubTypeExtractorFor(Class<?> interface1,String methodName){
  if (HTMLCanvasElement.class.isAssignableFrom(interface1) && methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
 else   if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return null;
}",0.9311377245508982
124446,"public Class<? extends SubTypeFactory> getSubTypeFactoryClassFor(Class<?> interface1,String methodName){
  if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return NodeSubTypeFactory.class;
 else   if (interface1.equals(HTMLCanvasElement.class) && methodName.equals(""String_Node_Str""))   return ContextSubTypeFactory.class;
  return null;
}","public Class<? extends SubTypeFactory> getSubTypeFactoryClassFor(Class<?> interface1,String methodName){
  if (methodName.equals(""String_Node_Str"") || methodName.equals(""String_Node_Str""))   return NodeSubTypeFactory.class;
 else   if (HTMLCanvasElement.class.isAssignableFrom(interface1) && methodName.equals(""String_Node_Str""))   return ContextSubTypeFactory.class;
  return null;
}",0.9393139841688656
124447,"@SuppressWarnings(""String_Node_Str"") public static <T>T createFrom(Object instance,Class<T> type){
  try {
    ScriptHelper.put(""String_Node_Str"",instance,null);
    if (type.equals(Float.class))     return (T)new Float(ScriptHelper.evalFloat(""String_Node_Str"",null));
 else     if (type.equals(Integer.class))     return (T)new Integer(ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(Double.class))     return (T)new Double(ScriptHelper.evalDouble(""String_Node_Str"",null));
 else     if (type.equals(Long.class))     return (T)new Long(ScriptHelper.evalLong(""String_Node_Str"",null));
 else     if (type.equals(Boolean.class))     return (T)new Boolean(ScriptHelper.evalBoolean(""String_Node_Str"",null));
 else     if (type.equals(Short.class))     return (T)new Short((short)ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(String.class))     return (T)ScriptHelper.eval(""String_Node_Str"",null);
 else {
      String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
      Class<?> class2=Class.forName(delegateClassName);
      Object newInstance=class2.newInstance();
      ScriptHelper.put(""String_Node_Str"",newInstance,null);
      ScriptHelper.eval(""String_Node_Str"",null);
      return (T)newInstance;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public static <T>T createFrom(Object instance,Class<T> type){
  try {
    if (instance == null)     return null;
    ScriptHelper.put(""String_Node_Str"",instance,null);
    if (type.equals(Float.class))     return (T)new Float(ScriptHelper.evalFloat(""String_Node_Str"",null));
 else     if (type.equals(Integer.class))     return (T)new Integer(ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(Double.class))     return (T)new Double(ScriptHelper.evalDouble(""String_Node_Str"",null));
 else     if (type.equals(Long.class))     return (T)new Long(ScriptHelper.evalLong(""String_Node_Str"",null));
 else     if (type.equals(Boolean.class))     return (T)new Boolean(ScriptHelper.evalBoolean(""String_Node_Str"",null));
 else     if (type.equals(Short.class))     return (T)new Short((short)ScriptHelper.evalInt(""String_Node_Str"",null));
 else     if (type.equals(String.class))     return (T)ScriptHelper.eval(""String_Node_Str"",null);
 else {
      String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
      Class<?> class2=Class.forName(delegateClassName);
      Object newInstance=class2.newInstance();
      ScriptHelper.put(""String_Node_Str"",newInstance,null);
      ScriptHelper.eval(""String_Node_Str"",null);
      return (T)newInstance;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9844484629294756
124448,"public static <T>T createFromNode(Object instance,Class<T> type){
  try {
    String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
    Class<?> class2=Class.forName(delegateClassName);
    Object newInstance=class2.newInstance();
    ScriptHelper.put(""String_Node_Str"",newInstance,null);
    ScriptHelper.put(""String_Node_Str"",instance,null);
    ScriptHelper.eval(""String_Node_Str"",null);
    return (T)newInstance;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public static <T>T createFromNode(Object instance,Class<T> type){
  try {
    if (instance == null)     return null;
    String delegateClassName=JsDelegateGenerator.createDelegateClassName(type.getName());
    Class<?> class2=Class.forName(delegateClassName);
    Object newInstance=class2.newInstance();
    ScriptHelper.put(""String_Node_Str"",newInstance,null);
    ScriptHelper.put(""String_Node_Str"",instance,null);
    ScriptHelper.eval(""String_Node_Str"",null);
    return (T)newInstance;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9602220166512488
124449,"@MethodAlias(alias=""String_Node_Str"") public static void executeMainClass() throws Exception {
  try {
    WebServiceLocator.getInstance().setClientSideEnabled(true);
    ServiceLocator.getInstance().setConfigurator(getConfigurator());
    ParametersHandler parametersHandler=ServiceLocator.getInstance().getParametersHandler();
    String className=parametersHandler.getParameter(""String_Node_Str"");
    if (className == null || className.trim().length() == 0) {
      String requestURL=parametersHandler.getRequestURL();
      List<AnnotationEntry> annotationEntries=AnnotationsHelper.getAnnotationsByType(PageAlias.class).getEntries();
      for (      AnnotationEntry annotationEntry : annotationEntries) {
        if (annotationEntry.getAnnotationKey().equals(""String_Node_Str"") && requestURL.contains(annotationEntry.getAnnotationValue()))         className=annotationEntry.getType().getName();
      }
    }
    launch(className);
  }
 catch (  Exception e) {
    alert(""String_Node_Str"" + e.getMessage());
    throw e;
  }
}","@MethodAlias(alias=""String_Node_Str"") public static void executeMainClass() throws Exception {
  try {
    WebServiceLocator.getInstance().setClientSideEnabled(true);
    ServiceLocator.getInstance().setConfigurator(getConfigurator());
    ParametersHandler parametersHandler=ServiceLocator.getInstance().getParametersHandler();
    String className=parametersHandler.getParameter(""String_Node_Str"");
    if (className == null || className.trim().length() == 0) {
      String requestURL=parametersHandler.getRequestURL();
      List<AnnotationEntry> annotationEntries=new ArrayList<>(AnnotationsHelper.getAnnotationsByType(PageAlias.class).getEntries());
      className=findDiscovererPage(className,annotationEntries);
      if (className == null)       for (      AnnotationEntry annotationEntry : annotationEntries) {
        boolean isUnique=annotationEntries.size() == 1;
        boolean urlContainsAlias=requestURL.contains(annotationEntry.getAnnotationValue());
        boolean isAliasKey=annotationEntry.getAnnotationKey().equals(""String_Node_Str"");
        if (isUnique || (isAliasKey && urlContainsAlias))         className=annotationEntry.getType().getName();
      }
    }
    launch(className);
  }
 catch (  Exception e) {
    alert(""String_Node_Str"" + e.getMessage());
    throw e;
  }
}",0.8385438972162741
124450,"@MethodAlias(alias=""String_Node_Str"") public static void executeMainClass() throws Exception {
  try {
    WebServiceLocator.getInstance().setClientSideEnabled(true);
    ServiceLocator.getInstance().setConfigurator(getConfigurator());
    ParametersHandler parametersHandler=ServiceLocator.getInstance().getParametersHandler();
    String className=parametersHandler.getParameter(""String_Node_Str"");
    if (className == null || className.trim().length() == 0) {
      String requestURL=parametersHandler.getRequestURL();
      List<AnnotationEntry> annotationEntries=AnnotationsHelper.getAnnotationsByType(PageAlias.class).getEntries();
      for (      AnnotationEntry annotationEntry : annotationEntries) {
        boolean isUnique=annotationEntries.size() == 2 && !""String_Node_Str"".equals(annotationEntry.getAnnotationValue());
        if (isUnique || (annotationEntry.getAnnotationKey().equals(""String_Node_Str"") && requestURL.contains(annotationEntry.getAnnotationValue())))         className=annotationEntry.getType().getName();
      }
    }
    launch(className);
  }
 catch (  Exception e) {
    alert(""String_Node_Str"" + e.getMessage());
    throw e;
  }
}","@MethodAlias(alias=""String_Node_Str"") public static void executeMainClass() throws Exception {
  try {
    WebServiceLocator.getInstance().setClientSideEnabled(true);
    ServiceLocator.getInstance().setConfigurator(getConfigurator());
    ParametersHandler parametersHandler=ServiceLocator.getInstance().getParametersHandler();
    String className=parametersHandler.getParameter(""String_Node_Str"");
    if (className == null || className.trim().length() == 0) {
      String requestURL=parametersHandler.getRequestURL();
      List<AnnotationEntry> annotationEntries=AnnotationsHelper.getAnnotationsByType(PageAlias.class).getEntries();
      for (      AnnotationEntry annotationEntry : annotationEntries) {
        if (annotationEntry.getAnnotationKey().equals(""String_Node_Str"") && requestURL.contains(annotationEntry.getAnnotationValue()))         className=annotationEntry.getType().getName();
      }
    }
    launch(className);
  }
 catch (  Exception e) {
    alert(""String_Node_Str"" + e.getMessage());
    throw e;
  }
}",0.9377555656519764
124451,"private String configureEvaluation(Class<?> interface1,Class<?> scriptHelperClass,CtMethod method,String body,CtClass returnType) throws NotFoundException {
  if (!typeIsEqual(returnType,Void.class) && !typeIsEqual(returnType,void.class)) {
    if (typeIsEqual(returnType,Boolean.class) || typeIsEqual(returnType,boolean.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Integer.class) || typeIsEqual(returnType,int.class) || typeIsEqual(returnType,Short.class)|| typeIsEqual(returnType,short.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Double.class) || typeIsEqual(returnType,double.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Float.class) || typeIsEqual(returnType,float.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,String.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     body=createBodyForReference(interface1,scriptHelperClass,method,body,returnType);
  }
 else   body=body.replace(""String_Node_Str"",scriptHelperClass.getName() + ""String_Node_Str"");
  return body;
}","private String configureEvaluation(Class<?> interface1,Class<?> scriptHelperClass,CtMethod method,String body,CtClass returnType) throws NotFoundException {
  String scriptHelperClassname=scriptHelperClass.getName();
  String returnTypeName=returnType.getName();
  if (!returnTypeName.equals(Void.class.getName()) && !returnTypeName.equals(void.class.getName())) {
    if (returnTypeName.equals(Boolean.class.getName()) || returnTypeName.equals(boolean.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(Integer.class.getName()) || returnTypeName.equals(int.class.getName()) || returnTypeName.equals(Short.class.getName())|| returnTypeName.equals(short.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(Double.class.getName()) || returnTypeName.equals(double.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(Float.class.getName()) || returnTypeName.equals(float.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(String.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     body=createBodyForReference(interface1,scriptHelperClass,method,body,returnType);
  }
 else   body=body.replace(""String_Node_Str"",scriptHelperClassname + ""String_Node_Str"");
  return body;
}",0.560303893637227
124452,"private void writeClinit(int depth,Writer writer,MemberUnit clinitMethod,List<MemberUnit> staticMethods) throws IOException {
  String superStaticFields=createSuperStaticFieldsReferences(depth,clinitMethod,staticMethods);
  if (clinitMethod != null) {
    String name=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getDeclaringClass().getName());
    String replace=clinitMethod.getData().replace(""String_Node_Str"",name + ""String_Node_Str"");
    replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
    replace=replace.substring(0,replace.length() - 2) + ""String_Node_Str"";
    String memberData=clinitMethod.getData();
    clinitMethod.setData(replace.replace(STATIC_MEMBER,""String_Node_Str""));
    clinitMethod.write(depth,writer);
    clinitMethod.setData(memberData);
    String modifyMethodName=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getSignature());
    project.getClinits().add(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    String replace=""String_Node_Str"" + superStaticFields + ""String_Node_Str"";
    writer.write(replace);
  }
}","private void writeClinit(int depth,Writer writer,MemberUnit clinitMethod,List<MemberUnit> staticMethods) throws IOException {
  String superStaticFields=createSuperStaticFieldsReferences(depth,clinitMethod,staticMethods);
  if (clinitMethod != null) {
    String name=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getDeclaringClass().getName());
    String replace=clinitMethod.getData().replace(""String_Node_Str"",name + ""String_Node_Str"");
    replace=replace.replaceFirst(""String_Node_Str"",""String_Node_Str"" + superStaticFields.replace(""String_Node_Str"",""String_Node_Str""));
    replace=replace.substring(0,replace.length() - 2) + ""String_Node_Str"";
    String memberData=clinitMethod.getData();
    clinitMethod.setData(replace.replace(STATIC_MEMBER,""String_Node_Str""));
    clinitMethod.write(depth,writer);
    clinitMethod.setData(memberData);
    String modifyMethodName=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getSignature());
    project.getClinits().add(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    String replace=""String_Node_Str"" + superStaticFields + ""String_Node_Str"";
    writer.write(replace);
  }
}",0.9690812720848055
124453,"private String configureEvaluation(Class<?> interface1,Class<?> scriptHelperClass,CtMethod method,String body,CtClass returnType) throws NotFoundException {
  if (!typeIsEqual(returnType,Void.class) && !typeIsEqual(returnType,void.class)) {
    if (typeIsEqual(returnType,Boolean.class) || typeIsEqual(returnType,boolean.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Integer.class) || typeIsEqual(returnType,int.class) || typeIsEqual(returnType,Short.class)|| typeIsEqual(returnType,short.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Double.class) || typeIsEqual(returnType,double.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Float.class) || typeIsEqual(returnType,float.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,String.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     body=createBodyForReference(interface1,scriptHelperClass,method,body,returnType);
  }
 else   body=body.replace(""String_Node_Str"",scriptHelperClass.getName() + ""String_Node_Str"");
  return body;
}","private String configureEvaluation(Class<?> interface1,Class<?> scriptHelperClass,CtMethod method,String body,CtClass returnType) throws NotFoundException {
  String scriptHelperClassname=scriptHelperClass.getName();
  String returnTypeName=returnType.getName();
  if (!returnTypeName.equals(Void.class.getName()) && !returnTypeName.equals(void.class.getName())) {
    if (returnTypeName.equals(Boolean.class.getName()) || returnTypeName.equals(boolean.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(Integer.class.getName()) || returnTypeName.equals(int.class.getName()) || returnTypeName.equals(Short.class.getName())|| returnTypeName.equals(short.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(Double.class.getName()) || returnTypeName.equals(double.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(Float.class.getName()) || returnTypeName.equals(float.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     if (returnTypeName.equals(String.class.getName()))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClassname + ""String_Node_Str"");
 else     body=createBodyForReference(interface1,scriptHelperClass,method,body,returnType);
  }
 else   body=body.replace(""String_Node_Str"",scriptHelperClassname + ""String_Node_Str"");
  return body;
}",0.560303893637227
124454,"private Map<String,String> checkSuperAnnotations(final String methodName,JavaClass curClass,final String annoationName,int nDepth,final int maxRecursive) throws ClassNotFoundException {
  nDepth++;
  Map<String,String> curAnnotationsValues=null;
  Method curMethod=null;
  Method[] methods=curClass.getMethods();
  for (int j=0; j < methods.length; j++) {
    if (methods[j].getName().equals(methodName)) {
      curMethod=methods[j];
      break;
    }
  }
  if (curMethod != null) {
    Attribute[] attributes=curMethod.getAttributes();
    curAnnotationsValues=getAnnotationsValues(attributes);
    Set<Entry<String,String>> entrySet=curAnnotationsValues.entrySet();
    Iterator<Entry<String,String>> iterator=entrySet.iterator();
    while (iterator.hasNext()) {
      Entry<String,String> next=iterator.next();
      String key=next.getKey();
      if (key.contains(annoationName))       return curAnnotationsValues;
    }
  }
 else   curAnnotationsValues=new LinkedHashMap<String,String>();
  if (nDepth >= maxRecursive)   return curAnnotationsValues;
  JavaClass[] interfaces=curClass.getInterfaces();
  for (int i=0; i < interfaces.length; i++) {
    JavaClass javaClass=interfaces[i];
    Map<String,String> returnedAnnotation=checkSuperAnnotations(methodName,javaClass,annoationName,nDepth,maxRecursive);
    mergeAnno(curAnnotationsValues,returnedAnnotation,annoationName);
  }
  JavaClass superClass=curClass.getSuperClass();
  if (superClass != null && superClass.getClassName().contains(""String_Node_Str"") == false) {
    Map<String,String> returnedAnnotation=checkSuperAnnotations(methodName,superClass,annoationName,nDepth,maxRecursive);
    mergeAnno(curAnnotationsValues,returnedAnnotation,annoationName);
  }
  return curAnnotationsValues;
}","private Map<String,String> checkSuperAnnotations(final Method method,JavaClass curClass,final String annoationName,int nDepth,final int maxRecursive) throws ClassNotFoundException {
  String methodName=method.getName();
  nDepth++;
  Map<String,String> curAnnotationsValues=null;
  Method curMethod=null;
  Method[] methods=curClass.getMethods();
  for (int j=0; j < methods.length; j++) {
    if (methods[j].getName().equals(methodName) && methods[j].getArgumentTypes().length == method.getArgumentTypes().length) {
      curMethod=methods[j];
      break;
    }
  }
  if (curMethod != null) {
    Attribute[] attributes=curMethod.getAttributes();
    curAnnotationsValues=getAnnotationsValues(attributes);
    Set<Entry<String,String>> entrySet=curAnnotationsValues.entrySet();
    Iterator<Entry<String,String>> iterator=entrySet.iterator();
    while (iterator.hasNext()) {
      Entry<String,String> next=iterator.next();
      String key=next.getKey();
      if (key.contains(annoationName))       return curAnnotationsValues;
    }
  }
 else   curAnnotationsValues=new LinkedHashMap<String,String>();
  if (nDepth >= maxRecursive)   return curAnnotationsValues;
  JavaClass[] interfaces=curClass.getInterfaces();
  for (int i=0; i < interfaces.length; i++) {
    JavaClass javaClass=interfaces[i];
    Map<String,String> returnedAnnotation=checkSuperAnnotations(method,javaClass,annoationName,nDepth,maxRecursive);
    mergeAnno(curAnnotationsValues,returnedAnnotation,annoationName);
  }
  JavaClass superClass=curClass.getSuperClass();
  if (superClass != null && superClass.getClassName().contains(""String_Node_Str"") == false) {
    Map<String,String> returnedAnnotation=checkSuperAnnotations(method,superClass,annoationName,nDepth,maxRecursive);
    mergeAnno(curAnnotationsValues,returnedAnnotation,annoationName);
  }
  return curAnnotationsValues;
}",0.9470198675496688
124455,"public TypeDeclaration parse(){
  DescendingVisitor classWalker=new DescendingVisitor(jc,new EmptyVisitor(){
    public void visitConstantClass(    ConstantClass obj){
      ConstantPool cp=jc.getConstantPool();
      String bytes=obj.getBytes(cp);
      fileUnit.addDependency(bytes.replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
);
  classWalker.visit();
  org.apache.bcel.classfile.Method[] bcelMethods=jc.getMethods();
  ObjectType type=new ObjectType(jc.getClassName());
  Map<String,String> annotationsValues=getAnnotationsValues(jc.getAttributes());
  TypeDeclaration typeDecl=new TypeDeclaration(type,jc.getAccessFlags(),annotationsValues);
  Project.singleton.addTypeAnnotations(typeDecl);
  fileUnit.isInterface=Modifier.isInterface(typeDecl.getAccess());
  fileUnit.isAbstract=Modifier.isAbstract(typeDecl.getAccess());
  fileUnit.setAnnotations(annotationsValues);
  if (!type.getClassName().equals(""String_Node_Str"")) {
    ObjectType superType=new ObjectType(jc.getSuperclassName());
    typeDecl.setSuperType(superType);
    ClassUnit superUnit=Project.getSingleton().getOrCreateClassUnit(superType.getClassName());
    fileUnit.setSuperUnit(superUnit);
    String[] interfaceNames=jc.getInterfaceNames();
    for (int i=0; i < interfaceNames.length; i++) {
      ObjectType interfaceType=new ObjectType(interfaceNames[i]);
      ClassUnit interfaceUnit=Project.getSingleton().getOrCreateClassUnit(interfaceType.getClassName());
      fileUnit.addInterface(interfaceUnit);
    }
  }
  Field[] fields=jc.getFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    VariableDeclaration variableDecl=new VariableDeclaration(VariableDeclaration.NON_LOCAL);
    variableDecl.setName(field.getName());
    variableDecl.setModifiers(field.getModifiers());
    variableDecl.setType(field.getType());
    typeDecl.addField(variableDecl);
  }
  for (int i=0; i < bcelMethods.length; i++) {
    Method method=bcelMethods[i];
    Map<String,String> methodAnnotationsValues=null;
    try {
      methodAnnotationsValues=checkSuperAnnotations(method.getName(),jc,""String_Node_Str"",0,4);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
    MethodBinding binding=MethodBinding.lookup(jc.getClassName(),method.getName(),method.getSignature());
    String genericSignature=method.getGenericSignature();
    if (genericSignature != null && !genericSignature.equals(method.getSignature())) {
      Signature signature=Project.getSingleton().getSignature(binding.toString()).relative();
      String normalizedSignature=DragomeJavaScriptGenerator.normalizeExpression(signature);
      String normalizedClassname=DragomeJavaScriptGenerator.normalizeExpression(type.getClassName());
      Project.getSingleton().addGenericSignature(normalizedClassname + ""String_Node_Str"" + normalizedSignature+ ""String_Node_Str""+ genericSignature);
    }
    if (DragomeJsCompiler.compiler.getSingleEntryPoint() != null) {
      Signature signature=Project.getSingleton().getSignature(binding.toString());
      String singleSignature=DragomeJsCompiler.compiler.getSingleEntryPoint();
      if (!signature.toString().equals(singleSignature))       continue;
    }
    MethodDeclaration methodDecl=new MethodDeclaration(binding,method.getAccessFlags(),method.getCode(),methodAnnotationsValues);
    typeDecl.addMethod(methodDecl);
    parseMethod(typeDecl,methodDecl,method);
  }
  return typeDecl;
}","public TypeDeclaration parse(){
  DescendingVisitor classWalker=new DescendingVisitor(jc,new EmptyVisitor(){
    public void visitConstantClass(    ConstantClass obj){
      ConstantPool cp=jc.getConstantPool();
      String bytes=obj.getBytes(cp);
      fileUnit.addDependency(bytes.replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
);
  classWalker.visit();
  org.apache.bcel.classfile.Method[] bcelMethods=jc.getMethods();
  ObjectType type=new ObjectType(jc.getClassName());
  Map<String,String> annotationsValues=getAnnotationsValues(jc.getAttributes());
  TypeDeclaration typeDecl=new TypeDeclaration(type,jc.getAccessFlags(),annotationsValues);
  Project.singleton.addTypeAnnotations(typeDecl);
  fileUnit.isInterface=Modifier.isInterface(typeDecl.getAccess());
  fileUnit.isAbstract=Modifier.isAbstract(typeDecl.getAccess());
  fileUnit.setAnnotations(annotationsValues);
  if (!type.getClassName().equals(""String_Node_Str"")) {
    ObjectType superType=new ObjectType(jc.getSuperclassName());
    typeDecl.setSuperType(superType);
    ClassUnit superUnit=Project.getSingleton().getOrCreateClassUnit(superType.getClassName());
    fileUnit.setSuperUnit(superUnit);
    String[] interfaceNames=jc.getInterfaceNames();
    for (int i=0; i < interfaceNames.length; i++) {
      ObjectType interfaceType=new ObjectType(interfaceNames[i]);
      ClassUnit interfaceUnit=Project.getSingleton().getOrCreateClassUnit(interfaceType.getClassName());
      fileUnit.addInterface(interfaceUnit);
    }
  }
  Field[] fields=jc.getFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    VariableDeclaration variableDecl=new VariableDeclaration(VariableDeclaration.NON_LOCAL);
    variableDecl.setName(field.getName());
    variableDecl.setModifiers(field.getModifiers());
    variableDecl.setType(field.getType());
    typeDecl.addField(variableDecl);
  }
  for (int i=0; i < bcelMethods.length; i++) {
    Method method=bcelMethods[i];
    Map<String,String> methodAnnotationsValues=null;
    try {
      methodAnnotationsValues=checkSuperAnnotations(method,jc,""String_Node_Str"",0,4);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
    MethodBinding binding=MethodBinding.lookup(jc.getClassName(),method.getName(),method.getSignature());
    String genericSignature=method.getGenericSignature();
    if (genericSignature != null && !genericSignature.equals(method.getSignature())) {
      Signature signature=Project.getSingleton().getSignature(binding.toString()).relative();
      String normalizedSignature=DragomeJavaScriptGenerator.normalizeExpression(signature);
      String normalizedClassname=DragomeJavaScriptGenerator.normalizeExpression(type.getClassName());
      Project.getSingleton().addGenericSignature(normalizedClassname + ""String_Node_Str"" + normalizedSignature+ ""String_Node_Str""+ genericSignature);
    }
    if (DragomeJsCompiler.compiler.getSingleEntryPoint() != null) {
      Signature signature=Project.getSingleton().getSignature(binding.toString());
      String singleSignature=DragomeJsCompiler.compiler.getSingleEntryPoint();
      if (!signature.toString().equals(singleSignature))       continue;
    }
    MethodDeclaration methodDecl=new MethodDeclaration(binding,method.getAccessFlags(),method.getCode(),methodAnnotationsValues);
    typeDecl.addMethod(methodDecl);
    parseMethod(typeDecl,methodDecl,method);
  }
  return typeDecl;
}",0.9985448195576252
124456,"private void compile() throws URISyntaxException {
  final StringBuilder classPath=new StringBuilder();
  ClassLoader c=getClass().getClassLoader();
  URLClassLoader u=(URLClassLoader)c;
  URL[] urls=u.getURLs();
  String classesFolder=""String_Node_Str"";
  for (  URL i : urls) {
    String classPathEntry=new File(i.toURI()).toString();
    boolean isClassesFolder=i.toString().endsWith(""String_Node_Str"") || i.toString().endsWith(""String_Node_Str"");
    boolean addToClasspath=ServiceLocator.getInstance().getConfigurator().filterClassPath(classPathEntry);
    if (isClassesFolder || addToClasspath)     classPath.append(classPathEntry + ""String_Node_Str"");
    if (isClassesFolder)     classesFolder=classPathEntry;
    LOGGER.log(Level.INFO,""String_Node_Str"" + classPathEntry);
  }
  final String path=new File(new java.io.File(classesFolder).getParentFile().getParentFile().toURI()).toString() + File.separator + ""String_Node_Str"";
  LOGGER.log(Level.INFO,""String_Node_Str"" + path);
  final String classesFolder2=classesFolder;
  new Thread(){
    public void run(){
      DirectoryWatcher.main(new String[]{""String_Node_Str"",classesFolder2},classPath.toString(),path);
    }
  }
.start();
}","private void compile() throws URISyntaxException {
  final StringBuilder classPath=new StringBuilder();
  ClassLoader c=getClass().getClassLoader();
  if (c instanceof URLClassLoader) {
    URLClassLoader urlClassLoader=(URLClassLoader)c;
    URL[] urls=urlClassLoader.getURLs();
    String classesFolder=""String_Node_Str"";
    for (    URL i : urls) {
      String classPathEntry=new File(i.toURI()).toString();
      boolean isClassesFolder=i.toString().endsWith(""String_Node_Str"") || i.toString().endsWith(""String_Node_Str"");
      boolean addToClasspath=ServiceLocator.getInstance().getConfigurator().filterClassPath(classPathEntry);
      if (isClassesFolder || addToClasspath)       classPath.append(classPathEntry + ""String_Node_Str"");
      if (isClassesFolder)       classesFolder=classPathEntry;
      LOGGER.log(Level.INFO,""String_Node_Str"" + classPathEntry);
    }
    final String path=new File(new java.io.File(classesFolder).getParentFile().getParentFile().toURI()).toString() + File.separator + ""String_Node_Str"";
    LOGGER.log(Level.INFO,""String_Node_Str"" + path);
    final String classesFolder2=classesFolder;
    new Thread(){
      public void run(){
        DirectoryWatcher.main(new String[]{""String_Node_Str"",classesFolder2},classPath.toString(),path);
      }
    }
.start();
  }
 else   LOGGER.log(Level.SEVERE,""String_Node_Str"");
}",0.928375733855186
124457,"private String normalizeAccess(FieldAccess fr){
  String prefix=""String_Node_Str"";
  if (fr.getFirstChild() instanceof FieldRead) {
    FieldRead fieldRead=(FieldRead)fr.getFirstChild();
  }
  if (""String_Node_Str"".equals(fr.getName())) {
    if (!fr.getTypeBinding().equals(Type.UNKNOWN))     System.out.println(""String_Node_Str"");
    prefix=""String_Node_Str"";
  }
  String name=prefix + fr.getName();
  if (!fr.getName().matches(""String_Node_Str"")) {
    return ""String_Node_Str"" + name + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + name;
}","private String normalizeAccess(FieldAccess fr){
  String prefix=""String_Node_Str"";
  if (fr.getFirstChild() instanceof FieldRead) {
    FieldRead fieldRead=(FieldRead)fr.getFirstChild();
  }
  if (""String_Node_Str"".equals(fr.getName())) {
    prefix=""String_Node_Str"";
  }
  String name=prefix + fr.getName();
  if (!fr.getName().matches(""String_Node_Str"")) {
    return ""String_Node_Str"" + name + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + name;
}",0.9067460317460316
124458,"private void writeClinit(int depth,Writer writer,MemberUnit clinitMethod,List<MemberUnit> staticMethods) throws IOException {
  String superStaticFields=createSuperStaticFieldsReferences(depth,clinitMethod,staticMethods);
  if (clinitMethod != null) {
    String name=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getDeclaringClass().getName());
    String replace=clinitMethod.getData().replace(""String_Node_Str"",name + ""String_Node_Str"");
    replace=replace.replace(""String_Node_Str"",""String_Node_Str"" + superStaticFields);
    replace=replace.substring(0,replace.length() - 2) + ""String_Node_Str"";
    String memberData=clinitMethod.getData();
    clinitMethod.setData(replace.replace(STATIC_MEMBER,""String_Node_Str""));
    clinitMethod.write(depth,writer);
    clinitMethod.setData(memberData);
    String modifyMethodName=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getSignature());
    project.getClinits().add(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    String replace=""String_Node_Str"" + superStaticFields + ""String_Node_Str"";
    writer.write(replace);
  }
}","private void writeClinit(int depth,Writer writer,MemberUnit clinitMethod,List<MemberUnit> staticMethods) throws IOException {
  String superStaticFields=createSuperStaticFieldsReferences(depth,clinitMethod,staticMethods);
  if (clinitMethod != null) {
    String name=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getDeclaringClass().getName());
    String replace=clinitMethod.getData().replace(""String_Node_Str"",name + ""String_Node_Str"");
    replace=replace.replaceFirst(""String_Node_Str"",""String_Node_Str"" + superStaticFields.replace(""String_Node_Str"",""String_Node_Str""));
    replace=replace.substring(0,replace.length() - 2) + ""String_Node_Str"";
    String memberData=clinitMethod.getData();
    clinitMethod.setData(replace.replace(STATIC_MEMBER,""String_Node_Str""));
    clinitMethod.write(depth,writer);
    clinitMethod.setData(memberData);
    String modifyMethodName=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getSignature());
    project.getClinits().add(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    String replace=""String_Node_Str"" + superStaticFields + ""String_Node_Str"";
    writer.write(replace);
  }
}",0.978108581436077
124459,"private String configureEvaluation(Class<?> interface1,Class<?> scriptHelperClass,CtMethod method,String body,CtClass returnType) throws NotFoundException {
  if (!typeIsEqual(returnType,Void.class) && !typeIsEqual(returnType,void.class)) {
    if (typeIsEqual(returnType,Boolean.class) || typeIsEqual(returnType,boolean.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Integer.class) || typeIsEqual(returnType,int.class) || typeIsEqual(returnType,Short.class)|| typeIsEqual(returnType,short.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Double.class) || typeIsEqual(returnType,double.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,String.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     body=createBodyForReference(interface1,scriptHelperClass,method,body,returnType);
  }
 else   body=body.replace(""String_Node_Str"",scriptHelperClass.getName() + ""String_Node_Str"");
  return body;
}","private String configureEvaluation(Class<?> interface1,Class<?> scriptHelperClass,CtMethod method,String body,CtClass returnType) throws NotFoundException {
  if (!typeIsEqual(returnType,Void.class) && !typeIsEqual(returnType,void.class)) {
    if (typeIsEqual(returnType,Boolean.class) || typeIsEqual(returnType,boolean.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Integer.class) || typeIsEqual(returnType,int.class) || typeIsEqual(returnType,Short.class)|| typeIsEqual(returnType,short.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Double.class) || typeIsEqual(returnType,double.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,Float.class) || typeIsEqual(returnType,float.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     if (typeIsEqual(returnType,String.class))     body=body.replace(""String_Node_Str"",""String_Node_Str"" + scriptHelperClass.getName() + ""String_Node_Str"");
 else     body=createBodyForReference(interface1,scriptHelperClass,method,body,returnType);
  }
 else   body=body.replace(""String_Node_Str"",scriptHelperClass.getName() + ""String_Node_Str"");
  return body;
}",0.9278499278499278
124460,"/** 
 * Constructs an empty list with the specified initial capacity.
 */
public ArrayList(int initialCapacity){
  initialCapacity++;
}","/** 
 * Constructs an empty list with the specified initial capacity.
 */
public ArrayList(int initialCapacity){
  this();
  initialCapacity++;
}",0.9642857142857144
124461,"public String toString(){
  ScriptHelper.put(""String_Node_Str"",value,this);
  return (String)ScriptHelper.eval(""String_Node_Str"",this);
}","public static String toString(float f){
  return f + ""String_Node_Str"";
}",0.4857142857142857
124462,"public Class getClass(){
  String className=(String)ScriptHelper.eval(""String_Node_Str"",this);
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}","public Class getClass(){
  String className=(String)ScriptHelper.eval(""String_Node_Str"",this);
  className=className.replace(""String_Node_Str"",""String_Node_Str"");
  try {
    return Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
}",0.8671875
124463,"public static Object executeMethod(String className,String methodName,Object... args){
  try {
    if (classLoader == null) {
      ClassLoader lastContextClassLoader=Thread.currentThread().getContextClassLoader();
      classLoader=lastContextClassLoader;
      DragomeConfigurator configurator=ServiceLocator.getInstance().getConfigurator();
      if (configurator != null) {
        ClassLoader parentClassloader=ClassTransformerDragomeWebSocketHandler.class.getClassLoader();
        classLoader=configurator.getNewClassloaderInstance(parentClassloader,parentClassloader);
      }
    }
    Thread.currentThread().setContextClassLoader(classLoader);
    Class<?> loadClass=classLoader.loadClass(className);
    for (    Method method : loadClass.getMethods()) {
      if (method.getName().equals(methodName))       return method.invoke(loadClass.newInstance(),args);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return null;
}","public static Object executeMethod(String className,String methodName,Object... args){
  try {
    if (classLoader == null) {
      ClassLoader lastContextClassLoader=Thread.currentThread().getContextClassLoader();
      classLoader=lastContextClassLoader;
      DragomeConfigurator configurator=ServiceLocator.getInstance().getConfigurator();
      if (configurator != null) {
        ClassLoader parentClassloader=ClassTransformerDragomeWebSocketHandler.class.getClassLoader();
        classLoader=configurator.getNewClassloaderInstance(parentClassloader,parentClassloader);
      }
    }
    Thread.currentThread().setContextClassLoader(classLoader);
    Class<?> loadClass=classLoader.loadClass(className);
    for (    Method method : loadClass.getMethods()) {
      if (method.getName().equals(methodName))       return method.invoke(loadClass.newInstance(),args);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
  return null;
}",0.9871597329224449
124464,"public void init(InstrumentationDragomeConfigurator... configurators){
  includedPaths.clear();
  loadedFromParent.clear();
  this.configurators=Arrays.asList(configurators);
  for (  InstrumentationDragomeConfigurator configurator : this.configurators)   if (configurator.isEnabled()) {
    includedPaths.addAll(configurator.getIncludedPaths());
    loadedFromParent.addAll(configurator.getLoadedFromParent());
  }
}","public void init(InstrumentationDragomeConfigurator... configurators){
  this.configurators=Arrays.asList(configurators);
  for (  InstrumentationDragomeConfigurator configurator : this.configurators)   if (configurator.isEnabled()) {
    includedPaths.addAll(configurator.getIncludedPaths());
    loadedFromParent.addAll(configurator.getLoadedFromParent());
  }
}",0.9321382842509603
124465,"public BytecodeTransformer getBytecodeTransformer(){
  return null;
}","public BytecodeTransformer getBytecodeTransformer(){
  return new BytecodeTransformer(){
    public byte[] transform(    String className,    byte[] bytecode){
      return bytecode;
    }
    public boolean requiresTransformation(    String className){
      return false;
    }
  }
;
}",0.3651685393258427
124466,"public Object run(){
  int i=classname.lastIndexOf('.');
  if (i > 0) {
    String packageName=classname.substring(0,i);
    Package pkg=getPackage(packageName);
    if (pkg == null) {
      definePackage(packageName,null,null,null,null,null,null,null);
    }
  }
  byte[] newData;
  if (!bytecodeTransformer.requiresTransformation(classname) || loadingClass.contains(classname))   newData=classData;
 else {
    loadingClass.add(classname);
    Thread.currentThread().setContextClassLoader(last);
    newData=bytecodeTransformer.transform(classname,classData);
    Thread.currentThread().setContextClassLoader(DragomeInstrumentationClassLoader.this);
  }
  ProtectionDomain domain=this.getClass().getProtectionDomain();
  return defineClass(classname,newData,0,newData.length,domain);
}","public Object run(){
  int i=classname.lastIndexOf('.');
  if (i > 0) {
    String packageName=classname.substring(0,i);
    Package pkg=getPackage(packageName);
    if (pkg == null) {
      definePackage(packageName,null,null,null,null,null,null,null);
    }
  }
  byte[] newData;
  if (bytecodeTransformer == null || !bytecodeTransformer.requiresTransformation(classname) || loadingClass.contains(classname))   newData=classData;
 else {
    loadingClass.add(classname);
    Thread.currentThread().setContextClassLoader(last);
    newData=bytecodeTransformer.transform(classname,classData);
    Thread.currentThread().setContextClassLoader(DragomeInstrumentationClassLoader.this);
  }
  ProtectionDomain domain=this.getClass().getProtectionDomain();
  return defineClass(classname,newData,0,newData.length,domain);
}",0.9806853582554516
124467,"/** 
 * Define a class given its bytes
 * @param classData the bytecode data for the class
 * @param classname the name of the class
 * @return the Class instance created from the given data
 */
public Class defineClassFromData(final byte[] classData,final String classname){
  return (Class)AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      int i=classname.lastIndexOf('.');
      if (i > 0) {
        String packageName=classname.substring(0,i);
        Package pkg=getPackage(packageName);
        if (pkg == null) {
          definePackage(packageName,null,null,null,null,null,null,null);
        }
      }
      byte[] newData;
      if (!bytecodeTransformer.requiresTransformation(classname) || loadingClass.contains(classname))       newData=classData;
 else {
        loadingClass.add(classname);
        Thread.currentThread().setContextClassLoader(last);
        newData=bytecodeTransformer.transform(classname,classData);
        Thread.currentThread().setContextClassLoader(DragomeInstrumentationClassLoader.this);
      }
      ProtectionDomain domain=this.getClass().getProtectionDomain();
      return defineClass(classname,newData,0,newData.length,domain);
    }
  }
,acc);
}","/** 
 * Define a class given its bytes
 * @param classData the bytecode data for the class
 * @param classname the name of the class
 * @return the Class instance created from the given data
 */
public Class defineClassFromData(final byte[] classData,final String classname){
  return (Class)AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      int i=classname.lastIndexOf('.');
      if (i > 0) {
        String packageName=classname.substring(0,i);
        Package pkg=getPackage(packageName);
        if (pkg == null) {
          definePackage(packageName,null,null,null,null,null,null,null);
        }
      }
      byte[] newData;
      if (bytecodeTransformer == null || !bytecodeTransformer.requiresTransformation(classname) || loadingClass.contains(classname))       newData=classData;
 else {
        loadingClass.add(classname);
        Thread.currentThread().setContextClassLoader(last);
        newData=bytecodeTransformer.transform(classname,classData);
        Thread.currentThread().setContextClassLoader(DragomeInstrumentationClassLoader.this);
      }
      ProtectionDomain domain=this.getClass().getProtectionDomain();
      return defineClass(classname,newData,0,newData.length,domain);
    }
  }
,acc);
}",0.9875151026983487
124468,"public Timer setTimeout(final Runnable runnable,int milliseconds){
  setupTimer(runnable);
  ScriptHelper.put(""String_Node_Str"",milliseconds,this);
  id=ScriptHelper.eval(""String_Node_Str"",this);
  return this;
}","public Timer setTimeout(final Runnable runnable,int milliseconds){
  Runnable runnableForDebugging=Window.wrapRunnableForDebugging(runnable);
  ScriptHelper.put(""String_Node_Str"",runnableForDebugging,this);
  ScriptHelper.put(""String_Node_Str"",milliseconds,this);
  id=ScriptHelper.eval(""String_Node_Str"",this);
  return this;
}",0.437037037037037
124469,"public Timer setInterval(final Runnable runnable,int milliseconds){
  setupTimer(runnable);
  ScriptHelper.put(""String_Node_Str"",milliseconds,this);
  id=ScriptHelper.eval(""String_Node_Str"",this);
  return this;
}","public Timer setInterval(final Runnable runnable,int milliseconds){
  Runnable runnableForDebugging=Window.wrapRunnableForDebugging(runnable);
  ScriptHelper.put(""String_Node_Str"",runnableForDebugging,this);
  ScriptHelper.put(""String_Node_Str"",milliseconds,this);
  id=ScriptHelper.eval(""String_Node_Str"",this);
  return this;
}",0.4391143911439114
124470,"private CtClass generateCtClass(String className,Class<?> interface1){
  try {
    ClassPool pool=ClassPool.getDefault();
    CtClass cc=pool.makeClass(className);
    CtClass resolveCtClass=resolveCtClass(interface1);
    cc.addInterface(resolveCtClass);
    Class<?> scriptHelperClass=ScriptHelper.class;
    StringBuilder constructorBody=new StringBuilder();
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    CtClass objectCtClass=resolveCtClass(Object.class);
    addConstructors(cc,constructorBody,objectCtClass);
    for (    CtMethod method : resolveCtClass.getMethods())     if (!method.getDeclaringClass().equals(objectCtClass))     cc.addMethod(createDelegateMethod(interface1,cc,scriptHelperClass,method));
    return cc;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private CtClass generateCtClass(String className,Class<?> interface1){
  try {
    ClassPool pool=ClassPool.getDefault();
    CtClass cc=pool.makeClass(className);
    CtClass resolveCtClass=resolveCtClass(interface1);
    cc.addInterface(resolveCtClass);
    Class<?> scriptHelperClass=ScriptHelper.class;
    pool.insertClassPath(new ClassClassPath(Object.class));
    pool.insertClassPath(new ClassClassPath(scriptHelperClass));
    StringBuilder constructorBody=new StringBuilder();
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    constructorBody.append(scriptHelperClass.getName() + ""String_Node_Str"");
    CtClass objectCtClass=resolveCtClass(Object.class);
    addConstructors(cc,constructorBody,objectCtClass);
    for (    CtMethod method : resolveCtClass.getMethods())     if (!method.getDeclaringClass().equals(objectCtClass))     cc.addMethod(createDelegateMethod(interface1,cc,scriptHelperClass,method));
    return cc;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.6879177377892031
124471,"/** 
 * Returns an Long object holding the specified value. Calls to this method may be generated by the autoboxing feature.
 */
public static Long valueOf(long value){
  return new Long(value);
}","public static Long valueOf(String aValue){
  return new Long(aValue);
}",0.4719101123595505
124472,"private void compile() throws URISyntaxException, DependencyResolutionRequiredException, MalformedURLException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  final StringBuilder theClassPathForCompiler=new StringBuilder();
  URLClassLoader theCurrentClassLoader=(URLClassLoader)getClass().getClassLoader();
  URL[] theConfiguredURLs=theCurrentClassLoader.getURLs();
  for (  URL theURL : theConfiguredURLs) {
    getLog().info(""String_Node_Str"" + theURL);
    String theClassPathEntry=new File(theURL.toURI()).toString();
    boolean isClassesFolder=theURL.toString().endsWith(""String_Node_Str"") || theURL.toString().endsWith(""String_Node_Str"");
    boolean addToClasspath=ServiceLocator.getInstance().getConfigurator().filterClassPath(theClassPathEntry);
    if (isClassesFolder || addToClasspath) {
      theClassPathForCompiler.append(theClassPathEntry + ""String_Node_Str"");
    }
 else {
      getLog().warn(""String_Node_Str"");
    }
  }
  List<String> theClassPathElements=(List<String>)project.getTestClasspathElements();
  for (  String theSingleElement : theClassPathElements) {
    URL theURL=new File(theSingleElement).toURI().toURL();
    boolean isClassesFolder=theURL.toString().endsWith(""String_Node_Str"") || theURL.toString().endsWith(""String_Node_Str"");
    if (isClassesFolder) {
      getLog().info(""String_Node_Str"" + theSingleElement);
      theClassPathForCompiler.append(theSingleElement + ""String_Node_Str"");
    }
  }
  File theTargetDir=new File(destinationDirectory,""String_Node_Str"");
  if (!theTargetDir.exists() && !theTargetDir.mkdirs()) {
    throw new RuntimeException(""String_Node_Str"" + theTargetDir);
  }
  File theWebAppJS=new File(theTargetDir,""String_Node_Str"");
  if (forceRebuild && theWebAppJS.exists()) {
    if (!theWebAppJS.delete()) {
      throw new RuntimeException(""String_Node_Str"" + theWebAppJS);
    }
  }
  System.setProperty(""String_Node_Str"",theTargetDir.toString());
  getLog().info(""String_Node_Str"" + theClassPathForCompiler.toString());
  DragomeCompilerLauncher.compileWithMainClass(theClassPathForCompiler.toString(),theTargetDir.toString());
  if (removeCache) {
    File theCacheFile=new File(theTargetDir,""String_Node_Str"");
    if (!theCacheFile.delete()) {
      throw new RuntimeException(""String_Node_Str"" + theCacheFile);
    }
  }
}","private void compile() throws URISyntaxException, DependencyResolutionRequiredException, IOException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  final StringBuilder theClassPathForCompiler=new StringBuilder();
  URLClassLoader theCurrentClassLoader=(URLClassLoader)getClass().getClassLoader();
  URL[] theConfiguredURLs=theCurrentClassLoader.getURLs();
  for (  URL theURL : theConfiguredURLs) {
    getLog().info(""String_Node_Str"" + theURL);
    String theClassPathEntry=new File(theURL.toURI()).toString();
    boolean isClassesFolder=theURL.toString().endsWith(""String_Node_Str"") || theURL.toString().endsWith(""String_Node_Str"");
    boolean addToClasspath=ServiceLocator.getInstance().getConfigurator().filterClassPath(theClassPathEntry);
    if (isClassesFolder || addToClasspath) {
      theClassPathForCompiler.append(theClassPathEntry + ""String_Node_Str"");
    }
 else {
      getLog().warn(""String_Node_Str"");
    }
  }
  List<String> theClassPathElements=(List<String>)project.getTestClasspathElements();
  for (  String theSingleElement : theClassPathElements) {
    URL theURL=new File(theSingleElement).toURI().toURL();
    boolean isClassesFolder=theURL.toString().endsWith(""String_Node_Str"") || theURL.toString().endsWith(""String_Node_Str"");
    if (isClassesFolder) {
      getLog().info(""String_Node_Str"" + theSingleElement);
      theClassPathForCompiler.append(theSingleElement + ""String_Node_Str"");
    }
  }
  File theTargetDir=new File(destinationDirectory,""String_Node_Str"");
  if (!theTargetDir.exists() && !theTargetDir.mkdirs()) {
    throw new RuntimeException(""String_Node_Str"" + theTargetDir);
  }
  File theWebAppJS=new File(theTargetDir,""String_Node_Str"");
  if (forceRebuild && theWebAppJS.exists()) {
    if (!theWebAppJS.delete()) {
      throw new RuntimeException(""String_Node_Str"" + theWebAppJS);
    }
  }
  System.setProperty(""String_Node_Str"",theTargetDir.toString());
  getLog().info(""String_Node_Str"" + theClassPathForCompiler.toString());
  DragomeCompilerLauncher.compileWithMainClass(theClassPathForCompiler.toString(),theTargetDir.toString());
  getLog().info(""String_Node_Str"");
  JSMinProcessor theProcessor=new JSMinProcessor();
  theProcessor.process(new FileReader(theWebAppJS),new FileWriter(new File(theTargetDir,""String_Node_Str"")));
  if (removeCache) {
    File theCacheFile=new File(theTargetDir,""String_Node_Str"");
    getLog().info(""String_Node_Str"" + theCacheFile);
    if (!theCacheFile.delete()) {
      throw new RuntimeException(""String_Node_Str"" + theCacheFile);
    }
  }
}",0.9452307692307692
124473,"@Override public void execute() throws MojoExecutionException, MojoFailureException {
  getLog().info(""String_Node_Str"" + destinationDirectory);
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  try {
    compile();
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void execute() throws MojoExecutionException, MojoFailureException {
  getLog().info(""String_Node_Str"" + destinationDirectory);
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResource(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  copyResourceMinifyJS(""String_Node_Str"",""String_Node_Str"");
  try {
    compile();
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.3601491742141715
124474,"public Element getElementBySelector(String selector){
  ScriptHelper.put(""String_Node_Str"",selector,this);
  Object object=ScriptHelper.eval(""String_Node_Str"",this);
  Element result=JsDelegateFactory.createFrom(object,Element.class);
  return result;
}","public Element getElementBySelector(String selector){
  ScriptHelper.put(""String_Node_Str"",selector,this);
  Object object=ScriptHelper.eval(""String_Node_Str"",this);
  Element result=null;
  if (object != null)   result=JsDelegateFactory.createFrom(object,Element.class);
  return result;
}",0.9318600368324124
124475,"private String generateJsCode(int depth,Writer writer) throws IOException {
  Log.getLogger().debug(getIndent(depth) + this);
  if (getData() != null) {
    writer.write(getData());
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + getName());
  }
  Set<MemberUnit> notImplementedMethods=getNotImplementedMethods();
  if (interfaces.size() > 0) {
    String extendOperator=""String_Node_Str"";
    if (isInterface)     extendOperator=""String_Node_Str"";
    writer.write(extendOperator + ""String_Node_Str"");
    int i=0;
    for (    ClassUnit interFace : interfaces) {
      if (i++ > 0)       writer.write(""String_Node_Str"");
      writer.write(DragomeJavaScriptGenerator.normalizeExpression(interFace.getSignature().toString()));
    }
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  MemberUnit clinitMethod=null;
  List<MemberUnit> staticMethods=new ArrayList<MemberUnit>();
  boolean first=true;
  for (  MemberUnit member : getDeclaredMembers()) {
    if (member.getData() != null && member.getData().startsWith(STATIC_MEMBER)) {
      staticMethods.add(member);
    }
 else     if (member.getData() != null && member.getData().contains(""String_Node_Str"")) {
      stringInits.add(member);
    }
 else {
      if (member.getData() != null && member.getData().trim().length() > 0) {
        if (!first)         writer.write(""String_Node_Str"");
        first=false;
        writeMethodAlternative(depth,writer,member);
        if (member instanceof ProcedureUnit) {
          project.currentGeneratedMethods++;
          writer.flush();
        }
      }
    }
    if (isClinit(member))     clinitMethod=member;
  }
  for (  MemberUnit member : notImplementedMethods) {
    if (!first)     writer.write(""String_Node_Str"");
    first=false;
    String methodData=member.getData().replace(STATIC_MEMBER,""String_Node_Str"");
    methodData=methodData.substring(0,methodData.indexOf(""String_Node_Str""));
    writer.write(methodData);
    writer.write(""String_Node_Str"");
    writer.write(member.getDeclaringClass().toString().replace(""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(methodData.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    if (member instanceof ProcedureUnit) {
      project.currentGeneratedMethods++;
      writer.flush();
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (clinitMethod != null) {
    String name=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getDeclaringClass().getName());
    String replace=clinitMethod.getData().replace(""String_Node_Str"",name + ""String_Node_Str"");
    replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
    replace=replace.substring(0,replace.length() - 2) + ""String_Node_Str"";
    String memberData=clinitMethod.getData();
    clinitMethod.setData(replace.replace(STATIC_MEMBER,""String_Node_Str""));
    clinitMethod.write(depth,writer);
    clinitMethod.setData(memberData);
    String modifyMethodName=DragomeJavaScriptGenerator.normalizeExpression(clinitMethod.getSignature());
    project.getClinits().add(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    String replace=""String_Node_Str"";
    writer.write(replace);
  }
  boolean hasStaticMembers=staticMethods.size() > 0;
  if (hasStaticMembers)   writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  first=true;
  for (  MemberUnit member : staticMethods) {
    if (member != clinitMethod) {
      if (!first)       writer.write(""String_Node_Str"");
      first=false;
      String memberData=member.getData();
      member.setData(member.getData().replace(STATIC_MEMBER,""String_Node_Str""));
      writeMethodAlternative(depth,writer,member);
      member.setData(memberData);
      if (member instanceof ProcedureUnit || member instanceof FieldUnit) {
        if (member instanceof ProcedureUnit)         project.currentGeneratedMethods++;
        writer.flush();
      }
    }
  }
  first=addSuperStaticMethods(writer,!hasStaticMembers ^ first);
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  return writer.toString();
}","private String generateJsCode(int depth,Writer writer) throws IOException {
  Log.getLogger().debug(getIndent(depth) + this);
  if (getData() != null) {
    writer.write(getData());
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + getName());
  }
  Set<MemberUnit> notImplementedMethods=getNotImplementedMethods();
  if (interfaces.size() > 0) {
    String extendOperator=""String_Node_Str"";
    if (isInterface)     extendOperator=""String_Node_Str"";
    writer.write(extendOperator + ""String_Node_Str"");
    int i=0;
    for (    ClassUnit interFace : interfaces) {
      if (i++ > 0)       writer.write(""String_Node_Str"");
      writer.write(DragomeJavaScriptGenerator.normalizeExpression(interFace.getSignature().toString()));
    }
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  MemberUnit clinitMethod=null;
  List<MemberUnit> staticMethods=new ArrayList<MemberUnit>();
  boolean first=true;
  for (  MemberUnit member : getDeclaredMembers()) {
    if (member.getData() != null && member.getData().startsWith(STATIC_MEMBER)) {
      staticMethods.add(member);
    }
 else     if (member.getData() != null && member.getData().contains(""String_Node_Str"")) {
      stringInits.add(member);
    }
 else {
      if (member.getData() != null && member.getData().trim().length() > 0) {
        if (!first)         writer.write(""String_Node_Str"");
        first=false;
        writeMethodAlternative(depth,writer,member);
        if (member instanceof ProcedureUnit) {
          project.currentGeneratedMethods++;
          writer.flush();
        }
      }
    }
    if (isClinit(member))     clinitMethod=member;
  }
  for (  MemberUnit member : notImplementedMethods) {
    if (!first)     writer.write(""String_Node_Str"");
    first=false;
    String methodData=member.getData().replace(STATIC_MEMBER,""String_Node_Str"");
    methodData=methodData.substring(0,methodData.indexOf(""String_Node_Str""));
    writer.write(methodData);
    writer.write(""String_Node_Str"");
    writer.write(member.getDeclaringClass().toString().replace(""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    writer.write(methodData.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    writer.write(""String_Node_Str"");
    if (member instanceof ProcedureUnit) {
      project.currentGeneratedMethods++;
      writer.flush();
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writeClinit(depth,writer,clinitMethod,staticMethods);
  boolean hasStaticMembers=staticMethods.size() > 0;
  if (hasStaticMembers)   writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  first=true;
  for (  MemberUnit member : staticMethods) {
    if (member != clinitMethod) {
      if (!first)       writer.write(""String_Node_Str"");
      first=false;
      String memberData=member.getData();
      member.setData(member.getData().replace(STATIC_MEMBER,""String_Node_Str""));
      writeMethodAlternative(depth,writer,member);
      member.setData(memberData);
      if (member instanceof ProcedureUnit || member instanceof FieldUnit) {
        if (member instanceof ProcedureUnit)         project.currentGeneratedMethods++;
        writer.flush();
      }
    }
  }
  first=addSuperStaticMethods(writer,!hasStaticMembers ^ first,staticMethods);
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  return writer.toString();
}",0.7961460446247465
124476,"private boolean addSuperStaticMethods(Writer writer,boolean first) throws IOException {
  if (superUnit != null)   for (  MemberUnit member : superUnit.getDeclaredMembers()) {
    if (member.getData() != null && member.getData().startsWith(STATIC_MEMBER) && member instanceof MethodUnit && !isClinit(member)) {
      String methodData=member.getData().replace(STATIC_MEMBER,""String_Node_Str"");
      String substring=methodData.substring(0,methodData.indexOf(""String_Node_Str""));
      String methodName=substring.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      substring+=""String_Node_Str"" + methodName + ""String_Node_Str"";
      if (!first)       writer.write(""String_Node_Str"");
      writer.write(substring);
      first=false;
    }
  }
  return first;
}","private boolean addSuperStaticMethods(Writer writer,boolean first,List<MemberUnit> staticMethods) throws IOException {
  if (superUnit != null)   for (  MemberUnit member : superUnit.getDeclaredMembers()) {
    if (member.getData() != null && member.getData().startsWith(STATIC_MEMBER)) {
      if (member instanceof MethodUnit) {
        if (!isClinit(member))         if (!containsSignature(member.getSignature(),staticMethods)) {
          addMemberUnit(member);
          String methodData=member.getData().replace(STATIC_MEMBER,""String_Node_Str"");
          String substring=methodData.substring(0,methodData.indexOf(""String_Node_Str""));
          String methodName=substring.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          substring+=""String_Node_Str"" + methodName + ""String_Node_Str"";
          if (!first)           writer.write(""String_Node_Str"");
          writer.write(substring);
          first=false;
        }
      }
    }
  }
  return first;
}",0.8786381109280615
124477,"public static void addClassName(Element element,String className){
  String classes=element.getAttribute(""String_Node_Str"");
  if (!classes.contains(className)) {
    classes+=""String_Node_Str"" + className;
    element.setAttribute(""String_Node_Str"",classes.trim());
  }
}","public static void addClassName(Element element,String className){
  String classes=element.getAttribute(""String_Node_Str"");
  if (classes == null)   classes=""String_Node_Str"";
  if (!classes.contains(className)) {
    classes+=""String_Node_Str"" + className;
    element.setAttribute(""String_Node_Str"",classes.trim());
  }
}",0.912751677852349
124478,"public void styleChanged(Style style){
  String entityId=DragomeEntityManager.getEntityId(style.getVisualComponent());
  Element element=ServiceLocator.getInstance().getDomHandler().getElementBySelector(""String_Node_Str"" + AbstractHTMLComponentRenderer.COMPONENT_ID_ATTRIBUTE + ""String_Node_Str""+ entityId+ ""String_Node_Str"");
  if (element != null) {
    if (!style.isSynchronized()) {
      String result=(element.getAttribute(""String_Node_Str"") + (style.getName() != null ? ""String_Node_Str"" + style.getName() : ""String_Node_Str"")).trim();
      style.setName(deDup(result));
      style.setSynchronized(true);
    }
 else {
      if (style.getName().trim().length() > 0)       element.setAttribute(""String_Node_Str"",style.getName());
 else       element.removeAttribute(""String_Node_Str"");
      if (style.isEnabled())       element.removeAttribute(""String_Node_Str"");
 else       element.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
}","public void styleChanged(Style style){
  String entityId=DragomeEntityManager.getEntityId(style.getVisualComponent());
  Element element=ServiceLocator.getInstance().getDomHandler().getElementBySelector(""String_Node_Str"" + AbstractHTMLComponentRenderer.COMPONENT_ID_ATTRIBUTE + ""String_Node_Str""+ entityId+ ""String_Node_Str"");
  if (element != null) {
    String name=style.getName();
    if (!style.isSynchronized()) {
      String result=(element.getAttribute(""String_Node_Str"") + (name != null ? ""String_Node_Str"" + name : ""String_Node_Str"")).trim();
      style.setName(deDup(result));
      style.setSynchronized(true);
    }
 else {
      if (name != null && name.trim().length() > 0)       element.setAttribute(""String_Node_Str"",name);
 else       element.removeAttribute(""String_Node_Str"");
      if (style.isEnabled())       element.removeAttribute(""String_Node_Str"");
 else       element.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
}",0.9347258485639688
124479,"public Object invokeWithArguments(Object... arguments) throws Throwable {
  ScriptHelper.put(""String_Node_Str"",lookup.getSpecialCaller(),this);
  ScriptHelper.put(""String_Node_Str"",arguments,this);
  ScriptHelper.put(""String_Node_Str"",x,this);
  ScriptHelper.put(""String_Node_Str"",lookup.getMethod(),this);
  Object o=ScriptHelper.eval(""String_Node_Str"",this);
  return o;
}","public Object invokeWithArguments(Object... args) throws Throwable {
  ScriptHelper.put(""String_Node_Str"",lookup.getSpecialCaller(),this);
  ScriptHelper.put(""String_Node_Str"",args,this);
  ScriptHelper.put(""String_Node_Str"",x,this);
  ScriptHelper.put(""String_Node_Str"",lookup.getMethod(),this);
  Object o=ScriptHelper.eval(""String_Node_Str"",this);
  return o;
}",0.986449864498645
124480,"public void run(){
  Object object=DragomeEntityManager.get(id);
  if (object instanceof EventListener)   processElementEvent(eventType,arguments,(EventListener)object,id);
}","public void run(){
  Object object=DragomeEntityManager.get(id);
  if (object instanceof EventListener)   processElementEvent(eventType,args,(EventListener)object,id);
}",0.9854227405247812
124481,"public void eventPerformedById(final String eventType,final String id,final Object arguments){
  runOnlySynchronized(new Runnable(){
    public void run(){
      Object object=DragomeEntityManager.get(id);
      if (object instanceof EventListener)       processElementEvent(eventType,arguments,(EventListener)object,id);
    }
    private void processElementEvent(    final String eventType,    final Object arguments,    EventListener browserEventListener,    String id){
      browserEventListener.handleEvent(eventType.startsWith(""String_Node_Str"") ? new KeyboardEventImpl(eventType,(int)arguments) : new EventImpl(eventType));
    }
  }
);
}","public void eventPerformedById(final String eventType,final String id,final Object args){
  runOnlySynchronized(new Runnable(){
    public void run(){
      Object object=DragomeEntityManager.get(id);
      if (object instanceof EventListener)       processElementEvent(eventType,args,(EventListener)object,id);
    }
    private void processElementEvent(    final String eventType,    final Object args,    EventListener browserEventListener,    String id){
      browserEventListener.handleEvent(eventType.startsWith(""String_Node_Str"") ? new KeyboardEventImpl(eventType,(int)args) : new EventImpl(eventType));
    }
  }
);
}",0.8113207547169812
124482,"private void processElementEvent(final String eventType,final Object arguments,EventListener browserEventListener,String id){
  browserEventListener.handleEvent(eventType.startsWith(""String_Node_Str"") ? new KeyboardEventImpl(eventType,(int)arguments) : new EventImpl(eventType));
}","private void processElementEvent(final String eventType,final Object args,EventListener browserEventListener,String id){
  browserEventListener.handleEvent(eventType.startsWith(""String_Node_Str"") ? new KeyboardEventImpl(eventType,(int)args) : new EventImpl(eventType));
}",0.9818840579710144
124483,"public Object invokeWithArguments(Object... arguments) throws Throwable {
  ScriptHelper.put(""String_Node_Str"",lookup.getSpecialCaller(),this);
  ScriptHelper.put(""String_Node_Str"",arguments,this);
  ScriptHelper.put(""String_Node_Str"",x,this);
  ScriptHelper.put(""String_Node_Str"",lookup.getMethod(),this);
  Object o=ScriptHelper.eval(""String_Node_Str"",this);
  return o;
}","public Object invokeWithArguments(Object... args) throws Throwable {
  ScriptHelper.put(""String_Node_Str"",lookup.getSpecialCaller(),this);
  ScriptHelper.put(""String_Node_Str"",args,this);
  ScriptHelper.put(""String_Node_Str"",x,this);
  ScriptHelper.put(""String_Node_Str"",lookup.getMethod(),this);
  Object o=ScriptHelper.eval(""String_Node_Str"",this);
  return o;
}",0.986449864498645
124484,"public Method getMethod(String name,Class... parameterTypes) throws NoSuchMethodException, SecurityException {
  Method foundMethod=foundMethods.get(name);
  if (foundMethod == null) {
    Method[] declaredMethods=getMethods();
    for (    Method method : declaredMethods) {
      if (method.getName().equals(name))       foundMethods.put(name,foundMethod=method);
    }
  }
  if (foundMethod == null)   throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  return foundMethod;
}","public Method getMethod(String name,Class... parameterTypes) throws NoSuchMethodException, SecurityException {
  Method foundMethod=foundMethods.get(name);
  if (foundMethod == null) {
    Method[] declaredMethods=getMethods();
    for (    Method method : declaredMethods) {
      if (method.getName().equals(name) && (foundMethod == null || foundMethod.getReturnType().isAssignableFrom(method.getReturnType())))       foundMethods.put(name,foundMethod=method);
    }
  }
  if (foundMethod == null)   throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  return foundMethod;
}",0.9173060528559248
124485,"/** 
 * Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter.
 */
public boolean isAssignableFrom(Class<?> otherClass){
  Class<?>[] interfaces=getInterfaces();
  if (otherClass == null)   throw new NullPointerException();
  ScriptHelper.put(""String_Node_Str"",otherClass,this);
  return ScriptHelper.evalBoolean(""String_Node_Str"",this);
}","/** 
 * Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter.
 */
public boolean isAssignableFrom(Class<?> otherClass){
  Class<?>[] interfaces=getInterfaces();
  if (otherClass == null)   throw new NullPointerException();
  if (otherClass.isInterface() && Object.class.equals(this))   return true;
  ScriptHelper.put(""String_Node_Str"",otherClass,this);
  return ScriptHelper.evalBoolean(""String_Node_Str"",this);
}",0.9276190476190476
124486,"@MethodAlias(alias=""String_Node_Str"") public static void addTypeAnnotation(String className,String annotationClassName,String annotationKey,String annotationValue){
  try {
    Class<?> type=ServiceLocator.getInstance().getReflectionService().forName(className);
    Class<? extends Annotation> annotationClass=(Class<? extends Annotation>)ServiceLocator.getInstance().getReflectionService().forName(annotationClassName);
    AnnotationContainer map=getAnnotationsByType(annotationClass);
    map.add(type,annotationKey,annotationValue);
    annotations.add(className + ""String_Node_Str"" + annotationClassName+ ""String_Node_Str""+ annotationKey+ ""String_Node_Str""+ annotationValue);
  }
 catch (  Exception e) {
    Logger.getLogger(AnnotationsHelper.class.getName()).log(Level.FINEST,""String_Node_Str"",e);
  }
}","@MethodAlias(alias=""String_Node_Str"") public static void addTypeAnnotation(String className,String annotationClassName,String annotationKey,String annotationValue){
  try {
    ServiceLocator.getInstance().setClientSideEnabled(true);
    Class<?> type=ServiceLocator.getInstance().getReflectionService().forName(className);
    Class<? extends Annotation> annotationClass=(Class<? extends Annotation>)ServiceLocator.getInstance().getReflectionService().forName(annotationClassName);
    AnnotationContainer map=getAnnotationsByType(annotationClass);
    map.add(type,annotationKey,annotationValue);
    annotations.add(className + ""String_Node_Str"" + annotationClassName+ ""String_Node_Str""+ annotationKey+ ""String_Node_Str""+ annotationValue);
  }
 catch (  Exception e) {
    Logger.getLogger(AnnotationsHelper.class.getName()).log(Level.FINEST,""String_Node_Str"",e);
  }
}",0.9637551990493168
124487,"public void init() throws ServletException {
  compile();
}","public void init() throws ServletException {
  try {
    compile();
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(e);
  }
}",0.5756097560975609
124488,"private void compile(){
  final StringBuilder classPath=new StringBuilder();
  ClassLoader c=getClass().getClassLoader();
  URLClassLoader u=(URLClassLoader)c;
  URL[] urls=u.getURLs();
  String classesFolder=""String_Node_Str"";
  for (  URL i : urls) {
    String string=i.toString();
    boolean isClassesFolder=string.endsWith(""String_Node_Str"") || string.endsWith(""String_Node_Str"");
    boolean addToClasspath=ServiceLocator.getInstance().getConfigurator().filterClassPath(string);
    if (isClassesFolder || addToClasspath)     classPath.append(i.getPath() + ""String_Node_Str"");
    if (isClassesFolder)     classesFolder=string;
    LOGGER.log(Level.INFO,""String_Node_Str"" + i);
  }
  final String path=new java.io.File(classesFolder).getParentFile().getParentFile().getPath().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  final String classesFolder2=classesFolder.replace(""String_Node_Str"",""String_Node_Str"");
  new Thread(){
    public void run(){
      WatchDir.main(new String[]{""String_Node_Str"",classesFolder2},classPath.toString(),path);
    }
  }
.start();
}","private void compile() throws URISyntaxException {
  final StringBuilder classPath=new StringBuilder();
  ClassLoader c=getClass().getClassLoader();
  URLClassLoader u=(URLClassLoader)c;
  URL[] urls=u.getURLs();
  String classesFolder=""String_Node_Str"";
  for (  URL i : urls) {
    String classPathEntry=new File(i.toURI()).toString();
    boolean isClassesFolder=i.toString().endsWith(""String_Node_Str"") || i.toString().endsWith(""String_Node_Str"");
    boolean addToClasspath=ServiceLocator.getInstance().getConfigurator().filterClassPath(classPathEntry);
    if (isClassesFolder || addToClasspath)     classPath.append(classPathEntry + ""String_Node_Str"");
    if (isClassesFolder)     classesFolder=classPathEntry;
    LOGGER.log(Level.INFO,""String_Node_Str"" + classPathEntry);
  }
  final String path=new File(new java.io.File(classesFolder).getParentFile().getParentFile().toURI()).toString() + File.separator + ""String_Node_Str"";
  LOGGER.log(Level.INFO,""String_Node_Str"" + path);
  final String classesFolder2=classesFolder;
  new Thread(){
    public void run(){
      WatchDir.main(new String[]{""String_Node_Str"",classesFolder2},classPath.toString(),path);
    }
  }
.start();
}",0.8553900087642419
124489,"public static void compileWithMainClass(String classPath,String target){
  try {
    Project.singleton=null;
    String classpathElements=classPath;
    Assembly assembly=new Assembly();
    assembly.setEntryPointClassName(mainClass.getName());
    assembly.setTargetLocation(new File(target));
    DragomeConfigurator configurator=ServiceLocator.getInstance().getConfigurator();
    DragomeJsCompiler compiler=new DragomeJsCompiler(configurator.getDefaultCompilerType());
    compiler.addClasspathElements(classpathElements);
    compiler.addClasspathFilter(new FileFilter(){
      public boolean accept(      File pathname){
        return !pathname.toString().contains(""String_Node_Str"");
      }
    }
);
    if (configurator != null)     compiler.setBytecodeTransformer(configurator.getBytecodeTransformer());
    compiler.addAssembly(assembly);
    compiler.setGenerateLineNumbers(false);
    compiler.setCompression(false);
    compiler.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void compileWithMainClass(String classPath,String target){
  try {
    Project.singleton=null;
    String classpathElements=classPath;
    Assembly assembly=new Assembly();
    assembly.setEntryPointClassName(mainClass.getName());
    assembly.setTargetLocation(new File(target));
    DragomeConfigurator configurator=ServiceLocator.getInstance().getConfigurator();
    DragomeJsCompiler compiler=new DragomeJsCompiler(configurator.getDefaultCompilerType());
    compiler.addClasspathElements(classpathElements);
    compiler.addClasspathFilter(new FileFilter(){
      public boolean accept(      File pathname){
        return !pathname.toString().contains(File.separator + ""String_Node_Str"");
      }
    }
);
    if (configurator != null)     compiler.setBytecodeTransformer(configurator.getBytecodeTransformer());
    compiler.addAssembly(assembly);
    compiler.setGenerateLineNumbers(false);
    compiler.setCompression(false);
    compiler.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.991687041564792
124490,"public boolean accept(File pathname){
  return !pathname.toString().contains(""String_Node_Str"");
}","public boolean accept(File pathname){
  return !pathname.toString().contains(File.separator + ""String_Node_Str"");
}",0.92018779342723
124491,"public void messageReceived(String aMessage){
  String[] split=aMessage.split(""String_Node_Str"");
  queue.addMessage(Integer.parseInt(split[1]),aMessage);
}","public void messageReceived(String aMessage){
  int separatorIndex=aMessage.lastIndexOf(""String_Node_Str"");
  queue.addMessage(Integer.parseInt(aMessage.substring(separatorIndex + 1)),aMessage);
}",0.8011363636363636
124492,"private static String getPropertyName(String methodName){
  if (methodName.startsWith(""String_Node_Str"") || methodName.startsWith(""String_Node_Str""))   return methodName.toLowerCase().charAt(3) + methodName.substring(4);
 else   if (methodName.startsWith(""String_Node_Str""))   return methodName.toLowerCase().charAt(2) + methodName.substring(3);
  return null;
}","private static String getPropertyName(String methodName){
  if (methodName.length() > 3 && (methodName.startsWith(""String_Node_Str"") || methodName.startsWith(""String_Node_Str"")))   return methodName.toLowerCase().charAt(3) + methodName.substring(4);
 else   if (methodName.length() > 2 && methodName.startsWith(""String_Node_Str""))   return methodName.toLowerCase().charAt(2) + methodName.substring(3);
  return ""String_Node_Str"";
}",0.9029003783102144
124493,"public void onValueChange(ValueChangeEvent<Object> event){
  String value=(String)event.getValue();
  textFieldElement.setAttribute(""String_Node_Str"",value);
  ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
  ScriptHelper.put(""String_Node_Str"",value,this);
  ScriptHelper.evalNoResult(""String_Node_Str"",this);
}","public void onValueChange(ValueChangeEvent<Object> event){
  String value=visualTextField.getRenderer().render(event.getValue());
  textFieldElement.setAttribute(""String_Node_Str"",value);
  ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
  ScriptHelper.put(""String_Node_Str"",value,this);
  ScriptHelper.evalNoResult(""String_Node_Str"",this);
}",0.9319526627218936
124494,"public void mergeWith(final Element textFieldElement){
  final String id=DragomeEntityManager.add(visualTextField);
  visualTextField.addValueChangeHandler(new ValueChangeHandler<Object>(){
    public void onValueChange(    ValueChangeEvent<Object> event){
      String value=(String)event.getValue();
      textFieldElement.setAttribute(""String_Node_Str"",value);
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      ScriptHelper.put(""String_Node_Str"",value,this);
      ScriptHelper.evalNoResult(""String_Node_Str"",this);
    }
  }
);
  visualTextField.addListener(InputListener.class,new InputListener(){
    public void inputPerformed(    VisualComponent visualComponent){
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      String value=(String)ScriptHelper.eval(""String_Node_Str"",this);
      visualTextField.setValue(value);
    }
  }
);
  visualTextField.addListener(FocusListener.class,new FocusListener(){
    public void focusGained(    VisualComponent component){
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      ScriptHelper.evalNoResult(""String_Node_Str"",this);
    }
    public void focusLost(    VisualComponent component){
    }
  }
);
  String value=visualTextField.getRenderer().render(visualTextField.getValue());
  textFieldElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  textFieldElement.setAttribute(""String_Node_Str"",value);
  textFieldElement.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
  ScriptHelper.put(""String_Node_Str"",value == null ? ""String_Node_Str"" : value,this);
  ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
  ScriptHelper.evalNoResult(""String_Node_Str"",this);
  addListeners(visualTextField,textFieldElement);
}","public void mergeWith(final Element textFieldElement){
  final String id=DragomeEntityManager.add(visualTextField);
  visualTextField.addValueChangeHandler(new ValueChangeHandler<Object>(){
    public void onValueChange(    ValueChangeEvent<Object> event){
      String value=visualTextField.getRenderer().render(event.getValue());
      textFieldElement.setAttribute(""String_Node_Str"",value);
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      ScriptHelper.put(""String_Node_Str"",value,this);
      ScriptHelper.evalNoResult(""String_Node_Str"",this);
    }
  }
);
  visualTextField.addListener(InputListener.class,new InputListener(){
    public void inputPerformed(    VisualComponent visualComponent){
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      String value=(String)ScriptHelper.eval(""String_Node_Str"",this);
      visualTextField.setValue(value);
    }
  }
);
  visualTextField.addListener(FocusListener.class,new FocusListener(){
    public void focusGained(    VisualComponent component){
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      ScriptHelper.evalNoResult(""String_Node_Str"",this);
    }
    public void focusLost(    VisualComponent component){
    }
  }
);
  String value=visualTextField.getRenderer().render(visualTextField.getValue());
  textFieldElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
  textFieldElement.setAttribute(""String_Node_Str"",value);
  textFieldElement.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
  ScriptHelper.put(""String_Node_Str"",value == null ? ""String_Node_Str"" : value,this);
  ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
  ScriptHelper.evalNoResult(""String_Node_Str"",this);
  addListeners(visualTextField,textFieldElement);
}",0.9868194842406875
124495,"public Canvas<Element> render(final VisualTextField<Object> visualTextField){
  Canvas<Element> canvas=ServiceLocator.getInstance().getTemplateManager().getCanvasFactory().createCanvas();
  canvas.setContent(new MergeableElement(){
    public void mergeWith(    final Element textFieldElement){
      final String id=DragomeEntityManager.add(visualTextField);
      visualTextField.addValueChangeHandler(new ValueChangeHandler<Object>(){
        public void onValueChange(        ValueChangeEvent<Object> event){
          String value=(String)event.getValue();
          textFieldElement.setAttribute(""String_Node_Str"",value);
          ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
          ScriptHelper.put(""String_Node_Str"",value,this);
          ScriptHelper.evalNoResult(""String_Node_Str"",this);
        }
      }
);
      visualTextField.addListener(InputListener.class,new InputListener(){
        public void inputPerformed(        VisualComponent visualComponent){
          ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
          String value=(String)ScriptHelper.eval(""String_Node_Str"",this);
          visualTextField.setValue(value);
        }
      }
);
      visualTextField.addListener(FocusListener.class,new FocusListener(){
        public void focusGained(        VisualComponent component){
          ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
          ScriptHelper.evalNoResult(""String_Node_Str"",this);
        }
        public void focusLost(        VisualComponent component){
        }
      }
);
      String value=visualTextField.getRenderer().render(visualTextField.getValue());
      textFieldElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      textFieldElement.setAttribute(""String_Node_Str"",value);
      textFieldElement.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
      ScriptHelper.put(""String_Node_Str"",value == null ? ""String_Node_Str"" : value,this);
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      ScriptHelper.evalNoResult(""String_Node_Str"",this);
      addListeners(visualTextField,textFieldElement);
    }
  }
);
  return canvas;
}","public Canvas<Element> render(final VisualTextField<Object> visualTextField){
  Canvas<Element> canvas=ServiceLocator.getInstance().getTemplateManager().getCanvasFactory().createCanvas();
  canvas.setContent(new MergeableElement(){
    public void mergeWith(    final Element textFieldElement){
      final String id=DragomeEntityManager.add(visualTextField);
      visualTextField.addValueChangeHandler(new ValueChangeHandler<Object>(){
        public void onValueChange(        ValueChangeEvent<Object> event){
          String value=visualTextField.getRenderer().render(event.getValue());
          textFieldElement.setAttribute(""String_Node_Str"",value);
          ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
          ScriptHelper.put(""String_Node_Str"",value,this);
          ScriptHelper.evalNoResult(""String_Node_Str"",this);
        }
      }
);
      visualTextField.addListener(InputListener.class,new InputListener(){
        public void inputPerformed(        VisualComponent visualComponent){
          ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
          String value=(String)ScriptHelper.eval(""String_Node_Str"",this);
          visualTextField.setValue(value);
        }
      }
);
      visualTextField.addListener(FocusListener.class,new FocusListener(){
        public void focusGained(        VisualComponent component){
          ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
          ScriptHelper.evalNoResult(""String_Node_Str"",this);
        }
        public void focusLost(        VisualComponent component){
        }
      }
);
      String value=visualTextField.getRenderer().render(visualTextField.getValue());
      textFieldElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      textFieldElement.setAttribute(""String_Node_Str"",value);
      textFieldElement.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
      ScriptHelper.put(""String_Node_Str"",value == null ? ""String_Node_Str"" : value,this);
      ScriptHelper.put(""String_Node_Str"",textFieldElement,this);
      ScriptHelper.evalNoResult(""String_Node_Str"",this);
      addListeners(visualTextField,textFieldElement);
    }
  }
);
  return canvas;
}",0.9893666204345816
124496,"public <S>RepeaterBuilder<S,T> toList(final List<S> list){
  final ValueModelDelegator<T,List<S>> valueModelDelegator=new ValueModelDelegator<T,List<S>>(model);
  NullMutableValueModel<List<S>> valueSource=new NullMutableValueModel<List<S>>(){
    public List<S> getDelegatedValue(){
      if (list instanceof ObservableList) {
        ObservableList<S> listWrapper=(ObservableList<S>)list;
        listWrapper.setListChangeListener(new ListChangedListener(){
          public void listChanged(){
            valueModelDelegator.fireValueChangeEvent();
          }
        }
);
      }
      return list;
    }
  }
;
  valueModelDelegator.setValueSource(valueSource);
  BindingSync.addCondition(valueModelDelegator);
  return new RepeaterBuilder<S,T>(valueModelDelegator,template,model,panel);
}","public <S>RepeaterBuilder<S,T> toList(final List<S> list){
  final ValueModelDelegator<T,List<S>> valueModelDelegator=new ValueModelDelegator<T,List<S>>(model);
  addListenerIfObservable(valueModelDelegator,list);
  NullMutableValueModel<List<S>> valueSource=new NullMutableValueModel<List<S>>(){
    public List<S> getDelegatedValue(){
      return list;
    }
  }
;
  valueModelDelegator.setValueSource(valueSource);
  BindingSync.addCondition(valueModelDelegator);
  return new RepeaterBuilder<S,T>(valueModelDelegator,template,model,panel);
}",0.5876211782252051
124497,"public <S>RepeaterBuilder<S,T> toListProperty(Getter<T,List<S>> getter){
  final List<S> list=getter.get(model);
  return toList(list);
}","public <S>RepeaterBuilder<S,T> toListProperty(final Getter<T,List<S>> getter){
  final ValueModelDelegator<T,List<S>> valueModelDelegator=new ValueModelDelegator<T,List<S>>(model);
  List<S> list=getter.get(model);
  addListenerIfObservable(valueModelDelegator,list);
  NullMutableValueModel<List<S>> valueSource=new NullMutableValueModel<List<S>>(){
    public List<S> getDelegatedValue(){
      return getter.get(model);
    }
  }
;
  valueModelDelegator.setValueSource(valueSource);
  BindingSync.addCondition(valueModelDelegator);
  return new RepeaterBuilder<S,T>(valueModelDelegator,template,model,panel);
}",0.2773333333333333
124498,"public static void compileWithMainClass(String classPath,String target){
  try {
    Project.singleton=null;
    String classpathElements=classPath;
    Assembly assembly=new Assembly();
    assembly.setEntryPointClassName(mainClass.getName());
    assembly.setTargetLocation(new File(target));
    DragomeJsCompiler compiler=new DragomeJsCompiler();
    compiler.addClasspathElements(classpathElements);
    compiler.addClasspathFilter(new FileFilter(){
      public boolean accept(      File pathname){
        return !pathname.toString().contains(""String_Node_Str"");
      }
    }
);
    DragomeConfigurator configurator=ServiceLocator.getInstance().getConfigurator();
    if (configurator != null)     compiler.setBytecodeTransformer(configurator.getBytecodeTransformer());
    compiler.addAssembly(assembly);
    compiler.setGenerateLineNumbers(false);
    compiler.setCompression(false);
    compiler.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void compileWithMainClass(String classPath,String target){
  try {
    Project.singleton=null;
    String classpathElements=classPath;
    Assembly assembly=new Assembly();
    assembly.setEntryPointClassName(mainClass.getName());
    assembly.setTargetLocation(new File(target));
    DragomeConfigurator configurator=ServiceLocator.getInstance().getConfigurator();
    DragomeJsCompiler compiler=new DragomeJsCompiler(configurator.getDefaultCompilerType());
    compiler.addClasspathElements(classpathElements);
    compiler.addClasspathFilter(new FileFilter(){
      public boolean accept(      File pathname){
        return !pathname.toString().contains(""String_Node_Str"");
      }
    }
);
    if (configurator != null)     compiler.setBytecodeTransformer(configurator.getBytecodeTransformer());
    compiler.addAssembly(assembly);
    compiler.setGenerateLineNumbers(false);
    compiler.setCompression(false);
    compiler.execute();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8960321446509292
124499,"public void run(){
  try {
    String id=EventDispatcherHelper.getEventTargetId(event);
    Object arguments=null;
    ScriptHelper.put(""String_Node_Str"",event,this);
    String eventType=(String)ScriptHelper.eval(""String_Node_Str"",this);
    ServiceLocator instance=ServiceLocator.getInstance();
    EventDispatcher eventDispatcher=instance.getEventDispatcher();
    eventDispatcher.eventPerformedById(eventType,id,arguments);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    String id=EventDispatcherHelper.getEventTargetId(event);
    Object arguments=null;
    ScriptHelper.put(""String_Node_Str"",event,this);
    String eventType=(String)ScriptHelper.eval(""String_Node_Str"",this);
    boolean isKeyEvent=eventType.equals(""String_Node_Str"") || eventType.equals(""String_Node_Str"") || eventType.equals(""String_Node_Str"");
    if (isKeyEvent) {
      ScriptHelper.put(""String_Node_Str"",EventDispatcherHelper.getEventTarget(event),this);
      ScriptHelper.eval(""String_Node_Str"",this);
      int code=ScriptHelper.evalInt(""String_Node_Str"",this);
      arguments=code;
    }
    ServiceLocator instance=ServiceLocator.getInstance();
    EventDispatcher eventDispatcher=instance.getEventDispatcher();
    eventDispatcher.eventPerformedById(eventType,id,arguments);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.7140762463343109
124500,"public void setValue(T value,boolean fireEvents){
  boolean changed=this.value != null ? !this.value.equals(value) : value == null;
  this.value=value;
  if (fireEvents && changed)   fireValueChange(value);
}","public void setValue(T value,boolean fireEvents){
  boolean changed=this.value != null ? !this.value.equals(value) : value != null;
  this.value=value;
  if (fireEvents && changed)   fireValueChange(value);
}",0.9951923076923076
124501,"public void mergeWith(Element element){
  String id=DragomeEntityManager.add(visualImage);
  element.setAttribute(""String_Node_Str"",visualImage.getValue());
  element.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
  addListeners(visualImage,element);
}","public void mergeWith(Element element){
  String id=DragomeEntityManager.add(visualImage);
  if (visualImage.getValue() != null)   element.setAttribute(""String_Node_Str"",visualImage.getValue());
  element.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
  addListeners(visualImage,element);
}",0.9283018867924528
124502,"public Canvas<Element> render(final VisualImage visualImage){
  Canvas<Element> canvas=ServiceLocator.getInstance().getTemplateManager().getCanvasFactory().createCanvas();
  canvas.setContent(new MergeableElement(){
    public void mergeWith(    Element element){
      String id=DragomeEntityManager.add(visualImage);
      element.setAttribute(""String_Node_Str"",visualImage.getValue());
      element.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
      addListeners(visualImage,element);
    }
  }
);
  return canvas;
}","public Canvas<Element> render(final VisualImage visualImage){
  Canvas<Element> canvas=ServiceLocator.getInstance().getTemplateManager().getCanvasFactory().createCanvas();
  canvas.setContent(new MergeableElement(){
    public void mergeWith(    Element element){
      String id=DragomeEntityManager.add(visualImage);
      if (visualImage.getValue() != null)       element.setAttribute(""String_Node_Str"",visualImage.getValue());
      element.setAttribute(COMPONENT_ID_ATTRIBUTE,id);
      addListeners(visualImage,element);
    }
  }
);
  return canvas;
}",0.9608938547486032
124503,"@Override public void onResume(){
  super.onResume();
  loaderManager.initLoader(ID_BALANCE_LOADER,null,balanceLoaderCallbacks);
  loaderManager.initLoader(ID_RATE_LOADER,null,rateLoaderCallbacks);
  loaderManager.initLoader(ID_BLOCKCHAIN_STATE_LOADER,null,blockchainStateLoaderCallbacks);
  updateView();
}","@Override public void onResume(){
  super.onResume();
  loaderManager.initLoader(ID_BALANCE_LOADER,null,balanceLoaderCallbacks);
  loaderManager.initLoader(ID_RATE_LOADER,null,rateLoaderCallbacks);
  if (!initComplete) {
    loaderManager.initLoader(ID_BLOCKCHAIN_STATE_LOADER,null,blockchainStateLoaderCallbacks);
    initComplete=true;
  }
 else   loaderManager.restartLoader(ID_BLOCKCHAIN_STATE_LOADER,null,blockchainStateLoaderCallbacks);
  updateView();
}",0.7979139504563233
124504,"@Override public void onCreate(){
  if (LeakCanary.isInAnalyzerProcess(this)) {
    return;
  }
  LeakCanary.install(this);
  new LinuxSecureRandom();
  initLogging();
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().permitDiskReads().permitDiskWrites().penaltyLog().build());
  Threading.throwOnLockCycles();
  org.bitcoinj.core.Context.enableStrictMode();
  org.bitcoinj.core.Context.propagate(Constants.CONTEXT);
  log.info(""String_Node_Str"",Constants.TEST ? ""String_Node_Str"" : ""String_Node_Str"",Constants.NETWORK_PARAMETERS.getId());
  super.onCreate();
  packageInfo=packageInfoFromContext(this);
  CrashReporter.init(getCacheDir());
  Threading.uncaughtExceptionHandler=new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    final Thread thread,    final Throwable throwable){
      log.info(CoinDefinition.coinName + ""String_Node_Str"",throwable);
      CrashReporter.saveBackgroundTrace(throwable,packageInfo);
    }
  }
;
  initMnemonicCode();
  config=new Configuration(PreferenceManager.getDefaultSharedPreferences(this),getResources());
  activityManager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
  blockchainServiceIntent=new Intent(this,BlockchainServiceImpl.class);
  blockchainServiceCancelCoinsReceivedIntent=new Intent(BlockchainService.ACTION_CANCEL_COINS_RECEIVED,null,this,BlockchainServiceImpl.class);
  blockchainServiceResetBlockchainIntent=new Intent(BlockchainService.ACTION_RESET_BLOCKCHAIN,null,this,BlockchainServiceImpl.class);
  walletFile=getFileStreamPath(Constants.Files.WALLET_FILENAME_PROTOBUF);
  loadWalletFromProtobuf();
  org.bitcoinj.core.Context context=wallet.getContext();
  wallet.getContext().initDash(config.getLiteMode(),config.getInstantXEnabled());
  if (config.versionCodeCrossed(packageInfo.versionCode,VERSION_CODE_SHOW_BACKUP_REMINDER) && !wallet.getImportedKeys().isEmpty()) {
    log.info(""String_Node_Str"");
    config.armBackupReminder();
  }
  config.updateLastVersionCode(packageInfo.versionCode);
  afterLoadWallet();
  cleanupFiles();
}","@Override public void onCreate(){
  if (LeakCanary.isInAnalyzerProcess(this)) {
    return;
  }
  refWatcher=LeakCanary.install(this);
  new LinuxSecureRandom();
  initLogging();
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().permitDiskReads().permitDiskWrites().penaltyLog().build());
  Threading.throwOnLockCycles();
  org.bitcoinj.core.Context.enableStrictMode();
  org.bitcoinj.core.Context.propagate(Constants.CONTEXT);
  log.info(""String_Node_Str"",Constants.TEST ? ""String_Node_Str"" : ""String_Node_Str"",Constants.NETWORK_PARAMETERS.getId());
  super.onCreate();
  packageInfo=packageInfoFromContext(this);
  CrashReporter.init(getCacheDir());
  Threading.uncaughtExceptionHandler=new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    final Thread thread,    final Throwable throwable){
      log.info(CoinDefinition.coinName + ""String_Node_Str"",throwable);
      CrashReporter.saveBackgroundTrace(throwable,packageInfo);
    }
  }
;
  initMnemonicCode();
  config=new Configuration(PreferenceManager.getDefaultSharedPreferences(this),getResources());
  activityManager=(ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
  blockchainServiceIntent=new Intent(this,BlockchainServiceImpl.class);
  blockchainServiceCancelCoinsReceivedIntent=new Intent(BlockchainService.ACTION_CANCEL_COINS_RECEIVED,null,this,BlockchainServiceImpl.class);
  blockchainServiceResetBlockchainIntent=new Intent(BlockchainService.ACTION_RESET_BLOCKCHAIN,null,this,BlockchainServiceImpl.class);
  walletFile=getFileStreamPath(Constants.Files.WALLET_FILENAME_PROTOBUF);
  loadWalletFromProtobuf();
  org.bitcoinj.core.Context context=wallet.getContext();
  wallet.getContext().initDash(config.getLiteMode(),config.getInstantXEnabled());
  if (config.versionCodeCrossed(packageInfo.versionCode,VERSION_CODE_SHOW_BACKUP_REMINDER) && !wallet.getImportedKeys().isEmpty()) {
    log.info(""String_Node_Str"");
    config.armBackupReminder();
  }
  config.updateLastVersionCode(packageInfo.versionCode);
  afterLoadWallet();
  cleanupFiles();
}",0.9973614775725592
124505,"private void afterLoadWallet(){
  wallet.autosaveToFile(walletFile,Constants.Files.WALLET_AUTOSAVE_DELAY_MS,TimeUnit.MILLISECONDS,null);
  wallet.cleanup();
  if (!getFileStreamPath(Constants.Files.WALLET_KEY_BACKUP_PROTOBUF).exists())   backupWallet();
}","private void afterLoadWallet(){
  wallet.autosaveToFile(walletFile,Constants.Files.WALLET_AUTOSAVE_DELAY_MS,TimeUnit.MILLISECONDS,null);
  try {
    wallet.cleanup();
  }
 catch (  IllegalStateException x) {
    if (x.getMessage().contains(""String_Node_Str"")) {
      File blockChainFile=new File(getDir(""String_Node_Str"",Context.MODE_PRIVATE),Constants.Files.BLOCKCHAIN_FILENAME);
      blockChainFile.delete();
    }
 else     throw x;
  }
  if (!getFileStreamPath(Constants.Files.WALLET_KEY_BACKUP_PROTOBUF).exists())   backupWallet();
}",0.6415094339622641
124506,"public static void showSoftKeyboard(Activity activity,View view){
  if (view.requestFocus()) {
    InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);
    boolean isShowing=imm.showSoftInput(view,InputMethodManager.SHOW_IMPLICIT);
    if (!isShowing) {
      activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
    }
  }
}","public static void showSoftKeyboard(Activity activity,View view){
  if (activity != null && view.requestFocus()) {
    InputMethodManager imm=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);
    boolean isShowing=imm.showSoftInput(view,InputMethodManager.SHOW_IMPLICIT);
    if (!isShowing) {
      activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
    }
  }
}",0.9765807962529274
124507,"@Override public boolean onContextItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.wallet_options_safety:
    HelpDialogFragment.page(getFragmentManager(),R.string.help_safety);
  return true;
case R.id.wallet_options_backup_wallet:
handleBackupWallet();
return true;
case R.id.wallet_options_restore_wallet:
showDialog(DIALOG_RESTORE_WALLET);
return true;
case R.id.wallet_options_encrypt_keys:
handleEncryptKeys();
return true;
}
return super.onContextItemSelected(item);
}","@Override public boolean onContextItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.wallet_options_safety:
    HelpDialogFragment.page(getFragmentManager(),R.string.help_safety);
  return true;
case R.id.wallet_options_backup_wallet:
handleBackupWallet();
return true;
case R.id.wallet_options_restore_wallet:
handleRestoreWallet();
return true;
case R.id.wallet_options_encrypt_keys:
handleEncryptKeys();
return true;
}
return super.onContextItemSelected(item);
}",0.6837782340862423
124508,"public static String getAddress(final BluetoothAdapter adapter){
  if (adapter == null)   return null;
  final String address=adapter.getAddress();
  if (!MARSHMELLOW_FAKE_MAC.equals(address))   return address;
  try {
    final Field mServiceField=BluetoothAdapter.class.getDeclaredField(""String_Node_Str"");
    mServiceField.setAccessible(true);
    final Object mService=mServiceField.get(adapter);
    if (mService == null)     return null;
    return (String)mService.getClass().getMethod(""String_Node_Str"").invoke(mService);
  }
 catch (  final ReflectiveOperationException x) {
    throw new RuntimeException(x);
  }
}","public static String getAddress(final BluetoothAdapter adapter){
  if (adapter == null)   return null;
  final String address=adapter.getAddress();
  if (!MARSHMELLOW_FAKE_MAC.equals(address))   return address;
  try {
    final Field mServiceField=BluetoothAdapter.class.getDeclaredField(""String_Node_Str"");
    mServiceField.setAccessible(true);
    final Object mService=mServiceField.get(adapter);
    if (mService == null)     return null;
    return (String)mService.getClass().getMethod(""String_Node_Str"").invoke(mService);
  }
 catch (  final Exception x) {
    throw new RuntimeException(x);
  }
}",0.9845653939886272
124509,"private boolean isValidAmount(final boolean zeroIsValid){
  final String str=textView.getText().toString().trim();
  try {
    if (!str.isEmpty()) {
      final Monetary amount;
      if (localCurrencyCode == null)       amount=inputFormat.parse(str);
 else       amount=inputFormat.parseFiat(localCurrencyCode,str);
      return zeroIsValid || amount.signum() > 0;
    }
  }
 catch (  final Exception x) {
  }
  return false;
}","private boolean isValidAmount(final boolean zeroIsValid){
  final String str=textView.getText().toString().trim();
  try {
    if (!str.isEmpty()) {
      final Monetary amount;
      if (localCurrencyCode == null) {
        amount=inputFormat.parse(str);
        if (((Coin)amount).isGreaterThan(Constants.NETWORK_PARAMETERS.getMaxMoney()))         return false;
      }
 else {
        amount=inputFormat.parseFiat(localCurrencyCode,str);
      }
      return zeroIsValid || amount.signum() > 0;
    }
  }
 catch (  final Exception x) {
  }
  return false;
}",0.8582995951417004
124510,"/** 
 * Password based encryption using AES - CBC 256 bits.
 * @param plainBytes The bytes to encrypt
 * @param password The password to use for encryption
 * @return SALT_LENGTH bytes of salt followed by the encrypted bytes.
 * @throws IOException
 */
private static byte[] encrypt(final byte[] plainTextAsBytes,final char[] password) throws IOException {
  try {
    final byte[] salt=new byte[SALT_LENGTH];
    secureRandom.nextBytes(salt);
    final ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);
    final BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));
    cipher.init(true,key);
    final byte[] encryptedBytes=new byte[cipher.getOutputSize(plainTextAsBytes.length)];
    final int length=cipher.processBytes(plainTextAsBytes,0,plainTextAsBytes.length,encryptedBytes,0);
    cipher.doFinal(encryptedBytes,length);
    return concat(salt,encryptedBytes);
  }
 catch (  final InvalidCipherTextException x) {
    throw new IOException(""String_Node_Str"",x);
  }
catch (  final DataLengthException x) {
    throw new IOException(""String_Node_Str"",x);
  }
}","/** 
 * Password based encryption using AES - CBC 256 bits.
 * @param plainBytes The bytes to encrypt
 * @param password The password to use for encryption
 * @return SALT_LENGTH bytes of salt followed by the encrypted bytes.
 * @throws IOException
 */
private static byte[] encrypt(final byte[] plainTextAsBytes,final char[] password) throws IOException {
  try {
    final byte[] salt=new byte[SALT_LENGTH];
    secureRandom.nextBytes(salt);
    final ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);
    final BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));
    cipher.init(true,key);
    final byte[] encryptedBytes=new byte[cipher.getOutputSize(plainTextAsBytes.length)];
    final int processLen=cipher.processBytes(plainTextAsBytes,0,plainTextAsBytes.length,encryptedBytes,0);
    final int doFinalLen=cipher.doFinal(encryptedBytes,processLen);
    return concat(salt,Arrays.copyOf(encryptedBytes,processLen + doFinalLen));
  }
 catch (  final InvalidCipherTextException x) {
    throw new IOException(""String_Node_Str"",x);
  }
catch (  final DataLengthException x) {
    throw new IOException(""String_Node_Str"",x);
  }
}",0.9486740804106074
124511,"/** 
 * Decrypt bytes previously encrypted with this class.
 * @param bytesToDecode The bytes to decrypt
 * @param passwordbThe password to use for decryption
 * @return The decrypted bytes
 * @throws IOException
 */
private static byte[] decrypt(final byte[] bytesToDecode,final char[] password) throws IOException {
  try {
    final byte[] salt=new byte[SALT_LENGTH];
    System.arraycopy(bytesToDecode,0,salt,0,SALT_LENGTH);
    final byte[] cipherBytes=new byte[bytesToDecode.length - SALT_LENGTH];
    System.arraycopy(bytesToDecode,SALT_LENGTH,cipherBytes,0,bytesToDecode.length - SALT_LENGTH);
    final ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);
    final BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));
    cipher.init(false,key);
    final byte[] decryptedBytes=new byte[cipher.getOutputSize(cipherBytes.length)];
    final int length=cipher.processBytes(cipherBytes,0,cipherBytes.length,decryptedBytes,0);
    cipher.doFinal(decryptedBytes,length);
    return decryptedBytes;
  }
 catch (  final InvalidCipherTextException x) {
    throw new IOException(""String_Node_Str"",x);
  }
catch (  final DataLengthException x) {
    throw new IOException(""String_Node_Str"",x);
  }
}","/** 
 * Decrypt bytes previously encrypted with this class.
 * @param bytesToDecode The bytes to decrypt
 * @param passwordbThe password to use for decryption
 * @return The decrypted bytes
 * @throws IOException
 */
private static byte[] decrypt(final byte[] bytesToDecode,final char[] password) throws IOException {
  try {
    final byte[] salt=new byte[SALT_LENGTH];
    System.arraycopy(bytesToDecode,0,salt,0,SALT_LENGTH);
    final byte[] cipherBytes=new byte[bytesToDecode.length - SALT_LENGTH];
    System.arraycopy(bytesToDecode,SALT_LENGTH,cipherBytes,0,bytesToDecode.length - SALT_LENGTH);
    final ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);
    final BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));
    cipher.init(false,key);
    final byte[] decryptedBytes=new byte[cipher.getOutputSize(cipherBytes.length)];
    final int processLen=cipher.processBytes(cipherBytes,0,cipherBytes.length,decryptedBytes,0);
    final int doFinalLen=cipher.doFinal(decryptedBytes,processLen);
    return Arrays.copyOf(decryptedBytes,processLen + doFinalLen);
  }
 catch (  final InvalidCipherTextException x) {
    throw new IOException(""String_Node_Str"",x);
  }
catch (  final DataLengthException x) {
    throw new IOException(""String_Node_Str"",x);
  }
}",0.8784615384615385
124512,"private static Map<String,ExchangeRate> requestExchangeRates(final URL url,final String... fields){
  final long start=System.currentTimeMillis();
  HttpURLConnection connection=null;
  Reader reader=null;
  try {
    Double btcRate=0.0;
    boolean cryptsyValue=true;
    Object result=getCoinValueBTC();
    if (result == null) {
      result=getCoinValueBTC_BTER();
      cryptsyValue=false;
      if (result == null)       return null;
    }
    btcRate=(Double)result;
    connection=(HttpURLConnection)url.openConnection();
    connection.setConnectTimeout(Constants.HTTP_TIMEOUT_MS);
    connection.setReadTimeout(Constants.HTTP_TIMEOUT_MS);
    connection.connect();
    final int responseCode=connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      reader=new InputStreamReader(new BufferedInputStream(connection.getInputStream(),1024),Constants.UTF_8);
      final StringBuilder content=new StringBuilder();
      Io.copy(reader,content);
      final Map<String,ExchangeRate> rates=new TreeMap<String,ExchangeRate>();
      final JSONObject head=new JSONObject(content.toString());
      for (final Iterator<String> i=head.keys(); i.hasNext(); ) {
        final String currencyCode=i.next();
        if (!""String_Node_Str"".equals(currencyCode)) {
          final JSONObject o=head.getJSONObject(currencyCode);
          for (          final String field : fields) {
            String rateStr=o.optString(field,null);
            if (rateStr != null) {
              try {
                double rateForBTC=Double.parseDouble(rateStr);
                rateStr=String.format(""String_Node_Str"",rateForBTC * btcRate);
                final BigInteger rate=GenericUtils.toNanoCoins(rateStr,0);
                if (rate.signum() > 0) {
                  rates.put(currencyCode,new ExchangeRate(currencyCode,rate,url.getHost()));
                  break;
                }
              }
 catch (              final ArithmeticException x) {
                log.warn(""String_Node_Str"",new Object[]{currencyCode,url,x.getMessage()});
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"",url,(System.currentTimeMillis() - start));
      if (rates.size() == 0) {
        int i=0;
        i++;
      }
 else {
        rates.put(CoinDefinition.cryptsyMarketCurrency,new ExchangeRate(CoinDefinition.cryptsyMarketCurrency,GenericUtils.toNanoCoins(String.format(""String_Node_Str"",btcRate).replace(""String_Node_Str"",""String_Node_Str""),0),cryptsyValue ? ""String_Node_Str"" : ""String_Node_Str""));
        rates.put(""String_Node_Str"" + CoinDefinition.cryptsyMarketCurrency,new ExchangeRate(""String_Node_Str"" + CoinDefinition.cryptsyMarketCurrency,GenericUtils.toNanoCoins(String.format(""String_Node_Str"",btcRate * 1000).replace(""String_Node_Str"",""String_Node_Str""),0),cryptsyValue ? ""String_Node_Str"" : ""String_Node_Str""));
      }
      return rates;
    }
 else {
      log.warn(""String_Node_Str"",responseCode,url);
    }
  }
 catch (  final Exception x) {
    log.warn(""String_Node_Str"" + url,x);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      final IOException x) {
      }
    }
    if (connection != null)     connection.disconnect();
  }
  return null;
}","private static Map<String,ExchangeRate> requestExchangeRates(final URL url,final String... fields){
  final long start=System.currentTimeMillis();
  HttpURLConnection connection=null;
  Reader reader=null;
  try {
    Double btcRate=0.0;
    boolean cryptsyValue=true;
    Object result=getCoinValueBTC();
    if (result == null) {
      result=getCoinValueBTC_BTER();
      cryptsyValue=false;
      if (result == null)       return null;
    }
    btcRate=(Double)result;
    connection=(HttpURLConnection)url.openConnection();
    connection.setConnectTimeout(Constants.HTTP_TIMEOUT_MS);
    connection.setReadTimeout(Constants.HTTP_TIMEOUT_MS);
    connection.connect();
    final int responseCode=connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      reader=new InputStreamReader(new BufferedInputStream(connection.getInputStream(),1024),Constants.UTF_8);
      final StringBuilder content=new StringBuilder();
      Io.copy(reader,content);
      final Map<String,ExchangeRate> rates=new TreeMap<String,ExchangeRate>();
      final JSONObject head=new JSONObject(content.toString());
      for (final Iterator<String> i=head.keys(); i.hasNext(); ) {
        final String currencyCode=i.next();
        if (!""String_Node_Str"".equals(currencyCode)) {
          final JSONObject o=head.getJSONObject(currencyCode);
          for (          final String field : fields) {
            String rateStr=o.optString(field,null);
            if (rateStr != null) {
              try {
                double rateForBTC=Double.parseDouble(rateStr);
                rateStr=String.format(""String_Node_Str"",rateForBTC * btcRate).replace(""String_Node_Str"",""String_Node_Str"");
                final BigInteger rate=GenericUtils.toNanoCoins(rateStr,0);
                if (rate.signum() > 0) {
                  rates.put(currencyCode,new ExchangeRate(currencyCode,rate,url.getHost()));
                  break;
                }
              }
 catch (              final ArithmeticException x) {
                log.warn(""String_Node_Str"",new Object[]{currencyCode,url,x.getMessage()});
              }
            }
          }
        }
      }
      log.info(""String_Node_Str"",url,(System.currentTimeMillis() - start));
      if (rates.size() == 0) {
        int i=0;
        i++;
      }
 else {
        rates.put(CoinDefinition.cryptsyMarketCurrency,new ExchangeRate(CoinDefinition.cryptsyMarketCurrency,GenericUtils.toNanoCoins(String.format(""String_Node_Str"",btcRate).replace(""String_Node_Str"",""String_Node_Str""),0),cryptsyValue ? ""String_Node_Str"" : ""String_Node_Str""));
        rates.put(""String_Node_Str"" + CoinDefinition.cryptsyMarketCurrency,new ExchangeRate(""String_Node_Str"" + CoinDefinition.cryptsyMarketCurrency,GenericUtils.toNanoCoins(String.format(""String_Node_Str"",btcRate * 1000).replace(""String_Node_Str"",""String_Node_Str""),0),cryptsyValue ? ""String_Node_Str"" : ""String_Node_Str""));
      }
      return rates;
    }
 else {
      log.warn(""String_Node_Str"",responseCode,url);
    }
  }
 catch (  final Exception x) {
    log.warn(""String_Node_Str"" + url,x);
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      final IOException x) {
      }
    }
    if (connection != null)     connection.disconnect();
  }
  return null;
}",0.9931807849674194
124513,"public static ExchangeRate getExchangeRate(final Cursor cursor){
  final String currencyCode=cursor.getString(cursor.getColumnIndexOrThrow(ExchangeRatesProvider.KEY_CURRENCY_CODE));
  final double rate=cursor.getDouble(cursor.getColumnIndexOrThrow(ExchangeRatesProvider.KEY_RATE));
  final String source=cursor.getString(cursor.getColumnIndexOrThrow(ExchangeRatesProvider.KEY_SOURCE));
  return new ExchangeRate(currencyCode,rate,source);
}","public static ExchangeRate getExchangeRate(final Cursor cursor){
  final String currencyCode=cursor.getString(cursor.getColumnIndexOrThrow(ExchangeRatesProvider.KEY_CURRENCY_CODE));
  final BigInteger rate=BigInteger.valueOf(cursor.getLong(cursor.getColumnIndexOrThrow(ExchangeRatesProvider.KEY_RATE)));
  final String source=cursor.getString(cursor.getColumnIndexOrThrow(ExchangeRatesProvider.KEY_SOURCE));
  return new ExchangeRate(currencyCode,rate,source);
}",0.926829268292683
124514,"private static Map<String,ExchangeRate> getBitcoinCharts(){
  try {
    final URL URL=new URL(""String_Node_Str"");
    final URLConnection connection=URL.openConnection();
    connection.connect();
    final StringBuilder content=new StringBuilder();
    Reader reader=null;
    try {
      reader=new InputStreamReader(new BufferedInputStream(connection.getInputStream(),1024));
      IOUtils.copy(reader,content);
      final Map<String,ExchangeRate> rates=new TreeMap<String,ExchangeRate>();
      final JSONObject head=new JSONObject(content.toString());
      for (final Iterator<String> i=head.keys(); i.hasNext(); ) {
        final String currencyCode=i.next();
        if (!""String_Node_Str"".equals(currencyCode)) {
          final JSONObject o=head.getJSONObject(currencyCode);
          double rate=o.optDouble(""String_Node_Str"",0);
          if (rate == 0)           rate=o.optDouble(""String_Node_Str"",0);
          if (rate == 0)           rate=o.optDouble(""String_Node_Str"",0);
          if (rate != 0)           rates.put(currencyCode,new ExchangeRate(currencyCode,rate,URL.getHost()));
        }
      }
      return rates;
    }
  finally {
      if (reader != null)       reader.close();
    }
  }
 catch (  final IOException x) {
    x.printStackTrace();
  }
catch (  final JSONException x) {
    x.printStackTrace();
  }
  return null;
}","private static Map<String,ExchangeRate> getBitcoinCharts(){
  try {
    final URL URL=new URL(""String_Node_Str"");
    final URLConnection connection=URL.openConnection();
    connection.connect();
    final StringBuilder content=new StringBuilder();
    Reader reader=null;
    try {
      reader=new InputStreamReader(new BufferedInputStream(connection.getInputStream(),1024));
      IOUtils.copy(reader,content);
      final Map<String,ExchangeRate> rates=new TreeMap<String,ExchangeRate>();
      final JSONObject head=new JSONObject(content.toString());
      for (final Iterator<String> i=head.keys(); i.hasNext(); ) {
        final String currencyCode=i.next();
        if (!""String_Node_Str"".equals(currencyCode)) {
          final JSONObject o=head.getJSONObject(currencyCode);
          String rate=o.optString(""String_Node_Str"",null);
          if (rate == null)           rate=o.optString(""String_Node_Str"",null);
          if (rate == null)           rate=o.optString(""String_Node_Str"",null);
          if (rate != null)           rates.put(currencyCode,new ExchangeRate(currencyCode,Utils.toNanoCoins(rate),URL.getHost()));
        }
      }
      return rates;
    }
  finally {
      if (reader != null)       reader.close();
    }
  }
 catch (  final IOException x) {
    x.printStackTrace();
  }
catch (  final JSONException x) {
    x.printStackTrace();
  }
  return null;
}",0.8853294503094284
124515,"public ExchangeRate(final String currencyCode,final double rate,final String source){
  this.currencyCode=currencyCode;
  this.rate=rate;
  this.source=source;
}","public ExchangeRate(final String currencyCode,final BigInteger rate,final String source){
  this.currencyCode=currencyCode;
  this.rate=rate;
  this.source=source;
}",0.9570552147239264
124516,"private static Map<String,ExchangeRate> getBlockchainInfo(){
  try {
    final URL URL=new URL(""String_Node_Str"");
    final URLConnection connection=URL.openConnection();
    connection.connect();
    final StringBuilder content=new StringBuilder();
    Reader reader=null;
    try {
      reader=new InputStreamReader(new BufferedInputStream(connection.getInputStream(),1024));
      IOUtils.copy(reader,content);
      final Map<String,ExchangeRate> rates=new TreeMap<String,ExchangeRate>();
      final JSONObject head=new JSONObject(content.toString());
      for (final Iterator<String> i=head.keys(); i.hasNext(); ) {
        final String currencyCode=i.next();
        final JSONObject o=head.getJSONObject(currencyCode);
        final double rate=o.optDouble(""String_Node_Str"",0);
        if (rate != 0)         rates.put(currencyCode,new ExchangeRate(currencyCode,rate,URL.getHost()));
      }
      return rates;
    }
  finally {
      if (reader != null)       reader.close();
    }
  }
 catch (  final IOException x) {
    x.printStackTrace();
  }
catch (  final JSONException x) {
    x.printStackTrace();
  }
  return null;
}","private static Map<String,ExchangeRate> getBlockchainInfo(){
  try {
    final URL URL=new URL(""String_Node_Str"");
    final URLConnection connection=URL.openConnection();
    connection.connect();
    final StringBuilder content=new StringBuilder();
    Reader reader=null;
    try {
      reader=new InputStreamReader(new BufferedInputStream(connection.getInputStream(),1024));
      IOUtils.copy(reader,content);
      final Map<String,ExchangeRate> rates=new TreeMap<String,ExchangeRate>();
      final JSONObject head=new JSONObject(content.toString());
      for (final Iterator<String> i=head.keys(); i.hasNext(); ) {
        final String currencyCode=i.next();
        final JSONObject o=head.getJSONObject(currencyCode);
        final String rate=o.optString(""String_Node_Str"",null);
        if (rate != null)         rates.put(currencyCode,new ExchangeRate(currencyCode,Utils.toNanoCoins(rate),URL.getHost()));
      }
      return rates;
    }
  finally {
      if (reader != null)       reader.close();
    }
  }
 catch (  final IOException x) {
    x.printStackTrace();
  }
catch (  final JSONException x) {
    x.printStackTrace();
  }
  return null;
}",0.964022540095362
124517,"@Override public Cursor query(final Uri uri,final String[] projection,final String selection,final String[] selectionArgs,final String sortOrder){
  final long now=System.currentTimeMillis();
  if (exchangeRates == null || now - lastUpdated > UPDATE_FREQ_MS) {
    Map<String,ExchangeRate> newExchangeRates=getBitcoinCharts();
    if (exchangeRates == null && newExchangeRates == null)     newExchangeRates=getBlockchainInfo();
    if (newExchangeRates != null) {
      exchangeRates=newExchangeRates;
      lastUpdated=now;
    }
  }
  if (exchangeRates == null)   return null;
  final MatrixCursor cursor=new MatrixCursor(new String[]{BaseColumns._ID,KEY_CURRENCY_CODE,KEY_RATE,KEY_SOURCE});
  if (selection == null) {
    for (    final Map.Entry<String,ExchangeRate> entry : exchangeRates.entrySet()) {
      final ExchangeRate rate=entry.getValue();
      cursor.newRow().add(entry.getKey().hashCode()).add(rate.currencyCode).add(rate.rate).add(rate.source);
    }
  }
 else   if (selection.equals(KEY_CURRENCY_CODE)) {
    final String code=selectionArgs[0];
    final ExchangeRate rate=exchangeRates.get(code);
    cursor.newRow().add(code.hashCode()).add(rate.currencyCode).add(rate.rate).add(rate.source);
  }
  return cursor;
}","@Override public Cursor query(final Uri uri,final String[] projection,final String selection,final String[] selectionArgs,final String sortOrder){
  final long now=System.currentTimeMillis();
  if (exchangeRates == null || now - lastUpdated > UPDATE_FREQ_MS) {
    Map<String,ExchangeRate> newExchangeRates=getBitcoinCharts();
    if (exchangeRates == null && newExchangeRates == null)     newExchangeRates=getBlockchainInfo();
    if (newExchangeRates != null) {
      exchangeRates=newExchangeRates;
      lastUpdated=now;
    }
  }
  if (exchangeRates == null)   return null;
  final MatrixCursor cursor=new MatrixCursor(new String[]{BaseColumns._ID,KEY_CURRENCY_CODE,KEY_RATE,KEY_SOURCE});
  if (selection == null) {
    for (    final Map.Entry<String,ExchangeRate> entry : exchangeRates.entrySet()) {
      final ExchangeRate rate=entry.getValue();
      cursor.newRow().add(entry.getKey().hashCode()).add(rate.currencyCode).add(rate.rate.longValue()).add(rate.source);
    }
  }
 else   if (selection.equals(KEY_CURRENCY_CODE)) {
    final String code=selectionArgs[0];
    final ExchangeRate rate=exchangeRates.get(code);
    cursor.newRow().add(code.hashCode()).add(rate.currencyCode).add(rate.rate.longValue()).add(rate.source);
  }
  return cursor;
}",0.9903923138510808
124518,"@Override public Dialog onCreateDialog(final Bundle savedInstanceState){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(activity);
  exchangeCurrency=prefs.getString(Constants.PREFS_KEY_EXCHANGE_CURRENCY,Constants.DEFAULT_EXCHANGE_CURRENCY);
  final AlertDialog.Builder dialog=new AlertDialog.Builder(activity);
  dialog.setInverseBackgroundForced(true);
  dialog.setTitle(R.string.amount_calculator_dialog_title);
  final View view=inflater.inflate(R.layout.amount_calculator_dialog,null);
  btcAmountView=(CurrencyAmountView)view.findViewById(R.id.amount_calculator_row_btc);
  btcAmountView.setListener(new CurrencyAmountView.Listener(){
    public void changed(){
      if (btcAmountView.getAmount() != null) {
        exchangeDirection=true;
        updateAppearance();
      }
 else {
        localAmountView.setHint(null);
      }
    }
    public void done(){
      AmountCalculatorFragment.this.done();
    }
    public void focusChanged(    final boolean hasFocus){
    }
  }
);
  localAmountView=(CurrencyAmountView)view.findViewById(R.id.amount_calculator_row_local);
  localAmountView.setCurrencyCode(exchangeCurrency);
  localAmountView.setListener(new CurrencyAmountView.Listener(){
    public void changed(){
      if (localAmountView.getAmount() != null) {
        exchangeDirection=false;
        updateAppearance();
      }
 else {
        btcAmountView.setHint(null);
      }
    }
    public void done(){
      AmountCalculatorFragment.this.done();
    }
    public void focusChanged(    final boolean hasFocus){
    }
  }
);
  exchangeRateView=(TextView)view.findViewById(R.id.amount_calculator_rate);
  dialog.setView(view);
  dialog.setPositiveButton(R.string.amount_calculator_dialog_button_use,new DialogInterface.OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int whichButton){
      done();
    }
  }
);
  dialog.setNegativeButton(R.string.button_cancel,new DialogInterface.OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int whichButton){
      dismiss();
    }
  }
);
  updateAppearance();
  getLoaderManager().initLoader(0,null,this);
  return dialog.create();
}","@Override public Dialog onCreateDialog(final Bundle savedInstanceState){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(activity);
  exchangeCurrency=prefs.getString(Constants.PREFS_KEY_EXCHANGE_CURRENCY,Constants.DEFAULT_EXCHANGE_CURRENCY);
  final AlertDialog.Builder dialog=new AlertDialog.Builder(activity);
  dialog.setInverseBackgroundForced(true);
  dialog.setTitle(R.string.amount_calculator_dialog_title);
  final View view=inflater.inflate(R.layout.amount_calculator_dialog,null);
  btcAmountView=(CurrencyAmountView)view.findViewById(R.id.amount_calculator_row_btc);
  btcAmountView.setListener(new CurrencyAmountView.Listener(){
    public void changed(){
      if (btcAmountView.getAmount() != null) {
        exchangeDirection=true;
        updateAppearance();
      }
 else {
        localAmountView.setHint(null);
      }
    }
    public void done(){
      AmountCalculatorFragment.this.done();
    }
    public void focusChanged(    final boolean hasFocus){
    }
  }
);
  localAmountView=(CurrencyAmountView)view.findViewById(R.id.amount_calculator_row_local);
  localAmountView.setCurrencyCode(exchangeCurrency);
  localAmountView.setPrecision(Constants.LOCAL_PRECISION);
  localAmountView.setListener(new CurrencyAmountView.Listener(){
    public void changed(){
      if (localAmountView.getAmount() != null) {
        exchangeDirection=false;
        updateAppearance();
      }
 else {
        btcAmountView.setHint(null);
      }
    }
    public void done(){
      AmountCalculatorFragment.this.done();
    }
    public void focusChanged(    final boolean hasFocus){
    }
  }
);
  exchangeRateView=(TextView)view.findViewById(R.id.amount_calculator_rate);
  dialog.setView(view);
  dialog.setPositiveButton(R.string.amount_calculator_dialog_button_use,new DialogInterface.OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int whichButton){
      done();
    }
  }
);
  dialog.setNegativeButton(R.string.button_cancel,new DialogInterface.OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int whichButton){
      dismiss();
    }
  }
);
  updateAppearance();
  getLoaderManager().initLoader(0,null,this);
  return dialog.create();
}",0.9867742658596728
124519,"private void updateAppearance(){
  if (exchangeRate != null) {
    localAmountView.setEnabled(true);
    final BigDecimal bdRate=new BigDecimal(exchangeRate.rate);
    if (exchangeDirection) {
      final BigInteger btcAmount=btcAmountView.getAmount();
      if (btcAmount != null) {
        localAmountView.setAmount(null);
        localAmountView.setHint(new BigDecimal(btcAmount).multiply(bdRate).toBigInteger());
        btcAmountView.setHint(null);
      }
    }
 else {
      final BigInteger localAmount=localAmountView.getAmount();
      if (localAmount != null) {
        btcAmountView.setAmount(null);
        btcAmountView.setHint(new BigDecimal(localAmount).divide(bdRate,RoundingMode.HALF_UP).toBigInteger());
        localAmountView.setHint(null);
      }
    }
    exchangeRateView.setText(getString(R.string.amount_calculator_dialog_exchange_rate,exchangeCurrency,WalletUtils.formatValue(WalletUtils.localValue(Utils.COIN,bdRate)),exchangeRate.source));
  }
 else {
    localAmountView.setEnabled(false);
    exchangeRateView.setText(R.string.amount_calculator_dialog_exchange_rate_not_available);
  }
}","private void updateAppearance(){
  if (exchangeRate != null) {
    localAmountView.setEnabled(true);
    if (exchangeDirection) {
      final BigInteger btcAmount=btcAmountView.getAmount();
      if (btcAmount != null) {
        localAmountView.setAmount(null);
        localAmountView.setHint(WalletUtils.localValue(btcAmount,exchangeRate.rate));
        btcAmountView.setHint(null);
      }
    }
 else {
      final BigInteger localAmount=localAmountView.getAmount();
      if (localAmount != null) {
        btcAmountView.setAmount(null);
        btcAmountView.setHint(WalletUtils.btcValue(localAmount,exchangeRate.rate));
        localAmountView.setHint(null);
      }
    }
    exchangeRateView.setText(getString(R.string.amount_calculator_dialog_exchange_rate,exchangeCurrency,WalletUtils.formatValue(WalletUtils.localValue(Utils.COIN,exchangeRate.rate)),exchangeRate.source));
  }
 else {
    localAmountView.setEnabled(false);
    exchangeRateView.setText(R.string.amount_calculator_dialog_exchange_rate_not_available);
  }
}",0.8732001857872735
124520,"private void done(){
  final BigInteger amount=exchangeDirection ? btcAmountView.getAmount() : new BigDecimal(localAmountView.getAmount()).divide(new BigDecimal(exchangeRate.rate),RoundingMode.HALF_UP).toBigInteger();
  ((Listener)getTargetFragment()).useCalculatedAmount(amount);
  dismiss();
}","private void done(){
  final BigInteger amount=exchangeDirection ? btcAmountView.getAmount() : WalletUtils.btcValue(localAmountView.getAmount(),exchangeRate.rate);
  ((Listener)getTargetFragment()).useCalculatedAmount(amount);
  dismiss();
}",0.4701492537313433
124521,"public void setHint(final BigInteger amount){
  final SpannableStringBuilder hint;
  if (amount != null)   hint=new SpannableStringBuilder(WalletUtils.formatValue(amount));
 else   hint=new SpannableStringBuilder(""String_Node_Str"");
  WalletUtils.formatSignificant(hint,smallerInsignificant);
  textView.setHint(hint);
}","public void setHint(final BigInteger amount){
  final SpannableStringBuilder hint;
  if (amount != null)   hint=new SpannableStringBuilder(WalletUtils.formatValue(amount,precision));
 else   hint=new SpannableStringBuilder(""String_Node_Str"");
  WalletUtils.formatSignificant(hint,smallerInsignificant);
  textView.setHint(hint);
}",0.9846153846153848
124522,"public void setAmount(final BigInteger amount){
  if (amount != null)   textView.setText(amountSigned ? WalletUtils.formatValue(amount,Constants.CURRENCY_PLUS_SIGN,Constants.CURRENCY_MINUS_SIGN) : WalletUtils.formatValue(amount));
 else   textView.setText(null);
}","public void setAmount(final BigInteger amount){
  if (amount != null)   textView.setText(amountSigned ? WalletUtils.formatValue(amount,Constants.CURRENCY_PLUS_SIGN,Constants.CURRENCY_MINUS_SIGN,precision) : WalletUtils.formatValue(amount,precision));
 else   textView.setText(null);
}",0.9635036496350364
124523,"@Override public void bindView(final View view,final Context context,final Cursor cursor){
  final ExchangeRate exchangeRate=ExchangeRatesProvider.getExchangeRate(cursor);
  final BigDecimal bdRate=new BigDecimal(exchangeRate.rate);
  final boolean isDefaultCurrency=exchangeRate.currencyCode.equals(defaultCurrency);
  view.setBackgroundResource(isDefaultCurrency ? R.color.bg_less_bright : R.color.bg_bright);
  final View defaultView=view.findViewById(R.id.exchange_rate_row_default);
  defaultView.setVisibility(isDefaultCurrency ? View.VISIBLE : View.INVISIBLE);
  final TextView currencyCodeView=(TextView)view.findViewById(R.id.exchange_rate_row_currency_code);
  currencyCodeView.setText(exchangeRate.currencyCode);
  final CurrencyAmountView rateView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_rate);
  rateView.setCurrencyCode(null);
  rateView.setAmount(WalletUtils.localValue(Utils.COIN,bdRate));
  final CurrencyAmountView walletView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_balance);
  walletView.setCurrencyCode(null);
  walletView.setAmount(WalletUtils.localValue(balance,bdRate));
  walletView.setStrikeThru(Constants.TEST);
  walletView.setTextColor(getResources().getColor(R.color.fg_less_significant));
}","@Override public void bindView(final View view,final Context context,final Cursor cursor){
  final ExchangeRate exchangeRate=ExchangeRatesProvider.getExchangeRate(cursor);
  final boolean isDefaultCurrency=exchangeRate.currencyCode.equals(defaultCurrency);
  view.setBackgroundResource(isDefaultCurrency ? R.color.bg_less_bright : R.color.bg_bright);
  final View defaultView=view.findViewById(R.id.exchange_rate_row_default);
  defaultView.setVisibility(isDefaultCurrency ? View.VISIBLE : View.INVISIBLE);
  final TextView currencyCodeView=(TextView)view.findViewById(R.id.exchange_rate_row_currency_code);
  currencyCodeView.setText(exchangeRate.currencyCode);
  final CurrencyAmountView rateView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_rate);
  rateView.setCurrencyCode(null);
  rateView.setPrecision(Constants.LOCAL_PRECISION);
  rateView.setAmount(WalletUtils.localValue(Utils.COIN,exchangeRate.rate));
  final CurrencyAmountView walletView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_balance);
  walletView.setCurrencyCode(null);
  walletView.setPrecision(Constants.LOCAL_PRECISION);
  walletView.setAmount(WalletUtils.localValue(balance,exchangeRate.rate));
  walletView.setStrikeThru(Constants.TEST);
  walletView.setTextColor(getResources().getColor(R.color.fg_less_significant));
}",0.9224237746043998
124524,"@Override public void onActivityCreated(final Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setEmptyText(getString(R.string.exchange_rates_fragment_empty_text));
  adapter=new ResourceCursorAdapter(activity,R.layout.exchange_rate_row,null,true){
    @Override public void bindView(    final View view,    final Context context,    final Cursor cursor){
      final ExchangeRate exchangeRate=ExchangeRatesProvider.getExchangeRate(cursor);
      final BigDecimal bdRate=new BigDecimal(exchangeRate.rate);
      final boolean isDefaultCurrency=exchangeRate.currencyCode.equals(defaultCurrency);
      view.setBackgroundResource(isDefaultCurrency ? R.color.bg_less_bright : R.color.bg_bright);
      final View defaultView=view.findViewById(R.id.exchange_rate_row_default);
      defaultView.setVisibility(isDefaultCurrency ? View.VISIBLE : View.INVISIBLE);
      final TextView currencyCodeView=(TextView)view.findViewById(R.id.exchange_rate_row_currency_code);
      currencyCodeView.setText(exchangeRate.currencyCode);
      final CurrencyAmountView rateView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_rate);
      rateView.setCurrencyCode(null);
      rateView.setAmount(WalletUtils.localValue(Utils.COIN,bdRate));
      final CurrencyAmountView walletView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_balance);
      walletView.setCurrencyCode(null);
      walletView.setAmount(WalletUtils.localValue(balance,bdRate));
      walletView.setStrikeThru(Constants.TEST);
      walletView.setTextColor(getResources().getColor(R.color.fg_less_significant));
    }
  }
;
  setListAdapter(adapter);
  getLoaderManager().initLoader(0,null,this);
}","@Override public void onActivityCreated(final Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setEmptyText(getString(R.string.exchange_rates_fragment_empty_text));
  adapter=new ResourceCursorAdapter(activity,R.layout.exchange_rate_row,null,true){
    @Override public void bindView(    final View view,    final Context context,    final Cursor cursor){
      final ExchangeRate exchangeRate=ExchangeRatesProvider.getExchangeRate(cursor);
      final boolean isDefaultCurrency=exchangeRate.currencyCode.equals(defaultCurrency);
      view.setBackgroundResource(isDefaultCurrency ? R.color.bg_less_bright : R.color.bg_bright);
      final View defaultView=view.findViewById(R.id.exchange_rate_row_default);
      defaultView.setVisibility(isDefaultCurrency ? View.VISIBLE : View.INVISIBLE);
      final TextView currencyCodeView=(TextView)view.findViewById(R.id.exchange_rate_row_currency_code);
      currencyCodeView.setText(exchangeRate.currencyCode);
      final CurrencyAmountView rateView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_rate);
      rateView.setCurrencyCode(null);
      rateView.setPrecision(Constants.LOCAL_PRECISION);
      rateView.setAmount(WalletUtils.localValue(Utils.COIN,exchangeRate.rate));
      final CurrencyAmountView walletView=(CurrencyAmountView)view.findViewById(R.id.exchange_rate_row_balance);
      walletView.setCurrencyCode(null);
      walletView.setPrecision(Constants.LOCAL_PRECISION);
      walletView.setAmount(WalletUtils.localValue(balance,exchangeRate.rate));
      walletView.setStrikeThru(Constants.TEST);
      walletView.setTextColor(getResources().getColor(R.color.fg_less_significant));
    }
  }
;
  setListAdapter(adapter);
  getLoaderManager().initLoader(0,null,this);
}",0.9387755102040816
124525,"@Override public void onViewCreated(final View view,final Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  viewBalance=(CurrencyAmountView)view.findViewById(R.id.wallet_balance);
  viewBalanceLocal=(CurrencyAmountView)view.findViewById(R.id.wallet_balance_local);
  viewBalanceLocal.setSmallerInsignificant(false);
  viewBalanceLocal.setStrikeThru(Constants.TEST);
}","@Override public void onViewCreated(final View view,final Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  viewBalance=(CurrencyAmountView)view.findViewById(R.id.wallet_balance);
  viewBalanceLocal=(CurrencyAmountView)view.findViewById(R.id.wallet_balance_local);
  viewBalanceLocal.setPrecision(Constants.LOCAL_PRECISION);
  viewBalanceLocal.setSmallerInsignificant(false);
  viewBalanceLocal.setStrikeThru(Constants.TEST);
}",0.9294117647058824
124526,"private void updateView(){
  if (!showLocalBalance)   viewBalanceLocal.setVisibility(View.GONE);
  if (balance != null) {
    viewBalance.setVisibility(View.VISIBLE);
    viewBalance.setAmount(balance);
    if (showLocalBalance) {
      if (exchangeRate != null) {
        final BigInteger balance=wallet.getBalance(BalanceType.ESTIMATED);
        final BigDecimal bdRate=new BigDecimal(exchangeRate.rate);
        final BigInteger localValue=WalletUtils.localValue(balance,bdRate);
        viewBalanceLocal.setVisibility(View.VISIBLE);
        viewBalanceLocal.setCurrencyCode(Constants.PREFIX_ALMOST_EQUAL_TO + exchangeRate.currencyCode);
        viewBalanceLocal.setAmount(localValue);
        viewBalanceLocal.setTextColor(getResources().getColor(R.color.fg_less_significant));
      }
 else {
        viewBalanceLocal.setVisibility(View.INVISIBLE);
      }
    }
  }
 else {
    viewBalance.setVisibility(View.INVISIBLE);
  }
}","private void updateView(){
  if (!showLocalBalance)   viewBalanceLocal.setVisibility(View.GONE);
  if (balance != null) {
    viewBalance.setVisibility(View.VISIBLE);
    viewBalance.setAmount(balance);
    if (showLocalBalance) {
      if (exchangeRate != null) {
        final BigInteger balance=wallet.getBalance(BalanceType.ESTIMATED);
        final BigInteger localValue=WalletUtils.localValue(balance,exchangeRate.rate);
        viewBalanceLocal.setVisibility(View.VISIBLE);
        viewBalanceLocal.setCurrencyCode(Constants.PREFIX_ALMOST_EQUAL_TO + exchangeRate.currencyCode);
        viewBalanceLocal.setAmount(localValue);
        viewBalanceLocal.setTextColor(getResources().getColor(R.color.fg_less_significant));
      }
 else {
        viewBalanceLocal.setVisibility(View.INVISIBLE);
      }
    }
  }
 else {
    viewBalance.setVisibility(View.INVISIBLE);
  }
}",0.9546460176991152
124527,"public static String formatValue(final BigInteger value,final String plusSign,final String minusSign){
  final boolean negative=value.compareTo(BigInteger.ZERO) < 0;
  final BigInteger absValue=value.abs();
  final String sign=negative ? minusSign : plusSign;
  final int coins=absValue.divide(Utils.COIN).intValue();
  final int cents=absValue.remainder(Utils.COIN).intValue();
  if (cents % 1000000 == 0)   return String.format(Locale.US,""String_Node_Str"",sign,coins,cents / 1000000);
 else   if (cents % 10000 == 0)   return String.format(Locale.US,""String_Node_Str"",sign,coins,cents / 10000);
 else   return String.format(Locale.US,""String_Node_Str"",sign,coins,cents);
}","public static String formatValue(final BigInteger value,final String plusSign,final String minusSign,final int precision){
  final boolean negative=value.compareTo(BigInteger.ZERO) < 0;
  final BigInteger absValue=value.abs();
  final String sign=negative ? minusSign : plusSign;
  final int coins=absValue.divide(Utils.COIN).intValue();
  final int cents=absValue.remainder(Utils.COIN).intValue();
  if (cents % 1000000 == 0 || precision <= 2)   return String.format(Locale.US,""String_Node_Str"",sign,coins,cents / 1000000);
 else   if (cents % 10000 == 0 || precision <= 4)   return String.format(Locale.US,""String_Node_Str"",sign,coins,cents / 10000);
 else   return String.format(Locale.US,""String_Node_Str"",sign,coins,cents);
}",0.96011396011396
124528,"public static BigInteger localValue(final BigInteger btcValue,final BigDecimal exchangeRate){
  final BigDecimal value=new BigDecimal(btcValue).multiply(exchangeRate);
  final BigDecimal remainder=value.remainder(LOCAL_VALUE_PRECISION);
  return value.subtract(remainder).toBigInteger();
}","public static BigInteger localValue(final BigInteger btcValue,final BigInteger rate){
  return btcValue.multiply(rate).divide(Utils.COIN);
}",0.5547785547785548
124529,"public void onClick(final DialogInterface dialog,final int which){
  stackTraceFile.delete();
  dialog.dismiss();
}","public void onClick(final DialogInterface dialog,final int which){
  stackTraceFile.delete();
}",0.9047619047619048
124530,"public synchronized void check(final Context context){
  if (!stackTraceFile.exists())   return;
  final Builder builder=new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(DIALOG_TITLE).setMessage(DIALOG_MESSAGE);
  builder.setPositiveButton(""String_Node_Str"",new OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int which){
      sendError(context);
      stackTraceFile.delete();
    }
  }
);
  builder.setNegativeButton(""String_Node_Str"",new OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int which){
      stackTraceFile.delete();
      dialog.dismiss();
    }
  }
);
  try {
    builder.show();
  }
 catch (  final Exception x) {
  }
}","public synchronized void check(final Context context){
  if (!stackTraceFile.exists())   return;
  final Builder builder=new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(DIALOG_TITLE).setMessage(DIALOG_MESSAGE);
  builder.setPositiveButton(""String_Node_Str"",new OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int which){
      sendError(context);
      stackTraceFile.delete();
    }
  }
);
  builder.setNegativeButton(""String_Node_Str"",new OnClickListener(){
    public void onClick(    final DialogInterface dialog,    final int which){
      stackTraceFile.delete();
    }
  }
);
  builder.setOnCancelListener(new OnCancelListener(){
    public void onCancel(    final DialogInterface dialog){
      stackTraceFile.delete();
    }
  }
);
  try {
    builder.show();
  }
 catch (  final Exception x) {
  }
}",0.8985330073349633
124531,"public synchronized void uncaughtException(final Thread t,final Throwable e){
  report.append(""String_Node_Str"");
  report.append(""String_Node_Str"" + getTotalInternalMemorySize() + ""String_Node_Str"");
  report.append(""String_Node_Str"" + getAvailableInternalMemorySize() + ""String_Node_Str"");
  report.append(""String_Node_Str"");
  final Writer result=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(result);
  e.printStackTrace(printWriter);
  final String stacktrace=result.toString();
  report.append(stacktrace + ""String_Node_Str"");
  Throwable cause=e.getCause();
  while (cause != null) {
    cause.printStackTrace(printWriter);
    report.append(""String_Node_Str"");
    report.append(result.toString() + ""String_Node_Str"");
    cause=cause.getCause();
  }
  printWriter.close();
  report.append(""String_Node_Str"" + filesDir + ""String_Node_Str"");
  appendReport(report,filesDir,0);
  report.append(""String_Node_Str"" + cacheDir + ""String_Node_Str"");
  appendReport(report,cacheDir,0);
  Process process=null;
  try {
    process=Runtime.getRuntime().exec(""String_Node_Str"");
    final BufferedReader logReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    report.append('\n');
    String line;
    while ((line=logReader.readLine()) != null)     report.append(line).append('\n');
    logReader.close();
  }
 catch (  final IOException x) {
    x.printStackTrace();
  }
 finally {
    if (process != null)     process.destroy();
  }
  saveAsFile(report.toString());
  previousHandler.uncaughtException(t,e);
}","public synchronized void uncaughtException(final Thread t,final Throwable e){
  Process process=null;
  try {
    report.append(""String_Node_Str"");
    report.append(""String_Node_Str"" + getTotalInternalMemorySize() + ""String_Node_Str"");
    report.append(""String_Node_Str"" + getAvailableInternalMemorySize() + ""String_Node_Str"");
    report.append(""String_Node_Str"");
    final Writer result=new StringWriter();
    final PrintWriter printWriter=new PrintWriter(result);
    e.printStackTrace(printWriter);
    final String stacktrace=result.toString();
    report.append(stacktrace + ""String_Node_Str"");
    Throwable cause=e.getCause();
    while (cause != null) {
      cause.printStackTrace(printWriter);
      report.append(""String_Node_Str"");
      report.append(result.toString() + ""String_Node_Str"");
      cause=cause.getCause();
    }
    printWriter.close();
    report.append(""String_Node_Str"" + filesDir + ""String_Node_Str"");
    appendReport(report,filesDir,0);
    report.append(""String_Node_Str"" + cacheDir + ""String_Node_Str"");
    appendReport(report,cacheDir,0);
    process=Runtime.getRuntime().exec(""String_Node_Str"");
    final BufferedReader logReader=new BufferedReader(new InputStreamReader(process.getInputStream()));
    report.append('\n');
    String line;
    while ((line=logReader.readLine()) != null)     report.append(line).append('\n');
    logReader.close();
    saveAsFile(report.toString());
  }
 catch (  final Exception x) {
    x.printStackTrace();
  }
 finally {
    if (process != null)     process.destroy();
  }
  previousHandler.uncaughtException(t,e);
}",0.9442685243825206
124532,"private void loadWalletFromProtobuf(){
  if (walletFile.exists()) {
    final long start=System.currentTimeMillis();
    FileInputStream walletStream=null;
    try {
      walletStream=new FileInputStream(walletFile);
      final WalletProtobufSerializer walletSerializer=new WalletProtobufSerializer();
      final File blockChainFile=new File(getDir(""String_Node_Str"",Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE),Constants.BLOCKCHAIN_FILENAME);
      if (blockChainFile.exists()) {
        try {
          final BlockStore blockStore=new BoundedOverheadBlockStore(Constants.NETWORK_PARAMETERS,blockChainFile);
          walletSerializer.setChainHeight(blockStore.getChainHead().getHeight());
          blockStore.close();
        }
 catch (        final BlockStoreException x) {
          x.printStackTrace();
        }
      }
      wallet=walletSerializer.readWallet(walletStream);
    }
 catch (    final IOException x) {
      x.printStackTrace();
      Toast.makeText(WalletApplication.this,x.getClass().getName(),Toast.LENGTH_LONG).show();
      wallet=restoreWalletFromBackup();
    }
catch (    final IllegalStateException x) {
      x.printStackTrace();
      Toast.makeText(WalletApplication.this,x.getClass().getName(),Toast.LENGTH_LONG).show();
      wallet=restoreWalletFromBackup();
    }
 finally {
      if (walletStream != null) {
        try {
          walletStream.close();
        }
 catch (        final IOException x) {
          x.printStackTrace();
        }
      }
    }
    if (!wallet.isConsistent()) {
      Toast.makeText(this,""String_Node_Str"" + walletFile,Toast.LENGTH_LONG).show();
      wallet=restoreWalletFromBackup();
    }
    if (!wallet.getParams().equals(Constants.NETWORK_PARAMETERS))     throw new Error(""String_Node_Str"" + wallet.getParams().getId());
    System.out.println(""String_Node_Str"" + walletFile + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  }
 else {
    try {
      wallet=restoreWalletFromSnapshot();
    }
 catch (    final FileNotFoundException x) {
      wallet=new Wallet(Constants.NETWORK_PARAMETERS);
      wallet.addKey(new ECKey());
      try {
        protobufSerializeWallet(wallet);
        System.out.println(""String_Node_Str"" + walletFile + ""String_Node_Str"");
      }
 catch (      final IOException x2) {
        throw new Error(""String_Node_Str"",x2);
      }
    }
  }
}","private void loadWalletFromProtobuf(){
  if (walletFile.exists()) {
    final long start=System.currentTimeMillis();
    FileInputStream walletStream=null;
    try {
      walletStream=new FileInputStream(walletFile);
      final WalletProtobufSerializer walletSerializer=new WalletProtobufSerializer();
      final File blockChainFile=new File(getDir(""String_Node_Str"",Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE),Constants.BLOCKCHAIN_FILENAME);
      if (blockChainFile.exists()) {
        try {
          final BlockStore blockStore=new BoundedOverheadBlockStore(Constants.NETWORK_PARAMETERS,blockChainFile);
          walletSerializer.setChainHeight(blockStore.getChainHead().getHeight());
          blockStore.close();
        }
 catch (        final BlockStoreException x) {
          x.printStackTrace();
        }
      }
      wallet=walletSerializer.readWallet(walletStream);
      System.out.println(""String_Node_Str"" + walletFile + ""String_Node_Str""+ (System.currentTimeMillis() - start)+ ""String_Node_Str"");
    }
 catch (    final IOException x) {
      x.printStackTrace();
      Toast.makeText(WalletApplication.this,x.getClass().getName(),Toast.LENGTH_LONG).show();
      wallet=restoreWalletFromBackup();
    }
catch (    final IllegalStateException x) {
      x.printStackTrace();
      Toast.makeText(WalletApplication.this,x.getClass().getName(),Toast.LENGTH_LONG).show();
      wallet=restoreWalletFromBackup();
    }
 finally {
      if (walletStream != null) {
        try {
          walletStream.close();
        }
 catch (        final IOException x) {
          x.printStackTrace();
        }
      }
    }
    if (!wallet.isConsistent()) {
      Toast.makeText(this,""String_Node_Str"" + walletFile,Toast.LENGTH_LONG).show();
      wallet=restoreWalletFromBackup();
    }
    if (!wallet.getParams().equals(Constants.NETWORK_PARAMETERS))     throw new Error(""String_Node_Str"" + wallet.getParams().getId());
  }
 else {
    try {
      wallet=restoreWalletFromSnapshot();
    }
 catch (    final FileNotFoundException x) {
      wallet=new Wallet(Constants.NETWORK_PARAMETERS);
      wallet.addKey(new ECKey());
      try {
        protobufSerializeWallet(wallet);
        System.out.println(""String_Node_Str"" + walletFile + ""String_Node_Str"");
      }
 catch (      final IOException x2) {
        throw new Error(""String_Node_Str"",x2);
      }
    }
  }
}",0.9440967876512308
124533,"private Wallet restoreWalletFromBackup(){
  try {
    final Wallet wallet=readKeys(openFileInput(Constants.WALLET_KEY_BACKUP_BASE58));
    final File file=new File(getDir(""String_Node_Str"",Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE),Constants.BLOCKCHAIN_FILENAME);
    file.delete();
    Toast.makeText(this,R.string.toast_wallet_reset,Toast.LENGTH_LONG).show();
    return wallet;
  }
 catch (  final IOException x) {
    throw new RuntimeException(x);
  }
}","private Wallet restoreWalletFromBackup(){
  try {
    final Wallet wallet=readKeys(openFileInput(Constants.WALLET_KEY_BACKUP_BASE58));
    final File file=new File(getDir(""String_Node_Str"",Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE),Constants.BLOCKCHAIN_FILENAME);
    file.delete();
    Toast.makeText(this,R.string.toast_wallet_reset,Toast.LENGTH_LONG).show();
    System.out.println(""String_Node_Str"" + Constants.WALLET_KEY_BACKUP_BASE58 + ""String_Node_Str"");
    return wallet;
  }
 catch (  final IOException x) {
    throw new RuntimeException(x);
  }
}",0.9047619047619048
124534,"private Wallet restoreWalletFromSnapshot() throws FileNotFoundException {
  try {
    final Wallet wallet=readKeys(getAssets().open(Constants.WALLET_KEY_BACKUP_SNAPSHOT));
    System.out.println(""String_Node_Str"");
    return wallet;
  }
 catch (  final FileNotFoundException x) {
    throw x;
  }
catch (  final IOException x) {
    throw new RuntimeException(x);
  }
}","private Wallet restoreWalletFromSnapshot() throws FileNotFoundException {
  try {
    final Wallet wallet=readKeys(getAssets().open(Constants.WALLET_KEY_BACKUP_SNAPSHOT));
    System.out.println(""String_Node_Str"" + Constants.WALLET_KEY_BACKUP_SNAPSHOT + ""String_Node_Str"");
    return wallet;
  }
 catch (  final FileNotFoundException x) {
    throw x;
  }
catch (  final IOException x) {
    throw new RuntimeException(x);
  }
}",0.9261576971214016
124535,"/** 
 * Returns the time at which the block was solved and broadcast, according to the clock of the solving node. 
 */
public long getTime(){
  return time;
}","/** 
 * Returns the time in seconds at which the block was solved and broadcast, according to the clock of the solving node. 
 */
public long getTime(){
  return time;
}",0.9663608562691132
124536,"public int getMaxConnections(){
  return maxConnections;
}","public int getMaxConnections(){
  return peerPool.getMaximumPoolSize();
}",0.732824427480916
124537,"/** 
 * Create a PeerGroup
 */
public PeerGroup(BlockStore blockStore,NetworkParameters params,BlockChain chain,Wallet wallet,final PeerConnectionListener peerConnectionListener){
  this.maxConnections=DEFAULT_CONNECTIONS;
  this.blockStore=blockStore;
  this.params=params;
  this.chain=chain;
  this.wallet=wallet;
  this.peerConnectionListener=peerConnectionListener;
  inactives=new LinkedBlockingQueue<PeerAddress>();
  peers=Collections.synchronizedSet(new HashSet<Peer>());
  peerPool=new ThreadPoolExecutor(CORE_THREADS,this.maxConnections,THREAD_KEEP_ALIVE_SECONDS,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(1),new PeerGroupThreadFactory());
}","/** 
 * Create a PeerGroup
 */
public PeerGroup(BlockStore blockStore,NetworkParameters params,BlockChain chain,Wallet wallet,final PeerConnectionListener peerConnectionListener){
  this.blockStore=blockStore;
  this.params=params;
  this.chain=chain;
  this.wallet=wallet;
  this.peerConnectionListener=peerConnectionListener;
  inactives=new LinkedBlockingQueue<PeerAddress>();
  peers=Collections.synchronizedSet(new HashSet<Peer>());
  peerPool=new ThreadPoolExecutor(CORE_THREADS,DEFAULT_CONNECTIONS,THREAD_KEEP_ALIVE_SECONDS,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(1),new PeerGroupThreadFactory());
}",0.5027407987470635
124538,"/** 
 * Depending on the environment, this should normally be between 1 and 10, default is 4.
 * @param maxConnections the maximum number of peer connections that this group will try to make.
 */
public void setMaxConnections(int maxConnections){
  this.maxConnections=maxConnections;
  peerPool.setMaximumPoolSize(maxConnections);
}","/** 
 * Depending on the environment, this should normally be between 1 and 10, default is 4.
 * @param maxConnections the maximum number of peer connections that this group will try to make.
 */
public void setMaxConnections(int maxConnections){
  peerPool.setMaximumPoolSize(maxConnections);
}",0.9394904458598726
124539,"/** 
 * Start downloading the blockchain from the first available peer. <p>If no peers are currently connected, the download will be started once a peer starts.  If the peer dies, the download will resume with another peer.
 * @param listener a listener for chain download events, may not be null
 */
public synchronized void startBlockChainDownload(PeerEventListener listener){
  this.downloadListener=listener;
  if (!peers.isEmpty()) {
synchronized (peers) {
      startBlockChainDownloadFromPeer(peers.iterator().next());
    }
  }
}","/** 
 * Start downloading the blockchain from the first available peer. <p>If no peers are currently connected, the download will be started once a peer starts.  If the peer dies, the download will resume with another peer.
 * @param listener a listener for chain download events, may not be null
 */
public synchronized void startBlockChainDownload(PeerEventListener listener){
  this.downloadListener=listener;
synchronized (peers) {
    if (!peers.isEmpty()) {
      startBlockChainDownloadFromPeer(peers.iterator().next());
    }
  }
}",0.9553903345724908
124540,"protected synchronized void handlePeerDeath(Peer peer){
  if (peer == downloadPeer) {
    downloadPeer=null;
    if (downloadListener != null && !peers.isEmpty()) {
synchronized (peers) {
        startBlockChainDownloadFromPeer(peers.iterator().next());
      }
    }
  }
}","protected synchronized void handlePeerDeath(Peer peer){
  if (peer == downloadPeer) {
    downloadPeer=null;
synchronized (peers) {
      if (downloadListener != null && !peers.isEmpty()) {
        startBlockChainDownloadFromPeer(peers.iterator().next());
      }
    }
  }
}",0.9124087591240876
124541,"@Override public void execute() throws IOException {
  checkMCA();
  try {
    AccountUser user=new AccountUser();
    user.setAdmin(true);
    user.setEmailAddress(config.getEmailAddress());
    List<AccountUser> users=new ArrayList<AccountUser>();
    users.add(user);
    Account account=new Account();
    account.setName(AccountUtils.SAMPLE_ACCOUNT_NAME);
    account.setUsers(users);
    System.out.println(""String_Node_Str"");
    Account result=content.accounts().insert(config.getMerchantId(),account).execute();
    AccountUtils.printAccount(result);
  }
 catch (  GoogleJsonResponseException e) {
    checkGoogleJsonResponseException(e);
  }
}","@Override public void execute() throws IOException {
  checkMCA();
  try {
    Account account=new Account();
    account.setName(AccountUtils.SAMPLE_ACCOUNT_NAME);
    System.out.println(""String_Node_Str"");
    Account result=content.accounts().insert(config.getMerchantId(),account).execute();
    AccountUtils.printAccount(result);
  }
 catch (  GoogleJsonResponseException e) {
    checkGoogleJsonResponseException(e);
  }
}",0.7918593894542091
124542,"/** 
 * Main entry method.
 * @param args the application arguments
 */
public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"" + Arrays.toString(args));
  Arguments arguments=loadArguments(args);
  if (arguments == null) {
    return;
  }
  initializeLogging(arguments);
  application=new Application(arguments).start();
  registerShutdownHook();
  while (application.isRunning()) {
    Thread.sleep(500);
  }
}","/** 
 * Main entry method.
 * @param args the application arguments
 */
public static void main(String[] args) throws Exception {
  System.out.println(""String_Node_Str"" + Arrays.toString(args));
  Arguments arguments=loadArguments(args);
  if (arguments == null) {
    return;
  }
  initializeLogging(arguments);
  application=new Application(arguments);
  application.start();
  registerShutdownHook();
  while (application.isRunning()) {
    Thread.sleep(500);
  }
}",0.98371335504886
124543,"/** 
 * Get combined static and dynamic metadata
 * @return Map of all metadata
 */
public Map<String,String> getMetadataMap(){
  Map<String,String> dynamic=getDynamicMetadataMap();
  if (dynamic == null) {
    return staticMetaDataCache;
  }
  LinkedHashMap<String,String> metadata=new LinkedHashMap<>(getStaticMetadataMap());
  metadata.putAll(dynamic);
  return metadata;
}","/** 
 * Get combined static and dynamic metadata
 * @return Map of all metadata
 */
public Map<String,String> getMetadataMap(){
  Map<String,String> dynamic=getDynamicMetadataMap();
  if (dynamic == null) {
    return getStaticMetadataMap();
  }
  LinkedHashMap<String,String> metadata=new LinkedHashMap<>(getStaticMetadataMap());
  metadata.putAll(dynamic);
  return metadata;
}",0.9456953642384106
124544,"@Override public void onApplicationEvent(ContextRefreshedEvent event){
  logger.debug(""String_Node_Str"",event);
  if (event.getSource().equals(getBootstrapApplicationContext())) {
    appMetadata=bootstrapApplicationContext.getBean(AppMetadata.class);
    configuration=bootstrapApplicationContext.getBean(AbstractConfiguration.class);
    configurationProvider=bootstrapApplicationContext.getBean(ConfigurationProvider.class);
    logger.debug(""String_Node_Str"");
    initClientApplication();
    return;
  }
  if (event.getSource() instanceof ApplicationContext && ((ApplicationContext)event.getSource()).getId().equals(appMetadata.getName())) {
    this.applicationContext=(AbstractApplicationContext)event.getSource();
    logger.debug(""String_Node_Str"");
  }
}","@Override public void onApplicationEvent(ContextRefreshedEvent event){
  logger.debug(""String_Node_Str"",event);
  if (event.getSource().equals(getBootstrapApplicationContext())) {
    appMetadata=bootstrapApplicationContext.getBean(AppMetadata.class);
    configuration=bootstrapApplicationContext.getBean(AbstractConfiguration.class);
    configurationProvider=bootstrapApplicationContext.getBean(ConfigurationProvider.class);
    serverInstanceContext=bootstrapApplicationContext.getBean(ServerInstanceContext.class);
    logger.debug(""String_Node_Str"");
    initClientApplication();
    return;
  }
  if (event.getSource() instanceof ApplicationContext && ((ApplicationContext)event.getSource()).getId().equals(appMetadata.getName())) {
    this.applicationContext=(AbstractApplicationContext)event.getSource();
    logger.debug(""String_Node_Str"");
  }
}",0.9432799013563502
124545,"@Bean public AbstractConfiguration applicationConfiguration() throws ClassNotFoundException {
  AppMetadata appMetadata=appMetadata();
  ServerInstanceContext serverInstanceContext=serverInstanceContext();
  if (appEnvironment == null && serverInstanceContext != null) {
    appEnvironment=serverInstanceContext.getEnvironment();
  }
  ConfigurationBuilder configurationBuilder=new ConfigurationBuilder(appMetadata.getName(),appEnvironment,addSystemConfigs,reflections());
  configurationBuilder.withConfigurationProvider(configurationProvider());
  configurationBuilder.withServerInstanceContext(serverInstanceContext());
  configurationBuilder.withApplicationProperties(appMetadata.getPropertiesResourceLocation());
  configurationBuilder.withScanModuleConfigurations(scanModuleConfigurations);
  return configurationBuilder.build();
}","@Bean public AbstractConfiguration applicationConfiguration() throws ClassNotFoundException {
  AppMetadata appMetadata=appMetadata();
  ServerInstanceContext serverInstanceContext=serverInstanceContext();
  if (appEnvironment == null && serverInstanceContext != null) {
    appEnvironment=serverInstanceContext.getEnvironment();
  }
  ConfigurationBuilder configurationBuilder=new ConfigurationBuilder(appMetadata.getName(),appEnvironment,addSystemConfigs,reflections());
  configurationBuilder.withConfigurationProvider(configurationProvider());
  configurationBuilder.withServerInstanceContext(serverInstanceContext());
  configurationBuilder.withApplicationProperties(appMetadata.getPropertiesResourceLocation());
  configurationBuilder.withScanModuleConfigurations(scanModuleConfigurations);
  configurationBuilder.withAppVersion(appMetadata.getDeclaringClass().getPackage().getImplementationVersion());
  AbstractConfiguration configuration=configurationBuilder.build();
  if (serverInstanceContext != null) {
    serverInstanceContext.setAppName(appMetadata.getName());
    serverInstanceContext.setVersion(configuration.getString(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName()));
    serverInstanceContext.tagInstance();
  }
  return configuration;
}",0.7821122740247384
124546,"public void tagInstance(String tagInstanceName){
  Preconditions.checkArgument(StringUtils.isNotBlank(appName),""String_Node_Str"");
  Preconditions.checkArgument(StringUtils.isNotBlank(environment),""String_Node_Str"");
  Preconditions.checkArgument(StringUtils.isNotBlank(version),""String_Node_Str"");
  Tag nameTag=new Tag().withKey(""String_Node_Str"").withValue(tagInstanceName);
  Tag appTag=new Tag().withKey(""String_Node_Str"").withValue(appName);
  Tag envTag=new Tag().withKey(""String_Node_Str"").withValue(environment);
  Tag versionTag=new Tag().withKey(""String_Node_Str"").withValue(version);
  AwsUtils.tagInstance(instanceId,amazonEC2,nameTag,appTag,envTag,versionTag);
}","public void tagInstance(){
  Preconditions.checkArgument(StringUtils.isNotBlank(appName),""String_Node_Str"");
  Preconditions.checkArgument(StringUtils.isNotBlank(environment),""String_Node_Str"");
  Preconditions.checkArgument(StringUtils.isNotBlank(version),""String_Node_Str"");
  String tagName=Joiner.on(""String_Node_Str"").join(environment,appName,version);
  Tag nameTag=new Tag().withKey(""String_Node_Str"").withValue(tagName);
  Tag appTag=new Tag().withKey(""String_Node_Str"").withValue(appName);
  Tag envTag=new Tag().withKey(""String_Node_Str"").withValue(environment);
  Tag versionTag=new Tag().withKey(""String_Node_Str"").withValue(version);
  AwsUtils.tagInstance(instanceId,amazonEC2,nameTag,appTag,envTag,versionTag);
}",0.9052031361368496
124547,"private void initAppVersion(){
  if (applicationFileConfiguration == null) {
    throw new BootstrapException(""String_Node_Str"");
  }
  if (appVersion == null) {
    if (System.getProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName()) != null) {
      this.appVersion=System.getProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName());
      return;
    }
    if (applicationFileConfiguration != null && applicationFileConfiguration.containsKey(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName())) {
      System.setProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),applicationFileConfiguration.getString(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName()));
    }
  }
  if (applicationFileConfiguration.containsKey(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName())) {
    this.appVersion=applicationFileConfiguration.getString(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName());
  }
  checkAppVersion();
}","private void initAppVersion(){
  if (appVersion == null) {
    appVersion=System.getProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),null);
    if (appVersion == null && applicationFileConfiguration != null) {
      appVersion=applicationFileConfiguration.getString(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),null);
    }
  }
  if (StringUtils.isBlank(appVersion)) {
    BootstrapException.missingApplicationVersion();
  }
  System.setProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),appVersion);
}",0.3779421654337592
124548,"/** 
 * Build the Configuration
 * @return the configuration
 */
public AbstractConfiguration build(){
  initApplicationFileConfiguration();
  initAppVersion();
  initApplicationConfiguration();
  initModuleConfiguration();
  ConcurrentCompositeConfiguration finalConfiguration=new ConcurrentCompositeConfiguration();
  if (addSystemConfigs) {
    finalConfiguration.addConfiguration(new ConcurrentMapConfiguration(new SystemConfiguration()));
  }
  finalConfiguration.addProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),appVersion);
  addServerInstanceProperties(finalConfiguration);
  if (applicationConfiguration == null) {
    LOGGER.warn(""String_Node_Str"" + appName + ""String_Node_Str"");
    finalConfiguration.addConfiguration(applicationFileConfiguration);
    finalConfiguration.addConfiguration(moduleDefaultConfiguration);
  }
 else {
    finalConfiguration.addConfiguration(applicationConfiguration);
    finalConfiguration.addConfiguration(applicationFileConfiguration);
  }
  configureArchaius(finalConfiguration);
  logConfiguration(finalConfiguration);
  return finalConfiguration;
}","/** 
 * Build the Configuration
 * @return the configuration
 */
public AbstractConfiguration build(){
  initApplicationFileConfiguration();
  initAppVersion();
  initApplicationConfiguration();
  initModuleConfiguration();
  ConcurrentCompositeConfiguration finalConfiguration=new ConcurrentCompositeConfiguration();
  if (addSystemConfigs) {
    finalConfiguration.addConfiguration(new ConcurrentMapConfiguration(new SystemConfiguration()));
  }
  finalConfiguration.addProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),appVersion);
  addServerInstanceProperties(finalConfiguration);
  if (applicationConfiguration == null) {
    LOGGER.warn(""String_Node_Str"" + appName + ""String_Node_Str"");
    finalConfiguration.addConfiguration(applicationFileConfiguration);
    finalConfiguration.addConfiguration(moduleDefaultConfiguration);
  }
 else {
    finalConfiguration.addConfiguration(applicationConfiguration);
    finalConfiguration.addConfiguration(applicationFileConfiguration);
  }
  finalConfiguration.setProperty(BootstrapConfigKeys.APP_VERSION_KEY.getPropertyName(),appVersion);
  configureArchaius(finalConfiguration);
  logConfiguration(finalConfiguration);
  return finalConfiguration;
}",0.9492254733218588
124549,"@Test public void testValidContext(){
  final String region=Regions.US_WEST_2.getName();
  final String instanceId=RandomStringUtils.random(20,""String_Node_Str"");
  final String availabilityZone=region + RandomStringUtils.random(20,""String_Node_Str"");
  final String environment=RandomStringUtils.random(20,""String_Node_Str"");
  final String userData=new UserData(environment).toString();
  final String elbName=environment + ""String_Node_Str"";
  final String exhibitorUrl=""String_Node_Str"" + elbName + ""String_Node_Str""+ region+ ""String_Node_Str"";
  final int exhibitorPort=80;
  final String version=""String_Node_Str"";
  Ec2MetadataClient ec2MetadataClient=EasyMock.createMock(Ec2MetadataClient.class);
  EasyMock.expect(ec2MetadataClient.getAvailabilityZone()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return availabilityZone;
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getInstanceId()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return instanceId;
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getUserData()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return userData;
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getPrivateIpAddress()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return ""String_Node_Str"";
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getPublicIpAddress()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return ""String_Node_Str"";
    }
  }
);
  AmazonEC2 amazonEC2=EasyMock.createMock(AmazonEC2.class);
  EasyMock.expect(amazonEC2.describeRegions()).andAnswer(new IAnswer<DescribeRegionsResult>(){
    @Override public DescribeRegionsResult answer() throws Throwable {
      DescribeRegionsResult result=new DescribeRegionsResult();
      List<Region> regions=new ArrayList<>();
      for (      Regions region : Regions.values()) {
        Region r=new Region();
        r.setRegionName(region.getName());
        regions.add(r);
      }
      result.setRegions(regions);
      return result;
    }
  }
);
  EasyMock.expect(amazonEC2.describeTags(EasyMock.anyObject(DescribeTagsRequest.class))).andAnswer(new IAnswer<DescribeTagsResult>(){
    @Override public DescribeTagsResult answer() throws Throwable {
      return new DescribeTagsResult();
    }
  }
);
  com.amazonaws.regions.Region r=com.amazonaws.regions.Region.getRegion(Regions.fromName(region));
  amazonEC2.setRegion(eqRegion(r));
  EasyMock.expectLastCall();
  AmazonElasticLoadBalancing amazonElasticLoadBalancing=EasyMock.createMock(AmazonElasticLoadBalancing.class);
  EasyMock.expect(amazonElasticLoadBalancing.describeLoadBalancers()).andAnswer(new IAnswer<DescribeLoadBalancersResult>(){
    @Override public DescribeLoadBalancersResult answer() throws Throwable {
      DescribeLoadBalancersResult result=new DescribeLoadBalancersResult();
      List<LoadBalancerDescription> loadBalancers=new ArrayList<>();
      LoadBalancerDescription lb1=new LoadBalancerDescription();
      lb1.setDNSName(exhibitorUrl);
      lb1.setLoadBalancerName(elbName);
      List<ListenerDescription> listenerDescriptions=new ArrayList<>();
      ListenerDescription httpListenerDescription=new ListenerDescription();
      Listener httpListener=new Listener();
      httpListener.setProtocol(""String_Node_Str"");
      httpListener.setLoadBalancerPort(exhibitorPort);
      httpListener.setInstancePort(8080);
      httpListenerDescription.setListener(httpListener);
      ListenerDescription httpsListenerDescription=new ListenerDescription();
      Listener httpsListener=new Listener();
      httpsListener.setProtocol(""String_Node_Str"");
      httpsListener.setLoadBalancerPort(443);
      httpsListener.setInstancePort(8080);
      httpsListenerDescription.setListener(httpListener);
      listenerDescriptions.add(httpListenerDescription);
      listenerDescriptions.add(httpsListenerDescription);
      lb1.setListenerDescriptions(listenerDescriptions);
      loadBalancers.add(lb1);
      result.setLoadBalancerDescriptions(loadBalancers);
      return result;
    }
  }
);
  amazonElasticLoadBalancing.setRegion(eqRegion(r));
  EasyMock.expectLastCall();
  EasyMock.replay(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
  ServerInstanceContext context=new ServerInstanceContext(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
  Assert.assertEquals(region,context.getRegion());
  Assert.assertEquals(instanceId,context.getInstanceId());
  Assert.assertEquals(availabilityZone,context.getAvailabilityZone());
  Assert.assertEquals(environment,context.getEnvironment());
  Assert.assertEquals(exhibitorUrl,context.getExhibitorHost());
  Assert.assertEquals(exhibitorPort,context.getExhibitorPort());
  Assert.assertNull(context.getAppName());
  EasyMock.verify(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
  EasyMock.reset(amazonEC2,amazonElasticLoadBalancing);
  amazonEC2.shutdown();
  EasyMock.expectLastCall();
  amazonElasticLoadBalancing.shutdown();
  EasyMock.expectLastCall();
  String name=RandomStringUtils.random(20,""String_Node_Str"");
  CreateTagsRequest request=new CreateTagsRequest();
  String tagName=Joiner.on(""String_Node_Str"").join(environment,name,version);
  List<Tag> tags=new ArrayList<>();
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(tagName));
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(environment));
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(version));
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(name));
  request.setTags(tags);
  ArrayList<String> resources=new ArrayList<>();
  resources.add(instanceId);
  request.setResources(resources);
  amazonEC2.createTags(eqCreateTagsRequest(request));
  EasyMock.expectLastCall();
  EasyMock.replay(amazonEC2,amazonElasticLoadBalancing);
  context.setAppName(name);
  context.setVersion(version);
  context.tagInstance(tagName);
  Assert.assertEquals(name,context.getAppName());
  context.shutdown();
  EasyMock.verify(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
}","@Test public void testValidContext(){
  final String region=Regions.US_WEST_2.getName();
  final String instanceId=RandomStringUtils.random(20,""String_Node_Str"");
  final String availabilityZone=region + RandomStringUtils.random(20,""String_Node_Str"");
  final String environment=RandomStringUtils.random(20,""String_Node_Str"");
  final String userData=new UserData(environment).toString();
  final String elbName=environment + ""String_Node_Str"";
  final String exhibitorUrl=""String_Node_Str"" + elbName + ""String_Node_Str""+ region+ ""String_Node_Str"";
  final int exhibitorPort=80;
  final String version=""String_Node_Str"";
  Ec2MetadataClient ec2MetadataClient=EasyMock.createMock(Ec2MetadataClient.class);
  EasyMock.expect(ec2MetadataClient.getAvailabilityZone()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return availabilityZone;
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getInstanceId()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return instanceId;
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getUserData()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return userData;
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getPrivateIpAddress()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return ""String_Node_Str"";
    }
  }
);
  EasyMock.expect(ec2MetadataClient.getPublicIpAddress()).andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return ""String_Node_Str"";
    }
  }
);
  AmazonEC2 amazonEC2=EasyMock.createMock(AmazonEC2.class);
  EasyMock.expect(amazonEC2.describeRegions()).andAnswer(new IAnswer<DescribeRegionsResult>(){
    @Override public DescribeRegionsResult answer() throws Throwable {
      DescribeRegionsResult result=new DescribeRegionsResult();
      List<Region> regions=new ArrayList<>();
      for (      Regions region : Regions.values()) {
        Region r=new Region();
        r.setRegionName(region.getName());
        regions.add(r);
      }
      result.setRegions(regions);
      return result;
    }
  }
);
  EasyMock.expect(amazonEC2.describeTags(EasyMock.anyObject(DescribeTagsRequest.class))).andAnswer(new IAnswer<DescribeTagsResult>(){
    @Override public DescribeTagsResult answer() throws Throwable {
      return new DescribeTagsResult();
    }
  }
);
  com.amazonaws.regions.Region r=com.amazonaws.regions.Region.getRegion(Regions.fromName(region));
  amazonEC2.setRegion(eqRegion(r));
  EasyMock.expectLastCall();
  AmazonElasticLoadBalancing amazonElasticLoadBalancing=EasyMock.createMock(AmazonElasticLoadBalancing.class);
  EasyMock.expect(amazonElasticLoadBalancing.describeLoadBalancers()).andAnswer(new IAnswer<DescribeLoadBalancersResult>(){
    @Override public DescribeLoadBalancersResult answer() throws Throwable {
      DescribeLoadBalancersResult result=new DescribeLoadBalancersResult();
      List<LoadBalancerDescription> loadBalancers=new ArrayList<>();
      LoadBalancerDescription lb1=new LoadBalancerDescription();
      lb1.setDNSName(exhibitorUrl);
      lb1.setLoadBalancerName(elbName);
      List<ListenerDescription> listenerDescriptions=new ArrayList<>();
      ListenerDescription httpListenerDescription=new ListenerDescription();
      Listener httpListener=new Listener();
      httpListener.setProtocol(""String_Node_Str"");
      httpListener.setLoadBalancerPort(exhibitorPort);
      httpListener.setInstancePort(8080);
      httpListenerDescription.setListener(httpListener);
      ListenerDescription httpsListenerDescription=new ListenerDescription();
      Listener httpsListener=new Listener();
      httpsListener.setProtocol(""String_Node_Str"");
      httpsListener.setLoadBalancerPort(443);
      httpsListener.setInstancePort(8080);
      httpsListenerDescription.setListener(httpListener);
      listenerDescriptions.add(httpListenerDescription);
      listenerDescriptions.add(httpsListenerDescription);
      lb1.setListenerDescriptions(listenerDescriptions);
      loadBalancers.add(lb1);
      result.setLoadBalancerDescriptions(loadBalancers);
      return result;
    }
  }
);
  amazonElasticLoadBalancing.setRegion(eqRegion(r));
  EasyMock.expectLastCall();
  EasyMock.replay(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
  ServerInstanceContext context=new ServerInstanceContext(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
  Assert.assertEquals(region,context.getRegion());
  Assert.assertEquals(instanceId,context.getInstanceId());
  Assert.assertEquals(availabilityZone,context.getAvailabilityZone());
  Assert.assertEquals(environment,context.getEnvironment());
  Assert.assertEquals(exhibitorUrl,context.getExhibitorHost());
  Assert.assertEquals(exhibitorPort,context.getExhibitorPort());
  Assert.assertNull(context.getAppName());
  EasyMock.verify(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
  EasyMock.reset(amazonEC2,amazonElasticLoadBalancing);
  amazonEC2.shutdown();
  EasyMock.expectLastCall();
  amazonElasticLoadBalancing.shutdown();
  EasyMock.expectLastCall();
  String name=RandomStringUtils.random(20,""String_Node_Str"");
  CreateTagsRequest request=new CreateTagsRequest();
  String tagName=Joiner.on(""String_Node_Str"").join(environment,name,version);
  List<Tag> tags=new ArrayList<>();
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(tagName));
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(environment));
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(version));
  tags.add(new Tag().withKey(""String_Node_Str"").withValue(name));
  request.setTags(tags);
  ArrayList<String> resources=new ArrayList<>();
  resources.add(instanceId);
  request.setResources(resources);
  amazonEC2.createTags(eqCreateTagsRequest(request));
  EasyMock.expectLastCall();
  EasyMock.replay(amazonEC2,amazonElasticLoadBalancing);
  context.setAppName(name);
  context.setVersion(version);
  context.tagInstance();
  Assert.assertEquals(name,context.getAppName());
  context.shutdown();
  EasyMock.verify(ec2MetadataClient,amazonEC2,amazonElasticLoadBalancing);
}",0.9994346175591632
124550,"@Test public void testYamlSerDe() throws Exception {
  final YamlMessageSerDe serDe=new YamlMessageSerDe();
  serDe.initialize();
  final TestObject obj=new TestObject(RandomStringUtils.randomAlphanumeric(64),new SomeOtherObject(RandomStringUtils.randomAlphanumeric(64)));
  final byte[] serializedObj=serDe.serialize(obj);
  dumpToLog(serDe,serializedObj);
  final TestObject deserializedObj=serDe.deserialize(serializedObj,0,serializedObj.length,TestObject.class);
  Assert.assertEquals(obj,deserializedObj);
}","@Test public void testYamlSerDe() throws Exception {
  final YamlMessageSerDe serDe=new YamlMessageSerDe();
  final TestObject obj=new TestObject(RandomStringUtils.randomAlphanumeric(64),new SomeOtherObject(RandomStringUtils.randomAlphanumeric(64)));
  final byte[] serializedObj=serDe.serialize(obj);
  dumpToLog(serDe,serializedObj);
  final TestObject deserializedObj=serDe.deserialize(serializedObj,0,serializedObj.length,TestObject.class);
  Assert.assertEquals(obj,deserializedObj);
}",0.9780439121756488
124551,"@Test public void testBsonSerDe() throws Exception {
  final BsonMessageSerDe serDe=new BsonMessageSerDe();
  serDe.initialize();
  final TestObject obj=new TestObject(RandomStringUtils.randomAlphanumeric(64),new SomeOtherObject(RandomStringUtils.randomAlphanumeric(64)));
  final byte[] serializedObj=serDe.serialize(obj);
  dumpToLog(serDe,serializedObj);
  final TestObject deserializedObj=serDe.deserialize(serializedObj,0,serializedObj.length,TestObject.class);
  Assert.assertEquals(obj,deserializedObj);
}","@Test public void testBsonSerDe() throws Exception {
  final BsonMessageSerDe serDe=new BsonMessageSerDe();
  final TestObject obj=new TestObject(RandomStringUtils.randomAlphanumeric(64),new SomeOtherObject(RandomStringUtils.randomAlphanumeric(64)));
  final byte[] serializedObj=serDe.serialize(obj);
  dumpToLog(serDe,serializedObj);
  final TestObject deserializedObj=serDe.deserialize(serializedObj,0,serializedObj.length,TestObject.class);
  Assert.assertEquals(obj,deserializedObj);
}",0.9780439121756488
124552,"protected Map<ComponentType,Set<DistributionModuleGroup>> buildModuleGroupsMap(DynamicPluginAdapter pluginAdapter) throws Exception {
  Map<ComponentType,Set<DistributionModuleGroup>> moduleGroupsMap=new HashMap<>();
  for (  Map.Entry<ComponentType,IDynamicModuleGroupTemplate> entry : moduleGroupsTemplateMap.entrySet()) {
    Map<ComponentType,Set<DistributionModuleGroup>> groupMap=entry.getValue().getModuleGroups();
    if (groupMap != null && !groupMap.isEmpty()) {
      moduleGroupsMap.putAll(groupMap);
    }
  }
  return moduleGroupsMap;
}","protected Map<ComponentType,Set<DistributionModuleGroup>> buildModuleGroupsMap(DynamicPluginAdapter pluginAdapter) throws Exception {
  Map<ComponentType,Set<DistributionModuleGroup>> moduleGroupsMap=new HashMap<>();
  for (  Map.Entry<ComponentType,IDynamicModuleGroupTemplate> entry : moduleGroupsTemplateMap.entrySet()) {
    Map<ComponentType,Set<DistributionModuleGroup>> groupMap=entry.getValue().getModuleGroups();
    if (groupMap != null && !groupMap.isEmpty()) {
      for (      Map.Entry<ComponentType,Set<DistributionModuleGroup>> groupEntry : groupMap.entrySet()) {
        ComponentType key=groupEntry.getKey();
        Set<DistributionModuleGroup> existingGroupSet=moduleGroupsMap.get(key);
        if (existingGroupSet != null) {
          String name=""String_Node_Str"";
          try {
            name=key.name();
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
 finally {
            CommonExceptionHandler.warn(this.getClass().getSimpleName() + ""String_Node_Str"" + name+ ""String_Node_Str"");
          }
          existingGroupSet.addAll(groupEntry.getValue());
        }
 else {
          moduleGroupsMap.put(key,groupEntry.getValue());
        }
      }
    }
  }
  return moduleGroupsMap;
}",0.5824600110314396
124553,"protected Map<NodeComponentTypeBean,Set<DistributionModuleGroup>> buildNodeModuleGroupsMap(DynamicPluginAdapter pluginAdapter) throws Exception {
  Map<NodeComponentTypeBean,Set<DistributionModuleGroup>> nodeModuleGroupsMap=new HashMap<>();
  for (  Map.Entry<ComponentType,IDynamicModuleGroupTemplate> entry : moduleGroupsTemplateMap.entrySet()) {
    Map<NodeComponentTypeBean,Set<DistributionModuleGroup>> groupMap=entry.getValue().getNodeModuleGroups();
    if (groupMap != null && !groupMap.isEmpty()) {
      nodeModuleGroupsMap.putAll(groupMap);
    }
  }
  return nodeModuleGroupsMap;
}","protected Map<NodeComponentTypeBean,Set<DistributionModuleGroup>> buildNodeModuleGroupsMap(DynamicPluginAdapter pluginAdapter) throws Exception {
  Map<NodeComponentTypeBean,Set<DistributionModuleGroup>> nodeModuleGroupsMap=new HashMap<>();
  for (  Map.Entry<ComponentType,IDynamicModuleGroupTemplate> entry : moduleGroupsTemplateMap.entrySet()) {
    Map<NodeComponentTypeBean,Set<DistributionModuleGroup>> groupMap=entry.getValue().getNodeModuleGroups();
    if (groupMap != null && !groupMap.isEmpty()) {
      for (      Map.Entry<NodeComponentTypeBean,Set<DistributionModuleGroup>> groupEntry : groupMap.entrySet()) {
        NodeComponentTypeBean key=groupEntry.getKey();
        Set<DistributionModuleGroup> existingGroupSet=nodeModuleGroupsMap.get(key);
        if (existingGroupSet != null) {
          String keyStr=""String_Node_Str"";
          try {
            ComponentType componentType=key.getComponentType();
            if (componentType != null) {
              keyStr=keyStr + componentType.name();
            }
            keyStr=keyStr + ""String_Node_Str"" + key.getComponentName();
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
 finally {
            CommonExceptionHandler.warn(this.getClass().getSimpleName() + ""String_Node_Str"" + keyStr+ ""String_Node_Str"");
          }
          existingGroupSet.addAll(groupEntry.getValue());
        }
 else {
          nodeModuleGroupsMap.put(key,groupEntry.getValue());
        }
      }
    }
  }
  return nodeModuleGroupsMap;
}",0.541374474053296
124554,"@Override public Set<DistributionModuleGroup> getModuleGroups(ComponentType componentType,String componentName){
  return getModuleGroupsMap().get(new NodeComponentTypeBean(componentType,componentName));
}","@Override public Set<DistributionModuleGroup> getModuleGroups(ComponentType componentType,String componentName){
  return getNodeModuleGroupsMap().get(new NodeComponentTypeBean(componentType,componentName));
}",0.9903381642512076
124555,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String runtimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HBASE_MODULE_GROUP.getModuleName());
  checkRuntimeId(runtimeId);
  DistributionModuleGroup dmg=new DistributionModuleGroup(runtimeId,true,null);
  hs.add(dmg);
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String runtimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HBASE_MODULE_GROUP.getModuleName());
  checkRuntimeId(runtimeId);
  if (StringUtils.isNotBlank(runtimeId)) {
    DistributionModuleGroup dmg=new DistributionModuleGroup(runtimeId,true,null);
    hs.add(dmg);
  }
  return hs;
}",0.9367875647668392
124556,"@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String runtimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  checkRuntimeId(runtimeId);
  hs.add(new DistributionModuleGroup(runtimeId));
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String runtimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  checkRuntimeId(runtimeId);
  if (StringUtils.isNotBlank(runtimeId)) {
    hs.add(new DistributionModuleGroup(runtimeId));
  }
  return hs;
}",0.9171396140749148
124557,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String runtimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  checkRuntimeId(runtimeId);
  DistributionModuleGroup dmg=new DistributionModuleGroup(runtimeId);
  hs.add(dmg);
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String runtimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  checkRuntimeId(runtimeId);
  if (StringUtils.isNotBlank(runtimeId)) {
    DistributionModuleGroup dmg=new DistributionModuleGroup(runtimeId);
    hs.add(dmg);
  }
  return hs;
}",0.9353128313891834
124558,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String hiveRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HIVE_MODULE_GROUP.getModuleName());
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  String hiveHBaseRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HIVE_HBASE_MODULE_GROUP.getModuleName());
  checkRuntimeId(hiveRuntimeId);
  checkRuntimeId(hdfsRuntimeId);
  checkRuntimeId(mrRuntimeId);
  checkRuntimeId(hiveHBaseRuntimeId);
  hs.add(new DistributionModuleGroup(hiveRuntimeId));
  hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  hs.add(new DistributionModuleGroup(mrRuntimeId));
  ComponentCondition hbaseLoaderCondition=new MultiComponentCondition(new SimpleComponentCondition(new BasicExpression(HiveConstant.HIVE_CONFIGURATION_COMPONENT_HBASEPARAMETER)),BooleanOperator.AND,new SimpleComponentCondition(new ShowExpression(HiveConstant.HIVE_CONFIGURATION_COMPONENT_HBASEPARAMETER)));
  hs.add(new DistributionModuleGroup(hiveHBaseRuntimeId,false,hbaseLoaderCondition));
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String hiveRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HIVE_MODULE_GROUP.getModuleName());
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  String hiveHBaseRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HIVE_HBASE_MODULE_GROUP.getModuleName());
  checkRuntimeId(hiveRuntimeId);
  checkRuntimeId(hdfsRuntimeId);
  checkRuntimeId(mrRuntimeId);
  checkRuntimeId(hiveHBaseRuntimeId);
  if (StringUtils.isNotBlank(hiveRuntimeId)) {
    hs.add(new DistributionModuleGroup(hiveRuntimeId));
  }
  if (StringUtils.isNotBlank(hdfsRuntimeId)) {
    hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  }
  if (StringUtils.isNotBlank(mrRuntimeId)) {
    hs.add(new DistributionModuleGroup(mrRuntimeId));
  }
  if (StringUtils.isNotBlank(hiveHBaseRuntimeId)) {
    ComponentCondition hbaseLoaderCondition=new MultiComponentCondition(new SimpleComponentCondition(new BasicExpression(HiveConstant.HIVE_CONFIGURATION_COMPONENT_HBASEPARAMETER)),BooleanOperator.AND,new SimpleComponentCondition(new ShowExpression(HiveConstant.HIVE_CONFIGURATION_COMPONENT_HBASEPARAMETER)));
    hs.add(new DistributionModuleGroup(hiveHBaseRuntimeId,false,hbaseLoaderCondition));
  }
  return hs;
}",0.9269861691862336
124559,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String sparkHiveRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.SPARK_HIVE_MRREQUIRED_MODULE_GROUP.getModuleName());
  checkRuntimeId(sparkHiveRuntimeId);
  DistributionModuleGroup dmg=new DistributionModuleGroup(sparkHiveRuntimeId,true,null);
  hs.add(dmg);
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String sparkHiveRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.SPARK_HIVE_MRREQUIRED_MODULE_GROUP.getModuleName());
  checkRuntimeId(sparkHiveRuntimeId);
  if (StringUtils.isNotBlank(sparkHiveRuntimeId)) {
    DistributionModuleGroup dmg=new DistributionModuleGroup(sparkHiveRuntimeId,true,null);
    hs.add(dmg);
  }
  return hs;
}",0.8301886792452831
124560,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String hiveRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HIVE_MODULE_GROUP.getModuleName());
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  checkRuntimeId(hiveRuntimeId);
  checkRuntimeId(hdfsRuntimeId);
  checkRuntimeId(mrRuntimeId);
  hs.add(new DistributionModuleGroup(hiveRuntimeId));
  hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  hs.add(new DistributionModuleGroup(mrRuntimeId));
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String hiveRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HIVE_MODULE_GROUP.getModuleName());
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  checkRuntimeId(hiveRuntimeId);
  checkRuntimeId(hdfsRuntimeId);
  checkRuntimeId(mrRuntimeId);
  if (StringUtils.isNotBlank(hiveRuntimeId)) {
    hs.add(new DistributionModuleGroup(hiveRuntimeId));
  }
  if (StringUtils.isNotBlank(hdfsRuntimeId)) {
    hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  }
  if (StringUtils.isNotBlank(mrRuntimeId)) {
    hs.add(new DistributionModuleGroup(mrRuntimeId));
  }
  return hs;
}",0.9001584786053882
124561,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  checkRuntimeId(hdfsRuntimeId);
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrRuntimeId);
  String mrParquetId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_PARQUET_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrParquetId);
  String mrParquetRequired=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_PARQUET_MRREQUIRED_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrParquetRequired);
  String mrAvroRequired=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_AVRO_MRREQUIRED_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrAvroRequired);
  hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  hs.add(new DistributionModuleGroup(mrRuntimeId));
  hs.add(new DistributionModuleGroup(mrParquetId));
  hs.add(new DistributionModuleGroup(mrParquetRequired,true,null));
  hs.add(new DistributionModuleGroup(mrAvroRequired,true,null));
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  checkRuntimeId(hdfsRuntimeId);
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrRuntimeId);
  String mrParquetId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_PARQUET_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrParquetId);
  String mrParquetRequired=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_PARQUET_MRREQUIRED_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrParquetRequired);
  String mrAvroRequired=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_AVRO_MRREQUIRED_MODULE_GROUP.getModuleName());
  checkRuntimeId(mrAvroRequired);
  if (StringUtils.isNotBlank(hdfsRuntimeId)) {
    hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  }
  if (StringUtils.isNotBlank(mrRuntimeId)) {
    hs.add(new DistributionModuleGroup(mrRuntimeId));
  }
  if (StringUtils.isNotBlank(mrParquetId)) {
    hs.add(new DistributionModuleGroup(mrParquetId));
  }
  if (StringUtils.isNotBlank(mrParquetRequired)) {
    hs.add(new DistributionModuleGroup(mrParquetRequired,true,null));
  }
  if (StringUtils.isNotBlank(mrAvroRequired)) {
    hs.add(new DistributionModuleGroup(mrAvroRequired,true,null));
  }
  return hs;
}",0.9028683181225554
124562,"public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  ComponentCondition hbaseLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.HBASE_LOADER_VALUE));
  ComponentCondition parquetLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.PARQUET_LOADER_VALUE));
  ComponentCondition hcatLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.HCAT_LOADER_VALUE));
  ComponentCondition avroLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.AVRO_LOADER_VALUE));
  ComponentCondition rcfileLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.RCFILE_LOADER_VALUE));
  ComponentCondition sequencefileLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.SEQUENCEFILE_LOADER_VALUE));
  ComponentCondition s3condition=new SimpleComponentCondition(new BasicExpression(PigConstant.PIGLOAD_S3_LOCATION_LOAD));
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String pigRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_MODULE_GROUP.getModuleName());
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  String pigHCatRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_HCATALOG_MODULE_GROUP.getModuleName());
  String hbaseRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HBASE_MODULE_GROUP.getModuleName());
  String pigHBaseRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_HBASE_MODULE_GROUP.getModuleName());
  String pigParquetRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_PARQUET_MODULE_GROUP.getModuleName());
  String pigAvroRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_AVRO_MODULE_GROUP.getModuleName());
  String pigRcfileRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_RCFILE_MODULE_GROUP.getModuleName());
  String pigSequenceRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_SEQUENCEFILE_MODULE_GROUP.getModuleName());
  String pigS3RuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_S3_MODULE_GROUP.getModuleName());
  checkRuntimeId(pigRuntimeId);
  checkRuntimeId(hdfsRuntimeId);
  checkRuntimeId(mrRuntimeId);
  checkRuntimeId(pigHCatRuntimeId);
  checkRuntimeId(hbaseRuntimeId);
  checkRuntimeId(pigHBaseRuntimeId);
  checkRuntimeId(pigParquetRuntimeId);
  checkRuntimeId(pigAvroRuntimeId);
  checkRuntimeId(pigRcfileRuntimeId);
  checkRuntimeId(pigSequenceRuntimeId);
  checkRuntimeId(pigS3RuntimeId);
  hs.add(new DistributionModuleGroup(pigRuntimeId));
  hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  hs.add(new DistributionModuleGroup(mrRuntimeId));
  hs.add(new DistributionModuleGroup(pigHCatRuntimeId,false,hcatLoaderCondition));
  hs.add(new DistributionModuleGroup(hbaseRuntimeId,false,hbaseLoaderCondition));
  hs.add(new DistributionModuleGroup(pigHBaseRuntimeId,false,hbaseLoaderCondition));
  hs.add(new DistributionModuleGroup(pigParquetRuntimeId,false,parquetLoaderCondition));
  hs.add(new DistributionModuleGroup(pigAvroRuntimeId,false,avroLoaderCondition));
  hs.add(new DistributionModuleGroup(pigRcfileRuntimeId,false,rcfileLoaderCondition));
  hs.add(new DistributionModuleGroup(pigSequenceRuntimeId,false,sequencefileLoaderCondition));
  hs.add(new DistributionModuleGroup(pigS3RuntimeId,false,s3condition));
  return hs;
}","@Override public Set<DistributionModuleGroup> getModuleGroups() throws Exception {
  ComponentCondition hbaseLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.HBASE_LOADER_VALUE));
  ComponentCondition parquetLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.PARQUET_LOADER_VALUE));
  ComponentCondition hcatLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.HCAT_LOADER_VALUE));
  ComponentCondition avroLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.AVRO_LOADER_VALUE));
  ComponentCondition rcfileLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.RCFILE_LOADER_VALUE));
  ComponentCondition sequencefileLoaderCondition=new SimpleComponentCondition(new BasicExpression(PigConstant.LOADER_PARAMETER,EqualityOperator.EQ,PigConstant.SEQUENCEFILE_LOADER_VALUE));
  ComponentCondition s3condition=new SimpleComponentCondition(new BasicExpression(PigConstant.PIGLOAD_S3_LOCATION_LOAD));
  Set<DistributionModuleGroup> hs=new HashSet<>();
  DynamicPluginAdapter pluginAdapter=getPluginAdapter();
  String pigRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_MODULE_GROUP.getModuleName());
  String hdfsRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HDFS_MODULE_GROUP.getModuleName());
  String mrRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.MAPREDUCE_MODULE_GROUP.getModuleName());
  String pigHCatRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_HCATALOG_MODULE_GROUP.getModuleName());
  String hbaseRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.HBASE_MODULE_GROUP.getModuleName());
  String pigHBaseRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_HBASE_MODULE_GROUP.getModuleName());
  String pigParquetRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_PARQUET_MODULE_GROUP.getModuleName());
  String pigAvroRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_AVRO_MODULE_GROUP.getModuleName());
  String pigRcfileRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_RCFILE_MODULE_GROUP.getModuleName());
  String pigSequenceRuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_SEQUENCEFILE_MODULE_GROUP.getModuleName());
  String pigS3RuntimeId=pluginAdapter.getRuntimeModuleGroupIdByTemplateId(DynamicModuleGroupConstant.PIG_S3_MODULE_GROUP.getModuleName());
  checkRuntimeId(pigRuntimeId);
  checkRuntimeId(hdfsRuntimeId);
  checkRuntimeId(mrRuntimeId);
  checkRuntimeId(pigHCatRuntimeId);
  checkRuntimeId(hbaseRuntimeId);
  checkRuntimeId(pigHBaseRuntimeId);
  checkRuntimeId(pigParquetRuntimeId);
  checkRuntimeId(pigAvroRuntimeId);
  checkRuntimeId(pigRcfileRuntimeId);
  checkRuntimeId(pigSequenceRuntimeId);
  checkRuntimeId(pigS3RuntimeId);
  if (StringUtils.isNotBlank(pigRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigRuntimeId));
  }
  if (StringUtils.isNotBlank(hdfsRuntimeId)) {
    hs.add(new DistributionModuleGroup(hdfsRuntimeId));
  }
  if (StringUtils.isNotBlank(mrRuntimeId)) {
    hs.add(new DistributionModuleGroup(mrRuntimeId));
  }
  if (StringUtils.isNotBlank(pigHCatRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigHCatRuntimeId,false,hcatLoaderCondition));
  }
  if (StringUtils.isNotBlank(hbaseRuntimeId)) {
    hs.add(new DistributionModuleGroup(hbaseRuntimeId,false,hbaseLoaderCondition));
  }
  if (StringUtils.isNotBlank(pigHBaseRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigHBaseRuntimeId,false,hbaseLoaderCondition));
  }
  if (StringUtils.isNotBlank(pigParquetRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigParquetRuntimeId,false,parquetLoaderCondition));
  }
  if (StringUtils.isNotBlank(pigAvroRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigAvroRuntimeId,false,avroLoaderCondition));
  }
  if (StringUtils.isNotBlank(pigRcfileRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigRcfileRuntimeId,false,rcfileLoaderCondition));
  }
  if (StringUtils.isNotBlank(pigSequenceRuntimeId)) {
    hs.add(new DistributionModuleGroup(pigSequenceRuntimeId,false,sequencefileLoaderCondition));
  }
  if (StringUtils.isNotBlank(pigS3RuntimeId)) {
    hs.add(new DistributionModuleGroup(pigS3RuntimeId,false,s3condition));
  }
  return hs;
}",0.9232998885172798
124563,"public DynamicTemplateAdapter(TemplateBean templateBean,DynamicConfiguration configuration){
  super(templateBean,configuration);
}","public DynamicTemplateAdapter(TemplateBean templateBean,DynamicConfiguration configuration) throws Exception {
  super(templateBean,configuration);
  ObjectMapper om=new ObjectMapper();
  setTemplateBean(om.readValue(om.writeValueAsString(templateBean),TemplateBean.class));
}",0.6437346437346437
124564,"@Test public void testEMR500Distribution() throws Exception {
  HadoopComponent distribution=new EMR580Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(EMR580Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(EMR580Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertTrue(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertTrue(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(((MRComponent)distribution).getYarnApplicationClasspath(),DEFAULT_YARN_APPLICATION_CLASSPATH);
  assertTrue(distribution instanceof HBaseComponent);
  assertTrue(distribution instanceof SqoopComponent);
  assertTrue(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertFalse(((PigComponent)distribution).doSupportTezForPig());
  assertFalse(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertFalse(((HiveComponent)distribution).doSupportHive1());
  assertTrue(((HiveComponent)distribution).doSupportHive2());
  assertFalse(((HiveComponent)distribution).doSupportTezForHive());
  assertFalse(((HiveComponent)distribution).doSupportHBaseForHive());
  assertTrue(((HiveComponent)distribution).doSupportSSL());
  assertTrue(((HiveComponent)distribution).doSupportORCFormat());
  assertTrue(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertTrue(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_1));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_1));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
  assertEquals(SparkStreamingKafkaVersion.KAFKA_0_10,((SparkStreamingComponent)distribution).getSparkStreamingKafkaVersion(ESparkVersion.SPARK_2_1));
  assertTrue(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertTrue(distribution instanceof HCatalogComponent);
  assertFalse(distribution instanceof ImpalaComponent);
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportAllTablesSupportExcludeTable());
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportSupportDeleteTargetDir());
  assertTrue(((SqoopComponent)distribution).doJavaAPISupportStorePasswordInFile());
  assertTrue(((HBaseComponent)distribution).doSupportNewHBaseAPI());
}","@Test public void testEMR500Distribution() throws Exception {
  HadoopComponent distribution=new EMR580Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(EMR580Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(EMR580Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertTrue(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertTrue(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(((MRComponent)distribution).getYarnApplicationClasspath(),DEFAULT_YARN_APPLICATION_CLASSPATH);
  assertTrue(distribution instanceof HBaseComponent);
  assertTrue(distribution instanceof SqoopComponent);
  assertTrue(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertFalse(((PigComponent)distribution).doSupportTezForPig());
  assertFalse(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertFalse(((HiveComponent)distribution).doSupportHive1());
  assertTrue(((HiveComponent)distribution).doSupportHive2());
  assertFalse(((HiveComponent)distribution).doSupportTezForHive());
  assertFalse(((HiveComponent)distribution).doSupportHBaseForHive());
  assertTrue(((HiveComponent)distribution).doSupportSSL());
  assertTrue(((HiveComponent)distribution).doSupportORCFormat());
  assertTrue(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertTrue(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertTrue(distribution instanceof HCatalogComponent);
  assertFalse(distribution instanceof ImpalaComponent);
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportAllTablesSupportExcludeTable());
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportSupportDeleteTargetDir());
  assertTrue(((SqoopComponent)distribution).doJavaAPISupportStorePasswordInFile());
  assertTrue(((HBaseComponent)distribution).doSupportNewHBaseAPI());
}",0.7264063534083388
124565,"/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}","/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                String originalColumnName=columnName;
                columnName=getUniqueColumnName(getColumnLabels(metadataTable),columnName);
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(originalColumnName);
                column.setOriginalField(originalColumnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}",0.9786138613861386
124566,"/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}","/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                String originalColumnName=columnName;
                columnName=getUniqueColumnName(getColumnLabels(metadataTable),columnName);
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(originalColumnName);
                column.setOriginalField(originalColumnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}",0.9786138613861386
124567,"/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}","/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                String originalColumnName=columnName;
                columnName=getUniqueColumnName(getColumnLabels(metadataTable),columnName);
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(originalColumnName);
                column.setOriginalField(originalColumnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}",0.9786138613861386
124568,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HadoopClusterConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HadoopClusterRepositoryNodeType.HADOOPCLUSTER.name()) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HadoopClusterConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HadoopClusterRepositoryNodeType.HADOOPCLUSTER.name()) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9867197875166004
124569,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HCatalogConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HCATALOG) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HCatalogConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HCATALOG) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9857954545454546
124570,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HDFSConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HDFS) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HDFSConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HDFS) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.985632183908046
124571,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof NoSQLConnectionItem)) {
    return neededComponents;
  }
  NoSQLConnection connection=(NoSQLConnection)((NoSQLConnectionItem)item).getConnection();
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,getRepType(connection)) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof NoSQLConnectionItem)) {
    return neededComponents;
  }
  NoSQLConnection connection=(NoSQLConnection)((NoSQLConnectionItem)item).getConnection();
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,getRepType(connection)) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9875930521091812
124572,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HadoopClusterConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HadoopClusterRepositoryNodeType.HADOOPCLUSTER.name()) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HadoopClusterConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HadoopClusterRepositoryNodeType.HADOOPCLUSTER.name()) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9867197875166004
124573,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HCatalogConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HCATALOG) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HCatalogConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HCATALOG) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9857954545454546
124574,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HDFSConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HDFS) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof HDFSConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,HDFS) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.985632183908046
124575,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof NoSQLConnectionItem)) {
    return neededComponents;
  }
  NoSQLConnection connection=(NoSQLConnection)((NoSQLConnectionItem)item).getConnection();
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,getRepType(connection)) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof NoSQLConnectionItem)) {
    return neededComponents;
  }
  NoSQLConnection connection=(NoSQLConnection)((NoSQLConnectionItem)item).getConnection();
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (isValid(item,type,seletetedNode,component,getRepType(connection)) && !neededComponents.contains(component)) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9875930521091812
124576,"@Test public void testGetHadoopDistributionsDisplay_withCustom__Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(true);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}","@Test public void testGetHadoopDistributionsDisplay_withCustom__Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(true);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}",0.9784688995215312
124577,"@Test public void testGetHadoopDistributionsDisplay_Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(false);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}","@Test public void testGetHadoopDistributionsDisplay_Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(false);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}",0.9768637532133676
124578,"@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_KAFKA_ASSEMBLY_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingKafkaAssemblyModuleGroup.getModuleGroups(CDH5100Distribution.DISTRIBUTION_NAME,CDH5100Distribution.VERSION);
  assertEquals(results.size(),moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}","@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_KAFKA_ASSEMBLY_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.SPARK2_KAFKA_ASSEMBLY_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingKafkaAssemblyModuleGroup.getModuleGroups(CDH5100Distribution.DISTRIBUTION_NAME,CDH5100Distribution.VERSION);
  assertEquals(results.size(),moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}",0.9522591645353794
124579,"@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_KAFKA_ASSEMBLY_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.SPARK_KAFKA_AVRO_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingKafkaAvroModuleGroup.getModuleGroups(CDH5100Distribution.DISTRIBUTION_NAME,CDH5100Distribution.VERSION);
  assertEquals(results.size(),moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}","@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_KAFKA_ASSEMBLY_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.SPARK2_KAFKA_ASSEMBLY_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.SPARK_KAFKA_AVRO_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingKafkaAvroModuleGroup.getModuleGroups(CDH5100Distribution.DISTRIBUTION_NAME,CDH5100Distribution.VERSION);
  assertEquals(results.size(),moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}",0.9561128526645768
124580,"@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_KINESIS_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingKinesisNodeModuleGroup.getModuleGroups(CDH5100Distribution.DISTRIBUTION_NAME,CDH5100Distribution.VERSION);
  assertEquals(results.size(),moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}","@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_KINESIS_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.SPARK2_KINESIS_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingKinesisNodeModuleGroup.getModuleGroups(CDH5100Distribution.DISTRIBUTION_NAME,CDH5100Distribution.VERSION);
  assertEquals(results.size(),moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}",0.9547608789314952
124581,"@Test public void testEMRApache103Distribution() throws Exception {
  HadoopComponent distribution=new EMRApache103Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertFalse(distribution.doSupportS3());
  assertEquals(EMRApache103Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(EMRApache103Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_1,distribution.getHadoopVersion());
  assertTrue(distribution.doSupportKerberos());
  assertFalse(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertTrue(distribution.doSupportOldImportMode());
  assertFalse(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertFalse(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertFalse(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(EMPTY,((MRComponent)distribution).getYarnApplicationClasspath());
  assertFalse(((HBaseComponent)distribution).doSupportNewHBaseAPI());
  assertFalse(distribution instanceof SqoopComponent);
  assertFalse(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertFalse(((PigComponent)distribution).doSupportTezForPig());
  assertTrue(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertTrue(((HiveComponent)distribution).doSupportHive1());
  assertFalse(((HiveComponent)distribution).doSupportHive2());
  assertFalse(((HiveComponent)distribution).doSupportTezForHive());
  assertTrue(((HiveComponent)distribution).doSupportHBaseForHive());
  assertFalse(((HiveComponent)distribution).doSupportSSL());
  assertFalse(((HiveComponent)distribution).doSupportORCFormat());
  assertFalse(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertFalse(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertFalse(distribution instanceof SparkBatchComponent);
  assertFalse(distribution instanceof SparkStreamingComponent);
  assertFalse(distribution instanceof HCatalogComponent);
  assertFalse(distribution instanceof ImpalaComponent);
  assertTrue(distribution.doSupportCreateServiceConnection());
  assertTrue((distribution.getNecessaryServiceName() == null ? 0 : distribution.getNecessaryServiceName().size()) == 0);
}","@Test public void testEMRApache103Distribution() throws Exception {
  HadoopComponent distribution=new EMRApache103Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertFalse(distribution.doSupportS3());
  assertEquals(EMRApache103Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(EMRApache103Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_1,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertFalse(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertTrue(distribution.doSupportOldImportMode());
  assertFalse(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertFalse(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertFalse(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(EMPTY,((MRComponent)distribution).getYarnApplicationClasspath());
  assertFalse(((HBaseComponent)distribution).doSupportNewHBaseAPI());
  assertFalse(distribution instanceof SqoopComponent);
  assertFalse(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertFalse(((PigComponent)distribution).doSupportTezForPig());
  assertTrue(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertTrue(((HiveComponent)distribution).doSupportHive1());
  assertFalse(((HiveComponent)distribution).doSupportHive2());
  assertFalse(((HiveComponent)distribution).doSupportTezForHive());
  assertTrue(((HiveComponent)distribution).doSupportHBaseForHive());
  assertFalse(((HiveComponent)distribution).doSupportSSL());
  assertFalse(((HiveComponent)distribution).doSupportORCFormat());
  assertFalse(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertFalse(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertFalse(distribution instanceof SparkBatchComponent);
  assertFalse(distribution instanceof SparkStreamingComponent);
  assertFalse(distribution instanceof HCatalogComponent);
  assertFalse(distribution instanceof ImpalaComponent);
  assertTrue(distribution.doSupportCreateServiceConnection());
  assertTrue((distribution.getNecessaryServiceName() == null ? 0 : distribution.getNecessaryServiceName().size()) == 0);
}",0.9987181834828786
124582,"@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(EMR550PigModuleGroup.PIG_GROUP_NAME,null);
  results.put(EMR550PigModuleGroup.PIG_HCATALOG_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_PARQUET_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_AVRO_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_RCFILE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_SEQUENCEFILE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_S3_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550HBaseModuleGroup.MODULE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_HBASE_GROUP_NAME,""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=EMR550PigModuleGroup.getModuleGroups();
  assertEquals(9,moduleGroups.size());
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}","@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(EMR550PigModuleGroup.PIG_GROUP_NAME,null);
  results.put(EMR550PigModuleGroup.PIG_HCATALOG_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_PARQUET_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_AVRO_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_RCFILE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_SEQUENCEFILE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_S3_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550HBaseModuleGroup.MODULE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.PIG_HBASE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.HDFS_GROUP_NAME,null);
  results.put(EMR550HBaseModuleGroup.MODULE_GROUP_NAME,""String_Node_Str"");
  results.put(EMR550PigModuleGroup.MAPREDUCE_GROUP_NAME,null);
  Set<DistributionModuleGroup> moduleGroups=EMR550PigModuleGroup.getModuleGroups();
  assertEquals(results.size(),moduleGroups.size());
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf() != null ? module.getRequiredIf().getConditionString() : null);
    }
  }
}",0.9250074693755602
124583,"@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}",0.9596412556053812
124584,"@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}",0.9626556016597512
124585,"/** 
 * Generates the ""SHOW_IF"" condition for the ""SUPPORTED_SPARK_VERSION"" drop down list. Given a map of Spark versions and corresponding supported hadoop versions, it builds a   {@link ComponentCondition} for each entry in the map.
 * @param supportedSparkVersions the map of Spark versions
 * @return an array of a String reprensation of a {@link ComponentCondition}
 */
public static String[] generateSparkVersionShowIfConditions(Map<ESparkVersion,Set<DistributionVersion>> supportedSparkVersions){
  String[] results=null;
  if (supportedSparkVersions != null) {
    results=new String[supportedSparkVersions.size()];
    int conditionIndex=0;
    for (    Map.Entry<ESparkVersion,Set<DistributionVersion>> entry : supportedSparkVersions.entrySet()) {
      Set<ComponentCondition> multiComponentConditions=new HashSet<>();
      for (      DistributionVersion distributionVersion : entry.getValue()) {
        SimpleComponentCondition distribution=new SimpleComponentCondition(new BasicExpression(""String_Node_Str"",EqualityOperator.EQ,distributionVersion.distribution.getName()));
        SimpleComponentCondition version=new SimpleComponentCondition(new BasicExpression(""String_Node_Str"",EqualityOperator.EQ,distributionVersion.getVersion()));
        multiComponentConditions.add(new MultiComponentCondition(distribution,BooleanOperator.AND,version));
      }
      ComponentCondition componentCondition=buildDistributionShowIf(multiComponentConditions);
      results[conditionIndex++]=componentCondition != null ? componentCondition.getConditionString() : null;
    }
  }
  return results;
}","/** 
 * Generates the ""SHOW_IF"" condition for the ""SUPPORTED_SPARK_VERSION"" drop down list. Given a map of Spark versions and corresponding supported hadoop versions, it builds a   {@link ComponentCondition} for each entry in the map.
 * @param supportedSparkVersions the map of Spark versions
 * @return an array of a String reprensation of a {@link ComponentCondition}
 */
public static String[] generateSparkVersionShowIfConditions(Map<ESparkVersion,Set<DistributionVersion>> supportedSparkVersions){
  String[] results=null;
  if (supportedSparkVersions != null) {
    results=new String[supportedSparkVersions.size()];
    int conditionIndex=0;
    for (    Map.Entry<ESparkVersion,Set<DistributionVersion>> entry : supportedSparkVersions.entrySet()) {
      Set<ComponentCondition> multiComponentConditions=new LinkedHashSet<>();
      for (      DistributionVersion distributionVersion : entry.getValue()) {
        SimpleComponentCondition distribution=new SimpleComponentCondition(new BasicExpression(""String_Node_Str"",EqualityOperator.EQ,distributionVersion.distribution.getName()));
        SimpleComponentCondition version=new SimpleComponentCondition(new BasicExpression(""String_Node_Str"",EqualityOperator.EQ,distributionVersion.getVersion()));
        multiComponentConditions.add(new MultiComponentCondition(distribution,BooleanOperator.AND,version));
      }
      ComponentCondition componentCondition=buildDistributionShowIf(multiComponentConditions);
      results[conditionIndex++]=componentCondition != null ? componentCondition.getConditionString() : null;
    }
  }
  return results;
}",0.9981308411214952
124586,"@Test public void generateSparkVersionShowIfConditionsTest(){
  assertNull(ComponentConditionUtil.generateSparkVersionShowIfConditions(null));
  Map<ESparkVersion,Set<DistributionVersion>> sparkVersionsMap=new HashMap<>();
  Set<DistributionVersion> distributionVersions=new LinkedHashSet<>();
  distributionVersions.add(new DistributionVersion(null,new DistributionBean(ComponentType.SPARKBATCH,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  sparkVersionsMap.put(ESparkVersion.SPARK_2_0,distributionVersions);
  distributionVersions=new HashSet<>();
  distributionVersions.add(new DistributionVersion(null,new DistributionBean(ComponentType.SPARKBATCH,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  distributionVersions.add(new DistributionVersion(null,new DistributionBean(ComponentType.SPARKBATCH,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  sparkVersionsMap.put(ESparkVersion.SPARK_1_6,distributionVersions);
  String[] showIfs=ComponentConditionUtil.generateSparkVersionShowIfConditions(sparkVersionsMap);
  assertTrue(showIfs.length == 2);
  assertThat(Arrays.asList(showIfs),hasItem(""String_Node_Str""));
  assertThat(Arrays.asList(showIfs),hasItem(""String_Node_Str""));
}","@Test public void generateSparkVersionShowIfConditionsTest(){
  assertNull(ComponentConditionUtil.generateSparkVersionShowIfConditions(null));
  Map<ESparkVersion,Set<DistributionVersion>> sparkVersionsMap=new HashMap<>();
  Set<DistributionVersion> distributionVersions=new LinkedHashSet<>();
  distributionVersions.add(new DistributionVersion(null,new DistributionBean(ComponentType.SPARKBATCH,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  sparkVersionsMap.put(ESparkVersion.SPARK_2_0,distributionVersions);
  distributionVersions=new LinkedHashSet<>();
  distributionVersions.add(new DistributionVersion(null,new DistributionBean(ComponentType.SPARKBATCH,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  distributionVersions.add(new DistributionVersion(null,new DistributionBean(ComponentType.SPARKBATCH,""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  sparkVersionsMap.put(ESparkVersion.SPARK_1_6,distributionVersions);
  String[] showIfs=ComponentConditionUtil.generateSparkVersionShowIfConditions(sparkVersionsMap);
  assertTrue(showIfs.length == 2);
  assertThat(Arrays.asList(showIfs),hasItem(""String_Node_Str""));
  assertThat(Arrays.asList(showIfs),hasItem(""String_Node_Str""));
}",0.9976470588235294
124587,"@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.SPARK_MRREQUIRED_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.MAPREDUCE_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.TALEND_CLOUDERA_CDH_5_10_NAVIGATOR.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkBatchModuleGroup.getModuleGroups();
  assertEquals(5,moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}","@Test public void testModuleGroups() throws Exception {
  Map<String,Set<String>> results=new HashMap<>();
  Set<String> hs1=new HashSet<>();
  hs1.add(""String_Node_Str"");
  results.put(CDH5100Constant.SPARK_MODULE_GROUP.getModuleName(),hs1);
  Set<String> hs2=new HashSet<>();
  hs2.add(""String_Node_Str"");
  results.put(CDH5100Constant.SPARK2_MODULE_GROUP.getModuleName(),hs2);
  Set<String> hs3=new HashSet<>();
  hs3.add(""String_Node_Str"");
  hs3.add(""String_Node_Str"");
  results.put(CDH5100Constant.SPARK_MRREQUIRED_MODULE_GROUP.getModuleName(),hs3);
  Set<String> hs4=new HashSet<>();
  hs4.add(""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP_SPARK1_6.getModuleName(),hs4);
  Set<String> hs5=new HashSet<>();
  hs5.add(""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP_SPARK2_1.getModuleName(),hs5);
  Set<String> hs6=new HashSet<>();
  hs6.add(""String_Node_Str"");
  hs6.add(""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP_COMMON.getModuleName(),hs6);
  Set<String> hs7=new HashSet<>();
  hs7.add(""String_Node_Str"");
  hs7.add(""String_Node_Str"");
  results.put(CDH5100Constant.MAPREDUCE_MODULE_GROUP.getModuleName(),hs7);
  Set<String> hs8=new HashSet<>();
  hs8.add(""String_Node_Str"");
  results.put(CDH5100Constant.TALEND_CLOUDERA_CDH_5_10_NAVIGATOR.getModuleName(),hs8);
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkBatchModuleGroup.getModuleGroups();
  assertEquals(11,moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertTrue(results.get(module.getModuleName()).contains(module.getRequiredIf().getConditionString()));
    }
  }
}",0.7328980982117513
124588,"@Test public void testModuleGroups() throws Exception {
  Map<String,String> results=new HashMap<>();
  results.put(CDH5100Constant.SPARK_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  results.put(CDH5100Constant.MAPREDUCE_MODULE_GROUP.getModuleName(),""String_Node_Str"");
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingModuleGroup.getModuleGroups();
  assertEquals(3,moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertEquals(results.get(module.getModuleName()),module.getRequiredIf().getConditionString());
    }
  }
}","@Test public void testModuleGroups() throws Exception {
  Map<String,Set<String>> results=new HashMap<>();
  Set<String> hs1=new HashSet<>();
  hs1.add(""String_Node_Str"");
  results.put(CDH5100Constant.SPARK_MODULE_GROUP.getModuleName(),hs1);
  Set<String> hs2=new HashSet<>();
  hs2.add(""String_Node_Str"");
  results.put(CDH5100Constant.SPARK2_MODULE_GROUP.getModuleName(),hs2);
  Set<String> hs3=new HashSet<>();
  hs3.add(""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP_SPARK1_6.getModuleName(),hs3);
  Set<String> hs4=new HashSet<>();
  hs4.add(""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP_SPARK2_1.getModuleName(),hs4);
  Set<String> hs5=new HashSet<>();
  hs5.add(""String_Node_Str"");
  hs5.add(""String_Node_Str"");
  results.put(CDH5100Constant.HDFS_MODULE_GROUP_COMMON.getModuleName(),hs5);
  Set<String> hs6=new HashSet<>();
  hs6.add(""String_Node_Str"");
  hs6.add(""String_Node_Str"");
  results.put(CDH5100Constant.MAPREDUCE_MODULE_GROUP.getModuleName(),hs6);
  Set<DistributionModuleGroup> moduleGroups=CDH5100SparkStreamingModuleGroup.getModuleGroups();
  assertEquals(8,moduleGroups.size());
  moduleGroups.iterator();
  for (  DistributionModuleGroup module : moduleGroups) {
    assertTrue(""String_Node_Str"" + module.getModuleName(),results.containsKey(module.getModuleName()));
    if (results.get(module.getModuleName()) == null) {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str"",results.get(module.getModuleName()) == null);
    }
 else {
      assertTrue(""String_Node_Str"" + module.getModuleName() + ""String_Node_Str""+ results.get(module.getModuleName())+ ""String_Node_Str"",results.get(module.getModuleName()) != null);
      assertTrue(results.get(module.getModuleName()).contains(module.getRequiredIf().getConditionString()));
    }
  }
}",0.7343541944074568
124589,"@Test public void testEMR500Distribution() throws Exception {
  HadoopComponent distribution=new EMR550Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(EMR550Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(EMR550Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertTrue(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertTrue(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(((MRComponent)distribution).getYarnApplicationClasspath(),DEFAULT_YARN_APPLICATION_CLASSPATH);
  assertTrue(distribution instanceof HBaseComponent);
  assertTrue(distribution instanceof SqoopComponent);
  assertTrue(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertFalse(((PigComponent)distribution).doSupportTezForPig());
  assertFalse(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertFalse(((HiveComponent)distribution).doSupportHive1());
  assertTrue(((HiveComponent)distribution).doSupportHive2());
  assertFalse(((HiveComponent)distribution).doSupportTezForHive());
  assertFalse(((HiveComponent)distribution).doSupportHBaseForHive());
  assertTrue(((HiveComponent)distribution).doSupportSSL());
  assertTrue(((HiveComponent)distribution).doSupportORCFormat());
  assertTrue(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertTrue(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_0));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_0));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
  assertEquals(SparkStreamingKafkaVersion.KAFKA_0_10,((SparkStreamingComponent)distribution).getSparkStreamingKafkaVersion(ESparkVersion.SPARK_2_1));
  assertTrue(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertTrue(distribution instanceof HCatalogComponent);
  assertFalse(distribution instanceof ImpalaComponent);
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportAllTablesSupportExcludeTable());
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportSupportDeleteTargetDir());
  assertTrue(((SqoopComponent)distribution).doJavaAPISupportStorePasswordInFile());
  assertTrue(((HBaseComponent)distribution).doSupportNewHBaseAPI());
}","@Test public void testEMR500Distribution() throws Exception {
  HadoopComponent distribution=new EMR550Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(EMR550Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(EMR550Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertTrue(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertTrue(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(((MRComponent)distribution).getYarnApplicationClasspath(),DEFAULT_YARN_APPLICATION_CLASSPATH);
  assertTrue(distribution instanceof HBaseComponent);
  assertTrue(distribution instanceof SqoopComponent);
  assertTrue(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertFalse(((PigComponent)distribution).doSupportTezForPig());
  assertFalse(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertFalse(((HiveComponent)distribution).doSupportHive1());
  assertTrue(((HiveComponent)distribution).doSupportHive2());
  assertFalse(((HiveComponent)distribution).doSupportTezForHive());
  assertFalse(((HiveComponent)distribution).doSupportHBaseForHive());
  assertTrue(((HiveComponent)distribution).doSupportSSL());
  assertTrue(((HiveComponent)distribution).doSupportORCFormat());
  assertTrue(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertTrue(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_1));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_1));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
  assertEquals(SparkStreamingKafkaVersion.KAFKA_0_10,((SparkStreamingComponent)distribution).getSparkStreamingKafkaVersion(ESparkVersion.SPARK_2_1));
  assertTrue(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertTrue(distribution instanceof HCatalogComponent);
  assertFalse(distribution instanceof ImpalaComponent);
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportAllTablesSupportExcludeTable());
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportSupportDeleteTargetDir());
  assertTrue(((SqoopComponent)distribution).doJavaAPISupportStorePasswordInFile());
  assertTrue(((HBaseComponent)distribution).doSupportNewHBaseAPI());
}",0.9995842860112244
124590,"private List<MetadataColumn> extractTheColumns(NoSQLConnection connection,String cypher) throws NoSQLExtractSchemaException {
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  try {
    ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
    Object db=Neo4jConnectionUtil.getDB(connection);
    if (db == null) {
      return metadataColumns;
    }
    Iterator<Map<String,Object>> resultIterator=Neo4jConnectionUtil.getResultIterator(connection,cypher);
    if (resultIterator == null) {
      return metadataColumns;
    }
    List<String> columnLabels=new ArrayList<String>();
    int rowNum=0;
    while (resultIterator.hasNext()) {
      if (rowNum > COUNT_ROWS) {
        break;
      }
      rowNum++;
      Map<String,Object> row=resultIterator.next();
      for (      Entry<String,Object> column : row.entrySet()) {
        String key=column.getKey();
        Object value=column.getValue();
        if (StringUtils.isEmpty(key) || value == null) {
          continue;
        }
        addMetadataColumns(classLoader,db,key,value,metadataColumns,columnLabels,Neo4jConnectionUtil.isVersion1(connection));
      }
    }
  }
 catch (  Exception e) {
    throw new NoSQLExtractSchemaException(e);
  }
  return metadataColumns;
}","private List<MetadataColumn> extractTheColumns(NoSQLConnection connection,String cypher) throws NoSQLExtractSchemaException {
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  Object db=null;
  try {
    ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
    Neo4jConnectionUtil.closeConnections();
    db=Neo4jConnectionUtil.getDB(connection);
    if (db == null) {
      return metadataColumns;
    }
    Iterator<Map<String,Object>> resultIterator=Neo4jConnectionUtil.getResultIterator(connection,cypher,db);
    if (resultIterator == null) {
      return metadataColumns;
    }
    List<String> columnLabels=new ArrayList<String>();
    int rowNum=0;
    while (resultIterator.hasNext()) {
      if (rowNum > COUNT_ROWS) {
        break;
      }
      rowNum++;
      Map<String,Object> row=resultIterator.next();
      for (      Entry<String,Object> column : row.entrySet()) {
        String key=column.getKey();
        Object value=column.getValue();
        if (StringUtils.isEmpty(key) || value == null) {
          continue;
        }
        addMetadataColumns(classLoader,db,key,value,metadataColumns,columnLabels,Neo4jConnectionUtil.isVersion1(connection));
      }
    }
  }
 catch (  Exception e) {
    throw new NoSQLExtractSchemaException(e);
  }
 finally {
    if (db != null) {
      Neo4jConnectionUtil.shutdownNeo4JDb(db);
    }
  }
  return metadataColumns;
}",0.9233603537214444
124591,"public static synchronized boolean checkConnection(NoSQLConnection connection) throws NoSQLServerException {
  boolean canConnect=true;
  final ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
  try {
    final Object db=getDB(connection);
    boolean isRemote=Boolean.valueOf(connection.getAttributes().get(INeo4jAttributes.REMOTE_SERVER));
    if (isRemote) {
      NoSQLReflection.invokeMethod(db,""String_Node_Str"",new Object[0]);
    }
 else {
      if (isVersion1(connection)) {
        doCheck(db,classLoader);
      }
 else {
        new ExecutionUnitWithTransaction(){
          @Override protected Object run() throws Exception {
            doCheck(db,classLoader);
            return null;
          }
        }
.execute(db);
      }
    }
  }
 catch (  Exception e) {
    canConnect=false;
    resetAll();
    throw new NoSQLServerException(Messages.getString(""String_Node_Str""),e);
  }
  return canConnect;
}","public static synchronized boolean checkConnection(NoSQLConnection connection) throws NoSQLServerException {
  boolean canConnect=true;
  final ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
  Object dbConnection=null;
  try {
    final Object db=getDB(connection);
    dbConnection=db;
    boolean isRemote=Boolean.valueOf(connection.getAttributes().get(INeo4jAttributes.REMOTE_SERVER));
    if (isRemote) {
      NoSQLReflection.invokeMethod(db,""String_Node_Str"",new Object[0]);
    }
 else {
      if (isVersion1(connection)) {
        doCheck(db,classLoader);
      }
 else {
        new ExecutionUnitWithTransaction(){
          @Override protected Object run() throws Exception {
            doCheck(db,classLoader);
            return null;
          }
        }
.execute(db);
      }
    }
  }
 catch (  Exception e) {
    canConnect=false;
    resetAll();
    throw new NoSQLServerException(Messages.getString(""String_Node_Str""),e);
  }
 finally {
    if (dbConnection != null) {
      shutdownNeo4JDb(dbConnection);
    }
  }
  return canConnect;
}",0.912039312039312
124592,"private static void shutdownNeo4JDb(final Object db){
  try {
    NoSQLReflection.invokeMethod(db,""String_Node_Str"",new Object[0]);
  }
 catch (  NoSQLReflectionException e) {
    e.printStackTrace();
  }
}","public static void shutdownNeo4JDb(final Object db){
  try {
    NoSQLReflection.invokeMethod(db,""String_Node_Str"",new Object[0]);
  }
 catch (  NoSQLReflectionException e) {
    e.printStackTrace();
  }
}",0.97323600973236
124593,"public static synchronized Object getDB(NoSQLConnection connection) throws NoSQLServerException {
  Object db=null;
  ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
  try {
    boolean isRemote=Boolean.valueOf(connection.getAttributes().get(INeo4jAttributes.REMOTE_SERVER));
    if (isRemote) {
      String serverUrl=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.SERVER_URL));
      if (connection.isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
        serverUrl=ContextParameterUtils.getOriginalValue(contextType,serverUrl);
      }
      if (isNeedAuthorization(connection)) {
        String usename=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.USERNAME));
        String password=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.PASSWORD));
        if (connection.isContextMode()) {
          ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
          usename=ContextParameterUtils.getOriginalValue(contextType,usename);
          password=ContextParameterUtils.getOriginalValue(contextType,password);
        }
 else {
          password=connection.getValue(password,false);
        }
        db=NoSQLReflection.newInstance(""String_Node_Str"",new Object[]{serverUrl,usename,password},classLoader);
      }
 else {
        db=NoSQLReflection.newInstance(""String_Node_Str"",new Object[]{serverUrl},classLoader);
      }
    }
 else {
      String dbPath=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.DATABASE_PATH));
      if (connection.isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
        dbPath=ContextParameterUtils.getOriginalValue(contextType,dbPath);
      }
      Object dbFactory=NoSQLReflection.newInstance(""String_Node_Str"",new Object[0],classLoader);
      db=NoSQLReflection.invokeMethod(dbFactory,""String_Node_Str"",new Object[]{dbPath});
    }
    registerShutdownHook(db);
  }
 catch (  NoSQLReflectionException e) {
    throw new NoSQLServerException(e);
  }
  return graphDb=db;
}","public static synchronized Object getDB(NoSQLConnection connection,boolean useCache) throws NoSQLServerException {
  if (useCache && graphDb != null) {
    return graphDb;
  }
  Object db=null;
  ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
  try {
    boolean isRemote=Boolean.valueOf(connection.getAttributes().get(INeo4jAttributes.REMOTE_SERVER));
    if (isRemote) {
      String serverUrl=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.SERVER_URL));
      if (connection.isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
        serverUrl=ContextParameterUtils.getOriginalValue(contextType,serverUrl);
      }
      if (isNeedAuthorization(connection)) {
        String usename=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.USERNAME));
        String password=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.PASSWORD));
        if (connection.isContextMode()) {
          ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
          usename=ContextParameterUtils.getOriginalValue(contextType,usename);
          password=ContextParameterUtils.getOriginalValue(contextType,password);
        }
 else {
          password=connection.getValue(password,false);
        }
        db=NoSQLReflection.newInstance(""String_Node_Str"",new Object[]{serverUrl,usename,password},classLoader);
      }
 else {
        db=NoSQLReflection.newInstance(""String_Node_Str"",new Object[]{serverUrl},classLoader);
      }
    }
 else {
      String dbPath=StringUtils.trimToEmpty(connection.getAttributes().get(INeo4jAttributes.DATABASE_PATH));
      if (connection.isContextMode()) {
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
        dbPath=ContextParameterUtils.getOriginalValue(contextType,dbPath);
      }
      Object dbFactory=NoSQLReflection.newInstance(""String_Node_Str"",new Object[0],classLoader);
      db=NoSQLReflection.invokeMethod(dbFactory,""String_Node_Str"",new Object[]{dbPath});
    }
    registerShutdownHook(db);
  }
 catch (  NoSQLReflectionException e) {
    throw new NoSQLServerException(e);
  }
  return graphDb=db;
}",0.9826743669480232
124594,"public static synchronized Iterator<Map<String,Object>> getResultIterator(NoSQLConnection connection,String cypher) throws NoSQLServerException {
  Iterator<Map<String,Object>> resultIterator=null;
  Object db=getDB(connection);
  ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
  String isRemoteAttr=connection.getAttributes().get(INeo4jAttributes.REMOTE_SERVER);
  boolean isRemote=isRemoteAttr == null ? false : Boolean.valueOf(isRemoteAttr);
  try {
    if (isRemote) {
      Object queryResult=NoSQLReflection.invokeMethod(getQueryEngine(db,classLoader),""String_Node_Str"",new Object[]{cypher,null},String.class,Map.class);
      resultIterator=(Iterator<Map<String,Object>>)NoSQLReflection.invokeMethod(queryResult,""String_Node_Str"",new Object[0]);
    }
 else {
      Object executionResult=NoSQLReflection.invokeMethod(getExecutionEngine(db,classLoader),""String_Node_Str"",new Object[]{cypher});
      resultIterator=(Iterator<Map<String,Object>>)NoSQLReflection.invokeMethod(executionResult,""String_Node_Str"",new Object[0]);
    }
  }
 catch (  NoSQLReflectionException e) {
    throw new NoSQLServerException(e);
  }
  return resultIterator;
}","public static synchronized Iterator<Map<String,Object>> getResultIterator(NoSQLConnection connection,String cypher,Object db1) throws NoSQLServerException {
  Iterator<Map<String,Object>> resultIterator=null;
  Object db=db1;
  try {
    db=getDB(connection,true);
    ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
    String isRemoteAttr=connection.getAttributes().get(INeo4jAttributes.REMOTE_SERVER);
    boolean isRemote=isRemoteAttr == null ? false : Boolean.valueOf(isRemoteAttr);
    if (isRemote) {
      Object queryResult=NoSQLReflection.invokeMethod(getQueryEngine(db,classLoader),""String_Node_Str"",new Object[]{cypher,null},String.class,Map.class);
      resultIterator=(Iterator<Map<String,Object>>)NoSQLReflection.invokeMethod(queryResult,""String_Node_Str"",new Object[0]);
    }
 else {
      Object executionResult=NoSQLReflection.invokeMethod(getExecutionEngine(db,classLoader),""String_Node_Str"",new Object[]{cypher});
      resultIterator=(Iterator<Map<String,Object>>)NoSQLReflection.invokeMethod(executionResult,""String_Node_Str"",new Object[0]);
    }
  }
 catch (  NoSQLReflectionException e) {
    throw new NoSQLServerException(e);
  }
  return resultIterator;
}",0.9790969899665553
124595,"@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  String whcHostName=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  whcHostnameText.setText(whcHostName);
  String whcPort=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
  whcPortText.setText(whcPort);
  String whcUsername=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  whcUsernameText.setText(whcUsername);
  String whcJobResultFolder=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  whcJobResultFolderText.setText(whcJobResultFolder);
  String hdiUsername=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  hdiUsernameText.setText(hdiUsername);
  String hdiPassword=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  hdiPasswordText.setText(hdiPassword);
  String azureHostname=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  azureHostnameText.setText(azureHostname);
  String azureContainer=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  azureContainerText.setText(azureContainer);
  String azureUsername=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  azureUsernameText.setText(azureUsername);
  String azurePassword=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  azurePasswordText.setText(azurePassword);
  String azureDeployBlob=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  azureDeployBlobText.setText(azureDeployBlob);
  updatePasswordFields();
  updateStatus(IStatus.OK,EMPTY_STRING);
}","@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  String whcHostName=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  whcHostnameText.setText(whcHostName);
  String whcPort=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
  whcPortText.setText(whcPort);
  String whcUsername=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  whcUsernameText.setText(whcUsername);
  String hdiUsername=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  hdiUsernameText.setText(hdiUsername);
  String hdiPassword=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  hdiPasswordText.setText(hdiPassword);
  String azureHostname=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  azureHostnameText.setText(azureHostname);
  String azureContainer=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  azureContainerText.setText(azureContainer);
  String azureUsername=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  azureUsernameText.setText(azureUsername);
  String azurePassword=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  azurePasswordText.setText(azurePassword);
  String azureDeployBlob=StringUtils.trimToEmpty(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  azureDeployBlobText.setText(azureDeployBlob);
  updatePasswordFields();
  updateStatus(IStatus.OK,EMPTY_STRING);
}",0.9488977955911824
124596,"@Override public boolean checkFieldsValue(){
  if (!validText(whcHostnameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(whcPortText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(whcUsernameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(whcJobResultFolderText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(hdiUsernameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(hdiPasswordText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureHostnameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureContainerText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureUsernameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azurePasswordText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureDeployBlobText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}","@Override public boolean checkFieldsValue(){
  if (!validText(whcHostnameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(whcPortText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(whcUsernameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(hdiUsernameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(hdiPasswordText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureHostnameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureContainerText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureUsernameText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azurePasswordText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!validText(azureDeployBlobText.getText())) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  updateStatus(IStatus.OK,null);
  return true;
}",0.9533777354900096
124597,"@Override protected void addFieldsListeners(){
  whcHostnameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME,whcHostnameText.getText());
      checkFieldsValue();
    }
  }
);
  whcPortText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT,whcPortText.getText());
      checkFieldsValue();
    }
  }
);
  whcUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME,whcUsernameText.getText());
      checkFieldsValue();
    }
  }
);
  whcJobResultFolderText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER,whcJobResultFolderText.getText());
      checkFieldsValue();
    }
  }
);
  hdiUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME,hdiUsernameText.getText());
      checkFieldsValue();
    }
  }
);
  hdiPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD,hdiPasswordText.getText());
      checkFieldsValue();
    }
  }
);
  azureHostnameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME,azureHostnameText.getText());
      checkFieldsValue();
    }
  }
);
  azureContainerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER,azureContainerText.getText());
      checkFieldsValue();
    }
  }
);
  azureUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME,azureUsernameText.getText());
      checkFieldsValue();
    }
  }
);
  azurePasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD,azurePasswordText.getText());
      checkFieldsValue();
    }
  }
);
  azureDeployBlobText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB,azureDeployBlobText.getText());
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  whcHostnameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME,whcHostnameText.getText());
      checkFieldsValue();
    }
  }
);
  whcPortText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT,whcPortText.getText());
      checkFieldsValue();
    }
  }
);
  whcUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME,whcUsernameText.getText());
      checkFieldsValue();
    }
  }
);
  hdiUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME,hdiUsernameText.getText());
      checkFieldsValue();
    }
  }
);
  hdiPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD,hdiPasswordText.getText());
      checkFieldsValue();
    }
  }
);
  azureHostnameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME,azureHostnameText.getText());
      checkFieldsValue();
    }
  }
);
  azureContainerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER,azureContainerText.getText());
      checkFieldsValue();
    }
  }
);
  azureUsernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME,azureUsernameText.getText());
      checkFieldsValue();
    }
  }
);
  azurePasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD,azurePasswordText.getText());
      checkFieldsValue();
    }
  }
);
  azureDeployBlobText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB,azureDeployBlobText.getText());
      checkFieldsValue();
    }
  }
);
}",0.94937343358396
124598,"@Override protected void updateEditableStatus(boolean isEditable){
  whcHostnameText.setEditable(isEditable);
  whcPortText.setEditable(isEditable);
  whcPortText.setEditable(isEditable);
  whcUsernameText.setEditable(isEditable);
  whcJobResultFolderText.setEditable(isEditable);
  hdiUsernameText.setEditable(isEditable);
  hdiPasswordText.setEditable(isEditable);
  azureHostnameText.setEditable(isEditable);
  azureContainerText.setEditable(isEditable);
  azureUsernameText.setEditable(isEditable);
  azurePasswordText.setEditable(isEditable);
  azureDeployBlobText.setEditable(isEditable);
  ((HadoopClusterForm)this.getParent()).updateEditableStatus(isEditable);
}","@Override protected void updateEditableStatus(boolean isEditable){
  whcHostnameText.setEditable(isEditable);
  whcPortText.setEditable(isEditable);
  whcPortText.setEditable(isEditable);
  whcUsernameText.setEditable(isEditable);
  hdiUsernameText.setEditable(isEditable);
  hdiPasswordText.setEditable(isEditable);
  azureHostnameText.setEditable(isEditable);
  azureContainerText.setEditable(isEditable);
  azureUsernameText.setEditable(isEditable);
  azurePasswordText.setEditable(isEditable);
  azureDeployBlobText.setEditable(isEditable);
  ((HadoopClusterForm)this.getParent()).updateEditableStatus(isEditable);
}",0.9612403100775194
124599,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  whcHostnameText.setReadOnly(readOnly);
  whcPortText.setReadOnly(readOnly);
  whcUsernameText.setEnabled(!readOnly);
  whcJobResultFolderText.setReadOnly(readOnly);
  hdiUsernameText.setReadOnly(readOnly);
  hdiPasswordText.setReadOnly(readOnly);
  azureHostnameText.setReadOnly(readOnly);
  azureContainerText.setReadOnly(readOnly);
  azureUsernameText.setReadOnly(readOnly);
  azurePasswordText.setReadOnly(readOnly);
  azureDeployBlobText.setReadOnly(readOnly);
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  whcHostnameText.setReadOnly(readOnly);
  whcPortText.setReadOnly(readOnly);
  whcUsernameText.setEnabled(!readOnly);
  hdiUsernameText.setReadOnly(readOnly);
  hdiPasswordText.setReadOnly(readOnly);
  azureHostnameText.setReadOnly(readOnly);
  azureContainerText.setReadOnly(readOnly);
  azureUsernameText.setReadOnly(readOnly);
  azurePasswordText.setReadOnly(readOnly);
  azureDeployBlobText.setReadOnly(readOnly);
}",0.95357833655706
124600,"private void addWebHCatFields(){
  Group whcGroup=Form.createGroup(this,4,Messages.getString(""String_Node_Str""),110);
  whcGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  whcHostnameText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
  whcPortText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
  whcUsernameText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
  whcJobResultFolderText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
}","private void addWebHCatFields(){
  Group whcGroup=Form.createGroup(this,4,Messages.getString(""String_Node_Str""),110);
  whcGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  whcHostnameText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
  whcPortText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
  whcUsernameText=new LabelledText(whcGroup,Messages.getString(""String_Node_Str""),1);
}",0.9042224510813596
124601,"@Test public void test_doSupportService_non_DistributionVersion(){
  Assert.assertFalse(DistributionHelper.doSupportService(new IHDistributionVersion(){
    @Override public IHDistribution getDistribution(){
      return null;
    }
    @Override public String getVersion(){
      return null;
    }
    @Override public String getDisplayVersion(){
      return null;
    }
    @Override public String getDefaultConfig(    String... keys){
      return null;
    }
    @Override public List<ModuleNeeded> getModulesNeeded(){
      return null;
    }
  }
,null));
}","@Test public void test_doSupportService_non_DistributionVersion(){
  Assert.assertFalse(DistributionHelper.doSupportService(new IHDistributionVersion(){
    @Override public IHDistribution getDistribution(){
      return null;
    }
    @Override public String getVersion(){
      return null;
    }
    @Override public String getDisplayVersion(){
      return null;
    }
    @Override public String getDefaultConfig(    String... keys){
      return null;
    }
    @Override public List<ModuleNeeded> getModulesNeeded(){
      return null;
    }
    @Override public boolean doSupportOozie(){
      return true;
    }
  }
,null));
}",0.94
124602,"@Test public void testDataproc11Distribution() throws Exception {
  HadoopComponent distribution=new Dataproc11Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(Dataproc11Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(Dataproc11Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertTrue(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_0));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_0));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
}","@Test public void testDataproc11Distribution() throws Exception {
  HadoopComponent distribution=new Dataproc11Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(Dataproc11Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(Dataproc11Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertTrue(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_0));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkBatchComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_2_0));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_6));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_5));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_4));
  assertFalse(((SparkStreamingComponent)distribution).getSparkVersions().contains(ESparkVersion.SPARK_1_3));
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
  assertFalse(distribution.doSupportOozie());
}",0.9915966386554622
124603,"private void initCommonProperties(HadoopServiceProperties properties){
  properties.setItem(this.connectionItem);
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection,connection.getContextName(),false);
  }
  properties.setContextType(contextType);
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
  properties.setRelativeHadoopClusterLabel(connectionItem.getProperty().getLabel());
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setUseKrb(connection.isEnableKerberos());
}","private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection,connection.getContextName(),false);
  }
  properties.setContextType(contextType);
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
  properties.setRelativeHadoopClusterLabel(connectionItem.getProperty().getLabel());
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setUseKrb(connection.isEnableKerberos());
}",0.9698668535388928
124604,"public List<ModuleNeeded> getModulesNeeded(){
  if (modulesNeeded.isEmpty()) {
synchronized (DistributionVersion.class) {
      if (modulesNeeded.isEmpty()) {
        for (        DistributionVersionModule vm : modules) {
          modulesNeeded.addAll(vm.getModulesNeeded());
        }
      }
    }
  }
  return modulesNeeded;
}","@Override public List<ModuleNeeded> getModulesNeeded(){
  if (modulesNeeded.isEmpty()) {
synchronized (DistributionVersion.class) {
      if (modulesNeeded.isEmpty()) {
        for (        DistributionVersionModule vm : modules) {
          modulesNeeded.addAll(vm.getModulesNeeded());
        }
      }
    }
  }
  return modulesNeeded;
}",0.9850746268656716
124605,"public String getDefaultConfig(String... keys){
  return hadoopComponent != null ? hadoopComponent.getDefaultConfig(keys) : null;
}","@Override public String getDefaultConfig(String... keys){
  return hadoopComponent != null ? hadoopComponent.getDefaultConfig(keys) : null;
}",0.9632352941176472
124606,"private List<String> getDistributionVersions(IHDistribution distribution){
  return Arrays.asList(distribution.getVersionsDisplay());
}","private List<String> getDistributionVersions(IHDistribution distribution){
  return new ArrayList<String>(Arrays.asList(distribution.getVersionsDisplay()));
}",0.9215017064846416
124607,"private void updateVersionPart(IHDistribution distribution){
  if (distribution == null) {
    return;
  }
  GridData distriData=(GridData)hadoopDistributionCombo.getCombo().getLayoutData();
  if (distribution.useCustom()) {
    hadoopVersionCombo.setHideWidgets(true);
    distriData.horizontalSpan=1;
    hideControl(customButton,false);
    hideControl(useYarnButton,false);
    hideControl(customGroup,false);
  }
 else {
    hadoopVersionCombo.setHideWidgets(false);
    distriData.horizontalSpan=2;
    hideControl(customButton,true);
    hideControl(useYarnButton,true);
    hideControl(customGroup,true);
    List<String> items=getDistributionVersions(distribution);
    if (distribution.getName().equals(""String_Node_Str"")) {
      items.remove(""String_Node_Str"");
    }
    String[] versions=new String[items.size()];
    items.toArray(versions);
    hadoopVersionCombo.getCombo().setItems(versions);
    if (versions.length > 0) {
      hadoopVersionCombo.getCombo().select(0);
    }
  }
}","private void updateVersionPart(IHDistribution distribution){
  if (distribution == null) {
    return;
  }
  GridData distriData=(GridData)hadoopDistributionCombo.getCombo().getLayoutData();
  if (distribution.useCustom()) {
    hadoopVersionCombo.setHideWidgets(true);
    distriData.horizontalSpan=1;
    hideControl(customButton,false);
    hideControl(useYarnButton,false);
    hideControl(customGroup,false);
  }
 else {
    hadoopVersionCombo.setHideWidgets(false);
    distriData.horizontalSpan=2;
    hideControl(customButton,true);
    hideControl(useYarnButton,true);
    hideControl(customGroup,true);
    List<String> items=getDistributionVersions(distribution);
    Iterator<String> iter=items.iterator();
    while (iter.hasNext()) {
      String version=iter.next();
      IHDistributionVersion distributionVersion=distribution.getHDVersion(version,true);
      if (!distributionVersion.doSupportOozie()) {
        iter.remove();
      }
    }
    String[] versions=new String[items.size()];
    items.toArray(versions);
    hadoopVersionCombo.getCombo().setItems(versions);
    if (versions.length > 0) {
      hadoopVersionCombo.getCombo().select(0);
    }
  }
}",0.8536025699862322
124608,"@Override protected boolean hideAction(RepositoryNode node){
  HadoopClusterConnectionItem hcConnectionItem=HCRepositoryUtil.getHCConnectionItemFromRepositoryNode(node);
  if (hcConnectionItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
    EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hcConnection.getDistribution(),false);
    EHadoopVersion4Drivers version4Drivers=EHadoopVersion4Drivers.indexOfByVersion(hcConnection.getDfVersion());
    if (EHadoopVersion4Drivers.APACHE_1_0_3_EMR.equals(version4Drivers) || EHadoopVersion4Drivers.APACHE_2_4_0_EMR.equals(version4Drivers) || EHadoopVersion4Drivers.EMR_4_0_0.equals(version4Drivers)|| EHadoopVersion4Drivers.APACHE_1_0_0.equals(version4Drivers)|| EHadoopVersion4Drivers.PIVOTAL_HD_1_0_1.equals(version4Drivers)) {
      return true;
    }
    if (distribution == EHadoopDistributions.MICROSOFT_HD_INSIGHT || distribution == EHadoopDistributions.GOOGLE_CLOUD_DATAPROC) {
      return true;
    }
    DistributionBean distributionBean=HadoopDistributionsHelper.HADOOP.getDistribution(hcConnection.getDistribution(),false);
    if (distributionBean != null) {
      DistributionVersion distributionVersion=distributionBean.getVersion(hcConnection.getDfVersion(),false);
      boolean isSupportOozie=distributionVersion.hadoopComponent.doSupportOozie();
      return !isSupportOozie;
    }
  }
  return false;
}","@Override protected boolean hideAction(RepositoryNode node){
  HadoopClusterConnectionItem hcConnectionItem=HCRepositoryUtil.getHCConnectionItemFromRepositoryNode(node);
  if (hcConnectionItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
    DistributionBean distributionBean=HadoopDistributionsHelper.HADOOP.getDistribution(hcConnection.getDistribution(),false);
    if (distributionBean != null) {
      DistributionVersion distributionVersion=distributionBean.getVersion(hcConnection.getDfVersion(),false);
      boolean isSupportOozie=distributionVersion.hadoopComponent.doSupportOozie();
      return !isSupportOozie;
    }
  }
  return false;
}",0.6580882352941176
124609,"@Test public void testDataproc11Distribution() throws Exception {
  HadoopComponent distribution=new Dataproc11Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(Dataproc11Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(Dataproc11Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertFalse(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertTrue(((SparkBatchComponent)distribution).isSpark20());
  assertFalse(((SparkBatchComponent)distribution).isSpark16());
  assertFalse(((SparkBatchComponent)distribution).isSpark15());
  assertFalse(((SparkBatchComponent)distribution).isSpark14());
  assertFalse(((SparkBatchComponent)distribution).isSpark13());
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).isSpark20());
  assertFalse(((SparkStreamingComponent)distribution).isSpark16());
  assertFalse(((SparkStreamingComponent)distribution).isSpark15());
  assertFalse(((SparkStreamingComponent)distribution).isSpark14());
  assertFalse(((SparkStreamingComponent)distribution).isSpark13());
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
}","@Test public void testDataproc11Distribution() throws Exception {
  HadoopComponent distribution=new Dataproc11Distribution();
  assertNotNull(distribution.getDistributionName());
  assertNotNull(distribution.getVersionName(null));
  assertFalse(distribution.doSupportS3());
  assertEquals(Dataproc11Distribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertEquals(Dataproc11Distribution.VERSION,distribution.getVersion());
  assertEquals(EHadoopVersion.HADOOP_2,distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertFalse(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertTrue(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertTrue(((SparkBatchComponent)distribution).isSpark20());
  assertFalse(((SparkBatchComponent)distribution).isSpark16());
  assertFalse(((SparkBatchComponent)distribution).isSpark15());
  assertFalse(((SparkBatchComponent)distribution).isSpark14());
  assertFalse(((SparkBatchComponent)distribution).isSpark13());
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertFalse(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).isSpark20());
  assertFalse(((SparkStreamingComponent)distribution).isSpark16());
  assertFalse(((SparkStreamingComponent)distribution).isSpark15());
  assertFalse(((SparkStreamingComponent)distribution).isSpark14());
  assertFalse(((SparkStreamingComponent)distribution).isSpark13());
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertFalse(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
}",0.9524842699067044
124610,"private void testDistributionOnly(String distributionName,String distributionDisplay,String[][] supportVersions){
  DistributionBean distribution=HadoopDistributionsHelper.HADOOP.getDistribution(distributionName,false);
  Assert.assertNotNull(""String_Node_Str"" + distributionName,distribution);
  Assert.assertEquals(distributionName,distribution.name);
  Assert.assertEquals(distributionDisplay,distribution.displayName);
  Assert.assertNull(""String_Node_Str"",distribution.componentType);
  if (supportVersions != null) {
    for (int i=0; i < supportVersions.length; i++) {
      String versionName=supportVersions[i][0];
      String versionDisplay=supportVersions[i][1];
      String hadoopVersion=supportVersions[i][2];
      DistributionVersion version=distribution.getVersion(versionDisplay,true);
      Assert.assertNotNull(""String_Node_Str"" + versionDisplay,version);
      Assert.assertEquals(versionName,version.version);
      Assert.assertEquals(versionDisplay,version.displayVersion);
      Assert.assertEquals(distribution,version.distribution);
      Assert.assertNotNull(version.hadoopComponent);
      Assert.assertEquals(distributionName,version.hadoopComponent.getDistribution());
      Assert.assertEquals(distributionDisplay,version.hadoopComponent.getDistributionName());
      Assert.assertEquals(versionName,version.hadoopComponent.getVersion());
      Assert.assertEquals(versionDisplay,version.hadoopComponent.getVersionName(distribution.componentType));
      if (version.hadoopComponent.getHadoopVersion() != null) {
        Assert.assertEquals(hadoopVersion,version.hadoopComponent.getHadoopVersion().name());
      }
    }
  }
}","private void testDistributionOnly(String distributionName,String distributionDisplay,String[][] supportVersions){
  DistributionBean distribution=HadoopDistributionsHelper.HADOOP.getDistribution(distributionName,false);
  Assert.assertNotNull(""String_Node_Str"" + distributionName,distribution);
  Assert.assertEquals(distributionName,distribution.name);
  Assert.assertEquals(distributionDisplay,distribution.displayName);
  Assert.assertNull(""String_Node_Str"",distribution.componentType);
  if (supportVersions != null) {
    for (    String[] supportVersion : supportVersions) {
      String versionName=supportVersion[0];
      String versionDisplay=supportVersion[1];
      String hadoopVersion=supportVersion[2];
      DistributionVersion version=distribution.getVersion(versionDisplay,true);
      Assert.assertNotNull(""String_Node_Str"" + versionDisplay,version);
      Assert.assertEquals(versionName,version.version);
      Assert.assertEquals(versionDisplay,version.displayVersion);
      Assert.assertEquals(distribution,version.distribution);
      Assert.assertNotNull(version.hadoopComponent);
      Assert.assertEquals(distributionName,version.hadoopComponent.getDistribution());
      Assert.assertEquals(distributionDisplay,version.hadoopComponent.getDistributionName());
      Assert.assertEquals(versionName,version.hadoopComponent.getVersion());
      Assert.assertEquals(versionDisplay,version.hadoopComponent.getVersionName(distribution.componentType));
      if (version.hadoopComponent.getHadoopVersion() != null) {
        Assert.assertEquals(hadoopVersion,version.hadoopComponent.getHadoopVersion().name());
      }
    }
  }
}",0.9537903956508608
124611,"@Test public void testGetHadoopDistributionsDisplay_withCustom__Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(true);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}","@Test public void testGetHadoopDistributionsDisplay_withCustom__Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(true);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}",0.9775
124612,"@Test public void testGetHadoopDistributionsDisplay_Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(false);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}","@Test public void testGetHadoopDistributionsDisplay_Sorted(){
  String[] hadoopDistributionsDisplay=HadoopDistributionsHelper.HADOOP.getDistributionsDisplay(false);
  Assert.assertArrayEquals(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},hadoopDistributionsDisplay);
}",0.9757412398921832
124613,"private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    if (hcConnection.isEnableMaprT()) {
      return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
    }
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUserName(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviPassword(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviMetadataUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviClientUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviAutoCommit(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDisableSSL(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDieOnError(connection);
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
  return null;
}","private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    if (hcConnection.isEnableMaprT()) {
      return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
    }
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUserName(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviPassword(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviMetadataUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviClientUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviAutoCommit(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDisableSSL(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDieOnError(connection);
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
  return null;
}",0.8340105162523901
124614,"public CheckHadoopServicesDialog(Shell parentShell,Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties){
  super(parentShell);
  setShellStyle(getShellStyle() | SWT.RESIZE | SWT.MIN| SWT.APPLICATION_MODAL);
  this.serviceTypeToProperties=serviceTypeToProperties;
}","public CheckHadoopServicesDialog(Shell parentShell,Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties){
  super(parentShell);
  setShellStyle(getShellStyle() | SWT.RESIZE | SWT.MIN| SWT.APPLICATION_MODAL| SWT.MAX);
  this.serviceTypeToProperties=serviceTypeToProperties;
}",0.9844020797227035
124615,"private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    if (hcConnection.isEnableMaprT()) {
      return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
    }
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUserName(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviPassword(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviMetadataUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviClientUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviAutoCommit(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDisableSSL(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDieOnError(connection);
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
  return null;
}","private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    if (hcConnection.isEnableMaprT()) {
      return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
    }
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUserName(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviPassword(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviMetadataUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviClientUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviAutoCommit(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDisableSSL(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDieOnError(connection);
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
  return null;
}",0.8340105162523901
124616,"public CheckHadoopServicesDialog(Shell parentShell,Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties){
  super(parentShell);
  setShellStyle(getShellStyle() | SWT.RESIZE | SWT.MIN| SWT.APPLICATION_MODAL);
  this.serviceTypeToProperties=serviceTypeToProperties;
}","public CheckHadoopServicesDialog(Shell parentShell,Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties){
  super(parentShell);
  setShellStyle(getShellStyle() | SWT.RESIZE | SWT.MIN| SWT.APPLICATION_MODAL| SWT.MAX);
  this.serviceTypeToProperties=serviceTypeToProperties;
}",0.9844020797227035
124617,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public String getName(){
  if (eContainer() != null && eContainer() instanceof PigMapData) {
    return ""String_Node_Str"" + ((PigMapData)eContainer()).getConnections().indexOf(this);
  }
  return null;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public String getName(){
  if (eContainer() != null && eContainer() instanceof PigMapData) {
    PigMapData mapData=(PigMapData)eContainer();
    String nodeName=""String_Node_Str"";
    if (mapData.eContainer() instanceof NodeType) {
      NodeType nodeType=(NodeType)mapData.eContainer();
      for (      Object objectParam : nodeType.getElementParameter()) {
        if (objectParam instanceof ElementParameterType) {
          ElementParameterType elemParam=(ElementParameterType)objectParam;
          if (elemParam.getValue() != null) {
            if (""String_Node_Str"".equals(elemParam.getName()) || elemParam.getName() == null) {
              nodeName=elemParam.getValue() + ""String_Node_Str"";
              break;
            }
          }
        }
      }
    }
    return nodeName + ""String_Node_Str"" + mapData.getConnections().indexOf(this);
  }
  return null;
}",0.4094232331437855
124618,"@Override public Object getRepositoryValue(NoSQLConnection connection,String value,IMetadataTable table,String targetComponent){
  if (IMongoDBAttributes.DB_VERSION.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DB_VERSION),false);
  }
 else   if (IMongoDBAttributes.HOST.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.HOST));
  }
 else   if (IMongoDBAttributes.PORT.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.PORT),false);
  }
 else   if (IMongoDBAttributes.DATABASE.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DATABASE));
  }
 else   if (IMongoDBAttributes.REQUIRED_AUTHENTICATION.endsWith(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.REQUIRED_AUTHENTICATION),false);
  }
 else   if (IMongoDBAttributes.USERNAME.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USERNAME));
  }
 else   if (IMongoDBAttributes.PASSWORD.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getValue(connection.getAttributes().get(IMongoDBAttributes.PASSWORD),false));
  }
 else   if (IMongoDBAttributes.USE_REPLICA_SET.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET),false);
  }
 else   if (IMongoDBAttributes.REPLICA_SET.equals(value)) {
    try {
      String replicaSetJsonStr=connection.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
      return MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,true);
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","@Override public Object getRepositoryValue(NoSQLConnection connection,String value,IMetadataTable table,String targetComponent){
  if (IMongoDBAttributes.DB_VERSION.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DB_VERSION),false);
  }
 else   if (IMongoDBAttributes.HOST.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.HOST));
  }
 else   if (IMongoDBAttributes.PORT.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.PORT),false);
  }
 else   if (IMongoDBAttributes.DATABASE.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DATABASE));
  }
 else   if (IMongoDBAttributes.REQUIRED_AUTHENTICATION.endsWith(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.REQUIRED_AUTHENTICATION),false);
  }
 else   if (IMongoDBAttributes.USERNAME.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USERNAME));
  }
 else   if (IMongoDBAttributes.PASSWORD.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getValue(connection.getAttributes().get(IMongoDBAttributes.PASSWORD),false));
  }
 else   if (IMongoDBAttributes.USE_REPLICA_SET.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET),false);
  }
 else   if (IMongoDBAttributes.REPLICA_SET.equals(value)) {
    try {
      String replicaSetJsonStr=connection.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
      return MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,!connection.isContextMode());
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9920287991771664
124619,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,javaType);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,javaType);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,JavaTypesManager.STRING);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,JavaTypesManager.INTEGER);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}",0.994413407821229
124620,"/** 
 * DOC PLV Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  replicaSet=new ArrayList<HashMap<String,Object>>();
  HashMap<String,Object> mapObject=new HashMap<String,Object>();
  mapObject.put(KEY,VALUE);
  replicaSet.add(mapObject);
}","@Before public void setUp() throws Exception {
  contextReplicaSet=""String_Node_Str"";
  builtInReplicaSet=""String_Node_Str"";
}",0.4141176470588235
124621,"/** 
 * Test method for  {@link org.talend.repository.nosql.db.util.mongodb.MongoDBConnectionUtil#getReplicaSetList(java.lang.String,boolean)}.
 */
@Test public void testGetReplicaSetList(){
  try {
    boolean includeQuotes=false;
    JSONArray jsonArr=new JSONArray();
    for (    HashMap<String,Object> map : replicaSet) {
      JSONObject object=new JSONObject();
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        String key=(String)it.next();
        object.put(key,map.get(key));
      }
      jsonArr.put(object);
    }
    String replicaSetJsonStr=jsonArr.toString();
    List<HashMap<String,Object>> replicaSetList=MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,includeQuotes);
    Assert.assertNotNull(replicaSetList);
    Assert.assertSame(replicaSetList.size(),1);
    HashMap<String,Object> mapObject=replicaSetList.get(0);
    Assert.assertEquals(mapObject.get(KEY),VALUE);
    includeQuotes=true;
    replicaSetList=MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,includeQuotes);
    mapObject=replicaSetList.get(0);
    Assert.assertEquals(mapObject.get(KEY),QUOTATION_MARK + VALUE + QUOTATION_MARK);
  }
 catch (  JSONException e) {
    Assert.fail();
  }
}","@Test public void testGetReplicaSetList() throws Exception {
  boolean isContextMode=true;
  List<HashMap<String,Object>> replicaSetList=MongoDBConnectionUtil.getReplicaSetList(contextReplicaSet,!isContextMode);
  validateResult(replicaSetList,isContextMode);
  isContextMode=false;
  replicaSetList=MongoDBConnectionUtil.getReplicaSetList(builtInReplicaSet,!isContextMode);
  validateResult(replicaSetList,isContextMode);
}",0.1878787878787878
124622,"@Test public void testCreateContextParameters() throws Exception {
  List<IContextParameter> varList=handler.createContextParameters(""String_Node_Str"",noSqlConnection,paramSet);
  int i=0;
  for (  IContextParameter contextParameter : varList) {
    if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      i++;
    }
 else     if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      i++;
    }
  }
  assertTrue(i == 2);
}","@Test public void testCreateContextParameters() throws Exception {
  List<IContextParameter> varList=handler.createContextParameters(""String_Node_Str"",noSqlConnection,paramSet);
  int i=0;
  for (  IContextParameter contextParameter : varList) {
    if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      assertEquals(contextParameter.getType(),JavaTypesManager.STRING.getId());
      i++;
    }
 else     if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      assertEquals(contextParameter.getType(),JavaTypesManager.INTEGER.getId());
      i++;
    }
  }
  assertTrue(i == 2);
}",0.8771929824561403
124623,"@Override public Object getRepositoryValue(NoSQLConnection connection,String value,IMetadataTable table,String targetComponent){
  if (IMongoDBAttributes.DB_VERSION.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DB_VERSION),false);
  }
 else   if (IMongoDBAttributes.HOST.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.HOST));
  }
 else   if (IMongoDBAttributes.PORT.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.PORT),false);
  }
 else   if (IMongoDBAttributes.DATABASE.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DATABASE));
  }
 else   if (IMongoDBAttributes.REQUIRED_AUTHENTICATION.endsWith(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.REQUIRED_AUTHENTICATION),false);
  }
 else   if (IMongoDBAttributes.USERNAME.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USERNAME));
  }
 else   if (IMongoDBAttributes.PASSWORD.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getValue(connection.getAttributes().get(IMongoDBAttributes.PASSWORD),false));
  }
 else   if (IMongoDBAttributes.USE_REPLICA_SET.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET),false);
  }
 else   if (IMongoDBAttributes.REPLICA_SET.equals(value)) {
    try {
      String replicaSetJsonStr=connection.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
      return MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,true);
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","@Override public Object getRepositoryValue(NoSQLConnection connection,String value,IMetadataTable table,String targetComponent){
  if (IMongoDBAttributes.DB_VERSION.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DB_VERSION),false);
  }
 else   if (IMongoDBAttributes.HOST.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.HOST));
  }
 else   if (IMongoDBAttributes.PORT.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.PORT),false);
  }
 else   if (IMongoDBAttributes.DATABASE.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DATABASE));
  }
 else   if (IMongoDBAttributes.REQUIRED_AUTHENTICATION.endsWith(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.REQUIRED_AUTHENTICATION),false);
  }
 else   if (IMongoDBAttributes.USERNAME.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USERNAME));
  }
 else   if (IMongoDBAttributes.PASSWORD.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getValue(connection.getAttributes().get(IMongoDBAttributes.PASSWORD),false));
  }
 else   if (IMongoDBAttributes.USE_REPLICA_SET.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET),false);
  }
 else   if (IMongoDBAttributes.REPLICA_SET.equals(value)) {
    try {
      String replicaSetJsonStr=connection.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
      return MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,!connection.isContextMode());
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9920287991771664
124624,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,javaType);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,javaType);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,JavaTypesManager.STRING);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,JavaTypesManager.INTEGER);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}",0.994413407821229
124625,"/** 
 * DOC PLV Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  replicaSet=new ArrayList<HashMap<String,Object>>();
  HashMap<String,Object> mapObject=new HashMap<String,Object>();
  mapObject.put(KEY,VALUE);
  replicaSet.add(mapObject);
}","@Before public void setUp() throws Exception {
  contextReplicaSet=""String_Node_Str"";
  builtInReplicaSet=""String_Node_Str"";
}",0.4141176470588235
124626,"/** 
 * Test method for  {@link org.talend.repository.nosql.db.util.mongodb.MongoDBConnectionUtil#getReplicaSetList(java.lang.String,boolean)}.
 */
@Test public void testGetReplicaSetList(){
  try {
    boolean includeQuotes=false;
    JSONArray jsonArr=new JSONArray();
    for (    HashMap<String,Object> map : replicaSet) {
      JSONObject object=new JSONObject();
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        String key=(String)it.next();
        object.put(key,map.get(key));
      }
      jsonArr.put(object);
    }
    String replicaSetJsonStr=jsonArr.toString();
    List<HashMap<String,Object>> replicaSetList=MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,includeQuotes);
    Assert.assertNotNull(replicaSetList);
    Assert.assertSame(replicaSetList.size(),1);
    HashMap<String,Object> mapObject=replicaSetList.get(0);
    Assert.assertEquals(mapObject.get(KEY),VALUE);
    includeQuotes=true;
    replicaSetList=MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,includeQuotes);
    mapObject=replicaSetList.get(0);
    Assert.assertEquals(mapObject.get(KEY),QUOTATION_MARK + VALUE + QUOTATION_MARK);
  }
 catch (  JSONException e) {
    Assert.fail();
  }
}","@Test public void testGetReplicaSetList() throws Exception {
  boolean isContextMode=true;
  List<HashMap<String,Object>> replicaSetList=MongoDBConnectionUtil.getReplicaSetList(contextReplicaSet,!isContextMode);
  validateResult(replicaSetList,isContextMode);
  isContextMode=false;
  replicaSetList=MongoDBConnectionUtil.getReplicaSetList(builtInReplicaSet,!isContextMode);
  validateResult(replicaSetList,isContextMode);
}",0.1878787878787878
124627,"@Test public void testCreateContextParameters() throws Exception {
  List<IContextParameter> varList=handler.createContextParameters(""String_Node_Str"",noSqlConnection,paramSet);
  int i=0;
  for (  IContextParameter contextParameter : varList) {
    if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      i++;
    }
 else     if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      i++;
    }
  }
  assertTrue(i == 2);
}","@Test public void testCreateContextParameters() throws Exception {
  List<IContextParameter> varList=handler.createContextParameters(""String_Node_Str"",noSqlConnection,paramSet);
  int i=0;
  for (  IContextParameter contextParameter : varList) {
    if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      assertEquals(contextParameter.getType(),JavaTypesManager.STRING.getId());
      i++;
    }
 else     if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      assertEquals(contextParameter.getType(),JavaTypesManager.INTEGER.getId());
      i++;
    }
  }
  assertTrue(i == 2);
}",0.8771929824561403
124628,"/** 
 * DOC PLV Comment method ""revertPropertiesForContextMode"".
 * @param connectionItem
 * @param contextType
 * @param attributes
 */
public void revertPropertiesForContextMode(ContextType contextType){
  EMap<String,String> connAttributes=connection.getAttributes();
  if (connAttributes == null) {
    return;
  }
  for (  String attributeName : attributes) {
    String originalValue=ContextParameterUtils.getOriginalValue(contextType,connAttributes.get(attributeName));
    connAttributes.put(attributeName,originalValue);
  }
  connection.setContextMode(false);
  connection.setContextId(ConnectionContextHelper.EMPTY);
}","/** 
 * DOC PLV Comment method ""revertPropertiesForContextMode"".
 * @param connectionItem
 * @param contextType
 * @param attributes
 */
public void revertPropertiesForContextMode(ContextType contextType){
  EMap<String,String> connAttributes=connection.getAttributes();
  if (connAttributes == null) {
    return;
  }
  for (  String attributeName : attributes) {
    if (attributeName.equals(IMongoDBAttributes.REPLICA_SET)) {
      String replicaSets=connAttributes.get(IMongoDBAttributes.REPLICA_SET);
      try {
        JSONArray jsa=new JSONArray(replicaSets);
        for (int i=0; i < jsa.length(); i++) {
          JSONObject jso=jsa.getJSONObject(i);
          String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
          String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
          String originalHostValue=ContextParameterUtils.getOriginalValue(contextType,hostValue);
          String originalPortValue=ContextParameterUtils.getOriginalValue(contextType,portValue);
          jso.put(IMongoConstants.REPLICA_HOST_KEY,originalHostValue);
          jso.put(IMongoConstants.REPLICA_PORT_KEY,originalPortValue);
        }
        connAttributes.put(IMongoDBAttributes.REPLICA_SET,jsa.toString());
      }
 catch (      JSONException e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      String originalValue=ContextParameterUtils.getOriginalValue(contextType,connAttributes.get(attributeName));
      connAttributes.put(attributeName,originalValue);
    }
  }
  connection.setContextMode(false);
  connection.setContextId(ConnectionContextHelper.EMPTY);
}",0.5008928571428571
124629,"@Override public void widgetSelected(SelectionEvent e){
  updateReplicaField();
  checkFieldsValue();
  getConnection().getAttributes().put(IMongoDBAttributes.USE_REPLICA_SET,String.valueOf(checkUseReplicaBtn.getSelection()));
}","@Override public void widgetSelected(SelectionEvent e){
  updateAttributes();
  updateReplicaField();
  checkFieldsValue();
  getConnection().getAttributes().put(IMongoDBAttributes.USE_REPLICA_SET,String.valueOf(checkUseReplicaBtn.getSelection()));
}",0.9539748953974896
124630,"@Override protected void updateAttributes(){
  super.updateAttributes();
  attributes.add(INoSQLCommonAttributes.HOST);
  attributes.add(INoSQLCommonAttributes.PORT);
  attributes.add(INoSQLCommonAttributes.DATABASE);
  if (checkRequireAuthBtn.getSelection()) {
    attributes.add(INoSQLCommonAttributes.USERNAME);
    attributes.add(INoSQLCommonAttributes.PASSWORD);
  }
}","@Override protected void updateAttributes(){
  super.updateAttributes();
  attributes.add(INoSQLCommonAttributes.DATABASE);
  if (checkUseReplicaBtn.getSelection()) {
    attributes.add(IMongoDBAttributes.REPLICA_SET);
  }
 else {
    attributes.add(INoSQLCommonAttributes.HOST);
    attributes.add(INoSQLCommonAttributes.PORT);
  }
  if (checkRequireAuthBtn.getSelection()) {
    attributes.add(INoSQLCommonAttributes.USERNAME);
    attributes.add(INoSQLCommonAttributes.PASSWORD);
  }
}",0.7549361207897793
124631,"private void updateReplicaField(){
  boolean hide=checkUseReplicaBtn.getSelection();
  setHideWidgets(connComposite,hide);
  serverText.setHideWidgets(hide);
  portText.setHideWidgets(hide);
  setHideWidgets(replicaComposite,!hide);
  connectionGroup.getParent().layout();
}","private void updateReplicaField(){
  boolean hide=checkUseReplicaBtn.getSelection();
  setHideWidgets(connComposite,hide);
  serverText.setHideWidgets(hide);
  portText.setHideWidgets(hide);
  setHideWidgets(replicaComposite,!hide);
  replicaTableView.setReadOnly(isContextMode());
  connectionGroup.getParent().layout();
}",0.917922948073702
124632,"@Override protected void addFieldsListeners(){
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.DB_VERSION,repositoryTranslator.getValue(dbVersionCombo.getText()));
    }
  }
);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.HOST,serverText.getText());
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.PORT,portText.getText());
    }
  }
);
  databaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.DATABASE,databaseText.getText());
    }
  }
);
  checkRequireAuthBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      checkFieldsValue();
      updateAuthGroup();
      updateAttributes();
      getConnection().getAttributes().put(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION,String.valueOf(checkRequireAuthBtn.getSelection()));
    }
  }
);
  userText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.USERNAME,userText.getText());
    }
  }
);
  pwdText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      NoSQLConnection conn=getConnection();
      conn.getAttributes().put(INoSQLCommonAttributes.PASSWORD,conn.getValue(pwdText.getText(),true));
    }
  }
);
  checkUseReplicaBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateReplicaField();
      checkFieldsValue();
      getConnection().getAttributes().put(IMongoDBAttributes.USE_REPLICA_SET,String.valueOf(checkUseReplicaBtn.getSelection()));
    }
  }
);
  replicaTableView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      saveReplicaModel();
    }
  }
);
  replicaTableView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<HashMap<String,Object>>(){
    @Override public void handleEvent(    ModifiedBeanEvent<HashMap<String,Object>> event){
      saveReplicaModel();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.DB_VERSION,repositoryTranslator.getValue(dbVersionCombo.getText()));
    }
  }
);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.HOST,serverText.getText());
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.PORT,portText.getText());
    }
  }
);
  databaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.DATABASE,databaseText.getText());
    }
  }
);
  checkRequireAuthBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      checkFieldsValue();
      updateAuthGroup();
      updateAttributes();
      getConnection().getAttributes().put(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION,String.valueOf(checkRequireAuthBtn.getSelection()));
    }
  }
);
  userText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      getConnection().getAttributes().put(INoSQLCommonAttributes.USERNAME,userText.getText());
    }
  }
);
  pwdText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
      NoSQLConnection conn=getConnection();
      conn.getAttributes().put(INoSQLCommonAttributes.PASSWORD,conn.getValue(pwdText.getText(),true));
    }
  }
);
  checkUseReplicaBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateAttributes();
      updateReplicaField();
      checkFieldsValue();
      getConnection().getAttributes().put(IMongoDBAttributes.USE_REPLICA_SET,String.valueOf(checkUseReplicaBtn.getSelection()));
    }
  }
);
  replicaTableView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      saveReplicaModel();
    }
  }
);
  replicaTableView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<HashMap<String,Object>>(){
    @Override public void handleEvent(    ModifiedBeanEvent<HashMap<String,Object>> event){
      saveReplicaModel();
    }
  }
);
}",0.99530007230658
124633,"@Override protected void collectConParameters(){
  collectReplicaParameters(!checkUseReplicaBtn.getSelection());
  collectAuthParams(checkRequireAuthBtn.getSelection());
}","@Override protected void collectConParameters(){
  collectReplicaParameters(checkUseReplicaBtn.getSelection());
  collectAuthParams(checkRequireAuthBtn.getSelection());
}",0.997067448680352
124634,"private void collectReplicaParameters(boolean isNeed){
  addContextParams(EHadoopParamName.Server,isNeed);
  addContextParams(EHadoopParamName.Port,isNeed);
  addContextParams(EHadoopParamName.Database,true);
}","private void collectReplicaParameters(boolean isReplica){
  clearContextParams();
  addContextParams(EHadoopParamName.Database,true);
  if (isReplica) {
    addContextParams(EHadoopParamName.ReplicaSets,true);
  }
 else {
    addContextParams(EHadoopParamName.Server,true);
    addContextParams(EHadoopParamName.Port,true);
  }
}",0.6307977736549165
124635,"private void initReplicaField(){
  String replica=getConnection().getAttributes().get(IMongoDBAttributes.REPLICA_SET);
  try {
    if (StringUtils.isNotEmpty(replica)) {
      JSONArray jsonArr=new JSONArray(replica);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<Object> it=object.keys();
        while (it.hasNext()) {
          String key=(String)it.next();
          map.put(key,object.get(key));
        }
        replicaList.add(map);
      }
    }
  }
 catch (  JSONException e) {
  }
}","private void initReplicaField(){
  replicaList.clear();
  String replica=getConnection().getAttributes().get(IMongoDBAttributes.REPLICA_SET);
  try {
    if (StringUtils.isNotEmpty(replica)) {
      JSONArray jsonArr=new JSONArray(replica);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<Object> it=object.keys();
        while (it.hasNext()) {
          String key=(String)it.next();
          map.put(key,object.get(key));
        }
        replicaList.add(map);
      }
    }
  }
 catch (  JSONException e) {
  }
}",0.9820732657833204
124636,"@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  boolean isUseReplicaSet=Boolean.parseBoolean(conn.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
  }
  serverText.setText(server == null ? IMongoConstants.DEFAULT_HOST : server);
  portText.setText(port == null ? IMongoConstants.DEFAULT_PORT : port);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  checkUseReplicaBtn.setSelection(isUseReplicaSet);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateReplicaField();
  updateAuthGroup();
}","@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  boolean isUseReplicaSet=Boolean.parseBoolean(conn.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
  }
  serverText.setText(server == null ? IMongoConstants.DEFAULT_HOST : server);
  portText.setText(port == null ? IMongoConstants.DEFAULT_PORT : port);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  checkUseReplicaBtn.setSelection(isUseReplicaSet);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  initReplicaField();
  if (replicaTableView != null) {
    replicaTableView.getModel().registerDataList(replicaList);
  }
  updateReplicaField();
  updateAuthGroup();
}",0.9601554907677357
124637,"@Override protected void collectNoSqlAttributesForContext(){
  getConnection().getAttributes().put(INoSQLCommonAttributes.DATABASE,databaseText.getText());
  if (!checkUseReplicaBtn.getSelection()) {
    getConnection().getAttributes().put(INoSQLCommonAttributes.HOST,serverText.getText());
    getConnection().getAttributes().put(INoSQLCommonAttributes.PORT,portText.getText());
  }
  if (checkRequireAuthBtn.getSelection()) {
    getConnection().getAttributes().put(INoSQLCommonAttributes.USERNAME,userText.getText());
    getConnection().getAttributes().put(INoSQLCommonAttributes.PASSWORD,pwdText.getText());
  }
}","@Override protected void collectNoSqlAttributesForContext(){
  getConnection().getAttributes().put(INoSQLCommonAttributes.DATABASE,databaseText.getText());
  if (!checkUseReplicaBtn.getSelection()) {
    getConnection().getAttributes().put(INoSQLCommonAttributes.HOST,serverText.getText());
    getConnection().getAttributes().put(INoSQLCommonAttributes.PORT,portText.getText());
  }
 else {
    List<HashMap<String,Object>> currentReplicaList=replicaTableView.getModel().getBeansList();
    JSONArray jsa=new JSONArray(currentReplicaList);
    getConnection().getAttributes().put(IMongoDBAttributes.REPLICA_SET,jsa.toString());
  }
  if (checkRequireAuthBtn.getSelection()) {
    getConnection().getAttributes().put(INoSQLCommonAttributes.USERNAME,userText.getText());
    getConnection().getAttributes().put(INoSQLCommonAttributes.PASSWORD,pwdText.getText());
  }
}",0.8323232323232324
124638,"@Override public void setPropertiesForContextMode(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  if (connection == null) {
    return;
  }
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection noSqlConn=(NoSQLConnection)connection;
    String originalVariableName=prefixName + ConnectionContextHelper.LINE;
    String noSqlVariableName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        originalVariableName=prefixName + ConnectionContextHelper.LINE;
        noSqlVariableName=originalVariableName + noSqlParam;
        matchContextForAttribues(noSqlConn,noSqlParam,noSqlVariableName);
      }
    }
  }
}","@Override public void setPropertiesForContextMode(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  if (connection == null) {
    return;
  }
  if (connection instanceof NoSQLConnection) {
    String noSqlVariableName=null;
    NoSQLConnection noSqlConn=(NoSQLConnection)connection;
    String originalVariableName=prefixName + ConnectionContextHelper.LINE;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        originalVariableName=prefixName + ConnectionContextHelper.LINE;
        if (noSqlParam == EHadoopParamName.ReplicaSets) {
          noSqlVariableName=originalVariableName;
        }
 else {
          noSqlVariableName=originalVariableName + noSqlParam;
        }
        matchContextForAttribues(noSqlConn,noSqlParam,noSqlVariableName);
      }
    }
  }
}",0.875
124639,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
default :
}
}
}
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,javaType);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,javaType);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}",0.84061744467175
124640,"@Override public void setPropertiesForExistContextMode(Connection connection,Set<IConnParamName> paramSet,Map<ContextItem,List<ConectionAdaptContextVariableModel>> adaptMap){
  if (connection == null) {
    return;
  }
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection noSqlConn=(NoSQLConnection)connection;
    ContextItem currentContext=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        String noSqlVariableName=null;
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        if (adaptMap != null && adaptMap.size() > 0) {
          for (          Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : adaptMap.entrySet()) {
            currentContext=entry.getKey();
            List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
            for (            ConectionAdaptContextVariableModel model : modelList) {
              if (model.getValue().equals(noSqlParam.name())) {
                noSqlVariableName=model.getName();
                break;
              }
            }
          }
        }
        if (noSqlVariableName != null) {
          noSqlVariableName=getCorrectVariableName(currentContext,noSqlVariableName,noSqlParam);
          matchContextForAttribues(noSqlConn,noSqlParam,noSqlVariableName);
        }
      }
    }
  }
}","@Override public void setPropertiesForExistContextMode(Connection connection,Set<IConnParamName> paramSet,Map<ContextItem,List<ConectionAdaptContextVariableModel>> adaptMap){
  if (connection == null) {
    return;
  }
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection noSqlConn=(NoSQLConnection)connection;
    ContextItem currentContext=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        String noSqlVariableName=null;
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        if (noSqlParam == EHadoopParamName.ReplicaSets) {
          String replicaSets=noSqlConn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
          try {
            JSONArray jsa=new JSONArray(replicaSets);
            for (int i=0; i < jsa.length(); i++) {
              JSONObject jso=jsa.getJSONObject(i);
              int paramNum=i + 1;
              String hostParamName=ExtendedNodeConnectionContextUtils.getReplicaParamName(EHadoopParamName.ReplicaHost,paramNum);
              String portParamName=ExtendedNodeConnectionContextUtils.getReplicaParamName(EHadoopParamName.ReplicaPort,paramNum);
              String hostVariableName=null;
              String portVariableName=null;
              if (adaptMap != null && adaptMap.size() > 0) {
                for (                Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : adaptMap.entrySet()) {
                  currentContext=entry.getKey();
                  List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
                  for (                  ConectionAdaptContextVariableModel model : modelList) {
                    if (model.getValue().equals(hostParamName)) {
                      hostVariableName=model.getName();
                    }
 else                     if (model.getValue().equals(portParamName)) {
                      portVariableName=model.getName();
                    }
                    if (hostVariableName != null && portVariableName != null) {
                      break;
                    }
                  }
                }
              }
              if (hostVariableName != null && portVariableName != null) {
                hostVariableName=getCorrectVariableName(currentContext,hostVariableName,hostParamName);
                portVariableName=getCorrectVariableName(currentContext,portVariableName,portParamName);
                jso.put(IMongoConstants.REPLICA_HOST_KEY,ContextParameterUtils.getNewScriptCode(hostVariableName,LANGUAGE));
                jso.put(IMongoConstants.REPLICA_PORT_KEY,ContextParameterUtils.getNewScriptCode(portVariableName,LANGUAGE));
              }
            }
            noSqlConn.getAttributes().put(IMongoDBAttributes.REPLICA_SET,jsa.toString());
          }
 catch (          JSONException e) {
            ExceptionHandler.process(e);
          }
        }
 else {
          if (adaptMap != null && adaptMap.size() > 0) {
            for (            Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : adaptMap.entrySet()) {
              currentContext=entry.getKey();
              List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
              for (              ConectionAdaptContextVariableModel model : modelList) {
                if (model.getValue().equals(noSqlParam.name())) {
                  noSqlVariableName=model.getName();
                  break;
                }
              }
            }
          }
          if (noSqlVariableName != null) {
            noSqlVariableName=getCorrectVariableName(currentContext,noSqlVariableName,noSqlParam);
            matchContextForAttribues(noSqlConn,noSqlParam,noSqlVariableName);
          }
        }
      }
    }
  }
}",0.5194202898550725
124641,"@Override protected void matchContextForAttribues(Connection conn,IConnParamName param,String noSqlVariableName){
  NoSQLConnection noSqlConn=(NoSQLConnection)conn;
  EHadoopParamName noSqlParam=(EHadoopParamName)param;
switch (noSqlParam) {
case Server:
    noSqlConn.getAttributes().put(INoSQLCommonAttributes.HOST,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
  break;
case Port:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.PORT,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Database:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.DATABASE,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Keyspace:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.DATABASE,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Databasepath:
noSqlConn.getAttributes().put(INeo4jAttributes.DATABASE_PATH,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case ServerUrl:
noSqlConn.getAttributes().put(INeo4jAttributes.SERVER_URL,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case UserName:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.USERNAME,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Password:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.PASSWORD,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
default :
}
}","@Override protected void matchContextForAttribues(Connection conn,IConnParamName param,String noSqlVariableName){
  NoSQLConnection noSqlConn=(NoSQLConnection)conn;
  EHadoopParamName noSqlParam=(EHadoopParamName)param;
switch (noSqlParam) {
case Server:
    noSqlConn.getAttributes().put(INoSQLCommonAttributes.HOST,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
  break;
case Port:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.PORT,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Database:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.DATABASE,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Keyspace:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.DATABASE,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Databasepath:
noSqlConn.getAttributes().put(INeo4jAttributes.DATABASE_PATH,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case ServerUrl:
noSqlConn.getAttributes().put(INeo4jAttributes.SERVER_URL,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case UserName:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.USERNAME,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case Password:
noSqlConn.getAttributes().put(INoSQLCommonAttributes.PASSWORD,ContextParameterUtils.getNewScriptCode(noSqlVariableName,LANGUAGE));
break;
case ReplicaSets:
String replicaSets=noSqlConn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
int paramNum=i + 1;
String hostParamName=noSqlVariableName + ExtendedNodeConnectionContextUtils.getReplicaParamName(EHadoopParamName.ReplicaHost,paramNum);
String portParamName=noSqlVariableName + ExtendedNodeConnectionContextUtils.getReplicaParamName(EHadoopParamName.ReplicaPort,paramNum);
jso.put(IMongoConstants.REPLICA_HOST_KEY,ContextParameterUtils.getNewScriptCode(hostParamName,LANGUAGE));
jso.put(IMongoConstants.REPLICA_PORT_KEY,ContextParameterUtils.getNewScriptCode(portParamName,LANGUAGE));
}
noSqlConn.getAttributes().put(IMongoDBAttributes.REPLICA_SET,jsa.toString());
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
break;
default :
}
}",0.7697144354204873
124642,"@Override public Object getRepositoryValue(NoSQLConnection connection,String value,IMetadataTable table,String targetComponent){
  if (IMongoDBAttributes.DB_VERSION.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DB_VERSION),false);
  }
 else   if (IMongoDBAttributes.HOST.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.HOST));
  }
 else   if (IMongoDBAttributes.PORT.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.PORT),false);
  }
 else   if (IMongoDBAttributes.DATABASE.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DATABASE));
  }
 else   if (IMongoDBAttributes.REQUIRED_AUTHENTICATION.endsWith(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.REQUIRED_AUTHENTICATION),false);
  }
 else   if (IMongoDBAttributes.USERNAME.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USERNAME));
  }
 else   if (IMongoDBAttributes.PASSWORD.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getValue(connection.getAttributes().get(IMongoDBAttributes.PASSWORD),false));
  }
 else   if (IMongoDBAttributes.USE_REPLICA_SET.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET),false);
  }
 else   if (IMongoDBAttributes.REPLICA_SET.equals(value)) {
    try {
      String replicaSetJsonStr=connection.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
      return MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,true);
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","@Override public Object getRepositoryValue(NoSQLConnection connection,String value,IMetadataTable table,String targetComponent){
  if (IMongoDBAttributes.DB_VERSION.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DB_VERSION),false);
  }
 else   if (IMongoDBAttributes.HOST.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.HOST));
  }
 else   if (IMongoDBAttributes.PORT.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.PORT),false);
  }
 else   if (IMongoDBAttributes.DATABASE.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.DATABASE));
  }
 else   if (IMongoDBAttributes.REQUIRED_AUTHENTICATION.endsWith(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.REQUIRED_AUTHENTICATION),false);
  }
 else   if (IMongoDBAttributes.USERNAME.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USERNAME));
  }
 else   if (IMongoDBAttributes.PASSWORD.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getValue(connection.getAttributes().get(IMongoDBAttributes.PASSWORD),false));
  }
 else   if (IMongoDBAttributes.USE_REPLICA_SET.equals(value)) {
    return getCanonicalRepositoryValue(connection,connection.getAttributes().get(IMongoDBAttributes.USE_REPLICA_SET),false);
  }
 else   if (IMongoDBAttributes.REPLICA_SET.equals(value)) {
    try {
      String replicaSetJsonStr=connection.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
      return MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,!connection.isContextMode());
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.9920287991771664
124643,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,javaType);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,javaType);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof NoSQLConnection) {
    NoSQLConnection conn=(NoSQLConnection)connection;
    JavaType javaType=null;
    if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
      return Collections.emptyList();
    }
    for (    Map.Entry<String,String> attr : ((NoSQLConnection)connection).getAttributes()) {
      if (INoSQLCommonAttributes.PASSWORD.equals(attr)) {
        javaType=JavaTypesManager.PASSWORD;
      }
    }
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName noSqlParam=(EHadoopParamName)param;
        paramName=paramPrefix + noSqlParam;
switch (noSqlParam) {
case Server:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.HOST),javaType);
        break;
case Port:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PORT),javaType);
    break;
case Keyspace:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Database:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.DATABASE),javaType);
break;
case Databasepath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.DATABASE_PATH),javaType);
break;
case ServerUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INeo4jAttributes.SERVER_URL),javaType);
break;
case UserName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.USERNAME),javaType);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),JavaTypesManager.PASSWORD);
break;
case ReplicaSets:
String replicaSets=conn.getAttributes().get(IMongoDBAttributes.REPLICA_SET);
if (StringUtils.isNotEmpty(replicaSets)) {
try {
JSONArray jsa=new JSONArray(replicaSets);
for (int i=0; i < jsa.length(); i++) {
JSONObject jso=jsa.getJSONObject(i);
String hostParamName=paramPrefix + EHadoopParamName.ReplicaHost.name() + ConnectionContextHelper.LINE+ (i + 1);
String portParamName=paramPrefix + EHadoopParamName.ReplicaPort.name() + ConnectionContextHelper.LINE+ (i + 1);
String hostValue=jso.getString(IMongoConstants.REPLICA_HOST_KEY);
String portValue=jso.getString(IMongoConstants.REPLICA_PORT_KEY);
ConnectionContextHelper.createParameters(varList,hostParamName,hostValue,JavaTypesManager.STRING);
ConnectionContextHelper.createParameters(varList,portParamName,portValue,JavaTypesManager.INTEGER);
}
}
 catch (JSONException e) {
ExceptionHandler.process(e);
}
}
break;
default :
}
}
}
}
return varList;
}",0.994413407821229
124644,"/** 
 * DOC PLV Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  replicaSet=new ArrayList<HashMap<String,Object>>();
  HashMap<String,Object> mapObject=new HashMap<String,Object>();
  mapObject.put(KEY,VALUE);
  replicaSet.add(mapObject);
}","@Before public void setUp() throws Exception {
  contextReplicaSet=""String_Node_Str"";
  builtInReplicaSet=""String_Node_Str"";
}",0.4141176470588235
124645,"/** 
 * Test method for  {@link org.talend.repository.nosql.db.util.mongodb.MongoDBConnectionUtil#getReplicaSetList(java.lang.String,boolean)}.
 */
@Test public void testGetReplicaSetList(){
  try {
    boolean includeQuotes=false;
    JSONArray jsonArr=new JSONArray();
    for (    HashMap<String,Object> map : replicaSet) {
      JSONObject object=new JSONObject();
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        String key=(String)it.next();
        object.put(key,map.get(key));
      }
      jsonArr.put(object);
    }
    String replicaSetJsonStr=jsonArr.toString();
    List<HashMap<String,Object>> replicaSetList=MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,includeQuotes);
    Assert.assertNotNull(replicaSetList);
    Assert.assertSame(replicaSetList.size(),1);
    HashMap<String,Object> mapObject=replicaSetList.get(0);
    Assert.assertEquals(mapObject.get(KEY),VALUE);
    includeQuotes=true;
    replicaSetList=MongoDBConnectionUtil.getReplicaSetList(replicaSetJsonStr,includeQuotes);
    mapObject=replicaSetList.get(0);
    Assert.assertEquals(mapObject.get(KEY),QUOTATION_MARK + VALUE + QUOTATION_MARK);
  }
 catch (  JSONException e) {
    Assert.fail();
  }
}","@Test public void testGetReplicaSetList() throws Exception {
  boolean isContextMode=true;
  List<HashMap<String,Object>> replicaSetList=MongoDBConnectionUtil.getReplicaSetList(contextReplicaSet,!isContextMode);
  validateResult(replicaSetList,isContextMode);
  isContextMode=false;
  replicaSetList=MongoDBConnectionUtil.getReplicaSetList(builtInReplicaSet,!isContextMode);
  validateResult(replicaSetList,isContextMode);
}",0.1878787878787878
124646,"@Test public void testCreateContextParameters() throws Exception {
  List<IContextParameter> varList=handler.createContextParameters(""String_Node_Str"",noSqlConnection,paramSet);
  int i=0;
  for (  IContextParameter contextParameter : varList) {
    if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      i++;
    }
 else     if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      i++;
    }
  }
  assertTrue(i == 2);
}","@Test public void testCreateContextParameters() throws Exception {
  List<IContextParameter> varList=handler.createContextParameters(""String_Node_Str"",noSqlConnection,paramSet);
  int i=0;
  for (  IContextParameter contextParameter : varList) {
    if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      assertEquals(contextParameter.getType(),JavaTypesManager.STRING.getId());
      i++;
    }
 else     if (contextParameter.getValue().equals(""String_Node_Str"")) {
      assertEquals(""String_Node_Str"",contextParameter.getName());
      assertEquals(contextParameter.getType(),JavaTypesManager.INTEGER.getId());
      i++;
    }
  }
  assertTrue(i == 2);
}",0.8771929824561403
124647,"protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  IProcess process=node.getProcess();
  IContext context=null;
  IContextManager cm=process.getContextManager();
  if (cm != null) {
    context=cm.getDefaultContext();
  }
  boolean isMr=false;
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().equals(""String_Node_Str"")) {
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      IComponent component=iNode.getComponent();
      if (component != null && component.getName() != null && component.getName().equals(""String_Node_Str"")) {
        isMr=true;
        node=iNode;
        if (node instanceof DataNode || node instanceof BigDataNode) {
          String versionParameter=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
          if (versionParameter != null) {
            connectionBean.setDfVersion(versionParameter);
          }
          String nameNodeParameter=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_URI.getName());
          if (nameNodeParameter != null) {
            connectionBean.setNameNodeURI(nameNodeParameter);
          }
        }
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().startsWith(""String_Node_Str"")) {
    boolean browseIsSupported=false;
    boolean defineStorageConfiguration=(Boolean)getParameterValue(node,""String_Node_Str"");
    if (defineStorageConfiguration) {
      String configurationComponent=(String)getParameterValue(node,""String_Node_Str"");
      if (configurationComponent.startsWith(""String_Node_Str"")) {
        List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
        for (        INode iNode : nodes) {
          if (configurationComponent.equals(iNode.getUniqueName())) {
            browseIsSupported=true;
            isMr=true;
            node=iNode;
            String versionParameter=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
            if (versionParameter != null) {
              connectionBean.setDfVersion(versionParameter);
            }
            String nameNodeParameter=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_URI.getName());
            if (nameNodeParameter != null) {
              connectionBean.setNameNodeURI(nameNodeParameter);
            }
          }
        }
      }
    }
    if (!browseIsSupported) {
      IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),HDFSPlugin.PLUGIN_ID,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              return;
            }
          }
);
        }
      }
;
      ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
      try {
        dialog.run(true,true,runnableWithProgress);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
      return null;
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  if (!isMr) {
    String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
    String nameNodeUri=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_URI.getName());
    connectionBean.setDfVersion(version);
    connectionBean.setNameNodeURI(nameNodeUri);
  }
  EHadoopVersion4Drivers version4Drivers=EHadoopVersion4Drivers.indexOfByVersion(connectionBean.getDfVersion());
  if (version4Drivers != null && version4Drivers.isSupportGroup()) {
    String group=getParameterValueWithContext(node,context,EHadoopParameter.GROUP.getName());
    connectionBean.setGroup(group);
  }
  String userName=getParameterValueWithContext(node,context,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  Boolean useMaprTicket=(Boolean)getParameterValue(node,EHadoopParameter.USE_MAPRTICKET.getName());
  String nnPrincipal=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  Boolean useKeytab=(Boolean)getParameterValue(node,EHadoopParameter.USE_KEYTAB.getName());
  String ktPrincipal=getParameterValueWithContext(node,context,EHadoopParameter.PRINCIPAL.getName());
  String ktPath=getParameterValueWithContext(node,context,EHadoopParameter.KEYTAB_PATH.getName());
  Boolean isUseCustom=EHadoopDistributions.CUSTOM.getName().equals(distribution);
  if (isUseCustom) {
    Object authMode=getParameterValue(node,EHadoopParameter.AUTHENTICATION_MODE.getName());
    if (""String_Node_Str"".equals(authMode)) {
      useKrb=true;
    }
  }
  if (!isMr && node != null && node.getComponent() != null && node.getComponent().getName().equals(""String_Node_Str"")) {
    if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection) || useKrb || (distribution.equals(""String_Node_Str"") && !useMaprTicket)) {
      userName=""String_Node_Str"";
    }
  }
  String customJars=(String)getParameterValue(node,EHadoopParameter.HADOOP_CUSTOM_JARS.getName());
  connectionBean.setDistribution(distribution);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(nnPrincipal);
  connectionBean.setUseKeytab(useKeytab != null ? useKeytab : false);
  connectionBean.setKeytabPrincipal(ktPrincipal);
  connectionBean.setKeytab(ktPath);
  connectionBean.setUseCustomVersion(isUseCustom != null ? isUseCustom : false);
  if (StringUtils.isNotBlank(customJars)) {
    connectionBean.getAdditionalProperties().put(ECustomVersionGroup.COMMON.getName(),customJars);
  }
  if (process instanceof IProcess2) {
    IProcess2 pro=(IProcess2)process;
    connectionBean.setRelativeHadoopClusterId(pro.getProperty().getId());
    IElementParameter propertyParam=node.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (propertyParam != null) {
      IElementParameter repositoryType=propertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName());
      if (repositoryType != null && EmfComponent.REPOSITORY.equals(repositoryType.getValue())) {
        IHadoopClusterService hadoopClusterService=null;
        String relativeHadoopClusterId=null;
        IElementParameter repositoryId=propertyParam.getChildParameters().get((EParameterName.REPOSITORY_PROPERTY_TYPE.getName()));
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
          hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
        }
        if (hadoopClusterService != null) {
          Item item=hadoopClusterService.getHadoopClusterBySubitemId(((String)repositoryId.getValue()));
          if (item != null) {
            relativeHadoopClusterId=item.getProperty().getId();
            if (relativeHadoopClusterId != null) {
              connectionBean.setRelativeHadoopClusterId(relativeHadoopClusterId);
            }
          }
        }
      }
    }
  }
  return connectionBean;
}","protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  IProcess process=node.getProcess();
  IContext context=null;
  IContextManager cm=process.getContextManager();
  if (cm != null) {
    context=cm.getDefaultContext();
  }
  boolean isMr=false;
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().equals(""String_Node_Str"")) {
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      IComponent component=iNode.getComponent();
      if (component != null && component.getName() != null && component.getName().equals(""String_Node_Str"")) {
        isMr=true;
        node=iNode;
        if (node instanceof DataNode || node instanceof BigDataNode) {
          String versionParameter=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
          if (versionParameter != null) {
            connectionBean.setDfVersion(versionParameter);
          }
          String nameNodeParameter=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_URI.getName());
          if (nameNodeParameter != null) {
            connectionBean.setNameNodeURI(nameNodeParameter);
          }
        }
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().startsWith(""String_Node_Str"")) {
    boolean browseIsSupported=false;
    boolean defineStorageConfiguration=(Boolean)getParameterValue(node,""String_Node_Str"");
    if (defineStorageConfiguration) {
      String configurationComponent=(String)getParameterValue(node,""String_Node_Str"");
      if (configurationComponent.startsWith(""String_Node_Str"")) {
        List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
        for (        INode iNode : nodes) {
          if (configurationComponent.equals(iNode.getUniqueName())) {
            browseIsSupported=true;
            isMr=true;
            node=iNode;
            String versionParameter=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
            if (versionParameter != null) {
              connectionBean.setDfVersion(versionParameter);
            }
            String nameNodeParameter=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_URI.getName());
            if (nameNodeParameter != null) {
              connectionBean.setNameNodeURI(nameNodeParameter);
            }
          }
        }
      }
    }
    if (!browseIsSupported) {
      IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
        @Override public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),HDFSPlugin.PLUGIN_ID,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
              return;
            }
          }
);
        }
      }
;
      ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
      try {
        dialog.run(true,true,runnableWithProgress);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
      return null;
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  if (!isMr) {
    String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
    String nameNodeUri=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_URI.getName());
    connectionBean.setDfVersion(version);
    connectionBean.setNameNodeURI(nameNodeUri);
  }
  EHadoopVersion4Drivers version4Drivers=EHadoopVersion4Drivers.indexOfByVersion(connectionBean.getDfVersion());
  if (version4Drivers != null && version4Drivers.isSupportGroup()) {
    String group=getParameterValueWithContext(node,context,EHadoopParameter.GROUP.getName());
    connectionBean.setGroup(group);
  }
  String userName=getParameterValueWithContext(node,context,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  Boolean useMaprTicket=(Boolean)getParameterValue(node,EHadoopParameter.USE_MAPRTICKET.getName());
  String nnPrincipal=getParameterValueWithContext(node,context,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  Boolean useKeytab=(Boolean)getParameterValue(node,EHadoopParameter.USE_KEYTAB.getName());
  String ktPrincipal=getParameterValueWithContext(node,context,EHadoopParameter.PRINCIPAL.getName());
  String ktPath=getParameterValueWithContext(node,context,EHadoopParameter.KEYTAB_PATH.getName());
  Boolean isUseCustom=EHadoopDistributions.CUSTOM.getName().equals(distribution);
  if (isUseCustom) {
    Object authMode=getParameterValue(node,EHadoopParameter.AUTHENTICATION_MODE.getName());
    if (""String_Node_Str"".equals(authMode)) {
      useKrb=true;
    }
  }
  if (!isMr && node != null && node.getComponent() != null && node.getComponent().getName().equals(""String_Node_Str"")) {
    if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection) || useKrb || (distribution.equals(""String_Node_Str"") && !useMaprTicket)) {
      userName=""String_Node_Str"";
    }
  }
  String customJars=(String)getParameterValue(node,EHadoopParameter.HADOOP_CUSTOM_JARS.getName());
  connectionBean.setDistribution(distribution);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(nnPrincipal);
  connectionBean.setUseKeytab(useKeytab != null ? useKeytab : false);
  connectionBean.setKeytabPrincipal(ktPrincipal);
  connectionBean.setKeytab(ktPath);
  connectionBean.setUseCustomVersion(isUseCustom != null ? isUseCustom : false);
  if (StringUtils.isNotBlank(customJars)) {
    connectionBean.getAdditionalProperties().put(ECustomVersionGroup.COMMON.getName(),customJars);
  }
  if (process instanceof IProcess2) {
    IProcess2 pro=(IProcess2)process;
    connectionBean.setRelativeHadoopClusterId(pro.getProperty().getId());
    IElementParameter propertyParam=node.getElementParameterFromField(EParameterFieldType.PROPERTY_TYPE);
    if (propertyParam != null) {
      IElementParameter repositoryType=propertyParam.getChildParameters().get(EParameterName.PROPERTY_TYPE.getName());
      if (repositoryType != null && EmfComponent.REPOSITORY.equals(repositoryType.getValue())) {
        IHadoopClusterService hadoopClusterService=null;
        String relativeHadoopClusterId=null;
        IElementParameter repositoryId=propertyParam.getChildParameters().get((EParameterName.REPOSITORY_PROPERTY_TYPE.getName()));
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
          hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
        }
        if (hadoopClusterService != null) {
          Item item=hadoopClusterService.getHadoopClusterBySubitemId(((String)repositoryId.getValue()));
          if (item != null) {
            relativeHadoopClusterId=item.getProperty().getId();
            if (relativeHadoopClusterId != null) {
              connectionBean.setRelativeHadoopClusterId(relativeHadoopClusterId);
            }
          }
        }
      }
    }
  }
  connectionBean.getConfigurations().putAll(getHadoopProperties(node,context));
  return connectionBean;
}",0.9942947317310028
124648,"private void initCluster(NoSQLConnection connection) throws NoSQLServerException {
  try {
    if (cluster != null) {
      boolean isClosed=(Boolean)NoSQLReflection.invokeMethod(cluster,""String_Node_Str"");
      if (!isClosed) {
        return;
      }
    }
    ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
    ContextType contextType=null;
    String host=connection.getAttributes().get(ICassandraAttributies.HOST);
    if (connection.isContextMode()) {
      contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
    }
    if (contextType != null) {
      host=ContextParameterUtils.getOriginalValue(contextType,host);
    }
    cluster=NoSQLReflection.invokeStaticMethod(""String_Node_Str"",""String_Node_Str"",classLoader);
    cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"",new Object[]{host});
    String requireAuthAttr=connection.getAttributes().get(ICassandraAttributies.REQUIRED_AUTHENTICATION);
    boolean requireAuth=requireAuthAttr == null ? false : Boolean.valueOf(requireAuthAttr);
    if (requireAuth) {
      String username=connection.getAttributes().get(ICassandraAttributies.USERNAME);
      String password=connection.getValue(connection.getAttributes().get(ICassandraAttributies.PASSWORD),false);
      if (contextType != null) {
        username=ContextParameterUtils.getOriginalValue(contextType,username);
        password=ContextParameterUtils.getOriginalValue(contextType,password);
      }
      cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"",new Object[]{username,password});
    }
    cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
}","private void initCluster(NoSQLConnection connection) throws NoSQLServerException {
  try {
    if (cluster != null) {
      boolean isClosed=(Boolean)NoSQLReflection.invokeMethod(cluster,""String_Node_Str"");
      if (!isClosed) {
        return;
      }
    }
    ClassLoader classLoader=NoSQLClassLoaderFactory.getClassLoader(connection);
    ContextType contextType=null;
    String host=connection.getAttributes().get(ICassandraAttributies.HOST);
    String port=connection.getAttributes().get(ICassandraAttributies.PORT);
    if (connection.isContextMode()) {
      contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
    }
    if (contextType != null) {
      host=ContextParameterUtils.getOriginalValue(contextType,host);
      port=ContextParameterUtils.getOriginalValue(contextType,port);
    }
    cluster=NoSQLReflection.invokeStaticMethod(""String_Node_Str"",""String_Node_Str"",classLoader);
    cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"",new Object[]{host});
    cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"",new Object[]{Integer.valueOf(port)},int.class);
    String requireAuthAttr=connection.getAttributes().get(ICassandraAttributies.REQUIRED_AUTHENTICATION);
    boolean requireAuth=requireAuthAttr == null ? false : Boolean.valueOf(requireAuthAttr);
    if (requireAuth) {
      String username=connection.getAttributes().get(ICassandraAttributies.USERNAME);
      String password=connection.getValue(connection.getAttributes().get(ICassandraAttributies.PASSWORD),false);
      if (contextType != null) {
        username=ContextParameterUtils.getOriginalValue(contextType,username);
        password=ContextParameterUtils.getOriginalValue(contextType,password);
      }
      cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"",new Object[]{username,password});
    }
    cluster=NoSQLReflection.invokeMethod(cluster,""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
}",0.9304440877474586
124649,"public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,DistributionBean distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(confsService != null);
  final DistributionVersion distributionVersion=distribution.getVersion(version,true);
  connection.setDistribution(distribution.name);
  connection.setDfVersion(distributionVersion.version);
  boolean supportYARN=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop2();
  boolean supportMR1=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop1();
  connection.setUseYarn(supportYARN && !supportMR1);
  HCRepositoryUtil.fillDefaultValuesOfHadoopCluster(connection);
  if (confsService == null) {
    return;
  }
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String yarnHostName=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME.getName());
  if (StringUtils.isNotEmpty(yarnHostName)) {
    connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_YARN_HOSTNAME,yarnHostName);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_ADDRESS_RM_ID.getName());
      if (StringUtils.isNotEmpty(rmIdKey)) {
        rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
      }
      if (rmOrJt == null) {
        rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME_RM_ID.getName());
        if (StringUtils.isNotEmpty(rmIdKey)) {
          rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
        }
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt == null && yarnHostName != null) {
    rmOrJt=replaceHostName(connection.getJobTrackerURI(),yarnHostName);
  }
  connection.setJobTrackerURI(rmOrJt);
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (rms == null) {
    String rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER_ADDRESS_RM_ID.getName());
    if (StringUtils.isNotEmpty(rmIdKey)) {
      rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
    }
    if (yarnHostName != null) {
      rms=replaceHostName(connection.getRmScheduler(),yarnHostName);
    }
  }
  connection.setRmScheduler(rms);
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  if (connection.isEnableKerberos()) {
    String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(nnp)) {
      connection.setPrincipal(nnp);
    }
    String rmOrJtPrincipal=null;
    if (supportYARN) {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
    }
 else {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
    }
    if (rmOrJtPrincipal != null) {
      connection.setJtOrRmPrincipal(rmOrJtPrincipal);
    }
    String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(jhp)) {
      connection.setJobHistoryPrincipal(jhp);
    }
  }
}","public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,DistributionBean distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(confsService != null);
  final DistributionVersion distributionVersion=distribution.getVersion(version,true);
  connection.setDistribution(distribution.name);
  connection.setDfVersion(distributionVersion.version);
  boolean supportYARN=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop2();
  boolean supportMR1=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop1();
  connection.setUseYarn(supportYARN && !supportMR1);
  HCRepositoryUtil.fillDefaultValuesOfHadoopCluster(connection);
  if (confsService == null) {
    return;
  }
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String yarnHostName=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME.getName());
  if (StringUtils.isNotEmpty(yarnHostName)) {
    connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_YARN_HOSTNAME,yarnHostName);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_ADDRESS_RM_ID.getName());
      if (StringUtils.isNotEmpty(rmIdKey)) {
        rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
      }
      if (rmOrJt == null) {
        rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME_RM_ID.getName());
        if (StringUtils.isNotEmpty(rmIdKey)) {
          rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
        }
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt == null && yarnHostName != null) {
    rmOrJt=replaceHostName(connection.getJobTrackerURI(),yarnHostName);
  }
  connection.setJobTrackerURI(rmOrJt);
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (rms == null) {
    String rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER_ADDRESS_RM_ID.getName());
    if (StringUtils.isNotEmpty(rmIdKey)) {
      rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
    }
    if (yarnHostName != null) {
      rms=replaceHostName(connection.getRmScheduler(),yarnHostName);
    }
  }
  connection.setRmScheduler(rms);
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  if (connection.isEnableKerberos()) {
    String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(nnp)) {
      connection.setPrincipal(nnp);
    }
    String rmOrJtPrincipal=null;
    if (supportYARN) {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
    }
 else {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
    }
    if (rmOrJtPrincipal != null) {
      connection.setJtOrRmPrincipal(rmOrJtPrincipal);
    }
    String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    if (StringUtils.isEmpty(jhp)) {
      jhp=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    }
    if (StringUtils.isNotEmpty(jhp)) {
      connection.setJobHistoryPrincipal(jhp);
    }
  }
}",0.9853442713614158
124650,"protected void setMaprTicketPropertiesConfig(HadoopServiceProperties serviceProperties){
  boolean setMapRHomeDir=serviceProperties.isSetMaprTHomeDir();
  String mapRHomeDir=serviceProperties.getMaprTHomeDir();
  boolean setMapRHadoopLogin=serviceProperties.isSetHadoopLogin();
  String mapRHadoopLogin=serviceProperties.getMaprTHadoopLogin();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
}","protected void setMaprTicketPropertiesConfig(HadoopServiceProperties serviceProperties){
  boolean setMapRHomeDir=serviceProperties.isSetMaprTHomeDir();
  String mapRHomeDir=serviceProperties.getMaprTHomeDir();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
}",0.4201680672268907
124651,"protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  boolean setMapRHadoopLogin=serviceProperties.isSetHadoopLogin();
  String mapRHadoopLogin=serviceProperties.getMaprTHadoopLogin();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=serviceProperties.getVersion();
    Object[] argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}","protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  boolean setMapRHadoopLogin=serviceProperties.isSetHadoopLogin();
  String mapRHadoopLogin=serviceProperties.getMaprTHadoopLogin();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=serviceProperties.getVersion();
    Object[] argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}",0.990353697749196
124652,"protected void setMaprTicketPropertiesConfig(IMetadataConnection metadataConn) throws Exception {
  boolean setMapRHomeDir=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHOMEDIR));
  String mapRHomeDir=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHOMEDIR);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
}","protected void setMaprTicketPropertiesConfig(IMetadataConnection metadataConn) throws Exception {
  boolean setMapRHomeDir=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHOMEDIR));
  String mapRHomeDir=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHOMEDIR);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
}",0.6086956521739131
124653,"private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
    Object[] argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}","private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
    Object[] argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}",0.9932839676252798
124654,"private static void setMaprTicketPropertiesConfig(HadoopClusterConnection hcConnection){
  boolean setMapRHomeDir=hcConnection.isSetMaprTHomeDir();
  String mapRHomeDir=hcConnection.getMaprTHomeDir();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
}","private static void setMaprTicketPropertiesConfig(HadoopClusterConnection hcConnection){
  boolean setMapRHomeDir=hcConnection.isSetMaprTHomeDir();
  String mapRHomeDir=hcConnection.getMaprTHomeDir();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
}",0.4130643611911623
124655,"private static void setMaprTicketConfig(HadoopClusterConnection hcConnection,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=hcConnection.getUserName();
  String mapRTicketPassword=hcConnection.getMaprTPassword();
  String mapRTicketCluster=hcConnection.getMaprTCluster();
  String mapRTicketDuration=hcConnection.getMaprTDuration();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    String nameNodePrincipal=hcConnection.getPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=hcConnection.getVersion();
    Object[] argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}","private static void setMaprTicketConfig(HadoopClusterConnection hcConnection,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=hcConnection.getUserName();
  String mapRTicketPassword=hcConnection.getMaprTPassword();
  String mapRTicketCluster=hcConnection.getMaprTCluster();
  String mapRTicketDuration=hcConnection.getMaprTDuration();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    String nameNodePrincipal=hcConnection.getPrincipal();
    System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=hcConnection.getVersion();
    Object[] argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}",0.9773036768043576
124656,"protected void setMaprTicketPropertiesConfig(IMetadataConnection metadataConn) throws Exception {
  boolean setMapRHomeDir=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHOMEDIR));
  String mapRHomeDir=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHOMEDIR);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
}","protected void setMaprTicketPropertiesConfig(IMetadataConnection metadataConn) throws Exception {
  boolean setMapRHomeDir=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHOMEDIR));
  String mapRHomeDir=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHOMEDIR);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
}",0.6086956521739131
124657,"private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_VERSION);
    Object[] argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}","private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_VERSION);
    Object[] argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs};
    if (version != null && ""String_Node_Str"".compareTo(version) <= 0) {
      argsObj=new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs,""String_Node_Str""};
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",argsObj);
  }
}",0.9932955131511088
124658,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case maprTPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTPassword(),JavaTypesManager.PASSWORD);
break;
case maprTCluster:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTCluster());
break;
case maprTDuration:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTDuration());
break;
case maprTHomeDir:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHomeDir());
break;
case maprTHadoopLogin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHadoopLogin());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case maprTPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTPassword(),JavaTypesManager.PASSWORD);
break;
case maprTCluster:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTCluster());
break;
case maprTDuration:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTDuration(),JavaTypesManager.LONG);
break;
case maprTHomeDir:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHomeDir());
break;
case maprTHadoopLogin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHadoopLogin());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}",0.9979249198264478
124659,"private void updateHadoopProperties(Object hbaseConfiguration,IMetadataConnection metadataConnection) throws Exception {
  String hadoopProperties=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_PROPERTIES);
  List<Map<String,Object>> hadoopPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties);
  for (  Map<String,Object> hadoopPros : hadoopPropertiesList) {
    ReflectionUtils.invokeMethod(hbaseConfiguration,""String_Node_Str"",new Object[]{hadoopPros.get(""String_Node_Str""),ConnectionContextHelper.getParamValueOffContext(metadataConnection,String.valueOf(hadoopPros.get(""String_Node_Str"")))});
  }
}","private void updateHadoopProperties(Object hbaseConfiguration,IMetadataConnection metadataConnection) throws Exception {
  String setZnodeParentStr=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_SET_ZNODE_PARENT);
  String znodeParent=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
  boolean selected_Znode_Parent=Boolean.valueOf(setZnodeParentStr);
  if (selected_Znode_Parent) {
    ReflectionUtils.invokeMethod(hbaseConfiguration,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,znodeParent)});
  }
 else {
    String hadoopProperties=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_PROPERTIES);
    List<Map<String,Object>> hadoopPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties);
    for (    Map<String,Object> hadoopPros : hadoopPropertiesList) {
      ReflectionUtils.invokeMethod(hbaseConfiguration,""String_Node_Str"",new Object[]{hadoopPros.get(""String_Node_Str""),ConnectionContextHelper.getParamValueOffContext(metadataConnection,String.valueOf(hadoopPros.get(""String_Node_Str"")))});
    }
  }
}",0.6884718498659518
124660,"@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}",0.9652509652509652
124661,"@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}",0.9596412556053812
124662,"@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","@Override protected String[] getDistributionVersionsDisplay(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}",0.9652509652509652
124663,"/** 
 * DOC ycbai Comment method ""getHCConnectionItemFromRepositoryNode"". Get the HadoopClusterConnectionItem from RepositoryNode recursively.
 * @param node
 * @return
 */
public static HadoopClusterConnectionItem getHCConnectionItemFromRepositoryNode(IRepositoryNode node){
  IRepositoryViewObject viewObject=node.getObject();
  ERepositoryObjectType repositoryObjectType=viewObject != null ? viewObject.getRepositoryObjectType() : null;
  if (viewObject != null && repositoryObjectType != null && (repositoryObjectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS) || repositoryObjectType.equals(HadoopClusterRepositoryNodeType.HADOOPCLUSTER))) {
    final Property property=viewObject.getProperty();
    if (property != null) {
      Item item=property.getItem();
      if (item instanceof HadoopClusterConnectionItem) {
        return (HadoopClusterConnectionItem)item;
      }
 else       if (item instanceof ConnectionItem) {
        return getRelativeHadoopClusterItem(item);
      }
    }
  }
 else   if (isHadoopFolderNode(node)) {
    return getHCConnectionItemFromRepositoryNode(node.getParent());
  }
  return null;
}","/** 
 * DOC ycbai Comment method ""getHCConnectionItemFromRepositoryNode"". Get the HadoopClusterConnectionItem from RepositoryNode recursively.
 * @param node
 * @return
 */
public static HadoopClusterConnectionItem getHCConnectionItemFromRepositoryNode(IRepositoryNode node){
  IRepositoryViewObject viewObject=node.getObject();
  ERepositoryObjectType repositoryObjectType=viewObject != null ? viewObject.getRepositoryObjectType() : null;
  if (viewObject != null && repositoryObjectType != null && (repositoryObjectType.equals(ERepositoryObjectType.METADATA_CONNECTIONS) || repositoryObjectType.equals(HadoopClusterRepositoryNodeType.HADOOPCLUSTER) || isHadoopSubType(repositoryObjectType))) {
    final Property property=viewObject.getProperty();
    if (property != null) {
      Item item=property.getItem();
      if (item instanceof HadoopClusterConnectionItem) {
        return (HadoopClusterConnectionItem)item;
      }
 else       if (item instanceof ConnectionItem) {
        return getRelativeHadoopClusterItem(item);
      }
    }
  }
 else   if (isHadoopFolderNode(node)) {
    return getHCConnectionItemFromRepositoryNode(node.getParent());
  }
  return null;
}",0.982258762440502
124664,"public String getMaprTPassword(){
  return this.maprTPassword;
}","public String getMaprTPassword(){
  return getRealValue(this.maprTPassword);
}",0.9014084507042254
124665,"public String getMaprTDuration(){
  return this.maprTDuration;
}","public String getMaprTDuration(){
  return getRealValue(this.maprTDuration);
}",0.9014084507042254
124666,"public String getMaprTHadoopLogin(){
  return this.maprTHadoopLogin;
}","public String getMaprTHadoopLogin(){
  return getRealValue(this.maprTHadoopLogin);
}",0.9090909090909092
124667,"public String getMaprTHomeDir(){
  return this.maprTHomeDir;
}","public String getMaprTHomeDir(){
  return getRealValue(this.maprTHomeDir);
}",0.8985507246376812
124668,"public String getMaprTCluster(){
  return this.maprTCluster;
}","public String getMaprTCluster(){
  return getRealValue(this.maprTCluster);
}",0.8985507246376812
124669,"@Override public boolean isInContextMode(ConnectionItem connItem){
  if (connItem == null) {
    return false;
  }
  boolean isContextMode=false;
  Connection connection=connItem.getConnection();
  if (isHadoopClusterItem(connItem)) {
    isContextMode=connection.isContextMode();
  }
 else {
    Item hadoopClusterItem=getHadoopClusterBySubitemId(connItem.getProperty().getId());
    Connection hcConnection=null;
    if (hadoopClusterItem != null) {
      hcConnection=((ConnectionItem)hadoopClusterItem).getConnection();
    }
    isContextMode=connection.isContextMode() || (hcConnection != null && hcConnection.isContextMode());
  }
  return isContextMode;
}","@Override public boolean isInContextMode(Connection connection){
  if (connection == null) {
    return false;
  }
  boolean isContextMode=false;
  if (connection instanceof HadoopClusterConnection) {
    isContextMode=connection.isContextMode();
  }
 else {
    Connection hcConnection=getHadoopClusterConnectionBySubConnection(connection);
    isContextMode=connection.isContextMode() || (hcConnection != null && hcConnection.isContextMode());
  }
  return isContextMode;
}",0.5043936731107206
124670,"@Override protected IPath getTopLevelNodePath(RepositoryNode repoNode){
  IPath topLevelNodeWorkspaceRelativePath=null;
  if ((repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      String projectName=root.getProject().getTechnicalLabel();
      topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(root.getRootRepositoryNode(HadoopClusterRepositoryNodeType.HADOOPCLUSTER).getContentType().getFolder());
    }
  }
 else   if (repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      String projectName=root.getProject().getTechnicalLabel();
      topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
    }
  }
  return topLevelNodeWorkspaceRelativePath;
}","@Override protected IPath getTopLevelNodePath(RepositoryNode repoNode){
  IPath topLevelNodeWorkspaceRelativePath=null;
  if ((repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      String projectName=root.getProject().getTechnicalLabel();
      topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(root.getRootRepositoryNode(HadoopClusterRepositoryNodeType.HADOOPCLUSTER).getContentType().getFolder());
    }
  }
  return topLevelNodeWorkspaceRelativePath;
}",0.7119948685054522
124671,"private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARK.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARKSTREAMING.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK_STREAMING);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
 else   if (EHDFSRepositoryToComponent.SET_MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return hcConnection.isSetMaprTHomeDir();
  }
 else   if (EHDFSRepositoryToComponent.MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHomeDir()));
  }
 else   if (EHDFSRepositoryToComponent.SET_HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return hcConnection.isSetHadoopLogin();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHadoopLogin()));
  }
 else   if (EHDFSRepositoryToComponent.PRELOAD_AUTHENTIFICATION.getRepositoryValue().equals(value)) {
    return hcConnection.isPreloadAuthentification();
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUserName()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviPassword()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviMetadataUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviClientUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaAutoCommit();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDisableSSL();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDieNoError();
  }
  return null;
}","private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARK.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARKSTREAMING.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK_STREAMING);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
 else   if (EHDFSRepositoryToComponent.SET_MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return hcConnection.isSetMaprTHomeDir();
  }
 else   if (EHDFSRepositoryToComponent.MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHomeDir()));
  }
 else   if (EHDFSRepositoryToComponent.SET_HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return hcConnection.isSetHadoopLogin();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHadoopLogin()));
  }
 else   if (EHDFSRepositoryToComponent.PRELOAD_AUTHENTIFICATION.getRepositoryValue().equals(value)) {
    return hcConnection.isPreloadAuthentification();
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value) || ""String_Node_Str"".equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUserName()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviPassword()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviMetadataUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviClientUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaAutoCommit();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDisableSSL();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDieNoError();
  }
  return null;
}",0.998450436091557
124672,"@Override public void widgetSelected(SelectionEvent e){
  super.widgetSelected(e);
  parentWizardPage.setPageComplete(false);
}","@Override public void widgetSelected(SelectionEvent e){
  super.widgetSelected(e);
}",0.7962085308056872
124673,"@Override protected void addUtilsButtonListeners(){
  super.addUtilsButtonListeners();
  if (schemaTree != null) {
    schemaTree.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        super.widgetSelected(e);
        parentWizardPage.setPageComplete(false);
      }
    }
);
  }
}","@Override protected void addUtilsButtonListeners(){
  super.addUtilsButtonListeners();
  if (schemaTree != null) {
    schemaTree.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        super.widgetSelected(e);
      }
    }
);
  }
}",0.889922480620155
124674,"@Override protected void addFieldsListeners(){
  filterText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      schemaViewer.refresh();
    }
  }
);
  schemaTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=(TreeItem)event.item;
      for (      TreeItem item : treeItem.getItems()) {
        if (item.getData() != null) {
          INoSQLSchemaNode node=(INoSQLSchemaNode)item.getData();
          if (node != null && node.getSchemaType() == ENoSQLSchemaType.TABLE) {
            if (isExistTable(node,true)) {
              item.setChecked(true);
            }
 else {
              item.setChecked(false);
            }
          }
 else {
            item.setGrayed(item.getChecked());
          }
        }
      }
    }
  }
);
  schemaTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        try {
          TreeItem item=(TreeItem)e.item;
          boolean checked=item.getChecked();
          retrieving(item,checked);
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  filterText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      schemaViewer.refresh();
    }
  }
);
  schemaTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=(TreeItem)event.item;
      for (      TreeItem item : treeItem.getItems()) {
        if (item.getData() != null) {
          INoSQLSchemaNode node=(INoSQLSchemaNode)item.getData();
          if (node != null && node.getSchemaType() == ENoSQLSchemaType.TABLE) {
            if (isExistTable(node,true)) {
              item.setChecked(true);
            }
 else {
              item.setChecked(false);
            }
          }
 else {
            item.setGrayed(item.getChecked());
          }
        }
      }
    }
  }
);
  schemaTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        try {
          TreeItem item=(TreeItem)e.item;
          boolean checked=item.getChecked();
          retrieving(item,checked);
        }
 catch (        Exception exception) {
          ExceptionHandler.process(exception);
        }
        boolean pageC=pageComplete();
        if (pageC) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}",0.9455223880597016
124675,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateForm();
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    adaptFormToEditable();
    updateStatus(getStatusLevel(),getStatus());
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateForm();
  if (isContextMode()) {
    adaptFormToEditable();
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}",0.8477064220183487
124676,"@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}","@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}",0.9870609981515712
124677,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case maprTPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTPassword(),JavaTypesManager.PASSWORD);
break;
case maprTCluster:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTCluster());
break;
case maprTDuration:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTDuration());
break;
case maprTHomeDir:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHomeDir());
break;
case maprTHadoopLogin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHadoopLogin());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}",0.9411529223378704
124678,"/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),bean.getParentContextType(),bean.getContextType(),false);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}","/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),false,true);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}",0.9872464980137988
124679,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateForm();
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    adaptFormToEditable();
    updateStatus(getStatusLevel(),getStatus());
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateForm();
  if (isContextMode()) {
    adaptFormToEditable();
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}",0.8477064220183487
124680,"@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}","@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}",0.9870609981515712
124681,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case maprTPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTPassword(),JavaTypesManager.PASSWORD);
break;
case maprTCluster:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTCluster());
break;
case maprTDuration:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTDuration());
break;
case maprTHomeDir:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHomeDir());
break;
case maprTHadoopLogin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHadoopLogin());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}",0.9411529223378704
124682,"private void init(ConnectionItem item){
  setConnectionItem(item);
  clusterConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(getConnection());
  distribution=clusterConnection.getDistribution();
  version=clusterConnection.getDfVersion();
  enableKerberos=clusterConnection.isEnableKerberos();
  EHadoopVersion4Drivers version4Drivers=EHadoopVersion4Drivers.indexOfByVersion(version);
  if (version4Drivers != null) {
    enableGroup=version4Drivers.isSupportGroup();
  }
 else {
    enableGroup=EAuthenticationMode.UGI.getName().equals(clusterConnection.getAuthMode());
  }
  isHDI=isHDI(clusterConnection);
  setupForm(true);
}","private void init(ConnectionItem item){
  setConnectionItem(item);
  clusterConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(getConnection());
  distribution=clusterConnection.getDistribution();
  version=clusterConnection.getDfVersion();
  enableKerberos=clusterConnection.isEnableKerberos();
  if (!enableKerberos && (isCurrentHadoopVersionSupportGroup() || EAuthenticationMode.UGI.getName().equals(clusterConnection.getAuthMode()))) {
    enableGroup=true;
  }
  isHDI=isHDI(clusterConnection);
  setupForm(true);
}",0.7846808510638298
124683,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateForm();
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    adaptFormToEditable();
    updateStatus(getStatusLevel(),getStatus());
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  updateForm();
  if (isContextMode()) {
    adaptFormToEditable();
  }
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    updateStatus(getStatusLevel(),getStatus());
  }
}",0.8477064220183487
124684,"@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}","@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  if (isContextMode()) {
    adaptFormToEditable();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}",0.9870609981515712
124685,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case maprTPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTPassword(),JavaTypesManager.PASSWORD);
break;
case maprTCluster:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTCluster());
break;
case maprTDuration:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTDuration());
break;
case maprTHomeDir:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHomeDir());
break;
case maprTHadoopLogin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getMaprTHadoopLogin());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}",0.9411529223378704
124686,"/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),bean.getParentContextType(),bean.getContextType(),false);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}","/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),false,true);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}",0.9872464980137988
124687,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  connectionItem.setConnection(temConnection);
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  temConnection=null;
}","@Override public void run(){
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
}",0.6825775656324582
124688,"@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        connectionItem.setConnection(temConnection);
        saveMetaData();
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        connectionItem.setConnection(temConnection);
        saveMetaData();
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
            closeLockStrategy();
          }
        }
);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9180116204002582
124689,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  connection=null;
}","@Override public void run(){
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
}",0.7750677506775068
124690,"@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        saveMetaData();
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        connection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        saveMetaData();
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
            closeLockStrategy();
          }
        }
);
        connection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9116214335421016
124691,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
}","@Override public void run(){
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
}",0.8171428571428572
124692,"@Override public boolean performFinish(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      saveMetaData();
      RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
      closeLockStrategy();
    }
  }
;
  try {
    workspace.run(operation,null);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
 finally {
    performClean();
  }
  return true;
}","@Override public boolean performFinish(){
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRunnable operation=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor) throws CoreException {
      saveMetaData();
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
          closeLockStrategy();
        }
      }
);
    }
  }
;
  try {
    workspace.run(operation,null);
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
 finally {
    performClean();
  }
  return true;
}",0.9033306255077173
124693,"@Override protected IPath getTopLevelNodePath(RepositoryNode repoNode){
  if ((repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      String projectName=root.getProject().getTechnicalLabel();
      topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(root.getRootRepositoryNode(HadoopClusterRepositoryNodeType.HADOOPCLUSTER).getContentType().getFolder());
    }
    return topLevelNodeWorkspaceRelativePath;
  }
  return null;
}","@Override protected IPath getTopLevelNodePath(RepositoryNode repoNode){
  IPath topLevelNodeWorkspaceRelativePath=null;
  if ((repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      String projectName=root.getProject().getTechnicalLabel();
      topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(root.getRootRepositoryNode(HadoopClusterRepositoryNodeType.HADOOPCLUSTER).getContentType().getFolder());
    }
  }
 else   if (repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      String projectName=root.getProject().getTechnicalLabel();
      topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
    }
  }
  return topLevelNodeWorkspaceRelativePath;
}",0.697084917617237
124694,"/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),bean.getParentContextType(),bean.getContextType(),false);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}","/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),false,true);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}",0.9872464980137988
124695,"@Override public void init(){
  if (!isContextMode()) {
    fillDefaults();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}","@Override public void init(){
  if (isNeedFillDefaults()) {
    fillDefaults();
  }
  EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(getConnection().getAuthMode(),false);
  if (authMode != null) {
    authenticationCombo.setText(authMode.getDisplayName());
  }
 else {
    authenticationCombo.select(0);
  }
  HadoopClusterConnection connection=getConnection();
  namenodeUriText.setText(connection.getNameNodeURI());
  jobtrackerUriText.setText(connection.getJobTrackerURI());
  rmSchedulerText.setText(StringUtils.trimToEmpty(connection.getRmScheduler()));
  jobHistoryText.setText(StringUtils.trimToEmpty(connection.getJobHistory()));
  stagingDirectoryText.setText(StringUtils.trimToEmpty(connection.getStagingDirectory()));
  useDNHostBtn.setSelection(connection.isUseDNHost());
  useCustomConfBtn.setSelection(connection.isUseCustomConfs());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setSelection(connection.isUseClouderaNavi());
  }
  kerberosBtn.setSelection(connection.isEnableKerberos());
  namenodePrincipalText.setText(connection.getPrincipal());
  jtOrRmPrincipalText.setText(connection.getJtOrRmPrincipal());
  jobHistoryPrincipalText.setText(connection.getJobHistoryPrincipal());
  keytabBtn.setSelection(connection.isUseKeytab());
  keytabPrincipalText.setText(connection.getKeytabPrincipal());
  keytabText.setText(connection.getKeytab());
  userNameText.setText(connection.getUserName());
  groupText.setText(connection.getGroup());
  maprTBtn.setSelection(connection.isEnableMaprT());
  maprTPasswordText.setText(connection.getMaprTPassword());
  maprTClusterText.setText(connection.getMaprTCluster());
  maprTDurationText.setText(connection.getMaprTDuration());
  setMaprTHomeDirBtn.setSelection(connection.isSetMaprTHomeDir());
  setHadoopLoginBtn.setSelection(connection.isSetHadoopLogin());
  preloadAuthentificationBtn.setSelection(connection.isPreloadAuthentification());
  maprTHomeDirText.setText(connection.getMaprTHomeDir());
  maprTHadoopLoginText.setText(connection.getMaprTHadoopLogin());
  needInitializeContext=true;
  updateStatus(IStatus.OK,EMPTY_STRING);
}",0.9925023430178068
124696,"/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),bean.getParentContextType(),bean.getContextType(),false);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}","/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),false,true);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}",0.9872464980137988
124697,"private void addHadoopPropertiesFields(){
  hadoopPropertiesComposite=new Composite(this,SWT.NONE);
  GridLayout hadoopPropertiesLayout=new GridLayout(1,false);
  hadoopPropertiesLayout.marginWidth=0;
  hadoopPropertiesLayout.marginHeight=0;
  hadoopPropertiesComposite.setLayout(hadoopPropertiesLayout);
  hadoopPropertiesComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  propertiesDialog=new HadoopPropertiesDialog(getShell(),getHadoopProperties()){
    @Override protected List<Map<String,Object>> getLatestInitProperties(){
      return getHadoopProperties();
    }
    @Override public void applyProperties(    List<Map<String,Object>> properties){
      getConnection().setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesJsonStr(properties));
    }
  }
;
  propertiesDialog.createPropertiesFields(hadoopPropertiesComposite);
}","private void addHadoopPropertiesFields(){
  hadoopPropertiesComposite=new Composite(this,SWT.NONE);
  GridLayout hadoopPropertiesLayout=new GridLayout(1,false);
  hadoopPropertiesLayout.marginWidth=0;
  hadoopPropertiesLayout.marginHeight=0;
  hadoopPropertiesComposite.setLayout(hadoopPropertiesLayout);
  hadoopPropertiesComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  propertiesDialog=new HadoopPropertiesDialog(getShell(),getHadoopProperties()){
    @Override protected boolean isReadOnly(){
      return !isEditable();
    }
    @Override protected List<Map<String,Object>> getLatestInitProperties(){
      return getHadoopProperties();
    }
    @Override public void applyProperties(    List<Map<String,Object>> properties){
      getConnection().setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesJsonStr(properties));
    }
  }
;
  propertiesDialog.createPropertiesFields(hadoopPropertiesComposite);
}",0.955456570155902
124698,"@Override protected void updateEditableStatus(boolean isEditable){
  authenticationCombo.setEnabled(isEditable);
  namenodeUriText.setEditable(isEditable);
  jobtrackerUriText.setEditable(isEditable);
  rmSchedulerText.setEditable(isEditable);
  jobHistoryText.setEditable(isEditable);
  stagingDirectoryText.setEditable(isEditable);
  useDNHostBtn.setEnabled(isEditable);
  kerberosBtn.setEnabled(isEditable && (isCurrentHadoopVersionSupportSecurity() || isCustomUnsupportHasSecurity()));
  boolean isKerberosEditable=kerberosBtn.isEnabled() && kerberosBtn.getSelection();
  namenodePrincipalText.setEditable(isKerberosEditable);
  jtOrRmPrincipalText.setEditable(isKerberosEditable);
  jobHistoryPrincipalText.setEditable(isEditable && isJobHistoryPrincipalEditable());
  userNameText.setEditable(isEditable && !kerberosBtn.getSelection());
  groupText.setEditable(isEditable && (isCurrentHadoopVersionSupportGroup() || isCustomUnsupportHasGroup()));
  keytabBtn.setEnabled(isEditable && kerberosBtn.getSelection());
  boolean isKeyTabEditable=keytabBtn.isEnabled() && keytabBtn.getSelection();
  keytabText.setEditable(isKeyTabEditable);
  keytabPrincipalText.setEditable(isKeyTabEditable);
  maprTBtn.setEnabled(isEditable && isCurrentHadoopVersionSupportMapRTicket());
  boolean isMaprTEditable=maprTBtn.isEnabled() && maprTBtn.getSelection();
  maprTPasswordText.setEditable(isMaprTEditable && !isKerberosEditable);
  maprTClusterText.setEditable(isMaprTEditable);
  maprTDurationText.setEditable(isMaprTEditable);
  setMaprTHomeDirBtn.setEnabled(isEditable && maprTBtn.getSelection());
  setHadoopLoginBtn.setEnabled(isEditable && maprTBtn.getSelection());
  preloadAuthentificationBtn.setEnabled(isEditable && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(isMaprTEditable);
  maprTHadoopLoginText.setEditable(isMaprTEditable);
  hadoopPropertiesComposite.setEnabled(isEditable);
  propertiesDialog.updateStatusLabel(getHadoopProperties());
}","@Override protected void updateEditableStatus(boolean isEditable){
  authenticationCombo.setEnabled(isEditable);
  namenodeUriText.setEditable(isEditable);
  jobtrackerUriText.setEditable(isEditable);
  rmSchedulerText.setEditable(isEditable);
  jobHistoryText.setEditable(isEditable);
  stagingDirectoryText.setEditable(isEditable);
  useDNHostBtn.setEnabled(isEditable);
  kerberosBtn.setEnabled(isEditable && (isCurrentHadoopVersionSupportSecurity() || isCustomUnsupportHasSecurity()));
  boolean isKerberosEditable=kerberosBtn.isEnabled() && kerberosBtn.getSelection();
  namenodePrincipalText.setEditable(isKerberosEditable);
  jtOrRmPrincipalText.setEditable(isKerberosEditable);
  jobHistoryPrincipalText.setEditable(isEditable && isJobHistoryPrincipalEditable());
  userNameText.setEditable(isEditable && !kerberosBtn.getSelection());
  groupText.setEditable(isEditable && (isCurrentHadoopVersionSupportGroup() || isCustomUnsupportHasGroup()));
  keytabBtn.setEnabled(isEditable && kerberosBtn.getSelection());
  boolean isKeyTabEditable=keytabBtn.isEnabled() && keytabBtn.getSelection();
  keytabText.setEditable(isKeyTabEditable);
  keytabPrincipalText.setEditable(isKeyTabEditable);
  maprTBtn.setEnabled(isEditable && isCurrentHadoopVersionSupportMapRTicket());
  boolean isMaprTEditable=maprTBtn.isEnabled() && maprTBtn.getSelection();
  maprTPasswordText.setEditable(isMaprTEditable && !isKerberosEditable);
  maprTClusterText.setEditable(isMaprTEditable);
  maprTDurationText.setEditable(isMaprTEditable);
  setMaprTHomeDirBtn.setEnabled(isEditable && maprTBtn.getSelection());
  setHadoopLoginBtn.setEnabled(isEditable && maprTBtn.getSelection());
  preloadAuthentificationBtn.setEnabled(isEditable && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(isMaprTEditable);
  maprTHadoopLoginText.setEditable(isMaprTEditable);
  propertiesDialog.updateStatusLabel(getHadoopProperties());
}",0.966390899689762
124699,"protected void addHadoopPropertiesFields(){
  T connection=getConnection();
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  String hadoopPropertiesOfCluster=StringUtils.trimToEmpty(hcConnection.getHadoopProperties());
  String hadoopProperties=connection.getHadoopProperties();
  List<Map<String,Object>> hadoopPropertiesListOfCluster=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopPropertiesOfCluster);
  List<Map<String,Object>> hadoopPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties);
  propertiesDialog=new HadoopPropertiesDialog(getShell(),hadoopPropertiesListOfCluster,hadoopPropertiesList){
    @Override public void applyProperties(    List<Map<String,Object>> properties){
      getConnection().setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesJsonStr(properties));
    }
  }
;
  propertiesDialog.createPropertiesFields(this);
}","protected void addHadoopPropertiesFields(){
  T connection=getConnection();
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  String hadoopPropertiesOfCluster=StringUtils.trimToEmpty(hcConnection.getHadoopProperties());
  List<Map<String,Object>> hadoopPropertiesListOfCluster=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopPropertiesOfCluster);
  propertiesDialog=new HadoopPropertiesDialog(getShell(),hadoopPropertiesListOfCluster,getHadoopProperties()){
    @Override protected boolean isReadOnly(){
      return !isEditable();
    }
    @Override protected List<Map<String,Object>> getLatestInitProperties(){
      return getHadoopProperties();
    }
    @Override public void applyProperties(    List<Map<String,Object>> properties){
      getConnection().setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesJsonStr(properties));
    }
  }
;
  propertiesDialog.createPropertiesFields(this);
}",0.5044666316342616
124700,"protected void updateHadoopPropertiesFields(boolean isEditable){
  refreshHadoopProperties(isEditable);
  updatePropertiesFileds(isEditable);
}","protected void updateHadoopPropertiesFields(boolean isEditable){
  propertiesDialog.updateStatusLabel(getHadoopProperties());
}",0.6962962962962963
124701,"protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  boolean setMapRHomeDir=serviceProperties.isSetMaprTHomeDir();
  String mapRHomeDir=serviceProperties.getMaprTHomeDir();
  boolean setMapRHadoopLogin=serviceProperties.isSetHadoopLogin();
  String mapRHadoopLogin=serviceProperties.getMaprTHomeDir();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}","protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  boolean setMapRHadoopLogin=serviceProperties.isSetHadoopLogin();
  String mapRHadoopLogin=serviceProperties.getMaprTHadoopLogin();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}",0.875
124702,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
  }
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  boolean useKeytab=serviceProperties.isUseKeytab();
  if (useKrb && useKeytab) {
    String keytabPrincipal=serviceProperties.getKeytabPrincipal();
    String keytab=serviceProperties.getKeytab();
    ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useMaprTicket) {
    setMaprTicketPropertiesConfig(serviceProperties);
  }
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.8134699853587115
124703,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    }
    if (useMaprTicket) {
      setMaprTicketConfig(serviceProperties,classLoader,useKrb);
    }
    if (useKrb) {
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useMaprTicket) {
      setMaprTicketPropertiesConfig(serviceProperties);
    }
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    if (useMaprTicket) {
      if (useKrb && group != null) {
        ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",null + ""String_Node_Str"" + group});
      }
      setMaprTicketConfig(serviceProperties,classLoader,useKrb);
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}",0.9074975657254138
124704,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
  }
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  boolean useKeytab=serviceProperties.isUseKeytab();
  if (useKrb && useKeytab) {
    String keytabPrincipal=serviceProperties.getKeytabPrincipal();
    String keytab=serviceProperties.getKeytab();
    ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useMaprTicket) {
    setMaprTicketPropertiesConfig(serviceProperties);
  }
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.851806340624232
124705,"public static Map<String,String> getHadoopDbParameters(HadoopClusterConnectionItem clusterItem){
  Map<String,String> parameters=new HashMap<>();
  if (clusterItem == null) {
    return parameters;
  }
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,hcConnection.getNameNodeURI());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,hcConnection.getJobTrackerURI());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_CUSTOM_CONFS,String.valueOf(hcConnection.isUseCustomConfs()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,hcConnection.getPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,hcConnection.getJtOrRmPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,hcConnection.getJobHistoryPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_RESOURCEMANAGER_SCHEDULER_ADDRESS,hcConnection.getRmScheduler());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOBHISTORY_ADDRESS,hcConnection.getJobHistory());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_STAGING_DIRECTORY,hcConnection.getStagingDirectory());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,String.valueOf(hcConnection.isUseDNHost()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI())));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,hcConnection.getUserName());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
  if (hcConnection.isEnableKerberos()) {
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
    if (hcConnection.isUseKeytab()) {
      parameters.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,hcConnection.getKeytabPrincipal());
      parameters.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,hcConnection.getKeytab());
    }
  }
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
  if (hcConnection.isEnableMaprT()) {
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,hcConnection.getUserName());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,hcConnection.getMaprTPassword());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,hcConnection.getMaprTCluster());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,hcConnection.getMaprTDuration());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,hcConnection.getUserName());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,hcConnection.getMaprTPassword());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,hcConnection.getMaprTCluster());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,hcConnection.getMaprTDuration());
  }
  return parameters;
}","public static Map<String,String> getHadoopDbParameters(HadoopClusterConnectionItem clusterItem){
  Map<String,String> parameters=new HashMap<>();
  if (clusterItem == null) {
    return parameters;
  }
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,hcConnection.getNameNodeURI());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,hcConnection.getJobTrackerURI());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_CUSTOM_CONFS,String.valueOf(hcConnection.isUseCustomConfs()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,hcConnection.getPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,hcConnection.getJtOrRmPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,hcConnection.getJobHistoryPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_RESOURCEMANAGER_SCHEDULER_ADDRESS,hcConnection.getRmScheduler());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOBHISTORY_ADDRESS,hcConnection.getJobHistory());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_STAGING_DIRECTORY,hcConnection.getStagingDirectory());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,String.valueOf(hcConnection.isUseDNHost()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI())));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,hcConnection.getUserName());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
  if (hcConnection.isEnableKerberos()) {
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
    if (hcConnection.isUseKeytab()) {
      parameters.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,hcConnection.getKeytabPrincipal());
      parameters.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,hcConnection.getKeytab());
    }
  }
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
  if (hcConnection.isEnableMaprT()) {
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,hcConnection.getUserName());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,hcConnection.getMaprTPassword());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,hcConnection.getMaprTCluster());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,hcConnection.getMaprTDuration());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,hcConnection.getUserName());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,hcConnection.getMaprTPassword());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,hcConnection.getMaprTCluster());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,hcConnection.getMaprTDuration());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHOMEDIR,String.valueOf(hcConnection.isSetMaprTHomeDir()));
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHOMEDIR,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTHomeDir()));
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN,String.valueOf(hcConnection.isSetHadoopLogin()));
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTHadoopLogin()));
  }
  return parameters;
}",0.9300820524673524
124706,"private Object getConfiguration(IMetadataConnection metadataConnection) throws Exception {
  Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  boolean useKerberos=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
  boolean useMaprTicket=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET));
  if (useKerberos) {
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    String masterPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,masterPrincipal)});
    String regionServerPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,regionServerPrincipal)});
    boolean useKeytab=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
    if (useKeytab) {
      String keytabPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPrincipal),ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPath)});
    }
    if (useMaprTicket) {
      setMaprTicketConfig(config,metadataConnection,classLoader,true);
    }
  }
 else   if (useMaprTicket) {
    setMaprTicketConfig(config,metadataConnection,classLoader,false);
  }
  updateHadoopProperties(config,metadataConnection);
  return config;
}","private Object getConfiguration(IMetadataConnection metadataConnection) throws Exception {
  Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  boolean useKerberos=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
  boolean useMaprTicket=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET));
  if (useMaprTicket) {
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setMaprTicketPropertiesConfig(metadataConnection);
  }
  if (useKerberos) {
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    String masterPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,masterPrincipal)});
    String regionServerPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,regionServerPrincipal)});
    boolean useKeytab=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
    if (useKeytab) {
      String keytabPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPrincipal),ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPath)});
    }
  }
  if (useMaprTicket) {
    setMaprTicketConfig(metadataConnection,classLoader,useKerberos);
  }
  updateHadoopProperties(config,metadataConnection);
  return config;
}",0.9393995897818386
124707,"private void setMaprTicketConfig(Object config,IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs});
  }
}","private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs});
  }
}",0.8545611015490534
124708,"private static void addKerberos2Client(WebClient client,HCatalogConnection connection) throws Exception {
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null) {
    if (hcConnection.isEnableKerberos()) {
      KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
      AuthorizationPolicy policy=new AuthorizationPolicy();
      policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
      kbInterceptor.setPolicy(policy);
      java.util.Map<String,String> properties=new HashMap<String,String>();
      String krbPrincipal=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbPrincipal()));
      kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(krbPrincipal));
      String krbRealm=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbRealm()));
      kbInterceptor.setRealm(StringUtils.trimToEmpty(krbRealm));
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      if (hcConnection.isUseKeytab()) {
        properties.put(""String_Node_Str"",""String_Node_Str"");
        properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
        properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
      }
      kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
      WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
      if (hcConnection.isEnableMaprT()) {
        setMaprTicketConfig(hcConnection,getClassLoader(hcConnection,connection),true);
      }
    }
 else     if (hcConnection.isEnableMaprT()) {
      setMaprTicketConfig(hcConnection,getClassLoader(hcConnection,connection),false);
    }
  }
}","private static void addKerberos2Client(WebClient client,HCatalogConnection connection) throws Exception {
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null) {
    if (hcConnection.isEnableMaprT()) {
      setMaprTicketPropertiesConfig(hcConnection);
    }
    if (hcConnection.isEnableKerberos()) {
      KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
      AuthorizationPolicy policy=new AuthorizationPolicy();
      policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
      kbInterceptor.setPolicy(policy);
      java.util.Map<String,String> properties=new HashMap<String,String>();
      String krbPrincipal=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbPrincipal()));
      kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(krbPrincipal));
      String krbRealm=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbRealm()));
      kbInterceptor.setRealm(StringUtils.trimToEmpty(krbRealm));
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      if (hcConnection.isUseKeytab()) {
        properties.put(""String_Node_Str"",""String_Node_Str"");
        properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
        properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
      }
      kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
      WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
    }
    if (hcConnection.isEnableMaprT()) {
      setMaprTicketConfig(hcConnection,getClassLoader(hcConnection,connection),hcConnection.isEnableKerberos());
    }
  }
}",0.9292628443782576
124709,"private static void setMaprTicketConfig(HadoopClusterConnection hcConnection,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=hcConnection.getUserName();
  String mapRTicketPassword=hcConnection.getMaprTPassword();
  String mapRTicketCluster=hcConnection.getMaprTCluster();
  String mapRTicketDuration=hcConnection.getMaprTDuration();
  boolean setMapRHomeDir=hcConnection.isSetMaprTHomeDir();
  String mapRHomeDir=hcConnection.getMaprTHomeDir();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    String nameNodePrincipal=hcConnection.getPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}","private static void setMaprTicketConfig(HadoopClusterConnection hcConnection,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=hcConnection.getUserName();
  String mapRTicketPassword=hcConnection.getMaprTPassword();
  String mapRTicketCluster=hcConnection.getMaprTCluster();
  String mapRTicketDuration=hcConnection.getMaprTDuration();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    String nameNodePrincipal=hcConnection.getPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}",0.8847262247838616
124710,"@Override protected boolean isValidResourceDelta(IResourceDelta delta){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    if ((repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) || (repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
      IProjectRepositoryNode root=repoNode.getRoot();
      if (root != null) {
        String projectName=root.getProject().getTechnicalLabel();
        topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
      }
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      return true;
    }
  }
  return false;
}","@Override protected boolean isValidResourceDelta(IResourceDelta delta){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    if (repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) {
      IProjectRepositoryNode root=repoNode.getRoot();
      if (root != null) {
        String projectName=root.getProject().getTechnicalLabel();
        topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
      }
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
 else     if (repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER) {
      topLevelNodeWorkspaceRelativePath=getWorkspaceTopNodePath(repoNode);
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      return true;
    }
  }
  return false;
}",0.6831597222222222
124711,"private void updatePortDecoration(){
  if (portWarningDecorator == null) {
    Image fieldDecorationWarningImage=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_WARNING).getImage();
    portWarningDecorator=new ControlDecoration(portText.getTextControl(),SWT.RIGHT | SWT.CENTER);
    portWarningDecorator.setMarginWidth(1);
    portWarningDecorator.setImage(fieldDecorationWarningImage);
    portWarningDecorator.setDescriptionText(Messages.getString(""String_Node_Str""));
  }
  if (CassandraConnectionUtil.isOldVersion(getConnection())) {
    portWarningDecorator.hide();
  }
 else {
    portWarningDecorator.show();
  }
  String dbVersion=getConnection().getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  if (ICassandraConstants.DBVERSIONS[0].equals(dbVersion)) {
    if (ICassandraConstants.API_TYPES[0].equals(repositoryTranslator.getLabel(apiTypeCombo.getText()))) {
      portText.setText(ICassandraConstants.DATASTAX_PORT);
    }
 else {
      portText.setText(ICassandraConstants.DEFAULT_PORT);
    }
  }
 else {
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
}","private void updatePortDecoration(){
  if (portWarningDecorator == null) {
    Image fieldDecorationWarningImage=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_WARNING).getImage();
    portWarningDecorator=new ControlDecoration(portText.getTextControl(),SWT.RIGHT | SWT.CENTER);
    portWarningDecorator.setMarginWidth(1);
    portWarningDecorator.setImage(fieldDecorationWarningImage);
    portWarningDecorator.setDescriptionText(Messages.getString(""String_Node_Str""));
  }
  if (CassandraConnectionUtil.isOldVersion(getConnection())) {
    portWarningDecorator.hide();
  }
 else {
    portWarningDecorator.show();
  }
  String dbVersion=getConnection().getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  if (ICassandraConstants.DB_VERSION_CASSANDRA_2_0_0.equals(dbVersion)) {
    if (ICassandraConstants.API_TYPE_DATASTAX.equals(repositoryTranslator.getLabel(apiTypeCombo.getText()))) {
      portText.setText(ICassandraConstants.DATASTAX_PORT);
    }
 else {
      portText.setText(ICassandraConstants.DEFAULT_PORT);
    }
  }
 else   if (ICassandraConstants.DB_VERSION_CASSANDRA_3_0.equals(dbVersion) || ICassandraConstants.DB_VERSION_CASSANDRA_2_2.equals(dbVersion)) {
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
 else {
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
}",0.9041649818034776
124712,"@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}","@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(true);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}",0.997935712179298
124713,"private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARK.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARKSTREAMING.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK_STREAMING);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
 else   if (EHDFSRepositoryToComponent.SET_MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return hcConnection.isSetMaprTHomeDir();
  }
 else   if (EHDFSRepositoryToComponent.MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHomeDir()));
  }
 else   if (EHDFSRepositoryToComponent.SET_HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return hcConnection.isSetHadoopLogin();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHadoopLogin()));
  }
 else   if (EHDFSRepositoryToComponent.PRELOAD_AUTHENTIFICATION.getRepositoryValue().equals(value)) {
    return hcConnection.isPreloadAuthentification();
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUserName()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviPassword()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviMetadataUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviClientUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaAutoCommit();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDisableSSL();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDieNoError();
  }
  return null;
}","private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARK.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARKSTREAMING.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK_STREAMING);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
 else   if (EHDFSRepositoryToComponent.SET_MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return hcConnection.isSetMaprTHomeDir();
  }
 else   if (EHDFSRepositoryToComponent.MAPR_HOME_DIR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHomeDir()));
  }
 else   if (EHDFSRepositoryToComponent.SET_HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return hcConnection.isSetHadoopLogin();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_LOGIN.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTHadoopLogin()));
  }
 else   if (EHDFSRepositoryToComponent.PRELOAD_AUTHENTIFICATION.getRepositoryValue().equals(value)) {
    return hcConnection.isPreloadAuthentification();
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUserName()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviPassword()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviMetadataUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviClientUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaAutoCommit();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDisableSSL();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDieNoError();
  }
  return null;
}",0.9963506898086336
124714,"/** 
 * DOC ycbai Comment method ""getHadoopDbParameters"". Get db connection(like hbase, hive) parameters by hadoop cluster.
 * @param clusterId
 * @return
 */
public static Map<String,String> getHadoopDbParameters(String clusterId){
  Map<String,String> map=new HashMap<String,String>();
  HadoopClusterConnectionItem clusterItem=HCRepositoryUtil.getRelativeHadoopClusterItem(clusterId);
  if (clusterItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
    map.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobTrackerURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_CUSTOM_CONFS,String.valueOf(hcConnection.isUseCustomConfs()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJtOrRmPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobHistoryPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_RESOURCEMANAGER_SCHEDULER_ADDRESS,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getRmScheduler()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOBHISTORY_ADDRESS,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobHistory()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_STAGING_DIRECTORY,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getStagingDirectory()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,String.valueOf(hcConnection.isUseDNHost()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI())));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
    if (hcConnection.isEnableKerberos()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
      if (hcConnection.isUseKeytab()) {
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
      }
    }
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
    if (hcConnection.isEnableMaprT()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTPassword()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTCluster()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTDuration()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTPassword()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTCluster()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTDuration()));
    }
  }
  return map;
}","public static Map<String,String> getHadoopDbParameters(HadoopClusterConnectionItem clusterItem){
  Map<String,String> parameters=new HashMap<>();
  if (clusterItem == null) {
    return parameters;
  }
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,hcConnection.getNameNodeURI());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,hcConnection.getJobTrackerURI());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_CUSTOM_CONFS,String.valueOf(hcConnection.isUseCustomConfs()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,hcConnection.getPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,hcConnection.getJtOrRmPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,hcConnection.getJobHistoryPrincipal());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_RESOURCEMANAGER_SCHEDULER_ADDRESS,hcConnection.getRmScheduler());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_JOBHISTORY_ADDRESS,hcConnection.getJobHistory());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_STAGING_DIRECTORY,hcConnection.getStagingDirectory());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,String.valueOf(hcConnection.isUseDNHost()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI())));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,hcConnection.getUserName());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
  if (hcConnection.isEnableKerberos()) {
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
    if (hcConnection.isUseKeytab()) {
      parameters.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,hcConnection.getKeytabPrincipal());
      parameters.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,hcConnection.getKeytab());
    }
  }
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
  parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
  if (hcConnection.isEnableMaprT()) {
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,hcConnection.getUserName());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,hcConnection.getMaprTPassword());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,hcConnection.getMaprTCluster());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,hcConnection.getMaprTDuration());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,hcConnection.getUserName());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,hcConnection.getMaprTPassword());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,hcConnection.getMaprTCluster());
    parameters.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,hcConnection.getMaprTDuration());
  }
  return parameters;
}",0.264528626775721
124715,"@Override protected void initConnectionParameters(Map<String,String> initMap,HadoopClusterConnectionItem hcConnectionItem){
  super.initConnectionParameters(initMap,hcConnectionItem);
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS,hcConnection.getParameters().get(ECustomVersionGroup.HIVE.getName()));
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE,EDatabaseConnTemplate.HIVE.getDBTypeName());
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_DB_PRODUCT,EDatabaseTypeName.HIVE.getProduct());
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_DB_PORT,EDatabaseConnTemplate.HIVE.getDefaultPort());
}","@Override protected void initConnectionParameters(Map<String,String> initMap,HadoopClusterConnectionItem hcConnectionItem){
  super.initConnectionParameters(initMap,hcConnectionItem);
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS,hcConnection.getParameters().get(ECustomVersionGroup.HIVE.getName()));
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE,EDatabaseConnTemplate.HIVE.getDBTypeName());
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_DB_PRODUCT,EDatabaseTypeName.HIVE.getProduct());
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_DB_PORT,EDatabaseConnTemplate.HIVE.getDefaultPort());
  initMap.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
}",0.9071246819338422
124716,"@Test public void testGetConfsJarDefaultName() throws IOException {
  HadoopClusterConnectionItem hcConnectionItem=createHadoopClusterItem();
  String expectedConfJarName=HadoopParameterUtil.getConfsJarDefaultName(hcConnectionItem.getProperty().getLabel());
  HadoopConfsUtils.removeFromDeployedCache(hcConnectionItem,expectedConfJarName);
  String confsJarName=HadoopConfsUtils.getConfsJarDefaultName(hcConnectionItem,false);
  assertEquals(expectedConfJarName,confsJarName);
  assertFalse(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  HadoopConfsUtils.getConfsJarDefaultName(hcConnectionItem);
  assertEquals(expectedConfJarName,confsJarName);
  assertFalse(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
  File testConfJarFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  testConfJarFile.deleteOnExit();
  hcConnection.setConfFile(FileUtils.readFileToByteArray(testConfJarFile));
  HadoopConfsUtils.getConfsJarDefaultName(hcConnectionItem);
  assertEquals(expectedConfJarName,confsJarName);
  boolean isNeedToBeDeployed=false;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    ILibraryManagerService libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if (libService != null && libService.isJarNeedToBeDeployed(testConfJarFile)) {
      isNeedToBeDeployed=true;
    }
  }
  if (isNeedToBeDeployed) {
    assertTrue(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  }
 else {
    assertFalse(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  }
}","@Test public void testGetConfsJarDefaultName() throws IOException {
  HadoopClusterConnectionItem hcConnectionItem=ClusterTestUtil.createDefaultHadoopClusterItem();
  String expectedConfJarName=HadoopParameterUtil.getConfsJarDefaultName(hcConnectionItem.getProperty().getLabel());
  HadoopConfsUtils.removeFromDeployedCache(hcConnectionItem,expectedConfJarName);
  String confsJarName=HadoopConfsUtils.getConfsJarDefaultName(hcConnectionItem,false);
  assertEquals(expectedConfJarName,confsJarName);
  assertFalse(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  HadoopConfsUtils.getConfsJarDefaultName(hcConnectionItem);
  assertEquals(expectedConfJarName,confsJarName);
  assertFalse(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
  File testConfJarFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  testConfJarFile.deleteOnExit();
  hcConnection.setConfFile(FileUtils.readFileToByteArray(testConfJarFile));
  HadoopConfsUtils.getConfsJarDefaultName(hcConnectionItem);
  assertEquals(expectedConfJarName,confsJarName);
  boolean isNeedToBeDeployed=false;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    ILibraryManagerService libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    if (libService != null && libService.isJarNeedToBeDeployed(testConfJarFile)) {
      isNeedToBeDeployed=true;
    }
  }
  if (isNeedToBeDeployed) {
    assertTrue(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  }
 else {
    assertFalse(HadoopConfsUtils.containsInDeployedCache(hcConnectionItem,confsJarName));
  }
}",0.99023709902371
124717,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(!(kerberosBtn.isEnabled() && kerberosBtn.getSelection()));
groupText.setEditable(true);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabPrincipalText.setHideWidgets(!(kerberosBtn.isEnabled() && kerberosBtn.getSelection() && keytabBtn.isEnabled()&& keytabBtn.getSelection()));
keytabText.setVisible(kerberosBtn.isEnabled() && kerberosBtn.getSelection() && keytabBtn.isEnabled()&& keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
userNameText.setVisible(false);
groupText.setHideWidgets(true);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabPrincipalText.setHideWidgets(!(kerberosBtn.isEnabled() && kerberosBtn.getSelection() && keytabBtn.isEnabled()&& keytabBtn.getSelection()));
keytabText.setVisible(kerberosBtn.isEnabled() && kerberosBtn.getSelection() && keytabBtn.isEnabled()&& keytabBtn.getSelection());
userNameText.setEditable(!(kerberosBtn.isEnabled() && kerberosBtn.getSelection()));
groupText.setEditable(true);
userNameText.setHideWidgets(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
groupText.setHideWidgets(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
userNameText.setHideWidgets(false);
groupText.setHideWidgets(true);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabPrincipalText.setHideWidgets(!(kerberosBtn.isEnabled() && kerberosBtn.getSelection() && keytabBtn.isEnabled()&& keytabBtn.getSelection()));
keytabText.setVisible(kerberosBtn.isEnabled() && kerberosBtn.getSelection() && keytabBtn.isEnabled()&& keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (isCurrentHadoopVersionSupportGroup()) {
userNameText.setHideWidgets(kerberosBtn.getSelection());
}
 else {
userNameText.setVisible(!kerberosBtn.getSelection());
}
groupText.setHideWidgets(!isCurrentHadoopVersionSupportGroup());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.8599044078597982
124718,"public DistributionBean[] getDistributions(){
  if (getServiceName() == null) {
    return new DistributionBean[0];
  }
  final ComponentType type=getComponentType();
  BundleContext bc=FrameworkUtil.getBundle(DistributionFactory.class).getBundleContext();
  Collection<ServiceReference<? extends HadoopComponent>> distributions=new LinkedList<>();
  try {
    Class<? extends HadoopComponent> clazz=(Class<? extends HadoopComponent>)Class.forName(getServiceName());
    distributions.addAll(bc.getServiceReferences(clazz,null));
  }
 catch (  InvalidSyntaxException|ClassNotFoundException e) {
    CommonExceptionHandler.process(e);
    return new DistributionBean[0];
  }
  Map<String,DistributionBean> disctributionsMap=new HashMap<String,DistributionBean>();
  for (  ServiceReference<? extends HadoopComponent> sr : distributions) {
    HadoopComponent hc=bc.getService(sr);
    final String distribution=hc.getDistribution();
    final String distributionName=hc.getDistributionName();
    DistributionBean disctributionBean=disctributionsMap.get(distribution);
    if (disctributionBean == null) {
      disctributionBean=new DistributionBean(type,distribution,distributionName);
      disctributionsMap.put(distribution,disctributionBean);
    }
 else {
      if (!distribution.equals(disctributionBean.name) || !distributionName.equals(disctributionBean.displayName)) {
        CommonExceptionHandler.warn(""String_Node_Str"" + disctributionBean);
        continue;
      }
    }
    final String version=hc.getVersion();
    DistributionVersion versionBean=new DistributionVersion(hc,disctributionBean,version,hc.getVersionName(type));
    versionBean.addModuleGroups(hc.getModuleGroups(type));
    versionBean.displayCondition=hc.getDisplayCondition(type);
    disctributionBean.addVersion(versionBean);
    disctributionBean.setDefaultVersion(versionBean);
    disctributionBean.addCondition(hc.getDisplayCondition(type));
  }
  List<DistributionBean> distributionsList=new ArrayList<DistributionBean>(disctributionsMap.values());
  Collections.sort(distributionsList,new Comparator<DistributionBean>(){
    @Override public int compare(    DistributionBean b1,    DistributionBean b2){
      if (Constant.DISTRIBUTION_CUSTOM.equals(b1.name)) {
        return 1;
      }
      if (Constant.DISTRIBUTION_CUSTOM.equals(b2.name)) {
        return -1;
      }
      return b1.name.compareTo(b2.name);
    }
  }
);
  return distributionsList.toArray(new DistributionBean[0]);
}","public DistributionBean[] getDistributions(){
  if (distributionBeans == null) {
synchronized (DistributionsManager.class) {
      if (distributionBeans == null) {
        distributionBeans=getDistributionsDelegate();
      }
    }
  }
  return distributionBeans;
}",0.0495085547870404
124719,"/** 
 * Builds a   {@link HadoopComponent} distribution.
 * @param pDistribution The name of the distribution
 * @param pVersion The name of the version
 * @return an implementation of {@link HadoopComponent}.
 * @throws Exception
 */
public static HadoopComponent buildDistribution(String pDistribution,String pVersion) throws Exception {
  BundleContext bc=FrameworkUtil.getBundle(DistributionFactory.class).getBundleContext();
  Collection<ServiceReference<HadoopComponent>> distributions=Collections.emptyList();
  try {
    distributions=bc.getServiceReferences(HadoopComponent.class,null);
  }
 catch (  InvalidSyntaxException e) {
    CommonExceptionHandler.process(e);
  }
  for (  ServiceReference<HadoopComponent> sr : distributions) {
    HadoopComponent np=bc.getService(sr);
    String thatDistribution=np.getDistribution();
    if (Constant.DISTRIBUTION_CUSTOM.equals(thatDistribution) && thatDistribution.equals(pDistribution)) {
      return np;
    }
    if (thatDistribution != null && thatDistribution.equals(pDistribution)) {
      String thatVersion=np.getVersion();
      if (thatVersion != null && thatVersion.equals(pVersion)) {
        return np;
      }
    }
  }
  throw new Exception(""String_Node_Str"" + pDistribution + ""String_Node_Str""+ pVersion+ ""String_Node_Str"");
}","/** 
 * Builds a   {@link HadoopComponent} distribution.
 * @param pDistribution The name of the distribution
 * @param pVersion The name of the version
 * @return an implementation of {@link HadoopComponent}.
 * @throws Exception
 */
public static HadoopComponent buildDistribution(String pDistribution,String pVersion) throws Exception {
  final BundleContext bc=FrameworkUtil.getBundle(DistributionFactory.class).getBundleContext();
  if (hadoopDistributions == null) {
synchronized (HadoopDistributionsHelper.class) {
      if (hadoopDistributions == null) {
        try {
          hadoopDistributions=bc.getServiceReferences(HadoopComponent.class,null);
        }
 catch (        InvalidSyntaxException e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
  }
  for (  ServiceReference<HadoopComponent> sr : hadoopDistributions) {
    HadoopComponent np=bc.getService(sr);
    String thatDistribution=np.getDistribution();
    if (Constant.DISTRIBUTION_CUSTOM.equals(thatDistribution) && thatDistribution.equals(pDistribution)) {
      return np;
    }
    if (thatDistribution != null && thatDistribution.equals(pDistribution)) {
      String thatVersion=np.getVersion();
      if (thatVersion != null && thatVersion.equals(pVersion)) {
        return np;
      }
    }
  }
  throw new Exception(""String_Node_Str"" + pDistribution + ""String_Node_Str""+ pVersion+ ""String_Node_Str"");
}",0.8471196454948301
124720,"public void addModuleGroup(DistributionModuleGroup g){
  if (g != null) {
    DistributionVersionModule vm=new DistributionVersionModule(this);
    vm.moduleGrop=g;
    modulesNeeded.addAll(vm.getModulesNeeded());
    modules.add(vm);
  }
}","public void addModuleGroup(DistributionModuleGroup g){
  if (g != null) {
    DistributionVersionModule vm=new DistributionVersionModule(this);
    vm.moduleGrop=g;
    modules.add(vm);
  }
}",0.8863109048723898
124721,"public List<ModuleNeeded> getModulesNeeded(){
  return modulesNeeded;
}","public List<ModuleNeeded> getModulesNeeded(){
  if (modulesNeeded.isEmpty()) {
synchronized (DistributionVersion.class) {
      if (modulesNeeded.isEmpty()) {
        for (        DistributionVersionModule vm : modules) {
          modulesNeeded.addAll(vm.getModulesNeeded());
        }
      }
    }
  }
  return modulesNeeded;
}",0.2493765586034912
124722,"@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          String newConfJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getLabel());
          HadoopConfsUtils.removeFromDeployedCache(hcItem,newConfJarName);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9432799013563502
124723,"@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          String newConfJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getLabel());
          HadoopConfsUtils.removeFromDeployedCache(hcItem,newConfJarName);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9432799013563502
124724,"@Override protected boolean isValidResourceDelta(IResourceDelta delta){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    if ((repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) || (repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
      IProjectRepositoryNode root=repoNode.getRoot();
      if (root != null) {
        String projectName=root.getProject().getTechnicalLabel();
        topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
      }
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      return true;
    }
  }
  return false;
}","@Override protected boolean isValidResourceDelta(IResourceDelta delta){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    if (repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) {
      IProjectRepositoryNode root=repoNode.getRoot();
      if (root != null) {
        String projectName=root.getProject().getTechnicalLabel();
        topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
      }
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
 else     if (repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER) {
      topLevelNodeWorkspaceRelativePath=getWorkspaceTopNodePath(repoNode);
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      return true;
    }
  }
  return false;
}",0.6831597222222222
124725,"protected ClassLoader addCustomConfsJarIfNeeded(ClassLoader baseLoader,HadoopServiceProperties serviceProperties){
  ClassLoader classLoader=baseLoader;
  if (serviceProperties.isUseCustomConfs()) {
    String clusterId=serviceProperties.getRelativeHadoopClusterId();
    if (baseLoader instanceof DynamicClassLoader && clusterId != null) {
      String customConfsJarName=HadoopParameterUtil.getConfsJarDefaultName(clusterId);
      try {
        classLoader=DynamicClassLoader.createNewOneBaseLoader((DynamicClassLoader)baseLoader,new String[]{customConfsJarName},null);
      }
 catch (      MalformedURLException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return classLoader;
}","protected ClassLoader addCustomConfsJarIfNeeded(ClassLoader baseLoader,HadoopServiceProperties serviceProperties){
  ClassLoader classLoader=baseLoader;
  if (serviceProperties.isUseCustomConfs()) {
    String clusterLabel=serviceProperties.getRelativeHadoopClusterLabel();
    if (classLoader instanceof DynamicClassLoader && clusterLabel != null) {
      String customConfsJarName=HadoopParameterUtil.getConfsJarDefaultName(clusterLabel);
      boolean confFileExist=false;
      Set<String> libraries=((DynamicClassLoader)classLoader).getLibraries();
      for (      String lib : libraries) {
        if (customConfsJarName.equals(lib)) {
          confFileExist=true;
          break;
        }
      }
      if (!confFileExist) {
        try {
          classLoader=DynamicClassLoader.createNewOneBaseLoader((DynamicClassLoader)baseLoader,new String[]{customConfsJarName},null);
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  return classLoader;
}",0.7939814814814815
124726,"private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  properties.setContextType(contextType);
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setGroup(connection.getGroup());
  properties.setUseKrb(connection.isEnableKerberos());
  properties.setCustom(connection.isUseCustomVersion());
  properties.setUseCustomConfs(connection.isUseCustomConfs());
  properties.setPrincipal(connection.getPrincipal());
  properties.setJtOrRmPrincipal(connection.getJtOrRmPrincipal());
  properties.setJobHistoryPrincipal(connection.getJobHistoryPrincipal());
  properties.setUseKeytab(connection.isUseKeytab());
  properties.setKeytabPrincipal(connection.getKeytabPrincipal());
  properties.setKeytab(connection.getKeytab());
  properties.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties()));
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
  properties.setMaprT(connection.isEnableMaprT());
  properties.setUserName(connection.getUserName());
  properties.setMaprTPassword(connection.getMaprTPassword());
  properties.setMaprTCluster(connection.getMaprTCluster());
  properties.setMaprTDuration(connection.getMaprTDuration());
  properties.setSetMaprTHomeDir(connection.isSetMaprTHomeDir());
  properties.setSetHadoopLogin(connection.isSetHadoopLogin());
  properties.setPreloadAuthentification(connection.isPreloadAuthentification());
  properties.setMaprTHomeDir(connection.getMaprTHomeDir());
  properties.setMaprTHadoopLogin(connection.getMaprTHadoopLogin());
}","private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  properties.setContextType(contextType);
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setGroup(connection.getGroup());
  properties.setUseKrb(connection.isEnableKerberos());
  properties.setCustom(connection.isUseCustomVersion());
  properties.setUseCustomConfs(connection.isUseCustomConfs());
  properties.setPrincipal(connection.getPrincipal());
  properties.setJtOrRmPrincipal(connection.getJtOrRmPrincipal());
  properties.setJobHistoryPrincipal(connection.getJobHistoryPrincipal());
  properties.setUseKeytab(connection.isUseKeytab());
  properties.setKeytabPrincipal(connection.getKeytabPrincipal());
  properties.setKeytab(connection.getKeytab());
  properties.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties()));
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
  properties.setRelativeHadoopClusterLabel(connectionItem.getProperty().getLabel());
  properties.setMaprT(connection.isEnableMaprT());
  properties.setUserName(connection.getUserName());
  properties.setMaprTPassword(connection.getMaprTPassword());
  properties.setMaprTCluster(connection.getMaprTCluster());
  properties.setMaprTDuration(connection.getMaprTDuration());
  properties.setSetMaprTHomeDir(connection.isSetMaprTHomeDir());
  properties.setSetHadoopLogin(connection.isSetHadoopLogin());
  properties.setPreloadAuthentification(connection.isPreloadAuthentification());
  properties.setMaprTHomeDir(connection.getMaprTHomeDir());
  properties.setMaprTHadoopLogin(connection.getMaprTHadoopLogin());
}",0.9773996277585748
124727,"@Override protected boolean isValidResourceDelta(IResourceDelta delta){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    if ((repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) || (repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
      IProjectRepositoryNode root=repoNode.getRoot();
      if (root != null) {
        String projectName=root.getProject().getTechnicalLabel();
        topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
      }
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      return true;
    }
  }
  return false;
}","@Override protected boolean isValidResourceDelta(IResourceDelta delta){
  VisitResourceHelper visitHelper=new VisitResourceHelper(delta);
  boolean merged=ProjectRepositoryNode.getInstance().getMergeRefProject();
  Set<RepositoryNode> topLevelNodes=getTopNodes();
  for (  final RepositoryNode repoNode : topLevelNodes) {
    IPath topLevelNodeWorkspaceRelativePath=null;
    if (repoNode.getContentType() == ERepositoryObjectType.METADATA_CONNECTIONS) {
      IProjectRepositoryNode root=repoNode.getRoot();
      if (root != null) {
        String projectName=root.getProject().getTechnicalLabel();
        topLevelNodeWorkspaceRelativePath=Path.fromPortableString('/' + projectName).append(repoNode.getContentType().getFolder());
      }
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
 else     if (repoNode.getContentType() == HadoopClusterRepositoryNodeType.HADOOPCLUSTER) {
      topLevelNodeWorkspaceRelativePath=getWorkspaceTopNodePath(repoNode);
      topLevelNodeToPathMap.put(repoNode,topLevelNodeWorkspaceRelativePath);
    }
    if (topLevelNodeWorkspaceRelativePath != null && visitHelper.valid(topLevelNodeWorkspaceRelativePath,merged)) {
      return true;
    }
  }
  return false;
}",0.6831597222222222
124728,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
groupText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(!(kerberosBtn.isEnabled() && kerberosBtn.getSelection()));
groupText.setEditable(true);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.9709583736689256
124729,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
  }
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  boolean useKeytab=serviceProperties.isUseKeytab();
  if (useKrb && useKeytab) {
    String keytabPrincipal=serviceProperties.getKeytabPrincipal();
    String keytab=serviceProperties.getKeytab();
    ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.9322135572885424
124730,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useMaprTicket) {
      setMaprTicketConfig(serviceProperties,classLoader,useKrb);
    }
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    }
    if (useMaprTicket) {
      setMaprTicketConfig(serviceProperties,classLoader,useKrb);
    }
    if (useKrb) {
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}",0.955701394585726
124731,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
  }
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  boolean useKeytab=serviceProperties.isUseKeytab();
  if (useKrb && useKeytab) {
    String keytabPrincipal=serviceProperties.getKeytabPrincipal();
    String keytab=serviceProperties.getKeytab();
    ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.9433299899699096
124732,"private Object getConfiguration(IMetadataConnection metadataConnection) throws Exception {
  Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  boolean useKerberos=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
  boolean useMaprTicket=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET));
  if (useMaprTicket) {
    setMaprTicketConfig(config,metadataConnection,classLoader,useKerberos);
  }
  if (useKerberos) {
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    String masterPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,masterPrincipal)});
    String regionServerPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,regionServerPrincipal)});
    boolean useKeytab=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
    if (useKeytab) {
      String keytabPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPrincipal),ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPath)});
    }
  }
  updateHadoopProperties(config,metadataConnection);
  return config;
}","private Object getConfiguration(IMetadataConnection metadataConnection) throws Exception {
  Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  boolean useKerberos=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
  boolean useMaprTicket=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET));
  if (useKerberos) {
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    String masterPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,masterPrincipal)});
    String regionServerPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(metadataConnection,regionServerPrincipal)});
    boolean useKeytab=Boolean.valueOf((String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
    if (useKeytab) {
      String keytabPrincipal=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPrincipal),ConnectionContextHelper.getParamValueOffContext(metadataConnection,keytabPath)});
    }
    if (useMaprTicket) {
      setMaprTicketConfig(config,metadataConnection,classLoader,true);
    }
  }
 else   if (useMaprTicket) {
    setMaprTicketConfig(config,metadataConnection,classLoader,false);
  }
  updateHadoopProperties(config,metadataConnection);
  return config;
}",0.940517574353032
124733,"private static void addKerberos2Client(WebClient client,HCatalogConnection connection) throws Exception {
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null && hcConnection.isEnableMaprT()) {
    setMaprTicketConfig(hcConnection,getClassLoader(hcConnection,connection),hcConnection.isEnableKerberos());
  }
  if (hcConnection != null && hcConnection.isEnableKerberos()) {
    KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
    AuthorizationPolicy policy=new AuthorizationPolicy();
    policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
    kbInterceptor.setPolicy(policy);
    java.util.Map<String,String> properties=new HashMap<String,String>();
    String krbPrincipal=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbPrincipal()));
    kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(krbPrincipal));
    String krbRealm=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbRealm()));
    kbInterceptor.setRealm(StringUtils.trimToEmpty(krbRealm));
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    if (hcConnection.isUseKeytab()) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
      properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
    }
    kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
    WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
  }
}","private static void addKerberos2Client(WebClient client,HCatalogConnection connection) throws Exception {
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null) {
    if (hcConnection.isEnableKerberos()) {
      KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
      AuthorizationPolicy policy=new AuthorizationPolicy();
      policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
      kbInterceptor.setPolicy(policy);
      java.util.Map<String,String> properties=new HashMap<String,String>();
      String krbPrincipal=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbPrincipal()));
      kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(krbPrincipal));
      String krbRealm=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbRealm()));
      kbInterceptor.setRealm(StringUtils.trimToEmpty(krbRealm));
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      if (hcConnection.isUseKeytab()) {
        properties.put(""String_Node_Str"",""String_Node_Str"");
        properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
        properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
      }
      kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
      WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
      if (hcConnection.isEnableMaprT()) {
        setMaprTicketConfig(hcConnection,getClassLoader(hcConnection,connection),true);
      }
    }
 else     if (hcConnection.isEnableMaprT()) {
      setMaprTicketConfig(hcConnection,getClassLoader(hcConnection,connection),false);
    }
  }
}",0.8327347357619292
124734,"private static void setMaprTicketConfig(HadoopClusterConnection hcConnection,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=hcConnection.getUserName();
  String mapRTicketPassword=hcConnection.getMaprTPassword();
  String mapRTicketCluster=hcConnection.getMaprTCluster();
  String mapRTicketDuration=hcConnection.getMaprTDuration();
  boolean setMapRHomeDir=hcConnection.isSetMaprTHomeDir();
  String mapRHomeDir=hcConnection.getMaprTHomeDir();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}","private static void setMaprTicketConfig(HadoopClusterConnection hcConnection,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=hcConnection.getUserName();
  String mapRTicketPassword=hcConnection.getMaprTPassword();
  String mapRTicketCluster=hcConnection.getMaprTCluster();
  String mapRTicketDuration=hcConnection.getMaprTDuration();
  boolean setMapRHomeDir=hcConnection.isSetMaprTHomeDir();
  String mapRHomeDir=hcConnection.getMaprTHomeDir();
  boolean setMapRHadoopLogin=hcConnection.isSetHadoopLogin();
  String mapRHadoopLogin=hcConnection.getMaprTHadoopLogin();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHadoopLogin ? mapRHadoopLogin : ""String_Node_Str"");
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    String nameNodePrincipal=hcConnection.getPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}",0.9430219146482124
124735,"private void addNavigatorFields(Composite parent){
  Group naviGroup=Form.createGroup(parent,1,Messages.getString(""String_Node_Str""),110);
  naviGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviPartComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  naviPartComposite.setLayout(authPartLayout);
  naviPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviCommonComposite=new Composite(naviPartComposite,SWT.NULL);
  GridLayout naviCommonCompLayout=new GridLayout(4,false);
  naviCommonCompLayout.marginWidth=0;
  naviCommonCompLayout.marginHeight=0;
  naviCommonComposite.setLayout(naviCommonCompLayout);
  naviCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_usernameText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_passwordText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD);
  navigator_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_metatata_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_client_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  Composite naviKeytabComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout naviKeytabCompLayout=new GridLayout(2,false);
  naviKeytabCompLayout.marginWidth=0;
  naviKeytabCompLayout.marginHeight=0;
  naviKeytabComposite.setLayout(naviKeytabCompLayout);
  naviKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_autocommitBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_autocommitBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_autocommitBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_disable_sslBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_disable_sslBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_disable_sslBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_die_on_errorBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_die_on_errorBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn.setSelection(true);
}","private void addNavigatorFields(Composite parent){
  Group naviGroup=Form.createGroup(parent,1,Messages.getString(""String_Node_Str""),110);
  naviGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviPartComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  naviPartComposite.setLayout(authPartLayout);
  naviPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviCommonComposite=new Composite(naviPartComposite,SWT.NULL);
  GridLayout naviCommonCompLayout=new GridLayout(4,false);
  naviCommonCompLayout.marginWidth=0;
  naviCommonCompLayout.marginHeight=0;
  naviCommonComposite.setLayout(naviCommonCompLayout);
  naviCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_usernameText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_passwordText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD | SWT.BORDER);
  navigator_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_metatata_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_client_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  Composite naviKeytabComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout naviKeytabCompLayout=new GridLayout(2,false);
  naviKeytabCompLayout.marginWidth=0;
  naviKeytabCompLayout.marginHeight=0;
  naviKeytabComposite.setLayout(naviKeytabCompLayout);
  naviKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_autocommitBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_autocommitBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_autocommitBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_disable_sslBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_disable_sslBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_disable_sslBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_die_on_errorBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_die_on_errorBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn.setSelection(true);
}",0.9973890339425588
124736,"@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          String newConfJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getLabel());
          HadoopConfsUtils.removeFromDeployedCache(hcItem,newConfJarName);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9432799013563502
124737,"private void hideMaprTicketChildControl(boolean hide){
  maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(!hide && setMaprTHomeDirBtn.isEnabled() && setMaprTHomeDirBtn.getSelection());
  maprTHadoopLoginText.setEditable(!hide && setHadoopLoginBtn.isEnabled() && setHadoopLoginBtn.getSelection());
  hideControl(maprTPCDCompposite,hide);
  hideControl(maprTSetComposite,hide);
  authMaprTComposite.layout();
  authMaprTComposite.getParent().layout();
}","private void hideMaprTicketChildControl(boolean hide){
  maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(!hide && setMaprTHomeDirBtn.isEnabled() && setMaprTHomeDirBtn.getSelection());
  maprTHadoopLoginText.setEditable(!hide && setHadoopLoginBtn.isEnabled() && setHadoopLoginBtn.getSelection());
  hideControl(maprTPasswordCompposite,kerberosBtn.getSelection() && maprTBtn.getSelection());
  hideControl(maprTPCDCompposite,hide);
  hideControl(maprTSetComposite,hide);
  authMaprTComposite.layout();
  authMaprTComposite.getParent().layout();
}",0.9266770670826832
124738,"@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return null;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return ExecutionResult.NOTHING_TO_DO;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      if (!libService.contains(confJarName)) {
        return ExecutionResult.NOTHING_TO_DO;
      }
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9543285616905248
124739,"protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
    }
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}","protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  boolean setMapRHomeDir=serviceProperties.isSetMaprTHomeDir();
  String mapRHomeDir=serviceProperties.getMaprTHomeDir();
  boolean setMapRHadoopLogin=serviceProperties.isSetHadoopLogin();
  String mapRHadoopLogin=serviceProperties.getMaprTHomeDir();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",setMapRHomeDir ? mapRHomeDir : ""String_Node_Str"");
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
  }
 else {
    if (setMapRHadoopLogin) {
      System.setProperty(""String_Node_Str"",mapRHadoopLogin);
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    }
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
  }
}",0.6765594943665842
124740,"private void setMaprTicketConfig(Object config,IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
    }
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs});
  }
}","private void setMaprTicketConfig(Object config,IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs});
  }
}",0.962979683972912
124741,"private Map<HadoopHostedService,HadoopClusterService> getHostedServicesForOld(List<String> servicesName){
  Map<String,Map<String,String>> actualConfigVersion=getActualConfigVersion();
  Map<HadoopHostedService,HadoopClusterService> servicesMapping=new HashMap<>();
  for (  String serviceName : servicesName) {
    servicesMapping.put(HadoopHostedService.fromString(serviceName),new HadoopAmbariClusterService(getConfigFiles(actualConfigVersion.get(serviceName))));
  }
  return servicesMapping;
}","private Map<HadoopHostedService,HadoopClusterService> getHostedServicesForOld(List<String> servicesName){
  Map<String,Map<String,String>> actualConfigVersion=getActualConfigVersion();
  Map<HadoopHostedService,HadoopClusterService> servicesMapping=new HashMap<>();
  for (  String serviceName : servicesName) {
    servicesMapping.put(HadoopHostedService.fromString(serviceName),new HadoopAmbariClusterService(getConfigFiles(actualConfigVersion.get(serviceName)),blacklistParams));
  }
  return servicesMapping;
}",0.984189723320158
124742,"private Map<HadoopHostedService,HadoopClusterService> distributeConfigFilesToService(String serviceName,List<ApiConfigFile> configs){
  Map<HadoopHostedService,HadoopClusterService> servicesMapping=new HashMap<HadoopHostedService,HadoopClusterService>();
  HadoopHostedService service=HadoopHostedService.fromString(serviceName);
  if (service == HadoopHostedService.HIVE) {
    ApiConfigFile hcatalogConfig=null;
    for (    ApiConfigFile file : configs) {
      if (""String_Node_Str"".equals(file.getType())) {
        hcatalogConfig=file;
        break;
      }
    }
    if (hcatalogConfig != null) {
      configs.remove(hcatalogConfig);
      servicesMapping.put(HadoopHostedService.WEBHCAT,new HadoopAmbariClusterService(Arrays.asList(hcatalogConfig)));
    }
  }
  servicesMapping.put(service,new HadoopAmbariClusterService(configs));
  return servicesMapping;
}","private Map<HadoopHostedService,HadoopClusterService> distributeConfigFilesToService(String serviceName,List<ApiConfigFile> configs){
  Map<HadoopHostedService,HadoopClusterService> servicesMapping=new HashMap<HadoopHostedService,HadoopClusterService>();
  HadoopHostedService service=HadoopHostedService.fromString(serviceName);
  if (service == HadoopHostedService.HIVE) {
    ApiConfigFile hcatalogConfig=null;
    for (    ApiConfigFile file : configs) {
      if (""String_Node_Str"".equals(file.getType())) {
        hcatalogConfig=file;
        break;
      }
    }
    if (hcatalogConfig != null) {
      configs.remove(hcatalogConfig);
      servicesMapping.put(HadoopHostedService.WEBHCAT,new HadoopAmbariClusterService(Arrays.asList(hcatalogConfig),blacklistParams));
    }
  }
  servicesMapping.put(service,new HadoopAmbariClusterService(configs,blacklistParams));
  return servicesMapping;
}",0.981941309255079
124743,"private void init(){
  confs=new HashMap<>();
  for (  ApiConfigFile file : configFiles) {
    String type=file.getType();
    if (!type.endsWith(SUPPORT_FILE)) {
      continue;
    }
    Configuration conf=new Configuration(false);
    Map<String,String> properties=file.getProperties();
    for (    String key : properties.keySet()) {
      conf.set(key,properties.get(key));
    }
    confs.put(type,conf);
  }
}","private void init(List<String> blacklistParams){
  confs=new HashMap<>();
  for (  ApiConfigFile file : configFiles) {
    String type=file.getType();
    if (!type.endsWith(SUPPORT_FILE)) {
      continue;
    }
    Configuration conf=new Configuration(false);
    Map<String,String> properties=file.getProperties();
    for (    String key : properties.keySet()) {
      if (blacklistParams != null && blacklistParams.contains(key)) {
        continue;
      }
      conf.set(key,properties.get(key));
    }
    confs.put(type,conf);
  }
}",0.8705636743215032
124744,"/** 
 * DOC bchen HadoopAmbariClusterService constructor comment.
 */
public HadoopAmbariClusterService(List<ApiConfigFile> configFiles){
  this.configFiles=configFiles;
  init();
}","/** 
 * DOC bchen HadoopAmbariClusterService constructor comment.
 */
public HadoopAmbariClusterService(List<ApiConfigFile> configFiles,List<String> blacklistParams){
  this.configFiles=configFiles;
  init(blacklistParams);
}",0.8916256157635468
124745,"@Override public Map<HadoopHostedService,HadoopClusterService> getHostedServices(){
  ApiServiceList services=cluster.readServices(DataView.SUMMARY);
  Map<HadoopHostedService,HadoopClusterService> servicesMapping=new HashMap<HadoopHostedService,HadoopClusterService>();
  for (  ApiService service : services.getServices()) {
    if (HadoopHostedService.isSupport(service.getType())) {
      HadoopCMClusterService clusterService=new HadoopCMClusterService(service.getName(),cluster);
      if (clusterService.hasConfigurations()) {
        servicesMapping.put(HadoopHostedService.fromString(service.getType()),clusterService);
      }
    }
  }
  return servicesMapping;
}","@Override public Map<HadoopHostedService,HadoopClusterService> getHostedServices(){
  ApiServiceList services=cluster.readServices(DataView.SUMMARY);
  Map<HadoopHostedService,HadoopClusterService> servicesMapping=new HashMap<HadoopHostedService,HadoopClusterService>();
  for (  ApiService service : services.getServices()) {
    if (HadoopHostedService.isSupport(service.getType())) {
      HadoopCMClusterService clusterService=new HadoopCMClusterService(service.getName(),cluster,blacklistParams);
      if (clusterService.hasConfigurations()) {
        servicesMapping.put(HadoopHostedService.fromString(service.getType()),clusterService);
      }
    }
  }
  return servicesMapping;
}",0.9882697947214076
124746,"/** 
 * DOC bchen Comment method ""init"".
 */
private void init(){
  confs=new HashMap<>();
  InputStreamDataSource clientConfig=null;
  try {
    clientConfig=cluster.getClientConfig(serviceName);
  }
 catch (  BadRequestException e) {
  }
  if (clientConfig == null) {
    return;
  }
  File directory=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"" + serviceName + String.valueOf(new Date().getTime())+ Thread.currentThread().getId());
  try {
    ZipInputStream zipInputStream=new ZipInputStream(clientConfig.getInputStream());
    ZipEntry configInputZipEntry=null;
    while ((configInputZipEntry=zipInputStream.getNextEntry()) != null) {
      String configFile=configInputZipEntry.getName();
      if (configFile.contains(""String_Node_Str"")) {
        configFile=configFile.substring(configFile.lastIndexOf(""String_Node_Str"") + 1,configFile.length());
      }
      if (!configFile.endsWith(SUPPORT_FILE)) {
        continue;
      }
      directory.mkdirs();
      File file=new File(directory,configFile);
      BufferedWriter configOutput=null;
      try {
        int read;
        configOutput=new BufferedWriter(new FileWriter(file));
        while (zipInputStream.available() > 0) {
          if ((read=zipInputStream.read()) != -1) {
            configOutput.write(read);
          }
        }
      }
  finally {
        if (configOutput != null) {
          configOutput.close();
        }
      }
      Configuration conf=new Configuration(false);
      conf.addResource(new Path(file.toURI()));
      confs.put(configFile,conf);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * DOC bchen Comment method ""init"".
 */
private void init(List<String> blacklistParams){
  confs=new HashMap<>();
  InputStreamDataSource clientConfig=null;
  try {
    clientConfig=cluster.getClientConfig(serviceName);
  }
 catch (  BadRequestException e) {
  }
  if (clientConfig == null) {
    return;
  }
  File directory=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"" + serviceName + String.valueOf(new Date().getTime())+ Thread.currentThread().getId());
  try {
    ZipInputStream zipInputStream=new ZipInputStream(clientConfig.getInputStream());
    ZipEntry configInputZipEntry=null;
    while ((configInputZipEntry=zipInputStream.getNextEntry()) != null) {
      String configFile=configInputZipEntry.getName();
      if (configFile.contains(""String_Node_Str"")) {
        configFile=configFile.substring(configFile.lastIndexOf(""String_Node_Str"") + 1,configFile.length());
      }
      if (!configFile.endsWith(SUPPORT_FILE)) {
        continue;
      }
      directory.mkdirs();
      File file=new File(directory,configFile);
      BufferedWriter configOutput=null;
      try {
        int read;
        configOutput=new BufferedWriter(new FileWriter(file));
        while (zipInputStream.available() > 0) {
          if ((read=zipInputStream.read()) != -1) {
            configOutput.write(read);
          }
        }
      }
  finally {
        if (configOutput != null) {
          configOutput.close();
        }
      }
      Configuration conf=new Configuration(false);
      conf.addResource(new Path(file.toURI()));
      if (blacklistParams != null && blacklistParams.size() > 0) {
        Configuration filteredConf=new Configuration(false);
        Iterator<Entry<String,String>> iterator=conf.iterator();
        while (iterator.hasNext()) {
          Entry<String,String> next=iterator.next();
          if (blacklistParams.contains(next.getKey())) {
            continue;
          }
          filteredConf.set(next.getKey(),next.getValue());
        }
        conf=filteredConf;
      }
      confs.put(configFile,conf);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8657824933687003
124747,"/** 
 * DOC bchen HadoopCMClusterService constructor comment.
 * @param cluster
 */
public HadoopCMClusterService(String serviceName,ServicesResourceV3 cluster){
  this.serviceName=serviceName;
  this.cluster=cluster;
  init();
}","/** 
 * DOC bchen HadoopCMClusterService constructor comment.
 * @param cluster
 */
public HadoopCMClusterService(String serviceName,ServicesResourceV3 cluster,List<String> blacklistParams){
  this.serviceName=serviceName;
  this.cluster=cluster;
  init(blacklistParams);
}",0.9123505976095616
124748,"private void hideMaprTicketChildControl(boolean hide){
  maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(!hide && setMaprTHomeDirBtn.isEnabled() && setMaprTHomeDirBtn.getSelection());
  maprTHadoopLoginText.setEditable(!hide && setHadoopLoginBtn.isEnabled() && setHadoopLoginBtn.getSelection());
  hideControl(maprTPCDCompposite,hide);
  hideControl(maprTSetComposite,hide);
  authMaprTComposite.layout();
  authMaprTComposite.getParent().layout();
}","private void hideMaprTicketChildControl(boolean hide){
  maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(!hide && setMaprTHomeDirBtn.isEnabled() && setMaprTHomeDirBtn.getSelection());
  maprTHadoopLoginText.setEditable(!hide && setHadoopLoginBtn.isEnabled() && setHadoopLoginBtn.getSelection());
  hideControl(maprTPasswordCompposite,kerberosBtn.getSelection() && maprTBtn.getSelection());
  hideControl(maprTPCDCompposite,hide);
  hideControl(maprTSetComposite,hide);
  authMaprTComposite.layout();
  authMaprTComposite.getParent().layout();
}",0.9266770670826832
124749,"private void addAuthenticationFields(){
  Group authGroup=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),110);
  authGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite authPartComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  authPartComposite.setLayout(authPartLayout);
  authPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  authCommonComposite=new Composite(authPartComposite,SWT.NULL);
  GridLayout authCommonCompLayout=new GridLayout(1,false);
  authCommonCompLayout.marginWidth=0;
  authCommonCompLayout.marginHeight=0;
  authCommonComposite.setLayout(authCommonCompLayout);
  authCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  kerberosBtn=new Button(authCommonComposite,SWT.CHECK);
  kerberosBtn.setText(Messages.getString(""String_Node_Str""));
  kerberosBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,4,1));
  authNodejtOrRmHistoryComposite=new Composite(authCommonComposite,SWT.NULL);
  GridLayout authNodejtOrRmHistoryCompLayout=new GridLayout(4,false);
  authNodejtOrRmHistoryCompLayout.marginWidth=0;
  authNodejtOrRmHistoryCompLayout.marginHeight=0;
  authNodejtOrRmHistoryComposite.setLayout(authNodejtOrRmHistoryCompLayout);
  authNodejtOrRmHistoryComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  namenodePrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jtOrRmPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jobHistoryPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  Composite placeHolder=new Composite(authCommonComposite,SWT.NULL);
  GridLayout placeHolderLayout=new GridLayout(4,false);
  placeHolderLayout.marginWidth=0;
  placeHolderLayout.marginHeight=0;
  placeHolder.setLayout(placeHolderLayout);
  placeHolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  userNameText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  groupText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  authKeytabComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authKeytabCompLayout=new GridLayout(5,false);
  authKeytabCompLayout.marginWidth=0;
  authKeytabCompLayout.marginHeight=0;
  authKeytabComposite.setLayout(authKeytabCompLayout);
  authKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keytabBtn=new Button(authKeytabComposite,SWT.CHECK);
  keytabBtn.setText(Messages.getString(""String_Node_Str""));
  keytabBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,5,1));
  keytabPrincipalText=new LabelledText(authKeytabComposite,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabText=new LabelledFileField(authKeytabComposite,Messages.getString(""String_Node_Str""),extensions);
  authMaprTComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authMaprTicketCompLayout=new GridLayout(1,false);
  authMaprTicketCompLayout.marginWidth=0;
  authMaprTicketCompLayout.marginHeight=0;
  authMaprTComposite.setLayout(authMaprTicketCompLayout);
  authMaprTComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTBtn=new Button(authMaprTComposite,SWT.CHECK);
  maprTBtn.setText(Messages.getString(""String_Node_Str""));
  maprTBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  maprTPCDCompposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTPCDCompositeLayout=new GridLayout(1,false);
  maprTPCDCompositeLayout.marginWidth=0;
  maprTPCDCompositeLayout.marginHeight=0;
  maprTPCDCompposite.setLayout(maprTPCDCompositeLayout);
  maprTPCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordCompposite=new Composite(maprTPCDCompposite,SWT.NULL);
  GridLayout maprTPasswordComppositeLayout=new GridLayout(2,false);
  maprTPasswordComppositeLayout.marginWidth=0;
  maprTPasswordComppositeLayout.marginHeight=0;
  maprTPasswordCompposite.setLayout(maprTPasswordComppositeLayout);
  maprTPasswordCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordText=new LabelledText(maprTPasswordCompposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordText.getTextControl().setEchoChar('*');
  Composite maprTCDCompposite=new Composite(maprTPCDCompposite,SWT.NULL);
  GridLayout maprTCDComppositeLayout=new GridLayout(2,false);
  maprTCDComppositeLayout.marginWidth=0;
  maprTCDComppositeLayout.marginHeight=0;
  maprTCDCompposite.setLayout(maprTCDComppositeLayout);
  maprTCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTClusterText=new LabelledText(maprTCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTDurationText=new LabelledText(maprTCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTSetComposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTicketSetCompLayout=new GridLayout(3,false);
  maprTicketSetCompLayout.marginWidth=0;
  maprTicketSetCompLayout.marginHeight=0;
  maprTSetComposite.setLayout(maprTicketSetCompLayout);
  maprTSetComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setMaprTHomeDirBtn=new Button(maprTSetComposite,SWT.CHECK);
  setMaprTHomeDirBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHomeDirText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  setHadoopLoginBtn=new Button(maprTSetComposite,SWT.CHECK);
  setHadoopLoginBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHadoopLoginText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  preloadAuthentificationBtn=new Button(maprTSetComposite,SWT.CHECK);
  preloadAuthentificationBtn.setText(Messages.getString(""String_Node_Str""));
}","private void addAuthenticationFields(){
  Group authGroup=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),110);
  authGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  authPartComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  authPartComposite.setLayout(authPartLayout);
  authPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  authCommonComposite=new Composite(authPartComposite,SWT.NULL);
  GridLayout authCommonCompLayout=new GridLayout(1,false);
  authCommonCompLayout.marginWidth=0;
  authCommonCompLayout.marginHeight=0;
  authCommonComposite.setLayout(authCommonCompLayout);
  authCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  kerberosBtn=new Button(authCommonComposite,SWT.CHECK);
  kerberosBtn.setText(Messages.getString(""String_Node_Str""));
  kerberosBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,4,1));
  authNodejtOrRmHistoryComposite=new Composite(authCommonComposite,SWT.NULL);
  GridLayout authNodejtOrRmHistoryCompLayout=new GridLayout(4,false);
  authNodejtOrRmHistoryCompLayout.marginWidth=0;
  authNodejtOrRmHistoryCompLayout.marginHeight=0;
  authNodejtOrRmHistoryComposite.setLayout(authNodejtOrRmHistoryCompLayout);
  authNodejtOrRmHistoryComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  namenodePrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jtOrRmPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jobHistoryPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  Composite placeHolder=new Composite(authCommonComposite,SWT.NULL);
  GridLayout placeHolderLayout=new GridLayout(4,false);
  placeHolderLayout.marginWidth=0;
  placeHolderLayout.marginHeight=0;
  placeHolder.setLayout(placeHolderLayout);
  placeHolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  userNameText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  groupText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  authKeytabComposite=new Composite(authPartComposite,SWT.NULL);
  GridLayout authKeytabCompLayout=new GridLayout(5,false);
  authKeytabCompLayout.marginWidth=0;
  authKeytabCompLayout.marginHeight=0;
  authKeytabComposite.setLayout(authKeytabCompLayout);
  authKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keytabBtn=new Button(authKeytabComposite,SWT.CHECK);
  keytabBtn.setText(Messages.getString(""String_Node_Str""));
  keytabBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,5,1));
  keytabPrincipalText=new LabelledText(authKeytabComposite,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabText=new LabelledFileField(authKeytabComposite,Messages.getString(""String_Node_Str""),extensions);
  authMaprTComposite=new Composite(authPartComposite,SWT.NULL);
  GridLayout authMaprTicketCompLayout=new GridLayout(1,false);
  authMaprTicketCompLayout.marginWidth=0;
  authMaprTicketCompLayout.marginHeight=0;
  authMaprTComposite.setLayout(authMaprTicketCompLayout);
  authMaprTComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTBtn=new Button(authMaprTComposite,SWT.CHECK);
  maprTBtn.setText(Messages.getString(""String_Node_Str""));
  maprTBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  maprTPCDCompposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTPCDCompositeLayout=new GridLayout(1,false);
  maprTPCDCompositeLayout.marginWidth=0;
  maprTPCDCompositeLayout.marginHeight=0;
  maprTPCDCompposite.setLayout(maprTPCDCompositeLayout);
  maprTPCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordCompposite=new Composite(maprTPCDCompposite,SWT.NULL);
  GridLayout maprTPasswordComppositeLayout=new GridLayout(2,false);
  maprTPasswordComppositeLayout.marginWidth=0;
  maprTPasswordComppositeLayout.marginHeight=0;
  maprTPasswordCompposite.setLayout(maprTPasswordComppositeLayout);
  maprTPasswordCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordText=new LabelledText(maprTPasswordCompposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordText.getTextControl().setEchoChar('*');
  Composite maprTCDCompposite=new Composite(maprTPCDCompposite,SWT.NULL);
  GridLayout maprTCDComppositeLayout=new GridLayout(2,false);
  maprTCDComppositeLayout.marginWidth=0;
  maprTCDComppositeLayout.marginHeight=0;
  maprTCDCompposite.setLayout(maprTCDComppositeLayout);
  maprTCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTClusterText=new LabelledText(maprTCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTDurationText=new LabelledText(maprTCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTSetComposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTicketSetCompLayout=new GridLayout(3,false);
  maprTicketSetCompLayout.marginWidth=0;
  maprTicketSetCompLayout.marginHeight=0;
  maprTSetComposite.setLayout(maprTicketSetCompLayout);
  maprTSetComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setMaprTHomeDirBtn=new Button(maprTSetComposite,SWT.CHECK);
  setMaprTHomeDirBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHomeDirText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  setHadoopLoginBtn=new Button(maprTSetComposite,SWT.CHECK);
  setHadoopLoginBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHadoopLoginText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  preloadAuthentificationBtn=new Button(maprTSetComposite,SWT.CHECK);
  preloadAuthentificationBtn.setText(Messages.getString(""String_Node_Str""));
}",0.9961187985150186
124750,"@Override protected void addFieldsListeners(){
  authenticationCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newAuthDisplayName=authenticationCombo.getText();
      EAuthenticationMode newAuthMode=EAuthenticationMode.getAuthenticationByDisplayName(newAuthDisplayName);
      String originalAuthName=getConnection().getAuthMode();
      EAuthenticationMode originalAuthMode=EAuthenticationMode.getAuthenticationByName(originalAuthName,false);
      if (newAuthMode != null && newAuthMode != originalAuthMode) {
        getConnection().setAuthMode(newAuthMode.getName());
        updateForm();
        checkFieldsValue();
      }
    }
  }
);
  namenodeUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setNameNodeURI(namenodeUriText.getText());
      checkFieldsValue();
    }
  }
);
  jobtrackerUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobTrackerURI(jobtrackerUriText.getText());
      checkFieldsValue();
    }
  }
);
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  hadoopConfsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      AbstractHadoopForm form=null;
      if (parentForm instanceof AbstractHadoopForm) {
        form=(AbstractHadoopForm)parentForm;
      }
      HadoopConfsUtils.openHadoopConfsWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
    }
  }
);
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        clouderaNaviButton.setEnabled(useClouderaNaviBtn.getSelection());
        getConnection().setUseClouderaNavi(useClouderaNaviBtn.getSelection());
        checkFieldsValue();
      }
    }
);
    clouderaNaviButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        AbstractHadoopForm form=null;
        if (parentForm instanceof AbstractHadoopForm) {
          form=(AbstractHadoopForm)parentForm;
        }
        HadoopConfsUtils.openClouderaNaviWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
      }
    }
);
  }
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  namenodePrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setPrincipal(namenodePrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jtOrRmPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJtOrRmPrincipal(jtOrRmPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setJobHistoryPrincipal(jobHistoryPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setUserName(userNameText.getText());
      checkFieldsValue();
    }
  }
);
  groupText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setGroup(groupText.getText());
      checkFieldsValue();
    }
  }
);
  kerberosBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hideControl(authNodejtOrRmHistoryComposite,!kerberosBtn.getSelection());
      hideControl(authKeytabComposite,!kerberosBtn.getSelection());
      hideControl(maprTPasswordCompposite,kerberosBtn.getSelection() && maprTBtn.getSelection());
      getConnection().setEnableKerberos(kerberosBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseKeytab(keytabBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytabPrincipal(keytabPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  keytabText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytab(keytabText.getText());
      checkFieldsValue();
    }
  }
);
  maprTBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hideControl(maprTPCDCompposite,!maprTBtn.getSelection());
      hideControl(maprTSetComposite,!maprTBtn.getSelection());
      getConnection().setEnableMaprT(maprTBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTPassword(maprTPasswordText.getText());
      checkFieldsValue();
    }
  }
);
  maprTClusterText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTCluster(maprTClusterText.getText());
      checkFieldsValue();
    }
  }
);
  maprTDurationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTDuration(maprTDurationText.getText());
      checkFieldsValue();
    }
  }
);
  setMaprTHomeDirBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetMaprTHomeDir(setMaprTHomeDirBtn.getSelection());
      maprTHomeDirText.setText(getConnection().getMaprTHomeDir());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHomeDirText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHomeDir(maprTHomeDirText.getText());
      checkFieldsValue();
    }
  }
);
  setHadoopLoginBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetHadoopLogin(setHadoopLoginBtn.getSelection());
      maprTHadoopLoginText.setText(getConnection().getMaprTHadoopLogin());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHadoopLoginText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHadoopLogin(maprTHadoopLoginText.getText());
      checkFieldsValue();
    }
  }
);
  preloadAuthentificationBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setPreloadAuthentification(preloadAuthentificationBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  authenticationCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newAuthDisplayName=authenticationCombo.getText();
      EAuthenticationMode newAuthMode=EAuthenticationMode.getAuthenticationByDisplayName(newAuthDisplayName);
      String originalAuthName=getConnection().getAuthMode();
      EAuthenticationMode originalAuthMode=EAuthenticationMode.getAuthenticationByName(originalAuthName,false);
      if (newAuthMode != null && newAuthMode != originalAuthMode) {
        if (EAuthenticationMode.UGI.equals(newAuthMode)) {
          maprTBtn.setEnabled(true);
          hideControl(maprTBtn,false);
          if (maprTBtn.getSelection()) {
            hideControl(maprTPCDCompposite,false);
            hideControl(maprTSetComposite,false);
          }
          authMaprTComposite.layout();
          authMaprTComposite.getParent().layout();
        }
        getConnection().setAuthMode(newAuthMode.getName());
        updateForm();
        checkFieldsValue();
      }
    }
  }
);
  namenodeUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setNameNodeURI(namenodeUriText.getText());
      checkFieldsValue();
    }
  }
);
  jobtrackerUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobTrackerURI(jobtrackerUriText.getText());
      checkFieldsValue();
    }
  }
);
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  hadoopConfsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      AbstractHadoopForm form=null;
      if (parentForm instanceof AbstractHadoopForm) {
        form=(AbstractHadoopForm)parentForm;
      }
      HadoopConfsUtils.openHadoopConfsWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
    }
  }
);
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        clouderaNaviButton.setEnabled(useClouderaNaviBtn.getSelection());
        getConnection().setUseClouderaNavi(useClouderaNaviBtn.getSelection());
        checkFieldsValue();
      }
    }
);
    clouderaNaviButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        AbstractHadoopForm form=null;
        if (parentForm instanceof AbstractHadoopForm) {
          form=(AbstractHadoopForm)parentForm;
        }
        HadoopConfsUtils.openClouderaNaviWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
      }
    }
);
  }
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  namenodePrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setPrincipal(namenodePrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jtOrRmPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJtOrRmPrincipal(jtOrRmPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setJobHistoryPrincipal(jobHistoryPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setUserName(userNameText.getText());
      checkFieldsValue();
    }
  }
);
  groupText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setGroup(groupText.getText());
      checkFieldsValue();
    }
  }
);
  kerberosBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hideControl(authNodejtOrRmHistoryComposite,!kerberosBtn.getSelection());
      hideControl(authKeytabComposite,!kerberosBtn.getSelection());
      hideControl(maprTPasswordCompposite,kerberosBtn.getSelection() && maprTBtn.getSelection());
      getConnection().setEnableKerberos(kerberosBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseKeytab(keytabBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytabPrincipal(keytabPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  keytabText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytab(keytabText.getText());
      checkFieldsValue();
    }
  }
);
  maprTBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hideControl(maprTPCDCompposite,!maprTBtn.getSelection());
      hideControl(maprTSetComposite,!maprTBtn.getSelection());
      getConnection().setEnableMaprT(maprTBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTPassword(maprTPasswordText.getText());
      checkFieldsValue();
    }
  }
);
  maprTClusterText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTCluster(maprTClusterText.getText());
      checkFieldsValue();
    }
  }
);
  maprTDurationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTDuration(maprTDurationText.getText());
      checkFieldsValue();
    }
  }
);
  setMaprTHomeDirBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetMaprTHomeDir(setMaprTHomeDirBtn.getSelection());
      maprTHomeDirText.setText(getConnection().getMaprTHomeDir());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHomeDirText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHomeDir(maprTHomeDirText.getText());
      checkFieldsValue();
    }
  }
);
  setHadoopLoginBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetHadoopLogin(setHadoopLoginBtn.getSelection());
      maprTHadoopLoginText.setText(getConnection().getMaprTHadoopLogin());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHadoopLoginText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHadoopLogin(maprTHadoopLoginText.getText());
      checkFieldsValue();
    }
  }
);
  preloadAuthentificationBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setPreloadAuthentification(preloadAuthentificationBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
}",0.2311967773188516
124751,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
maprTPasswordText.setEditable(false);
maprTClusterText.setEditable(false);
maprTDurationText.setEditable(false);
hideControl(maprTBtn,true);
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
hideControl(maprTPasswordCompposite,kerberosBtn.getSelection());
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.7461502566495567
124752,"public static String getConfsJarDefaultName(String itemId){
  return CONFS_JAR_PREFIX.concat(itemId).concat(CONFS_JAR_EXT);
}","public static String getConfsJarDefaultName(String uid){
  return CONFS_JAR_PREFIX.concat(uid).concat(CONFS_JAR_EXT);
}",0.9590163934426228
124753,"@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return null;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        IOException e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}","@Override public ExecutionResult execute(Item item){
  ILibraryManagerService libService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
    libService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  }
  if (libService == null) {
    return null;
  }
  if (item instanceof HadoopClusterConnectionItem) {
    HadoopClusterConnectionItem hcItem=(HadoopClusterConnectionItem)item;
    HadoopClusterConnection connection=(HadoopClusterConnection)hcItem.getConnection();
    if (connection.getConfFile() == null) {
      String confJarName=HadoopParameterUtil.getConfsJarDefaultName(hcItem.getProperty().getId());
      File confsTempFolder=new File(HadoopConfsUtils.getConfsJarTempFolder());
      boolean retrieved=libService.retrieve(confJarName,confsTempFolder.getAbsolutePath(),false);
      File confJarFile=new File(confsTempFolder,confJarName);
      if (retrieved && confJarFile.exists()) {
        try {
          connection.setConfFile(FileUtils.readFileToByteArray(confJarFile));
          ProxyRepositoryFactory.getInstance().save(hcItem,true);
          return ExecutionResult.SUCCESS_WITH_ALERT;
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          return ExecutionResult.FAILURE;
        }
      }
    }
  }
  return ExecutionResult.NOTHING_TO_DO;
}",0.9752186588921284
124754,"@Override protected void updateEditableStatus(boolean isEditable){
  authenticationCombo.setEnabled(isEditable);
  namenodeUriText.setEditable(isEditable);
  jobtrackerUriText.setEditable(isEditable);
  rmSchedulerText.setEditable(isEditable);
  jobHistoryText.setEditable(isEditable);
  stagingDirectoryText.setEditable(isEditable);
  useDNHostBtn.setEnabled(isEditable);
  kerberosBtn.setEnabled(isEditable && (isCurrentHadoopVersionSupportSecurity() || isCustomUnsupportHasSecurity()));
  boolean isKerberosEditable=kerberosBtn.isEnabled() && kerberosBtn.getSelection();
  namenodePrincipalText.setEditable(isKerberosEditable);
  jtOrRmPrincipalText.setEditable(isKerberosEditable);
  jobHistoryPrincipalText.setEditable(isKerberosEditable);
  userNameText.setEditable(isEditable && !kerberosBtn.getSelection());
  groupText.setEditable(isEditable && (isCurrentHadoopVersionSupportGroup() || isCustomUnsupportHasGroup()));
  keytabBtn.setEnabled(isEditable && kerberosBtn.getSelection());
  boolean isKeyTabEditable=keytabBtn.isEnabled() && keytabBtn.getSelection();
  keytabText.setEditable(isKeyTabEditable);
  keytabPrincipalText.setEditable(isKeyTabEditable);
  maprTBtn.setEnabled(isEditable && isCurrentHadoopVersionSupportMapRTicket());
  boolean isMaprTEditable=maprTBtn.isEnabled() && maprTBtn.getSelection();
  maprTPasswordText.setEditable(isMaprTEditable && !isKerberosEditable);
  maprTClusterText.setEditable(isMaprTEditable);
  maprTDurationText.setEditable(isMaprTEditable);
  setMaprTHomeDirBtn.setEnabled(isEditable && maprTBtn.getSelection());
  setHadoopLoginBtn.setEnabled(isEditable && maprTBtn.getSelection());
  preloadAuthentificationBtn.setEnabled(isEditable && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(isMaprTEditable);
  maprTHadoopLoginText.setEditable(isMaprTEditable);
  hadoopPropertiesComposite.setEnabled(isEditable);
  propertiesDialog.updateStatusLabel(getHadoopProperties());
}","@Override protected void updateEditableStatus(boolean isEditable){
  authenticationCombo.setEnabled(isEditable);
  namenodeUriText.setEditable(isEditable);
  jobtrackerUriText.setEditable(isEditable);
  rmSchedulerText.setEditable(isEditable);
  jobHistoryText.setEditable(isEditable);
  stagingDirectoryText.setEditable(isEditable);
  useDNHostBtn.setEnabled(isEditable);
  kerberosBtn.setEnabled(isEditable && (isCurrentHadoopVersionSupportSecurity() || isCustomUnsupportHasSecurity()));
  boolean isKerberosEditable=kerberosBtn.isEnabled() && kerberosBtn.getSelection();
  namenodePrincipalText.setEditable(isKerberosEditable);
  jtOrRmPrincipalText.setEditable(isKerberosEditable);
  jobHistoryPrincipalText.setEditable(isEditable && isJobHistoryPrincipalEditable());
  userNameText.setEditable(isEditable && !kerberosBtn.getSelection());
  groupText.setEditable(isEditable && (isCurrentHadoopVersionSupportGroup() || isCustomUnsupportHasGroup()));
  keytabBtn.setEnabled(isEditable && kerberosBtn.getSelection());
  boolean isKeyTabEditable=keytabBtn.isEnabled() && keytabBtn.getSelection();
  keytabText.setEditable(isKeyTabEditable);
  keytabPrincipalText.setEditable(isKeyTabEditable);
  maprTBtn.setEnabled(isEditable && isCurrentHadoopVersionSupportMapRTicket());
  boolean isMaprTEditable=maprTBtn.isEnabled() && maprTBtn.getSelection();
  maprTPasswordText.setEditable(isMaprTEditable && !isKerberosEditable);
  maprTClusterText.setEditable(isMaprTEditable);
  maprTDurationText.setEditable(isMaprTEditable);
  setMaprTHomeDirBtn.setEnabled(isEditable && maprTBtn.getSelection());
  setHadoopLoginBtn.setEnabled(isEditable && maprTBtn.getSelection());
  preloadAuthentificationBtn.setEnabled(isEditable && maprTBtn.getSelection());
  maprTHomeDirText.setEditable(isMaprTEditable);
  maprTHadoopLoginText.setEditable(isMaprTEditable);
  hadoopPropertiesComposite.setEnabled(isEditable);
  propertiesDialog.updateStatusLabel(getHadoopProperties());
}",0.9848445928589776
124755,"@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  namenodeUriText.setReadOnly(readOnly);
  jobtrackerUriText.setReadOnly(readOnly);
  rmSchedulerText.setReadOnly(readOnly);
  jobHistoryText.setReadOnly(readOnly);
  stagingDirectoryText.setReadOnly(readOnly);
  useDNHostBtn.setEnabled(!readOnly);
  useCustomConfBtn.setEnabled(!readOnly);
  hadoopConfsButton.setEnabled(!readOnly && useCustomConfBtn.getSelection());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setEnabled(!readOnly);
    clouderaNaviButton.setEnabled(!readOnly && useClouderaNaviBtn.getSelection());
  }
  kerberosBtn.setEnabled(!readOnly);
  namenodePrincipalText.setReadOnly(readOnly);
  jtOrRmPrincipalText.setReadOnly(readOnly);
  jobHistoryPrincipalText.setReadOnly(readOnly);
  userNameText.setReadOnly(readOnly);
  groupText.setReadOnly(readOnly);
  kerberosBtn.setEnabled(!readOnly);
  namenodePrincipalText.setReadOnly(readOnly);
  jtOrRmPrincipalText.setReadOnly(readOnly);
  jobHistoryPrincipalText.setReadOnly(readOnly);
  userNameText.setReadOnly(readOnly);
  groupText.setReadOnly(readOnly);
  maprTBtn.setEnabled(!readOnly);
  maprTPasswordText.setReadOnly(readOnly);
  maprTClusterText.setReadOnly(readOnly);
  maprTDurationText.setReadOnly(readOnly);
  setMaprTHomeDirBtn.setEnabled(!readOnly);
  setHadoopLoginBtn.setEnabled(!readOnly);
  preloadAuthentificationBtn.setEnabled(!readOnly);
  maprTHomeDirText.setReadOnly(readOnly);
  maprTHadoopLoginText.setReadOnly(readOnly);
}","@Override protected void adaptFormToReadOnly(){
  readOnly=isReadOnly();
  namenodeUriText.setReadOnly(readOnly);
  jobtrackerUriText.setReadOnly(readOnly);
  rmSchedulerText.setReadOnly(readOnly);
  jobHistoryText.setReadOnly(readOnly);
  stagingDirectoryText.setReadOnly(readOnly);
  useDNHostBtn.setEnabled(!readOnly);
  useCustomConfBtn.setEnabled(!readOnly);
  hadoopConfsButton.setEnabled(!readOnly && useCustomConfBtn.getSelection());
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.setEnabled(!readOnly);
    clouderaNaviButton.setEnabled(!readOnly && useClouderaNaviBtn.getSelection());
  }
  kerberosBtn.setEnabled(!readOnly);
  namenodePrincipalText.setReadOnly(readOnly);
  jtOrRmPrincipalText.setReadOnly(readOnly);
  jobHistoryPrincipalText.setReadOnly(readOnly);
  userNameText.setReadOnly(readOnly);
  groupText.setReadOnly(readOnly);
  maprTBtn.setEnabled(!readOnly);
  maprTPasswordText.setReadOnly(readOnly);
  maprTClusterText.setReadOnly(readOnly);
  maprTDurationText.setReadOnly(readOnly);
  setMaprTHomeDirBtn.setEnabled(!readOnly);
  setHadoopLoginBtn.setEnabled(!readOnly);
  preloadAuthentificationBtn.setEnabled(!readOnly);
  maprTHomeDirText.setReadOnly(readOnly);
  maprTHadoopLoginText.setReadOnly(readOnly);
}",0.6736842105263158
124756,"/** 
 * is current hadoop version support JobHistoryPrincipal
 * @return
 */
protected boolean isCurrentHadoopVersionSupportJobHistoryPrincipal(){
  if (hadoopDistribution == null || hadoopVersison == null) {
    return false;
  }
  boolean isSupport=false;
  if (hadoopVersison.version != null && (hadoopVersison.version.equals(EHadoopVersion4Drivers.MICROSOFT_HD_INSIGHT_3_1.getVersionValue()) || hadoopVersison.version.equals(EHadoopVersion4Drivers.MICROSOFT_HD_INSIGHT_3_2.getVersionValue()))) {
    return false;
  }
 else {
    if (hadoopDistribution.useCustom()) {
      return true;
    }
 else {
      List<String> supportVersions=new ArrayList<String>();
      supportVersions.add(EHadoopVersion4Drivers.PIVOTAL_HD_1_0_1.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.PIVOTAL_HD_2_0.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.HDP_2_0.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.HDP_2_1.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.HDP_2_2.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.HDP_2_3.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.CLOUDERA_CDH4_YARN.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.CLOUDERA_CDH5.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.CLOUDERA_CDH5_1.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.CLOUDERA_CDH5_4.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.CLOUDERA_CDH5_5.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.MAPR401.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.MAPR500.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.APACHE_2_4_0_EMR.getVersionValue());
      supportVersions.add(EHadoopVersion4Drivers.EMR_4_0_0.getVersionValue());
      isSupport=supportVersions.contains(hadoopVersison.version);
    }
  }
  return isSupport;
}","private boolean isCurrentHadoopVersionSupportJobHistoryPrincipal(){
  return isCurrentHadoopVersionSupportSecurity() && (isCurrentHadoopVersionSupportYarn() || hadoopDistribution.useCustom());
}",0.1450206516750803
124757,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(true);
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
groupText.setEditable(false);
hideKerberosControl(!kerberosBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideKerberosControl(true);
hideMaprTicketControl(true);
maprTPasswordText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(isJobHistoryPrincipalEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
hideKerberosControl(!kerberosBtn.getSelection());
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
hideMaprTicketChildControl(!maprTBtn.getSelection());
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.9871918801353312
124758,"protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}","protected void setMaprTicketConfig(HadoopServiceProperties serviceProperties,ClassLoader classLoader,boolean useKerberos) throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=serviceProperties.getUserName();
  String mapRTicketPassword=serviceProperties.getMaprTPassword();
  String mapRTicketCluster=serviceProperties.getMaprTCluster();
  String mapRTicketDuration=serviceProperties.getMaprTDuration();
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
    }
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}",0.91648
124759,"private void setMaprTicketConfig(Object config,IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),decryptedPassword,desiredTicketDurInSecs});
  }
}","private void setMaprTicketConfig(Object config,IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws Exception {
  ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
    }
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
  if (useKerberos) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),desiredTicketDurInSecs});
  }
 else {
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
    ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketCluster),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketUsername),ConnectionContextHelper.getParamValueOffContext(metadataConn,mapRTicketPassword),desiredTicketDurInSecs});
  }
}",0.9228179850925704
124760,"@Override public boolean doSupportKerberos(){
  return false;
}","@Override public boolean doSupportKerberos(){
  return true;
}",0.944
124761,"@Test public void testCustomDistribution() throws Exception {
  HadoopComponent distribution=new CustomDistribution();
  assertNotNull(distribution.getDistributionName());
  assertNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(CustomDistribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertNull(distribution.getVersion());
  assertNull(distribution.getHadoopVersion());
  assertFalse(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertTrue(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertFalse(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertTrue(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(DEFAULT_YARN_APPLICATION_CLASSPATH,((MRComponent)distribution).getYarnApplicationClasspath());
  assertFalse(((HBaseComponent)distribution).doSupportNewHBaseAPI());
  assertTrue(((SqoopComponent)distribution).doJavaAPISupportStorePasswordInFile());
  assertFalse(((SqoopComponent)distribution).doJavaAPISqoopImportSupportDeleteTargetDir());
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportAllTablesSupportExcludeTable());
  assertTrue(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertTrue(((PigComponent)distribution).doSupportTezForPig());
  assertTrue(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertTrue(((HiveComponent)distribution).doSupportHive1());
  assertTrue(((HiveComponent)distribution).doSupportHive2());
  assertTrue(((HiveComponent)distribution).doSupportTezForHive());
  assertTrue(((HiveComponent)distribution).doSupportHBaseForHive());
  assertTrue(((HiveComponent)distribution).doSupportSSL());
  assertTrue(((HiveComponent)distribution).doSupportORCFormat());
  assertTrue(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertFalse(((SparkBatchComponent)distribution).isSpark14());
  assertTrue(((SparkBatchComponent)distribution).isSpark13());
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertFalse(((SparkStreamingComponent)distribution).isSpark14());
  assertTrue(((SparkStreamingComponent)distribution).isSpark13());
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
  assertFalse(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertTrue(distribution instanceof HCatalogComponent);
  assertTrue(distribution instanceof ImpalaComponent);
}","@Test public void testCustomDistribution() throws Exception {
  HadoopComponent distribution=new CustomDistribution();
  assertNotNull(distribution.getDistributionName());
  assertNull(distribution.getVersionName(null));
  assertTrue(distribution.doSupportS3());
  assertEquals(CustomDistribution.DISTRIBUTION_NAME,distribution.getDistribution());
  assertNull(distribution.getVersion());
  assertNull(distribution.getHadoopVersion());
  assertTrue(distribution.doSupportKerberos());
  assertTrue(distribution.doSupportUseDatanodeHostname());
  assertFalse(distribution.doSupportGroup());
  assertTrue(distribution.doSupportOldImportMode());
  assertTrue(((HDFSComponent)distribution).doSupportSequenceFileShortType());
  assertFalse(((MRComponent)distribution).isExecutedThroughWebHCat());
  assertFalse(((MRComponent)distribution).doSupportCrossPlatformSubmission());
  assertTrue(((MRComponent)distribution).doSupportImpersonation());
  assertEquals(DEFAULT_YARN_APPLICATION_CLASSPATH,((MRComponent)distribution).getYarnApplicationClasspath());
  assertFalse(((HBaseComponent)distribution).doSupportNewHBaseAPI());
  assertTrue(((SqoopComponent)distribution).doJavaAPISupportStorePasswordInFile());
  assertFalse(((SqoopComponent)distribution).doJavaAPISqoopImportSupportDeleteTargetDir());
  assertTrue(((SqoopComponent)distribution).doJavaAPISqoopImportAllTablesSupportExcludeTable());
  assertTrue(((PigComponent)distribution).doSupportHCatalog());
  assertFalse(((PigComponent)distribution).pigVersionPriorTo_0_12());
  assertTrue(((PigComponent)distribution).doSupportHBase());
  assertTrue(((PigComponent)distribution).doSupportTezForPig());
  assertTrue(((HiveComponent)distribution).doSupportEmbeddedMode());
  assertTrue(((HiveComponent)distribution).doSupportStandaloneMode());
  assertTrue(((HiveComponent)distribution).doSupportHive1());
  assertTrue(((HiveComponent)distribution).doSupportHive2());
  assertTrue(((HiveComponent)distribution).doSupportTezForHive());
  assertTrue(((HiveComponent)distribution).doSupportHBaseForHive());
  assertTrue(((HiveComponent)distribution).doSupportSSL());
  assertTrue(((HiveComponent)distribution).doSupportORCFormat());
  assertTrue(((HiveComponent)distribution).doSupportAvroFormat());
  assertTrue(((HiveComponent)distribution).doSupportParquetFormat());
  assertFalse(((SparkBatchComponent)distribution).isSpark14());
  assertTrue(((SparkBatchComponent)distribution).isSpark13());
  assertTrue(((SparkBatchComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkBatchComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkBatchComponent)distribution).doSupportSparkYarnClientMode());
  assertFalse(((SparkStreamingComponent)distribution).isSpark14());
  assertTrue(((SparkStreamingComponent)distribution).isSpark13());
  assertTrue(((SparkStreamingComponent)distribution).doSupportDynamicMemoryAllocation());
  assertFalse(((SparkStreamingComponent)distribution).isExecutedThroughSparkJobServer());
  assertTrue(((SparkStreamingComponent)distribution).doSupportCheckpointing());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkStandaloneMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportSparkYarnClientMode());
  assertTrue(((SparkStreamingComponent)distribution).doSupportBackpressure());
  assertFalse(((HiveComponent)distribution).doSupportStoreAsParquet());
  assertFalse(((HiveComponent)distribution).doSupportClouderaNavigator());
  assertTrue(distribution instanceof HCatalogComponent);
  assertTrue(distribution instanceof ImpalaComponent);
}",0.9990498167503732
124762,"public static String getConfsJarDefaultName(String itemId){
  return CONFS_JAR_PREFIX.concat(itemId).concat(CONFS_JAR_EXT);
}","public static String getConfsJarDefaultName(String uid){
  return CONFS_JAR_PREFIX.concat(uid).concat(CONFS_JAR_EXT);
}",0.9590163934426228
124763,"/** 
 * DOC ycbai Comment method ""getHadoopDbParameters"". Get db connection(like hbase, hive) parameters by hadoop cluster.
 * @param clusterId
 * @return
 */
public static Map<String,String> getHadoopDbParameters(String clusterId){
  Map<String,String> map=new HashMap<String,String>();
  HadoopClusterConnectionItem clusterItem=HCRepositoryUtil.getRelativeHadoopClusterItem(clusterId);
  if (clusterItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
    map.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobTrackerURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_CUSTOM_CONFS,String.valueOf(hcConnection.isUseCustomConfs()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJtOrRmPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobHistoryPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_RESOURCEMANAGER_SCHEDULER_ADDRESS,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getRmScheduler()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOBHISTORY_ADDRESS,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobHistory()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_STAGING_DIRECTORY,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getStagingDirectory()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,String.valueOf(hcConnection.isUseDNHost()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI())));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
    if (hcConnection.isEnableKerberos()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
      if (hcConnection.isUseKeytab()) {
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
      }
    }
  }
  return map;
}","/** 
 * DOC ycbai Comment method ""getHadoopDbParameters"". Get db connection(like hbase, hive) parameters by hadoop cluster.
 * @param clusterId
 * @return
 */
public static Map<String,String> getHadoopDbParameters(String clusterId){
  Map<String,String> map=new HashMap<String,String>();
  HadoopClusterConnectionItem clusterItem=HCRepositoryUtil.getRelativeHadoopClusterItem(clusterId);
  if (clusterItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
    map.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobTrackerURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_CUSTOM_CONFS,String.valueOf(hcConnection.isUseCustomConfs()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJtOrRmPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobHistoryPrincipal()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_RESOURCEMANAGER_SCHEDULER_ADDRESS,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getRmScheduler()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOBHISTORY_ADDRESS,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getJobHistory()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_STAGING_DIRECTORY,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getStagingDirectory()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,String.valueOf(hcConnection.isUseDNHost()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getNameNodeURI())));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
    if (hcConnection.isEnableKerberos()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
      if (hcConnection.isUseKeytab()) {
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
      }
    }
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET,String.valueOf(hcConnection.isEnableMaprT()));
    if (hcConnection.isEnableMaprT()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTPassword()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTCluster()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTDuration()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getUserName()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTPassword()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTCluster()));
      map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getMaprTDuration()));
    }
  }
  return map;
}",0.8044933620787473
124764,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      String mapRTicketDuration=serviceProperties.getMaprTDuration();
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    String mapRTicketDuration=serviceProperties.getMaprTDuration();
    Long desiredTicketDurInSecs=86400L;
    if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
    }
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.5823018658784408
124765,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=serviceProperties.getMaprTCluster();
        String mapRTicketDuration=serviceProperties.getMaprTDuration();
        Long desiredTicketDurInSecs=86400L;
        if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
          desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
        }
        try {
          Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
          ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=serviceProperties.getUserName();
      String mapRTicketPassword=serviceProperties.getMaprTPassword();
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      String mapRTicketDuration=serviceProperties.getMaprTDuration();
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useMaprTicket) {
      setMaprTicketConfig(serviceProperties,classLoader,useKrb);
    }
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}",0.5673090649536046
124766,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      String mapRTicketDuration=serviceProperties.getMaprTDuration();
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    String mapRTicketDuration=serviceProperties.getMaprTDuration();
    Long desiredTicketDurInSecs=86400L;
    if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
    }
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useMaprTicket) {
    setMaprTicketConfig(serviceProperties,classLoader,useKrb);
  }
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.6273281687819351
124767,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideControl(maprTBtn,true);
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
maprTPasswordText.setEditable(false);
maprTClusterText.setEditable(false);
maprTDurationText.setEditable(false);
hideControl(maprTBtn,true);
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.9868036902954572
124768,"private void addAuthenticationFields(){
  Group authGroup=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),110);
  authGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite authPartComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  authPartComposite.setLayout(authPartLayout);
  authPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  authCommonComposite=new Composite(authPartComposite,SWT.NULL);
  GridLayout authCommonCompLayout=new GridLayout(1,false);
  authCommonCompLayout.marginWidth=0;
  authCommonCompLayout.marginHeight=0;
  authCommonComposite.setLayout(authCommonCompLayout);
  authCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  kerberosBtn=new Button(authCommonComposite,SWT.CHECK);
  kerberosBtn.setText(Messages.getString(""String_Node_Str""));
  kerberosBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,4,1));
  authNodejtOrRmHistoryComposite=new Composite(authCommonComposite,SWT.NULL);
  GridLayout authNodejtOrRmHistoryCompLayout=new GridLayout(4,false);
  authNodejtOrRmHistoryCompLayout.marginWidth=0;
  authNodejtOrRmHistoryCompLayout.marginHeight=0;
  authNodejtOrRmHistoryComposite.setLayout(authNodejtOrRmHistoryCompLayout);
  authNodejtOrRmHistoryComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  namenodePrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jtOrRmPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jobHistoryPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  Composite placeHolder=new Composite(authCommonComposite,SWT.NULL);
  GridLayout placeHolderLayout=new GridLayout(4,false);
  placeHolderLayout.marginWidth=0;
  placeHolderLayout.marginHeight=0;
  placeHolder.setLayout(placeHolderLayout);
  placeHolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  userNameText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  groupText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  authKeytabComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authKeytabCompLayout=new GridLayout(5,false);
  authKeytabCompLayout.marginWidth=0;
  authKeytabCompLayout.marginHeight=0;
  authKeytabComposite.setLayout(authKeytabCompLayout);
  authKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keytabBtn=new Button(authKeytabComposite,SWT.CHECK);
  keytabBtn.setText(Messages.getString(""String_Node_Str""));
  keytabBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,5,1));
  keytabPrincipalText=new LabelledText(authKeytabComposite,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabText=new LabelledFileField(authKeytabComposite,Messages.getString(""String_Node_Str""),extensions);
  authMaprTComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authMaprTicketCompLayout=new GridLayout(1,false);
  authMaprTicketCompLayout.marginWidth=0;
  authMaprTicketCompLayout.marginHeight=0;
  authMaprTComposite.setLayout(authMaprTicketCompLayout);
  authMaprTComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTBtn=new Button(authMaprTComposite,SWT.CHECK);
  maprTBtn.setText(Messages.getString(""String_Node_Str""));
  maprTBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  maprTPCDCompposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTPCDCompositeLayout=new GridLayout(2,false);
  maprTPCDCompositeLayout.marginWidth=0;
  maprTPCDCompositeLayout.marginHeight=0;
  maprTPCDCompposite.setLayout(maprTPCDCompositeLayout);
  maprTPCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordText=new LabelledText(maprTPCDCompposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordText.getTextControl().setEchoChar('*');
  maprTClusterText=new LabelledText(maprTPCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTDurationText=new LabelledText(maprTPCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTSetComposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTicketSetCompLayout=new GridLayout(3,false);
  maprTicketSetCompLayout.marginWidth=0;
  maprTicketSetCompLayout.marginHeight=0;
  maprTSetComposite.setLayout(maprTicketSetCompLayout);
  maprTSetComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setMaprTHomeDirBtn=new Button(maprTSetComposite,SWT.CHECK);
  setMaprTHomeDirBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHomeDirText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  setHadoopLoginBtn=new Button(maprTSetComposite,SWT.CHECK);
  setHadoopLoginBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHadoopLoginText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  preloadAuthentificationBtn=new Button(maprTSetComposite,SWT.CHECK);
  preloadAuthentificationBtn.setText(Messages.getString(""String_Node_Str""));
}","private void addAuthenticationFields(){
  Group authGroup=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),110);
  authGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite authPartComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  authPartComposite.setLayout(authPartLayout);
  authPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  authCommonComposite=new Composite(authPartComposite,SWT.NULL);
  GridLayout authCommonCompLayout=new GridLayout(1,false);
  authCommonCompLayout.marginWidth=0;
  authCommonCompLayout.marginHeight=0;
  authCommonComposite.setLayout(authCommonCompLayout);
  authCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  kerberosBtn=new Button(authCommonComposite,SWT.CHECK);
  kerberosBtn.setText(Messages.getString(""String_Node_Str""));
  kerberosBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,4,1));
  authNodejtOrRmHistoryComposite=new Composite(authCommonComposite,SWT.NULL);
  GridLayout authNodejtOrRmHistoryCompLayout=new GridLayout(4,false);
  authNodejtOrRmHistoryCompLayout.marginWidth=0;
  authNodejtOrRmHistoryCompLayout.marginHeight=0;
  authNodejtOrRmHistoryComposite.setLayout(authNodejtOrRmHistoryCompLayout);
  authNodejtOrRmHistoryComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  namenodePrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jtOrRmPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  jobHistoryPrincipalText=new LabelledText(authNodejtOrRmHistoryComposite,Messages.getString(""String_Node_Str""),1);
  Composite placeHolder=new Composite(authCommonComposite,SWT.NULL);
  GridLayout placeHolderLayout=new GridLayout(4,false);
  placeHolderLayout.marginWidth=0;
  placeHolderLayout.marginHeight=0;
  placeHolder.setLayout(placeHolderLayout);
  placeHolder.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  userNameText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  groupText=new LabelledText(placeHolder,Messages.getString(""String_Node_Str""),1);
  authKeytabComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authKeytabCompLayout=new GridLayout(5,false);
  authKeytabCompLayout.marginWidth=0;
  authKeytabCompLayout.marginHeight=0;
  authKeytabComposite.setLayout(authKeytabCompLayout);
  authKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  keytabBtn=new Button(authKeytabComposite,SWT.CHECK);
  keytabBtn.setText(Messages.getString(""String_Node_Str""));
  keytabBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,5,1));
  keytabPrincipalText=new LabelledText(authKeytabComposite,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabText=new LabelledFileField(authKeytabComposite,Messages.getString(""String_Node_Str""),extensions);
  authMaprTComposite=new Composite(authGroup,SWT.NULL);
  GridLayout authMaprTicketCompLayout=new GridLayout(1,false);
  authMaprTicketCompLayout.marginWidth=0;
  authMaprTicketCompLayout.marginHeight=0;
  authMaprTComposite.setLayout(authMaprTicketCompLayout);
  authMaprTComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTBtn=new Button(authMaprTComposite,SWT.CHECK);
  maprTBtn.setText(Messages.getString(""String_Node_Str""));
  maprTBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  maprTPCDCompposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTPCDCompositeLayout=new GridLayout(1,false);
  maprTPCDCompositeLayout.marginWidth=0;
  maprTPCDCompositeLayout.marginHeight=0;
  maprTPCDCompposite.setLayout(maprTPCDCompositeLayout);
  maprTPCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordCompposite=new Composite(maprTPCDCompposite,SWT.NULL);
  GridLayout maprTPasswordComppositeLayout=new GridLayout(2,false);
  maprTPasswordComppositeLayout.marginWidth=0;
  maprTPasswordComppositeLayout.marginHeight=0;
  maprTPasswordCompposite.setLayout(maprTPasswordComppositeLayout);
  maprTPasswordCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTPasswordText=new LabelledText(maprTPasswordCompposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordText.getTextControl().setEchoChar('*');
  Composite maprTCDCompposite=new Composite(maprTPCDCompposite,SWT.NULL);
  GridLayout maprTCDComppositeLayout=new GridLayout(2,false);
  maprTCDComppositeLayout.marginWidth=0;
  maprTCDComppositeLayout.marginHeight=0;
  maprTCDCompposite.setLayout(maprTCDComppositeLayout);
  maprTCDCompposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  maprTClusterText=new LabelledText(maprTCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTDurationText=new LabelledText(maprTCDCompposite,Messages.getString(""String_Node_Str""),1);
  maprTSetComposite=new Composite(authMaprTComposite,SWT.NULL);
  GridLayout maprTicketSetCompLayout=new GridLayout(3,false);
  maprTicketSetCompLayout.marginWidth=0;
  maprTicketSetCompLayout.marginHeight=0;
  maprTSetComposite.setLayout(maprTicketSetCompLayout);
  maprTSetComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  setMaprTHomeDirBtn=new Button(maprTSetComposite,SWT.CHECK);
  setMaprTHomeDirBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHomeDirText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  setHadoopLoginBtn=new Button(maprTSetComposite,SWT.CHECK);
  setHadoopLoginBtn.setText(Messages.getString(""String_Node_Str""));
  maprTHadoopLoginText=new LabelledText(maprTSetComposite,""String_Node_Str"",1);
  preloadAuthentificationBtn=new Button(maprTSetComposite,SWT.CHECK);
  preloadAuthentificationBtn.setText(Messages.getString(""String_Node_Str""));
}",0.8438484384843848
124769,"@Override protected void addFieldsListeners(){
  authenticationCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newAuthDisplayName=authenticationCombo.getText();
      EAuthenticationMode newAuthMode=EAuthenticationMode.getAuthenticationByDisplayName(newAuthDisplayName);
      String originalAuthName=getConnection().getAuthMode();
      EAuthenticationMode originalAuthMode=EAuthenticationMode.getAuthenticationByName(originalAuthName,false);
      if (newAuthMode != null && newAuthMode != originalAuthMode) {
        getConnection().setAuthMode(newAuthMode.getName());
        updateForm();
        checkFieldsValue();
      }
    }
  }
);
  namenodeUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setNameNodeURI(namenodeUriText.getText());
      checkFieldsValue();
    }
  }
);
  jobtrackerUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobTrackerURI(jobtrackerUriText.getText());
      checkFieldsValue();
    }
  }
);
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  hadoopConfsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      AbstractHadoopForm form=null;
      if (parentForm instanceof AbstractHadoopForm) {
        form=(AbstractHadoopForm)parentForm;
      }
      HadoopConfsUtils.openHadoopConfsWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
    }
  }
);
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        clouderaNaviButton.setEnabled(useClouderaNaviBtn.getSelection());
        getConnection().setUseClouderaNavi(useClouderaNaviBtn.getSelection());
        checkFieldsValue();
      }
    }
);
    clouderaNaviButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        AbstractHadoopForm form=null;
        if (parentForm instanceof AbstractHadoopForm) {
          form=(AbstractHadoopForm)parentForm;
        }
        HadoopConfsUtils.openClouderaNaviWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
      }
    }
);
  }
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  namenodePrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setPrincipal(namenodePrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jtOrRmPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJtOrRmPrincipal(jtOrRmPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setJobHistoryPrincipal(jobHistoryPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setUserName(userNameText.getText());
      checkFieldsValue();
    }
  }
);
  groupText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setGroup(groupText.getText());
      checkFieldsValue();
    }
  }
);
  kerberosBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (kerberosBtn.getSelection()) {
        hideControl(authNodejtOrRmHistoryComposite,false);
        hideControl(authKeytabComposite,false);
      }
 else {
        hideControl(authNodejtOrRmHistoryComposite,true);
        hideControl(authKeytabComposite,true);
      }
      authCommonComposite.layout();
      authCommonComposite.getParent().layout();
      getConnection().setEnableKerberos(kerberosBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseKeytab(keytabBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytabPrincipal(keytabPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  keytabText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytab(keytabText.getText());
      checkFieldsValue();
    }
  }
);
  maprTBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (maprTBtn.getSelection()) {
        hideControl(maprTPCDCompposite,false);
        hideControl(maprTSetComposite,false);
      }
 else {
        hideControl(maprTPCDCompposite,true);
        hideControl(maprTSetComposite,true);
      }
      authMaprTComposite.layout();
      authMaprTComposite.getParent().layout();
      getConnection().setEnableMaprT(maprTBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTPassword(maprTPasswordText.getText());
      checkFieldsValue();
    }
  }
);
  maprTClusterText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTCluster(maprTClusterText.getText());
      checkFieldsValue();
    }
  }
);
  maprTDurationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTDuration(maprTDurationText.getText());
      checkFieldsValue();
    }
  }
);
  setMaprTHomeDirBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetMaprTHomeDir(setMaprTHomeDirBtn.getSelection());
      maprTHomeDirText.setText(getConnection().getMaprTHomeDir());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHomeDirText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHomeDir(maprTHomeDirText.getText());
      checkFieldsValue();
    }
  }
);
  setHadoopLoginBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetHadoopLogin(setHadoopLoginBtn.getSelection());
      maprTHadoopLoginText.setText(getConnection().getMaprTHadoopLogin());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHadoopLoginText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHadoopLogin(maprTHadoopLoginText.getText());
      checkFieldsValue();
    }
  }
);
  preloadAuthentificationBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setPreloadAuthentification(preloadAuthentificationBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  authenticationCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newAuthDisplayName=authenticationCombo.getText();
      EAuthenticationMode newAuthMode=EAuthenticationMode.getAuthenticationByDisplayName(newAuthDisplayName);
      String originalAuthName=getConnection().getAuthMode();
      EAuthenticationMode originalAuthMode=EAuthenticationMode.getAuthenticationByName(originalAuthName,false);
      if (newAuthMode != null && newAuthMode != originalAuthMode) {
        getConnection().setAuthMode(newAuthMode.getName());
        updateForm();
        checkFieldsValue();
      }
    }
  }
);
  namenodeUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setNameNodeURI(namenodeUriText.getText());
      checkFieldsValue();
    }
  }
);
  jobtrackerUriText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobTrackerURI(jobtrackerUriText.getText());
      checkFieldsValue();
    }
  }
);
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  hadoopConfsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      AbstractHadoopForm form=null;
      if (parentForm instanceof AbstractHadoopForm) {
        form=(AbstractHadoopForm)parentForm;
      }
      HadoopConfsUtils.openHadoopConfsWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
    }
  }
);
  if (useClouderaNaviBtn != null) {
    useClouderaNaviBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        clouderaNaviButton.setEnabled(useClouderaNaviBtn.getSelection());
        getConnection().setUseClouderaNavi(useClouderaNaviBtn.getSelection());
        checkFieldsValue();
      }
    }
);
    clouderaNaviButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        AbstractHadoopForm form=null;
        if (parentForm instanceof AbstractHadoopForm) {
          form=(AbstractHadoopForm)parentForm;
        }
        HadoopConfsUtils.openClouderaNaviWizard(form,(HadoopClusterConnectionItem)connectionItem,creation);
      }
    }
);
  }
  rmSchedulerText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRmScheduler(rmSchedulerText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJobHistory(jobHistoryText.getText());
      checkFieldsValue();
    }
  }
);
  stagingDirectoryText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setStagingDirectory(stagingDirectoryText.getText());
      checkFieldsValue();
    }
  }
);
  useDNHostBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseDNHost(useDNHostBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  useCustomConfBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hadoopConfsButton.setEnabled(useCustomConfBtn.getSelection());
      getConnection().setUseCustomConfs(useCustomConfBtn.getSelection());
      checkFieldsValue();
    }
  }
);
  namenodePrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setPrincipal(namenodePrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jtOrRmPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setJtOrRmPrincipal(jtOrRmPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  jobHistoryPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      getConnection().setJobHistoryPrincipal(jobHistoryPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setUserName(userNameText.getText());
      checkFieldsValue();
    }
  }
);
  groupText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setGroup(groupText.getText());
      checkFieldsValue();
    }
  }
);
  kerberosBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hideControl(authNodejtOrRmHistoryComposite,!kerberosBtn.getSelection());
      hideControl(authKeytabComposite,!kerberosBtn.getSelection());
      hideControl(maprTPasswordCompposite,kerberosBtn.getSelection() && maprTBtn.getSelection());
      getConnection().setEnableKerberos(kerberosBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setUseKeytab(keytabBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  keytabPrincipalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytabPrincipal(keytabPrincipalText.getText());
      checkFieldsValue();
    }
  }
);
  keytabText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setKeytab(keytabText.getText());
      checkFieldsValue();
    }
  }
);
  maprTBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      hideControl(maprTPCDCompposite,!maprTBtn.getSelection());
      hideControl(maprTSetComposite,!maprTBtn.getSelection());
      getConnection().setEnableMaprT(maprTBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTPassword(maprTPasswordText.getText());
      checkFieldsValue();
    }
  }
);
  maprTClusterText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTCluster(maprTClusterText.getText());
      checkFieldsValue();
    }
  }
);
  maprTDurationText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTDuration(maprTDurationText.getText());
      checkFieldsValue();
    }
  }
);
  setMaprTHomeDirBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetMaprTHomeDir(setMaprTHomeDirBtn.getSelection());
      maprTHomeDirText.setText(getConnection().getMaprTHomeDir());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHomeDirText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHomeDir(maprTHomeDirText.getText());
      checkFieldsValue();
    }
  }
);
  setHadoopLoginBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setSetHadoopLogin(setHadoopLoginBtn.getSelection());
      maprTHadoopLoginText.setText(getConnection().getMaprTHadoopLogin());
      updateForm();
      checkFieldsValue();
    }
  }
);
  maprTHadoopLoginText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setMaprTHadoopLogin(maprTHadoopLoginText.getText());
      checkFieldsValue();
    }
  }
);
  preloadAuthentificationBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      getConnection().setPreloadAuthentification(preloadAuthentificationBtn.getSelection());
      updateForm();
      checkFieldsValue();
    }
  }
);
}",0.965962020781082
124770,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
maprTPasswordText.setEditable(false);
maprTClusterText.setEditable(false);
maprTDurationText.setEditable(false);
hideControl(maprTBtn,true);
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
maprTPasswordText.setEditable(false);
maprTClusterText.setEditable(false);
maprTDurationText.setEditable(false);
hideControl(maprTBtn,true);
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
hideControl(maprTPasswordCompposite,kerberosBtn.getSelection());
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.9925637798878848
124771,"public void setHadoopVersionValue(String hadoopVersionValue){
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion hadoopDistributionVersion=hadoopDistributionService.getHadoopDistributionVersion(hadoopVersionValue,false);
  String originalVersionValue=getHadoopVersionValue();
  if (hadoopDistributionVersion != null && hadoopDistributionVersion.getVersion() != null && !hadoopDistributionVersion.getVersion().equals(originalVersionValue) && hadoopDistributionVersion.getDisplayVersion() != null) {
    hadoopVersionCombo.setText(hadoopDistributionVersion.getDisplayVersion());
  }
 else {
    hadoopVersionCombo.select(0);
  }
}","public void setHadoopVersionValue(String hadoopVersionValue){
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion hadoopDistributionVersion=hadoopDistributionService.getHadoopDistributionVersion(hadoopVersionValue,false);
  String originalVersionValue=getHadoopVersionValue();
  if (hadoopDistributionVersion != null && hadoopDistributionVersion.getVersion() != null && hadoopDistributionVersion.getDisplayVersion() != null) {
    if (hadoopDistributionVersion.getVersion().equals(originalVersionValue)) {
      return;
    }
 else {
      hadoopVersionCombo.setText(hadoopDistributionVersion.getDisplayVersion());
    }
  }
 else {
    hadoopVersionCombo.select(0);
  }
}",0.878334417696812
124772,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    Object mapRTicketDuration=serviceProperties.getMaprTDuration();
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      String mapRTicketDuration=serviceProperties.getMaprTDuration();
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    String mapRTicketDuration=serviceProperties.getMaprTDuration();
    Long desiredTicketDurInSecs=86400L;
    if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
    }
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.8044450858709771
124773,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=serviceProperties.getMaprTCluster();
        Object mapRTicketDuration=serviceProperties.getMaprTDuration();
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=serviceProperties.getUserName();
      String mapRTicketPassword=serviceProperties.getMaprTPassword();
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=serviceProperties.getMaprTCluster();
        String mapRTicketDuration=serviceProperties.getMaprTDuration();
        Long desiredTicketDurInSecs=86400L;
        if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
          desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
        }
        try {
          Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
          ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=serviceProperties.getUserName();
      String mapRTicketPassword=serviceProperties.getMaprTPassword();
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      String mapRTicketDuration=serviceProperties.getMaprTDuration();
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}",0.8396875364346508
124774,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    Object mapRTicketDuration=serviceProperties.getMaprTDuration();
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      String mapRTicketDuration=serviceProperties.getMaprTDuration();
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    String mapRTicketDuration=serviceProperties.getMaprTDuration();
    Long desiredTicketDurInSecs=86400L;
    if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
    }
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.817354608993802
124775,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    Object mapRTicketDuration=serviceProperties.getMaprTDuration();
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.6413251221066044
124776,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=serviceProperties.getMaprTCluster();
        Object mapRTicketDuration=serviceProperties.getMaprTDuration();
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=serviceProperties.getUserName();
      String mapRTicketPassword=serviceProperties.getMaprTPassword();
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}",0.68675274988044
124777,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    Object mapRTicketDuration=serviceProperties.getMaprTDuration();
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.6623158679843372
124778,"private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  properties.setContextType(contextType);
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setGroup(connection.getGroup());
  properties.setUseKrb(connection.isEnableKerberos());
  properties.setCustom(connection.isUseCustomVersion());
  properties.setUseCustomConfs(connection.isUseCustomConfs());
  properties.setPrincipal(connection.getPrincipal());
  properties.setJtOrRmPrincipal(connection.getJtOrRmPrincipal());
  properties.setJobHistoryPrincipal(connection.getJobHistoryPrincipal());
  properties.setUseKeytab(connection.isUseKeytab());
  properties.setKeytabPrincipal(connection.getKeytabPrincipal());
  properties.setKeytab(connection.getKeytab());
  properties.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties()));
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
}","private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  properties.setContextType(contextType);
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setGroup(connection.getGroup());
  properties.setUseKrb(connection.isEnableKerberos());
  properties.setCustom(connection.isUseCustomVersion());
  properties.setUseCustomConfs(connection.isUseCustomConfs());
  properties.setPrincipal(connection.getPrincipal());
  properties.setJtOrRmPrincipal(connection.getJtOrRmPrincipal());
  properties.setJobHistoryPrincipal(connection.getJobHistoryPrincipal());
  properties.setUseKeytab(connection.isUseKeytab());
  properties.setKeytabPrincipal(connection.getKeytabPrincipal());
  properties.setKeytab(connection.getKeytab());
  properties.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties()));
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
  properties.setMaprT(connection.isEnableMaprT());
  properties.setUserName(connection.getUserName());
  properties.setMaprTPassword(connection.getMaprTPassword());
  properties.setMaprTCluster(connection.getMaprTCluster());
  properties.setMaprTDuration(connection.getMaprTDuration());
  properties.setSetMaprTHomeDir(connection.isSetMaprTHomeDir());
  properties.setSetHadoopLogin(connection.isSetHadoopLogin());
  properties.setPreloadAuthentification(connection.isPreloadAuthentification());
  properties.setMaprTHomeDir(connection.getMaprTHomeDir());
  properties.setMaprTHadoopLogin(connection.getMaprTHadoopLogin());
}",0.7955439056356488
124779,"private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARK.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARKSTREAMING.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK_STREAMING);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTDuration()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUserName()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviPassword()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviMetadataUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviClientUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaAutoCommit();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDisableSSL();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDieNoError();
  }
  return null;
}","private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARK.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK);
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS_FOR_SPARKSTREAMING.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.SPARK_STREAMING);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.USE_MAPRTICKET.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableMaprT();
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTPassword()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_CLUSTER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getMaprTCluster()));
  }
 else   if (EHDFSRepositoryToComponent.MAPRTICKET_DURATION.getRepositoryValue().equals(value)) {
    return hcConnection.getMaprTDuration();
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUserName()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviPassword()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviMetadataUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getClouderaNaviClientUrl()));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaAutoCommit();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDisableSSL();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return hcConnection.isClouderaDieNoError();
  }
  return null;
}",0.9966719722182028
124780,"@Test public void testDoSupportSecurity(){
  String messages=""String_Node_Str"";
  HiveModeInfo hiveMode=HiveModeInfo.EMBEDDED;
  HiveServerVersionInfo hiveServer=HiveServerVersionInfo.HIVE_SERVER_2;
  assertThat(MessageFormat.format(messages,hiveMode.getDisplayName(),hiveServer.getKey()),HiveMetadataHelper.doSupportSecurity(getDistribution(),getDistributionVersion(),hiveMode.getName(),hiveServer.getKey(),false),is(isSupportSecurity()));
  hiveServer=HiveServerVersionInfo.HIVE_SERVER_1;
  assertThat(MessageFormat.format(messages,hiveMode.getDisplayName(),hiveServer.getKey()),HiveMetadataHelper.doSupportSecurity(getDistribution(),getDistributionVersion(),hiveMode.getName(),hiveServer.getKey(),false),is(isSupportSecurity()));
  hiveServer=HiveServerVersionInfo.HIVE_SERVER_2;
  hiveMode=HiveModeInfo.STANDALONE;
  assertThat(MessageFormat.format(messages,hiveMode.getDisplayName(),hiveServer.getKey()),HiveMetadataHelper.doSupportSecurity(getDistribution(),getDistributionVersion(),hiveMode.getName(),hiveServer.getKey(),false),is(isSupportSecurity()));
}","@Test public void testDoSupportSecurity(){
  String messages=""String_Node_Str"";
  HiveModeInfo hiveMode=HiveModeInfo.EMBEDDED;
  HiveServerVersionInfo hiveServer=HiveServerVersionInfo.HIVE_SERVER_2;
  assertTrue(MessageFormat.format(messages,hiveMode.getDisplayName(),hiveServer.getKey()),HiveMetadataHelper.doSupportSecurity(getDistribution(),getDistributionVersion(),hiveMode.getName(),hiveServer.getKey(),false) == isSupportSecurity());
  hiveServer=HiveServerVersionInfo.HIVE_SERVER_1;
  assertTrue(MessageFormat.format(messages,hiveMode.getDisplayName(),hiveServer.getKey()),HiveMetadataHelper.doSupportSecurity(getDistribution(),getDistributionVersion(),hiveMode.getName(),hiveServer.getKey(),false) == isSupportSecurity());
  hiveServer=HiveServerVersionInfo.HIVE_SERVER_2;
  hiveMode=HiveModeInfo.STANDALONE;
  assertTrue(MessageFormat.format(messages,hiveMode.getDisplayName(),hiveServer.getKey()),HiveMetadataHelper.doSupportSecurity(getDistribution(),getDistributionVersion(),hiveMode.getName(),hiveServer.getKey(),false) == isSupportSecurity());
}",0.9787835926449788
124781,"@Test public void testDoSupportTez(){
  assertThat(HiveMetadataHelper.doSupportTez(getDistribution(),getDistributionVersion(),false),is(isSupportTez()));
}","@Test public void testDoSupportTez(){
  assertTrue(HiveMetadataHelper.doSupportTez(getDistribution(),getDistributionVersion(),false) == isSupportTez());
}",0.9514563106796116
124782,"@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
maprTBtn.setEnabled(false);
maprTPasswordText.setEditable(false);
maprTClusterText.setEditable(false);
maprTDurationText.setEditable(false);
setMaprTHomeDirBtn.setEnabled(false);
setHadoopLoginBtn.setEnabled(false);
preloadAuthentificationBtn.setEnabled(false);
maprTHomeDirText.setEditable(false);
maprTHadoopLoginText.setEditable(false);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}","@Override public void updateForm(){
  HadoopClusterConnection connection=getConnection();
  final DistributionVersion distributionVersion=getDistributionVersion();
  if (distributionVersion.distribution.useCustom()) {
    hideControl(customGroup,false);
    String authModeName=connection.getAuthMode();
    if (authModeName != null) {
      EAuthenticationMode authMode=EAuthenticationMode.getAuthenticationByName(authModeName,false);
switch (authMode) {
case KRB:
        kerberosBtn.setEnabled(true);
      namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
    jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
  jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
userNameText.setEditable(false);
groupText.setEditable(false);
break;
case UGI:
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(true);
break;
default :
kerberosBtn.setEnabled(false);
namenodePrincipalText.setEditable(false);
jtOrRmPrincipalText.setEditable(false);
jobHistoryPrincipalText.setEditable(false);
keytabBtn.setEnabled(false);
keytabPrincipalText.setEditable(false);
keytabText.setEditable(false);
userNameText.setEditable(true);
groupText.setEditable(false);
hideControl(maprTBtn,true);
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
break;
}
}
}
 else {
hideControl(customGroup,true);
kerberosBtn.setEnabled(isCurrentHadoopVersionSupportSecurity());
namenodePrincipalText.setEditable(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
jtOrRmPrincipalText.setEditable(namenodePrincipalText.getEditable());
jobHistoryPrincipalText.setEditable(namenodePrincipalText.getEditable() && isCurrentHadoopVersionSupportJobHistoryPrincipal());
keytabBtn.setEnabled(kerberosBtn.isEnabled() && kerberosBtn.getSelection());
keytabPrincipalText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
keytabText.setEditable(keytabBtn.isEnabled() && keytabBtn.getSelection());
groupText.setEditable(isCurrentHadoopVersionSupportGroup());
userNameText.setEditable(!kerberosBtn.getSelection());
if (kerberosBtn.getSelection()) {
hideControl(authNodejtOrRmHistoryComposite,false);
hideControl(authKeytabComposite,false);
}
 else {
hideControl(authNodejtOrRmHistoryComposite,true);
hideControl(authKeytabComposite,true);
}
authCommonComposite.layout();
authCommonComposite.getParent().layout();
hideControl(maprTBtn,!isCurrentHadoopVersionSupportMapRTicket());
maprTBtn.setEnabled(isCurrentHadoopVersionSupportMapRTicket());
maprTPasswordText.setEditable(maprTBtn.isEnabled() && (maprTBtn.getSelection() && !(kerberosBtn.isEnabled() && kerberosBtn.getSelection())));
maprTClusterText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTDurationText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection());
setMaprTHomeDirBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
setHadoopLoginBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
preloadAuthentificationBtn.setEnabled(maprTBtn.isEnabled() && maprTBtn.getSelection());
maprTHomeDirText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setMaprTHomeDirBtn.isEnabled()&& setMaprTHomeDirBtn.getSelection());
maprTHadoopLoginText.setEditable(maprTBtn.isEnabled() && maprTBtn.getSelection() && setHadoopLoginBtn.isEnabled()&& setHadoopLoginBtn.getSelection());
if (maprTBtn.getSelection()) {
hideControl(maprTPCDCompposite,false);
hideControl(maprTSetComposite,false);
}
 else {
hideControl(maprTPCDCompposite,true);
hideControl(maprTSetComposite,true);
}
authMaprTComposite.layout();
authMaprTComposite.getParent().layout();
}
updateMRRelatedContent();
updateConnectionContent();
if (isContextMode()) {
adaptFormToEditable();
}
}",0.9437420252870896
124783,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getJobTracker()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String mrPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",mrPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    Object mapRTicketDuration=serviceProperties.getMaprTDuration();
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.6413251221066044
124784,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object fileSystem=null;
  try {
    Object conf=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
    URI nameNodeURI=URI.create(serviceProperties.getNameNode());
    String scheme=nameNodeURI.getScheme();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{String.format(""String_Node_Str"",scheme),""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    setHadoopProperties(conf,serviceProperties);
    String userName=StringUtils.trimToNull(serviceProperties.getUserName());
    String group=StringUtils.trimToNull(serviceProperties.getGroup());
    boolean useKrb=serviceProperties.isUseKrb();
    boolean useMaprTicket=serviceProperties.isMaprT();
    if (useKrb) {
      String nameNodePrincipal=serviceProperties.getPrincipal();
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",nameNodePrincipal});
      boolean useKeytab=serviceProperties.isUseKeytab();
      if (useKeytab) {
        String keytabPrincipal=serviceProperties.getKeytabPrincipal();
        String keytab=serviceProperties.getKeytab();
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=serviceProperties.getMaprTCluster();
        Object mapRTicketDuration=serviceProperties.getMaprTDuration();
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
 else     if (userName != null && group != null) {
      ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",userName + ""String_Node_Str"" + group});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=serviceProperties.getUserName();
      String mapRTicketPassword=serviceProperties.getMaprTPassword();
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    fileSystem=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{nameNodeURI,conf});
    if (fileSystem != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{""String_Node_Str""});
      ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    }
  }
  finally {
    if (fileSystem != null) {
      try {
        ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return fileSystem;
}",0.68675274988044
124785,"@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}","@Override protected Object check(HadoopServiceProperties serviceProperties,ClassLoader classLoader) throws Exception {
  Object configuration=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
  Object conf=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{configuration});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",serviceProperties.getResourceManager()});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
  setHadoopProperties(conf,serviceProperties);
  boolean useKrb=serviceProperties.isUseKrb();
  boolean useMaprTicket=serviceProperties.isMaprT();
  if (useKrb) {
    String yarnPrincipal=serviceProperties.getJtOrRmPrincipal();
    ReflectionUtils.invokeMethod(conf,""String_Node_Str"",new Object[]{""String_Node_Str"",yarnPrincipal});
    boolean useKeytab=serviceProperties.isUseKeytab();
    if (useKeytab) {
      String keytabPrincipal=serviceProperties.getKeytabPrincipal();
      String keytab=serviceProperties.getKeytab();
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new String[]{keytabPrincipal,keytab});
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketCluster=serviceProperties.getMaprTCluster();
      Object mapRTicketDuration=serviceProperties.getMaprTDuration();
      try {
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
  }
  if (useMaprTicket) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    String mapRTicketUsername=serviceProperties.getUserName();
    String mapRTicketPassword=serviceProperties.getMaprTPassword();
    String mapRTicketCluster=serviceProperties.getMaprTCluster();
    Object mapRTicketDuration=serviceProperties.getMaprTDuration();
    try {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
      ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
    }
 catch (    Exception e) {
      throw new SQLException(e);
    }
  }
  Object jc=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{conf});
  return ReflectionUtils.invokeMethod(jc,""String_Node_Str"",new Object[0]);
}",0.6623158679843372
124786,"public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,DistributionBean distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(confsService != null);
  final DistributionVersion distributionVersion=distribution.getVersion(version,true);
  connection.setDistribution(distribution.name);
  connection.setDfVersion(distributionVersion.version);
  boolean supportYARN=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop2();
  boolean supportMR1=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop1();
  connection.setUseYarn(supportYARN && !supportMR1);
  HCRepositoryUtil.fillDefaultValuesOfHadoopCluster(connection);
  if (confsService == null) {
    return;
  }
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String yarnHostName=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME.getName());
  if (StringUtils.isNotEmpty(yarnHostName)) {
    connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_YARN_HOSTNAME,yarnHostName);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String adminRmIdKey=getAdminRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_ADMIN_ADDRESS_RM_ID.getName());
      if (StringUtils.isNotEmpty(adminRmIdKey)) {
        rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt == null && yarnHostName != null) {
    rmOrJt=replaceHostName(connection.getJobTrackerURI(),yarnHostName);
  }
  connection.setJobTrackerURI(rmOrJt);
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (rms == null) {
    String adminRmIdKey=getAdminRmIdKey(confsService,EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER_ADDRESS_RM_ID.getName());
    if (StringUtils.isNotEmpty(adminRmIdKey)) {
      rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
    }
    if (yarnHostName != null) {
      rms=replaceHostName(connection.getRmScheduler(),yarnHostName);
    }
  }
  connection.setRmScheduler(rms);
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  if (connection.isEnableKerberos()) {
    String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(nnp)) {
      connection.setPrincipal(nnp);
    }
    String rmOrJtPrincipal=null;
    if (supportYARN) {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
    }
 else {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
    }
    if (rmOrJtPrincipal != null) {
      connection.setJtOrRmPrincipal(rmOrJtPrincipal);
    }
    String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(jhp)) {
      connection.setJobHistoryPrincipal(jhp);
    }
  }
}","public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,DistributionBean distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(confsService != null);
  final DistributionVersion distributionVersion=distribution.getVersion(version,true);
  connection.setDistribution(distribution.name);
  connection.setDfVersion(distributionVersion.version);
  boolean supportYARN=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop2();
  boolean supportMR1=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop1();
  connection.setUseYarn(supportYARN && !supportMR1);
  HCRepositoryUtil.fillDefaultValuesOfHadoopCluster(connection);
  if (confsService == null) {
    return;
  }
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String yarnHostName=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME.getName());
  if (StringUtils.isNotEmpty(yarnHostName)) {
    connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_YARN_HOSTNAME,yarnHostName);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_ADDRESS_RM_ID.getName());
      if (StringUtils.isNotEmpty(rmIdKey)) {
        rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
      }
      if (rmOrJt == null) {
        rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME_RM_ID.getName());
        if (StringUtils.isNotEmpty(rmIdKey)) {
          rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
        }
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt == null && yarnHostName != null) {
    rmOrJt=replaceHostName(connection.getJobTrackerURI(),yarnHostName);
  }
  connection.setJobTrackerURI(rmOrJt);
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (rms == null) {
    String rmIdKey=getRmIdKey(confsService,EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER_ADDRESS_RM_ID.getName());
    if (StringUtils.isNotEmpty(rmIdKey)) {
      rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),rmIdKey);
    }
    if (yarnHostName != null) {
      rms=replaceHostName(connection.getRmScheduler(),yarnHostName);
    }
  }
  connection.setRmScheduler(rms);
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  if (connection.isEnableKerberos()) {
    String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(nnp)) {
      connection.setPrincipal(nnp);
    }
    String rmOrJtPrincipal=null;
    if (supportYARN) {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
    }
 else {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
    }
    if (rmOrJtPrincipal != null) {
      connection.setJtOrRmPrincipal(rmOrJtPrincipal);
    }
    String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(jhp)) {
      connection.setJobHistoryPrincipal(jhp);
    }
  }
}",0.9672977624784854
124787,"public HDFSSchemaWizard(IWorkbench workbench,boolean creation,IRepositoryViewObject object,MetadataTable metadataTable,String[] existingNames,boolean forceReadOnly){
  super(workbench,creation,forceReadOnly);
  this.selectedMetadataTable=metadataTable;
  this.connectionItem=(ConnectionItem)object.getProperty().getItem();
  this.existingNames=existingNames;
  if (connectionItem != null) {
    oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,metadataTable,creation);
    oldMetadataTable=RepositoryUpdateManager.getConversionMetadataTables(connectionItem.getConnection());
    cloneBaseHDFSConnection((HDFSConnection)connectionItem.getConnection());
  }
  setNeedsProgressMonitor(true);
  setRepositoryObject(object);
  isRepositoryObjectEditable();
  initLockStrategy();
}","public HDFSSchemaWizard(IWorkbench workbench,boolean creation,IRepositoryViewObject object,MetadataTable metadataTable,String[] existingNames,boolean forceReadOnly){
  super(workbench,creation,forceReadOnly);
  this.selectedMetadataTable=metadataTable;
  this.connectionItem=(ConnectionItem)object.getProperty().getItem();
  this.existingNames=existingNames;
  if (connectionItem != null) {
    oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,metadataTable,creation);
    oldMetadataTable=RepositoryUpdateManager.getConversionMetadataTables(connectionItem.getConnection());
    connection=(HDFSConnection)connectionItem.getConnection();
  }
  setNeedsProgressMonitor(true);
  setRepositoryObject(object);
  isRepositoryObjectEditable();
  initLockStrategy();
}",0.9521410579345088
124788,"@Override public boolean performCancel(){
  if (fileSelectorWizardPage != null) {
    fileSelectorWizardPage.performCancel();
  }
  temConnection=null;
  return super.performCancel();
}","@Override public boolean performCancel(){
  if (fileSelectorWizardPage != null) {
    fileSelectorWizardPage.performCancel();
  }
  connection=null;
  return super.performCancel();
}",0.9863760217983653
124789,"@Override public void addPages(){
  setWindowTitle(""String_Node_Str"");
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_TABLE_WIZ));
  schemaWizardPage=new HDFSSchemaWizardPage(selectedMetadataTable,connectionItem,isRepositoryObjectEditable(),temConnection);
  if (creation) {
    fileSelectorWizardPage=new HDFSFileSelectorWizardPage(connectionItem,isRepositoryObjectEditable(),temConnection);
    fileSelectorWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    fileSelectorWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    fileSelectorWizardPage.setPageComplete(true);
    addPage(fileSelectorWizardPage);
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
 else {
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
}","@Override public void addPages(){
  setWindowTitle(""String_Node_Str"");
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_TABLE_WIZ));
  schemaWizardPage=new HDFSSchemaWizardPage(selectedMetadataTable,connectionItem,isRepositoryObjectEditable(),connection);
  if (creation) {
    fileSelectorWizardPage=new HDFSFileSelectorWizardPage(connectionItem,isRepositoryObjectEditable(),connection);
    fileSelectorWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    fileSelectorWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    fileSelectorWizardPage.setPageComplete(true);
    addPage(fileSelectorWizardPage);
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
 else {
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
}",0.4959935897435897
124790,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  connectionItem.setConnection(temConnection);
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  connection=null;
}",0.896414342629482
124791,"@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        connectionItem.setConnection(temConnection);
        saveMetaData();
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        saveMetaData();
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        connection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9575402635431918
124792,"protected JSONObject loadDefaultConfigurations(){
  JSONObject globalJson=DefaultConfigurationManager.loadDefaultFile(AbstractDistribution.class,getDistribution().toLowerCase());
  if (getVersion() != null) {
    JSONObject versionJson=DefaultConfigurationManager.loadDefaultFile(this.getClass(),getVersion().toLowerCase());
    return JSONUtil.merge(globalJson,versionJson);
  }
  return globalJson;
}","protected JSONObject loadDefaultConfigurations(){
  JSONObject globalJson=DefaultConfigurationManager.loadDefaultFile(AbstractDistribution.class,getDistribution().toLowerCase());
  if (getVersion() != null) {
    JSONObject versionJson=DefaultConfigurationManager.loadDefaultFile(this.getClass(),getVersion().toLowerCase());
    return JSONUtil.merge(versionJson,globalJson);
  }
  return globalJson;
}",0.9676616915422884
124793,"@Override protected void collectConParameters(){
  collectConFieldContextParameters(isCurrentHadoopVersionSupportYarn());
  collectAuthFieldContextParameters(kerberosBtn.getSelection());
  collectKeyTabContextParameters(kerberosBtn.getSelection() && keytabBtn.getSelection());
  collectClouderaNavigatorFieldContextParameters(useClouderaNaviBtn.getSelection());
}","@Override protected void collectConParameters(){
  collectConFieldContextParameters(isCurrentHadoopVersionSupportYarn());
  collectAuthFieldContextParameters(kerberosBtn.getSelection());
  collectKeyTabContextParameters(kerberosBtn.getSelection() && keytabBtn.getSelection());
  if (useClouderaNaviBtn != null) {
    collectClouderaNavigatorFieldContextParameters(useClouderaNaviBtn.getSelection());
  }
}",0.9453125
124794,"protected JSONObject loadDefaultConfigurations(){
  JSONObject globalJson=DefaultConfigurationManager.loadDefaultFile(AbstractDistribution.class,getDistribution().toLowerCase());
  if (getVersion() != null) {
    JSONObject versionJson=DefaultConfigurationManager.loadDefaultFile(this.getClass(),getVersion().toLowerCase());
    return JSONUtil.merge(globalJson,versionJson);
  }
  return globalJson;
}","protected JSONObject loadDefaultConfigurations(){
  JSONObject globalJson=DefaultConfigurationManager.loadDefaultFile(AbstractDistribution.class,getDistribution().toLowerCase());
  if (getVersion() != null) {
    JSONObject versionJson=DefaultConfigurationManager.loadDefaultFile(this.getClass(),getVersion().toLowerCase());
    return JSONUtil.merge(versionJson,globalJson);
  }
  return globalJson;
}",0.9676616915422884
124795,"protected String getDistribution(){
  return IMicrosoftHDInsightDistribution.DISTRIBUTION_NAME;
}","@Override protected String getDistribution(){
  return IMicrosoftHDInsightDistribution.DISTRIBUTION_NAME;
}",0.9509803921568628
124796,"protected String getDistributionDisplay(){
  return IMicrosoftHDInsightDistribution.DISTRIBUTION_DISPLAY_NAME;
}","@Override protected String getDistributionDisplay(){
  return IMicrosoftHDInsightDistribution.DISTRIBUTION_DISPLAY_NAME;
}",0.9572649572649572
124797,"public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,DistributionBean distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(confsService != null);
  final DistributionVersion distributionVersion=distribution.getVersion(version,true);
  connection.setDistribution(distribution.name);
  connection.setDfVersion(distributionVersion.version);
  boolean supportYARN=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop2();
  boolean supportMR1=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop1();
  connection.setUseYarn(supportYARN && !supportMR1);
  HCRepositoryUtil.fillDefaultValuesOfHadoopCluster(connection);
  if (confsService == null) {
    return;
  }
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String yarnHostName=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME.getName());
  if (StringUtils.isNotEmpty(yarnHostName)) {
    connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_YARN_HOSTNAME,yarnHostName);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String rmIds=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_RM_IDS.getName());
      if (rmIds != null) {
        String[] rmIdsArray=rmIds.split(""String_Node_Str"");
        if (rmIdsArray.length > 0) {
          String rmId=rmIdsArray[0];
          String adminRmIdKey=String.format(EHadoopConfProperties.YARN_RESOURCEMANAGER_ADMIN_ADDRESS_RM_ID.getName(),rmId);
          rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
        }
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt == null && yarnHostName != null) {
    rmOrJt=replaceHostName(connection.getJobTrackerURI(),yarnHostName);
  }
  connection.setJobTrackerURI(rmOrJt);
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (rms == null && yarnHostName != null) {
    rms=replaceHostName(connection.getRmScheduler(),yarnHostName);
  }
  connection.setRmScheduler(rms);
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  if (connection.isEnableKerberos()) {
    String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(nnp)) {
      connection.setPrincipal(nnp);
    }
    String rmOrJtPrincipal=null;
    if (supportYARN) {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
    }
 else {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
    }
    if (rmOrJtPrincipal != null) {
      connection.setJtOrRmPrincipal(rmOrJtPrincipal);
    }
    String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(jhp)) {
      connection.setJobHistoryPrincipal(jhp);
    }
  }
}","public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,DistributionBean distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(confsService != null);
  final DistributionVersion distributionVersion=distribution.getVersion(version,true);
  connection.setDistribution(distribution.name);
  connection.setDfVersion(distributionVersion.version);
  boolean supportYARN=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop2();
  boolean supportMR1=distributionVersion.hadoopComponent != null && distributionVersion.hadoopComponent.isHadoop1();
  connection.setUseYarn(supportYARN && !supportMR1);
  HCRepositoryUtil.fillDefaultValuesOfHadoopCluster(connection);
  if (confsService == null) {
    return;
  }
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String yarnHostName=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HOSTNAME.getName());
  if (StringUtils.isNotEmpty(yarnHostName)) {
    connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_YARN_HOSTNAME,yarnHostName);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String adminRmIdKey=getAdminRmIdKey(confsService,EHadoopConfProperties.YARN_RESOURCEMANAGER_ADMIN_ADDRESS_RM_ID.getName());
      if (StringUtils.isNotEmpty(adminRmIdKey)) {
        rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt == null && yarnHostName != null) {
    rmOrJt=replaceHostName(connection.getJobTrackerURI(),yarnHostName);
  }
  connection.setJobTrackerURI(rmOrJt);
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (rms == null) {
    String adminRmIdKey=getAdminRmIdKey(confsService,EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER_ADDRESS_RM_ID.getName());
    if (StringUtils.isNotEmpty(adminRmIdKey)) {
      rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
    }
    if (yarnHostName != null) {
      rms=replaceHostName(connection.getRmScheduler(),yarnHostName);
    }
  }
  connection.setRmScheduler(rms);
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  if (connection.isEnableKerberos()) {
    String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(nnp)) {
      connection.setPrincipal(nnp);
    }
    String rmOrJtPrincipal=null;
    if (supportYARN) {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
    }
 else {
      rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
    }
    if (rmOrJtPrincipal != null) {
      connection.setJtOrRmPrincipal(rmOrJtPrincipal);
    }
    String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(jhp)) {
      connection.setJobHistoryPrincipal(jhp);
    }
  }
}",0.9175409353858222
124798,"@Override protected void collectConParameters(){
  collectConFieldContextParameters(isCurrentHadoopVersionSupportYarn());
  collectAuthFieldContextParameters(kerberosBtn.getSelection());
  collectKeyTabContextParameters(kerberosBtn.getSelection() && keytabBtn.getSelection());
}","@Override protected void collectConParameters(){
  collectConFieldContextParameters(isCurrentHadoopVersionSupportYarn());
  collectAuthFieldContextParameters(kerberosBtn.getSelection());
  collectKeyTabContextParameters(kerberosBtn.getSelection() && keytabBtn.getSelection());
  collectClouderaNavigatorFieldContextParameters(useClouderaNaviBtn.getSelection());
}",0.8673946957878315
124799,"private void addNavigatorFields(Composite parent){
  Group naviGroup=Form.createGroup(parent,1,Messages.getString(""String_Node_Str""),110);
  naviGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviPartComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  naviPartComposite.setLayout(authPartLayout);
  naviPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviCommonComposite=new Composite(naviPartComposite,SWT.NULL);
  GridLayout naviCommonCompLayout=new GridLayout(4,false);
  naviCommonCompLayout.marginWidth=0;
  naviCommonCompLayout.marginHeight=0;
  naviCommonComposite.setLayout(naviCommonCompLayout);
  naviCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_usernameText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_passwordText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_metatata_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_client_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  Composite naviKeytabComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout naviKeytabCompLayout=new GridLayout(2,false);
  naviKeytabCompLayout.marginWidth=0;
  naviKeytabCompLayout.marginHeight=0;
  naviKeytabComposite.setLayout(naviKeytabCompLayout);
  naviKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_autocommitBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_autocommitBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_autocommitBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_disable_sslBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_disable_sslBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_disable_sslBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_die_on_errorBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_die_on_errorBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn.setSelection(true);
}","private void addNavigatorFields(Composite parent){
  Group naviGroup=Form.createGroup(parent,1,Messages.getString(""String_Node_Str""),110);
  naviGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviPartComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout authPartLayout=new GridLayout(1,false);
  authPartLayout.marginWidth=0;
  authPartLayout.marginHeight=0;
  naviPartComposite.setLayout(authPartLayout);
  naviPartComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite naviCommonComposite=new Composite(naviPartComposite,SWT.NULL);
  GridLayout naviCommonCompLayout=new GridLayout(4,false);
  naviCommonCompLayout.marginWidth=0;
  naviCommonCompLayout.marginHeight=0;
  naviCommonComposite.setLayout(naviCommonCompLayout);
  naviCommonComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_usernameText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_passwordText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1,SWT.PASSWORD);
  navigator_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_metatata_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  navigator_client_urlText=new LabelledText(naviCommonComposite,Messages.getString(""String_Node_Str""),1);
  Composite naviKeytabComposite=new Composite(naviGroup,SWT.NULL);
  GridLayout naviKeytabCompLayout=new GridLayout(2,false);
  naviKeytabCompLayout.marginWidth=0;
  naviKeytabCompLayout.marginHeight=0;
  naviKeytabComposite.setLayout(naviKeytabCompLayout);
  naviKeytabComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  navigator_autocommitBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_autocommitBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_autocommitBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_disable_sslBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_disable_sslBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_disable_sslBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn=new Button(naviKeytabComposite,SWT.CHECK);
  navigator_die_on_errorBtn.setText(Messages.getString(""String_Node_Str""));
  navigator_die_on_errorBtn.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  navigator_die_on_errorBtn.setSelection(true);
}",0.9973753280839897
124800,"@Override public void revertPropertiesForContextMode(Connection hadoopConn,ContextType contextType){
  if (hadoopConn instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)hadoopConn;
    String nameNodeUri=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getNameNodeURI()));
    String jobTrackerUri=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getJobTrackerURI()));
    String rmScheduler=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getRmScheduler()));
    String jobHistory=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getJobHistory()));
    String stagingDir=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getStagingDirectory()));
    String nameNodePrin=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getPrincipal()));
    String jtOrRmPrin=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getValue(conn.getJtOrRmPrincipal(),false)));
    String jobHisPrin=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getJobHistoryPrincipal()));
    String userName=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getUserName()));
    String group=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getGroup()));
    String principal=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getKeytabPrincipal()));
    String keyTab=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getKeytab()));
    for (    String paramKey : ((HadoopClusterConnection)hadoopConn).getParameters().keySet()) {
      String originalValue=ContextParameterUtils.getOriginalValue(contextType,conn.getParameters().get(paramKey));
      conn.getParameters().put(paramKey,originalValue);
    }
    String hadoopProperties=conn.getHadoopProperties();
    List<Map<String,Object>> propertiesAfterRevert=transformContextModeToHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties),contextType);
    conn.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesJsonStr(propertiesAfterRevert));
    conn.setNameNodeURI(nameNodeUri);
    conn.setJobTrackerURI(jobTrackerUri);
    conn.setRmScheduler(rmScheduler);
    conn.setJobHistory(jobHistory);
    conn.setStagingDirectory(stagingDir);
    conn.setPrincipal(nameNodePrin);
    conn.setJtOrRmPrincipal(jtOrRmPrin);
    conn.setJobHistoryPrincipal(jobHisPrin);
    conn.setUserName(userName);
    conn.setGroup(group);
    conn.setKeytab(keyTab);
    conn.setKeytabPrincipal(principal);
  }
}","@Override public void revertPropertiesForContextMode(Connection hadoopConn,ContextType contextType){
  if (hadoopConn instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)hadoopConn;
    String nameNodeUri=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getNameNodeURI()));
    String jobTrackerUri=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getJobTrackerURI()));
    String rmScheduler=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getRmScheduler()));
    String jobHistory=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getJobHistory()));
    String stagingDir=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getStagingDirectory()));
    String nameNodePrin=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getPrincipal()));
    String jtOrRmPrin=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getValue(conn.getJtOrRmPrincipal(),false)));
    String jobHisPrin=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getJobHistoryPrincipal()));
    String userName=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getUserName()));
    String group=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getGroup()));
    String principal=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getKeytabPrincipal()));
    String keyTab=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getKeytab()));
    String cnUserName=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getClouderaNaviUserName()));
    String cnPassword=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getClouderaNaviPassword()));
    String cnUrl=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getClouderaNaviUrl()));
    String cnMetadataUrl=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getClouderaNaviMetadataUrl()));
    String cnClientUrl=TalendQuoteUtils.removeQuotes(ContextParameterUtils.getOriginalValue(contextType,conn.getClouderaNaviClientUrl()));
    for (    String paramKey : ((HadoopClusterConnection)hadoopConn).getParameters().keySet()) {
      String originalValue=ContextParameterUtils.getOriginalValue(contextType,conn.getParameters().get(paramKey));
      conn.getParameters().put(paramKey,originalValue);
    }
    String hadoopProperties=conn.getHadoopProperties();
    List<Map<String,Object>> propertiesAfterRevert=transformContextModeToHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties),contextType);
    conn.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesJsonStr(propertiesAfterRevert));
    conn.setNameNodeURI(nameNodeUri);
    conn.setJobTrackerURI(jobTrackerUri);
    conn.setRmScheduler(rmScheduler);
    conn.setJobHistory(jobHistory);
    conn.setStagingDirectory(stagingDir);
    conn.setPrincipal(nameNodePrin);
    conn.setJtOrRmPrincipal(jtOrRmPrin);
    conn.setJobHistoryPrincipal(jobHisPrin);
    conn.setUserName(userName);
    conn.setGroup(group);
    conn.setKeytab(keyTab);
    conn.setKeytabPrincipal(principal);
    conn.setClouderaNaviUserName(cnUserName);
    conn.setClouderaNaviPassword(cnPassword);
    conn.setClouderaNaviUrl(cnUrl);
    conn.setClouderaNaviMetadataUrl(cnMetadataUrl);
    conn.setClouderaNaviClientUrl(cnClientUrl);
  }
}",0.861487000152045
124801,"@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}","@Override public List<IContextParameter> createContextParameters(String prefixName,Connection connection,Set<IConnParamName> paramSet){
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  if (connection instanceof HadoopClusterConnection) {
    HadoopClusterConnection conn=(HadoopClusterConnection)connection;
    String paramPrefix=prefixName + ConnectionContextHelper.LINE;
    String paramName=null;
    for (    IConnParamName param : paramSet) {
      if (param instanceof EHadoopParamName) {
        EHadoopParamName hadoopParam=(EHadoopParamName)param;
        paramName=paramPrefix + hadoopParam;
switch (hadoopParam) {
case NameNodeUri:
          ConnectionContextHelper.createParameters(varList,paramName,conn.getNameNodeURI());
        break;
case JobTrackerUri:
      ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
    break;
case ResourceManager:
  ConnectionContextHelper.createParameters(varList,paramName,conn.getJobTrackerURI());
break;
case ResourceManagerScheduler:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRmScheduler());
break;
case JobHistory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistory());
break;
case StagingDirectory:
ConnectionContextHelper.createParameters(varList,paramName,conn.getStagingDirectory());
break;
case NameNodePrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPrincipal());
break;
case JTOrRMPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJtOrRmPrincipal());
break;
case JobHistroyPrin:
ConnectionContextHelper.createParameters(varList,paramName,conn.getJobHistoryPrincipal());
break;
case User:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUserName());
break;
case Group:
ConnectionContextHelper.createParameters(varList,paramName,conn.getGroup());
break;
case Principal:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytabPrincipal());
break;
case KeyTab:
ConnectionContextHelper.createParameters(varList,paramName,conn.getKeytab());
break;
case WebHostName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
break;
case WebPort:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT));
break;
case WebUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
break;
case WebJobResFolder:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
break;
case HDIUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
break;
case HDIPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureHost:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
break;
case KeyAzureContainer:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
break;
case KeyAzuresUser:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
break;
case KeyAzurePassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD),JavaTypesManager.PASSWORD);
break;
case KeyAzureDeployBlob:
ConnectionContextHelper.createParameters(varList,paramName,conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
break;
case ClouderaNavigatorUsername:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUserName());
break;
case ClouderaNavigatorPassword:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviPassword());
break;
case ClouderaNavigatorUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviUrl());
break;
case ClouderaNavigatorMetadataUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviMetadataUrl());
break;
case ClouderaNavigatorClientUrl:
ConnectionContextHelper.createParameters(varList,paramName,conn.getClouderaNaviClientUrl());
break;
default :
}
}
}
createHadoopPropertiesContextVariable(prefixName,varList,conn.getHadoopProperties());
}
return varList;
}",0.9253799565763912
124802,"@Override protected void matchContextForAttribues(Connection conn,IConnParamName paramName,String hadoopVariableName){
  HadoopClusterConnection hadoopConn=(HadoopClusterConnection)conn;
  EHadoopParamName hadoopParam=(EHadoopParamName)paramName;
switch (hadoopParam) {
case NameNodeUri:
    hadoopConn.setNameNodeURI(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
  break;
case JobTrackerUri:
hadoopConn.setJobTrackerURI(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ResourceManager:
hadoopConn.setJobTrackerURI(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ResourceManagerScheduler:
hadoopConn.setRmScheduler(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case JobHistory:
hadoopConn.setJobHistory(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case StagingDirectory:
hadoopConn.setStagingDirectory(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case NameNodePrin:
hadoopConn.setPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case JTOrRMPrin:
hadoopConn.setJtOrRmPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case JobHistroyPrin:
hadoopConn.setJobHistoryPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case User:
hadoopConn.setUserName(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case Group:
hadoopConn.setGroup(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case Principal:
hadoopConn.setKeytabPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyTab:
hadoopConn.setKeytab(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebHostName:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebPort:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebUser:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebJobResFolder:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case HDIUser:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case HDIPassword:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzureHost:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzureContainer:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzuresUser:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzurePassword:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzureDeployBlob:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
default :
}
}","@Override protected void matchContextForAttribues(Connection conn,IConnParamName paramName,String hadoopVariableName){
  HadoopClusterConnection hadoopConn=(HadoopClusterConnection)conn;
  EHadoopParamName hadoopParam=(EHadoopParamName)paramName;
switch (hadoopParam) {
case NameNodeUri:
    hadoopConn.setNameNodeURI(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
  break;
case JobTrackerUri:
hadoopConn.setJobTrackerURI(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ResourceManager:
hadoopConn.setJobTrackerURI(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ResourceManagerScheduler:
hadoopConn.setRmScheduler(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case JobHistory:
hadoopConn.setJobHistory(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case StagingDirectory:
hadoopConn.setStagingDirectory(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case NameNodePrin:
hadoopConn.setPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case JTOrRMPrin:
hadoopConn.setJtOrRmPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case JobHistroyPrin:
hadoopConn.setJobHistoryPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case User:
hadoopConn.setUserName(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case Group:
hadoopConn.setGroup(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case Principal:
hadoopConn.setKeytabPrincipal(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyTab:
hadoopConn.setKeytab(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebHostName:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebPort:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebUser:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case WebJobResFolder:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case HDIUser:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case HDIPassword:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzureHost:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzureContainer:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzuresUser:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzurePassword:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case KeyAzureDeployBlob:
hadoopConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB,ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ClouderaNavigatorUsername:
hadoopConn.setClouderaNaviUserName(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ClouderaNavigatorPassword:
hadoopConn.setClouderaNaviPassword(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ClouderaNavigatorUrl:
hadoopConn.setClouderaNaviUrl(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ClouderaNavigatorMetadataUrl:
hadoopConn.setClouderaNaviMetadataUrl(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
case ClouderaNavigatorClientUrl:
hadoopConn.setClouderaNaviClientUrl(ContextParameterUtils.getNewScriptCode(hadoopVariableName,LANGUAGE));
break;
default :
}
}",0.9138675623800384
124803,"private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
  return null;
}","private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUserName(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviPassword(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviMetadataUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviClientUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviAutoCommit(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDisableSSL(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDieOnError(connection);
  }
  return null;
}",0.8482031703875841
124804,"private Object getHDFSRepositoryValue(HDFSConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.HEADER.getRepositoryValue().equals(value)) {
    return StringUtils.trimToNull(connection.getHeaderValue());
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHDFSRepositoryToComponent.FIELD_SEPARATOR_CHAR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
  return null;
}","private Object getHDFSRepositoryValue(HDFSConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.HEADER.getRepositoryValue().equals(value)) {
    return StringUtils.trimToNull(connection.getHeaderValue());
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHDFSRepositoryToComponent.FIELD_SEPARATOR_CHAR.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),true);
  }
 else   if (EHDFSRepositoryToComponent.SET_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.RESOURCEMANAGER_SCHEDULER_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getRmScheduler()));
  }
 else   if (EHDFSRepositoryToComponent.SET_JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_ADDRESS.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getJobHistory()));
  }
 else   if (EHDFSRepositoryToComponent.SET_STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.STAGING_DIRECTORY.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(hcConnection,StringUtils.trimToNull(hcConnection.getStagingDirectory()));
  }
 else   if (EHDFSRepositoryToComponent.USE_DATANODE_HOSTNAME.getRepositoryValue().equals(value)) {
    return hcConnection.isUseDNHost();
  }
 else   if (EHDFSRepositoryToComponent.USE_CLOUDERA_NAVIGATOR.getRepositoryValue().equals(value)) {
    return hcConnection.isUseClouderaNavi();
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_USERNAME.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUserName(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_PASSWORD.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviPassword(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_METADATA_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviMetadataUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_CLIENT_URL.getRepositoryValue().equals(value)) {
    return getRepositoryValueOfStringType(connection,HadoopRepositoryUtil.getClouderaNaviClientUrl(connection));
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_AUTOCOMMIT.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviAutoCommit(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DISABLE_SSL_VALIDATION.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDisableSSL(connection);
  }
 else   if (EHDFSRepositoryToComponent.CLOUDERA_NAVIGATOR_DIE_ON_ERROR.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.clouderaNaviDieOnError(connection);
  }
  return null;
}",0.8710973289167665
124805,"public void addCondition(ComponentCondition c){
  if (c != null) {
    conditions.add(c);
  }
}","public void addCondition(ComponentCondition c){
  conditions.add(c);
}",0.8484848484848485
124806,"@Override public boolean doSupportEmbeddedMode(){
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  return super.doSupportEmbeddedMode();
}",0.7338709677419355
124807,"@Override public boolean doSupportEmbeddedMode(){
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  return super.doSupportEmbeddedMode();
}",0.7338709677419355
124808,"@Override public boolean doSupportEmbeddedMode(){
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  return super.doSupportEmbeddedMode();
}",0.7338709677419355
124809,"@Override public boolean doSupportEmbeddedMode(){
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  return super.doSupportEmbeddedMode();
}",0.7338709677419355
124810,"@Override public boolean doSupportEmbeddedMode(){
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  return super.doSupportEmbeddedMode();
}",0.7338709677419355
124811,"@Override public boolean doSupportEmbeddedMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}",0.8235294117647058
124812,"@Override public boolean doSupportEmbeddedMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}",0.8235294117647058
124813,"@Override public boolean doSupportEmbeddedMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}",0.8235294117647058
124814,"@Override public boolean doSupportStandaloneMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportStandaloneMode();
}","@Override public boolean doSupportStandaloneMode(){
  if (PluginChecker.isOnlyTopLoaded()) {
    return false;
  }
  return super.doSupportStandaloneMode();
}",0.8272251308900523
124815,"@Override public boolean doSupportEmbeddedMode(){
  if (EnvironmentUtils.isWindowsSystem()) {
    return false;
  }
  return super.doSupportEmbeddedMode();
}","@Override public boolean doSupportEmbeddedMode(){
  return super.doSupportEmbeddedMode();
}",0.7338709677419355
124816,"/** 
 * Execute a methode for a given distribution and version. This function must return a booelan
 * @param methodName the name of the method
 * @param distribution the name of the distribution
 * @param version the name of the version
 * @return
 * @throws Exception
 */
public static boolean executeBooleanMethod(String methodName,String distribution,String version) throws Exception {
  HadoopComponent distrib=DistributionFactory.buildDistribution(distribution,version);
  try {
    java.lang.reflect.Method m=distrib.getClass().getMethod(methodName,new Class<?>[0]);
    return (Boolean)m.invoke(distrib,new Object[0]);
  }
 catch (  NoSuchMethodException e) {
    throw new Exception(""String_Node_Str"" + distribution + ""String_Node_Str""+ version+ ""String_Node_Str"");
  }
}","/** 
 * Execute a methode for a given distribution and version. This function must return a booelan
 * @param methodName the name of the method
 * @param distribution the name of the distribution
 * @param version the name of the version
 * @return
 * @throws Exception
 */
public static boolean executeBooleanMethod(String methodName,String distribution,String version) throws Exception {
  HadoopComponent hadoopComponent=DistributionFactory.buildDistribution(distribution,version);
  return DistributionHelper.doSupportMethod(hadoopComponent,methodName);
}",0.7378640776699029
124817,"/** 
 * @return true if the distribution does support the Hive1 version in Stadalone mode. This method is made forHortonworks distribution that doesn't support it.
 */
public boolean doSupportHive1Standalone();","/** 
 * @return true if the distribution does support the Hive1 version in standalone mode. This method is made forHortonworks distribution that doesn't support it.
 */
public boolean doSupportHive1Standalone();",0.9833729216152018
124818,"public static Map<String,Boolean> doSupportMethods(IHDistributionVersion distributionVersion,String... methods){
  Map<String,Boolean> resultsMap=new HashMap<String,Boolean>();
  if (distributionVersion instanceof DistributionVersion && methods != null && methods.length > 0) {
    HadoopComponent dadoopComponent=((DistributionVersion)distributionVersion).hadoopComponent;
    if (dadoopComponent != null) {
      for (      String m : methods) {
        Method method=findMethod(dadoopComponent.getClass(),m);
        if (method != null) {
          try {
            method.setAccessible(true);
            Object is=method.invoke(dadoopComponent);
            if (is instanceof Boolean) {
              resultsMap.put(m,((Boolean)is));
            }
          }
 catch (          SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
          }
        }
      }
    }
  }
  return resultsMap;
}","public static Map<String,Boolean> doSupportMethods(HadoopComponent hadoopComponent,String... methods) throws Exception {
  Map<String,Boolean> resultsMap=new HashMap<String,Boolean>();
  if (hadoopComponent != null) {
    for (    String m : methods) {
      Method method=findMethod(hadoopComponent.getClass(),m);
      if (method != null) {
        try {
          method.setAccessible(true);
          Object is=method.invoke(hadoopComponent);
          if (is instanceof Boolean) {
            resultsMap.put(m,((Boolean)is));
          }
        }
 catch (        SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
        }
      }
 else {
        throw new NoSuchMethodException(""String_Node_Str"" + hadoopComponent.getDistributionName() + ""String_Node_Str""+ hadoopComponent.getVersion()+ ""String_Node_Str"");
      }
    }
  }
  return resultsMap;
}",0.5683297180043384
124819,"@Override public Map<String,Boolean> doSupportMethods(IHDistributionVersion distributionVersion,String... methods){
  return DistributionHelper.doSupportMethods(distributionVersion,methods);
}","@Override public Map<String,Boolean> doSupportMethods(IHDistributionVersion distributionVersion,String... methods) throws Exception {
  return DistributionHelper.doSupportMethods(distributionVersion,methods);
}",0.9552238805970148
124820,"protected void doTestGetHiveServersDisplay(String hiveVersion,String hiveMode,String[] serverArr){
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(getDistribution(),hiveVersion,hiveMode,false);
  doTestArray(""String_Node_Str"",serverArr,hiveServersDisplay);
}","protected void doTestGetHiveServersDisplay(String hiveVersion,String[] serverArr){
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(getDistribution(),hiveVersion,false);
  doTestArray(""String_Node_Str"",serverArr,hiveServersDisplay);
}",0.9534450651769087
124821,"protected void doTestGetHiveModesDisplay(String hiveVersion,String[] modeArr){
  if (PluginChecker.isOnlyTopLoaded() && ArrayUtils.contains(modeArr,HiveModeInfo.EMBEDDED.getDisplayName())) {
    modeArr=ArrayUtils.removeElement(modeArr,HiveModeInfo.EMBEDDED.getDisplayName());
  }
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(getDistribution(),hiveVersion,false);
  doTestArray(""String_Node_Str"",modeArr,hiveModesDisplay);
}","protected void doTestGetHiveModesDisplay(String hiveVersion,String hiveServer,String[] modeArr){
  if (PluginChecker.isOnlyTopLoaded() && ArrayUtils.contains(modeArr,HiveModeInfo.EMBEDDED.getDisplayName())) {
    modeArr=ArrayUtils.removeElement(modeArr,HiveModeInfo.EMBEDDED.getDisplayName());
  }
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(getDistribution(),hiveVersion,hiveServer,false);
  doTestArray(""String_Node_Str"",modeArr,hiveModesDisplay);
}",0.968512486427796
124822,"public static Set<DistributionModuleGroup> getModuleGroups(){
  Set<DistributionModuleGroup> hs=new HashSet<>();
  return hs;
}","public static Set<DistributionModuleGroup> getModuleGroups(){
  Set<DistributionModuleGroup> hs=new HashSet<>();
  hs.add(new DistributionModuleGroup(CDH550Constant.HDFS_MODULE_GROUP.getModuleName()));
  return hs;
}",0.6880466472303207
124823,"private void updatePortDecoration(){
  if (portWarningDecorator == null) {
    Image fieldDecorationWarningImage=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_WARNING).getImage();
    portWarningDecorator=new ControlDecoration(portText.getTextControl(),SWT.RIGHT | SWT.CENTER);
    portWarningDecorator.setMarginWidth(1);
    portWarningDecorator.setImage(fieldDecorationWarningImage);
    portWarningDecorator.setDescriptionText(Messages.getString(""String_Node_Str""));
  }
  if (CassandraConnectionUtil.isOldVersion(getConnection())) {
    portWarningDecorator.hide();
  }
 else {
    portWarningDecorator.show();
  }
  String dbVersion=getConnection().getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  if (ICassandraConstants.DBVERSIONS[0].equals(dbVersion)) {
    if (ICassandraConstants.API_TYPES[0].equals(repositoryTranslator.getLabel(apiTypeCombo.getText()))) {
      portText.setText(ICassandraConstants.DATASTAX_PORT);
    }
 else {
      portText.setText(ICassandraConstants.DEFAULT_PORT);
    }
  }
}","private void updatePortDecoration(){
  if (portWarningDecorator == null) {
    Image fieldDecorationWarningImage=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_WARNING).getImage();
    portWarningDecorator=new ControlDecoration(portText.getTextControl(),SWT.RIGHT | SWT.CENTER);
    portWarningDecorator.setMarginWidth(1);
    portWarningDecorator.setImage(fieldDecorationWarningImage);
    portWarningDecorator.setDescriptionText(Messages.getString(""String_Node_Str""));
  }
  if (CassandraConnectionUtil.isOldVersion(getConnection())) {
    portWarningDecorator.hide();
  }
 else {
    portWarningDecorator.show();
  }
  String dbVersion=getConnection().getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  if (ICassandraConstants.DBVERSIONS[0].equals(dbVersion)) {
    if (ICassandraConstants.API_TYPES[0].equals(repositoryTranslator.getLabel(apiTypeCombo.getText()))) {
      portText.setText(ICassandraConstants.DATASTAX_PORT);
    }
 else {
      portText.setText(ICassandraConstants.DEFAULT_PORT);
    }
  }
 else {
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
}",0.9688359303391384
124824,"@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}","@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}",0.9961663226186964
124825,"private void updatePortDecoration(){
  if (portWarningDecorator == null) {
    Image fieldDecorationWarningImage=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_WARNING).getImage();
    portWarningDecorator=new ControlDecoration(portText.getTextControl(),SWT.RIGHT | SWT.CENTER);
    portWarningDecorator.setMarginWidth(1);
    portWarningDecorator.setImage(fieldDecorationWarningImage);
    portWarningDecorator.setDescriptionText(Messages.getString(""String_Node_Str""));
  }
  if (CassandraConnectionUtil.isOldVersion(getConnection())) {
    portWarningDecorator.hide();
  }
 else {
    portWarningDecorator.show();
  }
  String dbVersion=getConnection().getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  if (ICassandraConstants.DBVERSIONS[0].equals(dbVersion)) {
    if (ICassandraConstants.API_TYPES[0].equals(repositoryTranslator.getLabel(apiTypeCombo.getText()))) {
      portText.setText(ICassandraConstants.DATASTAX_PORT);
    }
 else {
      portText.setText(ICassandraConstants.DEFAULT_PORT);
    }
  }
}","private void updatePortDecoration(){
  if (portWarningDecorator == null) {
    Image fieldDecorationWarningImage=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_WARNING).getImage();
    portWarningDecorator=new ControlDecoration(portText.getTextControl(),SWT.RIGHT | SWT.CENTER);
    portWarningDecorator.setMarginWidth(1);
    portWarningDecorator.setImage(fieldDecorationWarningImage);
    portWarningDecorator.setDescriptionText(Messages.getString(""String_Node_Str""));
  }
  if (CassandraConnectionUtil.isOldVersion(getConnection())) {
    portWarningDecorator.hide();
  }
 else {
    portWarningDecorator.show();
  }
  String dbVersion=getConnection().getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  if (ICassandraConstants.DBVERSIONS[0].equals(dbVersion)) {
    if (ICassandraConstants.API_TYPES[0].equals(repositoryTranslator.getLabel(apiTypeCombo.getText()))) {
      portText.setText(ICassandraConstants.DATASTAX_PORT);
    }
 else {
      portText.setText(ICassandraConstants.DEFAULT_PORT);
    }
  }
 else {
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
}",0.9688359303391384
124826,"@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}","@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}",0.9961663226186964
124827,"@Override public void widgetSelected(SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    try {
      TreeItem item=(TreeItem)e.item;
      boolean checked=item.getChecked();
      retrieving(item,checked);
    }
 catch (    Exception exception) {
      ExceptionHandler.process(exception);
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  super.widgetSelected(e);
  parentWizardPage.setPageComplete(false);
}",0.4
124828,"@Override public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    setPageComplete(isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}","@Override public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    setPageComplete(!isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}",0.9984447900466564
124829,"@Override public void createControl(final Composite parent){
  NoSQLConnection connection=(NoSQLConnection)connectionItem.getConnection();
  String dbType=connection.getDbType();
  IWizardPageProvider wizPageProvider=NoSQLRepositoryFactory.getInstance().getWizardPageProvider(dbType);
  if (wizPageProvider == null) {
    return;
  }
  retrieveSchemaForm=wizPageProvider.createRetrieveSchemaForm(parent,connectionItem,creation,this);
  if (retrieveSchemaForm == null) {
    return;
  }
  retrieveSchemaForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    @Override public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        setPageComplete(isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  retrieveSchemaForm.setListener(listener);
  setControl(retrieveSchemaForm);
  if (StringUtils.isNotEmpty(connectionItem.getProperty().getLabel())) {
    retrieveSchemaForm.checkFieldsValue();
  }
}","@Override public void createControl(final Composite parent){
  NoSQLConnection connection=(NoSQLConnection)connectionItem.getConnection();
  String dbType=connection.getDbType();
  IWizardPageProvider wizPageProvider=NoSQLRepositoryFactory.getInstance().getWizardPageProvider(dbType);
  if (wizPageProvider == null) {
    return;
  }
  retrieveSchemaForm=wizPageProvider.createRetrieveSchemaForm(parent,connectionItem,creation,this);
  if (retrieveSchemaForm == null) {
    return;
  }
  retrieveSchemaForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    @Override public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        setPageComplete(!isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  retrieveSchemaForm.setListener(listener);
  setControl(retrieveSchemaForm);
  if (StringUtils.isNotEmpty(connectionItem.getProperty().getLabel())) {
    retrieveSchemaForm.checkFieldsValue();
  }
}",0.9995814148179154
124830,"@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}","@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}",0.9961663226186964
124831,"@Override public void widgetSelected(SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    try {
      TreeItem item=(TreeItem)e.item;
      boolean checked=item.getChecked();
      retrieving(item,checked);
    }
 catch (    Exception exception) {
      ExceptionHandler.process(exception);
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  super.widgetSelected(e);
  parentWizardPage.setPageComplete(false);
}",0.4
124832,"@Override public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    setPageComplete(isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}","@Override public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    setPageComplete(!isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}",0.9984447900466564
124833,"@Override public void createControl(final Composite parent){
  NoSQLConnection connection=(NoSQLConnection)connectionItem.getConnection();
  String dbType=connection.getDbType();
  IWizardPageProvider wizPageProvider=NoSQLRepositoryFactory.getInstance().getWizardPageProvider(dbType);
  if (wizPageProvider == null) {
    return;
  }
  retrieveSchemaForm=wizPageProvider.createRetrieveSchemaForm(parent,connectionItem,creation,this);
  if (retrieveSchemaForm == null) {
    return;
  }
  retrieveSchemaForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    @Override public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        setPageComplete(isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  retrieveSchemaForm.setListener(listener);
  setControl(retrieveSchemaForm);
  if (StringUtils.isNotEmpty(connectionItem.getProperty().getLabel())) {
    retrieveSchemaForm.checkFieldsValue();
  }
}","@Override public void createControl(final Composite parent){
  NoSQLConnection connection=(NoSQLConnection)connectionItem.getConnection();
  String dbType=connection.getDbType();
  IWizardPageProvider wizPageProvider=NoSQLRepositoryFactory.getInstance().getWizardPageProvider(dbType);
  if (wizPageProvider == null) {
    return;
  }
  retrieveSchemaForm=wizPageProvider.createRetrieveSchemaForm(parent,connectionItem,creation,this);
  if (retrieveSchemaForm == null) {
    return;
  }
  retrieveSchemaForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    @Override public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        setPageComplete(!isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  retrieveSchemaForm.setListener(listener);
  setControl(retrieveSchemaForm);
  if (StringUtils.isNotEmpty(connectionItem.getProperty().getLabel())) {
    retrieveSchemaForm.checkFieldsValue();
  }
}",0.9995814148179154
124834,"@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DATASTAX_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}","@Override protected void initializeFields(){
  NoSQLConnection conn=getConnection();
  String dbVersion=conn.getAttributes().get(INoSQLCommonAttributes.DB_VERSION);
  String apiType=conn.getAttributes().get(INoSQLCommonAttributes.API_TYPE);
  String server=conn.getAttributes().get(INoSQLCommonAttributes.HOST);
  String port=conn.getAttributes().get(INoSQLCommonAttributes.PORT);
  String database=conn.getAttributes().get(INoSQLCommonAttributes.DATABASE);
  String user=conn.getAttributes().get(INoSQLCommonAttributes.USERNAME);
  String passwd=conn.getValue(conn.getAttributes().get(INoSQLCommonAttributes.PASSWORD),false);
  Boolean isUseRequireAuth=Boolean.parseBoolean(conn.getAttributes().get(INoSQLCommonAttributes.REQUIRED_AUTHENTICATION));
  if (validText(dbVersion)) {
    dbVersionCombo.setText(repositoryTranslator.getLabel(dbVersion));
  }
 else {
    dbVersionCombo.select(0);
    if (apiTypeCombo != null && !apiTypeCombo.getCombo().isDisposed()) {
      apiTypeCombo.setHideWidgets(false);
    }
  }
  portText.setText(port == null ? ICassandraConstants.DEFAULT_PORT : port);
  if (validText(apiType)) {
    apiTypeCombo.setText(repositoryTranslator.getLabel(apiType));
  }
 else {
    apiTypeCombo.select(0);
    portText.setText(ICassandraConstants.DEFAULT_PORT);
  }
  serverText.setText(server == null ? ICassandraConstants.DEFAULT_HOST : server);
  databaseText.setText(database == null ? ""String_Node_Str"" : database);
  checkRequireAuthBtn.setSelection(isUseRequireAuth);
  if (checkRequireAuthBtn.getSelection()) {
    userText.setText(user == null ? ""String_Node_Str"" : user);
    pwdText.setText(passwd == null ? ""String_Node_Str"" : passwd);
  }
  updateAuthGroup();
}",0.9961663226186964
124835,"private void checkServices(){
  Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties=new HashMap<EHadoopServiceType,HadoopServiceProperties>();
  HadoopServiceProperties nnProperties=new HadoopServiceProperties();
  initCommonProperties(nnProperties);
  nnProperties.setNameNode(getConnection().getNameNodeURI());
  serviceTypeToProperties.put(EHadoopServiceType.NAMENODE,nnProperties);
  HadoopServiceProperties rmORjtProperties=new HadoopServiceProperties();
  initCommonProperties(rmORjtProperties);
  if (getConnection().isUseYarn()) {
    rmORjtProperties.setResourceManager(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.RESOURCE_MANAGER,rmORjtProperties);
  }
 else {
    rmORjtProperties.setJobTracker(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.JOBTRACKER,rmORjtProperties);
  }
  if (getConnection().isUseCustomVersion()) {
    nnProperties.setUid(connectionItem.getProperty().getId());
    nnProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.COMMON.getName()));
    rmORjtProperties.setUid(connectionItem.getProperty().getId());
    rmORjtProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.MAP_REDUCE.getName()));
  }
  new CheckHadoopServicesDialog(getShell(),serviceTypeToProperties).open();
}","private void checkServices(){
  Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties=new HashMap<EHadoopServiceType,HadoopServiceProperties>();
  HadoopServiceProperties nnProperties=new HadoopServiceProperties();
  initCommonProperties(nnProperties);
  nnProperties.setNameNode(getConnection().getNameNodeURI());
  serviceTypeToProperties.put(EHadoopServiceType.NAMENODE,nnProperties);
  HadoopServiceProperties rmORjtProperties=new HadoopServiceProperties();
  initCommonProperties(rmORjtProperties);
  if (getConnection().isUseYarn()) {
    rmORjtProperties.setResourceManager(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.RESOURCE_MANAGER,rmORjtProperties);
  }
 else {
    rmORjtProperties.setJobTracker(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.JOBTRACKER,rmORjtProperties);
  }
  if (getConnection().isUseCustomVersion()) {
    nnProperties.setUid(connectionItem.getProperty().getId() + ""String_Node_Str"" + ECustomVersionGroup.COMMON.getName());
    nnProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.COMMON.getName()));
    rmORjtProperties.setUid(connectionItem.getProperty().getId() + ""String_Node_Str"" + ECustomVersionGroup.MAP_REDUCE.getName());
    rmORjtProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.MAP_REDUCE.getName()));
  }
  new CheckHadoopServicesDialog(getShell(),serviceTypeToProperties).open();
}",0.8326530612244898
124836,"/** 
 * is current hadoop version support JobHistoryPrincipal
 * @return
 */
protected boolean isCurrentHadoopVersionSupportJobHistoryPrincipal(){
  if (hadoopDistribution == null || hadoopVersison == null) {
    return false;
  }
  boolean isSupport=false;
  if (hadoopVersison == EHadoopVersion4Drivers.MICROSOFT_HD_INSIGHT_3_1 || hadoopVersison == EHadoopVersion4Drivers.MICROSOFT_HD_INSIGHT_3_2) {
    return false;
  }
 else {
    if (hadoopDistribution == EHadoopDistributions.CUSTOM) {
      return true;
    }
 else {
switch (hadoopVersison) {
case PIVOTAL_HD_1_0_1:
case PIVOTAL_HD_2_0:
case HDP_2_0:
case HDP_2_1:
case HDP_2_2:
case CLOUDERA_CDH4_YARN:
case CLOUDERA_CDH5:
case CLOUDERA_CDH5_1:
case CLOUDERA_CDH5_4:
case MAPR401:
case APACHE_2_4_0_EMR:
case EMR_4_0_0:
        isSupport=true;
      break;
default :
    isSupport=false;
}
}
}
return isSupport;
}","/** 
 * is current hadoop version support JobHistoryPrincipal
 * @return
 */
protected boolean isCurrentHadoopVersionSupportJobHistoryPrincipal(){
  if (hadoopDistribution == null || hadoopVersison == null) {
    return false;
  }
  boolean isSupport=false;
  if (hadoopVersison == EHadoopVersion4Drivers.MICROSOFT_HD_INSIGHT_3_1 || hadoopVersison == EHadoopVersion4Drivers.MICROSOFT_HD_INSIGHT_3_2) {
    return false;
  }
 else {
    if (hadoopDistribution == EHadoopDistributions.CUSTOM) {
      return true;
    }
 else {
switch (hadoopVersison) {
case PIVOTAL_HD_1_0_1:
case PIVOTAL_HD_2_0:
case HDP_2_0:
case HDP_2_1:
case HDP_2_2:
case HDP_2_3:
case CLOUDERA_CDH4_YARN:
case CLOUDERA_CDH5:
case CLOUDERA_CDH5_1:
case CLOUDERA_CDH5_4:
case MAPR401:
case APACHE_2_4_0_EMR:
case EMR_4_0_0:
        isSupport=true;
      break;
default :
    isSupport=false;
}
}
}
return isSupport;
}",0.9920454545454546
124837,"private void checkServices(){
  Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties=new HashMap<EHadoopServiceType,HadoopServiceProperties>();
  HadoopServiceProperties nnProperties=new HadoopServiceProperties();
  initCommonProperties(nnProperties);
  nnProperties.setNameNode(getConnection().getNameNodeURI());
  serviceTypeToProperties.put(EHadoopServiceType.NAMENODE,nnProperties);
  HadoopServiceProperties rmORjtProperties=new HadoopServiceProperties();
  initCommonProperties(rmORjtProperties);
  if (getConnection().isUseYarn()) {
    rmORjtProperties.setResourceManager(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.RESOURCE_MANAGER,rmORjtProperties);
  }
 else {
    rmORjtProperties.setJobTracker(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.JOBTRACKER,rmORjtProperties);
  }
  if (getConnection().isUseCustomVersion()) {
    nnProperties.setUid(connectionItem.getProperty().getId());
    nnProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.COMMON.getName()));
    rmORjtProperties.setUid(connectionItem.getProperty().getId());
    rmORjtProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.MAP_REDUCE.getName()));
  }
  new CheckHadoopServicesDialog(getShell(),serviceTypeToProperties).open();
}","private void checkServices(){
  Map<EHadoopServiceType,HadoopServiceProperties> serviceTypeToProperties=new HashMap<EHadoopServiceType,HadoopServiceProperties>();
  HadoopServiceProperties nnProperties=new HadoopServiceProperties();
  initCommonProperties(nnProperties);
  nnProperties.setNameNode(getConnection().getNameNodeURI());
  serviceTypeToProperties.put(EHadoopServiceType.NAMENODE,nnProperties);
  HadoopServiceProperties rmORjtProperties=new HadoopServiceProperties();
  initCommonProperties(rmORjtProperties);
  if (getConnection().isUseYarn()) {
    rmORjtProperties.setResourceManager(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.RESOURCE_MANAGER,rmORjtProperties);
  }
 else {
    rmORjtProperties.setJobTracker(getConnection().getJobTrackerURI());
    serviceTypeToProperties.put(EHadoopServiceType.JOBTRACKER,rmORjtProperties);
  }
  if (getConnection().isUseCustomVersion()) {
    nnProperties.setUid(connectionItem.getProperty().getId() + ""String_Node_Str"" + ECustomVersionGroup.COMMON.getName());
    nnProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.COMMON.getName()));
    rmORjtProperties.setUid(connectionItem.getProperty().getId() + ""String_Node_Str"" + ECustomVersionGroup.MAP_REDUCE.getName());
    rmORjtProperties.setCustomJars(HCVersionUtil.getCustomVersionMap(getConnection()).get(ECustomVersionGroup.MAP_REDUCE.getName()));
  }
  new CheckHadoopServicesDialog(getShell(),serviceTypeToProperties).open();
}",0.8326530612244898
124838,"@Override public List<ImportItem> findRelatedImportItems(IProgressMonitor monitor,ResourcesManager resManager,ImportItem importItem,ImportItem[] allImportItemRecords) throws Exception {
  List<ImportItem> relatedItemRecords=new ArrayList<ImportItem>();
  relatedItemRecords.addAll(super.findRelatedImportItems(monitor,resManager,importItem,allImportItemRecords));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    IHadoopClusterService hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
    final Item item=importItem.getItem();
    if (hadoopClusterService != null && hadoopClusterService.isHadoopClusterItem(item)) {
      resolveItem(resManager,importItem);
      String clusterId=item.getProperty().getId();
      for (      ImportItem ir : allImportItemRecords) {
        resolveItem(resManager,ir);
        Item subItem=ir.getItem();
        String hcId=null;
        if (subItem instanceof HadoopSubConnectionItem) {
          hcId=((HadoopSubConnection)((HadoopSubConnectionItem)subItem).getConnection()).getRelativeHadoopClusterId();
        }
 else         if (subItem instanceof DatabaseConnectionItem) {
          hcId=((DatabaseConnection)((DatabaseConnectionItem)subItem).getConnection()).getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
        }
        if (clusterId.equals(hcId)) {
          relatedItemRecords.add(ir);
        }
      }
    }
  }
  return relatedItemRecords;
}","@Override public List<ImportItem> findRelatedImportItems(IProgressMonitor monitor,ResourcesManager resManager,ImportItem importItem,ImportItem[] allImportItemRecords) throws Exception {
  List<ImportItem> relatedItemRecords=new ArrayList<ImportItem>();
  relatedItemRecords.addAll(super.findRelatedImportItems(monitor,resManager,importItem,allImportItemRecords));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    IHadoopClusterService hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
    final Item item=importItem.getItem();
    if (hadoopClusterService != null && hadoopClusterService.isHadoopClusterItem(item)) {
      resolveItem(resManager,importItem);
      HadoopClusterConnection hcConnection=(HadoopClusterConnection)((HadoopClusterConnectionItem)item).getConnection();
      String clusterId=item.getProperty().getId();
      for (      ImportItem ir : allImportItemRecords) {
        resolveItem(resManager,ir);
        Item subItem=ir.getItem();
        String hcId=null;
        if (subItem instanceof HadoopSubConnectionItem) {
          hcId=((HadoopSubConnection)((HadoopSubConnectionItem)subItem).getConnection()).getRelativeHadoopClusterId();
        }
 else         if (subItem instanceof DatabaseConnectionItem) {
          hcId=((DatabaseConnection)((DatabaseConnectionItem)subItem).getConnection()).getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
        }
        if (clusterId.equals(hcId)) {
          if (subItem instanceof HadoopSubConnectionItem) {
            EList<String> connectionList=hcConnection.getConnectionList();
            String subItemId=subItem.getProperty().getId();
            if (!connectionList.contains(subItemId)) {
              connectionList.add(subItemId);
            }
          }
          relatedItemRecords.add(ir);
        }
      }
    }
  }
  return relatedItemRecords;
}",0.8741457858769932
124839,"@Override public List<ImportItem> findRelatedImportItems(IProgressMonitor monitor,ResourcesManager resManager,ImportItem importItem,ImportItem[] allImportItemRecords) throws Exception {
  List<ImportItem> relatedItemRecords=new ArrayList<ImportItem>();
  relatedItemRecords.addAll(super.findRelatedImportItems(monitor,resManager,importItem,allImportItemRecords));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    IHadoopClusterService hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
    final Item item=importItem.getItem();
    if (hadoopClusterService != null && hadoopClusterService.isHadoopClusterItem(item)) {
      resolveItem(resManager,importItem);
      String clusterId=item.getProperty().getId();
      for (      ImportItem ir : allImportItemRecords) {
        resolveItem(resManager,ir);
        Item subItem=ir.getItem();
        String hcId=null;
        if (subItem instanceof HadoopSubConnectionItem) {
          hcId=((HadoopSubConnection)((HadoopSubConnectionItem)subItem).getConnection()).getRelativeHadoopClusterId();
        }
 else         if (subItem instanceof DatabaseConnectionItem) {
          hcId=((DatabaseConnection)((DatabaseConnectionItem)subItem).getConnection()).getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
        }
        if (clusterId.equals(hcId)) {
          relatedItemRecords.add(ir);
        }
      }
    }
  }
  return relatedItemRecords;
}","@Override public List<ImportItem> findRelatedImportItems(IProgressMonitor monitor,ResourcesManager resManager,ImportItem importItem,ImportItem[] allImportItemRecords) throws Exception {
  List<ImportItem> relatedItemRecords=new ArrayList<ImportItem>();
  relatedItemRecords.addAll(super.findRelatedImportItems(monitor,resManager,importItem,allImportItemRecords));
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    IHadoopClusterService hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
    final Item item=importItem.getItem();
    if (hadoopClusterService != null && hadoopClusterService.isHadoopClusterItem(item)) {
      resolveItem(resManager,importItem);
      HadoopClusterConnection hcConnection=(HadoopClusterConnection)((HadoopClusterConnectionItem)item).getConnection();
      String clusterId=item.getProperty().getId();
      for (      ImportItem ir : allImportItemRecords) {
        resolveItem(resManager,ir);
        Item subItem=ir.getItem();
        String hcId=null;
        if (subItem instanceof HadoopSubConnectionItem) {
          hcId=((HadoopSubConnection)((HadoopSubConnectionItem)subItem).getConnection()).getRelativeHadoopClusterId();
        }
 else         if (subItem instanceof DatabaseConnectionItem) {
          hcId=((DatabaseConnection)((DatabaseConnectionItem)subItem).getConnection()).getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
        }
        if (clusterId.equals(hcId)) {
          if (subItem instanceof HadoopSubConnectionItem) {
            EList<String> connectionList=hcConnection.getConnectionList();
            String subItemId=subItem.getProperty().getId();
            if (!connectionList.contains(subItemId)) {
              connectionList.add(subItemId);
            }
          }
          relatedItemRecords.add(ir);
        }
      }
    }
  }
  return relatedItemRecords;
}",0.8741457858769932
124840,"private static void addKerberos2Client(WebClient client,HCatalogConnection connection){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null && hcConnection.isEnableKerberos()) {
    KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
    AuthorizationPolicy policy=new AuthorizationPolicy();
    policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
    kbInterceptor.setPolicy(policy);
    java.util.Map<String,String> properties=new HashMap<String,String>();
    kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(connection.getKrbPrincipal()));
    kbInterceptor.setRealm(StringUtils.trimToEmpty(connection.getKrbRealm()));
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    if (hcConnection.isUseKeytab()) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",hcConnection.getKeytabPrincipal());
      properties.put(""String_Node_Str"",hcConnection.getKeytab());
    }
    kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
    WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
  }
}","private static void addKerberos2Client(WebClient client,HCatalogConnection connection){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null && hcConnection.isEnableKerberos()) {
    KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
    AuthorizationPolicy policy=new AuthorizationPolicy();
    policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
    kbInterceptor.setPolicy(policy);
    java.util.Map<String,String> properties=new HashMap<String,String>();
    String krbPrincipal=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbPrincipal()));
    kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(krbPrincipal));
    String krbRealm=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbRealm()));
    kbInterceptor.setRealm(StringUtils.trimToEmpty(krbRealm));
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    if (hcConnection.isUseKeytab()) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
      properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
    }
    kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
    WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
  }
}",0.8590514362057449
124841,"private static void addKerberos2Client(WebClient client,HCatalogConnection connection){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null && hcConnection.isEnableKerberos()) {
    KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
    AuthorizationPolicy policy=new AuthorizationPolicy();
    policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
    kbInterceptor.setPolicy(policy);
    java.util.Map<String,String> properties=new HashMap<String,String>();
    kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(connection.getKrbPrincipal()));
    kbInterceptor.setRealm(StringUtils.trimToEmpty(connection.getKrbRealm()));
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    if (hcConnection.isUseKeytab()) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",hcConnection.getKeytabPrincipal());
      properties.put(""String_Node_Str"",hcConnection.getKeytab());
    }
    kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
    WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
  }
}","private static void addKerberos2Client(WebClient client,HCatalogConnection connection){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection != null && hcConnection.isEnableKerberos()) {
    KerberosAuthOutInterceptor kbInterceptor=new KerberosAuthOutInterceptor();
    AuthorizationPolicy policy=new AuthorizationPolicy();
    policy.setAuthorizationType(HttpAuthHeader.AUTH_TYPE_NEGOTIATE);
    kbInterceptor.setPolicy(policy);
    java.util.Map<String,String> properties=new HashMap<String,String>();
    String krbPrincipal=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbPrincipal()));
    kbInterceptor.setServicePrincipalName(StringUtils.trimToEmpty(krbPrincipal));
    String krbRealm=ConnectionContextHelper.getParamValueOffContext(connection,StringUtils.trimToEmpty(connection.getKrbRealm()));
    kbInterceptor.setRealm(StringUtils.trimToEmpty(krbRealm));
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    properties.put(""String_Node_Str"",""String_Node_Str"");
    if (hcConnection.isUseKeytab()) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytabPrincipal()));
      properties.put(""String_Node_Str"",ConnectionContextHelper.getParamValueOffContext(hcConnection,hcConnection.getKeytab()));
    }
    kbInterceptor.setLoginConfig(new KerberosPolicyConfig(properties));
    WebClient.getConfig(client).getOutInterceptors().add(kbInterceptor);
  }
}",0.8590514362057449
124842,"/** 
 * Get the appropriate implementation of   {@link IExtractSchemaService} for the given {@code path} of file. Thismethod should be improved if there are more types of file to support in the future. <p> DOC ycbai Comment method ""getService"".
 * @param connectionBean
 * @param path
 * @return
 */
public static IExtractSchemaService<HDFSConnection> getService(HDFSConnectionBean connectionBean,ClassLoader classLoader,Object path){
  IExtractSchemaService<HDFSConnection> service=null;
  boolean isSequenceFile=true;
  try {
    Object fs=HadoopServerUtil.getDFS(connectionBean,classLoader);
    Object conf=HadoopServerUtil.getConfiguration(connectionBean,classLoader);
    ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{fs,path,conf},Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader));
  }
 catch (  Exception e) {
    isSequenceFile=false;
  }
  if (isSequenceFile) {
    service=new ExtractSequenceFileSchemaService(classLoader);
  }
 else   if (ExtractAVROFileSchemaService.isAnAVROFormattedFile(String.valueOf(path))) {
    service=new ExtractAVROFileSchemaService(classLoader);
  }
 else {
    service=new ExtractTextFileSchemaService(classLoader);
  }
  return service;
}","/** 
 * Get the appropriate implementation of   {@link IExtractSchemaService} for the given {@code path} of file. Thismethod should be improved if there are more types of file to support in the future. <p> DOC ycbai Comment method ""getService"".
 * @param connectionBean
 * @param path
 * @return
 */
public static IExtractSchemaService<HDFSConnection> getService(HDFSConnectionBean connectionBean,ClassLoader classLoader,Object path){
  IExtractSchemaService<HDFSConnection> service=null;
  boolean isSequenceFile=true;
  ClassLoader oldClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Object fs=HadoopServerUtil.getDFS(connectionBean,classLoader);
    Object conf=HadoopServerUtil.getConfiguration(connectionBean,classLoader);
    Thread.currentThread().setContextClassLoader(classLoader);
    ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{fs,path,conf},Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader));
  }
 catch (  Exception e) {
    isSequenceFile=false;
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoader);
  }
  if (isSequenceFile) {
    service=new ExtractSequenceFileSchemaService(classLoader);
  }
 else   if (ExtractAVROFileSchemaService.isAnAVROFormattedFile(String.valueOf(path))) {
    service=new ExtractAVROFileSchemaService(classLoader);
  }
 else {
    service=new ExtractTextFileSchemaService(classLoader);
  }
  return service;
}",0.9219908224497
124843,"/** 
 * Get the appropriate implementation of   {@link IExtractSchemaService} for the given {@code path} of file. Thismethod should be improved if there are more types of file to support in the future. <p> DOC ycbai Comment method ""getService"".
 * @param connectionBean
 * @param path
 * @return
 */
public static IExtractSchemaService<HDFSConnection> getService(HDFSConnectionBean connectionBean,ClassLoader classLoader,Object path){
  IExtractSchemaService<HDFSConnection> service=null;
  boolean isSequenceFile=true;
  try {
    Object fs=HadoopServerUtil.getDFS(connectionBean,classLoader);
    Object conf=HadoopServerUtil.getConfiguration(connectionBean,classLoader);
    ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{fs,path,conf},Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader));
  }
 catch (  Exception e) {
    isSequenceFile=false;
  }
  if (isSequenceFile) {
    service=new ExtractSequenceFileSchemaService(classLoader);
  }
 else   if (ExtractAVROFileSchemaService.isAnAVROFormattedFile(String.valueOf(path))) {
    service=new ExtractAVROFileSchemaService(classLoader);
  }
 else {
    service=new ExtractTextFileSchemaService(classLoader);
  }
  return service;
}","/** 
 * Get the appropriate implementation of   {@link IExtractSchemaService} for the given {@code path} of file. Thismethod should be improved if there are more types of file to support in the future. <p> DOC ycbai Comment method ""getService"".
 * @param connectionBean
 * @param path
 * @return
 */
public static IExtractSchemaService<HDFSConnection> getService(HDFSConnectionBean connectionBean,ClassLoader classLoader,Object path){
  IExtractSchemaService<HDFSConnection> service=null;
  boolean isSequenceFile=true;
  ClassLoader oldClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Object fs=HadoopServerUtil.getDFS(connectionBean,classLoader);
    Object conf=HadoopServerUtil.getConfiguration(connectionBean,classLoader);
    Thread.currentThread().setContextClassLoader(classLoader);
    ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{fs,path,conf},Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader),Class.forName(""String_Node_Str"",true,classLoader));
  }
 catch (  Exception e) {
    isSequenceFile=false;
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoader);
  }
  if (isSequenceFile) {
    service=new ExtractSequenceFileSchemaService(classLoader);
  }
 else   if (ExtractAVROFileSchemaService.isAnAVROFormattedFile(String.valueOf(path))) {
    service=new ExtractAVROFileSchemaService(classLoader);
  }
 else {
    service=new ExtractTextFileSchemaService(classLoader);
  }
  return service;
}",0.9219908224497
124844,"@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HCatalogConnection connection=HCatalogFactory.eINSTANCE.createHCatalogConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=HCatalogFactory.eINSTANCE.createHCatalogConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}","@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HCatalogConnection connection=HCatalogFactory.eINSTANCE.createHCatalogConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  initializeConnectionParameters(connection);
  HadoopSubConnectionItem connectionItem=HCatalogFactory.eINSTANCE.createHCatalogConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}",0.9637795275590552
124845,"@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HDFSConnection connection=HDFSFactory.eINSTANCE.createHDFSConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=HDFSFactory.eINSTANCE.createHDFSConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}","@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HDFSConnection connection=HDFSFactory.eINSTANCE.createHDFSConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  initializeConnectionParameters(connection);
  HadoopSubConnectionItem connectionItem=HDFSFactory.eINSTANCE.createHDFSConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}",0.96
124846,"@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  OozieConnection connection=OozieFactory.eINSTANCE.createOozieConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=OozieFactory.eINSTANCE.createOozieConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}","@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  OozieConnection connection=OozieFactory.eINSTANCE.createOozieConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=OozieFactory.eINSTANCE.createOozieConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  initializeConnectionParameters(connection);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}",0.9629032258064516
124847,"@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HCatalogConnection connection=HCatalogFactory.eINSTANCE.createHCatalogConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=HCatalogFactory.eINSTANCE.createHCatalogConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}","@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HCatalogConnection connection=HCatalogFactory.eINSTANCE.createHCatalogConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  initializeConnectionParameters(connection);
  HadoopSubConnectionItem connectionItem=HCatalogFactory.eINSTANCE.createHCatalogConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}",0.9637795275590552
124848,"@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HDFSConnection connection=HDFSFactory.eINSTANCE.createHDFSConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=HDFSFactory.eINSTANCE.createHDFSConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}","@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  HDFSConnection connection=HDFSFactory.eINSTANCE.createHDFSConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  initializeConnectionParameters(connection);
  HadoopSubConnectionItem connectionItem=HDFSFactory.eINSTANCE.createHDFSConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}",0.96
124849,"@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  OozieConnection connection=OozieFactory.eINSTANCE.createOozieConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=OozieFactory.eINSTANCE.createOozieConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}","@Override public ConnectionItem create(Map<String,Map<String,String>> initParams) throws CoreException {
  OozieConnection connection=OozieFactory.eINSTANCE.createOozieConnection();
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  setPropertyParameters(connectionProperty);
  HadoopSubConnectionItem connectionItem=OozieFactory.eINSTANCE.createOozieConnectionItem();
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  setParameters(connection,initParams);
  initializeConnectionParameters(connection);
  appendToHadoopCluster(connectionItem);
  return connectionItem;
}",0.9629032258064516
124850,"public String getDistribution(){
  return this.distribution;
}","public String getDistribution(){
  return getRealValue(this.distribution);
}",0.8985507246376812
124851,"public String getResourceManager(){
  return this.resourceManager;
}","public String getResourceManager(){
  return getRealValue(this.resourceManager);
}",0.9066666666666666
124852,"public String getJtOrRmPrincipal(){
  return this.jtOrRmPrincipal;
}","public String getJtOrRmPrincipal(){
  return getRealValue(this.jtOrRmPrincipal);
}",0.9066666666666666
124853,"public String getJobTracker(){
  return this.jobTracker;
}","public String getJobTracker(){
  return getRealValue(this.jobTracker);
}",0.8923076923076924
124854,"public String getPrincipal(){
  return this.principal;
}","public String getPrincipal(){
  return getRealValue(this.principal);
}",0.8888888888888888
124855,"public String getUserName(){
  return this.userName;
}","public String getUserName(){
  return getRealValue(this.userName);
}",0.8852459016393442
124856,"public String getVersion(){
  return this.version;
}","public String getVersion(){
  return getRealValue(this.version);
}",0.8813559322033898
124857,"public String getJobHistoryPrincipal(){
  return this.jobHistoryPrincipal;
}","public String getJobHistoryPrincipal(){
  return getRealValue(this.jobHistoryPrincipal);
}",0.9156626506024096
124858,"public String getNameNode(){
  return this.nameNode;
}","public String getNameNode(){
  return getRealValue(this.nameNode);
}",0.8852459016393442
124859,"public String getGroup(){
  return this.group;
}","public String getGroup(){
  return getRealValue(this.group);
}",0.8727272727272727
124860,"public String getKeytabPrincipal(){
  return this.keytabPrincipal;
}","public String getKeytabPrincipal(){
  return getRealValue(this.keytabPrincipal);
}",0.9066666666666666
124861,"public String getKeytab(){
  return this.keytab;
}","public String getKeytab(){
  return getRealValue(this.keytab);
}",0.8771929824561403
124862,"public String getDistribution(){
  return this.distribution;
}","public String getDistribution(){
  return getRealValue(this.distribution,true);
}",0.8671328671328671
124863,"public String getDfVersion(){
  return this.dfVersion;
}","public String getDfVersion(){
  return getRealValue(this.dfVersion,true);
}",0.8549618320610687
124864,"public String getPrincipal(){
  return this.principal;
}","public String getPrincipal(){
  return getRealValue(this.principal,true);
}",0.8549618320610687
124865,"public String getUserName(){
  return this.userName;
}","public String getUserName(){
  return getRealValue(this.userName);
}",0.8852459016393442
124866,"public String getNameNodeURI(){
  return this.nameNodeURI;
}","public String getNameNodeURI(){
  return getRealValue(this.nameNodeURI,true);
}",0.8633093525179856
124867,"public String getJobtrackerURI(){
  return this.jobtrackerURI;
}","public String getJobtrackerURI(){
  return getRealValue(this.jobtrackerURI,true);
}",0.8707482993197279
124868,"public String getFieldSeparator(){
  return this.fieldSeparator;
}","public String getFieldSeparator(){
  return getRealValue(this.fieldSeparator);
}",0.9041095890410958
124869,"public String getGroup(){
  return this.group;
}","public String getGroup(){
  return getRealValue(this.group,true);
}",0.8347826086956521
124870,"public String getRowSeparator(){
  return this.rowSeparator;
}","public String getRowSeparator(){
  return getRealValue(this.rowSeparator);
}",0.8985507246376812
124871,"public String getKeytabPrincipal(){
  return this.keytabPrincipal;
}","public String getKeytabPrincipal(){
  return getRealValue(this.keytabPrincipal,true);
}",0.8774193548387097
124872,"public String getKeytab(){
  return this.keytab;
}","public String getKeytab(){
  return getRealValue(this.keytab,true);
}",0.8403361344537815
124873,"private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setGroup(connection.getGroup());
  properties.setUseKrb(connection.isEnableKerberos());
  properties.setCustom(connection.isUseCustomVersion());
  properties.setPrincipal(connection.getPrincipal());
  properties.setJtOrRmPrincipal(connection.getJtOrRmPrincipal());
  properties.setJobHistoryPrincipal(connection.getJobHistoryPrincipal());
  properties.setUseKeytab(connection.isUseKeytab());
  properties.setKeytabPrincipal(connection.getKeytabPrincipal());
  properties.setKeytab(connection.getKeytab());
  properties.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties()));
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
}","private void initCommonProperties(HadoopServiceProperties properties){
  HadoopClusterConnection connection=getConnection();
  ContextType contextType=null;
  if (getConnection().isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  properties.setContextType(contextType);
  properties.setDistribution(connection.getDistribution());
  properties.setVersion(connection.getDfVersion());
  properties.setGroup(connection.getGroup());
  properties.setUseKrb(connection.isEnableKerberos());
  properties.setCustom(connection.isUseCustomVersion());
  properties.setPrincipal(connection.getPrincipal());
  properties.setJtOrRmPrincipal(connection.getJtOrRmPrincipal());
  properties.setJobHistoryPrincipal(connection.getJobHistoryPrincipal());
  properties.setUseKeytab(connection.isUseKeytab());
  properties.setKeytabPrincipal(connection.getKeytabPrincipal());
  properties.setKeytab(connection.getKeytab());
  properties.setHadoopProperties(HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties()));
  properties.setRelativeHadoopClusterId(connectionItem.getProperty().getId());
}",0.9043312708234176
124874,"/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  HDFSConnectionBean bean=new HDFSConnectionBean();
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),false);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}","/** 
 * DOC ycbai Comment method ""convert2HDFSConnectionBean"". Convert HDFSConnection to HDFSConnectionBean
 * @param connection
 * @return
 */
public static HDFSConnectionBean convert2HDFSConnectionBean(HDFSConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(hcConnection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setFieldSeparator(connection.getFieldSeparator());
    bean.setRowSeparator(connection.getRowSeparator());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
    Map<String,Object> configurations=bean.getConfigurations();
    List<Map<String,Object>> hadoopProperties=HadoopRepositoryUtil.getHadoopPropertiesFullList(connection,connection.getHadoopProperties(),false);
    for (    Map<String,Object> propMap : hadoopProperties) {
      String key=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      String value=TalendQuoteUtils.removeQuotesIfExist(String.valueOf(propMap.get(""String_Node_Str"")));
      if (StringUtils.isNotEmpty(key) && value != null) {
        configurations.put(key,value);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}",0.9004651162790698
124875,"public static HDFSConnectionBean convert2HDFSConnectionBean(OozieConnection connection){
  HDFSConnectionBean bean=new HDFSConnectionBean();
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}","public static HDFSConnectionBean convert2HDFSConnectionBean(OozieConnection connection){
  ContextType contextType=null;
  if (connection.isContextMode()) {
    contextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
  }
  HDFSConnectionBean bean=new HDFSConnectionBean();
  bean.setContextType(contextType);
  try {
    HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
    if (hcConnection != null) {
      ContextType parentContextType=null;
      if (hcConnection.isContextMode()) {
        parentContextType=ConnectionContextHelper.getContextTypeForContextMode(connection);
      }
      bean.setParentContextType(parentContextType);
      BeanUtils.copyProperties(bean,hcConnection);
      Map<String,Object> properties=bean.getAdditionalProperties();
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getCustomVersionMap(hcConnection);
      Iterator<Entry<String,Set<String>>> iter=customVersionMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,Set<String>> entry=iter.next();
        String groupName=entry.getKey();
        Set<String> jars=entry.getValue();
        if (jars != null && jars.size() > 0) {
          properties.put(groupName,jars);
        }
      }
    }
    bean.setUserName(connection.getUserName());
    bean.setRelativeHadoopClusterId(connection.getRelativeHadoopClusterId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
  return bean;
}",0.8359013867488444
124876,"public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,String distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(true);
  EHadoopDistributions dist=EHadoopDistributions.getDistributionByDisplayName(distribution);
  EHadoopVersion4Drivers ver=EHadoopVersion4Drivers.indexOfByVersionDisplay(version);
  boolean supportYARN=ver.isSupportYARN();
  connection.setDistribution(dist.getName());
  connection.setDfVersion(ver.getVersionValue());
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String rmIds=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_RM_IDS.getName());
      if (rmIds != null) {
        String[] rmIdsArray=rmIds.split(""String_Node_Str"");
        if (rmIdsArray.length > 0) {
          String rmId=rmIdsArray[0];
          String adminRmIdKey=String.format(EHadoopConfProperties.YARN_RESOURCEMANAGER_ADMIN_ADDRESS_RM_ID.getName(),rmId);
          rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
        }
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt != null) {
    connection.setJobTrackerURI(rmOrJt);
  }
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (StringUtils.isNotEmpty(rms)) {
    connection.setRmScheduler(rms);
  }
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
  if (StringUtils.isNotEmpty(nnp)) {
    connection.setPrincipal(nnp);
  }
  String rmOrJtPrincipal=null;
  if (supportYARN) {
    rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
  }
 else {
    rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
  }
  if (rmOrJtPrincipal != null) {
    connection.setJtOrRmPrincipal(rmOrJtPrincipal);
  }
  String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
  if (StringUtils.isNotEmpty(jhp)) {
    connection.setJobHistoryPrincipal(jhp);
  }
}","public static void setConnectionParameters(HadoopClusterConnectionItem connectionItem,String distribution,String version,IRetrieveConfsService confsService) throws Exception {
  HadoopClusterConnection connection=(HadoopClusterConnection)connectionItem.getConnection();
  connection.setUseCustomConfs(true);
  EHadoopDistributions dist=EHadoopDistributions.getDistributionByDisplayName(distribution);
  EHadoopVersion4Drivers ver=EHadoopVersion4Drivers.indexOfByVersionDisplay(version);
  boolean supportYARN=ver.isSupportYARN();
  connection.setDistribution(dist.getName());
  connection.setDfVersion(ver.getVersionValue());
  String namenodeURI=null;
  String ns=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.DFS_NAMESERVICES.getName());
  if (StringUtils.isNotEmpty(ns)) {
    namenodeURI=""String_Node_Str"" + ns;
  }
 else {
    namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI_NEW.getName());
    if (StringUtils.isEmpty(namenodeURI)) {
      namenodeURI=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.FS_DEFAULT_URI.getName());
    }
  }
  if (namenodeURI != null) {
    connection.setNameNodeURI(namenodeURI);
  }
  String rmOrJt=null;
  if (supportYARN) {
    String useRmHa=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_ENABLED.getName());
    boolean isUseRmHa=Boolean.valueOf(useRmHa);
    if (isUseRmHa) {
      String rmIds=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.YARN_RESOURCEMANAGER_HA_RM_IDS.getName());
      if (rmIds != null) {
        String[] rmIdsArray=rmIds.split(""String_Node_Str"");
        if (rmIdsArray.length > 0) {
          String rmId=rmIdsArray[0];
          String adminRmIdKey=String.format(EHadoopConfProperties.YARN_RESOURCEMANAGER_ADMIN_ADDRESS_RM_ID.getName(),rmId);
          rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),adminRmIdKey);
        }
      }
    }
 else {
      rmOrJt=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCE_MANAGER.getName());
    }
  }
 else {
    rmOrJt=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOB_TRACKER_URI.getName());
  }
  if (rmOrJt != null) {
    connection.setJobTrackerURI(rmOrJt);
  }
  String rms=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RESOURCEMANAGER_SCHEDULER.getName());
  if (StringUtils.isNotEmpty(rms)) {
    connection.setRmScheduler(rms);
  }
  String jh=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  if (StringUtils.isEmpty(jh)) {
    jh=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.JOBHISTORY.getName());
  }
  if (StringUtils.isNotEmpty(jh)) {
    connection.setJobHistory(jh);
  }
  String sd=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  if (StringUtils.isEmpty(sd)) {
    sd=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.STAGING_DIR.getName());
  }
  if (StringUtils.isNotEmpty(sd)) {
    connection.setStagingDirectory(sd);
  }
  String at=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.AUTHENTICATION.getName());
  if (StringUtils.isNotEmpty(at)) {
    connection.setEnableKerberos(""String_Node_Str"".equals(at));
  }
  String nnp=confsService.getConfValue(EHadoopConfs.HDFS.getName(),EHadoopConfProperties.KERBEROS_PRINCIPAL.getName());
  if (StringUtils.isNotEmpty(nnp)) {
    connection.setPrincipal(nnp);
  }
  String rmOrJtPrincipal=null;
  if (supportYARN) {
    rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.YARN.getName(),EHadoopConfProperties.RM_PRINCIPAL.getName());
  }
 else {
    rmOrJtPrincipal=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JT_PRINCIPAL.getName());
  }
  if (rmOrJtPrincipal != null) {
    connection.setJtOrRmPrincipal(rmOrJtPrincipal);
  }
  String jhp=confsService.getConfValue(EHadoopConfs.MAPREDUCE2.getName(),EHadoopConfProperties.JH_PRINCIPAL.getName());
  if (StringUtils.isNotEmpty(jhp)) {
    connection.setJobHistoryPrincipal(jhp);
  }
}",0.9651402890805296
124877,"@Override public boolean performFinish(){
  IImportConfsWizardPage currentPage=getCurrentConfPage();
  if (currentPage != null) {
    final IRetrieveConfsService confsService=currentPage.getConfsService();
    if (confsService != null) {
      try {
        final String confsDir=confsService.exportConfs(currentPage.getSelectedServices());
        if (confsDir != null) {
          this.getContainer().run(true,true,new IRunnableWithProgress(){
            @Override public void run(            final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
              try {
                if (creation) {
                  getShell().getDisplay().asyncExec(new Runnable(){
                    @Override public void run(){
                      try {
                        HadoopConfsUtils.setConnectionParameters(connectionItem,optionPage.getDistribution(),optionPage.getVersion(),confsService);
                        if (parentForm != null) {
                          parentForm.reload();
                        }
                      }
 catch (                      Exception e) {
                        ExceptionHandler.process(e);
                      }
                    }
                  }
);
                }
              }
 catch (              Exception e) {
                throw new InvocationTargetException(e);
              }
 finally {
                monitor.done();
              }
            }
          }
);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return true;
}","@Override public boolean performFinish(){
  IImportConfsWizardPage currentPage=getCurrentConfPage();
  if (currentPage != null) {
    final IRetrieveConfsService confsService=currentPage.getConfsService();
    if (confsService != null) {
      try {
        final String confsDir=confsService.exportConfs(currentPage.getSelectedServices());
        if (confsDir != null) {
          this.getContainer().run(true,true,new IRunnableWithProgress(){
            @Override public void run(            final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
              try {
                HadoopConfsUtils.buildAndDeployConfsJar(confsDir,HadoopConfsUtils.getConfsJarDefaultName(connectionItem));
                if (creation) {
                  getShell().getDisplay().asyncExec(new Runnable(){
                    @Override public void run(){
                      try {
                        HadoopConfsUtils.setConnectionParameters(connectionItem,optionPage.getDistribution(),optionPage.getVersion(),confsService);
                        if (parentForm != null) {
                          parentForm.reload();
                        }
                      }
 catch (                      Exception e) {
                        ExceptionHandler.process(e);
                      }
                    }
                  }
);
                }
              }
 catch (              Exception e) {
                throw new InvocationTargetException(e);
              }
 finally {
                monitor.done();
              }
            }
          }
);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return true;
}",0.9648872395089922
124878,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  PigudfItem pigudfItem=(PigudfItem)repositoryNode.getObject().getProperty().getItem();
  try {
    openRoutineEditor(pigudfItem,false);
    CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
    CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<String>(),null);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=(RepositoryNode)((IStructuredSelection)getSelection()).getFirstElement();
  }
  PigudfItem pigudfItem=(PigudfItem)repositoryNode.getObject().getProperty().getItem();
  try {
    openRoutineEditor(pigudfItem,false);
    CorePlugin.getDefault().getLibrariesService().resetModulesNeeded();
    CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<ModuleNeeded>(),null);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
catch (  SystemException e) {
    MessageBoxExceptionHandler.process(e);
  }
}",0.985781990521327
124879,"/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  IProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  try {
    ILibrariesService service=CorePlugin.getDefault().getLibrariesService();
    URL templateUrl=service.getPigudfTemplate(mainPage.getSelectedTemplate());
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    InputStream stream=null;
    try {
      stream=templateUrl.openStream();
      byte[] innerContent=new byte[stream.available()];
      stream.read(innerContent);
      stream.close();
      byteArray.setInnerContent(innerContent);
    }
 catch (    IOException e) {
      RuntimeExceptionHandler.process(e);
    }
    pigUDFItem.setContent(byteArray);
    updateItemContent();
    property.setId(repositoryFactory.getNextId());
    property.setLabel(property.getDisplayName());
    IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
    String jarName=""String_Node_Str"";
    String relativePath=""String_Node_Str"" + jarName;
    URI uri=new URI(relativePath);
    boolean libExist=false;
    ILibraryManagerService librairesService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    try {
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        libExist=true;
        CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      }
    }
 catch (    Exception e) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerUIService.class)) {
        ILibraryManagerUIService libUiService=(ILibraryManagerUIService)GlobalServiceRegister.getDefault().getService(ILibraryManagerUIService.class);
        libUiService.installModules(new String[]{jarName});
      }
      if (librairesService.list(new NullProgressMonitor()).contains(repositoryFactory)) {
        libExist=true;
      }
    }
    if (libExist) {
      type.setMODULE(jarName);
      type.setREQUIRED(true);
      type.setUrlPath(librairesService.getJarPath(jarName));
      pigUDFItem.getImports().add(type);
    }
    repositoryFactory.create(pigUDFItem,mainPage.getDestinationPath());
    if (libExist) {
      CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<String>(),null);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
  return pigUDFItem != null;
}","/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  IProxyRepositoryFactory repositoryFactory=ProxyRepositoryFactory.getInstance();
  try {
    ILibrariesService service=CorePlugin.getDefault().getLibrariesService();
    URL templateUrl=service.getPigudfTemplate(mainPage.getSelectedTemplate());
    ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
    InputStream stream=null;
    try {
      stream=templateUrl.openStream();
      byte[] innerContent=new byte[stream.available()];
      stream.read(innerContent);
      stream.close();
      byteArray.setInnerContent(innerContent);
    }
 catch (    IOException e) {
      RuntimeExceptionHandler.process(e);
    }
    pigUDFItem.setContent(byteArray);
    updateItemContent();
    property.setId(repositoryFactory.getNextId());
    property.setLabel(property.getDisplayName());
    IMPORTType type=ComponentFactory.eINSTANCE.createIMPORTType();
    String jarName=""String_Node_Str"";
    String relativePath=""String_Node_Str"" + jarName;
    URI uri=new URI(relativePath);
    boolean libExist=false;
    ILibraryManagerService librairesService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    try {
      URL url=FileLocator.toFileURL(uri.toURL());
      File file=new File(url.getFile());
      if (file.exists()) {
        libExist=true;
        CorePlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      }
    }
 catch (    Exception e) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerUIService.class)) {
        ILibraryManagerUIService libUiService=(ILibraryManagerUIService)GlobalServiceRegister.getDefault().getService(ILibraryManagerUIService.class);
        libUiService.installModules(new String[]{jarName});
      }
      if (librairesService.list(new NullProgressMonitor()).contains(repositoryFactory)) {
        libExist=true;
      }
    }
    if (libExist) {
      type.setMODULE(jarName);
      type.setREQUIRED(true);
      type.setUrlPath(librairesService.getJarPath(jarName));
      pigUDFItem.getImports().add(type);
    }
    repositoryFactory.create(pigUDFItem,mainPage.getDestinationPath());
    if (libExist) {
      CorePlugin.getDefault().getRunProcessService().updateLibraries(new HashSet<ModuleNeeded>(),null);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
  return pigUDFItem != null;
}",0.9964830011723328
124880,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    AbstractHadoopForm form=getForm();
    if (form != null) {
      form.processWhenShowPage(this);
    }
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (visible) {
    AbstractHadoopForm form=getForm();
    if (form != null) {
      form.processWhenShowPage(this);
      form.checkFieldsValue();
    }
  }
}",0.930957683741648
124881,"private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
  return null;
}","private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.USE_YARN.getRepositoryValue().equals(value)) {
    return hcConnection.isUseYarn();
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    return HadoopRepositoryUtil.getHadoopPropertiesFullList(hcConnection,hcConnection.getHadoopProperties(),true);
  }
  return null;
}",0.979449205424744
124882,"/** 
 * DOC ycbai Comment method ""getHadoopDbParameters"". Get db connection(like hbase, hive) parameters by hadoop cluster.
 * @param clusterId
 * @return
 */
public static Map<String,String> getHadoopDbParameters(String clusterId){
  Map<String,String> map=new HashMap<String,String>();
  HadoopClusterConnectionItem clusterItem=HCRepositoryUtil.getRelativeHadoopClusterItem(clusterId);
  if (clusterItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
    map.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,hcConnection.getNameNodeURI());
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,hcConnection.getJobTrackerURI());
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,hcConnection.getPrincipal());
    map.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(hcConnection.getNameNodeURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,hcConnection.getUserName());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
    if (hcConnection.isEnableKerberos()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
      if (hcConnection.isUseKeytab()) {
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,hcConnection.getKeytabPrincipal());
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,hcConnection.getKeytab());
      }
    }
  }
  return map;
}","/** 
 * DOC ycbai Comment method ""getHadoopDbParameters"". Get db connection(like hbase, hive) parameters by hadoop cluster.
 * @param clusterId
 * @return
 */
public static Map<String,String> getHadoopDbParameters(String clusterId){
  Map<String,String> map=new HashMap<String,String>();
  HadoopClusterConnectionItem clusterItem=HCRepositoryUtil.getRelativeHadoopClusterItem(clusterId);
  if (clusterItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)clusterItem.getConnection();
    map.put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,clusterItem.getProperty().getId());
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,hcConnection.getNameNodeURI());
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,hcConnection.getJobTrackerURI());
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(hcConnection.isUseYarn()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,String.valueOf(hcConnection.isEnableKerberos()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_PRINCIPAL,hcConnection.getPrincipal());
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_PRINCIPAL,hcConnection.getJtOrRmPrincipal());
    map.put(ConnParameterKeys.CONN_PARA_KEY_JOB_HISTORY_PRINCIPAL,hcConnection.getJobHistoryPrincipal());
    map.put(ConnParameterKeys.CONN_PARA_KEY_DB_SERVER,HadoopParameterUtil.getHostNameFromNameNodeURI(hcConnection.getNameNodeURI()));
    map.put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,hcConnection.getUserName());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hcConnection.getDfVersion());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,hcConnection.getDistribution());
    map.put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,hcConnection.getDfVersion());
    if (hcConnection.isEnableKerberos()) {
      map.put(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB,String.valueOf(hcConnection.isUseKeytab()));
      if (hcConnection.isUseKeytab()) {
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,hcConnection.getKeytabPrincipal());
        map.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,hcConnection.getKeytab());
      }
    }
  }
  return map;
}",0.9521178637200736
124883,"@Override public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable){
  if (!canHandle(connection)) {
    return false;
  }
  if (metadataTable == null) {
    return false;
  }
  Map<String,String> additionalProperties=metadataTable.getAdditionalProperties();
  if (additionalProperties == null) {
    return false;
  }
  String strFileType=additionalProperties.get(HDFSConstants.HDFS_FILE_TYPE);
  if (StringUtils.isEmpty(strFileType)) {
    return false;
  }
  EHDFSFileTypes hdfsFileType=EHDFSFileTypes.valueOf(strFileType);
  if (EHDFSFileTypes.AVRO == hdfsFileType) {
    Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}","@Override public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable){
  if (!canHandle(connection)) {
    return false;
  }
  if (isAvroType(metadataTable)) {
    Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}",0.6401273885350318
124884,"protected boolean isSubValid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  boolean tableWithMap=true;
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    if (component.getName().toUpperCase().endsWith(MAP)) {
      tableWithMap=false;
    }
  }
  return tableWithMap;
}","protected boolean isSubValid(Item item,ERepositoryObjectType type,RepositoryNode seletetedNode,IComponent component,String repositoryType){
  boolean isValid=true;
  String componentName=component.getName();
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    if (componentName.toUpperCase().endsWith(MAP)) {
      isValid=false;
    }
  }
  if (seletetedNode != null) {
    IRepositoryViewObject repObject=seletetedNode.getObject();
    if (repObject instanceof MetadataTableRepositoryObject) {
      MetadataTable table=((MetadataTableRepositoryObject)repObject).getTable();
      if (table != null) {
        IMetadataTable metadataTable=ConvertionHelper.convert(table);
        if (isAvroType(metadataTable) && (""String_Node_Str"".equals(componentName) || ""String_Node_Str"".equals(componentName))) {
          isValid=false;
        }
      }
    }
  }
  return isValid;
}",0.4809098294069862
124885,"private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
  return null;
}","private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.RESOURCEMANAGER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJtOrRmPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.JOBHISTORY_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobHistoryPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_PORT.getName().equals(value)) {
    return hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_PORT);
  }
 else   if (EParameterNameForComponent.PARA_NAME_WEBHCAT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_STATUSDIR.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_WEB_HCAT_JOB_RESULT_FOLDER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_HDINSIGHT_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HDI_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_HOST.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_HOSTNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_CONTAINER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_CONTAINER));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_USERNAME.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_USERNAME));
  }
 else   if (EParameterNameForComponent.PARA_NAME_WASB_PASSWORD.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_PASSWORD));
  }
 else   if (EParameterNameForComponent.PARA_NAME_REMOTE_FOLDER.getName().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_AZURE_DEPLOY_BLOB));
  }
  return null;
}",0.953296454157976
124886,"/** 
 * Getter for isCanceled.
 * @return the isCanceled
 */
public boolean isCanceled(){
  return this.isCanceled;
}","/** 
 * Getter for isCanceled.
 * @return the isCanceled
 */
public boolean isCanceled(){
  return this.isCanceled || Thread.currentThread().isInterrupted();
}",0.8478260869565217
124887,"@Override public void run(){
  int unCompletedTaskCount=threadExecutor.getUncompletedTaskCount();
  boolean hasThreadRunning=!(unCompletedTaskCount == 1);
  parentWizardPage.setPageComplete(!hasThreadRunning);
  if (!hasThreadRunning) {
    notShowAgain=false;
  }
}","@Override public void run(){
  boolean hasThreadRunning=!(threadExecutor.getActiveCount() == 1);
  parentWizardPage.setPageComplete(!hasThreadRunning);
  if (!hasThreadRunning) {
    notShowAgain=false;
  }
}",0.4894514767932489
124888,"private void refreshTable(final TreeItem treeItem,final int size){
  IHDFSNode node=(IHDFSNode)treeItem.getData();
  if (!threadExecutor.isThreadRunning(treeItem)) {
    if (node.getType() == EHadoopFileTypes.FILE) {
      RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem,threadExecutor);
      threadExecutor.execute(runnable);
    }
  }
 else {
    RetrieveColumnRunnable runnable=threadExecutor.getRunnable(node.getPath());
    runnable.setCanceled(false);
  }
}","private void refreshTable(final TreeItem treeItem,final int size){
  IHDFSNode node=(IHDFSNode)treeItem.getData();
  if (!threadExecutor.isThreadRunning(treeItem)) {
    if (node.getType() == EHadoopFileTypes.FILE) {
      RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
      threadExecutor.execute(runnable);
    }
  }
 else {
    RetrieveColumnRunnable runnable=threadExecutor.getRunnable(node.getPath());
    runnable.setCanceled(false);
  }
}",0.7051416579223505
124889,"/** 
 * DOC cmeng Comment method ""updateCompleteStatus"".
 */
private void updateCompleteStatus(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      int unCompletedTaskCount=threadExecutor.getUncompletedTaskCount();
      boolean hasThreadRunning=!(unCompletedTaskCount == 1);
      parentWizardPage.setPageComplete(!hasThreadRunning);
      if (!hasThreadRunning) {
        notShowAgain=false;
      }
    }
  }
);
}","/** 
 * DOC cmeng Comment method ""updateCompleteStatus"".
 */
private void updateCompleteStatus(){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      boolean hasThreadRunning=!(threadExecutor.getActiveCount() == 1);
      parentWizardPage.setPageComplete(!hasThreadRunning);
      if (!hasThreadRunning) {
        notShowAgain=false;
      }
    }
  }
);
}",0.8364928909952607
124890,"private RetrieveSchemaThreadPoolExecutor(int queueCapacity,int maxPoolSize,RejectedExecutionHandler handler,Map<String,RetrieveColumnRunnable> runnableMap,List<RetrieveSchemaThreadPoolExecutor> executors){
  super(queueCapacity,maxPoolSize,0,TimeUnit.SECONDS,new ArrayBlockingQueue<Runnable>(queueCapacity),handler);
  this.queueCapacity=queueCapacity;
  this.runnableMap=runnableMap;
  this.executors=executors;
}","private RetrieveSchemaThreadPoolExecutor(int queueCapacity,int maxPoolSize,RejectedExecutionHandler handler,Map<String,RetrieveColumnRunnable> runnableMap,List<RetrieveSchemaThreadPoolExecutor> executors){
  super(queueCapacity,maxPoolSize,0,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),handler);
  this.runnableMap=runnableMap;
}",0.8190224570673712
124891,"/** 
 * Find the RetrieveColumnRunnable from map and waiting queue. Map stores running runnables
 * @param key
 * @return
 */
public RetrieveColumnRunnable getRunnable(String key){
  RetrieveColumnRunnable runnable=runnableMap.get(key);
  if (runnable != null) {
    return runnable;
  }
  for (  RetrieveSchemaThreadPoolExecutor executor : executors) {
    BlockingQueue<Runnable> queue=executor.getQueue();
    for (    Object element2 : queue) {
      RetrieveColumnRunnable element=(RetrieveColumnRunnable)element2;
      if (key.equals(element.getKey())) {
        return element;
      }
    }
  }
  return null;
}","/** 
 * Find the RetrieveColumnRunnable from map and waiting queue. Map stores running runnables
 * @param key
 * @return
 */
public RetrieveColumnRunnable getRunnable(String key){
  RetrieveColumnRunnable runnable=runnableMap.get(key);
  if (runnable != null) {
    return runnable;
  }
  BlockingQueue<Runnable> queue=getQueue();
  for (  Object element2 : queue) {
    RetrieveColumnRunnable element=(RetrieveColumnRunnable)element2;
    if (key.equals(element.getKey())) {
      return element;
    }
  }
  return null;
}",0.8524017467248908
124892,"RetrieveColumnRunnable(TreeItem treeItem,RetrieveSchemaThreadPoolExecutor _parentExecutor){
  this.treeItem=treeItem;
  this.fileNode=(IHDFSNode)treeItem.getData();
  this.key=this.fileNode.getPath();
  this.parentExecutor=_parentExecutor;
  setup();
}","RetrieveColumnRunnable(TreeItem treeItem){
  this.treeItem=treeItem;
  this.fileNode=(IHDFSNode)treeItem.getData();
  this.key=this.fileNode.getPath();
  setup();
}",0.7884615384615384
124893,"@Override protected void addUtilsButtonListeners(){
  checkConnectionBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      checkConnection();
    }
  }
);
  selectAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      updateStatus(IStatus.ERROR,null);
      long checkedSize=0;
      checkedSize=fetchAllChildren(schemaTree.getItems());
      boolean continueCheck=true;
      if (INFORM_SIZE < checkedSize) {
        continueCheck=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",new Object[]{INFORM_SIZE}));
      }
      if (continueCheck) {
        updateItems(schemaTree.getItems(),true,false);
      }
    }
  }
);
  selectNoneBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      threadExecutor.clearThreads();
      initializeThreadExecutor();
      fetchAllChildren(schemaTree.getItems());
      updateItems(schemaTree.getItems(),false,false);
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  checkConnectionBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      checkConnection();
    }
  }
);
  selectAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      updateStatus(IStatus.ERROR,null);
      long checkedSize=0;
      checkedSize=fetchAllChildren(schemaTree.getItems());
      boolean continueCheck=true;
      if (INFORM_SIZE < checkedSize) {
        continueCheck=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",new Object[]{INFORM_SIZE}));
      }
      if (continueCheck) {
        updateItems(schemaTree.getItems(),true,false);
      }
    }
  }
);
  selectNoneBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      threadExecutor.clearThreads();
      fetchAllChildren(schemaTree.getItems());
      updateItems(schemaTree.getItems(),false,false);
    }
  }
);
}",0.9849290780141844
124894,"@Override protected void addFieldsListeners(){
  nameFilter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      schemaTreeViewer.refresh();
    }
  }
);
  schemaTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        final TreeItem treeItem=(TreeItem)e.item;
        IHDFSNode node=(IHDFSNode)treeItem.getData();
        final boolean promptNeeded=treeItem.getChecked();
        EHadoopFileTypes type=node.getType();
        if (type != EHadoopFileTypes.FILE) {
          treeItem.setGrayed(promptNeeded);
        }
        if (type == EHadoopFileTypes.FILE) {
          if (promptNeeded) {
            treeItem.setText(3,EMPTY_STRING);
            treeItem.setText(4,Messages.getString(""String_Node_Str""));
            parentWizardPage.setPageComplete(false);
            refreshTable(treeItem,-1);
          }
 else {
            clearTreeItem(treeItem);
          }
        }
 else         if (type == EHadoopFileTypes.FOLDER) {
          long checkedSize=fetchAllChildren(new TreeItem[]{treeItem});
          boolean continueCheck=true;
          if (promptNeeded && INFORM_SIZE < checkedSize) {
            continueCheck=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",new Object[]{INFORM_SIZE}));
          }
          if (continueCheck) {
            updateItems(treeItem.getItems(),promptNeeded,true);
          }
 else {
            treeItem.setGrayed(!promptNeeded);
            treeItem.setChecked(!promptNeeded);
          }
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  nameFilter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      schemaTreeViewer.refresh();
    }
  }
);
  schemaTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        final TreeItem treeItem=(TreeItem)e.item;
        IHDFSNode node=(IHDFSNode)treeItem.getData();
        final boolean promptNeeded=treeItem.getChecked();
        EHadoopFileTypes type=node.getType();
        if (type != EHadoopFileTypes.FILE) {
          treeItem.setGrayed(promptNeeded);
        }
        if (type == EHadoopFileTypes.FILE) {
          if (promptNeeded) {
            treeItem.setText(3,EMPTY_STRING);
            treeItem.setText(4,Messages.getString(""String_Node_Str""));
            parentWizardPage.setPageComplete(false);
            refreshTable(treeItem,-1);
          }
 else {
            clearTreeItem(treeItem);
          }
        }
 else         if (type == EHadoopFileTypes.FOLDER) {
          if (!promptNeeded) {
            threadExecutor.clearRunnable(node.getPath());
          }
          long checkedSize=fetchAllChildren(new TreeItem[]{treeItem});
          boolean continueCheck=true;
          if (promptNeeded && INFORM_SIZE < checkedSize) {
            continueCheck=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",new Object[]{INFORM_SIZE}));
          }
          if (continueCheck) {
            updateItems(treeItem.getItems(),promptNeeded,true);
          }
 else {
            treeItem.setGrayed(!promptNeeded);
            treeItem.setChecked(!promptNeeded);
          }
        }
      }
    }
  }
);
}",0.9710020097616996
124895,"@Override protected void afterExecute(Runnable r,Throwable t){
  RetrieveColumnRunnable runnable=(RetrieveColumnRunnable)r;
  runnableMap.remove(runnable.getKey());
  --currentTaskSize;
}","@Override protected void afterExecute(Runnable r,Throwable t){
  RetrieveColumnRunnable runnable=(RetrieveColumnRunnable)r;
  runnableMap.remove(runnable.getKey());
}",0.9405099150141644
124896,"@Override public boolean isValidForDataViewer(IMetadataTable metadataTable){
  if (metadataTable == null) {
    return false;
  }
  String partition=metadataTable.getAdditionalProperties().get(HCatalogConstants.PARTITIONS);
  String partitionName=ExtractMetaDataFromHCatalog.extractPartitionNameByJsonStr(partition);
  if (StringUtils.isEmpty(partitionName)) {
    Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}","@Override public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable){
  if (!canHandle(connection)) {
    return false;
  }
  if (metadataTable == null) {
    return false;
  }
  String partition=metadataTable.getAdditionalProperties().get(HCatalogConstants.PARTITIONS);
  String partitionName=ExtractMetaDataFromHCatalog.extractPartitionNameByJsonStr(partition);
  if (StringUtils.isEmpty(partitionName)) {
    Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}",0.939873417721519
124897,"@Override public boolean isValidForDataViewer(IMetadataTable metadataTable){
  if (metadataTable == null) {
    return false;
  }
  Map<String,String> additionalProperties=metadataTable.getAdditionalProperties();
  if (additionalProperties == null) {
    return false;
  }
  String strFileType=additionalProperties.get(HDFSConstants.HDFS_FILE_TYPE);
  if (StringUtils.isEmpty(strFileType)) {
    return false;
  }
  EHDFSFileTypes hdfsFileType=EHDFSFileTypes.valueOf(strFileType);
  if (EHDFSFileTypes.AVRO == hdfsFileType) {
    Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}","@Override public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable){
  if (!canHandle(connection)) {
    return false;
  }
  if (metadataTable == null) {
    return false;
  }
  Map<String,String> additionalProperties=metadataTable.getAdditionalProperties();
  if (additionalProperties == null) {
    return false;
  }
  String strFileType=additionalProperties.get(HDFSConstants.HDFS_FILE_TYPE);
  if (StringUtils.isEmpty(strFileType)) {
    return false;
  }
  EHDFSFileTypes hdfsFileType=EHDFSFileTypes.valueOf(strFileType);
  if (EHDFSFileTypes.AVRO == hdfsFileType) {
    Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    return false;
  }
  return true;
}",0.9523212045169384
124898,"private void addVersionFields(Composite parent){
  Group versionGroup=Form.createGroup(parent,3,TOozieUIConstants.OOZIE_LBL_VERSION_GROUP);
  versionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  List<String> filterDistributionDisplayNames=EHadoopDistributions.getAllDistributionDisplayNames();
  filterDistributionDisplayNames.remove(EHadoopDistributions.APACHE.getDisplayName());
  filterDistributionDisplayNames.remove(EHadoopDistributions.AMAZON_EMR.getDisplayName());
  filterDistributionDisplayNames.remove(EHadoopDistributions.PIVOTAL_HD.getDisplayName());
  hadoopDistributionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_DISTRIBUTION,""String_Node_Str"",filterDistributionDisplayNames.toArray(new String[0]),2,true);
  hadoopVersionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_VERSION,""String_Node_Str"",new String[0],2,true);
  customButton=new Button(versionGroup,SWT.NULL);
  customButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  customButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,true,false,1,1));
  useYarnButton=new Button(versionGroup,SWT.CHECK);
  useYarnButton.setText(""String_Node_Str"");
  useYarnButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,true,false,2,1));
}","private void addVersionFields(Composite parent){
  Group versionGroup=Form.createGroup(parent,3,TOozieUIConstants.OOZIE_LBL_VERSION_GROUP);
  versionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  List<String> filterDistributionDisplayNames=EHadoopDistributions.getAllDistributionDisplayNames();
  filterDistributionDisplayNames.remove(EHadoopDistributions.APACHE.getDisplayName());
  filterDistributionDisplayNames.remove(EHadoopDistributions.AMAZON_EMR.getDisplayName());
  hadoopDistributionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_DISTRIBUTION,""String_Node_Str"",filterDistributionDisplayNames.toArray(new String[0]),2,true);
  hadoopVersionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_VERSION,""String_Node_Str"",new String[0],2,true);
  customButton=new Button(versionGroup,SWT.NULL);
  customButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  customButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,true,false,1,1));
  useYarnButton=new Button(versionGroup,SWT.CHECK);
  useYarnButton.setText(""String_Node_Str"");
  useYarnButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,true,false,2,1));
}",0.9635270541082164
124899,"private void updateVersionPart(EHadoopDistributions distribution){
  GridData distriData=(GridData)hadoopDistributionCombo.getCombo().getLayoutData();
  if (distribution == EHadoopDistributions.CUSTOM) {
    hadoopVersionCombo.setHideWidgets(true);
    distriData.horizontalSpan=1;
    hideControl(customButton,false);
    hideControl(useYarnButton,false);
    hideControl(customGroup,false);
  }
 else {
    hadoopVersionCombo.setHideWidgets(false);
    distriData.horizontalSpan=2;
    hideControl(customButton,true);
    hideControl(useYarnButton,true);
    hideControl(customGroup,true);
    List<String> items=getDistributionVersions(distribution);
    if (distribution == EHadoopDistributions.MAPR) {
      items.remove(EHadoopVersion4Drivers.MAPR1.getVersionDisplay());
    }
    String[] versions=new String[items.size()];
    items.toArray(versions);
    hadoopVersionCombo.getCombo().setItems(versions);
    if (versions.length > 0) {
      hadoopVersionCombo.getCombo().select(0);
    }
  }
}","private void updateVersionPart(EHadoopDistributions distribution){
  GridData distriData=(GridData)hadoopDistributionCombo.getCombo().getLayoutData();
  if (distribution == EHadoopDistributions.CUSTOM) {
    hadoopVersionCombo.setHideWidgets(true);
    distriData.horizontalSpan=1;
    hideControl(customButton,false);
    hideControl(useYarnButton,false);
    hideControl(customGroup,false);
  }
 else {
    hadoopVersionCombo.setHideWidgets(false);
    distriData.horizontalSpan=2;
    hideControl(customButton,true);
    hideControl(useYarnButton,true);
    hideControl(customGroup,true);
    List<String> items=getDistributionVersions(distribution);
    if (distribution == EHadoopDistributions.MAPR) {
      items.remove(EHadoopVersion4Drivers.MAPR1.getVersionDisplay());
    }
    if (distribution == EHadoopDistributions.PIVOTAL_HD) {
      items.remove(EHadoopVersion4Drivers.PIVOTAL_HD_1_0_1.getVersionDisplay());
    }
    String[] versions=new String[items.size()];
    items.toArray(versions);
    hadoopVersionCombo.getCombo().setItems(versions);
    if (versions.length > 0) {
      hadoopVersionCombo.getCombo().select(0);
    }
  }
}",0.9321561338289964
124900,"@Override public Control createControl(final Composite subComposite,final IElementParameter param,final int numInRow,final int nbInRow,final int top,final Control lastControl){
  this.curParameter=param;
  Button btnEdit=getWidgetFactory().createButton(subComposite,EMPTY_STRING,SWT.PUSH);
  FormData data;
  btnEdit.setImage(ImageProvider.getImage(CoreUIPlugin.getImageDescriptor(DOTS_BUTTON)));
  data=new FormData();
  data.left=new FormAttachment(((numInRow * MAX_PERCENT) / nbInRow),-STANDARD_BUTTON_WIDTH);
  data.right=new FormAttachment(((numInRow * MAX_PERCENT) / nbInRow),0);
  data.top=new FormAttachment(0,top);
  data.height=STANDARD_HEIGHT - 2;
  btnEdit.setLayoutData(data);
  btnEdit.setData(NAME,getControllerName());
  btnEdit.setData(PARAMETER_NAME,param.getName());
  btnEdit.setEnabled(!param.isReadOnly());
  btnEdit.addSelectionListener(listenerSelection);
  DecoratedField dField=new DecoratedField(subComposite,SWT.BORDER,new SelectAllTextControlCreator());
  if (param.isRequired()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_REQUIRED);
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.TOP,false);
  }
  Control cLayout=dField.getLayoutControl();
  Text labelText=(Text)dField.getControl();
  cLayout.setBackground(subComposite.getBackground());
  if (!elem.isReadOnly()) {
    labelText.setEditable(!param.isReadOnly() && !param.isRepositoryValueUsed());
  }
 else {
    labelText.setEditable(false);
  }
  labelText.setData(PARAMETER_NAME,param.getName());
  editionControlHelper.register(param.getName(),labelText);
  addDragAndDropTarget(labelText);
  if (elem instanceof Node) {
    labelText.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  CLabel labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName());
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  data.right=new FormAttachment(btnEdit,0);
  data.top=new FormAttachment(btnEdit,0,SWT.CENTER);
  cLayout.setLayoutData(data);
  hashCurControls.put(param.getName(),labelText);
  Point initialSize=dField.getLayoutControl().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return btnEdit;
}","@Override public Control createControl(final Composite subComposite,final IElementParameter param,final int numInRow,final int nbInRow,final int top,final Control lastControl){
  this.curParameter=param;
  FormData data;
  CLabel labelLabel=getWidgetFactory().createCLabel(subComposite,param.getDisplayName());
  data=new FormData();
  if (lastControl != null) {
    data.left=new FormAttachment(lastControl,0);
  }
 else {
    data.left=new FormAttachment((((numInRow - 1) * MAX_PERCENT) / nbInRow),0);
  }
  data.top=new FormAttachment(0,top);
  labelLabel.setLayoutData(data);
  if (numInRow != 1) {
    labelLabel.setAlignment(SWT.RIGHT);
  }
  Button btnEdit=getWidgetFactory().createButton(subComposite,EMPTY_STRING,SWT.PUSH);
  btnEdit.setImage(ImageProvider.getImage(CoreUIPlugin.getImageDescriptor(DOTS_BUTTON)));
  data=new FormData();
  data.left=new FormAttachment(((numInRow * MAX_PERCENT) / nbInRow),-STANDARD_BUTTON_WIDTH);
  data.right=new FormAttachment(((numInRow * MAX_PERCENT) / nbInRow),0);
  data.top=new FormAttachment(labelLabel,0,SWT.CENTER);
  data.height=STANDARD_HEIGHT - 2;
  btnEdit.setLayoutData(data);
  btnEdit.setData(NAME,getControllerName());
  btnEdit.setData(PARAMETER_NAME,param.getName());
  btnEdit.setEnabled(!param.isReadOnly());
  btnEdit.addSelectionListener(listenerSelection);
  DecoratedField dField=new DecoratedField(subComposite,SWT.BORDER,new SelectAllTextControlCreator());
  if (param.isRequired()) {
    FieldDecoration decoration=FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_REQUIRED);
    dField.addFieldDecoration(decoration,SWT.RIGHT | SWT.TOP,false);
  }
  Control cLayout=dField.getLayoutControl();
  Text labelText=(Text)dField.getControl();
  cLayout.setBackground(subComposite.getBackground());
  if (!elem.isReadOnly()) {
    labelText.setEditable(!param.isReadOnly() && !param.isRepositoryValueUsed());
  }
 else {
    labelText.setEditable(false);
  }
  labelText.setData(PARAMETER_NAME,param.getName());
  editionControlHelper.register(param.getName(),labelText);
  addDragAndDropTarget(labelText);
  if (elem instanceof Node) {
    labelText.setToolTipText(VARIABLE_TOOLTIP + param.getVariableName());
  }
  data=new FormData();
  int currentLabelWidth=STANDARD_LABEL_WIDTH;
  GC gc=new GC(labelLabel);
  Point labelSize=gc.stringExtent(param.getDisplayName());
  gc.dispose();
  if ((labelSize.x + ITabbedPropertyConstants.HSPACE) > currentLabelWidth) {
    currentLabelWidth=labelSize.x + ITabbedPropertyConstants.HSPACE;
  }
  if (numInRow == 1) {
    if (lastControl != null) {
      data.left=new FormAttachment(lastControl,currentLabelWidth);
    }
 else {
      data.left=new FormAttachment(0,currentLabelWidth);
    }
  }
 else {
    data.left=new FormAttachment(labelLabel,0,SWT.RIGHT);
  }
  data.right=new FormAttachment(btnEdit,0);
  data.top=new FormAttachment(labelLabel,0,SWT.CENTER);
  cLayout.setLayoutData(data);
  hashCurControls.put(param.getName(),labelText);
  Point initialSize=dField.getLayoutControl().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  dynamicProperty.setCurRowSize(initialSize.y + ITabbedPropertyConstants.VSPACE);
  return btnEdit;
}",0.2522522522522522
124901,"protected ConnectionStatus checkConnection(boolean displayDialog){
  final HDFSConnectionBean connectionBean=getConnectionBean();
  AProgressMonitorDialogWithCancel<ConnectionStatus> checkingDialog=new AProgressMonitorDialogWithCancel<ConnectionStatus>(getShell()){
    @Override protected ConnectionStatus runWithCancel(    IProgressMonitor monitor) throws Exception {
      return HadoopOperationManager.getInstance().testConnection(connectionBean);
    }
  }
;
  String executeMessage=Messages.getString(""String_Node_Str"");
  Throwable executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  ConnectionStatus connectionStatus=checkingDialog.getExecuteResult();
  if (checkingDialog.isUserCanncelled()) {
    return connectionStatus;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  String connectException=null;
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return connectionStatus;
    }
    hdfsSettingIsValide=false;
    connectException=executeException.getMessage();
  }
 else {
    hdfsSettingIsValide=connectionStatus.getResult();
    connectException=connectionStatus.getMessageException();
  }
  if (hdfsSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    if (displayDialog) {
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",connectionItem.getProperty().getDisplayName()));
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    if (displayDialog) {
      new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,mainMsg,connectException);
    }
  }
  return connectionStatus;
}","protected ConnectionStatus checkConnection(boolean displayDialog){
  final HDFSConnectionBean connectionBean=getConnectionBean();
  AProgressMonitorDialogWithCancel<ConnectionStatus> checkingDialog=new AProgressMonitorDialogWithCancel<ConnectionStatus>(getShell()){
    @Override protected ConnectionStatus runWithCancel(    IProgressMonitor monitor) throws Throwable {
      return HadoopOperationManager.getInstance().testConnection(connectionBean);
    }
  }
;
  String executeMessage=Messages.getString(""String_Node_Str"");
  Throwable executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  ConnectionStatus connectionStatus=checkingDialog.getExecuteResult();
  if (checkingDialog.isUserCanncelled()) {
    return connectionStatus;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  String connectException=null;
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return connectionStatus;
    }
    hdfsSettingIsValide=false;
    connectException=executeException.getMessage();
  }
 else {
    hdfsSettingIsValide=connectionStatus.getResult();
    connectException=connectionStatus.getMessageException();
  }
  if (hdfsSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    if (displayDialog) {
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",connectionItem.getProperty().getDisplayName()));
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    if (displayDialog) {
      new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,mainMsg,connectException);
    }
  }
  return connectionStatus;
}",0.995592556317336
124902,"@Override protected ConnectionStatus runWithCancel(IProgressMonitor monitor) throws Exception {
  return HadoopOperationManager.getInstance().testConnection(connectionBean);
}","@Override protected ConnectionStatus runWithCancel(IProgressMonitor monitor) throws Throwable {
  return HadoopOperationManager.getInstance().testConnection(connectionBean);
}",0.9542857142857144
124903,"@Override public String getColumnText(Object element,int columnIndex){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
switch (columnIndex) {
case 0:
    String value=tableNode.getValue();
  if (value == null) {
    return ""String_Node_Str"";
  }
return value;
case 1:
if (type == TableNode.CATALOG) {
return ""String_Node_Str"";
}
 else if (type == TableNode.SCHEMA) {
return ""String_Node_Str"";
}
 else {
return tableNode.getItemType();
}
default :
return ""String_Node_Str"";
}
}","@Override public String getColumnText(Object element,int columnIndex){
  TableNode tableNode=(TableNode)element;
  List<Object> columnData=tableNode.getColumnDataList();
  int type=tableNode.getType();
switch (columnIndex) {
case 0:
    String value=tableNode.getValue();
  if (value == null) {
    return ""String_Node_Str"";
  }
return value;
case 1:
if (type == TableNode.CATALOG) {
return ""String_Node_Str"";
}
 else if (type == TableNode.SCHEMA) {
return ""String_Node_Str"";
}
 else {
return tableNode.getItemType();
}
default :
if (columnData != null && columnIndex < columnData.size()) {
Object columnObj=columnData.get(columnIndex);
if (columnObj != null) {
return columnObj.toString();
}
}
return ""String_Node_Str"";
}
}",0.8189233278955954
124904,"@Override public void run(){
  IViewReference[] viewRef=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  if (viewRef != null && viewRef.length > 0) {
    for (    IViewReference element : viewRef) {
      if (element.getView(true) instanceof TOozieView && OozieJobTrackerListener.getProcess().getLabel().equals(oozieJobName)) {
        TOozieView view=(TOozieView)element.getView(true);
        executeJobComposite=view.getExecuteJobComposite();
        Button runBtn=executeJobComposite.getRunBtn();
        Button scheduleBtn=executeJobComposite.getScheduleBtn();
        Button killBtn=executeJobComposite.getKillBtn();
        Text pathTxt=executeJobComposite.getPathText();
        Button pathBtn=executeJobComposite.getBtnEdit();
        Text outputTxt=executeJobComposite.getOutputTxt();
switch (status) {
case INIT:
          break;
case DEPLOYING:
        runBtn.setEnabled(false);
      scheduleBtn.setEnabled(false);
    killBtn.setEnabled(false);
  pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case PREP:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case RUNNING:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case SUCCEEDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case KILLED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case FAILED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case SUSPENDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
}
}
}
}
}","@Override public void run(){
  IViewReference[] viewRef=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  if (viewRef != null && viewRef.length > 0) {
    for (    IViewReference element : viewRef) {
      if (element.getView(true) instanceof TOozieView && OozieJobTrackerListener.getProcess().getLabel().equals(oozieJobName)) {
        TOozieView view=(TOozieView)element.getView(true);
        executeJobComposite=view.getExecuteJobComposite();
        Button runBtn=executeJobComposite.getRunBtn();
        Button scheduleBtn=executeJobComposite.getScheduleBtn();
        Button killBtn=executeJobComposite.getKillBtn();
        Text pathTxt=executeJobComposite.getPathText();
        Button pathBtn=executeJobComposite.getBtnEdit();
        Text outputTxt=executeJobComposite.getOutputTxt();
switch (status) {
case INIT:
          break;
case DEPLOYING:
        runBtn.setEnabled(false);
      scheduleBtn.setEnabled(false);
    killBtn.setEnabled(false);
  pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case PREP:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case RUNNING:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case SUCCEEDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case CANCELED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case KILLED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case FAILED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case SUSPENDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
}
}
}
}
}",0.9599826011309264
124905,"/** 
 * Submits a job to run remotely on Hadoop,
 * @param monitor
 * @param jobContext
 * @param output
 * @return
 * @throws JobSubmissionException
 * @throws InterruptedException
 * @throws URISyntaxException
 * @throws OozieClientException
 */
private IStatus runRemoteJob(IProgressMonitor monitor,JobContext jobContext,StringBuffer output) throws JobSubmissionException, InterruptedException, URISyntaxException {
  String jobName=jobContext.getJobName();
  remoteJobSubmission=new RemoteJobSubmission();
  String jobIdInOozie=remoteJobSubmission.submit(jobContext);
  monitor.subTask(TOozieOutputMessages.MSG_OUTPUT_RUNNING);
  output.append(outputLogWithPrefixDate(TOozieOutputMessages.MSG_OUTPUT_RUNNING));
  updateOutputTextContents(output.toString(),jobName);
  updateAllEnabledOrNot(OozieJobProcessStatus.RUNNING,jobName);
  CorePlugin.getDefault().getPreferenceStore().putValue(TOozieCommonConstants.OOZIE_PREFIX_FOR_PREFERENCE + jobName,jobIdInOozie);
  if (monitor.isCanceled()) {
    output.append(""String_Node_Str"");
    updateOutputTextContents(output.toString(),jobName);
    return Status.CANCEL_STATUS;
  }
  monitor.worked(10);
  monitor.subTask(""String_Node_Str"");
  traceManager.putTrace(jobIdInOozie,output.toString());
  while (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie) && JobSubmission.Status.RUNNING == remoteJobSubmission.status(jobIdInOozie,getOozieEndPoint())) {
    Thread.sleep(1000 * 2);
  }
  checkJobStatus(jobIdInOozie,remoteJobSubmission,output,jobContext);
  updateAllEnabledOrNot(TOozieCommonUtils.convertToOozieJobProcessStatus(remoteJobSubmission.status(jobIdInOozie,getOozieEndPoint())),jobName);
  monitor.worked(50);
  return Status.OK_STATUS;
}","/** 
 * Submits a job to run remotely on Hadoop,
 * @param monitor
 * @param jobContext
 * @param output
 * @return
 * @throws JobSubmissionException
 * @throws InterruptedException
 * @throws URISyntaxException
 * @throws OozieClientException
 */
private IStatus runRemoteJob(IProgressMonitor monitor,JobContext jobContext,StringBuffer output) throws JobSubmissionException, InterruptedException, URISyntaxException {
  String jobName=jobContext.getJobName();
  remoteJobSubmission=new RemoteJobSubmission();
  String jobIdInOozie=remoteJobSubmission.submit(jobContext);
  monitor.subTask(TOozieOutputMessages.MSG_OUTPUT_RUNNING);
  output.append(outputLogWithPrefixDate(TOozieOutputMessages.MSG_OUTPUT_RUNNING));
  updateOutputTextContents(output.toString(),jobName);
  updateAllEnabledOrNot(OozieJobProcessStatus.RUNNING,jobName);
  CorePlugin.getDefault().getPreferenceStore().putValue(TOozieCommonConstants.OOZIE_PREFIX_FOR_PREFERENCE + jobName,jobIdInOozie);
  if (monitor.isCanceled()) {
    output.append(""String_Node_Str"");
    updateAllEnabledOrNot(OozieJobProcessStatus.CANCELED,jobName);
    updateOutputTextContents(output.toString(),jobName);
    return Status.CANCEL_STATUS;
  }
  monitor.worked(10);
  monitor.subTask(""String_Node_Str"");
  traceManager.putTrace(jobIdInOozie,output.toString());
  while (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie) && JobSubmission.Status.RUNNING == remoteJobSubmission.status(jobIdInOozie,getOozieEndPoint())) {
    Thread.sleep(1000 * 2);
  }
  checkJobStatus(jobIdInOozie,remoteJobSubmission,output,jobContext);
  updateAllEnabledOrNot(TOozieCommonUtils.convertToOozieJobProcessStatus(remoteJobSubmission.status(jobIdInOozie,getOozieEndPoint())),jobName);
  monitor.worked(50);
  return Status.OK_STATUS;
}",0.9807967899111494
124906,"/** 
 * DOC PLV Comment method ""initPropertyCombo"".
 */
protected void initPropertyCombo(){
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (process != null) {
    String connId=(String)process.getElementParameter(EOozieParameterName.REPOSITORY_CONNECTION_ID.getName()).getValue();
    if (StringUtils.isNotEmpty(connId)) {
      ooziePropertyTypeCombo.select(1);
      this.repositoryId=connId;
      Connection connection=TOozieParamUtils.getOozieConnectionById(connId);
      if (connection != null) {
        oozieRepositoryText.setText(connection.getLabel());
        oozieRepositoryText.setVisible(true);
        oozieSelectBtn.setVisible(true);
      }
    }
  }
 else {
    ooziePropertyTypeCombo.select(0);
    oozieRepositoryText.setVisible(false);
    oozieSelectBtn.setVisible(false);
  }
}","/** 
 * DOC PLV Comment method ""initPropertyCombo"".
 */
protected void initPropertyCombo(){
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (process != null) {
    String connId=(String)process.getElementParameter(EOozieParameterName.REPOSITORY_CONNECTION_ID.getName()).getValue();
    if (StringUtils.isNotEmpty(connId)) {
      ooziePropertyTypeCombo.select(1);
      this.repositoryId=connId;
      Connection connection=TOozieParamUtils.getOozieConnectionById(connId);
      if (connection != null) {
        oozieRepositoryText.setText(connection.getLabel());
        oozieRepositoryText.setVisible(true);
        oozieSelectBtn.setVisible(true);
        return;
      }
    }
  }
  ooziePropertyTypeCombo.select(0);
  oozieRepositoryText.setVisible(false);
  oozieSelectBtn.setVisible(false);
}",0.9791666666666666
124907,"@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.addAll(loadRepViewObjectWithOtherTypes(ERepositoryObjectType.PROCESS));
  ERepositoryObjectType mrRepObjType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  list.addAll(loadRepViewObjectWithOtherTypes(mrRepObjType));
  list.addAll(loadRepViewObjectWithOtherTypes(ERepositoryObjectType.ROUTINES));
  return list;
}","@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  List<IRepositoryViewObject> processList=getAllProcessTypeObjectsWithoutCurrentType();
  if (processList != null && !processList.isEmpty()) {
    list.addAll(processList);
  }
  list.addAll(loadRepViewObjectWithOtherTypes(ERepositoryObjectType.ROUTINES));
  return list;
}",0.6066066066066066
124908,"@Override protected void createButtonsForButtonBar(Composite parent){
  createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,true);
}","@Override protected void createButtonsForButtonBar(Composite parent){
  createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CLOSE_LABEL,true);
}",0.977635782747604
124909,"private void addSchemaFields(){
  schemaTreeViewer=new ContainerCheckedTreeViewer(scrolledCompositeFileViewer,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  schemaTreeViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  schemaTreeViewer.setUseHashlookup(true);
  schemaTreeViewer.addFilter(new FileSelectorViewerFilter());
  schemaTree=schemaTreeViewer.getTree();
  schemaTree.setHeaderVisible(true);
  schemaTree.setLinesVisible(true);
  schemaTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=(TreeItem)event.item;
      for (      TreeItem item : treeItem.getItems()) {
        if (item.getData() != null) {
          IHDFSNode node=(IHDFSNode)item.getData();
          if (node.getType() == EHadoopFileTypes.FILE) {
            if (isExistTable(node)) {
              item.setChecked(true);
            }
 else {
              TreeEditor treeEditor=treeEditorMap.get(item);
              if (treeEditor == null) {
                item.setChecked(false);
              }
            }
          }
 else {
          }
        }
      }
    }
  }
);
  int columnWidth1=250;
  int columnWidth2=100;
  int columnWidth3=110;
  int columnWidth4=130;
  int columnWidth5=140;
  TreeColumn fileName=new TreeColumn(schemaTree,SWT.LEFT);
  fileName.setText(Messages.getString(""String_Node_Str""));
  fileName.setWidth(columnWidth1);
  TreeColumn fileType=new TreeColumn(schemaTree,SWT.LEFT);
  fileType.setText(Messages.getString(""String_Node_Str""));
  fileType.setWidth(columnWidth2);
  TreeColumn fileSize=new TreeColumn(schemaTree,SWT.LEFT);
  fileSize.setText(Messages.getString(""String_Node_Str""));
  fileSize.setWidth(columnWidth3);
  TreeColumn nbColumns=new TreeColumn(schemaTree,SWT.LEFT);
  nbColumns.setText(Messages.getString(""String_Node_Str""));
  nbColumns.setWidth(columnWidth4);
  TreeColumn creationStatus=new TreeColumn(schemaTree,SWT.LEFT);
  creationStatus.setText(Messages.getString(""String_Node_Str""));
  creationStatus.setWidth(columnWidth5);
  AbstractMetadataExtractorViewProvider viewProvider=new FileSelectorTreeViewerProvider();
  schemaTreeViewer.setLabelProvider(viewProvider);
  schemaTreeViewer.setContentProvider(viewProvider);
  schemaTreeViewer.setInput(getConnectionBean());
  scrolledCompositeFileViewer.setContent(schemaTree);
  scrolledCompositeFileViewer.setMinSize(schemaTree.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","private void addSchemaFields(){
  schemaTreeViewer=new ContainerCheckedTreeViewer(scrolledCompositeFileViewer,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  schemaTreeViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  schemaTreeViewer.setUseHashlookup(true);
  schemaTreeViewer.addFilter(new FileSelectorViewerFilter());
  schemaTree=schemaTreeViewer.getTree();
  schemaTree.setHeaderVisible(true);
  schemaTree.setLinesVisible(true);
  schemaTree.addListener(SWT.Expand,new Listener(){
    @Override public void handleEvent(    Event event){
      TreeItem treeItem=(TreeItem)event.item;
      for (      TreeItem item : treeItem.getItems()) {
        if (item.getData() != null) {
          IHDFSNode node=(IHDFSNode)item.getData();
          if (node.getType() == EHadoopFileTypes.FILE) {
            if (isExistTable(node)) {
              item.setChecked(true);
              updateParentItemCheckStatus(item);
            }
 else {
              TreeEditor treeEditor=treeEditorMap.get(item);
              if (treeEditor == null) {
                item.setChecked(false);
              }
            }
          }
 else {
          }
        }
      }
    }
  }
);
  int columnWidth1=250;
  int columnWidth2=100;
  int columnWidth3=110;
  int columnWidth4=130;
  int columnWidth5=140;
  TreeColumn fileName=new TreeColumn(schemaTree,SWT.LEFT);
  fileName.setText(Messages.getString(""String_Node_Str""));
  fileName.setWidth(columnWidth1);
  TreeColumn fileType=new TreeColumn(schemaTree,SWT.LEFT);
  fileType.setText(Messages.getString(""String_Node_Str""));
  fileType.setWidth(columnWidth2);
  TreeColumn fileSize=new TreeColumn(schemaTree,SWT.LEFT);
  fileSize.setText(Messages.getString(""String_Node_Str""));
  fileSize.setWidth(columnWidth3);
  TreeColumn nbColumns=new TreeColumn(schemaTree,SWT.LEFT);
  nbColumns.setText(Messages.getString(""String_Node_Str""));
  nbColumns.setWidth(columnWidth4);
  TreeColumn creationStatus=new TreeColumn(schemaTree,SWT.LEFT);
  creationStatus.setText(Messages.getString(""String_Node_Str""));
  creationStatus.setWidth(columnWidth5);
  AbstractMetadataExtractorViewProvider viewProvider=new FileSelectorTreeViewerProvider();
  schemaTreeViewer.setLabelProvider(viewProvider);
  schemaTreeViewer.setContentProvider(viewProvider);
  schemaTreeViewer.setInput(getConnectionBean());
  scrolledCompositeFileViewer.setContent(schemaTree);
  scrolledCompositeFileViewer.setMinSize(schemaTree.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}",0.9901744535793062
124910,"private static void updateParentItemCheckStatus(TreeItem item){
  TreeItem parentItem=item.getParentItem();
  if (parentItem == null) {
    return;
  }
  boolean hasCheckedItem=false;
  boolean hasUncheckedItem=false;
  for (  TreeItem i : parentItem.getItems()) {
    if (hasCheckedItem && hasUncheckedItem) {
      break;
    }
    IHDFSNode node=(IHDFSNode)i.getData();
    if (node.getType() == EHadoopFileTypes.FOLDER && i.getGrayed() == true) {
      hasCheckedItem=true;
      hasUncheckedItem=true;
    }
    if (i.getChecked()) {
      hasCheckedItem=true;
    }
 else {
      hasUncheckedItem=true;
    }
  }
  if (!hasCheckedItem) {
    parentItem.setChecked(false);
  }
 else   if (hasCheckedItem && hasUncheckedItem) {
    parentItem.setGrayed(true);
  }
 else {
    parentItem.setChecked(true);
    parentItem.setGrayed(false);
  }
  updateParentItemCheckStatus(parentItem);
}","private static void updateParentItemCheckStatus(TreeItem item){
  TreeItem parentItem=item.getParentItem();
  if (parentItem == null) {
    return;
  }
  boolean hasCheckedItem=false;
  boolean hasUncheckedItem=false;
  for (  TreeItem i : parentItem.getItems()) {
    if (hasCheckedItem && hasUncheckedItem) {
      break;
    }
    IHDFSNode node=(IHDFSNode)i.getData();
    if (node.getType() == EHadoopFileTypes.FOLDER && i.getGrayed() == true) {
      hasCheckedItem=true;
      hasUncheckedItem=true;
    }
    if (i.getChecked()) {
      hasCheckedItem=true;
    }
 else {
      hasUncheckedItem=true;
    }
  }
  if (!hasCheckedItem) {
    parentItem.setChecked(false);
  }
 else   if (hasCheckedItem && hasUncheckedItem) {
    parentItem.setChecked(true);
    parentItem.setGrayed(true);
  }
 else {
    parentItem.setChecked(true);
    parentItem.setGrayed(false);
  }
  updateParentItemCheckStatus(parentItem);
}",0.9817981246552676
124911,"@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      IHDFSNode node=(IHDFSNode)item.getData();
      if (node.getType() == EHadoopFileTypes.FILE) {
        if (isExistTable(node)) {
          item.setChecked(true);
        }
 else {
          TreeEditor treeEditor=treeEditorMap.get(item);
          if (treeEditor == null) {
            item.setChecked(false);
          }
        }
      }
 else {
      }
    }
  }
}","@Override public void handleEvent(Event event){
  TreeItem treeItem=(TreeItem)event.item;
  for (  TreeItem item : treeItem.getItems()) {
    if (item.getData() != null) {
      IHDFSNode node=(IHDFSNode)item.getData();
      if (node.getType() == EHadoopFileTypes.FILE) {
        if (isExistTable(node)) {
          item.setChecked(true);
          updateParentItemCheckStatus(item);
        }
 else {
          TreeEditor treeEditor=treeEditorMap.get(item);
          if (treeEditor == null) {
            item.setChecked(false);
          }
        }
      }
 else {
      }
    }
  }
}",0.7396293027360988
124912,"@Override public String getColumnDbType(Object column) throws NoSQLServerException {
  String dbType=null;
  try {
    String type=(String)NoSQLReflection.invokeMethod(column,""String_Node_Str"");
    if (type != null && type.indexOf(""String_Node_Str"") != -1) {
      type=type.substring(type.lastIndexOf(""String_Node_Str"") + 1).toUpperCase();
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return dbType;
}","@Override public String getColumnDbType(Object column) throws NoSQLServerException {
  String dbType=null;
  try {
    String type=(String)NoSQLReflection.invokeMethod(column,""String_Node_Str"");
    if (type != null && type.indexOf(""String_Node_Str"") != -1) {
      dbType=type.substring(type.lastIndexOf(""String_Node_Str"") + 1);
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return dbType;
}",0.9791666666666666
124913,"protected ConnectionStatus checkConnection(boolean displayDialog){
  final HDFSConnectionBean connectionBean=getConnectionBean();
  AProgressMonitorDialogWithCancel<ConnectionStatus> checkingDialog=new AProgressMonitorDialogWithCancel<ConnectionStatus>(getShell()){
    @Override protected ConnectionStatus runWithCancel(    IProgressMonitor monitor) throws Exception {
      return HadoopOperationManager.getInstance().testConnection(connectionBean);
    }
  }
;
  String executeMessage=Messages.getString(""String_Node_Str"");
  Exception executeException=null;
  int timeout=DatabaseConnectionParameterUtil.getDefaultDBConnectionTimeout();
  if (0 < timeout) {
    timeout+=5;
  }
  try {
    checkingDialog.run(executeMessage,null,true,timeout);
  }
 catch (  Exception e) {
    executeException=e;
  }
  ConnectionStatus connectionStatus=checkingDialog.getExecuteResult();
  if (checkingDialog.isUserCanncelled()) {
    return connectionStatus;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  String connectException=null;
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return connectionStatus;
    }
    hdfsSettingIsValide=false;
    connectException=executeException.getMessage();
  }
 else {
    hdfsSettingIsValide=connectionStatus.getResult();
    connectException=connectionStatus.getMessageException();
  }
  if (hdfsSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    if (displayDialog) {
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",connectionItem.getProperty().getDisplayName()));
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    if (displayDialog) {
      new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,mainMsg,connectException);
    }
  }
  return connectionStatus;
}","protected ConnectionStatus checkConnection(boolean displayDialog){
  final HDFSConnectionBean connectionBean=getConnectionBean();
  AProgressMonitorDialogWithCancel<ConnectionStatus> checkingDialog=new AProgressMonitorDialogWithCancel<ConnectionStatus>(getShell()){
    @Override protected ConnectionStatus runWithCancel(    IProgressMonitor monitor) throws Exception {
      return HadoopOperationManager.getInstance().testConnection(connectionBean);
    }
  }
;
  String executeMessage=Messages.getString(""String_Node_Str"");
  Exception executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  ConnectionStatus connectionStatus=checkingDialog.getExecuteResult();
  if (checkingDialog.isUserCanncelled()) {
    return connectionStatus;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  String connectException=null;
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return connectionStatus;
    }
    hdfsSettingIsValide=false;
    connectException=executeException.getMessage();
  }
 else {
    hdfsSettingIsValide=connectionStatus.getResult();
    connectException=connectionStatus.getMessageException();
  }
  if (hdfsSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    if (displayDialog) {
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",connectionItem.getProperty().getDisplayName()));
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    if (displayDialog) {
      new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,mainMsg,connectException);
    }
  }
  return connectionStatus;
}",0.9339101177601538
124914,"public List<String> getKeySpaceNames(NoSQLConnection connection) throws NoSQLServerException {
  List<String> ksNames=new ArrayList<String>();
  initCluster(connection);
  try {
    List<Object> keySpaces=getKeySpaces(connection);
    for (    Object keySpace : keySpaces) {
      String ksName=(String)NoSQLReflection.invokeMethod(keySpace,""String_Node_Str"");
      ksNames.add(ksName);
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return ksNames;
}","@Override public List<String> getKeySpaceNames(NoSQLConnection connection) throws NoSQLServerException {
  List<String> ksNames=new ArrayList<String>();
  initCluster(connection);
  try {
    List<Object> keySpaces=getKeySpaces(connection);
    for (    Object keySpace : keySpaces) {
      String ksName=(String)NoSQLReflection.invokeMethod(keySpace,""String_Node_Str"");
      ksNames.add(ksName);
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return ksNames;
}",0.9897959183673468
124915,"@Override public String getColumnTalendType(Object column) throws NoSQLServerException {
  String talendType=null;
  try {
    Object type=NoSQLReflection.invokeMethod(column,""String_Node_Str"");
    if (type != null) {
      Object typeName=NoSQLReflection.invokeMethod(type,""String_Node_Str"");
      String dbType=(String)NoSQLReflection.invokeMethod(typeName,""String_Node_Str"");
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(ICassandraConstants.DBM_ID);
      talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType);
      if (talendType == null) {
        talendType=JavaTypesManager.STRING.getId();
      }
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return talendType;
}","@Override public String getColumnTalendType(Object column) throws NoSQLServerException {
  String talendType=null;
  try {
    String dbType=getColumnDbType(column);
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(ICassandraConstants.DBM_ID);
    talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType);
    if (talendType == null) {
      talendType=JavaTypesManager.STRING.getId();
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return talendType;
}",0.7758224942616679
124916,"@Override public String getColumnTalendType(Object column) throws NoSQLServerException {
  String talendType=null;
  try {
    String type=(String)NoSQLReflection.invokeMethod(column,""String_Node_Str"");
    if (type != null) {
      if (type.indexOf(""String_Node_Str"") != -1) {
        type=type.substring(type.lastIndexOf(""String_Node_Str"") + 1);
      }
      MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(ICassandraConstants.DBM_ID);
      talendType=mappingTypeRetriever.getDefaultSelectedTalendType(type);
      if (talendType == null) {
        talendType=JavaTypesManager.STRING.getId();
      }
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return talendType;
}","@Override public String getColumnTalendType(Object column) throws NoSQLServerException {
  String talendType=null;
  try {
    String dbType=getColumnDbType(column);
    MappingTypeRetriever mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(ICassandraConstants.DBM_ID);
    talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType);
    if (talendType == null) {
      talendType=JavaTypesManager.STRING.getId();
    }
  }
 catch (  Exception e) {
    throw new NoSQLServerException(e);
  }
  return talendType;
}",0.7859375
124917,"private List<MetadataColumn> extractTheColumns(NoSQLConnection connection,String ksName,String cfName) throws NoSQLExtractSchemaException {
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  ICassandraMetadataHandler metadataHandler=CassandraConnectionUtil.getMetadataHandler(connection);
  try {
    List<Object> columndfs=metadataHandler.getColumns(connection,ksName,cfName);
    for (    Object columndf : columndfs) {
      MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
      String colName=metadataHandler.getColumnName(connection,columndf);
      colName=MetadataToolHelper.validateValue(colName);
      column.setName(colName);
      column.setLabel(colName);
      String talendType=metadataHandler.getColumnTalendType(columndf);
      column.setTalendType(talendType);
      metadataColumns.add(column);
    }
  }
 catch (  Exception e) {
    throw new NoSQLExtractSchemaException(e);
  }
  return metadataColumns;
}","private List<MetadataColumn> extractTheColumns(NoSQLConnection connection,String ksName,String cfName) throws NoSQLExtractSchemaException {
  List<MetadataColumn> metadataColumns=new ArrayList<MetadataColumn>();
  ICassandraMetadataHandler metadataHandler=CassandraConnectionUtil.getMetadataHandler(connection);
  try {
    List<Object> columndfs=metadataHandler.getColumns(connection,ksName,cfName);
    for (    Object columndf : columndfs) {
      MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
      String colName=metadataHandler.getColumnName(connection,columndf);
      colName=MetadataToolHelper.validateValue(colName);
      column.setName(colName);
      column.setLabel(colName);
      String talendType=metadataHandler.getColumnTalendType(columndf);
      column.setTalendType(talendType);
      String dbType=metadataHandler.getColumnDbType(columndf);
      column.setSourceType(dbType);
      metadataColumns.add(column);
    }
  }
 catch (  Exception e) {
    throw new NoSQLExtractSchemaException(e);
  }
  return metadataColumns;
}",0.9517308629936616
124918,"private static Callable<Object> getDFS(final URI uri,final Object conf,final String userName,final ClassLoader classLoader){
  return new Callable<Object>(){
    @Override public Object call() throws Exception {
      return ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{uri,conf,userName});
    }
  }
;
}","/** 
 * DOC ycbai Comment method ""getDFS"". Provides access to the HDFS System.
 * @param connection
 * @return
 * @throws HadoopServerException
 */
public static Object getDFS(HDFSConnectionBean connection) throws HadoopServerException {
  if (connection == null) {
    return null;
  }
  String nameNodeURI=connection.getNameNodeURI();
  if (nameNodeURI == null) {
    return null;
  }
  Object dfs=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader classLoader=getClassLoader(connection);
    Thread.currentThread().setContextClassLoader(classLoader);
    Object conf=getConfiguration(connection);
    boolean enableKerberos=connection.isEnableKerberos();
    String userName=StringUtils.trimToNull(connection.getUserName());
    if (enableKerberos) {
      userName=null;
    }
    String group=StringUtils.trimToNull(connection.getGroup());
    if (userName == null || group != null) {
      dfs=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{conf});
    }
 else {
      dfs=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{new URI(EHadoopConfProperties.FS_DEFAULT_URI.get(conf)),conf,userName});
    }
  }
 catch (  Exception e) {
    throw new HadoopServerException(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
  return dfs;
}",0.2250696378830083
124919,"private void setHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,INode node,String repositoryValue){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.DISTRIBUTION.getParameterName());
    if (value != null) {
      hcConnection.setDistribution(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.DB_VERSION.getParameterName());
    if (value != null) {
      hcConnection.setDfVersion(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(repositoryValue)) {
    IElementParameter param=node.getElementParameter(EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getParameterName());
    if (param != null) {
      Object obj=param.getValue();
      if (obj != null) {
        Map<String,Set<String>> customVersionMap=HCVersionUtil.getRepCustomJarsParamFromComp((String)obj,ECustomVersionGroup.COMMON);
        HCVersionUtil.injectCustomVersionMap(hcConnection,customVersionMap);
      }
    }
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getParameterName());
    if (value != null) {
      hcConnection.setAuthMode(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getParameterName());
    if (value != null) {
      hcConnection.setNameNodeURI(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.USE_KRB.getParameterName());
    if (value != null) {
      hcConnection.setEnableKerberos(Boolean.valueOf(value));
    }
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getParameterName());
    if (value != null) {
      hcConnection.setPrincipal(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.USERNAME.getParameterName());
    if (value != null) {
      hcConnection.setUserName(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,EHDFSRepositoryToComponent.GROUP.getParameterName());
    if (value != null) {
      hcConnection.setGroup(value);
    }
  }
}","private void setHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,INode node,IElementParameter param){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setDistribution(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setDfVersion(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(param.getRepositoryValue())) {
    Object obj=param.getValue();
    if (obj != null) {
      Map<String,Set<String>> customVersionMap=HCVersionUtil.getRepCustomJarsParamFromComp((String)obj,ECustomVersionGroup.COMMON);
      HCVersionUtil.injectCustomVersionMap(hcConnection,customVersionMap);
    }
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setAuthMode(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setNameNodeURI(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setEnableKerberos(Boolean.valueOf(value));
    }
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setPrincipal(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setUserName(value);
    }
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(hcConnection,node,param);
    if (value != null) {
      hcConnection.setGroup(value);
    }
  }
}",0.6844489179667841
124920,"@Override public void setComponentValue(Connection connection,INode node,String repositoryValue){
  if (node != null && canHandle(connection)) {
    setHadoopClusterRepositoryValue((HadoopClusterConnection)connection,node,repositoryValue);
  }
}","@Override public void setComponentValue(Connection connection,INode node,IElementParameter param){
  if (node != null && canHandle(connection)) {
    setHadoopClusterRepositoryValue((HadoopClusterConnection)connection,node,param);
  }
}",0.4033264033264033
124921,"/** 
 * DOC ycbai Comment method ""updateHadoopClusterConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHadoopClusterConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * DOC ycbai Comment method ""updateHadoopClusterConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHadoopClusterConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9910913140311804
124922,"@Override public void setComponentValue(Connection connection,INode node,String repositoryValue){
  if (node != null && canHandle(connection)) {
    setHCatalogRepositoryValue((HCatalogConnection)connection,node,repositoryValue);
  }
}","@Override public void setComponentValue(Connection connection,INode node,IElementParameter param){
  if (node != null && canHandle(connection)) {
    setHCatalogRepositoryValue((HCatalogConnection)connection,node,param);
  }
}",0.4511930585683297
124923,"private void setHCatalogRepositoryValue(HCatalogConnection connection,INode node,String repositoryValue){
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,EHCatalogRepositoryToComponent.DISTRIBUTION.getParameterName());
    if (value != null) {
      connection.setDistribution(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,EHCatalogRepositoryToComponent.HCAT_VERSION.getParameterName());
    if (value != null) {
      connection.setHcatVersion(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,EHCatalogRepositoryToComponent.TEMPLETON_HOST.getParameterName());
    if (value != null) {
      connection.setHostName(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,EHCatalogRepositoryToComponent.TEMPLETON_PORT.getParameterName());
    if (value != null) {
      connection.setPort(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,EHCatalogRepositoryToComponent.DATABASE_NAME.getParameterName());
    if (value != null) {
      connection.setDatabase(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(repositoryValue)) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,EHCatalogRepositoryToComponent.USERNAME.getParameterName());
    if (value != null) {
      connection.setUserName(value);
    }
  }
}","private void setHCatalogRepositoryValue(HCatalogConnection connection,INode node,IElementParameter param){
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDistribution(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHcatVersion(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,param);
    if (value != null) {
      connection.setHostName(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,param);
    if (value != null) {
      connection.setPort(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,param);
    if (value != null) {
      connection.setDatabase(value);
    }
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(param.getRepositoryValue())) {
    String value=ComponentToRepositoryProperty.getParameterValue(connection,node,param);
    if (value != null) {
      connection.setUserName(value);
    }
  }
}",0.6631578947368421
124924,"/** 
 * DOC ycbai Comment method ""updateHCatalogConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHCatalogConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * DOC ycbai Comment method ""updateHCatalogConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHCatalogConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9903730445246692
124925,"public boolean checkIfAllValidOrNot(){
  boolean okBtnIsEnabled=false;
  boolean startTimeHasValue=hasStartTimeValue();
  boolean endTimeHasValue=hasEndTimeValue();
  boolean frequencyValueIsValid=checkFrequencyValue();
  if (startTimeHasValue && endTimeHasValue && frequencyValueIsValid)   okBtnIsEnabled=true;
 else   okBtnIsEnabled=false;
  return okBtnIsEnabled;
}","public boolean checkIfAllValidOrNot(){
  boolean okBtnIsEnabled=false;
  boolean checkTimeValue=checkTime();
  boolean frequencyValueIsValid=checkFrequencyValue();
  if (checkTimeValue && frequencyValueIsValid)   okBtnIsEnabled=true;
 else   okBtnIsEnabled=false;
  return okBtnIsEnabled;
}",0.6200607902735562
124926,"public boolean checkIfAllValidOrNot(){
  boolean okBtnIsEnabled=false;
  boolean startTimeHasValue=hasStartTimeValue();
  boolean endTimeHasValue=hasEndTimeValue();
  boolean frequencyValueIsValid=checkFrequencyValue();
  if (startTimeHasValue && endTimeHasValue && frequencyValueIsValid)   okBtnIsEnabled=true;
 else   okBtnIsEnabled=false;
  return okBtnIsEnabled;
}","public boolean checkIfAllValidOrNot(){
  boolean okBtnIsEnabled=false;
  boolean checkTimeValue=checkTime();
  boolean frequencyValueIsValid=checkFrequencyValue();
  if (checkTimeValue && frequencyValueIsValid)   okBtnIsEnabled=true;
 else   okBtnIsEnabled=false;
  return okBtnIsEnabled;
}",0.6200607902735562
124927,"/** 
 * DOC ycbai Comment method ""testConnection"". Test whether can connect to HDFS.
 * @return
 */
public static ConnectionStatus testConnection(HDFSConnectionBean connection){
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  String errorMsg=""String_Node_Str"" + connection.getNameNodeURI() + ""String_Node_Str"";
  Object dfs=null;
  try {
    dfs=getDFS(connection);
    if (dfs != null) {
      connectionStatus.setResult(true);
      connectionStatus.setMessageException(""String_Node_Str"");
    }
 else {
      connectionStatus.setMessageException(errorMsg);
    }
  }
 catch (  Exception e) {
    Set<String> jars=getMissingJars(connection);
    String missJarMsg=""String_Node_Str"";
    if (jars.size() > 0) {
      missJarMsg=""String_Node_Str"" + jars.toString() + ""String_Node_Str""+ ""String_Node_Str"";
    }
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(errorMsg + ""String_Node_Str"" + missJarMsg);
  }
 finally {
    if (dfs != null) {
      try {
        ReflectionUtils.invokeMethod(dfs,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
      }
    }
  }
  return connectionStatus;
}","/** 
 * DOC ycbai Comment method ""testConnection"". Test whether can connect to HDFS.
 * @return
 */
public static ConnectionStatus testConnection(HDFSConnectionBean connection){
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  String errorMsg=""String_Node_Str"" + connection.getNameNodeURI() + ""String_Node_Str"";
  Object dfs=null;
  try {
    dfs=getDFS(connection);
    if (dfs != null) {
      Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",getClassLoader(connection),new Object[]{ROOT_PATH});
      ReflectionUtils.invokeMethod(dfs,""String_Node_Str"",new Object[]{pathObj});
      connectionStatus.setResult(true);
      connectionStatus.setMessageException(""String_Node_Str"");
    }
 else {
      connectionStatus.setMessageException(errorMsg);
    }
  }
 catch (  Exception e) {
    Set<String> jars=getMissingJars(connection);
    String missJarMsg=""String_Node_Str"";
    if (jars.size() > 0) {
      missJarMsg=""String_Node_Str"" + jars.toString() + ""String_Node_Str""+ ""String_Node_Str"";
    }
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(errorMsg + ""String_Node_Str"" + missJarMsg);
  }
 finally {
    if (dfs != null) {
      try {
        ReflectionUtils.invokeMethod(dfs,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
      }
    }
  }
  return connectionStatus;
}",0.4198680636398913
124928,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != ERepositoryObjectType.PIG_UDF) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=!selection.isEmpty() && selection.size() == 1;
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject()) {
    canWork=false;
  }
  if (canWork) {
    Object o=selection.getFirstElement();
    RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case SIMPLE_FOLDER:
case SYSTEM_FOLDER:
      ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    if (nodeType != ERepositoryObjectType.PIG_UDF) {
      canWork=false;
    }
  if (node.getObject() != null && node.getObject().isDeleted()) {
    canWork=false;
  }
break;
default :
canWork=false;
}
if (canWork && !ProjectManager.getInstance().isInCurrentMainProject(node)) {
canWork=false;
}
}
setEnabled(canWork);
}",0.980566352026652
124929,"@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=selection.size() == 1;
  if (canWork) {
    Object o=selection.getFirstElement();
    if (o instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
        if (node.getObjectType() == ERepositoryObjectType.PIG_UDF) {
          Item item=node.getObject().getProperty().getItem();
          if (item instanceof PigudfItem) {
            canWork=true;
          }
 else {
            canWork=false;
          }
        }
 else {
          canWork=false;
        }
      break;
default :
    canWork=false;
  break;
}
if (canWork) {
canWork=(node.getObject().getRepositoryStatus() != ERepositoryStatus.DELETED);
}
if (canWork) {
canWork=isLastVersion(node);
}
}
}
setEnabled(canWork);
}","@Override public void init(TreeViewer viewer,IStructuredSelection selection){
  boolean canWork=selection.size() == 1;
  if (canWork) {
    boolean loadMetadata=PluginChecker.isPluginLoaded(""String_Node_Str"");
    if (!loadMetadata) {
      setEnabled(false);
      return;
    }
    Object o=selection.getFirstElement();
    if (o instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)o;
switch (node.getType()) {
case REPOSITORY_ELEMENT:
        if (node.getObjectType() == ERepositoryObjectType.PIG_UDF) {
          Item item=node.getObject().getProperty().getItem();
          if (item instanceof PigudfItem) {
            canWork=true;
          }
 else {
            canWork=false;
          }
        }
 else {
          canWork=false;
        }
      break;
default :
    canWork=false;
  break;
}
if (canWork) {
canWork=(node.getObject().getRepositoryStatus() != ERepositoryStatus.DELETED);
}
if (canWork) {
canWork=isLastVersion(node);
}
}
}
setEnabled(canWork);
}",0.9216539717083788
124930,"private void addHadoopPropertiesFields(Composite comp){
  Composite compositeTable=Form.startNewDimensionnedGridLayout(comp,1,comp.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=4;
  compositeTable.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTable);
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableView=new HadoopPropertiesTableView(model,compositeTable);
  propertiesTableView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
}","private void addHadoopPropertiesFields(Composite comp){
  Composite compositeTable=Form.startNewDimensionnedGridLayout(comp,1,comp.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=4;
  compositeTable.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTable);
  model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableView=new HadoopPropertiesTableView(model,compositeTable);
  propertiesTableView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
}",0.9833846153846154
124931,"/** 
 * DOC plv Comment method ""updateSetting"".
 * @param isSupportSecurity
 */
private void updateSetting(boolean isSupportSecurity){
  if (ooziePropertyTypeCombo != null && ooziePropertyTypeCombo.getSelectionIndex() == 1) {
    hadoopDistributionCombo.setReadOnly(true);
    hadoopVersionCombo.setReadOnly(true);
    kerbBtn.setEnabled(false);
    principalText.setEditable(false);
    nameNodeEndPointTxt.setEditable(false);
    jobTrackerEndPointTxt.setEditable(false);
    oozieEndPointTxt.setEditable(false);
    userNameTxt.setEditable(false);
    kerbLabel.setEnabled(true);
    principalText.setEnabled(true);
    principalText.setText(principalValue != null ? principalValue : ""String_Node_Str"");
    userNameTxt.setText(userNameValue != null ? userNameValue : ""String_Node_Str"");
  }
 else {
    hadoopDistributionCombo.setReadOnly(false);
    hadoopVersionCombo.setReadOnly(false);
    nameNodeEndPointTxt.setEditable(true);
    jobTrackerEndPointTxt.setEditable(true);
    oozieEndPointTxt.setEditable(true);
    kerbBtn.setEnabled(isSupportSecurity);
    kerbLabel.setEnabled(kerbBtn.getEnabled());
    kerbBtn.setSelection(kerbBtn.getEnabled() ? enableKerberos : false);
    if (!kerbBtn.getEnabled()) {
      setEnableKerberos(false);
    }
    principalText.setEditable(kerbBtn.getEnabled() && kerbBtn.getSelection());
    userNameTxt.setEditable(!principalText.getEditable());
    userNameLbl.setEnabled(userNameTxt.getEditable());
    principalText.setText(principalText.getEditable() ? principalValue : ""String_Node_Str"");
    userNameTxt.setText(userNameTxt.getEditable() && userNameValue != null ? userNameValue : ""String_Node_Str"");
  }
  nameNodeEndPointTxt.setText(nameNodeEndPointValue == null ? ""String_Node_Str"" : nameNodeEndPointValue);
  jobTrackerEndPointTxt.setText(jobTrackerEndPointValue == null ? ""String_Node_Str"" : jobTrackerEndPointValue);
  oozieEndPointTxt.setText(oozieEndPointValue == null ? ""String_Node_Str"" : oozieEndPointValue);
}","/** 
 * DOC plv Comment method ""updateSetting"".
 * @param isSupportSecurity
 */
private void updateSetting(boolean isSupportSecurity){
  if (ooziePropertyTypeCombo != null && ooziePropertyTypeCombo.getSelectionIndex() == 1) {
    hadoopDistributionCombo.setReadOnly(true);
    hadoopVersionCombo.setReadOnly(true);
    kerbBtn.setEnabled(false);
    principalText.setEditable(false);
    nameNodeEndPointTxt.setEditable(false);
    jobTrackerEndPointTxt.setEditable(false);
    oozieEndPointTxt.setEditable(false);
    userNameTxt.setEditable(false);
    kerbLabel.setEnabled(true);
    principalText.setEnabled(true);
    principalText.setText(principalValue != null ? principalValue : ""String_Node_Str"");
    userNameTxt.setText(userNameValue != null ? userNameValue : ""String_Node_Str"");
    propertiesTableView.setReadOnly(true);
  }
 else {
    hadoopDistributionCombo.setReadOnly(false);
    hadoopVersionCombo.setReadOnly(false);
    nameNodeEndPointTxt.setEditable(true);
    jobTrackerEndPointTxt.setEditable(true);
    oozieEndPointTxt.setEditable(true);
    kerbBtn.setEnabled(isSupportSecurity);
    kerbLabel.setEnabled(kerbBtn.getEnabled());
    kerbBtn.setSelection(kerbBtn.getEnabled() ? enableKerberos : false);
    if (!kerbBtn.getEnabled()) {
      setEnableKerberos(false);
    }
    principalText.setEditable(kerbBtn.getEnabled() && kerbBtn.getSelection());
    userNameTxt.setEditable(!principalText.getEditable());
    userNameLbl.setEnabled(userNameTxt.getEditable());
    principalText.setText(principalText.getEditable() ? principalValue : ""String_Node_Str"");
    userNameTxt.setText(userNameTxt.getEditable() && userNameValue != null ? userNameValue : ""String_Node_Str"");
    propertiesTableView.setReadOnly(false);
  }
  nameNodeEndPointTxt.setText(nameNodeEndPointValue == null ? ""String_Node_Str"" : nameNodeEndPointValue);
  jobTrackerEndPointTxt.setText(jobTrackerEndPointValue == null ? ""String_Node_Str"" : jobTrackerEndPointValue);
  oozieEndPointTxt.setText(oozieEndPointValue == null ? ""String_Node_Str"" : oozieEndPointValue);
}",0.9784600148551622
124932,"protected void addListeners(){
  if (propertiesTableView != null) {
    propertiesTableView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
      @Override public void handleEvent(      ListenableListEvent event){
        updateModel();
      }
    }
);
    propertiesTableView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<HashMap<String,Object>>(){
      @Override public void handleEvent(      ModifiedBeanEvent<HashMap<String,Object>> event){
        updateModel();
      }
    }
);
  }
  kerbBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setEnableKerberos(kerbBtn.getSelection());
      initUI();
    }
  }
);
  principalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      setPrincipal(principalText.getText());
    }
  }
);
  if (ooziePropertyTypeCombo != null) {
    ooziePropertyTypeCombo.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        oozieSelectBtn.setVisible(ooziePropertyTypeCombo.getSelectionIndex() == 1);
        oozieRepositoryText.setVisible(ooziePropertyTypeCombo.getSelectionIndex() == 1);
        if (ooziePropertyTypeCombo.getSelectionIndex() == 0) {
          IProcess2 process=OozieJobTrackerListener.getProcess();
          process.getElementParameter(EOozieParameterName.REPOSITORY_CONNECTION_ID.getName()).setValue(""String_Node_Str"");
          oozieRepositoryText.setText(""String_Node_Str"");
          setRepositoryId(""String_Node_Str"");
        }
        updateProperty();
      }
    }
);
  }
  if (oozieSelectBtn != null) {
    oozieSelectBtn.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        RepositoryReviewDialog dialog=new RepositoryReviewDialog(new Shell(),ERepositoryObjectType.METADATA,""String_Node_Str"");
        if (dialog.open() == RepositoryReviewDialog.OK) {
          String id=dialog.getResult().getObject().getId();
          repositoryId=id;
          oozieRepositoryText.setText(dialog.getResult().getObject().getLabel());
          IProcess2 process=OozieJobTrackerListener.getProcess();
          process.getElementParameter(EOozieParameterName.REPOSITORY_CONNECTION_ID.getName()).setValue(repositoryId);
          enableKerberos=enableKerberosFromRepository(repositoryId);
          kerbBtn.setSelection(enableKerberos);
        }
        updateProperty();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
  hadoopDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newDistributionDisplayName=hadoopDistributionCombo.getText();
      EHadoopDistributions distribution=EHadoopDistributions.getDistributionByDisplayName(newDistributionDisplayName);
      if (distribution != null) {
        if (hadoopDistributionValue != null && !hadoopDistributionValue.equals(newDistributionDisplayName)) {
          hadoopDistributionValue=distribution.getName();
          updateVersionPart(distribution);
          initUI();
        }
      }
    }
  }
);
  hadoopVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newVersionDisplayName=hadoopVersionCombo.getText();
      EHadoopVersion4Drivers newVersion4Drivers=EHadoopVersion4Drivers.indexOfByVersionDisplay(newVersionDisplayName);
      if (newVersion4Drivers != null) {
        hadoopVersionValue=newVersion4Drivers.getVersionValue();
        boolean isSupportSecurity=isSupportSecurity(newVersion4Drivers);
        updateSetting(isSupportSecurity);
      }
    }
  }
);
  customButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      HadoopCustomVersionDefineDialog customVersionDialog=new HadoopCustomVersionDefineDialog(getShell(),getCustomVersionMap()){
        @Override protected ECustomVersionType[] getDisplayTypes(){
          return new ECustomVersionType[]{ECustomVersionType.OOZIE};
        }
      }
;
      if (customVersionDialog.open() == Window.OK) {
        customJars=customVersionDialog.getLibListStr(ECustomVersionGroup.COMMON);
      }
    }
  }
);
  nameNodeEndPointTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      nameNodeEndPointValue=nameNodeEndPointTxt.getText();
    }
  }
);
  jobTrackerEndPointTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      jobTrackerEndPointValue=jobTrackerEndPointTxt.getText();
    }
  }
);
  oozieEndPointTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      oozieEndPointValue=oozieEndPointTxt.getText();
    }
  }
);
  userNameTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      userNameValue=userNameTxt.getText();
    }
  }
);
}","protected void addListeners(){
  if (propertiesTableView != null) {
    propertiesTableView.getExtendedTableModel().addAfterOperationListListener(new IListenableListListener(){
      @Override public void handleEvent(      ListenableListEvent event){
        updateModel();
      }
    }
);
    propertiesTableView.getExtendedTableModel().addModifiedBeanListener(new IModifiedBeanListener<HashMap<String,Object>>(){
      @Override public void handleEvent(      ModifiedBeanEvent<HashMap<String,Object>> event){
        updateModel();
      }
    }
);
  }
  kerbBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setEnableKerberos(kerbBtn.getSelection());
      initUI();
    }
  }
);
  principalText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      setPrincipal(principalText.getText());
    }
  }
);
  if (ooziePropertyTypeCombo != null) {
    ooziePropertyTypeCombo.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        oozieSelectBtn.setVisible(ooziePropertyTypeCombo.getSelectionIndex() == 1);
        oozieRepositoryText.setVisible(ooziePropertyTypeCombo.getSelectionIndex() == 1);
        if (ooziePropertyTypeCombo.getSelectionIndex() == 0) {
          IProcess2 process=OozieJobTrackerListener.getProcess();
          process.getElementParameter(EOozieParameterName.REPOSITORY_CONNECTION_ID.getName()).setValue(""String_Node_Str"");
          oozieRepositoryText.setText(""String_Node_Str"");
          setRepositoryId(""String_Node_Str"");
          model.setProperties(new ArrayList<HashMap<String,Object>>());
          propertiesTableView.getTable().redraw();
        }
        updateProperty();
      }
    }
);
  }
  if (oozieSelectBtn != null) {
    oozieSelectBtn.addSelectionListener(new SelectionListener(){
      @Override public void widgetSelected(      SelectionEvent e){
        RepositoryReviewDialog dialog=new RepositoryReviewDialog(new Shell(),ERepositoryObjectType.METADATA,""String_Node_Str"");
        if (dialog.open() == RepositoryReviewDialog.OK) {
          String id=dialog.getResult().getObject().getId();
          repositoryId=id;
          oozieRepositoryText.setText(dialog.getResult().getObject().getLabel());
          IProcess2 process=OozieJobTrackerListener.getProcess();
          process.getElementParameter(EOozieParameterName.REPOSITORY_CONNECTION_ID.getName()).setValue(repositoryId);
          enableKerberos=enableKerberosFromRepository(repositoryId);
          kerbBtn.setSelection(enableKerberos);
          model.setProperties(getHadoopProperties(repositoryId));
          propertiesTableView.getTable().redraw();
        }
        updateProperty();
      }
      @Override public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
  hadoopDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newDistributionDisplayName=hadoopDistributionCombo.getText();
      EHadoopDistributions distribution=EHadoopDistributions.getDistributionByDisplayName(newDistributionDisplayName);
      if (distribution != null) {
        if (hadoopDistributionValue != null && !hadoopDistributionValue.equals(newDistributionDisplayName)) {
          hadoopDistributionValue=distribution.getName();
          updateVersionPart(distribution);
          initUI();
        }
      }
    }
  }
);
  hadoopVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String newVersionDisplayName=hadoopVersionCombo.getText();
      EHadoopVersion4Drivers newVersion4Drivers=EHadoopVersion4Drivers.indexOfByVersionDisplay(newVersionDisplayName);
      if (newVersion4Drivers != null) {
        hadoopVersionValue=newVersion4Drivers.getVersionValue();
        boolean isSupportSecurity=isSupportSecurity(newVersion4Drivers);
        updateSetting(isSupportSecurity);
      }
    }
  }
);
  customButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      HadoopCustomVersionDefineDialog customVersionDialog=new HadoopCustomVersionDefineDialog(getShell(),getCustomVersionMap()){
        @Override protected ECustomVersionType[] getDisplayTypes(){
          return new ECustomVersionType[]{ECustomVersionType.OOZIE};
        }
      }
;
      if (customVersionDialog.open() == Window.OK) {
        customJars=customVersionDialog.getLibListStr(ECustomVersionGroup.COMMON);
      }
    }
  }
);
  nameNodeEndPointTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      nameNodeEndPointValue=nameNodeEndPointTxt.getText();
    }
  }
);
  jobTrackerEndPointTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      jobTrackerEndPointValue=jobTrackerEndPointTxt.getText();
    }
  }
);
  oozieEndPointTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      oozieEndPointValue=oozieEndPointTxt.getText();
    }
  }
);
  userNameTxt.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      userNameValue=userNameTxt.getText();
    }
  }
);
}",0.977164605137964
124933,"/** 
 * DOC Talend Comment method ""getMissingJars"".
 * @param connection
 * @return
 */
public static Set<String> getMissingJars(HDFSConnectionBean connection){
  Set<String> set=new HashSet<String>();
  Set<String> jars=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(connection.getDistribution(),connection.getDfVersion(),false,false);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  List jarsNeed=ModulesNeededProvider.getModulesNeeded();
  for (  Object jar : jarsNeed) {
    if (jar instanceof ModuleNeeded) {
      String jarName=((ModuleNeeded)jar).getModuleName();
      if (set.contains(jarName) && ((ModuleNeeded)jar).getStatus().equals(ELibraryInstallStatus.NOT_INSTALLED)) {
        jars.add(jarName);
      }
    }
  }
  return jars;
}","/** 
 * DOC Talend Comment method ""getMissingJars"".
 * @param connection
 * @return
 */
public static Set<String> getMissingJars(HDFSConnectionBean connection){
  Set<String> set=new HashSet<String>();
  Set<String> jars=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(connection.getDistribution(),connection.getDfVersion(),connection.isEnableKerberos(),false);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  List jarsNeed=ModulesNeededProvider.getModulesNeeded();
  for (  Object jar : jarsNeed) {
    if (jar instanceof ModuleNeeded) {
      String jarName=((ModuleNeeded)jar).getModuleName();
      if (set.contains(jarName) && ((ModuleNeeded)jar).getStatus().equals(ELibraryInstallStatus.NOT_INSTALLED)) {
        jars.add(jarName);
      }
    }
  }
  return jars;
}",0.980593607305936
124934,"private String getUniqueTableEntry(List<? extends AbstractNode> nodeExisted,String nameToCreate){
  boolean exists=true;
  int counter=1;
  String newName=nameToCreate;
  while (exists) {
    boolean found=false;
    for (    AbstractNode node : nodeExisted) {
      if (node.getName().equals(newName)) {
        found=true;
        break;
      }
    }
    exists=found;
    if (!exists) {
      break;
    }
    newName=nameToCreate + ""String_Node_Str"" + counter++;
  }
  return newName;
}","private String getUniqueTableEntry(List<? extends AbstractNode> nodeExisted,String nameToCreate){
  boolean exists=true;
  int counter=1;
  String newName=nameToCreate;
  while (exists) {
    boolean found=false;
    for (    AbstractNode node : nodeExisted) {
      if (node.getName().equalsIgnoreCase(newName)) {
        found=true;
        break;
      }
    }
    exists=found;
    if (!exists) {
      break;
    }
    newName=nameToCreate + ""String_Node_Str"" + counter++;
  }
  return newName;
}",0.9899193548387096
124935,"public void search(String searchText){
  if (searchMaps.size() > 0) {
    if (!searchZoneMapper.isHightlightAll()) {
      searchZoneMapper.hightlightAll(searchMaps,false);
    }
 else {
      searchZoneMapper.hightlightAll(searchMaps,true);
    }
    searchMaps.clear();
  }
  searchZoneMapper.search(searchMaps,searchText);
  selectKey=searchZoneMapper.selectHightlight(searchMaps,0,""String_Node_Str"");
}","public void search(String searchText){
  if (searchMaps.size() > 0) {
    searchZoneMapper.hightlightAll(searchMaps,false);
    searchZoneMapper.setHightlightAll(false);
    searchMaps.clear();
  }
  searchZoneMapper.search(searchMaps,searchText);
  selectKey=searchZoneMapper.selectHightlight(searchMaps,0,""String_Node_Str"");
}",0.8637602179836512
124936,"public void search(Map<Integer,Figure> searchMaps,String searchValue){
  if (searchValue.equals(""String_Node_Str"") || searchValue == null) {
    return;
  }
  SearchPattern matcher=new SearchPattern();
  matcher.setPattern(searchValue);
  List<InputTable> inputTables=mapperManager.getExternalData().getInputTables();
  List<OutputTable> outputTables=mapperManager.getExternalData().getOutputTables();
  int index=-1;
  for (  InputTable inputTable : inputTables) {
    if (inputTable.getExpressionFilter() != null && matcher.matches(inputTable.getExpressionFilter())) {
      EList<Adapter> adapter=inputTable.eAdapters();
      if (adapter.size() > 0) {
        if (adapter.get(0) instanceof PigMapInputTablePart) {
          PigMapInputTablePart inputTablePart=(PigMapInputTablePart)adapter.get(0);
          if (inputTablePart != null && inputTablePart.getFigure() != null && inputTablePart.getFigure() instanceof InputTableFigure) {
            InputTableFigure inputTableFigure=(InputTableFigure)inputTablePart.getFigure();
            index++;
            searchMaps.put(index,inputTableFigure.getFilterContainer());
          }
        }
      }
    }
    for (    TableNode node : inputTable.getNodes()) {
      if (node.getExpression() != null && matcher.matches(node.getExpression())) {
        EList<Adapter> adapter=node.eAdapters();
        if (adapter.size() > 0) {
          if (adapter.get(0) instanceof TableEntityPart) {
            TableEntityPart tableEntityPart=(TableEntityPart)adapter.get(0);
            if (tableEntityPart != null && tableEntityPart.getFigure() != null && tableEntityPart.getFigure() instanceof TableEntityFigure) {
              TableEntityFigure nodeFigure=(TableEntityFigure)tableEntityPart.getFigure();
              index++;
              searchMaps.put(index,nodeFigure);
            }
          }
        }
      }
    }
  }
  for (  OutputTable outputTable : outputTables) {
    if (outputTable.getExpressionFilter() != null && matcher.matches(outputTable.getExpressionFilter())) {
      EList<Adapter> adapter=outputTable.eAdapters();
      if (adapter.size() > 0) {
        if (adapter.get(0) instanceof PigMapOutputTablePart) {
          PigMapOutputTablePart outputTablePart=(PigMapOutputTablePart)adapter.get(0);
          if (outputTablePart != null && outputTablePart.getFigure() != null && outputTablePart.getFigure() instanceof OutputTableFigure) {
            OutputTableFigure outputTableFigure=(OutputTableFigure)outputTablePart.getFigure();
            index++;
            searchMaps.put(index,outputTableFigure.getFilterContainer());
          }
        }
      }
    }
    for (    TableNode node : outputTable.getNodes()) {
      if (node.getExpression() != null && matcher.matches(node.getExpression())) {
        EList<Adapter> adapter=node.eAdapters();
        if (adapter.size() > 0) {
          if (adapter.get(0) instanceof TableEntityPart) {
            TableEntityPart tableEntityPart=(TableEntityPart)adapter.get(0);
            if (tableEntityPart != null && tableEntityPart.getFigure() != null && tableEntityPart.getFigure() instanceof TableEntityFigure) {
              TableEntityFigure nodeFigure=(TableEntityFigure)tableEntityPart.getFigure();
              index++;
              searchMaps.put(index,nodeFigure);
            }
          }
        }
      }
    }
  }
}","public void search(Map<Integer,Figure> searchMaps,String searchValue){
  if (searchValue.equals(""String_Node_Str"") || searchValue == null) {
    return;
  }
  List<InputTable> inputTables=mapperManager.getExternalData().getInputTables();
  List<OutputTable> outputTables=mapperManager.getExternalData().getOutputTables();
  matcher.setPattern(searchValue);
  int index=-1;
  for (  InputTable inputTable : inputTables) {
    if (inputTable.getExpressionFilter() != null && matcher.matches(inputTable.getExpressionFilter())) {
      EList<Adapter> adapter=inputTable.eAdapters();
      if (adapter.size() > 0) {
        if (adapter.get(0) instanceof PigMapInputTablePart) {
          PigMapInputTablePart inputTablePart=(PigMapInputTablePart)adapter.get(0);
          if (inputTablePart != null && inputTablePart.getFigure() != null && inputTablePart.getFigure() instanceof InputTableFigure) {
            InputTableFigure inputTableFigure=(InputTableFigure)inputTablePart.getFigure();
            index++;
            searchMaps.put(index,inputTableFigure.getFilterContainer());
          }
        }
      }
    }
    for (    TableNode node : inputTable.getNodes()) {
      if (getMatcherNodeFigure(node) != null) {
        index++;
        searchMaps.put(index,getMatcherNodeFigure(node));
      }
    }
  }
  for (  OutputTable outputTable : outputTables) {
    if (outputTable.getExpressionFilter() != null && matcher.matches(outputTable.getExpressionFilter())) {
      EList<Adapter> adapter=outputTable.eAdapters();
      if (adapter.size() > 0) {
        if (adapter.get(0) instanceof PigMapOutputTablePart) {
          PigMapOutputTablePart outputTablePart=(PigMapOutputTablePart)adapter.get(0);
          if (outputTablePart != null && outputTablePart.getFigure() != null && outputTablePart.getFigure() instanceof OutputTableFigure) {
            OutputTableFigure outputTableFigure=(OutputTableFigure)outputTablePart.getFigure();
            index++;
            searchMaps.put(index,outputTableFigure.getFilterContainer());
          }
        }
      }
    }
    for (    TableNode node : outputTable.getNodes()) {
      if (getMatcherNodeFigure(node) != null) {
        index++;
        searchMaps.put(index,getMatcherNodeFigure(node));
      }
    }
  }
}",0.7156322247910368
124937,"public SearchZoneMapper(MapperManager mapperManager){
  this.mapperManager=mapperManager;
}","public SearchZoneMapper(MapperManager mapperManager){
  this.mapperManager=mapperManager;
  matcher=new SearchPattern();
}",0.8544600938967136
124938,"public static ClassLoader getClassLoader(ECustomVersionType type,String distribution,String version,boolean enableKerberos){
  if (type == null) {
    return HadoopClassLoaderFactory.class.getClassLoader();
  }
  String baseIndex=type.getName() + ""String_Node_Str"" + distribution+ ""String_Node_Str""+ version;
  String index=baseIndex;
  String hive_embeded=null;
switch (type) {
case HDFS:
    if (enableKerberos) {
      index+=""String_Node_Str"";
    }
  break;
case HIVE:
index+=""String_Node_Str"" + STANDALONE;
hive_embeded=""String_Node_Str"" + EMBEDDED;
break;
}
ClassLoader loader=ClassLoaderFactory.getClassLoader(index);
if (loader == null && hive_embeded != null) {
index=baseIndex + hive_embeded;
loader=ClassLoaderFactory.getClassLoader(index);
}
if (loader == null) {
loader=HadoopClassLoaderFactory.class.getClassLoader();
}
return loader;
}","public static ClassLoader getClassLoader(ECustomVersionType type,String distribution,String version,boolean enableKerberos,boolean showDownloadIfNotExist){
  if (type == null) {
    return HadoopClassLoaderFactory.class.getClassLoader();
  }
  String baseIndex=type.getName() + ""String_Node_Str"" + distribution+ ""String_Node_Str""+ version;
  String index=baseIndex;
  String hive_embeded=null;
switch (type) {
case HDFS:
    if (enableKerberos) {
      index+=""String_Node_Str"";
    }
  break;
case HIVE:
index+=""String_Node_Str"" + STANDALONE;
hive_embeded=""String_Node_Str"" + EMBEDDED;
break;
}
ClassLoader loader=ClassLoaderFactory.getClassLoader(index,showDownloadIfNotExist);
if (loader == null && hive_embeded != null) {
index=baseIndex + hive_embeded;
loader=ClassLoaderFactory.getClassLoader(index,showDownloadIfNotExist);
}
if (loader == null) {
loader=HadoopClassLoaderFactory.class.getClassLoader();
}
return loader;
}",0.9567172568858908
124939,"/** 
 * DOC Talend Comment method ""getMissingJars"".
 * @param connection
 * @return
 */
public static Set<String> getMissingJars(HDFSConnectionBean connection){
  Set<String> set=new HashSet<String>();
  Set<String> jars=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(connection.getDistribution(),connection.getDfVersion());
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  List jarsNeed=ModulesNeededProvider.getModulesNeeded();
  for (  Object jar : jarsNeed) {
    if (jar instanceof ModuleNeeded) {
      String jarName=((ModuleNeeded)jar).getModuleName();
      if (set.contains(jarName) && ((ModuleNeeded)jar).getStatus().equals(ELibraryInstallStatus.NOT_INSTALLED)) {
        jars.add(jarName);
      }
    }
  }
  return jars;
}","/** 
 * DOC Talend Comment method ""getMissingJars"".
 * @param connection
 * @return
 */
public static Set<String> getMissingJars(HDFSConnectionBean connection){
  Set<String> set=new HashSet<String>();
  Set<String> jars=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(connection.getDistribution(),connection.getDfVersion(),false,false);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  List jarsNeed=ModulesNeededProvider.getModulesNeeded();
  for (  Object jar : jarsNeed) {
    if (jar instanceof ModuleNeeded) {
      String jarName=((ModuleNeeded)jar).getModuleName();
      if (set.contains(jarName) && ((ModuleNeeded)jar).getStatus().equals(ELibraryInstallStatus.NOT_INSTALLED)) {
        jars.add(jarName);
      }
    }
  }
  return jars;
}",0.993006993006993
124940,"@Override public Set<String> getHadoopLibrariesByType(ECustomVersionType type,String distribution,String version){
  Set<String> set=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(type,distribution,version,false);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  return set;
}","@Override public Set<String> getHadoopLibrariesByType(ECustomVersionType type,String distribution,String version){
  Set<String> set=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(type,distribution,version,false,false);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  return set;
}",0.9924050632911392
124941,"@Override public Set<String> getMissingLibraries(String distribution,String version){
  Set<String> jars=new HashSet<String>();
  Set<String> set=getHadoopLibraries(distribution,version);
  List jarsNeed=ModulesNeededProvider.getModulesNeeded();
  for (  Object jar : jarsNeed) {
    if (jar instanceof ModuleNeeded) {
      String jarName=((ModuleNeeded)jar).getModuleName();
      if (set.contains(jarName) && ((ModuleNeeded)jar).getStatus().equals(ELibraryInstallStatus.NOT_INSTALLED)) {
        jars.add(jarName);
      }
    }
  }
  return jars;
}","@Override public Set<String> getMissingLibraries(String distribution,String version){
  Set<String> jars=new HashSet<String>();
  Set<String> set=getHadoopLibraries(distribution,version,false);
  List jarsNeed=ModulesNeededProvider.getModulesNeeded();
  for (  Object jar : jarsNeed) {
    if (jar instanceof ModuleNeeded) {
      String jarName=((ModuleNeeded)jar).getModuleName();
      if (set.contains(jarName) && ((ModuleNeeded)jar).getStatus().equals(ELibraryInstallStatus.NOT_INSTALLED)) {
        jars.add(jarName);
      }
    }
  }
  return jars;
}",0.9945945945945946
124942,"@Override public Set<String> getHadoopLibraries(String distribution,String version){
  Set<String> set=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(distribution,version);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  return set;
}","@Override public Set<String> getHadoopLibraries(String distribution,String version,boolean showDownloadIfNotExist){
  Set<String> set=new HashSet<String>();
  ClassLoader classLoader=HadoopClassLoaderFactory.getClassLoader(distribution,version,false,showDownloadIfNotExist);
  if (classLoader instanceof DynamicClassLoader) {
    set.addAll(((DynamicClassLoader)classLoader).getLibraries());
  }
  return set;
}",0.9212598425196852
124943,"public static ClassLoader getClassLoader(){
  ClassLoader classLoader=null;
  String distributionValue=TOozieParamUtils.getHadoopDistribution();
  String versionValue=TOozieParamUtils.getHadoopVersion();
  String customJars=TOozieParamUtils.getHadoopCustomJars();
  if (distributionValue.equals(EHadoopDistributions.CUSTOM.getName())) {
    classLoader=ClassLoaderFactory.getCustomClassLoader(ITalendCorePrefConstants.OOZIE_SCHEDULER_HADOOP_CUSTOM_JARS,customJars);
  }
 else {
    classLoader=HadoopClassLoaderFactory.getClassLoader(distributionValue,versionValue);
  }
  if (classLoader == null) {
    classLoader=OozieClassLoaderFactory.class.getClassLoader();
  }
  return classLoader;
}","public static ClassLoader getClassLoader(){
  ClassLoader classLoader=null;
  String distributionValue=TOozieParamUtils.getHadoopDistribution();
  String versionValue=TOozieParamUtils.getHadoopVersion();
  String customJars=TOozieParamUtils.getHadoopCustomJars();
  if (distributionValue.equals(EHadoopDistributions.CUSTOM.getName())) {
    classLoader=ClassLoaderFactory.getCustomClassLoader(ITalendCorePrefConstants.OOZIE_SCHEDULER_HADOOP_CUSTOM_JARS,customJars);
  }
 else {
    classLoader=HadoopClassLoaderFactory.getClassLoader(distributionValue,versionValue,false,true);
  }
  if (classLoader == null) {
    classLoader=OozieClassLoaderFactory.class.getClassLoader();
  }
  return classLoader;
}",0.9921033740129216
124944,"protected String doSubmit(JobContext jobContext) throws OozieClientException {
  OozieClient oozieClient=createOozieClient(jobContext.getOozieEndPoint(),jobContext.getDebug());
  String userName=jobContext.get(OozieClient.USER_NAME);
  Properties configuration=oozieClient.createConfiguration();
  if (userName != null && !""String_Node_Str"".equals(userName))   configuration.setProperty(OozieClient.USER_NAME,userName);
  configuration.setProperty(OozieClient.COORDINATOR_APP_PATH,jobContext.getNameNodeEndPoint() + jobContext.getJobPathOnHDFS());
  return oozieClient.run(configuration);
}","protected String doSubmit(JobContext jobContext) throws OozieClientException {
  OozieClient oozieClient=createOozieClient(jobContext.getOozieEndPoint(),jobContext.getDebug());
  String userName=jobContext.get(OozieClient.USER_NAME);
  Properties configuration=oozieClient.createConfiguration();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    configuration.setProperty(OozieClient.USER_NAME,userName);
  }
  String cooAppPath=jobContext.getJobPathOnHDFS();
  String hadoopDistribution=TOozieParamUtils.getHadoopDistribution();
  EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hadoopDistribution,false);
  if (distribution == EHadoopDistributions.MAPR) {
    cooAppPath=""String_Node_Str"".concat(cooAppPath);
  }
 else {
    cooAppPath=jobContext.getNameNodeEndPoint().concat(cooAppPath);
  }
  configuration.setProperty(OozieClient.COORDINATOR_APP_PATH,cooAppPath);
  return oozieClient.run(configuration);
}",0.684312459651388
124945,"protected Workflow createWorkflow(JobContext jobContext){
  JavaAction action=new JavaAction(jobContext.getJobName(),jobContext.getJobTrackerEndPoint(),jobContext.getNameNodeEndPoint(),jobContext.getJobFQClassName());
  action.addArgument(""String_Node_Str"");
  action.addArgument(jobContext.get(""String_Node_Str""));
  action.addArgument(""String_Node_Str"");
  action.addArgument(jobContext.get(""String_Node_Str""));
  action.addArgument(""String_Node_Str"");
  String[] libjarsTemp=jobContext.get(""String_Node_Str"").split(""String_Node_Str"");
  StringBuffer libjars=new StringBuffer();
  for (  String libjar : libjarsTemp) {
    libjars.append(jobContext.get(OozieClient.APP_PATH) + ""String_Node_Str"" + libjar+ ""String_Node_Str"");
  }
  action.addArgument(libjars.substring(0,libjars.length() - 1));
  if (jobContext.get(""String_Node_Str"") != null) {
    action.addArgument(""String_Node_Str"");
    action.addArgument(""String_Node_Str"" + jobContext.get(""String_Node_Str""));
  }
  String jsontest=jobContext.get(""String_Node_Str"");
  if (jsontest != null) {
    try {
      JSONArray props=new JSONArray(jsontest);
      for (int i=0; i < props.length(); i++) {
        String property=TalendQuoteUtils.removeQuotesIfExist((String)((JSONObject)props.get(i)).get(""String_Node_Str""));
        String value=TalendQuoteUtils.removeQuotesIfExist((String)((JSONObject)props.get(i)).get(""String_Node_Str""));
        if (!StringUtils.isEmpty(property) && !StringUtils.isEmpty(value)) {
          action.addArgument(""String_Node_Str"");
          action.addArgument(property + ""String_Node_Str"" + value);
        }
      }
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  String tosContextPath=jobContext.getTosContextPath();
  if (tosContextPath != null) {
    action.addArgument(""String_Node_Str"" + tosContextPath);
  }
  return new Workflow(jobContext.getJobName(),action);
}","protected Workflow createWorkflow(JobContext jobContext){
  JavaAction action=new JavaAction(jobContext.getJobName(),jobContext.getJobTrackerEndPoint(),jobContext.getNameNodeEndPoint(),jobContext.getJobFQClassName());
  action.addArgument(""String_Node_Str"");
  action.addArgument(jobContext.get(""String_Node_Str""));
  action.addArgument(""String_Node_Str"");
  action.addArgument(jobContext.get(""String_Node_Str""));
  String libJars=jobContext.get(""String_Node_Str"");
  if (libJars != null) {
    action.addArgument(""String_Node_Str"");
    String[] libjarsTemp=libJars.split(""String_Node_Str"");
    StringBuffer libjars=new StringBuffer();
    for (    String libjar : libjarsTemp) {
      libjars.append(jobContext.get(OozieClient.APP_PATH) + ""String_Node_Str"" + libjar+ ""String_Node_Str"");
    }
    action.addArgument(libjars.substring(0,libjars.length() - 1));
  }
  if (jobContext.get(""String_Node_Str"") != null) {
    action.addArgument(""String_Node_Str"");
    action.addArgument(""String_Node_Str"" + jobContext.get(""String_Node_Str""));
  }
  String jsontest=jobContext.get(""String_Node_Str"");
  if (jsontest != null) {
    try {
      JSONArray props=new JSONArray(jsontest);
      for (int i=0; i < props.length(); i++) {
        String property=TalendQuoteUtils.removeQuotesIfExist((String)((JSONObject)props.get(i)).get(""String_Node_Str""));
        String value=TalendQuoteUtils.removeQuotesIfExist((String)((JSONObject)props.get(i)).get(""String_Node_Str""));
        if (!StringUtils.isEmpty(property) && !StringUtils.isEmpty(value)) {
          action.addArgument(""String_Node_Str"");
          action.addArgument(property + ""String_Node_Str"" + value);
        }
      }
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  String tosContextPath=jobContext.getTosContextPath();
  if (tosContextPath != null) {
    action.addArgument(""String_Node_Str"" + tosContextPath);
  }
  return new Workflow(jobContext.getJobName(),action);
}",0.9505821474773608
124946,"protected Coordinator createCoordinator(JobContext jobContext){
  Utils.assertTrue(jobContext.getFrequency() > 0,""String_Node_Str"");
  return new Coordinator(jobContext.getJobName(),jobContext.getNameNodeEndPoint() + jobContext.getJobPathOnHDFS(),jobContext.getStartTime(),jobContext.getEndTime(),jobContext.getFrequency(),jobContext.getTimeUnit());
}","protected Coordinator createCoordinator(JobContext jobContext){
  Utils.assertTrue(jobContext.getFrequency() > 0,""String_Node_Str"");
  String cooAppPath=jobContext.getJobPathOnHDFS();
  String hadoopDistribution=TOozieParamUtils.getHadoopDistribution();
  EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hadoopDistribution,false);
  if (distribution == EHadoopDistributions.MAPR) {
    cooAppPath=""String_Node_Str"".concat(cooAppPath);
  }
 else {
    cooAppPath=jobContext.getNameNodeEndPoint().concat(cooAppPath);
  }
  return new Coordinator(jobContext.getJobName(),cooAppPath,jobContext.getStartTime(),jobContext.getEndTime(),jobContext.getFrequency(),jobContext.getTimeUnit());
}",0.4797742238946378
124947,"@Override public List<String> checkNeededRoutines(List<String> possibleRoutines,String additionalString){
  return null;
}","@Override public List<String> checkNeededRoutines(List<String> possiblePigudfs,String additionalString){
  List<String> pigudfsToAdd=new ArrayList<String>();
  PigMapData pigMapData=(PigMapData)getExternalEmfData();
  for (  String pigudf : possiblePigudfs) {
    List<OutputTable> listOutput=pigMapData.getOutputTables();
    for (    OutputTable outTable : listOutput) {
      List<TableNode> listOutEntry=outTable.getNodes();
      if (listOutEntry != null && !listOutEntry.isEmpty()) {
        for (        TableNode outEntry : listOutEntry) {
          String expression=outEntry.getExpression();
          if (expression != null && !pigudfsToAdd.contains(pigudf) && expression.contains(SOURCE_JAVA_PIGUDF + additionalString + pigudf)) {
            pigudfsToAdd.add(pigudf);
          }
        }
      }
      String filter=outTable.getExpressionFilter();
      if (filter != null && !pigudfsToAdd.contains(pigudf) && filter.contains(SOURCE_JAVA_PIGUDF + additionalString + pigudf)) {
        pigudfsToAdd.add(pigudf);
      }
    }
    List<InputTable> listInput=pigMapData.getInputTables();
    for (    InputTable inputTable : listInput) {
      List<TableNode> listInEntry=inputTable.getNodes();
      if (listInEntry != null && !listInEntry.isEmpty()) {
        for (        TableNode inEntry : listInEntry) {
          String expression=inEntry.getExpression();
          if (expression != null && !pigudfsToAdd.contains(pigudf) && expression.contains(SOURCE_JAVA_PIGUDF + additionalString + pigudf)) {
            pigudfsToAdd.add(pigudf);
          }
        }
      }
      String filter=inputTable.getExpressionFilter();
      if (filter != null && !pigudfsToAdd.contains(pigudf) && filter.contains(SOURCE_JAVA_PIGUDF + additionalString + pigudf)) {
        pigudfsToAdd.add(pigudf);
      }
    }
  }
  return pigudfsToAdd;
}",0.1058524173027989
124948,"/** 
 * DOC ycbai Comment method ""testConnection"". Test whether can connect to HDFS.
 * @return
 */
public static ConnectionStatus testConnection(HDFSConnectionBean connection){
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  String errorMsg=""String_Node_Str"" + connection.getNameNodeURI() + ""String_Node_Str"";
  Object dfs=null;
  try {
    dfs=getDFS(connection);
    if (dfs != null) {
      connectionStatus.setResult(true);
      connectionStatus.setMessageException(""String_Node_Str"");
    }
 else {
      connectionStatus.setMessageException(errorMsg);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(errorMsg);
  }
 finally {
    if (dfs != null) {
      try {
        ReflectionUtils.invokeMethod(dfs,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
      }
    }
  }
  return connectionStatus;
}","/** 
 * DOC ycbai Comment method ""testConnection"". Test whether can connect to HDFS.
 * @return
 */
public static ConnectionStatus testConnection(HDFSConnectionBean connection){
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  String errorMsg=""String_Node_Str"" + connection.getNameNodeURI() + ""String_Node_Str"";
  Object dfs=null;
  try {
    dfs=getDFS(connection);
    if (dfs != null) {
      connectionStatus.setResult(true);
      connectionStatus.setMessageException(""String_Node_Str"");
    }
 else {
      connectionStatus.setMessageException(errorMsg);
    }
  }
 catch (  Exception e) {
    Set<String> jars=getMissingJars(connection);
    String missJarMsg=""String_Node_Str"";
    if (jars.size() > 0) {
      missJarMsg=""String_Node_Str"" + jars.toString() + ""String_Node_Str""+ ""String_Node_Str"";
    }
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(errorMsg + ""String_Node_Str"" + missJarMsg);
  }
 finally {
    if (dfs != null) {
      try {
        ReflectionUtils.invokeMethod(dfs,""String_Node_Str"",new Object[0]);
      }
 catch (      Exception e) {
      }
    }
  }
  return connectionStatus;
}",0.8829337094499294
124949,"public HadoopReflectionException(String msg,Exception e){
  super(msg,e);
}","public HadoopReflectionException(String msg,Throwable cause){
  super(msg,cause instanceof InvocationTargetException ? cause.getCause() : cause);
}",0.5945945945945946
124950,"public HadoopServerException(String msg,Exception e){
  super(msg,e);
}","public HadoopServerException(String msg,Throwable cause){
  super(msg,cause instanceof InvocationTargetException ? cause.getCause() : cause);
}",0.5794392523364486
124951,"@Override public void run(){
  IViewReference[] viewRef=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  if (viewRef != null && viewRef.length > 0) {
    for (    IViewReference element : viewRef) {
      if (element.getView(true) instanceof TOozieView && OozieJobTrackerListener.getProcess().getLabel().equals(oozieJobName)) {
        TOozieView view=(TOozieView)element.getView(true);
        executeJobComposite=view.getExecuteJobComposite();
        Button runBtn=executeJobComposite.getRunBtn();
        Button scheduleBtn=executeJobComposite.getScheduleBtn();
        Button killBtn=executeJobComposite.getKillBtn();
        Text pathTxt=executeJobComposite.getPathText();
        Text outputTxt=executeJobComposite.getOutputTxt();
switch (status) {
case INIT:
          break;
case DEPLOYING:
        runBtn.setEnabled(false);
      scheduleBtn.setEnabled(false);
    killBtn.setEnabled(false);
  pathTxt.setEnabled(false);
outputTxt.setEnabled(true);
break;
case PREP:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
outputTxt.setEnabled(true);
break;
case RUNNING:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
outputTxt.setEnabled(true);
break;
case SUCCEEDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
outputTxt.setEnabled(true);
break;
case KILLED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
outputTxt.setEnabled(true);
break;
case FAILED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
outputTxt.setEnabled(true);
break;
case SUSPENDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
outputTxt.setEnabled(true);
break;
}
}
}
}
}","@Override public void run(){
  IViewReference[] viewRef=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  if (viewRef != null && viewRef.length > 0) {
    for (    IViewReference element : viewRef) {
      if (element.getView(true) instanceof TOozieView && OozieJobTrackerListener.getProcess().getLabel().equals(oozieJobName)) {
        TOozieView view=(TOozieView)element.getView(true);
        executeJobComposite=view.getExecuteJobComposite();
        Button runBtn=executeJobComposite.getRunBtn();
        Button scheduleBtn=executeJobComposite.getScheduleBtn();
        Button killBtn=executeJobComposite.getKillBtn();
        Text pathTxt=executeJobComposite.getPathText();
        Button pathBtn=executeJobComposite.getBtnEdit();
        Text outputTxt=executeJobComposite.getOutputTxt();
switch (status) {
case INIT:
          break;
case DEPLOYING:
        runBtn.setEnabled(false);
      scheduleBtn.setEnabled(false);
    killBtn.setEnabled(false);
  pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case PREP:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case RUNNING:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
case SUCCEEDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case KILLED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case FAILED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
pathTxt.setEnabled(true);
pathBtn.setEnabled(true);
outputTxt.setEnabled(true);
break;
case SUSPENDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
pathTxt.setEnabled(false);
pathBtn.setEnabled(false);
outputTxt.setEnabled(true);
break;
}
}
}
}
}",0.941740589786622
124952,"public void initValues(){
  Text pathText=executeJobComposite.getPathText();
  Text outputText=executeJobComposite.getOutputTxt();
  if (!pathText.isDisposed() && !outputText.isDisposed()) {
    final IProcess2 process=OozieJobTrackerListener.getProcess();
    if (process != null) {
      String jobIdInOozie=CorePlugin.getDefault().getPreferenceStore().getString(TOozieCommonConstants.OOZIE_PREFIX_FOR_PREFERENCE + process.getLabel());
      String appPath=(String)process.getElementParameter(EOozieParameterName.HADOOP_APP_PATH.getName()).getValue();
      pathText.setText(appPath);
      String outputValue=traceManager.getTrace(jobIdInOozie);
      updateOutputTextContents(outputValue == null ? ""String_Node_Str"" : outputValue,process.getLabel());
      updatePathTxtEnabledOrNot();
      updateOutputTxtEnabledOrNot();
    }
 else {
      pathText.setText(""String_Node_Str"");
      outputText.setText(""String_Node_Str"");
      updatePathTxtEnabledOrNot();
      updateOutputTxtEnabledOrNot();
    }
  }
}","public void initValues(){
  Text pathText=executeJobComposite.getPathText();
  Text outputText=executeJobComposite.getOutputTxt();
  if (!pathText.isDisposed() && !outputText.isDisposed()) {
    final IProcess2 process=OozieJobTrackerListener.getProcess();
    if (process != null) {
      String jobIdInOozie=CorePlugin.getDefault().getPreferenceStore().getString(TOozieCommonConstants.OOZIE_PREFIX_FOR_PREFERENCE + process.getLabel());
      String appPath=(String)process.getElementParameter(EOozieParameterName.HADOOP_APP_PATH.getName()).getValue();
      pathText.setText(appPath);
      String outputValue=traceManager.getTrace(jobIdInOozie);
      updateOutputTextContents(outputValue == null ? ""String_Node_Str"" : outputValue,process.getLabel());
      updatePathEnabledOrNot();
      updateOutputTxtEnabledOrNot();
    }
 else {
      pathText.setText(""String_Node_Str"");
      outputText.setText(""String_Node_Str"");
      updatePathEnabledOrNot();
      updateOutputTxtEnabledOrNot();
    }
  }
}",0.9970267591674926
124953,"/** 
 * Updates all buttons status, enabled or not.
 */
public void updateAllEnabledOrNot(){
  String jobIdInOozie=getJobIdInOozie();
  String pathValue=executeJobComposite.getPathValue();
  Button runBtn=executeJobComposite.getRunBtn();
  Button scheduleBtn=executeJobComposite.getScheduleBtn();
  Button killBtn=executeJobComposite.getKillBtn();
  boolean isRunBtnEnabled=false;
  boolean isScheduleBtnEnabled=false;
  boolean isKillBtnEnabled=false;
  if (pathValue != null && !""String_Node_Str"".equals(pathValue) && isSettingDone()) {
    if (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie)) {
      try {
        JobSubmission.Status status=checkJobSubmissionStaus(jobIdInOozie);
switch (status) {
case RUNNING:
          isRunBtnEnabled=false;
        isScheduleBtnEnabled=false;
      isKillBtnEnabled=true;
    break;
case PREP:
case SUCCEEDED:
case KILLED:
  isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
break;
case FAILED:
case SUSPENDED:
isKillBtnEnabled=true;
isScheduleBtnEnabled=true;
isRunBtnEnabled=true;
}
}
 catch (JobSubmissionException e) {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
org.talend.commons.exception.ExceptionHandler.process(e);
}
}
 else {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
}
}
updateBtn(runBtn,isRunBtnEnabled);
updateBtn(scheduleBtn,isScheduleBtnEnabled);
updateBtn(killBtn,isKillBtnEnabled);
updatePathTxtEnabledOrNot();
updateOutputTxtEnabledOrNot();
}","/** 
 * Updates all buttons status, enabled or not.
 */
public void updateAllEnabledOrNot(){
  String jobIdInOozie=getJobIdInOozie();
  String pathValue=executeJobComposite.getPathValue();
  Button runBtn=executeJobComposite.getRunBtn();
  Button scheduleBtn=executeJobComposite.getScheduleBtn();
  Button killBtn=executeJobComposite.getKillBtn();
  boolean isRunBtnEnabled=false;
  boolean isScheduleBtnEnabled=false;
  boolean isKillBtnEnabled=false;
  if (pathValue != null && !""String_Node_Str"".equals(pathValue) && isSettingDone()) {
    if (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie)) {
      try {
        JobSubmission.Status status=checkJobSubmissionStaus(jobIdInOozie);
switch (status) {
case RUNNING:
          isRunBtnEnabled=false;
        isScheduleBtnEnabled=false;
      isKillBtnEnabled=true;
    break;
case PREP:
case SUCCEEDED:
case KILLED:
  isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
break;
case FAILED:
case SUSPENDED:
isKillBtnEnabled=true;
isScheduleBtnEnabled=true;
isRunBtnEnabled=true;
}
}
 catch (JobSubmissionException e) {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
org.talend.commons.exception.ExceptionHandler.process(e);
}
}
 else {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
}
}
updateBtn(runBtn,isRunBtnEnabled);
updateBtn(scheduleBtn,isScheduleBtnEnabled);
updateBtn(killBtn,isKillBtnEnabled);
updatePathEnabledOrNot();
updateOutputTxtEnabledOrNot();
}",0.9803529803529804
124954,"public void setSelectedNodePart(TableEntityPart selectedNode){
  IContentProposalProvider[] contentProposalProviders=new IContentProposalProvider[0];
  contentProposalProviders=new IContentProposalProvider[]{new PigProposalProvider(mapperManager.getMapperComponent().getProcess(),mapperManager.getMapperComponent().getOriginalNode())};
  ExpressionProposalProvider provider=new ExpressionProposalProvider(mapperManager,contentProposalProviders);
  provider.init();
  getContentProposalAdapter().setContentProposalProvider(provider);
}","public void setSelectedNodePart(TableEntityPart selectedNode){
  this.selectedNodePart=selectedNode;
  this.selectedNode=(AbstractNode)selectedNodePart.getModel();
  IContentProposalProvider[] contentProposalProviders=new IContentProposalProvider[0];
  contentProposalProviders=new IContentProposalProvider[]{new PigProposalProvider(mapperManager.getMapperComponent().getProcess(),mapperManager.getMapperComponent().getOriginalNode())};
  ExpressionProposalProvider provider=new ExpressionProposalProvider(mapperManager,contentProposalProviders);
  provider.init();
  getContentProposalAdapter().setContentProposalProvider(provider);
}",0.913601368691189
124955,"private void calculateFilterConnections(AbstractInOutTable abstractTable,String newValue){
  PigMapData mapperData=(PigMapData)abstractTable.eContainer();
  List<TableEntryLocation> matchedLocations=expressionManager.parseTableEntryLocation((String)newValue);
  EList<FilterConnection> connections=abstractTable.getFilterIncomingConnections();
  List usefullConnections=new ArrayList();
  if (!matchedLocations.isEmpty()) {
    for (int i=0; i < matchedLocations.size(); i++) {
      TableEntryLocation currentLocation=matchedLocations.get(i);
      boolean found=false;
      for (      FilterConnection conn : connections) {
        TableEntryLocation sourceLocation=null;
        if (conn.getSource() instanceof TableNode) {
        }
        if (currentLocation.equals(sourceLocation)) {
          found=true;
          usefullConnections.add(conn);
          break;
        }
      }
      if (!found) {
      }
    }
    List<FilterConnection> copyOfConnections=new ArrayList<FilterConnection>(connections);
    copyOfConnections.removeAll(usefullConnections);
    for (    FilterConnection connection : copyOfConnections) {
      if (connection.getSource() != null) {
        if (connection.getSource().getFilterOutGoingConnections().contains(connection)) {
          connection.getSource().getFilterOutGoingConnections().remove(connection);
          mapperData.getConnections().remove(connection);
        }
      }
    }
    abstractTable.getFilterIncomingConnections().removeAll(copyOfConnections);
  }
 else   if (!connections.isEmpty()) {
    for (    FilterConnection connection : connections) {
      if (connection.getSource() != null) {
        if (connection.getSource().getFilterOutGoingConnections().contains(connection)) {
          connection.getSource().getFilterOutGoingConnections().remove(connection);
          mapperData.getConnections().remove(connection);
        }
      }
    }
    abstractTable.getFilterIncomingConnections().removeAll(connections);
  }
}","private void calculateFilterConnections(AbstractInOutTable abstractTable,String newValue){
  PigMapData mapperData=(PigMapData)abstractTable.eContainer();
  List<TableEntryLocation> matchedLocations=expressionManager.parseTableEntryLocation((String)newValue);
  EList<FilterConnection> connections=abstractTable.getFilterIncomingConnections();
  List usefullConnections=new ArrayList();
  if (!matchedLocations.isEmpty()) {
    for (int i=0; i < matchedLocations.size(); i++) {
      TableEntryLocation currentLocation=matchedLocations.get(i);
      boolean found=false;
      for (      FilterConnection conn : connections) {
        TableEntryLocation sourceLocation=null;
        String temp=""String_Node_Str"";
        if (conn.getSource() != null && conn.getSource() instanceof TableNode) {
          TableNode tableSourceNode=(TableNode)conn.getSource();
          if (tableSourceNode.eContainer() != null && tableSourceNode.eContainer() instanceof InputTable) {
            temp=((InputTable)tableSourceNode.eContainer()).getName() + ""String_Node_Str"" + conn.getSource().getName();
          }
          sourceLocation=expressionManager.parseTableEntryLocation(temp).get(0);
        }
        if (currentLocation.equals(sourceLocation)) {
          found=true;
          usefullConnections.add(conn);
          break;
        }
      }
      if (!found) {
        if (mapperData != null) {
          AbstractNode sourceNode=findConnectionSource(mapperData,currentLocation);
          if (sourceNode != null) {
            FilterConnection connection=PigmapFactory.eINSTANCE.createFilterConnection();
            sourceNode.getFilterOutGoingConnections().add(connection);
            abstractTable.getFilterIncomingConnections().add(connection);
            connection.setSource(sourceNode);
            connection.setTarget(abstractTable);
            mapperData.getConnections().add(connection);
            usefullConnections.add(connection);
          }
        }
      }
    }
    List<FilterConnection> copyOfConnections=new ArrayList<FilterConnection>(connections);
    copyOfConnections.removeAll(usefullConnections);
    for (    FilterConnection connection : copyOfConnections) {
      if (connection.getSource() != null) {
        if (connection.getSource().getFilterOutGoingConnections().contains(connection)) {
          connection.getSource().getFilterOutGoingConnections().remove(connection);
          mapperData.getConnections().remove(connection);
        }
      }
    }
    abstractTable.getFilterIncomingConnections().removeAll(copyOfConnections);
  }
 else   if (!connections.isEmpty()) {
    for (    FilterConnection connection : connections) {
      if (connection.getSource() != null) {
        if (connection.getSource().getFilterOutGoingConnections().contains(connection)) {
          connection.getSource().getFilterOutGoingConnections().remove(connection);
          mapperData.getConnections().remove(connection);
        }
      }
    }
    abstractTable.getFilterIncomingConnections().removeAll(connections);
  }
}",0.7888888888888889
124956,"public void loadHDFSFolderChildren(HDFSConnectionBean connection,Object fileSystem,ClassLoader classLoader,HDFSPath parent,String path) throws HadoopServerException {
  if (connection == null || fileSystem == null || classLoader == null || parent == null || path == null) {
    return;
  }
  try {
    Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{path});
    Object[] statusList=(Object[])ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    if (statusList == null) {
      return;
    }
    for (    Object status : statusList) {
      if (!canAccess(connection,status)) {
        continue;
      }
      HDFSPath content=null;
      Object statusPath=ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0]);
      String pathName=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
      String absolutePath=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
      String relativePath=getRelativePath(connection,absolutePath);
      if ((Boolean)ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0])) {
        content=new HDFSFolder(parent);
      }
 else {
        content=new HDFSFile(parent);
        content.setTable(createTable(trimFileExtention(pathName)));
      }
      content.setPath(relativePath);
      content.setValue(pathName);
      parent.addChild(content);
    }
  }
 catch (  Exception e) {
    throw new HadoopServerException(e);
  }
}","public void loadHDFSFolderChildren(HDFSConnectionBean connection,Object fileSystem,ClassLoader classLoader,HDFSPath parent,String path) throws HadoopServerException {
  if (connection == null || fileSystem == null || classLoader == null || parent == null || path == null) {
    return;
  }
  try {
    Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{path});
    Object[] statusList=(Object[])ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    if (statusList == null) {
      return;
    }
    for (    Object status : statusList) {
      if (!canAccess(connection,status)) {
        continue;
      }
      HDFSPath content=null;
      Object statusPath=ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0]);
      String pathName=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
      String absolutePath=((URI)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0])).toString();
      String relativePath=URI.create(absolutePath).getPath();
      if ((Boolean)ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0])) {
        content=new HDFSFolder(parent);
      }
 else {
        content=new HDFSFile(parent);
        content.setTable(createTable(trimFileExtention(pathName)));
      }
      content.setPath(relativePath);
      content.setValue(pathName);
      parent.addChild(content);
    }
  }
 catch (  Exception e) {
    throw new HadoopServerException(e);
  }
}",0.96913985554826
124957,"public void doModifyPathAction(){
  if (OozieJobTrackerListener.getProcess() != null) {
    String path=executeJobComposite.getPathValue();
    IProcess2 process=OozieJobTrackerListener.getProcess();
    process.getElementParameter(EOozieParameterName.HADOOP_APP_PATH.getName()).setValue(path);
  }
  updateAllEnabledOrNot();
}","public void doModifyPathAction(){
  if (OozieJobTrackerListener.getProcess() != null) {
    String path=executeJobComposite.getPathValue();
    IProcess2 process=OozieJobTrackerListener.getProcess();
    process.getElementParameter(EOozieParameterName.HADOOP_APP_PATH.getName()).setValue(path);
    Button runBtn=executeJobComposite.getRunBtn();
    Button scheduleBtn=executeJobComposite.getScheduleBtn();
    Button killBtn=executeJobComposite.getKillBtn();
    if (path != null && !StringUtils.isEmpty(path)) {
      updateBtn(runBtn,true);
      updateBtn(scheduleBtn,true);
      updateBtn(killBtn,false);
    }
 else {
      updateBtn(runBtn,false);
      updateBtn(scheduleBtn,false);
      updateBtn(killBtn,false);
    }
  }
}",0.5668549905838042
124958,"public void loadHDFSFolderChildren(HDFSConnectionBean connection,Object fileSystem,ClassLoader classLoader,HDFSPath parent,String path) throws HadoopServerException {
  if (connection == null || fileSystem == null || classLoader == null || parent == null || path == null) {
    return;
  }
  try {
    Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{path});
    Object[] statusList=(Object[])ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    if (statusList == null) {
      return;
    }
    for (    Object status : statusList) {
      if (!canAccess(connection,status)) {
        continue;
      }
      HDFSPath content=null;
      Object statusPath=ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0]);
      String pathName=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
      String absolutePath=((URI)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0])).toString();
      String relativePath=URI.create(absolutePath).getPath();
      if ((Boolean)ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0])) {
        content=new HDFSFolder(parent);
      }
 else {
        content=new HDFSFile(parent);
        content.setTable(createTable(trimFileExtention(pathName)));
      }
      content.setPath(relativePath);
      content.setValue(pathName);
      parent.addChild(content);
    }
  }
 catch (  Exception e) {
    throw new HadoopServerException(e);
  }
}","public void loadHDFSFolderChildren(HDFSConnectionBean connection,Object fileSystem,ClassLoader classLoader,HDFSPath parent,String path) throws HadoopServerException {
  if (connection == null || fileSystem == null || classLoader == null || parent == null || path == null) {
    return;
  }
  try {
    Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{path});
    Object[] statusList=(Object[])ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
    if (statusList == null) {
      return;
    }
    for (    Object status : statusList) {
      if (!canAccess(connection,status)) {
        continue;
      }
      HDFSPath content=null;
      Object statusPath=ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0]);
      if (statusPath == null) {
        continue;
      }
      String pathName=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
      if (StringUtils.isBlank(pathName)) {
        continue;
      }
      String absolutePath=((URI)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0])).toString();
      if (StringUtils.isBlank(absolutePath)) {
        continue;
      }
      String relativePath=URI.create(absolutePath).getPath();
      if ((Boolean)ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0])) {
        content=new HDFSFolder(parent);
      }
 else {
        content=new HDFSFile(parent);
        content.setTable(createTable(trimFileExtention(pathName)));
      }
      content.setPath(relativePath);
      content.setValue(pathName);
      parent.addChild(content);
    }
  }
 catch (  Exception e) {
    throw new HadoopServerException(e);
  }
}",0.9384615384615383
124959,"@Override protected void addButtonListener(){
  IService expressionBuilderDialogService=GlobalServiceRegister.getDefault().getService(IExpressionBuilderDialogService.class);
  final IExpressionBuilderDialogController dialog=((IExpressionBuilderDialogService)expressionBuilderDialogService).getExpressionBuilderInstance(parent,null,null,null);
  button.addMouseListener(new MouseListener(){
    @Override public void mousePressed(    MouseEvent me){
      List<Variable> vars=new ArrayList<Variable>();
      if (tableManager.getModel() != null && (tableManager.getModel() instanceof InputTable || tableManager.getModel() instanceof OutputTable)) {
        if (tableManager.getModel().eContainer() != null && tableManager.getModel().eContainer() instanceof PigMapData) {
          PigMapData pigMapData=(PigMapData)tableManager.getModel().eContainer();
          List<InputTable> inputTables=pigMapData.getInputTables();
          for (          InputTable table : inputTables) {
            List<TableNode> nodes=table.getNodes();
            for (            TableNode node : nodes) {
              Variable variable=new Variable();
              variable.setName(table.getName());
              variable.setValue(node.getName());
              vars.add(variable);
            }
          }
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IPigMapService.class)) {
            final IPigMapService service=(IPigMapService)GlobalServiceRegister.getDefault().getService(IPigMapService.class);
            service.setPigMapData(pigMapData);
          }
        }
      }
      if (dialog instanceof TrayDialog) {
        TrayDialog parentDialog=(TrayDialog)dialog;
        dialog.setDefaultExpression(tableManager.getExpressionFilter());
        dialog.addVariables(vars);
        if (Window.OK == parentDialog.open()) {
          String expressionForTable=dialog.getExpressionForTable();
          tableManager.setExpressionFilter(expressionForTable);
          tableManager.getEditPart().getViewer().getEditDomain().getCommandStack().execute(getFilterChangeCommand(tableManager.getModel(),expressionForTable));
        }
      }
    }
    @Override public void mouseReleased(    MouseEvent me){
    }
    @Override public void mouseDoubleClicked(    MouseEvent me){
    }
  }
);
}","@Override protected void addButtonListener(){
  IService expressionBuilderDialogService=GlobalServiceRegister.getDefault().getService(IExpressionBuilderDialogService.class);
  final IExpressionBuilderDialogController dialog=((IExpressionBuilderDialogService)expressionBuilderDialogService).getExpressionBuilderInstance(parent,null,null,null);
  button.addMouseListener(new MouseListener(){
    @Override public void mousePressed(    MouseEvent me){
      List<Variable> vars=new ArrayList<Variable>();
      if (tableManager.getModel() != null && (tableManager.getModel() instanceof InputTable || tableManager.getModel() instanceof OutputTable)) {
        if (tableManager.getModel().eContainer() != null && tableManager.getModel().eContainer() instanceof PigMapData) {
          PigMapData pigMapData=(PigMapData)tableManager.getModel().eContainer();
          List<InputTable> inputTables=pigMapData.getInputTables();
          for (          InputTable table : inputTables) {
            List<TableNode> nodes=table.getNodes();
            for (            TableNode node : nodes) {
              Variable variable=new Variable();
              variable.setName(table.getName());
              variable.setValue(node.getName());
              vars.add(variable);
            }
          }
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IPigMapService.class)) {
            final IPigMapService service=(IPigMapService)GlobalServiceRegister.getDefault().getService(IPigMapService.class);
            service.setPigMapData(pigMapData);
          }
        }
      }
      if (dialog instanceof TrayDialog) {
        TrayDialog parentDialog=(TrayDialog)dialog;
        MapperManager mapperManger=(MapperManager)tableManager.getMapperManger();
        mapperManger.fireCurrentDirectEditApply();
        dialog.setDefaultExpression(tableManager.getExpressionFilter());
        dialog.addVariables(vars);
        if (Window.OK == parentDialog.open()) {
          String expressionForTable=dialog.getExpressionForTable();
          tableManager.setExpressionFilter(expressionForTable);
          tableManager.getEditPart().getViewer().getEditDomain().getCommandStack().execute(getFilterChangeCommand(tableManager.getModel(),expressionForTable));
        }
      }
    }
    @Override public void mouseReleased(    MouseEvent me){
    }
    @Override public void mouseDoubleClicked(    MouseEvent me){
    }
  }
);
}",0.9718994295372914
124960,"@Override public void mousePressed(MouseEvent me){
  List<Variable> vars=new ArrayList<Variable>();
  if (tableManager.getModel() != null && (tableManager.getModel() instanceof InputTable || tableManager.getModel() instanceof OutputTable)) {
    if (tableManager.getModel().eContainer() != null && tableManager.getModel().eContainer() instanceof PigMapData) {
      PigMapData pigMapData=(PigMapData)tableManager.getModel().eContainer();
      List<InputTable> inputTables=pigMapData.getInputTables();
      for (      InputTable table : inputTables) {
        List<TableNode> nodes=table.getNodes();
        for (        TableNode node : nodes) {
          Variable variable=new Variable();
          variable.setName(table.getName());
          variable.setValue(node.getName());
          vars.add(variable);
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IPigMapService.class)) {
        final IPigMapService service=(IPigMapService)GlobalServiceRegister.getDefault().getService(IPigMapService.class);
        service.setPigMapData(pigMapData);
      }
    }
  }
  if (dialog instanceof TrayDialog) {
    TrayDialog parentDialog=(TrayDialog)dialog;
    dialog.setDefaultExpression(tableManager.getExpressionFilter());
    dialog.addVariables(vars);
    if (Window.OK == parentDialog.open()) {
      String expressionForTable=dialog.getExpressionForTable();
      tableManager.setExpressionFilter(expressionForTable);
      tableManager.getEditPart().getViewer().getEditDomain().getCommandStack().execute(getFilterChangeCommand(tableManager.getModel(),expressionForTable));
    }
  }
}","@Override public void mousePressed(MouseEvent me){
  List<Variable> vars=new ArrayList<Variable>();
  if (tableManager.getModel() != null && (tableManager.getModel() instanceof InputTable || tableManager.getModel() instanceof OutputTable)) {
    if (tableManager.getModel().eContainer() != null && tableManager.getModel().eContainer() instanceof PigMapData) {
      PigMapData pigMapData=(PigMapData)tableManager.getModel().eContainer();
      List<InputTable> inputTables=pigMapData.getInputTables();
      for (      InputTable table : inputTables) {
        List<TableNode> nodes=table.getNodes();
        for (        TableNode node : nodes) {
          Variable variable=new Variable();
          variable.setName(table.getName());
          variable.setValue(node.getName());
          vars.add(variable);
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IPigMapService.class)) {
        final IPigMapService service=(IPigMapService)GlobalServiceRegister.getDefault().getService(IPigMapService.class);
        service.setPigMapData(pigMapData);
      }
    }
  }
  if (dialog instanceof TrayDialog) {
    TrayDialog parentDialog=(TrayDialog)dialog;
    MapperManager mapperManger=(MapperManager)tableManager.getMapperManger();
    mapperManger.fireCurrentDirectEditApply();
    dialog.setDefaultExpression(tableManager.getExpressionFilter());
    dialog.addVariables(vars);
    if (Window.OK == parentDialog.open()) {
      String expressionForTable=dialog.getExpressionForTable();
      tableManager.setExpressionFilter(expressionForTable);
      tableManager.getEditPart().getViewer().getEditDomain().getCommandStack().execute(getFilterChangeCommand(tableManager.getModel(),expressionForTable));
    }
  }
}",0.962941002075304
124961,"@Override public void execute(){
  AbstractInOutTable targetTable=(AbstractInOutTable)targetEditPart.getModel();
  String expression=targetTable.getExpressionFilter();
  if (objects.getToTransfer() != null) {
    for (    Object obj : objects.getToTransfer()) {
      AbstractNode sourceNode=null;
      if (objects.getType() == TransferdType.INPUT) {
        PigMapTableNodePart part=(PigMapTableNodePart)obj;
        sourceNode=(TableNode)part.getModel();
      }
      if (sourceNode != null) {
        targetTable.setExpressionFilter(expression);
        FilterConnection connection=PigmapFactory.eINSTANCE.createFilterConnection();
        connection.setSource(sourceNode);
        connection.setTarget(targetTable);
        targetTable.getFilterIncomingConnections().add(connection);
        sourceNode.getFilterOutGoingConnections().add(connection);
        pigMapData.getConnections().add(connection);
      }
    }
  }
}","@Override public void execute(){
  AbstractInOutTable targetTable=(AbstractInOutTable)targetEditPart.getModel();
  String expression=targetTable.getExpressionFilter();
  if (objects.getToTransfer() != null) {
    for (    Object obj : objects.getToTransfer()) {
      AbstractNode sourceNode=null;
      if (objects.getType() == TransferdType.INPUT) {
        PigMapTableNodePart part=(PigMapTableNodePart)obj;
        sourceNode=(TableNode)part.getModel();
        String tableName=""String_Node_Str"";
        if (sourceNode != null && sourceNode.eContainer() instanceof InputTable) {
          InputTable table=(InputTable)sourceNode.eContainer();
          tableName=table.getName();
        }
        if (expression == null || expression.equals(""String_Node_Str"")) {
          expression=tableName + ""String_Node_Str"" + sourceNode.getName();
        }
 else {
          expression=expression + ""String_Node_Str"" + tableName+ ""String_Node_Str""+ sourceNode.getName();
        }
      }
      if (sourceNode != null) {
        targetTable.setExpressionFilter(expression);
        FilterConnection connection=PigmapFactory.eINSTANCE.createFilterConnection();
        connection.setSource(sourceNode);
        connection.setTarget(targetTable);
        targetTable.getFilterIncomingConnections().add(connection);
        sourceNode.getFilterOutGoingConnections().add(connection);
        pigMapData.getConnections().add(connection);
      }
    }
  }
}",0.7810004203446826
124962,"/** 
 * @return
 */
private JobContext initJobContextForOozie(JobSubmissionType jobSubType,IContext context){
  JobContext jobContext=new JobContext();
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (ComponentCategory.CATEGORY_4_MAPREDUCE.getName().equals(process.getComponentsType())) {
    String fsForMapReduceJob=(String)process.getElementParameter(""String_Node_Str"").getValue();
    jobContext.set(""String_Node_Str"",TalendQuoteUtils.removeQuotesIfExist(fsForMapReduceJob));
    String jtForMapReduceJob=(String)process.getElementParameter(""String_Node_Str"").getValue();
    jobContext.set(""String_Node_Str"",TalendQuoteUtils.removeQuotesIfExist(jtForMapReduceJob));
  }
  if (TOozieParamUtils.enableKerberos()) {
    jobContext.set(""String_Node_Str"",TOozieParamUtils.getPrincipal());
  }
  if (process != null) {
    JSONArray props=new JSONArray();
    for (    Map<String,Object> property : settingDialog.getPropertiesValue()) {
      props.put(property);
    }
    jobContext.set(""String_Node_Str"",props.toString());
    StringBuffer libJars=new StringBuffer();
    Set<String> libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer(process);
    if (libNames != null && libNames.size() > 0) {
      Iterator<String> itLibNames=libNames.iterator();
      while (itLibNames.hasNext()) {
        libJars.append(itLibNames.next()).append(""String_Node_Str"");
      }
    }
    jobContext.set(""String_Node_Str"",libJars.substring(0,libJars.length() - 1));
  }
  String jobName=process.getLabel();
  jobContext.setJobName(jobName);
  String path=executeJobComposite.getPathValue();
  jobContext.setJobPathOnHDFS(path);
  String oozieEPValue=getOozieEndPoint();
  jobContext.setOozieEndPoint(oozieEPValue);
  String nameNodeEPValue=getNameNode();
  jobContext.setNameNodeEndPoint(nameNodeEPValue);
  String jobTrackerEPValue=getJobTracker();
  jobContext.setJobTrackerEndPoint(jobTrackerEPValue);
  String appPath=path;
  String hadoopDistribution=getHadoopDistribution();
  EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hadoopDistribution,false);
  if (distribution == EHadoopDistributions.MAPR) {
    appPath=""String_Node_Str"".concat(appPath);
  }
 else   if (nameNodeEPValue != null) {
    appPath=nameNodeEPValue.concat(appPath);
  }
  jobContext.set(OozieClient.APP_PATH,appPath);
  String userNameValue=getUserNameForHadoop();
  jobContext.set(OozieClient.USER_NAME,userNameValue);
  String tosJobFQCN=getTOSJobFQCNValue();
  jobContext.setJobFQClassName(tosJobFQCN);
  jobContext.setTosContextPath(context.getName());
switch (jobSubType) {
case LOCAL:
    break;
case REMOTE:
  break;
case SCHEDULED:
int fequency=getFrequencyValue();
jobContext.setFrequency(fequency);
Timeunit timeUnit=getTimeUnitValue();
jobContext.setTimeUnit(timeUnit);
Date startTime=getStartTimeValue();
jobContext.setStartTime(startTime);
Date endTime=getEndTimeValue();
jobContext.setEndTime(endTime);
break;
default :
}
return jobContext;
}","/** 
 * @return
 */
private JobContext initJobContextForOozie(JobSubmissionType jobSubType,IContext context){
  JobContext jobContext=new JobContext();
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (ComponentCategory.CATEGORY_4_MAPREDUCE.getName().equals(process.getComponentsType())) {
    String fsForMapReduceJob=(String)process.getElementParameter(""String_Node_Str"").getValue();
    jobContext.set(""String_Node_Str"",TalendQuoteUtils.removeQuotesIfExist(fsForMapReduceJob));
    String jtForMapReduceJob=(String)process.getElementParameter(""String_Node_Str"").getValue();
    jobContext.set(""String_Node_Str"",TalendQuoteUtils.removeQuotesIfExist(jtForMapReduceJob));
  }
  if (TOozieParamUtils.enableKerberos()) {
    jobContext.set(""String_Node_Str"",TOozieParamUtils.getPrincipal());
  }
  if (process != null && settingDialog != null) {
    JSONArray props=new JSONArray();
    for (    Map<String,Object> property : settingDialog.getPropertiesValue()) {
      props.put(property);
    }
    jobContext.set(""String_Node_Str"",props.toString());
    StringBuffer libJars=new StringBuffer();
    Set<String> libNames=JavaProcessorUtilities.extractLibNamesOnlyForMapperAndReducer(process);
    if (libNames != null && libNames.size() > 0) {
      Iterator<String> itLibNames=libNames.iterator();
      while (itLibNames.hasNext()) {
        libJars.append(itLibNames.next()).append(""String_Node_Str"");
      }
    }
    jobContext.set(""String_Node_Str"",libJars.substring(0,libJars.length() - 1));
  }
  String jobName=process.getLabel();
  jobContext.setJobName(jobName);
  String path=executeJobComposite.getPathValue();
  jobContext.setJobPathOnHDFS(path);
  String oozieEPValue=getOozieEndPoint();
  jobContext.setOozieEndPoint(oozieEPValue);
  String nameNodeEPValue=getNameNode();
  jobContext.setNameNodeEndPoint(nameNodeEPValue);
  String jobTrackerEPValue=getJobTracker();
  jobContext.setJobTrackerEndPoint(jobTrackerEPValue);
  String appPath=path;
  String hadoopDistribution=getHadoopDistribution();
  EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hadoopDistribution,false);
  if (distribution == EHadoopDistributions.MAPR) {
    appPath=""String_Node_Str"".concat(appPath);
  }
 else   if (nameNodeEPValue != null) {
    appPath=nameNodeEPValue.concat(appPath);
  }
  jobContext.set(OozieClient.APP_PATH,appPath);
  String userNameValue=getUserNameForHadoop();
  jobContext.set(OozieClient.USER_NAME,userNameValue);
  String tosJobFQCN=getTOSJobFQCNValue();
  jobContext.setJobFQClassName(tosJobFQCN);
  jobContext.setTosContextPath(context.getName());
switch (jobSubType) {
case LOCAL:
    break;
case REMOTE:
  break;
case SCHEDULED:
int fequency=getFrequencyValue();
jobContext.setFrequency(fequency);
Timeunit timeUnit=getTimeUnitValue();
jobContext.setTimeUnit(timeUnit);
Date startTime=getStartTimeValue();
jobContext.setStartTime(startTime);
Date endTime=getEndTimeValue();
jobContext.setEndTime(endTime);
break;
default :
}
return jobContext;
}",0.9958312489578124
124963,"/** 
 * Updates all buttons status, enabled or not.
 */
public void updateAllEnabledOrNot(){
  String jobIdInOozie=getJobIdInOozie();
  String pathValue=executeJobComposite.getPathValue();
  Button runBtn=executeJobComposite.getRunBtn();
  Button scheduleBtn=executeJobComposite.getScheduleBtn();
  Button killBtn=executeJobComposite.getKillBtn();
  if (pathValue != null && !""String_Node_Str"".equals(pathValue) && isSettingDone()) {
    if (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie)) {
      try {
        JobSubmission.Status status=checkJobSubmissionStaus(jobIdInOozie);
switch (status) {
case RUNNING:
          isRunBtnEnabled=false;
        isScheduleBtnEnabled=false;
      isKillBtnEnabled=true;
    break;
case PREP:
case SUCCEEDED:
case KILLED:
  isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
break;
case FAILED:
case SUSPENDED:
isKillBtnEnabled=true;
isScheduleBtnEnabled=true;
isRunBtnEnabled=true;
}
}
 catch (JobSubmissionException e) {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
org.talend.commons.exception.ExceptionHandler.process(e);
}
}
 else {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
}
}
updateBtn(runBtn,isRunBtnEnabled);
updateBtn(scheduleBtn,isScheduleBtnEnabled);
updateBtn(killBtn,isKillBtnEnabled);
updatePathTxtEnabledOrNot();
updateOutputTxtEnabledOrNot();
}","/** 
 * Updates all buttons status, enabled or not.
 */
public void updateAllEnabledOrNot(){
  String jobIdInOozie=getJobIdInOozie();
  String pathValue=executeJobComposite.getPathValue();
  Button runBtn=executeJobComposite.getRunBtn();
  Button scheduleBtn=executeJobComposite.getScheduleBtn();
  Button killBtn=executeJobComposite.getKillBtn();
  boolean isRunBtnEnabled=false;
  boolean isScheduleBtnEnabled=false;
  boolean isKillBtnEnabled=false;
  if (pathValue != null && !""String_Node_Str"".equals(pathValue) && isSettingDone()) {
    if (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie)) {
      try {
        JobSubmission.Status status=checkJobSubmissionStaus(jobIdInOozie);
switch (status) {
case RUNNING:
          isRunBtnEnabled=false;
        isScheduleBtnEnabled=false;
      isKillBtnEnabled=true;
    break;
case PREP:
case SUCCEEDED:
case KILLED:
  isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
break;
case FAILED:
case SUSPENDED:
isKillBtnEnabled=true;
isScheduleBtnEnabled=true;
isRunBtnEnabled=true;
}
}
 catch (JobSubmissionException e) {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
org.talend.commons.exception.ExceptionHandler.process(e);
}
}
 else {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
}
}
updateBtn(runBtn,isRunBtnEnabled);
updateBtn(scheduleBtn,isScheduleBtnEnabled);
updateBtn(killBtn,isKillBtnEnabled);
updatePathTxtEnabledOrNot();
updateOutputTxtEnabledOrNot();
}",0.9638055842812824
124964,"@Override public void execute(){
  PigMapOutputTablePart currentSelectedOutputTable=graphicViewer.getFiguresManager().getCurrentSelectedOutputTable();
  if (currentSelectedOutputTable != null) {
    OutputTable outputTable=(OutputTable)currentSelectedOutputTable.getModel();
    int indexOf=externalPart.getModelChildren().indexOf(outputTable);
    mapperComponent.getProcess().removeUniqueConnectionName(outputTable.getName());
    removeMetadataTableByName(outputTable.getName());
    for (    TableNode tableNode : outputTable.getNodes()) {
      PigMapUtil.detachConnectionsSouce(tableNode,externalData);
    }
    externalData.getOutputTables().remove(outputTable);
    PigMapUtil.detachFilterSource(outputTable,externalData);
    indexOf=indexOf - 1;
    if (indexOf > -1 && (EditPart)externalPart.getChildren().get(indexOf) instanceof PigMapOutputTablePart) {
      graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf));
    }
 else     if (indexOf > -1 && indexOf + 1 < externalPart.getChildren().size() && (EditPart)externalPart.getChildren().get(indexOf + 1) instanceof PigMapOutputTablePart) {
      graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf + 1));
    }
 else {
      mapperManger.getMapperUI().getTabFolderEditors().getOutputMetaEditorView().setMetadataTableEditor(null);
    }
    mapperManger.getMapperUI().updateStatusBar();
  }
  if (externalData.getOutputTables().isEmpty() && min_size.isEnabled()) {
    min_size.setEnabled(false);
  }
}","@Override public void execute(){
  PigMapOutputTablePart currentSelectedOutputTable=graphicViewer.getFiguresManager().getCurrentSelectedOutputTable();
  if (currentSelectedOutputTable != null) {
    OutputTable outputTable=(OutputTable)currentSelectedOutputTable.getModel();
    int indexOf=externalPart.getModelChildren().indexOf(outputTable);
    mapperComponent.getProcess().removeUniqueConnectionName(outputTable.getName());
    removeMetadataTableByName(outputTable.getName());
    for (    TableNode tableNode : outputTable.getNodes()) {
      PigMapUtil.detachConnectionsSouce(tableNode,externalData);
    }
    externalData.getOutputTables().remove(outputTable);
    PigMapUtil.detachFilterSource(outputTable,externalData);
    indexOf=indexOf - 1;
    if (indexOf > -1 && (EditPart)externalPart.getChildren().get(indexOf) instanceof PigMapOutputTablePart) {
      graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf));
    }
 else     if (indexOf > -1 && indexOf + 1 < externalPart.getChildren().size() && (EditPart)externalPart.getChildren().get(indexOf + 1) instanceof PigMapOutputTablePart) {
      graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf + 1));
    }
 else {
      mapperManger.getMapperUI().getTabFolderEditors().getOutputMetaEditorView().setMetadataTableEditor(null);
    }
    mapperManger.getMapperUI().updateStatusBar();
  }
  if (externalData.getOutputTables().isEmpty() && min_size.isEnabled()) {
    min_size.setEnabled(false);
  }
  if (externalData.getOutputTables().isEmpty() || externalData.getInputTables().isEmpty()) {
    auto_map.setEnabled(false);
  }
}",0.9588254069581872
124965,"@Override protected void removeTable(){
  CommandStack commandStack=graphicViewer.getEditDomain().getCommandStack();
  commandStack.execute(new Command(){
    @Override public void execute(){
      PigMapOutputTablePart currentSelectedOutputTable=graphicViewer.getFiguresManager().getCurrentSelectedOutputTable();
      if (currentSelectedOutputTable != null) {
        OutputTable outputTable=(OutputTable)currentSelectedOutputTable.getModel();
        int indexOf=externalPart.getModelChildren().indexOf(outputTable);
        mapperComponent.getProcess().removeUniqueConnectionName(outputTable.getName());
        removeMetadataTableByName(outputTable.getName());
        for (        TableNode tableNode : outputTable.getNodes()) {
          PigMapUtil.detachConnectionsSouce(tableNode,externalData);
        }
        externalData.getOutputTables().remove(outputTable);
        PigMapUtil.detachFilterSource(outputTable,externalData);
        indexOf=indexOf - 1;
        if (indexOf > -1 && (EditPart)externalPart.getChildren().get(indexOf) instanceof PigMapOutputTablePart) {
          graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf));
        }
 else         if (indexOf > -1 && indexOf + 1 < externalPart.getChildren().size() && (EditPart)externalPart.getChildren().get(indexOf + 1) instanceof PigMapOutputTablePart) {
          graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf + 1));
        }
 else {
          mapperManger.getMapperUI().getTabFolderEditors().getOutputMetaEditorView().setMetadataTableEditor(null);
        }
        mapperManger.getMapperUI().updateStatusBar();
      }
      if (externalData.getOutputTables().isEmpty() && min_size.isEnabled()) {
        min_size.setEnabled(false);
      }
    }
  }
);
}","@Override protected void removeTable(){
  CommandStack commandStack=graphicViewer.getEditDomain().getCommandStack();
  commandStack.execute(new Command(){
    @Override public void execute(){
      PigMapOutputTablePart currentSelectedOutputTable=graphicViewer.getFiguresManager().getCurrentSelectedOutputTable();
      if (currentSelectedOutputTable != null) {
        OutputTable outputTable=(OutputTable)currentSelectedOutputTable.getModel();
        int indexOf=externalPart.getModelChildren().indexOf(outputTable);
        mapperComponent.getProcess().removeUniqueConnectionName(outputTable.getName());
        removeMetadataTableByName(outputTable.getName());
        for (        TableNode tableNode : outputTable.getNodes()) {
          PigMapUtil.detachConnectionsSouce(tableNode,externalData);
        }
        externalData.getOutputTables().remove(outputTable);
        PigMapUtil.detachFilterSource(outputTable,externalData);
        indexOf=indexOf - 1;
        if (indexOf > -1 && (EditPart)externalPart.getChildren().get(indexOf) instanceof PigMapOutputTablePart) {
          graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf));
        }
 else         if (indexOf > -1 && indexOf + 1 < externalPart.getChildren().size() && (EditPart)externalPart.getChildren().get(indexOf + 1) instanceof PigMapOutputTablePart) {
          graphicViewer.select((EditPart)externalPart.getChildren().get(indexOf + 1));
        }
 else {
          mapperManger.getMapperUI().getTabFolderEditors().getOutputMetaEditorView().setMetadataTableEditor(null);
        }
        mapperManger.getMapperUI().updateStatusBar();
      }
      if (externalData.getOutputTables().isEmpty() && min_size.isEnabled()) {
        min_size.setEnabled(false);
      }
      if (externalData.getOutputTables().isEmpty() || externalData.getInputTables().isEmpty()) {
        auto_map.setEnabled(false);
      }
    }
  }
);
}",0.9618609683527184
124966,"@Override protected void addTable(){
  final OutputTable createOutputTable=PigmapFactory.eINSTANCE.createOutputTable();
  CommandStack commandStack=externalPart.getViewer().getEditDomain().getCommandStack();
  commandStack.execute(new Command(){
    @Override public void execute(){
      if (externalPart.getViewer() instanceof PigMapGraphicViewer) {
        PigMapGraphicViewer viewer=(PigMapGraphicViewer)externalPart.getViewer();
        MapperManager manager=viewer.getMapperManager();
        String outputName=manager.getMapperUI().openNewOutputCreationDialog();
        if (outputName == null) {
          return;
        }
        createOutputTable.setName(outputName);
        externalData.getOutputTables().add(createOutputTable);
        MetadataTable metadataTable=new MetadataTable();
        metadataTable.setLabel(outputName);
        metadataTable.setTableName(outputName);
        mapperComponent.getMetadataList().add(metadataTable);
        mapperComponent.getProcess().addUniqueConnectionName(outputName);
        int indexOf=externalPart.getModelChildren().indexOf(createOutputTable);
        if (indexOf != -1) {
          externalPart.getViewer().select((EditPart)externalPart.getChildren().get(indexOf));
        }
        if (!min_size.isEnabled()) {
          min_size.setEnabled(true);
        }
        mapperManger.getMapperUI().updateStatusBar();
      }
    }
  }
);
}","@Override protected void addTable(){
  final OutputTable createOutputTable=PigmapFactory.eINSTANCE.createOutputTable();
  CommandStack commandStack=externalPart.getViewer().getEditDomain().getCommandStack();
  commandStack.execute(new Command(){
    @Override public void execute(){
      if (externalPart.getViewer() instanceof PigMapGraphicViewer) {
        PigMapGraphicViewer viewer=(PigMapGraphicViewer)externalPart.getViewer();
        MapperManager manager=viewer.getMapperManager();
        String outputName=manager.getMapperUI().openNewOutputCreationDialog();
        if (outputName == null) {
          return;
        }
        createOutputTable.setName(outputName);
        externalData.getOutputTables().add(createOutputTable);
        MetadataTable metadataTable=new MetadataTable();
        metadataTable.setLabel(outputName);
        metadataTable.setTableName(outputName);
        mapperComponent.getMetadataList().add(metadataTable);
        mapperComponent.getProcess().addUniqueConnectionName(outputName);
        int indexOf=externalPart.getModelChildren().indexOf(createOutputTable);
        if (indexOf != -1) {
          externalPart.getViewer().select((EditPart)externalPart.getChildren().get(indexOf));
        }
        if (!min_size.isEnabled()) {
          min_size.setEnabled(true);
        }
        if (!externalData.getOutputTables().isEmpty() && !externalData.getInputTables().isEmpty()) {
          auto_map.setEnabled(true);
        }
        mapperManger.getMapperUI().updateStatusBar();
      }
    }
  }
);
}",0.949796472184532
124967,"@Override public void selectionChanged(SelectionChangedEvent event){
  if (!event.getSelection().isEmpty() && event.getSelection() instanceof IStructuredSelection) {
    Iterator iterator=((IStructuredSelection)event.getSelection()).iterator();
    while (iterator.hasNext()) {
      Object firstElement=iterator.next();
      if (firstElement instanceof TableEntityPart) {
        AbstractNode model=(AbstractNode)((TableEntityPart)firstElement).getModel();
        boolean isInputMain=false;
        if (model != null && model instanceof TableNode && model.eContainer() != null) {
          if (model.eContainer() instanceof OutputTable) {
            onEntitySelection((IStructuredSelection)event.getSelection(),selectedOutputTable);
          }
 else {
            onEntitySelection((IStructuredSelection)event.getSelection(),selectedInputTable);
          }
        }
        if (!isInputMain) {
          refreshStyledTextEditor((TableEntityPart)firstElement);
        }
 else {
          refreshStyledTextEditor(null);
        }
      }
 else       if (firstElement instanceof PigMapInputTablePart) {
        selectInputTable((InputTable)((PigMapInputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
 else       if (firstElement instanceof PigMapOutputTablePart) {
        selectOutputTable((OutputTable)((PigMapOutputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
    }
  }
}","@Override public void selectionChanged(SelectionChangedEvent event){
  if (!event.getSelection().isEmpty() && event.getSelection() instanceof IStructuredSelection) {
    Iterator iterator=((IStructuredSelection)event.getSelection()).iterator();
    while (iterator.hasNext()) {
      Object firstElement=iterator.next();
      if (firstElement instanceof TableEntityPart) {
        AbstractNode model=(AbstractNode)((TableEntityPart)firstElement).getModel();
        boolean isInputMain=false;
        if (model != null && model instanceof TableNode && model.eContainer() != null) {
          if (model.eContainer() instanceof OutputTable) {
            selectOutputTable((OutputTable)model.eContainer());
            onEntitySelection((IStructuredSelection)event.getSelection(),selectedOutputTable);
          }
 else {
            selectInputTable((InputTable)model.eContainer());
            onEntitySelection((IStructuredSelection)event.getSelection(),selectedInputTable);
          }
        }
        if (!isInputMain) {
          refreshStyledTextEditor((TableEntityPart)firstElement);
        }
 else {
          refreshStyledTextEditor(null);
        }
      }
 else       if (firstElement instanceof PigMapInputTablePart) {
        selectInputTable((InputTable)((PigMapInputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
 else       if (firstElement instanceof PigMapOutputTablePart) {
        selectOutputTable((OutputTable)((PigMapOutputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
    }
  }
}",0.958498023715415
124968,"public void doModifyPathAction(){
  if (OozieJobTrackerListener.getProcess() != null) {
    String path=executeJobComposite.getPathValue();
    IProcess2 process=OozieJobTrackerListener.getProcess();
    process.getElementParameter(EOozieParameterName.HADOOP_APP_PATH.getName()).setValue(path);
  }
  updateRunBtnEnabledOrNot();
  updateScheduleBtnEnabledOrNot();
  updateKillBtnEnabledOrNot();
  updatePathTxtEnabledOrNot();
  updateOutputTxtEnabledOrNot();
}","public void doModifyPathAction(){
  if (OozieJobTrackerListener.getProcess() != null) {
    String path=executeJobComposite.getPathValue();
    IProcess2 process=OozieJobTrackerListener.getProcess();
    process.getElementParameter(EOozieParameterName.HADOOP_APP_PATH.getName()).setValue(path);
  }
  updateAllEnabledOrNot();
}",0.8233799237611181
124969,"/** 
 * Updates all buttons status, enabled or not.
 */
public void updateAllEnabledOrNot(){
  updateRunBtnEnabledOrNot();
  updateScheduleBtnEnabledOrNot();
  updateKillBtnEnabledOrNot();
  updatePathTxtEnabledOrNot();
  updateOutputTxtEnabledOrNot();
}","/** 
 * Updates all buttons status, enabled or not.
 */
public void updateAllEnabledOrNot(){
  String jobIdInOozie=getJobIdInOozie();
  String pathValue=executeJobComposite.getPathValue();
  Button runBtn=executeJobComposite.getRunBtn();
  Button scheduleBtn=executeJobComposite.getScheduleBtn();
  Button killBtn=executeJobComposite.getKillBtn();
  if (pathValue != null && !""String_Node_Str"".equals(pathValue) && isSettingDone()) {
    if (jobIdInOozie != null && !""String_Node_Str"".equals(jobIdInOozie)) {
      try {
        JobSubmission.Status status=checkJobSubmissionStaus(jobIdInOozie);
switch (status) {
case RUNNING:
          isRunBtnEnabled=false;
        isScheduleBtnEnabled=false;
      isKillBtnEnabled=true;
    break;
case PREP:
case SUCCEEDED:
case KILLED:
  isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
break;
case FAILED:
case SUSPENDED:
isKillBtnEnabled=true;
isScheduleBtnEnabled=true;
isRunBtnEnabled=true;
}
}
 catch (JobSubmissionException e) {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
org.talend.commons.exception.ExceptionHandler.process(e);
}
}
 else {
isRunBtnEnabled=true;
isScheduleBtnEnabled=true;
isKillBtnEnabled=false;
}
}
updateBtn(runBtn,isRunBtnEnabled);
updateBtn(scheduleBtn,isScheduleBtnEnabled);
updateBtn(killBtn,isKillBtnEnabled);
updatePathTxtEnabledOrNot();
updateOutputTxtEnabledOrNot();
}",0.2203389830508474
124970,"@Override public Status status(String jobHandle,String oozieEndPoint) throws JobSubmissionException {
  try {
    OozieClient oozieClient=createOozieClient(oozieEndPoint,0);
    WorkflowJob workflowJob=oozieClient.getJobInfo(jobHandle);
    if (workflowJob == null) {
      throw new OozieClientException(OozieClientException.INVALID_INPUT,""String_Node_Str"");
    }
    String status=oozieClient.getJobInfo(jobHandle).getStatus().name();
    return Status.valueOf(status);
  }
 catch (  OozieClientException e) {
    throw new JobSubmissionException(""String_Node_Str"" + jobHandle,e);
  }
}","@Override public Status status(String jobHandle,String oozieEndPoint) throws JobSubmissionException {
  Status status=null;
  Callable<Status> statusCallable=null;
  statusCallable=getStatus(jobHandle,oozieEndPoint);
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Status> future=executor.submit(statusCallable);
  try {
    status=future.get(TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    future.cancel(true);
    throw new JobSubmissionException(""String_Node_Str"" + jobHandle,e);
  }
  return status;
}",0.2634836427939876
124971,"/** 
 * @param parent
 * @param style
 */
public ExecuteJobComposite(Composite parent,int style){
  super(parent,style);
  parent.setLayout(new FillLayout());
  setExpandHorizontal(true);
  setExpandVertical(true);
  this.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_DARK_GRAY));
  Composite comp=new Composite(this,SWT.NONE);
  setContent(comp);
  executeJobCompController=new ExecuteJobCompositeController(this);
  createExecuteJobAreas(comp);
  this.setMinSize(comp.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  executeJobCompController.updateAllEnabledOrNot();
}","/** 
 * @param parent
 * @param style
 */
public ExecuteJobComposite(Composite parent,int style){
  super(parent,style);
  parent.setLayout(new FillLayout());
  setExpandHorizontal(true);
  setExpandVertical(true);
  this.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_DARK_GRAY));
  Composite comp=new Composite(this,SWT.NONE);
  setContent(comp);
  executeJobCompController=new ExecuteJobCompositeController(this);
  createExecuteJobAreas(comp);
  this.setMinSize(comp.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}",0.9526411657559198
124972,"public void initValues(){
  executeJobCompController.initValues();
  executeJobCompController.updateAllEnabledOrNot();
}","public void initValues(){
  executeJobCompController.initValues();
}",0.723404255319149
124973,"public void refresh(){
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (process != null) {
    String label=process.getLabel();
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
      executeJobComposite.setContextComposite(contextComposite);
    }
    tabFactory.setTitle(Messages.getString(""String_Node_Str"",label),null);
    setPartName(Messages.getString(""String_Node_Str"",label));
    contextComposite.setProcess(process);
  }
 else {
    tabFactory.setTitle(Messages.getString(""String_Node_Str""),null);
    setPartName(Messages.getString(""String_Node_Str""));
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
    }
    contextComposite.setProcess(null);
  }
}","public void refresh(){
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (process != null) {
    String label=process.getLabel();
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
      executeJobComposite.setContextComposite(contextComposite);
    }
    tabFactory.setTitle(Messages.getString(""String_Node_Str"",label),null);
    setPartName(Messages.getString(""String_Node_Str"",label));
    contextComposite.setProcess(process);
  }
 else {
    tabFactory.setTitle(Messages.getString(""String_Node_Str""),null);
    setPartName(Messages.getString(""String_Node_Str""));
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
    }
    contextComposite.setProcess(null);
  }
  executeJobComposite.getExecuteJobCompController().updateAllEnabledOrNot();
}",0.9547325102880658
124974,"public void createDynamicComposite(Composite parent,Element element,EComponentCategory category){
  if (category == EComponentCategory.SCHEDULE_4_HADOOP_EXECUTE_JOB) {
    executeJobComposite=new ExecuteJobComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NO_FOCUS);
    dc=executeJobComposite;
  }
 else   if (category == EComponentCategory.SCHEDULE_4_HADOOP_MONITORING) {
    monitoringComposite=new OozieMonitoringComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
    dc=monitoringComposite;
  }
  refresh();
  if (dc != null) {
    dc.refresh();
  }
}","public void createDynamicComposite(Composite parent,Element element,EComponentCategory category){
  if (category == EComponentCategory.SCHEDULE_4_HADOOP_EXECUTE_JOB) {
    executeJobComposite=new ExecuteJobComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.NO_FOCUS);
    dc=executeJobComposite;
  }
 else   if (category == EComponentCategory.SCHEDULE_4_HADOOP_MONITORING) {
    monitoringComposite=new OozieMonitoringComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
    dc=monitoringComposite;
  }
  if (dc != null) {
    dc.refresh();
  }
}",0.9881061299176578
124975,"private String getRelativePath(HDFSConnectionBean connection,String absPath){
  String nameNodeURI=TalendQuoteUtils.removeQuotesIfExist(connection.getNameNodeURI());
  if (absPath.startsWith(nameNodeURI)) {
    absPath=absPath.substring(absPath.indexOf(nameNodeURI) + nameNodeURI.length());
  }
  if (absPath.indexOf(COLON) != -1) {
    absPath=absPath.substring(absPath.lastIndexOf(COLON) + 1);
  }
  if (!absPath.startsWith(PATH_SEPARATOR)) {
    absPath=PATH_SEPARATOR + absPath;
  }
  return absPath;
}","private String getRelativePath(HDFSConnectionBean connection,String absPath){
  String nameNodeURI=TalendQuoteUtils.removeQuotesIfExist(connection.getNameNodeURI());
  if (absPath.startsWith(nameNodeURI)) {
    absPath=absPath.substring(absPath.indexOf(nameNodeURI) + nameNodeURI.length());
  }
 else   if (nameNodeURI.endsWith(HadoopParameterUtil.DEFAULT_NAMENODE_PORT)) {
    String nameNodeURIWithoutPort=nameNodeURI.substring(0,nameNodeURI.lastIndexOf(HadoopParameterUtil.DEFAULT_NAMENODE_PORT) - 1);
    if (absPath.startsWith(nameNodeURIWithoutPort)) {
      absPath=absPath.substring(absPath.indexOf(nameNodeURIWithoutPort) + nameNodeURIWithoutPort.length());
    }
  }
  if (absPath.indexOf(COLON) != -1) {
    absPath=absPath.substring(absPath.lastIndexOf(COLON) + 1);
  }
  if (!absPath.startsWith(PATH_SEPARATOR)) {
    absPath=PATH_SEPARATOR + absPath;
  }
  return absPath;
}",0.7259684361549498
124976,"private void updateVersionPart(EHadoopDistributions distribution){
  GridData distriData=(GridData)hadoopDistributionCombo.getCombo().getLayoutData();
  if (distribution == EHadoopDistributions.CUSTOM) {
    hadoopVersionCombo.setHideWidgets(true);
    distriData.horizontalSpan=1;
    hideControl(customButton,false);
  }
 else {
    hadoopVersionCombo.setHideWidgets(false);
    distriData.horizontalSpan=2;
    hideControl(customButton,true);
    List<String> items=getDistributionVersions(distribution);
    String[] versions=new String[items.size()];
    items.toArray(versions);
    hadoopVersionCombo.getCombo().setItems(versions);
    if (versions.length > 0) {
      hadoopVersionCombo.getCombo().select(0);
    }
  }
}","private void updateVersionPart(EHadoopDistributions distribution){
  GridData distriData=(GridData)hadoopDistributionCombo.getCombo().getLayoutData();
  if (distribution == EHadoopDistributions.CUSTOM) {
    hadoopVersionCombo.setHideWidgets(true);
    distriData.horizontalSpan=1;
    hideControl(customButton,false);
  }
 else {
    hadoopVersionCombo.setHideWidgets(false);
    distriData.horizontalSpan=2;
    hideControl(customButton,true);
    List<String> items=getDistributionVersions(distribution);
    if (distribution == EHadoopDistributions.MAPR) {
      items.remove(EHadoopVersion4Drivers.MAPR1.getVersionDisplay());
    }
    String[] versions=new String[items.size()];
    items.toArray(versions);
    hadoopVersionCombo.getCombo().setItems(versions);
    if (versions.length > 0) {
      hadoopVersionCombo.getCombo().select(0);
    }
  }
}",0.9186119873817036
124977,"private void addVersionFields(Composite parent){
  Group versionGroup=Form.createGroup(parent,3,TOozieUIConstants.OOZIE_LBL_VERSION_GROUP);
  versionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  hadoopDistributionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_DISTRIBUTION,""String_Node_Str"",EHadoopDistributions.getAllDistributionDisplayNames().toArray(new String[0]),2,true);
  hadoopVersionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_VERSION,""String_Node_Str"",new String[0],2,true);
  customButton=new Button(versionGroup,SWT.NULL);
  customButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  customButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,true,false,1,1));
  EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hadoopDistributionValue,false);
  updateVersionPart(distribution);
}","private void addVersionFields(Composite parent){
  Group versionGroup=Form.createGroup(parent,3,TOozieUIConstants.OOZIE_LBL_VERSION_GROUP);
  versionGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  List<String> filterDistributionDisplayNames=EHadoopDistributions.getAllDistributionDisplayNames();
  filterDistributionDisplayNames.remove(EHadoopDistributions.APACHE.getDisplayName());
  filterDistributionDisplayNames.remove(EHadoopDistributions.AMAZON_EMR.getDisplayName());
  hadoopDistributionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_DISTRIBUTION,""String_Node_Str"",filterDistributionDisplayNames.toArray(new String[0]),2,true);
  hadoopVersionCombo=new LabelledCombo(versionGroup,TOozieUIConstants.OOZIE_LBL_HADOOP_VERSION,""String_Node_Str"",new String[0],2,true);
  customButton=new Button(versionGroup,SWT.NULL);
  customButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  customButton.setLayoutData(new GridData(SWT.BEGINNING,SWT.CENTER,true,false,1,1));
  EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hadoopDistributionValue,false);
  updateVersionPart(distribution);
}",0.848747591522158
124978,"protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  boolean isMr=false;
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().equals(""String_Node_Str"")) {
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      IComponent component=iNode.getComponent();
      if (component != null && component.getName() != null && component.getName().equals(""String_Node_Str"")) {
        node=iNode;
        if (node instanceof DataNode) {
          DataNode dataNode=(DataNode)node;
          IElementParameter versionParameter=dataNode.getElementParameter(EHadoopParameter.MR_VERSION.getName());
          if (versionParameter != null) {
            connectionBean.setDfVersion((String)versionParameter.getValue());
            isMr=true;
          }
          IElementParameter nameNodeParameter=dataNode.getElementParameter(EHadoopParameter.NAMENODE.getName());
          if (nameNodeParameter != null) {
            connectionBean.setNameNodeURI((String)nameNodeParameter.getValue());
            isMr=true;
          }
        }
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  if (!isMr) {
    String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
    String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
    connectionBean.setDfVersion(version);
    connectionBean.setNameNodeURI(nameNodeUri);
  }
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  connectionBean.setDistribution(distribution);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}","protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  boolean isMr=false;
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().equals(""String_Node_Str"")) {
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      IComponent component=iNode.getComponent();
      if (component != null && component.getName() != null && component.getName().equals(""String_Node_Str"")) {
        node=iNode;
        if (node instanceof DataNode) {
          DataNode dataNode=(DataNode)node;
          IElementParameter versionParameter=dataNode.getElementParameter(EHadoopParameter.MR_VERSION.getName());
          if (versionParameter != null) {
            connectionBean.setDfVersion((String)versionParameter.getValue());
            isMr=true;
          }
          IElementParameter nameNodeParameter=dataNode.getElementParameter(EHadoopParameter.NAMENODE.getName());
          if (nameNodeParameter != null) {
            connectionBean.setNameNodeURI((String)nameNodeParameter.getValue());
            isMr=true;
          }
        }
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  if (!isMr) {
    String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
    String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
    connectionBean.setDfVersion(version);
    connectionBean.setNameNodeURI(nameNodeUri);
  }
  EHadoopVersion4Drivers version4Drivers=EHadoopVersion4Drivers.indexOfByVersion(connectionBean.getDfVersion());
  if (HadoopServerUtil.isSupportGroup(version4Drivers)) {
    String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
    connectionBean.setGroup(group);
  }
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  connectionBean.setDistribution(distribution);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(principal);
  return connectionBean;
}",0.8722763507528787
124979,"private String getRelativePath(HDFSConnectionBean connection,String absPath){
  String nameNodeURI=TalendQuoteUtils.removeQuotesIfExist(connection.getNameNodeURI());
  if (absPath.startsWith(nameNodeURI)) {
    absPath=absPath.substring(absPath.indexOf(nameNodeURI) + nameNodeURI.length());
  }
 else   if (nameNodeURI.endsWith(HadoopParameterUtil.DEFAULT_NAMENODE_PORT)) {
    String nameNodeURIWithoutPort=nameNodeURI.substring(0,nameNodeURI.lastIndexOf(HadoopParameterUtil.DEFAULT_NAMENODE_PORT) - 1);
    if (absPath.startsWith(nameNodeURIWithoutPort)) {
      absPath=absPath.substring(absPath.indexOf(nameNodeURIWithoutPort) + nameNodeURIWithoutPort.length());
    }
  }
  if (absPath.indexOf(COLON) != -1) {
    absPath=absPath.substring(absPath.lastIndexOf(COLON) + 1);
  }
  if (!absPath.startsWith(PATH_SEPARATOR)) {
    absPath=PATH_SEPARATOR + absPath;
  }
  return absPath;
}","private String getRelativePath(HDFSConnectionBean connection,String absPath){
  return URI.create(absPath).getPath();
}",0.2164846077457795
124980,"private TableNode findConnectionSource(TableNode tableNode,TableEntryLocation matchedLocation){
  return null;
}","protected AbstractNode findConnectionSource(PigMapData mapperData,TableEntryLocation matchedLocation){
  if (mapperData == null) {
    return null;
  }
  for (  InputTable inputTable : mapperData.getInputTables()) {
    for (    TableNode node : inputTable.getNodes()) {
      TableEntryLocation sourceLocation=expressionManager.parseTableEntryLocation(inputTable.getName() + ""String_Node_Str"" + node.getName()).get(0);
      if (matchedLocation.equals(sourceLocation)) {
        return node;
      }
    }
  }
  return null;
}",0.2597809076682316
124981,"@Override public void execute(){
  try {
    if (model != null) {
      if (DirectEditType.EXPRESSION.equals(type)) {
        List<TableEntryLocation> matchedLocations=expressionManager.parseTableEntryLocation((String)newValue);
        EList<? extends INodeConnection> connections=null;
        if (targetEditPart != null && targetEditPart instanceof PigMapTableNodePart) {
          tableNodePart=(PigMapTableNodePart)targetEditPart;
          if (tableNodePart.getParent() instanceof PigMapOutputTablePart) {
            connections=model.getIncomingConnections();
          }
 else           if (tableNodePart.getParent() instanceof PigMapInputTablePart) {
            connections=((TableNode)model).getLookupIncomingConnections();
          }
        }
        List usefullConnections=new ArrayList();
        mapperData=PigMapUtil.getPigMapData(model);
        if (!matchedLocations.isEmpty()) {
          for (int i=0; i < matchedLocations.size(); i++) {
            TableEntryLocation currentLocation=matchedLocations.get(i);
            for (            INodeConnection conn : connections) {
              TableEntryLocation sourceLocation=null;
              String temp=""String_Node_Str"";
              if (conn.getSource() != null && conn.getSource() instanceof TableNode) {
                TableNode tableSourceNode=(TableNode)conn.getSource();
                if (tableSourceNode.eContainer() != null && tableSourceNode.eContainer() instanceof InputTable) {
                  temp=((InputTable)tableSourceNode.eContainer()).getName() + ""String_Node_Str"" + conn.getSource().getName();
                }
                sourceLocation=expressionManager.parseTableEntryLocation(temp).get(0);
              }
              if (currentLocation.equals(sourceLocation)) {
                usefullConnections.add(conn);
                break;
              }
            }
          }
        }
 else {
          if (!connections.isEmpty()) {
            if (tableNodePart.getParent() instanceof PigMapOutputTablePart) {
              PigMapUtil.detachConnectionsSouce(model,mapperData);
              model.getIncomingConnections().clear();
            }
 else             if (tableNodePart.getParent() instanceof PigMapInputTablePart) {
              PigMapUtil.detachLookupSource((TableNode)model,mapperData);
              ((TableNode)model).getLookupIncomingConnections().clear();
            }
          }
        }
        List<INodeConnection> copyOfConnections=new ArrayList<INodeConnection>(connections);
        copyOfConnections.removeAll(usefullConnections);
        if (tableNodePart.getParent() instanceof PigMapOutputTablePart) {
          for (          INodeConnection connection : copyOfConnections) {
            if (connection.getSource() != null) {
              if (connection.getSource().getOutgoingConnections().contains(connection)) {
                connection.getSource().getOutgoingConnections().remove(connection);
                mapperData.getConnections().remove(connection);
              }
            }
          }
          model.getIncomingConnections().removeAll(copyOfConnections);
        }
 else         if (tableNodePart.getParent() instanceof PigMapInputTablePart) {
          for (          INodeConnection connection : copyOfConnections) {
            if (connection.getSource() != null) {
              if (((TableNode)connection.getSource()).getLookupOutgoingConnections().contains(connection)) {
                ((TableNode)connection.getSource()).getLookupOutgoingConnections().remove(connection);
                mapperData.getConnections().remove(connection);
              }
            }
          }
          ((TableNode)model).getLookupIncomingConnections().removeAll(copyOfConnections);
        }
        model.setExpression((String)newValue);
      }
 else       if (DirectEditType.NODE_NAME.equals(type)) {
      }
    }
  }
 catch (  PatternSyntaxException ex) {
  }
}","@Override public void execute(){
  try {
    if (model != null) {
      if (DirectEditType.EXPRESSION.equals(type)) {
        List<TableEntryLocation> matchedLocations=expressionManager.parseTableEntryLocation((String)newValue);
        EList<? extends INodeConnection> connections=null;
        if (targetEditPart != null && targetEditPart instanceof PigMapTableNodePart) {
          tableNodePart=(PigMapTableNodePart)targetEditPart;
          if (tableNodePart.getParent() instanceof PigMapOutputTablePart) {
            connections=model.getIncomingConnections();
          }
 else           if (tableNodePart.getParent() instanceof PigMapInputTablePart) {
            connections=((TableNode)model).getLookupIncomingConnections();
          }
        }
        List usefullConnections=new ArrayList();
        mapperData=PigMapUtil.getPigMapData(model);
        if (!matchedLocations.isEmpty()) {
          for (int i=0; i < matchedLocations.size(); i++) {
            TableEntryLocation currentLocation=matchedLocations.get(i);
            boolean found=false;
            for (            INodeConnection conn : connections) {
              TableEntryLocation sourceLocation=null;
              String temp=""String_Node_Str"";
              if (conn.getSource() != null && conn.getSource() instanceof TableNode) {
                TableNode tableSourceNode=(TableNode)conn.getSource();
                if (tableSourceNode.eContainer() != null && tableSourceNode.eContainer() instanceof InputTable) {
                  temp=((InputTable)tableSourceNode.eContainer()).getName() + ""String_Node_Str"" + conn.getSource().getName();
                }
                sourceLocation=expressionManager.parseTableEntryLocation(temp).get(0);
              }
              if (currentLocation.equals(sourceLocation)) {
                found=true;
                usefullConnections.add(conn);
                break;
              }
            }
            if (!found) {
              if (mapperData != null) {
                AbstractNode sourceNode=findConnectionSource(mapperData,currentLocation);
                if (sourceNode != null && model.eContainer() != null && sourceNode.eContainer() != null) {
                  INodeConnection connection=null;
                  if (model.eContainer() instanceof OutputTable) {
                    connection=PigmapFactory.eINSTANCE.createConnection();
                    sourceNode.getOutgoingConnections().add((Connection)connection);
                    model.getIncomingConnections().add((Connection)connection);
                  }
 else                   if (model.eContainer() instanceof InputTable && sourceNode.eContainer() instanceof InputTable) {
                    TableNode source=(TableNode)sourceNode;
                    connection=PigmapFactory.eINSTANCE.createLookupConnection();
                    source.getLookupOutgoingConnections().add((LookupConnection)connection);
                    ((TableNode)model).getLookupIncomingConnections().add((LookupConnection)connection);
                  }
                  connection.setSource(sourceNode);
                  connection.setTarget(model);
                  mapperData.getConnections().add(connection);
                  usefullConnections.add(connection);
                }
              }
            }
          }
        }
 else {
          if (!connections.isEmpty()) {
            if (tableNodePart.getParent() instanceof PigMapOutputTablePart) {
              PigMapUtil.detachConnectionsSouce(model,mapperData);
              model.getIncomingConnections().clear();
            }
 else             if (tableNodePart.getParent() instanceof PigMapInputTablePart) {
              PigMapUtil.detachLookupSource((TableNode)model,mapperData);
              ((TableNode)model).getLookupIncomingConnections().clear();
            }
          }
        }
        List<INodeConnection> copyOfConnections=new ArrayList<INodeConnection>(connections);
        copyOfConnections.removeAll(usefullConnections);
        if (tableNodePart.getParent() instanceof PigMapOutputTablePart) {
          for (          INodeConnection connection : copyOfConnections) {
            if (connection.getSource() != null) {
              if (connection.getSource().getOutgoingConnections().contains(connection)) {
                connection.getSource().getOutgoingConnections().remove(connection);
                mapperData.getConnections().remove(connection);
              }
            }
          }
          model.getIncomingConnections().removeAll(copyOfConnections);
        }
 else         if (tableNodePart.getParent() instanceof PigMapInputTablePart) {
          for (          INodeConnection connection : copyOfConnections) {
            if (connection.getSource() != null) {
              if (((TableNode)connection.getSource()).getLookupOutgoingConnections().contains(connection)) {
                ((TableNode)connection.getSource()).getLookupOutgoingConnections().remove(connection);
                mapperData.getConnections().remove(connection);
              }
            }
          }
          ((TableNode)model).getLookupIncomingConnections().removeAll(copyOfConnections);
        }
        model.setExpression((String)newValue);
      }
 else       if (DirectEditType.NODE_NAME.equals(type)) {
      }
    }
  }
 catch (  PatternSyntaxException ex) {
  }
}",0.8447164948453608
124982,"@Override public List<IHDFSNode> getChildren(){
  if (!hasFetchedChildren) {
    super.getChildren().clear();
    try {
      loadHDFSFolderChildren();
      hasFetchedChildren=true;
    }
 catch (    Exception e) {
      log.error(e);
    }
 finally {
      provider.refresh(HDFSFolder.this);
    }
  }
  return super.getChildren();
}","@Override public List<IHDFSNode> getChildren(){
  boolean checkConnection=true;
  if (!hasFetchedChildren) {
    super.getChildren().clear();
    try {
      loadHDFSFolderChildren();
      hasFetchedChildren=true;
    }
 catch (    Exception e) {
      log.error(e);
      checkConnection=false;
      PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
        @Override public void run(){
          String mainMsg=Messages.getString(""String_Node_Str"");
          String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
          new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),HDFSPlugin.PLUGIN_ID,mainMsg,detailMsg);
          return;
        }
      }
);
    }
 finally {
      if (checkConnection) {
        provider.refresh(HDFSFolder.this);
      }
    }
  }
  return super.getChildren();
}",0.4933993399339934
124983,"protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
  String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  connectionBean.setDistribution(distribution);
  connectionBean.setDfVersion(version);
  connectionBean.setNameNodeURI(nameNodeUri);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}","protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  boolean isMr=false;
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
 else   if (node != null && node.getComponent() != null && node.getComponent().getPaletteType() != null && node.getComponent().getPaletteType().equals(""String_Node_Str"")) {
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      IComponent component=iNode.getComponent();
      if (component != null && component.getName() != null && component.getName().equals(""String_Node_Str"")) {
        node=iNode;
        if (node instanceof DataNode) {
          DataNode dataNode=(DataNode)node;
          IElementParameter versionParameter=dataNode.getElementParameter(EHadoopParameter.MR_VERSION.getName());
          if (versionParameter != null) {
            connectionBean.setDfVersion((String)versionParameter.getValue());
            isMr=true;
          }
          IElementParameter nameNodeParameter=dataNode.getElementParameter(EHadoopParameter.NAMENODE.getName());
          if (nameNodeParameter != null) {
            connectionBean.setNameNodeURI((String)nameNodeParameter.getValue());
            isMr=true;
          }
        }
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  if (!isMr) {
    String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
    String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
    connectionBean.setDfVersion(version);
    connectionBean.setNameNodeURI(nameNodeUri);
  }
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  connectionBean.setDistribution(distribution);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}",0.5800604229607251
124984,"protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
  String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  connectionBean.setDistribution(distribution);
  connectionBean.setDfVersion(version);
  connectionBean.setNameNodeURI(nameNodeUri);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}","protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
  String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  connectionBean.setDistribution(distribution);
  connectionBean.setDfVersion(version);
  connectionBean.setNameNodeURI(nameNodeUri);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb != null ? useKrb : false);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}",0.9919743178170144
124985,"@Override public void renameInputConnection(String oldName,String newName){
}","@Override public void renameInputConnection(String oldName,String newName){
  PigMapData externalEmfData=(PigMapData)getExternalEmfData();
  for (  InputTable inputTable : externalEmfData.getInputTables()) {
    if (inputTable.getName() != null && inputTable.getName().equals(oldName) && !oldName.equals(newName)) {
      inputTable.setName(newName);
      PigMapUtil.updateExpression(oldName,newName,externalEmfData,expressionManager);
    }
  }
}",0.2933333333333333
124986,"public PigMapComponent(){
}","public PigMapComponent(){
  expressionManager=new PigMapExpressionManager();
}",0.5142857142857142
124987,"@Override public void renameOutputConnection(String oldName,String newName){
}","@Override public void renameOutputConnection(String oldName,String newName){
  PigMapData externalEmfData=(PigMapData)getExternalEmfData();
  for (  OutputTable outputTable : externalEmfData.getOutputTables()) {
    if (outputTable.getName() != null && outputTable.getName().equals(oldName) && !oldName.equals(newName)) {
      outputTable.setName(newName);
    }
  }
}",0.348993288590604
124988,"public String replaceExpression(String expression,TableEntryLocation oldLocation,TableEntryLocation newLocation){
  return ""String_Node_Str"";
}","public String replaceExpression(String expression,TableEntryLocation oldLocation,TableEntryLocation newLocation){
  String returnedExpression=expression;
  String tempPattern=StringHelper.replacePrms(SUBST_PATTERN_FOR_REPLACE_LOCATION,new Object[]{oldLocation.getTableName(),oldLocation.getColumnValue()});
  recompilePatternIfNecessary(tempPattern);
  if (returnedExpression != null) {
    matcher.setMultiline(true);
    Perl5Substitution substitution=new Perl5Substitution(PREFIX_TABLE_NAME_REGEXP + ""String_Node_Str"" + newLocation.getTableName()+ ""String_Node_Str""+ SUFFIX_TABLE_NAME_REGEXP+ ""String_Node_Str""+ PREFIX_FIELD_NAME_REGEXP+ ""String_Node_Str""+ newLocation.getColumnValue()+ ""String_Node_Str""+ SUFFIX_FIELD_NAME_REGEXP,Perl5Substitution.INTERPOLATE_ALL);
    returnedExpression=substitute(matcher,pattern,substitution,returnedExpression,Util.SUBSTITUTE_ALL);
  }
  return returnedExpression;
}",0.2607040913415794
124989,"public TableEntryLocation(String tableName,String columnValue){
  this(""String_Node_Str"",tableName,columnValue,""String_Node_Str"");
}","public TableEntryLocation(String tableName){
  this.tableName=tableName;
  this.prefix=""String_Node_Str"";
  this.sufix=""String_Node_Str"";
}",0.6642066420664207
124990,"@Override protected void createEntityItems(TableEntityElement entityElement){
  this.tableNode=getEntityManager().getModel();
  boolean isLookup=false;
  TableEntityPart tableEntityPart=getEntityManager().getEditPart();
  if (tableEntityPart != null && tableEntityPart.getParent() != null) {
    if (tableEntityPart.getParent() instanceof PigMapInputTablePart) {
      PigMapInputTablePart inputTablePart=(PigMapInputTablePart)tableEntityPart.getParent();
      Object model=inputTablePart.getModel();
      if (model != null && model instanceof InputTable) {
        isLookup=((InputTable)model).isLookup();
      }
    }
 else     if (tableEntityPart.getParent() instanceof PigMapOutputTablePart) {
      isLookup=true;
    }
  }
  if (isLookup) {
    expression=new ExpressionFigure();
    expression.setText(tableNode.getExpression());
    expression.setOpaque(false);
    entityElement.add(expression);
  }
  branchContent=new PigMapBranchContent(getEntityManager());
  entityElement.add(branchContent);
}","@Override protected void createEntityItems(TableEntityElement entityElement){
  this.tableNode=getEntityManager().getModel();
  boolean isLookup=false;
  TableEntityPart tableEntityPart=getEntityManager().getEditPart();
  if (tableEntityPart != null && tableEntityPart.getParent() != null) {
    if (tableEntityPart.getParent() instanceof PigMapInputTablePart) {
      PigMapInputTablePart inputTablePart=(PigMapInputTablePart)tableEntityPart.getParent();
      Object model=inputTablePart.getModel();
      if (model != null && model instanceof InputTable) {
        isLookup=((InputTable)model).isLookup();
      }
    }
 else     if (tableEntityPart.getParent() instanceof PigMapOutputTablePart) {
      isLookup=true;
    }
  }
  if (isLookup) {
    expression=new ExpressionFigure();
    expression.setText(tableNode.getExpression());
    expression.setOpaque(false);
    entityElement.add(expression);
  }
  branchContent=new PigMapBranchContent(getEntityManager());
  TreeBranch treeBranch=new TreeBranch(branchContent,!isRoot());
  entityElement.add(treeBranch);
}",0.9538904899135446
124991,"@Override public void selectionChanged(SelectionChangedEvent event){
  if (!event.getSelection().isEmpty() && event.getSelection() instanceof IStructuredSelection) {
    Iterator iterator=((IStructuredSelection)event.getSelection()).iterator();
    while (iterator.hasNext()) {
      Object firstElement=iterator.next();
      if (firstElement instanceof TableEntityPart) {
        AbstractNode model=(AbstractNode)((TableEntityPart)firstElement).getModel();
        boolean isInputMain=false;
        if (!isInputMain) {
          refreshStyledTextEditor((TableEntityPart)firstElement);
        }
 else {
          refreshStyledTextEditor(null);
        }
      }
 else       if (firstElement instanceof PigMapInputTablePart) {
        selectInputTable((InputTable)((PigMapInputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
 else       if (firstElement instanceof PigMapOutputTablePart) {
        selectOutputTable((OutputTable)((PigMapOutputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
    }
  }
}","@Override public void selectionChanged(SelectionChangedEvent event){
  if (!event.getSelection().isEmpty() && event.getSelection() instanceof IStructuredSelection) {
    Iterator iterator=((IStructuredSelection)event.getSelection()).iterator();
    while (iterator.hasNext()) {
      Object firstElement=iterator.next();
      if (firstElement instanceof TableEntityPart) {
        AbstractNode model=(AbstractNode)((TableEntityPart)firstElement).getModel();
        boolean isInputMain=false;
        if (model != null && model instanceof TableNode && model.eContainer() != null) {
          if (model.eContainer() instanceof OutputTable) {
            onEntitySelection((IStructuredSelection)event.getSelection(),selectedOutputTable);
          }
 else {
            onEntitySelection((IStructuredSelection)event.getSelection(),selectedInputTable);
          }
        }
        if (!isInputMain) {
          refreshStyledTextEditor((TableEntityPart)firstElement);
        }
 else {
          refreshStyledTextEditor(null);
        }
      }
 else       if (firstElement instanceof PigMapInputTablePart) {
        selectInputTable((InputTable)((PigMapInputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
 else       if (firstElement instanceof PigMapOutputTablePart) {
        selectOutputTable((OutputTable)((PigMapOutputTablePart)firstElement).getModel());
        refreshStyledTextEditor(null);
      }
    }
  }
}",0.8502568154879494
124992,"/** 
 * DOC hcyi Comment method ""createComponents"".
 */
private void createComponents(){
  setSimple(false);
  CTabItem item=new CTabItem(tabFolderEditors,SWT.BORDER);
  item.setText(Messages.getString(""String_Node_Str""));
  SashForm inOutMetaEditorContainer=new SashForm(tabFolderEditors,SWT.SMOOTH | SWT.HORIZONTAL | SWT.SHADOW_OUT);
  inOutMetaEditorContainer.setLayout(new RowLayout(SWT.HORIZONTAL));
  item.setControl(inOutMetaEditorContainer);
  inputMetaEditor=new PigMapMetadataTableEditorView(inOutMetaEditorContainer,SWT.BORDER);
  inputMetaEditor.initGraphicComponents();
  addListenersToInputButtons();
  outputMetaEditor=new PigMapMetadataTableEditorView(inOutMetaEditorContainer,SWT.BORDER);
  outputMetaEditor.initGraphicComponents();
  addListenersToOutputButtons();
  item=new CTabItem(tabFolderEditors,SWT.BORDER);
  item.setText(Messages.getString(""String_Node_Str""));
  StyledText styledText=createStyledText(item);
  this.styledTextHandler=new StyledTextHandler(styledText,mapperManage);
  tabFolderEditors.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
    }
  }
);
  tabFolderEditors.setSelection(0);
}","/** 
 * DOC hcyi Comment method ""createComponents"".
 */
private void createComponents(){
  setSimple(false);
  CTabItem item=new CTabItem(tabFolderEditors,SWT.BORDER);
  item.setText(Messages.getString(""String_Node_Str""));
  SashForm inOutMetaEditorContainer=new SashForm(tabFolderEditors,SWT.SMOOTH | SWT.HORIZONTAL | SWT.SHADOW_OUT);
  inOutMetaEditorContainer.setLayout(new RowLayout(SWT.HORIZONTAL));
  item.setControl(inOutMetaEditorContainer);
  inputMetaEditor=new PigMapMetadataTableEditorView(inOutMetaEditorContainer,SWT.BORDER);
  inputMetaEditor.initGraphicComponents();
  ILineSelectionListener metadataEditorViewerSelectionChangedListener=new ILineSelectionListener(){
    @Override public void handle(    LineSelectionEvent e){
      if (inputMetaEditor.getTableViewerCreator() == e.source && mapperManage.getGraphicalViewer() != null) {
        if (inputMetaEditor.getExtendedTableViewer().isExecuteSelectionEvent()) {
          mapperManage.selectLinkedInputTableEntries(inputMetaEditor.getTableViewerCreator().getTable().getSelectionIndices());
        }
      }
    }
  }
;
  inputMetaEditor.getTableViewerCreator().getSelectionHelper().addAfterSelectionListener(metadataEditorViewerSelectionChangedListener);
  addListenersToInputButtons();
  outputMetaEditor=new PigMapMetadataTableEditorView(inOutMetaEditorContainer,SWT.BORDER);
  outputMetaEditor.initGraphicComponents();
  metadataEditorViewerSelectionChangedListener=new ILineSelectionListener(){
    @Override public void handle(    LineSelectionEvent e){
      if (outputMetaEditor.getTableViewerCreator() == e.source && mapperManage.getGraphicalViewer() != null) {
        if (outputMetaEditor.getExtendedTableViewer().isExecuteSelectionEvent()) {
          mapperManage.selectLinkedOutputTableEntries(outputMetaEditor.getTableViewerCreator().getTable().getSelectionIndices());
        }
      }
    }
  }
;
  outputMetaEditor.getTableViewerCreator().getSelectionHelper().addAfterSelectionListener(metadataEditorViewerSelectionChangedListener);
  addListenersToOutputButtons();
  item=new CTabItem(tabFolderEditors,SWT.BORDER);
  item.setText(Messages.getString(""String_Node_Str""));
  StyledText styledText=createStyledText(item);
  this.styledTextHandler=new StyledTextHandler(styledText,mapperManage);
  tabFolderEditors.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      mapperManage.fireCurrentDirectEditApply();
      lastSelectedTab=tabFolderEditors.getSelectionIndex();
    }
  }
);
  tabFolderEditors.setSelection(0);
}",0.629718875502008
124993,"@Override public void performRequest(Request req){
  if (RequestConstants.REQ_DIRECT_EDIT.equals(req.getType())) {
    DirectEditRequest drequest=(DirectEditRequest)req;
    Point figureLocation=drequest.getLocation();
    IFigure findFigureAt=getFigure().findFigureAt(figureLocation.x,figureLocation.y);
    if (findFigureAt instanceof IWidgetCell) {
      directEditManager=new PigMapNodeDirectEditManager(this,new PigMapNodeCellEditorLocator((Figure)findFigureAt));
      directEditManager.show();
    }
  }
}","@Override public void performRequest(Request req){
  if (RequestConstants.REQ_DIRECT_EDIT.equals(req.getType())) {
    DirectEditRequest drequest=(DirectEditRequest)req;
    Point figureLocation=drequest.getLocation();
    IFigure findFigureAt=getFigure().findFigureAt(figureLocation.x,figureLocation.y);
    if (findFigureAt != null && findFigureAt instanceof IWidgetCell) {
      directEditManager=new PigMapNodeDirectEditManager(this,new PigMapNodeCellEditorLocator((Figure)findFigureAt));
      directEditManager.show();
    }
    if (directEditManager != null) {
      if (findFigureAt != null && findFigureAt instanceof FilterTextArea) {
        if (figure.containsPoint(figureLocation)) {
          directEditManager.show();
          ((PigMapGraphicViewer)getViewer()).getMapperManager().setCurrentDirectEditManager(directEditManager);
        }
      }
    }
  }
}",0.7393501805054151
124994,"@Override public void performRequest(Request req){
  if (RequestConstants.REQ_DIRECT_EDIT.equals(req.getType())) {
    DirectEditRequest drequest=(DirectEditRequest)req;
    Point figureLocation=drequest.getLocation();
    IFigure findFigureAt=getFigure().findFigureAt(figureLocation.x,figureLocation.y);
    if (findFigureAt instanceof IWidgetCell) {
      directEditManager=new PigMapNodeDirectEditManager(this,new PigMapNodeCellEditorLocator((Figure)findFigureAt));
      directEditManager.show();
    }
  }
}","@Override public void performRequest(Request req){
  if (RequestConstants.REQ_DIRECT_EDIT.equals(req.getType())) {
    DirectEditRequest drequest=(DirectEditRequest)req;
    Point figureLocation=drequest.getLocation();
    IFigure findFigureAt=getFigure().findFigureAt(figureLocation.x,figureLocation.y);
    if (findFigureAt != null && findFigureAt instanceof IWidgetCell) {
      directEditManager=new PigMapNodeDirectEditManager(this,new PigMapNodeCellEditorLocator((Figure)findFigureAt));
      directEditManager.show();
    }
    if (directEditManager != null) {
      if (findFigureAt != null && findFigureAt instanceof FilterTextArea) {
        if (figure.containsPoint(figureLocation)) {
          directEditManager.show();
          ((PigMapGraphicViewer)getViewer()).getMapperManager().setCurrentDirectEditManager(directEditManager);
        }
      }
    }
  }
}",0.7393501805054151
124995,"/** 
 * When clicking the button named ""Monitoring"", this method will be invoked.
 */
public void doMonitoringBtnAction(){
  String oozieURL=getOozieEndPoint();
  if (oozieURL == null || ""String_Node_Str"".equals(oozieURL) || !LinkUtils.isRemoteFile(oozieURL)) {
    MessageDialog.openWarning(executeJobComposite.getShell(),TOozieOutputMessages.MSG_WARNING_URL_TITLE,TOozieOutputMessages.MSG_WARNING_URL_NOTVALID);
  }
 else {
    try {
      IWorkbenchBrowserSupport support=PlatformUI.getWorkbench().getBrowserSupport();
      IWebBrowser browser=support.getExternalBrowser();
      browser.openURL(new URL(oozieURL));
    }
 catch (    PartInitException e) {
    }
catch (    MalformedURLException e) {
    }
  }
}","/** 
 * When clicking the button named ""Monitoring"", this method will be invoked.
 */
public void doMonitoringBtnAction(){
  String oozieURL=getOozieEndPoint();
  if (oozieURL == null || ""String_Node_Str"".equals(oozieURL) || !oozieURL.startsWith(""String_Node_Str"")) {
    MessageDialog.openWarning(executeJobComposite.getShell(),TOozieOutputMessages.MSG_WARNING_URL_TITLE,TOozieOutputMessages.MSG_WARNING_URL_NOTVALID);
  }
 else {
    try {
      IWorkbenchBrowserSupport support=PlatformUI.getWorkbench().getBrowserSupport();
      IWebBrowser browser=support.getExternalBrowser();
      browser.openURL(new URL(oozieURL));
    }
 catch (    PartInitException e) {
    }
catch (    MalformedURLException e) {
    }
  }
}",0.9638386648122392
124996,"public void widgetSelected(SelectionEvent event){
  HDFSConnectionBean connection=getHDFSConnectionBean();
  if (checkHDFSConnection(connection)) {
    Command command=createCommand(event,connection);
    executeCommand(command);
  }
}","@Override public void widgetSelected(SelectionEvent event){
  HDFSConnectionBean connection=getHDFSConnectionBean();
  if (checkHDFSConnection(connection)) {
    Command command=createCommand(event,connection);
    executeCommand(command);
  }
}",0.9791666666666666
124997,"protected boolean checkHDFSConnection(final HDFSConnectionBean connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      Object dfs=null;
      try {
        dfs=HadoopOperationManager.getInstance().getDFS(connection);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
 finally {
        monitor.done();
      }
      if (dfs == null) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),HDFSPlugin.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}","protected boolean checkHDFSConnection(final HDFSConnectionBean connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      Object dfs=null;
      try {
        dfs=HadoopOperationManager.getInstance().getDFS(connection);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
 finally {
        monitor.done();
      }
      if (dfs == null) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),HDFSPlugin.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}",0.9965205288796104
124998,"public void widgetDefaultSelected(SelectionEvent e){
}","@Override public void widgetDefaultSelected(SelectionEvent e){
}",0.9152542372881356
124999,"public void propertyChange(PropertyChangeEvent arg0){
}","@Override public void propertyChange(PropertyChangeEvent arg0){
}",0.9166666666666666
125000,public abstract void refresh();,@Override public abstract void refresh();,0.8611111111111112
