record_number,buggy_code,fixed_code,code_similarity
172001,"private void remoteStateReplaceLocalState(GossipMember member,HeartbeatState remoteState){
  getEndpointMembers().put(member,remoteState);
  up(member);
}","private void remoteStateReplaceLocalState(GossipMember member,HeartbeatState remoteState){
  up(member);
  if (endpointMembers.containsKey(member)) {
    HeartbeatState state=endpointMembers.get(member);
    endpointMembers.remove(member);
    endpointMembers.put(member,state);
  }
}",0.4977168949771689
172002,"@Override public void run(){
  long newversion=endpointMembers.get(getSelf()).updateVersion();
  if (isDiscoverable(getSelf())) {
    up(getSelf());
  }
  if (LOGGER.isTraceEnabled()) {
    LOGGER.trace(""String_Node_Str"");
    LOGGER.trace(String.format(""String_Node_Str"",newversion));
  }
  List<GossipDigest> digests=new ArrayList<>();
  try {
    randomGossipDigest(digests);
    if (digests.size() > 0) {
      Buffer syncMessageBuffer=encodeSyncMessage(digests);
      boolean b=gossip2LiveMember(syncMessageBuffer);
      gossip2UndiscoverableMember(syncMessageBuffer);
      if (!b || liveMembers.size() < settings.getSeedMembers().size()) {
        gossip2Seed(syncMessageBuffer);
      }
      checkStatus();
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(""String_Node_Str"" + getLiveMembers());
        LOGGER.trace(""String_Node_Str"" + getDeadMembers());
        LOGGER.trace(""String_Node_Str"" + getEndpointMembers());
        LOGGER.trace(""String_Node_Str"" + convictedTime());
      }
      LOGGER.info(""String_Node_Str"" + getLiveMembers());
      LOGGER.info(""String_Node_Str"" + getDeadMembers());
      LOGGER.info(""String_Node_Str"" + getEndpointMembers());
      LOGGER.info(""String_Node_Str"" + convictedTime());
    }
  }
 catch (  UnknownHostException e) {
    LOGGER.error(e.getMessage());
  }
}","@Override public void run(){
  long newversion=endpointMembers.get(getSelf()).updateVersion();
  if (isDiscoverable(getSelf())) {
    up(getSelf());
  }
  if (LOGGER.isTraceEnabled()) {
    LOGGER.trace(""String_Node_Str"");
    LOGGER.trace(String.format(""String_Node_Str"",newversion));
  }
  List<GossipDigest> digests=new ArrayList<>();
  try {
    randomGossipDigest(digests);
    if (digests.size() > 0) {
      Buffer syncMessageBuffer=encodeSyncMessage(digests);
      boolean b=gossip2LiveMember(syncMessageBuffer);
      gossip2UndiscoverableMember(syncMessageBuffer);
      if (!b || liveMembers.size() < settings.getSeedMembers().size()) {
        gossip2Seed(syncMessageBuffer);
      }
      checkStatus();
    }
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(""String_Node_Str"" + getLiveMembers());
      LOGGER.trace(""String_Node_Str"" + getDeadMembers());
      LOGGER.trace(""String_Node_Str"" + getEndpointMembers());
    }
  }
 catch (  UnknownHostException e) {
    LOGGER.error(e.getMessage());
  }
}",0.8131399317406144
172003,"public void down(GossipMember member){
  LOGGER.info(""String_Node_Str"");
  rwlock.writeLock().lock();
  try {
    member.setState(GossipState.DOWN);
    liveMembers.remove(member);
    if (!deadMembers.contains(member)) {
      deadMembers.add(member);
    }
    clearExecutor.schedule(() -> {
      clearMember(member);
    }
,getSettings().getDeleteThreshold() * getSettings().getGossipInterval(),TimeUnit.MILLISECONDS);
    fireGossipEvent(member,GossipState.DOWN);
  }
  finally {
    rwlock.writeLock().unlock();
  }
}","public void down(GossipMember member){
  LOGGER.info(""String_Node_Str"");
  rwlock.writeLock().lock();
  try {
    member.setState(GossipState.DOWN);
    liveMembers.remove(member);
    if (!deadMembers.contains(member)) {
      deadMembers.add(member);
    }
    fireGossipEvent(member,GossipState.DOWN);
  }
  finally {
    rwlock.writeLock().unlock();
  }
}",0.8140589569160998
172004,"private void up(GossipMember member){
  rwlock.writeLock().lock();
  try {
    member.setState(GossipState.UP);
    if (!liveMembers.contains(member)) {
      liveMembers.add(member);
    }
    if (candidateMembers.containsKey(member)) {
      candidateMembers.remove(member);
    }
    if (deadMembers.contains(member)) {
      deadMembers.remove(member);
    }
    if (!member.equals(getSelf())) {
      LOGGER.info(""String_Node_Str"");
      fireGossipEvent(member,GossipState.UP);
    }
  }
  finally {
    rwlock.writeLock().unlock();
  }
}","private void up(GossipMember member){
  rwlock.writeLock().lock();
  try {
    member.setState(GossipState.UP);
    if (!liveMembers.contains(member)) {
      liveMembers.add(member);
    }
    if (candidateMembers.containsKey(member)) {
      candidateMembers.remove(member);
    }
    if (deadMembers.contains(member)) {
      deadMembers.remove(member);
      LOGGER.info(""String_Node_Str"");
    }
    if (!member.equals(getSelf())) {
      fireGossipEvent(member,GossipState.UP);
    }
  }
  finally {
    rwlock.writeLock().unlock();
  }
}",0.9209558823529412
172005,"private boolean sendGossip2Seed(Buffer buffer,List<SeedMember> members,int index){
  if (buffer != null && index >= 0) {
    SeedMember target=members.get(index);
    settings.getMsgService().sendMsg(target.getIpAddress(),target.getPort(),buffer);
    return settings.getSeedMembers().contains(target);
  }
  return false;
}","private boolean sendGossip2Seed(Buffer buffer,List<SeedMember> members,int index){
  if (buffer != null && index >= 0) {
    SeedMember target=members.get(index);
    settings.getMsgService().sendMsg(target.getIpAddress(),target.getPort(),buffer);
    return true;
  }
  return false;
}",0.9245901639344264
172006,"public void down(GossipMember member){
  LOGGER.info(""String_Node_Str"");
  rwlock.writeLock().lock();
  try {
    member.setState(GossipState.DOWN);
    liveMembers.remove(member);
    if (!deadMembers.contains(member)) {
      deadMembers.add(member);
    }
    fireGossipEvent(member,GossipState.DOWN);
  }
  finally {
    rwlock.writeLock().unlock();
  }
}","public void down(GossipMember member){
  LOGGER.info(""String_Node_Str"");
  rwlock.writeLock().lock();
  try {
    member.setState(GossipState.DOWN);
    liveMembers.remove(member);
    if (!deadMembers.contains(member)) {
      deadMembers.add(member);
    }
    clearExecutor.schedule(() -> {
      if (deadMembers.contains(member)) {
        deadMembers.remove(member);
      }
    }
,getSettings().getDeleteThreshold() * getSettings().getGossipInterval(),TimeUnit.MILLISECONDS);
    fireGossipEvent(member,GossipState.DOWN);
  }
  finally {
    rwlock.writeLock().unlock();
  }
}",0.7630180658873539
172007,"protected void start(){
  LOGGER.info(String.format(""String_Node_Str"",localGossipMember.getCluster(),localGossipMember.getIpAddress(),localGossipMember.getPort(),localGossipMember.getId()));
  isWorking=true;
  settings.getMsgService().listen(getSelf().getIpAddress(),getSelf().getPort());
  doGossipExecotor.scheduleAtFixedRate(new GossipTask(),settings.getGossipInterval(),settings.getGossipInterval(),TimeUnit.MILLISECONDS);
}","protected void start(){
  LOGGER.info(String.format(""String_Node_Str"",localGossipMember.getCluster(),localGossipMember.getIpAddress(),localGossipMember.getPort(),localGossipMember.getId()));
  isWorking=true;
  settings.getMsgService().listen(getSelf().getIpAddress(),getSelf().getPort());
  doGossipExecutor.scheduleAtFixedRate(new GossipTask(),settings.getGossipInterval(),settings.getGossipInterval(),TimeUnit.MILLISECONDS);
}",0.9976689976689976
172008,"protected void shutdown(){
  getSettings().getMsgService().unListen();
  doGossipExecotor.shutdown();
  try {
    Thread.sleep(getSettings().getGossipInterval());
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  Buffer buffer=encodeShutdownMessage();
  for (int i=0; i < getLiveMembers().size(); i++) {
    sendGossip(buffer,getLiveMembers(),i);
  }
  isWorking=false;
}","protected void shutdown(){
  getSettings().getMsgService().unListen();
  doGossipExecutor.shutdown();
  try {
    Thread.sleep(getSettings().getGossipInterval());
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  Buffer buffer=encodeShutdownMessage();
  for (int i=0; i < getLiveMembers().size(); i++) {
    sendGossip(buffer,getLiveMembers(),i);
  }
  isWorking=false;
}",0.9975124378109452
172009,"public void init(String cluster,String ipAddress,Integer port,String id,List<SeedMember> seedMembers,GossipSettings settings,GossipListener listener){
  this.settings=settings;
  this.settings.setSeedMembers(seedMembers);
  this.cluster=cluster;
  this.localGossipMember=new GossipMember();
  this.localGossipMember.setCluster(cluster);
  this.localGossipMember.setIpAddress(ipAddress);
  this.localGossipMember.setPort(port);
  this.localGossipMember.setId(id);
  this.localGossipMember.setState(GossipState.JOIN);
  this.endpointMembers.put(localGossipMember,new HeartbeatState());
  this.listener=listener;
  fireGossipEvent(localGossipMember,GossipState.JOIN);
}","public void init(String cluster,String ipAddress,Integer port,String id,List<SeedMember> seedMembers,GossipSettings settings,GossipListener listener){
  this.cluster=cluster;
  this.localGossipMember=new GossipMember();
  this.localGossipMember.setCluster(cluster);
  this.localGossipMember.setIpAddress(ipAddress);
  this.localGossipMember.setPort(port);
  this.localGossipMember.setId(id);
  this.localGossipMember.setState(GossipState.JOIN);
  this.endpointMembers.put(localGossipMember,new HeartbeatState());
  this.listener=listener;
  this.settings=settings;
  this.settings.setSeedMembers(seedMembers);
  fireGossipEvent(localGossipMember,GossipState.JOIN);
}",0.8933933933933934
172010,"public ResultSet executeQuery(final BasicSearchParameters searchParameters,String language);","public ResultSet executeQuery(final SearchParameters searchParameters,String language);",0.9720670391061452
172011,"public ResultSet executeQuery(final BasicSearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    String languageUrlFragment=SolrClientUtil.extractLanguageFragment(languageMappings,language);
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(languageUrlFragment);
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    final LimitBy limitBy;
    int maxResults=-1;
    SearchParameters searchParams=(SearchParameters)searchParameters;
    if (searchParams.getMaxItems() >= 0) {
      maxResults=searchParams.getMaxItems();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else     if (searchParams.getLimitBy() == LimitBy.FINAL_SIZE && searchParams.getLimit() >= 0) {
      maxResults=searchParams.getLimit();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else {
      maxResults=searchParams.getMaxPermissionChecks();
      if (maxResults < 0) {
        maxResults=maximumResultsFromUnlimitedQuery;
      }
      limitBy=LimitBy.NUMBER_OF_PERMISSION_EVALUATIONS;
    }
    url.append(""String_Node_Str"").append(String.valueOf(maxResults));
    if ((searchParameters.getStores().size() > 1) || (mapping.isSharded())) {
      boolean requiresSeparator=false;
      url.append(""String_Node_Str"");
      for (      StoreRef storeRef : searchParameters.getStores()) {
        SolrStoreMappingWrapper storeMapping=SolrClientUtil.extractMapping(storeRef,mappingLookup,shardRegistry,requiresSeparator,beanFactory);
        if (requiresSeparator) {
          url.append(',');
        }
 else {
          requiresSeparator=true;
        }
        url.append(storeMapping.getShards());
      }
    }
    buildUrlParameters(searchParams,mapping.isSharded(),encoder,url);
    final String searchTerm=searchParams.getSearchTerm();
    String spellCheckQueryStr=null;
    if (searchTerm != null && searchParams.isSpellCheck()) {
      StringBuilder builder=new StringBuilder();
      builder.append(""String_Node_Str"").append(encoder.encode(searchTerm,""String_Node_Str""));
      builder.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
      spellCheckQueryStr=builder.toString();
      url.append(spellCheckQueryStr);
    }
    JSONObject body=new JSONObject();
    body.put(""String_Node_Str"",searchParameters.getQuery());
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    JSONArray templates=new JSONArray();
    for (    String templateName : searchParams.getQueryTemplates().keySet()) {
      JSONObject template=new JSONObject();
      template.put(""String_Node_Str"",templateName);
      template.put(""String_Node_Str"",searchParams.getQueryTemplates().get(templateName));
      templates.put(template);
    }
    body.put(""String_Node_Str"",templates);
    JSONArray allAttributes=new JSONArray();
    for (    String attribute : searchParams.getAllAttributes()) {
      allAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",allAttributes);
    body.put(""String_Node_Str"",searchParams.getDefaultFTSOperator());
    body.put(""String_Node_Str"",searchParams.getDefaultFTSFieldOperator());
    body.put(""String_Node_Str"",searchParams.getQueryConsistency());
    if (searchParams.getMlAnalaysisMode() != null) {
      body.put(""String_Node_Str"",searchParams.getMlAnalaysisMode().toString());
    }
    body.put(""String_Node_Str"",searchParams.getNamespace());
    JSONArray textAttributes=new JSONArray();
    for (    String attribute : searchParams.getTextAttributes()) {
      textAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",textAttributes);
    final int maximumResults=maxResults;
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrJSONResultSet(json,searchParams,nodeService,nodeDAO,limitBy,maximumResults);
    }
,spellCheckQueryStr);
  }
 catch (  UnsupportedEncodingException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  HttpException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}","public ResultSet executeQuery(final SearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    String languageUrlFragment=SolrClientUtil.extractLanguageFragment(languageMappings,language);
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(languageUrlFragment);
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    final LimitBy limitBy;
    int maxResults=-1;
    if (searchParameters.getMaxItems() >= 0) {
      maxResults=searchParameters.getMaxItems();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else     if (searchParameters.getLimitBy() == LimitBy.FINAL_SIZE && searchParameters.getLimit() >= 0) {
      maxResults=searchParameters.getLimit();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else {
      maxResults=searchParameters.getMaxPermissionChecks();
      if (maxResults < 0) {
        maxResults=maximumResultsFromUnlimitedQuery;
      }
      limitBy=LimitBy.NUMBER_OF_PERMISSION_EVALUATIONS;
    }
    url.append(""String_Node_Str"").append(String.valueOf(maxResults));
    if ((searchParameters.getStores().size() > 1) || (mapping.isSharded())) {
      boolean requiresSeparator=false;
      url.append(""String_Node_Str"");
      for (      StoreRef storeRef : searchParameters.getStores()) {
        SolrStoreMappingWrapper storeMapping=SolrClientUtil.extractMapping(storeRef,mappingLookup,shardRegistry,requiresSeparator,beanFactory);
        if (requiresSeparator) {
          url.append(',');
        }
 else {
          requiresSeparator=true;
        }
        url.append(storeMapping.getShards());
      }
    }
    buildUrlParameters(searchParameters,mapping.isSharded(),encoder,url);
    final String searchTerm=searchParameters.getSearchTerm();
    String spellCheckQueryStr=null;
    if (searchTerm != null && searchParameters.isSpellCheck()) {
      StringBuilder builder=new StringBuilder();
      builder.append(""String_Node_Str"").append(encoder.encode(searchTerm,""String_Node_Str""));
      builder.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
      spellCheckQueryStr=builder.toString();
      url.append(spellCheckQueryStr);
    }
    JSONObject body=new JSONObject();
    body.put(""String_Node_Str"",searchParameters.getQuery());
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    JSONArray templates=new JSONArray();
    for (    String templateName : searchParameters.getQueryTemplates().keySet()) {
      JSONObject template=new JSONObject();
      template.put(""String_Node_Str"",templateName);
      template.put(""String_Node_Str"",searchParameters.getQueryTemplates().get(templateName));
      templates.put(template);
    }
    body.put(""String_Node_Str"",templates);
    JSONArray allAttributes=new JSONArray();
    for (    String attribute : searchParameters.getAllAttributes()) {
      allAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",allAttributes);
    body.put(""String_Node_Str"",searchParameters.getDefaultFTSOperator());
    body.put(""String_Node_Str"",searchParameters.getDefaultFTSFieldOperator());
    body.put(""String_Node_Str"",searchParameters.getQueryConsistency());
    if (searchParameters.getMlAnalaysisMode() != null) {
      body.put(""String_Node_Str"",searchParameters.getMlAnalaysisMode().toString());
    }
    body.put(""String_Node_Str"",searchParameters.getNamespace());
    JSONArray textAttributes=new JSONArray();
    for (    String attribute : searchParameters.getTextAttributes()) {
      textAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",textAttributes);
    final int maximumResults=maxResults;
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrJSONResultSet(json,searchParameters,nodeService,nodeDAO,limitBy,maximumResults);
    }
,spellCheckQueryStr);
  }
 catch (  UnsupportedEncodingException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  HttpException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}",0.9868166932572005
172012,"public ResultSet executeQuery(BasicSearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(searchParameters.getQuery())) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(""String_Node_Str"" + encoder.encode(searchParameters.getQuery()));
    SearchParameters sp=(SearchParameters)searchParameters;
    url.append(""String_Node_Str"" + sp.isIncludeMetadata());
    url.append(""String_Node_Str"");
    url.append(""String_Node_Str"");
    if (mapping.isSharded()) {
      url.append(mapping.getShards());
    }
 else {
      String solrurl=httpClient.getHostConfiguration().getHostURL() + httpClientAndBaseUrl.getSecond();
      url.append(solrurl);
    }
    JSONObject body=new JSONObject();
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrSQLJSONResultSet(json,searchParameters);
    }
);
  }
 catch (  JSONException|IOException|EncoderException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}","public ResultSet executeQuery(SearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(searchParameters.getQuery())) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(""String_Node_Str"" + encoder.encode(searchParameters.getQuery()));
    SearchParameters sp=(SearchParameters)searchParameters;
    url.append(""String_Node_Str"" + sp.isIncludeMetadata());
    url.append(""String_Node_Str"");
    url.append(""String_Node_Str"");
    if (mapping.isSharded()) {
      url.append(mapping.getShards());
    }
 else {
      String solrurl=httpClient.getHostConfiguration().getHostURL() + httpClientAndBaseUrl.getSecond();
      url.append(solrurl);
    }
    JSONObject body=new JSONObject();
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrSQLJSONResultSet(json,searchParameters);
    }
);
  }
 catch (  JSONException|IOException|EncoderException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}",0.9991008811364862
172013,"public SolrSQLJSONResultSet(JSONObject json,BasicSearchParameters searchParameters){
  try {
    solrResponse=((JSONObject)json).toString();
    JSONObject res=(JSONObject)json.get(""String_Node_Str"");
    docs=(JSONArray)res.get(""String_Node_Str"");
    JSONObject obj1=docs.getJSONObject(0);
    if (obj1.has(SOLR_STREAM_EXCEPTION)) {
      String error=obj1.get(SOLR_STREAM_EXCEPTION).toString();
      if (error.equalsIgnoreCase(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      throw new RuntimeException(""String_Node_Str"" + error);
    }
    this.length=docs.length();
    JSONObject time=(JSONObject)docs.get(length - 1);
    this.numberFound=length - 1;
    queryTime=new Long((Integer)time.get(""String_Node_Str""));
    this.resultSetMetaData=new SimpleResultSetMetaData(LimitBy.FINAL_SIZE,PermissionEvaluationMode.EAGER,(SearchParameters)searchParameters);
  }
 catch (  JSONException e) {
    logger.info(e.getMessage());
  }
}","public SolrSQLJSONResultSet(JSONObject json,SearchParameters searchParameters){
  try {
    solrResponse=((JSONObject)json).toString();
    JSONObject res=(JSONObject)json.get(""String_Node_Str"");
    docs=(JSONArray)res.get(""String_Node_Str"");
    JSONObject obj1=docs.getJSONObject(0);
    if (obj1.has(SOLR_STREAM_EXCEPTION)) {
      String error=obj1.get(SOLR_STREAM_EXCEPTION).toString();
      if (error.equalsIgnoreCase(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (searchParameters.getExtraParameters().containsKey(""String_Node_Str"")) {
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + error);
      }
    }
    this.length=docs.length();
    JSONObject time=(JSONObject)docs.get(length - 1);
    this.numberFound=length - 1;
    queryTime=new Long((Integer)time.get(""String_Node_Str""));
    this.resultSetMetaData=new SimpleResultSetMetaData(LimitBy.FINAL_SIZE,PermissionEvaluationMode.EAGER,(SearchParameters)searchParameters);
  }
 catch (  JSONException e) {
    logger.info(e.getMessage());
  }
}",0.9450121654501216
172014,"public ResultSet executeQuery(final BasicSearchParameters searchParameters,String language);","public ResultSet executeQuery(final SearchParameters searchParameters,String language);",0.9720670391061452
172015,"public ResultSet executeQuery(final BasicSearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    String languageUrlFragment=SolrClientUtil.extractLanguageFragment(languageMappings,language);
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(languageUrlFragment);
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    final LimitBy limitBy;
    int maxResults=-1;
    SearchParameters searchParams=(SearchParameters)searchParameters;
    if (searchParams.getMaxItems() >= 0) {
      maxResults=searchParams.getMaxItems();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else     if (searchParams.getLimitBy() == LimitBy.FINAL_SIZE && searchParams.getLimit() >= 0) {
      maxResults=searchParams.getLimit();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else {
      maxResults=searchParams.getMaxPermissionChecks();
      if (maxResults < 0) {
        maxResults=maximumResultsFromUnlimitedQuery;
      }
      limitBy=LimitBy.NUMBER_OF_PERMISSION_EVALUATIONS;
    }
    url.append(""String_Node_Str"").append(String.valueOf(maxResults));
    if ((searchParameters.getStores().size() > 1) || (mapping.isSharded())) {
      boolean requiresSeparator=false;
      url.append(""String_Node_Str"");
      for (      StoreRef storeRef : searchParameters.getStores()) {
        SolrStoreMappingWrapper storeMapping=SolrClientUtil.extractMapping(storeRef,mappingLookup,shardRegistry,requiresSeparator,beanFactory);
        if (requiresSeparator) {
          url.append(',');
        }
 else {
          requiresSeparator=true;
        }
        url.append(storeMapping.getShards());
      }
    }
    buildUrlParameters(searchParams,mapping.isSharded(),encoder,url);
    final String searchTerm=searchParams.getSearchTerm();
    String spellCheckQueryStr=null;
    if (searchTerm != null && searchParams.isSpellCheck()) {
      StringBuilder builder=new StringBuilder();
      builder.append(""String_Node_Str"").append(encoder.encode(searchTerm,""String_Node_Str""));
      builder.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
      spellCheckQueryStr=builder.toString();
      url.append(spellCheckQueryStr);
    }
    JSONObject body=new JSONObject();
    body.put(""String_Node_Str"",searchParameters.getQuery());
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    JSONArray templates=new JSONArray();
    for (    String templateName : searchParams.getQueryTemplates().keySet()) {
      JSONObject template=new JSONObject();
      template.put(""String_Node_Str"",templateName);
      template.put(""String_Node_Str"",searchParams.getQueryTemplates().get(templateName));
      templates.put(template);
    }
    body.put(""String_Node_Str"",templates);
    JSONArray allAttributes=new JSONArray();
    for (    String attribute : searchParams.getAllAttributes()) {
      allAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",allAttributes);
    body.put(""String_Node_Str"",searchParams.getDefaultFTSOperator());
    body.put(""String_Node_Str"",searchParams.getDefaultFTSFieldOperator());
    body.put(""String_Node_Str"",searchParams.getQueryConsistency());
    if (searchParams.getMlAnalaysisMode() != null) {
      body.put(""String_Node_Str"",searchParams.getMlAnalaysisMode().toString());
    }
    body.put(""String_Node_Str"",searchParams.getNamespace());
    JSONArray textAttributes=new JSONArray();
    for (    String attribute : searchParams.getTextAttributes()) {
      textAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",textAttributes);
    final int maximumResults=maxResults;
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrJSONResultSet(json,searchParams,nodeService,nodeDAO,limitBy,maximumResults);
    }
,spellCheckQueryStr);
  }
 catch (  UnsupportedEncodingException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  HttpException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}","public ResultSet executeQuery(final SearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    String languageUrlFragment=SolrClientUtil.extractLanguageFragment(languageMappings,language);
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(languageUrlFragment);
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    url.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
    final LimitBy limitBy;
    int maxResults=-1;
    if (searchParameters.getMaxItems() >= 0) {
      maxResults=searchParameters.getMaxItems();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else     if (searchParameters.getLimitBy() == LimitBy.FINAL_SIZE && searchParameters.getLimit() >= 0) {
      maxResults=searchParameters.getLimit();
      limitBy=LimitBy.FINAL_SIZE;
    }
 else {
      maxResults=searchParameters.getMaxPermissionChecks();
      if (maxResults < 0) {
        maxResults=maximumResultsFromUnlimitedQuery;
      }
      limitBy=LimitBy.NUMBER_OF_PERMISSION_EVALUATIONS;
    }
    url.append(""String_Node_Str"").append(String.valueOf(maxResults));
    if ((searchParameters.getStores().size() > 1) || (mapping.isSharded())) {
      boolean requiresSeparator=false;
      url.append(""String_Node_Str"");
      for (      StoreRef storeRef : searchParameters.getStores()) {
        SolrStoreMappingWrapper storeMapping=SolrClientUtil.extractMapping(storeRef,mappingLookup,shardRegistry,requiresSeparator,beanFactory);
        if (requiresSeparator) {
          url.append(',');
        }
 else {
          requiresSeparator=true;
        }
        url.append(storeMapping.getShards());
      }
    }
    buildUrlParameters(searchParameters,mapping.isSharded(),encoder,url);
    final String searchTerm=searchParameters.getSearchTerm();
    String spellCheckQueryStr=null;
    if (searchTerm != null && searchParameters.isSpellCheck()) {
      StringBuilder builder=new StringBuilder();
      builder.append(""String_Node_Str"").append(encoder.encode(searchTerm,""String_Node_Str""));
      builder.append(""String_Node_Str"").append(encoder.encode(""String_Node_Str"",""String_Node_Str""));
      spellCheckQueryStr=builder.toString();
      url.append(spellCheckQueryStr);
    }
    JSONObject body=new JSONObject();
    body.put(""String_Node_Str"",searchParameters.getQuery());
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    JSONArray templates=new JSONArray();
    for (    String templateName : searchParameters.getQueryTemplates().keySet()) {
      JSONObject template=new JSONObject();
      template.put(""String_Node_Str"",templateName);
      template.put(""String_Node_Str"",searchParameters.getQueryTemplates().get(templateName));
      templates.put(template);
    }
    body.put(""String_Node_Str"",templates);
    JSONArray allAttributes=new JSONArray();
    for (    String attribute : searchParameters.getAllAttributes()) {
      allAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",allAttributes);
    body.put(""String_Node_Str"",searchParameters.getDefaultFTSOperator());
    body.put(""String_Node_Str"",searchParameters.getDefaultFTSFieldOperator());
    body.put(""String_Node_Str"",searchParameters.getQueryConsistency());
    if (searchParameters.getMlAnalaysisMode() != null) {
      body.put(""String_Node_Str"",searchParameters.getMlAnalaysisMode().toString());
    }
    body.put(""String_Node_Str"",searchParameters.getNamespace());
    JSONArray textAttributes=new JSONArray();
    for (    String attribute : searchParameters.getTextAttributes()) {
      textAttributes.put(attribute);
    }
    body.put(""String_Node_Str"",textAttributes);
    final int maximumResults=maxResults;
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrJSONResultSet(json,searchParameters,nodeService,nodeDAO,limitBy,maximumResults);
    }
,spellCheckQueryStr);
  }
 catch (  UnsupportedEncodingException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  HttpException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
catch (  JSONException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}",0.9868166932572005
172016,"public ResultSet executeQuery(BasicSearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(searchParameters.getQuery())) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(""String_Node_Str"" + encoder.encode(searchParameters.getQuery()));
    SearchParameters sp=(SearchParameters)searchParameters;
    url.append(""String_Node_Str"" + sp.isIncludeMetadata());
    url.append(""String_Node_Str"");
    url.append(""String_Node_Str"");
    if (mapping.isSharded()) {
      url.append(mapping.getShards());
    }
 else {
      String solrurl=httpClient.getHostConfiguration().getHostURL() + httpClientAndBaseUrl.getSecond();
      url.append(solrurl);
    }
    JSONObject body=new JSONObject();
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrSQLJSONResultSet(json,searchParameters);
    }
);
  }
 catch (  JSONException|IOException|EncoderException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}","public ResultSet executeQuery(SearchParameters searchParameters,String language){
  if (repositoryState.isBootstrapping()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(searchParameters.getQuery())) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  try {
    StoreRef store=SolrClientUtil.extractStoreRef(searchParameters);
    SolrStoreMappingWrapper mapping=SolrClientUtil.extractMapping(store,mappingLookup,shardRegistry,useDynamicShardRegistration,beanFactory);
    Pair<HttpClient,String> httpClientAndBaseUrl=mapping.getHttpClientAndBaseUrl();
    HttpClient httpClient=httpClientAndBaseUrl.getFirst();
    URLCodec encoder=new URLCodec();
    StringBuilder url=new StringBuilder();
    url.append(httpClientAndBaseUrl.getSecond());
    if (!url.toString().endsWith(""String_Node_Str"")) {
      url.append(""String_Node_Str"");
    }
    url.append(""String_Node_Str"" + encoder.encode(searchParameters.getQuery()));
    SearchParameters sp=(SearchParameters)searchParameters;
    url.append(""String_Node_Str"" + sp.isIncludeMetadata());
    url.append(""String_Node_Str"");
    url.append(""String_Node_Str"");
    if (mapping.isSharded()) {
      url.append(mapping.getShards());
    }
 else {
      String solrurl=httpClient.getHostConfiguration().getHostURL() + httpClientAndBaseUrl.getSecond();
      url.append(solrurl);
    }
    JSONObject body=new JSONObject();
    Set<String> allAuthorisations=permissionService.getAuthorisations();
    boolean includeGroups=includeGroupsForRoleAdmin ? true : !allAuthorisations.contains(PermissionService.ADMINISTRATOR_AUTHORITY);
    JSONArray authorities=new JSONArray();
    for (    String authority : allAuthorisations) {
      if (includeGroups) {
        authorities.put(authority);
      }
 else {
        if (AuthorityType.getAuthorityType(authority) != AuthorityType.GROUP) {
          authorities.put(authority);
        }
      }
    }
    body.put(""String_Node_Str"",authorities);
    body.put(""String_Node_Str"",anyDenyDenies);
    JSONArray tenants=new JSONArray();
    tenants.put(tenantService.getCurrentUserDomain());
    body.put(""String_Node_Str"",tenants);
    JSONArray locales=new JSONArray();
    for (    Locale currentLocale : searchParameters.getLocales()) {
      locales.put(DefaultTypeConverter.INSTANCE.convert(String.class,currentLocale));
    }
    if (locales.length() == 0) {
      locales.put(I18NUtil.getLocale());
    }
    body.put(""String_Node_Str"",locales);
    return (ResultSet)postSolrQuery(httpClient,url.toString(),body,json -> {
      return new SolrSQLJSONResultSet(json,searchParameters);
    }
);
  }
 catch (  JSONException|IOException|EncoderException e) {
    throw new LuceneQueryParserException(""String_Node_Str"",e);
  }
}",0.9991008811364862
172017,"public SolrSQLJSONResultSet(JSONObject json,BasicSearchParameters searchParameters){
  try {
    solrResponse=((JSONObject)json).toString();
    JSONObject res=(JSONObject)json.get(""String_Node_Str"");
    docs=(JSONArray)res.get(""String_Node_Str"");
    JSONObject obj1=docs.getJSONObject(0);
    if (obj1.has(SOLR_STREAM_EXCEPTION)) {
      String error=obj1.get(SOLR_STREAM_EXCEPTION).toString();
      if (error.equalsIgnoreCase(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      throw new RuntimeException(""String_Node_Str"" + error);
    }
    this.length=docs.length();
    JSONObject time=(JSONObject)docs.get(length - 1);
    this.numberFound=length - 1;
    queryTime=new Long((Integer)time.get(""String_Node_Str""));
    this.resultSetMetaData=new SimpleResultSetMetaData(LimitBy.FINAL_SIZE,PermissionEvaluationMode.EAGER,(SearchParameters)searchParameters);
  }
 catch (  JSONException e) {
    logger.info(e.getMessage());
  }
}","public SolrSQLJSONResultSet(JSONObject json,SearchParameters searchParameters){
  try {
    solrResponse=((JSONObject)json).toString();
    JSONObject res=(JSONObject)json.get(""String_Node_Str"");
    docs=(JSONArray)res.get(""String_Node_Str"");
    JSONObject obj1=docs.getJSONObject(0);
    if (obj1.has(SOLR_STREAM_EXCEPTION)) {
      String error=obj1.get(SOLR_STREAM_EXCEPTION).toString();
      if (error.equalsIgnoreCase(""String_Node_Str"")) {
        throw new RuntimeException(""String_Node_Str"");
      }
      if (searchParameters.getExtraParameters().containsKey(""String_Node_Str"")) {
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + error);
      }
    }
    this.length=docs.length();
    JSONObject time=(JSONObject)docs.get(length - 1);
    this.numberFound=length - 1;
    queryTime=new Long((Integer)time.get(""String_Node_Str""));
    this.resultSetMetaData=new SimpleResultSetMetaData(LimitBy.FINAL_SIZE,PermissionEvaluationMode.EAGER,(SearchParameters)searchParameters);
  }
 catch (  JSONException e) {
    logger.info(e.getMessage());
  }
}",0.9450121654501216
172018,"@SuppressWarnings(""String_Node_Str"") public void prepare(MimeMessage mimeMessage) throws MessagingException {
  if (logger.isDebugEnabled()) {
    logger.debug(ruleAction.getParameterValues());
  }
  messageRef[0]=new MimeMessageHelper(mimeMessage);
  if (headerEncoding != null && headerEncoding.length() != 0) {
    mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
  }
  String to=(String)ruleAction.getParameterValue(PARAM_TO);
  String toRecipients=null;
  if (to != null && to.length() != 0) {
    messageRef[0].setTo(to);
    toRecipients=to;
    Serializable ccValue=(String)ruleAction.getParameterValue(PARAM_CC);
    if (ccValue != null) {
      if (ccValue instanceof String) {
        String cc=(String)ccValue;
        if (cc.length() > 0) {
          messageRef[0].setCc(cc);
        }
      }
 else       if (ccValue instanceof List<?>) {
        List<String> s=(List<String>)ccValue;
        messageRef[0].setCc((String[])s.toArray());
      }
 else       if (ccValue.getClass().isArray()) {
        messageRef[0].setCc((String[])ccValue);
      }
    }
    Serializable bccValue=(String)ruleAction.getParameterValue(PARAM_BCC);
    if (bccValue != null) {
      if (bccValue instanceof String) {
        String bcc=(String)bccValue;
        if (bcc.length() > 0) {
          messageRef[0].setBcc(bcc);
        }
      }
 else       if (bccValue instanceof List<?>) {
        List<String> s=(List<String>)bccValue;
        messageRef[0].setBcc((String[])s.toArray());
      }
 else       if (bccValue.getClass().isArray()) {
        messageRef[0].setCc((String[])bccValue);
      }
    }
  }
 else {
    Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
    List<String> authorities=null;
    if (authoritiesValue != null) {
      if (authoritiesValue instanceof String) {
        authorities=new ArrayList<String>(1);
        authorities.add((String)authoritiesValue);
      }
 else {
        authorities=(List<String>)authoritiesValue;
      }
    }
    if (authorities != null && authorities.size() != 0) {
      List<String> recipients=new ArrayList<String>(authorities.size());
      if (logger.isTraceEnabled()) {
        logger.trace(authorities.size() + ""String_Node_Str"");
      }
      for (      String authority : authorities) {
        final AuthorityType authType=AuthorityType.getAuthorityType(authority);
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + authType);
        }
        if (authType.equals(AuthorityType.USER)) {
          if (personService.personExists(authority) == true) {
            NodeRef person=personService.getPerson(authority);
            if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
              continue;
            }
            String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
            if (address != null && address.length() != 0 && validateAddress(address)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              recipients.add(address);
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(authority);
              }
            }
          }
 else {
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"");
            }
            if (validateAddress(authority)) {
              recipients.add(authority);
            }
          }
        }
 else         if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
          if (logger.isTraceEnabled()) {
            logger.trace(""String_Node_Str"");
          }
          Set<String> users;
          if (authType.equals(AuthorityType.GROUP)) {
            users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
          }
 else {
            users=authorityService.getAllAuthorities(AuthorityType.USER);
          }
          for (          String userAuth : users) {
            if (personService.personExists(userAuth) == true) {
              if (!personService.isEnabled(userAuth)) {
                continue;
              }
              NodeRef person=personService.getPerson(userAuth);
              String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
              if (address != null && address.length() != 0) {
                recipients.add(address);
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(userAuth);
                }
              }
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(userAuth);
              }
            }
          }
        }
      }
      if (logger.isTraceEnabled()) {
        logger.trace(recipients.size() + ""String_Node_Str"");
      }
      if (recipients.size() > 0) {
        messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
        toRecipients=String.join(""String_Node_Str"",recipients);
      }
 else {
        throw new MailPreparationException(""String_Node_Str"");
      }
    }
 else {
      throw new MailPreparationException(""String_Node_Str"");
    }
  }
  NodeRef fromPerson=null;
  final String currentUserName=authService.getCurrentUserName();
  final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
  if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
    fromPerson=personService.getPerson(currentUserName);
  }
  if (isFromEnabled()) {
    String from=(String)ruleAction.getParameterValue(PARAM_FROM);
    if (from != null && from.length() > 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + from);
      }
      String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
      if (fromPersonalName != null && fromPersonalName.length() > 0) {
        try {
          messageRef[0].setFrom(from,fromPersonalName);
        }
 catch (        UnsupportedEncodingException error) {
          messageRef[0].setFrom(from);
        }
      }
 else {
        messageRef[0].setFrom(from);
      }
    }
 else {
      String fromActualUser=null;
      if (fromPerson != null) {
        fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
      }
      if (fromActualUser != null && fromActualUser.length() != 0) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
        }
        messageRef[0].setFrom(fromActualUser);
      }
 else {
        messageRef[0].setFrom(fromDefaultAddress);
      }
    }
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + fromDefaultAddress);
    }
    messageRef[0].setFrom(fromDefaultAddress);
  }
  messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
  if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
    messageRef[0].setTo(testModeRecipient);
    String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
    if (emailRecipient == null) {
      Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
      if (obj != null) {
        emailRecipient=obj.toString();
      }
    }
    String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
    messageRef[0].setSubject(recipientPrefixedSubject);
  }
  String text=null;
  Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
  String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
  if (templateRef != null) {
    Map<String,Object> suppliedModel=null;
    if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
      Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
      if (m instanceof Map) {
        suppliedModel=(Map<String,Object>)m;
      }
 else {
        logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
      }
    }
    Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
    Locale locale=recipient.getSecond();
    if (locale == null) {
      locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
    }
    if (locale == null) {
      locale=sender.getSecond();
    }
    String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
    Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
    Object[] subjectParams=null;
    if (subjectParamsObject instanceof List) {
      subjectParams=((List<Object>)subjectParamsObject).toArray();
    }
 else     if (subjectParamsObject instanceof Object[]) {
      subjectParams=(Object[])subjectParamsObject;
    }
 else {
      if (subjectParamsObject != null) {
        subjectParams=new Object[]{subjectParamsObject.toString()};
      }
    }
    String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
    if (locale == null) {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
    }
 else {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
    }
    if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
      messageRef[0].setTo(testModeRecipient);
      String emailRecipient=recipient.getFirst();
      String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
      messageRef[0].setSubject(recipientPrefixedSubject);
    }
 else {
      messageRef[0].setTo(recipient.getFirst());
      messageRef[0].setSubject(localizedSubject);
    }
  }
  boolean isHTML=false;
  if (text == null) {
    text=(String)ruleAction.getParameterValue(PARAM_TEXT);
  }
  if (text != null) {
    if (isHTML(text)) {
      isHTML=true;
    }
  }
 else {
    text=(String)ruleAction.getParameterValue(PARAM_HTML);
    if (text != null) {
      isHTML=true;
    }
  }
  if (text != null) {
    messageRef[0].setText(text,isHTML);
  }
}","@SuppressWarnings(""String_Node_Str"") public void prepare(MimeMessage mimeMessage) throws MessagingException {
  if (logger.isDebugEnabled()) {
    logger.debug(ruleAction.getParameterValues());
  }
  messageRef[0]=new MimeMessageHelper(mimeMessage);
  if (headerEncoding != null && headerEncoding.length() != 0) {
    mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
  }
  String to=(String)ruleAction.getParameterValue(PARAM_TO);
  String toRecipients=null;
  if (to != null && to.length() != 0) {
    messageRef[0].setTo(to);
    toRecipients=to;
    Serializable ccValue=(Serializable)ruleAction.getParameterValue(PARAM_CC);
    if (ccValue != null) {
      if (ccValue instanceof String) {
        String cc=(String)ccValue;
        if (cc.length() > 0) {
          messageRef[0].setCc(cc);
        }
      }
 else       if (ccValue instanceof List<?>) {
        List<String> s=(List<String>)ccValue;
        messageRef[0].setCc(s.toArray(new String[s.size()]));
      }
 else       if (ccValue.getClass().isArray()) {
        messageRef[0].setCc((String[])ccValue);
      }
    }
    Serializable bccValue=(Serializable)ruleAction.getParameterValue(PARAM_BCC);
    if (bccValue != null) {
      if (bccValue instanceof String) {
        String bcc=(String)bccValue;
        if (bcc.length() > 0) {
          messageRef[0].setBcc(bcc);
        }
      }
 else       if (bccValue instanceof List<?>) {
        List<String> s=(List<String>)bccValue;
        messageRef[0].setBcc(s.toArray(new String[s.size()]));
      }
 else       if (bccValue.getClass().isArray()) {
        messageRef[0].setBcc((String[])bccValue);
      }
    }
  }
 else {
    Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
    List<String> authorities=null;
    if (authoritiesValue != null) {
      if (authoritiesValue instanceof String) {
        authorities=new ArrayList<String>(1);
        authorities.add((String)authoritiesValue);
      }
 else {
        authorities=(List<String>)authoritiesValue;
      }
    }
    if (authorities != null && authorities.size() != 0) {
      List<String> recipients=new ArrayList<String>(authorities.size());
      if (logger.isTraceEnabled()) {
        logger.trace(authorities.size() + ""String_Node_Str"");
      }
      for (      String authority : authorities) {
        final AuthorityType authType=AuthorityType.getAuthorityType(authority);
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + authType);
        }
        if (authType.equals(AuthorityType.USER)) {
          if (personService.personExists(authority) == true) {
            NodeRef person=personService.getPerson(authority);
            if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
              continue;
            }
            String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
            if (address != null && address.length() != 0 && validateAddress(address)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              recipients.add(address);
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(authority);
              }
            }
          }
 else {
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"");
            }
            if (validateAddress(authority)) {
              recipients.add(authority);
            }
          }
        }
 else         if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
          if (logger.isTraceEnabled()) {
            logger.trace(""String_Node_Str"");
          }
          Set<String> users;
          if (authType.equals(AuthorityType.GROUP)) {
            users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
          }
 else {
            users=authorityService.getAllAuthorities(AuthorityType.USER);
          }
          for (          String userAuth : users) {
            if (personService.personExists(userAuth) == true) {
              if (!personService.isEnabled(userAuth)) {
                continue;
              }
              NodeRef person=personService.getPerson(userAuth);
              String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
              if (address != null && address.length() != 0) {
                recipients.add(address);
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(userAuth);
                }
              }
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(userAuth);
              }
            }
          }
        }
      }
      if (logger.isTraceEnabled()) {
        logger.trace(recipients.size() + ""String_Node_Str"");
      }
      if (recipients.size() > 0) {
        messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
        toRecipients=String.join(""String_Node_Str"",recipients);
      }
 else {
        throw new MailPreparationException(""String_Node_Str"");
      }
    }
 else {
      throw new MailPreparationException(""String_Node_Str"");
    }
  }
  NodeRef fromPerson=null;
  final String currentUserName=authService.getCurrentUserName();
  final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
  if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
    fromPerson=personService.getPerson(currentUserName);
  }
  if (isFromEnabled()) {
    String from=(String)ruleAction.getParameterValue(PARAM_FROM);
    if (from != null && from.length() > 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + from);
      }
      String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
      if (fromPersonalName != null && fromPersonalName.length() > 0) {
        try {
          messageRef[0].setFrom(from,fromPersonalName);
        }
 catch (        UnsupportedEncodingException error) {
          messageRef[0].setFrom(from);
        }
      }
 else {
        messageRef[0].setFrom(from);
      }
    }
 else {
      String fromActualUser=null;
      if (fromPerson != null) {
        fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
      }
      if (fromActualUser != null && fromActualUser.length() != 0) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
        }
        messageRef[0].setFrom(fromActualUser);
      }
 else {
        messageRef[0].setFrom(fromDefaultAddress);
      }
    }
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + fromDefaultAddress);
    }
    messageRef[0].setFrom(fromDefaultAddress);
  }
  messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
  if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
    messageRef[0].setTo(testModeRecipient);
    String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
    if (emailRecipient == null) {
      Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
      if (obj != null) {
        emailRecipient=obj.toString();
      }
    }
    String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
    messageRef[0].setSubject(recipientPrefixedSubject);
  }
  String text=null;
  Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
  String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
  if (templateRef != null) {
    Map<String,Object> suppliedModel=null;
    if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
      Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
      if (m instanceof Map) {
        suppliedModel=(Map<String,Object>)m;
      }
 else {
        logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
      }
    }
    Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
    Locale locale=recipient.getSecond();
    if (locale == null) {
      locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
    }
    if (locale == null) {
      locale=sender.getSecond();
    }
    String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
    Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
    Object[] subjectParams=null;
    if (subjectParamsObject instanceof List) {
      subjectParams=((List<Object>)subjectParamsObject).toArray();
    }
 else     if (subjectParamsObject instanceof Object[]) {
      subjectParams=(Object[])subjectParamsObject;
    }
 else {
      if (subjectParamsObject != null) {
        subjectParams=new Object[]{subjectParamsObject.toString()};
      }
    }
    String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
    if (locale == null) {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
    }
 else {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
    }
    if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
      messageRef[0].setTo(testModeRecipient);
      String emailRecipient=recipient.getFirst();
      String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
      messageRef[0].setSubject(recipientPrefixedSubject);
    }
 else {
      messageRef[0].setTo(recipient.getFirst());
      messageRef[0].setSubject(localizedSubject);
    }
  }
  boolean isHTML=false;
  if (text == null) {
    text=(String)ruleAction.getParameterValue(PARAM_TEXT);
  }
  if (text != null) {
    if (isHTML(text)) {
      isHTML=true;
    }
  }
 else {
    text=(String)ruleAction.getParameterValue(PARAM_HTML);
    if (text != null) {
      isHTML=true;
    }
  }
  if (text != null) {
    messageRef[0].setText(text,isHTML);
  }
}",0.9952148664343786
172019,"public MimeMessageHelper prepareEmail(final Action ruleAction,final NodeRef actionedUponNodeRef,final Pair<String,Locale> recipient,final Pair<InternetAddress,Locale> sender){
  final MimeMessageHelper[] messageRef=new MimeMessageHelper[1];
  MimeMessagePreparator mailPreparer=new MimeMessagePreparator(){
    @SuppressWarnings(""String_Node_Str"") public void prepare(    MimeMessage mimeMessage) throws MessagingException {
      if (logger.isDebugEnabled()) {
        logger.debug(ruleAction.getParameterValues());
      }
      messageRef[0]=new MimeMessageHelper(mimeMessage);
      if (headerEncoding != null && headerEncoding.length() != 0) {
        mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
      }
      String to=(String)ruleAction.getParameterValue(PARAM_TO);
      String toRecipients=null;
      if (to != null && to.length() != 0) {
        messageRef[0].setTo(to);
        toRecipients=to;
        Serializable ccValue=(String)ruleAction.getParameterValue(PARAM_CC);
        if (ccValue != null) {
          if (ccValue instanceof String) {
            String cc=(String)ccValue;
            if (cc.length() > 0) {
              messageRef[0].setCc(cc);
            }
          }
 else           if (ccValue instanceof List<?>) {
            List<String> s=(List<String>)ccValue;
            messageRef[0].setCc((String[])s.toArray());
          }
 else           if (ccValue.getClass().isArray()) {
            messageRef[0].setCc((String[])ccValue);
          }
        }
        Serializable bccValue=(String)ruleAction.getParameterValue(PARAM_BCC);
        if (bccValue != null) {
          if (bccValue instanceof String) {
            String bcc=(String)bccValue;
            if (bcc.length() > 0) {
              messageRef[0].setBcc(bcc);
            }
          }
 else           if (bccValue instanceof List<?>) {
            List<String> s=(List<String>)bccValue;
            messageRef[0].setBcc((String[])s.toArray());
          }
 else           if (bccValue.getClass().isArray()) {
            messageRef[0].setCc((String[])bccValue);
          }
        }
      }
 else {
        Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
        List<String> authorities=null;
        if (authoritiesValue != null) {
          if (authoritiesValue instanceof String) {
            authorities=new ArrayList<String>(1);
            authorities.add((String)authoritiesValue);
          }
 else {
            authorities=(List<String>)authoritiesValue;
          }
        }
        if (authorities != null && authorities.size() != 0) {
          List<String> recipients=new ArrayList<String>(authorities.size());
          if (logger.isTraceEnabled()) {
            logger.trace(authorities.size() + ""String_Node_Str"");
          }
          for (          String authority : authorities) {
            final AuthorityType authType=AuthorityType.getAuthorityType(authority);
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"" + authType);
            }
            if (authType.equals(AuthorityType.USER)) {
              if (personService.personExists(authority) == true) {
                NodeRef person=personService.getPerson(authority);
                if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
                  continue;
                }
                String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                if (address != null && address.length() != 0 && validateAddress(address)) {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  recipients.add(address);
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(authority);
                  }
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(authority);
                }
              }
            }
 else             if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              Set<String> users;
              if (authType.equals(AuthorityType.GROUP)) {
                users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
              }
 else {
                users=authorityService.getAllAuthorities(AuthorityType.USER);
              }
              for (              String userAuth : users) {
                if (personService.personExists(userAuth) == true) {
                  if (!personService.isEnabled(userAuth)) {
                    continue;
                  }
                  NodeRef person=personService.getPerson(userAuth);
                  String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                  if (address != null && address.length() != 0) {
                    recipients.add(address);
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                  }
 else {
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                    if (validateAddress(authority)) {
                      recipients.add(userAuth);
                    }
                  }
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(userAuth);
                  }
                }
              }
            }
          }
          if (logger.isTraceEnabled()) {
            logger.trace(recipients.size() + ""String_Node_Str"");
          }
          if (recipients.size() > 0) {
            messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
            toRecipients=String.join(""String_Node_Str"",recipients);
          }
 else {
            throw new MailPreparationException(""String_Node_Str"");
          }
        }
 else {
          throw new MailPreparationException(""String_Node_Str"");
        }
      }
      NodeRef fromPerson=null;
      final String currentUserName=authService.getCurrentUserName();
      final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
      if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
        fromPerson=personService.getPerson(currentUserName);
      }
      if (isFromEnabled()) {
        String from=(String)ruleAction.getParameterValue(PARAM_FROM);
        if (from != null && from.length() > 0) {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + from);
          }
          String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
          if (fromPersonalName != null && fromPersonalName.length() > 0) {
            try {
              messageRef[0].setFrom(from,fromPersonalName);
            }
 catch (            UnsupportedEncodingException error) {
              messageRef[0].setFrom(from);
            }
          }
 else {
            messageRef[0].setFrom(from);
          }
        }
 else {
          String fromActualUser=null;
          if (fromPerson != null) {
            fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
          }
          if (fromActualUser != null && fromActualUser.length() != 0) {
            if (logger.isDebugEnabled()) {
              logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
            }
            messageRef[0].setFrom(fromActualUser);
          }
 else {
            messageRef[0].setFrom(fromDefaultAddress);
          }
        }
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromDefaultAddress);
        }
        messageRef[0].setFrom(fromDefaultAddress);
      }
      messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
      if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
        messageRef[0].setTo(testModeRecipient);
        String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
        if (emailRecipient == null) {
          Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
          if (obj != null) {
            emailRecipient=obj.toString();
          }
        }
        String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
        messageRef[0].setSubject(recipientPrefixedSubject);
      }
      String text=null;
      Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
      String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
      if (templateRef != null) {
        Map<String,Object> suppliedModel=null;
        if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
          Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
          if (m instanceof Map) {
            suppliedModel=(Map<String,Object>)m;
          }
 else {
            logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
          }
        }
        Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
        Locale locale=recipient.getSecond();
        if (locale == null) {
          locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
        }
        if (locale == null) {
          locale=sender.getSecond();
        }
        String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
        Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
        Object[] subjectParams=null;
        if (subjectParamsObject instanceof List) {
          subjectParams=((List<Object>)subjectParamsObject).toArray();
        }
 else         if (subjectParamsObject instanceof Object[]) {
          subjectParams=(Object[])subjectParamsObject;
        }
 else {
          if (subjectParamsObject != null) {
            subjectParams=new Object[]{subjectParamsObject.toString()};
          }
        }
        String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
        if (locale == null) {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
        }
 else {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
        }
        if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
          messageRef[0].setTo(testModeRecipient);
          String emailRecipient=recipient.getFirst();
          String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
          messageRef[0].setSubject(recipientPrefixedSubject);
        }
 else {
          messageRef[0].setTo(recipient.getFirst());
          messageRef[0].setSubject(localizedSubject);
        }
      }
      boolean isHTML=false;
      if (text == null) {
        text=(String)ruleAction.getParameterValue(PARAM_TEXT);
      }
      if (text != null) {
        if (isHTML(text)) {
          isHTML=true;
        }
      }
 else {
        text=(String)ruleAction.getParameterValue(PARAM_HTML);
        if (text != null) {
          isHTML=true;
        }
      }
      if (text != null) {
        messageRef[0].setText(text,isHTML);
      }
    }
  }
;
  MimeMessage mimeMessage=mailService.createMimeMessage();
  try {
    mailPreparer.prepare(mimeMessage);
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",e);
    }
    return null;
  }
  return messageRef[0];
}","public MimeMessageHelper prepareEmail(final Action ruleAction,final NodeRef actionedUponNodeRef,final Pair<String,Locale> recipient,final Pair<InternetAddress,Locale> sender){
  final MimeMessageHelper[] messageRef=new MimeMessageHelper[1];
  MimeMessagePreparator mailPreparer=new MimeMessagePreparator(){
    @SuppressWarnings(""String_Node_Str"") public void prepare(    MimeMessage mimeMessage) throws MessagingException {
      if (logger.isDebugEnabled()) {
        logger.debug(ruleAction.getParameterValues());
      }
      messageRef[0]=new MimeMessageHelper(mimeMessage);
      if (headerEncoding != null && headerEncoding.length() != 0) {
        mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
      }
      String to=(String)ruleAction.getParameterValue(PARAM_TO);
      String toRecipients=null;
      if (to != null && to.length() != 0) {
        messageRef[0].setTo(to);
        toRecipients=to;
        Serializable ccValue=(Serializable)ruleAction.getParameterValue(PARAM_CC);
        if (ccValue != null) {
          if (ccValue instanceof String) {
            String cc=(String)ccValue;
            if (cc.length() > 0) {
              messageRef[0].setCc(cc);
            }
          }
 else           if (ccValue instanceof List<?>) {
            List<String> s=(List<String>)ccValue;
            messageRef[0].setCc(s.toArray(new String[s.size()]));
          }
 else           if (ccValue.getClass().isArray()) {
            messageRef[0].setCc((String[])ccValue);
          }
        }
        Serializable bccValue=(Serializable)ruleAction.getParameterValue(PARAM_BCC);
        if (bccValue != null) {
          if (bccValue instanceof String) {
            String bcc=(String)bccValue;
            if (bcc.length() > 0) {
              messageRef[0].setBcc(bcc);
            }
          }
 else           if (bccValue instanceof List<?>) {
            List<String> s=(List<String>)bccValue;
            messageRef[0].setBcc(s.toArray(new String[s.size()]));
          }
 else           if (bccValue.getClass().isArray()) {
            messageRef[0].setBcc((String[])bccValue);
          }
        }
      }
 else {
        Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
        List<String> authorities=null;
        if (authoritiesValue != null) {
          if (authoritiesValue instanceof String) {
            authorities=new ArrayList<String>(1);
            authorities.add((String)authoritiesValue);
          }
 else {
            authorities=(List<String>)authoritiesValue;
          }
        }
        if (authorities != null && authorities.size() != 0) {
          List<String> recipients=new ArrayList<String>(authorities.size());
          if (logger.isTraceEnabled()) {
            logger.trace(authorities.size() + ""String_Node_Str"");
          }
          for (          String authority : authorities) {
            final AuthorityType authType=AuthorityType.getAuthorityType(authority);
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"" + authType);
            }
            if (authType.equals(AuthorityType.USER)) {
              if (personService.personExists(authority) == true) {
                NodeRef person=personService.getPerson(authority);
                if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
                  continue;
                }
                String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                if (address != null && address.length() != 0 && validateAddress(address)) {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  recipients.add(address);
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(authority);
                  }
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(authority);
                }
              }
            }
 else             if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              Set<String> users;
              if (authType.equals(AuthorityType.GROUP)) {
                users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
              }
 else {
                users=authorityService.getAllAuthorities(AuthorityType.USER);
              }
              for (              String userAuth : users) {
                if (personService.personExists(userAuth) == true) {
                  if (!personService.isEnabled(userAuth)) {
                    continue;
                  }
                  NodeRef person=personService.getPerson(userAuth);
                  String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                  if (address != null && address.length() != 0) {
                    recipients.add(address);
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                  }
 else {
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                    if (validateAddress(authority)) {
                      recipients.add(userAuth);
                    }
                  }
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(userAuth);
                  }
                }
              }
            }
          }
          if (logger.isTraceEnabled()) {
            logger.trace(recipients.size() + ""String_Node_Str"");
          }
          if (recipients.size() > 0) {
            messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
            toRecipients=String.join(""String_Node_Str"",recipients);
          }
 else {
            throw new MailPreparationException(""String_Node_Str"");
          }
        }
 else {
          throw new MailPreparationException(""String_Node_Str"");
        }
      }
      NodeRef fromPerson=null;
      final String currentUserName=authService.getCurrentUserName();
      final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
      if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
        fromPerson=personService.getPerson(currentUserName);
      }
      if (isFromEnabled()) {
        String from=(String)ruleAction.getParameterValue(PARAM_FROM);
        if (from != null && from.length() > 0) {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + from);
          }
          String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
          if (fromPersonalName != null && fromPersonalName.length() > 0) {
            try {
              messageRef[0].setFrom(from,fromPersonalName);
            }
 catch (            UnsupportedEncodingException error) {
              messageRef[0].setFrom(from);
            }
          }
 else {
            messageRef[0].setFrom(from);
          }
        }
 else {
          String fromActualUser=null;
          if (fromPerson != null) {
            fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
          }
          if (fromActualUser != null && fromActualUser.length() != 0) {
            if (logger.isDebugEnabled()) {
              logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
            }
            messageRef[0].setFrom(fromActualUser);
          }
 else {
            messageRef[0].setFrom(fromDefaultAddress);
          }
        }
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromDefaultAddress);
        }
        messageRef[0].setFrom(fromDefaultAddress);
      }
      messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
      if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
        messageRef[0].setTo(testModeRecipient);
        String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
        if (emailRecipient == null) {
          Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
          if (obj != null) {
            emailRecipient=obj.toString();
          }
        }
        String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
        messageRef[0].setSubject(recipientPrefixedSubject);
      }
      String text=null;
      Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
      String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
      if (templateRef != null) {
        Map<String,Object> suppliedModel=null;
        if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
          Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
          if (m instanceof Map) {
            suppliedModel=(Map<String,Object>)m;
          }
 else {
            logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
          }
        }
        Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
        Locale locale=recipient.getSecond();
        if (locale == null) {
          locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
        }
        if (locale == null) {
          locale=sender.getSecond();
        }
        String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
        Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
        Object[] subjectParams=null;
        if (subjectParamsObject instanceof List) {
          subjectParams=((List<Object>)subjectParamsObject).toArray();
        }
 else         if (subjectParamsObject instanceof Object[]) {
          subjectParams=(Object[])subjectParamsObject;
        }
 else {
          if (subjectParamsObject != null) {
            subjectParams=new Object[]{subjectParamsObject.toString()};
          }
        }
        String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
        if (locale == null) {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
        }
 else {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
        }
        if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
          messageRef[0].setTo(testModeRecipient);
          String emailRecipient=recipient.getFirst();
          String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
          messageRef[0].setSubject(recipientPrefixedSubject);
        }
 else {
          messageRef[0].setTo(recipient.getFirst());
          messageRef[0].setSubject(localizedSubject);
        }
      }
      boolean isHTML=false;
      if (text == null) {
        text=(String)ruleAction.getParameterValue(PARAM_TEXT);
      }
      if (text != null) {
        if (isHTML(text)) {
          isHTML=true;
        }
      }
 else {
        text=(String)ruleAction.getParameterValue(PARAM_HTML);
        if (text != null) {
          isHTML=true;
        }
      }
      if (text != null) {
        messageRef[0].setText(text,isHTML);
      }
    }
  }
;
  MimeMessage mimeMessage=mailService.createMimeMessage();
  try {
    mailPreparer.prepare(mimeMessage);
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",e);
    }
    return null;
  }
  return messageRef[0];
}",0.9958606277378128
172020,"/** 
 * Test for CC / BCC 
 * @throws Exception 
 */
@Test public void testSendingToCarbonCopy() throws IOException, MessagingException {
  Action mailAction=ACTION_SERVICE.createAction(MailActionExecuter.NAME);
  mailAction.setParameterValue(MailActionExecuter.PARAM_FROM,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TO,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_CC,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_SUBJECT,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE_MODEL,(Serializable)getModel());
  ACTION_SERVICE.executeAction(mailAction,null);
  MimeMessage message=ACTION_EXECUTER.retrieveLastTestMessage();
  Assert.assertNotNull(message);
  Address[] all=message.getAllRecipients();
  Address[] ccs=message.getRecipients(RecipientType.CC);
  Assert.assertEquals(""String_Node_Str"",2,all.length);
  Assert.assertEquals(""String_Node_Str"",1,ccs.length);
  Assert.assertTrue(ccs[0].toString().contains(""String_Node_Str""));
}","/** 
 * Test for CC / BCC 
 * @throws Exception 
 */
@Test public void testSendingToCarbonCopy() throws IOException, MessagingException {
  Action mailAction=ACTION_SERVICE.createAction(MailActionExecuter.NAME);
  mailAction.setParameterValue(MailActionExecuter.PARAM_FROM,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TO,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_CC,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_BCC,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_SUBJECT,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE_MODEL,(Serializable)getModel());
  ACTION_SERVICE.executeAction(mailAction,null);
  MimeMessage message=ACTION_EXECUTER.retrieveLastTestMessage();
  Assert.assertNotNull(message);
  Address[] all=message.getAllRecipients();
  Address[] ccs=message.getRecipients(RecipientType.CC);
  Address[] bccs=message.getRecipients(RecipientType.BCC);
  Assert.assertEquals(3,all.length);
  Assert.assertEquals(1,ccs.length);
  Assert.assertEquals(1,bccs.length);
  Assert.assertTrue(ccs[0].toString().contains(""String_Node_Str""));
  Assert.assertTrue(bccs[0].toString().contains(""String_Node_Str""));
}",0.8864
172021,"@SuppressWarnings(""String_Node_Str"") public void prepare(MimeMessage mimeMessage) throws MessagingException {
  if (logger.isDebugEnabled()) {
    logger.debug(ruleAction.getParameterValues());
  }
  messageRef[0]=new MimeMessageHelper(mimeMessage);
  if (headerEncoding != null && headerEncoding.length() != 0) {
    mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
  }
  String to=(String)ruleAction.getParameterValue(PARAM_TO);
  String toRecipients=null;
  if (to != null && to.length() != 0) {
    messageRef[0].setTo(to);
    toRecipients=to;
    Serializable ccValue=(String)ruleAction.getParameterValue(PARAM_CC);
    if (ccValue != null) {
      if (ccValue instanceof String) {
        String cc=(String)ccValue;
        if (cc.length() > 0) {
          messageRef[0].setCc(cc);
        }
      }
 else       if (ccValue instanceof List<?>) {
        List<String> s=(List<String>)ccValue;
        messageRef[0].setCc((String[])s.toArray());
      }
 else       if (ccValue.getClass().isArray()) {
        messageRef[0].setCc((String[])ccValue);
      }
    }
    Serializable bccValue=(String)ruleAction.getParameterValue(PARAM_BCC);
    if (bccValue != null) {
      if (bccValue instanceof String) {
        String bcc=(String)bccValue;
        if (bcc.length() > 0) {
          messageRef[0].setBcc(bcc);
        }
      }
 else       if (bccValue instanceof List<?>) {
        List<String> s=(List<String>)bccValue;
        messageRef[0].setBcc((String[])s.toArray());
      }
 else       if (bccValue.getClass().isArray()) {
        messageRef[0].setCc((String[])bccValue);
      }
    }
  }
 else {
    Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
    List<String> authorities=null;
    if (authoritiesValue != null) {
      if (authoritiesValue instanceof String) {
        authorities=new ArrayList<String>(1);
        authorities.add((String)authoritiesValue);
      }
 else {
        authorities=(List<String>)authoritiesValue;
      }
    }
    if (authorities != null && authorities.size() != 0) {
      List<String> recipients=new ArrayList<String>(authorities.size());
      if (logger.isTraceEnabled()) {
        logger.trace(authorities.size() + ""String_Node_Str"");
      }
      for (      String authority : authorities) {
        final AuthorityType authType=AuthorityType.getAuthorityType(authority);
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + authType);
        }
        if (authType.equals(AuthorityType.USER)) {
          if (personService.personExists(authority) == true) {
            NodeRef person=personService.getPerson(authority);
            if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
              continue;
            }
            String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
            if (address != null && address.length() != 0 && validateAddress(address)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              recipients.add(address);
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(authority);
              }
            }
          }
 else {
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"");
            }
            if (validateAddress(authority)) {
              recipients.add(authority);
            }
          }
        }
 else         if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
          if (logger.isTraceEnabled()) {
            logger.trace(""String_Node_Str"");
          }
          Set<String> users;
          if (authType.equals(AuthorityType.GROUP)) {
            users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
          }
 else {
            users=authorityService.getAllAuthorities(AuthorityType.USER);
          }
          for (          String userAuth : users) {
            if (personService.personExists(userAuth) == true) {
              if (!personService.isEnabled(userAuth)) {
                continue;
              }
              NodeRef person=personService.getPerson(userAuth);
              String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
              if (address != null && address.length() != 0) {
                recipients.add(address);
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(userAuth);
                }
              }
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(userAuth);
              }
            }
          }
        }
      }
      if (logger.isTraceEnabled()) {
        logger.trace(recipients.size() + ""String_Node_Str"");
      }
      if (recipients.size() > 0) {
        messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
        toRecipients=String.join(""String_Node_Str"",recipients);
      }
 else {
        throw new MailPreparationException(""String_Node_Str"");
      }
    }
 else {
      throw new MailPreparationException(""String_Node_Str"");
    }
  }
  NodeRef fromPerson=null;
  final String currentUserName=authService.getCurrentUserName();
  final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
  if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
    fromPerson=personService.getPerson(currentUserName);
  }
  if (isFromEnabled()) {
    String from=(String)ruleAction.getParameterValue(PARAM_FROM);
    if (from != null && from.length() > 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + from);
      }
      String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
      if (fromPersonalName != null && fromPersonalName.length() > 0) {
        try {
          messageRef[0].setFrom(from,fromPersonalName);
        }
 catch (        UnsupportedEncodingException error) {
          messageRef[0].setFrom(from);
        }
      }
 else {
        messageRef[0].setFrom(from);
      }
    }
 else {
      String fromActualUser=null;
      if (fromPerson != null) {
        fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
      }
      if (fromActualUser != null && fromActualUser.length() != 0) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
        }
        messageRef[0].setFrom(fromActualUser);
      }
 else {
        messageRef[0].setFrom(fromDefaultAddress);
      }
    }
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + fromDefaultAddress);
    }
    messageRef[0].setFrom(fromDefaultAddress);
  }
  messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
  if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
    messageRef[0].setTo(testModeRecipient);
    String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
    if (emailRecipient == null) {
      Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
      if (obj != null) {
        emailRecipient=obj.toString();
      }
    }
    String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
    messageRef[0].setSubject(recipientPrefixedSubject);
  }
  String text=null;
  Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
  String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
  if (templateRef != null) {
    Map<String,Object> suppliedModel=null;
    if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
      Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
      if (m instanceof Map) {
        suppliedModel=(Map<String,Object>)m;
      }
 else {
        logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
      }
    }
    Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
    Locale locale=recipient.getSecond();
    if (locale == null) {
      locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
    }
    if (locale == null) {
      locale=sender.getSecond();
    }
    String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
    Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
    Object[] subjectParams=null;
    if (subjectParamsObject instanceof List) {
      subjectParams=((List<Object>)subjectParamsObject).toArray();
    }
 else     if (subjectParamsObject instanceof Object[]) {
      subjectParams=(Object[])subjectParamsObject;
    }
 else {
      if (subjectParamsObject != null) {
        subjectParams=new Object[]{subjectParamsObject.toString()};
      }
    }
    String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
    if (locale == null) {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
    }
 else {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
    }
    if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
      messageRef[0].setTo(testModeRecipient);
      String emailRecipient=recipient.getFirst();
      String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
      messageRef[0].setSubject(recipientPrefixedSubject);
    }
 else {
      messageRef[0].setTo(recipient.getFirst());
      messageRef[0].setSubject(localizedSubject);
    }
  }
  boolean isHTML=false;
  if (text == null) {
    text=(String)ruleAction.getParameterValue(PARAM_TEXT);
  }
  if (text != null) {
    if (isHTML(text)) {
      isHTML=true;
    }
  }
 else {
    text=(String)ruleAction.getParameterValue(PARAM_HTML);
    if (text != null) {
      isHTML=true;
    }
  }
  if (text != null) {
    messageRef[0].setText(text,isHTML);
  }
}","@SuppressWarnings(""String_Node_Str"") public void prepare(MimeMessage mimeMessage) throws MessagingException {
  if (logger.isDebugEnabled()) {
    logger.debug(ruleAction.getParameterValues());
  }
  messageRef[0]=new MimeMessageHelper(mimeMessage);
  if (headerEncoding != null && headerEncoding.length() != 0) {
    mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
  }
  String to=(String)ruleAction.getParameterValue(PARAM_TO);
  String toRecipients=null;
  if (to != null && to.length() != 0) {
    messageRef[0].setTo(to);
    toRecipients=to;
    Serializable ccValue=(Serializable)ruleAction.getParameterValue(PARAM_CC);
    if (ccValue != null) {
      if (ccValue instanceof String) {
        String cc=(String)ccValue;
        if (cc.length() > 0) {
          messageRef[0].setCc(cc);
        }
      }
 else       if (ccValue instanceof List<?>) {
        List<String> s=(List<String>)ccValue;
        messageRef[0].setCc(s.toArray(new String[s.size()]));
      }
 else       if (ccValue.getClass().isArray()) {
        messageRef[0].setCc((String[])ccValue);
      }
    }
    Serializable bccValue=(Serializable)ruleAction.getParameterValue(PARAM_BCC);
    if (bccValue != null) {
      if (bccValue instanceof String) {
        String bcc=(String)bccValue;
        if (bcc.length() > 0) {
          messageRef[0].setBcc(bcc);
        }
      }
 else       if (bccValue instanceof List<?>) {
        List<String> s=(List<String>)bccValue;
        messageRef[0].setBcc(s.toArray(new String[s.size()]));
      }
 else       if (bccValue.getClass().isArray()) {
        messageRef[0].setBcc((String[])bccValue);
      }
    }
  }
 else {
    Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
    List<String> authorities=null;
    if (authoritiesValue != null) {
      if (authoritiesValue instanceof String) {
        authorities=new ArrayList<String>(1);
        authorities.add((String)authoritiesValue);
      }
 else {
        authorities=(List<String>)authoritiesValue;
      }
    }
    if (authorities != null && authorities.size() != 0) {
      List<String> recipients=new ArrayList<String>(authorities.size());
      if (logger.isTraceEnabled()) {
        logger.trace(authorities.size() + ""String_Node_Str"");
      }
      for (      String authority : authorities) {
        final AuthorityType authType=AuthorityType.getAuthorityType(authority);
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + authType);
        }
        if (authType.equals(AuthorityType.USER)) {
          if (personService.personExists(authority) == true) {
            NodeRef person=personService.getPerson(authority);
            if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
              continue;
            }
            String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
            if (address != null && address.length() != 0 && validateAddress(address)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              recipients.add(address);
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(authority);
              }
            }
          }
 else {
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"");
            }
            if (validateAddress(authority)) {
              recipients.add(authority);
            }
          }
        }
 else         if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
          if (logger.isTraceEnabled()) {
            logger.trace(""String_Node_Str"");
          }
          Set<String> users;
          if (authType.equals(AuthorityType.GROUP)) {
            users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
          }
 else {
            users=authorityService.getAllAuthorities(AuthorityType.USER);
          }
          for (          String userAuth : users) {
            if (personService.personExists(userAuth) == true) {
              if (!personService.isEnabled(userAuth)) {
                continue;
              }
              NodeRef person=personService.getPerson(userAuth);
              String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
              if (address != null && address.length() != 0) {
                recipients.add(address);
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(userAuth);
                }
              }
            }
 else {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              if (validateAddress(authority)) {
                recipients.add(userAuth);
              }
            }
          }
        }
      }
      if (logger.isTraceEnabled()) {
        logger.trace(recipients.size() + ""String_Node_Str"");
      }
      if (recipients.size() > 0) {
        messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
        toRecipients=String.join(""String_Node_Str"",recipients);
      }
 else {
        throw new MailPreparationException(""String_Node_Str"");
      }
    }
 else {
      throw new MailPreparationException(""String_Node_Str"");
    }
  }
  NodeRef fromPerson=null;
  final String currentUserName=authService.getCurrentUserName();
  final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
  if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
    fromPerson=personService.getPerson(currentUserName);
  }
  if (isFromEnabled()) {
    String from=(String)ruleAction.getParameterValue(PARAM_FROM);
    if (from != null && from.length() > 0) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + from);
      }
      String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
      if (fromPersonalName != null && fromPersonalName.length() > 0) {
        try {
          messageRef[0].setFrom(from,fromPersonalName);
        }
 catch (        UnsupportedEncodingException error) {
          messageRef[0].setFrom(from);
        }
      }
 else {
        messageRef[0].setFrom(from);
      }
    }
 else {
      String fromActualUser=null;
      if (fromPerson != null) {
        fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
      }
      if (fromActualUser != null && fromActualUser.length() != 0) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
        }
        messageRef[0].setFrom(fromActualUser);
      }
 else {
        messageRef[0].setFrom(fromDefaultAddress);
      }
    }
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + fromDefaultAddress);
    }
    messageRef[0].setFrom(fromDefaultAddress);
  }
  messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
  if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
    messageRef[0].setTo(testModeRecipient);
    String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
    if (emailRecipient == null) {
      Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
      if (obj != null) {
        emailRecipient=obj.toString();
      }
    }
    String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
    messageRef[0].setSubject(recipientPrefixedSubject);
  }
  String text=null;
  Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
  String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
  if (templateRef != null) {
    Map<String,Object> suppliedModel=null;
    if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
      Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
      if (m instanceof Map) {
        suppliedModel=(Map<String,Object>)m;
      }
 else {
        logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
      }
    }
    Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
    Locale locale=recipient.getSecond();
    if (locale == null) {
      locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
    }
    if (locale == null) {
      locale=sender.getSecond();
    }
    String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
    Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
    Object[] subjectParams=null;
    if (subjectParamsObject instanceof List) {
      subjectParams=((List<Object>)subjectParamsObject).toArray();
    }
 else     if (subjectParamsObject instanceof Object[]) {
      subjectParams=(Object[])subjectParamsObject;
    }
 else {
      if (subjectParamsObject != null) {
        subjectParams=new Object[]{subjectParamsObject.toString()};
      }
    }
    String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
    if (locale == null) {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
    }
 else {
      text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
    }
    if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
      messageRef[0].setTo(testModeRecipient);
      String emailRecipient=recipient.getFirst();
      String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
      messageRef[0].setSubject(recipientPrefixedSubject);
    }
 else {
      messageRef[0].setTo(recipient.getFirst());
      messageRef[0].setSubject(localizedSubject);
    }
  }
  boolean isHTML=false;
  if (text == null) {
    text=(String)ruleAction.getParameterValue(PARAM_TEXT);
  }
  if (text != null) {
    if (isHTML(text)) {
      isHTML=true;
    }
  }
 else {
    text=(String)ruleAction.getParameterValue(PARAM_HTML);
    if (text != null) {
      isHTML=true;
    }
  }
  if (text != null) {
    messageRef[0].setText(text,isHTML);
  }
}",0.9952148664343786
172022,"public MimeMessageHelper prepareEmail(final Action ruleAction,final NodeRef actionedUponNodeRef,final Pair<String,Locale> recipient,final Pair<InternetAddress,Locale> sender){
  final MimeMessageHelper[] messageRef=new MimeMessageHelper[1];
  MimeMessagePreparator mailPreparer=new MimeMessagePreparator(){
    @SuppressWarnings(""String_Node_Str"") public void prepare(    MimeMessage mimeMessage) throws MessagingException {
      if (logger.isDebugEnabled()) {
        logger.debug(ruleAction.getParameterValues());
      }
      messageRef[0]=new MimeMessageHelper(mimeMessage);
      if (headerEncoding != null && headerEncoding.length() != 0) {
        mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
      }
      String to=(String)ruleAction.getParameterValue(PARAM_TO);
      String toRecipients=null;
      if (to != null && to.length() != 0) {
        messageRef[0].setTo(to);
        toRecipients=to;
        Serializable ccValue=(String)ruleAction.getParameterValue(PARAM_CC);
        if (ccValue != null) {
          if (ccValue instanceof String) {
            String cc=(String)ccValue;
            if (cc.length() > 0) {
              messageRef[0].setCc(cc);
            }
          }
 else           if (ccValue instanceof List<?>) {
            List<String> s=(List<String>)ccValue;
            messageRef[0].setCc((String[])s.toArray());
          }
 else           if (ccValue.getClass().isArray()) {
            messageRef[0].setCc((String[])ccValue);
          }
        }
        Serializable bccValue=(String)ruleAction.getParameterValue(PARAM_BCC);
        if (bccValue != null) {
          if (bccValue instanceof String) {
            String bcc=(String)bccValue;
            if (bcc.length() > 0) {
              messageRef[0].setBcc(bcc);
            }
          }
 else           if (bccValue instanceof List<?>) {
            List<String> s=(List<String>)bccValue;
            messageRef[0].setBcc((String[])s.toArray());
          }
 else           if (bccValue.getClass().isArray()) {
            messageRef[0].setCc((String[])bccValue);
          }
        }
      }
 else {
        Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
        List<String> authorities=null;
        if (authoritiesValue != null) {
          if (authoritiesValue instanceof String) {
            authorities=new ArrayList<String>(1);
            authorities.add((String)authoritiesValue);
          }
 else {
            authorities=(List<String>)authoritiesValue;
          }
        }
        if (authorities != null && authorities.size() != 0) {
          List<String> recipients=new ArrayList<String>(authorities.size());
          if (logger.isTraceEnabled()) {
            logger.trace(authorities.size() + ""String_Node_Str"");
          }
          for (          String authority : authorities) {
            final AuthorityType authType=AuthorityType.getAuthorityType(authority);
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"" + authType);
            }
            if (authType.equals(AuthorityType.USER)) {
              if (personService.personExists(authority) == true) {
                NodeRef person=personService.getPerson(authority);
                if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
                  continue;
                }
                String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                if (address != null && address.length() != 0 && validateAddress(address)) {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  recipients.add(address);
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(authority);
                  }
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(authority);
                }
              }
            }
 else             if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              Set<String> users;
              if (authType.equals(AuthorityType.GROUP)) {
                users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
              }
 else {
                users=authorityService.getAllAuthorities(AuthorityType.USER);
              }
              for (              String userAuth : users) {
                if (personService.personExists(userAuth) == true) {
                  if (!personService.isEnabled(userAuth)) {
                    continue;
                  }
                  NodeRef person=personService.getPerson(userAuth);
                  String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                  if (address != null && address.length() != 0) {
                    recipients.add(address);
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                  }
 else {
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                    if (validateAddress(authority)) {
                      recipients.add(userAuth);
                    }
                  }
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(userAuth);
                  }
                }
              }
            }
          }
          if (logger.isTraceEnabled()) {
            logger.trace(recipients.size() + ""String_Node_Str"");
          }
          if (recipients.size() > 0) {
            messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
            toRecipients=String.join(""String_Node_Str"",recipients);
          }
 else {
            throw new MailPreparationException(""String_Node_Str"");
          }
        }
 else {
          throw new MailPreparationException(""String_Node_Str"");
        }
      }
      NodeRef fromPerson=null;
      final String currentUserName=authService.getCurrentUserName();
      final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
      if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
        fromPerson=personService.getPerson(currentUserName);
      }
      if (isFromEnabled()) {
        String from=(String)ruleAction.getParameterValue(PARAM_FROM);
        if (from != null && from.length() > 0) {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + from);
          }
          String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
          if (fromPersonalName != null && fromPersonalName.length() > 0) {
            try {
              messageRef[0].setFrom(from,fromPersonalName);
            }
 catch (            UnsupportedEncodingException error) {
              messageRef[0].setFrom(from);
            }
          }
 else {
            messageRef[0].setFrom(from);
          }
        }
 else {
          String fromActualUser=null;
          if (fromPerson != null) {
            fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
          }
          if (fromActualUser != null && fromActualUser.length() != 0) {
            if (logger.isDebugEnabled()) {
              logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
            }
            messageRef[0].setFrom(fromActualUser);
          }
 else {
            messageRef[0].setFrom(fromDefaultAddress);
          }
        }
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromDefaultAddress);
        }
        messageRef[0].setFrom(fromDefaultAddress);
      }
      messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
      if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
        messageRef[0].setTo(testModeRecipient);
        String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
        if (emailRecipient == null) {
          Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
          if (obj != null) {
            emailRecipient=obj.toString();
          }
        }
        String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
        messageRef[0].setSubject(recipientPrefixedSubject);
      }
      String text=null;
      Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
      String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
      if (templateRef != null) {
        Map<String,Object> suppliedModel=null;
        if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
          Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
          if (m instanceof Map) {
            suppliedModel=(Map<String,Object>)m;
          }
 else {
            logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
          }
        }
        Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
        Locale locale=recipient.getSecond();
        if (locale == null) {
          locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
        }
        if (locale == null) {
          locale=sender.getSecond();
        }
        String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
        Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
        Object[] subjectParams=null;
        if (subjectParamsObject instanceof List) {
          subjectParams=((List<Object>)subjectParamsObject).toArray();
        }
 else         if (subjectParamsObject instanceof Object[]) {
          subjectParams=(Object[])subjectParamsObject;
        }
 else {
          if (subjectParamsObject != null) {
            subjectParams=new Object[]{subjectParamsObject.toString()};
          }
        }
        String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
        if (locale == null) {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
        }
 else {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
        }
        if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
          messageRef[0].setTo(testModeRecipient);
          String emailRecipient=recipient.getFirst();
          String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
          messageRef[0].setSubject(recipientPrefixedSubject);
        }
 else {
          messageRef[0].setTo(recipient.getFirst());
          messageRef[0].setSubject(localizedSubject);
        }
      }
      boolean isHTML=false;
      if (text == null) {
        text=(String)ruleAction.getParameterValue(PARAM_TEXT);
      }
      if (text != null) {
        if (isHTML(text)) {
          isHTML=true;
        }
      }
 else {
        text=(String)ruleAction.getParameterValue(PARAM_HTML);
        if (text != null) {
          isHTML=true;
        }
      }
      if (text != null) {
        messageRef[0].setText(text,isHTML);
      }
    }
  }
;
  MimeMessage mimeMessage=mailService.createMimeMessage();
  try {
    mailPreparer.prepare(mimeMessage);
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",e);
    }
    return null;
  }
  return messageRef[0];
}","public MimeMessageHelper prepareEmail(final Action ruleAction,final NodeRef actionedUponNodeRef,final Pair<String,Locale> recipient,final Pair<InternetAddress,Locale> sender){
  final MimeMessageHelper[] messageRef=new MimeMessageHelper[1];
  MimeMessagePreparator mailPreparer=new MimeMessagePreparator(){
    @SuppressWarnings(""String_Node_Str"") public void prepare(    MimeMessage mimeMessage) throws MessagingException {
      if (logger.isDebugEnabled()) {
        logger.debug(ruleAction.getParameterValues());
      }
      messageRef[0]=new MimeMessageHelper(mimeMessage);
      if (headerEncoding != null && headerEncoding.length() != 0) {
        mimeMessage.setHeader(""String_Node_Str"",headerEncoding);
      }
      String to=(String)ruleAction.getParameterValue(PARAM_TO);
      String toRecipients=null;
      if (to != null && to.length() != 0) {
        messageRef[0].setTo(to);
        toRecipients=to;
        Serializable ccValue=(Serializable)ruleAction.getParameterValue(PARAM_CC);
        if (ccValue != null) {
          if (ccValue instanceof String) {
            String cc=(String)ccValue;
            if (cc.length() > 0) {
              messageRef[0].setCc(cc);
            }
          }
 else           if (ccValue instanceof List<?>) {
            List<String> s=(List<String>)ccValue;
            messageRef[0].setCc(s.toArray(new String[s.size()]));
          }
 else           if (ccValue.getClass().isArray()) {
            messageRef[0].setCc((String[])ccValue);
          }
        }
        Serializable bccValue=(Serializable)ruleAction.getParameterValue(PARAM_BCC);
        if (bccValue != null) {
          if (bccValue instanceof String) {
            String bcc=(String)bccValue;
            if (bcc.length() > 0) {
              messageRef[0].setBcc(bcc);
            }
          }
 else           if (bccValue instanceof List<?>) {
            List<String> s=(List<String>)bccValue;
            messageRef[0].setBcc(s.toArray(new String[s.size()]));
          }
 else           if (bccValue.getClass().isArray()) {
            messageRef[0].setBcc((String[])bccValue);
          }
        }
      }
 else {
        Serializable authoritiesValue=ruleAction.getParameterValue(PARAM_TO_MANY);
        List<String> authorities=null;
        if (authoritiesValue != null) {
          if (authoritiesValue instanceof String) {
            authorities=new ArrayList<String>(1);
            authorities.add((String)authoritiesValue);
          }
 else {
            authorities=(List<String>)authoritiesValue;
          }
        }
        if (authorities != null && authorities.size() != 0) {
          List<String> recipients=new ArrayList<String>(authorities.size());
          if (logger.isTraceEnabled()) {
            logger.trace(authorities.size() + ""String_Node_Str"");
          }
          for (          String authority : authorities) {
            final AuthorityType authType=AuthorityType.getAuthorityType(authority);
            if (logger.isTraceEnabled()) {
              logger.trace(""String_Node_Str"" + authType);
            }
            if (authType.equals(AuthorityType.USER)) {
              if (personService.personExists(authority) == true) {
                NodeRef person=personService.getPerson(authority);
                if (!personService.isEnabled(authority) && !nodeService.hasAspect(person,ContentModel.ASPECT_ANULLABLE)) {
                  continue;
                }
                String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                if (address != null && address.length() != 0 && validateAddress(address)) {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  recipients.add(address);
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(authority);
                  }
                }
              }
 else {
                if (logger.isTraceEnabled()) {
                  logger.trace(""String_Node_Str"");
                }
                if (validateAddress(authority)) {
                  recipients.add(authority);
                }
              }
            }
 else             if (authType.equals(AuthorityType.GROUP) || authType.equals(AuthorityType.EVERYONE)) {
              if (logger.isTraceEnabled()) {
                logger.trace(""String_Node_Str"");
              }
              Set<String> users;
              if (authType.equals(AuthorityType.GROUP)) {
                users=authorityService.getContainedAuthorities(AuthorityType.USER,authority,false);
              }
 else {
                users=authorityService.getAllAuthorities(AuthorityType.USER);
              }
              for (              String userAuth : users) {
                if (personService.personExists(userAuth) == true) {
                  if (!personService.isEnabled(userAuth)) {
                    continue;
                  }
                  NodeRef person=personService.getPerson(userAuth);
                  String address=(String)nodeService.getProperty(person,ContentModel.PROP_EMAIL);
                  if (address != null && address.length() != 0) {
                    recipients.add(address);
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                  }
 else {
                    if (logger.isTraceEnabled()) {
                      logger.trace(""String_Node_Str"");
                    }
                    if (validateAddress(authority)) {
                      recipients.add(userAuth);
                    }
                  }
                }
 else {
                  if (logger.isTraceEnabled()) {
                    logger.trace(""String_Node_Str"");
                  }
                  if (validateAddress(authority)) {
                    recipients.add(userAuth);
                  }
                }
              }
            }
          }
          if (logger.isTraceEnabled()) {
            logger.trace(recipients.size() + ""String_Node_Str"");
          }
          if (recipients.size() > 0) {
            messageRef[0].setTo(recipients.toArray(new String[recipients.size()]));
            toRecipients=String.join(""String_Node_Str"",recipients);
          }
 else {
            throw new MailPreparationException(""String_Node_Str"");
          }
        }
 else {
          throw new MailPreparationException(""String_Node_Str"");
        }
      }
      NodeRef fromPerson=null;
      final String currentUserName=authService.getCurrentUserName();
      final List<String> usersNotToBeUsedInFromField=Arrays.asList(new String[]{AuthenticationUtil.getSystemUserName(),AuthenticationUtil.getGuestUserName()});
      if (!usersNotToBeUsedInFromField.contains(currentUserName)) {
        fromPerson=personService.getPerson(currentUserName);
      }
      if (isFromEnabled()) {
        String from=(String)ruleAction.getParameterValue(PARAM_FROM);
        if (from != null && from.length() > 0) {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + from);
          }
          String fromPersonalName=(String)ruleAction.getParameterValue(PARAM_FROM_PERSONAL_NAME);
          if (fromPersonalName != null && fromPersonalName.length() > 0) {
            try {
              messageRef[0].setFrom(from,fromPersonalName);
            }
 catch (            UnsupportedEncodingException error) {
              messageRef[0].setFrom(from);
            }
          }
 else {
            messageRef[0].setFrom(from);
          }
        }
 else {
          String fromActualUser=null;
          if (fromPerson != null) {
            fromActualUser=(String)nodeService.getProperty(fromPerson,ContentModel.PROP_EMAIL);
          }
          if (fromActualUser != null && fromActualUser.length() != 0) {
            if (logger.isDebugEnabled()) {
              logger.debug(""String_Node_Str"" + fromPerson + ""String_Node_Str""+ fromActualUser);
            }
            messageRef[0].setFrom(fromActualUser);
          }
 else {
            messageRef[0].setFrom(fromDefaultAddress);
          }
        }
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + fromDefaultAddress);
        }
        messageRef[0].setFrom(fromDefaultAddress);
      }
      messageRef[0].setSubject((String)ruleAction.getParameterValue(PARAM_SUBJECT));
      if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
        messageRef[0].setTo(testModeRecipient);
        String emailRecipient=(String)ruleAction.getParameterValue(PARAM_TO);
        if (emailRecipient == null) {
          Object obj=ruleAction.getParameterValue(PARAM_TO_MANY);
          if (obj != null) {
            emailRecipient=obj.toString();
          }
        }
        String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ (String)ruleAction.getParameterValue(PARAM_SUBJECT);
        messageRef[0].setSubject(recipientPrefixedSubject);
      }
      String text=null;
      Serializable ref=ruleAction.getParameterValue(PARAM_TEMPLATE);
      String templateRef=(ref instanceof NodeRef ? ((NodeRef)ref).toString() : (String)ref);
      if (templateRef != null) {
        Map<String,Object> suppliedModel=null;
        if (ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL) != null) {
          Object m=ruleAction.getParameterValue(PARAM_TEMPLATE_MODEL);
          if (m instanceof Map) {
            suppliedModel=(Map<String,Object>)m;
          }
 else {
            logger.warn(""String_Node_Str"" + m.getClass().getName() + ""String_Node_Str""+ m.toString());
          }
        }
        Map<String,Object> model=createEmailTemplateModel(actionedUponNodeRef,suppliedModel,fromPerson,toRecipients);
        Locale locale=recipient.getSecond();
        if (locale == null) {
          locale=(Locale)ruleAction.getParameterValue(PARAM_LOCALE);
        }
        if (locale == null) {
          locale=sender.getSecond();
        }
        String subject=(String)ruleAction.getParameterValue(PARAM_SUBJECT);
        Object subjectParamsObject=ruleAction.getParameterValue(PARAM_SUBJECT_PARAMS);
        Object[] subjectParams=null;
        if (subjectParamsObject instanceof List) {
          subjectParams=((List<Object>)subjectParamsObject).toArray();
        }
 else         if (subjectParamsObject instanceof Object[]) {
          subjectParams=(Object[])subjectParamsObject;
        }
 else {
          if (subjectParamsObject != null) {
            subjectParams=new Object[]{subjectParamsObject.toString()};
          }
        }
        String localizedSubject=getLocalizedSubject(subject,subjectParams,locale);
        if (locale == null) {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model);
        }
 else {
          text=templateService.processTemplate(""String_Node_Str"",templateRef,model,locale);
        }
        if ((testModeRecipient != null) && (testModeRecipient.length() > 0) && (!testModeRecipient.equals(""String_Node_Str""))) {
          messageRef[0].setTo(testModeRecipient);
          String emailRecipient=recipient.getFirst();
          String recipientPrefixedSubject=""String_Node_Str"" + emailRecipient + ""String_Node_Str""+ localizedSubject;
          messageRef[0].setSubject(recipientPrefixedSubject);
        }
 else {
          messageRef[0].setTo(recipient.getFirst());
          messageRef[0].setSubject(localizedSubject);
        }
      }
      boolean isHTML=false;
      if (text == null) {
        text=(String)ruleAction.getParameterValue(PARAM_TEXT);
      }
      if (text != null) {
        if (isHTML(text)) {
          isHTML=true;
        }
      }
 else {
        text=(String)ruleAction.getParameterValue(PARAM_HTML);
        if (text != null) {
          isHTML=true;
        }
      }
      if (text != null) {
        messageRef[0].setText(text,isHTML);
      }
    }
  }
;
  MimeMessage mimeMessage=mailService.createMimeMessage();
  try {
    mailPreparer.prepare(mimeMessage);
  }
 catch (  Exception e) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",e);
    }
    return null;
  }
  return messageRef[0];
}",0.9958606277378128
172023,"/** 
 * Test for CC / BCC 
 * @throws Exception 
 */
@Test public void testSendingToCarbonCopy() throws IOException, MessagingException {
  Action mailAction=ACTION_SERVICE.createAction(MailActionExecuter.NAME);
  mailAction.setParameterValue(MailActionExecuter.PARAM_FROM,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TO,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_CC,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_SUBJECT,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE_MODEL,(Serializable)getModel());
  ACTION_SERVICE.executeAction(mailAction,null);
  MimeMessage message=ACTION_EXECUTER.retrieveLastTestMessage();
  Assert.assertNotNull(message);
  Address[] all=message.getAllRecipients();
  Address[] ccs=message.getRecipients(RecipientType.CC);
  Assert.assertEquals(""String_Node_Str"",2,all.length);
  Assert.assertEquals(""String_Node_Str"",1,ccs.length);
  Assert.assertTrue(ccs[0].toString().contains(""String_Node_Str""));
}","/** 
 * Test for CC / BCC 
 * @throws Exception 
 */
@Test public void testSendingToCarbonCopy() throws IOException, MessagingException {
  Action mailAction=ACTION_SERVICE.createAction(MailActionExecuter.NAME);
  mailAction.setParameterValue(MailActionExecuter.PARAM_FROM,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TO,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_CC,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_BCC,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_SUBJECT,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE,""String_Node_Str"");
  mailAction.setParameterValue(MailActionExecuter.PARAM_TEMPLATE_MODEL,(Serializable)getModel());
  ACTION_SERVICE.executeAction(mailAction,null);
  MimeMessage message=ACTION_EXECUTER.retrieveLastTestMessage();
  Assert.assertNotNull(message);
  Address[] all=message.getAllRecipients();
  Address[] ccs=message.getRecipients(RecipientType.CC);
  Address[] bccs=message.getRecipients(RecipientType.BCC);
  Assert.assertEquals(3,all.length);
  Assert.assertEquals(1,ccs.length);
  Assert.assertEquals(1,bccs.length);
  Assert.assertTrue(ccs[0].toString().contains(""String_Node_Str""));
  Assert.assertTrue(bccs[0].toString().contains(""String_Node_Str""));
}",0.8864
172024,"/** 
 * Register data collector with this service and start the schedule. The registered collector will be called to provide heartbeat data at the scheduled interval. Each collector registered via this method must have a unique collector id.
 * @param collector collector to register
 */
@Override public void registerCollector(final HBBaseDataCollector collector){
  if (collector.getCollectorId() == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  for (  HBBaseDataCollector col : collectors) {
    if (collector.getCollectorId().equals(col.getCollectorId())) {
      logger.error(""String_Node_Str"" + collector.getCollectorId());
      return;
    }
  }
  try {
    scheduleCollector(collector);
    collectors.add(collector);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collectorInfo(collector));
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + collectorInfo(collector),e);
  }
}","/** 
 * Register data collector with this service and start the schedule. The registered collector will be called to provide heartbeat data at the scheduled interval. Each collector registered via this method must have a unique collector id.
 * @param collector collector to register
 */
@Override public void registerCollector(final HBBaseDataCollector collector){
  for (  HBBaseDataCollector col : collectors) {
    if (collector.getCollectorId().equals(col.getCollectorId())) {
      throw new IllegalArgumentException(""String_Node_Str"" + collector.getCollectorId());
    }
  }
  try {
    scheduleCollector(collector);
    collectors.add(collector);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collectorInfo(collector));
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + collectorInfo(collector),e);
  }
}",0.8932676518883416
172025,"private void collectAndSendDataLocked(final HBBaseDataCollector collector,final HBDataSenderService hbDataSenderService) throws JobExecutionException {
  try {
    List<HBData> data=collector.collectData();
    hbDataSenderService.sendData(data);
  }
 catch (  final Exception e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collector.getCollectorId(),e);
    }
  }
}","private void collectAndSendDataLocked(final HBBaseDataCollector collector,final HBDataSenderService hbDataSenderService) throws JobExecutionException {
  try {
    List<HBData> data=collector.collectData();
    hbDataSenderService.sendData(data);
  }
 catch (  final Exception e) {
    logger.error(""String_Node_Str"" + collector.getCollectorId(),e);
  }
}",0.9296148738379814
172026,"public void execute(final JobExecutionContext jobexecutioncontext) throws JobExecutionException {
  final JobDataMap dataMap=jobexecutioncontext.getJobDetail().getJobDataMap();
  final HBBaseDataCollector collector=(HBBaseDataCollector)dataMap.get(COLLECTOR_KEY);
  final HBDataSenderService hbDataSenderService=(HBDataSenderService)dataMap.get(DATA_SENDER_SERVICE_KEY);
  final JobLockService jobLockService=(JobLockService)dataMap.get(JOB_LOCK_SERVICE_KEY);
  if (collector == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    return;
  }
  if (hbDataSenderService == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    return;
  }
  if (jobLockService == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    return;
  }
  QName qName=QName.createQName(NamespaceService.SYSTEM_MODEL_1_0_URI,collector.getCollectorId());
  String lockToken=null;
  LockCallback lockCallback=new LockCallback(qName);
  try {
    lockToken=acquireLock(lockCallback,qName,jobLockService);
    collectAndSendDataLocked(collector,hbDataSenderService);
    try {
      Thread.sleep(LOCK_TTL_OFFSET);
    }
 catch (    InterruptedException e) {
    }
  }
 catch (  LockAcquisitionException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
  }
 finally {
    releaseLock(lockCallback,lockToken,qName,jobLockService);
  }
}","public void execute(final JobExecutionContext jobexecutioncontext) throws JobExecutionException {
  final JobDataMap dataMap=jobexecutioncontext.getJobDetail().getJobDataMap();
  final HBBaseDataCollector collector=(HBBaseDataCollector)dataMap.get(COLLECTOR_KEY);
  final HBDataSenderService hbDataSenderService=(HBDataSenderService)dataMap.get(DATA_SENDER_SERVICE_KEY);
  final JobLockService jobLockService=(JobLockService)dataMap.get(JOB_LOCK_SERVICE_KEY);
  if (collector == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  if (hbDataSenderService == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  if (jobLockService == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  QName qName=QName.createQName(NamespaceService.SYSTEM_MODEL_1_0_URI,collector.getCollectorId());
  String lockToken=null;
  LockCallback lockCallback=new LockCallback(qName);
  try {
    lockToken=acquireLock(lockCallback,qName,jobLockService);
    collectAndSendDataLocked(collector,hbDataSenderService);
  }
 catch (  LockAcquisitionException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
  }
 finally {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collector.getCollectorId());
    }
    lockCallback.running.set(false);
  }
}",0.8236973590292648
172027,"/** 
 * Test scheduling job for collector with invalid cron expression
 */
@Test public void testInvalidCronExpression() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  SimpleHBDataCollector c1=new SimpleHBDataCollector(""String_Node_Str"",VALID_CRON);
  collectorService.registerCollector(c1);
  SimpleHBDataCollector c2=new SimpleHBDataCollector(""String_Node_Str"",INVALID_CRON);
  collectorService.registerCollector(c2);
  assertTrue(isJobScheduledForCollector(c1.getCollectorId(),scheduler));
  assertFalse(isJobScheduledForCollector(c2.getCollectorId(),scheduler));
}","/** 
 * Test scheduling job for collector with invalid cron expression
 */
@Test(expected=RuntimeException.class) public void testInvalidCronExpression() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  SimpleHBDataCollector c2=new SimpleHBDataCollector(""String_Node_Str"",INVALID_CRON);
  collectorService.registerCollector(c2);
}",0.7248201438848921
172028,"@Test public void testRegisterSameCollectorTwice() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  HBBaseDataCollector c1=new SimpleHBDataCollector(""String_Node_Str"",VALID_CRON);
  collectorService.registerCollector(c1);
  collectorService.registerCollector(c1);
  assertEquals(""String_Node_Str"",1,scheduler.getJobNames(Scheduler.DEFAULT_GROUP).length);
}","@Test(expected=IllegalArgumentException.class) public void testRegisterSameCollectorTwice() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  HBBaseDataCollector c1=new SimpleHBDataCollector(""String_Node_Str"",VALID_CRON);
  collectorService.registerCollector(c1);
  collectorService.registerCollector(c1);
}",0.8489702517162472
172029,"@Test public void testJobInClusterNotLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(6000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(2)).collectData();
  verify(mockDataSenderService,Mockito.times(2)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(2)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
  verify(mockJobLockService,Mockito.times(2)).releaseLock(eq(lockToken),any(QName.class));
}","@Test public void testJobInClusterNotLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(6000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(2)).collectData();
  verify(mockDataSenderService,Mockito.times(2)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(2)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
}",0.9749793786087436
172030,"@Test public void testJobInClusterLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(1000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(1)).collectData();
  verify(mockDataSenderService,Mockito.times(1)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(1)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
  verify(mockJobLockService,Mockito.times(1)).releaseLock(eq(lockToken),any(QName.class));
}","@Test public void testJobInClusterLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(1000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(1)).collectData();
  verify(mockDataSenderService,Mockito.times(1)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(1)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
}",0.9749380335995592
172031,"/** 
 * Register data collector with this service and start the schedule. The registered collector will be called to provide heartbeat data at the scheduled interval. Each collector registered via this method must have a unique collector id.
 * @param collector collector to register
 */
@Override public void registerCollector(final HBBaseDataCollector collector){
  if (collector.getCollectorId() == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  for (  HBBaseDataCollector col : collectors) {
    if (collector.getCollectorId().equals(col.getCollectorId())) {
      logger.error(""String_Node_Str"" + collector.getCollectorId());
      return;
    }
  }
  try {
    scheduleCollector(collector);
    collectors.add(collector);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collectorInfo(collector));
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + collectorInfo(collector),e);
  }
}","/** 
 * Register data collector with this service and start the schedule. The registered collector will be called to provide heartbeat data at the scheduled interval. Each collector registered via this method must have a unique collector id.
 * @param collector collector to register
 */
@Override public void registerCollector(final HBBaseDataCollector collector){
  for (  HBBaseDataCollector col : collectors) {
    if (collector.getCollectorId().equals(col.getCollectorId())) {
      throw new IllegalArgumentException(""String_Node_Str"" + collector.getCollectorId());
    }
  }
  try {
    scheduleCollector(collector);
    collectors.add(collector);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collectorInfo(collector));
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + collectorInfo(collector),e);
  }
}",0.8932676518883416
172032,"private void collectAndSendDataLocked(final HBBaseDataCollector collector,final HBDataSenderService hbDataSenderService) throws JobExecutionException {
  try {
    List<HBData> data=collector.collectData();
    hbDataSenderService.sendData(data);
  }
 catch (  final Exception e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collector.getCollectorId(),e);
    }
  }
}","private void collectAndSendDataLocked(final HBBaseDataCollector collector,final HBDataSenderService hbDataSenderService) throws JobExecutionException {
  try {
    List<HBData> data=collector.collectData();
    hbDataSenderService.sendData(data);
  }
 catch (  final Exception e) {
    logger.error(""String_Node_Str"" + collector.getCollectorId(),e);
  }
}",0.9296148738379814
172033,"public void execute(final JobExecutionContext jobexecutioncontext) throws JobExecutionException {
  final JobDataMap dataMap=jobexecutioncontext.getJobDetail().getJobDataMap();
  final HBBaseDataCollector collector=(HBBaseDataCollector)dataMap.get(COLLECTOR_KEY);
  final HBDataSenderService hbDataSenderService=(HBDataSenderService)dataMap.get(DATA_SENDER_SERVICE_KEY);
  final JobLockService jobLockService=(JobLockService)dataMap.get(JOB_LOCK_SERVICE_KEY);
  if (collector == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    return;
  }
  if (hbDataSenderService == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    return;
  }
  if (jobLockService == null) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"");
    }
    return;
  }
  QName qName=QName.createQName(NamespaceService.SYSTEM_MODEL_1_0_URI,collector.getCollectorId());
  String lockToken=null;
  LockCallback lockCallback=new LockCallback(qName);
  try {
    lockToken=acquireLock(lockCallback,qName,jobLockService);
    collectAndSendDataLocked(collector,hbDataSenderService);
    try {
      Thread.sleep(LOCK_TTL_OFFSET);
    }
 catch (    InterruptedException e) {
    }
  }
 catch (  LockAcquisitionException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
  }
 finally {
    releaseLock(lockCallback,lockToken,qName,jobLockService);
  }
}","public void execute(final JobExecutionContext jobexecutioncontext) throws JobExecutionException {
  final JobDataMap dataMap=jobexecutioncontext.getJobDetail().getJobDataMap();
  final HBBaseDataCollector collector=(HBBaseDataCollector)dataMap.get(COLLECTOR_KEY);
  final HBDataSenderService hbDataSenderService=(HBDataSenderService)dataMap.get(DATA_SENDER_SERVICE_KEY);
  final JobLockService jobLockService=(JobLockService)dataMap.get(JOB_LOCK_SERVICE_KEY);
  if (collector == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  if (hbDataSenderService == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  if (jobLockService == null) {
    logger.error(""String_Node_Str"");
    return;
  }
  QName qName=QName.createQName(NamespaceService.SYSTEM_MODEL_1_0_URI,collector.getCollectorId());
  String lockToken=null;
  LockCallback lockCallback=new LockCallback(qName);
  try {
    lockToken=acquireLock(lockCallback,qName,jobLockService);
    collectAndSendDataLocked(collector,hbDataSenderService);
  }
 catch (  LockAcquisitionException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + e.getMessage());
    }
  }
 finally {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + collector.getCollectorId());
    }
    lockCallback.running.set(false);
  }
}",0.8236973590292648
172034,"/** 
 * Test scheduling job for collector with invalid cron expression
 */
@Test public void testInvalidCronExpression() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  SimpleHBDataCollector c1=new SimpleHBDataCollector(""String_Node_Str"",VALID_CRON);
  collectorService.registerCollector(c1);
  SimpleHBDataCollector c2=new SimpleHBDataCollector(""String_Node_Str"",INVALID_CRON);
  collectorService.registerCollector(c2);
  assertTrue(isJobScheduledForCollector(c1.getCollectorId(),scheduler));
  assertFalse(isJobScheduledForCollector(c2.getCollectorId(),scheduler));
}","/** 
 * Test scheduling job for collector with invalid cron expression
 */
@Test(expected=RuntimeException.class) public void testInvalidCronExpression() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  SimpleHBDataCollector c2=new SimpleHBDataCollector(""String_Node_Str"",INVALID_CRON);
  collectorService.registerCollector(c2);
}",0.7248201438848921
172035,"@Test public void testRegisterSameCollectorTwice() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  HBBaseDataCollector c1=new SimpleHBDataCollector(""String_Node_Str"",VALID_CRON);
  collectorService.registerCollector(c1);
  collectorService.registerCollector(c1);
  assertEquals(""String_Node_Str"",1,scheduler.getJobNames(Scheduler.DEFAULT_GROUP).length);
}","@Test(expected=IllegalArgumentException.class) public void testRegisterSameCollectorTwice() throws Exception {
  final HBDataCollectorServiceImpl collectorService=new HBDataCollectorServiceImpl(true);
  collectorService.setScheduler(scheduler);
  HBBaseDataCollector c1=new SimpleHBDataCollector(""String_Node_Str"",VALID_CRON);
  collectorService.registerCollector(c1);
  collectorService.registerCollector(c1);
}",0.8489702517162472
172036,"@Test public void testJobInClusterNotLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(6000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(2)).collectData();
  verify(mockDataSenderService,Mockito.times(2)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(2)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
  verify(mockJobLockService,Mockito.times(2)).releaseLock(eq(lockToken),any(QName.class));
}","@Test public void testJobInClusterNotLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(6000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(2)).collectData();
  verify(mockDataSenderService,Mockito.times(2)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(2)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
}",0.9749793786087436
172037,"@Test public void testJobInClusterLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(1000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(1)).collectData();
  verify(mockDataSenderService,Mockito.times(1)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(1)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
  verify(mockJobLockService,Mockito.times(1)).releaseLock(eq(lockToken),any(QName.class));
}","@Test public void testJobInClusterLocked() throws Exception {
  JobExecutionContext mockJobExecutionContext=mock(JobExecutionContext.class);
  JobDetail jobDetail=new JobDetail();
  when(mockJobExecutionContext.getJobDetail()).thenReturn(jobDetail);
  SimpleHBDataCollector simpleCollector=spy(new SimpleHBDataCollector(""String_Node_Str""));
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(""String_Node_Str"",simpleCollector);
  jobDataMap.put(""String_Node_Str"",mockDataSenderService);
  jobDataMap.put(""String_Node_Str"",mockJobLockService);
  jobDetail.setJobDataMap(jobDataMap);
  String lockToken=""String_Node_Str"";
  Runnable r1=() -> {
    when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken).thenThrow(new LockAcquisitionException(""String_Node_Str"",""String_Node_Str""));
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
 finally {
      when(mockJobLockService.getLock(isA(QName.class),anyLong())).thenReturn(lockToken);
    }
  }
;
  Runnable r2=() -> {
    try {
      new HeartBeatJob().execute(mockJobExecutionContext);
    }
 catch (    JobExecutionException e) {
    }
  }
;
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  Thread.sleep(1000);
  t2.start();
  Thread.sleep(6000);
  verify(simpleCollector,Mockito.times(1)).collectData();
  verify(mockDataSenderService,Mockito.times(1)).sendData(any(List.class));
  verify(mockDataSenderService,Mockito.times(0)).sendData(any(HBData.class));
  verify(mockJobLockService,Mockito.times(2)).getLock(any(QName.class),anyLong());
  verify(mockJobLockService,Mockito.times(1)).refreshLock(eq(lockToken),any(QName.class),anyLong(),any(JobLockService.JobLockRefreshCallback.class));
}",0.9749380335995592
172038,"@Test public void alf18373Test(){
  long sourceSize=1024 * 1024 * 3 / 2;
  transformerDebug.pushAvailable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",options);
  transformerDebug.unavailableTransformer(transformer1,""String_Node_Str"",""String_Node_Str"",50);
  transformerDebug.unavailableTransformer(transformer2,""String_Node_Str"",""String_Node_Str"",0);
  transformerDebug.unavailableTransformer(transformer3,""String_Node_Str"",""String_Node_Str"",50);
  transformerDebug.unavailableTransformer(transformer4,""String_Node_Str"",""String_Node_Str"",50);
  List<ContentTransformer> transformers=Arrays.asList(new ContentTransformer[]{});
  transformerDebug.availableTransformers(transformers,sourceSize,options,""String_Node_Str"");
  transformerDebug.popAvailable();
  assertDebugEntriesEquals(new String[]{""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""},untimed(debug.getEntries(10)));
  assertLogEntriesEquals(new String[]{""String_Node_Str""},untimed(log.getEntries(10)));
}","@Test public void alf18373Test(){
  long sourceSize=1024 * 1024 * 3 / 2;
  transformerDebug.pushAvailable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",options);
  transformerDebug.unavailableTransformer(transformer1,""String_Node_Str"",""String_Node_Str"",50);
  transformerDebug.unavailableTransformer(transformer2,""String_Node_Str"",""String_Node_Str"",0);
  transformerDebug.unavailableTransformer(transformer3,""String_Node_Str"",""String_Node_Str"",50);
  transformerDebug.unavailableTransformer(transformer4,""String_Node_Str"",""String_Node_Str"",50);
  List<ContentTransformer> transformers=Arrays.asList(new ContentTransformer[]{});
  transformerDebug.availableTransformers(transformers,sourceSize,options,""String_Node_Str"");
  transformerDebug.popAvailable();
  assertDebugEntriesEquals(new String[]{""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""},unnumbered(untimed(debug.getEntries(10))));
  assertLogEntriesEquals(new String[]{""String_Node_Str""},unnumbered(untimed(log.getEntries(10))));
}",0.988593155893536
172039,"private String[] unnumbered(String actual[]){
  for (int i=actual.length - 1; i >= 0; i--) {
    StringJoiner sj=new StringJoiner(""String_Node_Str"");
    String[] bits=actual[i].split(""String_Node_Str"");
    for (    String bit : bits) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(bit);
      bit=m.replaceFirst(""String_Node_Str"");
      sj.add(bit);
    }
    actual[i]=sj.toString();
  }
  return actual;
}","private String[] unnumbered(String actual[]){
  for (int i=actual.length - 1; i >= 0; i--) {
    StringJoiner sj=new StringJoiner(System.lineSeparator());
    String[] bits=actual[i].split(System.lineSeparator());
    for (    String bit : bits) {
      Pattern p=Pattern.compile(""String_Node_Str"");
      Matcher m=p.matcher(bit);
      bit=m.replaceFirst(""String_Node_Str"");
      sj.add(bit);
    }
    actual[i]=sj.toString();
  }
  return actual;
}",0.5625
172040,"@Override public Set<String> getContainingAuthorities(AuthorityType type,String name,boolean immediate){
  if (!immediate && AuthorityType.getAuthorityType(name) == AuthorityType.USER) {
    Set<String> authorities=userAuthorityCache.get(name);
    if (authorities == null) {
      authorities=new TreeSet<String>();
      if (useBridgeTable) {
        listAuthoritiesByBridgeTable(authorities,name);
      }
 else {
        listAuthorities(null,name,authorities,true,true);
      }
      userAuthorityCache.put(name,Collections.unmodifiableSet(authorities));
    }
    if (type == null) {
      return authorities;
    }
    Set<String> filteredAuthorities=new TreeSet<String>();
    for (    String authority : authorities) {
      addAuthorityNameIfMatches(filteredAuthorities,authority,type);
    }
    return filteredAuthorities;
  }
 else {
    Set<String> authorities=new TreeSet<String>();
    listAuthorities(type,name,authorities,true,!immediate);
    return authorities;
  }
}","@Override public Set<String> getContainingAuthorities(AuthorityType type,String name,boolean immediate){
  if (!immediate && AuthorityType.getAuthorityType(name) == AuthorityType.USER) {
    Set<String> authorities=userAuthorityCache.get(name);
    if (authorities == null) {
      NodeRef personRef=getAuthorityOrNull(name);
      if (personRef == null) {
        return new TreeSet<String>();
      }
      name=(String)nodeService.getProperty(personRef,ContentModel.PROP_USERNAME);
      authorities=userAuthorityCache.get(name);
    }
    if (authorities == null) {
      authorities=new TreeSet<String>();
      if (useBridgeTable) {
        listAuthoritiesByBridgeTable(authorities,name);
      }
 else {
        listAuthorities(null,name,authorities,true,true);
      }
      userAuthorityCache.put(name,Collections.unmodifiableSet(authorities));
    }
    if (type == null) {
      return authorities;
    }
    Set<String> filteredAuthorities=new TreeSet<String>();
    for (    String authority : authorities) {
      addAuthorityNameIfMatches(filteredAuthorities,authority,type);
    }
    return filteredAuthorities;
  }
 else {
    Set<String> authorities=new TreeSet<String>();
    listAuthorities(type,name,authorities,true,!immediate);
    return authorities;
  }
}",0.8597883597883598
172041,"public void removeAuthority(String parentName,String childName,boolean cacheRefresh){
  NodeRef parentRef=getAuthorityOrNull(parentName);
  if (parentRef == null) {
    throw new UnknownAuthorityException(""String_Node_Str"" + parentName);
  }
  NodeRef childRef=getAuthorityOrNull(childName);
  if (childRef == null) {
    throw new UnknownAuthorityException(""String_Node_Str"" + childName);
  }
  nodeService.removeChild(parentRef,childRef);
  childAuthorityCache.remove(parentRef);
  if (AuthorityType.getAuthorityType(childName) == AuthorityType.USER) {
    userAuthorityCache.remove(childName);
  }
 else {
    userAuthorityCache.clear();
    if (cacheRefresh) {
      authorityBridgeTableCache.refresh();
    }
  }
}","public void removeAuthority(String parentName,String childName,boolean cacheRefresh){
  NodeRef parentRef=getAuthorityOrNull(parentName);
  if (parentRef == null) {
    throw new UnknownAuthorityException(""String_Node_Str"" + parentName);
  }
  NodeRef childRef=getAuthorityOrNull(childName);
  if (childRef == null) {
    throw new UnknownAuthorityException(""String_Node_Str"" + childName);
  }
  nodeService.removeChild(parentRef,childRef);
  childAuthorityCache.remove(parentRef);
  if (AuthorityType.getAuthorityType(childName) == AuthorityType.USER) {
    childName=(String)nodeService.getProperty(childRef,ContentModel.PROP_USERNAME);
    userAuthorityCache.remove(childName);
  }
 else {
    userAuthorityCache.clear();
    if (cacheRefresh) {
      authorityBridgeTableCache.refresh();
    }
  }
}",0.9448094612352168
172042,"/** 
 * Attempts to retrieve and parse an attribute in the supplied object to an integer. If the attribute cannot be found or cannot be parsed then the supplied default is returned.
 * @param attribute
 * @param defaultValue
 * @param sourceObject
 * @return
 */
public int getIntegerValue(String attribute,int defaultValue,Map<Serializable,Serializable> sourceObject){
  Integer integer=(Integer)sourceObject.get(attribute);
  if (integer == null) {
    integer=defaultValue;
  }
  return integer;
}","/** 
 * Attempts to retrieve and parse an attribute in the supplied object to an integer. If the attribute cannot be found or cannot be parsed then the supplied default is returned.
 * @param attribute
 * @param defaultValue
 * @param sourceObject
 * @return
 */
public int getIntegerValue(String attribute,int defaultValue,Map<Serializable,Serializable> sourceObject){
  int intValue=defaultValue;
  Number configuredInteger=(Number)sourceObject.get(attribute);
  if (configuredInteger != null) {
    intValue=configuredInteger.intValue();
  }
  return intValue;
}",0.831924882629108
172043,"/** 
 * Parse the platforms attribute returning the set of platform ids
 * @param platformStr String
 * @return EnumSet<PlatformType>
 */
protected final EnumSet<Platform.Type> parsePlatformString(String platformStr){
  EnumSet<Platform.Type> platformTypes=EnumSet.noneOf(Platform.Type.class);
  if (platformStr == null || platformStr.length() == 0)   return platformTypes;
  StringTokenizer token=new StringTokenizer(platformStr.toUpperCase(Locale.ENGLISH),""String_Node_Str"");
  String typ=null;
  try {
    while (token.hasMoreTokens()) {
      typ=token.nextToken().trim();
      Platform.Type platform=Platform.Type.valueOf(typ);
      if (platform != Platform.Type.Unknown)       platformTypes.add(platform);
 else       throw new AlfrescoRuntimeException(""String_Node_Str"" + typ);
    }
  }
 catch (  IllegalArgumentException ex) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + typ);
  }
  return platformTypes;
}","/** 
 * Parse the platforms attribute returning the set of platform ids
 * @param platformStr String
 */
protected final EnumSet<Platform.Type> parsePlatformString(String platformStr){
  EnumSet<Platform.Type> platformTypes=EnumSet.noneOf(Platform.Type.class);
  if (platformStr == null || platformStr.length() == 0)   return platformTypes;
  StringTokenizer token=new StringTokenizer(platformStr.toUpperCase(Locale.ENGLISH),""String_Node_Str"");
  String typ=null;
  try {
    while (token.hasMoreTokens()) {
      typ=token.nextToken().trim();
      Platform.Type platform=Platform.Type.valueOf(typ);
      if (platform != Platform.Type.Unknown)       platformTypes.add(platform);
 else       throw new AlfrescoRuntimeException(""String_Node_Str"" + typ);
    }
  }
 catch (  IllegalArgumentException ex) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + typ);
  }
  return platformTypes;
}",0.9819770617149098
172044,"/** 
 * Enumerate the action names
 * @return Enumeration<String>
 */
public final Enumeration<String> enumerateActionNames(){
  return m_actions.keys();
}","/** 
 * Enumerate the action names
 */
public final Enumeration<String> enumerateActionNames(){
  return m_actions.keys();
}",0.8888888888888888
172045,"/** 
 * Get the response value list
 * @return List<Object>
 */
public final List<Object> getResponseValues(){
  return m_responseValues;
}","/** 
 * Get the response value list
 */
public final List<Object> getResponseValues(){
  return m_responseValues;
}",0.905511811023622
172046,"/** 
 * Update properties event
 * @param nodeRef NodeRef
 * @param before Map<QName, Serializable>
 * @param after Map<QName, Serializable>
 */
public void onUpdateProperties(NodeRef nodeRef,Map<QName,Serializable> before,Map<QName,Serializable> after){
  if (nodeRef.getStoreRef().equals(m_storeRef) == false) {
    return;
  }
  QName nodeType=m_nodeService.getType(nodeRef);
  FileFolderServiceType fType=m_fileFolderService.getType(nodeType);
  if (fType != FileFolderServiceType.INVALID) {
    String beforeLock=(String)before.get(ContentModel.PROP_LOCK_TYPE);
    String afterLock=(String)after.get(ContentModel.PROP_LOCK_TYPE);
    String beforeName=(String)before.get(ContentModel.PROP_NAME);
    String afterName=(String)after.get(ContentModel.PROP_NAME);
    if ((beforeLock != null && afterLock == null) || (beforeLock == null && afterLock != null)) {
      Path nodePath=m_nodeService.getPath(nodeRef);
      String relPath=nodePath.toDisplayPath(m_nodeService,m_permissionService);
      fireNodeEvent(new LockNodeEvent(fType,nodeRef,relPath,beforeName,beforeLock,afterLock));
    }
    if (beforeName != null && !beforeName.equals(afterName)) {
      ChildAssociationRef childAssocRef=m_nodeService.getPrimaryParent(nodeRef);
      String relPath2=buildRelativePathString(childAssocRef.getParentRef(),beforeName);
      String relPath3=buildRelativePathString(childAssocRef.getParentRef(),afterName);
      fireNodeEvent(new MoveNodeEvent(fType,nodeRef,relPath2,relPath3));
    }
  }
}","/** 
 * Update properties event
 * @param nodeRef NodeRef
 */
public void onUpdateProperties(NodeRef nodeRef,Map<QName,Serializable> before,Map<QName,Serializable> after){
  if (nodeRef.getStoreRef().equals(m_storeRef) == false) {
    return;
  }
  QName nodeType=m_nodeService.getType(nodeRef);
  FileFolderServiceType fType=m_fileFolderService.getType(nodeType);
  if (fType != FileFolderServiceType.INVALID) {
    String beforeLock=(String)before.get(ContentModel.PROP_LOCK_TYPE);
    String afterLock=(String)after.get(ContentModel.PROP_LOCK_TYPE);
    String beforeName=(String)before.get(ContentModel.PROP_NAME);
    String afterName=(String)after.get(ContentModel.PROP_NAME);
    if ((beforeLock != null && afterLock == null) || (beforeLock == null && afterLock != null)) {
      Path nodePath=m_nodeService.getPath(nodeRef);
      String relPath=nodePath.toDisplayPath(m_nodeService,m_permissionService);
      fireNodeEvent(new LockNodeEvent(fType,nodeRef,relPath,beforeName,beforeLock,afterLock));
    }
    if (beforeName != null && !beforeName.equals(afterName)) {
      ChildAssociationRef childAssocRef=m_nodeService.getPrimaryParent(nodeRef);
      String relPath2=buildRelativePathString(childAssocRef.getParentRef(),beforeName);
      String relPath3=buildRelativePathString(childAssocRef.getParentRef(),afterName);
      fireNodeEvent(new MoveNodeEvent(fType,nodeRef,relPath2,relPath3));
    }
  }
}",0.9715461090161124
172047,"/** 
 * Asynchronously generates thumbnails for the given node.
 * @param nodeRef NodeRef
 * @param thumbnailNames Set<String>
 */
public void createThumbnails(NodeRef nodeRef,Set<String> thumbnailNames){
  if (thumbnailNames == null || thumbnailNames.size() == 0) {
    return;
  }
  ThumbnailRegistry registry=thumbnailService.getThumbnailRegistry();
  Serializable value=this.nodeService.getProperty(nodeRef,ContentModel.PROP_CONTENT);
  ContentData contentData=DefaultTypeConverter.INSTANCE.convert(ContentData.class,value);
  if (contentData == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  long size=contentData.getSize();
  String mimeType=contentData.getMimetype();
  for (  String thumbnailName : thumbnailNames) {
    ThumbnailDefinition details=registry.getThumbnailDefinition(thumbnailName);
    if (details == null) {
      logger.warn(""String_Node_Str"" + thumbnailName + ""String_Node_Str"");
      continue;
    }
 else {
      if (registry.isThumbnailDefinitionAvailable(contentData.getContentUrl(),mimeType,size,nodeRef,details)) {
        org.alfresco.service.cmr.action.Action action=ThumbnailHelper.createCreateThumbnailAction(details,serviceRegistry);
        actionService.executeAction(action,nodeRef,true,true);
      }
 else {
        logger.info(""String_Node_Str"" + details.getName() + ""String_Node_Str""+ mimeType+ ""String_Node_Str"");
      }
    }
  }
}","/** 
 * Asynchronously generates thumbnails for the given node.
 * @param nodeRef NodeRef
 */
public void createThumbnails(NodeRef nodeRef,Set<String> thumbnailNames){
  if (thumbnailNames == null || thumbnailNames.size() == 0) {
    return;
  }
  ThumbnailRegistry registry=thumbnailService.getThumbnailRegistry();
  Serializable value=this.nodeService.getProperty(nodeRef,ContentModel.PROP_CONTENT);
  ContentData contentData=DefaultTypeConverter.INSTANCE.convert(ContentData.class,value);
  if (contentData == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  long size=contentData.getSize();
  String mimeType=contentData.getMimetype();
  for (  String thumbnailName : thumbnailNames) {
    ThumbnailDefinition details=registry.getThumbnailDefinition(thumbnailName);
    if (details == null) {
      logger.warn(""String_Node_Str"" + thumbnailName + ""String_Node_Str"");
      continue;
    }
 else {
      if (registry.isThumbnailDefinitionAvailable(contentData.getContentUrl(),mimeType,size,nodeRef,details)) {
        org.alfresco.service.cmr.action.Action action=ThumbnailHelper.createCreateThumbnailAction(details,serviceRegistry);
        actionService.executeAction(action,nodeRef,true,true);
      }
 else {
        logger.info(""String_Node_Str"" + details.getName() + ""String_Node_Str""+ mimeType+ ""String_Node_Str"");
      }
    }
  }
}",0.9865503453289712
172048,"/** 
 * @param id String
 * @param actionConditionDefinitionName String
 * @param parameterValues Map<String, Serializable>
 */
public ActionConditionImpl(String id,String actionConditionDefinitionName,Map<String,Serializable> parameterValues){
  super(id,parameterValues);
  this.actionConditionDefinitionName=actionConditionDefinitionName;
}","/** 
 * @param id String
 * @param actionConditionDefinitionName String
 */
public ActionConditionImpl(String id,String actionConditionDefinitionName,Map<String,Serializable> parameterValues){
  super(id,parameterValues);
  this.actionConditionDefinitionName=actionConditionDefinitionName;
}",0.917981072555205
172049,"/** 
 * Set the asynchronous action execution queues
 * @param asynchronousActionExecutionQueues the asynchronous action executionqueues
 * @deprecated Rather than inject a Map<String, AsynchronousActionExecutionQueue>, it ispreferable to inject individual  {@link AsynchronousActionExecutionQueue} instancesduring bean initialisation in a spring init-method.
 */
public void setAsynchronousActionExecutionQueues(Map<String,AsynchronousActionExecutionQueue> asynchronousActionExecutionQueues){
  this.asynchronousActionExecutionQueues=asynchronousActionExecutionQueues;
}","/** 
 * Set the asynchronous action execution queues
 * @param asynchronousActionExecutionQueues the asynchronous action executionqueues
 * @deprecated Rather than inject a map, it ispreferable to inject individual  {@link AsynchronousActionExecutionQueue} instancesduring bean initialisation in a spring init-method.
 */
public void setAsynchronousActionExecutionQueues(Map<String,AsynchronousActionExecutionQueue> asynchronousActionExecutionQueues){
  this.asynchronousActionExecutionQueues=asynchronousActionExecutionQueues;
}",0.9563636363636364
172050,"/** 
 * @param actionService RuntimeActionService
 * @param action Action
 * @param actionedUponNodeRef NodeRef
 * @param checkConditions boolean
 * @param actionChain Set<String>
 */
void executeAction(RuntimeActionService actionService,Action action,NodeRef actionedUponNodeRef,boolean checkConditions,Set<String> actionChain);","/** 
 * @param actionService RuntimeActionService
 * @param action Action
 * @param actionedUponNodeRef NodeRef
 * @param checkConditions boolean
 */
void executeAction(RuntimeActionService actionService,Action action,NodeRef actionedUponNodeRef,boolean checkConditions,Set<String> actionChain);",0.5192307692307693
172051,"/** 
 * @return List<Action>
 * @see org.alfresco.service.cmr.action.ActionList#getActions()
 */
public List<Action> getActions(){
  return this.actions.getActions();
}","/** 
 * @see org.alfresco.service.cmr.action.ActionList#getActions()
 */
public List<Action> getActions(){
  return this.actions.getActions();
}",0.9230769230769232
172052,"/** 
 * Set the action templates - IOC.
 * @param templateActionDefinitions List<TemplateActionDefinition>
 */
public void setTemplateActionDefinitions(List<TemplateActionDefinition> templateActionDefinitions){
  this.templateActionDefinitions=templateActionDefinitions;
}","/** 
 * Set the action templates - IOC.
 */
public void setTemplateActionDefinitions(List<TemplateActionDefinition> templateActionDefinitions){
  this.templateActionDefinitions=templateActionDefinitions;
}",0.6792452830188679
172053,"/** 
 * Set the map of parameters used by the template. These are processed via the template service to produce the actual poarameters.
 * @param parameterTemplates Map<String, String>
 */
public void setParameterTemplates(Map<String,String> parameterTemplates){
  this.parameterTemplates=parameterTemplates;
}","/** 
 * Set the map of parameters used by the template. These are processed via the template service to produce the actual poarameters.
 */
public void setParameterTemplates(Map<String,String> parameterTemplates){
  this.parameterTemplates=parameterTemplates;
}",0.914185639229422
172054,"/** 
 * Attempts to find the avatar   {@link NodeRef} for the user in supplied {@link ActivityFeedEntity}. As this is aimed at setting the   {@link NodeRef} from a client-side point of view there are a couple of activity types wherethe user is taken from the activity summary rather than from the poster (e.g. when a user role is changed). A cache should be passed in from which to retrieve previously fetched  {@link NodeRef}s for efficiency.
 * @param activityFeed ActivityFeedEntity
 * @param userIdToAvatarNodeRefCache Map<String, NodeRef>
 * @return NodeRef
 */
protected NodeRef getUserAvatarNodeRef(ActivityFeedEntity activityFeed,Map<String,NodeRef> userIdToAvatarNodeRefCache){
  NodeRef avatarNodeRef=null;
  String postUserId=null;
  if (activityFeed.getActivityType().equals(""String_Node_Str"")) {
    try {
      JSONObject j=new JSONObject(activityFeed.getActivitySummary());
      postUserId=j.get(""String_Node_Str"").toString();
    }
 catch (    JSONException e) {
    }
  }
 else {
    postUserId=activityFeed.getPostUserId();
  }
  if (postUserId == null) {
  }
 else   if (userIdToAvatarNodeRefCache.containsKey(postUserId)) {
    avatarNodeRef=userIdToAvatarNodeRefCache.get(postUserId);
  }
 else {
    try {
      NodeRef postPerson=this.personService.getPerson(postUserId);
      List<AssociationRef> assocRefs=this.nodeService.getTargetAssocs(postPerson,ContentModel.ASSOC_AVATAR);
      if (!assocRefs.isEmpty()) {
        avatarNodeRef=assocRefs.get(0).getTargetRef();
      }
    }
 catch (    NoSuchPersonException e) {
      if (logger.isDebugEnabled()) {
        logger.warn(""String_Node_Str"" + postUserId);
      }
    }
    userIdToAvatarNodeRefCache.put(postUserId,avatarNodeRef);
  }
  return avatarNodeRef;
}","/** 
 * Attempts to find the avatar   {@link NodeRef} for the user in supplied {@link ActivityFeedEntity}. As this is aimed at setting the   {@link NodeRef} from a client-side point of view there are a couple of activity types wherethe user is taken from the activity summary rather than from the poster (e.g. when a user role is changed). A cache should be passed in from which to retrieve previously fetched  {@link NodeRef}s for efficiency.
 * @param activityFeed ActivityFeedEntity
 * @return NodeRef
 */
protected NodeRef getUserAvatarNodeRef(ActivityFeedEntity activityFeed,Map<String,NodeRef> userIdToAvatarNodeRefCache){
  NodeRef avatarNodeRef=null;
  String postUserId=null;
  if (activityFeed.getActivityType().equals(""String_Node_Str"")) {
    try {
      JSONObject j=new JSONObject(activityFeed.getActivitySummary());
      postUserId=j.get(""String_Node_Str"").toString();
    }
 catch (    JSONException e) {
    }
  }
 else {
    postUserId=activityFeed.getPostUserId();
  }
  if (postUserId == null) {
  }
 else   if (userIdToAvatarNodeRefCache.containsKey(postUserId)) {
    avatarNodeRef=userIdToAvatarNodeRefCache.get(postUserId);
  }
 else {
    try {
      NodeRef postPerson=this.personService.getPerson(postUserId);
      List<AssociationRef> assocRefs=this.nodeService.getTargetAssocs(postPerson,ContentModel.ASSOC_AVATAR);
      if (!assocRefs.isEmpty()) {
        avatarNodeRef=assocRefs.get(0).getTargetRef();
      }
    }
 catch (    NoSuchPersonException e) {
      if (logger.isDebugEnabled()) {
        logger.warn(""String_Node_Str"" + postUserId);
      }
    }
    userIdToAvatarNodeRefCache.put(postUserId,avatarNodeRef);
  }
  return avatarNodeRef;
}",0.9830706363105662
172055,"/** 
 * Sets the Workflow Definitions
 * @param workflowDefinitions List<Properties>
 */
public void setWorkflowDefinitions(List<Properties> workflowDefinitions){
  this.workflowDefinitions=workflowDefinitions;
}","/** 
 * Sets the Workflow Definitions
 */
public void setWorkflowDefinitions(List<Properties> workflowDefinitions){
  this.workflowDefinitions=workflowDefinitions;
}",0.8753315649867374
172056,"/** 
 * The same as   {@link AuditComponent#recordAuditValues(String,Map)}, but with controlled usage of userFilter
 * @param rootPath          a base path of {@link AuditPath} key entries concatenated with the path separator'/' ( {@link AuditApplication#AUDIT_PATH_SEPARATOR})
 * @param values            the values to audit mapped by {@link AuditPath} key relative to root path(may be <tt>null</tt>)
 * @param useUserFilter     if <tt>false<tt> the user filter is disabled.
 * @return                  Returns the values that were actually persisted, keyed by their full path.
 * @throws IllegalStateException if the transaction state could not be determined
 */
Map<String,Serializable> recordAuditValuesWithUserFilter(String rootPath,Map<String,Serializable> values,boolean useUserFilter);","/** 
 * The same as   {@link AuditComponent#recordAuditValues(String,Map)}, but with controlled usage of userFilter
 * @param rootPath          a base path of {@link AuditPath} key entries concatenated with the path separator'/' ( {@link AuditApplication#AUDIT_PATH_SEPARATOR})
 * @param values            the values to audit mapped by {@link AuditPath} key relative to root path(may be <tt>null</tt>)
 * @param useUserFilter     if <tt>false</tt> the user filter is disabled.
 * @return                  Returns the values that were actually persisted, keyed by their full path.
 * @throws IllegalStateException if the transaction state could not be determined
 */
Map<String,Serializable> recordAuditValuesWithUserFilter(String rootPath,Map<String,Serializable> values,boolean useUserFilter);",0.9993698802772528
172057,"/** 
 * @param rootPath String
 * @param auditMap Map<String, Serializable>
 * @return boolean
 */
@Override public boolean accept(String rootPath,Map<String,Serializable> auditMap){
  String[] root=splitPath(rootPath);
  String rootProperty=getPropertyName(PROPERY_NAME_PREFIX,getPropertyName(root));
  String defaultRootProperty=getDefaultRootProperty(root);
  if (""String_Node_Str"".equalsIgnoreCase(getProperty(rootProperty,defaultRootProperty,ENABLED))) {
    for (    Map.Entry<String,Serializable> entry : auditMap.entrySet()) {
      Serializable value=entry.getValue();
      if (value == null) {
        value=""String_Node_Str"";
      }
      String stringValue=(value instanceof String) ? (String)value : value.toString();
      String[] key=splitPath(entry.getKey());
      String propertyValue=getProperty(rootProperty,defaultRootProperty,key);
      if (!acceptValue(stringValue,propertyValue,rootProperty,key)) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + rootPath + '/'+ entry.getKey()+ ""String_Node_Str""+ stringValue+ ""String_Node_Str""+ getPropertyName(rootProperty,getPropertyName(key))+ ""String_Node_Str""+ propertyValue);
        }
        return false;
      }
    }
  }
  return true;
}","/** 
 * @param rootPath String
 * @return boolean
 */
@Override public boolean accept(String rootPath,Map<String,Serializable> auditMap){
  String[] root=splitPath(rootPath);
  String rootProperty=getPropertyName(PROPERY_NAME_PREFIX,getPropertyName(root));
  String defaultRootProperty=getDefaultRootProperty(root);
  if (""String_Node_Str"".equalsIgnoreCase(getProperty(rootProperty,defaultRootProperty,ENABLED))) {
    for (    Map.Entry<String,Serializable> entry : auditMap.entrySet()) {
      Serializable value=entry.getValue();
      if (value == null) {
        value=""String_Node_Str"";
      }
      String stringValue=(value instanceof String) ? (String)value : value.toString();
      String[] key=splitPath(entry.getKey());
      String propertyValue=getProperty(rootProperty,defaultRootProperty,key);
      if (!acceptValue(stringValue,propertyValue,rootProperty,key)) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + rootPath + '/'+ entry.getKey()+ ""String_Node_Str""+ stringValue+ ""String_Node_Str""+ getPropertyName(rootProperty,getPropertyName(key))+ ""String_Node_Str""+ propertyValue);
        }
        return false;
      }
    }
  }
  return true;
}",0.98159509202454
172058,"/** 
 * Set the registry with which to register
 * @param registry NamedObjectRegistry<DataGenerator>
 */
public void setRegistry(NamedObjectRegistry<DataGenerator> registry){
  this.registry=registry;
}","/** 
 * Set the registry with which to register
 */
public void setRegistry(NamedObjectRegistry<DataGenerator> registry){
  this.registry=registry;
}",0.8465909090909091
172059,"/** 
 * Get the property representing the set of disabled paths for the application
 * @return          Returns an ID <code>Set<String></code> of disabled paths
 */
public Long getDisabledPathsId(){
  return disabledPathsId;
}","/** 
 * Get the property representing the set of disabled paths for the application
 * @return          Returns an ID of disabled paths
 */
public Long getDisabledPathsId(){
  return disabledPathsId;
}",0.9414519906323184
172060,"/** 
 * Get a list of the registered integration implementations.
 * @return List<BlogIntegrationImplementaion>   list of registered blog integration implementations
 */
List<BlogIntegrationImplementation> getBlogIntegrationImplementations();","/** 
 * Get a list of the registered integration implementations.
 * @return list of registered blog integration implementations
 */
List<BlogIntegrationImplementation> getBlogIntegrationImplementations();",0.9172259507829976
172061,"/** 
 * Given a node reference, gets a list of 'in scope' BlogDetails.  The node itself and then the primary parent hierarchy is searched and any blog details found returned in  a list, with the 'nearest' first.
 * @param nodeRef               the node reference
 * @return List<BlogDetails>    list of the blog details found 'in scope' for the node, empty if none found
 */
List<BlogDetails> getBlogDetails(NodeRef nodeRef);","/** 
 * Given a node reference, gets a list of 'in scope' BlogDetails.  The node itself and then the primary parent hierarchy is searched and any blog details found returned in  a list, with the 'nearest' first.
 * @param nodeRef               the node reference
 * @return list of the blog details found 'in scope' for the node, empty if none found
 */
List<BlogDetails> getBlogDetails(NodeRef nodeRef);",0.9746682750301568
172062,"/** 
 * Executes an XML RPC method
 * @param url String
 * @param method String
 * @param params List<Object>
 * @return Object
 */
protected Object execute(String url,String method,List<Object> params){
  Object result=null;
  try {
    XmlRpcClient client=getClient(url);
    result=client.execute(method,params);
  }
 catch (  XmlRpcException exception) {
    throw new BlogIntegrationRuntimeException(""String_Node_Str"" + method + ""String_Node_Str""+ url+ ""String_Node_Str"",exception);
  }
  return result;
}","/** 
 * Executes an XML RPC method
 * @param url String
 * @param method String
 * @return Object
 */
protected Object execute(String url,String method,List<Object> params){
  Object result=null;
  try {
    XmlRpcClient client=getClient(url);
    result=client.execute(method,params);
  }
 catch (  XmlRpcException exception) {
    throw new BlogIntegrationRuntimeException(""String_Node_Str"" + method + ""String_Node_Str""+ url+ ""String_Node_Str"",exception);
  }
  return result;
}",0.8101010101010101
172063,"/** 
 * Adapt a 
 * @param cache SimpleCache<Serializable, Object>
 * @param regionName String
 */
public HibernateSimpleCacheAdapter(SimpleCache<Serializable,Object> cache,String regionName){
  this.cache=cache;
  this.regionName=regionName;
}","/** 
 * Adapt a 
 * @param regionName String
 */
public HibernateSimpleCacheAdapter(SimpleCache<Serializable,Object> cache,String regionName){
  this.cache=cache;
  this.regionName=regionName;
}",0.8858447488584474
172064,"/** 
 * @param workingCopyNodeRef NodeRef
 * @param versionProperties Map<String,Serializable>
 * @param contentUrl String
 * @param keepCheckedOut boolean
 */
void beforeCheckIn(NodeRef workingCopyNodeRef,Map<String,Serializable> versionProperties,String contentUrl,boolean keepCheckedOut);","/** 
 * @param workingCopyNodeRef NodeRef
 * @param contentUrl String
 * @param keepCheckedOut boolean
 */
void beforeCheckIn(NodeRef workingCopyNodeRef,Map<String,Serializable> versionProperties,String contentUrl,boolean keepCheckedOut);",0.8998109640831758
172065,"/** 
 * The Constructor.
 * @param source the source content store
 * @param extendedEventParams Map<String, Serializable>
 */
public ContentStoreCreatedEvent(ContentStore source,Map<String,Serializable> extendedEventParams){
  super(source);
  this.extendedEventParams=extendedEventParams;
}","/** 
 * The Constructor.
 * @param source the source content store
 */
public ContentStoreCreatedEvent(ContentStore source,Map<String,Serializable> extendedEventParams){
  super(source);
  this.extendedEventParams=extendedEventParams;
}",0.6893939393939394
172066,"/** 
 * Sets the map of source mimetypes to metadata extracter limits.
 * @param mimetypeLimits Map<String, MetadataExtracterLimits>
 */
public void setMimetypeLimits(Map<String,MetadataExtracterLimits> mimetypeLimits){
  this.mimetypeLimits=mimetypeLimits;
}","/** 
 * Sets the map of source mimetypes to metadata extracter limits.
 */
public void setMimetypeLimits(Map<String,MetadataExtracterLimits> mimetypeLimits){
  this.mimetypeLimits=mimetypeLimits;
}",0.8640350877192983
172067,"/** 
 * Set the mimetypes that are supported for embedding.
 * @param supportedEmbedMimetypes Collection<String>
 */
public void setSupportedEmbedMimetypes(Collection<String> supportedEmbedMimetypes){
  this.supportedEmbedMimetypes.clear();
  this.supportedEmbedMimetypes.addAll(supportedEmbedMimetypes);
}","/** 
 * Set the mimetypes that are supported for embedding.
 */
public void setSupportedEmbedMimetypes(Collection<String> supportedEmbedMimetypes){
  this.supportedEmbedMimetypes.clear();
  this.supportedEmbedMimetypes.addAll(supportedEmbedMimetypes);
}",0.7584973166368515
172068,"/** 
 * This method provides a <i>best guess</i> of where to store the values extracted from the documents.  The list of properties mapped by default need <b>not</b> include all properties extracted from the document; just the obvious set of mappings need be supplied. Implementations must either provide the default mapping properties in the expected location or override the method to provide the default mapping. <p> The default implementation looks for the default mapping file in the location given by the class name and <i>.properties</i>.  If the extracter's class is <b>x.y.z.MyExtracter</b> then the default properties will be picked up at <b>classpath:/alfresco/metadata/MyExtracter.properties</b>. The previous location of <b>classpath:/x/y/z/MyExtracter.properties</b> is still supported but may be removed in a future release. Inner classes are supported, but the '$' in the class name is replaced with '-', so default properties for <b>x.y.z.MyStuff$MyExtracter</b> will be located using <b>classpath:/alfresco/metadata/MyStuff-MyExtracter.properties</b>. <p> The default mapping implementation should include thorough Javadocs so that the system administrators can accurately determine how to best enhance or override the default mapping. <p> If the default mapping is declared in a properties file other than the one named after the class, then the   {@link #readMappingProperties(String)} method can be used to quicklygenerate the return value: <pre><code> protected Map<<String, Set<QName>> getDefaultMapping() { return readMappingProperties(DEFAULT_MAPPING); } </code></pre> The map can also be created in code either statically or during the call.
 * @return              Returns the default, static mapping.  It may not be null.
 * @see #setInheritDefaultMapping(boolean inherit)
 */
protected Map<String,Set<QName>> getDefaultMapping(){
  AlfrescoRuntimeException metadataLocationReadException=null;
  try {
    String className=this.getClass().getName();
    String shortClassName=className.split(""String_Node_Str"")[className.split(""String_Node_Str"").length - 1];
    shortClassName=shortClassName.replace('$','-');
    String metadataPropertiesUrl=""String_Node_Str"" + shortClassName + ""String_Node_Str"";
    return readMappingProperties(metadataPropertiesUrl);
  }
 catch (  AlfrescoRuntimeException e) {
    metadataLocationReadException=e;
  }
  try {
    String canonicalClassName=this.getClass().getName();
    canonicalClassName=canonicalClassName.replace('$','-');
    canonicalClassName=canonicalClassName.replace('.','/');
    String packagePropertiesUrl=canonicalClassName + ""String_Node_Str"";
    return readMappingProperties(packagePropertiesUrl);
  }
 catch (  AlfrescoRuntimeException e) {
    throw metadataLocationReadException;
  }
}","/** 
 * This method provides a <i>best guess</i> of where to store the values extracted from the documents.  The list of properties mapped by default need <b>not</b> include all properties extracted from the document; just the obvious set of mappings need be supplied. Implementations must either provide the default mapping properties in the expected location or override the method to provide the default mapping. <p> The default implementation looks for the default mapping file in the location given by the class name and <i>.properties</i>.  If the extracter's class is <b>x.y.z.MyExtracter</b> then the default properties will be picked up at <b>classpath:/alfresco/metadata/MyExtracter.properties</b>. The previous location of <b>classpath:/x/y/z/MyExtracter.properties</b> is still supported but may be removed in a future release. Inner classes are supported, but the '$' in the class name is replaced with '-', so default properties for <b>x.y.z.MyStuff$MyExtracter</b> will be located using <b>classpath:/alfresco/metadata/MyStuff-MyExtracter.properties</b>. <p> The default mapping implementation should include thorough Javadocs so that the system administrators can accurately determine how to best enhance or override the default mapping. <p> If the default mapping is declared in a properties file other than the one named after the class, then the   {@link #readMappingProperties(String)} method can be used to quicklygenerate the return value: <pre><code> { return readMappingProperties(DEFAULT_MAPPING); } </code></pre> The map can also be created in code either statically or during the call.
 * @return              Returns the default, static mapping.  It may not be null.
 * @see #setInheritDefaultMapping(boolean inherit)
 */
protected Map<String,Set<QName>> getDefaultMapping(){
  AlfrescoRuntimeException metadataLocationReadException=null;
  try {
    String className=this.getClass().getName();
    String shortClassName=className.split(""String_Node_Str"")[className.split(""String_Node_Str"").length - 1];
    shortClassName=shortClassName.replace('$','-');
    String metadataPropertiesUrl=""String_Node_Str"" + shortClassName + ""String_Node_Str"";
    return readMappingProperties(metadataPropertiesUrl);
  }
 catch (  AlfrescoRuntimeException e) {
    metadataLocationReadException=e;
  }
  try {
    String canonicalClassName=this.getClass().getName();
    canonicalClassName=canonicalClassName.replace('$','-');
    canonicalClassName=canonicalClassName.replace('.','/');
    String packagePropertiesUrl=canonicalClassName + ""String_Node_Str"";
    return readMappingProperties(packagePropertiesUrl);
  }
 catch (  AlfrescoRuntimeException e) {
    throw metadataLocationReadException;
  }
}",0.9899836095428884
172069,"/** 
 * Set whether the extractor should discard metadata that fails to convert to the target type defined in the data dictionary model.  This is <tt>true</tt> by default i.e. if the data extracted is not compatible with the target model then the extraction will fail.  If this is <tt>false<tt> then any extracted data that fails to convert will be discarded.
 * @param failOnTypeConversion      <tt>false</tt> to discard properties that can't get convertedto the dictionary-defined type, or <tt>true</tt> (default) to fail the extraction if the type doesn't convert
 */
public void setFailOnTypeConversion(boolean failOnTypeConversion){
  this.failOnTypeConversion=failOnTypeConversion;
}","/** 
 * Set whether the extractor should discard metadata that fails to convert to the target type defined in the data dictionary model.  This is <tt>true</tt> by default i.e. if the data extracted is not compatible with the target model then the extraction will fail.  If this is <tt>false</tt> then any extracted data that fails to convert will be discarded.
 * @param failOnTypeConversion      <tt>false</tt> to discard properties that can't get convertedto the dictionary-defined type, or <tt>true</tt> (default) to fail the extraction if the type doesn't convert
 */
public void setFailOnTypeConversion(boolean failOnTypeConversion){
  this.failOnTypeConversion=failOnTypeConversion;
}",0.9992748368382888
172070,"/** 
 * Set the mimetypes that are supported by the extracter.
 * @param supportedMimetypes Collection<String>
 */
public void setSupportedMimetypes(Collection<String> supportedMimetypes){
  this.supportedMimetypes.clear();
  this.supportedMimetypes.addAll(supportedMimetypes);
}","/** 
 * Set the mimetypes that are supported by the extracter.
 */
public void setSupportedMimetypes(Collection<String> supportedMimetypes){
  this.supportedMimetypes.clear();
  this.supportedMimetypes.addAll(supportedMimetypes);
}",0.7647058823529411
172071,"/** 
 * Sets any properties to be set on the TransformationOption as passed in. This allows you to force certain properties to always be set on it,  to control the transformers in a different way to their default. Note that only properties that are supported by the passed-in   {@link TransformationOptions} are changed, others are ignored.
 * @param transformationOptionOverrides Map<String, Serializable>
 */
public void setTransformationOptionOverrides(Map<String,Serializable> transformationOptionOverrides){
  this.transformationOptionOverrides=transformationOptionOverrides;
}","/** 
 * Sets any properties to be set on the TransformationOption as passed in. This allows you to force certain properties to always be set on it,  to control the transformers in a different way to their default. Note that only properties that are supported by the passed-in   {@link TransformationOptions} are changed, others are ignored.
 */
public void setTransformationOptionOverrides(Map<String,Serializable> transformationOptionOverrides){
  this.transformationOptionOverrides=transformationOptionOverrides;
}",0.9398907103825136
172072,"/** 
 * Helper method for   {@link #getComments(boolean)} tocreate a line that indicates which source and target mimetypes it supports.
 * @param sourceMimetypes List<String>
 * @param targetMimetypes List<String>
 * @param available TODO
 * @return a String of the form ""# only supports xxx, yyy or zzz to aaa or bb\n"".
 */
protected String getCommentsOnlySupports(List<String> sourceMimetypes,List<String> targetMimetypes,boolean available){
  StringBuilder sb=new StringBuilder();
  sb.append(getCommentNameAndAvailable(available));
  sb.append(""String_Node_Str"");
  sb.append(getExtensions(sourceMimetypes));
  sb.append(""String_Node_Str"");
  sb.append(getExtensions(targetMimetypes));
  sb.append(""String_Node_Str"");
  return sb.toString();
}","/** 
 * Helper method for   {@link #getComments(boolean)} tocreate a line that indicates which source and target mimetypes it supports.
 * @param available TODO
 * @return a String of the form ""# only supports xxx, yyy or zzz to aaa or bb\n"".
 */
protected String getCommentsOnlySupports(List<String> sourceMimetypes,List<String> targetMimetypes,boolean available){
  StringBuilder sb=new StringBuilder();
  sb.append(getCommentNameAndAvailable(available));
  sb.append(""String_Node_Str"");
  sb.append(getExtensions(sourceMimetypes));
  sb.append(""String_Node_Str"");
  sb.append(getExtensions(targetMimetypes));
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9449152542372882
172073,"/** 
 * Create the row for the <b>alf_content_data<b>
 */
protected abstract ContentDataEntity createContentDataEntity(Long contentUrlId,Long mimetypeId,Long encodingId,Long localeId);","/** 
 * Create the row for the <b>alf_content_data</b>
 */
protected abstract ContentDataEntity createContentDataEntity(Long contentUrlId,Long mimetypeId,Long encodingId,Long localeId);",0.997289972899729
172074,"/** 
 * Determine if the lock is logically exclusive.  A lock is <b>exclusive</b> if the shared lock resource matches the exclusive lock resource.
 * @return      Returns <tt>true</tt> if the lock is exclusive or <tt>false<tt> if it is not
 */
public boolean isExclusive(){
  if (sharedResourceId == null || exclusiveResourceId == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return sharedResourceId.equals(exclusiveResourceId);
}","/** 
 * Determine if the lock is logically exclusive.  A lock is <b>exclusive</b> if the shared lock resource matches the exclusive lock resource.
 * @return      Returns <tt>true</tt> if the lock is exclusive or <tt>false</tt> if it is not
 */
public boolean isExclusive(){
  if (sharedResourceId == null || exclusiveResourceId == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return sharedResourceId.equals(exclusiveResourceId);
}",0.9989023051591658
172075,"@Override public void characters(char[] ch,int start,int length) throws SAXException {
  String text=new String(ch,start,length).trim();
  if (text.length() > 0) {
    lastText.append(text);
  }
}","@Override public void characters(char[] ch,int start,int length) throws SAXException {
  String text=new String(ch,start,length);
  if (text.length() > 0) {
    lastText.append(text);
  }
}",0.9818181818181818
172076,"private void authenticateMultiTenantWork(String userName,String password){
  String hashedPassword=dao.getMD4HashedPassword(userName);
  assertNotNull(hashedPassword);
  UserDetails userDetails=(UserDetails)dao.loadUserByUsername(userName);
  assertEquals(passwordEncoder.encodePassword(password,dao.getSalt(userDetails)),hashedPassword);
}","private void authenticateMultiTenantWork(String userName,String password){
  String hashedPassword=dao.getMD4HashedPassword(userName);
  assertNotNull(hashedPassword);
  UserDetails userDetails=(UserDetails)dao.loadUserByUsername(userName);
  assertEquals(compositePasswordEncoder.encodePassword(password,dao.getSalt(userDetails)),hashedPassword);
}",0.9869375907111756
172077,"private void authenticateMultiTenantWork(String userName,String password){
  String hashedPassword=dao.getMD4HashedPassword(userName);
  assertNotNull(hashedPassword);
  UserDetails userDetails=(UserDetails)dao.loadUserByUsername(userName);
  assertEquals(compositePasswordEncoder.encodePassword(password,dao.getSalt(userDetails)),hashedPassword);
}","private void authenticateMultiTenantWork(String userName,String password){
  String hashedPassword=dao.getMD4HashedPassword(userName);
  assertNotNull(hashedPassword);
  assertEquals(compositePasswordEncoder.encode(""String_Node_Str"",password,null),hashedPassword);
}",0.7609756097560976
172078,"/** 
 * Called after an <b>cm:ownable</b> aspect has been added to a node
 * @param nodeRef the node to which the aspect was added
 * @param aspectTypeQName the type of the aspect
 */
private void incrementUserUsage(String userName,long contentSize,NodeRef contentNodeRef){
  if (!authenticationContext.isSystemUserName(userName)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ contentSize+ ""String_Node_Str""+ contentNodeRef);
    long currentSize=getUserUsage(userName);
    long quotaSize=getUserQuota(userName);
    long newSize=currentSize + contentSize;
    if ((quotaSize != -1) && (newSize > quotaSize)) {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + userName + ""String_Node_Str""+ contentSize+ ""String_Node_Str""+ currentSize+ ""String_Node_Str""+ quotaSize);
      }
      throw new ContentQuotaException(""String_Node_Str"");
    }
    NodeRef personNodeRef=getPerson(userName);
    if (personNodeRef != null) {
      usageService.insertDelta(personNodeRef,contentSize);
    }
  }
}","/** 
 * Called after an <b>cm:ownable</b> aspect has been added to a node
 * @param nodeRef the node to which the aspect was added
 * @param aspectTypeQName the type of the aspect
 */
private void incrementUserUsage(String userName,long contentSize,NodeRef contentNodeRef){
  if (!authenticationContext.isSystemUserName(userName)) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ contentSize+ ""String_Node_Str""+ contentNodeRef);
    long currentSize=getUserUsage(userName);
    long quotaSize=getUserQuota(userName);
    long newSize=currentSize + contentSize;
    if ((quotaSize != -1) && (newSize > quotaSize)) {
      if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + userName + ""String_Node_Str""+ contentSize+ ""String_Node_Str""+ currentSize+ ""String_Node_Str""+ quotaSize);
      }
      throw new ContentQuotaException(""String_Node_Str"",newSize,quotaSize,ContentModel.TYPE_CONTENT);
    }
    NodeRef personNodeRef=getPerson(userName);
    if (personNodeRef != null) {
      usageService.insertDelta(personNodeRef,contentSize);
    }
  }
}",0.979890310786106
172079,"public ContentQuotaException(String msg,Throwable cause){
  super(msg,cause);
}","public ContentQuotaException(String msg,Throwable cause,long usage,long quotaLimit,QName quotaRestrictedType){
  super(msg,cause,usage,quotaLimit,quotaRestrictedType);
}",0.6370967741935484
172080,"/** 
 * ALF-19732: Share does not render Cancel Checkout action for items being edited online
 */
public void testPermissionWithEphemeralLockAspect(){
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.ALL_PERMISSIONS,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.CHECK_OUT,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.WRITE,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.READ,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.CHECK_OUT,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.WRITE,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.READ,true);
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  NodeRef testNode=nodeService.createNode(rootNodeRef,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_PERSON,ContentModel.TYPE_CMOBJECT,null).getChildRef();
  lockService.lock(testNode,LockType.READ_ONLY_LOCK,3600,Lifetime.EPHEMERAL);
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  lockService.unlock(testNode);
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  lockService.lock(testNode,LockType.READ_ONLY_LOCK,3600,Lifetime.EPHEMERAL);
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
}","/** 
 * ALF-19732: Share does not render Cancel Checkout action for items being edited online
 */
public void testPermissionWithEphemeralLockAspect(){
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.ALL_PERMISSIONS,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.CHECK_OUT,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.WRITE,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.READ,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.CHECK_OUT,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.WRITE,true);
  permissionService.setPermission(rootNodeRef,""String_Node_Str"",PermissionService.READ,true);
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  NodeRef testNode=nodeService.createNode(rootNodeRef,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_PERSON,ContentModel.TYPE_CMOBJECT,null).getChildRef();
  lockService.lock(testNode,LockType.READ_ONLY_LOCK,3600,Lifetime.EPHEMERAL);
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  lockService.unlock(testNode);
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  lockService.lock(testNode,LockType.READ_ONLY_LOCK,3600,Lifetime.EPHEMERAL);
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  authenticationService.authenticate(""String_Node_Str"",""String_Node_Str"".toCharArray());
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.LOCK));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.UNLOCK));
  assertEquals(AccessStatus.ALLOWED,permissionService.hasPermission(testNode,PermissionService.CHECK_OUT));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CHECK_IN));
  assertEquals(AccessStatus.DENIED,permissionService.hasPermission(testNode,PermissionService.CANCEL_CHECK_OUT));
}",0.8834473324213407
172081,"public WorkflowTask updateTask(String taskId,Map<QName,Serializable> properties,Map<QName,List<NodeRef>> add,Map<QName,List<NodeRef>> remove){
  String engineId=BPMEngineRegistry.getEngineId(taskId);
  TaskComponent component=getTaskComponent(engineId);
  String originalAsignee=(String)component.getTaskById(taskId).getProperties().get(ContentModel.PROP_OWNER);
  WorkflowTask task=component.updateTask(taskId,properties,add,remove);
  if (add != null && add.containsKey(WorkflowModel.ASSOC_PACKAGE)) {
    WorkflowInstance instance=task.getPath().getInstance();
    workflowPackageComponent.setWorkflowForPackage(instance);
  }
  String assignee=(String)properties.get(ContentModel.PROP_OWNER);
  if (assignee != null && assignee.length() != 0) {
    if (!assignee.equals(originalAsignee)) {
      String instanceId=task.getPath().getInstance().getId();
      WorkflowTask startTask=component.getStartTask(instanceId);
      if (startTask != null) {
        Boolean sendEMailNotification=(Boolean)startTask.getProperties().get(WorkflowModel.PROP_SEND_EMAIL_NOTIFICATIONS);
        if (Boolean.TRUE.equals(sendEMailNotification) == true) {
          String workflowDefId=task.getPath().getInstance().getDefinition().getName();
          if (workflowDefId.indexOf('$') != -1 && (workflowDefId.indexOf('$') < workflowDefId.length() - 1)) {
            workflowDefId=workflowDefId.substring(workflowDefId.indexOf('$') + 1);
          }
          String taskDefId=task.getDefinition().getId().replace(""String_Node_Str"",""String_Node_Str"");
          String taskType=workflowDefId + ""String_Node_Str"" + (engineId.equals(JBPMEngine.ENGINE_ID) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ taskDefId;
          workflowNotificationUtils.sendWorkflowAssignedNotificationEMail(taskId,taskType,assignee,false);
        }
      }
    }
  }
  return task;
}","public WorkflowTask updateTask(String taskId,Map<QName,Serializable> properties,Map<QName,List<NodeRef>> add,Map<QName,List<NodeRef>> remove){
  String engineId=BPMEngineRegistry.getEngineId(taskId);
  TaskComponent component=getTaskComponent(engineId);
  String originalAsignee=(String)component.getTaskById(taskId).getProperties().get(ContentModel.PROP_OWNER);
  WorkflowTask task=component.updateTask(taskId,properties,add,remove);
  if (add != null && add.containsKey(WorkflowModel.ASSOC_PACKAGE)) {
    WorkflowInstance instance=task.getPath().getInstance();
    workflowPackageComponent.setWorkflowForPackage(instance);
  }
  String assignee=(String)properties.get(ContentModel.PROP_OWNER);
  if (assignee != null && assignee.length() != 0) {
    if (!assignee.equals(originalAsignee)) {
      String instanceId=task.getPath().getInstance().getId();
      WorkflowTask startTask=component.getStartTask(instanceId);
      if (startTask != null) {
        Boolean sendEMailNotification=(Boolean)startTask.getProperties().get(WorkflowModel.PROP_SEND_EMAIL_NOTIFICATIONS);
        if (Boolean.TRUE.equals(sendEMailNotification) == true) {
          String workflowDefId=task.getPath().getInstance().getDefinition().getName();
          if (workflowDefId.indexOf('$') != -1 && (workflowDefId.indexOf('$') < workflowDefId.length() - 1)) {
            workflowDefId=workflowDefId.substring(workflowDefId.indexOf('$') + 1);
          }
          workflowNotificationUtils.sendWorkflowAssignedNotificationEMail(taskId,null,assignee,false);
        }
      }
    }
  }
  return task;
}",0.9165940133682068
172082,"@Override public void notify(DelegateTask task){
  propertyConverter.setDefaultTaskProperties(task);
  String taskFormKey=getFormKey(task);
  TypeDefinition typeDefinition=propertyConverter.getWorkflowObjectFactory().getTaskTypeDefinition(taskFormKey,false);
  taskFormKey=typeDefinition.getName().toPrefixString();
  task.setVariableLocal(ActivitiConstants.PROP_TASK_FORM_KEY,taskFormKey);
  ActivitiScriptNode initiatorNode=(ActivitiScriptNode)task.getExecution().getVariable(WorkflowConstants.PROP_INITIATOR);
  if (initiatorNode != null) {
    task.addUserIdentityLink((String)initiatorNode.getProperties().get(ContentModel.PROP_USERNAME.toPrefixString()),IdentityLinkType.STARTER);
  }
  ExecutionEntity executionEntity=((ExecutionEntity)task.getExecution()).getProcessInstance();
  Boolean value=(Boolean)executionEntity.getVariable(WorkflowNotificationUtils.PROP_SEND_EMAIL_NOTIFICATIONS);
  if (Boolean.TRUE.equals(value) == true) {
    NodeRef workflowPackage=null;
    ActivitiScriptNode scriptNode=(ActivitiScriptNode)executionEntity.getVariable(WorkflowNotificationUtils.PROP_PACKAGE);
    if (scriptNode != null) {
      workflowPackage=scriptNode.getNodeRef();
    }
    String[] authorities=null;
    boolean isPooled=false;
    if (task.getAssignee() == null) {
      isPooled=true;
      List<IdentityLinkEntity> identities=((TaskEntity)task).getIdentityLinks();
      List<String> temp=new ArrayList<String>(identities.size());
      for (      IdentityLinkEntity item : identities) {
        String group=item.getGroupId();
        if (group != null) {
          temp.add(group);
        }
        String user=item.getUserId();
        if (user != null) {
          temp.add(user);
        }
      }
      authorities=temp.toArray(new String[temp.size()]);
    }
 else {
      authorities=new String[]{task.getAssignee()};
    }
    String title;
    if (taskFormKey != null) {
      title=taskFormKey.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      title=task.getName().replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    String workflowDefId=task.getProcessDefinitionId().split(""String_Node_Str"")[0];
    String taskType=workflowDefId + ""String_Node_Str"" + title+ ""String_Node_Str"";
    workflowNotificationUtils.sendWorkflowAssignedNotificationEMail(ActivitiConstants.ENGINE_ID + ""String_Node_Str"" + task.getId(),taskType,task.getDescription(),task.getDueDate(),Integer.valueOf(task.getPriority()),workflowPackage,authorities,isPooled);
  }
}","@Override public void notify(DelegateTask task){
  propertyConverter.setDefaultTaskProperties(task);
  String taskFormKey=getFormKey(task);
  TypeDefinition typeDefinition=propertyConverter.getWorkflowObjectFactory().getTaskTypeDefinition(taskFormKey,false);
  taskFormKey=typeDefinition.getName().toPrefixString();
  task.setVariableLocal(ActivitiConstants.PROP_TASK_FORM_KEY,taskFormKey);
  ActivitiScriptNode initiatorNode=(ActivitiScriptNode)task.getExecution().getVariable(WorkflowConstants.PROP_INITIATOR);
  if (initiatorNode != null) {
    task.addUserIdentityLink((String)initiatorNode.getProperties().get(ContentModel.PROP_USERNAME.toPrefixString()),IdentityLinkType.STARTER);
  }
  ExecutionEntity executionEntity=((ExecutionEntity)task.getExecution()).getProcessInstance();
  Boolean value=(Boolean)executionEntity.getVariable(WorkflowNotificationUtils.PROP_SEND_EMAIL_NOTIFICATIONS);
  if (Boolean.TRUE.equals(value) == true) {
    NodeRef workflowPackage=null;
    ActivitiScriptNode scriptNode=(ActivitiScriptNode)executionEntity.getVariable(WorkflowNotificationUtils.PROP_PACKAGE);
    if (scriptNode != null) {
      workflowPackage=scriptNode.getNodeRef();
    }
    String[] authorities=null;
    boolean isPooled=false;
    if (task.getAssignee() == null) {
      isPooled=true;
      List<IdentityLinkEntity> identities=((TaskEntity)task).getIdentityLinks();
      List<String> temp=new ArrayList<String>(identities.size());
      for (      IdentityLinkEntity item : identities) {
        String group=item.getGroupId();
        if (group != null) {
          temp.add(group);
        }
        String user=item.getUserId();
        if (user != null) {
          temp.add(user);
        }
      }
      authorities=temp.toArray(new String[temp.size()]);
    }
 else {
      authorities=new String[]{task.getAssignee()};
    }
    String title;
    if (task.getName() != null) {
      title=task.getName();
    }
 else {
      title=taskFormKey.replace(""String_Node_Str"",""String_Node_Str"");
    }
    workflowNotificationUtils.sendWorkflowAssignedNotificationEMail(ActivitiConstants.ENGINE_ID + ""String_Node_Str"" + task.getId(),title,task.getDescription(),task.getDueDate(),Integer.valueOf(task.getPriority()),workflowPackage,authorities,isPooled);
  }
}",0.9324097397145256
172083,"/** 
 * Sets a property value.
 */
@SuppressWarnings(""String_Node_Str"") public void setProperty(NodeRef nodeRef,TypeDefinitionWrapper type,PropertyData<?> property){
  if (property == null) {
    throw new CmisInvalidArgumentException(""String_Node_Str"");
  }
  PropertyDefinitionWrapper propDef=type.getPropertyById(property.getId());
  if (propDef == null) {
    throw new CmisInvalidArgumentException(""String_Node_Str"" + property.getId() + ""String_Node_Str"");
  }
  Updatability updatability=propDef.getPropertyDefinition().getUpdatability();
  if ((updatability == Updatability.READONLY) || (updatability == Updatability.WHENCHECKEDOUT && !checkOutCheckInService.isWorkingCopy(nodeRef))) {
    throw new CmisInvalidArgumentException(""String_Node_Str"" + property.getId() + ""String_Node_Str"");
  }
  Serializable value=getValue(property,propDef.getPropertyDefinition().getCardinality() == Cardinality.MULTI);
  if (propDef.getPropertyId().equals(PropertyIds.SECONDARY_OBJECT_TYPE_IDS)) {
    if (!(value instanceof List)) {
      throw new CmisInvalidArgumentException(""String_Node_Str"");
    }
    List secondaryTypes=(List)value;
    for (    Object o : secondaryTypes) {
      String secondaryType=(String)o;
      TypeDefinitionWrapper wrapper=cmisDictionaryService.findType(secondaryType);
      if (wrapper != null) {
        nodeService.addAspect(nodeRef,wrapper.getAlfrescoName(),null);
      }
 else {
        throw new CmisInvalidArgumentException(""String_Node_Str"" + secondaryType);
      }
    }
  }
 else {
    QName propertyQName=propDef.getPropertyAccessor().getMappedProperty();
    if (propertyQName == null) {
      throw new CmisConstraintException(""String_Node_Str"" + property.getId() + ""String_Node_Str"");
    }
    if (property.getId().equals(PropertyIds.NAME)) {
      if (!(value instanceof String)) {
        throw new CmisInvalidArgumentException(""String_Node_Str"");
      }
      try {
        fileFolderService.rename(nodeRef,value.toString());
      }
 catch (      FileExistsException e) {
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",e);
      }
catch (      FileNotFoundException e) {
        throw new CmisInvalidArgumentException(""String_Node_Str"" + nodeRef.getId() + ""String_Node_Str"");
      }
    }
 else {
      if (value == null) {
        nodeService.removeProperty(nodeRef,propertyQName);
      }
 else {
        nodeService.setProperty(nodeRef,propertyQName,value);
      }
    }
  }
}","/** 
 * Sets a property value.
 */
@SuppressWarnings(""String_Node_Str"") public void setProperty(NodeRef nodeRef,TypeDefinitionWrapper type,PropertyData<?> property){
  if (property == null) {
    throw new CmisInvalidArgumentException(""String_Node_Str"");
  }
  PropertyDefinitionWrapper propDef=type.getPropertyById(property.getId());
  if (propDef == null) {
    throw new CmisInvalidArgumentException(""String_Node_Str"" + property.getId() + ""String_Node_Str"");
  }
  Updatability updatability=propDef.getPropertyDefinition().getUpdatability();
  if ((updatability == Updatability.READONLY) || (updatability == Updatability.WHENCHECKEDOUT && !checkOutCheckInService.isWorkingCopy(nodeRef))) {
    throw new CmisInvalidArgumentException(""String_Node_Str"" + property.getId() + ""String_Node_Str"");
  }
  Serializable value=getValue(property,propDef.getPropertyDefinition().getCardinality() == Cardinality.MULTI);
  if (propDef.getPropertyId().equals(PropertyIds.SECONDARY_OBJECT_TYPE_IDS)) {
    if (!(value instanceof List)) {
      throw new CmisInvalidArgumentException(""String_Node_Str"");
    }
    List secondaryTypes=(List)value;
    for (    Object o : secondaryTypes) {
      String secondaryType=(String)o;
      TypeDefinitionWrapper wrapper=cmisDictionaryService.findType(secondaryType);
      if (wrapper != null) {
        nodeService.addAspect(nodeRef,wrapper.getAlfrescoName(),null);
      }
 else {
        throw new CmisInvalidArgumentException(""String_Node_Str"" + secondaryType);
      }
    }
  }
 else {
    QName propertyQName=propDef.getPropertyAccessor().getMappedProperty();
    if (propertyQName == null) {
      throw new CmisConstraintException(""String_Node_Str"" + property.getId() + ""String_Node_Str"");
    }
    if (property.getId().equals(PropertyIds.NAME)) {
      if (!(value instanceof String)) {
        throw new CmisInvalidArgumentException(""String_Node_Str"");
      }
      try {
        fileFolderService.rename(nodeRef,value.toString());
      }
 catch (      FileExistsException e) {
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",e);
      }
catch (      FileNotFoundException e) {
        throw new CmisInvalidArgumentException(""String_Node_Str"" + nodeRef.getId() + ""String_Node_Str"");
      }
    }
 else {
      if (value == null) {
        nodeService.removeProperty(nodeRef,propertyQName);
      }
 else {
        if (propDef.getPropertyDefinition().getPropertyType() == PropertyType.INTEGER && value instanceof BigInteger) {
          org.alfresco.service.cmr.dictionary.PropertyDefinition def=dictionaryService.getProperty(propertyQName);
          QName dataDef=def.getDataType().getName();
          BigInteger bigValue=(BigInteger)value;
          if ((bigValue.compareTo(maxInt) > 0 || bigValue.compareTo(minInt) < 0) && dataDef.equals(DataTypeDefinition.INT)) {
            throw new CmisConstraintException(""String_Node_Str"" + propertyQName.getLocalName());
          }
          if ((bigValue.compareTo(maxLong) > 0 || bigValue.compareTo(minLong) < 0) && dataDef.equals(DataTypeDefinition.LONG)) {
            throw new CmisConstraintException(""String_Node_Str"" + propertyQName.getLocalName());
          }
        }
        nodeService.setProperty(nodeRef,propertyQName,value);
      }
    }
  }
}",0.8567935731749913
172084,"private void setAspectProperties(NodeRef nodeRef,boolean isNameChanging,CmisExtensionElement aspectExtension){
  if (aspectExtension.getChildren() == null) {
    return;
  }
  List<String> aspectsToAdd=new ArrayList<String>();
  List<String> aspectsToRemove=new ArrayList<String>();
  Map<QName,List<Serializable>> aspectProperties=new HashMap<QName,List<Serializable>>();
  for (  CmisExtensionElement extension : aspectExtension.getChildren()) {
    if (!ALFRESCO_EXTENSION_NAMESPACE.equals(extension.getNamespace())) {
      continue;
    }
    if (ASPECTS_TO_ADD.equals(extension.getName()) && (extension.getValue() != null)) {
      aspectsToAdd.add(extension.getValue());
    }
 else     if (ASPECTS_TO_REMOVE.equals(extension.getName()) && (extension.getValue() != null)) {
      aspectsToRemove.add(extension.getValue());
    }
 else     if (PROPERTIES.equals(extension.getName()) && (extension.getChildren() != null)) {
      for (      CmisExtensionElement property : extension.getChildren()) {
        if (!property.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        String propertyId=(property.getAttributes() == null ? null : property.getAttributes().get(""String_Node_Str""));
        if ((propertyId == null) || (property.getChildren() == null)) {
          continue;
        }
        PropertyType propertyType=PropertyType.STRING;
        DatatypeFactory df=null;
        if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.BOOLEAN;
        }
 else         if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.INTEGER;
        }
 else         if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.DATETIME;
          try {
            df=DatatypeFactory.newInstance();
          }
 catch (          DatatypeConfigurationException e) {
            throw new CmisRuntimeException(""String_Node_Str"" + e.getMessage(),e);
          }
        }
 else         if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.DECIMAL;
        }
        ArrayList<Serializable> values=new ArrayList<Serializable>();
        if (property.getChildren() != null) {
          try {
            for (            CmisExtensionElement valueElement : property.getChildren()) {
              if (""String_Node_Str"".equals(valueElement.getName())) {
switch (propertyType) {
case BOOLEAN:
                  values.add(Boolean.parseBoolean(valueElement.getValue()));
                break;
case DATETIME:
              values.add(df.newXMLGregorianCalendar(valueElement.getValue()).toGregorianCalendar());
            break;
case INTEGER:
          values.add(new BigInteger(valueElement.getValue()));
        break;
case DECIMAL:
      values.add(new BigDecimal(valueElement.getValue()));
    break;
default :
  values.add(valueElement.getValue());
}
}
}
}
 catch (Exception e) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + propertyId,e);
}
}
aspectProperties.put(QName.createQName(propertyId,namespaceService),values);
}
}
}
String aspectType=null;
try {
for (String aspect : aspectsToRemove) {
aspectType=aspect;
TypeDefinitionWrapper type=getType(aspect);
if (type == null) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + aspectType);
}
QName typeName=type.getAlfrescoName();
if (typeName.equals(ContentModel.ASPECT_HIDDEN)) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.removeAspect(nodeRef,typeName);
}
}
 else {
nodeService.removeAspect(nodeRef,typeName);
}
}
for (String aspect : aspectsToAdd) {
aspectType=aspect;
TypeDefinitionWrapper type=getType(aspect);
if (type == null) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + aspectType);
}
QName typeName=type.getAlfrescoName();
if (typeName.equals(ContentModel.ASPECT_HIDDEN)) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.addAspect(nodeRef,type.getAlfrescoName(),Collections.<QName,Serializable>emptyMap());
}
}
 else {
nodeService.addAspect(nodeRef,type.getAlfrescoName(),Collections.<QName,Serializable>emptyMap());
}
}
}
 catch (InvalidAspectException e) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + aspectType);
}
catch (InvalidNodeRefException e) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + nodeRef);
}
for (Map.Entry<QName,List<Serializable>> property : aspectProperties.entrySet()) {
if (property.getValue().isEmpty()) {
if (HiddenAspect.HIDDEN_PROPERTIES.contains(property.getKey())) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.removeProperty(nodeRef,property.getKey());
}
}
 else {
nodeService.removeProperty(nodeRef,property.getKey());
}
}
 else {
if (HiddenAspect.HIDDEN_PROPERTIES.contains(property.getKey())) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.setProperty(nodeRef,property.getKey(),property.getValue().size() == 1 ? property.getValue().get(0) : (Serializable)property.getValue());
}
}
 else {
nodeService.setProperty(nodeRef,property.getKey(),property.getValue().size() == 1 ? property.getValue().get(0) : (Serializable)property.getValue());
}
}
}
}","private void setAspectProperties(NodeRef nodeRef,boolean isNameChanging,CmisExtensionElement aspectExtension){
  if (aspectExtension.getChildren() == null) {
    return;
  }
  List<String> aspectsToAdd=new ArrayList<String>();
  List<String> aspectsToRemove=new ArrayList<String>();
  Map<QName,List<Serializable>> aspectProperties=new HashMap<QName,List<Serializable>>();
  for (  CmisExtensionElement extension : aspectExtension.getChildren()) {
    if (!ALFRESCO_EXTENSION_NAMESPACE.equals(extension.getNamespace())) {
      continue;
    }
    if (ASPECTS_TO_ADD.equals(extension.getName()) && (extension.getValue() != null)) {
      aspectsToAdd.add(extension.getValue());
    }
 else     if (ASPECTS_TO_REMOVE.equals(extension.getName()) && (extension.getValue() != null)) {
      aspectsToRemove.add(extension.getValue());
    }
 else     if (PROPERTIES.equals(extension.getName()) && (extension.getChildren() != null)) {
      for (      CmisExtensionElement property : extension.getChildren()) {
        if (!property.getName().startsWith(""String_Node_Str"")) {
          continue;
        }
        String propertyId=(property.getAttributes() == null ? null : property.getAttributes().get(""String_Node_Str""));
        if ((propertyId == null) || (property.getChildren() == null)) {
          continue;
        }
        PropertyType propertyType=PropertyType.STRING;
        DatatypeFactory df=null;
        if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.BOOLEAN;
        }
 else         if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.INTEGER;
        }
 else         if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.DATETIME;
          try {
            df=DatatypeFactory.newInstance();
          }
 catch (          DatatypeConfigurationException e) {
            throw new CmisRuntimeException(""String_Node_Str"" + e.getMessage(),e);
          }
        }
 else         if (property.getName().equals(""String_Node_Str"")) {
          propertyType=PropertyType.DECIMAL;
        }
        ArrayList<Serializable> values=new ArrayList<Serializable>();
        if (property.getChildren() != null) {
          for (          CmisExtensionElement valueElement : property.getChildren()) {
            if (""String_Node_Str"".equals(valueElement.getName())) {
switch (propertyType) {
case BOOLEAN:
                try {
                  values.add(Boolean.parseBoolean(valueElement.getValue()));
                }
 catch (                Exception e) {
                  throw new CmisInvalidArgumentException(""String_Node_Str"" + propertyId,e);
                }
              break;
case DATETIME:
            try {
              values.add(df.newXMLGregorianCalendar(valueElement.getValue()).toGregorianCalendar());
            }
 catch (            Exception e) {
              throw new CmisInvalidArgumentException(""String_Node_Str"" + propertyId,e);
            }
          break;
case INTEGER:
        BigInteger value=null;
      try {
        value=new BigInteger(valueElement.getValue());
      }
 catch (      Exception e) {
        throw new CmisInvalidArgumentException(""String_Node_Str"" + propertyId,e);
      }
    PropertyDefinitionWrapper propDef=cmisDictionaryService.findProperty(propertyId);
  if (propDef == null) {
    throw new CmisInvalidArgumentException(""String_Node_Str"" + propertyId + ""String_Node_Str"");
  }
QName propertyQName=propDef.getPropertyAccessor().getMappedProperty();
if (propertyQName == null) {
throw new CmisConstraintException(""String_Node_Str"" + propertyId + ""String_Node_Str"");
}
org.alfresco.service.cmr.dictionary.PropertyDefinition def=dictionaryService.getProperty(propertyQName);
QName dataDef=def.getDataType().getName();
if (dataDef.equals(DataTypeDefinition.INT) && (value.compareTo(maxInt) > 0 || value.compareTo(minInt) < 0)) {
throw new CmisConstraintException(""String_Node_Str"" + propertyId);
}
if (dataDef.equals(DataTypeDefinition.LONG) && (value.compareTo(maxLong) > 0 || value.compareTo(minLong) < 0)) {
throw new CmisConstraintException(""String_Node_Str"" + propertyId);
}
values.add(value);
break;
case DECIMAL:
try {
values.add(new BigDecimal(valueElement.getValue()));
}
 catch (Exception e) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + propertyId,e);
}
break;
default :
values.add(valueElement.getValue());
}
}
}
}
aspectProperties.put(QName.createQName(propertyId,namespaceService),values);
}
}
}
String aspectType=null;
try {
for (String aspect : aspectsToRemove) {
aspectType=aspect;
TypeDefinitionWrapper type=getType(aspect);
if (type == null) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + aspectType);
}
QName typeName=type.getAlfrescoName();
if (typeName.equals(ContentModel.ASPECT_HIDDEN)) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.removeAspect(nodeRef,typeName);
}
}
 else {
nodeService.removeAspect(nodeRef,typeName);
}
}
for (String aspect : aspectsToAdd) {
aspectType=aspect;
TypeDefinitionWrapper type=getType(aspect);
if (type == null) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + aspectType);
}
QName typeName=type.getAlfrescoName();
if (typeName.equals(ContentModel.ASPECT_HIDDEN)) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.addAspect(nodeRef,type.getAlfrescoName(),Collections.<QName,Serializable>emptyMap());
}
}
 else {
nodeService.addAspect(nodeRef,type.getAlfrescoName(),Collections.<QName,Serializable>emptyMap());
}
}
}
 catch (InvalidAspectException e) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + aspectType);
}
catch (InvalidNodeRefException e) {
throw new CmisInvalidArgumentException(""String_Node_Str"" + nodeRef);
}
for (Map.Entry<QName,List<Serializable>> property : aspectProperties.entrySet()) {
QName propertyQName=property.getKey();
if (property.getValue().isEmpty()) {
if (HiddenAspect.HIDDEN_PROPERTIES.contains(property.getKey())) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.removeProperty(nodeRef,propertyQName);
}
}
 else {
nodeService.removeProperty(nodeRef,property.getKey());
}
}
 else {
if (HiddenAspect.HIDDEN_PROPERTIES.contains(property.getKey())) {
if (hiddenAspect.isClientControlled(nodeRef) || aspectProperties.containsKey(ContentModel.PROP_CLIENT_CONTROLLED)) {
nodeService.setProperty(nodeRef,property.getKey(),property.getValue().size() == 1 ? property.getValue().get(0) : (Serializable)property.getValue());
}
}
 else {
Serializable value=(Serializable)property.getValue();
nodeService.setProperty(nodeRef,property.getKey(),property.getValue().size() == 1 ? property.getValue().get(0) : value);
}
}
}
}",0.8489689461243786
172085,"/** 
 * Convert a list of   {@link HistoricDetail} to a map with key-value pairs.
 * @param details the histroicDetails. Should be a list of {@link HistoricVariableUpdate}s.
 */
public Map<String,Object> convertHistoricDetails(List<HistoricDetail> details){
  Collections.sort(details,new Comparator<HistoricDetail>(){
    @Override public int compare(    HistoricDetail o1,    HistoricDetail o2){
      Long id1=Long.valueOf(o1.getId());
      Long id2=Long.valueOf(o2.getId());
      return -id1.compareTo(id2);
    }
  }
);
  Map<String,Object> variables=new HashMap<String,Object>();
  for (  HistoricDetail detail : details) {
    HistoricDetailVariableInstanceUpdateEntity varUpdate=(HistoricDetailVariableInstanceUpdateEntity)detail;
    if (!variables.containsKey(varUpdate.getVariableName())) {
      variables.put(varUpdate.getVariableName(),varUpdate.getValue());
    }
  }
  return variables;
}","/** 
 * Convert a list of   {@link HistoricDetail} to a map with key-value pairs.
 * @param details the histroicDetails. Should be a list of {@link HistoricVariableUpdate}s.
 */
public Map<String,Object> convertHistoricDetails(List<HistoricDetail> details){
  Collections.sort(details,new Comparator<HistoricDetail>(){
    @Override public int compare(    HistoricDetail o1,    HistoricDetail o2){
      Long id1=Long.valueOf(o1.getId());
      Long id2=Long.valueOf(o2.getId());
      return -id1.compareTo(id2);
    }
  }
);
  Map<String,Object> variables=new HashMap<String,Object>();
  for (  HistoricDetail detail : details) {
    HistoricVariableUpdate varUpdate=(HistoricVariableUpdate)detail;
    if (!variables.containsKey(varUpdate.getVariableName())) {
      variables.put(varUpdate.getVariableName(),varUpdate.getValue());
    }
  }
  return variables;
}",0.7799097065462754
172086,"/** 
 * Cleans the WAR file of all files relating to the currently installed version of the the Module.
 * @param warFileLocation    the war file location
 * @param moduleId          the module id
 * @param preview           indicates whether this is a preview installation
 * @param purge             Fully delete all files (including those marked ""PRESERVED"")
 * @throws IOException 
 */
public void uninstallModule(String moduleId,String warFileLocation,boolean preview,boolean purge) throws IOException {
  InstalledFiles installedFiles=new InstalledFiles(warFileLocation,moduleId);
  installedFiles.load();
  for (  String add : installedFiles.getAdds()) {
    removeFile(warFileLocation,add,preview);
  }
  for (  String mkdir : installedFiles.getMkdirs()) {
    removeFile(warFileLocation,mkdir,preview);
  }
  for (  Map.Entry<String,String> update : installedFiles.getUpdates().entrySet()) {
    if (preview == false) {
      TFile modified=new TFile(warFileLocation + update.getKey());
      TFile backup=new TFile(warFileLocation + update.getValue());
      backup.cp_rp(modified);
      backup.deleteOnExit();
    }
    outputVerboseMessage(""String_Node_Str"" + update.getKey() + ""String_Node_Str""+ update.getValue()+ ""String_Node_Str"",true);
  }
  String installedFilesPathInWar=installedFiles.getFilePathInWar();
  removeFile(warFileLocation,installedFilesPathInWar,preview);
  String modulePropertiesFileLocationInWar=ModuleDetailsHelper.getModulePropertiesFilePathInWar(moduleId);
  removeFile(warFileLocation,modulePropertiesFileLocationInWar,preview);
}","/** 
 * Cleans the WAR file of all files relating to the currently installed version of the the Module.
 * @param warFileLocation    the war file location
 * @param moduleId          the module id
 * @param preview           indicates whether this is a preview installation
 * @param purge             Fully delete all files (including those marked ""PRESERVED"")
 * @throws IOException 
 */
public void uninstallModule(String moduleId,String warFileLocation,boolean preview,boolean purge) throws IOException {
  InstalledFiles installedFiles=new InstalledFiles(warFileLocation,moduleId);
  installedFiles.load();
  for (  String add : installedFiles.getAdds()) {
    removeFile(warFileLocation,add,preview);
  }
  for (  String mkdir : installedFiles.getMkdirs()) {
    removeFile(warFileLocation,mkdir,preview);
  }
  for (  Map.Entry<String,String> update : installedFiles.getUpdates().entrySet()) {
    if (preview == false) {
      TFile modified=new TFile(warFileLocation + update.getKey());
      TFile backup=new TFile(warFileLocation + update.getValue());
      backup.cp_rp(modified);
      backup.rm();
    }
    outputVerboseMessage(""String_Node_Str"" + update.getKey() + ""String_Node_Str""+ update.getValue()+ ""String_Node_Str"",true);
  }
  String installedFilesPathInWar=installedFiles.getFilePathInWar();
  removeFile(warFileLocation,installedFilesPathInWar,preview);
  String modulePropertiesFileLocationInWar=ModuleDetailsHelper.getModulePropertiesFilePathInWar(moduleId);
  removeFile(warFileLocation,modulePropertiesFileLocationInWar,preview);
}",0.9955271565495208
172087,"public void testForcedInstall() throws Exception {
  manager.setVerbose(true);
  String warLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  String ampLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  this.manager.installModule(ampLocation,warLocation,false,false,false);
  this.manager.installModule(ampLocation,warLocation,false,true,false);
}","public void testForcedInstall() throws Exception {
  manager.setVerbose(true);
  String warLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  String ampLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  try {
    this.manager.installModule(ampLocation,warLocation,false,false,false);
    fail(""String_Node_Str"");
  }
 catch (  ModuleManagementToolException e) {
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
  this.manager.installModule(ampLocation,warLocation,false,true,false);
  this.manager.installModule(ampLocation,warLocation,false,true,false);
}",0.731006160164271
172088,"public void testExistingFilesInWar() throws Exception {
  manager.setVerbose(true);
  String warLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  String ampLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  try {
    this.manager.installModule(ampLocation,warLocation,false,false,true);
  }
 catch (  ModuleManagementToolException exception) {
    assertTrue(exception.getMessage().contains(""String_Node_Str""));
  }
  this.manager.installModule(ampLocation,warLocation,false,true,true);
  checkContentsOfFile(warLocation + ""String_Node_Str"",""String_Node_Str"");
  checkContentsOfFile(warLocation + ""String_Node_Str"",""String_Node_Str"");
}","public void testExistingFilesInWar() throws Exception {
  manager.setVerbose(true);
  String warLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  String ampLocation=getFileLocation(""String_Node_Str"",""String_Node_Str"");
  try {
    this.manager.installModule(ampLocation,warLocation,false,false,true);
  }
 catch (  ModuleManagementToolException exception) {
    assertTrue(exception.getMessage().contains(""String_Node_Str""));
  }
  this.manager.installModule(ampLocation,warLocation,false,true,true);
  checkContentsOfFile(warLocation + ""String_Node_Str"",""String_Node_Str"");
  checkContentsOfFile(warLocation + ""String_Node_Str"",""String_Node_Str"");
  this.manager.installModule(ampLocation,warLocation,false,true,false);
}",0.948644793152639
172089,"/** 
 * Helper setter of the mimetypeService. 
 * @param mimetypeService
 */
public void setMimetypeService(MimetypeService mimetypeService){
  this.mimetypeService=mimetypeService;
}","public void setMimetypeService(MimetypeService mimetypeService){
  this.mimetypeService=mimetypeService;
}",0.7335640138408305
172090,"/** 
 * Installs a given AMP file into a given WAR file.
 * @param ampFileLocation   the location of the AMP file to be installed
 * @param warFileLocation   the location of the WAR file into which the AMP file is to be installed.
 * @param preview           indicates whether this should be a preview install.  This means that the process of installation will be followed and reported, but the WAR file will not be modified.
 * @param forceInstall      indicates whether the installed files will be replaces reguarless of the currently installed version of the AMP.  Generally used during development of the AMP.
 * @param backupWAR         indicates whether we should backup the war we are modifying or not
 */
public void installModule(String ampFileLocation,String warFileLocation,boolean preview,boolean forceInstall,boolean backupWAR){
  try {
    outputMessage(""String_Node_Str"" + ampFileLocation + ""String_Node_Str""+ warFileLocation+ ""String_Node_Str"");
    java.io.File theWar=new File(warFileLocation,DETECTOR_AMP_AND_WAR);
    if (preview == false) {
      File moduleDir=new File(warFileLocation + WarHelper.MODULE_NAMESPACE_DIR,DETECTOR_AMP_AND_WAR);
      if (moduleDir.exists() == false) {
        moduleDir.mkdir();
      }
      File backUpDir=new File(warFileLocation + BACKUP_DIR,DETECTOR_AMP_AND_WAR);
      if (backUpDir.exists() == false) {
        backUpDir.mkdir();
      }
      if (backupWAR == true) {
        java.io.File warFile=new java.io.File(warFileLocation);
        if (warFile.exists() == false) {
          throw new ModuleManagementToolException(""String_Node_Str"" + warFileLocation + ""String_Node_Str"");
        }
        String backupLocation=warFileLocation + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
        java.io.File backup=new java.io.File(backupLocation);
        copyFile(warFile,backup);
        outputMessage(""String_Node_Str"" + backupLocation + ""String_Node_Str"");
      }
    }
    String propertiesLocation=ampFileLocation + ""String_Node_Str"";
    ModuleDetails installingModuleDetails=ModuleDetailsHelper.createModuleDetailsFromPropertyLocation(propertiesLocation);
    if (installingModuleDetails == null) {
      throw new ModuleManagementToolException(""String_Node_Str"" + ampFileLocation + ""String_Node_Str"");
    }
    String installingId=installingModuleDetails.getId();
    VersionNumber installingVersion=installingModuleDetails.getVersion();
    warHelper.checkCompatibleVersion(theWar,installingModuleDetails);
    warHelper.checkCompatibleEdition(theWar,installingModuleDetails);
    warHelper.checkModuleDependencies(theWar,installingModuleDetails);
    ModuleDetails installedModuleDetails=warHelper.getModuleDetailsOrAlias(theWar,installingModuleDetails);
    if (installedModuleDetails != null) {
      String installedId=installedModuleDetails.getId();
      VersionNumber installedVersion=installedModuleDetails.getVersion();
      int compareValue=installedVersion.compareTo(installingVersion);
      if (compareValue > 0) {
        outputMessage(""String_Node_Str"" + ""String_Node_Str"",false);
        return;
      }
      if (forceInstall == true) {
        outputMessage(""String_Node_Str"",false);
      }
      if (compareValue == 0) {
        outputMessage(""String_Node_Str"",false);
      }
      if (forceInstall == true || compareValue <= 0) {
        outputMessage(""String_Node_Str"" + installedVersion + ""String_Node_Str""+ installedId+ ""String_Node_Str"",false);
        uninstallModule(installedId,warFileLocation,preview,true);
      }
    }
    Properties fileMappingProperties=null;
    Properties customFileMappingProperties=getCustomFileMappings(ampFileLocation);
    if (customFileMappingProperties == null) {
      fileMappingProperties=defaultFileMappingProperties;
    }
 else {
      fileMappingProperties=new Properties();
      String inheritDefaultStr=customFileMappingProperties.getProperty(PROP_INHERIT_DEFAULT,""String_Node_Str"");
      if (inheritDefaultStr.equalsIgnoreCase(""String_Node_Str"")) {
        fileMappingProperties.putAll(defaultFileMappingProperties);
      }
      fileMappingProperties.putAll(customFileMappingProperties);
      fileMappingProperties.remove(PROP_INHERIT_DEFAULT);
    }
    outputMessage(""String_Node_Str"" + installingVersion + ""String_Node_Str""+ installingId+ ""String_Node_Str"");
    InstalledFiles installedFiles=new InstalledFiles(warFileLocation,installingId);
    for (    Map.Entry<Object,Object> entry : fileMappingProperties.entrySet()) {
      String mappingSource=(String)entry.getKey();
      if (mappingSource.length() == 0 || !mappingSource.startsWith(""String_Node_Str"")) {
        throw new AlfrescoRuntimeException(""String_Node_Str"" + mappingSource);
      }
      String mappingTarget=(String)entry.getValue();
      if (mappingTarget.length() == 0 || !mappingTarget.startsWith(""String_Node_Str"")) {
        throw new AlfrescoRuntimeException(""String_Node_Str"" + mappingTarget + ""String_Node_Str"");
      }
      copyToWar(ampFileLocation,warFileLocation,mappingSource,mappingTarget,installedFiles,preview);
      if (preview == false) {
        File source=new File(ampFileLocation + ""String_Node_Str"" + mappingSource,DETECTOR_AMP_AND_WAR);
        if (source != null && source.list() != null) {
          File destination=new File(warFileLocation + ""String_Node_Str"" + mappingTarget,DETECTOR_AMP_AND_WAR);
          if (destination == null) {
            throw new ModuleManagementToolException(""String_Node_Str"" + mappingTarget + ""String_Node_Str"");
          }
          destination.copyAllFrom(source);
        }
      }
    }
    if (preview == false) {
      installedFiles.save();
      installingModuleDetails.setInstallState(ModuleInstallState.INSTALLED);
      installingModuleDetails.setInstallDate(new Date());
      ModuleDetailsHelper.saveModuleDetails(warFileLocation,installingModuleDetails);
      File.update();
      java.io.File warFile=new java.io.File(warFileLocation);
      if (warFile.exists()) {
        warFile.setLastModified(System.currentTimeMillis());
      }
    }
  }
 catch (  ZipWarningException ignore) {
  }
catch (  ZipControllerException exception) {
    throw new ModuleManagementToolException(""String_Node_Str"",exception);
  }
catch (  IOException exception) {
    throw new ModuleManagementToolException(""String_Node_Str"",exception);
  }
}","/** 
 * Installs a given AMP file into a given WAR file.
 * @param ampFileLocation   the location of the AMP file to be installed
 * @param warFileLocation   the location of the WAR file into which the AMP file is to be installed.
 * @param preview           indicates whether this should be a preview install.  This means that the process of installation will be followed and reported, but the WAR file will not be modified.
 * @param forceInstall      indicates whether the installed files will be replaces reguarless of the currently installed version of the AMP.  Generally used during development of the AMP.
 * @param backupWAR         indicates whether we should backup the war we are modifying or not
 */
public void installModule(String ampFileLocation,String warFileLocation,boolean preview,boolean forceInstall,boolean backupWAR){
  try {
    outputMessage(""String_Node_Str"" + ampFileLocation + ""String_Node_Str""+ warFileLocation+ ""String_Node_Str"");
    java.io.File theWar=new File(warFileLocation,DETECTOR_AMP_AND_WAR);
    if (!theWar.exists()) {
      throw new ModuleManagementToolException(""String_Node_Str"" + warFileLocation + ""String_Node_Str"");
    }
    if (preview == false) {
      File moduleDir=new File(warFileLocation + WarHelper.MODULE_NAMESPACE_DIR,DETECTOR_AMP_AND_WAR);
      if (moduleDir.exists() == false) {
        moduleDir.mkdir();
      }
      File backUpDir=new File(warFileLocation + BACKUP_DIR,DETECTOR_AMP_AND_WAR);
      if (backUpDir.exists() == false) {
        backUpDir.mkdir();
      }
      if (backupWAR == true) {
        java.io.File warFile=new java.io.File(warFileLocation);
        String backupLocation=warFileLocation + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
        java.io.File backup=new java.io.File(backupLocation);
        copyFile(warFile,backup);
        outputMessage(""String_Node_Str"" + backupLocation + ""String_Node_Str"");
      }
    }
    String propertiesLocation=ampFileLocation + ""String_Node_Str"";
    ModuleDetails installingModuleDetails=ModuleDetailsHelper.createModuleDetailsFromPropertyLocation(propertiesLocation);
    if (installingModuleDetails == null) {
      throw new ModuleManagementToolException(""String_Node_Str"" + ampFileLocation + ""String_Node_Str"");
    }
    String installingId=installingModuleDetails.getId();
    VersionNumber installingVersion=installingModuleDetails.getVersion();
    warHelper.checkCompatibleVersion(theWar,installingModuleDetails);
    warHelper.checkCompatibleEdition(theWar,installingModuleDetails);
    warHelper.checkModuleDependencies(theWar,installingModuleDetails);
    ModuleDetails installedModuleDetails=warHelper.getModuleDetailsOrAlias(theWar,installingModuleDetails);
    if (installedModuleDetails != null) {
      String installedId=installedModuleDetails.getId();
      VersionNumber installedVersion=installedModuleDetails.getVersion();
      int compareValue=installedVersion.compareTo(installingVersion);
      if (compareValue > 0) {
        outputMessage(""String_Node_Str"" + ""String_Node_Str"",false);
        return;
      }
      if (forceInstall == true) {
        outputMessage(""String_Node_Str"",false);
      }
      if (compareValue == 0) {
        outputMessage(""String_Node_Str"",false);
      }
      if (forceInstall == true || compareValue <= 0) {
        outputMessage(""String_Node_Str"" + installedVersion + ""String_Node_Str""+ installedId+ ""String_Node_Str"",false);
        uninstallModule(installedId,warFileLocation,preview,true);
      }
    }
    Properties fileMappingProperties=null;
    Properties customFileMappingProperties=getCustomFileMappings(ampFileLocation);
    if (customFileMappingProperties == null) {
      fileMappingProperties=defaultFileMappingProperties;
    }
 else {
      fileMappingProperties=new Properties();
      String inheritDefaultStr=customFileMappingProperties.getProperty(PROP_INHERIT_DEFAULT,""String_Node_Str"");
      if (inheritDefaultStr.equalsIgnoreCase(""String_Node_Str"")) {
        fileMappingProperties.putAll(defaultFileMappingProperties);
      }
      fileMappingProperties.putAll(customFileMappingProperties);
      fileMappingProperties.remove(PROP_INHERIT_DEFAULT);
    }
    outputMessage(""String_Node_Str"" + installingVersion + ""String_Node_Str""+ installingId+ ""String_Node_Str"");
    InstalledFiles installedFiles=new InstalledFiles(warFileLocation,installingId);
    for (    Map.Entry<Object,Object> entry : fileMappingProperties.entrySet()) {
      String mappingSource=(String)entry.getKey();
      if (mappingSource.length() == 0 || !mappingSource.startsWith(""String_Node_Str"")) {
        throw new AlfrescoRuntimeException(""String_Node_Str"" + mappingSource);
      }
      String mappingTarget=(String)entry.getValue();
      if (mappingTarget.length() == 0 || !mappingTarget.startsWith(""String_Node_Str"")) {
        throw new AlfrescoRuntimeException(""String_Node_Str"" + mappingTarget + ""String_Node_Str"");
      }
      copyToWar(ampFileLocation,warFileLocation,mappingSource,mappingTarget,installedFiles,preview);
      if (preview == false) {
        File source=new File(ampFileLocation + ""String_Node_Str"" + mappingSource,DETECTOR_AMP_AND_WAR);
        if (source != null && source.list() != null) {
          File destination=new File(warFileLocation + ""String_Node_Str"" + mappingTarget,DETECTOR_AMP_AND_WAR);
          if (destination == null) {
            throw new ModuleManagementToolException(""String_Node_Str"" + mappingTarget + ""String_Node_Str"");
          }
          destination.copyAllFrom(source);
        }
      }
    }
    if (preview == false) {
      installedFiles.save();
      installingModuleDetails.setInstallState(ModuleInstallState.INSTALLED);
      installingModuleDetails.setInstallDate(new Date());
      ModuleDetailsHelper.saveModuleDetails(warFileLocation,installingModuleDetails);
      File.update();
      java.io.File warFile=new java.io.File(warFileLocation);
      if (warFile.exists()) {
        warFile.setLastModified(System.currentTimeMillis());
      }
    }
  }
 catch (  ZipWarningException ignore) {
  }
catch (  ZipControllerException exception) {
    throw new ModuleManagementToolException(""String_Node_Str"",exception);
  }
catch (  IOException exception) {
    throw new ModuleManagementToolException(""String_Node_Str"",exception);
  }
}",0.9765717441034946
172091,"/** 
 * Open the file - Repo Specific implementation 
 */
public NetworkFile openFile(SrvSession session,TreeConnection tree,NodeRef rootNode,String path,OpenFileMode mode,boolean truncate) throws IOException {
  ContentContext ctx=(ContentContext)tree.getContext();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + path + ""String_Node_Str""+ mode);
  }
  try {
    String name=path;
    if (session.isPseudoFilesEnabled() && ctx.isPseudoFilesEnabled()) {
      String[] paths=FileName.splitPath(name);
      NodeRef dirNodeRef=getNodeForPath(rootNode,paths[0]);
      if (ctx.getPseudoFileOverlay().isPseudoFile(dirNodeRef,paths[1])) {
        PseudoFile pfile=ctx.getPseudoFileOverlay().getPseudoFile(dirNodeRef,paths[1]);
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + pfile);
        }
        return pfile.getFile(path);
      }
    }
    NodeRef nodeRef=getNodeForPath(rootNode,path);
    boolean readOnly=false;
switch (mode) {
case READ_ONLY:
case ATTRIBUTES_ONLY:
      if (permissionService.hasPermission(nodeRef,PermissionService.READ) == AccessStatus.DENIED) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + path);
        }
        throw new AccessDeniedException(""String_Node_Str"" + path);
      }
    readOnly=true;
  break;
case READ_WRITE:
case WRITE_ONLY:
if (permissionService.hasPermission(nodeRef,PermissionService.WRITE) == AccessStatus.DENIED) {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + path);
  }
  throw new AccessDeniedException(""String_Node_Str"" + path);
}
lockService.checkForLock(nodeRef);
readOnly=false;
break;
case DELETE:
lockService.checkForLock(nodeRef);
}
NodeRef linkRef=(NodeRef)nodeService.getProperty(nodeRef,ContentModel.PROP_LINK_DESTINATION);
NetworkFile netFile=null;
if (linkRef == null) {
FileInfo fileInfo=cifsHelper.getFileInformation(nodeRef,""String_Node_Str"",false,false);
if (fileInfo.isDirectory()) {
logger.debug(""String_Node_Str"");
netFile=new AlfrescoFolder(path,fileInfo,readOnly);
}
 else {
switch (mode) {
case READ_ONLY:
logger.debug(""String_Node_Str"");
netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,getCifsHelper(),nodeRef,path,true,session);
netFile.setGrantedAccess(NetworkFile.READONLY);
break;
case READ_WRITE:
{
logger.debug(""String_Node_Str"");
File file=TempFileProvider.createTempFile(""String_Node_Str"",""String_Node_Str"");
if (!truncate) {
ContentReader reader=contentService.getReader(nodeRef,ContentModel.PROP_CONTENT);
if (reader != null) {
reader.getContent(file);
}
}
netFile=new TempNetworkFile(file,name);
if (truncate) {
netFile.truncateFile(0);
}
if (netFile != null) {
long id=DefaultTypeConverter.INSTANCE.convert(Long.class,nodeService.getProperty(nodeRef,ContentModel.PROP_NODE_DBID));
netFile.setFileId((int)(id & 0xFFFFFFFFL));
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ nodeRef+ ""String_Node_Str""+ netFile);
}
netFile.setGrantedAccess(NetworkFile.READWRITE);
}
break;
case ATTRIBUTES_ONLY:
logger.debug(""String_Node_Str"");
netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,getCifsHelper(),nodeRef,path,true,session);
netFile.setGrantedAccess(NetworkFile.READONLY);
break;
case DELETE:
logger.debug(""String_Node_Str"");
netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,getCifsHelper(),nodeRef,path,true,session);
netFile.setGrantedAccess(NetworkFile.READONLY);
break;
case WRITE_ONLY:
{
logger.debug(""String_Node_Str"");
File file=TempFileProvider.createTempFile(""String_Node_Str"",""String_Node_Str"");
netFile=new TempNetworkFile(file,name);
if (netFile != null) {
long id=DefaultTypeConverter.INSTANCE.convert(Long.class,nodeService.getProperty(nodeRef,ContentModel.PROP_NODE_DBID));
netFile.setFileId((int)(id & 0xFFFFFFFFL));
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ nodeRef+ ""String_Node_Str""+ netFile);
}
netFile.setGrantedAccess(NetworkFile.READWRITE);
}
}
}
}
 else {
String srvName=null;
SMBServer cifsServer=(SMBServer)session.getServer().getConfiguration().findServer(""String_Node_Str"");
if (cifsServer != null) {
srvName=cifsServer.getServerName();
}
 else {
srvName=InetAddress.getLocalHost().getHostName();
}
String pathl=getPathForNode(rootNode,linkRef);
path=pathl.replace(FileName.DOS_SEPERATOR,'/');
StringBuilder urlStr=new StringBuilder();
urlStr.append(""String_Node_Str"");
urlStr.append(""String_Node_Str"");
urlStr.append(srvName);
urlStr.append(""String_Node_Str"");
urlStr.append(tree.getSharedDevice().getName());
urlStr.append(pathl);
urlStr.append(""String_Node_Str"");
byte[] urlData=urlStr.toString().getBytes();
FileInfo fInfo=getCifsHelper().getFileInformation(nodeRef,false,isLockedFilesAsOffline);
fInfo.setFileSize(urlData.length);
netFile=new LinkMemoryNetworkFile(fInfo.getFileName(),urlData,fInfo,nodeRef);
netFile.setFullName(path);
}
if (netFile != null) {
long id=DefaultTypeConverter.INSTANCE.convert(Long.class,nodeService.getProperty(nodeRef,ContentModel.PROP_NODE_DBID));
netFile.setFileId((int)(id & 0xFFFFFFFFL));
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + path + ""String_Node_Str""+ netFile);
}
return netFile;
}
 catch (NodeLockedException nle) {
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + path);
}
throw new AccessDeniedException(""String_Node_Str"" + path);
}
catch (org.alfresco.repo.security.permissions.AccessDeniedException ex) {
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + path);
}
throw new AccessDeniedException(""String_Node_Str"" + path);
}
catch (AlfrescoRuntimeException ex) {
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"",ex);
}
throw new IOException(""String_Node_Str"" + path,ex);
}
}","/** 
 * Open the file - Repo Specific implementation 
 */
public NetworkFile openFile(SrvSession session,TreeConnection tree,NodeRef rootNode,String path,OpenFileMode mode,boolean truncate) throws IOException {
  ContentContext ctx=(ContentContext)tree.getContext();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + path + ""String_Node_Str""+ mode);
  }
  try {
    String name=path;
    if (session.isPseudoFilesEnabled() && ctx.isPseudoFilesEnabled()) {
      String[] paths=FileName.splitPath(name);
      NodeRef dirNodeRef=getNodeForPath(rootNode,paths[0]);
      if (ctx.getPseudoFileOverlay().isPseudoFile(dirNodeRef,paths[1])) {
        PseudoFile pfile=ctx.getPseudoFileOverlay().getPseudoFile(dirNodeRef,paths[1]);
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + pfile);
        }
        return pfile.getFile(path);
      }
    }
    NodeRef nodeRef=getNodeForPath(rootNode,path);
    boolean readOnly=false;
switch (mode) {
case READ_ONLY:
case ATTRIBUTES_ONLY:
      if (permissionService.hasPermission(nodeRef,PermissionService.READ) == AccessStatus.DENIED) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + path);
        }
        throw new AccessDeniedException(""String_Node_Str"" + path);
      }
    readOnly=true;
  break;
case READ_WRITE:
case WRITE_ONLY:
if (permissionService.hasPermission(nodeRef,PermissionService.WRITE) == AccessStatus.DENIED) {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + path);
  }
  throw new AccessDeniedException(""String_Node_Str"" + path);
}
lockService.checkForLock(nodeRef);
readOnly=false;
break;
case DELETE:
lockService.checkForLock(nodeRef);
}
NodeRef linkRef=(NodeRef)nodeService.getProperty(nodeRef,ContentModel.PROP_LINK_DESTINATION);
NetworkFile netFile=null;
if (linkRef == null) {
FileInfo fileInfo=cifsHelper.getFileInformation(nodeRef,""String_Node_Str"",false,false);
if (fileInfo.isDirectory()) {
logger.debug(""String_Node_Str"");
netFile=new AlfrescoFolder(path,fileInfo,readOnly);
}
 else {
switch (mode) {
case READ_ONLY:
logger.debug(""String_Node_Str"");
netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,getCifsHelper(),nodeRef,path,true,session);
netFile.setGrantedAccess(NetworkFile.READONLY);
break;
case READ_WRITE:
{
logger.debug(""String_Node_Str"");
File file=TempFileProvider.createTempFile(""String_Node_Str"",""String_Node_Str"");
if (!truncate) {
ContentReader reader=contentService.getReader(nodeRef,ContentModel.PROP_CONTENT);
if (reader != null) {
reader.getContent(file);
}
}
netFile=new TempNetworkFile(file,name);
netFile.setGrantedAccess(NetworkFile.READWRITE);
if (truncate) {
netFile.truncateFile(0);
}
if (netFile != null) {
long id=DefaultTypeConverter.INSTANCE.convert(Long.class,nodeService.getProperty(nodeRef,ContentModel.PROP_NODE_DBID));
netFile.setFileId((int)(id & 0xFFFFFFFFL));
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ nodeRef+ ""String_Node_Str""+ netFile);
}
}
break;
case ATTRIBUTES_ONLY:
logger.debug(""String_Node_Str"");
netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,getCifsHelper(),nodeRef,path,true,session);
netFile.setGrantedAccess(NetworkFile.READONLY);
break;
case DELETE:
logger.debug(""String_Node_Str"");
netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,getCifsHelper(),nodeRef,path,true,session);
netFile.setGrantedAccess(NetworkFile.READONLY);
break;
case WRITE_ONLY:
{
logger.debug(""String_Node_Str"");
File file=TempFileProvider.createTempFile(""String_Node_Str"",""String_Node_Str"");
netFile=new TempNetworkFile(file,name);
netFile.setGrantedAccess(NetworkFile.READWRITE);
if (netFile != null) {
long id=DefaultTypeConverter.INSTANCE.convert(Long.class,nodeService.getProperty(nodeRef,ContentModel.PROP_NODE_DBID));
netFile.setFileId((int)(id & 0xFFFFFFFFL));
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ nodeRef+ ""String_Node_Str""+ netFile);
}
}
}
}
}
 else {
String srvName=null;
SMBServer cifsServer=(SMBServer)session.getServer().getConfiguration().findServer(""String_Node_Str"");
if (cifsServer != null) {
srvName=cifsServer.getServerName();
}
 else {
srvName=InetAddress.getLocalHost().getHostName();
}
String pathl=getPathForNode(rootNode,linkRef);
path=pathl.replace(FileName.DOS_SEPERATOR,'/');
StringBuilder urlStr=new StringBuilder();
urlStr.append(""String_Node_Str"");
urlStr.append(""String_Node_Str"");
urlStr.append(srvName);
urlStr.append(""String_Node_Str"");
urlStr.append(tree.getSharedDevice().getName());
urlStr.append(pathl);
urlStr.append(""String_Node_Str"");
byte[] urlData=urlStr.toString().getBytes();
FileInfo fInfo=getCifsHelper().getFileInformation(nodeRef,false,isLockedFilesAsOffline);
fInfo.setFileSize(urlData.length);
netFile=new LinkMemoryNetworkFile(fInfo.getFileName(),urlData,fInfo,nodeRef);
netFile.setFullName(path);
}
if (netFile != null) {
long id=DefaultTypeConverter.INSTANCE.convert(Long.class,nodeService.getProperty(nodeRef,ContentModel.PROP_NODE_DBID));
netFile.setFileId((int)(id & 0xFFFFFFFFL));
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + path + ""String_Node_Str""+ netFile);
}
return netFile;
}
 catch (NodeLockedException nle) {
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + path);
}
throw new AccessDeniedException(""String_Node_Str"" + path);
}
catch (org.alfresco.repo.security.permissions.AccessDeniedException ex) {
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + path);
}
throw new AccessDeniedException(""String_Node_Str"" + path);
}
catch (AlfrescoRuntimeException ex) {
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"",ex);
}
throw new IOException(""String_Node_Str"" + path,ex);
}
}",0.882788296041308
172092,"/** 
 * Parse and validate the parameter string and create a device context object for this instance of the shared device. The same DeviceInterface implementation may be used for multiple shares. <p>
 * @deprecated - no longer used.   Construction of context is via spring now. 
 * @param deviceName The name of the device
 * @param cfg ConfigElement the configuration of the device context.
 * @return DeviceContext
 * @exception DeviceContextException
 */
public DeviceContext createContext(String deviceName,ConfigElement cfg) throws DeviceContextException {
  throw new DeviceContextException(""String_Node_Str"");
}","/** 
 * Parse and validate the parameter string and create a device context object for this instance of the shared device. The same DeviceInterface implementation may be used for multiple shares. <p>
 * @deprecated - no longer used.   Construction of context is via spring now. 
 * @param deviceName The name of the device
 * @param cfg ConfigElement the configuration of the device context.
 * @return DeviceContext
 * @exception DeviceContextException
 */
public DeviceContext createContext(String deviceName,ConfigElement cfg) throws DeviceContextException {
  logger.error(""String_Node_Str"");
  throw new DeviceContextException(""String_Node_Str"");
}",0.9221085759244688
172093,"/** 
 * Set file information
 * @param sess SrvSession
 * @param tree TreeConnection
 * @param name String
 * @param info FileInfo
 * @exception IOException
 */
public void setFileInformation(SrvSession sess,final TreeConnection tree,final String name,final FileInfo info) throws IOException {
  final ContentContext ctx=(ContentContext)tree.getContext();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ info);
  }
  NetworkFile networkFile=info.getNetworkFile();
  try {
    if (sess.isPseudoFilesEnabled() && ctx.isPseudoFilesEnabled()) {
      String[] paths=FileName.splitPath(name);
      NodeRef dirNodeRef=getNodeForPath(tree,paths[0]);
      if (ctx.getPseudoFileOverlay().isPseudoFile(dirNodeRef,paths[1])) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
        }
        return;
      }
    }
    NodeRef nodeRef=getNodeForPath(tree,name);
    if (permissionService.hasPermission(nodeRef,PermissionService.WRITE) == AccessStatus.DENIED) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name);
      }
      throw new AccessDeniedException(""String_Node_Str"" + name);
    }
    getPolicyFilter().disableBehaviour(ContentModel.ASPECT_VERSIONABLE);
    if (info.hasSetFlag(FileInfo.SetDeleteOnClose) && info.hasDeleteOnClose()) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name);
      }
      if (permissionService.hasPermission(nodeRef,PermissionService.DELETE) == AccessStatus.DENIED) {
        throw new AccessDeniedException(""String_Node_Str"" + name);
      }
      lockService.checkForLock(nodeRef);
      if (fileFolderService.exists(nodeRef)) {
        boolean isFolder=true;
        ContentFileInfo cInfo=getCifsHelper().getFileInformation(nodeRef,false,isLockedFilesAsOffline);
        if (cInfo != null && cInfo.isDirectory() == false) {
          isFolder=false;
        }
        if (isFolder == true && getCifsHelper().isFolderEmpty(nodeRef) == false) {
          throw new DirectoryNotEmptyException(name);
        }
      }
    }
    if (info.isHidden() && !nodeService.hasAspect(nodeRef,ContentModel.ASPECT_HIDDEN)) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name);
      }
    }
    if (info.hasSetFlag(FileInfo.SetAllocationSize)) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + info.getAllocationSize());
      }
    }
    Map<QName,Serializable> auditableProps=new HashMap<QName,Serializable>(5);
    if (info.hasSetFlag(FileInfo.SetCreationDate) && info.hasCreationDateTime()) {
      Date createDate=new Date(info.getCreationDateTime());
      auditableProps.put(ContentModel.PROP_CREATED,createDate);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ createDate);
      }
    }
    if (info.hasSetFlag(FileInfo.SetModifyDate) && info.hasModifyDateTime()) {
      Date modifyDate=new Date(info.getModifyDateTime());
      auditableProps.put(ContentModel.PROP_MODIFIED,modifyDate);
      if (networkFile != null && !networkFile.isReadOnly()) {
        networkFile.setModifyDate(info.getModifyDateTime());
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ modifyDate);
      }
    }
    if (auditableProps.size() > 0) {
      getPolicyFilter().disableBehaviour(nodeRef,ContentModel.ASPECT_AUDITABLE);
      nodeService.addProperties(nodeRef,auditableProps);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + auditableProps + ""String_Node_Str""+ name);
      }
    }
    return;
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + name);
    }
    throw new AccessDeniedException(""String_Node_Str"" + name);
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",ex);
    }
    throw new IOException(""String_Node_Str"" + name,ex);
  }
}","/** 
 * Set file information
 * @param sess SrvSession
 * @param tree TreeConnection
 * @param name String
 * @param info FileInfo
 * @exception IOException
 */
public void setFileInformation(SrvSession sess,final TreeConnection tree,final String name,final FileInfo info) throws IOException {
  final ContentContext ctx=(ContentContext)tree.getContext();
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ info);
  }
  NetworkFile networkFile=info.getNetworkFile();
  try {
    if (sess.isPseudoFilesEnabled() && ctx.isPseudoFilesEnabled()) {
      String[] paths=FileName.splitPath(name);
      NodeRef dirNodeRef=getNodeForPath(tree,paths[0]);
      if (ctx.getPseudoFileOverlay().isPseudoFile(dirNodeRef,paths[1])) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
        }
        return;
      }
    }
    NodeRef nodeRef=getNodeForPath(tree,name);
    if (permissionService.hasPermission(nodeRef,PermissionService.WRITE) == AccessStatus.DENIED) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name);
      }
      throw new AccessDeniedException(""String_Node_Str"" + name);
    }
    getPolicyFilter().disableBehaviour(ContentModel.ASPECT_VERSIONABLE);
    if (info.hasSetFlag(FileInfo.SetDeleteOnClose) && info.hasDeleteOnClose()) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name);
      }
      if (permissionService.hasPermission(nodeRef,PermissionService.DELETE) == AccessStatus.DENIED) {
        throw new AccessDeniedException(""String_Node_Str"" + name);
      }
      lockService.checkForLock(nodeRef);
      if (fileFolderService.exists(nodeRef)) {
        boolean isFolder=true;
        ContentFileInfo cInfo=getCifsHelper().getFileInformation(nodeRef,false,isLockedFilesAsOffline);
        if (cInfo != null && cInfo.isDirectory() == false) {
          isFolder=false;
        }
        if (isFolder == true && getCifsHelper().isFolderEmpty(nodeRef) == false) {
          throw new DirectoryNotEmptyException(name);
        }
      }
    }
    if (info.hasSetFlag(FileInfo.SetAttributes)) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ info.getFileAttributes());
      }
      if (info.isHidden()) {
        if (!nodeService.hasAspect(nodeRef,ContentModel.ASPECT_HIDDEN)) {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + name);
          }
        }
      }
 else {
        if (nodeService.hasAspect(nodeRef,ContentModel.ASPECT_HIDDEN)) {
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + name);
          }
        }
      }
    }
    if (info.hasSetFlag(FileInfo.SetAllocationSize)) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + info.getAllocationSize());
      }
    }
    Map<QName,Serializable> auditableProps=new HashMap<QName,Serializable>(5);
    if (info.hasSetFlag(FileInfo.SetCreationDate) && info.hasCreationDateTime()) {
      Date createDate=new Date(info.getCreationDateTime());
      auditableProps.put(ContentModel.PROP_CREATED,createDate);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ createDate);
      }
    }
    if (info.hasSetFlag(FileInfo.SetModifyDate) && info.hasModifyDateTime()) {
      Date modifyDate=new Date(info.getModifyDateTime());
      auditableProps.put(ContentModel.PROP_MODIFIED,modifyDate);
      if (networkFile != null && !networkFile.isReadOnly()) {
        networkFile.setModifyDate(info.getModifyDateTime());
      }
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + name + ""String_Node_Str""+ modifyDate);
      }
    }
    if (auditableProps.size() > 0) {
      getPolicyFilter().disableBehaviour(nodeRef,ContentModel.ASPECT_AUDITABLE);
      nodeService.addProperties(nodeRef,auditableProps);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + auditableProps + ""String_Node_Str""+ name);
      }
    }
    return;
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + name);
    }
    throw new AccessDeniedException(""String_Node_Str"" + name);
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"",ex);
    }
    throw new IOException(""String_Node_Str"" + name,ex);
  }
}",0.94829584975655
172094,"@SuppressWarnings(""String_Node_Str"") @Override protected List<ContentDataEntity> getContentDataEntitiesForNodes(Set<Long> nodeIds){
  if (nodeIds.size() == 0) {
    return Collections.emptyList();
  }
  IdsEntity idsEntity=new IdsEntity();
  idsEntity.setIds(new ArrayList<Long>(nodeIds));
  return template.queryForList(SELECT_CONTENT_DATA_BY_NODE_IDS,idsEntity);
}","@SuppressWarnings(""String_Node_Str"") @Override protected List<ContentDataEntity> getContentDataEntitiesForNodes(Set<Long> nodeIds){
  if (nodeIds.size() == 0) {
    return Collections.emptyList();
  }
  IdsEntity idsEntity=new IdsEntity();
  idsEntity.setIds(new ArrayList<Long>(nodeIds));
  return (List<ContentDataEntity>)template.selectList(SELECT_CONTENT_DATA_BY_NODE_IDS,idsEntity);
}",0.9483443708609272
172095,"private <R>R doAsSystem(RunAsWork<R> work){
  policyBehaviourFilter.disableBehaviour(ContentModel.ASPECT_AUDITABLE);
  policyBehaviourFilter.disableBehaviour(ContentModel.ASPECT_VERSIONABLE);
  try {
    return AuthenticationUtil.runAs(work,AuthenticationUtil.getSystemUserName());
  }
  finally {
    policyBehaviourFilter.enableBehaviour(ContentModel.ASPECT_AUDITABLE);
    policyBehaviourFilter.enableBehaviour(ContentModel.ASPECT_VERSIONABLE);
  }
  return null;
}","private <R>R doAsSystem(RunAsWork<R> work){
  policyBehaviourFilter.disableBehaviour(ContentModel.ASPECT_AUDITABLE);
  policyBehaviourFilter.disableBehaviour(ContentModel.ASPECT_VERSIONABLE);
  try {
    return AuthenticationUtil.runAs(work,AuthenticationUtil.getSystemUserName());
  }
  finally {
    policyBehaviourFilter.enableBehaviour(ContentModel.ASPECT_AUDITABLE);
    policyBehaviourFilter.enableBehaviour(ContentModel.ASPECT_VERSIONABLE);
  }
}",0.98371335504886
172096,"/** 
 * This test method uses the eventually consistent find*() method and so may fail if Lucene is disabled.
 */
@Test public void findBlogPostsByPublishedDate() throws Exception {
  final List<String> tags=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
  final Calendar cal=Calendar.getInstance();
  cal.set(1971,6,15);
  final Date _1971=cal.getTime();
  cal.set(1975,0,1);
  final Date _1975=cal.getTime();
  cal.set(1980,0,1);
  final Date _1980=cal.getTime();
  cal.set(1981,0,1);
  final Date _1981=cal.getTime();
  cal.set(1985,6,15);
  final Date _1985=cal.getTime();
  cal.set(1991,6,15);
  final Date _1991=cal.getTime();
  final Map<Integer,NodeRef> blogPosts=TRANSACTION_HELPER.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<Map<Integer,NodeRef>>(){
    @Override public Map<Integer,NodeRef> execute() throws Throwable {
      Map<Integer,NodeRef> result=new HashMap<Integer,NodeRef>();
      final BlogPostInfo blogPost1971=BLOG_SERVICE.createBlogPost(BLOG_CONTAINER_NODE,""String_Node_Str"",""String_Node_Str"",true);
      final BlogPostInfo blogPost1981=BLOG_SERVICE.createBlogPost(BLOG_CONTAINER_NODE,""String_Node_Str"",""String_Node_Str"",true);
      final BlogPostInfo blogPost1991=BLOG_SERVICE.createBlogPost(BLOG_CONTAINER_NODE,""String_Node_Str"",""String_Node_Str"",true);
      TAGGING_SERVICE.addTags(blogPost1971.getNodeRef(),tags);
      TAGGING_SERVICE.addTags(blogPost1981.getNodeRef(),tags);
      TAGGING_SERVICE.addTags(blogPost1991.getNodeRef(),tags);
      testNodesToTidy.add(blogPost1971.getNodeRef());
      testNodesToTidy.add(blogPost1981.getNodeRef());
      testNodesToTidy.add(blogPost1991.getNodeRef());
      NODE_SERVICE.setProperty(blogPost1971.getNodeRef(),ContentModel.PROP_PUBLISHED,_1971);
      NODE_SERVICE.setProperty(blogPost1981.getNodeRef(),ContentModel.PROP_PUBLISHED,_1981);
      NODE_SERVICE.setProperty(blogPost1991.getNodeRef(),ContentModel.PROP_PUBLISHED,_1991);
      result.put(1971,blogPost1971.getNodeRef());
      result.put(1981,blogPost1981.getNodeRef());
      result.put(1991,blogPost1991.getNodeRef());
      return result;
    }
  }
);
  TRANSACTION_HELPER.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<Void>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Void execute() throws Throwable {
      assertEquals(""String_Node_Str"",71,((Date)NODE_SERVICE.getProperty(blogPosts.get(1971),ContentModel.PROP_PUBLISHED)).getYear());
      PagingRequest pagingReq=new PagingRequest(0,10,null);
      final RangedDateProperty publishedBefore1980=new RangedDateProperty(null,_1980,ContentModel.PROP_PUBLISHED);
      final RangedDateProperty publishedAfter1980=new RangedDateProperty(_1980,null,ContentModel.PROP_PUBLISHED);
      final RangedDateProperty publishedBetween1975And1985=new RangedDateProperty(_1975,_1985,ContentModel.PROP_PUBLISHED);
      PagingResults<BlogPostInfo> pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,null,null,pagingReq);
      assertEquals(""String_Node_Str"",3,pagedResults.getPage().size());
      Set<NodeRef> recoveredBlogNodes=new HashSet<NodeRef>();
      for (      BlogPostInfo bpi : pagedResults.getPage()) {
        recoveredBlogNodes.add(bpi.getNodeRef());
      }
      assertTrue(""String_Node_Str"",recoveredBlogNodes.contains(blogPosts.get(1971)));
      assertTrue(""String_Node_Str"",recoveredBlogNodes.contains(blogPosts.get(1981)));
      assertTrue(""String_Node_Str"",recoveredBlogNodes.contains(blogPosts.get(1991)));
      pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,publishedBefore1980,null,pagingReq);
      assertEquals(""String_Node_Str"",1,pagedResults.getPage().size());
      NodeRef blogNode=pagedResults.getPage().get(0).getNodeRef();
      assertEquals(""String_Node_Str"",blogNode,blogPosts.get(1971));
      List<String> recoveredTags=TAGGING_SERVICE.getTags(blogNode);
      assertEquals(""String_Node_Str"",tags,recoveredTags);
      pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,publishedAfter1980,""String_Node_Str"",pagingReq);
      assertEquals(""String_Node_Str"",2,pagedResults.getPage().size());
      blogNode=pagedResults.getPage().get(0).getNodeRef();
      assertEquals(""String_Node_Str"",blogNode,blogPosts.get(1991));
      pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,publishedBetween1975And1985,""String_Node_Str"",pagingReq);
      assertEquals(""String_Node_Str"",1,pagedResults.getPage().size());
      blogNode=pagedResults.getPage().get(0).getNodeRef();
      assertEquals(""String_Node_Str"",blogNode,blogPosts.get(1981));
      return null;
    }
  }
);
}","/** 
 * This test method uses the eventually consistent find*() method and so may fail if Lucene is disabled.
 */
@Test public void findBlogPostsByPublishedDate() throws Exception {
  final List<String> tags=Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""});
  final Calendar cal=Calendar.getInstance();
  cal.set(1971,6,15);
  final Date _1971=cal.getTime();
  cal.set(1975,0,1);
  final Date _1975=cal.getTime();
  cal.set(1980,0,1);
  final Date _1980=cal.getTime();
  cal.set(1981,0,1);
  final Date _1981=cal.getTime();
  cal.set(1985,6,15);
  final Date _1985=cal.getTime();
  cal.set(1991,6,15);
  final Date _1991=cal.getTime();
  final Map<Integer,NodeRef> blogPosts=TRANSACTION_HELPER.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<Map<Integer,NodeRef>>(){
    @Override public Map<Integer,NodeRef> execute() throws Throwable {
      Map<Integer,NodeRef> result=new HashMap<Integer,NodeRef>();
      final BlogPostInfo blogPost1971=BLOG_SERVICE.createBlogPost(BLOG_CONTAINER_NODE,""String_Node_Str"",""String_Node_Str"",true);
      final BlogPostInfo blogPost1981=BLOG_SERVICE.createBlogPost(BLOG_CONTAINER_NODE,""String_Node_Str"",""String_Node_Str"",true);
      final BlogPostInfo blogPost1991=BLOG_SERVICE.createBlogPost(BLOG_CONTAINER_NODE,""String_Node_Str"",""String_Node_Str"",true);
      TAGGING_SERVICE.addTags(blogPost1971.getNodeRef(),tags);
      TAGGING_SERVICE.addTags(blogPost1981.getNodeRef(),tags);
      TAGGING_SERVICE.addTags(blogPost1991.getNodeRef(),tags);
      testNodesToTidy.add(blogPost1971.getNodeRef());
      testNodesToTidy.add(blogPost1981.getNodeRef());
      testNodesToTidy.add(blogPost1991.getNodeRef());
      NODE_SERVICE.setProperty(blogPost1971.getNodeRef(),ContentModel.PROP_PUBLISHED,_1971);
      NODE_SERVICE.setProperty(blogPost1981.getNodeRef(),ContentModel.PROP_PUBLISHED,_1981);
      NODE_SERVICE.setProperty(blogPost1991.getNodeRef(),ContentModel.PROP_PUBLISHED,_1991);
      result.put(1971,blogPost1971.getNodeRef());
      result.put(1981,blogPost1981.getNodeRef());
      result.put(1991,blogPost1991.getNodeRef());
      return result;
    }
  }
);
  TRANSACTION_HELPER.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<Void>(){
    @SuppressWarnings(""String_Node_Str"") @Override public Void execute() throws Throwable {
      assertEquals(""String_Node_Str"",71,((Date)NODE_SERVICE.getProperty(blogPosts.get(1971),ContentModel.PROP_PUBLISHED)).getYear());
      PagingRequest pagingReq=new PagingRequest(0,10,null);
      final RangedDateProperty publishedBefore1980=new RangedDateProperty(null,_1980,ContentModel.PROP_PUBLISHED);
      final RangedDateProperty publishedAfter1980=new RangedDateProperty(_1980,null,ContentModel.PROP_PUBLISHED);
      final RangedDateProperty publishedBetween1975And1985=new RangedDateProperty(_1975,_1985,ContentModel.PROP_PUBLISHED);
      PagingResults<BlogPostInfo> pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,null,null,pagingReq);
      assertEquals(""String_Node_Str"",3,pagedResults.getPage().size());
      Set<NodeRef> recoveredBlogNodes=new HashSet<NodeRef>();
      for (      BlogPostInfo bpi : pagedResults.getPage()) {
        recoveredBlogNodes.add(bpi.getNodeRef());
      }
      assertTrue(""String_Node_Str"",recoveredBlogNodes.contains(blogPosts.get(1971)));
      assertTrue(""String_Node_Str"",recoveredBlogNodes.contains(blogPosts.get(1981)));
      assertTrue(""String_Node_Str"",recoveredBlogNodes.contains(blogPosts.get(1991)));
      pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,publishedBefore1980,null,pagingReq);
      assertEquals(""String_Node_Str"",1,pagedResults.getPage().size());
      NodeRef blogNode=pagedResults.getPage().get(0).getNodeRef();
      assertEquals(""String_Node_Str"",blogNode,blogPosts.get(1971));
      List<String> recoveredTags=TAGGING_SERVICE.getTags(blogNode);
      assertEquals(""String_Node_Str"",tags,recoveredTags);
      pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,publishedAfter1980,""String_Node_Str"",pagingReq);
      assertEquals(""String_Node_Str"",2,pagedResults.getPage().size());
      blogNode=pagedResults.getPage().get(0).getNodeRef();
      assertEquals(""String_Node_Str"",blogNode,blogPosts.get(1981));
      pagedResults=BLOG_SERVICE.findBlogPosts(BLOG_CONTAINER_NODE,publishedBetween1975And1985,""String_Node_Str"",pagingReq);
      assertEquals(""String_Node_Str"",1,pagedResults.getPage().size());
      blogNode=pagedResults.getPage().get(0).getNodeRef();
      assertEquals(""String_Node_Str"",blogNode,blogPosts.get(1981));
      return null;
    }
  }
);
}",0.9997835497835498
172097,"/** 
 * Create a node monitor
 * @param filesysDriver ContentDiskDriver
 * @param filesysCtx ContentContext
 */
public NodeMonitor createNodeMonitor(final ContentContext filesysCtx){
  RetryingTransactionHelper tran=m_transService.getRetryingTransactionHelper();
  RetryingTransactionCallback<NodeMonitor> initialiseCB=new RetryingTransactionCallback<NodeMonitor>(){
    @Override public NodeMonitor execute() throws Throwable {
      NodeMonitor nodeMonitor=new NodeMonitor(filesysCtx,m_nodeService,m_policyComponent,m_fileFolderService,m_permissionService,m_transService);
      return nodeMonitor;
    }
  }
;
  return tran.doInTransaction(initialiseCB);
}","/** 
 * Create a node monitor
 * @param filesysDriver ContentDiskDriver
 * @param filesysCtx ContentContext
 */
public NodeMonitor createNodeMonitor(final ContentContext filesysCtx){
  RetryingTransactionHelper tran=m_transService.getRetryingTransactionHelper();
  RetryingTransactionCallback<NodeMonitor> initialiseCB=new RetryingTransactionCallback<NodeMonitor>(){
    @Override public NodeMonitor execute() throws Throwable {
      NodeMonitor nodeMonitor=new NodeMonitor(filesysCtx,m_nodeService,m_policyComponent,m_fileFolderService,m_permissionService,m_transService);
      return nodeMonitor;
    }
  }
;
  return tran.doInTransaction(initialiseCB,true);
}",0.9962207105064248
172098,"public void index(){
  int done=0;
  while (done == 0) {
    final StoreRef toIndex=getNextRef();
    try {
      if (toIndex != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + toIndex + ""String_Node_Str""+ (new java.util.Date()));
        }
        try {
          done+=transactionService.getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Integer>(){
            @Override public Integer execute() throws Throwable {
              Indexer indexer=indexerAndSearcherFactory.getIndexer(toIndex);
              indexer.setReadThrough(true);
              if (indexer instanceof BackgroundIndexerAware) {
                BackgroundIndexerAware backgroundIndexerAware=(BackgroundIndexerAware)indexer;
                backgroundIndexerAware.registerCallBack(FullTextSearchIndexerImpl.this);
                return backgroundIndexerAware.updateFullTextSearch(batchSize);
              }
              return 0;
            }
          }
);
        }
 catch (        Exception ex) {
          indexCompleted(toIndex,0,ex);
          if (s_logger.isWarnEnabled()) {
            s_logger.warn(""String_Node_Str"",ex);
          }
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + (new java.util.Date()));
        }
        break;
      }
    }
 catch (    Throwable t) {
      indexCompleted(toIndex,0,t);
    }
  }
}","public void index(){
  int done=0;
  while (done == 0) {
    final StoreRef toIndex=getNextRef();
    try {
      if (toIndex != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + toIndex + ""String_Node_Str""+ (new java.util.Date()));
        }
        try {
          done+=transactionService.getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Integer>(){
            @Override public Integer execute() throws Throwable {
              Indexer indexer=indexerAndSearcherFactory.getIndexer(toIndex);
              indexer.setReadThrough(true);
              if (indexer instanceof BackgroundIndexerAware) {
                BackgroundIndexerAware backgroundIndexerAware=(BackgroundIndexerAware)indexer;
                backgroundIndexerAware.registerCallBack(FullTextSearchIndexerImpl.this);
                return backgroundIndexerAware.updateFullTextSearch(batchSize);
              }
              return 0;
            }
          }
,true);
        }
 catch (        Exception ex) {
          indexCompleted(toIndex,0,ex);
          if (s_logger.isWarnEnabled()) {
            s_logger.warn(""String_Node_Str"",ex);
          }
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + (new java.util.Date()));
        }
        break;
      }
    }
 catch (    Throwable t) {
      indexCompleted(toIndex,0,t);
    }
  }
}",0.9982704946385332
172099,"/** 
 */
public void testGetInvitation(){
  try {
    invitationService.getInvitation(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","public void testGetInvitation(){
  try {
    invitationService.getInvitation(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}",0.972644376899696
172100,"@Override protected void onTearDownInTransaction() throws Exception {
  this.authenticationComponent.setSystemUserAsCurrentUser();
  workflowAdminService.setEnabledEngines(enabledEngines);
  workflowAdminService.setVisibleEngines(visibleEngines);
  invitationServiceImpl.setSendEmails(startSendEmails);
  siteService.deleteSite(SITE_SHORT_NAME_INVITE);
  siteService.deleteSite(SITE_SHORT_NAME_RED);
  siteService.deleteSite(SITE_SHORT_NAME_BLUE);
  deletePersonByUserName(USER_ONE);
  deletePersonByUserName(USER_TWO);
  deletePersonByUserName(USER_EVE);
  deletePersonByUserName(USER_MANAGER);
  super.onTearDownInTransaction();
}","@Override protected void onTearDownInTransaction() throws Exception {
  this.authenticationComponent.setSystemUserAsCurrentUser();
  workflowAdminService.setEnabledEngines(enabledEngines);
  workflowAdminService.setVisibleEngines(visibleEngines);
  super.onTearDownInTransaction();
}",0.5836065573770491
172101,"public static void main(String[] args){
  if (args.length != 2) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + DbToXML.class.getName() + ""String_Node_Str"");
    System.exit(1);
  }
  String contextPath=args[0];
  File outputFile=new File(args[1]);
  ApplicationContext context=new FileSystemXmlApplicationContext(contextPath);
  DbToXML dbToXML=new DbToXML(context,outputFile);
  dbToXML.execute();
}","public static void main(String[] args){
  if (args.length != 2) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + DbToXML.class.getName() + ""String_Node_Str"");
    System.exit(1);
  }
  String contextPath=args[0];
  File outputFile=new File(args[1]);
  FileSystemXmlApplicationContext context=new FileSystemXmlApplicationContext(contextPath);
  DbToXML dbToXML=new DbToXML(context,outputFile);
  dbToXML.execute();
  context.close();
}",0.9649890590809628
172102,"/** 
 * Gets the version type
 * @return  ""MAJOR"", ""MINOR""
 */
public String getType(){
  return version.getVersionType().name();
}","/** 
 * Gets the version type
 * @return  ""MAJOR"", ""MINOR""
 */
public String getType(){
  if (version.getVersionType() != null) {
    return version.getVersionType().name();
  }
 else {
    return ""String_Node_Str"";
  }
}",0.7443181818181818
172103,"/** 
 * Gets the date the version was created
 * @return  the date the version was created
 */
public Object getCreatedDate(){
  return converter.convertValueForScript(services,scope,null,version.getCreatedDate());
}","/** 
 * Gets the date the version was created
 * @return  the date the version was created
 */
public Date getCreatedDate(){
  return version.getCreatedDate();
}",0.8381962864721485
172104,"/** 
 * {@inheritDoc}
 */
public void getNodesMetadata(NodeMetaDataParameters nodeMetaDataParameters,MetaDataResultsFilter resultFilter,NodeMetaDataQueryCallback callback){
  if (false == enabled) {
    return;
  }
  NodeMetaDataQueryRowHandler rowHandler=new NodeMetaDataQueryRowHandler(callback);
  boolean includeType=(resultFilter == null ? true : resultFilter.getIncludeType());
  boolean includeProperties=(resultFilter == null ? true : resultFilter.getIncludeProperties());
  boolean includeAspects=(resultFilter == null ? true : resultFilter.getIncludeAspects());
  boolean includePaths=(resultFilter == null ? true : resultFilter.getIncludePaths());
  boolean includeNodeRef=(resultFilter == null ? true : resultFilter.getIncludeNodeRef());
  boolean includeParentAssociations=(resultFilter == null ? true : resultFilter.getIncludeParentAssociations());
  boolean includeChildAssociations=(resultFilter == null ? true : resultFilter.getIncludeChildAssociations());
  boolean includeOwner=(resultFilter == null ? true : resultFilter.getIncludeOwner());
  boolean includeChildIds=(resultFilter == null ? true : resultFilter.getIncludeChildIds());
  boolean includeTxnId=(resultFilter == null ? true : resultFilter.getIncludeTxnId());
  List<Long> nodeIds=preCacheNodes(nodeMetaDataParameters);
  for (  Long nodeId : nodeIds) {
    Map<QName,Serializable> props=null;
    Set<QName> aspects=null;
    if (!nodeDAO.exists(nodeId)) {
      continue;
    }
    NodeMetaData nodeMetaData=new NodeMetaData();
    nodeMetaData.setNodeId(nodeId);
    Pair<Long,NodeRef> pair=nodeDAO.getNodePair(nodeId);
    nodeMetaData.setAclId(nodeDAO.getNodeAclId(nodeId));
    if (includeTxnId) {
      nodeMetaData.setTxnId(nodeDAO.getNodeRefStatus(pair.getSecond()).getDbTxnId());
    }
    if (includeType) {
      QName nodeType=nodeDAO.getNodeType(nodeId);
      nodeMetaData.setNodeType(nodeType);
    }
    if (includeProperties) {
      Map<QName,Serializable> sourceProps=nodeDAO.getNodeProperties(nodeId);
      props=new HashMap<QName,Serializable>((int)(sourceProps.size() * 1.3));
      for (      QName propertyQName : sourceProps.keySet()) {
        PropertyDefinition propDef=dictionaryService.getProperty(propertyQName);
        if (propDef != null) {
          props.put(propertyQName,sourceProps.get(propertyQName));
        }
      }
      nodeMetaData.setProperties(props);
    }
 else {
      nodeMetaData.setProperties(Collections.<QName,Serializable>emptyMap());
    }
    if (includeAspects) {
      aspects=nodeDAO.getNodeAspects(nodeId);
    }
    nodeMetaData.setAspects(aspects);
    if (includePaths) {
      Collection<Pair<Path,QName>> categoryPaths=getCategoryPaths(pair.getSecond(),aspects,props);
      List<Path> directPaths=nodeDAO.getPaths(pair,false);
      Collection<Pair<Path,QName>> paths=new ArrayList<Pair<Path,QName>>(directPaths.size() + categoryPaths.size());
      for (      Path path : directPaths) {
        paths.add(new Pair<Path,QName>(path,null));
      }
      paths.addAll(categoryPaths);
      nodeMetaData.setPaths(paths);
    }
    if (includeNodeRef) {
      nodeMetaData.setNodeRef(pair.getSecond());
    }
    if (includeChildAssociations) {
      final List<ChildAssociationRef> childAssocs=new ArrayList<ChildAssociationRef>(100);
      nodeDAO.getChildAssocs(nodeId,null,null,null,null,null,new ChildAssocRefQueryCallback(){
        @Override public boolean preLoadNodes(){
          return false;
        }
        @Override public boolean orderResults(){
          return false;
        }
        @Override public boolean handle(        Pair<Long,ChildAssociationRef> childAssocPair,        Pair<Long,NodeRef> parentNodePair,        Pair<Long,NodeRef> childNodePair){
          childAssocs.add(childAssocPair.getSecond());
          return true;
        }
        @Override public void done(){
        }
      }
);
      nodeMetaData.setChildAssocs(childAssocs);
    }
    if (includeChildIds) {
      final List<Long> childIds=new ArrayList<Long>(100);
      nodeDAO.getChildAssocs(nodeId,null,null,null,null,null,new ChildAssocRefQueryCallback(){
        @Override public boolean preLoadNodes(){
          return false;
        }
        @Override public boolean orderResults(){
          return false;
        }
        @Override public boolean handle(        Pair<Long,ChildAssociationRef> childAssocPair,        Pair<Long,NodeRef> parentNodePair,        Pair<Long,NodeRef> childNodePair){
          childIds.add(childNodePair.getFirst());
          return true;
        }
        @Override public void done(){
        }
      }
);
      nodeMetaData.setChildIds(childIds);
    }
    if (includeParentAssociations) {
      final List<ChildAssociationRef> parentAssocs=new ArrayList<ChildAssociationRef>(100);
      nodeDAO.getParentAssocs(nodeId,null,null,null,new ChildAssocRefQueryCallback(){
        @Override public boolean preLoadNodes(){
          return false;
        }
        @Override public boolean orderResults(){
          return false;
        }
        @Override public boolean handle(        Pair<Long,ChildAssociationRef> childAssocPair,        Pair<Long,NodeRef> parentNodePair,        Pair<Long,NodeRef> childNodePair){
          parentAssocs.add(childAssocPair.getSecond());
          return true;
        }
        @Override public void done(){
        }
      }
);
      CRC32 crc=new CRC32();
      for (      ChildAssociationRef car : parentAssocs) {
        try {
          crc.update(car.toString().getBytes(""String_Node_Str""));
        }
 catch (        UnsupportedEncodingException e) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      nodeMetaData.setParentAssocs(parentAssocs,crc.getValue());
    }
    if (includeOwner) {
      nodeMetaData.setOwner(ownableService.getOwner(pair.getSecond()));
    }
    rowHandler.processResult(nodeMetaData);
  }
}","/** 
 * {@inheritDoc}
 */
public void getNodesMetadata(NodeMetaDataParameters nodeMetaDataParameters,MetaDataResultsFilter resultFilter,NodeMetaDataQueryCallback callback){
  if (false == enabled) {
    return;
  }
  NodeMetaDataQueryRowHandler rowHandler=new NodeMetaDataQueryRowHandler(callback);
  boolean includeType=(resultFilter == null ? true : resultFilter.getIncludeType());
  boolean includeProperties=(resultFilter == null ? true : resultFilter.getIncludeProperties());
  boolean includeAspects=(resultFilter == null ? true : resultFilter.getIncludeAspects());
  boolean includePaths=(resultFilter == null ? true : resultFilter.getIncludePaths());
  boolean includeNodeRef=(resultFilter == null ? true : resultFilter.getIncludeNodeRef());
  boolean includeParentAssociations=(resultFilter == null ? true : resultFilter.getIncludeParentAssociations());
  boolean includeChildAssociations=(resultFilter == null ? true : resultFilter.getIncludeChildAssociations());
  boolean includeOwner=(resultFilter == null ? true : resultFilter.getIncludeOwner());
  boolean includeChildIds=(resultFilter == null ? true : resultFilter.getIncludeChildIds());
  boolean includeTxnId=(resultFilter == null ? true : resultFilter.getIncludeTxnId());
  List<Long> nodeIds=preCacheNodes(nodeMetaDataParameters);
  for (  Long nodeId : nodeIds) {
    Map<QName,Serializable> props=null;
    Set<QName> aspects=null;
    if (!nodeDAO.exists(nodeId)) {
      continue;
    }
    NodeMetaData nodeMetaData=new NodeMetaData();
    nodeMetaData.setNodeId(nodeId);
    Pair<Long,NodeRef> pair=nodeDAO.getNodePair(nodeId);
    nodeMetaData.setAclId(nodeDAO.getNodeAclId(nodeId));
    if (includeTxnId) {
      nodeMetaData.setTxnId(nodeDAO.getNodeRefStatus(pair.getSecond()).getDbTxnId());
    }
    if (includeType) {
      QName nodeType=nodeDAO.getNodeType(nodeId);
      nodeMetaData.setNodeType(nodeType);
    }
    if (includeProperties) {
      props=getProperties(nodeId);
      nodeMetaData.setProperties(props);
    }
 else {
      nodeMetaData.setProperties(Collections.<QName,Serializable>emptyMap());
    }
    if (includeAspects) {
      aspects=nodeDAO.getNodeAspects(nodeId);
    }
    nodeMetaData.setAspects(aspects);
    if (includePaths) {
      if (props == null) {
        props=getProperties(nodeId);
      }
      Collection<Pair<Path,QName>> categoryPaths=getCategoryPaths(pair.getSecond(),aspects,props);
      List<Path> directPaths=nodeDAO.getPaths(pair,false);
      Collection<Pair<Path,QName>> paths=new ArrayList<Pair<Path,QName>>(directPaths.size() + categoryPaths.size());
      for (      Path path : directPaths) {
        paths.add(new Pair<Path,QName>(path,null));
      }
      paths.addAll(categoryPaths);
      nodeMetaData.setPaths(paths);
    }
    if (includeNodeRef) {
      nodeMetaData.setNodeRef(pair.getSecond());
    }
    if (includeChildAssociations) {
      final List<ChildAssociationRef> childAssocs=new ArrayList<ChildAssociationRef>(100);
      nodeDAO.getChildAssocs(nodeId,null,null,null,null,null,new ChildAssocRefQueryCallback(){
        @Override public boolean preLoadNodes(){
          return false;
        }
        @Override public boolean orderResults(){
          return false;
        }
        @Override public boolean handle(        Pair<Long,ChildAssociationRef> childAssocPair,        Pair<Long,NodeRef> parentNodePair,        Pair<Long,NodeRef> childNodePair){
          childAssocs.add(childAssocPair.getSecond());
          return true;
        }
        @Override public void done(){
        }
      }
);
      nodeMetaData.setChildAssocs(childAssocs);
    }
    if (includeChildIds) {
      final List<Long> childIds=new ArrayList<Long>(100);
      nodeDAO.getChildAssocs(nodeId,null,null,null,null,null,new ChildAssocRefQueryCallback(){
        @Override public boolean preLoadNodes(){
          return false;
        }
        @Override public boolean orderResults(){
          return false;
        }
        @Override public boolean handle(        Pair<Long,ChildAssociationRef> childAssocPair,        Pair<Long,NodeRef> parentNodePair,        Pair<Long,NodeRef> childNodePair){
          childIds.add(childNodePair.getFirst());
          return true;
        }
        @Override public void done(){
        }
      }
);
      nodeMetaData.setChildIds(childIds);
    }
    if (includeParentAssociations) {
      final List<ChildAssociationRef> parentAssocs=new ArrayList<ChildAssociationRef>(100);
      nodeDAO.getParentAssocs(nodeId,null,null,null,new ChildAssocRefQueryCallback(){
        @Override public boolean preLoadNodes(){
          return false;
        }
        @Override public boolean orderResults(){
          return false;
        }
        @Override public boolean handle(        Pair<Long,ChildAssociationRef> childAssocPair,        Pair<Long,NodeRef> parentNodePair,        Pair<Long,NodeRef> childNodePair){
          parentAssocs.add(childAssocPair.getSecond());
          return true;
        }
        @Override public void done(){
        }
      }
);
      CRC32 crc=new CRC32();
      for (      ChildAssociationRef car : parentAssocs) {
        try {
          crc.update(car.toString().getBytes(""String_Node_Str""));
        }
 catch (        UnsupportedEncodingException e) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      nodeMetaData.setParentAssocs(parentAssocs,crc.getValue());
    }
    if (includeOwner) {
      nodeMetaData.setOwner(ownableService.getOwner(pair.getSecond()));
    }
    rowHandler.processResult(nodeMetaData);
  }
}",0.6809440559440559
172105,"/** 
 * Makes use of the encoding, if available, to convert the string to bytes.
 * @see ContentAccessor#getEncoding()
 */
public final void putContent(String content) throws ContentIOException {
  try {
    String encoding=getEncoding();
    byte[] bytes;
    if (encoding == null) {
      bytes=content.getBytes();
      setEncoding(System.getProperty(""String_Node_Str""));
    }
 else {
      bytes=content.getBytes(encoding);
    }
    OutputStream os=getContentOutputStream();
    ByteArrayInputStream is=new ByteArrayInputStream(bytes);
    FileCopyUtils.copy(is,os);
  }
 catch (  IOException e) {
    throw new ContentIOException(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ content.length(),e);
  }
}","/** 
 * Makes use of the encoding, if available, to convert the string to bytes.
 * @see ContentAccessor#getEncoding()
 */
public final void putContent(String content) throws ContentIOException {
  try {
    String encoding=getEncoding();
    byte[] bytes;
    if (encoding == null) {
      bytes=content.getBytes();
      setEncoding(System.getProperty(""String_Node_Str""));
    }
 else {
      bytes=content.getBytes(encoding);
    }
    OutputStream os=getContentOutputStream();
    ByteArrayInputStream is=new ByteArrayInputStream(bytes);
    copyStreams(is,os);
  }
 catch (  IOException e) {
    throw new ContentIOException(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ content.length(),e);
  }
}",0.980013783597519
172106,"public CannedQuery<AuthorityInfo> getCannedQuery(AuthorityType type,NodeRef containerRef,String displayNameFilter,boolean sortByDisplayName,boolean sortAscending,PagingRequest pagingRequest){
  ParameterCheck.mandatory(""String_Node_Str"",containerRef);
  ParameterCheck.mandatory(""String_Node_Str"",pagingRequest);
  int requestTotalCountMax=pagingRequest.getRequestTotalCountMax();
  Pair<Long,NodeRef> nodePair=nodeDAO.getNodePair(tenantService.getName(containerRef));
  if (nodePair == null) {
    throw new InvalidNodeRefException(""String_Node_Str"" + containerRef,containerRef);
  }
  Long containerNodeId=nodePair.getFirst();
  GetAuthoritiesCannedQueryParams paramBean=new GetAuthoritiesCannedQueryParams(type,containerNodeId,getQNameId(ContentModel.PROP_AUTHORITY_DISPLAY_NAME),displayNameFilter);
  CannedQueryPageDetails cqpd=new CannedQueryPageDetails(pagingRequest.getSkipCount(),pagingRequest.getMaxItems(),CannedQueryPageDetails.DEFAULT_PAGE_NUMBER,CannedQueryPageDetails.DEFAULT_PAGE_COUNT);
  CannedQuerySortDetails cqsd=null;
  if (sortByDisplayName) {
    List<Pair<? extends Object,SortOrder>> sortPairs=new ArrayList<Pair<? extends Object,SortOrder>>(1);
    sortPairs.add(new Pair<String,SortOrder>(""String_Node_Str"",(sortAscending ? SortOrder.ASCENDING : SortOrder.DESCENDING)));
    cqsd=new CannedQuerySortDetails(sortPairs);
  }
  CannedQueryParameters params=new CannedQueryParameters(paramBean,cqpd,cqsd,requestTotalCountMax,pagingRequest.getQueryExecutionId());
  return getCannedQuery(params);
}","public CannedQuery<AuthorityInfo> getCannedQuery(AuthorityType type,NodeRef containerRef,String displayNameFilter,boolean sortByDisplayName,boolean sortAscending,PagingRequest pagingRequest){
  ParameterCheck.mandatory(""String_Node_Str"",containerRef);
  ParameterCheck.mandatory(""String_Node_Str"",pagingRequest);
  int requestTotalCountMax=pagingRequest.getRequestTotalCountMax();
  Pair<Long,NodeRef> nodePair=nodeDAO.getNodePair(tenantService.getName(containerRef));
  if (nodePair == null) {
    throw new InvalidNodeRefException(""String_Node_Str"" + containerRef,containerRef);
  }
  Long containerNodeId=nodePair.getFirst();
  Long qnameAuthDisplayNameId=Long.MIN_VALUE;
  Pair<Long,QName> qnameAuthDisplayNamePair=qnameDAO.getQName(ContentModel.PROP_AUTHORITY_DISPLAY_NAME);
  if (qnameAuthDisplayNamePair != null) {
    qnameAuthDisplayNameId=qnameAuthDisplayNamePair.getFirst();
  }
  GetAuthoritiesCannedQueryParams paramBean=new GetAuthoritiesCannedQueryParams(type,containerNodeId,qnameAuthDisplayNameId,displayNameFilter);
  CannedQueryPageDetails cqpd=new CannedQueryPageDetails(pagingRequest.getSkipCount(),pagingRequest.getMaxItems(),CannedQueryPageDetails.DEFAULT_PAGE_NUMBER,CannedQueryPageDetails.DEFAULT_PAGE_COUNT);
  CannedQuerySortDetails cqsd=null;
  if (sortByDisplayName) {
    List<Pair<? extends Object,SortOrder>> sortPairs=new ArrayList<Pair<? extends Object,SortOrder>>(1);
    sortPairs.add(new Pair<String,SortOrder>(""String_Node_Str"",(sortAscending ? SortOrder.ASCENDING : SortOrder.DESCENDING)));
    cqsd=new CannedQuerySortDetails(sortPairs);
  }
  CannedQueryParameters params=new CannedQueryParameters(paramBean,cqpd,cqsd,requestTotalCountMax,pagingRequest.getQueryExecutionId());
  return getCannedQuery(params);
}",0.8670944087992667
172107,"@Override public void deleteObjectOrCancelCheckOut(String repositoryId,final String objectId,final Boolean allVersions,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo info=getOrCreateNodeInfo(objectId,""String_Node_Str"");
  endReadOnlyTransaction();
  connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Boolean>(){
    public Boolean execute() throws Exception {
      try {
        if (info.isVariant(CMISObjectVariant.ASSOC)) {
          AssociationRef assocRef=info.getAssociationRef();
          connector.getNodeService().removeAssociation(assocRef.getSourceRef(),assocRef.getTargetRef(),assocRef.getTypeQName());
          return true;
        }
        NodeRef nodeRef=info.getNodeRef();
        if (info.isVariant(CMISObjectVariant.PWC)) {
          connector.getCheckOutCheckInService().cancelCheckout(nodeRef);
          return true;
        }
        if (info.isFolder()) {
          if (connector.getNodeService().getChildAssocs(nodeRef).size() > 0) {
            throw new CmisConstraintException(""String_Node_Str"");
          }
          connector.getNodeService().deleteNode(nodeRef);
          return true;
        }
        if (allVersions) {
          NodeRef workingCopy=connector.getCheckOutCheckInService().getWorkingCopy(nodeRef);
          if (workingCopy != null) {
            connector.getCheckOutCheckInService().cancelCheckout(workingCopy);
          }
        }
 else         if (info.isVariant(CMISObjectVariant.VERSION)) {
          Version version=((CMISNodeInfoImpl)info).getVersion();
          connector.getVersionService().deleteVersion(nodeRef,version);
          return true;
        }
        if (info.isVariant(CMISObjectVariant.VERSION)) {
          nodeRef=info.getCurrentNodeNodeRef();
        }
        List<ChildAssociationRef> childAssociations=connector.getNodeService().getParentAssocs(nodeRef);
        if (childAssociations != null) {
          for (          ChildAssociationRef childAssoc : childAssociations) {
            if (!childAssoc.isPrimary()) {
              connector.getNodeService().removeChildAssociation(childAssoc);
            }
          }
        }
        connector.getNodeService().deleteNode(nodeRef);
        return true;
      }
 catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  endReadOnlyTransaction();
}","@Override public void deleteObjectOrCancelCheckOut(String repositoryId,final String objectId,final Boolean allVersions,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo info=getOrCreateNodeInfo(objectId,""String_Node_Str"");
  endReadOnlyTransaction();
  connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Boolean>(){
    public Boolean execute() throws Exception {
      try {
        if (info.isVariant(CMISObjectVariant.ASSOC)) {
          AssociationRef assocRef=info.getAssociationRef();
          connector.getNodeService().removeAssociation(assocRef.getSourceRef(),assocRef.getTargetRef(),assocRef.getTypeQName());
          return true;
        }
        NodeRef nodeRef=info.getNodeRef();
        if (info.isVariant(CMISObjectVariant.PWC)) {
          connector.getCheckOutCheckInService().cancelCheckout(nodeRef);
          return true;
        }
        if (info.isFolder()) {
          if (connector.getNodeService().getChildAssocs(nodeRef).size() > 0) {
            throw new CmisConstraintException(""String_Node_Str"");
          }
          connector.getNodeService().deleteNode(nodeRef);
          return true;
        }
        if (allVersions) {
          NodeRef workingCopy=connector.getCheckOutCheckInService().getWorkingCopy(nodeRef);
          if (workingCopy != null) {
            connector.getCheckOutCheckInService().cancelCheckout(workingCopy);
          }
        }
 else         if (info.isVariant(CMISObjectVariant.VERSION)) {
          Version version=((CMISNodeInfoImpl)info).getVersion();
          connector.getVersionService().deleteVersion(nodeRef,version);
          return true;
        }
        if (info.isVariant(CMISObjectVariant.VERSION)) {
          nodeRef=info.getCurrentNodeNodeRef();
        }
        List<ChildAssociationRef> childAssociations=connector.getNodeService().getParentAssocs(nodeRef);
        if (childAssociations != null) {
          for (          ChildAssociationRef childAssoc : childAssociations) {
            if (!childAssoc.isPrimary()) {
              connector.getNodeService().removeChildAssociation(childAssoc);
            }
          }
        }
        if (allVersions) {
          connector.getNodeService().deleteNode(nodeRef);
        }
 else {
          CMISNodeInfoImpl infoImpl=((CMISNodeInfoImpl)info);
          Version version=infoImpl.getVersion();
          if (infoImpl.getVersionHistory().getPredecessor(version) == null) {
            connector.getNodeService().deleteNode(nodeRef);
          }
 else {
            connector.getVersionService().deleteVersion(nodeRef,version);
          }
        }
        return true;
      }
 catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  endReadOnlyTransaction();
}",0.9232202758106596
172108,"protected void logCreated(NodeRef sourceNode,NodeRef destNode,NodeRef newParentNode,Path parentPath,boolean orphan){
  receiver.getProgressMonitor().logCreated(transferId,sourceNode,destNode,newParentNode,parentPath,orphan);
}","protected void logCreated(NodeRef sourceNode,NodeRef destNode,NodeRef newParentNode,String parentPath,boolean orphan){
  receiver.getProgressMonitor().logCreated(transferId,sourceNode,destNode,newParentNode,parentPath,orphan);
}",0.9779735682819384
172109,"protected void logMoved(NodeRef sourceNode,NodeRef destNode,Path oldPath,NodeRef newParent,Path newPath){
  receiver.getProgressMonitor().logMoved(transferId,sourceNode,destNode,oldPath,newParent,newPath);
}","protected void logMoved(NodeRef sourceNode,NodeRef destNode,String oldPath,NodeRef newParent,String newPath){
  receiver.getProgressMonitor().logMoved(transferId,sourceNode,destNode,oldPath,newParent,newPath);
}",0.9521531100478468
172110,"protected void logDeleted(NodeRef sourceNode,NodeRef destNode,Path parentPath){
  receiver.getProgressMonitor().logDeleted(transferId,sourceNode,destNode,parentPath);
}","protected void logDeleted(NodeRef sourceNode,NodeRef destNode,String parentPath){
  receiver.getProgressMonitor().logDeleted(transferId,sourceNode,destNode,parentPath);
}",0.9763313609467456
172111,"protected void logUpdated(NodeRef sourceNode,NodeRef destNode,Path newPath){
  receiver.getProgressMonitor().logUpdated(transferId,sourceNode,destNode,newPath);
}","protected void logUpdated(NodeRef sourceNode,NodeRef destNode,String newPath){
  receiver.getProgressMonitor().logUpdated(transferId,sourceNode,destNode,newPath);
}",0.9754601226993864
172112,"@Override public void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef parentNodeRef,Path parentPath,boolean orphan){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeCreated(sourceNode,destNode,parentNodeRef,parentPath);
}","@Override public void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef parentNodeRef,String parentPath,boolean orphan){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeCreated(sourceNode,destNode,parentNodeRef,parentPath);
}",0.9821428571428572
172113,"@Override public void logMoved(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,Path oldPath,NodeRef newParentNodeRef,Path newPath){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeMoved(sourceNodeRef,destNodeRef,oldPath,newParentNodeRef,newPath);
}","@Override public void logMoved(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,String oldPath,NodeRef newParentNodeRef,String newPath){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeMoved(sourceNodeRef,destNodeRef,oldPath,newParentNodeRef,newPath);
}",0.8508474576271187
172114,"@Override public void logDeleted(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,Path oldPath){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeDeleted(sourceNodeRef,destNodeRef,oldPath);
}","@Override public void logDeleted(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,String oldPath){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeDeleted(sourceNodeRef,destNodeRef,oldPath);
}",0.9787234042553192
172115,"@Override public void logUpdated(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,Path path){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeUpdated(sourceNodeRef,destNodeRef,path);
}","@Override public void logUpdated(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,String path){
  TransferDestinationReportWriter writer=getLogWriter(transferId);
  writer.writeUpdated(sourceNodeRef,destNodeRef,path);
}",0.9781659388646288
172116,"public void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef newParent,Path newPath,boolean orphan){
  delegate.logCreated(transferId,sourceNode,destNode,newParent,newPath,orphan);
  getChangesRecord(transferId).addCreatedNode(destNode);
}","public void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef newParent,String newPath,boolean orphan){
  delegate.logCreated(transferId,sourceNode,destNode,newParent,newPath,orphan);
  getChangesRecord(transferId).addCreatedNode(destNode);
}",0.981060606060606
172117,"public void logMoved(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,Path oldPath,NodeRef newParent,Path newPath){
  delegate.logMoved(transferId,sourceNodeRef,destNodeRef,oldPath,newParent,newPath);
}","public void logMoved(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,String oldPath,NodeRef newParent,String newPath){
  delegate.logMoved(transferId,sourceNodeRef,destNodeRef,oldPath,newParent,newPath);
}",0.827906976744186
172118,"public void logDeleted(String transferId,NodeRef sourceNode,NodeRef destNode,Path parentPath){
  delegate.logDeleted(transferId,sourceNode,destNode,parentPath);
  getChangesRecord(transferId).addDeletedNode(destNode);
}","public void logDeleted(String transferId,NodeRef sourceNode,NodeRef destNode,String parentPath){
  delegate.logDeleted(transferId,sourceNode,destNode,parentPath);
  getChangesRecord(transferId).addDeletedNode(destNode);
}",0.9772727272727272
172119,"public void logUpdated(String transferId,NodeRef sourceNode,NodeRef destNode,Path parentPath){
  delegate.logUpdated(transferId,sourceNode,destNode,parentPath);
  getChangesRecord(transferId).addUpdatedNode(destNode);
}","public void logUpdated(String transferId,NodeRef sourceNode,NodeRef destNode,String parentPath){
  delegate.logUpdated(transferId,sourceNode,destNode,parentPath);
  getChangesRecord(transferId).addUpdatedNode(destNode);
}",0.9772727272727272
172120,"@Override public void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef parentNode,Path parentPath,boolean orphan){
  delegate.logCreated(transferId,sourceNode,destNode,parentNode,parentPath,orphan);
}","@Override public void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef parentNode,String parentPath,boolean orphan){
  delegate.logCreated(transferId,sourceNode,destNode,parentNode,parentPath,orphan);
}",0.9777777777777776
172121,"@Override public void logMoved(String transferId,NodeRef sourceNode,NodeRef destNode,Path oldPath,NodeRef parentNodeRef,Path parentPath){
  delegate.logMoved(transferId,sourceNode,destNode,oldPath,parentNodeRef,parentPath);
}","@Override public void logMoved(String transferId,NodeRef sourceNode,NodeRef destNode,String oldPath,NodeRef parentNodeRef,String parentPath){
  delegate.logMoved(transferId,sourceNode,destNode,oldPath,parentNodeRef,parentPath);
}",0.8193832599118943
172122,"@Override public void logDeleted(String transferId,NodeRef sourceNode,NodeRef destNode,Path parentPath){
  delegate.logDeleted(transferId,sourceNode,destNode,parentPath);
}","@Override public void logDeleted(String transferId,NodeRef sourceNode,NodeRef destNode,String parentPath){
  delegate.logDeleted(transferId,sourceNode,destNode,parentPath);
}",0.976878612716763
172123,"@Override public void logUpdated(String transferId,NodeRef sourceNode,NodeRef destNode,Path parentPath){
  delegate.logUpdated(transferId,sourceNode,destNode,parentPath);
}","@Override public void logUpdated(String transferId,NodeRef sourceNode,NodeRef destNode,String parentPath){
  delegate.logUpdated(transferId,sourceNode,destNode,parentPath);
}",0.976878612716763
172124,"/** 
 * @param node
 * @param resolvedNodes
 * @param primaryParentAssoc
 */
private void update(TransferManifestNormalNode node,ResolvedParentChildPair resolvedNodes,ChildAssociationRef primaryParentAssoc){
  NodeRef nodeToUpdate=resolvedNodes.resolvedChild;
  if (nodeService.hasAspect(nodeToUpdate,TransferModel.ASPECT_TRANSFERRED)) {
    String fromRepository=(String)nodeService.getProperty(nodeToUpdate,TransferModel.PROP_FROM_REPOSITORY_ID);
    String transferringRepo=header.getRepositoryId();
    if (fromRepository != null && transferringRepo != null) {
      if (!fromRepository.equalsIgnoreCase(transferringRepo)) {
        logComment(""String_Node_Str"" + node.getNodeRef());
        return;
      }
    }
  }
  QName parentAssocType=primaryParentAssoc.getTypeQName();
  QName parentAssocName=primaryParentAssoc.getQName();
  NodeRef parentNodeRef=resolvedNodes.resolvedParent;
  if (parentNodeRef == null) {
    ChildAssociationRef tempLocation=getTemporaryLocation(node.getNodeRef());
    parentNodeRef=tempLocation.getParentRef();
    parentAssocType=tempLocation.getTypeQName();
    parentAssocName=tempLocation.getQName();
    storeOrphanNode(primaryParentAssoc);
  }
  ChildAssociationRef currentParent=nodeService.getPrimaryParent(nodeToUpdate);
  if (!currentParent.getParentRef().equals(parentNodeRef) || !currentParent.getTypeQName().equals(parentAssocType) || !currentParent.getQName().equals(parentAssocName)) {
    if (nodeService.hasAspect(currentParent.getParentRef(),TransferModel.ASPECT_ALIEN)) {
      alienProcessor.beforeDeleteAlien(currentParent.getChildRef(),null);
    }
    ChildAssociationRef newNode=nodeService.moveNode(nodeToUpdate,parentNodeRef,parentAssocType,parentAssocName);
    logMoved(node.getNodeRef(),nodeToUpdate,node.getParentPath(),newNode.getParentRef(),nodeService.getPath(newNode.getChildRef()));
    if (nodeService.hasAspect(newNode.getChildRef(),TransferModel.ASPECT_ALIEN)) {
      alienProcessor.afterMoveAlien(newNode);
    }
 else {
      if (nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_TRANSFERRED) || nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_ALIEN)) {
        alienProcessor.onCreateChild(newNode,header.getRepositoryId(),true);
      }
    }
  }
  log.info(""String_Node_Str"" + parentNodeRef);
  if (updateNeeded(node,nodeToUpdate)) {
    logUpdated(node.getNodeRef(),nodeToUpdate,nodeService.getPath(nodeToUpdate));
    Map<QName,Serializable> props=new HashMap<QName,Serializable>(node.getProperties());
    Map<QName,Serializable> existingProps=nodeService.getProperties(nodeToUpdate);
    injectTransferred(props);
    props.remove(TransferModel.PROP_INVADED_BY);
    if (header.isReadOnly()) {
      props.put(ContentModel.PROP_LOCK_OWNER,AuthenticationUtil.getAdminUserName());
      props.put(ContentModel.PROP_LOCK_TYPE,LockType.NODE_LOCK.toString());
      props.put(ContentModel.PROP_EXPIRY_DATE,null);
      log.debug(""String_Node_Str"");
    }
    Map<QName,Serializable> contentProps=processProperties(nodeToUpdate,props,existingProps);
    if (existingProps.containsKey(TransferModel.PROP_INVADED_BY)) {
      props.put(TransferModel.PROP_INVADED_BY,existingProps.get(TransferModel.PROP_INVADED_BY));
    }
    nodeService.setProperties(nodeToUpdate,props);
    writeContent(nodeToUpdate,contentProps);
    Set<QName> suppliedAspects=new HashSet<QName>(node.getAspects());
    Set<QName> existingAspects=nodeService.getAspects(nodeToUpdate);
    Set<QName> aspectsToRemove=new HashSet<QName>(existingAspects);
    List<AspectDefinition> aspectDefs=dictionaryService.getType(nodeService.getType(nodeToUpdate)).getDefaultAspects(true);
    for (    AspectDefinition aspectDef : aspectDefs) {
      suppliedAspects.add(aspectDef.getName());
    }
    if (header.isReadOnly()) {
      suppliedAspects.add(ContentModel.ASPECT_LOCKABLE);
    }
    aspectsToRemove.removeAll(suppliedAspects);
    aspectsToRemove.remove(TransferModel.ASPECT_TRANSFERRED);
    aspectsToRemove.remove(TransferModel.ASPECT_ALIEN);
    suppliedAspects.removeAll(existingAspects);
    for (    QName aspect : suppliedAspects) {
      nodeService.addAspect(nodeToUpdate,aspect,null);
    }
    for (    QName aspect : aspectsToRemove) {
      nodeService.removeAspect(nodeToUpdate,aspect);
    }
    ManifestAccessControl acl=node.getAccessControl();
    if (acl != null) {
      boolean existInherit=permissionService.getInheritParentPermissions(nodeToUpdate);
      if (existInherit != acl.isInherited()) {
        log.debug(""String_Node_Str"");
        permissionService.setInheritParentPermissions(nodeToUpdate,acl.isInherited());
      }
      Set<AccessPermission> existingPermissions=permissionService.getAllSetPermissions(nodeToUpdate);
      List<ManifestPermission> newPermissions=acl.getPermissions();
      if (existingPermissions.size() > 0 || newPermissions != null) {
        log.debug(""String_Node_Str"");
        Set<ManifestPermission> work=new HashSet<ManifestPermission>();
        for (        AccessPermission permission : existingPermissions) {
          if (permission.isSetDirectly()) {
            ManifestPermission p=new ManifestPermission();
            p.setAuthority(permission.getAuthority());
            p.setPermission(permission.getPermission());
            p.setStatus(permission.getAccessStatus().toString());
            work.add(p);
          }
        }
        if (newPermissions != null) {
          for (          ManifestPermission permission : acl.getPermissions()) {
            if (!work.contains(permission)) {
              log.debug(""String_Node_Str"" + permission);
              AccessStatus status=AccessStatus.valueOf(permission.getStatus());
              permissionService.setPermission(nodeToUpdate,permission.getAuthority(),permission.getPermission(),status == AccessStatus.ALLOWED);
            }
          }
          work.removeAll(newPermissions);
        }
        for (        ManifestPermission permission : work) {
          log.debug(""String_Node_Str"" + permission);
          permissionService.deletePermission(nodeToUpdate,permission.getAuthority(),permission.getPermission());
        }
      }
    }
  }
}","/** 
 * @param node
 * @param resolvedNodes
 * @param primaryParentAssoc
 */
private void update(TransferManifestNormalNode node,ResolvedParentChildPair resolvedNodes,ChildAssociationRef primaryParentAssoc){
  NodeRef nodeToUpdate=resolvedNodes.resolvedChild;
  if (nodeService.hasAspect(nodeToUpdate,TransferModel.ASPECT_TRANSFERRED)) {
    String fromRepository=(String)nodeService.getProperty(nodeToUpdate,TransferModel.PROP_FROM_REPOSITORY_ID);
    String transferringRepo=header.getRepositoryId();
    if (fromRepository != null && transferringRepo != null) {
      if (!fromRepository.equalsIgnoreCase(transferringRepo)) {
        logComment(""String_Node_Str"" + node.getNodeRef());
        return;
      }
    }
  }
  QName parentAssocType=primaryParentAssoc.getTypeQName();
  QName parentAssocName=primaryParentAssoc.getQName();
  NodeRef parentNodeRef=resolvedNodes.resolvedParent;
  if (parentNodeRef == null) {
    ChildAssociationRef tempLocation=getTemporaryLocation(node.getNodeRef());
    parentNodeRef=tempLocation.getParentRef();
    parentAssocType=tempLocation.getTypeQName();
    parentAssocName=tempLocation.getQName();
    storeOrphanNode(primaryParentAssoc);
  }
  ChildAssociationRef currentParent=nodeService.getPrimaryParent(nodeToUpdate);
  if (!currentParent.getParentRef().equals(parentNodeRef) || !currentParent.getTypeQName().equals(parentAssocType) || !currentParent.getQName().equals(parentAssocName)) {
    if (nodeService.hasAspect(currentParent.getParentRef(),TransferModel.ASPECT_ALIEN)) {
      alienProcessor.beforeDeleteAlien(currentParent.getChildRef(),null);
    }
    ChildAssociationRef newNode=nodeService.moveNode(nodeToUpdate,parentNodeRef,parentAssocType,parentAssocName);
    logMoved(node.getNodeRef(),nodeToUpdate,node.getParentPath().toString(),newNode.getParentRef(),nodeService.getPath(newNode.getChildRef()).toString());
    if (nodeService.hasAspect(newNode.getChildRef(),TransferModel.ASPECT_ALIEN)) {
      alienProcessor.afterMoveAlien(newNode);
    }
 else {
      if (nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_TRANSFERRED) || nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_ALIEN)) {
        alienProcessor.onCreateChild(newNode,header.getRepositoryId(),true);
      }
    }
  }
  log.info(""String_Node_Str"" + parentNodeRef);
  if (updateNeeded(node,nodeToUpdate)) {
    logUpdated(node.getNodeRef(),nodeToUpdate,nodeService.getPath(nodeToUpdate).toString());
    Map<QName,Serializable> props=new HashMap<QName,Serializable>(node.getProperties());
    Map<QName,Serializable> existingProps=nodeService.getProperties(nodeToUpdate);
    injectTransferred(props);
    props.remove(TransferModel.PROP_INVADED_BY);
    if (header.isReadOnly()) {
      props.put(ContentModel.PROP_LOCK_OWNER,AuthenticationUtil.getAdminUserName());
      props.put(ContentModel.PROP_LOCK_TYPE,LockType.NODE_LOCK.toString());
      props.put(ContentModel.PROP_EXPIRY_DATE,null);
      log.debug(""String_Node_Str"");
    }
    Map<QName,Serializable> contentProps=processProperties(nodeToUpdate,props,existingProps);
    if (existingProps.containsKey(TransferModel.PROP_INVADED_BY)) {
      props.put(TransferModel.PROP_INVADED_BY,existingProps.get(TransferModel.PROP_INVADED_BY));
    }
    nodeService.setProperties(nodeToUpdate,props);
    writeContent(nodeToUpdate,contentProps);
    Set<QName> suppliedAspects=new HashSet<QName>(node.getAspects());
    Set<QName> existingAspects=nodeService.getAspects(nodeToUpdate);
    Set<QName> aspectsToRemove=new HashSet<QName>(existingAspects);
    List<AspectDefinition> aspectDefs=dictionaryService.getType(nodeService.getType(nodeToUpdate)).getDefaultAspects(true);
    for (    AspectDefinition aspectDef : aspectDefs) {
      suppliedAspects.add(aspectDef.getName());
    }
    if (header.isReadOnly()) {
      suppliedAspects.add(ContentModel.ASPECT_LOCKABLE);
    }
    aspectsToRemove.removeAll(suppliedAspects);
    aspectsToRemove.remove(TransferModel.ASPECT_TRANSFERRED);
    aspectsToRemove.remove(TransferModel.ASPECT_ALIEN);
    suppliedAspects.removeAll(existingAspects);
    for (    QName aspect : suppliedAspects) {
      nodeService.addAspect(nodeToUpdate,aspect,null);
    }
    for (    QName aspect : aspectsToRemove) {
      nodeService.removeAspect(nodeToUpdate,aspect);
    }
    ManifestAccessControl acl=node.getAccessControl();
    if (acl != null) {
      boolean existInherit=permissionService.getInheritParentPermissions(nodeToUpdate);
      if (existInherit != acl.isInherited()) {
        log.debug(""String_Node_Str"");
        permissionService.setInheritParentPermissions(nodeToUpdate,acl.isInherited());
      }
      Set<AccessPermission> existingPermissions=permissionService.getAllSetPermissions(nodeToUpdate);
      List<ManifestPermission> newPermissions=acl.getPermissions();
      if (existingPermissions.size() > 0 || newPermissions != null) {
        log.debug(""String_Node_Str"");
        Set<ManifestPermission> work=new HashSet<ManifestPermission>();
        for (        AccessPermission permission : existingPermissions) {
          if (permission.isSetDirectly()) {
            ManifestPermission p=new ManifestPermission();
            p.setAuthority(permission.getAuthority());
            p.setPermission(permission.getPermission());
            p.setStatus(permission.getAccessStatus().toString());
            work.add(p);
          }
        }
        if (newPermissions != null) {
          for (          ManifestPermission permission : acl.getPermissions()) {
            if (!work.contains(permission)) {
              log.debug(""String_Node_Str"" + permission);
              AccessStatus status=AccessStatus.valueOf(permission.getStatus());
              permissionService.setPermission(nodeToUpdate,permission.getAuthority(),permission.getPermission(),status == AccessStatus.ALLOWED);
            }
          }
          work.removeAll(newPermissions);
        }
        for (        ManifestPermission permission : work) {
          log.debug(""String_Node_Str"" + permission);
          permissionService.deletePermission(nodeToUpdate,permission.getAuthority(),permission.getPermission());
        }
      }
    }
  }
}",0.99732511955905
172125,"/** 
 * Delete this node
 * @param exNode
 */
protected void delete(TransferManifestDeletedNode node,NodeRef nodeToDelete){
  if (alienProcessor.isAlien(nodeToDelete)) {
    logComment(""String_Node_Str"" + nodeToDelete);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + nodeToDelete);
    }
    alienProcessor.pruneNode(nodeToDelete,header.getRepositoryId());
  }
 else {
    if (nodeService.hasAspect(nodeToDelete,TransferModel.ASPECT_TRANSFERRED)) {
      String fromRepository=(String)nodeService.getProperty(nodeToDelete,TransferModel.PROP_FROM_REPOSITORY_ID);
      String transferringRepo=header.getRepositoryId();
      if (fromRepository != null && transferringRepo != null) {
        if (!fromRepository.equalsIgnoreCase(transferringRepo)) {
          logComment(""String_Node_Str"" + nodeToDelete);
          return;
        }
      }
    }
    logDeleted(node.getNodeRef(),nodeToDelete,nodeService.getPath(nodeToDelete));
    nodeService.deleteNode(nodeToDelete);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + nodeToDelete);
    }
  }
}","/** 
 * Delete this node
 * @param exNode
 */
protected void delete(TransferManifestDeletedNode node,NodeRef nodeToDelete){
  if (alienProcessor.isAlien(nodeToDelete)) {
    logComment(""String_Node_Str"" + nodeToDelete);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + nodeToDelete);
    }
    alienProcessor.pruneNode(nodeToDelete,header.getRepositoryId());
  }
 else {
    if (nodeService.hasAspect(nodeToDelete,TransferModel.ASPECT_TRANSFERRED)) {
      String fromRepository=(String)nodeService.getProperty(nodeToDelete,TransferModel.PROP_FROM_REPOSITORY_ID);
      String transferringRepo=header.getRepositoryId();
      if (fromRepository != null && transferringRepo != null) {
        if (!fromRepository.equalsIgnoreCase(transferringRepo)) {
          logComment(""String_Node_Str"" + nodeToDelete);
          return;
        }
      }
    }
    logDeleted(node.getNodeRef(),nodeToDelete,nodeService.getPath(nodeToDelete).toString());
    nodeService.deleteNode(nodeToDelete);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + nodeToDelete);
    }
  }
}",0.994956441999083
172126,"/** 
 * Create new node.
 * @param node
 * @param resolvedNodes
 * @param primaryParentAssoc
 */
private void create(TransferManifestNormalNode node,ResolvedParentChildPair resolvedNodes,ChildAssociationRef primaryParentAssoc){
  log.info(""String_Node_Str"" + node.getNodeRef());
  QName parentAssocType=primaryParentAssoc.getTypeQName();
  QName parentAssocName=primaryParentAssoc.getQName();
  NodeRef parentNodeRef=resolvedNodes.resolvedParent;
  if (parentNodeRef == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + node.getNodeRef() + ""String_Node_Str""+ primaryParentAssoc.getParentRef()+ ""String_Node_Str""+ node.getParentPath().toString());
    }
    ChildAssociationRef tempLocation=getTemporaryLocation(node.getNodeRef());
    parentNodeRef=tempLocation.getParentRef();
    parentAssocType=tempLocation.getTypeQName();
    parentAssocName=tempLocation.getQName();
    log.info(""String_Node_Str"" + node.getNodeRef());
    logComment(""String_Node_Str"" + node.getNodeRef());
    storeOrphanNode(primaryParentAssoc);
  }
  log.info(""String_Node_Str"" + parentNodeRef);
  Map<QName,Serializable> props=new HashMap<QName,Serializable>(node.getProperties());
  Map<QName,Serializable> contentProps=processProperties(null,props,null);
  injectTransferred(props);
  props.remove(TransferModel.PROP_INVADED_BY);
  if (header.isReadOnly()) {
    log.debug(""String_Node_Str"");
    props.put(ContentModel.PROP_LOCK_OWNER,AuthenticationUtil.getAdminUserName());
    props.put(ContentModel.PROP_LOCK_TYPE,LockType.NODE_LOCK.toString());
    props.put(ContentModel.PROP_EXPIRY_DATE,null);
  }
  ChildAssociationRef newNode=nodeService.createNode(parentNodeRef,parentAssocType,parentAssocName,node.getType(),props);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + newNode.getChildRef() + ""String_Node_Str""+ newNode.getParentRef());
  }
  logCreated(node.getNodeRef(),newNode.getChildRef(),newNode.getParentRef(),nodeService.getPath(newNode.getChildRef()),false);
  writeContent(newNode.getChildRef(),contentProps);
  Set<QName> aspects=new HashSet<QName>(node.getAspects());
  aspects.removeAll(nodeService.getAspects(newNode.getChildRef()));
  for (  QName aspect : aspects) {
    nodeService.addAspect(newNode.getChildRef(),aspect,null);
  }
  ManifestAccessControl acl=node.getAccessControl();
  if (acl != null) {
    permissionService.setInheritParentPermissions(newNode.getChildRef(),acl.isInherited());
    if (acl.getPermissions() != null) {
      for (      ManifestPermission permission : acl.getPermissions()) {
        log.debug(""String_Node_Str"");
        AccessStatus status=AccessStatus.valueOf(permission.getStatus());
        permissionService.setPermission(newNode.getChildRef(),permission.getAuthority(),permission.getPermission(),status == AccessStatus.ALLOWED);
      }
    }
  }
  if (nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_TRANSFERRED) || nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_ALIEN)) {
    alienProcessor.onCreateChild(newNode,header.getRepositoryId(),true);
  }
  checkOrphans(newNode.getChildRef());
}","/** 
 * Create new node.
 * @param node
 * @param resolvedNodes
 * @param primaryParentAssoc
 */
private void create(TransferManifestNormalNode node,ResolvedParentChildPair resolvedNodes,ChildAssociationRef primaryParentAssoc){
  log.info(""String_Node_Str"" + node.getNodeRef());
  QName parentAssocType=primaryParentAssoc.getTypeQName();
  QName parentAssocName=primaryParentAssoc.getQName();
  NodeRef parentNodeRef=resolvedNodes.resolvedParent;
  if (parentNodeRef == null) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + node.getNodeRef() + ""String_Node_Str""+ primaryParentAssoc.getParentRef()+ ""String_Node_Str""+ node.getParentPath().toString());
    }
    ChildAssociationRef tempLocation=getTemporaryLocation(node.getNodeRef());
    parentNodeRef=tempLocation.getParentRef();
    parentAssocType=tempLocation.getTypeQName();
    parentAssocName=tempLocation.getQName();
    log.info(""String_Node_Str"" + node.getNodeRef());
    logComment(""String_Node_Str"" + node.getNodeRef());
    storeOrphanNode(primaryParentAssoc);
  }
  log.info(""String_Node_Str"" + parentNodeRef);
  Map<QName,Serializable> props=new HashMap<QName,Serializable>(node.getProperties());
  Map<QName,Serializable> contentProps=processProperties(null,props,null);
  injectTransferred(props);
  props.remove(TransferModel.PROP_INVADED_BY);
  if (header.isReadOnly()) {
    log.debug(""String_Node_Str"");
    props.put(ContentModel.PROP_LOCK_OWNER,AuthenticationUtil.getAdminUserName());
    props.put(ContentModel.PROP_LOCK_TYPE,LockType.NODE_LOCK.toString());
    props.put(ContentModel.PROP_EXPIRY_DATE,null);
  }
  ChildAssociationRef newNode=nodeService.createNode(parentNodeRef,parentAssocType,parentAssocName,node.getType(),props);
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + newNode.getChildRef() + ""String_Node_Str""+ newNode.getParentRef());
  }
  logCreated(node.getNodeRef(),newNode.getChildRef(),newNode.getParentRef(),nodeService.getPath(newNode.getChildRef()).toString(),false);
  writeContent(newNode.getChildRef(),contentProps);
  Set<QName> aspects=new HashSet<QName>(node.getAspects());
  aspects.removeAll(nodeService.getAspects(newNode.getChildRef()));
  for (  QName aspect : aspects) {
    nodeService.addAspect(newNode.getChildRef(),aspect,null);
  }
  ManifestAccessControl acl=node.getAccessControl();
  if (acl != null) {
    permissionService.setInheritParentPermissions(newNode.getChildRef(),acl.isInherited());
    if (acl.getPermissions() != null) {
      for (      ManifestPermission permission : acl.getPermissions()) {
        log.debug(""String_Node_Str"");
        AccessStatus status=AccessStatus.valueOf(permission.getStatus());
        permissionService.setPermission(newNode.getChildRef(),permission.getAuthority(),permission.getPermission(),status == AccessStatus.ALLOWED);
      }
    }
  }
  if (nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_TRANSFERRED) || nodeService.hasAspect(parentNodeRef,TransferModel.ASPECT_ALIEN)) {
    alienProcessor.onCreateChild(newNode,header.getRepositoryId(),true);
  }
  checkOrphans(newNode.getChildRef());
}",0.9982266645171692
172127,"/** 
 * inject transferred
 */
private void injectTransferred(Map<QName,Serializable> props){
  if (!props.containsKey(TransferModel.PROP_REPOSITORY_ID)) {
    log.debug(""String_Node_Str"");
    props.put(TransferModel.PROP_REPOSITORY_ID,header.getRepositoryId());
  }
  props.put(TransferModel.PROP_FROM_REPOSITORY_ID,header.getRepositoryId());
  List<String> contentProps=new ArrayList();
  for (  Serializable value : props.values()) {
    if ((value != null) && ContentData.class.isAssignableFrom(value.getClass())) {
      ContentData srcContent=(ContentData)value;
      if (srcContent.getContentUrl() != null && !srcContent.getContentUrl().isEmpty()) {
        log.debug(""String_Node_Str"");
        contentProps.add(TransferCommons.URLToPartName(srcContent.getContentUrl()));
      }
    }
  }
  props.put(TransferModel.PROP_FROM_CONTENT,(Serializable)contentProps);
}","/** 
 * inject transferred
 */
private void injectTransferred(Map<QName,Serializable> props){
  if (!props.containsKey(TransferModel.PROP_REPOSITORY_ID)) {
    log.debug(""String_Node_Str"");
    props.put(TransferModel.PROP_REPOSITORY_ID,header.getRepositoryId());
  }
  props.put(TransferModel.PROP_FROM_REPOSITORY_ID,header.getRepositoryId());
  List<String> contentProps=new ArrayList<String>();
  for (  Serializable value : props.values()) {
    if ((value != null) && ContentData.class.isAssignableFrom(value.getClass())) {
      ContentData srcContent=(ContentData)value;
      if (srcContent.getContentUrl() != null && !srcContent.getContentUrl().isEmpty()) {
        log.debug(""String_Node_Str"");
        contentProps.add(TransferCommons.URLToPartName(srcContent.getContentUrl()));
      }
    }
  }
  props.put(TransferModel.PROP_FROM_CONTENT,(Serializable)contentProps);
}",0.9954441913439636
172128,"protected void processNode(TransferManifestNormalNode node){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + node.getNodeRef());
  }
  logComment(""String_Node_Str"" + node.getNodeRef() + ""String_Node_Str""+ node.getParentPath()+ ""String_Node_Str""+ node.getPrimaryParentAssoc().getQName());
  if (isSync) {
    ChildAssociationRef primaryParentAssoc=node.getPrimaryParentAssoc();
    CorrespondingNodeResolver.ResolvedParentChildPair resolvedNodes=nodeResolver.resolveCorrespondingNode(node.getNodeRef(),primaryParentAssoc,node.getParentPath());
    NodeRef nodeRef=resolvedNodes.resolvedChild;
    if (nodeService.exists(nodeRef)) {
      log.debug(""String_Node_Str"");
      List<ChildAssociationRef> expectedChildren=node.getChildAssocs();
      List<NodeRef> expectedChildNodeRefs=new ArrayList<NodeRef>();
      for (      ChildAssociationRef ref : expectedChildren) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ref);
        }
        expectedChildNodeRefs.add(ref.getChildRef());
      }
      List<ChildAssociationRef> actualChildren=nodeService.getChildAssocs(nodeRef);
      for (      ChildAssociationRef child : actualChildren) {
        log.debug(""String_Node_Str"" + child);
        if (child.isPrimary()) {
          NodeRef childNodeRef=child.getChildRef();
          if (!expectedChildNodeRefs.contains(childNodeRef)) {
            if (nodeService.hasAspect(childNodeRef,TransferModel.ASPECT_TRANSFERRED)) {
              log.debug(""String_Node_Str"" + child);
              logComment(""String_Node_Str"" + child);
              String fromRepositoryId=(String)nodeService.getProperty(childNodeRef,TransferModel.PROP_FROM_REPOSITORY_ID);
              if (fromRepositoryId != null && manifestRepositoryId != null) {
                if (nodeService.hasAspect(childNodeRef,TransferModel.ASPECT_ALIEN)) {
                  log.debug(""String_Node_Str"" + childNodeRef);
                  logComment(""String_Node_Str"" + childNodeRef);
                  alienProcessor.pruneNode(childNodeRef,fromRepositoryId);
                }
 else {
                  log.debug(""String_Node_Str"");
                  if (manifestRepositoryId.equalsIgnoreCase(fromRepositoryId)) {
                    logDeleted(node.getNodeRef(),childNodeRef,nodeService.getPath(childNodeRef));
                    nodeService.deleteNode(childNodeRef);
                    log.debug(""String_Node_Str"" + childNodeRef);
                  }
                }
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
      }
    }
 else {
      log.debug(""String_Node_Str"");
    }
  }
}","protected void processNode(TransferManifestNormalNode node){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + node.getNodeRef());
  }
  logComment(""String_Node_Str"" + node.getNodeRef() + ""String_Node_Str""+ node.getParentPath()+ ""String_Node_Str""+ node.getPrimaryParentAssoc().getQName());
  if (isSync) {
    ChildAssociationRef primaryParentAssoc=node.getPrimaryParentAssoc();
    CorrespondingNodeResolver.ResolvedParentChildPair resolvedNodes=nodeResolver.resolveCorrespondingNode(node.getNodeRef(),primaryParentAssoc,node.getParentPath());
    NodeRef nodeRef=resolvedNodes.resolvedChild;
    if (nodeService.exists(nodeRef)) {
      log.debug(""String_Node_Str"");
      List<ChildAssociationRef> expectedChildren=node.getChildAssocs();
      List<NodeRef> expectedChildNodeRefs=new ArrayList<NodeRef>();
      for (      ChildAssociationRef ref : expectedChildren) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + ref);
        }
        expectedChildNodeRefs.add(ref.getChildRef());
      }
      List<ChildAssociationRef> actualChildren=nodeService.getChildAssocs(nodeRef);
      for (      ChildAssociationRef child : actualChildren) {
        log.debug(""String_Node_Str"" + child);
        if (child.isPrimary()) {
          NodeRef childNodeRef=child.getChildRef();
          if (!expectedChildNodeRefs.contains(childNodeRef)) {
            if (nodeService.hasAspect(childNodeRef,TransferModel.ASPECT_TRANSFERRED)) {
              log.debug(""String_Node_Str"" + child);
              logComment(""String_Node_Str"" + child);
              String fromRepositoryId=(String)nodeService.getProperty(childNodeRef,TransferModel.PROP_FROM_REPOSITORY_ID);
              if (fromRepositoryId != null && manifestRepositoryId != null) {
                if (nodeService.hasAspect(childNodeRef,TransferModel.ASPECT_ALIEN)) {
                  log.debug(""String_Node_Str"" + childNodeRef);
                  logComment(""String_Node_Str"" + childNodeRef);
                  alienProcessor.pruneNode(childNodeRef,fromRepositoryId);
                }
 else {
                  log.debug(""String_Node_Str"");
                  if (manifestRepositoryId.equalsIgnoreCase(fromRepositoryId)) {
                    logDeleted(node.getNodeRef(),childNodeRef,nodeService.getPath(childNodeRef).toString());
                    nodeService.deleteNode(childNodeRef);
                    log.debug(""String_Node_Str"" + childNodeRef);
                  }
                }
              }
 else {
                log.debug(""String_Node_Str"");
              }
            }
          }
        }
      }
    }
 else {
      log.debug(""String_Node_Str"");
    }
  }
}",0.9979427716476528
172129,"/** 
 * Reporting a node moved
 */
public void writeMoved(NodeRef sourceNodeRef,NodeRef movedNodeRef,Path oldPath,NodeRef newParentNodeRef,Path newPath);","/** 
 * Reporting a node moved
 */
public void writeMoved(NodeRef sourceNodeRef,NodeRef movedNodeRef,String oldPath,NodeRef newParentNodeRef,String newPath);",0.9483870967741936
172130,"/** 
 * Reporting creation of a new node
 */
public void writeCreated(NodeRef sourceNodeRef,NodeRef newNodeRef,NodeRef newParentNodeRef,Path newPath);","/** 
 * Reporting creation of a new node
 */
public void writeCreated(NodeRef sourceNodeRef,NodeRef newNodeRef,NodeRef newParentNodeRef,String newPath);",0.9735099337748344
172131,"/** 
 * Reporting a node deleted
 */
public void writeDeleted(NodeRef sourceNodeRef,NodeRef deletedNode,Path oldPath);","/** 
 * Reporting a node deleted
 */
public void writeDeleted(NodeRef sourceNodeRef,NodeRef deletedNode,String oldPath);",0.9663865546218487
172132,"/** 
 * Reporting update of an existing node
 */
public void writeUpdated(NodeRef sourceNodeRef,NodeRef updatedNode,Path updatedPath);","/** 
 * Reporting update of an existing node
 */
public void writeUpdated(NodeRef sourceNodeRef,NodeRef updatedNode,String updatedPath);",0.9703703703703704
172133,"/** 
 * Log the creation of a new node
 * @param transferId
 * @param sourceNode
 * @param destNode
 * @param newPath
 * @param orphan
 */
void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef newParent,Path newPath,boolean orphan);","/** 
 * Log the creation of a new node
 * @param transferId
 * @param sourceNode
 * @param destNode
 * @param newPath
 * @param orphan
 */
void logCreated(String transferId,NodeRef sourceNode,NodeRef destNode,NodeRef newParent,String newPath,boolean orphan);",0.980544747081712
172134,"/** 
 * Log the deletion of a node
 * @param transferId
 * @param sourceNode
 * @param destNode
 * @param parentPath
 * @param orphan
 */
void logDeleted(String transferId,NodeRef sourceNode,NodeRef destNode,Path parentPath);","/** 
 * Log the deletion of a node
 * @param transferId
 * @param sourceNode
 * @param destNode
 * @param path The path of the deleted node
 * @param orphan
 */
void logDeleted(String transferId,NodeRef sourceNode,NodeRef destNode,String path);",0.8742004264392325
172135,"/** 
 * Log the creation of a new node
 * @param transferId
 * @param sourceNode
 * @param destNode
 * @param parentPath
 * @param orphan
 */
void logUpdated(String transferId,NodeRef sourceNode,NodeRef destNode,Path parentPath);","/** 
 * Log the creation of a new node
 * @param transferId
 * @param sourceNode
 * @param destNode
 * @param path The path of the updated node
 * @param orphan
 */
void logUpdated(String transferId,NodeRef sourceNode,NodeRef destNode,String path);",0.8763102725366876
172136,"/** 
 * After the transfer has completed this method reads the log.
 * @param transferId
 * @return the log
 */
void logMoved(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,Path oldPath,NodeRef newParent,Path newPath);","/** 
 * After the transfer has completed this method reads the log.
 * @param transferId
 * @return the log
 */
void logMoved(String transferId,NodeRef sourceNodeRef,NodeRef destNodeRef,String oldPath,NodeRef newParent,String newPath);",0.9570815450643776
172137,"@Override public Object answer(InvocationOnMock invocation) throws Throwable {
  OutputStream os=(OutputStream)invocation.getArguments()[1];
  Writer writer=new OutputStreamWriter(os);
  XMLTransferDestinationReportWriter reportWriter=new XMLTransferDestinationReportWriter();
  reportWriter.startTransferReport(""String_Node_Str"",writer);
  reportWriter.writeComment(""String_Node_Str"");
  reportWriter.writeChangeState(""String_Node_Str"");
  reportWriter.writeCreated(file1,file1,folder1,new Path());
  reportWriter.writeDeleted(file3,file3,new Path());
  reportWriter.writeMoved(file2,file2,new Path(),folder1,new Path());
  reportWriter.endTransferReport();
  return null;
}","@Override public Object answer(InvocationOnMock invocation) throws Throwable {
  OutputStream os=(OutputStream)invocation.getArguments()[1];
  Writer writer=new OutputStreamWriter(os);
  XMLTransferDestinationReportWriter reportWriter=new XMLTransferDestinationReportWriter();
  reportWriter.startTransferReport(""String_Node_Str"",writer);
  reportWriter.writeComment(""String_Node_Str"");
  reportWriter.writeChangeState(""String_Node_Str"");
  reportWriter.writeCreated(file1,file1,folder1,""String_Node_Str"");
  reportWriter.writeDeleted(file3,file3,""String_Node_Str"");
  reportWriter.writeMoved(file2,file2,""String_Node_Str"",folder1,""String_Node_Str"");
  reportWriter.endTransferReport();
  return null;
}",0.9216255442670536
172138,"private void configureBasicMockTransmitter(TransferProgress[] statuses){
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      OutputStream os=(OutputStream)invocation.getArguments()[2];
      Writer writer=new OutputStreamWriter(os);
      XMLTransferRequsiteWriter requisiteWriter=new XMLTransferRequsiteWriter(writer);
      requisiteWriter.startTransferRequsite();
      requisiteWriter.missingContent(file1,ContentModel.PROP_CONTENT,TransferCommons.URLToPartName(file1ContentUrl));
      requisiteWriter.missingContent(file2,ContentModel.PROP_CONTENT,TransferCommons.URLToPartName(file2ContentUrl));
      requisiteWriter.missingContent(file3,ContentModel.PROP_CONTENT,TransferCommons.URLToPartName(file3ContentUrl));
      requisiteWriter.endTransferRequsite();
      writer.flush();
      writer.close();
      return null;
    }
  }
).when(mockedTransferTransmitter).sendManifest(any(Transfer.class),any(File.class),any(OutputStream.class));
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      OutputStream os=(OutputStream)invocation.getArguments()[1];
      Writer writer=new OutputStreamWriter(os);
      XMLTransferDestinationReportWriter reportWriter=new XMLTransferDestinationReportWriter();
      reportWriter.startTransferReport(""String_Node_Str"",writer);
      reportWriter.writeComment(""String_Node_Str"");
      reportWriter.writeChangeState(""String_Node_Str"");
      reportWriter.writeCreated(file1,file1,folder1,new Path());
      reportWriter.writeDeleted(file3,file3,new Path());
      reportWriter.writeMoved(file2,file2,new Path(),folder1,new Path());
      reportWriter.endTransferReport();
      return null;
    }
  }
).when(mockedTransferTransmitter).getTransferReport(any(Transfer.class),any(OutputStream.class));
  if (statuses != null) {
    if (statuses.length > 1) {
      when(mockedTransferTransmitter.getStatus(transfer)).thenReturn(statuses[0],Arrays.copyOfRange(statuses,1,statuses.length));
    }
 else     if (statuses.length == 1) {
      when(mockedTransferTransmitter.getStatus(transfer)).thenReturn(statuses[0]);
    }
  }
}","private void configureBasicMockTransmitter(TransferProgress[] statuses){
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      OutputStream os=(OutputStream)invocation.getArguments()[2];
      Writer writer=new OutputStreamWriter(os);
      XMLTransferRequsiteWriter requisiteWriter=new XMLTransferRequsiteWriter(writer);
      requisiteWriter.startTransferRequsite();
      requisiteWriter.missingContent(file1,ContentModel.PROP_CONTENT,TransferCommons.URLToPartName(file1ContentUrl));
      requisiteWriter.missingContent(file2,ContentModel.PROP_CONTENT,TransferCommons.URLToPartName(file2ContentUrl));
      requisiteWriter.missingContent(file3,ContentModel.PROP_CONTENT,TransferCommons.URLToPartName(file3ContentUrl));
      requisiteWriter.endTransferRequsite();
      writer.flush();
      writer.close();
      return null;
    }
  }
).when(mockedTransferTransmitter).sendManifest(any(Transfer.class),any(File.class),any(OutputStream.class));
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      OutputStream os=(OutputStream)invocation.getArguments()[1];
      Writer writer=new OutputStreamWriter(os);
      XMLTransferDestinationReportWriter reportWriter=new XMLTransferDestinationReportWriter();
      reportWriter.startTransferReport(""String_Node_Str"",writer);
      reportWriter.writeComment(""String_Node_Str"");
      reportWriter.writeChangeState(""String_Node_Str"");
      reportWriter.writeCreated(file1,file1,folder1,""String_Node_Str"");
      reportWriter.writeDeleted(file3,file3,""String_Node_Str"");
      reportWriter.writeMoved(file2,file2,""String_Node_Str"",folder1,""String_Node_Str"");
      reportWriter.endTransferReport();
      return null;
    }
  }
).when(mockedTransferTransmitter).getTransferReport(any(Transfer.class),any(OutputStream.class));
  if (statuses != null) {
    if (statuses.length > 1) {
      when(mockedTransferTransmitter.getStatus(transfer)).thenReturn(statuses[0],Arrays.copyOfRange(statuses,1,statuses.length));
    }
 else     if (statuses.length == 1) {
      when(mockedTransferTransmitter.getStatus(transfer)).thenReturn(statuses[0]);
    }
  }
}",0.9757630161579892
172139,"private String guessEncoding(InputStream in){
  String encoding=""String_Node_Str"";
  try {
    if (in != null) {
      Charset charset=services.getMimetypeService().getContentCharsetFinder().getCharset(in,getMimetype());
      encoding=charset.name();
    }
  }
  finally {
    try {
      if (in != null) {
        in.close();
      }
    }
 catch (    IOException ioErr) {
    }
  }
  return encoding;
}","private String guessEncoding(InputStream in,boolean close){
  String encoding=""String_Node_Str"";
  try {
    if (in != null) {
      Charset charset=services.getMimetypeService().getContentCharsetFinder().getCharset(in,getMimetype());
      encoding=charset.name();
    }
  }
  finally {
    try {
      if (close && in != null) {
        in.close();
      }
    }
 catch (    IOException ioErr) {
    }
  }
  return encoding;
}",0.9723889555822328
172140,"private List<SiteInfo> listSitesImpl(final String userName,int size){
  final int maxResults=size > 0 ? size : 1000;
  final Set<String> siteNames=new TreeSet<String>();
  authorityService.getContainingAuthoritiesInZone(AuthorityType.GROUP,userName,AuthorityService.ZONE_APP_SHARE,new AuthorityFilter(){
    @Override public boolean includeAuthority(    String authority){
      String siteName=resolveSite(authority);
      if (siteName == null) {
        return false;
      }
      return siteNames.add(siteName);
    }
  }
,maxResults);
  if (siteNames.isEmpty()) {
    return Collections.emptyList();
  }
  List<ChildAssociationRef> assocs=this.nodeService.getChildrenByName(getSiteRoot(),ContentModel.ASSOC_CONTAINS,siteNames);
  List<SiteInfo> result=new ArrayList<SiteInfo>(assocs.size());
  for (  ChildAssociationRef assoc : assocs) {
    NodeRef site=assoc.getChildRef();
    QName siteClassName=this.directNodeService.getType(site);
    if (this.dictionaryService.isSubClass(siteClassName,SiteModel.TYPE_SITE)) {
      result.add(createSiteInfo(site));
    }
  }
  return result;
}","private List<SiteInfo> listSitesImpl(final String userName,int size){
  final int maxResults=size > 0 ? size : 1000;
  final Set<String> siteNames=new TreeSet<String>();
  authorityService.getContainingAuthoritiesInZone(AuthorityType.GROUP,userName,AuthorityService.ZONE_APP_SHARE,new AuthorityFilter(){
    @Override public boolean includeAuthority(    String authority){
      if (siteNames.size() < maxResults) {
        String siteName=resolveSite(authority);
        if (siteName == null) {
          return false;
        }
        return siteNames.add(siteName);
      }
      return false;
    }
  }
,maxResults);
  if (siteNames.isEmpty()) {
    return Collections.emptyList();
  }
  List<ChildAssociationRef> assocs=this.nodeService.getChildrenByName(getSiteRoot(),ContentModel.ASSOC_CONTAINS,siteNames);
  List<SiteInfo> result=new ArrayList<SiteInfo>(assocs.size());
  for (  ChildAssociationRef assoc : assocs) {
    NodeRef site=assoc.getChildRef();
    QName siteClassName=this.directNodeService.getType(site);
    if (this.dictionaryService.isSubClass(siteClassName,SiteModel.TYPE_SITE)) {
      result.add(createSiteInfo(site));
    }
  }
  return result;
}",0.925452139391266
172141,"@Override public boolean includeAuthority(String authority){
  String siteName=resolveSite(authority);
  if (siteName == null) {
    return false;
  }
  return siteNames.add(siteName);
}","@Override public boolean includeAuthority(String authority){
  if (siteNames.size() < maxResults) {
    String siteName=resolveSite(authority);
    if (siteName == null) {
      return false;
    }
    return siteNames.add(siteName);
  }
  return false;
}",0.780045351473923
172142,"protected void checkProcessNameQuery(List<String> expectedTaskIds,WorkflowTaskState state){
  WorkflowTaskQuery taskQuery=createWorkflowTaskQuery(state);
  taskQuery.setProcessName(getAdhocProcessName());
  checkTasksFoundUsingQuery(expectedTaskIds,taskQuery);
  taskQuery=createWorkflowTaskQuery(state);
  taskQuery.setProcessName(QName.createQName(""String_Node_Str""));
  checkNoTasksFoundUsingQuery(taskQuery);
  taskQuery.setWorkflowDefinitionName(getAdhocProcessName().toPrefixString());
  checkTasksFoundUsingQuery(expectedTaskIds,taskQuery);
  taskQuery=createWorkflowTaskQuery(state);
  taskQuery.setWorkflowDefinitionName(""String_Node_Str"");
  checkNoTasksFoundUsingQuery(taskQuery);
}","@SuppressWarnings(""String_Node_Str"") protected void checkProcessNameQuery(List<String> expectedTaskIds,WorkflowTaskState state){
  WorkflowTaskQuery taskQuery=createWorkflowTaskQuery(state);
  taskQuery.setProcessName(getAdhocProcessName());
  checkTasksFoundUsingQuery(expectedTaskIds,taskQuery);
  taskQuery=createWorkflowTaskQuery(state);
  taskQuery.setProcessName(QName.createQName(""String_Node_Str""));
  checkNoTasksFoundUsingQuery(taskQuery);
  taskQuery.setWorkflowDefinitionName(getAdhocProcessName().toPrefixString());
  checkTasksFoundUsingQuery(expectedTaskIds,taskQuery);
  taskQuery=createWorkflowTaskQuery(state);
  taskQuery.setWorkflowDefinitionName(""String_Node_Str"");
  checkNoTasksFoundUsingQuery(taskQuery);
}",0.9739985945186226
172143,"public void testGetWorkflows() throws Exception {
  String fakeDefId=getEngine() + ""String_Node_Str"";
  List<WorkflowInstance> workflows=workflowService.getActiveWorkflows(fakeDefId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getCompletedWorkflows(fakeDefId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getWorkflows(fakeDefId);
  assertTrue(workflows.isEmpty());
  WorkflowDefinition definition=deployDefinition(getTestDefinitionPath());
  String defId=definition.getId();
  workflows=workflowService.getActiveWorkflows(defId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getCompletedWorkflows(defId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getWorkflows(defId);
  assertTrue(workflows.isEmpty());
  Date dueDate=new Date();
  String description=""String_Node_Str"";
  NodeRef assignee=personManager.get(USER2);
  Serializable wfPackage1=workflowService.createPackage(null);
  Map<QName,Serializable> params=new HashMap<QName,Serializable>();
  params.put(WorkflowModel.ASSOC_PACKAGE,wfPackage1);
  params.put(WorkflowModel.PROP_WORKFLOW_DUE_DATE,dueDate);
  params.put(WorkflowModel.PROP_WORKFLOW_PRIORITY,1);
  params.put(WorkflowModel.PROP_WORKFLOW_DESCRIPTION,description);
  params.put(WorkflowModel.ASSOC_ASSIGNEE,assignee);
  WorkflowPath path1=workflowService.startWorkflow(defId,params);
  String instance1=path1.getInstance().getId();
  checkActiveWorkflows(defId,instance1);
  checkCompletedWorkflows(defId);
  checkWorkflows(defId,instance1);
  Serializable wfPackage2=workflowService.createPackage(null);
  params=new HashMap<QName,Serializable>();
  params.put(WorkflowModel.ASSOC_PACKAGE,wfPackage2);
  params.put(WorkflowModel.PROP_WORKFLOW_DUE_DATE,dueDate);
  params.put(WorkflowModel.PROP_WORKFLOW_PRIORITY,1);
  params.put(WorkflowModel.PROP_WORKFLOW_DESCRIPTION,description);
  params.put(WorkflowModel.ASSOC_ASSIGNEE,assignee);
  WorkflowPath path2=workflowService.startWorkflow(defId,params);
  String instance2=path2.getInstance().getId();
  checkActiveWorkflows(defId,instance1,instance2);
  checkCompletedWorkflows(defId);
  checkWorkflows(defId,instance1,instance2);
  WorkflowTask startTask1=workflowService.getStartTask(instance1);
  workflowService.endTask(startTask1.getId(),null);
  List<WorkflowTask> tasks=workflowService.getTasksForWorkflowPath(path1.getId());
  assertEquals(1,tasks.size());
  WorkflowTask task1=tasks.get(0);
  workflowService.endTask(task1.getId(),null);
  checkActiveWorkflows(defId,instance2);
  checkCompletedWorkflows(defId,instance1);
  checkWorkflows(defId,instance1,instance2);
  WorkflowTask startTask2=workflowService.getStartTask(instance2);
  workflowService.endTask(startTask2.getId(),null);
  tasks=workflowService.getTasksForWorkflowPath(path2.getId());
  assertEquals(1,tasks.size());
  WorkflowTask task2=tasks.get(0);
  workflowService.endTask(task2.getId(),null);
  checkActiveWorkflows(defId);
  checkCompletedWorkflows(defId,instance1,instance2);
  checkWorkflows(defId,instance1,instance2);
}","public void testGetWorkflows() throws Exception {
  String fakeDefId=getEngine() + ""String_Node_Str"";
  List<WorkflowInstance> workflows=workflowService.getActiveWorkflows(fakeDefId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getCompletedWorkflows(fakeDefId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getWorkflows(fakeDefId);
  assertTrue(workflows.isEmpty());
  WorkflowDefinition definition=deployDefinition(getTestDefinitionPath());
  String defId=definition.getId();
  workflows=workflowService.getActiveWorkflows(defId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getCompletedWorkflows(defId);
  assertTrue(workflows.isEmpty());
  workflows=workflowService.getWorkflows(defId);
  assertTrue(workflows.isEmpty());
  Date dueDate=new Date();
  String description=""String_Node_Str"";
  NodeRef assignee=personManager.get(USER2);
  Serializable wfPackage1=workflowService.createPackage(null);
  Map<QName,Serializable> params=new HashMap<QName,Serializable>();
  params.put(WorkflowModel.ASSOC_PACKAGE,wfPackage1);
  params.put(WorkflowModel.PROP_WORKFLOW_DUE_DATE,dueDate);
  params.put(WorkflowModel.PROP_WORKFLOW_PRIORITY,1);
  params.put(WorkflowModel.PROP_WORKFLOW_DESCRIPTION,description);
  params.put(WorkflowModel.ASSOC_ASSIGNEE,assignee);
  WorkflowPath path1=workflowService.startWorkflow(defId,params);
  String instance1=path1.getInstance().getId();
  checkActiveWorkflows(defId,instance1);
  checkCompletedWorkflows(defId);
  checkWorkflows(defId,instance1);
  Serializable wfPackage2=workflowService.createPackage(null);
  params=new HashMap<QName,Serializable>();
  params.put(WorkflowModel.ASSOC_PACKAGE,wfPackage2);
  params.put(WorkflowModel.PROP_WORKFLOW_DUE_DATE,dueDate);
  params.put(WorkflowModel.PROP_WORKFLOW_PRIORITY,1);
  params.put(WorkflowModel.PROP_WORKFLOW_DESCRIPTION,description);
  params.put(WorkflowModel.ASSOC_ASSIGNEE,assignee);
  WorkflowPath path2=workflowService.startWorkflow(defId,params);
  String instance2=path2.getInstance().getId();
  checkActiveWorkflows(defId,instance1,instance2);
  checkCompletedWorkflows(defId);
  checkWorkflows(defId,instance1,instance2);
  WorkflowTask startTask1=workflowService.getStartTask(instance1);
  workflowService.endTask(startTask1.getId(),null);
  List<WorkflowTask> tasks=workflowService.getTasksForWorkflowPath(path1.getId());
  assertEquals(1,tasks.size());
  WorkflowTask task1=tasks.get(0);
  workflowService.endTask(task1.getId(),null);
  checkActiveWorkflows(defId,instance2);
  checkCompletedWorkflows(defId,instance1);
  checkWorkflows(defId,instance1,instance2);
  checkWorkflowsContains(workflowService.getActiveWorkflows(),instance2);
  checkWorkflowsDontContain(workflowService.getActiveWorkflows(),instance1);
  checkWorkflowsContains(workflowService.getCompletedWorkflows(),instance1);
  checkWorkflowsDontContain(workflowService.getCompletedWorkflows(),instance2);
  checkWorkflowsContains(workflowService.getWorkflows(),instance1,instance2);
  WorkflowTask startTask2=workflowService.getStartTask(instance2);
  workflowService.endTask(startTask2.getId(),null);
  tasks=workflowService.getTasksForWorkflowPath(path2.getId());
  assertEquals(1,tasks.size());
  WorkflowTask task2=tasks.get(0);
  workflowService.endTask(task2.getId(),null);
  checkActiveWorkflows(defId);
  checkCompletedWorkflows(defId,instance1,instance2);
  checkWorkflows(defId,instance1,instance2);
}",0.9404688463911166
172144,"/** 
 * Gets all ""in-flight"" active workflow instances of the specified Workflow Definition
 * @param workflowDefinitionId  the workflow definition id
 * @return  the list of ""in-flight"" workflow instances
 */
public List<WorkflowInstance> getActiveWorkflows(String workflowDefinitionId);","/** 
 * Gets all ""in-flight"" active workflow instances.
 * @return  the list of ""in-flight"" workflow instances
 * @since 4.0
 */
public List<WorkflowInstance> getActiveWorkflows();",0.7051282051282052
172145,"/** 
 * Gets all ""in-flight"" workflow instances (both active and completed) of the specified Workflow Definition
 * @param workflowDefinitionId  the workflow definition id     
 * @return  the list of ""in-flight"" workflow instances
 */
public List<WorkflowInstance> getWorkflows(String workflowDefinitionId);","/** 
 * Gets all workflow instances (both active and completed).
 * @return  the list of ""in-flight"" workflow instances
 * @since 4.0
 */
public List<WorkflowInstance> getWorkflows();",0.6843177189409368
172146,"/** 
 * Gets all ""in-flight"" completed workflow instances of the specified Workflow Definition
 * @param workflowDefinitionId  the workflow definition id
 * @return  the list of ""in-flight"" workflow instances
 */
public List<WorkflowInstance> getCompletedWorkflows(String workflowDefinitionId);","/** 
 * Gets all completed workflow instances.
 * @return  the list of ""in-flight"" workflow instances
 * @since 4.0
 */
public List<WorkflowInstance> getCompletedWorkflows();",0.6794871794871795
172147,"public List<WorkflowInstance> getWorkflows(String workflowDefinitionId){
  String engineId=BPMEngineRegistry.getEngineId(workflowDefinitionId);
  WorkflowComponent component=getWorkflowComponent(engineId);
  return component.getWorkflows(workflowDefinitionId);
}","/** 
 * {@inheritDoc}
 */
public List<WorkflowInstance> getWorkflows(){
  List<String> ids=Arrays.asList(registry.getWorkflowComponents());
  return CollectionUtils.transformFlat(ids,new Function<String,Collection<WorkflowInstance>>(){
    public List<WorkflowInstance> apply(    String id){
      WorkflowComponent component=registry.getWorkflowComponent(id);
      return component.getWorkflows();
    }
  }
);
}",0.2337278106508875
172148,"public List<WorkflowInstance> getActiveWorkflows(String workflowDefinitionId){
  String engineId=BPMEngineRegistry.getEngineId(workflowDefinitionId);
  WorkflowComponent component=getWorkflowComponent(engineId);
  return component.getActiveWorkflows(workflowDefinitionId);
}","/** 
 * {@inheritDoc}
 */
public List<WorkflowInstance> getActiveWorkflows(){
  List<String> ids=Arrays.asList(registry.getWorkflowComponents());
  return CollectionUtils.transformFlat(ids,new Function<String,Collection<WorkflowInstance>>(){
    public List<WorkflowInstance> apply(    String id){
      WorkflowComponent component=registry.getWorkflowComponent(id);
      return component.getActiveWorkflows();
    }
  }
);
}",0.2428571428571428
172149,"public WorkflowInstance getWorkflowById(String workflowId){
  String engineId=BPMEngineRegistry.getEngineId(workflowId);
  WorkflowComponent component=getWorkflowComponent(engineId);
  return component.getWorkflowById(workflowId);
}","/** 
 * {@inheritDoc}
 */
public WorkflowInstance getWorkflowById(String workflowId){
  String engineId=BPMEngineRegistry.getEngineId(workflowId);
  WorkflowComponent component=getWorkflowComponent(engineId);
  return component.getWorkflowById(workflowId);
}",0.946938775510204
172150,"public List<WorkflowInstance> getCompletedWorkflows(String workflowDefinitionId){
  String engineId=BPMEngineRegistry.getEngineId(workflowDefinitionId);
  WorkflowComponent component=getWorkflowComponent(engineId);
  return component.getCompletedWorkflows(workflowDefinitionId);
}","/** 
 * {@inheritDoc}
 */
public List<WorkflowInstance> getCompletedWorkflows(){
  List<String> ids=Arrays.asList(registry.getWorkflowComponents());
  return CollectionUtils.transformFlat(ids,new Function<String,Collection<WorkflowInstance>>(){
    public List<WorkflowInstance> apply(    String id){
      WorkflowComponent component=registry.getWorkflowComponent(id);
      return component.getCompletedWorkflows();
    }
  }
);
}",0.2443820224719101
172151,"public void sendNominatedInvitation(Map<String,Object> executionVariables){
  if (invitationService.isSendEmails()) {
    Map<String,String> properties=makePropertiesFromContextVariables(executionVariables,sendInvitePropertyNames);
    String packageName=WorkflowModel.ASSOC_PACKAGE.toPrefixString(namespaceService).replace(""String_Node_Str"",""String_Node_Str"");
    ScriptNode packageNode=(ScriptNode)executionVariables.get(packageName);
    String packageRef=packageNode.getNodeRef().toString();
    properties.put(InviteSender.WF_PACKAGE,packageRef);
    String instanceName=WorkflowModel.PROP_WORKFLOW_INSTANCE_ID.toPrefixString(namespaceService).replace(""String_Node_Str"",""String_Node_Str"");
    String instanceId=(String)executionVariables.get(instanceName);
    properties.put(InviteSender.WF_INSTANCE_ID,instanceId);
    inviteSender.sendMail(properties);
  }
}","public void sendNominatedInvitation(String inviteId,Map<String,Object> executionVariables){
  if (invitationService.isSendEmails()) {
    Map<String,String> properties=makePropertiesFromContextVariables(executionVariables,sendInvitePropertyNames);
    String packageName=WorkflowModel.ASSOC_PACKAGE.toPrefixString(namespaceService).replace(""String_Node_Str"",""String_Node_Str"");
    ScriptNode packageNode=(ScriptNode)executionVariables.get(packageName);
    String packageRef=packageNode.getNodeRef().toString();
    properties.put(InviteSender.WF_PACKAGE,packageRef);
    properties.put(InviteSender.WF_INSTANCE_ID,inviteId);
    inviteSender.sendMail(properties);
  }
}",0.7628330084470435
172152,"@Override public void execute(DelegateExecution execution) throws Exception {
  Map<String,Object> variables=execution.getVariables();
  inviteHelper.sendNominatedInvitation(variables);
}","@Override public void execute(DelegateExecution execution) throws Exception {
  String invitationId=ActivitiConstants.ENGINE_ID + ""String_Node_Str"" + execution.getProcessInstanceId();
  Map<String,Object> variables=execution.getVariables();
  inviteHelper.sendNominatedInvitation(invitationId,variables);
}",0.5841784989858012
172153,"@SuppressWarnings(""String_Node_Str"") public void execute(final ExecutionContext context) throws Exception {
  Map<String,Object> executionVariables=context.getContextInstance().getVariables();
  inviteHelper.sendNominatedInvitation(executionVariables);
}","@SuppressWarnings(""String_Node_Str"") public void execute(final ExecutionContext context) throws Exception {
  ContextInstance contextInstance=context.getContextInstance();
  long processId=contextInstance.getProcessInstance().getId();
  String inviteId=JBPMEngine.ENGINE_ID + ""String_Node_Str"" + processId;
  Map<String,Object> executionVariables=contextInstance.getVariables();
  inviteHelper.sendNominatedInvitation(inviteId,executionVariables);
}",0.662873399715505
172154,"@Override protected void onSetUpInTransaction() throws Exception {
  nodeService=(NodeService)applicationContext.getBean(ServiceRegistry.NODE_SERVICE.getLocalName());
  systemBootstrap=(ImporterBootstrap)applicationContext.getBean(""String_Node_Str"");
  storeRef=new StoreRef(""String_Node_Str"",""String_Node_Str"" + System.currentTimeMillis());
  systemBootstrap.setStoreUrl(storeRef.toString());
  systemBootstrap.bootstrap();
  this.authenticationComponent=(AuthenticationComponent)this.applicationContext.getBean(""String_Node_Str"");
  this.authenticationComponent.setSystemUserAsCurrentUser();
  System.out.println(NodeStoreInspector.dumpNodeStore(nodeService,storeRef));
}","@Override protected void onSetUpInTransaction() throws Exception {
  nodeService=(NodeService)applicationContext.getBean(ServiceRegistry.NODE_SERVICE.getLocalName());
  systemBootstrap=(ImporterBootstrap)applicationContext.getBean(""String_Node_Str"");
  storeRef=new StoreRef(""String_Node_Str"",""String_Node_Str"" + System.currentTimeMillis());
  systemBootstrap.setStoreUrl(storeRef.toString());
  systemBootstrap.bootstrap();
  this.authenticationComponent=(AuthenticationComponent)this.applicationContext.getBean(""String_Node_Str"");
  this.authenticationComponent.setSystemUserAsCurrentUser();
}",0.9384858044164038
172155,"/** 
 * Attempts to load the license.
 * @return
 */
public String loadLicense();","/** 
 * Attempts to load the license.
 * @return          Returns a message telling the user what happened
 */
public String loadLicense();",0.7363636363636363
172156,"private void processBatch(final Long parentNodeId,final String modified){
  RetryingTransactionHelper txnHelper=transactionService.getRetryingTransactionHelper();
  txnHelper.setMaxRetries(1);
  RetryingTransactionCallback<Void> callback=new RetryingTransactionCallback<Void>(){
    @Override public Void execute() throws Throwable {
      policyBehaviourFilter.disableBehaviour();
      AlfrescoTransactionSupport.bindResource(KEY_AUDITABLE_PROPAGATION_DISABLE,Boolean.TRUE);
      Pair<Long,NodeRef> parentNodePair=getNodePair(parentNodeId);
      if (parentNodePair == null) {
        return null;
      }
      addNodeProperty(parentNodeId,ContentModel.PROP_MODIFIED,modified);
      return null;
    }
  }
;
  try {
    txnHelper.doInTransaction(callback,false,true);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + parentNodeId);
    }
  }
 catch (  Throwable e) {
    logger.info(""String_Node_Str"" + parentNodeId);
  }
}","private void processBatch(final Long parentNodeId,final String modified){
  RetryingTransactionHelper txnHelper=transactionService.getRetryingTransactionHelper();
  txnHelper.setMaxRetries(1);
  RetryingTransactionCallback<Void> callback=new RetryingTransactionCallback<Void>(){
    @Override public Void execute() throws Throwable {
      policyBehaviourFilter.disableAllBehaviours();
      AlfrescoTransactionSupport.bindResource(KEY_AUDITABLE_PROPAGATION_DISABLE,Boolean.TRUE);
      Pair<Long,NodeRef> parentNodePair=getNodePair(parentNodeId);
      if (parentNodePair == null) {
        return null;
      }
      addNodeProperty(parentNodeId,ContentModel.PROP_MODIFIED,modified);
      return null;
    }
  }
;
  try {
    txnHelper.doInTransaction(callback,false,true);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + parentNodeId);
    }
  }
 catch (  Throwable e) {
    logger.info(""String_Node_Str"" + parentNodeId);
  }
}",0.9978858350951374
172157,"@Override public void cancelCheckOut(String repositoryId,String objectId,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  CMISNodeInfo info=getOrCreateNodeInfo(objectId,""String_Node_Str"");
  if (info.isVariant(CMISObjectVariant.PWC)) {
    throw new CmisVersioningException(""String_Node_Str"");
  }
  final NodeRef nodeRef=info.getNodeRef();
  endReadOnlyTransaction();
  connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Object>(){
    public Object execute() throws Exception {
      try {
        connector.getCheckOutCheckInService().cancelCheckout(nodeRef);
        return null;
      }
 catch (      CheckOutCheckInServiceException e) {
        throw new CmisVersioningException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
}","@Override public void cancelCheckOut(String repositoryId,String objectId,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  CMISNodeInfo info=getOrCreateNodeInfo(objectId,""String_Node_Str"");
  if (!info.isVariant(CMISObjectVariant.PWC)) {
    throw new CmisVersioningException(""String_Node_Str"");
  }
  final NodeRef nodeRef=info.getNodeRef();
  endReadOnlyTransaction();
  connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Object>(){
    public Object execute() throws Exception {
      try {
        connector.getCheckOutCheckInService().cancelCheckout(nodeRef);
        return null;
      }
 catch (      CheckOutCheckInServiceException e) {
        throw new CmisVersioningException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
}",0.9994931576279776
172158,"@Override public String createFolder(String repositoryId,final Properties properties,String folderId,final List<String> policies,final Acl addAces,final Acl removeAces,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo parentInfo=getOrCreateFolderInfo(folderId,""String_Node_Str"");
  final String name=connector.getNameProperty(properties);
  final String objectTypeId=connector.getObjectTypeIdProperty(properties);
  final TypeDefinitionWrapper type=connector.getTypeForCreate(objectTypeId,BaseTypeId.CMIS_FOLDER);
  connector.checkChildObjectType(parentInfo,type.getTypeId());
  endReadOnlyTransaction();
  NodeRef newNodeRef=connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Exception {
      try {
        NodeRef nodeRef=connector.getFileFolderService().create(parentInfo.getNodeRef(),name,type.getAlfrescoClass()).getNodeRef();
        connector.setProperties(nodeRef,type,properties,new String[]{PropertyIds.NAME,PropertyIds.OBJECT_TYPE_ID});
        connector.applyPolicies(nodeRef,type,policies);
        connector.applyACL(nodeRef,type,addAces,removeAces);
        return nodeRef;
      }
 catch (      FileExistsException fee) {
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",fee);
      }
catch (      IntegrityException ie) {
        throw new CmisConstraintException(""String_Node_Str"" + ie.getMessage(),ie);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
  return newNodeRef.toString();
}","@Override public String createFolder(String repositoryId,final Properties properties,String folderId,final List<String> policies,final Acl addAces,final Acl removeAces,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo parentInfo=getOrCreateFolderInfo(folderId,""String_Node_Str"");
  final String name=connector.getNameProperty(properties,null);
  final String objectTypeId=connector.getObjectTypeIdProperty(properties);
  final TypeDefinitionWrapper type=connector.getTypeForCreate(objectTypeId,BaseTypeId.CMIS_FOLDER);
  connector.checkChildObjectType(parentInfo,type.getTypeId());
  endReadOnlyTransaction();
  NodeRef newNodeRef=connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Exception {
      try {
        NodeRef nodeRef=connector.getFileFolderService().create(parentInfo.getNodeRef(),name,type.getAlfrescoClass()).getNodeRef();
        connector.setProperties(nodeRef,type,properties,new String[]{PropertyIds.NAME,PropertyIds.OBJECT_TYPE_ID});
        connector.applyPolicies(nodeRef,type,policies);
        connector.applyACL(nodeRef,type,addAces,removeAces);
        return nodeRef;
      }
 catch (      FileExistsException fee) {
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",fee);
      }
catch (      IntegrityException ie) {
        throw new CmisConstraintException(""String_Node_Str"" + ie.getMessage(),ie);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
  return newNodeRef.toString();
}",0.9985350131848814
172159,"@Override public String createDocumentFromSource(String repositoryId,String sourceId,final Properties properties,String folderId,final VersioningState versioningState,final List<String> policies,final Acl addAces,final Acl removeAces,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo parentInfo=getOrCreateFolderInfo(folderId,""String_Node_Str"");
  final String name=connector.getNameProperty(properties);
  CMISNodeInfo info=getOrCreateNodeInfo(sourceId,""String_Node_Str"");
  if (info.isVariant(CMISObjectVariant.ASSOC)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  final NodeRef sourceNodeRef=info.getNodeRef();
  if (!info.isDocument()) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  final TypeDefinitionWrapper type=info.getType();
  connector.checkChildObjectType(parentInfo,type.getTypeId());
  endReadOnlyTransaction();
  NodeRef newNodeRef=connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Exception {
      try {
        NodeRef newDocumentNodeRef=connector.getFileFolderService().copy(sourceNodeRef,parentInfo.getNodeRef(),name).getNodeRef();
        connector.setProperties(newDocumentNodeRef,type,properties,new String[]{PropertyIds.NAME,PropertyIds.OBJECT_TYPE_ID});
        connector.applyPolicies(newDocumentNodeRef,type,policies);
        connector.applyACL(newDocumentNodeRef,type,addAces,removeAces);
        connector.applyVersioningState(newDocumentNodeRef,versioningState);
        return newDocumentNodeRef;
      }
 catch (      FileExistsException fee) {
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",fee);
      }
catch (      IntegrityException ie) {
        throw new CmisConstraintException(""String_Node_Str"" + ie.getMessage(),ie);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
  return connector.createObjectId(newNodeRef);
}","@Override public String createDocumentFromSource(String repositoryId,String sourceId,final Properties properties,String folderId,final VersioningState versioningState,final List<String> policies,final Acl addAces,final Acl removeAces,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo parentInfo=getOrCreateFolderInfo(folderId,""String_Node_Str"");
  CMISNodeInfo info=getOrCreateNodeInfo(sourceId,""String_Node_Str"");
  if (info.isVariant(CMISObjectVariant.ASSOC)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  final NodeRef sourceNodeRef=info.getNodeRef();
  if (!info.isDocument()) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  final String name=connector.getNameProperty(properties,info.getName());
  final TypeDefinitionWrapper type=info.getType();
  connector.checkChildObjectType(parentInfo,type.getTypeId());
  endReadOnlyTransaction();
  NodeRef newNodeRef=connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Exception {
      try {
        NodeRef newDocumentNodeRef=connector.getFileFolderService().copy(sourceNodeRef,parentInfo.getNodeRef(),name).getNodeRef();
        connector.setProperties(newDocumentNodeRef,type,properties,new String[]{PropertyIds.NAME,PropertyIds.OBJECT_TYPE_ID});
        connector.applyPolicies(newDocumentNodeRef,type,policies);
        connector.applyACL(newDocumentNodeRef,type,addAces,removeAces);
        connector.applyVersioningState(newDocumentNodeRef,versioningState);
        return newDocumentNodeRef;
      }
 catch (      FileExistsException fee) {
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",fee);
      }
catch (      IntegrityException ie) {
        throw new CmisConstraintException(""String_Node_Str"" + ie.getMessage(),ie);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
  return connector.createObjectId(newNodeRef);
}",0.9684310467600284
172160,"@Override public void checkOut(String repositoryId,final Holder<String> objectId,ExtensionsData extension,final Holder<Boolean> contentCopied){
  checkRepositoryId(repositoryId);
  CMISNodeInfo info=getOrCreateNodeInfo(objectId.getValue(),""String_Node_Str"");
  if (!info.isVariant(CMISObjectVariant.CURRENT_VERSION)) {
    throw new CmisInvalidArgumentException(""String_Node_Str"");
  }
  final NodeRef nodeRef=info.getNodeRef();
  if (!((DocumentTypeDefinition)info.getType().getTypeDefinition(false)).isVersionable()) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  endReadOnlyTransaction();
  connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Object>(){
    public Object execute() throws Exception {
      try {
        NodeRef pwcNodeRef=connector.getCheckOutCheckInService().checkout(nodeRef);
        objectId.setValue(pwcNodeRef.toString());
        if (contentCopied != null) {
          contentCopied.setValue(connector.getFileFolderService().getReader(pwcNodeRef) != null);
        }
        return null;
      }
 catch (      CheckOutCheckInServiceException e) {
        throw new CmisVersioningException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
}","@Override public void checkOut(String repositoryId,final Holder<String> objectId,ExtensionsData extension,final Holder<Boolean> contentCopied){
  checkRepositoryId(repositoryId);
  CMISNodeInfo info=getOrCreateNodeInfo(objectId.getValue(),""String_Node_Str"");
  if (!info.isVariant(CMISObjectVariant.CURRENT_VERSION)) {
    throw new CmisInvalidArgumentException(""String_Node_Str"");
  }
  final NodeRef nodeRef=info.getNodeRef();
  if (!((DocumentTypeDefinition)info.getType().getTypeDefinition(false)).isVersionable()) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  endReadOnlyTransaction();
  connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<Object>(){
    public Object execute() throws Exception {
      try {
        NodeRef pwcNodeRef=connector.getCheckOutCheckInService().checkout(nodeRef);
        CMISNodeInfo pwcNodeInfo=createNodeInfo(pwcNodeRef);
        objectId.setValue(pwcNodeInfo.getObjectId());
        if (contentCopied != null) {
          contentCopied.setValue(connector.getFileFolderService().getReader(pwcNodeRef) != null);
        }
        return null;
      }
 catch (      CheckOutCheckInServiceException e) {
        throw new CmisVersioningException(""String_Node_Str"" + e.getMessage(),e);
      }
catch (      AccessDeniedException ade) {
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
}",0.9693842449260406
172161,"@Override public String createDocument(String repositoryId,final Properties properties,String folderId,final ContentStream contentStream,final VersioningState versioningState,final List<String> policies,final Acl addAces,final Acl removeAces,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo parentInfo=getOrCreateFolderInfo(folderId,""String_Node_Str"");
  final String name=connector.getNameProperty(properties);
  final String objectTypeId=connector.getObjectTypeIdProperty(properties);
  final TypeDefinitionWrapper type=connector.getTypeForCreate(objectTypeId,BaseTypeId.CMIS_DOCUMENT);
  connector.checkChildObjectType(parentInfo,type.getTypeId());
  DocumentTypeDefinition docType=(DocumentTypeDefinition)type.getTypeDefinition(false);
  if ((docType.getContentStreamAllowed() == ContentStreamAllowed.NOTALLOWED) && (contentStream != null)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  if ((docType.getContentStreamAllowed() == ContentStreamAllowed.REQUIRED) && (contentStream == null)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  if (docType.isVersionable() && (versioningState == VersioningState.NONE)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  if (!docType.isVersionable() && (versioningState != VersioningState.NONE)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  final File tempFile=copyToTempFile(contentStream);
  final Charset encoding=(tempFile == null ? null : getEncoding(tempFile,contentStream.getMimeType()));
  endReadOnlyTransaction();
  NodeRef newNodeRef=connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Exception {
      try {
        NodeRef nodeRef=connector.getFileFolderService().create(parentInfo.getNodeRef(),name,type.getAlfrescoClass()).getNodeRef();
        connector.setProperties(nodeRef,type,properties,new String[]{PropertyIds.NAME,PropertyIds.OBJECT_TYPE_ID});
        connector.applyPolicies(nodeRef,type,policies);
        connector.applyACL(nodeRef,type,addAces,removeAces);
        if (contentStream != null) {
          ContentWriter writer=connector.getFileFolderService().getWriter(nodeRef);
          writer.setMimetype(contentStream.getMimeType());
          writer.setEncoding(encoding.name());
          writer.putContent(tempFile);
        }
        connector.applyVersioningState(nodeRef,versioningState);
        return nodeRef;
      }
 catch (      FileExistsException fee) {
        removeTempFile(tempFile);
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",fee);
      }
catch (      IntegrityException ie) {
        removeTempFile(tempFile);
        throw new CmisConstraintException(""String_Node_Str"" + ie.getMessage(),ie);
      }
catch (      AccessDeniedException ade) {
        removeTempFile(tempFile);
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
  removeTempFile(tempFile);
  return connector.createObjectId(newNodeRef);
}","@Override public String createDocument(String repositoryId,final Properties properties,String folderId,final ContentStream contentStream,final VersioningState versioningState,final List<String> policies,final Acl addAces,final Acl removeAces,ExtensionsData extension){
  checkRepositoryId(repositoryId);
  final CMISNodeInfo parentInfo=getOrCreateFolderInfo(folderId,""String_Node_Str"");
  final String name=connector.getNameProperty(properties,null);
  final String objectTypeId=connector.getObjectTypeIdProperty(properties);
  final TypeDefinitionWrapper type=connector.getTypeForCreate(objectTypeId,BaseTypeId.CMIS_DOCUMENT);
  connector.checkChildObjectType(parentInfo,type.getTypeId());
  DocumentTypeDefinition docType=(DocumentTypeDefinition)type.getTypeDefinition(false);
  if ((docType.getContentStreamAllowed() == ContentStreamAllowed.NOTALLOWED) && (contentStream != null)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  if ((docType.getContentStreamAllowed() == ContentStreamAllowed.REQUIRED) && (contentStream == null)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  if (docType.isVersionable() && (versioningState == VersioningState.NONE)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  if (!docType.isVersionable() && (versioningState != VersioningState.NONE)) {
    throw new CmisConstraintException(""String_Node_Str"");
  }
  final File tempFile=copyToTempFile(contentStream);
  final Charset encoding=(tempFile == null ? null : getEncoding(tempFile,contentStream.getMimeType()));
  endReadOnlyTransaction();
  NodeRef newNodeRef=connector.getTransactionService().getRetryingTransactionHelper().doInTransaction(new RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Exception {
      try {
        NodeRef nodeRef=connector.getFileFolderService().create(parentInfo.getNodeRef(),name,type.getAlfrescoClass()).getNodeRef();
        connector.setProperties(nodeRef,type,properties,new String[]{PropertyIds.NAME,PropertyIds.OBJECT_TYPE_ID});
        connector.applyPolicies(nodeRef,type,policies);
        connector.applyACL(nodeRef,type,addAces,removeAces);
        if (contentStream != null) {
          ContentWriter writer=connector.getFileFolderService().getWriter(nodeRef);
          writer.setMimetype(contentStream.getMimeType());
          writer.setEncoding(encoding.name());
          writer.putContent(tempFile);
        }
        connector.applyVersioningState(nodeRef,versioningState);
        return nodeRef;
      }
 catch (      FileExistsException fee) {
        removeTempFile(tempFile);
        throw new CmisContentAlreadyExistsException(""String_Node_Str"",fee);
      }
catch (      IntegrityException ie) {
        removeTempFile(tempFile);
        throw new CmisConstraintException(""String_Node_Str"" + ie.getMessage(),ie);
      }
catch (      AccessDeniedException ade) {
        removeTempFile(tempFile);
        throw new CmisPermissionDeniedException(""String_Node_Str"",ade);
      }
    }
  }
,false,true);
  beginReadOnlyTransaction();
  removeTempFile(tempFile);
  return connector.createObjectId(newNodeRef);
}",0.9992014055262738
172162,"public String getNameProperty(Properties properties){
  String name=getStringProperty(properties,PropertyIds.NAME);
  if ((name == null) || (name.trim().length() == 0)) {
    throw new CmisInvalidArgumentException(""String_Node_Str"" + PropertyIds.NAME + ""String_Node_Str"");
  }
  return name;
}","public String getNameProperty(Properties properties,String fallback){
  String name=getStringProperty(properties,PropertyIds.NAME);
  if ((name == null) || (name.trim().length() == 0)) {
    if (fallback == null) {
      throw new CmisInvalidArgumentException(""String_Node_Str"" + PropertyIds.NAME + ""String_Node_Str"");
    }
 else {
      name=fallback;
    }
  }
  return name;
}",0.8350668647845468
172163,"public void init(){
  PropertyCheck.mandatory(this,""String_Node_Str"",getNodeService());
  PropertyCheck.mandatory(this,""String_Node_Str"",context);
  DesktopActionTable actions=context.getDesktopActions();
  Enumeration<String> actionNames=actions.enumerateActionNames();
  while (actionNames.hasMoreElements()) {
    String name=actionNames.nextElement();
    DesktopAction action=actions.getAction(name);
    if (action.hasPseudoFile()) {
      PseudoFile file=action.getPseudoFile();
      pl.addFile(file);
    }
  }
}","public void init(){
  PropertyCheck.mandatory(this,""String_Node_Str"",getNodeService());
  PropertyCheck.mandatory(this,""String_Node_Str"",context);
  DesktopActionTable actions=context.getDesktopActions();
  if (actions != null) {
    Enumeration<String> actionNames=actions.enumerateActionNames();
    while (actionNames.hasMoreElements()) {
      String name=actionNames.nextElement();
      DesktopAction action=actions.getAction(name);
      if (action.hasPseudoFile()) {
        PseudoFile file=action.getPseudoFile();
        pl.addFile(file);
      }
    }
  }
}",0.9568411386593204
172164,"/** 
 * @param discussableNode discussable node.
 * @return
 */
private int calculateCommentTotalByNodeCounting(NodeRef discussableNode){
  if (!nodeService.hasAspect(discussableNode,ForumModel.ASPECT_DISCUSSABLE)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ForumModel.ASPECT_DISCUSSABLE + ""String_Node_Str"");
  }
  NodeRef topicNode=commentService.getShareCommentsTopic(discussableNode);
  if (log.isDebugEnabled()) {
    StringBuilder msg=new StringBuilder();
    msg.append(""String_Node_Str"").append(discussableNode);
    log.debug(msg.toString());
    msg=new StringBuilder();
    msg.append(""String_Node_Str"").append(topicNode);
    log.debug(msg.toString());
  }
  if (topicNode == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Set<QName> childNodeTypeQNames=new HashSet<QName>(1);
  childNodeTypeQNames.add(ForumModel.TYPE_POST);
  List<ChildAssociationRef> fmPostChildren=rawNodeService.getChildAssocs(topicNode,childNodeTypeQNames);
  final int commentTotal=fmPostChildren.size();
  return commentTotal;
}","/** 
 * Calculate the comment total for the specified node.
 * @param discussableNode discussable node.
 * @return the recount value or <tt>null</tt> if it is not possible to calculate the total.
 */
private Integer calculateCommentTotalByNodeCounting(NodeRef discussableNode){
  Integer result=null;
  if (nodeService.hasAspect(discussableNode,ForumModel.ASPECT_DISCUSSABLE)) {
    NodeRef topicNode=commentService.getShareCommentsTopic(discussableNode);
    if (log.isDebugEnabled()) {
      StringBuilder msg=new StringBuilder();
      msg.append(""String_Node_Str"").append(discussableNode);
      log.debug(msg.toString());
      msg=new StringBuilder();
      msg.append(""String_Node_Str"").append(topicNode);
      log.debug(msg.toString());
    }
    if (topicNode != null) {
      Set<QName> childNodeTypeQNames=new HashSet<QName>();
      childNodeTypeQNames.add(ForumModel.TYPE_POST);
      List<ChildAssociationRef> fmPostChildren=rawNodeService.getChildAssocs(topicNode,childNodeTypeQNames);
      result=new Integer(fmPostChildren.size());
    }
  }
  return result;
}",0.4573570759137769
172165,"/** 
 * This method adjusts the   {@link ForumModel#PROP_COMMENT_COUNT} based on the supplied increment/decrement flag.
 * @param fmPostNode the fm:post node (the comment node)
 * @param incrementing <tt>true</tt> if we're incrementing the count, else <tt>false</tt>.
 */
private void adjustCommentCount(NodeRef fmPostNode,boolean incrementing){
  NodeRef discussableAncestor=commentService.getDiscussableAncestor(fmPostNode);
  if (discussableAncestor != null) {
    if (discussableNodeRequiresFullRecount(discussableAncestor)) {
      int recount=calculateCommentTotalByNodeCounting(discussableAncestor);
      nodeService.addAspect(discussableAncestor,ForumModel.ASPECT_COMMENTS_ROLLUP,null);
      int newCountValue=recount;
      if (!incrementing) {
        newCountValue--;
      }
      if (log.isDebugEnabled()) {
        log.debug(discussableAncestor + ""String_Node_Str"" + newCountValue);
      }
      nodeService.setProperty(discussableAncestor,ForumModel.PROP_COMMENT_COUNT,newCountValue);
    }
 else {
      Integer existingCommentCount=(Integer)nodeService.getProperty(discussableAncestor,ForumModel.PROP_COMMENT_COUNT);
      int existingCommentCountInt=existingCommentCount == null ? 0 : existingCommentCount.intValue();
      int delta=incrementing ? 1 : -1;
      nodeService.setProperty(discussableAncestor,ForumModel.PROP_COMMENT_COUNT,existingCommentCountInt + delta);
    }
  }
}","/** 
 * This method adjusts the   {@link ForumModel#PROP_COMMENT_COUNT} based on the supplied increment/decrement flag.
 * @param fmPostNode the fm:post node (the comment node)
 * @param incrementing <tt>true</tt> if we're incrementing the count, else <tt>false</tt>.
 */
private void adjustCommentCount(NodeRef fmPostNode,boolean incrementing){
  NodeRef discussableAncestor=commentService.getDiscussableAncestor(fmPostNode);
  if (discussableAncestor != null) {
    if (discussableNodeRequiresFullRecount(discussableAncestor)) {
      Integer recount=calculateCommentTotalByNodeCounting(discussableAncestor);
      if (recount != null) {
        nodeService.addAspect(discussableAncestor,ForumModel.ASPECT_COMMENTS_ROLLUP,null);
        int newCountValue=recount;
        if (!incrementing) {
          newCountValue--;
        }
        if (log.isDebugEnabled()) {
          log.debug(discussableAncestor + ""String_Node_Str"" + newCountValue);
        }
        nodeService.setProperty(discussableAncestor,ForumModel.PROP_COMMENT_COUNT,newCountValue);
      }
    }
 else {
      Integer existingCommentCount=(Integer)nodeService.getProperty(discussableAncestor,ForumModel.PROP_COMMENT_COUNT);
      int existingCommentCountInt=existingCommentCount == null ? 0 : existingCommentCount.intValue();
      int delta=incrementing ? 1 : -1;
      nodeService.setProperty(discussableAncestor,ForumModel.PROP_COMMENT_COUNT,existingCommentCountInt + delta);
    }
  }
}",0.9773123909249564
172166,"@Override public void onUpdateProperties(NodeRef commentsRollupNode,Map<QName,Serializable> before,Map<QName,Serializable> after){
  Serializable newCommentCount=after.get(ForumModel.PROP_COMMENT_COUNT);
  if (newCommentCount != null) {
    Integer newCommentCountInt=(Integer)newCommentCount;
    if (newCommentCountInt == COUNT_TRIGGER_VALUE) {
      if (log.isDebugEnabled()) {
        StringBuilder msg=new StringBuilder();
        msg.append(commentsRollupNode).append(""String_Node_Str"").append(ForumModel.PROP_COMMENT_COUNT.getLocalName()).append(""String_Node_Str"").append(newCommentCountInt);
        log.debug(msg.toString());
        log.debug(""String_Node_Str"");
      }
      final int realCommentTotal=calculateCommentTotalByNodeCounting(commentsRollupNode);
      if (realCommentTotal != -1) {
        nodeService.setProperty(commentsRollupNode,ForumModel.PROP_COMMENT_COUNT,realCommentTotal);
      }
    }
  }
}","@Override public void onUpdateProperties(NodeRef commentsRollupNode,Map<QName,Serializable> before,Map<QName,Serializable> after){
  Serializable newCommentCount=after.get(ForumModel.PROP_COMMENT_COUNT);
  if (newCommentCount != null) {
    Integer newCommentCountInt=(Integer)newCommentCount;
    if (newCommentCountInt == COUNT_TRIGGER_VALUE) {
      if (log.isDebugEnabled()) {
        StringBuilder msg=new StringBuilder();
        msg.append(commentsRollupNode).append(""String_Node_Str"").append(ForumModel.PROP_COMMENT_COUNT.getLocalName()).append(""String_Node_Str"").append(newCommentCountInt);
        log.debug(msg.toString());
        log.debug(""String_Node_Str"");
      }
      final Integer realCommentTotal=calculateCommentTotalByNodeCounting(commentsRollupNode);
      if (realCommentTotal != null && realCommentTotal != -1) {
        nodeService.setProperty(commentsRollupNode,ForumModel.PROP_COMMENT_COUNT,realCommentTotal);
      }
    }
  }
}",0.9798301486199577
172167,"private NodeRef publishNode(NodeRef source,StatusUpdate statusUpdate){
  MutablePublishingPackage pckg=queue.createPublishingPackage();
  pckg.addNodesToPublish(source);
  scheduleEvent(pckg,statusUpdate);
  assertNotNull(eventId);
  NodeRef eventNode=new NodeRef(eventId);
  assertTrue(nodeService.exists(eventNode));
  Serializable eventStatus=nodeService.getProperty(eventNode,PublishingModel.PROP_PUBLISHING_EVENT_STATUS);
  assertEquals(PublishingEvent.Status.SCHEDULED.name(),eventStatus);
  action.executeImpl(null,eventNode);
  eventStatus=nodeService.getProperty(eventNode,PublishingModel.PROP_PUBLISHING_EVENT_STATUS);
  assertEquals(PublishingEvent.Status.COMPLETE.name(),eventStatus);
  return eventNode;
}","private NodeRef publishNode(NodeRef source,StatusUpdate statusUpdate){
  MutablePublishingPackage pckg=queue.createPublishingPackage();
  pckg.addNodesToPublish(source);
  scheduleEvent(pckg,statusUpdate);
  assertNotNull(eventId);
  NodeRef eventNode=new NodeRef(eventId);
  assertTrue(nodeService.exists(eventNode));
  Serializable eventStatus=nodeService.getProperty(eventNode,PublishingModel.PROP_PUBLISHING_EVENT_STATUS);
  assertEquals(PublishingEvent.Status.SCHEDULED.name(),eventStatus);
  action.executeImpl(null,eventNode);
  eventStatus=nodeService.getProperty(eventNode,PublishingModel.PROP_PUBLISHING_EVENT_STATUS);
  assertEquals(PublishingEvent.Status.COMPLETED.name(),eventStatus);
  return eventNode;
}",0.999304105775922
172168,"@Test public void testGetPublishingEvent() throws Exception {
  ContentReader reader=mock(ContentReader.class);
  InputStream inputStream=mock(InputStream.class);
  when(reader.getContentInputStream()).thenReturn(inputStream);
  when(contentService.getReader(any(NodeRef.class),any(QName.class))).thenReturn(reader);
  PublishingPackageSerializer serializer=mock(PublishingPackageSerializer.class);
  helper.setSerializer(serializer);
  PublishingEvent result=helper.getPublishingEvent((NodeRef)null);
  assertNull(result);
  String comment=""String_Node_Str"";
  Status status=Status.COMPLETE;
  Date modified=new Date();
  Date created=new Date(modified.getTime() - 3600000);
  String creatorName=""String_Node_Str"";
  String modifierName=""String_Node_Str"";
  Calendar schedule=Calendar.getInstance();
  schedule.add(Calendar.MONTH,6);
  Date scheduledTime=schedule.getTime();
  String scheduledTimeZone=schedule.getTimeZone().getID();
  Map<QName,Serializable> props=new HashMap<QName,Serializable>();
  props.put(PROP_PUBLISHING_EVENT_COMMENT,comment);
  props.put(PROP_PUBLISHING_EVENT_STATUS,status.name());
  props.put(PROP_PUBLISHING_EVENT_TIME,scheduledTime);
  props.put(PROP_PUBLISHING_EVENT_TIME_ZONE,scheduledTimeZone);
  props.put(ContentModel.PROP_CREATED,created);
  props.put(ContentModel.PROP_CREATOR,creatorName);
  props.put(ContentModel.PROP_MODIFIED,modified);
  props.put(ContentModel.PROP_MODIFIER,modifierName);
  NodeRef eventNode=new NodeRef(""String_Node_Str"");
  when(nodeService.getProperties(eventNode)).thenReturn(props);
  result=helper.getPublishingEvent(eventNode);
  assertEquals(eventNode.toString(),result.getId());
  assertEquals(comment,result.getComment());
  assertEquals(status,result.getStatus());
  assertEquals(schedule,result.getScheduledTime());
  assertEquals(created,result.getCreatedTime());
  assertEquals(creatorName,result.getCreator());
  assertEquals(modified,result.getModifiedTime());
  assertEquals(modifierName,result.getModifier());
}","@Test public void testGetPublishingEvent() throws Exception {
  ContentReader reader=mock(ContentReader.class);
  InputStream inputStream=mock(InputStream.class);
  when(reader.getContentInputStream()).thenReturn(inputStream);
  when(contentService.getReader(any(NodeRef.class),any(QName.class))).thenReturn(reader);
  PublishingPackageSerializer serializer=mock(PublishingPackageSerializer.class);
  helper.setSerializer(serializer);
  PublishingEvent result=helper.getPublishingEvent((NodeRef)null);
  assertNull(result);
  String comment=""String_Node_Str"";
  Status status=Status.COMPLETED;
  Date modified=new Date();
  Date created=new Date(modified.getTime() - 3600000);
  String creatorName=""String_Node_Str"";
  String modifierName=""String_Node_Str"";
  Calendar schedule=Calendar.getInstance();
  schedule.add(Calendar.MONTH,6);
  Date scheduledTime=schedule.getTime();
  String scheduledTimeZone=schedule.getTimeZone().getID();
  Map<QName,Serializable> props=new HashMap<QName,Serializable>();
  props.put(PROP_PUBLISHING_EVENT_COMMENT,comment);
  props.put(PROP_PUBLISHING_EVENT_STATUS,status.name());
  props.put(PROP_PUBLISHING_EVENT_TIME,scheduledTime);
  props.put(PROP_PUBLISHING_EVENT_TIME_ZONE,scheduledTimeZone);
  props.put(ContentModel.PROP_CREATED,created);
  props.put(ContentModel.PROP_CREATOR,creatorName);
  props.put(ContentModel.PROP_MODIFIED,modified);
  props.put(ContentModel.PROP_MODIFIER,modifierName);
  NodeRef eventNode=new NodeRef(""String_Node_Str"");
  when(nodeService.getProperties(eventNode)).thenReturn(props);
  result=helper.getPublishingEvent(eventNode);
  assertEquals(eventNode.toString(),result.getId());
  assertEquals(comment,result.getComment());
  assertEquals(status,result.getStatus());
  assertEquals(schedule,result.getScheduledTime());
  assertEquals(created,result.getCreatedTime());
  assertEquals(creatorName,result.getCreator());
  assertEquals(modified,result.getModifiedTime());
  assertEquals(modifierName,result.getModifier());
}",0.9997489329651016
172169,"/** 
 * List the sites available in the repository.  The returned list can optionally be filtered by name and site preset. <p/> If no filters are specified then all the available sites are returned.
 * @param filter            inclusion filter for returned sites. Only sites whose cm:name OR cm:titleOR cm:description CONTAIN the filter string will be returned.
 * @param sitePresetFilter  site preset filter
 * @param size              max results size crop if >0
 * @return Site[]           a list of the site filtered as appropriate
 * @see SiteService#findSites(String,String,int) for a description of the limitations of this method.
 */
public Site[] listSites(String filter,String sitePresetFilter,int size){
  List<SiteInfo> siteInfos=this.siteService.findSites(filter,sitePresetFilter,size);
  List<Site> sites=new ArrayList<Site>(siteInfos.size());
  for (  SiteInfo siteInfo : siteInfos) {
    sites.add(new Site(siteInfo,this.serviceRegistry,this.siteService,getScope()));
  }
  return sites.toArray(new Site[sites.size()]);
}","/** 
 * List the sites available in the repository.  The returned list can optionally be filtered by name and site preset. <p/> If no filters are specified then all the available sites are returned.
 * @param filter            inclusion filter for returned sites. Only sites whose cm:name OR cm:titleOR cm:description start with the filter string will be returned.
 * @param sitePresetFilter  site preset filter
 * @param size              max results size crop if >0
 * @return Site[]           a list of the site filtered as appropriate
 * @see SiteService#listSites(String,String,int) for a description of the limitations of this method.
 */
public Site[] listSites(String filter,String sitePresetFilter,int size){
  List<SiteInfo> siteInfos=this.siteService.listSites(filter,sitePresetFilter,size);
  return makeSitesArray(siteInfos);
}",0.8588172615876398
172170,"/** 
 * Returns the variant of the object.
 */
public ObjectVariantEnum getObjectVariant(String objectId){
  if (objectId == null) {
    return ObjectVariantEnum.INVALID_ID;
  }
  try {
    String nodeRefString=objectId;
    String versionString=null;
    int sepIndex=objectId.lastIndexOf(ID_SEPERATOR);
    if (sepIndex > -1) {
      nodeRefString=objectId.substring(0,sepIndex);
      versionString=objectId.substring(sepIndex + 1);
    }
    if (NodeRef.isNodeRef(nodeRefString)) {
      NodeRef nodeRef=new NodeRef(nodeRefString);
      if (!nodeService.exists(nodeRef)) {
        return ObjectVariantEnum.NOT_EXISTING;
      }
      if (nodeService.hasAspect(nodeRef,ContentModel.ASPECT_WORKING_COPY)) {
        return ObjectVariantEnum.PWC;
      }
      if (versionString == null) {
        return ObjectVariantEnum.NODE;
      }
      VersionHistory versionHistory=versionService.getVersionHistory(nodeRef);
      if (versionHistory == null) {
        if (versionString.equals(UNVERSIONED_VERSION_LABEL)) {
          return ObjectVariantEnum.NODE;
        }
        return ObjectVariantEnum.NOT_EXISTING;
      }
      try {
        versionHistory.getVersion(versionString);
        return ObjectVariantEnum.VERSION;
      }
 catch (      VersionDoesNotExistException e) {
        return ObjectVariantEnum.NOT_EXISTING;
      }
    }
 else     if (objectId.startsWith(ASSOC_ID_PREFIX)) {
      Long assocId=null;
      try {
        assocId=new Long(objectId.substring(ASSOC_ID_PREFIX.length()));
      }
 catch (      NumberFormatException nfe) {
        return ObjectVariantEnum.INVALID_ID;
      }
      AssociationRef associationRef=nodeService.getAssoc(assocId);
      if (associationRef == null) {
        return ObjectVariantEnum.NOT_EXISTING;
      }
      return ObjectVariantEnum.ASSOC;
    }
 else {
      return ObjectVariantEnum.INVALID_ID;
    }
  }
 catch (  AccessDeniedException e) {
    return ObjectVariantEnum.PERMISSION_DENIED;
  }
}","/** 
 * Returns the variant of the object.
 */
public ObjectVariantEnum getObjectVariant(String objectId){
  if (objectId == null) {
    return ObjectVariantEnum.INVALID_ID;
  }
  try {
    String nodeRefString=objectId;
    String versionString=null;
    int sepIndex=objectId.lastIndexOf(ID_SEPERATOR);
    if (sepIndex > -1) {
      nodeRefString=objectId.substring(0,sepIndex);
      versionString=objectId.substring(sepIndex + 1);
    }
    if (NodeRef.isNodeRef(nodeRefString)) {
      NodeRef nodeRef=new NodeRef(nodeRefString);
      if (!nodeService.exists(nodeRef)) {
        return ObjectVariantEnum.NOT_EXISTING;
      }
      if (nodeService.hasAspect(nodeRef,ContentModel.ASPECT_WORKING_COPY)) {
        return ObjectVariantEnum.PWC;
      }
      if (versionString == null) {
        return ObjectVariantEnum.NODE;
      }
      VersionHistory versionHistory=versionService.getVersionHistory(nodeRef);
      if (versionHistory == null) {
        if (versionString.equals(UNVERSIONED_VERSION_LABEL)) {
          return ObjectVariantEnum.NODE;
        }
        return ObjectVariantEnum.NOT_EXISTING;
      }
      try {
        versionHistory.getVersion(versionString);
        if (versionString.equals(versionHistory.getHeadVersion().getVersionLabel())) {
          return ObjectVariantEnum.NODE;
        }
        return ObjectVariantEnum.VERSION;
      }
 catch (      VersionDoesNotExistException e) {
        return ObjectVariantEnum.NOT_EXISTING;
      }
    }
 else     if (objectId.startsWith(ASSOC_ID_PREFIX)) {
      Long assocId=null;
      try {
        assocId=new Long(objectId.substring(ASSOC_ID_PREFIX.length()));
      }
 catch (      NumberFormatException nfe) {
        return ObjectVariantEnum.INVALID_ID;
      }
      AssociationRef associationRef=nodeService.getAssoc(assocId);
      if (associationRef == null) {
        return ObjectVariantEnum.NOT_EXISTING;
      }
      return ObjectVariantEnum.ASSOC;
    }
 else {
      return ObjectVariantEnum.INVALID_ID;
    }
  }
 catch (  AccessDeniedException e) {
    return ObjectVariantEnum.PERMISSION_DENIED;
  }
}",0.966043307086614
172171,"/** 
 * Deletes the specified NodeRefs, if they exist.
 * @param nodesToDelete
 */
private static void performDeletionOfNodes(final List<NodeRef> nodesToDelete){
  TRANSACTION_HELPER.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<Void>(){
    @Override public Void execute() throws Throwable {
      AuthenticationUtil.setFullyAuthenticatedUser(ADMIN_USER);
      for (      NodeRef node : nodesToDelete) {
        if (NODE_SERVICE.exists(node))         NODE_SERVICE.deleteNode(node);
      }
      return null;
    }
  }
);
}","/** 
 * Deletes the specified NodeRefs, if they exist.
 * @param nodesToDelete
 */
private static void performDeletionOfNodes(final List<NodeRef> nodesToDelete){
  TRANSACTION_HELPER.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<Void>(){
    @Override public Void execute() throws Throwable {
      AuthenticationUtil.setFullyAuthenticatedUser(ADMIN_USER);
      for (      NodeRef node : nodesToDelete) {
        if (NODE_SERVICE.exists(node)) {
          if (NODE_SERVICE.getType(node).equals(SiteModel.TYPE_SITE)) {
            SiteInfo siteInfo=SITE_SERVICE.getSite(node);
            SITE_SERVICE.deleteSite(siteInfo.getShortName());
          }
 else {
            NODE_SERVICE.deleteNode(node);
          }
        }
      }
      return null;
    }
  }
);
}",0.7964338781575037
172172,"@Override protected void setUp() throws Exception {
  applicationContext=ApplicationContextHelper.getApplicationContext();
  repositoryHelper=(Repository)this.applicationContext.getBean(""String_Node_Str"");
  ApplicationContextFactory fileServers=(ApplicationContextFactory)this.applicationContext.getBean(""String_Node_Str"");
  cifsHelper=(CifsHelper)this.applicationContext.getBean(""String_Node_Str"");
  driver=(ContentDiskDriver)this.applicationContext.getBean(""String_Node_Str"");
  mlAwareNodeService=(NodeService)this.applicationContext.getBean(""String_Node_Str"");
  nodeService=(NodeService)applicationContext.getBean(""String_Node_Str"");
  transactionService=(TransactionService)applicationContext.getBean(""String_Node_Str"");
  contentService=(ContentService)applicationContext.getBean(""String_Node_Str"");
  ruleService=(RuleService)applicationContext.getBean(""String_Node_Str"");
  actionService=(ActionService)this.applicationContext.getBean(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",driver);
  assertNotNull(""String_Node_Str"",repositoryHelper);
  assertNotNull(""String_Node_Str"",mlAwareNodeService);
  assertNotNull(""String_Node_Str"",nodeService);
  assertNotNull(""String_Node_Str"",transactionService);
  assertNotNull(""String_Node_Str"",contentService);
  assertNotNull(""String_Node_Str"",ruleService);
  assertNotNull(""String_Node_Str"",actionService);
  AuthenticationUtil.setRunAsUserSystem();
  RetryingTransactionCallback<Void> removeRootCB=new RetryingTransactionCallback<Void>(){
    @Override public Void execute() throws Throwable {
      NodeRef companyHome=repositoryHelper.getCompanyHome();
      NodeRef rootNode=nodeService.getChildByName(companyHome,ContentModel.ASSOC_CONTAINS,TEST_ROOT_PATH);
      if (rootNode != null) {
        logger.debug(""String_Node_Str"");
        nodeService.deleteNode(rootNode);
      }
      return null;
    }
  }
;
  final RetryingTransactionHelper tran=transactionService.getRetryingTransactionHelper();
  tran.doInTransaction(removeRootCB,false,true);
}","@Override protected void setUp() throws Exception {
  applicationContext=ApplicationContextHelper.getApplicationContext();
  repositoryHelper=(Repository)this.applicationContext.getBean(""String_Node_Str"");
  ApplicationContextFactory fileServers=(ApplicationContextFactory)this.applicationContext.getBean(""String_Node_Str"");
  cifsHelper=(CifsHelper)fileServers.getApplicationContext().getBean(""String_Node_Str"");
  driver=(ContentDiskDriver)fileServers.getApplicationContext().getBean(""String_Node_Str"");
  mlAwareNodeService=(NodeService)this.applicationContext.getBean(""String_Node_Str"");
  nodeService=(NodeService)applicationContext.getBean(""String_Node_Str"");
  transactionService=(TransactionService)applicationContext.getBean(""String_Node_Str"");
  contentService=(ContentService)applicationContext.getBean(""String_Node_Str"");
  ruleService=(RuleService)applicationContext.getBean(""String_Node_Str"");
  actionService=(ActionService)this.applicationContext.getBean(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",driver);
  assertNotNull(""String_Node_Str"",repositoryHelper);
  assertNotNull(""String_Node_Str"",mlAwareNodeService);
  assertNotNull(""String_Node_Str"",nodeService);
  assertNotNull(""String_Node_Str"",transactionService);
  assertNotNull(""String_Node_Str"",contentService);
  assertNotNull(""String_Node_Str"",ruleService);
  assertNotNull(""String_Node_Str"",actionService);
  AuthenticationUtil.setRunAsUserSystem();
  RetryingTransactionCallback<Void> removeRootCB=new RetryingTransactionCallback<Void>(){
    @Override public Void execute() throws Throwable {
      NodeRef companyHome=repositoryHelper.getCompanyHome();
      NodeRef rootNode=nodeService.getChildByName(companyHome,ContentModel.ASSOC_CONTAINS,TEST_ROOT_PATH);
      if (rootNode != null) {
        logger.debug(""String_Node_Str"");
        nodeService.deleteNode(rootNode);
      }
      return null;
    }
  }
;
  final RetryingTransactionHelper tran=transactionService.getRetryingTransactionHelper();
  tran.doInTransaction(removeRootCB,false,true);
}",0.9881773399014778
172173,"private TransferEndEvent transferImpl(String targetName,final TransferDefinition definition,final TransferEventProcessor eventProcessor) throws TransferFailureException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + targetName);
  }
  TransferEndEvent endEvent=null;
  Exception failureException=null;
  TransferTarget target=null;
  Transfer transfer=null;
  final List<TransferEvent> transferReportEvents=new LinkedList<TransferEvent>();
  NodeRef sourceReport=null;
  NodeRef destinationReport=null;
  File manifest=null;
  File requisite=null;
  int pollRetries=0;
  int pollPosition=-1;
  boolean cancelled=false;
  TransferCallback reportCallback=new TransferCallback(){
    private static final long serialVersionUID=4072579605731036522L;
    public void processEvent(    TransferEvent event){
      transferReportEvents.add(event);
    }
  }
;
  eventProcessor.addObserver(reportCallback);
  ClientTransferState clientState=ClientTransferState.Begin;
  while (clientState != ClientTransferState.Exit) {
    try {
switch (clientState) {
case Begin:
{
          eventProcessor.start();
          manifest=createManifest(definition);
          logger.debug(""String_Node_Str"");
          target=getTransferTarget(targetName);
          checkTargetEnabled(target);
          transfer=transmitter.begin(target);
          String transferId=transfer.getTransferId();
          TransferStatus status=new TransferStatus();
          transferMonitoring.put(transferId,status);
          logger.debug(""String_Node_Str"" + transferId);
          eventProcessor.begin(transferId);
          checkCancel(transferId);
          clientState=ClientTransferState.Prepare;
          break;
        }
case Prepare:
{
        eventProcessor.sendSnapshot(1,1);
        requisite=createRequisiteFile();
        FileOutputStream reqOutput=new FileOutputStream(requisite);
        transmitter.sendManifest(transfer,manifest,reqOutput);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
          try {
            outputFile(requisite);
          }
 catch (          IOException error) {
            logger.debug(""String_Node_Str"");
            error.printStackTrace();
          }
        }
        sendContent(transfer,definition,eventProcessor,manifest,requisite);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        eventProcessor.prepare();
        transmitter.prepare(transfer);
        checkCancel(transfer.getTransferId());
        clientState=ClientTransferState.Commit;
        break;
      }
case Commit:
{
      eventProcessor.commit();
      transmitter.commit(transfer);
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      checkCancel(transfer.getTransferId());
      clientState=ClientTransferState.Poll;
      break;
    }
case Poll:
{
    TransferProgress progress=null;
    try {
      progress=transmitter.getStatus(transfer);
      pollRetries=0;
    }
 catch (    TransferException e) {
      pollRetries++;
      if (pollRetries == 3) {
        throw new TransferException(MSG_FAILED_TO_GET_TRANSFER_STATUS,new Object[]{target.getName()});
      }
    }
    if (progress.getStatus() == TransferProgress.Status.ERROR) {
      Throwable targetError=progress.getError();
      if (targetError == null) {
        targetError=new TransferException(MSG_UNKNOWN_TARGET_ERROR);
      }
      if (Exception.class.isAssignableFrom(targetError.getClass())) {
        failureException=(Exception)targetError;
      }
 else {
        failureException=new TransferException(MSG_TARGET_ERROR,new Object[]{targetError.getMessage()},targetError);
      }
      clientState=ClientTransferState.Finished;
      break;
    }
 else     if (progress.getStatus() == TransferProgress.Status.CANCELLED) {
      cancelled=true;
      clientState=ClientTransferState.Finished;
      break;
    }
    if (progress.getCurrentPosition() != pollPosition) {
      pollPosition=progress.getCurrentPosition();
      logger.debug(""String_Node_Str"" + pollPosition);
      eventProcessor.committing(progress.getEndPosition(),pollPosition);
    }
    if (progress.getStatus() == TransferProgress.Status.COMPLETE) {
      clientState=ClientTransferState.Finished;
      break;
    }
    checkCancel(transfer.getTransferId());
    try {
      Thread.sleep(commitPollDelay);
    }
 catch (    InterruptedException e) {
    }
    break;
  }
case Cancel:
{
  logger.debug(""String_Node_Str"");
  transmitter.abort(transfer);
  clientState=ClientTransferState.Poll;
  break;
}
case Finished:
{
try {
  TransferEndEventImpl endEventImpl=null;
  String reportName=null;
  try {
    if (failureException != null) {
      logger.debug(""String_Node_Str"",failureException);
      TransferEventError errorEvent=new TransferEventError();
      errorEvent.setTransferState(TransferEvent.TransferState.ERROR);
      errorEvent.setException(failureException);
      errorEvent.setMessage(failureException.getMessage());
      endEventImpl=errorEvent;
      reportName=""String_Node_Str"";
    }
 else     if (cancelled) {
      endEventImpl=new TransferEventCancelled();
      endEventImpl.setTransferState(TransferEvent.TransferState.CANCELLED);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
 else {
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      endEventImpl=new TransferEventSuccess();
      endEventImpl.setTransferState(TransferEvent.TransferState.SUCCESS);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
    transferReportEvents.add(endEventImpl);
  }
 catch (  Exception e) {
    failureException=e;
    reportName=""String_Node_Str"";
    logger.warn(""String_Node_Str"",e);
  }
  reportName+=""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  try {
    if (transfer != null) {
      logger.debug(""String_Node_Str"");
      destinationReport=persistDestinationTransferReport(reportName,transfer,target);
      if (destinationReport != null) {
        eventProcessor.writeReport(destinationReport,TransferEventReport.ReportType.DESTINATION,endEventImpl.getTransferState());
      }
    }
    logger.debug(""String_Node_Str"");
    sourceReport=persistTransferReport(reportName,transfer,target,definition,transferReportEvents,manifest,failureException);
    if (sourceReport != null) {
      eventProcessor.writeReport(sourceReport,TransferEventReport.ReportType.SOURCE,endEventImpl.getTransferState());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    endEventImpl.setLast(true);
    endEventImpl.setSourceReport(sourceReport);
    endEventImpl.setDestinationReport(destinationReport);
    endEvent=endEventImpl;
    eventProcessor.end(endEvent);
  }
 catch (  Exception e) {
    failureException=e;
    logger.warn(""String_Node_Str"",e);
  }
}
  finally {
  clientState=ClientTransferState.Exit;
}
}
}
}
 catch (TransferCancelledException e) {
logger.debug(""String_Node_Str"");
clientState=ClientTransferState.Cancel;
}
catch (Exception e) {
logger.debug(""String_Node_Str"",e);
failureException=e;
if (transfer != null && (clientState == ClientTransferState.Begin || clientState == ClientTransferState.Prepare)) {
clientState=ClientTransferState.Cancel;
}
 else {
clientState=ClientTransferState.Finished;
}
}
}
try {
if (endEvent == null) {
TransferEventError error=new TransferEventError();
error.setTransferState(TransferEvent.TransferState.ERROR);
TransferFailureException endException=new TransferFailureException(error);
error.setMessage(endException.getMessage());
error.setException(endException);
error.setSourceReport(sourceReport);
error.setDestinationReport(destinationReport);
error.setLast(true);
endEvent=error;
}
if (endEvent instanceof TransferEventError) {
TransferEventError endError=(TransferEventError)endEvent;
throw new TransferFailureException(endError);
}
return endEvent;
}
  finally {
if (transfer != null) {
transferMonitoring.remove(transfer.getTransferId());
}
if (manifest != null) {
manifest.delete();
logger.debug(""String_Node_Str"");
}
if (requisite != null) {
requisite.delete();
logger.debug(""String_Node_Str"");
}
}
}","private TransferEndEvent transferImpl(String targetName,final TransferDefinition definition,final TransferEventProcessor eventProcessor) throws TransferFailureException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + targetName);
  }
  TransferEndEvent endEvent=null;
  Exception failureException=null;
  TransferTarget target=null;
  Transfer transfer=null;
  final List<TransferEvent> transferReportEvents=new LinkedList<TransferEvent>();
  NodeRef sourceReport=null;
  NodeRef destinationReport=null;
  File manifest=null;
  File requisite=null;
  int pollRetries=0;
  int pollPosition=-1;
  boolean cancelled=false;
  TransferCallback reportCallback=new TransferCallback(){
    private static final long serialVersionUID=4072579605731036522L;
    public void processEvent(    TransferEvent event){
      transferReportEvents.add(event);
    }
  }
;
  eventProcessor.addObserver(reportCallback);
  ClientTransferState clientState=ClientTransferState.Begin;
  while (clientState != ClientTransferState.Exit) {
    try {
switch (clientState) {
case Begin:
{
          eventProcessor.start();
          manifest=createManifest(definition);
          logger.debug(""String_Node_Str"");
          target=getTransferTarget(targetName);
          checkTargetEnabled(target);
          transfer=transmitter.begin(target);
          String transferId=transfer.getTransferId();
          TransferStatus status=new TransferStatus();
          transferMonitoring.put(transferId,status);
          logger.debug(""String_Node_Str"" + transferId);
          eventProcessor.begin(transferId);
          checkCancel(transferId);
          clientState=ClientTransferState.Prepare;
          break;
        }
case Prepare:
{
        eventProcessor.sendSnapshot(1,1);
        requisite=createRequisiteFile();
        FileOutputStream reqOutput=new FileOutputStream(requisite);
        transmitter.sendManifest(transfer,manifest,reqOutput);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
          try {
            outputFile(requisite);
          }
 catch (          IOException error) {
            logger.debug(""String_Node_Str"");
            error.printStackTrace();
          }
        }
        sendContent(transfer,definition,eventProcessor,manifest,requisite);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        eventProcessor.prepare();
        transmitter.prepare(transfer);
        checkCancel(transfer.getTransferId());
        clientState=ClientTransferState.Commit;
        break;
      }
case Commit:
{
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      eventProcessor.commit();
      transmitter.commit(transfer);
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      checkCancel(transfer.getTransferId());
      clientState=ClientTransferState.Poll;
      break;
    }
case Poll:
{
    TransferProgress progress=null;
    try {
      progress=transmitter.getStatus(transfer);
      pollRetries=0;
    }
 catch (    TransferException e) {
      pollRetries++;
      if (pollRetries == 3) {
        throw new TransferException(MSG_FAILED_TO_GET_TRANSFER_STATUS,new Object[]{target.getName()});
      }
    }
    if (progress.getStatus() == TransferProgress.Status.ERROR) {
      Throwable targetError=progress.getError();
      if (targetError == null) {
        targetError=new TransferException(MSG_UNKNOWN_TARGET_ERROR);
      }
      if (Exception.class.isAssignableFrom(targetError.getClass())) {
        failureException=(Exception)targetError;
      }
 else {
        failureException=new TransferException(MSG_TARGET_ERROR,new Object[]{targetError.getMessage()},targetError);
      }
      clientState=ClientTransferState.Finished;
      break;
    }
 else     if (progress.getStatus() == TransferProgress.Status.CANCELLED) {
      cancelled=true;
      clientState=ClientTransferState.Finished;
      break;
    }
    if (progress.getCurrentPosition() != pollPosition) {
      pollPosition=progress.getCurrentPosition();
      logger.debug(""String_Node_Str"" + pollPosition);
      eventProcessor.committing(progress.getEndPosition(),pollPosition);
    }
    if (progress.getStatus() == TransferProgress.Status.COMPLETE) {
      clientState=ClientTransferState.Finished;
      break;
    }
    checkCancel(transfer.getTransferId());
    try {
      Thread.sleep(commitPollDelay);
    }
 catch (    InterruptedException e) {
    }
    break;
  }
case Cancel:
{
  logger.debug(""String_Node_Str"");
  transmitter.abort(transfer);
  clientState=ClientTransferState.Poll;
  break;
}
case Finished:
{
try {
  TransferEndEventImpl endEventImpl=null;
  String reportName=null;
  try {
    if (failureException != null) {
      logger.debug(""String_Node_Str"",failureException);
      TransferEventError errorEvent=new TransferEventError();
      errorEvent.setTransferState(TransferEvent.TransferState.ERROR);
      errorEvent.setException(failureException);
      errorEvent.setMessage(failureException.getMessage());
      endEventImpl=errorEvent;
      reportName=""String_Node_Str"";
    }
 else     if (cancelled) {
      endEventImpl=new TransferEventCancelled();
      endEventImpl.setTransferState(TransferEvent.TransferState.CANCELLED);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
 else {
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      endEventImpl=new TransferEventSuccess();
      endEventImpl.setTransferState(TransferEvent.TransferState.SUCCESS);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
    transferReportEvents.add(endEventImpl);
  }
 catch (  Exception e) {
    failureException=e;
    reportName=""String_Node_Str"";
    logger.warn(""String_Node_Str"",e);
  }
  reportName+=""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  try {
    if (transfer != null) {
      logger.debug(""String_Node_Str"");
      destinationReport=persistDestinationTransferReport(reportName,transfer,target);
      if (destinationReport != null) {
        eventProcessor.writeReport(destinationReport,TransferEventReport.ReportType.DESTINATION,endEventImpl.getTransferState());
      }
    }
    logger.debug(""String_Node_Str"");
    sourceReport=persistTransferReport(reportName,transfer,target,definition,transferReportEvents,manifest,failureException);
    if (sourceReport != null) {
      eventProcessor.writeReport(sourceReport,TransferEventReport.ReportType.SOURCE,endEventImpl.getTransferState());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    endEventImpl.setLast(true);
    endEventImpl.setSourceReport(sourceReport);
    endEventImpl.setDestinationReport(destinationReport);
    endEvent=endEventImpl;
    eventProcessor.end(endEvent);
  }
 catch (  Exception e) {
    failureException=e;
    logger.warn(""String_Node_Str"",e);
  }
}
  finally {
  clientState=ClientTransferState.Exit;
}
}
}
}
 catch (TransferCancelledException e) {
logger.debug(""String_Node_Str"");
clientState=ClientTransferState.Cancel;
}
catch (Exception e) {
logger.debug(""String_Node_Str"",e);
if (failureException == null) {
failureException=e;
}
if (transfer != null && (clientState == ClientTransferState.Begin || clientState == ClientTransferState.Prepare || clientState == ClientTransferState.Commit)) {
clientState=ClientTransferState.Cancel;
}
 else {
clientState=ClientTransferState.Finished;
}
}
}
try {
if (endEvent == null) {
TransferEventError error=new TransferEventError();
error.setTransferState(TransferEvent.TransferState.ERROR);
TransferFailureException endException=new TransferFailureException(error);
error.setMessage(endException.getMessage());
error.setException(endException);
error.setSourceReport(sourceReport);
error.setDestinationReport(destinationReport);
error.setLast(true);
endEvent=error;
}
if (endEvent instanceof TransferEventError) {
TransferEventError endError=(TransferEventError)endEvent;
throw new TransferFailureException(endError);
}
return endEvent;
}
  finally {
if (transfer != null) {
transferMonitoring.remove(transfer.getTransferId());
}
if (manifest != null) {
manifest.delete();
logger.debug(""String_Node_Str"");
}
if (requisite != null) {
requisite.delete();
logger.debug(""String_Node_Str"");
}
}
}",0.9909726789023734
172174,"public void testLayeredFolder4() throws Exception {
  Logger lg1=null;
  Level l1=null;
  Logger lg2=null;
  Level l2=null;
  try {
    lg1=Logger.getLogger(""String_Node_Str"");
    l1=lg1.getLevel();
    lg1.setLevel(Level.DEBUG);
    lg2=Logger.getLogger(""String_Node_Str"");
    l2=lg2.getLevel();
    lg2.setLevel(Level.DEBUG);
    logger.debug(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    List<AVMDifference> diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,false,false,""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"");
    PrintStream out=new PrintStream(fService.getFileOutputStream(""String_Node_Str""));
    out.println(""String_Node_Str"");
    out.close();
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    diffs=new ArrayList<AVMDifference>(1);
    diffs.add(new AVMDifference(-1,""String_Node_Str"",-1,""String_Node_Str"",AVMDifference.NEWER));
    assertNotNull(fService.lookup(-1,""String_Node_Str""));
    fSyncService.update(diffs,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(""String_Node_Str"",diffs.toString());
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,true,true,""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    throw e;
  }
 finally {
    fService.purgeStore(""String_Node_Str"");
    fService.purgeStore(""String_Node_Str"");
    fService.purgeStore(""String_Node_Str"");
    if (fService.getStore(""String_Node_Str"") != null) {
      fService.purgeStore(""String_Node_Str"");
    }
    lg1.setLevel(l1);
    lg2.setLevel(l2);
  }
}","public void testLayeredFolder4() throws Exception {
  try {
    logger.debug(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    List<AVMDifference> diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,false,false,""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"");
    PrintStream out=new PrintStream(fService.getFileOutputStream(""String_Node_Str""));
    out.println(""String_Node_Str"");
    out.close();
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createStore(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    diffs=new ArrayList<AVMDifference>(1);
    diffs.add(new AVMDifference(-1,""String_Node_Str"",-1,""String_Node_Str"",AVMDifference.NEWER));
    assertNotNull(fService.lookup(-1,""String_Node_Str""));
    fSyncService.update(diffs,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(""String_Node_Str"",diffs.toString());
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,true,true,""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    throw e;
  }
 finally {
    fService.purgeStore(""String_Node_Str"");
    fService.purgeStore(""String_Node_Str"");
    fService.purgeStore(""String_Node_Str"");
    if (fService.getStore(""String_Node_Str"") != null) {
      fService.purgeStore(""String_Node_Str"");
    }
  }
}",0.9695618456766188
172175,"public void testSimpleUpdateLD5() throws Exception {
  Logger lg1=null;
  Level l1=null;
  Logger lg2=null;
  Level l2=null;
  try {
    lg1=Logger.getLogger(""String_Node_Str"");
    l1=lg1.getLevel();
    lg1.setLevel(Level.DEBUG);
    lg2=Logger.getLogger(""String_Node_Str"");
    l2=lg2.getLevel();
    lg2.setLevel(Level.DEBUG);
    logger.debug(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    List<AVMDifference> diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(2,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    List<AVMDifference> selected=new ArrayList<AVMDifference>(1);
    selected.add(diffs.get(1));
    assertEquals(""String_Node_Str"",selected.toString());
    fSyncService.update(selected,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.removeNode(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createSnapshot(""String_Node_Str"",null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    throw e;
  }
 finally {
    lg1.setLevel(l1);
    lg2.setLevel(l2);
  }
}","public void testSimpleUpdateLD5() throws Exception {
  try {
    logger.debug(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createLayeredDirectory(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    List<AVMDifference> diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(2,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    List<AVMDifference> selected=new ArrayList<AVMDifference>(1);
    selected.add(diffs.get(1));
    assertEquals(""String_Node_Str"",selected.toString());
    fSyncService.update(selected,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.removeNode(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    fService.createSnapshot(""String_Node_Str"",null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(1,diffs.size());
    assertEquals(""String_Node_Str"",diffs.toString());
    fSyncService.update(diffs,null,false,false,false,false,null,null);
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    diffs=fSyncService.compare(-1,""String_Node_Str"",-1,""String_Node_Str"",null);
    assertEquals(0,diffs.size());
    fSyncService.flatten(""String_Node_Str"",""String_Node_Str"");
    logger.debug(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    recursiveList(""String_Node_Str"");
    logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace(System.err);
    throw e;
  }
}",0.9561274836644886
172176,"public void testRemoveProperty() throws Exception {
  Map<QName,Serializable> properties=nodeService.getProperties(rootNodeRef);
  nodeService.addAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE,null);
  Serializable defaultValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNotNull(""String_Node_Str"",defaultValue);
  nodeService.setProperties(rootNodeRef,properties);
  Serializable nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
  nodeService.removeAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE);
  nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
  nodeService.addAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE,null);
  defaultValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNotNull(""String_Node_Str"",defaultValue);
  nodeService.setProperty(rootNodeRef,PROP_QNAME_PROP2,null);
  nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
  nodeService.removeAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE);
  nodeService.addAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE,null);
  defaultValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNotNull(""String_Node_Str"",defaultValue);
  nodeService.removeProperty(rootNodeRef,PROP_QNAME_PROP2);
  nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
}","public void testRemoveProperty() throws Exception {
  Map<QName,Serializable> properties=nodeService.getProperties(rootNodeRef);
  nodeService.addAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE,null);
  Serializable defaultValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNotNull(""String_Node_Str"",defaultValue);
  assertEquals(""String_Node_Str"",DEFAULT_VALUE,defaultValue);
  nodeService.setProperties(rootNodeRef,properties);
  Serializable nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
  nodeService.removeAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE);
  nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
  nodeService.addAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE,null);
  defaultValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNotNull(""String_Node_Str"",defaultValue);
  nodeService.setProperty(rootNodeRef,PROP_QNAME_PROP2,null);
  nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
  nodeService.removeAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE);
  nodeService.addAspect(rootNodeRef,ASPECT_QNAME_WITH_DEFAULT_VALUE,null);
  defaultValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNotNull(""String_Node_Str"",defaultValue);
  nodeService.removeProperty(rootNodeRef,PROP_QNAME_PROP2);
  nullValue=nodeService.getProperty(rootNodeRef,PROP_QNAME_PROP2);
  assertNull(""String_Node_Str"",nullValue);
}",0.9797385620915032
172177,"/** 
 * @param existingProperties    existing node properties
 * @param classQNames           the types or aspects to introspect
 * @return                      Returns any properties that should be added
 */
private Map<QName,Serializable> getMissingProperties(Map<QName,Serializable> existingProperties,Set<QName> classQNames){
  Map<QName,Serializable> allDefaultProperties=new HashMap<QName,Serializable>(17);
  for (  QName classQName : classQNames) {
    ClassDefinition classDefinition=dictionaryService.getClass(classQName);
    if (classDefinition == null) {
      continue;
    }
    Map<QName,Serializable> defaultProperties=getDefaultProperties(classQName);
    if (defaultProperties.size() > 0) {
      allDefaultProperties.putAll(defaultProperties);
    }
  }
  Map<QName,Serializable> missingProperties=new HashMap<QName,Serializable>(allDefaultProperties);
  missingProperties.entrySet().removeAll(existingProperties.entrySet());
  return missingProperties;
}","/** 
 * @param existingProperties    existing node properties
 * @param classQNames           the types or aspects to introspect
 * @return                      Returns any properties that should be added
 */
private Map<QName,Serializable> getMissingProperties(Map<QName,Serializable> existingProperties,Set<QName> classQNames){
  Map<QName,Serializable> allDefaultProperties=new HashMap<QName,Serializable>(17);
  for (  QName classQName : classQNames) {
    ClassDefinition classDefinition=dictionaryService.getClass(classQName);
    if (classDefinition == null) {
      continue;
    }
    Map<QName,Serializable> defaultProperties=getDefaultProperties(classQName);
    if (defaultProperties.size() > 0) {
      allDefaultProperties.putAll(defaultProperties);
    }
  }
  Map<QName,Serializable> missingProperties=new HashMap<QName,Serializable>(allDefaultProperties);
  missingProperties.keySet().removeAll(existingProperties.keySet());
  return missingProperties;
}",0.9938335046248716
172178,"/** 
 * Initialize the configuration using the configuration service
 */
public void init(){
  if (m_authenticationComponent == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_authenticationService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_nodeService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_personService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_transactionService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_repoDiskInterface == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_authorityService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  determinePlatformType();
  DebugConfigSection debugConfig=new DebugConfigSection(this);
  try {
    debugConfig.setDebug(""String_Node_Str"",null);
  }
 catch (  InvalidConfigurationException ex) {
  }
  new GlobalConfigSection(this);
  new AlfrescoConfigSection(this);
  ClientInfo.setFactory(new AlfrescoClientInfoFactory());
  try {
    processWINSServerConfig();
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
  }
  try {
    processCoreServerConfig();
    processSecurityConfig();
    processFilesystemsConfig();
  }
 catch (  Exception ex) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  try {
    processCIFSServerConfig();
    logger.info(""String_Node_Str"" + (isSMBServerEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  UnsatisfiedLinkError ex) {
    logger.error(""String_Node_Str"");
    removeConfigSection(CIFSConfigSection.SectionName);
  }
catch (  Throwable ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
    removeConfigSection(CIFSConfigSection.SectionName);
  }
  try {
    processFTPServerConfig();
    logger.info(""String_Node_Str"" + (isFTPServerEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
  }
  try {
    processNFSServerConfig();
    logger.info(""String_Node_Str"" + (isNFSServerEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
  }
}","/** 
 * Initialize the configuration using the configuration service
 */
public void init(){
  if (m_authenticationComponent == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_authenticationService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_nodeService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_personService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_transactionService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_repoDiskInterface == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
 else   if (m_authorityService == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  determinePlatformType();
  DebugConfigSection debugConfig=new DebugConfigSection(this);
  try {
    debugConfig.setDebug(""String_Node_Str"",new GenericConfigElement(""String_Node_Str""));
  }
 catch (  InvalidConfigurationException ex) {
  }
  new GlobalConfigSection(this);
  new AlfrescoConfigSection(this);
  ClientInfo.setFactory(new AlfrescoClientInfoFactory());
  try {
    processWINSServerConfig();
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
  }
  try {
    processCoreServerConfig();
    processSecurityConfig();
    processFilesystemsConfig();
  }
 catch (  Exception ex) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  try {
    processCIFSServerConfig();
    logger.info(""String_Node_Str"" + (isSMBServerEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  UnsatisfiedLinkError ex) {
    logger.error(""String_Node_Str"");
    removeConfigSection(CIFSConfigSection.SectionName);
  }
catch (  Throwable ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
    removeConfigSection(CIFSConfigSection.SectionName);
  }
  try {
    processFTPServerConfig();
    logger.info(""String_Node_Str"" + (isFTPServerEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
  }
  try {
    processNFSServerConfig();
    logger.info(""String_Node_Str"" + (isNFSServerEnabled() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"" + ex.getMessage(),ex);
  }
}",0.990874062056378
172179,"/** 
 * Output a debug string, and a newline.
 * @param str String
 */
public void debugPrintln(String str,int level){
  if (level <= getLogLevel()) {
    if (m_printBuf.length() > 0) {
      m_printBuf.append(str);
      logOutput(m_printBuf.toString(),level);
      m_printBuf.setLength(0);
    }
 else     logOutput(str,level);
  }
}","/** 
 * Output an exception
 * @param ex Throwable
 * @param level int
 */
public void debugPrintln(Throwable ex,int level){
  if (level <= getLogLevel()) {
switch (level) {
case Debug.Debug:
      logger.debug(ex,ex);
    break;
case Debug.Info:
  logger.info(ex,ex);
break;
case Debug.Warn:
logger.warn(ex,ex);
break;
case Debug.Fatal:
logger.fatal(ex,ex);
break;
case Debug.Error:
logger.error(ex,ex);
break;
}
}
}",0.2921646746347942
172180,"public void testErrorDuringCommit(){
  Exception error=new TransferException(""String_Node_Str"");
  TransferProgress status0=new TransferProgress();
  status0.setStatus(Status.COMMIT_REQUESTED);
  status0.setCurrentPosition(0);
  status0.setEndPosition(0);
  TransferProgress status1=new TransferProgress();
  status1.setStatus(Status.COMMITTING);
  status1.setCurrentPosition(0);
  status1.setEndPosition(4);
  TransferProgress status2=new TransferProgress();
  status2.setStatus(Status.COMMITTING);
  status2.setCurrentPosition(3);
  status2.setEndPosition(4);
  TransferProgress status3=new TransferProgress();
  status3.setStatus(Status.COMMITTING);
  status3.setCurrentPosition(5);
  status3.setEndPosition(8);
  TransferProgress status4=new TransferProgress();
  status4.setStatus(Status.ERROR);
  status4.setCurrentPosition(8);
  status4.setEndPosition(8);
  status4.setError(error);
  TransferProgress[] statuses=new TransferProgress[]{status0,status1,status2,status3,status4};
  configureBasicMockTransmitter(statuses);
  when(mockedTransferTransmitter.begin(target)).thenReturn(transfer);
  TransferDefinition transferDef=new TransferDefinition();
  transferDef.setNodes(folder1,file1,file2,file3);
  try {
    transferService.transfer(TRANSFER_TARGET_NAME,transferDef,mockedCallback);
    fail();
  }
 catch (  TransferFailureException ex) {
    List<TransferEvent> expectedEvents=new ArrayList<TransferEvent>();
    TransferEventImpl event;
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.START);
    expectedEvents.add(event);
    event=new TransferEventBegin();
    event.setTransferState(TransferState.START);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.START);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.SENDING_SNAPSHOT);
    expectedEvents.add(event);
    event=new TransferEventSendingSnapshot();
    event.setTransferState(TransferState.SENDING_SNAPSHOT);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.SENDING_SNAPSHOT);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventSendingContent();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventSendingContent();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventSendingContent();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.PREPARING);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.PREPARING);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.ERROR);
    expectedEvents.add(event);
    event=new TransferEventReport();
    event.setTransferState(TransferState.ERROR);
    expectedEvents.add(event);
    event=new TransferEventReport();
    event.setTransferState(TransferState.ERROR);
    expectedEvents.add(event);
    event=new TransferEventError();
    event.setTransferState(TransferState.ERROR);
    ((TransferEventError)event).setException(error);
    expectedEvents.add(event);
    verifyCallback(expectedEvents);
  }
}","public void testErrorDuringCommit(){
  Exception error=new TransferException(""String_Node_Str"");
  TransferProgress status0=new TransferProgress();
  status0.setStatus(Status.COMMIT_REQUESTED);
  status0.setCurrentPosition(0);
  status0.setEndPosition(0);
  TransferProgress status1=new TransferProgress();
  status1.setStatus(Status.COMMITTING);
  status1.setCurrentPosition(0);
  status1.setEndPosition(4);
  TransferProgress status2=new TransferProgress();
  status2.setStatus(Status.COMMITTING);
  status2.setCurrentPosition(3);
  status2.setEndPosition(4);
  TransferProgress status3=new TransferProgress();
  status3.setStatus(Status.COMMITTING);
  status3.setCurrentPosition(5);
  status3.setEndPosition(8);
  TransferProgress status4=new TransferProgress();
  status4.setStatus(Status.ERROR);
  status4.setCurrentPosition(8);
  status4.setEndPosition(8);
  status4.setError(error);
  TransferProgress[] statuses=new TransferProgress[]{status0,status1,status2,status3,status4};
  configureBasicMockTransmitter(statuses);
  when(mockedTransferTransmitter.begin(target)).thenReturn(transfer);
  TransferDefinition transferDef=new TransferDefinition();
  transferDef.setNodes(folder1,file1,file2,file3);
  try {
    transferService.transfer(TRANSFER_TARGET_NAME,transferDef,mockedCallback);
    fail();
  }
 catch (  TransferFailureException ex) {
    List<TransferEvent> expectedEvents=new ArrayList<TransferEvent>();
    TransferEventImpl event;
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.START);
    expectedEvents.add(event);
    event=new TransferEventBegin();
    event.setTransferState(TransferState.START);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.START);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.SENDING_SNAPSHOT);
    expectedEvents.add(event);
    event=new TransferEventSendingSnapshot();
    event.setTransferState(TransferState.SENDING_SNAPSHOT);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.SENDING_SNAPSHOT);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventSendingContent();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventSendingContent();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventSendingContent();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.SENDING_CONTENT);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.PREPARING);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.PREPARING);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventCommittingStatus();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventEndState();
    event.setTransferState(TransferState.COMMITTING);
    expectedEvents.add(event);
    event=new TransferEventEnterState();
    event.setTransferState(TransferState.ERROR);
    expectedEvents.add(event);
    event=new TransferEventReport();
    event.setTransferState(TransferState.ERROR);
    expectedEvents.add(event);
    event=new TransferEventReport();
    event.setTransferState(TransferState.ERROR);
    expectedEvents.add(event);
    event=new TransferEventError();
    event.setTransferState(TransferState.ERROR);
    ((TransferEventError)event).setException(error);
    expectedEvents.add(event);
    verifyCallback(expectedEvents);
  }
}",0.9831703434159654
172181,"private TransferEndEvent transferImpl(String targetName,final TransferDefinition definition,final TransferEventProcessor eventProcessor) throws TransferFailureException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + targetName);
  }
  TransferEndEvent endEvent=null;
  Exception failureException=null;
  TransferTarget target=null;
  Transfer transfer=null;
  final List<TransferEvent> transferReportEvents=new LinkedList<TransferEvent>();
  NodeRef sourceReport=null;
  NodeRef destinationReport=null;
  File manifest=null;
  File requisite=null;
  int pollRetries=0;
  int pollPosition=-1;
  boolean cancelled=false;
  TransferCallback reportCallback=new TransferCallback(){
    private static final long serialVersionUID=4072579605731036522L;
    public void processEvent(    TransferEvent event){
      transferReportEvents.add(event);
    }
  }
;
  eventProcessor.addObserver(reportCallback);
  ClientTransferState clientState=ClientTransferState.Begin;
  while (clientState != ClientTransferState.Exit) {
    try {
switch (clientState) {
case Begin:
{
          eventProcessor.start();
          manifest=createManifest(definition);
          logger.debug(""String_Node_Str"");
          target=getTransferTarget(targetName);
          checkTargetEnabled(target);
          transfer=transmitter.begin(target);
          String transferId=transfer.getTransferId();
          TransferStatus status=new TransferStatus();
          transferMonitoring.put(transferId,status);
          logger.debug(""String_Node_Str"" + transferId);
          eventProcessor.begin(transferId);
          checkCancel(transferId);
          clientState=ClientTransferState.Prepare;
          break;
        }
case Prepare:
{
        eventProcessor.sendSnapshot(1,1);
        requisite=createRequisiteFile();
        FileOutputStream reqOutput=new FileOutputStream(requisite);
        transmitter.sendManifest(transfer,manifest,reqOutput);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
          try {
            outputFile(requisite);
          }
 catch (          IOException error) {
            logger.debug(""String_Node_Str"");
            error.printStackTrace();
          }
        }
        sendContent(transfer,definition,eventProcessor,manifest,requisite);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        eventProcessor.prepare();
        transmitter.prepare(transfer);
        checkCancel(transfer.getTransferId());
        clientState=ClientTransferState.Commit;
        break;
      }
case Commit:
{
      eventProcessor.commit();
      transmitter.commit(transfer);
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      checkCancel(transfer.getTransferId());
      clientState=ClientTransferState.Poll;
      break;
    }
case Poll:
{
    TransferProgress progress=null;
    try {
      progress=transmitter.getStatus(transfer);
      pollRetries=0;
    }
 catch (    TransferException e) {
      pollRetries++;
      if (pollRetries == 3) {
        throw new TransferException(MSG_FAILED_TO_GET_TRANSFER_STATUS,new Object[]{target.getName()});
      }
    }
    if (progress.getCurrentPosition() != pollPosition) {
      pollPosition=progress.getCurrentPosition();
      logger.debug(""String_Node_Str"" + pollPosition);
      eventProcessor.committing(progress.getEndPosition(),pollPosition);
    }
    if (progress.getStatus() == TransferProgress.Status.ERROR) {
      Throwable targetError=progress.getError();
      if (targetError == null) {
        targetError=new TransferException(MSG_UNKNOWN_TARGET_ERROR);
      }
      if (Exception.class.isAssignableFrom(targetError.getClass())) {
        failureException=(Exception)targetError;
      }
 else {
        failureException=new TransferException(MSG_TARGET_ERROR,new Object[]{targetError.getMessage()},targetError);
      }
      clientState=ClientTransferState.Finished;
      break;
    }
 else     if (progress.getStatus() == TransferProgress.Status.CANCELLED) {
      cancelled=true;
      clientState=ClientTransferState.Finished;
      break;
    }
 else     if (progress.getStatus() == TransferProgress.Status.COMPLETE) {
      clientState=ClientTransferState.Finished;
      break;
    }
    checkCancel(transfer.getTransferId());
    try {
      Thread.sleep(commitPollDelay);
    }
 catch (    InterruptedException e) {
    }
    break;
  }
case Cancel:
{
  logger.debug(""String_Node_Str"");
  transmitter.abort(transfer);
  clientState=ClientTransferState.Poll;
  break;
}
case Finished:
{
try {
  TransferEndEventImpl endEventImpl=null;
  String reportName=null;
  try {
    if (failureException != null) {
      logger.debug(""String_Node_Str"",failureException);
      TransferEventError errorEvent=new TransferEventError();
      errorEvent.setTransferState(TransferEvent.TransferState.ERROR);
      errorEvent.setException(failureException);
      errorEvent.setMessage(failureException.getMessage());
      endEventImpl=errorEvent;
      reportName=""String_Node_Str"";
    }
 else     if (cancelled) {
      endEventImpl=new TransferEventCancelled();
      endEventImpl.setTransferState(TransferEvent.TransferState.CANCELLED);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
 else {
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      endEventImpl=new TransferEventSuccess();
      endEventImpl.setTransferState(TransferEvent.TransferState.SUCCESS);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
    transferReportEvents.add(endEventImpl);
  }
 catch (  Exception e) {
    failureException=e;
    reportName=""String_Node_Str"";
    logger.warn(""String_Node_Str"",e);
  }
  reportName+=""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  try {
    if (transfer != null) {
      logger.debug(""String_Node_Str"");
      destinationReport=persistDestinationTransferReport(reportName,transfer,target);
      if (destinationReport != null) {
        eventProcessor.writeReport(destinationReport,TransferEventReport.ReportType.DESTINATION,endEventImpl.getTransferState());
      }
    }
    logger.debug(""String_Node_Str"");
    sourceReport=persistTransferReport(reportName,transfer,target,definition,transferReportEvents,manifest,failureException);
    if (sourceReport != null) {
      eventProcessor.writeReport(sourceReport,TransferEventReport.ReportType.SOURCE,endEventImpl.getTransferState());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    endEventImpl.setLast(true);
    endEventImpl.setSourceReport(sourceReport);
    endEventImpl.setDestinationReport(destinationReport);
    endEvent=endEventImpl;
    eventProcessor.end(endEvent);
  }
 catch (  Exception e) {
    failureException=e;
    logger.warn(""String_Node_Str"",e);
  }
}
  finally {
  clientState=ClientTransferState.Exit;
}
}
}
}
 catch (TransferCancelledException e) {
logger.debug(""String_Node_Str"");
clientState=ClientTransferState.Cancel;
}
catch (Exception e) {
logger.debug(""String_Node_Str"",e);
failureException=e;
clientState=ClientTransferState.Finished;
}
}
try {
if (endEvent == null) {
TransferEventError error=new TransferEventError();
error.setTransferState(TransferEvent.TransferState.ERROR);
TransferFailureException endException=new TransferFailureException(error);
error.setMessage(endException.getMessage());
error.setException(endException);
error.setSourceReport(sourceReport);
error.setDestinationReport(destinationReport);
error.setLast(true);
endEvent=error;
}
if (endEvent instanceof TransferEventError) {
TransferEventError endError=(TransferEventError)endEvent;
throw new TransferFailureException(endError);
}
return endEvent;
}
  finally {
if (transfer != null) {
transferMonitoring.remove(transfer.getTransferId());
}
if (manifest != null) {
manifest.delete();
logger.debug(""String_Node_Str"");
}
if (requisite != null) {
requisite.delete();
logger.debug(""String_Node_Str"");
}
}
}","private TransferEndEvent transferImpl(String targetName,final TransferDefinition definition,final TransferEventProcessor eventProcessor) throws TransferFailureException {
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + targetName);
  }
  TransferEndEvent endEvent=null;
  Exception failureException=null;
  TransferTarget target=null;
  Transfer transfer=null;
  final List<TransferEvent> transferReportEvents=new LinkedList<TransferEvent>();
  NodeRef sourceReport=null;
  NodeRef destinationReport=null;
  File manifest=null;
  File requisite=null;
  int pollRetries=0;
  int pollPosition=-1;
  boolean cancelled=false;
  TransferCallback reportCallback=new TransferCallback(){
    private static final long serialVersionUID=4072579605731036522L;
    public void processEvent(    TransferEvent event){
      transferReportEvents.add(event);
    }
  }
;
  eventProcessor.addObserver(reportCallback);
  ClientTransferState clientState=ClientTransferState.Begin;
  while (clientState != ClientTransferState.Exit) {
    try {
switch (clientState) {
case Begin:
{
          eventProcessor.start();
          manifest=createManifest(definition);
          logger.debug(""String_Node_Str"");
          target=getTransferTarget(targetName);
          checkTargetEnabled(target);
          transfer=transmitter.begin(target);
          String transferId=transfer.getTransferId();
          TransferStatus status=new TransferStatus();
          transferMonitoring.put(transferId,status);
          logger.debug(""String_Node_Str"" + transferId);
          eventProcessor.begin(transferId);
          checkCancel(transferId);
          clientState=ClientTransferState.Prepare;
          break;
        }
case Prepare:
{
        eventProcessor.sendSnapshot(1,1);
        requisite=createRequisiteFile();
        FileOutputStream reqOutput=new FileOutputStream(requisite);
        transmitter.sendManifest(transfer,manifest,reqOutput);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"");
          try {
            outputFile(requisite);
          }
 catch (          IOException error) {
            logger.debug(""String_Node_Str"");
            error.printStackTrace();
          }
        }
        sendContent(transfer,definition,eventProcessor,manifest,requisite);
        logger.debug(""String_Node_Str"");
        checkCancel(transfer.getTransferId());
        eventProcessor.prepare();
        transmitter.prepare(transfer);
        checkCancel(transfer.getTransferId());
        clientState=ClientTransferState.Commit;
        break;
      }
case Commit:
{
      eventProcessor.commit();
      transmitter.commit(transfer);
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      checkCancel(transfer.getTransferId());
      clientState=ClientTransferState.Poll;
      break;
    }
case Poll:
{
    TransferProgress progress=null;
    try {
      progress=transmitter.getStatus(transfer);
      pollRetries=0;
    }
 catch (    TransferException e) {
      pollRetries++;
      if (pollRetries == 3) {
        throw new TransferException(MSG_FAILED_TO_GET_TRANSFER_STATUS,new Object[]{target.getName()});
      }
    }
    if (progress.getStatus() == TransferProgress.Status.ERROR) {
      Throwable targetError=progress.getError();
      if (targetError == null) {
        targetError=new TransferException(MSG_UNKNOWN_TARGET_ERROR);
      }
      if (Exception.class.isAssignableFrom(targetError.getClass())) {
        failureException=(Exception)targetError;
      }
 else {
        failureException=new TransferException(MSG_TARGET_ERROR,new Object[]{targetError.getMessage()},targetError);
      }
      clientState=ClientTransferState.Finished;
      break;
    }
 else     if (progress.getStatus() == TransferProgress.Status.CANCELLED) {
      cancelled=true;
      clientState=ClientTransferState.Finished;
      break;
    }
    if (progress.getCurrentPosition() != pollPosition) {
      pollPosition=progress.getCurrentPosition();
      logger.debug(""String_Node_Str"" + pollPosition);
      eventProcessor.committing(progress.getEndPosition(),pollPosition);
    }
    if (progress.getStatus() == TransferProgress.Status.COMPLETE) {
      clientState=ClientTransferState.Finished;
      break;
    }
    checkCancel(transfer.getTransferId());
    try {
      Thread.sleep(commitPollDelay);
    }
 catch (    InterruptedException e) {
    }
    break;
  }
case Cancel:
{
  logger.debug(""String_Node_Str"");
  transmitter.abort(transfer);
  clientState=ClientTransferState.Poll;
  break;
}
case Finished:
{
try {
  TransferEndEventImpl endEventImpl=null;
  String reportName=null;
  try {
    if (failureException != null) {
      logger.debug(""String_Node_Str"",failureException);
      TransferEventError errorEvent=new TransferEventError();
      errorEvent.setTransferState(TransferEvent.TransferState.ERROR);
      errorEvent.setException(failureException);
      errorEvent.setMessage(failureException.getMessage());
      endEventImpl=errorEvent;
      reportName=""String_Node_Str"";
    }
 else     if (cancelled) {
      endEventImpl=new TransferEventCancelled();
      endEventImpl.setTransferState(TransferEvent.TransferState.CANCELLED);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
 else {
      logger.debug(""String_Node_Str"" + transfer.getTransferId());
      endEventImpl=new TransferEventSuccess();
      endEventImpl.setTransferState(TransferEvent.TransferState.SUCCESS);
      endEventImpl.setMessage(""String_Node_Str"");
      reportName=""String_Node_Str"";
    }
    transferReportEvents.add(endEventImpl);
  }
 catch (  Exception e) {
    failureException=e;
    reportName=""String_Node_Str"";
    logger.warn(""String_Node_Str"",e);
  }
  reportName+=""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  try {
    if (transfer != null) {
      logger.debug(""String_Node_Str"");
      destinationReport=persistDestinationTransferReport(reportName,transfer,target);
      if (destinationReport != null) {
        eventProcessor.writeReport(destinationReport,TransferEventReport.ReportType.DESTINATION,endEventImpl.getTransferState());
      }
    }
    logger.debug(""String_Node_Str"");
    sourceReport=persistTransferReport(reportName,transfer,target,definition,transferReportEvents,manifest,failureException);
    if (sourceReport != null) {
      eventProcessor.writeReport(sourceReport,TransferEventReport.ReportType.SOURCE,endEventImpl.getTransferState());
    }
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    endEventImpl.setLast(true);
    endEventImpl.setSourceReport(sourceReport);
    endEventImpl.setDestinationReport(destinationReport);
    endEvent=endEventImpl;
    eventProcessor.end(endEvent);
  }
 catch (  Exception e) {
    failureException=e;
    logger.warn(""String_Node_Str"",e);
  }
}
  finally {
  clientState=ClientTransferState.Exit;
}
}
}
}
 catch (TransferCancelledException e) {
logger.debug(""String_Node_Str"");
clientState=ClientTransferState.Cancel;
}
catch (Exception e) {
logger.debug(""String_Node_Str"",e);
failureException=e;
if (transfer != null && (clientState == ClientTransferState.Begin || clientState == ClientTransferState.Prepare)) {
clientState=ClientTransferState.Cancel;
}
 else {
clientState=ClientTransferState.Finished;
}
}
}
try {
if (endEvent == null) {
TransferEventError error=new TransferEventError();
error.setTransferState(TransferEvent.TransferState.ERROR);
TransferFailureException endException=new TransferFailureException(error);
error.setMessage(endException.getMessage());
error.setException(endException);
error.setSourceReport(sourceReport);
error.setDestinationReport(destinationReport);
error.setLast(true);
endEvent=error;
}
if (endEvent instanceof TransferEventError) {
TransferEventError endError=(TransferEventError)endEvent;
throw new TransferFailureException(endError);
}
return endEvent;
}
  finally {
if (transfer != null) {
transferMonitoring.remove(transfer.getTransferId());
}
if (manifest != null) {
manifest.delete();
logger.debug(""String_Node_Str"");
}
if (requisite != null) {
requisite.delete();
logger.debug(""String_Node_Str"");
}
}
}",0.958830694275274
172182,"/** 
 */
public TransferProgress getStatus(Transfer transfer) throws TransferException {
  TransferTarget target=transfer.getTransferTarget();
  HttpMethod statusRequest=getPostMethod();
  try {
    HostConfiguration hostConfig=getHostConfig(target);
    HttpState httpState=getHttpState(target);
    statusRequest.setPath(target.getEndpointPath() + ""String_Node_Str"");
    statusRequest.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",transfer.getTransferId())});
    try {
      int responseStatus=httpClient.executeMethod(hostConfig,statusRequest,httpState);
      checkResponseStatus(""String_Node_Str"",responseStatus,statusRequest);
      String statusPayload=statusRequest.getResponseBodyAsString();
      JSONObject statusObj=new JSONObject(statusPayload);
      int currentPosition=statusObj.getInt(""String_Node_Str"");
      int endPosition=statusObj.getInt(""String_Node_Str"");
      String statusStr=statusObj.getString(""String_Node_Str"");
      JSONObject errorJSON=statusObj.getJSONObject(""String_Node_Str"");
      Throwable throwable=rehydrateError(errorJSON);
      TransferProgress p=new TransferProgress();
      p.setStatus(TransferProgress.Status.valueOf(statusStr));
      p.setCurrentPosition(currentPosition);
      p.setEndPosition(endPosition);
      p.setError(throwable);
      return p;
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      String error=""String_Node_Str"";
      log.debug(error,e);
      throw new TransferException(MSG_HTTP_REQUEST_FAILED,new Object[]{""String_Node_Str"",target.toString(),e.toString()},e);
    }
  }
  finally {
    statusRequest.releaseConnection();
  }
}","/** 
 */
public TransferProgress getStatus(Transfer transfer) throws TransferException {
  TransferTarget target=transfer.getTransferTarget();
  HttpMethod statusRequest=getPostMethod();
  try {
    HostConfiguration hostConfig=getHostConfig(target);
    HttpState httpState=getHttpState(target);
    statusRequest.setPath(target.getEndpointPath() + ""String_Node_Str"");
    statusRequest.setQueryString(new NameValuePair[]{new NameValuePair(""String_Node_Str"",transfer.getTransferId())});
    try {
      int responseStatus=httpClient.executeMethod(hostConfig,statusRequest,httpState);
      checkResponseStatus(""String_Node_Str"",responseStatus,statusRequest);
      String statusPayload=statusRequest.getResponseBodyAsString();
      JSONObject statusObj=new JSONObject(statusPayload);
      int currentPosition=statusObj.getInt(""String_Node_Str"");
      int endPosition=statusObj.getInt(""String_Node_Str"");
      String statusStr=statusObj.getString(""String_Node_Str"");
      TransferProgress p=new TransferProgress();
      if (statusObj.has(""String_Node_Str"")) {
        JSONObject errorJSON=statusObj.getJSONObject(""String_Node_Str"");
        Throwable throwable=rehydrateError(errorJSON);
        p.setError(throwable);
      }
      p.setStatus(TransferProgress.Status.valueOf(statusStr));
      p.setCurrentPosition(currentPosition);
      p.setEndPosition(endPosition);
      return p;
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      String error=""String_Node_Str"";
      log.debug(error,e);
      throw new TransferException(MSG_HTTP_REQUEST_FAILED,new Object[]{""String_Node_Str"",target.toString(),e.toString()},e);
    }
  }
  finally {
    statusRequest.releaseConnection();
  }
}",0.8698710433763188
172183,"/** 
 * Does differencing to add and/or remove properties.  Internally, the existing properties will be retrieved and a difference performed to work out which properties need to be created, updated or deleted.  It is only necessary to pass in old and new values for <i>changes</i> i.e. when setting a single property, it is only necessary to pass that property's value in the <b>old</b> and </b>new</b> maps; this improves execution speed significantly - although it has no effect on the number of resulting DB operations. <p/> Note: The cached properties are not updated
 * @param nodeId                the node ID
 * @param newProps              the properties to add or update
 * @param isAddOnly             <tt>true</tt> if the new properties are just an update or<tt>false</tt> if the properties are a complete set
 * @return                      Returns <tt>true</tt> if any properties were changed
 */
private boolean setNodePropertiesImpl(Long nodeId,Map<QName,Serializable> newProps,boolean isAddOnly){
  if (isAddOnly && newProps.size() == 0) {
    return false;
  }
  Node node=getNodeNotNull(nodeId);
  newProps=new HashMap<QName,Serializable>(newProps);
  AuditablePropertiesEntity auditableProps=null;
  if (!policyBehaviourFilter.isEnabled(node.getNodeRef(),ContentModel.ASPECT_AUDITABLE)) {
    auditableProps=node.getAuditableProperties();
    if (auditableProps == null) {
      auditableProps=new AuditablePropertiesEntity();
    }
    boolean containedAuditProperties=auditableProps.setAuditValues(null,null,newProps);
    if (!containedAuditProperties) {
      auditableProps=null;
    }
  }
  newProps.keySet().removeAll(AuditablePropertiesEntity.getAuditablePropertyQNames());
  ReferenceablePropertiesEntity.removeReferenceableProperties(node,newProps);
  Map<QName,Serializable> oldPropsCached=getNodePropertiesCached(nodeId);
  Map<QName,Serializable> oldProps=new HashMap<QName,Serializable>(oldPropsCached);
  if (isAddOnly) {
    oldProps.keySet().retainAll(newProps.keySet());
  }
  Map<NodePropertyKey,NodePropertyValue> oldPropsRaw=nodePropertyHelper.convertToPersistentProperties(oldProps);
  Map<NodePropertyKey,NodePropertyValue> newPropsRaw=nodePropertyHelper.convertToPersistentProperties(newProps);
  Map<NodePropertyKey,NodePropertyValue> propsToDelete=new HashMap<NodePropertyKey,NodePropertyValue>(oldPropsRaw);
  Map<NodePropertyKey,NodePropertyValue> propsToAdd=new HashMap<NodePropertyKey,NodePropertyValue>(newPropsRaw);
  Map<NodePropertyKey,MapValueComparison> persistableDiff=EqualsHelper.getMapComparison(propsToDelete,propsToAdd);
  for (  Map.Entry<NodePropertyKey,MapValueComparison> entry : persistableDiff.entrySet()) {
    NodePropertyKey key=entry.getKey();
    QName qname=qnameDAO.getQName(key.getQnameId()).getSecond();
    PropertyDefinition removePropDef=dictionaryService.getProperty(qname);
    boolean isContent=(removePropDef != null && removePropDef.getDataType().getName().equals(DataTypeDefinition.CONTENT));
switch (entry.getValue()) {
case NULL:
case EQUAL:
      propsToDelete.remove(key);
    propsToAdd.remove(key);
  continue;
case RIGHT_ONLY:
propsToDelete.remove(key);
if (isContent) {
NodePropertyValue newPropValue=propsToAdd.get(key);
ContentData newContentData=(ContentData)newPropValue.getValue(DataTypeDefinition.CONTENT);
if (newContentData != null) {
  Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
  newPropValue=new NodePropertyValue(DataTypeDefinition.CONTENT,new ContentDataId(newContentDataId));
  propsToAdd.put(key,newPropValue);
  newPropsRaw.put(key,new NodePropertyValue(DataTypeDefinition.CONTENT,new ContentDataWithId(newContentData,newContentDataId)));
}
}
continue;
case LEFT_ONLY:
propsToAdd.remove(key);
if (isContent) {
NodePropertyValue valueToDelete=propsToDelete.get(key);
ContentDataWithId contentDataWithId=(ContentDataWithId)valueToDelete.getValue(DataTypeDefinition.CONTENT);
if (contentDataWithId != null) {
Long contentDataId=contentDataWithId.getId();
contentDataDAO.deleteContentData(contentDataId);
}
}
continue;
case NOT_EQUAL:
if (isContent) {
NodePropertyValue valueToDelete=propsToDelete.get(key);
ContentDataWithId contentDataWithId=(ContentDataWithId)valueToDelete.getValue(DataTypeDefinition.CONTENT);
if (contentDataWithId != null) {
Long contentDataId=contentDataWithId.getId();
contentDataDAO.deleteContentData(contentDataId);
}
NodePropertyValue newPropValue=propsToAdd.get(key);
ContentData newContentData=(ContentData)newPropValue.getValue(DataTypeDefinition.CONTENT);
if (newContentData != null) {
Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
newPropValue=new NodePropertyValue(DataTypeDefinition.CONTENT,new ContentDataId(newContentDataId));
propsToAdd.put(key,newPropValue);
newPropsRaw.put(key,new NodePropertyValue(DataTypeDefinition.CONTENT,new ContentDataWithId(newContentData,newContentDataId)));
}
}
continue;
default :
throw new IllegalStateException(""String_Node_Str"" + entry.getValue());
}
}
try {
List<NodePropertyKey> propKeysToDeleteList=new ArrayList<NodePropertyKey>(propsToDelete.keySet());
int deleted=deleteNodeProperties(nodeId,propKeysToDeleteList);
if (deleted != propKeysToDeleteList.size()) {
throw new DataIntegrityViolationException(""String_Node_Str"" + deleted + ""String_Node_Str""+ propKeysToDeleteList.size());
}
insertNodeProperties(nodeId,propsToAdd);
}
 catch (RuntimeException e) {
propertiesCache.removeByKey(nodeId);
throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ oldProps+ ""String_Node_Str""+ ""String_Node_Str""+ newProps+ ""String_Node_Str""+ ""String_Node_Str""+ oldPropsRaw+ ""String_Node_Str""+ ""String_Node_Str""+ newPropsRaw+ ""String_Node_Str""+ ""String_Node_Str""+ persistableDiff+ ""String_Node_Str""+ ""String_Node_Str""+ propsToDelete.keySet()+ ""String_Node_Str""+ ""String_Node_Str""+ propsToAdd,e);
}
boolean updated=propsToDelete.size() > 0 || propsToAdd.size() > 0;
if (updated) {
newProps=nodePropertyHelper.convertToPublicProperties(newPropsRaw);
Map<QName,Serializable> propsToCache=null;
if (isAddOnly) {
propsToCache=oldPropsCached;
propsToCache.putAll(newProps);
}
 else {
propsToCache=newProps;
}
setNodePropertiesCached(nodeId,propsToCache);
}
if (updated || auditableProps != null) {
touchNodeImpl(nodeId,auditableProps);
}
if (isDebugEnabled && updated) {
logger.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ propsToDelete+ ""String_Node_Str""+ ""String_Node_Str""+ propsToAdd);
}
return updated;
}","/** 
 * Does differencing to add and/or remove properties.  Internally, the existing properties will be retrieved and a difference performed to work out which properties need to be created, updated or deleted.  It is only necessary to pass in old and new values for <i>changes</i> i.e. when setting a single property, it is only necessary to pass that property's value in the <b>old</b> and </b>new</b> maps; this improves execution speed significantly - although it has no effect on the number of resulting DB operations. <p/> Note: The cached properties are not updated
 * @param nodeId                the node ID
 * @param newProps              the properties to add or update
 * @param isAddOnly             <tt>true</tt> if the new properties are just an update or<tt>false</tt> if the properties are a complete set
 * @return                      Returns <tt>true</tt> if any properties were changed
 */
private boolean setNodePropertiesImpl(Long nodeId,Map<QName,Serializable> newProps,boolean isAddOnly){
  if (isAddOnly && newProps.size() == 0) {
    return false;
  }
  Node node=getNodeNotNull(nodeId);
  newProps=new HashMap<QName,Serializable>(newProps);
  AuditablePropertiesEntity auditableProps=null;
  if (!policyBehaviourFilter.isEnabled(node.getNodeRef(),ContentModel.ASPECT_AUDITABLE)) {
    auditableProps=node.getAuditableProperties();
    if (auditableProps == null) {
      auditableProps=new AuditablePropertiesEntity();
    }
    boolean containedAuditProperties=auditableProps.setAuditValues(null,null,newProps);
    if (!containedAuditProperties) {
      auditableProps=null;
    }
  }
  newProps.keySet().removeAll(AuditablePropertiesEntity.getAuditablePropertyQNames());
  ReferenceablePropertiesEntity.removeReferenceableProperties(node,newProps);
  Map<QName,Serializable> oldPropsCached=getNodePropertiesCached(nodeId);
  Map<QName,Serializable> oldProps=new HashMap<QName,Serializable>(oldPropsCached);
  if (isAddOnly) {
    oldProps.keySet().retainAll(newProps.keySet());
  }
  Map<NodePropertyKey,NodePropertyValue> newPropsRaw=nodePropertyHelper.convertToPersistentProperties(newProps);
  newProps=nodePropertyHelper.convertToPublicProperties(newPropsRaw);
  Map<QName,MapValueComparison> diff=EqualsHelper.getMapComparison(oldProps,newProps);
  Set<QName> propsToDelete=new HashSet<QName>(oldProps.size() * 2);
  Map<QName,Serializable> propsToAdd=new HashMap<QName,Serializable>(newProps.size() * 2);
  Set<QName> contentQNamesToDelete=new HashSet<QName>(5);
  for (  Map.Entry<QName,MapValueComparison> entry : diff.entrySet()) {
    QName qname=entry.getKey();
    PropertyDefinition removePropDef=dictionaryService.getProperty(qname);
    boolean isContent=(removePropDef != null && removePropDef.getDataType().getName().equals(DataTypeDefinition.CONTENT));
switch (entry.getValue()) {
case EQUAL:
      break;
case LEFT_ONLY:
    propsToDelete.add(qname);
  if (isContent) {
    contentQNamesToDelete.add(qname);
  }
break;
case NOT_EQUAL:
propsToDelete.add(qname);
if (isContent) {
contentQNamesToDelete.add(qname);
}
case RIGHT_ONLY:
Serializable value=newProps.get(qname);
if (isContent && value != null) {
ContentData newContentData=(ContentData)value;
Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
value=new ContentDataWithId(newContentData,newContentDataId);
}
propsToAdd.put(qname,value);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + entry.getValue());
}
}
boolean updated=propsToDelete.size() > 0 || propsToAdd.size() > 0;
if (updated) {
try {
if (contentQNamesToDelete.size() > 0) {
Set<Long> contentQNameIdsToDelete=qnameDAO.convertQNamesToIds(contentQNamesToDelete,false);
contentDataDAO.deleteContentDataForNode(nodeId,contentQNameIdsToDelete);
}
}
 catch (Throwable e) {
throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ contentQNamesToDelete,e);
}
try {
Set<Long> propQNameIdsToDelete=qnameDAO.convertQNamesToIds(propsToDelete,true);
deleteNodeProperties(nodeId,propQNameIdsToDelete);
newPropsRaw=nodePropertyHelper.convertToPersistentProperties(propsToAdd);
insertNodeProperties(nodeId,newPropsRaw);
}
 catch (Throwable e) {
propertiesCache.removeByKey(nodeId);
throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ oldProps+ ""String_Node_Str""+ ""String_Node_Str""+ newProps+ ""String_Node_Str""+ ""String_Node_Str""+ diff+ ""String_Node_Str""+ ""String_Node_Str""+ propsToDelete+ ""String_Node_Str""+ ""String_Node_Str""+ propsToAdd,e);
}
Map<QName,Serializable> propsToCache=null;
if (isAddOnly) {
propsToCache=oldPropsCached;
propsToCache.putAll(propsToAdd);
}
 else {
propsToCache=newProps;
propsToCache.putAll(propsToAdd);
}
setNodePropertiesCached(nodeId,propsToCache);
}
if (updated || auditableProps != null) {
touchNodeImpl(nodeId,auditableProps);
}
if (isDebugEnabled && updated) {
logger.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ propsToDelete+ ""String_Node_Str""+ ""String_Node_Str""+ propsToAdd);
}
return updated;
}",0.6014430510221611
172184,"/** 
 * At this level, the properties have the same qname and list index. They can only be separated by locale. Typically, MLText will fall into this category as only. <p> If there are multiple values then they can only be separated by locale. If they are separated by locale, then they have to be text-based. This means that the only way to store them is via MLText. Any other multi-locale properties cannot be deserialized.
 */
private Serializable collapsePropertiesWithSameQNameAndListIndex(PropertyDefinition propertyDef,Map<NodePropertyKey,NodePropertyValue> propertyValues){
  int propertyValuesSize=propertyValues.size();
  Serializable value=null;
  if (propertyValuesSize == 0) {
    return value;
  }
  boolean isMLText=(propertyDef != null && propertyDef.getDataType().getName().equals(DataTypeDefinition.MLTEXT));
  Pair<Long,Locale> defaultLocalePair=localeDAO.getDefaultLocalePair();
  Long defaultLocaleId=(defaultLocalePair == null) ? null : defaultLocalePair.getFirst();
  Integer listIndex=null;
  for (  Map.Entry<NodePropertyKey,NodePropertyValue> entry : propertyValues.entrySet()) {
    NodePropertyKey propertyKey=entry.getKey();
    NodePropertyValue propertyValue=entry.getValue();
    if (listIndex == null) {
      listIndex=propertyKey.getListIndex();
    }
 else     if (!listIndex.equals(propertyKey.getListIndex())) {
      throw new IllegalStateException(""String_Node_Str"" + propertyValues);
    }
    Long localeId=propertyKey.getLocaleId();
    boolean isDefaultLocale=EqualsHelper.nullSafeEquals(defaultLocaleId,localeId);
    Serializable entryValue=makeSerializableValue(propertyDef,propertyValue);
    if (isDefaultLocale) {
      if (propertyValuesSize > 1) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + defaultLocaleId + ""String_Node_Str""+ ""String_Node_Str""+ propertyDef+ ""String_Node_Str""+ ""String_Node_Str""+ propertyValues);
      }
      value=entryValue;
      break;
    }
 else {
      Locale locale=localeDAO.getLocalePair(localeId).getSecond();
      if (value == null) {
        value=new MLText();
      }
      if (entryValue == null || entryValue instanceof String) {
        ((MLText)value).put(locale,(String)entryValue);
      }
 else {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + defaultLocaleId + ""String_Node_Str""+ ""String_Node_Str""+ propertyDef+ ""String_Node_Str""+ ""String_Node_Str""+ propertyValues);
      }
    }
  }
  return value;
}","/** 
 * At this level, the properties have the same qname and list index. They can only be separated by locale. Typically, MLText will fall into this category as only. <p> If there are multiple values then they can only be separated by locale. If they are separated by locale, then they have to be text-based. This means that the only way to store them is via MLText. Any other multi-locale properties cannot be deserialized.
 */
private Serializable collapsePropertiesWithSameQNameAndListIndex(PropertyDefinition propertyDef,Map<NodePropertyKey,NodePropertyValue> propertyValues){
  int propertyValuesSize=propertyValues.size();
  Serializable value=null;
  if (propertyValuesSize == 0) {
    return value;
  }
  boolean isMLText=(propertyDef != null && propertyDef.getDataType().getName().equals(DataTypeDefinition.MLTEXT));
  Pair<Long,Locale> defaultLocalePair=localeDAO.getDefaultLocalePair();
  Long defaultLocaleId=(defaultLocalePair == null) ? null : defaultLocalePair.getFirst();
  Integer listIndex=null;
  for (  Map.Entry<NodePropertyKey,NodePropertyValue> entry : propertyValues.entrySet()) {
    NodePropertyKey propertyKey=entry.getKey();
    NodePropertyValue propertyValue=entry.getValue();
    if (listIndex == null) {
      listIndex=propertyKey.getListIndex();
    }
 else     if (!listIndex.equals(propertyKey.getListIndex())) {
      throw new IllegalStateException(""String_Node_Str"" + propertyValues);
    }
    Long localeId=propertyKey.getLocaleId();
    boolean isDefaultLocale=EqualsHelper.nullSafeEquals(defaultLocaleId,localeId);
    Serializable entryValue=makeSerializableValue(propertyDef,propertyValue);
    if (isDefaultLocale && !isMLText) {
      if (propertyValuesSize > 1) {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + defaultLocaleId + ""String_Node_Str""+ ""String_Node_Str""+ propertyDef+ ""String_Node_Str""+ ""String_Node_Str""+ propertyValues);
      }
      value=entryValue;
      break;
    }
 else {
      Locale locale=localeDAO.getLocalePair(localeId).getSecond();
      if (value == null) {
        value=new MLText();
      }
      if (entryValue == null || entryValue instanceof String) {
        ((MLText)value).put(locale,(String)entryValue);
      }
 else {
        logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + defaultLocaleId + ""String_Node_Str""+ ""String_Node_Str""+ propertyDef+ ""String_Node_Str""+ ""String_Node_Str""+ propertyValues);
      }
    }
  }
  return value;
}",0.997373206708426
172185,"/** 
 * Checks that large collections can be persisted
 */
@SuppressWarnings(""String_Node_Str"") public void testBigCollections() throws Exception {
  NodeRef nodeRef=nodeService.createNode(rootNodeRef,ASSOC_TYPE_QNAME_TEST_CHILDREN,QName.createQName(""String_Node_Str""),TYPE_QNAME_TEST_MANY_PROPERTIES).getChildRef();
  for (int inc=0; inc < 3; inc++) {
    System.out.println(""String_Node_Str"");
    int collectionSize=(int)Math.pow(10,inc);
    List<String> largeCollection=new ArrayList<String>(collectionSize);
    for (int i=0; i < collectionSize; i++) {
      largeCollection.add(String.format(""String_Node_Str"",i));
    }
    List<String> emptyCollection=Collections.emptyList();
    long t1=System.nanoTime();
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)largeCollection);
    double tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + collectionSize + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    t1=System.nanoTime();
    List<String> checkLargeCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + collectionSize + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    assertEquals(""String_Node_Str"",largeCollection,checkLargeCollection);
    t1=System.nanoTime();
    checkLargeCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + collectionSize + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    largeCollection.add(""String_Node_Str"");
    t1=System.nanoTime();
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)largeCollection);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + largeCollection.size() + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    largeCollection.add(""String_Node_Str"");
    t1=System.nanoTime();
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)largeCollection);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + largeCollection.size() + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)emptyCollection);
    List<String> checkEmptyCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    assertEquals(""String_Node_Str"",emptyCollection,checkEmptyCollection);
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,null);
    List<String> checkNullCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    assertNull(""String_Node_Str"",checkNullCollection);
  }
}","/** 
 * Checks that large collections can be persisted
 */
@SuppressWarnings(""String_Node_Str"") public void testBigCollections() throws Exception {
  NodeRef nodeRef=nodeService.createNode(rootNodeRef,ASSOC_TYPE_QNAME_TEST_CHILDREN,QName.createQName(""String_Node_Str""),TYPE_QNAME_TEST_MANY_PROPERTIES).getChildRef();
  for (int inc=0; inc < 5; inc++) {
    System.out.println(""String_Node_Str"");
    int collectionSize=(int)Math.pow(10,inc);
    List<String> largeCollection=new ArrayList<String>(collectionSize);
    for (int i=0; i < collectionSize; i++) {
      largeCollection.add(String.format(""String_Node_Str"",i));
    }
    List<String> emptyCollection=Collections.emptyList();
    long t1=System.nanoTime();
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)largeCollection);
    double tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + collectionSize + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    t1=System.nanoTime();
    List<String> checkLargeCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + collectionSize + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    assertEquals(""String_Node_Str"",largeCollection,checkLargeCollection);
    t1=System.nanoTime();
    checkLargeCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + collectionSize + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    largeCollection.add(""String_Node_Str"");
    t1=System.nanoTime();
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)largeCollection);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + largeCollection.size() + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    largeCollection.add(""String_Node_Str"");
    t1=System.nanoTime();
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)largeCollection);
    tDelta=(double)(System.nanoTime() - t1) / 1E6;
    System.out.println(""String_Node_Str"" + largeCollection.size() + ""String_Node_Str""+ tDelta+ ""String_Node_Str"");
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,(Serializable)emptyCollection);
    List<String> checkEmptyCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    assertEquals(""String_Node_Str"",emptyCollection,checkEmptyCollection);
    nodeService.setProperty(nodeRef,PROP_QNAME_MULTI_VALUE,null);
    List<String> checkNullCollection=(List<String>)nodeService.getProperty(nodeRef,PROP_QNAME_MULTI_VALUE);
    assertNull(""String_Node_Str"",checkNullCollection);
  }
}",0.9996405463695184
172186,"@Override public WorkflowTask persist(){
  if (transitionId == null) {
    return updater.update();
  }
 else   if (transitionId.length() == 0) {
    return updater.transition();
  }
  return updater.transition(transitionId);
}","@Override public WorkflowTask persist(){
  if (transitionId == null) {
    return updater.update();
  }
 else {
    updater.update();
    if (transitionId.length() == 0) {
      return updater.transition();
    }
 else {
      return updater.transition(transitionId);
    }
  }
}",0.7628458498023716
172187,"/** 
 * The itemId may be in a URL/Webscript-friendly format. If so it must be converted back to the proper workflow definition name.
 * @param itemId
 */
private String decodeWorkflowDefinitionName(String itemId){
  String defName=itemId;
  if (itemId.contains(""String_Node_Str"") == false) {
    defName=itemId.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  if (itemId.contains(""String_Node_Str"") == false) {
    defName=defName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  return defName;
}","/** 
 * The itemId may be in a URL/Webscript-friendly format. If so it must be converted back to the proper workflow definition name.
 * @param itemId
 */
private String decodeWorkflowDefinitionName(String itemId){
  String defName=itemId;
  if (itemId.contains(""String_Node_Str"") == false) {
    defName=itemId.replaceFirst(""String_Node_Str"",Matcher.quoteReplacement(""String_Node_Str""));
  }
  if (itemId.contains(""String_Node_Str"") == false) {
    defName=defName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  return defName;
}",0.9430740037950665
172188,"private Rating removeRating(NodeRef targetNode,String ratingSchemeName,String user){
  List<ChildAssociationRef> ratingChildren=getRatingNodeChildren(targetNode,user);
  if (ratingChildren.isEmpty()) {
    return null;
  }
  ChildAssociationRef lastChild=ratingChildren.get(ratingChildren.size() - 1);
  Map<QName,Serializable> properties=nodeService.getProperties(lastChild.getChildRef());
  RatingNodeProperties ratingProps=RatingNodeProperties.createFrom(properties);
  int index=ratingProps.getIndexOfRating(ratingSchemeName);
  if (index == -1) {
    return null;
  }
 else {
    RatingStruct removed=ratingProps.removeRatingAt(index);
    return new Rating(this.getRatingScheme(removed.getScheme()),removed.getScore(),user,removed.getDate());
  }
}","private Rating removeRating(NodeRef targetNode,String ratingSchemeName,String user){
  List<ChildAssociationRef> ratingChildren=getRatingNodeChildren(targetNode,user);
  if (ratingChildren.isEmpty()) {
    return null;
  }
  ChildAssociationRef lastChild=ratingChildren.get(ratingChildren.size() - 1);
  Map<QName,Serializable> properties=nodeService.getProperties(lastChild.getChildRef());
  RatingNodeProperties ratingProps=RatingNodeProperties.createFrom(properties);
  int index=ratingProps.getIndexOfRating(ratingSchemeName);
  if (index == -1) {
    return null;
  }
 else {
    RatingStruct removed=ratingProps.removeRatingAt(index);
    Map<QName,Serializable> props=ratingProps.toNodeProperties();
    nodeService.setProperties(lastChild.getChildRef(),props);
    return new Rating(this.getRatingScheme(removed.getScheme()),removed.getScore(),user,removed.getDate());
  }
}",0.921760391198044
172189,"public void testApplyUpdateDeleteRatings_SingleUserMultipleSchemes() throws Exception {
  AuthenticationUtil.setFullyAuthenticatedUser(USER_TWO);
  Rating nullRating=ratingService.getRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME);
  assertNull(""String_Node_Str"",nullRating);
  assertNull(""String_Node_Str"",ratingService.removeRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME));
  final float likesScore=1;
  final float fiveStarScore=5;
  ratingService.applyRating(testDoc_Admin,likesScore,LIKES_SCHEME_NAME);
  ratingService.applyRating(testDoc_Admin,fiveStarScore,FIVE_STAR_SCHEME_NAME);
  assertTrue(ContentModel.ASPECT_RATEABLE + ""String_Node_Str"",nodeService.hasAspect(testDoc_Admin,ContentModel.ASPECT_RATEABLE));
  List<ChildAssociationRef> allChildren=nodeService.getChildAssocs(testDoc_Admin,ContentModel.ASSOC_RATINGS,RegexQNamePattern.MATCH_ALL);
  assertEquals(""String_Node_Str"",1,allChildren.size());
  assertEquals(""String_Node_Str"",ContentModel.ASSOC_RATINGS,allChildren.get(0).getTypeQName());
  QName expectedAssocName=QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,AuthenticationUtil.getFullyAuthenticatedUser());
  assertEquals(""String_Node_Str"",expectedAssocName,allChildren.get(0).getQName());
  Rating likeRating=ratingService.getRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME);
  Rating fiveStarRating=ratingService.getRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",likeRating);
  assertEquals(""String_Node_Str"",likesScore,likeRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),likeRating.getAppliedBy());
  final Date likeRatingAppliedAt=likeRating.getAppliedAt();
  assertDateIsCloseToNow(likeRatingAppliedAt);
  assertNotNull(""String_Node_Str"",fiveStarRating);
  assertEquals(""String_Node_Str"",fiveStarScore,fiveStarRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),fiveStarRating.getAppliedBy());
  final Date fiveStarRatingAppliedAt=fiveStarRating.getAppliedAt();
  assertDateIsCloseToNow(fiveStarRatingAppliedAt);
  final float updatedFiveStarScore=3;
  ratingService.applyRating(testDoc_Admin,updatedFiveStarScore,FIVE_STAR_SCHEME_NAME);
  allChildren=nodeService.getChildAssocs(testDoc_Admin,ContentModel.ASSOC_RATINGS,RegexQNamePattern.MATCH_ALL);
  assertEquals(""String_Node_Str"",1,allChildren.size());
  assertEquals(""String_Node_Str"",ContentModel.ASSOC_RATINGS,allChildren.get(0).getTypeQName());
  assertEquals(""String_Node_Str"",expectedAssocName,allChildren.get(0).getQName());
  Rating updatedFiveStarRating=ratingService.getRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",likeRating);
  assertEquals(""String_Node_Str"",likesScore,likeRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),likeRating.getAppliedBy());
  assertEquals(""String_Node_Str"",likeRatingAppliedAt,likeRating.getAppliedAt());
  assertNotNull(""String_Node_Str"",updatedFiveStarRating);
  assertEquals(""String_Node_Str"",updatedFiveStarScore,updatedFiveStarRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),updatedFiveStarRating.getAppliedBy());
  assertTrue(""String_Node_Str"",fiveStarRatingAppliedAt.equals(updatedFiveStarRating.getAppliedAt()) == false);
  assertDateIsCloseToNow(updatedFiveStarRating.getAppliedAt());
  Rating deletedLikesRating=ratingService.removeRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",deletedLikesRating);
  assertEquals(""String_Node_Str"",likesScore,deletedLikesRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),deletedLikesRating.getAppliedBy());
  assertEquals(""String_Node_Str"",likeRatingAppliedAt,deletedLikesRating.getAppliedAt());
  Rating deletedStarRating=ratingService.removeRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",deletedStarRating);
  assertEquals(""String_Node_Str"",updatedFiveStarScore,deletedStarRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),deletedStarRating.getAppliedBy());
  assertEquals(""String_Node_Str"",updatedFiveStarRating.getAppliedAt(),deletedStarRating.getAppliedAt());
}","public void testApplyUpdateDeleteRatings_SingleUserMultipleSchemes() throws Exception {
  AuthenticationUtil.setFullyAuthenticatedUser(USER_TWO);
  Rating nullRating=ratingService.getRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME);
  assertNull(""String_Node_Str"",nullRating);
  assertNull(""String_Node_Str"",ratingService.removeRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME));
  final float likesScore=1;
  final float fiveStarScore=5;
  ratingService.applyRating(testDoc_Admin,likesScore,LIKES_SCHEME_NAME);
  ratingService.applyRating(testDoc_Admin,fiveStarScore,FIVE_STAR_SCHEME_NAME);
  assertTrue(ContentModel.ASPECT_RATEABLE + ""String_Node_Str"",nodeService.hasAspect(testDoc_Admin,ContentModel.ASPECT_RATEABLE));
  List<ChildAssociationRef> allChildren=nodeService.getChildAssocs(testDoc_Admin,ContentModel.ASSOC_RATINGS,RegexQNamePattern.MATCH_ALL);
  assertEquals(""String_Node_Str"",1,allChildren.size());
  assertEquals(""String_Node_Str"",ContentModel.ASSOC_RATINGS,allChildren.get(0).getTypeQName());
  QName expectedAssocName=QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,AuthenticationUtil.getFullyAuthenticatedUser());
  assertEquals(""String_Node_Str"",expectedAssocName,allChildren.get(0).getQName());
  Rating likeRating=ratingService.getRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME);
  Rating fiveStarRating=ratingService.getRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",likeRating);
  assertEquals(""String_Node_Str"",likesScore,likeRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),likeRating.getAppliedBy());
  final Date likeRatingAppliedAt=likeRating.getAppliedAt();
  assertDateIsCloseToNow(likeRatingAppliedAt);
  assertNotNull(""String_Node_Str"",fiveStarRating);
  assertEquals(""String_Node_Str"",fiveStarScore,fiveStarRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),fiveStarRating.getAppliedBy());
  final Date fiveStarRatingAppliedAt=fiveStarRating.getAppliedAt();
  assertDateIsCloseToNow(fiveStarRatingAppliedAt);
  final float updatedFiveStarScore=3;
  ratingService.applyRating(testDoc_Admin,updatedFiveStarScore,FIVE_STAR_SCHEME_NAME);
  allChildren=nodeService.getChildAssocs(testDoc_Admin,ContentModel.ASSOC_RATINGS,RegexQNamePattern.MATCH_ALL);
  assertEquals(""String_Node_Str"",1,allChildren.size());
  assertEquals(""String_Node_Str"",ContentModel.ASSOC_RATINGS,allChildren.get(0).getTypeQName());
  assertEquals(""String_Node_Str"",expectedAssocName,allChildren.get(0).getQName());
  Rating updatedFiveStarRating=ratingService.getRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",likeRating);
  assertEquals(""String_Node_Str"",likesScore,likeRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),likeRating.getAppliedBy());
  assertEquals(""String_Node_Str"",likeRatingAppliedAt,likeRating.getAppliedAt());
  assertNotNull(""String_Node_Str"",updatedFiveStarRating);
  assertEquals(""String_Node_Str"",updatedFiveStarScore,updatedFiveStarRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),updatedFiveStarRating.getAppliedBy());
  assertTrue(""String_Node_Str"",fiveStarRatingAppliedAt.equals(updatedFiveStarRating.getAppliedAt()) == false);
  assertDateIsCloseToNow(updatedFiveStarRating.getAppliedAt());
  Rating deletedLikesRating=ratingService.removeRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",deletedLikesRating);
  assertEquals(""String_Node_Str"",likesScore,deletedLikesRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),deletedLikesRating.getAppliedBy());
  assertEquals(""String_Node_Str"",likeRatingAppliedAt,deletedLikesRating.getAppliedAt());
  Rating deletedStarRating=ratingService.removeRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME);
  assertNotNull(""String_Node_Str"",deletedStarRating);
  assertEquals(""String_Node_Str"",updatedFiveStarScore,deletedStarRating.getScore());
  assertEquals(""String_Node_Str"",AuthenticationUtil.getFullyAuthenticatedUser(),deletedStarRating.getAppliedBy());
  assertEquals(""String_Node_Str"",updatedFiveStarRating.getAppliedAt(),deletedStarRating.getAppliedAt());
  assertNull(""String_Node_Str"",ratingService.getRatingByCurrentUser(testDoc_Admin,FIVE_STAR_SCHEME_NAME));
  assertNull(""String_Node_Str"",ratingService.getRatingByCurrentUser(testDoc_Admin,LIKES_SCHEME_NAME));
}",0.9763619990995048
172190,"/** 
 * Does differencing to add and/or remove properties.  Internally, the existing properties will be retrieved and a difference performed to work out which properties need to be created, updated or deleted.  It is only necessary to pass in old and new values for <i>changes</i> i.e. when setting a single property, it is only necessary to pass that property's value in the <b>old</b> and </b>new</b> maps; this improves execution speed significantly - although it has no effect on the number of resulting DB operations. <p/> Note: The cached properties are not updated
 * @param nodeId                the node ID
 * @param newProps              the properties to add or update
 * @param isAddOnly             <tt>true</tt> if the new properties are just an update or<tt>false</tt> if the properties are a complete set
 * @return                      Returns <tt>true</tt> if any properties were changed
 */
private boolean setNodePropertiesImpl(Long nodeId,Map<QName,Serializable> newProps,boolean isAddOnly){
  Node node=getNodeNotNull(nodeId);
  newProps=new HashMap<QName,Serializable>(newProps);
  newProps.keySet().removeAll(AuditablePropertiesEntity.getAuditablePropertyQNames());
  ReferenceablePropertiesEntity.removeReferenceableProperties(node,newProps);
  Map<NodePropertyKey,NodePropertyValue> oldPropsRaw=selectNodeProperties(nodeId);
  Set<Long> qnameIdsOfInterest=qnameDAO.convertQNamesToIds(newProps.keySet(),true);
  Map<NodePropertyKey,NodePropertyValue> newPropsRaw=nodePropertyHelper.convertToPersistentProperties(newProps);
  Map<NodePropertyKey,NodePropertyValue> propsToDelete=new HashMap<NodePropertyKey,NodePropertyValue>(oldPropsRaw);
  Map<NodePropertyKey,NodePropertyValue> propsToAdd=new HashMap<NodePropertyKey,NodePropertyValue>(newPropsRaw);
  Map<NodePropertyKey,MapValueComparison> persistableDiff=EqualsHelper.getMapComparison(propsToDelete,propsToAdd);
  for (  Map.Entry<NodePropertyKey,MapValueComparison> entry : persistableDiff.entrySet()) {
    NodePropertyKey key=entry.getKey();
    QName qname=qnameDAO.getQName(key.getQnameId()).getSecond();
    PropertyDefinition removePropDef=dictionaryService.getProperty(qname);
    boolean isContent=(removePropDef != null && removePropDef.getDataType().getName().equals(DataTypeDefinition.CONTENT));
switch (entry.getValue()) {
case NULL:
case EQUAL:
      propsToDelete.remove(key);
    propsToAdd.remove(key);
  continue;
case RIGHT_ONLY:
propsToDelete.remove(key);
if (isContent) {
NodePropertyValue newPropValue=propsToAdd.get(key);
ContentData newContentData=(ContentData)newPropValue.getValue(DataTypeDefinition.CONTENT);
if (newContentData != null) {
  Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
  newPropValue=new NodePropertyValue(DataTypeDefinition.CONTENT,newContentDataId);
  propsToAdd.put(key,newPropValue);
}
}
continue;
case LEFT_ONLY:
propsToAdd.remove(key);
if (isAddOnly && !qnameIdsOfInterest.contains(key.getQnameId())) {
propsToDelete.remove(key);
continue;
}
if (isContent) {
NodePropertyValue valueToDelete=propsToDelete.get(key);
Long contentDataId=(Long)valueToDelete.getValue(DataTypeDefinition.CONTENT);
if (contentDataId != null) {
contentDataDAO.deleteContentData(contentDataId);
}
}
continue;
case NOT_EQUAL:
if (isContent) {
NodePropertyValue valueToDelete=propsToDelete.get(key);
Long contentDataIdToDelete=(Long)valueToDelete.getValue(DataTypeDefinition.CONTENT);
ContentData contentDataToDelete=(contentDataIdToDelete == null) ? null : contentDataDAO.getContentData(contentDataIdToDelete).getSecond();
NodePropertyValue newPropValue=propsToAdd.get(key);
ContentData newContentData=(ContentData)newPropValue.getValue(DataTypeDefinition.CONTENT);
if (EqualsHelper.nullSafeEquals(contentDataToDelete,newContentData)) {
propsToDelete.remove(key);
propsToAdd.remove(key);
}
 else {
if (contentDataIdToDelete != null) {
contentDataDAO.deleteContentData(contentDataIdToDelete);
}
if (newContentData != null) {
Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
newPropValue=new NodePropertyValue(DataTypeDefinition.CONTENT,newContentDataId);
propsToAdd.put(key,newPropValue);
}
}
}
continue;
default :
throw new IllegalStateException(""String_Node_Str"" + entry.getValue());
}
}
if (propsToDelete.isEmpty() && propsToAdd.isEmpty()) {
return false;
}
List<NodePropertyKey> propKeysToDeleteList=new ArrayList<NodePropertyKey>(propsToDelete.keySet());
deleteNodeProperties(nodeId,propKeysToDeleteList);
try {
insertNodeProperties(nodeId,propsToAdd);
}
 catch (RuntimeException e) {
propertiesCache.removeByKey(nodeId);
throw e;
}
boolean updated=propsToDelete.size() > 0 || propsToAdd.size() > 0;
if (updated) {
newProps=nodePropertyHelper.convertToPublicProperties(newPropsRaw);
Map<QName,Serializable> propsToCache=null;
if (isAddOnly) {
propsToCache=nodePropertyHelper.convertToPublicProperties(oldPropsRaw);
propsToCache.putAll(newProps);
}
 else {
propsToCache=newProps;
}
setNodePropertiesCached(nodeId,propsToCache);
touchNodeImpl(nodeId);
}
if (isDebugEnabled && updated) {
logger.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ propsToDelete+ ""String_Node_Str""+ ""String_Node_Str""+ propsToAdd);
}
return updated;
}","/** 
 * Does differencing to add and/or remove properties.  Internally, the existing properties will be retrieved and a difference performed to work out which properties need to be created, updated or deleted.  It is only necessary to pass in old and new values for <i>changes</i> i.e. when setting a single property, it is only necessary to pass that property's value in the <b>old</b> and </b>new</b> maps; this improves execution speed significantly - although it has no effect on the number of resulting DB operations. <p/> Note: The cached properties are not updated
 * @param nodeId                the node ID
 * @param newProps              the properties to add or update
 * @param isAddOnly             <tt>true</tt> if the new properties are just an update or<tt>false</tt> if the properties are a complete set
 * @return                      Returns <tt>true</tt> if any properties were changed
 */
private boolean setNodePropertiesImpl(Long nodeId,Map<QName,Serializable> newProps,boolean isAddOnly){
  if (isAddOnly && newProps.size() == 0) {
    return false;
  }
  Node node=getNodeNotNull(nodeId);
  newProps=new HashMap<QName,Serializable>(newProps);
  newProps.keySet().removeAll(AuditablePropertiesEntity.getAuditablePropertyQNames());
  ReferenceablePropertiesEntity.removeReferenceableProperties(node,newProps);
  Map<NodePropertyKey,NodePropertyValue> oldPropsRaw=selectNodeProperties(nodeId);
  Set<Long> qnameIdsOfInterest=qnameDAO.convertQNamesToIds(newProps.keySet(),true);
  Map<NodePropertyKey,NodePropertyValue> newPropsRaw=nodePropertyHelper.convertToPersistentProperties(newProps);
  Map<NodePropertyKey,NodePropertyValue> propsToDelete=new HashMap<NodePropertyKey,NodePropertyValue>(oldPropsRaw);
  Map<NodePropertyKey,NodePropertyValue> propsToAdd=new HashMap<NodePropertyKey,NodePropertyValue>(newPropsRaw);
  Map<NodePropertyKey,MapValueComparison> persistableDiff=EqualsHelper.getMapComparison(propsToDelete,propsToAdd);
  for (  Map.Entry<NodePropertyKey,MapValueComparison> entry : persistableDiff.entrySet()) {
    NodePropertyKey key=entry.getKey();
    QName qname=qnameDAO.getQName(key.getQnameId()).getSecond();
    PropertyDefinition removePropDef=dictionaryService.getProperty(qname);
    boolean isContent=(removePropDef != null && removePropDef.getDataType().getName().equals(DataTypeDefinition.CONTENT));
switch (entry.getValue()) {
case NULL:
case EQUAL:
      propsToDelete.remove(key);
    propsToAdd.remove(key);
  continue;
case RIGHT_ONLY:
propsToDelete.remove(key);
if (isContent) {
NodePropertyValue newPropValue=propsToAdd.get(key);
ContentData newContentData=(ContentData)newPropValue.getValue(DataTypeDefinition.CONTENT);
if (newContentData != null) {
  Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
  newPropValue=new NodePropertyValue(DataTypeDefinition.CONTENT,newContentDataId);
  propsToAdd.put(key,newPropValue);
}
}
continue;
case LEFT_ONLY:
propsToAdd.remove(key);
if (isAddOnly && !qnameIdsOfInterest.contains(key.getQnameId())) {
propsToDelete.remove(key);
continue;
}
if (isContent) {
NodePropertyValue valueToDelete=propsToDelete.get(key);
Long contentDataId=(Long)valueToDelete.getValue(DataTypeDefinition.CONTENT);
if (contentDataId != null) {
contentDataDAO.deleteContentData(contentDataId);
}
}
continue;
case NOT_EQUAL:
if (isContent) {
NodePropertyValue valueToDelete=propsToDelete.get(key);
Long contentDataIdToDelete=(Long)valueToDelete.getValue(DataTypeDefinition.CONTENT);
ContentData contentDataToDelete=(contentDataIdToDelete == null) ? null : contentDataDAO.getContentData(contentDataIdToDelete).getSecond();
NodePropertyValue newPropValue=propsToAdd.get(key);
ContentData newContentData=(ContentData)newPropValue.getValue(DataTypeDefinition.CONTENT);
if (EqualsHelper.nullSafeEquals(contentDataToDelete,newContentData)) {
propsToDelete.remove(key);
propsToAdd.remove(key);
}
 else {
if (contentDataIdToDelete != null) {
contentDataDAO.deleteContentData(contentDataIdToDelete);
}
if (newContentData != null) {
Long newContentDataId=contentDataDAO.createContentData(newContentData).getFirst();
newPropValue=new NodePropertyValue(DataTypeDefinition.CONTENT,newContentDataId);
propsToAdd.put(key,newPropValue);
}
}
}
continue;
default :
throw new IllegalStateException(""String_Node_Str"" + entry.getValue());
}
}
if (propsToDelete.isEmpty() && propsToAdd.isEmpty()) {
return false;
}
List<NodePropertyKey> propKeysToDeleteList=new ArrayList<NodePropertyKey>(propsToDelete.keySet());
deleteNodeProperties(nodeId,propKeysToDeleteList);
try {
insertNodeProperties(nodeId,propsToAdd);
}
 catch (RuntimeException e) {
propertiesCache.removeByKey(nodeId);
throw e;
}
boolean updated=propsToDelete.size() > 0 || propsToAdd.size() > 0;
if (updated) {
newProps=nodePropertyHelper.convertToPublicProperties(newPropsRaw);
Map<QName,Serializable> propsToCache=null;
if (isAddOnly) {
propsToCache=nodePropertyHelper.convertToPublicProperties(oldPropsRaw);
propsToCache.putAll(newProps);
}
 else {
propsToCache=newProps;
}
setNodePropertiesCached(nodeId,propsToCache);
touchNodeImpl(nodeId);
}
if (isDebugEnabled && updated) {
logger.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ ""String_Node_Str""+ propsToDelete+ ""String_Node_Str""+ ""String_Node_Str""+ propsToAdd);
}
return updated;
}",0.9938242280285036
172191,"public boolean addNodeAspects(Long nodeId,Set<QName> aspectQNames){
  Set<QName> aspectQNamesToAdd=new HashSet<QName>(aspectQNames);
  Set<QName> existingAspectQNames=getNodeAspectsCached(nodeId);
  aspectQNamesToAdd.removeAll(existingAspectQNames);
  aspectQNamesToAdd.remove(ContentModel.ASPECT_REFERENCEABLE);
  if (aspectQNamesToAdd.isEmpty()) {
    return false;
  }
  Set<Long> aspectQNameIds=qnameDAO.convertQNamesToIds(aspectQNamesToAdd,true);
  startBatch();
  try {
    for (    Long aspectQNameId : aspectQNameIds) {
      insertNodeAspect(nodeId,aspectQNameId);
    }
  }
 catch (  RuntimeException e) {
    aspectsCache.deleteByKey(nodeId);
    throw e;
  }
 finally {
    executeBatch();
  }
  Set<QName> newAspectQNames=new HashSet<QName>(existingAspectQNames);
  newAspectQNames.addAll(aspectQNamesToAdd);
  setNodeAspectsCached(nodeId,newAspectQNames);
  if (newAspectQNames.contains(ContentModel.ASPECT_ROOT)) {
    invalidateCachesByNodeId(null,nodeId,parentAssocsCache);
  }
  touchNodeImpl(nodeId);
  return true;
}","public boolean addNodeAspects(Long nodeId,Set<QName> aspectQNames){
  if (aspectQNames.size() == 0) {
    return false;
  }
  Set<QName> aspectQNamesToAdd=new HashSet<QName>(aspectQNames);
  Set<QName> existingAspectQNames=getNodeAspectsCached(nodeId);
  aspectQNamesToAdd.removeAll(existingAspectQNames);
  aspectQNamesToAdd.remove(ContentModel.ASPECT_REFERENCEABLE);
  if (aspectQNamesToAdd.isEmpty()) {
    return false;
  }
  Set<Long> aspectQNameIds=qnameDAO.convertQNamesToIds(aspectQNamesToAdd,true);
  startBatch();
  try {
    for (    Long aspectQNameId : aspectQNameIds) {
      insertNodeAspect(nodeId,aspectQNameId);
    }
  }
 catch (  RuntimeException e) {
    aspectsCache.deleteByKey(nodeId);
    throw e;
  }
 finally {
    executeBatch();
  }
  Set<QName> newAspectQNames=new HashSet<QName>(existingAspectQNames);
  newAspectQNames.addAll(aspectQNamesToAdd);
  setNodeAspectsCached(nodeId,newAspectQNames);
  if (newAspectQNames.contains(ContentModel.ASPECT_ROOT)) {
    invalidateCachesByNodeId(null,nodeId,parentAssocsCache);
  }
  touchNodeImpl(nodeId);
  return true;
}",0.9736842105263158
172192,"/** 
 * @param uuid                          the node UUID, or <tt>null</tt> to auto-generate
 * @param aclId                         an ACL ID if available
 * @param auditableProps                <tt>null</tt> to auto-generate or provide a value to explicitly set
 * @param deleted                       <tt>true</tt> to create an already-deleted node (used for leaving trails of moved nodes)
 */
private NodeEntity newNodeImpl(StoreEntity store,String uuid,QName nodeTypeQName,Long aclId,boolean deleted,AuditablePropertiesEntity auditableProps) throws InvalidTypeException {
  NodeEntity node=new NodeEntity();
  node.setStore(store);
  if (uuid == null) {
    node.setUuid(GUID.generate());
  }
 else {
    node.setUuid(uuid);
  }
  Long typeQNameId=qnameDAO.getOrCreateQName(nodeTypeQName).getFirst();
  node.setTypeQNameId(typeQNameId);
  node.setAclId(aclId);
  node.setDeleted(deleted);
  TransactionEntity txn=getCurrentTransaction();
  node.setTransaction(txn);
  Set<QName> nodeAspects=null;
  if (auditableProps != null) {
    node.setAuditableProperties(auditableProps);
    nodeAspects=Collections.singleton(ContentModel.ASPECT_AUDITABLE);
  }
 else   if (AuditablePropertiesEntity.hasAuditableAspect(nodeTypeQName,dictionaryService)) {
    auditableProps=new AuditablePropertiesEntity();
    auditableProps.setAuditValues(null,null,true,0L);
    node.setAuditableProperties(auditableProps);
    nodeAspects=Collections.singleton(ContentModel.ASPECT_AUDITABLE);
  }
 else {
    nodeAspects=Collections.<QName>emptySet();
  }
  Long id=null;
  try {
    id=insertNode(node);
  }
 catch (  Throwable e) {
    NodeRef targetNodeRef=node.getNodeRef();
    NodeEntity deletedNode=selectNodeByNodeRef(targetNodeRef,true);
    if (deletedNode != null) {
      Long deletedNodeId=deletedNode.getId();
      deleteNodeById(deletedNodeId,true);
      id=insertNode(node);
    }
 else {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + node,e);
    }
  }
  node.setId(id);
  node.lock();
  nodesCache.setValue(id,node);
  setNodeAspectsCached(id,nodeAspects);
  setNodePropertiesCached(id,Collections.<QName,Serializable>emptyMap());
  if (isDebugEnabled) {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + node);
  }
  return node;
}","/** 
 * @param uuid                          the node UUID, or <tt>null</tt> to auto-generate
 * @param aclId                         an ACL ID if available
 * @param auditableProps                <tt>null</tt> to auto-generate or provide a value to explicitly set
 * @param deleted                       <tt>true</tt> to create an already-deleted node (used for leaving trails of moved nodes)
 */
private NodeEntity newNodeImpl(StoreEntity store,String uuid,QName nodeTypeQName,Long aclId,boolean deleted,AuditablePropertiesEntity auditableProps) throws InvalidTypeException {
  NodeEntity node=new NodeEntity();
  node.setStore(store);
  if (uuid == null) {
    node.setUuid(GUID.generate());
  }
 else {
    node.setUuid(uuid);
  }
  Long typeQNameId=qnameDAO.getOrCreateQName(nodeTypeQName).getFirst();
  node.setTypeQNameId(typeQNameId);
  node.setAclId(aclId);
  node.setDeleted(deleted);
  TransactionEntity txn=getCurrentTransaction();
  node.setTransaction(txn);
  boolean addAuditableAspect=false;
  if (auditableProps != null) {
    node.setAuditableProperties(auditableProps);
    addAuditableAspect=true;
  }
 else   if (AuditablePropertiesEntity.hasAuditableAspect(nodeTypeQName,dictionaryService)) {
    auditableProps=new AuditablePropertiesEntity();
    auditableProps.setAuditValues(null,null,true,0L);
    node.setAuditableProperties(auditableProps);
    addAuditableAspect=true;
  }
  Long id=null;
  try {
    id=insertNode(node);
  }
 catch (  Throwable e) {
    NodeRef targetNodeRef=node.getNodeRef();
    NodeEntity deletedNode=selectNodeByNodeRef(targetNodeRef,true);
    if (deletedNode != null) {
      Long deletedNodeId=deletedNode.getId();
      deleteNodeById(deletedNodeId,true);
      id=insertNode(node);
    }
 else {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + node,e);
    }
  }
  node.setId(id);
  Set<QName> nodeAspects=null;
  if (addAuditableAspect) {
    Long auditableAspectQNameId=qnameDAO.getOrCreateQName(ContentModel.ASPECT_AUDITABLE).getFirst();
    insertNodeAspect(id,auditableAspectQNameId);
    nodeAspects=Collections.<QName>singleton(ContentModel.ASPECT_AUDITABLE);
  }
 else {
    nodeAspects=Collections.<QName>emptySet();
  }
  node.lock();
  nodesCache.setValue(id,node);
  setNodeAspectsCached(id,nodeAspects);
  setNodePropertiesCached(id,Collections.<QName,Serializable>emptyMap());
  if (isDebugEnabled) {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + node);
  }
  return node;
}",0.5339538819547281
172193,"private RenditionLocationImpl findOrCreateTemplatedPath(NodeRef sourceNode,String path,NodeRef companyHome){
  NodeService nodeService=serviceRegistry.getNodeService();
  List<String> pathElements=Arrays.asList(path.split(""String_Node_Str""));
  LinkedList<String> folderElements=new LinkedList<String>(pathElements);
  if (folderElements.getFirst().length() == 0) {
    folderElements.removeFirst();
  }
  Serializable companyHomeName=nodeService.getProperty(companyHome,ContentModel.PROP_NAME);
  if (folderElements.getFirst().equals(companyHomeName)) {
    folderElements.removeFirst();
  }
  String fileName=folderElements.removeLast();
  if (fileName == null || fileName.length() == 0) {
    throw new RenditionServiceException(""String_Node_Str"" + path);
  }
  FileFolderService fileFolderService=serviceRegistry.getFileFolderService();
  FileInfo parentInfo=FileFolderServiceImpl.makeFolders(fileFolderService,companyHome,folderElements,ContentModel.TYPE_FOLDER);
  NodeRef parent=parentInfo.getNodeRef();
  NodeRef child=fileFolderService.searchSimple(parent,fileName);
  return new RenditionLocationImpl(parent,child,fileName);
}","private RenditionLocationImpl findOrCreateTemplatedPath(NodeRef sourceNode,String path,NodeRef companyHome){
  NodeService nodeService=serviceRegistry.getNodeService();
  List<String> pathElements=Arrays.asList(path.split(""String_Node_Str""));
  LinkedList<String> folderElements=new LinkedList<String>(pathElements);
  if (folderElements.getFirst().length() == 0) {
    folderElements.removeFirst();
  }
  Serializable companyHomeName=nodeService.getProperty(companyHome,ContentModel.PROP_NAME);
  if (folderElements.getFirst().equals(companyHomeName)) {
    folderElements.removeFirst();
  }
  String fileName=folderElements.removeLast();
  if (fileName == null || fileName.length() == 0) {
    throw new RenditionServiceException(""String_Node_Str"" + path);
  }
  FileFolderService fileFolderService=serviceRegistry.getFileFolderService();
  NodeRef parent=companyHome;
  if (!folderElements.isEmpty()) {
    FileInfo parentInfo=FileFolderServiceImpl.makeFolders(fileFolderService,companyHome,folderElements,ContentModel.TYPE_FOLDER);
    parent=parentInfo.getNodeRef();
  }
  NodeRef child=fileFolderService.searchSimple(parent,fileName);
  return new RenditionLocationImpl(parent,child,fileName);
}",0.8532306375695335
172194,"private String renderPathTemplate(String pathTemplate,NodeRef sourceNode,NodeRef tempRenditionLocation,NodeRef companyHome){
  NodeService nodeService=serviceRegistry.getNodeService();
  FileFolderService fileFolderService=serviceRegistry.getFileFolderService();
  final Map<String,Object> root=new HashMap<String,Object>();
  List<FileInfo> sourcePathInfo;
  String fullSourceName;
  String cwd;
  try {
    sourcePathInfo=fileFolderService.getNamePath(companyHome,sourceNode);
    FileInfo sourceFileInfo=sourcePathInfo.remove(sourcePathInfo.size() - 1);
    fullSourceName=sourceFileInfo.getName();
    StringBuilder cwdBuilder=new StringBuilder(""String_Node_Str"");
    for (    FileInfo file : sourcePathInfo) {
      cwdBuilder.append(file.getName());
      cwdBuilder.append('/');
    }
    cwd=cwdBuilder.toString();
  }
 catch (  FileNotFoundException e) {
    log.warn(""String_Node_Str"" + sourceNode + ""String_Node_Str"");
    fullSourceName=nodeService.getPrimaryParent(sourceNode).getQName().getLocalName();
    cwd=""String_Node_Str"";
  }
  String trimmedSourceName=fullSourceName;
  String sourceExtension=""String_Node_Str"";
  int extensionIndex=fullSourceName.lastIndexOf('.');
  if (extensionIndex != -1) {
    trimmedSourceName=(extensionIndex == 0) ? ""String_Node_Str"" : fullSourceName.substring(0,extensionIndex);
    sourceExtension=(extensionIndex == fullSourceName.length() - 1) ? ""String_Node_Str"" : fullSourceName.substring(extensionIndex + 1);
  }
  root.put(""String_Node_Str"",trimmedSourceName);
  root.put(""String_Node_Str"",sourceExtension);
  root.put(""String_Node_Str"",new SimpleDate(new Date(),SimpleDate.DATETIME));
  root.put(""String_Node_Str"",cwd);
  root.put(""String_Node_Str"",new TemplateNode(companyHome,serviceRegistry,null));
  root.put(""String_Node_Str"",new TemplateNode(sourceNode,serviceRegistry,null));
  root.put(""String_Node_Str"",nodeService.getType(sourceNode).getLocalName());
  root.put(""String_Node_Str"",nodeService.getType(tempRenditionLocation).getLocalName());
  NodeRef person=serviceRegistry.getPersonService().getPerson(AuthenticationUtil.getFullyAuthenticatedUser());
  root.put(""String_Node_Str"",new TemplateNode(person,serviceRegistry,null));
  if (sourceNodeIsXml(sourceNode)) {
    try {
      Document xml=XMLUtil.parse(sourceNode,serviceRegistry.getContentService());
      pathTemplate=FreeMarkerUtil.buildNamespaceDeclaration(xml) + pathTemplate;
      root.put(""String_Node_Str"",NodeModel.wrap(xml));
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + sourceNode);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + root);
  }
  String result=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ cwd+ fullSourceName);
    }
    result=serviceRegistry.getTemplateService().processTemplateString(""String_Node_Str"",pathTemplate,new SimpleHash(root));
  }
 catch (  TemplateException te) {
    log.error(""String_Node_Str"" + pathTemplate);
    log.error(te.getMessage(),te);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ result);
  }
  return result;
}","private String renderPathTemplate(String pathTemplate,NodeRef sourceNode,NodeRef tempRenditionLocation,NodeRef companyHome){
  NodeService nodeService=serviceRegistry.getNodeService();
  FileFolderService fileFolderService=serviceRegistry.getFileFolderService();
  final Map<String,Object> root=new HashMap<String,Object>();
  List<FileInfo> sourcePathInfo;
  String fullSourceName;
  String cwd;
  try {
    sourcePathInfo=fileFolderService.getNamePath(companyHome,sourceNode);
    FileInfo sourceFileInfo=sourcePathInfo.remove(sourcePathInfo.size() - 1);
    fullSourceName=sourceFileInfo.getName();
    StringBuilder cwdBuilder=new StringBuilder(""String_Node_Str"");
    for (    FileInfo file : sourcePathInfo) {
      cwdBuilder.append(file.getName());
      cwdBuilder.append('/');
    }
    cwd=cwdBuilder.toString();
  }
 catch (  FileNotFoundException e) {
    log.warn(""String_Node_Str"" + sourceNode + ""String_Node_Str"");
    fullSourceName=nodeService.getPrimaryParent(sourceNode).getQName().getLocalName();
    cwd=""String_Node_Str"";
  }
  String trimmedSourceName=fullSourceName;
  String sourceExtension=""String_Node_Str"";
  int extensionIndex=fullSourceName.lastIndexOf('.');
  if (extensionIndex != -1) {
    trimmedSourceName=(extensionIndex == 0) ? ""String_Node_Str"" : fullSourceName.substring(0,extensionIndex);
    sourceExtension=(extensionIndex == fullSourceName.length() - 1) ? ""String_Node_Str"" : fullSourceName.substring(extensionIndex + 1);
  }
  root.put(""String_Node_Str"",trimmedSourceName);
  root.put(""String_Node_Str"",sourceExtension);
  root.put(""String_Node_Str"",new SimpleDate(new Date(),SimpleDate.DATETIME));
  root.put(""String_Node_Str"",cwd);
  TemplateNode companyHomeNode=new TemplateNode(companyHome,serviceRegistry,null);
  root.put(""String_Node_Str"",companyHomeNode);
  root.put(""String_Node_Str"",companyHomeNode);
  root.put(""String_Node_Str"",new TemplateNode(sourceNode,serviceRegistry,null));
  root.put(""String_Node_Str"",nodeService.getType(sourceNode).getLocalName());
  root.put(""String_Node_Str"",nodeService.getType(tempRenditionLocation).getLocalName());
  NodeRef person=serviceRegistry.getPersonService().getPerson(AuthenticationUtil.getFullyAuthenticatedUser());
  root.put(""String_Node_Str"",new TemplateNode(person,serviceRegistry,null));
  if (sourceNodeIsXml(sourceNode)) {
    try {
      Document xml=XMLUtil.parse(sourceNode,serviceRegistry.getContentService());
      pathTemplate=FreeMarkerUtil.buildNamespaceDeclaration(xml) + pathTemplate;
      root.put(""String_Node_Str"",NodeModel.wrap(xml));
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + sourceNode);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + root);
  }
  String result=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ cwd+ fullSourceName);
    }
    result=serviceRegistry.getTemplateService().processTemplateString(""String_Node_Str"",pathTemplate,new SimpleHash(root));
  }
 catch (  TemplateException te) {
    log.error(""String_Node_Str"" + pathTemplate);
    log.error(te.getMessage(),te);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ result);
  }
  return result;
}",0.9752760068418598
172195,"public RenditionLocation getRenditionLocation(NodeRef sourceNode,RenditionDefinition definition,NodeRef tempRenditionLocation){
  NodeRef destination=AbstractRenderingEngine.getCheckedParam(RenditionService.PARAM_DESTINATION_NODE,NodeRef.class,definition);
  if (destination != null) {
    RenditionLocationImpl location=createNodeLocation(destination);
    return location;
  }
  String pathTemplate=(String)definition.getParameterValue(RenditionService.PARAM_DESTINATION_PATH_TEMPLATE);
  if (pathTemplate != null) {
    NodeRef companyHome=getCompanyHomeNode(sourceNode.getStoreRef());
    NodeService nodeService=serviceRegistry.getNodeService();
    Serializable companyHomeName=nodeService.getProperty(companyHome,ContentModel.PROP_NAME);
    String path=renderPathTemplate(pathTemplate,sourceNode,tempRenditionLocation,companyHomeName);
    if (path != null) {
      return findOrCreateTemplatedPath(sourceNode,path,companyHome);
    }
  }
  return new RenditionLocationImpl(sourceNode,null,null);
}","public RenditionLocation getRenditionLocation(NodeRef sourceNode,RenditionDefinition definition,NodeRef tempRenditionLocation){
  NodeRef destination=AbstractRenderingEngine.getCheckedParam(RenditionService.PARAM_DESTINATION_NODE,NodeRef.class,definition);
  if (destination != null) {
    RenditionLocationImpl location=createNodeLocation(destination);
    return location;
  }
  String pathTemplate=(String)definition.getParameterValue(RenditionService.PARAM_DESTINATION_PATH_TEMPLATE);
  if (pathTemplate != null) {
    NodeRef companyHome=getCompanyHomeNode(sourceNode.getStoreRef());
    String path=renderPathTemplate(pathTemplate,sourceNode,tempRenditionLocation,companyHome);
    if (path != null) {
      return findOrCreateTemplatedPath(sourceNode,path,companyHome);
    }
  }
  return new RenditionLocationImpl(sourceNode,null,null);
}",0.6987041036717062
172196,"private String renderPathTemplate(String pathTemplate,NodeRef sourceNode,NodeRef tempRenditionLocation,Serializable companyHomeName){
  NodeService nodeService=serviceRegistry.getNodeService();
  NamespaceService namespaceService=serviceRegistry.getNamespaceService();
  final Map<String,Object> root=new HashMap<String,Object>();
  ChildAssociationRef sourceAssoc=nodeService.getPrimaryParent(sourceNode);
  String fullSourceName=sourceAssoc.getQName().getLocalName();
  String trimmedSourceName=fullSourceName;
  String sourceExtension=""String_Node_Str"";
  int extensionIndex=fullSourceName.lastIndexOf('.');
  if (extensionIndex != -1) {
    trimmedSourceName=(extensionIndex == 0) ? ""String_Node_Str"" : fullSourceName.substring(0,extensionIndex);
    sourceExtension=(extensionIndex == fullSourceName.length() - 1) ? ""String_Node_Str"" : fullSourceName.substring(extensionIndex + 1);
  }
  Path sourcePath=nodeService.getPath(sourceNode);
  StoreRef store=sourceNode.getStoreRef();
  getCompanyHomeNode(store);
  root.put(""String_Node_Str"",trimmedSourceName);
  root.put(""String_Node_Str"",sourceExtension);
  root.put(""String_Node_Str"",new SimpleDate(new Date(),SimpleDate.DATETIME));
  root.put(""String_Node_Str"",sourcePath.toPrefixString(namespaceService));
  root.put(""String_Node_Str"",companyHomeName);
  root.put(""String_Node_Str"",new TemplateNode(sourceNode,serviceRegistry,null));
  root.put(""String_Node_Str"",nodeService.getType(sourceNode).getLocalName());
  root.put(""String_Node_Str"",nodeService.getType(tempRenditionLocation).getLocalName());
  NodeRef person=serviceRegistry.getPersonService().getPerson(AuthenticationUtil.getFullyAuthenticatedUser());
  root.put(""String_Node_Str"",new TemplateNode(person,serviceRegistry,null));
  if (sourceNodeIsXml(sourceNode)) {
    try {
      Document xml=XMLUtil.parse(sourceNode,serviceRegistry.getContentService());
      pathTemplate=FreeMarkerUtil.buildNamespaceDeclaration(xml) + pathTemplate;
      root.put(""String_Node_Str"",NodeModel.wrap(xml));
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + sourceNode);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + root);
  }
  String result=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ sourcePath);
    }
    result=serviceRegistry.getTemplateService().processTemplateString(""String_Node_Str"",pathTemplate,new SimpleHash(root));
  }
 catch (  TemplateException te) {
    log.error(""String_Node_Str"" + pathTemplate);
    log.error(te.getMessage(),te);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ result);
  }
  return result;
}","private String renderPathTemplate(String pathTemplate,NodeRef sourceNode,NodeRef tempRenditionLocation,NodeRef companyHome){
  NodeService nodeService=serviceRegistry.getNodeService();
  FileFolderService fileFolderService=serviceRegistry.getFileFolderService();
  final Map<String,Object> root=new HashMap<String,Object>();
  List<FileInfo> sourcePathInfo;
  String fullSourceName;
  String cwd;
  try {
    sourcePathInfo=fileFolderService.getNamePath(companyHome,sourceNode);
    FileInfo sourceFileInfo=sourcePathInfo.remove(sourcePathInfo.size() - 1);
    fullSourceName=sourceFileInfo.getName();
    StringBuilder cwdBuilder=new StringBuilder(""String_Node_Str"");
    for (    FileInfo file : sourcePathInfo) {
      cwdBuilder.append(file.getName());
      cwdBuilder.append('/');
    }
    cwd=cwdBuilder.toString();
  }
 catch (  FileNotFoundException e) {
    log.warn(""String_Node_Str"" + sourceNode + ""String_Node_Str"");
    fullSourceName=nodeService.getPrimaryParent(sourceNode).getQName().getLocalName();
    cwd=""String_Node_Str"";
  }
  String trimmedSourceName=fullSourceName;
  String sourceExtension=""String_Node_Str"";
  int extensionIndex=fullSourceName.lastIndexOf('.');
  if (extensionIndex != -1) {
    trimmedSourceName=(extensionIndex == 0) ? ""String_Node_Str"" : fullSourceName.substring(0,extensionIndex);
    sourceExtension=(extensionIndex == fullSourceName.length() - 1) ? ""String_Node_Str"" : fullSourceName.substring(extensionIndex + 1);
  }
  root.put(""String_Node_Str"",trimmedSourceName);
  root.put(""String_Node_Str"",sourceExtension);
  root.put(""String_Node_Str"",new SimpleDate(new Date(),SimpleDate.DATETIME));
  root.put(""String_Node_Str"",cwd);
  root.put(""String_Node_Str"",new TemplateNode(companyHome,serviceRegistry,null));
  root.put(""String_Node_Str"",new TemplateNode(sourceNode,serviceRegistry,null));
  root.put(""String_Node_Str"",nodeService.getType(sourceNode).getLocalName());
  root.put(""String_Node_Str"",nodeService.getType(tempRenditionLocation).getLocalName());
  NodeRef person=serviceRegistry.getPersonService().getPerson(AuthenticationUtil.getFullyAuthenticatedUser());
  root.put(""String_Node_Str"",new TemplateNode(person,serviceRegistry,null));
  if (sourceNodeIsXml(sourceNode)) {
    try {
      Document xml=XMLUtil.parse(sourceNode,serviceRegistry.getContentService());
      pathTemplate=FreeMarkerUtil.buildNamespaceDeclaration(xml) + pathTemplate;
      root.put(""String_Node_Str"",NodeModel.wrap(xml));
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + sourceNode);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + root);
  }
  String result=null;
  try {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ cwd+ fullSourceName);
    }
    result=serviceRegistry.getTemplateService().processTemplateString(""String_Node_Str"",pathTemplate,new SimpleHash(root));
  }
 catch (  TemplateException te) {
    log.error(""String_Node_Str"" + pathTemplate);
    log.error(te.getMessage(),te);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + pathTemplate + ""String_Node_Str""+ result);
  }
  return result;
}",0.8141592920353983
172197,"private NodeRef makeNode(NodeRef parent,QName nodeType){
  String uuid=GUID.generate();
  Map<QName,Serializable> props=new HashMap<QName,Serializable>();
  props.put(ContentModel.PROP_NAME,uuid);
  ChildAssociationRef assoc=nodeService.createNode(parent,ContentModel.ASSOC_CONTAINS,QName.createQName(NamespaceService.APP_MODEL_1_0_URI,uuid),nodeType,props);
  return assoc.getChildRef();
}","private NodeRef makeNode(NodeRef parent,QName nodeType){
  String uuid=GUID.generate();
  Map<QName,Serializable> props=new HashMap<QName,Serializable>();
  props.put(ContentModel.PROP_NAME,uuid);
  ChildAssociationRef assoc=nodeService.createNode(parent,ContentModel.ASSOC_CONTAINS,QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,uuid),nodeType,props);
  return assoc.getChildRef();
}",0.9872448979591836
172198,"public void testCreatesFoldersForTemplatedLocation() throws Exception {
  QName fooName=QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str"");
  QName barName=QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str"");
  String fooPath=""String_Node_Str"";
  String barPath=fooPath + ""String_Node_Str"";
  List<ChildAssociationRef> childAssocs=nodeService.getChildAssocs(companyHome,ContentModel.ASSOC_CONTAINS,fooName);
  assertTrue(""String_Node_Str"" + fooPath + ""String_Node_Str"",childAssocs.isEmpty());
  QName renditionKind=QName.createQName(NamespaceService.APP_MODEL_1_0_URI,""String_Node_Str"");
  NodeRef sourceNode=makeNode(companyHome,ContentModel.TYPE_CONTENT);
  NodeRef tempRenditionNode=makeNode(companyHome,ContentModel.TYPE_CONTENT);
  RenditionDefinition renditionDef=renditionService.createRenditionDefinition(renditionKind,""String_Node_Str"");
  String pathTemplate=barPath + ""String_Node_Str"";
  renditionDef.setParameterValue(RenditionService.PARAM_DESTINATION_PATH_TEMPLATE,pathTemplate);
  RenditionLocation location=locationResolver.getRenditionLocation(sourceNode,renditionDef,tempRenditionNode);
  NodeRef fooNode=checkFolder(fooName,companyHome,""String_Node_Str"");
  NodeRef barNode=checkFolder(barName,fooNode,""String_Node_Str"");
  assertEquals(""String_Node_Str"",barNode,location.getParentRef());
  assertEquals(""String_Node_Str"",location.getChildName());
}","public void testCreatesFoldersForTemplatedLocation() throws Exception {
  QName fooName=QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str"");
  QName barName=QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str"");
  String fooPath=""String_Node_Str"";
  String barPath=fooPath + ""String_Node_Str"";
  List<ChildAssociationRef> childAssocs=nodeService.getChildAssocs(companyHome,ContentModel.ASSOC_CONTAINS,fooName);
  assertTrue(""String_Node_Str"" + fooPath + ""String_Node_Str"",childAssocs.isEmpty());
  QName renditionKind=QName.createQName(NamespaceService.APP_MODEL_1_0_URI,""String_Node_Str"");
  NodeRef sourceFolder=makeNode(companyHome,ContentModel.TYPE_FOLDER);
  NodeRef sourceNode=makeNode(sourceFolder,ContentModel.TYPE_CONTENT);
  NodeRef tempRenditionNode=makeNode(companyHome,ContentModel.TYPE_CONTENT);
  RenditionDefinition renditionDef=renditionService.createRenditionDefinition(renditionKind,""String_Node_Str"");
  String pathTemplate=barPath + ""String_Node_Str"";
  renditionDef.setParameterValue(RenditionService.PARAM_DESTINATION_PATH_TEMPLATE,pathTemplate);
  RenditionLocation location=locationResolver.getRenditionLocation(sourceNode,renditionDef,tempRenditionNode);
  NodeRef fooNode=checkFolder(fooName,companyHome,""String_Node_Str"");
  NodeRef barNode=checkFolder(barName,fooNode,""String_Node_Str"");
  NodeRef finalFolderNode=checkFolder(nodeService.getPrimaryParent(sourceFolder).getQName(),barNode,""String_Node_Str"");
  assertEquals(""String_Node_Str"",finalFolderNode,location.getParentRef());
  assertEquals(""String_Node_Str"",location.getChildName());
}",0.930171277997365
172199,"/** 
 * @param action
 */
protected void checkActionIsRenditionDefinition(Action action){
  if (action instanceof RenditionDefinition == false) {
    String msg=""String_Node_Str"" + action;
    logger.warn(msg);
    throw new RenditionServiceException(msg);
  }
}","/** 
 * @param action
 */
protected RenditionDefinition checkActionIsRenditionDefinition(Action action){
  if (action instanceof RenditionDefinition) {
    return (RenditionDefinition)action;
  }
 else {
    return new RenditionDefinitionImpl(action);
  }
}",0.5664739884393064
172200,"@Override protected void executeImpl(Action action,NodeRef sourceNode){
  checkParameterValues(action);
  checkActionIsRenditionDefinition(action);
  checkSourceNodeExists(sourceNode);
  RenditionDefinition renditionDefinition=(RenditionDefinition)action;
  ChildAssociationRef renditionAssoc=createRenditionNodeAssoc(sourceNode,renditionDefinition);
  QName targetContentProp=getRenditionContentProperty(renditionDefinition);
  NodeRef destinationNode=renditionAssoc.getChildRef();
  RenderingContext context=new RenderingContext(sourceNode,destinationNode,renditionDefinition,targetContentProp);
  render(context);
  action.getParameterValues().put(PARAM_RESULT,renditionAssoc);
}","@Override protected void executeImpl(Action action,NodeRef sourceNode){
  checkParameterValues(action);
  RenditionDefinition renditionDefinition=checkActionIsRenditionDefinition(action);
  checkSourceNodeExists(sourceNode);
  ChildAssociationRef renditionAssoc=createRenditionNodeAssoc(sourceNode,renditionDefinition);
  QName targetContentProp=getRenditionContentProperty(renditionDefinition);
  NodeRef destinationNode=renditionAssoc.getChildRef();
  RenderingContext context=new RenderingContext(sourceNode,destinationNode,renditionDefinition,targetContentProp);
  render(context);
  action.getParameterValues().put(PARAM_RESULT,renditionAssoc);
}",0.916729182295574
172201,"public void testCheckSourceNodeExists(){
  when(nodeService.exists(any(NodeRef.class))).thenReturn(false);
  RenditionDefinitionImpl definition=new RenditionDefinitionImpl(""String_Node_Str"",null,TestRenderingEngine.NAME);
  try {
    engine.executeImpl(definition,source);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    String expMsg=""String_Node_Str"";
    assertEquals(expMsg,e.getMessage());
  }
}","public void testCheckSourceNodeExists(){
  when(nodeService.exists(any(NodeRef.class))).thenReturn(false);
  RenditionDefinitionImpl definition=new RenditionDefinitionImpl(""String_Node_Str"",null,TestRenderingEngine.NAME);
  try {
    engine.executeImpl(definition,source);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    assertTrue(e.getMessage().endsWith(""String_Node_Str""));
  }
}",0.8527315914489311
172202,"@SuppressWarnings(""String_Node_Str"") public void testGetCheckedParameter(){
  when(nodeService.exists(source)).thenReturn(true);
  ChildAssociationRef renditionAssoc=makeRenditionAssoc();
  RenditionDefinition definition=makeRenditionDefinition(renditionAssoc);
  when(nodeService.createNode(eq(source),eq(renditionAssoc.getTypeQName()),any(QName.class),any(QName.class),anyMap())).thenReturn(renditionAssoc);
  engine.executeImpl(definition,source);
  RenderingContext context=engine.getContext();
  String paramName=""String_Node_Str"";
  String result=context.getCheckedParam(paramName,String.class);
  assertNull(result);
  String value=""String_Node_Str"";
  definition.setParameterValue(paramName,value);
  engine.executeImpl(definition,source);
  context=engine.getContext();
  result=context.getCheckedParam(paramName,String.class);
  assertEquals(value,result);
  try {
    context.getCheckedParam(paramName,Boolean.class);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    String msg=""String_Node_Str"";
    assertEquals(msg,e.getMessage());
  }
  try {
    context.getCheckedParam(paramName,null);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    String msg=""String_Node_Str"";
    assertEquals(msg,e.getMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") public void testGetCheckedParameter(){
  when(nodeService.exists(source)).thenReturn(true);
  ChildAssociationRef renditionAssoc=makeRenditionAssoc();
  RenditionDefinition definition=makeRenditionDefinition(renditionAssoc);
  when(nodeService.createNode(eq(source),eq(renditionAssoc.getTypeQName()),any(QName.class),any(QName.class),anyMap())).thenReturn(renditionAssoc);
  engine.executeImpl(definition,source);
  RenderingContext context=engine.getContext();
  String paramName=""String_Node_Str"";
  String result=context.getCheckedParam(paramName,String.class);
  assertNull(result);
  String value=""String_Node_Str"";
  definition.setParameterValue(paramName,value);
  engine.executeImpl(definition,source);
  context=engine.getContext();
  result=context.getCheckedParam(paramName,String.class);
  assertEquals(value,result);
  try {
    context.getCheckedParam(paramName,Boolean.class);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    assertTrue(e.getMessage().endsWith(""String_Node_Str""));
  }
  try {
    context.getCheckedParam(paramName,null);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    assertTrue(e.getMessage().endsWith(""String_Node_Str""));
  }
}",0.8103855232100708
172203,"@SuppressWarnings(""String_Node_Str"") public void testGetParameterWithDefault(){
  when(nodeService.exists(source)).thenReturn(true);
  ChildAssociationRef renditionAssoc=makeRenditionAssoc();
  RenditionDefinition definition=makeRenditionDefinition(renditionAssoc);
  when(nodeService.createNode(eq(source),eq(renditionAssoc.getTypeQName()),any(QName.class),any(QName.class),anyMap())).thenReturn(renditionAssoc);
  engine.executeImpl(definition,source);
  RenderingContext context=engine.getContext();
  String paramName=""String_Node_Str"";
  String defaultValue=""String_Node_Str"";
  Object result=context.getParamWithDefault(paramName,defaultValue);
  assertEquals(defaultValue,result);
  String value=""String_Node_Str"";
  definition.setParameterValue(paramName,value);
  engine.executeImpl(definition,source);
  context=engine.getContext();
  result=context.getParamWithDefault(paramName,defaultValue);
  assertEquals(value,result);
  try {
    result=context.getParamWithDefault(paramName,null);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    String msg=""String_Node_Str"";
    assertEquals(msg,e.getMessage());
  }
  try {
    result=context.getParamWithDefault(paramName,Boolean.TRUE);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    String msg=""String_Node_Str"";
    assertEquals(msg,e.getMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") public void testGetParameterWithDefault(){
  when(nodeService.exists(source)).thenReturn(true);
  ChildAssociationRef renditionAssoc=makeRenditionAssoc();
  RenditionDefinition definition=makeRenditionDefinition(renditionAssoc);
  when(nodeService.createNode(eq(source),eq(renditionAssoc.getTypeQName()),any(QName.class),any(QName.class),anyMap())).thenReturn(renditionAssoc);
  engine.executeImpl(definition,source);
  RenderingContext context=engine.getContext();
  String paramName=""String_Node_Str"";
  String defaultValue=""String_Node_Str"";
  Object result=context.getParamWithDefault(paramName,defaultValue);
  assertEquals(defaultValue,result);
  String value=""String_Node_Str"";
  definition.setParameterValue(paramName,value);
  engine.executeImpl(definition,source);
  context=engine.getContext();
  result=context.getParamWithDefault(paramName,defaultValue);
  assertEquals(value,result);
  try {
    result=context.getParamWithDefault(paramName,null);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    assertTrue(e.getMessage().endsWith(""String_Node_Str""));
  }
  try {
    result=context.getParamWithDefault(paramName,Boolean.TRUE);
    fail(""String_Node_Str"");
  }
 catch (  RenditionServiceException e) {
    assertTrue(e.getMessage().endsWith(""String_Node_Str""));
  }
}",0.9338235294117648
172204,"public int vote(Authentication authentication,Object object,ConfigAttributeDefinition config){
  if (log.isDebugEnabled()) {
    MethodInvocation mi=(MethodInvocation)object;
    log.debug(""String_Node_Str"" + mi.getMethod().toString());
  }
  if (AuthenticationUtil.isRunAsUserTheSystemUser()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    return AccessDecisionVoter.ACCESS_GRANTED;
  }
  List<ConfigAttributeDefintion> supportedDefinitions=extractSupportedDefinitions(config);
  if (supportedDefinitions.size() == 0) {
    return AccessDecisionVoter.ACCESS_ABSTAIN;
  }
  MethodInvocation invocation=(MethodInvocation)object;
  Method method=invocation.getMethod();
  Class[] params=method.getParameterTypes();
  Boolean hasMethodEntry=null;
  for (  ConfigAttributeDefintion cad : supportedDefinitions) {
    NodeRef testNodeRef=null;
    if (cad.typeString.equals(ACL_DENY)) {
      return AccessDecisionVoter.ACCESS_DENIED;
    }
 else     if (cad.typeString.equals(ACL_ALLOW)) {
      return AccessDecisionVoter.ACCESS_GRANTED;
    }
 else     if (cad.typeString.equals(ACL_METHOD)) {
      if (hasMethodEntry == null) {
        hasMethodEntry=Boolean.FALSE;
      }
      if (cad.authority.equals(AuthenticationUtil.getRunAsUser())) {
        hasMethodEntry=Boolean.TRUE;
      }
 else       if (authorityService.getAuthorities().contains(cad.authority)) {
        hasMethodEntry=Boolean.TRUE;
      }
    }
 else     if (cad.parameter >= invocation.getArguments().length) {
      continue;
    }
 else     if (cad.typeString.equals(ACL_NODE)) {
      if (StoreRef.class.isAssignableFrom(params[cad.parameter])) {
        if (invocation.getArguments()[cad.parameter] != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
          StoreRef storeRef=(StoreRef)invocation.getArguments()[cad.parameter];
          if (nodeService.exists(storeRef)) {
            testNodeRef=nodeService.getRootNode(storeRef);
          }
        }
      }
 else       if (NodeRef.class.isAssignableFrom(params[cad.parameter])) {
        testNodeRef=(NodeRef)invocation.getArguments()[cad.parameter];
        if (log.isDebugEnabled()) {
          if (nodeService.exists(testNodeRef)) {
            log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
          }
 else {
            log.debug(""String_Node_Str"" + testNodeRef);
          }
        }
      }
 else       if (ChildAssociationRef.class.isAssignableFrom(params[cad.parameter])) {
        if (invocation.getArguments()[cad.parameter] != null) {
          testNodeRef=((ChildAssociationRef)invocation.getArguments()[cad.parameter]).getChildRef();
          if (log.isDebugEnabled()) {
            if (nodeService.exists(testNodeRef)) {
              log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
            }
 else {
              log.debug(""String_Node_Str"" + testNodeRef);
            }
          }
        }
      }
 else {
        throw new ACLEntryVoterException(""String_Node_Str"");
      }
    }
 else     if (cad.typeString.equals(ACL_PARENT)) {
      if (NodeRef.class.isAssignableFrom(params[cad.parameter])) {
        NodeRef child=(NodeRef)invocation.getArguments()[cad.parameter];
        if (child != null) {
          testNodeRef=nodeService.getPrimaryParent(child).getParentRef();
          if (log.isDebugEnabled()) {
            if (nodeService.exists(testNodeRef)) {
              log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
            }
 else {
              log.debug(""String_Node_Str"" + testNodeRef);
            }
            log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
          }
        }
      }
 else       if (ChildAssociationRef.class.isAssignableFrom(params[cad.parameter])) {
        if (invocation.getArguments()[cad.parameter] != null) {
          testNodeRef=((ChildAssociationRef)invocation.getArguments()[cad.parameter]).getParentRef();
          if (log.isDebugEnabled()) {
            if (nodeService.exists(testNodeRef)) {
              log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
            }
 else {
              log.debug(""String_Node_Str"" + testNodeRef);
            }
          }
        }
      }
 else {
        throw new ACLEntryVoterException(""String_Node_Str"");
      }
    }
    if (testNodeRef != null) {
      if (abstainForClassQNames.size() > 0) {
        QName typeQName=nodeService.getType(testNodeRef);
        if (abstainForClassQNames.contains(typeQName)) {
          return AccessDecisionVoter.ACCESS_ABSTAIN;
        }
        Set<QName> aspectQNames=nodeService.getAspects(testNodeRef);
        for (        QName abstain : abstainForClassQNames) {
          if (aspectQNames.contains(abstain)) {
            return AccessDecisionVoter.ACCESS_ABSTAIN;
          }
        }
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      if (permissionService.hasPermission(testNodeRef,cad.required.toString()) == AccessStatus.DENIED) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
          Thread.dumpStack();
        }
        return AccessDecisionVoter.ACCESS_DENIED;
      }
    }
  }
  if ((hasMethodEntry == null) || (hasMethodEntry.booleanValue())) {
    return AccessDecisionVoter.ACCESS_GRANTED;
  }
 else {
    return AccessDecisionVoter.ACCESS_DENIED;
  }
}","public int vote(Authentication authentication,Object object,ConfigAttributeDefinition config){
  if (log.isDebugEnabled()) {
    MethodInvocation mi=(MethodInvocation)object;
    log.debug(""String_Node_Str"" + mi.getMethod().toString());
  }
  if (AuthenticationUtil.isRunAsUserTheSystemUser()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    return AccessDecisionVoter.ACCESS_GRANTED;
  }
  List<ConfigAttributeDefintion> supportedDefinitions=extractSupportedDefinitions(config);
  if (supportedDefinitions.size() == 0) {
    return AccessDecisionVoter.ACCESS_ABSTAIN;
  }
  MethodInvocation invocation=(MethodInvocation)object;
  Method method=invocation.getMethod();
  Class[] params=method.getParameterTypes();
  Boolean hasMethodEntry=null;
  for (  ConfigAttributeDefintion cad : supportedDefinitions) {
    NodeRef testNodeRef=null;
    if (cad.typeString.equals(ACL_DENY)) {
      return AccessDecisionVoter.ACCESS_DENIED;
    }
 else     if (cad.typeString.equals(ACL_ALLOW)) {
      return AccessDecisionVoter.ACCESS_GRANTED;
    }
 else     if (cad.typeString.equals(ACL_METHOD)) {
      if (hasMethodEntry == null) {
        hasMethodEntry=Boolean.FALSE;
      }
      if (cad.authority.equals(AuthenticationUtil.getRunAsUser())) {
        hasMethodEntry=Boolean.TRUE;
      }
 else       if (authorityService.getAuthorities().contains(cad.authority)) {
        hasMethodEntry=Boolean.TRUE;
      }
    }
 else     if (cad.parameter >= invocation.getArguments().length) {
      continue;
    }
 else     if (cad.typeString.equals(ACL_NODE)) {
      if (StoreRef.class.isAssignableFrom(params[cad.parameter])) {
        if (invocation.getArguments()[cad.parameter] != null) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"");
          }
          StoreRef storeRef=(StoreRef)invocation.getArguments()[cad.parameter];
          if (nodeService.exists(storeRef)) {
            testNodeRef=nodeService.getRootNode(storeRef);
          }
        }
      }
 else       if (NodeRef.class.isAssignableFrom(params[cad.parameter])) {
        testNodeRef=(NodeRef)invocation.getArguments()[cad.parameter];
        if (log.isDebugEnabled()) {
          if (nodeService.exists(testNodeRef)) {
            log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
          }
 else {
            log.debug(""String_Node_Str"" + testNodeRef);
          }
        }
      }
 else       if (ChildAssociationRef.class.isAssignableFrom(params[cad.parameter])) {
        if (invocation.getArguments()[cad.parameter] != null) {
          testNodeRef=((ChildAssociationRef)invocation.getArguments()[cad.parameter]).getChildRef();
          if (log.isDebugEnabled()) {
            if (nodeService.exists(testNodeRef)) {
              log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
            }
 else {
              log.debug(""String_Node_Str"" + testNodeRef);
            }
          }
        }
      }
 else {
        throw new ACLEntryVoterException(""String_Node_Str"");
      }
    }
 else     if (cad.typeString.equals(ACL_PARENT)) {
      if (NodeRef.class.isAssignableFrom(params[cad.parameter])) {
        NodeRef child=(NodeRef)invocation.getArguments()[cad.parameter];
        if (child != null) {
          testNodeRef=nodeService.getPrimaryParent(child).getParentRef();
          if (log.isDebugEnabled()) {
            if (nodeService.exists(testNodeRef)) {
              log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
            }
 else {
              log.debug(""String_Node_Str"" + testNodeRef);
            }
            log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
          }
        }
      }
 else       if (ChildAssociationRef.class.isAssignableFrom(params[cad.parameter])) {
        if (invocation.getArguments()[cad.parameter] != null) {
          testNodeRef=((ChildAssociationRef)invocation.getArguments()[cad.parameter]).getParentRef();
          if (log.isDebugEnabled()) {
            if (nodeService.exists(testNodeRef)) {
              log.debug(""String_Node_Str"" + nodeService.getPath(testNodeRef));
            }
 else {
              log.debug(""String_Node_Str"" + testNodeRef);
            }
          }
        }
      }
 else {
        throw new ACLEntryVoterException(""String_Node_Str"");
      }
    }
    if (testNodeRef != null) {
      if (abstainForClassQNames.size() > 0) {
        if (nodeService.exists(testNodeRef)) {
          QName typeQName=nodeService.getType(testNodeRef);
          if (abstainForClassQNames.contains(typeQName)) {
            return AccessDecisionVoter.ACCESS_ABSTAIN;
          }
          Set<QName> aspectQNames=nodeService.getAspects(testNodeRef);
          for (          QName abstain : abstainForClassQNames) {
            if (aspectQNames.contains(abstain)) {
              return AccessDecisionVoter.ACCESS_ABSTAIN;
            }
          }
        }
      }
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      if (permissionService.hasPermission(testNodeRef,cad.required.toString()) == AccessStatus.DENIED) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"");
          Thread.dumpStack();
        }
        return AccessDecisionVoter.ACCESS_DENIED;
      }
    }
  }
  if ((hasMethodEntry == null) || (hasMethodEntry.booleanValue())) {
    return AccessDecisionVoter.ACCESS_GRANTED;
  }
 else {
    return AccessDecisionVoter.ACCESS_DENIED;
  }
}",0.9918460833715071
172205,"public Object invoke(MethodInvocation invocation) throws Throwable {
  ACLEntryVoter voter=new ACLEntryVoter();
  voter.setNamespacePrefixResolver(namespacePrefixResolver);
  voter.setPermissionService(permissionService);
  voter.setNodeService(nodeService);
  voter.setAuthenticationService(authenticationService);
  voter.setAuthorityService(authorityService);
  if (!(voter.vote(null,invocation,cad) == AccessDecisionVoter.ACCESS_DENIED)) {
    return invocation.proceed();
  }
 else {
    throw new ACLEntryVoterException(""String_Node_Str"");
  }
}","public Object invoke(MethodInvocation invocation) throws Throwable {
  ACLEntryVoter voter=new ACLEntryVoter();
  voter.setNamespacePrefixResolver(namespacePrefixResolver);
  voter.setPermissionService(permissionService);
  voter.setNodeService(nodeService);
  voter.setAuthenticationService(authenticationService);
  voter.setAuthorityService(authorityService);
  Set<String> abstainFor=new HashSet<String>(1);
  abstainFor.add(""String_Node_Str"");
  voter.setAbstainFor(abstainFor);
  voter.afterPropertiesSet();
  if (!(voter.vote(null,invocation,cad) == AccessDecisionVoter.ACCESS_DENIED)) {
    return invocation.proceed();
  }
 else {
    throw new ACLEntryVoterException(""String_Node_Str"");
  }
}",0.879489225857941
172206,"public AVMStoreDescriptor(long id,String name,String creator,long createDate){
  fName=name;
  fCreator=creator;
  fCreateDate=createDate;
}","public AVMStoreDescriptor(long id,String name,String creator,long createDate){
  fID=id;
  fName=name;
  fCreator=creator;
  fCreateDate=createDate;
}",0.9655172413793104
172207,"/** 
 * Recursive copy algorithm
 * @param dropName      drop the name property when associations don't allow duplicately named children
 */
private NodeRef recursiveCopy(CopyDetails copyDetails,boolean copyChildren,boolean dropName,Map<NodeRef,NodeRef> copiesByOriginal,Set<NodeRef> copies,Map<QName,CopyBehaviourCallback> callbacks){
  NodeRef sourceNodeRef=copyDetails.getSourceNodeRef();
  Set<QName> sourceNodeAspectQNames=copyDetails.getSourceNodeAspectQNames();
  NodeRef targetParentNodeRef=copyDetails.getTargetParentNodeRef();
  QName assocTypeQName=copyDetails.getAssocTypeQName();
  QName assocQName=copyDetails.getAssocQName();
  if (copies.contains(sourceNodeRef)) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + copyDetails + ""String_Node_Str""+ ""String_Node_Str""+ copiesByOriginal);
  }
 else   if (copiesByOriginal.containsKey(sourceNodeRef)) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + copyDetails + ""String_Node_Str""+ ""String_Node_Str""+ copiesByOriginal);
  }
  QName sourceNodeTypeQName=copyDetails.getSourceNodeTypeQName();
  CopyBehaviourCallback sourceTypeBehaviour=callbacks.get(sourceNodeTypeQName);
  if (sourceTypeBehaviour == null) {
    throw new IllegalStateException(""String_Node_Str"" + sourceNodeTypeQName);
  }
  if (!sourceTypeBehaviour.getMustCopy(sourceNodeTypeQName,copyDetails)) {
    return null;
  }
  Map<QName,Serializable> targetNodeProperties=buildCopyProperties(copyDetails,Collections.singleton(sourceNodeTypeQName),callbacks);
  Set<QName> defaultAspectQNames=getDefaultAspects(sourceNodeTypeQName);
  Map<QName,Serializable> defaultAspectsProperties=buildCopyProperties(copyDetails,defaultAspectQNames,callbacks);
  targetNodeProperties.putAll(defaultAspectsProperties);
  AssociationDefinition assocDef=dictionaryService.getAssociation(assocTypeQName);
  if (!assocDef.isChild()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + assocTypeQName);
  }
 else {
    ChildAssociationDefinition childAssocDef=(ChildAssociationDefinition)assocDef;
    if (dropName && !childAssocDef.getDuplicateChildNamesAllowed()) {
      targetNodeProperties.remove(ContentModel.PROP_NAME);
    }
  }
  String targetNodeUuid=copyDetails.getTargetNodeRef().getId();
  targetNodeProperties.put(ContentModel.PROP_NODE_UUID,targetNodeUuid);
  ChildAssociationRef targetChildAssocRef=this.nodeService.createNode(targetParentNodeRef,assocTypeQName,assocQName,sourceNodeTypeQName,targetNodeProperties);
  NodeRef targetNodeRef=targetChildAssocRef.getChildRef();
  copiesByOriginal.put(sourceNodeRef,targetNodeRef);
  copies.add(targetNodeRef);
  Set<QName> remainingAspectQNames=new HashSet<QName>(sourceNodeAspectQNames);
  remainingAspectQNames.removeAll(defaultAspectQNames);
  this.ruleService.disableRules(targetNodeRef);
  try {
    for (    QName remainingAspectQName : remainingAspectQNames) {
      copyProperties(copyDetails,targetNodeRef,remainingAspectQName,callbacks);
    }
    copyResidualProperties(copyDetails,targetNodeRef);
    Map<QName,Serializable> copyProperties=new HashMap<QName,Serializable>();
    copyProperties.put(ContentModel.PROP_COPY_REFERENCE,sourceNodeRef);
    internalNodeService.addAspect(targetNodeRef,ContentModel.ASPECT_COPIEDFROM,copyProperties);
    copyChildren(copyDetails,targetNodeRef,true,copyChildren,copiesByOriginal,copies,callbacks);
  }
  finally {
    this.ruleService.enableRules(targetNodeRef);
  }
  return targetNodeRef;
}","/** 
 * Recursive copy algorithm
 * @param dropName      drop the name property when associations don't allow duplicately named children
 */
private NodeRef recursiveCopy(CopyDetails copyDetails,boolean copyChildren,boolean dropName,Map<NodeRef,NodeRef> copiesByOriginal,Set<NodeRef> copies,Map<QName,CopyBehaviourCallback> callbacks){
  NodeRef sourceNodeRef=copyDetails.getSourceNodeRef();
  Set<QName> sourceNodeAspectQNames=copyDetails.getSourceNodeAspectQNames();
  NodeRef targetParentNodeRef=copyDetails.getTargetParentNodeRef();
  QName assocTypeQName=copyDetails.getAssocTypeQName();
  QName assocQName=copyDetails.getAssocQName();
  if (copies.contains(sourceNodeRef)) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + copyDetails + ""String_Node_Str""+ ""String_Node_Str""+ copiesByOriginal);
  }
 else   if (copiesByOriginal.containsKey(sourceNodeRef)) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + copyDetails + ""String_Node_Str""+ ""String_Node_Str""+ copiesByOriginal);
  }
  QName sourceNodeTypeQName=copyDetails.getSourceNodeTypeQName();
  CopyBehaviourCallback sourceTypeBehaviour=callbacks.get(sourceNodeTypeQName);
  if (sourceTypeBehaviour == null) {
    throw new IllegalStateException(""String_Node_Str"" + sourceNodeTypeQName);
  }
  if (!sourceTypeBehaviour.getMustCopy(sourceNodeTypeQName,copyDetails)) {
    return null;
  }
  Map<QName,Serializable> targetNodeProperties=buildCopyProperties(copyDetails,Collections.singleton(sourceNodeTypeQName),callbacks);
  Set<QName> defaultAspectQNames=getDefaultAspects(sourceNodeTypeQName);
  Map<QName,Serializable> defaultAspectsProperties=buildCopyProperties(copyDetails,defaultAspectQNames,callbacks);
  targetNodeProperties.putAll(defaultAspectsProperties);
  AssociationDefinition assocDef=dictionaryService.getAssociation(assocTypeQName);
  if (!assocDef.isChild()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + assocTypeQName);
  }
 else {
    ChildAssociationDefinition childAssocDef=(ChildAssociationDefinition)assocDef;
    if (dropName && !childAssocDef.getDuplicateChildNamesAllowed()) {
      targetNodeProperties.remove(ContentModel.PROP_NAME);
    }
  }
  String targetNodeUuid=copyDetails.getTargetNodeRef().getId();
  targetNodeProperties.put(ContentModel.PROP_NODE_UUID,targetNodeUuid);
  ChildAssociationRef targetChildAssocRef=this.nodeService.createNode(targetParentNodeRef,assocTypeQName,assocQName,sourceNodeTypeQName,targetNodeProperties);
  NodeRef targetNodeRef=targetChildAssocRef.getChildRef();
  copiesByOriginal.put(sourceNodeRef,targetNodeRef);
  copies.add(targetNodeRef);
  invokeBeforeCopy(sourceNodeRef,targetNodeRef);
  Set<QName> remainingAspectQNames=new HashSet<QName>(sourceNodeAspectQNames);
  remainingAspectQNames.removeAll(defaultAspectQNames);
  this.ruleService.disableRules(targetNodeRef);
  try {
    for (    QName remainingAspectQName : remainingAspectQNames) {
      copyProperties(copyDetails,targetNodeRef,remainingAspectQName,callbacks);
    }
    copyResidualProperties(copyDetails,targetNodeRef);
    Map<QName,Serializable> copyProperties=new HashMap<QName,Serializable>();
    copyProperties.put(ContentModel.PROP_COPY_REFERENCE,sourceNodeRef);
    internalNodeService.addAspect(targetNodeRef,ContentModel.ASPECT_COPIEDFROM,copyProperties);
    copyChildren(copyDetails,targetNodeRef,true,copyChildren,copiesByOriginal,copies,callbacks);
  }
  finally {
    this.ruleService.enableRules(targetNodeRef);
  }
  return targetNodeRef;
}",0.9930009998571632
172208,"public void copy(NodeRef sourceNodeRef,NodeRef targetNodeRef){
  QName sourceNodeTypeQName=nodeService.getType(sourceNodeRef);
  QName targetNodeTypeQName=nodeService.getType(targetNodeRef);
  if (!sourceNodeTypeQName.equals(targetNodeTypeQName)) {
    throw new CopyServiceException(""String_Node_Str"");
  }
  Map<QName,Serializable> sourceNodeProperties=nodeService.getProperties(sourceNodeRef);
  ChildAssociationRef destinationPrimaryAssocRef=nodeService.getPrimaryParent(targetNodeRef);
  NodeRef destinationParentNodeRef=destinationPrimaryAssocRef.getParentRef();
  QName assocTypeQName=destinationPrimaryAssocRef.getTypeQName();
  QName assocQName=destinationPrimaryAssocRef.getQName();
  CopyDetails copyDetails=getCopyDetails(sourceNodeRef,destinationParentNodeRef,targetNodeRef,assocTypeQName,assocQName);
  Map<QName,CopyBehaviourCallback> callbacks=getCallbacks(copyDetails);
  sourceNodeProperties.remove(ContentModel.PROP_NAME);
  copyProperties(copyDetails,targetNodeRef,sourceNodeTypeQName,callbacks);
  copyAspects(copyDetails,targetNodeRef,Collections.<QName>emptySet(),callbacks);
  copyResidualProperties(copyDetails,targetNodeRef);
  Map<NodeRef,NodeRef> copiedNodeRefs=new HashMap<NodeRef,NodeRef>(1);
  copiedNodeRefs.put(sourceNodeRef,targetNodeRef);
  invokeCopyComplete(sourceNodeRef,targetNodeRef,false,copiedNodeRefs);
}","public void copy(NodeRef sourceNodeRef,NodeRef targetNodeRef){
  QName sourceNodeTypeQName=nodeService.getType(sourceNodeRef);
  QName targetNodeTypeQName=nodeService.getType(targetNodeRef);
  if (!sourceNodeTypeQName.equals(targetNodeTypeQName)) {
    throw new CopyServiceException(""String_Node_Str"");
  }
  Map<QName,Serializable> sourceNodeProperties=nodeService.getProperties(sourceNodeRef);
  ChildAssociationRef destinationPrimaryAssocRef=nodeService.getPrimaryParent(targetNodeRef);
  NodeRef destinationParentNodeRef=destinationPrimaryAssocRef.getParentRef();
  QName assocTypeQName=destinationPrimaryAssocRef.getTypeQName();
  QName assocQName=destinationPrimaryAssocRef.getQName();
  CopyDetails copyDetails=getCopyDetails(sourceNodeRef,destinationParentNodeRef,targetNodeRef,assocTypeQName,assocQName);
  Map<QName,CopyBehaviourCallback> callbacks=getCallbacks(copyDetails);
  sourceNodeProperties.remove(ContentModel.PROP_NAME);
  invokeBeforeCopy(sourceNodeRef,targetNodeRef);
  copyProperties(copyDetails,targetNodeRef,sourceNodeTypeQName,callbacks);
  copyAspects(copyDetails,targetNodeRef,Collections.<QName>emptySet(),callbacks);
  copyResidualProperties(copyDetails,targetNodeRef);
  Map<NodeRef,NodeRef> copiedNodeRefs=new HashMap<NodeRef,NodeRef>(1);
  copiedNodeRefs.put(sourceNodeRef,targetNodeRef);
  invokeCopyComplete(sourceNodeRef,targetNodeRef,false,copiedNodeRefs);
}",0.982136347065257
172209,"/** 
 * Initialise method
 */
public void init(){
  onCopyNodeDelegate=policyComponent.registerClassPolicy(CopyServicePolicies.OnCopyNodePolicy.class);
  onCopyCompleteDelegate=policyComponent.registerClassPolicy(CopyServicePolicies.OnCopyCompletePolicy.class);
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.ASPECT_COPIEDFROM,new JavaBehaviour(this,""String_Node_Str""));
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.TYPE_FOLDER,new JavaBehaviour(this,""String_Node_Str""));
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.ASPECT_OWNABLE,new JavaBehaviour(this,""String_Node_Str""));
}","/** 
 * Initialise method
 */
public void init(){
  onCopyNodeDelegate=policyComponent.registerClassPolicy(CopyServicePolicies.OnCopyNodePolicy.class);
  onCopyCompleteDelegate=policyComponent.registerClassPolicy(CopyServicePolicies.OnCopyCompletePolicy.class);
  beforeCopyDelegate=policyComponent.registerClassPolicy(CopyServicePolicies.BeforeCopyPolicy.class);
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.ASPECT_COPIEDFROM,new JavaBehaviour(this,""String_Node_Str""));
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.TYPE_FOLDER,new JavaBehaviour(this,""String_Node_Str""));
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.ASPECT_OWNABLE,new JavaBehaviour(this,""String_Node_Str""));
}",0.94049008168028
172210,"/** 
 * @param classRef          the type of the node that was copied
 * @param sourceNodeRef     the origional node
 * @param targetNodeRef     the destination node
 * @param copyMap           a map containing all the nodes that have been created during the copy
 */
public void onCopyComplete(QName classRef,NodeRef sourceNodeRef,NodeRef targetNodeRef,boolean copyToNewNode,Map<NodeRef,NodeRef> copyMap);","/** 
 * @param classRef          the type of the node that was copied
 * @param sourceNodeRef     the original node
 * @param targetNodeRef     the destination node
 * @param copyMap           a map containing all the nodes that have been created during the copy
 */
public void onCopyComplete(QName classRef,NodeRef sourceNodeRef,NodeRef targetNodeRef,boolean copyToNewNode,Map<NodeRef,NodeRef> copyMap);",0.998766954377312
172211,"/** 
 * @see org.alfresco.repo.node.NodeServicePolicies.BeforeDeleteNodePolicy#beforeDeleteNode(org.alfresco.service.cmr.repository.NodeRef)
 */
public void beforeDeleteNode(NodeRef nodeRef){
  if (this.nodeService.exists(nodeRef) == true && this.nodeService.hasAspect(nodeRef,ContentModel.ASPECT_TAGGABLE) == true && this.nodeService.hasAspect(nodeRef,ContentModel.ASPECT_WORKING_COPY) == false) {
    updateAllScopeTags(nodeRef,Boolean.FALSE);
  }
}","/** 
 * @see org.alfresco.repo.node.NodeServicePolicies.BeforeDeleteNodePolicy#beforeDeleteNode(org.alfresco.service.cmr.repository.NodeRef)
 */
public void beforeDeleteNode(NodeRef nodeRef){
  if (this.nodeService.exists(nodeRef) == true && this.nodeService.hasAspect(nodeRef,ContentModel.ASPECT_TAGGABLE) == true) {
    updateAllScopeTags(nodeRef,Boolean.FALSE);
  }
}",0.9013398294762484
172212,"/** 
 * Init method
 */
public void init(){
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
  createTagBehaviour=new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.FIRST_EVENT);
  this.policyComponent.bindClassBehaviour(OnCreateNodePolicy.QNAME,ContentModel.ASPECT_TAGGABLE,createTagBehaviour);
  updateTagBehaviour=new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT);
  this.policyComponent.bindClassBehaviour(OnUpdatePropertiesPolicy.QNAME,ContentModel.TYPE_CONTENT,updateTagBehaviour);
  this.policyComponent.bindClassBehaviour(OnUpdatePropertiesPolicy.QNAME,ContentModel.TYPE_FOLDER,updateTagBehaviour);
  this.policyComponent.bindClassBehaviour(OnCopyCompletePolicy.QNAME,ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
  this.policyComponent.bindClassBehaviour(OnMoveNodePolicy.QNAME,ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
}","/** 
 * Init method
 */
public void init(){
  this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI,""String_Node_Str""),ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
  createTagBehaviour=new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.FIRST_EVENT);
  this.policyComponent.bindClassBehaviour(OnCreateNodePolicy.QNAME,ContentModel.ASPECT_TAGGABLE,createTagBehaviour);
  updateTagBehaviour=new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT);
  this.policyComponent.bindClassBehaviour(OnUpdatePropertiesPolicy.QNAME,ContentModel.TYPE_CONTENT,updateTagBehaviour);
  this.policyComponent.bindClassBehaviour(OnUpdatePropertiesPolicy.QNAME,ContentModel.TYPE_FOLDER,updateTagBehaviour);
  this.policyComponent.bindClassBehaviour(OnMoveNodePolicy.QNAME,ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
  this.policyComponent.bindClassBehaviour(BeforeCopyPolicy.QNAME,ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
  this.policyComponent.bindClassBehaviour(OnCopyCompletePolicy.QNAME,ContentModel.ASPECT_TAGGABLE,new JavaBehaviour(this,""String_Node_Str"",NotificationFrequency.EVERY_EVENT));
}",0.9165998396150762
172213,"public void onCopyComplete(QName classRef,NodeRef sourceNodeRef,NodeRef targetNodeRef,boolean copyToNewNode,Map<NodeRef,NodeRef> copyMap){
  if (this.nodeService.hasAspect(targetNodeRef,ContentModel.ASPECT_TAGGABLE)) {
    updateAllScopeTags(targetNodeRef,Boolean.TRUE);
  }
}","/** 
 * Fired once per node that was copied, after the copy has completed.  We need to add in all the tags to the scope.
 */
public void onCopyComplete(QName classRef,NodeRef sourceNodeRef,NodeRef targetNodeRef,boolean copyToNewNode,Map<NodeRef,NodeRef> copyMap){
  if (this.nodeService.hasAspect(targetNodeRef,ContentModel.ASPECT_TAGGABLE)) {
    updateAllScopeTags(targetNodeRef,Boolean.TRUE);
  }
}",0.8153618906942393
172214,"/** 
 * Ensures that the tag scope is correctly updated when folders and content are created, updated, moved, copied and deleted.
 */
public void testTagScopeUpdateViaNodePolicies() throws Exception {
  NodeRef tagFoo1=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  NodeRef tagFoo2=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  NodeRef tagFoo3=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  NodeRef tagBar=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  List<NodeRef> tagsList=new ArrayList<NodeRef>();
  List<ChildAssociationRef> children;
  Map<QName,Serializable> container1Props=new HashMap<QName,Serializable>(1);
  container1Props.put(ContentModel.PROP_NAME,""String_Node_Str"");
  NodeRef container1=this.nodeService.createNode(folder,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_FOLDER,container1Props).getChildRef();
  assertEquals(0,nodeService.getChildAssocs(container1).size());
  Map<QName,Serializable> container2Props=new HashMap<QName,Serializable>(1);
  container1Props.put(ContentModel.PROP_NAME,""String_Node_Str"");
  NodeRef container2=this.nodeService.createNode(folder,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_FOLDER,container2Props).getChildRef();
  assertEquals(0,nodeService.getChildAssocs(container2).size());
  taggingService.addTagScope(container1);
  taggingService.addTagScope(container2);
  waitForActionExecution();
  assertTrue(taggingService.isTagScope(container1));
  assertTrue(taggingService.isTagScope(container2));
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  Map<QName,Serializable> taggedFolderProps=new HashMap<QName,Serializable>(1);
  taggedFolderProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  NodeRef taggedFolder=this.nodeService.createNode(container1,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_FOLDER,taggedFolderProps).getChildRef();
  waitForActionExecution();
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  taggedFolderProps.clear();
  tagsList.clear();
  tagsList.add(tagFoo1);
  tagsList.add(tagFoo3);
  taggedFolderProps.put(ContentModel.ASPECT_TAGGABLE,(Serializable)tagsList);
  this.nodeService.addProperties(taggedFolder,taggedFolderProps);
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  tagsList.clear();
  tagsList.add(tagFoo1);
  tagsList.add(tagFoo2);
  Map<QName,Serializable> taggedDocProps=new HashMap<QName,Serializable>(1);
  taggedDocProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  taggedDocProps.put(ContentModel.ASPECT_TAGGABLE,(Serializable)tagsList);
  NodeRef taggedDoc=this.nodeService.createNode(taggedFolder,ContentModel.ASSOC_CONTAINS,ContentModel.ASPECT_TAGGABLE,ContentModel.TYPE_CONTENT,taggedDocProps).getChildRef();
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(taggedFolder).size());
  taggedDocProps.clear();
  taggedDocProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  assertEquals(0,nodeService.getChildAssocs(container2).size());
  NodeRef taggedDoc2=this.nodeService.createNode(container2,ContentModel.ASSOC_CONTAINS,ContentModel.ASPECT_TAGGABLE,ContentModel.TYPE_CONTENT,taggedDocProps).getChildRef();
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  copyService.copy(taggedDoc,taggedDoc2);
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(2,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  assertEquals(container2,nodeService.getPrimaryParent(taggedDoc2).getParentRef());
  assertEquals(container2,taggingService.findTagScope(taggedDoc2).getNodeRef());
  NodeRef taggedFolder2=copyService.copy(taggedFolder,container2,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,true);
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,nodeService.getChildAssocs(container2).size());
  assertEquals(1,nodeService.getChildAssocs(taggedFolder2).size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  tagsList.clear();
  tagsList.add(tagBar);
  taggedDocProps.clear();
  taggedDocProps.put(ContentModel.ASPECT_TAGGABLE,(Serializable)tagsList);
  taggedDocProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  this.nodeService.addProperties(taggedDoc,taggedDocProps);
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  taggedDoc=nodeService.moveNode(taggedDoc,container2,ContentModel.ASSOC_CONTAINS,ContentModel.ASPECT_TAGGABLE).getChildRef();
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(4,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(3,nodeService.getChildAssocs(container2).size());
  assertEquals(container2,nodeService.getPrimaryParent(taggedDoc).getParentRef());
  assertEquals(container2,taggingService.findTagScope(taggedDoc).getNodeRef());
  assertEquals(container2,nodeService.getPrimaryParent(taggedDoc2).getParentRef());
  assertEquals(container2,taggingService.findTagScope(taggedDoc2).getNodeRef());
  nodeService.deleteNode(taggedDoc);
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(2,nodeService.getChildAssocs(container2).size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(null,taggingService.findTagScope(container2).getTag(""String_Node_Str""));
  nodeService.deleteNode(taggedDoc2);
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(null,taggingService.findTagScope(container2).getTag(""String_Node_Str""));
  nodeService.deleteNode(taggedFolder);
  waitForActionExecution();
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(0,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  nodeService.deleteNode(taggedFolder2);
  waitForActionExecution();
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(0,nodeService.getChildAssocs(container1).size());
  assertEquals(0,nodeService.getChildAssocs(container2).size());
}","/** 
 * Ensures that the tag scope is correctly updated when folders and content are created, updated, moved, copied and deleted.
 */
public void testTagScopeUpdateViaNodePolicies() throws Exception {
  NodeRef tagFoo1=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  NodeRef tagFoo2=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  NodeRef tagFoo3=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  NodeRef tagBar=taggingService.createTag(folder.getStoreRef(),""String_Node_Str"");
  List<NodeRef> tagsList=new ArrayList<NodeRef>();
  List<ChildAssociationRef> children;
  Map<QName,Serializable> container1Props=new HashMap<QName,Serializable>(1);
  container1Props.put(ContentModel.PROP_NAME,""String_Node_Str"");
  NodeRef container1=this.nodeService.createNode(folder,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_FOLDER,container1Props).getChildRef();
  assertEquals(0,nodeService.getChildAssocs(container1).size());
  Map<QName,Serializable> container2Props=new HashMap<QName,Serializable>(1);
  container1Props.put(ContentModel.PROP_NAME,""String_Node_Str"");
  NodeRef container2=this.nodeService.createNode(folder,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_FOLDER,container2Props).getChildRef();
  assertEquals(0,nodeService.getChildAssocs(container2).size());
  taggingService.addTagScope(container1);
  taggingService.addTagScope(container2);
  waitForActionExecution();
  assertTrue(taggingService.isTagScope(container1));
  assertTrue(taggingService.isTagScope(container2));
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  Map<QName,Serializable> taggedFolderProps=new HashMap<QName,Serializable>(1);
  taggedFolderProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  NodeRef taggedFolder=this.nodeService.createNode(container1,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,ContentModel.TYPE_FOLDER,taggedFolderProps).getChildRef();
  waitForActionExecution();
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  taggedFolderProps.clear();
  tagsList.clear();
  tagsList.add(tagFoo1);
  tagsList.add(tagFoo3);
  taggedFolderProps.put(ContentModel.ASPECT_TAGGABLE,(Serializable)tagsList);
  this.nodeService.addProperties(taggedFolder,taggedFolderProps);
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  tagsList.clear();
  tagsList.add(tagFoo1);
  tagsList.add(tagFoo2);
  Map<QName,Serializable> taggedDocProps=new HashMap<QName,Serializable>(1);
  taggedDocProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  taggedDocProps.put(ContentModel.ASPECT_TAGGABLE,(Serializable)tagsList);
  NodeRef taggedDoc=this.nodeService.createNode(taggedFolder,ContentModel.ASSOC_CONTAINS,ContentModel.ASPECT_TAGGABLE,ContentModel.TYPE_CONTENT,taggedDocProps).getChildRef();
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(taggedFolder).size());
  UserTransaction tx=this.transactionService.getUserTransaction();
  tx.begin();
  NodeRef checkedOutDoc=checkOutCheckInService.checkout(taggedDoc);
  tx.commit();
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(3,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(2,nodeService.getChildAssocs(taggedFolder).size());
  tx=this.transactionService.getUserTransaction();
  tx.begin();
  checkOutCheckInService.checkin(checkedOutDoc,null);
  tx.commit();
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(taggedFolder).size());
  taggedDocProps.clear();
  taggedDocProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  assertEquals(0,nodeService.getChildAssocs(container2).size());
  NodeRef taggedDoc2=this.nodeService.createNode(container2,ContentModel.ASSOC_CONTAINS,ContentModel.ASPECT_TAGGABLE,ContentModel.TYPE_CONTENT,taggedDocProps).getChildRef();
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  copyService.copy(taggedDoc,taggedDoc2);
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(2,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  assertEquals(container2,nodeService.getPrimaryParent(taggedDoc2).getParentRef());
  assertEquals(container2,taggingService.findTagScope(taggedDoc2).getNodeRef());
  NodeRef taggedFolder2=copyService.copy(taggedFolder,container2,ContentModel.ASSOC_CONTAINS,ContentModel.ASSOC_CHILDREN,true);
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(2,nodeService.getChildAssocs(container2).size());
  assertEquals(1,nodeService.getChildAssocs(taggedFolder2).size());
  assertEquals(2,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  tagsList.clear();
  tagsList.add(tagBar);
  taggedDocProps.clear();
  taggedDocProps.put(ContentModel.ASPECT_TAGGABLE,(Serializable)tagsList);
  taggedDocProps.put(ContentModel.PROP_NAME,""String_Node_Str"");
  this.nodeService.addProperties(taggedDoc,taggedDocProps);
  waitForActionExecution();
  assertEquals(3,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  taggedDoc=nodeService.moveNode(taggedDoc,container2,ContentModel.ASSOC_CONTAINS,ContentModel.ASPECT_TAGGABLE).getChildRef();
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(4,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(3,nodeService.getChildAssocs(container2).size());
  assertEquals(container2,nodeService.getPrimaryParent(taggedDoc).getParentRef());
  assertEquals(container2,taggingService.findTagScope(taggedDoc).getNodeRef());
  assertEquals(container2,nodeService.getPrimaryParent(taggedDoc2).getParentRef());
  assertEquals(container2,taggingService.findTagScope(taggedDoc2).getNodeRef());
  nodeService.deleteNode(taggedDoc);
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(2,nodeService.getChildAssocs(container2).size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(3,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(null,taggingService.findTagScope(container2).getTag(""String_Node_Str""));
  nodeService.deleteNode(taggedDoc2);
  waitForActionExecution();
  assertEquals(2,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(1,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container1).getTag(""String_Node_Str"").getCount());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(null,taggingService.findTagScope(container2).getTag(""String_Node_Str""));
  nodeService.deleteNode(taggedFolder);
  waitForActionExecution();
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(3,taggingService.findTagScope(container2).getTags().size());
  assertEquals(0,nodeService.getChildAssocs(container1).size());
  assertEquals(1,nodeService.getChildAssocs(container2).size());
  assertEquals(2,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  assertEquals(1,taggingService.findTagScope(container2).getTag(""String_Node_Str"").getCount());
  nodeService.deleteNode(taggedFolder2);
  waitForActionExecution();
  assertEquals(0,taggingService.findTagScope(container1).getTags().size());
  assertEquals(0,taggingService.findTagScope(container2).getTags().size());
  assertEquals(0,nodeService.getChildAssocs(container1).size());
  assertEquals(0,nodeService.getChildAssocs(container2).size());
}",0.9398538504777963
172215,"@Override protected void onSetUpBeforeTransaction() throws Exception {
  super.onSetUpBeforeTransaction();
  this.taggingService=(TaggingService)this.applicationContext.getBean(""String_Node_Str"");
  this.nodeService=(NodeService)this.applicationContext.getBean(""String_Node_Str"");
  this.copyService=(CopyService)this.applicationContext.getBean(""String_Node_Str"");
  this.contentService=(ContentService)this.applicationContext.getBean(""String_Node_Str"");
  this.authenticationService=(MutableAuthenticationService)this.applicationContext.getBean(""String_Node_Str"");
  this.actionService=(ActionService)this.applicationContext.getBean(""String_Node_Str"");
  this.transactionService=(TransactionService)this.applicationContext.getBean(""String_Node_Str"");
  this.scriptService=(ScriptService)this.applicationContext.getBean(""String_Node_Str"");
  this.policyComponent=(PolicyComponent)this.applicationContext.getBean(""String_Node_Str"");
  if (init == false) {
    UserTransaction tx=this.transactionService.getUserTransaction();
    tx.begin();
    AuthenticationComponent authenticationComponent=(AuthenticationComponent)this.applicationContext.getBean(""String_Node_Str"");
    authenticationComponent.setSystemUserAsCurrentUser();
    TaggingServiceImplTest.storeRef=this.nodeService.createStore(StoreRef.PROTOCOL_WORKSPACE,""String_Node_Str"" + System.currentTimeMillis());
    TaggingServiceImplTest.rootNode=this.nodeService.getRootNode(TaggingServiceImplTest.storeRef);
    NodeRef catContainer=nodeService.createNode(TaggingServiceImplTest.rootNode,ContentModel.ASSOC_CHILDREN,QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str""),ContentModel.TYPE_CONTAINER).getChildRef();
    NodeRef catRoot=nodeService.createNode(catContainer,ContentModel.ASSOC_CHILDREN,QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str""),ContentModel.TYPE_CATEGORYROOT).getChildRef();
    nodeService.createNode(catRoot,ContentModel.ASSOC_CATEGORIES,ContentModel.ASPECT_TAGGABLE,ContentModel.TYPE_CATEGORY).getChildRef();
    this.policyComponent.bindClassBehaviour(AsynchronousActionExecutionQueuePolicies.OnAsyncActionExecute.QNAME,this,new JavaBehaviour(this,""String_Node_Str"",Behaviour.NotificationFrequency.EVERY_EVENT));
    init=true;
    tx.commit();
  }
}","@Override protected void onSetUpBeforeTransaction() throws Exception {
  super.onSetUpBeforeTransaction();
  this.taggingService=(TaggingService)this.applicationContext.getBean(""String_Node_Str"");
  this.nodeService=(NodeService)this.applicationContext.getBean(""String_Node_Str"");
  this.copyService=(CopyService)this.applicationContext.getBean(""String_Node_Str"");
  this.contentService=(ContentService)this.applicationContext.getBean(""String_Node_Str"");
  this.checkOutCheckInService=(CheckOutCheckInService)this.applicationContext.getBean(""String_Node_Str"");
  this.authenticationService=(MutableAuthenticationService)this.applicationContext.getBean(""String_Node_Str"");
  this.actionService=(ActionService)this.applicationContext.getBean(""String_Node_Str"");
  this.transactionService=(TransactionService)this.applicationContext.getBean(""String_Node_Str"");
  this.scriptService=(ScriptService)this.applicationContext.getBean(""String_Node_Str"");
  this.policyComponent=(PolicyComponent)this.applicationContext.getBean(""String_Node_Str"");
  if (init == false) {
    UserTransaction tx=this.transactionService.getUserTransaction();
    tx.begin();
    AuthenticationComponent authenticationComponent=(AuthenticationComponent)this.applicationContext.getBean(""String_Node_Str"");
    authenticationComponent.setSystemUserAsCurrentUser();
    TaggingServiceImplTest.storeRef=this.nodeService.createStore(StoreRef.PROTOCOL_WORKSPACE,""String_Node_Str"" + System.currentTimeMillis());
    TaggingServiceImplTest.rootNode=this.nodeService.getRootNode(TaggingServiceImplTest.storeRef);
    NodeRef catContainer=nodeService.createNode(TaggingServiceImplTest.rootNode,ContentModel.ASSOC_CHILDREN,QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str""),ContentModel.TYPE_CONTAINER).getChildRef();
    NodeRef catRoot=nodeService.createNode(catContainer,ContentModel.ASSOC_CHILDREN,QName.createQName(NamespaceService.CONTENT_MODEL_1_0_URI,""String_Node_Str""),ContentModel.TYPE_CATEGORYROOT).getChildRef();
    nodeService.createNode(catRoot,ContentModel.ASSOC_CATEGORIES,ContentModel.ASPECT_TAGGABLE,ContentModel.TYPE_CATEGORY).getChildRef();
    this.policyComponent.bindClassBehaviour(AsynchronousActionExecutionQueuePolicies.OnAsyncActionExecute.QNAME,this,new JavaBehaviour(this,""String_Node_Str"",Behaviour.NotificationFrequency.EVERY_EVENT));
    init=true;
    tx.commit();
  }
}",0.9773019271948608
172216,"/** 
 * Create CMISRendition by thumbnailNode and documentNode.
 * @param thumbnailNode thumbnail node reference
 * @param documentNode document node reference
 * @return CMISRendition
 */
private CMISRendition getRendition(NodeRef thumbnailNode,NodeRef documentNode){
  CMISRenditionImpl rendition=null;
  String thumbnailName=(String)nodeService.getProperty(thumbnailNode,ContentModel.PROP_THUMBNAIL_NAME);
  CMISRenditionKind kind=thumbnailNamesToKind.get(thumbnailName);
  if (thumbnailName != null && kind != null) {
    rendition=new CMISRenditionImpl();
    ContentData contentData=(ContentData)nodeService.getProperty(thumbnailNode,ContentModel.PROP_CONTENT);
    rendition.setNodeRef(thumbnailNode);
    rendition.setStreamId(thumbnailNode.toString());
    rendition.setRenditionDocumentId(documentNode.toString());
    rendition.setTitle(thumbnailName);
    rendition.setKind(kind);
    rendition.setMimeType(contentData.getMimetype());
    rendition.setLength((int)contentData.getSize());
    ImageResizeOptions imageAttributes=getImageAttributes(thumbnailName);
    if (imageAttributes != null) {
      rendition.setWidth(imageAttributes.getWidth());
      rendition.setHeight(imageAttributes.getHeight());
    }
  }
  return rendition;
}","/** 
 * Create CMISRendition by thumbnailNode and documentNode.
 * @param thumbnailNode thumbnail node reference
 * @param documentNode document node reference
 * @return CMISRendition
 */
private CMISRendition getRendition(NodeRef thumbnailNode,NodeRef documentNode){
  CMISRenditionImpl rendition=null;
  String thumbnailName=getThumbnailName(thumbnailNode);
  CMISRenditionKind kind=thumbnailNamesToKind.get(thumbnailName);
  if (thumbnailName != null && kind != null) {
    rendition=new CMISRenditionImpl();
    ContentData contentData=(ContentData)nodeService.getProperty(thumbnailNode,ContentModel.PROP_CONTENT);
    rendition.setNodeRef(thumbnailNode);
    rendition.setStreamId(thumbnailNode.toString());
    rendition.setRenditionDocumentId(documentNode.toString());
    rendition.setTitle(thumbnailName);
    rendition.setKind(kind);
    rendition.setMimeType(contentData.getMimetype());
    rendition.setLength((int)contentData.getSize());
    ImageResizeOptions imageAttributes=getImageAttributes(thumbnailName);
    if (imageAttributes != null) {
      rendition.setWidth(imageAttributes.getWidth());
      rendition.setHeight(imageAttributes.getHeight());
    }
  }
  return rendition;
}",0.9567699836867865
172217,"/** 
 * Set rendition kind mapping.
 * @param RenditionKind to Thumbnail Definition mapping
 */
public void setRenditionKindMapping(Map<String,List<String>> renditionKinds){
  this.kindToThumbnailNames=renditionKinds;
  for (  Entry<String,List<String>> entry : renditionKinds.entrySet()) {
    CMISRenditionKind kind=null;
    for (    CMISRenditionKind renditionKind : CMISRenditionKind.values()) {
      if (renditionKind.getLabel().equals(entry.getKey())) {
        kind=renditionKind;
      }
    }
    for (    String thumbnailName : entry.getValue()) {
      thumbnailNamesToKind.put(thumbnailName,kind);
    }
  }
}","/** 
 * Set rendition kind mapping.
 * @param RenditionKind to Thumbnail Definition mapping
 */
public void setRenditionKindMapping(Map<String,List<String>> renditionKinds){
  this.kindToThumbnailNames=renditionKinds;
  for (  Entry<String,List<String>> entry : renditionKinds.entrySet()) {
    CMISRenditionKind kind=CMISRenditionKind.valueOfLabel(entry.getKey());
    for (    String thumbnailName : entry.getValue()) {
      thumbnailNamesToKind.put(thumbnailName,kind);
    }
  }
}",0.8465703971119134
172218,"/** 
 * @see #initCacheManager()
 */
public void stop(){
synchronized (getClass()) {
    if (logger.isDebugEnabled()) {
      String[] caches=InternalEhCacheManagerFactoryBean.getInstance().getCacheNames();
      for (      String regionName : caches) {
        logger.debug(""String_Node_Str"" + regionName);
      }
    }
    InternalEhCacheManagerFactoryBean.getInstance().shutdown();
    initialized=false;
  }
}","/** 
 * @see #initCacheManager()
 */
public void stop(){
  if (Thread.currentThread().getName().contains(""String_Node_Str"")) {
    return;
  }
synchronized (getClass()) {
    if (logger.isDebugEnabled()) {
      String[] caches=InternalEhCacheManagerFactoryBean.getInstance().getCacheNames();
      for (      String regionName : caches) {
        logger.debug(""String_Node_Str"" + regionName);
      }
    }
    if (initialized) {
      InternalEhCacheManagerFactoryBean.getInstance().shutdown();
      initialized=false;
    }
  }
}",0.8743400211193242
172219,"/** 
 * This test method uses the RenditionService to render a test document (of type PDF) into a different format (of type application/x-shockwave-flash).
 */
public void testRenderPdfDocumentToFlash() throws Exception {
  this.setComplete();
  this.endTransaction();
  this.renditionNode=transactionHelper.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Throwable {
      assertFalse(""String_Node_Str"",nodeService.hasAspect(nodeWithDocContent,RenditionModel.ASPECT_RENDITIONED));
      validateRenderingActionDefinition(ReformatRenderingEngine.NAME);
      RenditionDefinition action=makeReformatAction(null,MimetypeMap.MIMETYPE_FLASH);
      action.setParameterValue(ReformatRenderingEngine.PARAM_FLASH_VERSION,""String_Node_Str"");
      ChildAssociationRef renditionAssoc=renditionService.render(nodeWithDocContent,action);
      assertEquals(""String_Node_Str"",nodeWithDocContent,renditionAssoc.getParentRef());
      validateRenditionAssociation(renditionAssoc,REFORMAT_RENDER_DEFN_NAME);
      assertEquals(""String_Node_Str"",1,nodeService.getParentAssocs(renditionNode).size());
      assertTrue(""String_Node_Str"",nodeService.hasAspect(nodeWithDocContent,RenditionModel.ASPECT_RENDITIONED));
      return renditionNode;
    }
  }
);
  assertNotNull(""String_Node_Str"",renditionNode);
}","/** 
 * This test method uses the RenditionService to render a test document (of type PDF) into a different format (of type application/x-shockwave-flash).
 */
public void testRenderPdfDocumentToFlash() throws Exception {
  this.setComplete();
  this.endTransaction();
  this.renditionNode=transactionHelper.doInTransaction(new RetryingTransactionHelper.RetryingTransactionCallback<NodeRef>(){
    public NodeRef execute() throws Throwable {
      assertFalse(""String_Node_Str"",nodeService.hasAspect(nodeWithDocContent,RenditionModel.ASPECT_RENDITIONED));
      validateRenderingActionDefinition(ReformatRenderingEngine.NAME);
      RenditionDefinition action=makeReformatAction(null,MimetypeMap.MIMETYPE_FLASH);
      action.setParameterValue(ReformatRenderingEngine.PARAM_FLASH_VERSION,""String_Node_Str"");
      ChildAssociationRef renditionAssoc=renditionService.render(nodeWithDocContent,action);
      assertEquals(""String_Node_Str"",nodeWithDocContent,renditionAssoc.getParentRef());
      validateRenditionAssociation(renditionAssoc,REFORMAT_RENDER_DEFN_NAME);
      assertEquals(""String_Node_Str"",1,nodeService.getParentAssocs(renditionAssoc.getChildRef()).size());
      assertTrue(""String_Node_Str"",nodeService.hasAspect(nodeWithDocContent,RenditionModel.ASPECT_RENDITIONED));
      return renditionAssoc.getChildRef();
    }
  }
);
  assertNotNull(""String_Node_Str"",renditionNode);
}",0.983309143686502
172220,"/** 
 * Called during the transaction setup
 */
protected void onSetUpInTransaction() throws Exception {
  super.onSetUpInTransaction();
  this.transferService=(TransferService)this.applicationContext.getBean(""String_Node_Str"");
  this.contentService=(ContentService)this.applicationContext.getBean(""String_Node_Str"");
  this.searchService=(SearchService)this.applicationContext.getBean(""String_Node_Str"");
}","/** 
 * Called during the transaction setup
 */
protected void onSetUpInTransaction() throws Exception {
  super.onSetUpInTransaction();
  this.transferService=(TransferService)this.applicationContext.getBean(""String_Node_Str"");
  this.contentService=(ContentService)this.applicationContext.getBean(""String_Node_Str"");
}",0.8791208791208791
172221,"public void testSnapshot() throws Exception {
  String CONTENT_STRING=""String_Node_Str"";
  Locale CONTENT_LOCALE=Locale.TAIWAN;
  String CONTENT_TITLE=""String_Node_Str"";
  String CONTENT_NAME=""String_Node_Str"";
  String CONTENT_ASSOC_NAME=""String_Node_Str"";
  String snapshotMe=""String_Node_Str"";
  String title=""String_Node_Str"";
  String description=""String_Node_Str"";
  String endpointProtocol=""String_Node_Str"";
  String endpointHost=""String_Node_Str"";
  int endpointPort=8080;
  String endpointPath=""String_Node_Str"";
  String username=""String_Node_Str"";
  char[] password=""String_Node_Str"".toCharArray();
  Map<NodeRef,TransferManifestNode> sentNodes=new HashMap<NodeRef,TransferManifestNode>();
  TransferManifestNodeFactoryImpl nodeFactory=new TransferManifestNodeFactoryImpl();
  nodeFactory.setNodeService(nodeService);
  TransferTarget target=transferService.createTransferTarget(snapshotMe,title,description,endpointProtocol,endpointHost,endpointPort,endpointPath,username,password);
  File snapshotFile=null;
  try {
    ChildAssociationRef child=nodeService.createNode(target.getNodeRef(),ContentModel.ASSOC_CONTAINS,QName.createQName(CONTENT_ASSOC_NAME),ContentModel.TYPE_CONTENT);
    NodeRef childNodeRef=child.getChildRef();
    ContentWriter writer=contentService.getWriter(childNodeRef,ContentModel.PROP_CONTENT,true);
    writer.setLocale(CONTENT_LOCALE);
    writer.putContent(CONTENT_STRING);
    nodeService.setProperty(childNodeRef,ContentModel.PROP_TITLE,CONTENT_TITLE);
    nodeService.setProperty(childNodeRef,ContentModel.PROP_NAME,CONTENT_NAME);
    snapshotFile=TempFileProvider.createTempFile(""String_Node_Str"",""String_Node_Str"");
    FileWriter snapshotWriter=new FileWriter(snapshotFile);
    Set<NodeRef> nodes=new HashSet<NodeRef>();
    nodes.add(nodeService.getRootNode(StoreRef.STORE_REF_WORKSPACE_SPACESSTORE));
    nodes.add(target.getNodeRef());
    nodes.add(childNodeRef);
    TransferManifestWriter formatter=new XMLTransferManifestWriter();
    TransferManifestHeader header=new TransferManifestHeader();
    header.setCreatedDate(new Date());
    formatter.startTransferManifest(snapshotWriter);
    formatter.writeTransferManifestHeader(header);
    for (    NodeRef nodeRef : nodes) {
      TransferManifestNode node=nodeFactory.createTransferManifestNode(nodeRef);
      formatter.writeTransferManifestNode(node);
      sentNodes.put(nodeRef,node);
    }
    formatter.endTransferManifest();
    snapshotWriter.close();
    outputFile(snapshotFile);
    TestTransferManifestProcessor processor=new TestTransferManifestProcessor();
    XMLTransferManifestReader reader=new XMLTransferManifestReader(processor);
    SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
    SAXParser parser=saxParserFactory.newSAXParser();
    parser.parse(snapshotFile,reader);
    assertEquals(""String_Node_Str"",nodes.size(),processor.getNodes().size());
    assertNotNull(""String_Node_Str"",processor.getHeader());
    for (    NodeRef nodeId : nodes) {
      System.out.println(""String_Node_Str"" + nodeId);
      TransferManifestNormalNode readNode=(TransferManifestNormalNode)processor.getNodes().get(nodeId);
      TransferManifestNormalNode writeNode=(TransferManifestNormalNode)sentNodes.get(nodeId);
      assertNotNull(""String_Node_Str"",readNode);
      assertNotNull(""String_Node_Str"",writeNode);
      assertEquals(""String_Node_Str"",writeNode.getType(),readNode.getType());
      assertEquals(""String_Node_Str"",writeNode.getNodeRef(),readNode.getNodeRef());
      assertEquals(""String_Node_Str"",writeNode.getPrimaryParentAssoc(),readNode.getPrimaryParentAssoc());
      if (writeNode.getParentPath() != null) {
        assertEquals(""String_Node_Str"",writeNode.getParentPath().toString(),readNode.getParentPath().toString());
      }
      assertEquals(""String_Node_Str"",writeNode.getAspects().size(),readNode.getAspects().size());
      for (      QName aspect : writeNode.getAspects()) {
        assertTrue(""String_Node_Str"",readNode.getAspects().contains(aspect));
      }
      assertEquals(""String_Node_Str"",writeNode.getProperties().size(),readNode.getProperties().size());
      for (      QName prop : writeNode.getProperties().keySet()) {
        assertTrue(""String_Node_Str"",readNode.getProperties().containsKey(prop));
      }
      assertEquals(""String_Node_Str"",writeNode.getChildAssocs().size(),readNode.getChildAssocs().size());
      assertEquals(""String_Node_Str"",writeNode.getParentAssocs().size(),readNode.getParentAssocs().size());
      assertEquals(""String_Node_Str"",writeNode.getSourceAssocs().size(),readNode.getSourceAssocs().size());
      assertEquals(""String_Node_Str"",writeNode.getTargetAssocs().size(),readNode.getTargetAssocs().size());
      if (readNode.getNodeRef().equals(childNodeRef)) {
        ContentData data=(ContentData)readNode.getProperties().get(ContentModel.PROP_CONTENT);
        assertEquals(""String_Node_Str"",data.getSize(),CONTENT_STRING.length());
        assertEquals(""String_Node_Str"",data.getLocale(),CONTENT_LOCALE);
        String childTitle=(String)readNode.getProperties().get(ContentModel.PROP_TITLE);
        assertEquals(""String_Node_Str"",childTitle,CONTENT_TITLE);
        String childName=(String)readNode.getProperties().get(ContentModel.PROP_NAME);
        assertEquals(""String_Node_Str"",childName,CONTENT_NAME);
        assertTrue(""String_Node_Str"",readNode.getParentAssocs().size() == 1);
        assertTrue(""String_Node_Str"",readNode.getParentAssocs().get(0).isPrimary());
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getQName(),QName.createQName(CONTENT_ASSOC_NAME));
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getTypeQName(),ContentModel.ASSOC_CONTAINS);
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getChildRef(),childNodeRef);
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getParentRef(),readNode.getPrimaryParentAssoc());
        assertTrue(""String_Node_Str"",readNode.getChildAssocs().size() == 0);
        assertEquals(readNode.getParentAssocs().get(0),TransferManifestNodeHelper.getPrimaryParentAssoc(readNode));
        Set<ContentData> content=TransferManifestNodeHelper.getContentData(readNode);
        assertEquals(""String_Node_Str"",content.size(),1);
      }
    }
  }
  finally {
    if (snapshotFile != null) {
      snapshotFile.delete();
    }
    transferService.deleteTransferTarget(snapshotMe);
  }
}","public void testSnapshot() throws Exception {
  String CONTENT_STRING=""String_Node_Str"";
  Locale CONTENT_LOCALE=Locale.TAIWAN;
  String CONTENT_TITLE=""String_Node_Str"";
  String CONTENT_NAME=""String_Node_Str"";
  String CONTENT_ASSOC_NAME=""String_Node_Str"";
  String snapshotMe=""String_Node_Str"";
  String title=""String_Node_Str"";
  String description=""String_Node_Str"";
  String endpointProtocol=""String_Node_Str"";
  String endpointHost=""String_Node_Str"";
  int endpointPort=8080;
  String endpointPath=""String_Node_Str"";
  String username=""String_Node_Str"";
  char[] password=""String_Node_Str"".toCharArray();
  Map<NodeRef,TransferManifestNode> sentNodes=new HashMap<NodeRef,TransferManifestNode>();
  TransferManifestNodeFactoryImpl nodeFactory=new TransferManifestNodeFactoryImpl();
  nodeFactory.setNodeService(nodeService);
  TransferTarget target=transferService.createTransferTarget(snapshotMe,title,description,endpointProtocol,endpointHost,endpointPort,endpointPath,username,password);
  File snapshotFile=null;
  try {
    ChildAssociationRef child=nodeService.createNode(target.getNodeRef(),ContentModel.ASSOC_CONTAINS,QName.createQName(CONTENT_ASSOC_NAME),ContentModel.TYPE_CONTENT);
    NodeRef childNodeRef=child.getChildRef();
    ContentWriter writer=contentService.getWriter(childNodeRef,ContentModel.PROP_CONTENT,true);
    writer.setLocale(CONTENT_LOCALE);
    writer.putContent(CONTENT_STRING);
    nodeService.setProperty(childNodeRef,ContentModel.PROP_TITLE,CONTENT_TITLE);
    nodeService.setProperty(childNodeRef,ContentModel.PROP_NAME,CONTENT_NAME);
    snapshotFile=TempFileProvider.createTempFile(""String_Node_Str"",""String_Node_Str"");
    FileWriter snapshotWriter=new FileWriter(snapshotFile);
    Set<NodeRef> nodes=new HashSet<NodeRef>();
    nodes.add(nodeService.getRootNode(StoreRef.STORE_REF_WORKSPACE_SPACESSTORE));
    nodes.add(target.getNodeRef());
    nodes.add(childNodeRef);
    TransferManifestWriter formatter=new XMLTransferManifestWriter();
    TransferManifestHeader header=new TransferManifestHeader();
    header.setNodeCount(nodes.size());
    header.setCreatedDate(new Date());
    formatter.startTransferManifest(snapshotWriter);
    formatter.writeTransferManifestHeader(header);
    for (    NodeRef nodeRef : nodes) {
      TransferManifestNode node=nodeFactory.createTransferManifestNode(nodeRef);
      formatter.writeTransferManifestNode(node);
      sentNodes.put(nodeRef,node);
    }
    formatter.endTransferManifest();
    snapshotWriter.close();
    outputFile(snapshotFile);
    TestTransferManifestProcessor processor=new TestTransferManifestProcessor();
    XMLTransferManifestReader reader=new XMLTransferManifestReader(processor);
    SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
    SAXParser parser=saxParserFactory.newSAXParser();
    parser.parse(snapshotFile,reader);
    assertEquals(""String_Node_Str"",nodes.size(),processor.getNodes().size());
    assertNotNull(""String_Node_Str"",processor.getHeader());
    for (    NodeRef nodeId : nodes) {
      System.out.println(""String_Node_Str"" + nodeId);
      TransferManifestNormalNode readNode=(TransferManifestNormalNode)processor.getNodes().get(nodeId);
      TransferManifestNormalNode writeNode=(TransferManifestNormalNode)sentNodes.get(nodeId);
      assertNotNull(""String_Node_Str"",readNode);
      assertNotNull(""String_Node_Str"",writeNode);
      assertEquals(""String_Node_Str"",writeNode.getType(),readNode.getType());
      assertEquals(""String_Node_Str"",writeNode.getNodeRef(),readNode.getNodeRef());
      assertEquals(""String_Node_Str"",writeNode.getPrimaryParentAssoc(),readNode.getPrimaryParentAssoc());
      if (writeNode.getParentPath() != null) {
        assertEquals(""String_Node_Str"",writeNode.getParentPath().toString(),readNode.getParentPath().toString());
      }
      assertEquals(""String_Node_Str"",writeNode.getAspects().size(),readNode.getAspects().size());
      for (      QName aspect : writeNode.getAspects()) {
        assertTrue(""String_Node_Str"",readNode.getAspects().contains(aspect));
      }
      assertEquals(""String_Node_Str"",writeNode.getProperties().size(),readNode.getProperties().size());
      for (      QName prop : writeNode.getProperties().keySet()) {
        assertTrue(""String_Node_Str"",readNode.getProperties().containsKey(prop));
      }
      assertEquals(""String_Node_Str"",writeNode.getChildAssocs().size(),readNode.getChildAssocs().size());
      assertEquals(""String_Node_Str"",writeNode.getParentAssocs().size(),readNode.getParentAssocs().size());
      assertEquals(""String_Node_Str"",writeNode.getSourceAssocs().size(),readNode.getSourceAssocs().size());
      assertEquals(""String_Node_Str"",writeNode.getTargetAssocs().size(),readNode.getTargetAssocs().size());
      if (readNode.getNodeRef().equals(childNodeRef)) {
        ContentData data=(ContentData)readNode.getProperties().get(ContentModel.PROP_CONTENT);
        assertEquals(""String_Node_Str"",data.getSize(),CONTENT_STRING.length());
        assertEquals(""String_Node_Str"",data.getLocale(),CONTENT_LOCALE);
        String childTitle=(String)readNode.getProperties().get(ContentModel.PROP_TITLE);
        assertEquals(""String_Node_Str"",childTitle,CONTENT_TITLE);
        String childName=(String)readNode.getProperties().get(ContentModel.PROP_NAME);
        assertEquals(""String_Node_Str"",childName,CONTENT_NAME);
        assertTrue(""String_Node_Str"",readNode.getParentAssocs().size() == 1);
        assertTrue(""String_Node_Str"",readNode.getParentAssocs().get(0).isPrimary());
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getQName(),QName.createQName(CONTENT_ASSOC_NAME));
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getTypeQName(),ContentModel.ASSOC_CONTAINS);
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getChildRef(),childNodeRef);
        assertEquals(""String_Node_Str"",readNode.getParentAssocs().get(0).getParentRef(),target.getNodeRef());
        assertTrue(""String_Node_Str"",readNode.getChildAssocs().size() == 0);
        assertEquals(readNode.getParentAssocs().get(0),TransferManifestNodeHelper.getPrimaryParentAssoc(readNode));
        Set<ContentData> content=TransferManifestNodeHelper.getContentData(readNode);
        assertEquals(""String_Node_Str"",content.size(),1);
      }
    }
  }
  finally {
    if (snapshotFile != null) {
      snapshotFile.delete();
    }
    transferService.deleteTransferTarget(snapshotMe);
  }
}",0.993351886209029
172222,"/** 
 * Start Element
 */
public void startElement(String uri,String localName,String prefixName,Attributes atts) throws SAXException {
  QName elementQName=QName.resolveToQName(this,prefixName);
  HashMap<String,String> namespace=new HashMap<String,String>();
  namespaces.addFirst(namespace);
  for (int i=0; i < atts.getLength(); i++) {
    QName attributeQName=QName.resolveToQName(this,atts.getQName(i));
    if (attributeQName.getNamespaceURI().equals(XMLNS_URI)) {
      namespace.put(attributeQName.getLocalName(),atts.getValue(i));
    }
  }
  if (elementQName == null) {
    return;
  }
  if (elementQName.getNamespaceURI().equals(TRANSFER_URI))   ;
{
    String elementName=elementQName.getLocalName();
    if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_MAINIFEST)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_HEADER)) {
      TransferManifestHeader header=new TransferManifestHeader();
      props.put(""String_Node_Str"",header);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_DELETED_NODE)) {
      TransferManifestDeletedNode node=new TransferManifestDeletedNode();
      NodeRef nodeRef=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      node.setNodeRef(nodeRef);
      props.put(""String_Node_Str"",node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_NODE)) {
      TransferManifestNormalNode node=new TransferManifestNormalNode();
      NodeRef nodeRef=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      node.setNodeRef(nodeRef);
      node.setType(type);
      props.put(""String_Node_Str"",node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECTS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      node.setAspects(new HashSet<QName>());
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECT)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTIES)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      HashMap<QName,Serializable> properties=new HashMap<QName,Serializable>();
      node.setProperties(properties);
      props.put(""String_Node_Str"",properties);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTY)) {
      QName name=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",name);
      props.remove(""String_Node_Str"");
      props.remove(""String_Node_Str"");
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_CREATED_DATE)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_NODE_COUNT)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      node.setChildAssocs(new ArrayList<ChildAssociationRef>());
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOC)) {
      buffer=new StringBuffer();
      NodeRef to=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      Boolean isPrimary=Boolean.parseBoolean(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",to);
      props.put(""String_Node_Str"",type);
      props.put(""String_Node_Str"",isPrimary);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOC)) {
      buffer=new StringBuffer();
      NodeRef from=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      Boolean isPrimary=Boolean.parseBoolean(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",from);
      props.put(""String_Node_Str"",type);
      props.put(""String_Node_Str"",isPrimary);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_TARGET_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      List<AssociationRef> assocs=new ArrayList<AssociationRef>();
      node.setTargetAssocs(assocs);
      props.put(""String_Node_Str"",assocs);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_SOURCE_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      List<AssociationRef> assocs=new ArrayList<AssociationRef>();
      node.setSourceAssocs(assocs);
      props.put(""String_Node_Str"",assocs);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASSOC)) {
      NodeRef source=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      NodeRef target=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",source);
      props.put(""String_Node_Str"",target);
      props.put(""String_Node_Str"",type);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PRIMARY_PARENT)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUES)) {
      Collection<Serializable> values=new ArrayList<Serializable>();
      props.put(""String_Node_Str"",values);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_STRING)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_NULL)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_SERIALIZED)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_MLVALUE)) {
      MLText mltext=(MLText)props.get(""String_Node_Str"");
      if (mltext == null) {
        mltext=new MLText();
        props.put(""String_Node_Str"",mltext);
      }
      String strLocale=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      Locale locale=I18NUtil.parseLocale(strLocale);
      props.put(""String_Node_Str"",locale);
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CONTENT_HEADER)) {
      String contentURL=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      String mimetype=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      String strLocale=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      Locale locale=I18NUtil.parseLocale(strLocale);
      String encoding=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      String sizeStr=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      Long size=Long.valueOf(sizeStr);
      ContentData contentHeader=new ContentData(contentURL,mimetype,size.longValue(),encoding,locale);
      props.put(""String_Node_Str"",contentHeader);
    }
  }
}","/** 
 * Start Element
 */
public void startElement(String uri,String localName,String prefixName,Attributes atts) throws SAXException {
  QName elementQName=QName.resolveToQName(this,prefixName);
  HashMap<String,String> namespace=new HashMap<String,String>();
  namespaces.addFirst(namespace);
  for (int i=0; i < atts.getLength(); i++) {
    QName attributeQName=QName.resolveToQName(this,atts.getQName(i));
    if (attributeQName.getNamespaceURI().equals(XMLNS_URI)) {
      namespace.put(attributeQName.getLocalName(),atts.getValue(i));
    }
  }
  if (elementQName == null) {
    return;
  }
  if (elementQName.getNamespaceURI().equals(TRANSFER_URI))   ;
{
    String elementName=elementQName.getLocalName();
    if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_MAINIFEST)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_HEADER)) {
      TransferManifestHeader header=new TransferManifestHeader();
      props.put(""String_Node_Str"",header);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_DELETED_NODE)) {
      TransferManifestDeletedNode node=new TransferManifestDeletedNode();
      NodeRef nodeRef=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      node.setNodeRef(nodeRef);
      props.put(""String_Node_Str"",node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_NODE)) {
      TransferManifestNormalNode node=new TransferManifestNormalNode();
      NodeRef nodeRef=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      node.setNodeRef(nodeRef);
      node.setType(type);
      props.put(""String_Node_Str"",node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECTS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      node.setAspects(new HashSet<QName>());
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECT)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTIES)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      HashMap<QName,Serializable> properties=new HashMap<QName,Serializable>();
      node.setProperties(properties);
      props.put(""String_Node_Str"",properties);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTY)) {
      QName name=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",name);
      props.remove(""String_Node_Str"");
      props.remove(""String_Node_Str"");
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_CREATED_DATE)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_NODE_COUNT)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      ArrayList<ChildAssociationRef> parentAssocs=new ArrayList<ChildAssociationRef>();
      node.setParentAssocs(parentAssocs);
      props.put(""String_Node_Str"",parentAssocs);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      node.setChildAssocs(new ArrayList<ChildAssociationRef>());
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOC)) {
      buffer=new StringBuffer();
      NodeRef to=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      Boolean isPrimary=Boolean.parseBoolean(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",to);
      props.put(""String_Node_Str"",type);
      props.put(""String_Node_Str"",isPrimary);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOC)) {
      buffer=new StringBuffer();
      NodeRef from=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      Boolean isPrimary=Boolean.parseBoolean(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",from);
      props.put(""String_Node_Str"",type);
      props.put(""String_Node_Str"",isPrimary);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_TARGET_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      List<AssociationRef> assocs=new ArrayList<AssociationRef>();
      node.setTargetAssocs(assocs);
      props.put(""String_Node_Str"",assocs);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_SOURCE_ASSOCS)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      List<AssociationRef> assocs=new ArrayList<AssociationRef>();
      node.setSourceAssocs(assocs);
      props.put(""String_Node_Str"",assocs);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASSOC)) {
      NodeRef source=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      NodeRef target=new NodeRef(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      QName type=QName.createQName(atts.getValue(""String_Node_Str"",""String_Node_Str""));
      props.put(""String_Node_Str"",source);
      props.put(""String_Node_Str"",target);
      props.put(""String_Node_Str"",type);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PRIMARY_PARENT)) {
      buffer=new StringBuffer();
      ArrayList<ChildAssociationRef> parentAssocs=new ArrayList<ChildAssociationRef>();
      props.put(""String_Node_Str"",parentAssocs);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUES)) {
      Collection<Serializable> values=new ArrayList<Serializable>();
      props.put(""String_Node_Str"",values);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_STRING)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_NULL)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_SERIALIZED)) {
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_MLVALUE)) {
      MLText mltext=(MLText)props.get(""String_Node_Str"");
      if (mltext == null) {
        mltext=new MLText();
        props.put(""String_Node_Str"",mltext);
      }
      String strLocale=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      Locale locale=I18NUtil.parseLocale(strLocale);
      props.put(""String_Node_Str"",locale);
      buffer=new StringBuffer();
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CONTENT_HEADER)) {
      String contentURL=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      String mimetype=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      String strLocale=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      Locale locale=I18NUtil.parseLocale(strLocale);
      String encoding=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      String sizeStr=(String)atts.getValue(""String_Node_Str"",""String_Node_Str"");
      Long size=Long.valueOf(sizeStr);
      ContentData contentHeader=new ContentData(contentURL,mimetype,size.longValue(),encoding,locale);
      props.put(""String_Node_Str"",contentHeader);
    }
  }
}",0.979122621564482
172223,"/** 
 * End Element
 */
@SuppressWarnings(""String_Node_Str"") public void endElement(String uri,String localName,String prefixName) throws SAXException {
  namespaces.removeFirst();
  QName elementQName=QName.resolveToQName(this,prefixName);
  if (elementQName == null) {
    return;
  }
  if (elementQName.getNamespaceURI().equals(TRANSFER_URI))   ;
{
    String elementName=elementQName.getLocalName();
    if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_MAINIFEST)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_HEADER)) {
      TransferManifestHeader header=(TransferManifestHeader)props.get(""String_Node_Str"");
      processor.processTransferManifiestHeader(header);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_NODE)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      processor.processTransferManifestNode(node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_DELETED_NODE)) {
      TransferManifestDeletedNode node=(TransferManifestDeletedNode)props.get(""String_Node_Str"");
      processor.processTransferManifestNode(node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECTS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECT)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      node.getAspects().add(QName.createQName(buffer.toString()));
      buffer=null;
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTIES)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTY)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      QName name=(QName)props.get(""String_Node_Str"");
      Serializable value=(Serializable)props.get(""String_Node_Str"");
      node.getProperties().put(name,value);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_CREATED_DATE)) {
      TransferManifestHeader header=(TransferManifestHeader)props.get(""String_Node_Str"");
      header.setCreatedDate(ISO8601DateFormat.parse(buffer.toString()));
      buffer=null;
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_NODE_COUNT)) {
      TransferManifestHeader header=(TransferManifestHeader)props.get(""String_Node_Str"");
      header.setNodeCount(Integer.parseInt(buffer.toString()));
      buffer=null;
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOC)) {
      String value=buffer.toString();
      QName name=QName.createQName(value);
      NodeRef to=(NodeRef)props.get(""String_Node_Str"");
      QName type=(QName)props.get(""String_Node_Str"");
      Boolean isPrimary=(Boolean)props.get(""String_Node_Str"");
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      ChildAssociationRef childAssociationRef=new ChildAssociationRef(type,node.getNodeRef(),name,to,isPrimary,-1);
      node.getChildAssocs().add(childAssociationRef);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOC)) {
      String value=buffer.toString();
      QName name=QName.createQName(value);
      NodeRef from=(NodeRef)props.get(""String_Node_Str"");
      QName type=(QName)props.get(""String_Node_Str"");
      Boolean isPrimary=(Boolean)props.get(""String_Node_Str"");
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      ChildAssociationRef childAssociationRef=new ChildAssociationRef(type,from,name,node.getNodeRef(),isPrimary,-1);
      if (TransferManifestNormalNode.class.isAssignableFrom(node.getClass())) {
        TransferManifestNormalNode normalNode=(TransferManifestNormalNode)node;
        List<ChildAssociationRef> parents=normalNode.getParentAssocs();
        if (parents == null) {
          parents=new ArrayList<ChildAssociationRef>();
          normalNode.setParentAssocs(parents);
        }
        parents.add(childAssociationRef);
      }
      if (isPrimary) {
        node.setPrimaryParentAssoc(childAssociationRef);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_TARGET_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_SOURCE_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASSOC)) {
      NodeRef source=(NodeRef)props.get(""String_Node_Str"");
      NodeRef target=(NodeRef)props.get(""String_Node_Str"");
      QName type=(QName)props.get(""String_Node_Str"");
      List<AssociationRef> assocs=(List<AssociationRef>)props.get(""String_Node_Str"");
      AssociationRef assoc=new AssociationRef(null,source,type,target);
      assocs.add(assoc);
      props.put(""String_Node_Str"",new AssociationRef(null,source,type,target));
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PRIMARY_PATH)) {
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      String value=buffer.toString();
      Path path=PathHelper.stringToPath(value);
      node.setParentPath(path);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUES)) {
      props.put(""String_Node_Str"",props.get(""String_Node_Str""));
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_STRING)) {
      Collection<Serializable> values=(Collection<Serializable>)props.get(""String_Node_Str"");
      String value=buffer.toString();
      if (values != null) {
        values.add(value);
      }
 else {
        props.put(""String_Node_Str"",value);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_NULL)) {
      Collection<Serializable> values=(Collection<Serializable>)props.get(""String_Node_Str"");
      if (values != null) {
        values.add(null);
      }
 else {
        props.put(""String_Node_Str"",null);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_SERIALIZED)) {
      Collection<Serializable> values=(Collection<Serializable>)props.get(""String_Node_Str"");
      String strValue=buffer.toString();
      Object value=null;
      try {
        byte[] data=Base64.decode(strValue.getBytes(""String_Node_Str""));
        ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));
        value=ois.readObject();
      }
 catch (      IOException error) {
        error.printStackTrace();
      }
catch (      ClassNotFoundException error) {
        error.printStackTrace();
      }
      if (values != null) {
        values.add((Serializable)value);
      }
 else {
        props.put(""String_Node_Str"",value);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_MLVALUE)) {
      MLText mltext=(MLText)props.get(""String_Node_Str"");
      Locale locale=(Locale)props.get(""String_Node_Str"");
      String value=buffer.toString();
      mltext.addValue(locale,value);
      props.put(""String_Node_Str"",mltext);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CONTENT_HEADER)) {
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      ContentData data=(ContentData)props.get(""String_Node_Str"");
      props.put(""String_Node_Str"",data);
    }
  }
}","/** 
 * End Element
 */
@SuppressWarnings(""String_Node_Str"") public void endElement(String uri,String localName,String prefixName) throws SAXException {
  namespaces.removeFirst();
  QName elementQName=QName.resolveToQName(this,prefixName);
  if (elementQName == null) {
    return;
  }
  if (elementQName.getNamespaceURI().equals(TRANSFER_URI))   ;
{
    String elementName=elementQName.getLocalName();
    if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_MAINIFEST)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_TRANSFER_HEADER)) {
      TransferManifestHeader header=(TransferManifestHeader)props.get(""String_Node_Str"");
      processor.processTransferManifiestHeader(header);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_NODE)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      processor.processTransferManifestNode(node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_DELETED_NODE)) {
      TransferManifestDeletedNode node=(TransferManifestDeletedNode)props.get(""String_Node_Str"");
      processor.processTransferManifestNode(node);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECTS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASPECT)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      node.getAspects().add(QName.createQName(buffer.toString()));
      buffer=null;
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTIES)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PROPERTY)) {
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      QName name=(QName)props.get(""String_Node_Str"");
      Serializable value=(Serializable)props.get(""String_Node_Str"");
      node.getProperties().put(name,value);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_CREATED_DATE)) {
      TransferManifestHeader header=(TransferManifestHeader)props.get(""String_Node_Str"");
      header.setCreatedDate(ISO8601DateFormat.parse(buffer.toString()));
      buffer=null;
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_HEADER_NODE_COUNT)) {
      TransferManifestHeader header=(TransferManifestHeader)props.get(""String_Node_Str"");
      header.setNodeCount(Integer.parseInt(buffer.toString()));
      buffer=null;
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CHILD_ASSOC)) {
      String value=buffer.toString();
      QName name=QName.createQName(value);
      NodeRef to=(NodeRef)props.get(""String_Node_Str"");
      QName type=(QName)props.get(""String_Node_Str"");
      Boolean isPrimary=(Boolean)props.get(""String_Node_Str"");
      TransferManifestNormalNode node=(TransferManifestNormalNode)props.get(""String_Node_Str"");
      ChildAssociationRef childAssociationRef=new ChildAssociationRef(type,node.getNodeRef(),name,to,isPrimary,-1);
      node.getChildAssocs().add(childAssociationRef);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PARENT_ASSOC)) {
      String value=buffer.toString();
      QName name=QName.createQName(value);
      NodeRef from=(NodeRef)props.get(""String_Node_Str"");
      QName type=(QName)props.get(""String_Node_Str"");
      Boolean isPrimary=(Boolean)props.get(""String_Node_Str"");
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      List<ChildAssociationRef> parentAssocs=(List<ChildAssociationRef>)props.get(""String_Node_Str"");
      ChildAssociationRef childAssociationRef=new ChildAssociationRef(type,from,name,node.getNodeRef(),isPrimary,-1);
      parentAssocs.add(childAssociationRef);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_TARGET_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_SOURCE_ASSOCS)) {
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_ASSOC)) {
      NodeRef source=(NodeRef)props.get(""String_Node_Str"");
      NodeRef target=(NodeRef)props.get(""String_Node_Str"");
      QName type=(QName)props.get(""String_Node_Str"");
      List<AssociationRef> assocs=(List<AssociationRef>)props.get(""String_Node_Str"");
      AssociationRef assoc=new AssociationRef(null,source,type,target);
      assocs.add(assoc);
      props.put(""String_Node_Str"",new AssociationRef(null,source,type,target));
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PRIMARY_PARENT)) {
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      List<ChildAssociationRef> parentAssocs=(List<ChildAssociationRef>)props.get(""String_Node_Str"");
      if (parentAssocs != null) {
        assert(parentAssocs.size() == 1);
        node.setPrimaryParentAssoc(parentAssocs.get(0));
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_PRIMARY_PATH)) {
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      String value=buffer.toString();
      Path path=PathHelper.stringToPath(value);
      node.setParentPath(path);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUES)) {
      props.put(""String_Node_Str"",props.get(""String_Node_Str""));
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_STRING)) {
      Collection<Serializable> values=(Collection<Serializable>)props.get(""String_Node_Str"");
      String value=buffer.toString();
      if (values != null) {
        values.add(value);
      }
 else {
        props.put(""String_Node_Str"",value);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_NULL)) {
      Collection<Serializable> values=(Collection<Serializable>)props.get(""String_Node_Str"");
      if (values != null) {
        values.add(null);
      }
 else {
        props.put(""String_Node_Str"",null);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_VALUE_SERIALIZED)) {
      Collection<Serializable> values=(Collection<Serializable>)props.get(""String_Node_Str"");
      String strValue=buffer.toString();
      Object value=null;
      try {
        byte[] data=Base64.decode(strValue.getBytes(""String_Node_Str""));
        ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));
        value=ois.readObject();
      }
 catch (      IOException error) {
        error.printStackTrace();
      }
catch (      ClassNotFoundException error) {
        error.printStackTrace();
      }
      if (values != null) {
        values.add((Serializable)value);
      }
 else {
        props.put(""String_Node_Str"",value);
      }
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_MLVALUE)) {
      MLText mltext=(MLText)props.get(""String_Node_Str"");
      Locale locale=(Locale)props.get(""String_Node_Str"");
      String value=buffer.toString();
      mltext.addValue(locale,value);
      props.put(""String_Node_Str"",mltext);
    }
 else     if (elementName.equals(ManifestModel.LOCALNAME_ELEMENT_CONTENT_HEADER)) {
      TransferManifestNode node=(TransferManifestNode)props.get(""String_Node_Str"");
      ContentData data=(ContentData)props.get(""String_Node_Str"");
      props.put(""String_Node_Str"",data);
    }
  }
}",0.9314117961035496
172224,"public void test_VERSION_LABEL(){
  CMISQueryOptions options=new CMISQueryOptions(""String_Node_Str"",rootNodeRef.getStoreRef());
  options.setDefaultFTSConnective(Connective.OR);
  options.setDefaultFTSFieldConnective(Connective.OR);
  CMISResultSet rs=cmisQueryService.query(options);
  assertEquals(file_count,rs.length());
  for (  @SuppressWarnings(""String_Node_Str"") CMISResultSetRow row : rs) {
    CMISResultSetColumn column=rs.getResultSetMetaData().getColumn(""String_Node_Str"");
    assertNotNull(column);
    assertEquals(CMISDataTypeEnum.STRING,column.getCMISDataType());
    assertEquals(CMISCardinalityEnum.SINGLE_VALUED,column.getCMISPropertyDefinition().getCardinality());
    assertTrue(column.getCMISPropertyDefinition().getPropertyAccessor() instanceof DirectProperty);
  }
  rs.close();
  options=new CMISQueryOptions(""String_Node_Str"",rootNodeRef.getStoreRef());
  options.setDefaultFTSConnective(Connective.OR);
  options.setDefaultFTSFieldConnective(Connective.OR);
  rs=cmisQueryService.query(options);
  assertEquals(1,rs.length());
  for (  CMISResultSetRow row : rs) {
    Serializable sValue=row.getValue(""String_Node_Str"");
    String value=DefaultTypeConverter.INSTANCE.convert(String.class,sValue);
    assertNotNull(value);
    assertEquals(""String_Node_Str"",value);
    CMISResultSetColumn column=rs.getResultSetMetaData().getColumn(""String_Node_Str"");
    assertEquals(CMISDataTypeEnum.STRING,column.getCMISDataType());
    assertEquals(CMISCardinalityEnum.SINGLE_VALUED,column.getCMISPropertyDefinition().getCardinality());
    assertTrue(column.getCMISPropertyDefinition().getPropertyAccessor() instanceof DirectProperty);
  }
  rs.close();
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",1,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",1,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",1,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",9,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),true);
}","public void test_VERSION_LABEL(){
  CMISQueryOptions options=new CMISQueryOptions(""String_Node_Str"",rootNodeRef.getStoreRef());
  options.setDefaultFTSConnective(Connective.OR);
  options.setDefaultFTSFieldConnective(Connective.OR);
  CMISResultSet rs=cmisQueryService.query(options);
  assertEquals(file_count,rs.length());
  for (  CMISResultSetRow row : rs) {
    CMISResultSetColumn column=rs.getResultSetMetaData().getColumn(""String_Node_Str"");
    assertNotNull(column);
    assertEquals(CMISDataTypeEnum.STRING,column.getCMISDataType());
    assertEquals(CMISCardinalityEnum.SINGLE_VALUED,column.getCMISPropertyDefinition().getCardinality());
    assertTrue(column.getCMISPropertyDefinition().getPropertyAccessor() instanceof DirectProperty);
  }
  rs.close();
  options=new CMISQueryOptions(""String_Node_Str"",rootNodeRef.getStoreRef());
  options.setDefaultFTSConnective(Connective.OR);
  options.setDefaultFTSFieldConnective(Connective.OR);
  rs=cmisQueryService.query(options);
  assertEquals(1,rs.length());
  for (  CMISResultSetRow row : rs) {
    Serializable sValue=row.getValue(""String_Node_Str"");
    String value=DefaultTypeConverter.INSTANCE.convert(String.class,sValue);
    assertNotNull(value);
    assertEquals(""String_Node_Str"",value);
    CMISResultSetColumn column=rs.getResultSetMetaData().getColumn(""String_Node_Str"");
    assertEquals(CMISDataTypeEnum.STRING,column.getCMISDataType());
    assertEquals(CMISCardinalityEnum.SINGLE_VALUED,column.getCMISPropertyDefinition().getCardinality());
    assertTrue(column.getCMISPropertyDefinition().getPropertyAccessor() instanceof DirectProperty);
  }
  rs.close();
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",1,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",1,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",1,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",9,false,""String_Node_Str"",new String(),false);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",0,false,""String_Node_Str"",new String(),true);
  testQuery(""String_Node_Str"",10,false,""String_Node_Str"",new String(),true);
}",0.9942087963687588
172225,"/** 
 * Ensures that all properties have been set
 */
public void afterPropertiesSet() throws Exception {
  Assert.notNull(name,""String_Node_Str"");
  Assert.notNull(cacheManager,""String_Node_Str"");
  resourceKeyTxnData=RESOURCE_KEY_TXN_DATA + ""String_Node_Str"" + name;
  logger=LogFactory.getLog(TransactionalCache.class + ""String_Node_Str"" + name);
  isDebugEnabled=logger.isDebugEnabled();
}","/** 
 * Ensures that all properties have been set
 */
public void afterPropertiesSet() throws Exception {
  Assert.notNull(name,""String_Node_Str"");
  Assert.notNull(cacheManager,""String_Node_Str"");
  resourceKeyTxnData=RESOURCE_KEY_TXN_DATA + ""String_Node_Str"" + name;
  logger=LogFactory.getLog(TransactionalCache.class.getName() + ""String_Node_Str"" + name);
  isDebugEnabled=logger.isDebugEnabled();
}",0.9874371859296482
172226,"@Override public void afterCommit(){
  try {
    transactionalCache.get(key);
  }
 catch (  Throwable e) {
    this.e=e;
    return;
  }
}","@Override public void afterCommit(){
  try {
    transactionalCache.put(key,value);
    transactionalCache.remove(key);
    transactionalCache.clear();
  }
 catch (  Throwable e) {
    this.e=e;
    return;
  }
}",0.7771428571428571
172227,"public void testTransactionalCacheWithSingleTxn() throws Throwable {
  String newGlobalOne=""String_Node_Str"";
  String newGlobalTwo=""String_Node_Str"";
  String newGlobalThree=""String_Node_Str"";
  String updatedTxnThree=""String_Node_Str"";
  backingCache.put(newGlobalOne,newGlobalOne);
  backingCache.put(newGlobalTwo,newGlobalTwo);
  backingCache.put(newGlobalThree,newGlobalThree);
  TransactionService transactionService=serviceRegistry.getTransactionService();
  UserTransaction txn=transactionService.getUserTransaction();
  try {
    txn.begin();
    transactionalCache.remove(newGlobalOne);
    assertFalse(""String_Node_Str"",transactionalCache.contains(newGlobalOne));
    assertNull(""String_Node_Str"",transactionalCache.get(newGlobalOne));
    assertTrue(""String_Node_Str"",backingCache.contains(newGlobalOne));
    transactionalCache.put(updatedTxnThree,""String_Node_Str"");
    assertEquals(""String_Node_Str"",""String_Node_Str"",transactionalCache.get(updatedTxnThree));
    assertFalse(""String_Node_Str"",backingCache.contains(updatedTxnThree));
    Collection<String> transactionalKeys=transactionalCache.getKeys();
    assertFalse(""String_Node_Str"",transactionalKeys.contains(newGlobalOne));
    assertTrue(""String_Node_Str"",transactionalKeys.contains(updatedTxnThree));
    PostCommitCacheUser listener=new PostCommitCacheUser(transactionalCache,updatedTxnThree);
    AlfrescoTransactionSupport.bindListener(listener);
    txn.commit();
    if (listener.e != null) {
      throw listener.e;
    }
    assertFalse(""String_Node_Str"",backingCache.contains(newGlobalOne));
    assertNull(""String_Node_Str"",backingCache.get(newGlobalOne));
    assertEquals(""String_Node_Str"",""String_Node_Str"",backingCache.get(updatedTxnThree));
    assertEquals(""String_Node_Str"",""String_Node_Str"",transactionalCache.get(updatedTxnThree));
  }
 catch (  Throwable e) {
    if (txn.getStatus() == Status.STATUS_ACTIVE) {
      txn.rollback();
    }
    throw e;
  }
}","public void testTransactionalCacheWithSingleTxn() throws Throwable {
  String newGlobalOne=""String_Node_Str"";
  String newGlobalTwo=""String_Node_Str"";
  String newGlobalThree=""String_Node_Str"";
  String updatedTxnThree=""String_Node_Str"";
  String updatedTxnFour=""String_Node_Str"";
  backingCache.put(newGlobalOne,newGlobalOne);
  backingCache.put(newGlobalTwo,newGlobalTwo);
  backingCache.put(newGlobalThree,newGlobalThree);
  TransactionService transactionService=serviceRegistry.getTransactionService();
  UserTransaction txn=transactionService.getUserTransaction();
  try {
    txn.begin();
    transactionalCache.remove(newGlobalOne);
    assertFalse(""String_Node_Str"",transactionalCache.contains(newGlobalOne));
    assertNull(""String_Node_Str"",transactionalCache.get(newGlobalOne));
    assertTrue(""String_Node_Str"",backingCache.contains(newGlobalOne));
    transactionalCache.put(updatedTxnThree,""String_Node_Str"");
    assertEquals(""String_Node_Str"",""String_Node_Str"",transactionalCache.get(updatedTxnThree));
    assertFalse(""String_Node_Str"",backingCache.contains(updatedTxnThree));
    Collection<String> transactionalKeys=transactionalCache.getKeys();
    assertFalse(""String_Node_Str"",transactionalKeys.contains(newGlobalOne));
    assertTrue(""String_Node_Str"",transactionalKeys.contains(updatedTxnThree));
    PostCommitCacheReader listenerReader=new PostCommitCacheReader(transactionalCache,updatedTxnThree);
    AlfrescoTransactionSupport.bindListener(listenerReader);
    PostCommitCacheWriter listenerWriter=new PostCommitCacheWriter(transactionalCache,updatedTxnFour,""String_Node_Str"");
    AlfrescoTransactionSupport.bindListener(listenerWriter);
    txn.commit();
    if (listenerReader.e != null) {
      throw listenerReader.e;
    }
    if (listenerWriter.e != null) {
      throw listenerWriter.e;
    }
    assertFalse(""String_Node_Str"",backingCache.contains(newGlobalOne));
    assertNull(""String_Node_Str"",backingCache.get(newGlobalOne));
    assertEquals(""String_Node_Str"",""String_Node_Str"",backingCache.get(updatedTxnThree));
    assertEquals(""String_Node_Str"",""String_Node_Str"",transactionalCache.get(updatedTxnThree));
  }
 catch (  Throwable e) {
    if (txn.getStatus() == Status.STATUS_ACTIVE) {
      txn.rollback();
    }
    throw e;
  }
}",0.9033325454975184
172228,"/** 
 * Goes direct to the shared cache in the absence of a transaction. <p> Where a transaction is present, a cache of updated items is lazily added to the thread and the <tt>Object</tt> put onto that. 
 */
public void put(K key,V value){
  if (AlfrescoTransactionSupport.getTransactionId() == null) {
    sharedCache.put(key,value);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key+ ""String_Node_Str""+ ""String_Node_Str""+ value);
    }
  }
 else {
    TransactionData txnData=getTransactionData();
    if (txnData.isClosed) {
      throw new AlfrescoRuntimeException(""String_Node_Str"");
    }
    if (txnData.updatedItemsCache.getMemoryStoreSize() >= maxCacheSize) {
      txnData.isClearOn=true;
    }
    CacheBucket<V> bucket=null;
    if (sharedCache.contains(key)) {
      V existingValue=sharedCache.get(key);
      bucket=new UpdateCacheBucket<V>(existingValue,value);
    }
 else {
      bucket=new NewCacheBucket<V>(value);
    }
    Element element=new Element(key,bucket);
    txnData.updatedItemsCache.put(element);
    txnData.removedItemsCache.remove(key);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key+ ""String_Node_Str""+ ""String_Node_Str""+ value);
    }
  }
}","/** 
 * Goes direct to the shared cache in the absence of a transaction. <p> Where a transaction is present, a cache of updated items is lazily added to the thread and the <tt>Object</tt> put onto that. 
 */
public void put(K key,V value){
  if (AlfrescoTransactionSupport.getTransactionId() == null) {
    sharedCache.put(key,value);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key+ ""String_Node_Str""+ ""String_Node_Str""+ value);
    }
  }
 else {
    TransactionData txnData=getTransactionData();
    if (txnData.isClosed) {
      if (isDebugEnabled) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key+ ""String_Node_Str""+ ""String_Node_Str""+ value);
      }
    }
 else {
      if (txnData.updatedItemsCache.getMemoryStoreSize() >= maxCacheSize) {
        txnData.isClearOn=true;
      }
      CacheBucket<V> bucket=null;
      if (sharedCache.contains(key)) {
        V existingValue=sharedCache.get(key);
        bucket=new UpdateCacheBucket<V>(existingValue,value);
      }
 else {
        bucket=new NewCacheBucket<V>(value);
      }
      Element element=new Element(key,bucket);
      txnData.updatedItemsCache.put(element);
      txnData.removedItemsCache.remove(key);
      if (isDebugEnabled) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key+ ""String_Node_Str""+ ""String_Node_Str""+ value);
      }
    }
  }
}",0.9033379694019472
172229,"/** 
 * Goes direct to the shared cache in the absence of a transaction. <p> Where a transaction is present, a cache of removed items is lazily added to the thread and the <tt>Object</tt> put onto that. 
 */
public void remove(K key){
  if (AlfrescoTransactionSupport.getTransactionId() == null) {
    sharedCache.remove(key);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key);
    }
  }
 else {
    TransactionData txnData=getTransactionData();
    if (txnData.isClosed) {
      throw new AlfrescoRuntimeException(""String_Node_Str"");
    }
    if (txnData.isClearOn) {
    }
 else {
      if (txnData.removedItemsCache.getMemoryStoreSize() >= maxCacheSize) {
        txnData.isClearOn=true;
        if (isDebugEnabled) {
          logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ AlfrescoTransactionSupport.getTransactionId());
        }
      }
 else {
        V existingValue=sharedCache.get(key);
        if (existingValue == null) {
        }
 else {
          CacheBucket<V> removeBucket=new RemoveCacheBucket<V>(existingValue);
          Element element=new Element(key,removeBucket);
          txnData.removedItemsCache.put(element);
        }
      }
    }
    txnData.updatedItemsCache.remove(key);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key);
    }
  }
}","/** 
 * Goes direct to the shared cache in the absence of a transaction. <p> Where a transaction is present, a cache of removed items is lazily added to the thread and the <tt>Object</tt> put onto that. 
 */
public void remove(K key){
  if (AlfrescoTransactionSupport.getTransactionId() == null) {
    sharedCache.remove(key);
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key);
    }
  }
 else {
    TransactionData txnData=getTransactionData();
    if (txnData.isClosed) {
      if (isDebugEnabled) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key);
      }
    }
 else {
      if (txnData.isClearOn) {
      }
 else {
        if (txnData.removedItemsCache.getMemoryStoreSize() >= maxCacheSize) {
          txnData.isClearOn=true;
          if (isDebugEnabled) {
            logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ AlfrescoTransactionSupport.getTransactionId());
          }
        }
 else {
          V existingValue=sharedCache.get(key);
          if (existingValue == null) {
          }
 else {
            CacheBucket<V> removeBucket=new RemoveCacheBucket<V>(existingValue);
            Element element=new Element(key,removeBucket);
            txnData.removedItemsCache.put(element);
          }
        }
      }
      txnData.updatedItemsCache.remove(key);
      if (isDebugEnabled) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ key);
      }
    }
  }
}",0.8972142170989433
172230,"/** 
 * Clears out all the caches.
 */
public void clear(){
  if (AlfrescoTransactionSupport.getTransactionId() != null) {
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ AlfrescoTransactionSupport.getTransactionId());
    }
    TransactionData txnData=getTransactionData();
    if (txnData.isClosed) {
      throw new AlfrescoRuntimeException(""String_Node_Str"");
    }
    txnData.isClearOn=true;
    txnData.updatedItemsCache.removeAll();
    txnData.removedItemsCache.removeAll();
  }
 else {
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"");
    }
    sharedCache.clear();
  }
}","/** 
 * Clears out all the caches.
 */
public void clear(){
  if (AlfrescoTransactionSupport.getTransactionId() != null) {
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ AlfrescoTransactionSupport.getTransactionId());
    }
    TransactionData txnData=getTransactionData();
    if (txnData.isClosed) {
      if (isDebugEnabled) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this);
      }
    }
 else {
      txnData.isClearOn=true;
      txnData.updatedItemsCache.removeAll();
      txnData.removedItemsCache.removeAll();
    }
  }
 else {
    if (isDebugEnabled) {
      logger.debug(""String_Node_Str"");
    }
    sharedCache.clear();
  }
}",0.613652357494722
172231,"public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof TransactionalCache)) {
    return false;
  }
  @SuppressWarnings(""String_Node_Str"") TransactionalCache that=(TransactionalCache)obj;
  return EqualsHelper.nullSafeEquals(this.name,that.name);
}","public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (!(obj instanceof TransactionalCache<?,?>)) {
    return false;
  }
  @SuppressWarnings(""String_Node_Str"") TransactionalCache that=(TransactionalCache)obj;
  return EqualsHelper.nullSafeEquals(this.name,that.name);
}",0.9926144756277696
172232,"/** 
 * NO-OP
 */
@SuppressWarnings(""String_Node_Str"") public void beforeCommit(boolean readOnly){
}","/** 
 * NO-OP
 */
public void beforeCommit(boolean readOnly){
}",0.7730061349693251
172233,"@Override public void afterCompletion(int status){
  String statusStr=""String_Node_Str"";
switch (status) {
case TransactionSynchronization.STATUS_COMMITTED:
    statusStr=""String_Node_Str"";
  break;
case TransactionSynchronization.STATUS_ROLLED_BACK:
statusStr=""String_Node_Str"";
break;
default :
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + statusStr + ""String_Node_Str""+ this);
}
List<TransactionListener> iterableListeners=getListenersIterable();
if (status == TransactionSynchronization.STATUS_COMMITTED) {
for (TransactionListener listener : iterableListeners) {
try {
listener.afterCommit();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
 else {
for (TransactionListener listener : iterableListeners) {
try {
listener.afterRollback();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
for (LuceneIndexerAndSearcher lucene : lucenes) {
try {
if (status == TransactionSynchronization.STATUS_COMMITTED) {
lucene.commit();
}
 else {
lucene.rollback();
}
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str"",e);
}
}
for (TransactionalCache<Serializable,Object> cache : transactionalCaches) {
try {
if (status == TransactionSynchronization.STATUS_COMMITTED) {
cache.afterCommit();
}
 else {
cache.afterRollback();
}
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str"",e);
}
}
AlfrescoTransactionSupport.clearSynchronization();
}","@Override public void afterCompletion(int status){
  String statusStr=""String_Node_Str"";
switch (status) {
case TransactionSynchronization.STATUS_COMMITTED:
    statusStr=""String_Node_Str"";
  break;
case TransactionSynchronization.STATUS_ROLLED_BACK:
statusStr=""String_Node_Str"";
break;
default :
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + statusStr + ""String_Node_Str""+ this);
}
for (TransactionalCache<Serializable,Object> cache : transactionalCaches) {
try {
if (status == TransactionSynchronization.STATUS_COMMITTED) {
cache.afterCommit();
}
 else {
cache.afterRollback();
}
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str"",e);
}
}
List<TransactionListener> iterableListeners=getListenersIterable();
if (status == TransactionSynchronization.STATUS_COMMITTED) {
for (TransactionListener listener : iterableListeners) {
try {
listener.afterCommit();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
 else {
for (TransactionListener listener : iterableListeners) {
try {
listener.afterRollback();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
for (LuceneIndexerAndSearcher lucene : lucenes) {
try {
if (status == TransactionSynchronization.STATUS_COMMITTED) {
lucene.commit();
}
 else {
lucene.rollback();
}
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str"",e);
}
}
AlfrescoTransactionSupport.clearSynchronization();
}",0.6656288916562889
172234,"/** 
 * Processes the given field data for persistence as a property.
 * @param nodeRef The NodeRef to persist the properties on
 * @param propDefs Map of PropertyDefinition's for the node being persisted
 * @param fieldData Data to persist for the property
 * @param propsToPersist Map of properties to be persisted
 */
protected void processPropertyPersist(NodeRef nodeRef,Map<QName,PropertyDefinition> propDefs,FieldData fieldData,Map<QName,Serializable> propsToPersist){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"" + fieldData + ""String_Node_Str"");
  Matcher m=this.propertyNamePattern.matcher(fieldData.getName());
  if (m.matches()) {
    String qNamePrefix=m.group(1);
    String localName=m.group(2);
    QName fullQName=QName.createQName(qNamePrefix,localName,namespaceService);
    PropertyDefinition propDef=propDefs.get(fullQName);
    if (propDef == null) {
      propDef=this.dictionaryService.getProperty(fullQName);
    }
    if (propDef != null) {
      if (fullQName.equals(ContentModel.PROP_NAME)) {
        processNamePropertyPersist(nodeRef,fieldData);
      }
 else {
        Object value=fieldData.getValue();
        if ((value instanceof String) && ((String)value).length() == 0) {
          if (propDef.getDataType().getName().equals(DataTypeDefinition.DOUBLE) || propDef.getDataType().getName().equals(DataTypeDefinition.FLOAT) || propDef.getDataType().getName().equals(DataTypeDefinition.INT)|| propDef.getDataType().getName().equals(DataTypeDefinition.LONG)|| propDef.getDataType().getName().equals(DataTypeDefinition.DATE)|| propDef.getDataType().getName().equals(DataTypeDefinition.DATETIME)) {
            value=null;
          }
        }
 else         if (propDef.isMultiValued()) {
          StringTokenizer tokenizer=new StringTokenizer((String)value,""String_Node_Str"");
          List<String> list=new ArrayList<String>(8);
          while (tokenizer.hasMoreTokens()) {
            list.add(tokenizer.nextToken());
          }
          value=list;
        }
 else         if (propDef.getDataType().getName().equals(DataTypeDefinition.BOOLEAN)) {
          if (value instanceof String && ON.equals(value)) {
            value=Boolean.TRUE;
          }
        }
 else         if (propDef.getDataType().getName().equals(DataTypeDefinition.LOCALE)) {
          value=I18NUtil.parseLocale((String)value);
        }
        propsToPersist.put(fullQName,(Serializable)value);
      }
    }
 else     if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + fieldData.getName() + ""String_Node_Str"");
    }
  }
 else {
    Matcher tppm=this.transientPropertyPattern.matcher(fieldData.getName());
    if (tppm.matches()) {
      String fieldName=tppm.group(1);
      if (fieldName.equals(TRANSIENT_MIMETYPE)) {
        processMimetypePropertyPersist(nodeRef,fieldData,propsToPersist);
      }
 else       if (fieldName.equals(TRANSIENT_ENCODING)) {
        processEncodingPropertyPersist(nodeRef,fieldData,propsToPersist);
      }
 else       if (fieldName.equals(TRANSIENT_SIZE)) {
      }
 else       if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + fieldData.getName() + ""String_Node_Str"");
      }
    }
 else     if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + fieldData.getName() + ""String_Node_Str"");
    }
  }
}","/** 
 * Processes the given field data for persistence as a property.
 * @param nodeRef The NodeRef to persist the properties on
 * @param propDefs Map of PropertyDefinition's for the node being persisted
 * @param fieldData Data to persist for the property
 * @param propsToPersist Map of properties to be persisted
 */
protected void processPropertyPersist(NodeRef nodeRef,Map<QName,PropertyDefinition> propDefs,FieldData fieldData,Map<QName,Serializable> propsToPersist){
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"" + fieldData + ""String_Node_Str"");
  Matcher m=this.propertyNamePattern.matcher(fieldData.getName());
  if (m.matches()) {
    String qNamePrefix=m.group(1);
    String localName=m.group(2);
    QName fullQName=QName.createQName(qNamePrefix,localName,namespaceService);
    PropertyDefinition propDef=propDefs.get(fullQName);
    if (propDef == null) {
      propDef=this.dictionaryService.getProperty(fullQName);
    }
    if (propDef != null) {
      if (fullQName.equals(ContentModel.PROP_NAME)) {
        processNamePropertyPersist(nodeRef,fieldData);
      }
 else {
        Object value=fieldData.getValue();
        if ((value instanceof String) && ((String)value).length() == 0) {
          if (!propDef.getDataType().getName().equals(DataTypeDefinition.TEXT) && !propDef.getDataType().getName().equals(DataTypeDefinition.MLTEXT)) {
            value=null;
          }
        }
 else         if (propDef.isMultiValued()) {
          StringTokenizer tokenizer=new StringTokenizer((String)value,""String_Node_Str"");
          List<String> list=new ArrayList<String>(8);
          while (tokenizer.hasMoreTokens()) {
            list.add(tokenizer.nextToken());
          }
          value=list;
        }
 else         if (propDef.getDataType().getName().equals(DataTypeDefinition.BOOLEAN)) {
          if (value instanceof String && ON.equals(value)) {
            value=Boolean.TRUE;
          }
        }
 else         if (propDef.getDataType().getName().equals(DataTypeDefinition.LOCALE)) {
          value=I18NUtil.parseLocale((String)value);
        }
        propsToPersist.put(fullQName,(Serializable)value);
      }
    }
 else     if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + fieldData.getName() + ""String_Node_Str"");
    }
  }
 else {
    Matcher tppm=this.transientPropertyPattern.matcher(fieldData.getName());
    if (tppm.matches()) {
      String fieldName=tppm.group(1);
      if (fieldName.equals(TRANSIENT_MIMETYPE)) {
        processMimetypePropertyPersist(nodeRef,fieldData,propsToPersist);
      }
 else       if (fieldName.equals(TRANSIENT_ENCODING)) {
        processEncodingPropertyPersist(nodeRef,fieldData,propsToPersist);
      }
 else       if (fieldName.equals(TRANSIENT_SIZE)) {
      }
 else       if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + fieldData.getName() + ""String_Node_Str"");
      }
    }
 else     if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"" + fieldData.getName() + ""String_Node_Str"");
    }
  }
}",0.9543386160364036
172235,"/** 
 * Process the security configuration
 * @param config Config
 */
protected void processSecurityConfig(Config config){
  SecurityConfigSection secConfig=new SecurityConfigSection(this);
  try {
    ConfigElement globalACLs=config.getConfigElement(""String_Node_Str"");
    if (globalACLs != null) {
      AccessControlList acls=processAccessControlList(secConfig,globalACLs);
      if (acls != null)       secConfig.setGlobalAccessControls(acls);
    }
    ConfigElement jceElem=config.getConfigElement(""String_Node_Str"");
    if (jceElem != null) {
      secConfig.setJCEProvider(jceElem.getValue());
    }
 else {
      secConfig.setJCEProvider(""String_Node_Str"");
    }
    ConfigElement mapperElem=config.getConfigElement(""String_Node_Str"");
    if (mapperElem != null) {
      String mapperType=mapperElem.getAttribute(""String_Node_Str"");
      String mapperClass=null;
      if (mapperType.equalsIgnoreCase(""String_Node_Str""))       mapperClass=""String_Node_Str"";
 else       if (mapperType.equalsIgnoreCase(""String_Node_Str""))       mapperClass=""String_Node_Str"";
 else {
        ConfigElement classElem=mapperElem.getChild(""String_Node_Str"");
        if (classElem == null)         throw new InvalidConfigurationException(""String_Node_Str"");
        mapperClass=classElem.getValue();
      }
      secConfig.setShareMapper(mapperClass,mapperElem);
    }
 else {
      if (m_tenantService != null && m_tenantService.isEnabled()) {
        secConfig.setShareMapper(""String_Node_Str"",new GenericConfigElement(""String_Node_Str""));
      }
    }
    ConfigElement domainMappings=config.getConfigElement(""String_Node_Str"");
    if (domainMappings != null) {
      List<ConfigElement> mappings=domainMappings.getChildren();
      if (mappings != null) {
        DomainMapping mapping=null;
        for (        ConfigElement domainMap : mappings) {
          if (domainMap.getName().equals(""String_Node_Str"")) {
            String name=domainMap.getAttribute(""String_Node_Str"");
            if (domainMap.hasAttribute(""String_Node_Str"")) {
              String subnetStr=domainMap.getAttribute(""String_Node_Str"");
              String maskStr=domainMap.getAttribute(""String_Node_Str"");
              int subnet=IPAddress.parseNumericAddress(subnetStr);
              int mask=IPAddress.parseNumericAddress(maskStr);
              if (subnet == 0 || mask == 0)               throw new AlfrescoRuntimeException(""String_Node_Str"" + name);
              mapping=new SubnetDomainMapping(name,subnet,mask);
            }
 else             if (domainMap.hasAttribute(""String_Node_Str"")) {
              String rangeFromStr=domainMap.getAttribute(""String_Node_Str"");
              String rangeToStr=domainMap.getAttribute(""String_Node_Str"");
              int rangeFrom=IPAddress.parseNumericAddress(rangeFromStr);
              int rangeTo=IPAddress.parseNumericAddress(rangeToStr);
              if (rangeFrom == 0 || rangeTo == 0)               throw new AlfrescoRuntimeException(""String_Node_Str"" + name);
              mapping=new RangeDomainMapping(name,rangeFrom,rangeTo);
            }
 else             throw new AlfrescoRuntimeException(""String_Node_Str"");
            secConfig.addDomainMapping(mapping);
          }
        }
      }
    }
  }
 catch (  InvalidConfigurationException ex) {
    throw new AlfrescoRuntimeException(ex.getMessage());
  }
}","/** 
 * Process the security configuration
 * @param config Config
 */
protected void processSecurityConfig(Config config){
  SecurityConfigSection secConfig=new SecurityConfigSection(this);
  try {
    GenericConfigElement params=new GenericConfigElement(""String_Node_Str"");
    if (config.getConfigElement(""String_Node_Str"") != null)     params.addChild(new GenericConfigElement(""String_Node_Str""));
    secConfig.setAccessControlManager(""String_Node_Str"",params);
  }
 catch (  Exception ex) {
    throw new AlfrescoRuntimeException(""String_Node_Str"",ex);
  }
  try {
    ConfigElement globalACLs=config.getConfigElement(""String_Node_Str"");
    if (globalACLs != null) {
      AccessControlList acls=processAccessControlList(secConfig,globalACLs);
      if (acls != null)       secConfig.setGlobalAccessControls(acls);
    }
    ConfigElement jceElem=config.getConfigElement(""String_Node_Str"");
    if (jceElem != null) {
      secConfig.setJCEProvider(jceElem.getValue());
    }
 else {
      secConfig.setJCEProvider(""String_Node_Str"");
    }
    ConfigElement mapperElem=config.getConfigElement(""String_Node_Str"");
    if (mapperElem != null) {
      String mapperType=mapperElem.getAttribute(""String_Node_Str"");
      String mapperClass=null;
      if (mapperType.equalsIgnoreCase(""String_Node_Str""))       mapperClass=""String_Node_Str"";
 else       if (mapperType.equalsIgnoreCase(""String_Node_Str""))       mapperClass=""String_Node_Str"";
 else {
        ConfigElement classElem=mapperElem.getChild(""String_Node_Str"");
        if (classElem == null)         throw new InvalidConfigurationException(""String_Node_Str"");
        mapperClass=classElem.getValue();
      }
      secConfig.setShareMapper(mapperClass,mapperElem);
    }
 else {
      if (m_tenantService != null && m_tenantService.isEnabled()) {
        secConfig.setShareMapper(""String_Node_Str"",new GenericConfigElement(""String_Node_Str""));
      }
    }
    ConfigElement domainMappings=config.getConfigElement(""String_Node_Str"");
    if (domainMappings != null) {
      List<ConfigElement> mappings=domainMappings.getChildren();
      if (mappings != null) {
        DomainMapping mapping=null;
        for (        ConfigElement domainMap : mappings) {
          if (domainMap.getName().equals(""String_Node_Str"")) {
            String name=domainMap.getAttribute(""String_Node_Str"");
            if (domainMap.hasAttribute(""String_Node_Str"")) {
              String subnetStr=domainMap.getAttribute(""String_Node_Str"");
              String maskStr=domainMap.getAttribute(""String_Node_Str"");
              int subnet=IPAddress.parseNumericAddress(subnetStr);
              int mask=IPAddress.parseNumericAddress(maskStr);
              if (subnet == 0 || mask == 0)               throw new AlfrescoRuntimeException(""String_Node_Str"" + name);
              mapping=new SubnetDomainMapping(name,subnet,mask);
            }
 else             if (domainMap.hasAttribute(""String_Node_Str"")) {
              String rangeFromStr=domainMap.getAttribute(""String_Node_Str"");
              String rangeToStr=domainMap.getAttribute(""String_Node_Str"");
              int rangeFrom=IPAddress.parseNumericAddress(rangeFromStr);
              int rangeTo=IPAddress.parseNumericAddress(rangeToStr);
              if (rangeFrom == 0 || rangeTo == 0)               throw new AlfrescoRuntimeException(""String_Node_Str"" + name);
              mapping=new RangeDomainMapping(name,rangeFrom,rangeTo);
            }
 else             throw new AlfrescoRuntimeException(""String_Node_Str"");
            secConfig.addDomainMapping(mapping);
          }
        }
      }
    }
  }
 catch (  InvalidConfigurationException ex) {
    throw new AlfrescoRuntimeException(ex.getMessage());
  }
}",0.9475465313028764
172236,"public ResultSet query(StoreRef store,String language,String query,QueryParameterDefinition[] queryParameterDefintions){
  return query(store,language,query,queryParameterDefintions);
}","public ResultSet query(StoreRef store,String language,String query){
  return query(store,language,query,null);
}",0.738255033557047
172237,"/** 
 * @see org.alfresco.repo.action.executer.ActionExecuter#execute(org.alfresco.service.cmr.repository.NodeRef,NodeRef)
 */
public void executeImpl(Action ruleAction,NodeRef actionedUponNodeRef){
  if (!nodeService.exists(actionedUponNodeRef)) {
    return;
  }
  ContentReader reader=contentService.getReader(actionedUponNodeRef,ContentModel.PROP_CONTENT);
  if (reader == null || reader.getMimetype() == null) {
    return;
  }
  String mimetype=reader.getMimetype();
  MetadataExtracter extracter=metadataExtracterRegistry.getExtracter(mimetype);
  if (extracter == null) {
    return;
  }
  Map<QName,Serializable> nodeProperties=nodeService.getProperties(actionedUponNodeRef);
  Map<QName,Serializable> modifiedProperties=extracter.extract(reader,nodeProperties);
  if (modifiedProperties.size() == 0) {
    return;
  }
  Set<QName> requiredAspectQNames=new HashSet<QName>(3);
  Set<QName> aspectPropertyQNames=new HashSet<QName>(17);
  for (  QName propertyQName : modifiedProperties.keySet()) {
    PropertyDefinition propertyDef=dictionaryService.getProperty(propertyQName);
    if (propertyDef == null) {
      continue;
    }
    ClassDefinition propertyContainerDef=propertyDef.getContainerClass();
    if (propertyContainerDef.isAspect()) {
      QName aspectQName=propertyContainerDef.getName();
      requiredAspectQNames.add(aspectQName);
      Set<QName> aspectProperties=propertyContainerDef.getProperties().keySet();
      aspectPropertyQNames.addAll(aspectProperties);
    }
  }
  if (!carryAspectProperties) {
    for (    QName aspectPropertyQName : aspectPropertyQNames) {
      if (!modifiedProperties.containsKey(aspectPropertyQName)) {
        nodeProperties.remove(aspectPropertyQName);
      }
    }
  }
  nodeService.setProperties(actionedUponNodeRef,nodeProperties);
  for (  QName requiredAspectQName : requiredAspectQNames) {
    if (nodeService.hasAspect(actionedUponNodeRef,requiredAspectQName)) {
      continue;
    }
 else {
      nodeService.addAspect(actionedUponNodeRef,requiredAspectQName,null);
    }
  }
}","/** 
 * @see org.alfresco.repo.action.executer.ActionExecuter#execute(org.alfresco.service.cmr.repository.NodeRef,NodeRef)
 */
public void executeImpl(Action ruleAction,NodeRef actionedUponNodeRef){
  if (!nodeService.exists(actionedUponNodeRef)) {
    return;
  }
  ContentReader reader=contentService.getReader(actionedUponNodeRef,ContentModel.PROP_CONTENT);
  if (reader == null || reader.getMimetype() == null) {
    return;
  }
  String mimetype=reader.getMimetype();
  MetadataExtracter extracter=metadataExtracterRegistry.getExtracter(mimetype);
  if (extracter == null) {
    return;
  }
  Map<QName,Serializable> nodeProperties=nodeService.getProperties(actionedUponNodeRef);
  Map<QName,Serializable> modifiedProperties=null;
  try {
    modifiedProperties=extracter.extract(reader,nodeProperties);
  }
 catch (  Throwable e) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ actionedUponNodeRef+ ""String_Node_Str""+ ""String_Node_Str""+ reader,e);
    }
 else {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + this + ""String_Node_Str""+ ""String_Node_Str""+ actionedUponNodeRef+ ""String_Node_Str""+ ""String_Node_Str""+ reader+ ""String_Node_Str""+ ""String_Node_Str""+ e.getMessage());
    }
  }
  if (modifiedProperties.size() == 0) {
    return;
  }
  Set<QName> requiredAspectQNames=new HashSet<QName>(3);
  Set<QName> aspectPropertyQNames=new HashSet<QName>(17);
  for (  QName propertyQName : modifiedProperties.keySet()) {
    PropertyDefinition propertyDef=dictionaryService.getProperty(propertyQName);
    if (propertyDef == null) {
      continue;
    }
    ClassDefinition propertyContainerDef=propertyDef.getContainerClass();
    if (propertyContainerDef.isAspect()) {
      QName aspectQName=propertyContainerDef.getName();
      requiredAspectQNames.add(aspectQName);
      Set<QName> aspectProperties=propertyContainerDef.getProperties().keySet();
      aspectPropertyQNames.addAll(aspectProperties);
    }
  }
  if (!carryAspectProperties) {
    for (    QName aspectPropertyQName : aspectPropertyQNames) {
      if (!modifiedProperties.containsKey(aspectPropertyQName)) {
        nodeProperties.remove(aspectPropertyQName);
      }
    }
  }
  nodeService.setProperties(actionedUponNodeRef,nodeProperties);
  for (  QName requiredAspectQName : requiredAspectQNames) {
    if (nodeService.hasAspect(actionedUponNodeRef,requiredAspectQName)) {
      continue;
    }
 else {
      nodeService.addAspect(actionedUponNodeRef,requiredAspectQName,null);
    }
  }
}",0.8866782006920415
172238,"public boolean hasExpired(){
  return System.currentTimeMillis() > expiryTime;
}","public boolean hasExpired(){
  return System.currentTimeMillis() >= expiryTime;
}",0.9937888198757764
172239,"@SuppressWarnings(""String_Node_Str"") public void testGetForm() throws Exception {
  Form form=this.formService.getForm(this.document.toString());
  assertNotNull(""String_Node_Str"",form);
  assertEquals(this.document.toString(),form.getItem());
  assertEquals(ContentModel.TYPE_CONTENT.toPrefixString(this.namespaceService),form.getType());
  assertNull(""String_Node_Str"",form.getFieldGroups());
  Collection<FieldDefinition> fieldDefs=form.getFieldDefinitions();
  assertNotNull(""String_Node_Str"",fieldDefs);
  assertEquals(""String_Node_Str"",22,fieldDefs.size());
  Map<String,FieldDefinition> fieldDefMap=new HashMap<String,FieldDefinition>(fieldDefs.size());
  for (  FieldDefinition fieldDef : fieldDefs) {
    fieldDefMap.put(fieldDef.getName(),fieldDef);
  }
  PropertyFieldDefinition nameField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition titleField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition descField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition mimetypeField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition encodingField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition sizeField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition originatorField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition addresseeField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition addresseesField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition subjectField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition sentDateField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  AssociationFieldDefinition referencesField=(AssociationFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",nameField);
  assertNotNull(""String_Node_Str"",titleField);
  assertNotNull(""String_Node_Str"",descField);
  assertNotNull(""String_Node_Str"",mimetypeField);
  assertNotNull(""String_Node_Str"",encodingField);
  assertNotNull(""String_Node_Str"",sizeField);
  assertNotNull(""String_Node_Str"",originatorField);
  assertNotNull(""String_Node_Str"",addresseeField);
  assertNotNull(""String_Node_Str"",addresseesField);
  assertNotNull(""String_Node_Str"",subjectField);
  assertNotNull(""String_Node_Str"",sentDateField);
  assertNotNull(""String_Node_Str"",referencesField);
  assertEquals(""String_Node_Str"" + LABEL_NAME,LABEL_NAME,nameField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_TITLE,LABEL_TITLE,titleField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_DESCRIPTION,LABEL_DESCRIPTION,descField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_MIMETYPE,LABEL_MIMETYPE,mimetypeField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ENCODING,LABEL_ENCODING,encodingField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_SIZE,LABEL_SIZE,sizeField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ORIGINATOR,LABEL_ORIGINATOR,originatorField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ADDRESSEE,LABEL_ADDRESSEE,addresseeField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ADDRESSEES,LABEL_ADDRESSEES,addresseesField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_SUBJECT,LABEL_SUBJECT,subjectField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_SENT_DATE,LABEL_SENT_DATE,sentDateField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_REFERENCES,LABEL_REFERENCES,referencesField.getLabel());
  assertEquals(""String_Node_Str"",""String_Node_Str"",nameField.getDataType());
  assertTrue(""String_Node_Str"",nameField.isMandatory());
  assertFalse(""String_Node_Str"",nameField.isRepeating());
  List<FieldConstraint> constraints=nameField.getConstraints();
  assertEquals(""String_Node_Str"",1,constraints.size());
  FieldConstraint constraint=constraints.get(0);
  assertEquals(""String_Node_Str"",""String_Node_Str"",constraint.getType());
  Map<String,String> params=constraint.getParams();
  assertNotNull(""String_Node_Str"",params);
  assertEquals(""String_Node_Str"",2,params.size());
  assertNotNull(""String_Node_Str"",params.get(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",params.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",addresseesField.getDataType());
  assertFalse(""String_Node_Str"",addresseesField.isMandatory());
  assertTrue(""String_Node_Str"",addresseesField.isRepeating());
  assertNull(""String_Node_Str"",addresseesField.getConstraints());
  assertEquals(""String_Node_Str"",""String_Node_Str"",referencesField.getEndpointType());
  assertEquals(""String_Node_Str"",Direction.TARGET.toString(),referencesField.getEndpointDirection().toString());
  assertFalse(""String_Node_Str"",referencesField.isEndpointMandatory());
  assertTrue(""String_Node_Str"",referencesField.isEndpointMany());
  FormData data=form.getFormData();
  assertNotNull(""String_Node_Str"",data);
  Map<String,FormData.FieldData> fieldData=data.getData();
  assertNotNull(""String_Node_Str"",fieldData);
  assertEquals(VALUE_TITLE,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_DESCRIPTION,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_MIMETYPE,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_ENCODING,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_ORIGINATOR,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_ADDRESSEE,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_SUBJECT,fieldData.get(""String_Node_Str"").getValue());
  assertTrue(""String_Node_Str"",((Long)fieldData.get(""String_Node_Str"").getValue()).longValue() > 0);
  String addressees=(String)fieldData.get(""String_Node_Str"").getValue();
  assertNotNull(addressees);
  assertTrue(""String_Node_Str"",addressees.indexOf(""String_Node_Str"") != -1);
  String[] addresseesArr=StringUtils.delimitedListToStringArray(addressees,""String_Node_Str"");
  assertEquals(""String_Node_Str"",2,addresseesArr.length);
  assertEquals(VALUE_ADDRESSEES1,addresseesArr[0]);
  assertEquals(VALUE_ADDRESSEES2,addresseesArr[1]);
  Calendar calTestValue=Calendar.getInstance();
  calTestValue.setTime(VALUE_SENT_DATE);
  Calendar calServiceValue=Calendar.getInstance();
  calServiceValue.setTime((Date)fieldData.get(""String_Node_Str"").getValue());
  assertEquals(calTestValue.getTimeInMillis(),calServiceValue.getTimeInMillis());
  List<String> targets=(List<String>)fieldData.get(""String_Node_Str"").getValue();
  assertEquals(""String_Node_Str"",1,targets.size());
  assertEquals(this.associatedDoc.toString(),targets.get(0));
}","@SuppressWarnings(""String_Node_Str"") public void testGetForm() throws Exception {
  Form form=this.formService.getForm(this.document.toString());
  assertNotNull(""String_Node_Str"",form);
  assertEquals(this.document.toString(),form.getItem());
  assertEquals(ContentModel.TYPE_CONTENT.toPrefixString(this.namespaceService),form.getType());
  assertNull(""String_Node_Str"",form.getFieldGroups());
  Collection<FieldDefinition> fieldDefs=form.getFieldDefinitions();
  assertNotNull(""String_Node_Str"",fieldDefs);
  assertEquals(""String_Node_Str"",23,fieldDefs.size());
  Map<String,FieldDefinition> fieldDefMap=new HashMap<String,FieldDefinition>(fieldDefs.size());
  for (  FieldDefinition fieldDef : fieldDefs) {
    fieldDefMap.put(fieldDef.getName(),fieldDef);
  }
  PropertyFieldDefinition nameField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition titleField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition descField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition mimetypeField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition encodingField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition sizeField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition originatorField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition addresseeField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition addresseesField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition subjectField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  PropertyFieldDefinition sentDateField=(PropertyFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  AssociationFieldDefinition referencesField=(AssociationFieldDefinition)fieldDefMap.get(""String_Node_Str"");
  assertNotNull(""String_Node_Str"",nameField);
  assertNotNull(""String_Node_Str"",titleField);
  assertNotNull(""String_Node_Str"",descField);
  assertNotNull(""String_Node_Str"",mimetypeField);
  assertNotNull(""String_Node_Str"",encodingField);
  assertNotNull(""String_Node_Str"",sizeField);
  assertNotNull(""String_Node_Str"",originatorField);
  assertNotNull(""String_Node_Str"",addresseeField);
  assertNotNull(""String_Node_Str"",addresseesField);
  assertNotNull(""String_Node_Str"",subjectField);
  assertNotNull(""String_Node_Str"",sentDateField);
  assertNotNull(""String_Node_Str"",referencesField);
  assertEquals(""String_Node_Str"" + LABEL_NAME,LABEL_NAME,nameField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_TITLE,LABEL_TITLE,titleField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_DESCRIPTION,LABEL_DESCRIPTION,descField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_MIMETYPE,LABEL_MIMETYPE,mimetypeField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ENCODING,LABEL_ENCODING,encodingField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_SIZE,LABEL_SIZE,sizeField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ORIGINATOR,LABEL_ORIGINATOR,originatorField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ADDRESSEE,LABEL_ADDRESSEE,addresseeField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_ADDRESSEES,LABEL_ADDRESSEES,addresseesField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_SUBJECT,LABEL_SUBJECT,subjectField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_SENT_DATE,LABEL_SENT_DATE,sentDateField.getLabel());
  assertEquals(""String_Node_Str"" + LABEL_REFERENCES,LABEL_REFERENCES,referencesField.getLabel());
  assertEquals(""String_Node_Str"",""String_Node_Str"",nameField.getDataType());
  assertTrue(""String_Node_Str"",nameField.isMandatory());
  assertFalse(""String_Node_Str"",nameField.isRepeating());
  List<FieldConstraint> constraints=nameField.getConstraints();
  assertEquals(""String_Node_Str"",1,constraints.size());
  FieldConstraint constraint=constraints.get(0);
  assertEquals(""String_Node_Str"",""String_Node_Str"",constraint.getType());
  Map<String,String> params=constraint.getParams();
  assertNotNull(""String_Node_Str"",params);
  assertEquals(""String_Node_Str"",2,params.size());
  assertNotNull(""String_Node_Str"",params.get(""String_Node_Str""));
  assertNotNull(""String_Node_Str"",params.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",addresseesField.getDataType());
  assertFalse(""String_Node_Str"",addresseesField.isMandatory());
  assertTrue(""String_Node_Str"",addresseesField.isRepeating());
  assertNull(""String_Node_Str"",addresseesField.getConstraints());
  assertEquals(""String_Node_Str"",""String_Node_Str"",referencesField.getEndpointType());
  assertEquals(""String_Node_Str"",Direction.TARGET.toString(),referencesField.getEndpointDirection().toString());
  assertFalse(""String_Node_Str"",referencesField.isEndpointMandatory());
  assertTrue(""String_Node_Str"",referencesField.isEndpointMany());
  FormData data=form.getFormData();
  assertNotNull(""String_Node_Str"",data);
  Map<String,FormData.FieldData> fieldData=data.getData();
  assertNotNull(""String_Node_Str"",fieldData);
  assertEquals(VALUE_TITLE,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_DESCRIPTION,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_MIMETYPE,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_ENCODING,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_ORIGINATOR,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_ADDRESSEE,fieldData.get(""String_Node_Str"").getValue());
  assertEquals(VALUE_SUBJECT,fieldData.get(""String_Node_Str"").getValue());
  assertTrue(""String_Node_Str"",((Long)fieldData.get(""String_Node_Str"").getValue()).longValue() > 0);
  String addressees=(String)fieldData.get(""String_Node_Str"").getValue();
  assertNotNull(addressees);
  assertTrue(""String_Node_Str"",addressees.indexOf(""String_Node_Str"") != -1);
  String[] addresseesArr=StringUtils.delimitedListToStringArray(addressees,""String_Node_Str"");
  assertEquals(""String_Node_Str"",2,addresseesArr.length);
  assertEquals(VALUE_ADDRESSEES1,addresseesArr[0]);
  assertEquals(VALUE_ADDRESSEES2,addresseesArr[1]);
  Calendar calTestValue=Calendar.getInstance();
  calTestValue.setTime(VALUE_SENT_DATE);
  Calendar calServiceValue=Calendar.getInstance();
  calServiceValue.setTime((Date)fieldData.get(""String_Node_Str"").getValue());
  assertEquals(calTestValue.getTimeInMillis(),calServiceValue.getTimeInMillis());
  List<String> targets=(List<String>)fieldData.get(""String_Node_Str"").getValue();
  assertEquals(""String_Node_Str"",1,targets.size());
  assertEquals(this.associatedDoc.toString(),targets.get(0));
}",0.9998514998515
172240,"/** 
 * Persists the given FormData on the given NodeRef
 * @param nodeRef The NodeRef to persist the form data on
 * @param data The FormData to persist
 */
protected void persistNode(NodeRef nodeRef,FormData data){
  QName type=this.nodeService.getType(nodeRef);
  TypeDefinition typeDef=this.dictionaryService.getAnonymousType(type,this.nodeService.getAspects(nodeRef));
  Map<QName,PropertyDefinition> propDefs=typeDef.getProperties();
  Map<QName,Serializable> propsToPersist=new HashMap<QName,Serializable>(data.getData().size());
  for (  String dataKey : data.getData().keySet()) {
    FieldData fieldData=data.getData().get(dataKey);
    if (fieldData.isFile() == false) {
      String fieldName=fieldData.getName();
      if (fieldName.startsWith(PROP_PREFIX)) {
        processPropertyPersist(nodeRef,propDefs,fieldData,propsToPersist);
      }
 else       if (fieldName.startsWith(ASSOC_PREFIX)) {
      }
 else       if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + fieldName + ""String_Node_Str"");
      }
    }
  }
  this.nodeService.addProperties(nodeRef,propsToPersist);
}","/** 
 * Persists the given FormData on the given NodeRef
 * @param nodeRef The NodeRef to persist the form data on
 * @param data The FormData to persist
 */
protected void persistNode(NodeRef nodeRef,FormData data){
  QName type=this.nodeService.getType(nodeRef);
  Collection<QName> aspects=this.getAspectsToInclude(nodeRef);
  TypeDefinition typeDef=this.dictionaryService.getAnonymousType(type,aspects);
  Map<QName,PropertyDefinition> propDefs=typeDef.getProperties();
  Map<QName,Serializable> propsToPersist=new HashMap<QName,Serializable>(data.getData().size());
  for (  String dataKey : data.getData().keySet()) {
    FieldData fieldData=data.getData().get(dataKey);
    if (fieldData.isFile() == false) {
      String fieldName=fieldData.getName();
      if (fieldName.startsWith(PROP_PREFIX)) {
        processPropertyPersist(nodeRef,propDefs,fieldData,propsToPersist);
      }
 else       if (fieldName.startsWith(ASSOC_PREFIX)) {
      }
 else       if (logger.isWarnEnabled()) {
        logger.warn(""String_Node_Str"" + fieldName + ""String_Node_Str"");
      }
    }
  }
  this.nodeService.addProperties(nodeRef,propsToPersist);
}",0.9538188277087034
172241,"/** 
 * Sets up the field definitions for the node's properties.
 * @param nodeRef The NodeRef of the node being setup
 * @param form The Form instance to populate
 * @param formData The FormData instance to populate
 */
@SuppressWarnings(""String_Node_Str"") protected void generatePropertyFields(NodeRef nodeRef,Form form,FormData formData){
  QName type=this.nodeService.getType(nodeRef);
  TypeDefinition typeDef=this.dictionaryService.getAnonymousType(type,this.nodeService.getAspects(nodeRef));
  Map<QName,PropertyDefinition> propDefs=typeDef.getProperties();
  Map<QName,Serializable> propValues=this.nodeService.getProperties(nodeRef);
  for (  PropertyDefinition propDef : propDefs.values()) {
    String propName=propDef.getName().toPrefixString(this.namespaceService);
    PropertyFieldDefinition fieldDef=new PropertyFieldDefinition(propName,propDef.getDataType().getName().toPrefixString(this.namespaceService));
    String title=propDef.getTitle();
    if (title == null) {
      title=propName;
    }
    fieldDef.setLabel(title);
    fieldDef.setDefaultValue(propDef.getDefaultValue());
    fieldDef.setDescription(propDef.getDescription());
    fieldDef.setMandatory(propDef.isMandatory());
    fieldDef.setProtectedField(propDef.isProtected());
    fieldDef.setRepeating(propDef.isMultiValued());
    List<ConstraintDefinition> constraints=propDef.getConstraints();
    if (constraints != null && constraints.size() > 0) {
      List<FieldConstraint> fieldConstraints=new ArrayList<FieldConstraint>(constraints.size());
      for (      ConstraintDefinition constraintDef : constraints) {
        Constraint constraint=constraintDef.getConstraint();
        Map<String,String> fieldConstraintParams=null;
        Map<String,Object> constraintParams=constraint.getParameters();
        if (constraintParams != null) {
          fieldConstraintParams=new HashMap<String,String>(constraintParams.size());
          for (          String name : constraintParams.keySet()) {
            Object paramValue=constraintParams.get(name);
            if (paramValue instanceof List) {
              paramValue=makeListString((List)paramValue);
            }
            fieldConstraintParams.put(name,paramValue.toString());
          }
        }
        FieldConstraint fieldConstraint=fieldDef.new FieldConstraint(constraint.getType(),fieldConstraintParams);
        fieldConstraints.add(fieldConstraint);
      }
      fieldDef.setConstraints(fieldConstraints);
    }
    form.addFieldDefinition(fieldDef);
    Serializable fieldData=propValues.get(propDef.getName());
    if (fieldData != null) {
      if (fieldData instanceof List) {
        fieldData=makeListString((List)fieldData);
      }
      formData.addData(PROP_PREFIX + fieldDef.getName(),fieldData);
    }
  }
}","/** 
 * Sets up the field definitions for the node's properties.
 * @param nodeRef The NodeRef of the node being setup
 * @param form The Form instance to populate
 * @param formData The FormData instance to populate
 */
@SuppressWarnings(""String_Node_Str"") protected void generatePropertyFields(NodeRef nodeRef,Form form,FormData formData){
  QName type=this.nodeService.getType(nodeRef);
  Collection<QName> aspects=this.getAspectsToInclude(nodeRef);
  TypeDefinition typeDef=this.dictionaryService.getAnonymousType(type,aspects);
  Map<QName,PropertyDefinition> propDefs=typeDef.getProperties();
  Map<QName,Serializable> propValues=this.nodeService.getProperties(nodeRef);
  for (  PropertyDefinition propDef : propDefs.values()) {
    String propName=propDef.getName().toPrefixString(this.namespaceService);
    PropertyFieldDefinition fieldDef=new PropertyFieldDefinition(propName,propDef.getDataType().getName().toPrefixString(this.namespaceService));
    String title=propDef.getTitle();
    if (title == null) {
      title=propName;
    }
    fieldDef.setLabel(title);
    fieldDef.setDefaultValue(propDef.getDefaultValue());
    fieldDef.setDescription(propDef.getDescription());
    fieldDef.setMandatory(propDef.isMandatory());
    fieldDef.setProtectedField(propDef.isProtected());
    fieldDef.setRepeating(propDef.isMultiValued());
    List<ConstraintDefinition> constraints=propDef.getConstraints();
    if (constraints != null && constraints.size() > 0) {
      List<FieldConstraint> fieldConstraints=new ArrayList<FieldConstraint>(constraints.size());
      for (      ConstraintDefinition constraintDef : constraints) {
        Constraint constraint=constraintDef.getConstraint();
        Map<String,String> fieldConstraintParams=null;
        Map<String,Object> constraintParams=constraint.getParameters();
        if (constraintParams != null) {
          fieldConstraintParams=new HashMap<String,String>(constraintParams.size());
          for (          String name : constraintParams.keySet()) {
            Object paramValue=constraintParams.get(name);
            if (paramValue instanceof List) {
              paramValue=makeListString((List)paramValue);
            }
            fieldConstraintParams.put(name,paramValue.toString());
          }
        }
        FieldConstraint fieldConstraint=fieldDef.new FieldConstraint(constraint.getType(),fieldConstraintParams);
        fieldConstraints.add(fieldConstraint);
      }
      fieldDef.setConstraints(fieldConstraints);
    }
    form.addFieldDefinition(fieldDef);
    Serializable fieldData=propValues.get(propDef.getName());
    if (fieldData != null) {
      if (fieldData instanceof List) {
        fieldData=makeListString((List)fieldData);
      }
      formData.addData(PROP_PREFIX + fieldDef.getName(),fieldData);
    }
  }
}",0.9810781863620136
172242,"/** 
 * Get the collection of people stored in the repository. An optional filter query may be provided by which to filter the people collection. Space separate the query terms i.e. ""john bob"" will find all users who's first or second names contain the strings ""john"" or ""bob"".
 * @param filter filter query string by which to filter the collection of people.If <pre>null</pre> then all people stored in the repository are returned
 * @param maxResults maximum results to return or all if <= 0
 * @return people collection as a JavaScript array
 */
public Scriptable getPeople(String filter,int maxResults){
  Object[] people=null;
  if (filter == null) {
    people=personService.getAllPeople().toArray();
  }
 else {
    filter=filter.trim();
    if (filter.length() != 0) {
      StringBuilder query=new StringBuilder(128);
      for (StringTokenizer t=new StringTokenizer(filter,""String_Node_Str""); t.hasMoreTokens(); ) {
        String term=LuceneQueryParser.escape(t.nextToken().replace('""',' '));
        query.append(""String_Node_Str"").append(NamespaceService.CONTENT_MODEL_PREFIX).append(""String_Node_Str"");
        query.append(term);
        query.append(""String_Node_Str"").append(NamespaceService.CONTENT_MODEL_PREFIX).append(""String_Node_Str"");
        query.append(term);
        query.append(""String_Node_Str"");
      }
      SearchParameters params=new SearchParameters();
      params.setLanguage(SearchService.LANGUAGE_LUCENE);
      params.addStore(this.storeRef);
      params.setQuery(query.toString());
      if (maxResults > 0) {
        params.setLimitBy(LimitBy.FINAL_SIZE);
        params.setLimit(maxResults);
      }
      ResultSet results=null;
      try {
        results=services.getSearchService().query(params);
        people=results.getNodeRefs().toArray();
      }
  finally {
        if (results != null) {
          results.close();
        }
      }
    }
  }
  if (people == null) {
    people=new Object[0];
  }
  return Context.getCurrentContext().newArray(getScope(),people);
}","/** 
 * Get the collection of people stored in the repository. An optional filter query may be provided by which to filter the people collection. Space separate the query terms i.e. ""john bob"" will find all users who's first or second names contain the strings ""john"" or ""bob"".
 * @param filter filter query string by which to filter the collection of people.If <pre>null</pre> then all people stored in the repository are returned
 * @param maxResults maximum results to return or all if <= 0
 * @return people collection as a JavaScript array
 */
public Scriptable getPeople(String filter,int maxResults){
  Object[] people=null;
  if (filter == null || filter.length() == 0) {
    people=personService.getAllPeople().toArray();
  }
 else {
    filter=filter.trim();
    if (filter.length() != 0) {
      StringBuilder query=new StringBuilder(128);
      for (StringTokenizer t=new StringTokenizer(filter,""String_Node_Str""); t.hasMoreTokens(); ) {
        String term=LuceneQueryParser.escape(t.nextToken().replace('""',' '));
        query.append(""String_Node_Str"").append(NamespaceService.CONTENT_MODEL_PREFIX).append(""String_Node_Str"");
        query.append(term);
        query.append(""String_Node_Str"").append(NamespaceService.CONTENT_MODEL_PREFIX).append(""String_Node_Str"");
        query.append(term);
        query.append(""String_Node_Str"");
      }
      SearchParameters params=new SearchParameters();
      params.setLanguage(SearchService.LANGUAGE_LUCENE);
      params.addStore(this.storeRef);
      params.setQuery(query.toString());
      if (maxResults > 0) {
        params.setLimitBy(LimitBy.FINAL_SIZE);
        params.setLimit(maxResults);
      }
      ResultSet results=null;
      try {
        results=services.getSearchService().query(params);
        people=results.getNodeRefs().toArray();
      }
  finally {
        if (results != null) {
          results.close();
        }
      }
    }
  }
  if (people == null) {
    people=new Object[0];
  }
  return Context.getCurrentContext().newArray(getScope(),people);
}",0.9940973930152484
172243,"public void testBasic() throws Exception {
  File log=new File(""String_Node_Str"");
  log.mkdir();
  File metadata=new File(""String_Node_Str"");
  metadata.mkdir();
  File data=new File(""String_Node_Str"");
  data.mkdir();
  File target=new File(""String_Node_Str"");
  target.mkdir();
  try {
    @SuppressWarnings(""String_Node_Str"") FileSystemXmlApplicationContext receiverContext=new FileSystemXmlApplicationContext(""String_Node_Str"");
    DeploymentService service=(DeploymentService)fContext.getBean(""String_Node_Str"");
    NameMatcher matcher=(NameMatcher)fContext.getBean(""String_Node_Str"");
    setupBasicTree();
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    DeploymentReport report=new DeploymentReport();
    List<DeploymentCallback> callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    int count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(10,count);
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(2,count);
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    fService.removeNode(""String_Node_Str"");
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(4,count);
    fService.removeNode(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(3,count);
    fService.removeNode(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(5,count);
    BulkLoader loader=new BulkLoader();
    loader.setAvmService(fService);
    loader.recursiveLoad(""String_Node_Str"",""String_Node_Str"");
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    fService.removeNode(""String_Node_Str"");
    fService.getFileOutputStream(""String_Node_Str"").close();
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(4,count);
  }
  finally {
    Deleter.Delete(log);
    Deleter.Delete(data);
    Deleter.Delete(metadata);
    Deleter.Delete(target);
    File dot=new File(""String_Node_Str"");
    String[] listing=dot.list();
    for (    String name : listing) {
      if (name.startsWith(""String_Node_Str"")) {
        File file=new File(name);
        file.delete();
      }
    }
  }
}","public void testBasic() throws Exception {
  File log=new File(""String_Node_Str"");
  log.mkdir();
  File metadata=new File(""String_Node_Str"");
  metadata.mkdir();
  File data=new File(""String_Node_Str"");
  data.mkdir();
  File target=new File(""String_Node_Str"");
  target.mkdir();
  try {
    @SuppressWarnings(""String_Node_Str"") FileSystemXmlApplicationContext receiverContext=new FileSystemXmlApplicationContext(""String_Node_Str"");
    DeploymentService service=(DeploymentService)fContext.getBean(""String_Node_Str"");
    NameMatcher matcher=(NameMatcher)fContext.getBean(""String_Node_Str"");
    setupBasicTree();
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    DeploymentReport report=new DeploymentReport();
    List<DeploymentCallback> callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    int count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(10,count);
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(2,count);
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    fService.removeNode(""String_Node_Str"");
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(4,count);
    fService.removeNode(""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(3,count);
    fService.removeNode(""String_Node_Str"");
    fService.createDirectory(""String_Node_Str"",""String_Node_Str"");
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    fService.createFile(""String_Node_Str"",""String_Node_Str"").close();
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(5,count);
    BulkLoader loader=new BulkLoader();
    loader.setAvmService(fService);
    loader.recursiveLoad(""String_Node_Str"",""String_Node_Str"");
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    fService.removeNode(""String_Node_Str"");
    fService.getFileOutputStream(""String_Node_Str"").close();
    report=new DeploymentReport();
    callbacks=new ArrayList<DeploymentCallback>();
    callbacks.add(new DeploymentReportCallback(report));
    service.deployDifferenceFS(-1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",44100,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",matcher,false,false,false,callbacks);
    count=0;
    for (    DeploymentEvent event : report) {
      System.out.println(event);
      count++;
    }
    assertEquals(4,count);
  }
  finally {
    Deleter.Delete(log);
    Deleter.Delete(data);
    Deleter.Delete(metadata);
    Deleter.Delete(target);
    File dot=new File(""String_Node_Str"");
    String[] listing=dot.list();
    for (    String name : listing) {
      if (name.startsWith(""String_Node_Str"")) {
        File file=new File(name);
        file.delete();
      }
    }
  }
}",0.9942948653788408
172244,"/** 
 * Before delete node event
 * @param nodeRef NodeRef
 */
public void beforeDeleteNode(NodeRef nodeRef){
  if (nodeRef.getStoreRef().equals(m_storeRef) == false)   return;
  QName nodeType=m_nodeService.getType(nodeRef);
  FileFolderServiceType fType=m_fileFolderService.getType(nodeType);
  if (fType != FileFolderServiceType.INVALID) {
    Path nodePath=m_nodeService.getPath(nodeRef);
    String fName=(String)m_nodeService.getProperty(nodeRef,ContentModel.PROP_NAME);
    StringBuilder pathStr=new StringBuilder();
    pathStr.append(nodePath.toDisplayPath(m_nodeService,m_permissionService));
    if (pathStr.charAt(pathStr.length() - 1) != '/' && pathStr.charAt(pathStr.length() - 1) != '\\')     pathStr.append(""String_Node_Str"");
    pathStr.append(fName);
    String relPath=pathStr.toString();
    if (relPath.startsWith(m_rootPath)) {
      NodeEvent nodeEvent=new DeleteNodeEvent(fType,nodeRef,relPath);
      AlfrescoTransactionSupport.bindListener(this);
      AlfrescoTransactionSupport.bindResource(FileSysNodeEvent,nodeEvent);
      if (logger.isDebugEnabled())       logger.debug(""String_Node_Str"" + nodeRef + ""String_Node_Str""+ relPath);
    }
  }
}","/** 
 * Before delete node event
 * @param nodeRef NodeRef
 */
public void beforeDeleteNode(NodeRef nodeRef){
  if (nodeRef.getStoreRef().equals(m_storeRef) == false)   return;
  QName nodeType=m_nodeService.getType(nodeRef);
  FileFolderServiceType fType=m_fileFolderService.getType(nodeType);
  if (fType != FileFolderServiceType.INVALID) {
    Path nodePath=m_nodeService.getPath(nodeRef);
    String fName=(String)m_nodeService.getProperty(nodeRef,ContentModel.PROP_NAME);
    StringBuilder pathStr=new StringBuilder();
    pathStr.append(nodePath.toDisplayPath(m_nodeService,m_permissionService));
    if (pathStr.length() == 0 || (pathStr.charAt(pathStr.length() - 1) != '/' && pathStr.charAt(pathStr.length() - 1) != '\\'))     pathStr.append(""String_Node_Str"");
    pathStr.append(fName);
    String relPath=pathStr.toString();
    if (relPath.startsWith(m_rootPath)) {
      NodeEvent nodeEvent=new DeleteNodeEvent(fType,nodeRef,relPath);
      AlfrescoTransactionSupport.bindListener(this);
      AlfrescoTransactionSupport.bindResource(FileSysNodeEvent,nodeEvent);
      if (logger.isDebugEnabled())       logger.debug(""String_Node_Str"" + nodeRef + ""String_Node_Str""+ relPath);
    }
  }
}",0.988621997471555
172245,"public List<AclChange> enableInheritance(Long id,Long parent){
  List<AclChange> changes=new ArrayList<AclChange>();
  DbAccessControlList acl=(DbAccessControlList)getHibernateTemplate().get(DbAccessControlListImpl.class,id);
switch (acl.getAclType()) {
case FIXED:
case GLOBAL:
    throw new IllegalArgumentException(""String_Node_Str"");
case OLD:
  acl.setInherits(Boolean.TRUE);
aclCache.remove(id);
changes.add(new AclChangeImpl(id,id,acl.getAclType(),acl.getAclType()));
return changes;
case SHARED:
throw new IllegalArgumentException(""String_Node_Str"");
case DEFINING:
case LAYERED:
default :
if (!acl.getInherits()) {
getWritable(id,null,null,null,null,false,changes,WriteMode.COPY_ONLY);
acl=(DbAccessControlList)getHibernateTemplate().get(DbAccessControlListImpl.class,changes.get(0).getAfter());
acl.setInherits(Boolean.TRUE);
}
 else {
getWritable(id,null,null,null,null,false,changes,WriteMode.COPY_ONLY);
}
return mergeInheritedAccessControlList(parent,changes.get(0).getAfter());
}
}","public List<AclChange> enableInheritance(Long id,Long parent){
  List<AclChange> changes=new ArrayList<AclChange>();
  DbAccessControlList acl=(DbAccessControlList)getHibernateTemplate().get(DbAccessControlListImpl.class,id);
switch (acl.getAclType()) {
case FIXED:
case GLOBAL:
    throw new IllegalArgumentException(""String_Node_Str"");
case OLD:
  acl.setInherits(Boolean.TRUE);
aclCache.remove(id);
changes.add(new AclChangeImpl(id,id,acl.getAclType(),acl.getAclType()));
return changes;
case SHARED:
throw new IllegalArgumentException(""String_Node_Str"");
case DEFINING:
case LAYERED:
default :
if (!acl.getInherits()) {
getWritable(id,null,null,null,null,false,changes,WriteMode.COPY_ONLY);
acl=(DbAccessControlList)getHibernateTemplate().get(DbAccessControlListImpl.class,changes.get(0).getAfter());
acl.setInherits(Boolean.TRUE);
}
 else {
getWritable(id,null,null,null,null,false,changes,WriteMode.COPY_ONLY);
}
List<AclChange> merged=mergeInheritedAccessControlList(parent,changes.get(0).getAfter());
changes.addAll(merged);
return changes;
}
}",0.966796875
172246,"/** 
 * Purge store call back handler
 * @param storeName String
 */
public void storePurged(String storeName){
  FileStateTable fsTable=getStateTable();
  if (fsTable == null)   return;
  FileState rootState=fsTable.findFileState(FileName.DOS_SEPERATOR_STR);
  if (rootState != null && rootState.hasPseudoFiles()) {
    rootState.getPseudoFileList().removeFile(storeName,false);
    StringBuilder pathStr=new StringBuilder();
    pathStr.append(FileName.DOS_SEPERATOR);
    pathStr.append(storeName);
    String storePath=pathStr.toString();
    fsTable.removeFileState(storePath);
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + storeName);
    rootState.setLastUpdated(System.currentTimeMillis());
    if (hasChangeHandler()) {
      getChangeHandler().notifyDirectoryChanged(NotifyChange.ActionRemoved,storePath);
    }
  }
}","/** 
 * Purge store call back handler
 * @param storeName String
 */
public void storePurged(String storeName){
  FileStateTable fsTable=getStateTable();
  if (fsTable == null)   return;
  FileState rootState=fsTable.findFileState(FileName.DOS_SEPERATOR_STR);
  if (rootState != null && rootState.hasPseudoFiles()) {
    rootState.getPseudoFileList().removeFile(storeName,false);
    StringBuilder pathStr=new StringBuilder();
    pathStr.append(FileName.DOS_SEPERATOR);
    pathStr.append(storeName);
    String storePath=pathStr.toString();
    fsTable.removeFileState(storePath);
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + storeName);
    rootState.updateModifyDateTime();
    if (hasChangeHandler()) {
      getChangeHandler().notifyDirectoryChanged(NotifyChange.ActionRemoved,storePath);
    }
  }
}",0.8929845422116528
172247,"/** 
 * Rename a node
 * @param nodeToRenameRef Node to be renamed
 * @param newName New name for the node
 * @throws FileExistsException
 */
public void rename(NodeRef nodeToRenameRef,String newName) throws FileExistsException {
  try {
    if (newName.endsWith(""String_Node_Str"") || newName.endsWith(""String_Node_Str""))     nodeService.addAspect(nodeToRenameRef,ContentModel.ASPECT_TEMPORARY,null);
    fileFolderService.rename(nodeToRenameRef,newName);
  }
 catch (  org.alfresco.service.cmr.model.FileExistsException e) {
    throw new FileExistsException(newName);
  }
catch (  Throwable e) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + nodeToRenameRef + ""String_Node_Str""+ ""String_Node_Str""+ newName,e);
  }
}","/** 
 * Rename a node
 * @param nodeToRenameRef Node to be renamed
 * @param newName New name for the node
 * @throws FileExistsException
 */
public void rename(NodeRef nodeToRenameRef,String newName) throws FileExistsException {
  try {
    fileFolderService.rename(nodeToRenameRef,newName);
  }
 catch (  org.alfresco.service.cmr.model.FileExistsException e) {
    throw new FileExistsException(newName);
  }
catch (  Throwable e) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + nodeToRenameRef + ""String_Node_Str""+ ""String_Node_Str""+ newName,e);
  }
}",0.4472700074794316
172248,"/** 
 * Creates a new site container
 * @param componentId   component id
 * @param folderType    folder type to create
 * @return ScriptNode   the created container
 */
public ScriptNode createContainer(String componentId,String folderType,Object permissions){
  ScriptNode container=null;
  try {
    QName folderQName=(folderType == null) ? null : QName.createQName(folderType,serviceRegistry.getNamespaceService());
    final NodeRef containerNodeRef=this.siteService.createContainer(getShortName(),componentId,folderQName,null);
    if (permissions != null && permissions instanceof ScriptableObject) {
      ScriptableObject scriptable=(ScriptableObject)permissions;
      Object[] propIds=scriptable.getIds();
      for (int i=0; i < propIds.length; i++) {
        Object propId=propIds[i];
        if (propId instanceof String) {
          final String key=(String)propId;
          final Object value=scriptable.get(key,scriptable);
          if (value instanceof String) {
            AuthenticationUtil.runAs(new RunAsWork<Object>(){
              public Object doWork() throws Exception {
                Site.this.serviceRegistry.getPermissionService().setPermission(containerNodeRef,key,(String)value,true);
                return null;
              }
            }
,AuthenticationUtil.SYSTEM_USER_NAME);
          }
        }
      }
    }
    container=new ScriptNode(containerNodeRef,this.serviceRegistry,this.scope);
  }
 catch (  AlfrescoRuntimeException e) {
  }
  return container;
}","/** 
 * Creates a new site container
 * @param componentId   component id
 * @param folderType    folder type to create
 * @return ScriptNode   the created container
 */
public ScriptNode createContainer(final String componentId,final String folderType,final Object permissions){
  ScriptNode container=null;
  try {
    NodeRef containerNodeRef=AuthenticationUtil.runAs(new RunAsWork<NodeRef>(){
      public NodeRef doWork() throws Exception {
        QName folderQName=(folderType == null) ? null : QName.createQName(folderType,serviceRegistry.getNamespaceService());
        NodeRef containerNodeRef=Site.this.siteService.createContainer(getShortName(),componentId,folderQName,null);
        if (permissions != null && permissions instanceof ScriptableObject) {
          ScriptableObject scriptable=(ScriptableObject)permissions;
          Object[] propIds=scriptable.getIds();
          for (int i=0; i < propIds.length; i++) {
            Object propId=propIds[i];
            if (propId instanceof String) {
              final String key=(String)propId;
              final Object value=scriptable.get(key,scriptable);
              if (value instanceof String) {
                Site.this.serviceRegistry.getPermissionService().setPermission(containerNodeRef,key,(String)value,true);
              }
            }
          }
        }
        return containerNodeRef;
      }
    }
,AuthenticationUtil.SYSTEM_USER_NAME);
    container=new ScriptNode(containerNodeRef,this.serviceRegistry,this.scope);
  }
 catch (  AlfrescoRuntimeException e) {
  }
  return container;
}",0.8535320803629294
172249,"public Object doWork() throws Exception {
  Site.this.serviceRegistry.getPermissionService().setPermission(containerNodeRef,key,(String)value,true);
  return null;
}","public NodeRef doWork() throws Exception {
  QName folderQName=(folderType == null) ? null : QName.createQName(folderType,serviceRegistry.getNamespaceService());
  NodeRef containerNodeRef=Site.this.siteService.createContainer(getShortName(),componentId,folderQName,null);
  if (permissions != null && permissions instanceof ScriptableObject) {
    ScriptableObject scriptable=(ScriptableObject)permissions;
    Object[] propIds=scriptable.getIds();
    for (int i=0; i < propIds.length; i++) {
      Object propId=propIds[i];
      if (propId instanceof String) {
        final String key=(String)propId;
        final Object value=scriptable.get(key,scriptable);
        if (value instanceof String) {
          Site.this.serviceRegistry.getPermissionService().setPermission(containerNodeRef,key,(String)value,true);
        }
      }
    }
  }
  return containerNodeRef;
}",0.2807692307692307
172250,"/** 
 * Adds a tag to the node
 * @param tag   tag name
 */
public void addTag(String tag){
  this.services.getTaggingService().addTag(this.nodeRef,tag);
}","/** 
 * Adds a tag to the node
 * @param tag   tag name
 */
public void addTag(String tag){
  this.services.getTaggingService().addTag(this.nodeRef,tag);
  updateTagProperty();
}",0.9309309309309308
172251,"/** 
 * Removes a tag from the node
 * @param tag   tag name
 */
public void removeTag(String tag){
  this.services.getTaggingService().removeTag(this.nodeRef,tag);
}","/** 
 * Removes a tag from the node
 * @param tag   tag name
 */
public void removeTag(String tag){
  this.services.getTaggingService().removeTag(this.nodeRef,tag);
  updateTagProperty();
}",0.9352112676056338
172252,"/** 
 * Clear the node's tags
 */
public void clearTags(){
  this.services.getTaggingService().clearTags(this.nodeRef);
}","/** 
 * Clear the node's tags
 */
public void clearTags(){
  this.services.getTaggingService().clearTags(this.nodeRef);
  updateTagProperty();
}",0.9132075471698112
172253,"/** 
 * Removes all the tags from the node
 * @param tags  array of tag names
 */
public void removeTags(String[] tags){
  this.services.getTaggingService().removeTags(this.nodeRef,Arrays.asList(tags));
}","/** 
 * Removes all the tags from the node
 * @param tags  array of tag names
 */
public void removeTags(String[] tags){
  this.services.getTaggingService().removeTags(this.nodeRef,Arrays.asList(tags));
  updateTagProperty();
}",0.9466357308584686
172254,"/** 
 * Set the tags applied to this node.  This overwirtes the list of tags currently applied to the  node.
 * @param tags  array of tags
 */
public void setTags(String[] tags){
  this.services.getTaggingService().setTags(this.nodeRef,Arrays.asList(tags));
}","/** 
 * Set the tags applied to this node.  This overwirtes the list of tags currently applied to the  node.
 * @param tags  array of tags
 */
public void setTags(String[] tags){
  this.services.getTaggingService().setTags(this.nodeRef,Arrays.asList(tags));
  updateTagProperty();
}",0.9574861367837338
172255,"/** 
 * Adds all the tags to the node
 * @param tags  array of tag names
 */
public void addTags(String[] tags){
  this.services.getTaggingService().addTags(this.nodeRef,Arrays.asList(tags));
}","/** 
 * Adds all the tags to the node
 * @param tags  array of tag names
 */
public void addTags(String[] tags){
  this.services.getTaggingService().addTags(this.nodeRef,Arrays.asList(tags));
  updateTagProperty();
}",0.9437652811735942
172256,"public boolean isTransformable(String sourceMimetype,String targetMimetype,TransformationOptions options){
  if (sourceMimetype.startsWith(StringExtractingContentTransformer.PREFIX_TEXT)) {
    return false;
  }
 else   if (!sourceMimetype.equals(targetMimetype)) {
    return false;
  }
 else {
    if (BinaryPassThroughContentTransformer.class == options.getClass()) {
      return true;
    }
 else {
      return false;
    }
  }
}","public boolean isTransformable(String sourceMimetype,String targetMimetype,TransformationOptions options){
  if (sourceMimetype.startsWith(StringExtractingContentTransformer.PREFIX_TEXT)) {
    return false;
  }
 else   if (!sourceMimetype.equals(targetMimetype)) {
    return false;
  }
 else {
    if (BinaryPassThroughContentTransformer.class.equals(options.getClass()) == true) {
      return true;
    }
 else {
      return false;
    }
  }
}",0.9445073612684032
172257,"public void onCreateNode(ChildAssociationRef childAssocRef){
  NodeRef nodeRef=childAssocRef.getChildRef();
  Boolean value=(Boolean)nodeService.getProperty(nodeRef,ContentModel.PROP_MODEL_ACTIVE);
  if ((value != null) && (value == true)) {
    queueModel(nodeRef);
  }
}","public void onCreateNode(ChildAssociationRef childAssocRef){
  NodeRef nodeRef=childAssocRef.getChildRef();
  if (nodeService.getType(nodeRef).equals(ContentModel.TYPE_DICTIONARY_MODEL)) {
    Boolean value=(Boolean)nodeService.getProperty(nodeRef,ContentModel.PROP_MODEL_ACTIVE);
    if ((value != null) && (value == true)) {
      queueModel(nodeRef);
    }
  }
}",0.8540031397174255
172258,"/** 
 * Get message resource bundle from the repository note: also used by Web Client (ResourceBundleWrapper)
 * @param storeRef  store ref
 * @param path      repository path (XPath)
 * @param locale    locale
 * @return          input stream
 */
public InputStream getRepoResourceBundle(StoreRef storeRef,String path,Locale locale);","/** 
 * Get message resource bundle from the repository note: also used by Web Client (ResourceBundleWrapper)
 * @param storeRef  store ref
 * @param path      repository path (XPath)
 * @param locale    locale
 * @return          input stream
 */
public ResourceBundle getRepoResourceBundle(StoreRef storeRef,String path,Locale locale) throws IOException ;",0.934876989869754
172259,"public InputStream getRepoResourceBundle(StoreRef storeRef,String path,Locale locale){
  InputStream resBundleStream=null;
  SearchService searchService=serviceRegistry.getSearchService();
  NamespaceService resolver=serviceRegistry.getNamespaceService();
  NodeRef rootNode=serviceRegistry.getNodeService().getRootNode(storeRef);
  List<NodeRef> nodeRefs=searchService.selectNodes(rootNode,path + ""String_Node_Str"" + locale+ ""String_Node_Str"",null,resolver,false);
  if ((nodeRefs == null) || (nodeRefs.size() == 0)) {
    nodeRefs=searchService.selectNodes(rootNode,path + ""String_Node_Str"",null,resolver,false);
    if ((nodeRefs == null) || (nodeRefs.size() == 0)) {
      logger.debug(""String_Node_Str"" + storeRef + ""String_Node_Str""+ path);
      return null;
    }
  }
  if (nodeRefs.size() > 1) {
    throw new RuntimeException(""String_Node_Str"" + storeRef + path);
  }
 else {
    NodeRef messageResourceNodeRef=nodeRefs.get(0);
    ContentReader cr=serviceRegistry.getContentService().getReader(messageResourceNodeRef,ContentModel.PROP_CONTENT);
    resBundleStream=cr.getContentInputStream();
  }
  return resBundleStream;
}","public ResourceBundle getRepoResourceBundle(StoreRef storeRef,String path,Locale locale) throws IOException {
  ResourceBundle resBundle=null;
  SearchService searchService=serviceRegistry.getSearchService();
  NamespaceService resolver=serviceRegistry.getNamespaceService();
  NodeRef rootNode=serviceRegistry.getNodeService().getRootNode(storeRef);
  List<NodeRef> nodeRefs=searchService.selectNodes(rootNode,path + ""String_Node_Str"" + locale+ ""String_Node_Str"",null,resolver,false);
  if ((nodeRefs == null) || (nodeRefs.size() == 0)) {
    nodeRefs=searchService.selectNodes(rootNode,path + ""String_Node_Str"",null,resolver,false);
    if ((nodeRefs == null) || (nodeRefs.size() == 0)) {
      logger.debug(""String_Node_Str"" + storeRef + ""String_Node_Str""+ path);
      return null;
    }
  }
  if (nodeRefs.size() > 1) {
    throw new RuntimeException(""String_Node_Str"" + storeRef + path);
  }
 else {
    NodeRef messageResourceNodeRef=nodeRefs.get(0);
    ContentReader cr=serviceRegistry.getContentService().getReader(messageResourceNodeRef,ContentModel.PROP_CONTENT);
    resBundle=new MessagePropertyResourceBundle(new InputStreamReader(cr.getContentInputStream(),cr.getEncoding()));
  }
  return resBundle;
}",0.9315767105822356
172260,"public void unregisterResourceBundle(String resBundlePath){
  Map<Locale,Set<String>> loadedResourceBundlesForAllLocales;
  Map<Locale,Map<String,String>> cachedMessagesForAllLocales;
  Set<String> resourceBundleBaseNamesForAllLocales;
  String tenantDomain=getTenantDomain();
  try {
    readLock.lock();
    loadedResourceBundlesForAllLocales=getLoadedResourceBundles(tenantDomain);
    cachedMessagesForAllLocales=getMessages(tenantDomain);
    resourceBundleBaseNamesForAllLocales=getResourceBundleBaseNames(tenantDomain);
  }
  finally {
    readLock.unlock();
  }
  try {
    writeLock.lock();
    if ((loadedResourceBundlesForAllLocales != null) && (cachedMessagesForAllLocales != null)) {
      Iterator<Locale> itr=loadedResourceBundlesForAllLocales.keySet().iterator();
      while (itr.hasNext()) {
        Locale locale=itr.next();
        Set<String> loadedBundles=loadedResourceBundlesForAllLocales.get(locale);
        Map<String,String> props=cachedMessagesForAllLocales.get(locale);
        if ((loadedBundles != null) && (props != null)) {
          if (loadedBundles.contains(resBundlePath)) {
            ResourceBundle resourcebundle=null;
            int idx1=resBundlePath.indexOf(StoreRef.URI_FILLER);
            if (idx1 != -1) {
              int idx2=resBundlePath.indexOf(""String_Node_Str"",idx1 + 3);
              String store=resBundlePath.substring(0,idx2);
              String path=resBundlePath.substring(idx2);
              StoreRef storeRef=tenantService.getName(new StoreRef(store));
              InputStream resBundleStream=getRepoResourceBundle(storeRef,path,locale);
              try {
                if (resBundleStream != null) {
                  resourcebundle=new PropertyResourceBundle(resBundleStream);
                }
              }
 catch (              IOException ioe) {
                throw new RuntimeException(""String_Node_Str"" + resBundlePath + ""String_Node_Str""+ ioe);
              }
            }
 else {
              resourcebundle=ResourceBundle.getBundle(resBundlePath,locale);
            }
            if (resourcebundle != null) {
              Enumeration<String> enumKeys=resourcebundle.getKeys();
              while (enumKeys.hasMoreElements() == true) {
                String key=enumKeys.nextElement();
                props.remove(key);
              }
            }
            loadedBundles.remove(resBundlePath);
          }
        }
      }
    }
    if (resourceBundleBaseNamesForAllLocales != null) {
      resourceBundleBaseNamesForAllLocales.remove(resBundlePath);
      logger.info(""String_Node_Str"" + resBundlePath + ""String_Node_Str"");
    }
    clearLoadedResourceBundles(tenantDomain);
  }
  finally {
    writeLock.unlock();
  }
}","public void unregisterResourceBundle(String resBundlePath){
  Map<Locale,Set<String>> loadedResourceBundlesForAllLocales;
  Map<Locale,Map<String,String>> cachedMessagesForAllLocales;
  Set<String> resourceBundleBaseNamesForAllLocales;
  String tenantDomain=getTenantDomain();
  try {
    readLock.lock();
    loadedResourceBundlesForAllLocales=getLoadedResourceBundles(tenantDomain);
    cachedMessagesForAllLocales=getMessages(tenantDomain);
    resourceBundleBaseNamesForAllLocales=getResourceBundleBaseNames(tenantDomain);
  }
  finally {
    readLock.unlock();
  }
  try {
    writeLock.lock();
    if ((loadedResourceBundlesForAllLocales != null) && (cachedMessagesForAllLocales != null)) {
      Iterator<Locale> itr=loadedResourceBundlesForAllLocales.keySet().iterator();
      while (itr.hasNext()) {
        Locale locale=itr.next();
        Set<String> loadedBundles=loadedResourceBundlesForAllLocales.get(locale);
        Map<String,String> props=cachedMessagesForAllLocales.get(locale);
        if ((loadedBundles != null) && (props != null)) {
          if (loadedBundles.contains(resBundlePath)) {
            ResourceBundle resourcebundle=null;
            int idx1=resBundlePath.indexOf(StoreRef.URI_FILLER);
            if (idx1 != -1) {
              int idx2=resBundlePath.indexOf(""String_Node_Str"",idx1 + 3);
              String store=resBundlePath.substring(0,idx2);
              String path=resBundlePath.substring(idx2);
              StoreRef storeRef=tenantService.getName(new StoreRef(store));
              try {
                resourcebundle=getRepoResourceBundle(storeRef,path,locale);
              }
 catch (              IOException ioe) {
                throw new AlfrescoRuntimeException(""String_Node_Str"" + resBundlePath + ""String_Node_Str""+ ioe);
              }
            }
 else {
              resourcebundle=ResourceBundle.getBundle(resBundlePath,locale);
            }
            if (resourcebundle != null) {
              Enumeration<String> enumKeys=resourcebundle.getKeys();
              while (enumKeys.hasMoreElements() == true) {
                String key=enumKeys.nextElement();
                props.remove(key);
              }
            }
            loadedBundles.remove(resBundlePath);
          }
        }
      }
    }
    if (resourceBundleBaseNamesForAllLocales != null) {
      resourceBundleBaseNamesForAllLocales.remove(resBundlePath);
      logger.info(""String_Node_Str"" + resBundlePath + ""String_Node_Str"");
    }
    clearLoadedResourceBundles(tenantDomain);
  }
  finally {
    writeLock.unlock();
  }
}",0.9559155990957046
172261,"/** 
 * Get the messages for a locale. <p> Will use cache where available otherwise will load into cache from bundles.
 * @param locale    the locale
 * @return          message map
 */
private Map<String,String> getLocaleProperties(Locale locale){
  Set<String> loadedBundles=null;
  Map<String,String> props=null;
  int loadedBundleCount=0;
  String tenantDomain=getTenantDomain();
  boolean init=false;
  Map<Locale,Set<String>> tenantLoadedResourceBundles=null;
  Map<Locale,Map<String,String>> tenantCachedMessages=null;
  Set<String> tenantResourceBundleBaseNames=null;
  try {
    readLock.lock();
    tenantLoadedResourceBundles=getLoadedResourceBundles(tenantDomain);
    loadedBundles=tenantLoadedResourceBundles.get(locale);
    tenantCachedMessages=getMessages(tenantDomain);
    props=tenantCachedMessages.get(locale);
    tenantResourceBundleBaseNames=getResourceBundleBaseNames(tenantDomain);
    loadedBundleCount=tenantResourceBundleBaseNames.size();
  }
  finally {
    readLock.unlock();
  }
  if (loadedBundles == null) {
    try {
      writeLock.lock();
      loadedBundles=new HashSet<String>();
      tenantLoadedResourceBundles.put(locale,loadedBundles);
      init=true;
    }
  finally {
      writeLock.unlock();
    }
  }
  if (props == null) {
    try {
      writeLock.lock();
      props=new HashMap<String,String>();
      tenantCachedMessages.put(locale,props);
      init=true;
    }
  finally {
      writeLock.unlock();
    }
  }
  if ((loadedBundles.size() != loadedBundleCount) || (init == true)) {
    try {
      writeLock.lock();
      Set<String> resBundleBaseNames=getResourceBundleBaseNames(tenantDomain);
      int count=0;
      for (      String resBundlePath : resBundleBaseNames) {
        if (loadedBundles.contains(resBundlePath) == false) {
          ResourceBundle resourcebundle=null;
          int idx1=resBundlePath.indexOf(StoreRef.URI_FILLER);
          if (idx1 != -1) {
            int idx2=resBundlePath.indexOf(""String_Node_Str"",idx1 + 3);
            String store=resBundlePath.substring(0,idx2);
            String path=resBundlePath.substring(idx2);
            StoreRef storeRef=tenantService.getName(new StoreRef(store));
            InputStream resBundleStream=getRepoResourceBundle(storeRef,path,locale);
            try {
              if (resBundleStream != null) {
                resourcebundle=new PropertyResourceBundle(resBundleStream);
              }
            }
 catch (            IOException ioe) {
              throw new RuntimeException(""String_Node_Str"" + resBundlePath + ""String_Node_Str""+ ioe);
            }
          }
 else {
            resourcebundle=ResourceBundle.getBundle(resBundlePath,locale);
          }
          if (resourcebundle != null) {
            Enumeration<String> enumKeys=resourcebundle.getKeys();
            while (enumKeys.hasMoreElements() == true) {
              String key=enumKeys.nextElement();
              props.put(key,resourcebundle.getString(key));
            }
            loadedBundles.add(resBundlePath);
            count++;
          }
        }
      }
      logger.info(""String_Node_Str"" + count + ""String_Node_Str""+ locale);
    }
  finally {
      writeLock.unlock();
    }
  }
  return props;
}","/** 
 * Get the messages for a locale. <p> Will use cache where available otherwise will load into cache from bundles.
 * @param locale    the locale
 * @return          message map
 */
private Map<String,String> getLocaleProperties(Locale locale){
  Set<String> loadedBundles=null;
  Map<String,String> props=null;
  int loadedBundleCount=0;
  String tenantDomain=getTenantDomain();
  boolean init=false;
  Map<Locale,Set<String>> tenantLoadedResourceBundles=null;
  Map<Locale,Map<String,String>> tenantCachedMessages=null;
  Set<String> tenantResourceBundleBaseNames=null;
  try {
    readLock.lock();
    tenantLoadedResourceBundles=getLoadedResourceBundles(tenantDomain);
    loadedBundles=tenantLoadedResourceBundles.get(locale);
    tenantCachedMessages=getMessages(tenantDomain);
    props=tenantCachedMessages.get(locale);
    tenantResourceBundleBaseNames=getResourceBundleBaseNames(tenantDomain);
    loadedBundleCount=tenantResourceBundleBaseNames.size();
  }
  finally {
    readLock.unlock();
  }
  if (loadedBundles == null) {
    try {
      writeLock.lock();
      loadedBundles=new HashSet<String>();
      tenantLoadedResourceBundles.put(locale,loadedBundles);
      init=true;
    }
  finally {
      writeLock.unlock();
    }
  }
  if (props == null) {
    try {
      writeLock.lock();
      props=new HashMap<String,String>();
      tenantCachedMessages.put(locale,props);
      init=true;
    }
  finally {
      writeLock.unlock();
    }
  }
  if ((loadedBundles.size() != loadedBundleCount) || (init == true)) {
    try {
      writeLock.lock();
      Set<String> resBundleBaseNames=getResourceBundleBaseNames(tenantDomain);
      int count=0;
      for (      String resBundlePath : resBundleBaseNames) {
        if (loadedBundles.contains(resBundlePath) == false) {
          ResourceBundle resourcebundle=null;
          int idx1=resBundlePath.indexOf(StoreRef.URI_FILLER);
          if (idx1 != -1) {
            int idx2=resBundlePath.indexOf(""String_Node_Str"",idx1 + 3);
            String store=resBundlePath.substring(0,idx2);
            String path=resBundlePath.substring(idx2);
            StoreRef storeRef=tenantService.getName(new StoreRef(store));
            try {
              resourcebundle=getRepoResourceBundle(storeRef,path,locale);
            }
 catch (            IOException ioe) {
              throw new AlfrescoRuntimeException(""String_Node_Str"" + resBundlePath + ""String_Node_Str""+ ioe);
            }
          }
 else {
            resourcebundle=ResourceBundle.getBundle(resBundlePath,locale);
          }
          if (resourcebundle != null) {
            Enumeration<String> enumKeys=resourcebundle.getKeys();
            while (enumKeys.hasMoreElements() == true) {
              String key=enumKeys.nextElement();
              props.put(key,resourcebundle.getString(key));
            }
            loadedBundles.add(resBundlePath);
            count++;
          }
        }
      }
      logger.info(""String_Node_Str"" + count + ""String_Node_Str""+ locale);
    }
  finally {
      writeLock.unlock();
    }
  }
  return props;
}",0.964612954186414
172262,"/** 
 * Create a new File (cm:content) node as a child of this node. <p> Once created the file should have content set using the <code>content</code> property.
 * @param name Name of the file to create
 * @return Newly created Node or null if failed to create.
 */
public ScriptNode createFile(String name){
  ParameterCheck.mandatoryString(""String_Node_Str"",name);
  FileInfo fileInfo=this.services.getFileFolderService().create(this.nodeRef,name,ContentModel.TYPE_CONTENT);
  reset();
  return newInstance(fileInfo.getNodeRef(),this.services,this.scope);
}","/** 
 * Create a new File (cm:content) node as a child of this node. <p> Once created the file should have content set using the <code>content</code> property.
 * @param name Name of the file to create
 * @return Newly created Node or null if failed to create.
 */
public ScriptNode createFile(String name){
  ParameterCheck.mandatoryString(""String_Node_Str"",name);
  FileInfo fileInfo=this.services.getFileFolderService().create(this.nodeRef,name,ContentModel.TYPE_CONTENT);
  reset();
  ScriptNode file=newInstance(fileInfo.getNodeRef(),this.services,this.scope);
  file.setMimetype(this.services.getMimetypeService().guessMimetype(name));
  return file;
}",0.90625
172263,"/** 
 * Convert values for JBPM Context
 * @param value
 * @param services
 * @return
 */
private static Object convertForJBPM(Object value,ServiceRegistry services){
  if (value == null) {
    return null;
  }
 else   if (value instanceof NodeRef) {
    value=new JBPMNode(((NodeRef)value),services);
  }
 else   if (value instanceof Collection) {
    Collection<Object> collection=(Collection<Object>)value;
    Collection<Object> converted=new ArrayList<Object>();
    for (    Object obj : collection) {
      converted.add(convertForJBPM(obj,services));
    }
    value=converted;
  }
  return value;
}","/** 
 * Convert values for JBPM Context
 * @param value
 * @param services
 * @return
 */
private static Object convertForJBPM(Object value,ServiceRegistry services){
  if (value == null) {
    return null;
  }
 else   if (value instanceof NodeRef) {
    value=new JBPMNode(((NodeRef)value),services);
  }
 else   if (value instanceof Collection) {
    Collection<Object> collection=(Collection<Object>)value;
    boolean isNodeCollection=false;
    for (    Object obj : collection) {
      if (obj instanceof NodeRef) {
        isNodeCollection=true;
        break;
      }
    }
    if (isNodeCollection) {
      JBPMNodeList converted=new JBPMNodeList();
      for (      Object obj : collection) {
        if (!(obj instanceof NodeRef)) {
          throw new WorkflowException(""String_Node_Str"");
        }
        converted.add((JBPMNode)convertForJBPM(obj,services));
      }
      value=converted;
    }
 else {
      Collection<Object> converted=new ArrayList<Object>();
      for (      Object obj : collection) {
        converted.add(convertForJBPM(obj,services));
      }
      value=converted;
    }
  }
  return value;
}",0.5786452353616532
172264,"public Set<PermissionReference> getSettablePermissionReferences(NodeRef nodeRef){
  return modelDAO.getExposedPermissions(nodeRef);
}","public Set<PermissionReference> getSettablePermissionReferences(NodeRef nodeRef){
  return modelDAO.getExposedPermissions(tenantService.getName(nodeRef));
}",0.9204152249134948
172265,"public boolean hasSinglePermission(Set<String> authorisations,NodeRef nodeRef,Set<Pair<String,PermissionReference>> denied){
  denied.addAll(getDenied(nodeRef));
  Serializable key=null;
  if (denied.size() == 0) {
    key=generateKey(authorisations,nodeRef,this.required,CacheType.SINGLE_PERMISSION);
  }
  if (key != null) {
    AccessStatus status=accessCache.get(key);
    if (status != null) {
      return status == AccessStatus.ALLOWED;
    }
  }
  if (checkRequired(authorisations,nodeRef,denied)) {
    if (key != null) {
      accessCache.put(key,AccessStatus.ALLOWED);
    }
    return true;
  }
  ChildAssociationRef car=nodeService.getPrimaryParent(nodeRef);
  if (car.getParentRef() != null) {
    NodePermissionEntry nodePermissions=permissionsDaoComponent.getPermissions(nodeRef);
    if ((nodePermissions == null) || (nodePermissions.inheritPermissions())) {
      if (hasSinglePermission(authorisations,car.getParentRef(),denied)) {
        if (key != null) {
          accessCache.put(key,AccessStatus.ALLOWED);
        }
        return true;
      }
 else {
        if (key != null) {
          accessCache.put(key,AccessStatus.DENIED);
        }
        return false;
      }
    }
 else {
      if (key != null) {
        accessCache.put(key,AccessStatus.DENIED);
      }
      return false;
    }
  }
 else {
    if (key != null) {
      accessCache.put(key,AccessStatus.DENIED);
    }
    return false;
  }
}","public boolean hasSinglePermission(Set<String> authorisations,NodeRef nodeRef,Set<Pair<String,PermissionReference>> denied){
  nodeRef=tenantService.getName(nodeRef);
  denied.addAll(getDenied(nodeRef));
  Serializable key=null;
  if (denied.size() == 0) {
    key=generateKey(authorisations,nodeRef,this.required,CacheType.SINGLE_PERMISSION);
  }
  if (key != null) {
    AccessStatus status=accessCache.get(key);
    if (status != null) {
      return status == AccessStatus.ALLOWED;
    }
  }
  if (checkRequired(authorisations,nodeRef,denied)) {
    if (key != null) {
      accessCache.put(key,AccessStatus.ALLOWED);
    }
    return true;
  }
  ChildAssociationRef car=nodeService.getPrimaryParent(nodeRef);
  if (car.getParentRef() != null) {
    NodePermissionEntry nodePermissions=permissionsDaoComponent.getPermissions(nodeRef);
    if ((nodePermissions == null) || (nodePermissions.inheritPermissions())) {
      if (hasSinglePermission(authorisations,car.getParentRef(),denied)) {
        if (key != null) {
          accessCache.put(key,AccessStatus.ALLOWED);
        }
        return true;
      }
 else {
        if (key != null) {
          accessCache.put(key,AccessStatus.DENIED);
        }
        return false;
      }
    }
 else {
      if (key != null) {
        accessCache.put(key,AccessStatus.DENIED);
      }
      return false;
    }
  }
 else {
    if (key != null) {
      accessCache.put(key,AccessStatus.DENIED);
    }
    return false;
  }
}",0.9855471438403304
172266,"public void onEnableTenant(){
  init();
}","public void onEnableTenant(){
  initConfig();
}",0.9318181818181818
172267,"@Override protected void onBootstrap(ApplicationEvent event){
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    public Object doWork(){
      init();
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
  if (tenantService.isEnabled() && (tenantDeployerService != null)) {
    tenantDeployerService.deployTenants(this,logger);
    tenantDeployerService.register(this);
  }
}","@Override protected void onBootstrap(ApplicationEvent event){
  AuthenticationUtil.runAs(new RunAsWork<Object>(){
    public Object doWork(){
      initConfig();
      return null;
    }
  }
,AuthenticationUtil.getSystemUserName());
  if (tenantService.isEnabled() && (tenantDeployerService != null)) {
    tenantDeployerService.deployTenants(this,logger);
    tenantDeployerService.register(this);
  }
}",0.9925187032418952
172268,"/** 
 * Updates the destination nodes in the AVMDifferences with the source nodes. Normally any conflicts or cases in which the source of an AVMDifference is older than the destination will cause the transaction to roll back.
 * @param diffList A List of AVMDifference structs.
 * @param excluder A possibly null name matcher to exclude unwanted updates.
 * @param ignoreConflicts If this is true the update will skip those AVMDifferences which are in conflict with  the destination.
 * @param ignoreOlder If this is true the update will skip those AVMDifferences which have the source older than the destination.
 * @param overrideConflicts If this is true the update will override conflictingAVMDifferences and replace the destination with the conflicting source.
 * @param overrideOlder If this is true the update will override AVMDifferences
 * @param tag Short update blurb.
 * @param description Full update blurb.in which the source is older than the destination and overwrite the destination.
 */
public void update(List<AVMDifference> diffList,NameMatcher excluder,boolean ignoreConflicts,boolean ignoreOlder,boolean overrideConflicts,boolean overrideOlder,String tag,String description){
  if (fgLogger.isDebugEnabled()) {
    try {
      throw new Exception(""String_Node_Str"");
    }
 catch (    Exception e) {
      fgLogger.debug(""String_Node_Str"",e);
    }
  }
  Map<String,Integer> storeVersions=new HashMap<String,Integer>();
  Set<String> destStores=new HashSet<String>();
  for (  AVMDifference diff : diffList) {
    if (excluder != null && (excluder.matches(diff.getSourcePath()) || excluder.matches(diff.getDestinationPath()))) {
      continue;
    }
    if (!diff.isValid()) {
      throw new AVMSyncException(""String_Node_Str"");
    }
    if (fgLogger.isDebugEnabled()) {
      fgLogger.debug(""String_Node_Str"" + diff);
    }
    int version=diff.getSourceVersion();
    if (version < 0) {
      int colonOff=diff.getSourcePath().indexOf(':');
      if (colonOff == -1) {
        throw new AVMBadArgumentException(""String_Node_Str"");
      }
      String storeName=diff.getSourcePath().substring(0,colonOff);
      if (storeVersions.containsKey(storeName)) {
        version=storeVersions.get(storeName);
      }
 else {
        version=fAVMService.createSnapshot(storeName,""String_Node_Str"",null).get(storeName);
      }
    }
    AVMNodeDescriptor srcDesc=fAVMService.lookup(version,diff.getSourcePath(),true);
    String[] dstParts=AVMNodeConverter.SplitBase(diff.getDestinationPath());
    if (dstParts[0] == null || diff.getDestinationVersion() >= 0) {
      throw new AVMSyncException(""String_Node_Str"" + diff.getDestinationPath());
    }
    AVMNodeDescriptor dstDesc=fAVMService.lookup(-1,diff.getDestinationPath(),true);
    int diffCode=AVMDifference.NEWER;
    if (dstDesc != null) {
      diffCode=compareOne(srcDesc,dstDesc);
    }
    String dstPath=diff.getDestinationPath();
    destStores.add(dstPath.substring(0,dstPath.indexOf(':')));
switch (diffCode) {
case AVMDifference.SAME:
{
        continue;
      }
case AVMDifference.NEWER:
{
      linkIn(dstParts[0],dstParts[1],srcDesc,excluder,dstDesc != null && !dstDesc.isDeleted());
      continue;
    }
case AVMDifference.OLDER:
{
    if (overrideOlder) {
      linkIn(dstParts[0],dstParts[1],srcDesc,excluder,!dstDesc.isDeleted());
      continue;
    }
    if (ignoreOlder) {
      continue;
    }
    throw new AVMSyncException(""String_Node_Str"");
  }
case AVMDifference.CONFLICT:
{
  if (overrideConflicts) {
    linkIn(dstParts[0],dstParts[1],srcDesc,excluder,true);
    continue;
  }
  if (ignoreConflicts) {
    continue;
  }
  throw new AVMSyncException(""String_Node_Str"");
}
case AVMDifference.DIRECTORY:
{
if (ignoreConflicts) {
  continue;
}
throw new AVMSyncException(""String_Node_Str"");
}
default :
{
throw new AVMSyncException(""String_Node_Str"");
}
}
}
for (String storeName : destStores) {
fAVMService.createSnapshot(storeName,tag,description);
}
}","/** 
 * Updates the destination nodes in the AVMDifferences with the source nodes. Normally any conflicts or cases in which the source of an AVMDifference is older than the destination will cause the transaction to roll back.
 * @param diffList A List of AVMDifference structs.
 * @param excluder A possibly null name matcher to exclude unwanted updates.
 * @param ignoreConflicts If this is true the update will skip those AVMDifferences which are in conflict with  the destination.
 * @param ignoreOlder If this is true the update will skip those AVMDifferences which have the source older than the destination.
 * @param overrideConflicts If this is true the update will override conflictingAVMDifferences and replace the destination with the conflicting source.
 * @param overrideOlder If this is true the update will override AVMDifferences
 * @param tag Short update blurb.
 * @param description Full update blurb.in which the source is older than the destination and overwrite the destination.
 */
public void update(List<AVMDifference> diffList,NameMatcher excluder,boolean ignoreConflicts,boolean ignoreOlder,boolean overrideConflicts,boolean overrideOlder,String tag,String description){
  if (fgLogger.isDebugEnabled()) {
    try {
      throw new Exception(""String_Node_Str"");
    }
 catch (    Exception e) {
      fgLogger.debug(""String_Node_Str"",e);
    }
  }
  Map<String,Integer> storeVersions=new HashMap<String,Integer>();
  Set<String> destStores=new HashSet<String>();
  for (  AVMDifference diff : diffList) {
    if (excluder != null && (excluder.matches(diff.getSourcePath()) || excluder.matches(diff.getDestinationPath()))) {
      continue;
    }
    if (!diff.isValid()) {
      throw new AVMSyncException(""String_Node_Str"");
    }
    if (fgLogger.isDebugEnabled()) {
      fgLogger.debug(""String_Node_Str"" + diff);
    }
    int version=diff.getSourceVersion();
    if (version < 0) {
      int colonOff=diff.getSourcePath().indexOf(':');
      if (colonOff == -1) {
        throw new AVMBadArgumentException(""String_Node_Str"");
      }
      String storeName=diff.getSourcePath().substring(0,colonOff);
      if (storeVersions.containsKey(storeName)) {
        version=storeVersions.get(storeName);
      }
 else {
        version=fAVMService.createSnapshot(storeName,""String_Node_Str"",null).get(storeName);
        storeVersions.put(storeName,version);
      }
    }
    AVMNodeDescriptor srcDesc=fAVMService.lookup(version,diff.getSourcePath(),true);
    String[] dstParts=AVMNodeConverter.SplitBase(diff.getDestinationPath());
    if (dstParts[0] == null || diff.getDestinationVersion() >= 0) {
      throw new AVMSyncException(""String_Node_Str"" + diff.getDestinationPath());
    }
    AVMNodeDescriptor dstDesc=fAVMService.lookup(-1,diff.getDestinationPath(),true);
    int diffCode=AVMDifference.NEWER;
    if (dstDesc != null) {
      diffCode=compareOne(srcDesc,dstDesc);
    }
    String dstPath=diff.getDestinationPath();
    destStores.add(dstPath.substring(0,dstPath.indexOf(':')));
switch (diffCode) {
case AVMDifference.SAME:
{
        continue;
      }
case AVMDifference.NEWER:
{
      linkIn(dstParts[0],dstParts[1],srcDesc,excluder,dstDesc != null && !dstDesc.isDeleted());
      continue;
    }
case AVMDifference.OLDER:
{
    if (overrideOlder) {
      linkIn(dstParts[0],dstParts[1],srcDesc,excluder,!dstDesc.isDeleted());
      continue;
    }
    if (ignoreOlder) {
      continue;
    }
    throw new AVMSyncException(""String_Node_Str"");
  }
case AVMDifference.CONFLICT:
{
  if (overrideConflicts) {
    linkIn(dstParts[0],dstParts[1],srcDesc,excluder,true);
    continue;
  }
  if (ignoreConflicts) {
    continue;
  }
  throw new AVMSyncException(""String_Node_Str"");
}
case AVMDifference.DIRECTORY:
{
if (ignoreConflicts) {
  continue;
}
throw new AVMSyncException(""String_Node_Str"");
}
default :
{
throw new AVMSyncException(""String_Node_Str"");
}
}
}
for (String storeName : destStores) {
fAVMService.createSnapshot(storeName,tag,description);
}
}",0.9942211055276382
172269,"/** 
 * NTLM2 encryption of the MD4 hashed password
 * @param md4Hash byte[]
 * @param userName String
 * @param domain String
 * @return byte[]
 * @exception NoSuchAlgorithmException
 */
public final byte[] doNTLM2Encryption(byte[] md4Hash,String userName,String domain) throws NoSuchAlgorithmException, InvalidKeyException {
  Mac hmacMd5=Mac.getInstance(""String_Node_Str"");
  SecretKeySpec key=new SecretKeySpec(md4Hash,0,md4Hash.length,""String_Node_Str"");
  hmacMd5.init(key);
  StringBuilder str=new StringBuilder();
  str.append(userName.toUpperCase());
  str.append(domain.toUpperCase());
  String dataStr=str.toString();
  byte[] dataByts=null;
  try {
    dataByts=dataStr.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
  }
  return hmacMd5.doFinal(dataByts);
}","/** 
 * NTLM2 encryption of the MD4 hashed password
 * @param md4Hash byte[]
 * @param userName String
 * @param domain String
 * @return byte[]
 * @exception NoSuchAlgorithmException
 */
public final byte[] doNTLM2Encryption(byte[] md4Hash,String userName,String domain) throws NoSuchAlgorithmException, InvalidKeyException {
  Mac hmacMd5=Mac.getInstance(""String_Node_Str"");
  SecretKeySpec key=new SecretKeySpec(md4Hash,0,md4Hash.length,""String_Node_Str"");
  hmacMd5.init(key);
  StringBuilder str=new StringBuilder();
  str.append(userName.toUpperCase());
  str.append(domain);
  String dataStr=str.toString();
  byte[] dataByts=null;
  try {
    dataByts=dataStr.getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
  }
  return hmacMd5.doFinal(dataByts);
}",0.9911838790931988
172270,"/** 
 * Create a new file on the file system.
 * @param sess Server session
 * @param tree Tree connection
 * @param params File create parameters
 * @return NetworkFile
 * @exception java.io.IOException If an error occurs.
 */
public NetworkFile createFile(SrvSession sess,TreeConnection tree,FileOpenParams params) throws IOException {
  sess.beginWriteTransaction(transactionService);
  try {
    ContentContext ctx=(ContentContext)tree.getContext();
    NodeRef deviceRootNodeRef=ctx.getRootNode();
    String path=params.getPath();
    if (ctx.hasStateTable()) {
      String[] paths=FileName.splitPath(path);
      if (paths[0] != null && paths[0].length() > 1) {
        NodeRef nodeRef=getNodeForPath(tree,paths[0]);
        if (nodeRef != null) {
          deviceRootNodeRef=nodeRef;
          path=paths[1];
          if (logger.isInfoEnabled())           logger.debug(""String_Node_Str"" + paths[0]);
        }
      }
    }
    NodeRef nodeRef=cifsHelper.createNode(deviceRootNodeRef,path,true);
    NetworkFile netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,cifsHelper,nodeRef,params);
    netFile.truncateFile(0L);
    if (netFile != null)     netFile.setFileId(params.getPath().hashCode());
    if (ctx.hasStateTable()) {
      FileState fstate=ctx.getStateTable().findFileState(path,false,true);
      if (fstate != null) {
        fstate.setFileStatus(FileStateStatus.FileExists);
        fstate.incrementOpenCount();
        fstate.setNodeRef(nodeRef);
        netFile.setFileState(fstate);
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + fstate);
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ nodeRef+ ""String_Node_Str""+ ""String_Node_Str""+ netFile);
    }
    return netFile;
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + params.getFullPath());
    throw new AccessDeniedException(""String_Node_Str"" + params.getFullPath());
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new IOException(""String_Node_Str"" + params.getFullPath());
  }
}","/** 
 * Create a new file on the file system.
 * @param sess Server session
 * @param tree Tree connection
 * @param params File create parameters
 * @return NetworkFile
 * @exception java.io.IOException If an error occurs.
 */
public NetworkFile createFile(SrvSession sess,TreeConnection tree,FileOpenParams params) throws IOException {
  sess.beginWriteTransaction(transactionService);
  try {
    ContentContext ctx=(ContentContext)tree.getContext();
    NodeRef deviceRootNodeRef=ctx.getRootNode();
    String path=params.getPath();
    if (ctx.hasStateTable()) {
      String[] paths=FileName.splitPath(path);
      if (paths[0] != null && paths[0].length() > 1) {
        NodeRef nodeRef=getNodeForPath(tree,paths[0]);
        if (nodeRef != null) {
          deviceRootNodeRef=nodeRef;
          path=paths[1];
          if (logger.isInfoEnabled())           logger.debug(""String_Node_Str"" + paths[0]);
        }
      }
    }
    NodeRef nodeRef=cifsHelper.createNode(deviceRootNodeRef,path,true);
    ContentNetworkFile netFile=ContentNetworkFile.createFile(nodeService,contentService,mimetypeService,cifsHelper,nodeRef,params);
    netFile.setGrantedAccess(NetworkFile.READWRITE);
    netFile.truncateFile(0L);
    if (netFile != null)     netFile.setFileId(params.getPath().hashCode());
    if (ctx.hasStateTable()) {
      FileState fstate=ctx.getStateTable().findFileState(path,false,true);
      if (fstate != null) {
        fstate.setFileStatus(FileStateStatus.FileExists);
        fstate.incrementOpenCount();
        fstate.setNodeRef(nodeRef);
        netFile.setFileState(fstate);
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + fstate);
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + path + ""String_Node_Str""+ ""String_Node_Str""+ params+ ""String_Node_Str""+ ""String_Node_Str""+ nodeRef+ ""String_Node_Str""+ ""String_Node_Str""+ netFile);
    }
    return netFile;
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + params.getFullPath());
    throw new AccessDeniedException(""String_Node_Str"" + params.getFullPath());
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new IOException(""String_Node_Str"" + params.getFullPath());
  }
}",0.9874161073825504
172271,"/** 
 * Set the file folder server
 * @param fileService FileFolderService
 */
public void setFileFolderService(FileFolderService fileService){
  fileFolderService=fileService;
}","/** 
 * Set the file folder service
 * @param fileService FileFolderService
 */
public void setFileFolderService(FileFolderService fileService){
  fileFolderService=fileService;
}",0.9915966386554622
172272,"/** 
 * Sets Properties of Task
 * @param instance  task instance
 * @param properties  properties to set
 */
protected void setTaskProperties(TaskInstance instance,Map<QName,Serializable> properties){
  if (properties == null) {
    return;
  }
  TypeDefinition taskDef=getAnonymousTaskDefinition(getTaskDefinition(instance.getTask()));
  Map<QName,PropertyDefinition> taskProperties=taskDef.getProperties();
  Map<QName,AssociationDefinition> taskAssocs=taskDef.getAssociations();
  for (  Entry<QName,Serializable> entry : properties.entrySet()) {
    QName key=entry.getKey();
    Serializable value=entry.getValue();
    PropertyDefinition propDef=taskProperties.get(key);
    if (propDef != null) {
      if (propDef.isProtected()) {
        continue;
      }
      if (value instanceof Collection) {
        value=(Serializable)DefaultTypeConverter.INSTANCE.convert(propDef.getDataType(),(Collection)value);
      }
 else {
        value=(Serializable)DefaultTypeConverter.INSTANCE.convert(propDef.getDataType(),value);
      }
      DataTypeDefinition dataTypeDef=propDef.getDataType();
      if (dataTypeDef.getName().equals(DataTypeDefinition.NODE_REF)) {
        value=convertNodeRefs(propDef.isMultiValued(),value);
      }
      if (key.equals(WorkflowModel.PROP_DESCRIPTION)) {
        if (value != null && !(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setDescription((String)value);
        continue;
      }
      if (key.equals(WorkflowModel.PROP_DUE_DATE)) {
        if (value != null && !(value instanceof Date)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setDueDate((Date)value);
        continue;
      }
 else       if (key.equals(WorkflowModel.PROP_PRIORITY)) {
        if (!(value instanceof Integer)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setPriority((Integer)value);
        continue;
      }
 else       if (key.equals(WorkflowModel.PROP_COMMENT)) {
        if (!(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        final List<Comment> comments=instance.getComments();
        if (comments != null && comments.size() > 0) {
          jbpmTemplate.execute(new JbpmCallback(){
            public Object doInJbpm(            JbpmContext context){
              Session session=context.getSession();
              for (              Comment comment : comments) {
                comment.getToken().getComments().remove(comment);
                session.delete(comment);
              }
              comments.clear();
              return null;
            }
          }
);
        }
        instance.addComment((String)value);
        continue;
      }
 else       if (key.equals(ContentModel.PROP_OWNER)) {
        if (value != null && !(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        String actorId=(String)value;
        String existingActorId=instance.getActorId();
        if (existingActorId == null || !existingActorId.equals(actorId)) {
          instance.setActorId((String)value);
        }
        continue;
      }
    }
 else {
      AssociationDefinition assocDef=taskAssocs.get(key);
      if (assocDef != null) {
        value=convertNodeRefs(assocDef.isTargetMany(),value);
        if (key.equals(WorkflowModel.ASSOC_POOLED_ACTORS)) {
          String[] pooledActors=null;
          if (value instanceof JBPMNodeList[]) {
            JBPMNodeList actors=(JBPMNodeList)value;
            pooledActors=new String[actors.size()];
            int i=0;
            for (            JBPMNode actor : actors) {
              pooledActors[i++]=mapAuthorityToName(actor.getNodeRef());
            }
          }
 else           if (value instanceof JBPMNode) {
            JBPMNode node=(JBPMNode)value;
            pooledActors=new String[]{mapAuthorityToName(node.getNodeRef())};
          }
 else {
            throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
          }
          instance.setPooledActors(pooledActors);
          continue;
        }
 else         if (key.equals(WorkflowModel.ASSOC_PACKAGE)) {
          String name=mapQNameToName(key);
          JBPMNode existingWorkflowPackage=(JBPMNode)instance.getVariable(name);
          if (existingWorkflowPackage != null && value != null) {
            NodeRef newPackageNodeRef=((JBPMNode)value).getNodeRef();
            ProcessInstance processInstance=instance.getToken().getProcessInstance();
            String packageInstanceId=(String)nodeService.getProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_INSTANCE_ID);
            if (packageInstanceId != null && packageInstanceId.length() > 0 && (processInstance.getId() == getJbpmId(packageInstanceId))) {
              String workflowInstanceId=createGlobalId(new Long(processInstance.getId()).toString());
              throw new WorkflowException(""String_Node_Str"" + newPackageNodeRef + ""String_Node_Str""+ workflowInstanceId+ ""String_Node_Str""+ packageInstanceId+ ""String_Node_Str"");
            }
          }
          if (existingWorkflowPackage == null && value != null) {
            NodeRef newPackageNodeRef=((JBPMNode)value).getNodeRef();
            ProcessInstance processInstance=instance.getToken().getProcessInstance();
            WorkflowInstance workflowInstance=createWorkflowInstance(processInstance);
            nodeService.setProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_DEFINITION_ID,workflowInstance.definition.id);
            nodeService.setProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_DEFINITION_NAME,workflowInstance.definition.name);
            nodeService.setProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_INSTANCE_ID,workflowInstance.id);
          }
        }
      }
 else {
        if (value instanceof NodeRef) {
          value=new JBPMNode((NodeRef)value,serviceRegistry);
        }
      }
    }
    String name=mapQNameToName(key);
    instance.setVariableLocally(name,value);
  }
}","/** 
 * Sets Properties of Task
 * @param instance  task instance
 * @param properties  properties to set
 */
protected void setTaskProperties(TaskInstance instance,Map<QName,Serializable> properties){
  if (properties == null) {
    return;
  }
  TypeDefinition taskDef=getAnonymousTaskDefinition(getTaskDefinition(instance.getTask()));
  Map<QName,PropertyDefinition> taskProperties=taskDef.getProperties();
  Map<QName,AssociationDefinition> taskAssocs=taskDef.getAssociations();
  for (  Entry<QName,Serializable> entry : properties.entrySet()) {
    QName key=entry.getKey();
    Serializable value=entry.getValue();
    PropertyDefinition propDef=taskProperties.get(key);
    if (propDef != null) {
      if (propDef.isProtected()) {
        continue;
      }
      if (value instanceof Collection) {
        value=(Serializable)DefaultTypeConverter.INSTANCE.convert(propDef.getDataType(),(Collection)value);
      }
 else {
        value=(Serializable)DefaultTypeConverter.INSTANCE.convert(propDef.getDataType(),value);
      }
      DataTypeDefinition dataTypeDef=propDef.getDataType();
      if (dataTypeDef.getName().equals(DataTypeDefinition.NODE_REF)) {
        value=convertNodeRefs(propDef.isMultiValued(),value);
      }
      if (key.equals(WorkflowModel.PROP_DESCRIPTION)) {
        if (value != null && !(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setDescription((String)value);
        continue;
      }
      if (key.equals(WorkflowModel.PROP_DUE_DATE)) {
        if (value != null && !(value instanceof Date)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setDueDate((Date)value);
        continue;
      }
 else       if (key.equals(WorkflowModel.PROP_PRIORITY)) {
        if (!(value instanceof Integer)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setPriority((Integer)value);
        continue;
      }
 else       if (key.equals(WorkflowModel.PROP_COMMENT)) {
        if (!(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        final List<Comment> comments=instance.getComments();
        if (comments != null && comments.size() > 0) {
          jbpmTemplate.execute(new JbpmCallback(){
            public Object doInJbpm(            JbpmContext context){
              Session session=context.getSession();
              for (              Comment comment : comments) {
                comment.getToken().getComments().remove(comment);
                session.delete(comment);
              }
              comments.clear();
              return null;
            }
          }
);
        }
        instance.addComment((String)value);
        continue;
      }
 else       if (key.equals(ContentModel.PROP_OWNER)) {
        if (value != null && !(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        String actorId=(String)value;
        String existingActorId=instance.getActorId();
        if (existingActorId == null || !existingActorId.equals(actorId)) {
          instance.setActorId((String)value,false);
        }
        continue;
      }
    }
 else {
      AssociationDefinition assocDef=taskAssocs.get(key);
      if (assocDef != null) {
        value=convertNodeRefs(assocDef.isTargetMany(),value);
        if (key.equals(WorkflowModel.ASSOC_POOLED_ACTORS)) {
          String[] pooledActors=null;
          if (value instanceof JBPMNodeList[]) {
            JBPMNodeList actors=(JBPMNodeList)value;
            pooledActors=new String[actors.size()];
            int i=0;
            for (            JBPMNode actor : actors) {
              pooledActors[i++]=mapAuthorityToName(actor.getNodeRef());
            }
          }
 else           if (value instanceof JBPMNode) {
            JBPMNode node=(JBPMNode)value;
            pooledActors=new String[]{mapAuthorityToName(node.getNodeRef())};
          }
 else {
            throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
          }
          instance.setPooledActors(pooledActors);
          continue;
        }
 else         if (key.equals(WorkflowModel.ASSOC_PACKAGE)) {
          String name=mapQNameToName(key);
          JBPMNode existingWorkflowPackage=(JBPMNode)instance.getVariable(name);
          if (existingWorkflowPackage != null && value != null) {
            NodeRef newPackageNodeRef=((JBPMNode)value).getNodeRef();
            ProcessInstance processInstance=instance.getToken().getProcessInstance();
            String packageInstanceId=(String)nodeService.getProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_INSTANCE_ID);
            if (packageInstanceId != null && packageInstanceId.length() > 0 && (processInstance.getId() == getJbpmId(packageInstanceId))) {
              String workflowInstanceId=createGlobalId(new Long(processInstance.getId()).toString());
              throw new WorkflowException(""String_Node_Str"" + newPackageNodeRef + ""String_Node_Str""+ workflowInstanceId+ ""String_Node_Str""+ packageInstanceId+ ""String_Node_Str"");
            }
          }
          if (existingWorkflowPackage == null && value != null) {
            NodeRef newPackageNodeRef=((JBPMNode)value).getNodeRef();
            ProcessInstance processInstance=instance.getToken().getProcessInstance();
            WorkflowInstance workflowInstance=createWorkflowInstance(processInstance);
            nodeService.setProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_DEFINITION_ID,workflowInstance.definition.id);
            nodeService.setProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_DEFINITION_NAME,workflowInstance.definition.name);
            nodeService.setProperty(newPackageNodeRef,WorkflowModel.PROP_WORKFLOW_INSTANCE_ID,workflowInstance.id);
          }
        }
      }
 else {
        if (value instanceof NodeRef) {
          value=new JBPMNode((NodeRef)value,serviceRegistry);
        }
      }
    }
    String name=mapQNameToName(key);
    instance.setVariableLocally(name,value);
  }
}",0.9995198463508322
172273,"/** 
 * @see org.alfresco.service.cmr.repository.NodeService#createNode(org.alfresco.service.cmr.repository.NodeRef,org.alfresco.service.namespace.QName,org.alfresco.service.namespace.QName,org.alfresco.service.namespace.QName,java.util.Map)
 */
public ChildAssociationRef createNode(NodeRef parentRef,QName assocTypeQName,QName assocQName,QName nodeTypeQName,Map<QName,Serializable> properties){
  Assert.notNull(parentRef);
  Assert.notNull(assocTypeQName);
  Assert.notNull(assocQName);
  if (properties == null) {
    properties=new HashMap<QName,Serializable>();
  }
 else {
    properties=new HashMap<QName,Serializable>(properties);
  }
  invokeBeforeCreateNode(parentRef,assocTypeQName,assocQName,nodeTypeQName);
  StoreRef storeRef=parentRef.getStoreRef();
  Store store=nodeDaoService.getStore(storeRef.getProtocol(),storeRef.getIdentifier());
  if (store == null) {
    throw new RuntimeException(""String_Node_Str"" + parentRef);
  }
  TypeDefinition nodeTypeDef=dictionaryService.getType(nodeTypeQName);
  if (nodeTypeDef == null) {
    throw new InvalidTypeException(nodeTypeQName);
  }
  String newId=generateGuid(properties);
  Node childNode=nodeDaoService.newNode(store,newId,nodeTypeQName);
  NodeRef childNodeRef=childNode.getNodeRef();
  invokeBeforeCreateChildAssociation(parentRef,childNodeRef,assocTypeQName,assocQName,true);
  Node parentNode=getNodeNotNull(parentRef);
  ChildAssoc childAssoc=nodeDaoService.newChildAssoc(parentNode,childNode,true,assocTypeQName,assocQName);
  addDefaultPropertyValues(nodeTypeDef,properties);
  addDefaultAspects(nodeTypeDef,childNode,properties);
  Map<QName,Serializable> propertiesBefore=getPropertiesImpl(childNode);
  Map<QName,Serializable> propertiesAfter=null;
  if (properties.size() > 0) {
    propertiesAfter=setPropertiesImpl(childNode,properties);
  }
  setChildUniqueName(childNode);
  ChildAssociationRef childAssocRef=childAssoc.getChildAssocRef();
  invokeOnCreateNode(childAssocRef);
  invokeOnCreateChildAssociation(childAssocRef,true);
  if (propertiesAfter != null) {
    invokeOnUpdateProperties(childAssocRef.getChildRef(),propertiesBefore,propertiesAfter);
  }
  return childAssocRef;
}","/** 
 * @see org.alfresco.service.cmr.repository.NodeService#createNode(org.alfresco.service.cmr.repository.NodeRef,org.alfresco.service.namespace.QName,org.alfresco.service.namespace.QName,org.alfresco.service.namespace.QName,java.util.Map)
 */
public ChildAssociationRef createNode(NodeRef parentRef,QName assocTypeQName,QName assocQName,QName nodeTypeQName,Map<QName,Serializable> properties){
  Assert.notNull(parentRef);
  Assert.notNull(assocTypeQName);
  Assert.notNull(assocQName);
  Node parentNode=getNodeNotNull(parentRef);
  if (properties == null) {
    properties=new HashMap<QName,Serializable>();
  }
 else {
    properties=new HashMap<QName,Serializable>(properties);
  }
  invokeBeforeCreateNode(parentRef,assocTypeQName,assocQName,nodeTypeQName);
  StoreRef storeRef=parentRef.getStoreRef();
  Store store=nodeDaoService.getStore(storeRef.getProtocol(),storeRef.getIdentifier());
  if (store == null) {
    throw new RuntimeException(""String_Node_Str"" + parentRef);
  }
  TypeDefinition nodeTypeDef=dictionaryService.getType(nodeTypeQName);
  if (nodeTypeDef == null) {
    throw new InvalidTypeException(nodeTypeQName);
  }
  String newId=generateGuid(properties);
  Node childNode=nodeDaoService.newNode(store,newId,nodeTypeQName);
  NodeRef childNodeRef=childNode.getNodeRef();
  invokeBeforeCreateChildAssociation(parentRef,childNodeRef,assocTypeQName,assocQName,true);
  ChildAssoc childAssoc=nodeDaoService.newChildAssoc(parentNode,childNode,true,assocTypeQName,assocQName);
  addDefaultPropertyValues(nodeTypeDef,properties);
  addDefaultAspects(nodeTypeDef,childNode,properties);
  Map<QName,Serializable> propertiesBefore=getPropertiesImpl(childNode);
  Map<QName,Serializable> propertiesAfter=null;
  if (properties.size() > 0) {
    propertiesAfter=setPropertiesImpl(childNode,properties);
  }
  setChildUniqueName(childNode);
  ChildAssociationRef childAssocRef=childAssoc.getChildAssocRef();
  invokeOnCreateNode(childAssocRef);
  invokeOnCreateChildAssociation(childAssocRef,true);
  if (propertiesAfter != null) {
    invokeOnUpdateProperties(childAssocRef.getChildRef(),propertiesBefore,propertiesAfter);
  }
  return childAssocRef;
}",0.8626094974642693
172274,"/** 
 * @see Node#getAspects()
 */
public void addAspect(NodeRef nodeRef,QName aspectTypeQName,Map<QName,Serializable> aspectProperties) throws InvalidNodeRefException, InvalidAspectException {
  AspectDefinition aspectDef=dictionaryService.getAspect(aspectTypeQName);
  if (aspectDef == null) {
    throw new InvalidAspectException(""String_Node_Str"" + aspectTypeQName,aspectTypeQName);
  }
  invokeBeforeUpdateNode(nodeRef);
  invokeBeforeAddAspect(nodeRef,aspectTypeQName);
  Node node=getNodeNotNull(nodeRef);
  Map<QName,Serializable> nodeProperties=getPropertiesImpl(node);
  if (aspectProperties != null) {
    nodeProperties.putAll(aspectProperties);
  }
  addDefaultPropertyValues(aspectDef,nodeProperties);
  addDefaultAspects(aspectDef,node,nodeProperties);
  setProperties(nodeRef,nodeProperties);
  if (node.getAspects().add(aspectTypeQName) == true) {
    invokeOnUpdateNode(nodeRef);
    invokeOnAddAspect(nodeRef,aspectTypeQName);
    nodeDaoService.recordChangeId(nodeRef);
  }
}","/** 
 * @see Node#getAspects()
 */
public void addAspect(NodeRef nodeRef,QName aspectTypeQName,Map<QName,Serializable> aspectProperties) throws InvalidNodeRefException, InvalidAspectException {
  AspectDefinition aspectDef=dictionaryService.getAspect(aspectTypeQName);
  if (aspectDef == null) {
    throw new InvalidAspectException(""String_Node_Str"" + aspectTypeQName,aspectTypeQName);
  }
  Node node=getNodeNotNull(nodeRef);
  invokeBeforeUpdateNode(nodeRef);
  invokeBeforeAddAspect(nodeRef,aspectTypeQName);
  Map<QName,Serializable> nodeProperties=getPropertiesImpl(node);
  if (aspectProperties != null) {
    nodeProperties.putAll(aspectProperties);
  }
  addDefaultPropertyValues(aspectDef,nodeProperties);
  addDefaultAspects(aspectDef,node,nodeProperties);
  setProperties(nodeRef,nodeProperties);
  if (node.getAspects().add(aspectTypeQName) == true) {
    invokeOnUpdateNode(nodeRef);
    invokeOnAddAspect(nodeRef,aspectTypeQName);
    nodeDaoService.recordChangeId(nodeRef);
  }
}",0.9246231155778896
172275,"/** 
 * Gets the properties map, sets the value (null is allowed) and checks that the new set of properties is valid.
 * @see DbNodeServiceImpl.NullPropertyValue
 */
public void setProperty(NodeRef nodeRef,QName qname,Serializable value) throws InvalidNodeRefException {
  Assert.notNull(qname);
  invokeBeforeUpdateNode(nodeRef);
  Node node=getNodeNotNull(nodeRef);
  Map<QName,Serializable> propertiesBefore=getPropertiesImpl(node);
  Map<QName,Serializable> propertiesAfter=setPropertyImpl(node,qname,value);
  if (qname.equals(ContentModel.PROP_NAME)) {
    setChildUniqueName(node);
  }
  invokeOnUpdateNode(nodeRef);
  invokeOnUpdateProperties(nodeRef,propertiesBefore,propertiesAfter);
}","/** 
 * Gets the properties map, sets the value (null is allowed) and checks that the new set of properties is valid.
 * @see DbNodeServiceImpl.NullPropertyValue
 */
public void setProperty(NodeRef nodeRef,QName qname,Serializable value) throws InvalidNodeRefException {
  Assert.notNull(qname);
  Node node=getNodeNotNull(nodeRef);
  invokeBeforeUpdateNode(nodeRef);
  Map<QName,Serializable> propertiesBefore=getPropertiesImpl(node);
  Map<QName,Serializable> propertiesAfter=setPropertyImpl(node,qname,value);
  if (qname.equals(ContentModel.PROP_NAME)) {
    setChildUniqueName(node);
  }
  invokeOnUpdateNode(nodeRef);
  invokeOnUpdateProperties(nodeRef,propertiesBefore,propertiesAfter);
}",0.9496402877697842
172276,"public ChildAssociationRef addChild(NodeRef parentRef,NodeRef childRef,QName assocTypeQName,QName assocQName){
  invokeBeforeCreateChildAssociation(parentRef,childRef,assocTypeQName,assocQName,false);
  Node parentNode=getNodeNotNull(parentRef);
  Node childNode=getNodeNotNull(childRef);
  ChildAssoc assoc=nodeDaoService.newChildAssoc(parentNode,childNode,false,assocTypeQName,assocQName);
  setChildUniqueName(childNode);
  ChildAssociationRef assocRef=assoc.getChildAssocRef();
  NodeRef childNodeRef=assocRef.getChildRef();
  getPaths(childNodeRef,false);
  invokeOnCreateChildAssociation(assocRef,false);
  return assoc.getChildAssocRef();
}","public ChildAssociationRef addChild(NodeRef parentRef,NodeRef childRef,QName assocTypeQName,QName assocQName){
  Node parentNode=getNodeNotNull(parentRef);
  Node childNode=getNodeNotNull(childRef);
  invokeBeforeCreateChildAssociation(parentRef,childRef,assocTypeQName,assocQName,false);
  ChildAssoc assoc=nodeDaoService.newChildAssoc(parentNode,childNode,false,assocTypeQName,assocQName);
  setChildUniqueName(childNode);
  ChildAssociationRef assocRef=assoc.getChildAssocRef();
  NodeRef childNodeRef=assocRef.getChildRef();
  getPaths(childNodeRef,false);
  invokeOnCreateChildAssociation(assocRef,false);
  return assoc.getChildAssocRef();
}",0.8639876352395672
172277,"public void removeProperty(NodeRef nodeRef,QName qname) throws InvalidNodeRefException {
  if (qname.equals(ContentModel.PROP_NAME)) {
    throw new UnsupportedOperationException(""String_Node_Str"" + qname + ""String_Node_Str"");
  }
  invokeBeforeUpdateNode(nodeRef);
  Node node=getNodeNotNull(nodeRef);
  Map<QName,Serializable> propertiesBefore=getPropertiesImpl(node);
  Map<QName,PropertyValue> properties=node.getProperties();
  properties.remove(qname);
  Map<QName,Serializable> propertiesAfter=getPropertiesImpl(node);
  invokeOnUpdateNode(nodeRef);
  invokeOnUpdateProperties(nodeRef,propertiesBefore,propertiesAfter);
}","public void removeProperty(NodeRef nodeRef,QName qname) throws InvalidNodeRefException {
  if (qname.equals(ContentModel.PROP_NAME)) {
    throw new UnsupportedOperationException(""String_Node_Str"" + qname + ""String_Node_Str"");
  }
  Node node=getNodeNotNull(nodeRef);
  invokeBeforeUpdateNode(nodeRef);
  Map<QName,Serializable> propertiesBefore=getPropertiesImpl(node);
  Map<QName,PropertyValue> properties=node.getProperties();
  properties.remove(qname);
  Map<QName,Serializable> propertiesAfter=getPropertiesImpl(node);
  invokeOnUpdateNode(nodeRef);
  invokeOnUpdateProperties(nodeRef,propertiesBefore,propertiesAfter);
}",0.9442675159235668
172278,"/** 
 * Performs all the necessary housekeeping involved in changing a node's store. This method cascades down through all the primary children of the node as well.
 * @param node the node whose store is changing
 * @param store the new store for the node
 */
private void moveNodeToStore(Node node,Store store){
  NodeRef nodeRef=node.getNodeRef();
  NodeStatus nodeStatus=nodeDaoService.getNodeStatus(nodeRef,true);
  Map<Long,NodeStatus> nodeStatusesById=getNodeHierarchy(nodeStatus,null);
  for (  NodeStatus oldNodeStatus : nodeStatusesById.values()) {
    Node nodeToMove=oldNodeStatus.getNode();
    nodeToMove.setStore(store);
    NodeRef newNodeRef=nodeToMove.getNodeRef();
    oldNodeStatus.setNode(null);
    NodeStatus newNodeStatus=nodeDaoService.getNodeStatus(newNodeRef,true);
    newNodeStatus.setNode(nodeToMove);
    invokeOnUpdateNode(newNodeRef);
  }
}","/** 
 * Performs all the necessary housekeeping involved in changing a node's store. This method cascades down through all the primary children of the node as well.
 * @param node the node whose store is changing
 * @param store the new store for the node
 */
private void moveNodeToStore(Node node,Store store){
  NodeRef nodeRef=node.getNodeRef();
  NodeStatus nodeStatus=nodeDaoService.getNodeStatus(nodeRef,true);
  Map<Long,NodeStatus> nodeStatusesById=getNodeHierarchy(nodeStatus,null);
  for (  NodeStatus oldNodeStatus : nodeStatusesById.values()) {
    Node nodeToMove=oldNodeStatus.getNode();
    NodeRef oldNodeRef=nodeToMove.getNodeRef();
    nodeToMove.setStore(store);
    NodeRef newNodeRef=nodeToMove.getNodeRef();
    oldNodeStatus.setNode(null);
    NodeStatus newNodeStatus=nodeDaoService.getNodeStatus(newNodeRef,true);
    newNodeStatus.setNode(nodeToMove);
    nodeDaoService.recordChangeId(oldNodeRef);
    nodeDaoService.recordChangeId(newNodeRef);
    invokeOnUpdateNode(newNodeRef);
  }
}",0.9247083775185578
172279,"public Serializable getProperty(NodeRef nodeRef,QName qname) throws InvalidNodeRefException {
  if (qname.equals(ContentModel.PROP_STORE_PROTOCOL)) {
    return nodeRef.getStoreRef().getProtocol();
  }
 else   if (qname.equals(ContentModel.PROP_STORE_IDENTIFIER)) {
    return nodeRef.getStoreRef().getIdentifier();
  }
 else   if (qname.equals(ContentModel.PROP_NODE_UUID)) {
    return nodeRef.getId();
  }
  Node node=getNodeNotNull(nodeRef);
  if (qname.equals(ContentModel.PROP_NODE_DBID)) {
    return node.getId();
  }
  Map<QName,PropertyValue> properties=node.getProperties();
  PropertyValue propertyValue=properties.get(qname);
  if (propertyValue == null && qname.equals(ContentModel.PROP_NAME)) {
    return nodeRef.getId();
  }
  PropertyDefinition propertyDef=dictionaryService.getProperty(qname);
  Serializable value=makeSerializableValue(propertyDef,propertyValue);
  return value;
}","public Serializable getProperty(NodeRef nodeRef,QName qname) throws InvalidNodeRefException {
  Node node=getNodeNotNull(nodeRef);
  if (qname.equals(ContentModel.PROP_STORE_PROTOCOL)) {
    return nodeRef.getStoreRef().getProtocol();
  }
 else   if (qname.equals(ContentModel.PROP_STORE_IDENTIFIER)) {
    return nodeRef.getStoreRef().getIdentifier();
  }
 else   if (qname.equals(ContentModel.PROP_NODE_UUID)) {
    return nodeRef.getId();
  }
  if (qname.equals(ContentModel.PROP_NODE_DBID)) {
    return node.getId();
  }
  Map<QName,PropertyValue> properties=node.getProperties();
  PropertyValue propertyValue=properties.get(qname);
  if (propertyValue == null && qname.equals(ContentModel.PROP_NAME)) {
    return nodeRef.getId();
  }
  PropertyDefinition propertyDef=dictionaryService.getProperty(qname);
  Serializable value=makeSerializableValue(propertyDef,propertyValue);
  return value;
}",0.9589345172031076
172280,"/** 
 * @see org.alfresco.service.cmr.repository.NodeService#setType(org.alfresco.service.cmr.repository.NodeRef,org.alfresco.service.namespace.QName)
 */
public void setType(NodeRef nodeRef,QName typeQName) throws InvalidNodeRefException {
  TypeDefinition nodeTypeDef=dictionaryService.getType(typeQName);
  if (nodeTypeDef == null) {
    throw new InvalidTypeException(typeQName);
  }
  invokeBeforeUpdateNode(nodeRef);
  Node node=getNodeNotNull(nodeRef);
  node.setTypeQName(typeQName);
  Map<QName,Serializable> properties=this.getPropertiesImpl(node);
  addDefaultAspects(nodeTypeDef,node,properties);
  this.setProperties(nodeRef,properties);
  invokeOnUpdateNode(nodeRef);
}","/** 
 * @see org.alfresco.service.cmr.repository.NodeService#setType(org.alfresco.service.cmr.repository.NodeRef,org.alfresco.service.namespace.QName)
 */
public void setType(NodeRef nodeRef,QName typeQName) throws InvalidNodeRefException {
  TypeDefinition nodeTypeDef=dictionaryService.getType(typeQName);
  if (nodeTypeDef == null) {
    throw new InvalidTypeException(typeQName);
  }
  Node node=getNodeNotNull(nodeRef);
  invokeBeforeUpdateNode(nodeRef);
  node.setTypeQName(typeQName);
  Map<QName,Serializable> properties=this.getPropertiesImpl(node);
  addDefaultAspects(nodeTypeDef,node,properties);
  this.setProperties(nodeRef,properties);
  invokeOnUpdateNode(nodeRef);
}",0.9487554904831624
172281,"public void assign(Assignable assignable,ExecutionContext executionContext) throws Exception {
  if (actor == null && pooledactors == null) {
    throw new WorkflowException(""String_Node_Str"");
  }
  String assignedActor=null;
  if (actor != null) {
    String actorValStr=actor.getTextTrim();
    if (actorValStr != null && actorValStr.length() > 0) {
      if (actorValStr.startsWith(""String_Node_Str"")) {
        String expression=actorValStr.substring(2,actorValStr.length() - 1);
        Object eval=AlfrescoJavaScript.executeScript(executionContext,services,expression,null);
        if (eval == null) {
          throw new WorkflowException(""String_Node_Str"" + actorValStr + ""String_Node_Str"");
        }
        String actor=null;
        if (eval instanceof String) {
          actor=(String)eval;
        }
 else         if (eval instanceof JBPMNode) {
          actor=mapAuthorityToName((JBPMNode)eval,false);
        }
        if (actor == null) {
          throw new WorkflowException(""String_Node_Str"");
        }
        assignedActor=actor;
      }
 else {
        assignedActor=actorValStr;
      }
    }
  }
  String[] assignedPooledActors=null;
  if (pooledactors != null) {
    String pooledactorValStr=pooledactors.getTextTrim();
    if (pooledactorValStr != null && pooledactorValStr.length() > 0) {
      if (pooledactorValStr.startsWith(""String_Node_Str"")) {
        String expression=pooledactorValStr.substring(2,pooledactorValStr.length() - 1);
        Object eval=AlfrescoJavaScript.executeScript(executionContext,services,expression,null);
        if (eval == null) {
          throw new WorkflowException(""String_Node_Str"" + pooledactorValStr + ""String_Node_Str"");
        }
        if (eval instanceof ScriptNode[]) {
          ScriptNode[] nodes=(ScriptNode[])eval;
          assignedPooledActors=new String[nodes.length];
          int i=0;
          for (          ScriptNode node : (ScriptNode[])nodes) {
            String actor=mapAuthorityToName(node,true);
            if (actor == null) {
              throw new WorkflowException(""String_Node_Str"");
            }
            assignedPooledActors[i++]=actor;
          }
        }
 else         if (eval instanceof ScriptNode) {
          ScriptNode node=(ScriptNode)eval;
          String actor=mapAuthorityToName(node,true);
          if (actor == null) {
            throw new WorkflowException(""String_Node_Str"");
          }
          assignedPooledActors=new String[]{actor};
        }
 else         if (eval instanceof String) {
          assignedPooledActors=new String[]{(String)eval};
        }
 else {
          throw new WorkflowException(""String_Node_Str"");
        }
      }
 else {
        assignedPooledActors=new String[]{pooledactorValStr};
      }
    }
  }
  if (assignedActor != null) {
    assignable.setActorId(assignedActor);
  }
  if (assignedPooledActors != null) {
    assignable.setPooledActors(assignedPooledActors);
  }
}","public void assign(Assignable assignable,ExecutionContext executionContext) throws Exception {
  if (actor == null && pooledactors == null) {
    throw new WorkflowException(""String_Node_Str"");
  }
  String assignedActor=null;
  if (actor != null) {
    String actorValStr=actor.getTextTrim();
    if (actorValStr != null && actorValStr.length() > 0) {
      if (actorValStr.startsWith(""String_Node_Str"")) {
        String expression=actorValStr.substring(2,actorValStr.length() - 1);
        Object eval=AlfrescoJavaScript.executeScript(executionContext,services,expression,null);
        if (eval == null) {
          throw new WorkflowException(""String_Node_Str"" + actorValStr + ""String_Node_Str"");
        }
        String actor=null;
        if (eval instanceof String) {
          actor=(String)eval;
        }
 else         if (eval instanceof JBPMNode) {
          actor=mapAuthorityToName((JBPMNode)eval,false);
        }
        if (actor == null) {
          throw new WorkflowException(""String_Node_Str"");
        }
        assignedActor=actor;
      }
 else {
        assignedActor=actorValStr;
      }
    }
  }
  String[] assignedPooledActors=null;
  if (pooledactors != null) {
    String pooledactorValStr=pooledactors.getTextTrim();
    if (pooledactorValStr != null && pooledactorValStr.length() > 0) {
      if (pooledactorValStr.startsWith(""String_Node_Str"")) {
        String expression=pooledactorValStr.substring(2,pooledactorValStr.length() - 1);
        Object eval=AlfrescoJavaScript.executeScript(executionContext,services,expression,null);
        if (eval == null) {
          throw new WorkflowException(""String_Node_Str"" + pooledactorValStr + ""String_Node_Str"");
        }
        if (eval instanceof ScriptNode[]) {
          ScriptNode[] nodes=(ScriptNode[])eval;
          assignedPooledActors=new String[nodes.length];
          int i=0;
          for (          ScriptNode node : (ScriptNode[])nodes) {
            String actor=mapAuthorityToName(node,true);
            if (actor == null) {
              throw new WorkflowException(""String_Node_Str"");
            }
            assignedPooledActors[i++]=actor;
          }
        }
        if (eval instanceof Collection) {
          List<String> actors=new ArrayList<String>();
          Collection<Object> nodes=(Collection<Object>)eval;
          for (          Object node : nodes) {
            if (node instanceof ScriptNode) {
              String actor=mapAuthorityToName((ScriptNode)node,true);
              actors.add(actor);
            }
          }
          assignedPooledActors=new String[actors.size()];
          actors.toArray(assignedPooledActors);
        }
 else         if (eval instanceof ScriptNode) {
          ScriptNode node=(ScriptNode)eval;
          String actor=mapAuthorityToName(node,true);
          if (actor == null) {
            throw new WorkflowException(""String_Node_Str"");
          }
          assignedPooledActors=new String[]{actor};
        }
 else         if (eval instanceof String) {
          assignedPooledActors=new String[]{(String)eval};
        }
 else {
          throw new WorkflowException(""String_Node_Str"");
        }
      }
 else {
        assignedPooledActors=new String[]{pooledactorValStr};
      }
    }
  }
  if (assignedActor != null) {
    assignable.setActorId(assignedActor);
  }
  if (assignedPooledActors != null) {
    assignable.setPooledActors(assignedPooledActors);
  }
}",0.9221125215483468
172282,"/** 
 * Execute a script
 * @param context  jBPM execution context
 * @param services  Alfresco service registry
 * @param expression  script to execute
 * @param variableAccesses  (optional) list of jBPM variables to map into script (all, if not supplied)
 * @return  script result
 */
public static Object executeScript(ExecutionContext context,ServiceRegistry services,String expression,List<VariableAccess> variableAccesses){
  Map<String,Object> inputMap=createInputMap(context,services,variableAccesses);
  ScriptService scriptService=services.getScriptService();
  Object result=scriptService.executeScriptString(expression,inputMap);
  if (result instanceof NodeRef) {
    result=new JBPMNode((NodeRef)result,services);
  }
  return result;
}","/** 
 * Execute a script
 * @param context  jBPM execution context
 * @param services  Alfresco service registry
 * @param expression  script to execute
 * @param variableAccesses  (optional) list of jBPM variables to map into script (all, if not supplied)
 * @return  script result
 */
public static Object executeScript(ExecutionContext context,ServiceRegistry services,String expression,List<VariableAccess> variableAccesses){
  Map<String,Object> inputMap=createInputMap(context,services,variableAccesses);
  ScriptService scriptService=services.getScriptService();
  Object result=scriptService.executeScriptString(expression,inputMap);
  result=convertForJBPM(result,services);
  return result;
}",0.9325068870523416
172283,"/** 
 * Rename the specified file.
 * @param sess Server session
 * @param tree Tree connection
 * @param oldName java.lang.String
 * @param newName java.lang.String
 * @exception java.io.IOException The exception description.
 */
public void renameFile(SrvSession sess,TreeConnection tree,String oldName,String newName) throws IOException {
  sess.beginWriteTransaction(transactionService);
  try {
    ContentContext ctx=(ContentContext)tree.getContext();
    NodeRef nodeToMoveRef=getNodeForPath(tree,oldName);
    if (nodeToMoveRef != null && nodeService.getProperty(nodeToMoveRef,ContentModel.PROP_LINK_DESTINATION) != null)     throw new AccessDeniedException(""String_Node_Str"");
    String[] splitPaths=FileName.splitPath(newName);
    NodeRef targetFolderRef=getNodeForPath(tree,splitPaths[0]);
    String name=splitPaths[1];
    boolean relinked=false;
    if (ctx.hasStateTable()) {
      if (!cifsHelper.isDirectory(nodeToMoveRef)) {
        FileState renState=ctx.getStateTable().removeFileState(newName);
        if (renState != null && renState.getFileStatus() == FileStateStatus.Renamed) {
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + renState);
          cifsHelper.relinkNode(renState.getNodeRef(),nodeToMoveRef,targetFolderRef,name);
          relinked=true;
          if (renState.hasRenameState())           renState.getRenameState().setNodeRef(nodeToMoveRef);
          ctx.getStateTable().removeFileState(oldName);
          FileState fstate=ctx.getStateTable().findFileState(newName,false,true);
          fstate.setNodeRef(renState.getNodeRef());
          fstate.setFileStatus(FileStateStatus.FileExists);
        }
 else {
          FileState fstate=ctx.getStateTable().findFileState(oldName,false,true);
          fstate.setExpiryTime(System.currentTimeMillis() + FileState.RenameTimeout);
          fstate.setFileStatus(FileStateStatus.Renamed);
          fstate.setNodeRef(nodeToMoveRef);
          FileState newState=ctx.getStateTable().findFileState(newName,false,true);
          newState.setNodeRef(nodeToMoveRef);
          newState.setFileStatus(FileStateStatus.FileExists);
          fstate.setRenameState(newState);
          if (logger.isDebugEnabled()) {
            logger.debug(""String_Node_Str"" + oldName + ""String_Node_Str""+ fstate);
            logger.debug(""String_Node_Str"" + newName + ""String_Node_Str""+ newState);
          }
        }
      }
 else {
        FileState fstate=ctx.getStateTable().findFileState(oldName);
        if (fstate != null) {
          ctx.getStateTable().renameFileState(newName,fstate);
        }
      }
    }
    if (!relinked) {
      cifsHelper.move(nodeToMoveRef,targetFolderRef,name);
    }
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + ""String_Node_Str"" + oldName + ""String_Node_Str""+ newName);
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + oldName);
    throw new AccessDeniedException(""String_Node_Str"" + oldName);
  }
catch (  NodeLockedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new AccessDeniedException(""String_Node_Str"" + oldName);
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new IOException(""String_Node_Str"" + oldName);
  }
}","/** 
 * Rename the specified file.
 * @param sess Server session
 * @param tree Tree connection
 * @param oldName java.lang.String
 * @param newName java.lang.String
 * @exception java.io.IOException The exception description.
 */
public void renameFile(SrvSession sess,TreeConnection tree,String oldName,String newName) throws IOException {
  sess.beginWriteTransaction(transactionService);
  try {
    ContentContext ctx=(ContentContext)tree.getContext();
    NodeRef nodeToMoveRef=getNodeForPath(tree,oldName);
    if (nodeToMoveRef != null && nodeService.getProperty(nodeToMoveRef,ContentModel.PROP_LINK_DESTINATION) != null)     throw new AccessDeniedException(""String_Node_Str"");
    String[] splitPaths=FileName.splitPath(newName);
    NodeRef targetFolderRef=getNodeForPath(tree,splitPaths[0]);
    String name=splitPaths[1];
    boolean relinked=false;
    if (ctx.hasStateTable()) {
      if (!cifsHelper.isDirectory(nodeToMoveRef)) {
        FileState renState=ctx.getStateTable().removeFileState(newName);
        if (renState != null && renState.getFileStatus() == FileStateStatus.Renamed) {
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + renState);
          cifsHelper.relinkNode(renState.getNodeRef(),nodeToMoveRef,targetFolderRef,name);
          relinked=true;
          if (renState.hasRenameState())           renState.getRenameState().setNodeRef(nodeToMoveRef);
          ctx.getStateTable().removeFileState(oldName);
          FileState fstate=ctx.getStateTable().findFileState(newName,false,true);
          fstate.setNodeRef(renState.getNodeRef());
          fstate.setFileStatus(FileStateStatus.FileExists);
        }
      }
 else {
        FileState fstate=ctx.getStateTable().findFileState(oldName);
        if (fstate != null) {
          ctx.getStateTable().renameFileState(newName,fstate);
        }
      }
    }
    if (!relinked) {
      cifsHelper.move(nodeToMoveRef,targetFolderRef,name);
      if (!cifsHelper.isDirectory(nodeToMoveRef)) {
        FileState fstate=ctx.getStateTable().findFileState(oldName,false,true);
        fstate.setExpiryTime(System.currentTimeMillis() + FileState.RenameTimeout);
        fstate.setFileStatus(FileStateStatus.Renamed);
        fstate.setNodeRef(nodeToMoveRef);
        FileState newState=ctx.getStateTable().findFileState(newName,false,true);
        newState.setNodeRef(nodeToMoveRef);
        newState.setFileStatus(FileStateStatus.FileExists);
        fstate.setRenameState(newState);
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + oldName + ""String_Node_Str""+ fstate);
          logger.debug(""String_Node_Str"" + newName + ""String_Node_Str""+ newState);
        }
      }
    }
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + ""String_Node_Str"" + oldName + ""String_Node_Str""+ newName);
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + oldName);
    throw new AccessDeniedException(""String_Node_Str"" + oldName);
  }
catch (  NodeLockedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new AccessDeniedException(""String_Node_Str"" + oldName);
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new IOException(""String_Node_Str"" + oldName);
  }
}",0.9064139941690962
172284,"/** 
 * Find the file state for a pseudo folder path
 * @param avmPath AVMPath
 * @param avmCtx AVMContext
 * @return FileState
 */
private final FileState findPseudoState(AVMPath avmPath,AVMContext avmCtx){
  if (avmPath.isPseudoPath() == false)   return null;
  FileState fstate=null;
  StringBuilder str=null;
switch (avmPath.isLevel()) {
case Root:
    fstate=avmCtx.getStateTable().findFileState(FileName.DOS_SEPERATOR_STR);
  if (fstate == null) {
    fstate=avmCtx.getStateTable().findFileState(FileName.DOS_SEPERATOR_STR,true,true);
    fstate.setExpiryTime(FileState.NoTimeout);
    List<AVMStoreDescriptor> storeList=m_avmService.getStores();
    if (storeList != null && storeList.size() > 0) {
      boolean sandbox=false;
      for (      AVMStoreDescriptor storeDesc : storeList) {
        Map<QName,PropertyValue> props=m_avmService.getStoreProperties(storeDesc.getName());
        if (props.containsKey(AVMContext.PROP_WORKFLOWPREVIEW) || props.containsKey(AVMContext.PROP_AUTHORPREVIEW))         sandbox=true;
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + storeDesc.getName() + ""String_Node_Str""+ sandbox);
        if (sandbox == false || avmCtx.showSandboxes() == true)         fstate.addPseudoFile(new StorePseudoFile(storeDesc));
      }
    }
  }
break;
case StoreRoot:
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
fstate=avmCtx.getStateTable().findFileState(str.toString());
if (fstate == null) {
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
fstate.addPseudoFile(new VersionPseudoFile(AVMPath.VersionNameHead));
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.VersionsFolder));
}
break;
case Head:
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
str.append(FileName.DOS_SEPERATOR);
str.append(AVMPath.VersionNameHead);
fstate=avmCtx.getStateTable().findFileState(str.toString());
if (fstate == null) {
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.DataFolder));
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.MetaDataFolder));
}
break;
case VersionRoot:
try {
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
str.append(FileName.DOS_SEPERATOR);
str.append(AVMPath.VersionsFolder);
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
if (fstate.hasPseudoFiles() == false) {
StringBuilder verStr=new StringBuilder(AVMPath.VersionFolderPrefix);
verStr.append(""String_Node_Str"");
fstate.addPseudoFile(new VersionPseudoFile(verStr.toString()));
List<VersionDescriptor> verList=m_avmService.getStoreVersions(avmPath.getStoreName());
if (verList.size() > 0) {
for (VersionDescriptor verDesc : verList) {
String verName=null;
verStr.setLength(AVMPath.VersionFolderPrefix.length());
verStr.append(verDesc.getVersionID());
verName=verStr.toString();
fstate.addPseudoFile(new VersionPseudoFile(verName,verDesc));
}
}
}
}
 catch (AVMNotFoundException ex) {
}
break;
case Version:
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
str.append(FileName.DOS_SEPERATOR);
str.append(AVMPath.VersionFolderPrefix);
str.append(avmPath.getVersion());
fstate=avmCtx.getStateTable().findFileState(str.toString());
if (fstate == null) {
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.DataFolder));
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.MetaDataFolder));
}
break;
}
return fstate;
}","/** 
 * Find the file state for a pseudo folder path
 * @param avmPath AVMPath
 * @param avmCtx AVMContext
 * @return FileState
 */
private final FileState findPseudoState(AVMPath avmPath,AVMContext avmCtx){
  if (avmPath.isPseudoPath() == false)   return null;
  FileState fstate=null;
  StringBuilder str=null;
switch (avmPath.isLevel()) {
case Root:
    fstate=avmCtx.getStateTable().findFileState(FileName.DOS_SEPERATOR_STR);
  if (fstate == null) {
    fstate=avmCtx.getStateTable().findFileState(FileName.DOS_SEPERATOR_STR,true,true);
    fstate.setExpiryTime(FileState.NoTimeout);
    List<AVMStoreDescriptor> storeList=m_avmService.getStores();
    if (storeList != null && storeList.size() > 0) {
      boolean sandbox=false;
      for (      AVMStoreDescriptor storeDesc : storeList) {
        Map<QName,PropertyValue> props=m_avmService.getStoreProperties(storeDesc.getName());
        if (props.containsKey(AVMContext.PROP_WORKFLOWPREVIEW) || props.containsKey(AVMContext.PROP_AUTHORPREVIEW))         sandbox=true;
 else         sandbox=false;
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + storeDesc.getName() + ""String_Node_Str""+ sandbox);
        if (sandbox == false || avmCtx.showSandboxes() == true)         fstate.addPseudoFile(new StorePseudoFile(storeDesc));
      }
    }
  }
break;
case StoreRoot:
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
fstate=avmCtx.getStateTable().findFileState(str.toString());
if (fstate == null) {
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
fstate.addPseudoFile(new VersionPseudoFile(AVMPath.VersionNameHead));
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.VersionsFolder));
}
break;
case Head:
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
str.append(FileName.DOS_SEPERATOR);
str.append(AVMPath.VersionNameHead);
fstate=avmCtx.getStateTable().findFileState(str.toString());
if (fstate == null) {
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.DataFolder));
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.MetaDataFolder));
}
break;
case VersionRoot:
try {
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
str.append(FileName.DOS_SEPERATOR);
str.append(AVMPath.VersionsFolder);
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
if (fstate.hasPseudoFiles() == false) {
StringBuilder verStr=new StringBuilder(AVMPath.VersionFolderPrefix);
verStr.append(""String_Node_Str"");
fstate.addPseudoFile(new VersionPseudoFile(verStr.toString()));
List<VersionDescriptor> verList=m_avmService.getStoreVersions(avmPath.getStoreName());
if (verList.size() > 0) {
for (VersionDescriptor verDesc : verList) {
String verName=null;
verStr.setLength(AVMPath.VersionFolderPrefix.length());
verStr.append(verDesc.getVersionID());
verName=verStr.toString();
fstate.addPseudoFile(new VersionPseudoFile(verName,verDesc));
}
}
}
}
 catch (AVMNotFoundException ex) {
}
break;
case Version:
str=new StringBuilder();
str.append(FileName.DOS_SEPERATOR);
str.append(avmPath.getStoreName());
str.append(FileName.DOS_SEPERATOR);
str.append(AVMPath.VersionFolderPrefix);
str.append(avmPath.getVersion());
fstate=avmCtx.getStateTable().findFileState(str.toString());
if (fstate == null) {
fstate=avmCtx.getStateTable().findFileState(str.toString(),true,true);
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.DataFolder));
fstate.addPseudoFile(new DummyFolderPseudoFile(AVMPath.MetaDataFolder));
}
break;
}
return fstate;
}",0.9960344591822782
172285,"/** 
 * Process the CIFS session setup request packet and build the session setup response
 * @param sess SMBSrvSession
 * @param reqPkt SMBSrvPacket
 * @param respPkt SMBSrvPacket
 * @exception SMBSrvException
 */
public void processSessionSetup(SMBSrvSession sess,SMBSrvPacket reqPkt,SMBSrvPacket respPkt) throws SMBSrvException {
  if (reqPkt.checkPacketIsValid(13,0) == false) {
    throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
  }
  int maxBufSize=reqPkt.getParameter(2);
  int maxMpx=reqPkt.getParameter(3);
  int vcNum=reqPkt.getParameter(4);
  int ascPwdLen=reqPkt.getParameter(7);
  int uniPwdLen=reqPkt.getParameter(8);
  int capabs=reqPkt.getParameterLong(11);
  byte[] buf=reqPkt.getBuffer();
  boolean isUni=reqPkt.isUnicode();
  byte[] ascPwd=reqPkt.unpackBytes(ascPwdLen);
  byte[] uniPwd=reqPkt.unpackBytes(uniPwdLen);
  String user=reqPkt.unpackString(isUni);
  if (user == null) {
    throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
  }
  String domain=""String_Node_Str"";
  if (reqPkt.hasMoreData()) {
    domain=reqPkt.unpackString(isUni);
    if (domain == null) {
      throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
    }
  }
  String clientOS=""String_Node_Str"";
  if (reqPkt.hasMoreData()) {
    clientOS=reqPkt.unpackString(isUni);
    if (clientOS == null) {
      throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
    }
  }
  if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE)) {
    logger.debug(""String_Node_Str"" + user + ""String_Node_Str""+ (uniPwd != null ? HexDump.hexString(uniPwd) : ""String_Node_Str"")+ ""String_Node_Str""+ (ascPwd != null ? HexDump.hexString(ascPwd) : ""String_Node_Str"")+ ""String_Node_Str""+ domain+ ""String_Node_Str""+ clientOS+ ""String_Node_Str""+ vcNum+ ""String_Node_Str""+ maxBufSize+ ""String_Node_Str""+ maxMpx+ ""String_Node_Str""+ sess.getAuthenticationContext());
    logger.debug(""String_Node_Str"" + reqPkt.getMultiplexId() + ""String_Node_Str""+ reqPkt.getUserId()+ ""String_Node_Str""+ reqPkt.getProcessId());
  }
  sess.setClientMaximumBufferSize(maxBufSize != 0 ? maxBufSize : SMBSrvSession.DefaultBufferSize);
  sess.setClientMaximumMultiplex(maxMpx);
  sess.setClientCapabilities(capabs);
  ClientInfo client=new ClientInfo(user,uniPwd);
  client.setANSIPassword(ascPwd);
  client.setDomain(domain);
  client.setOperatingSystem(clientOS);
  if (sess.hasRemoteAddress())   client.setClientAddress(sess.getRemoteAddress().getHostAddress());
  if (user.length() == 0 && domain.length() == 0 && uniPwdLen == 0 && ascPwdLen == 1)   client.setLogonType(ClientInfo.LogonNull);
  int sts=authenticateUser(client,sess,CifsAuthenticator.NTLM1);
  if (sts > 0 && (sts & CifsAuthenticator.AUTH_GUEST) != 0) {
    client.setGuest(true);
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + user + ""String_Node_Str"");
  }
 else   if (sts != CifsAuthenticator.AUTH_ALLOW) {
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + user + ""String_Node_Str"");
    throw new SMBSrvException(SMBStatus.NTLogonFailure,SMBStatus.DOSAccessDenied,SMBStatus.ErrDos);
  }
 else   if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE)) {
    if (client.isNullSession() == false)     client.setAuthenticationToken(m_authComponent.getCurrentAuthentication());
 else     client.setAuthenticationToken(null);
    logger.debug(""String_Node_Str"" + user + ""String_Node_Str""+ (client != null ? ""String_Node_Str"" + client.getLogonTypeString() + ""String_Node_Str"" : ""String_Node_Str""));
  }
  VirtualCircuit vc=new VirtualCircuit(vcNum,client);
  int uid=sess.addVirtualCircuit(vc);
  if (uid == VirtualCircuit.InvalidUID) {
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + vc);
    throw new SMBSrvException(SMBStatus.NTLogonFailure,SMBStatus.DOSAccessDenied,SMBStatus.ErrDos);
  }
 else   if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE)) {
    logger.debug(""String_Node_Str"" + uid + ""String_Node_Str""+ vc);
  }
  sess.setLoggedOn(true);
  respPkt.setParameterCount(3);
  respPkt.setParameter(0,0);
  respPkt.setParameter(1,0);
  respPkt.setParameter(2,client.isGuest() ? 1 : 0);
  respPkt.setByteCount(0);
  respPkt.setTreeId(0);
  respPkt.setUserId(uid);
  int flags=respPkt.getFlags();
  flags&=~SMBSrvPacket.FLG_CASELESS;
  respPkt.setFlags(flags);
  int flags2=SMBSrvPacket.FLG2_LONGFILENAMES;
  if (isUni)   flags2+=SMBSrvPacket.FLG2_UNICODE;
  respPkt.setFlags2(flags2);
  int pos=respPkt.getByteOffset();
  buf=respPkt.getBuffer();
  if (isUni)   pos=DataPacker.wordAlign(pos);
  pos=DataPacker.putString(""String_Node_Str"",buf,pos,true,isUni);
  pos=DataPacker.putString(""String_Node_Str"" + sess.getServer().isVersion(),buf,pos,true,isUni);
  pos=DataPacker.putString(sess.getServer().getConfiguration().getDomainName(),buf,pos,true,isUni);
  respPkt.setByteCount(pos - respPkt.getByteOffset());
}","/** 
 * Process the CIFS session setup request packet and build the session setup response
 * @param sess SMBSrvSession
 * @param reqPkt SMBSrvPacket
 * @param respPkt SMBSrvPacket
 * @exception SMBSrvException
 */
public void processSessionSetup(SMBSrvSession sess,SMBSrvPacket reqPkt,SMBSrvPacket respPkt) throws SMBSrvException {
  if (reqPkt.checkPacketIsValid(13,0) == false) {
    throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
  }
  int maxBufSize=reqPkt.getParameter(2);
  int maxMpx=reqPkt.getParameter(3);
  int vcNum=reqPkt.getParameter(4);
  int ascPwdLen=reqPkt.getParameter(7);
  int uniPwdLen=reqPkt.getParameter(8);
  int capabs=reqPkt.getParameterLong(11);
  byte[] buf=reqPkt.getBuffer();
  boolean isUni=reqPkt.isUnicode();
  byte[] ascPwd=reqPkt.unpackBytes(ascPwdLen);
  byte[] uniPwd=reqPkt.unpackBytes(uniPwdLen);
  String user=reqPkt.unpackString(isUni);
  if (user == null) {
    throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
  }
  String domain=""String_Node_Str"";
  if (reqPkt.hasMoreData()) {
    domain=reqPkt.unpackString(isUni);
    if (domain == null) {
      throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
    }
  }
  String clientOS=""String_Node_Str"";
  if (reqPkt.hasMoreData()) {
    clientOS=reqPkt.unpackString(isUni);
    if (clientOS == null) {
      throw new SMBSrvException(SMBStatus.NTInvalidParameter,SMBStatus.SRVNonSpecificError,SMBStatus.ErrSrv);
    }
  }
  if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE)) {
    logger.debug(""String_Node_Str"" + user + ""String_Node_Str""+ (uniPwd != null ? HexDump.hexString(uniPwd) : ""String_Node_Str"")+ ""String_Node_Str""+ (ascPwd != null ? HexDump.hexString(ascPwd) : ""String_Node_Str"")+ ""String_Node_Str""+ domain+ ""String_Node_Str""+ clientOS+ ""String_Node_Str""+ vcNum+ ""String_Node_Str""+ maxBufSize+ ""String_Node_Str""+ maxMpx+ ""String_Node_Str""+ sess.getAuthenticationContext());
    logger.debug(""String_Node_Str"" + reqPkt.getMultiplexId() + ""String_Node_Str""+ reqPkt.getUserId()+ ""String_Node_Str""+ reqPkt.getProcessId());
  }
  sess.setClientMaximumBufferSize(maxBufSize != 0 ? maxBufSize : SMBSrvSession.DefaultBufferSize);
  sess.setClientMaximumMultiplex(maxMpx);
  sess.setClientCapabilities(capabs);
  ClientInfo client=new ClientInfo(user,uniPwd);
  client.setANSIPassword(ascPwd);
  client.setDomain(domain);
  client.setOperatingSystem(clientOS);
  if (sess.hasRemoteAddress())   client.setClientAddress(sess.getRemoteAddress().getHostAddress());
  if (user.length() == 0 && domain.length() == 0 && uniPwdLen == 0 && ascPwdLen == 1)   client.setLogonType(ClientInfo.LogonNull);
  int sts=authenticateUser(client,sess,CifsAuthenticator.NTLM1);
  if (sts > 0 && (sts & CifsAuthenticator.AUTH_GUEST) != 0) {
    client.setGuest(true);
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + user + ""String_Node_Str"");
  }
 else   if (sts != CifsAuthenticator.AUTH_ALLOW) {
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + user + ""String_Node_Str"");
    throw new SMBSrvException(SMBStatus.NTLogonFailure,SMBStatus.DOSAccessDenied,SMBStatus.ErrDos);
  }
 else {
    if (client.isNullSession() == false)     client.setAuthenticationToken(m_authComponent.getCurrentAuthentication());
 else     client.setAuthenticationToken(null);
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + user + ""String_Node_Str""+ (client != null ? ""String_Node_Str"" + client.getLogonTypeString() + ""String_Node_Str"" : ""String_Node_Str""));
  }
  VirtualCircuit vc=new VirtualCircuit(vcNum,client);
  int uid=sess.addVirtualCircuit(vc);
  if (uid == VirtualCircuit.InvalidUID) {
    if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE))     logger.debug(""String_Node_Str"" + vc);
    throw new SMBSrvException(SMBStatus.NTLogonFailure,SMBStatus.DOSAccessDenied,SMBStatus.ErrDos);
  }
 else   if (logger.isDebugEnabled() && sess.hasDebug(SMBSrvSession.DBG_NEGOTIATE)) {
    logger.debug(""String_Node_Str"" + uid + ""String_Node_Str""+ vc);
  }
  sess.setLoggedOn(true);
  respPkt.setParameterCount(3);
  respPkt.setParameter(0,0);
  respPkt.setParameter(1,0);
  respPkt.setParameter(2,client.isGuest() ? 1 : 0);
  respPkt.setByteCount(0);
  respPkt.setTreeId(0);
  respPkt.setUserId(uid);
  int flags=respPkt.getFlags();
  flags&=~SMBSrvPacket.FLG_CASELESS;
  respPkt.setFlags(flags);
  int flags2=SMBSrvPacket.FLG2_LONGFILENAMES;
  if (isUni)   flags2+=SMBSrvPacket.FLG2_UNICODE;
  respPkt.setFlags2(flags2);
  int pos=respPkt.getByteOffset();
  buf=respPkt.getBuffer();
  if (isUni)   pos=DataPacker.wordAlign(pos);
  pos=DataPacker.putString(""String_Node_Str"",buf,pos,true,isUni);
  pos=DataPacker.putString(""String_Node_Str"" + sess.getServer().isVersion(),buf,pos,true,isUni);
  pos=DataPacker.putString(sess.getServer().getConfiguration().getDomainName(),buf,pos,true,isUni);
  respPkt.setByteCount(pos - respPkt.getByteOffset());
}",0.9673516420203572
172286,"public String toString(){
  StringBuilder sb=new StringBuilder(56);
  sb.append(""String_Node_Str"");
  if (combinedPattern != null) {
    sb.append(""String_Node_Str"").append(combinedPattern);
  }
 else {
    sb.append(""String_Node_Str"").append(namespaceUriPattern);
    sb.append(""String_Node_Str"").append(namespaceUriPattern);
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public String toString(){
  StringBuilder sb=new StringBuilder(56);
  sb.append(""String_Node_Str"");
  if (combinedPattern != null) {
    sb.append(""String_Node_Str"").append(combinedPattern);
  }
 else {
    sb.append(""String_Node_Str"").append(namespaceUriPattern);
    sb.append(""String_Node_Str"").append(localNamePattern);
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9805950840879688
172287,"/** 
 * Authenticate a session setup by a user
 * @param client ClientInfo
 * @param sess SrvSession
 * @param alg int
 * @return int
 */
public int authenticateUser(ClientInfo client,SrvSession sess,int alg){
  if (client.isNullSession()) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    return CifsAuthenticator.AUTH_ALLOW;
  }
  sess.beginReadTransaction(m_transactionService);
  if (client.getAuthenticationToken() != null && client.getLogonType() != ClientInfo.LogonNull) {
    m_authComponent.setCurrentUser(mapUserNameToPerson(client.getUserName()));
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    return client.getLogonType() != ClientInfo.LogonGuest ? AUTH_ALLOW : AUTH_GUEST;
  }
  int authSts=AUTH_DISALLOW;
  if (client.isGuest() || client.getUserName().equalsIgnoreCase(getGuestUserName())) {
    if (allowGuest() == false)     return AUTH_DISALLOW;
    doGuestLogon(client,sess);
    authSts=AUTH_GUEST;
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + client.getUserName() + ""String_Node_Str""+ getStatusAsString(authSts));
    return authSts;
  }
  PassthruDetails passDetails=m_sessions.get(sess.getUniqueId());
  if (passDetails != null) {
    try {
      AuthenticateSession authSess=passDetails.getAuthenticateSession();
      authSess.doSessionSetup(client.getDomain(),client.getUserName(),null,client.getANSIPassword(),client.getPassword());
      if (authSess.isGuest()) {
        if (allowGuest() == true) {
          doGuestLogon(client,sess);
          authSts=CifsAuthenticator.AUTH_GUEST;
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + client.getUserName() + ""String_Node_Str"");
        }
      }
 else {
        String username=client.getUserName();
        String personName=m_personService.getUserIdentifier(username);
        if (personName != null) {
          m_authComponent.setCurrentUser(personName);
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + personName + ""String_Node_Str""+ username+ ""String_Node_Str"");
          authSts=CifsAuthenticator.AUTH_ALLOW;
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + client.getUserName() + ""String_Node_Str"");
        }
 else         if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + username);
      }
    }
 catch (    Exception ex) {
      logger.error(ex.getMessage());
    }
    if ((sess instanceof SMBSrvSession) == false) {
      m_sessions.remove(sess.getUniqueId());
      try {
        AuthenticateSession authSess=passDetails.getAuthenticateSession();
        authSess.CloseSession();
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + authSess.getSessionId());
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
 else {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + sess.getUniqueId());
  }
  return authSts;
}","/** 
 * Authenticate a session setup by a user
 * @param client ClientInfo
 * @param sess SrvSession
 * @param alg int
 * @return int
 */
public int authenticateUser(ClientInfo client,SrvSession sess,int alg){
  if (client.isNullSession()) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    return CifsAuthenticator.AUTH_ALLOW;
  }
  sess.beginReadTransaction(m_transactionService);
  if (client.getAuthenticationToken() != null && client.getLogonType() != ClientInfo.LogonNull) {
    m_authComponent.setCurrentUser(mapUserNameToPerson(client.getUserName()));
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
    return client.getLogonType() != ClientInfo.LogonGuest ? AUTH_ALLOW : AUTH_GUEST;
  }
  int authSts=AUTH_DISALLOW;
  if (client.isGuest() || client.getUserName().equalsIgnoreCase(getGuestUserName())) {
    if (allowGuest() == false)     return AUTH_DISALLOW;
    doGuestLogon(client,sess);
    authSts=AUTH_GUEST;
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + client.getUserName() + ""String_Node_Str""+ getStatusAsString(authSts));
    return authSts;
  }
  PassthruDetails passDetails=m_sessions.get(sess.getUniqueId());
  if (passDetails != null) {
    try {
      AuthenticateSession authSess=passDetails.getAuthenticateSession();
      authSess.doSessionSetup(client.getDomain(),client.getUserName(),null,client.getANSIPassword(),client.getPassword());
      if (authSess.isGuest()) {
        if (allowGuest() == true) {
          doGuestLogon(client,sess);
          authSts=CifsAuthenticator.AUTH_GUEST;
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + client.getUserName() + ""String_Node_Str"");
        }
      }
 else {
        String username=client.getUserName();
        String personName=m_personService.getUserIdentifier(username);
        if (personName != null) {
          client.setAuthenticationToken(m_authComponent.setCurrentUser(personName));
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + personName + ""String_Node_Str""+ username+ ""String_Node_Str"");
          authSts=CifsAuthenticator.AUTH_ALLOW;
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + client.getUserName() + ""String_Node_Str"");
        }
 else         if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + username);
      }
    }
 catch (    Exception ex) {
      logger.error(ex.getMessage());
    }
    if ((sess instanceof SMBSrvSession) == false) {
      m_sessions.remove(sess.getUniqueId());
      try {
        AuthenticateSession authSess=passDetails.getAuthenticateSession();
        authSess.CloseSession();
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"" + authSess.getSessionId());
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
 else {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + sess.getUniqueId());
  }
  return authSts;
}",0.9948547717842324
172288,"/** 
 * Do the actual work.
 * @param executionContext The context to get stuff from.
 */
public void execute(ExecutionContext executionContext) throws Exception {
  NodeRef pkg=((JBPMNode)executionContext.getContextInstance().getVariable(""String_Node_Str"")).getNodeRef();
  Pair<Integer,String> pkgPath=AVMNodeConverter.ToAVMVersionPath(pkg);
  String description=(String)executionContext.getContextInstance().getVariable(""String_Node_Str"");
  String tag=(String)executionContext.getContextInstance().getVariable(""String_Node_Str"");
  AVMNodeDescriptor pkgDesc=fAVMService.lookup(pkgPath.getFirst(),pkgPath.getSecond());
  String targetPath=pkgDesc.getIndirection();
  List<AVMDifference> stagingDiffs=fAVMSyncService.compare(pkgPath.getFirst(),pkgPath.getSecond(),-1,targetPath,null);
  for (  AVMDifference diff : stagingDiffs) {
    fAVMSubmittedAspect.clearSubmitted(diff.getSourceVersion(),diff.getSourcePath());
  }
  fAVMSyncService.update(stagingDiffs,null,false,false,true,true,tag,description);
  String from=(String)executionContext.getContextInstance().getVariable(""String_Node_Str"");
  if (from != null && from.length() > 0) {
    List<AVMDifference> sandboxDiffs=fAVMSyncService.compare(pkgPath.getFirst(),pkgPath.getSecond(),-1,from,null);
    fAVMSyncService.update(sandboxDiffs,null,false,false,true,true,tag,description);
    AVMDAOs.Instance().fAVMNodeDAO.flush();
    fAVMSyncService.flatten(from,targetPath);
  }
}","/** 
 * Do the actual work.
 * @param executionContext The context to get stuff from.
 */
public void execute(ExecutionContext executionContext) throws Exception {
  NodeRef pkg=((JBPMNode)executionContext.getContextInstance().getVariable(""String_Node_Str"")).getNodeRef();
  Pair<Integer,String> pkgPath=AVMNodeConverter.ToAVMVersionPath(pkg);
  String description=(String)executionContext.getContextInstance().getVariable(""String_Node_Str"");
  String tag=(String)executionContext.getContextInstance().getVariable(""String_Node_Str"");
  AVMNodeDescriptor pkgDesc=fAVMService.lookup(pkgPath.getFirst(),pkgPath.getSecond());
  String targetPath=pkgDesc.getIndirection();
  List<AVMDifference> stagingDiffs=fAVMSyncService.compare(pkgPath.getFirst(),pkgPath.getSecond(),-1,targetPath,null);
  for (  AVMDifference diff : stagingDiffs) {
    fAVMSubmittedAspect.clearSubmitted(diff.getSourceVersion(),diff.getSourcePath());
  }
  fAVMSyncService.update(stagingDiffs,null,false,false,true,true,tag,description);
  String from=(String)executionContext.getContextInstance().getVariable(""String_Node_Str"");
  if (from != null && from.length() > 0) {
    List<AVMDifference> sandboxDiffs=fAVMSyncService.compare(pkgPath.getFirst(),pkgPath.getSecond(),-1,from,null);
    fAVMSyncService.update(sandboxDiffs,null,true,true,false,false,tag,description);
    AVMDAOs.Instance().fAVMNodeDAO.flush();
    fAVMSyncService.flatten(from,targetPath);
  }
}",0.9860724233983288
172289,"public void testConcurrent() throws Exception {
  luceneFTS.pause();
  int count=10;
  int repeats=10;
  Map<QName,ChildAssociationRef> assocRefs=commitNodeGraph();
  Thread runner=null;
  for (int i=0; i < count; i++) {
    runner=new Nester(""String_Node_Str"" + i,runner,repeats);
  }
  if (runner != null) {
    runner.start();
    try {
      runner.join();
      System.out.println(""String_Node_Str"" + runner.getName());
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  Thread.sleep(20000);
  SearchService searcher=(SearchService)ctx.getBean(ServiceRegistry.SEARCH_SERVICE.getLocalName());
  assertEquals(2 * ((count * repeats) + 1),searcher.selectNodes(rootNodeRef,""String_Node_Str"",null,getNamespacePrefixReolsver(""String_Node_Str""),false).size());
  ResultSet results=searcher.query(rootNodeRef.getStoreRef(),""String_Node_Str"",""String_Node_Str"");
  assertEquals(3 * ((count * repeats) + 1),results.length());
  results.close();
}","public void testConcurrent() throws Exception {
  luceneFTS.pause();
  int count=10;
  int repeats=10;
  Map<QName,ChildAssociationRef> assocRefs=commitNodeGraph();
  Thread runner=null;
  for (int i=0; i < count; i++) {
    runner=new Nester(""String_Node_Str"" + i,runner,repeats);
  }
  if (runner != null) {
    runner.start();
    try {
      runner.join();
      System.out.println(""String_Node_Str"" + runner.getName());
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  SearchService searcher=(SearchService)ctx.getBean(ServiceRegistry.SEARCH_SERVICE.getLocalName());
  assertEquals(2 * ((count * repeats) + 1),searcher.selectNodes(rootNodeRef,""String_Node_Str"",null,getNamespacePrefixReolsver(""String_Node_Str""),false).size());
  ResultSet results=searcher.query(rootNodeRef.getStoreRef(),""String_Node_Str"",""String_Node_Str"");
  assertEquals(3 * ((count * repeats) + 1),results.length());
  results.close();
}",0.9880145909327774
172290,"public Set<NodeRef> getDeletions(String id) throws IOException {
  if (id == null) {
    throw new IndexerException(""String_Node_Str"");
  }
  Set<NodeRef> deletions=new HashSet<NodeRef>();
  File location=new File(indexDirectory,id);
  File file=new File(location,INDEX_INFO_DELETIONS);
  if (!file.exists()) {
    return Collections.<NodeRef>emptySet();
  }
  DataInputStream is=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
  int size=is.readInt();
  for (int i=0; i < size; i++) {
    String ref=is.readUTF();
    deletions.add(new NodeRef(ref));
  }
  is.close();
  return deletions;
}","public Set<NodeRef> getDeletions(String id) throws IOException {
  if (id == null) {
    throw new IndexerException(""String_Node_Str"");
  }
  Set<NodeRef> deletions=new HashSet<NodeRef>();
  File location=new File(indexDirectory,id);
  File file=new File(location,INDEX_INFO_DELETIONS);
  if (!file.exists()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id);
    }
    return Collections.<NodeRef>emptySet();
  }
  DataInputStream is=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
  int size=is.readInt();
  for (int i=0; i < size; i++) {
    String ref=is.readUTF();
    deletions.add(new NodeRef(ref));
  }
  is.close();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + deletions.size() + ""String_Node_Str""+ id);
  }
  return deletions;
}",0.8294036061026352
172291,"private void dumpInfo(){
  if (s_logger.isDebugEnabled()) {
    readWriteLock.writeLock().lock();
    try {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
      for (      IndexEntry entry : indexEntries.values()) {
        s_logger.debug(""String_Node_Str"" + entry.toString());
      }
    }
  finally {
      readWriteLock.writeLock().unlock();
    }
  }
}","private void dumpInfo(){
  if (s_logger.isDebugEnabled()) {
    StringBuilder builder=new StringBuilder();
    readWriteLock.writeLock().lock();
    try {
      builder.append(""String_Node_Str"");
      builder.append(""String_Node_Str"");
      for (      IndexEntry entry : indexEntries.values()) {
        builder.append(""String_Node_Str"" + entry.toString()).append(""String_Node_Str"");
      }
      s_logger.debug(builder.toString());
    }
  finally {
      readWriteLock.writeLock().unlock();
    }
  }
}",0.7074527252502781
172292,"public Object doWork() throws Exception {
  HashSet<String> toDelete=new HashSet<String>();
  for (  IndexEntry entry : toMerge.values()) {
    if (entry.getStatus() == TransactionStatus.MERGE) {
      if (wasMerged) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        toDelete.add(entry.getName());
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        entry.setStatus(TransactionStatus.COMMITTED);
      }
    }
 else     if (entry.getStatus() == TransactionStatus.MERGE_TARGET) {
      if (wasMerged) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        entry.setStatus(TransactionStatus.COMMITTED);
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        toDelete.add(entry.getName());
      }
    }
  }
  for (  String id : toDelete) {
    indexEntries.remove(id);
    deleteQueue.add(id);
  }
  dumpInfo();
  writeStatus();
  clearOldReaders();
synchronized (cleaner) {
    cleaner.notify();
  }
  return null;
}","public Object doWork() throws Exception {
  HashSet<String> toDelete=new HashSet<String>();
  for (  IndexEntry entry : toMerge.values()) {
    if (entry.getStatus() == TransactionStatus.MERGE) {
      if (wasMerged) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        toDelete.add(entry.getName());
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        entry.setStatus(TransactionStatus.COMMITTED);
      }
    }
 else     if (entry.getStatus() == TransactionStatus.MERGE_TARGET) {
      if (wasMerged) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        entry.setStatus(TransactionStatus.COMMITTED);
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + entry.getName());
        }
        toDelete.add(entry.getName());
      }
    }
  }
  for (  String id : toDelete) {
    indexEntries.remove(id);
    if (!referenceCountingReadOnlyIndexReaders.containsKey(id)) {
      s_logger.debug(""String_Node_Str"" + id);
      deleteQueue.add(id);
    }
  }
  dumpInfo();
  writeStatus();
  clearOldReaders();
synchronized (cleaner) {
    cleaner.notify();
  }
  return null;
}",0.9533799533799534
172293,"private void clearOldReaders() throws IOException {
  HashSet<String> valid=new HashSet<String>();
  for (  String id : indexEntries.keySet()) {
    IndexEntry entry=indexEntries.get(id);
    if (entry.getStatus().isCommitted()) {
      valid.add(id);
    }
  }
  HashSet<String> inValid=new HashSet<String>();
  for (  String id : referenceCountingReadOnlyIndexReaders.keySet()) {
    if (!valid.contains(id)) {
      inValid.add(id);
    }
  }
  boolean hasInvalid=false;
  for (  String id : inValid) {
    IndexReader reader=referenceCountingReadOnlyIndexReaders.remove(id);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id);
    }
    ReferenceCounting referenceCounting=(ReferenceCounting)reader;
    referenceCounting.setInvalidForReuse();
    hasInvalid=true;
  }
  if (hasInvalid) {
    if (mainIndexReader != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      ((ReferenceCounting)mainIndexReader).setInvalidForReuse();
    }
    mainIndexReader=null;
  }
}","private void clearOldReaders() throws IOException {
  HashSet<String> inValid=new HashSet<String>();
  for (  String id : referenceCountingReadOnlyIndexReaders.keySet()) {
    if (!indexEntries.containsKey(id)) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(id + ""String_Node_Str"");
      }
      inValid.add(id);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(id + ""String_Node_Str"");
      }
    }
  }
  clearInvalid(inValid);
}",0.1846758349705304
172294,"/** 
 * Get the IndexInfo object based in the given directory. There is only one object per directory per JVM.
 * @param file
 * @return
 * @throws IndexerException
 */
public static synchronized IndexInfo getIndexInfo(File file) throws IndexerException {
  File canonicalFile;
  try {
    canonicalFile=file.getCanonicalFile();
    IndexInfo indexInfo=indexInfos.get(canonicalFile);
    if (indexInfo == null) {
      indexInfo=new IndexInfo(canonicalFile);
      indexInfos.put(canonicalFile,indexInfo);
    }
    s_logger.error(""String_Node_Str"" + indexInfo + ""String_Node_Str""+ file.getAbsolutePath());
    return indexInfo;
  }
 catch (  IOException e) {
    throw new IndexerException(""String_Node_Str"",e);
  }
}","/** 
 * Get the IndexInfo object based in the given directory. There is only one object per directory per JVM.
 * @param file
 * @return
 * @throws IndexerException
 */
public static synchronized IndexInfo getIndexInfo(File file) throws IndexerException {
  File canonicalFile;
  try {
    canonicalFile=file.getCanonicalFile();
    IndexInfo indexInfo=indexInfos.get(canonicalFile);
    if (indexInfo == null) {
      indexInfo=new IndexInfo(canonicalFile);
      indexInfos.put(canonicalFile,indexInfo);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + indexInfo + ""String_Node_Str""+ file.getAbsolutePath());
    }
    return indexInfo;
  }
 catch (  IOException e) {
    throw new IndexerException(""String_Node_Str"",e);
  }
}",0.962862930452397
172295,"/** 
 * Start the SMB server.
 */
public void run(){
  if (logger.isDebugEnabled() && hasDebug()) {
    logger.debug(""String_Node_Str"" + getPort());
    if (getCharacterSet() != null)     logger.debug(""String_Node_Str"" + getCharacterSet());
  }
  try {
    if (hasBindAddress())     m_srvSock=new ServerSocket(getPort(),LISTEN_BACKLOG,getBindAddress());
 else     m_srvSock=new ServerSocket(getPort(),LISTEN_BACKLOG);
    if (logger.isDebugEnabled() && hasDebug()) {
      String ftpAddr=""String_Node_Str"";
      if (hasBindAddress())       ftpAddr=getBindAddress().getHostAddress();
      logger.debug(""String_Node_Str"" + ftpAddr);
    }
    if (hasBindAddress())     m_localFTPaddress=getBindAddress().getHostAddress().replace('.',',');
    setActive(true);
    fireServerEvent(ServerListener.ServerActive);
    while (hasShutdown() == false) {
      Socket sessSock=getSocket().accept();
      if (m_localFTPaddress == null) {
        if (sessSock.getLocalAddress() != null)         m_localFTPaddress=sessSock.getLocalAddress().getHostAddress().replace('.',',');
      }
      sessSock.setTcpNoDelay(true);
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getInetAddress().getHostAddress());
      FTPSrvSession srvSess=new FTPSrvSession(sessSock,this);
      srvSess.setSessionId(getNextSessionId());
      srvSess.setUniqueId(""String_Node_Str"" + srvSess.getSessionId());
      srvSess.setDebugPrefix(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str"");
      if (hasRootPath())       srvSess.setRootPath(getRootPath());
      addSession(srvSess);
      fireSessionOpenEvent(srvSess);
      Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
      srvThread.setDaemon(true);
      srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ sessSock.getInetAddress().getHostAddress());
      srvThread.start();
      try {
        Thread.sleep(1000L);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 catch (  SocketException ex) {
    if (hasShutdown() == false) {
      logger.error(""String_Node_Str"",ex);
      setException(ex);
      fireServerEvent(ServerListener.ServerError);
    }
  }
catch (  Exception ex) {
    if (hasShutdown() == false) {
      logger.error(""String_Node_Str"",ex);
    }
    setException(ex);
    fireServerEvent(ServerListener.ServerError);
  }
  Enumeration enm=m_sessions.enumerate();
  while (enm.hasMoreElements()) {
    Integer sessId=(Integer)enm.nextElement();
    FTPSrvSession sess=m_sessions.findSession(sessId);
    if (logger.isDebugEnabled() && hasDebug())     logger.debug(""String_Node_Str"" + sess.getSessionId());
    sess.closeSession();
  }
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
  setActive(false);
  fireServerEvent(ServerListener.ServerShutdown);
}","/** 
 * Start the SMB server.
 */
public void run(){
  if (logger.isDebugEnabled() && hasDebug()) {
    logger.debug(""String_Node_Str"" + getPort());
    if (getCharacterSet() != null)     logger.debug(""String_Node_Str"" + getCharacterSet());
  }
  try {
    if (hasBindAddress())     m_srvSock=new ServerSocket(getPort(),LISTEN_BACKLOG,getBindAddress());
 else     m_srvSock=new ServerSocket(getPort(),LISTEN_BACKLOG);
    if (logger.isDebugEnabled() && hasDebug()) {
      String ftpAddr=""String_Node_Str"";
      if (hasBindAddress())       ftpAddr=getBindAddress().getHostAddress();
      logger.debug(""String_Node_Str"" + ftpAddr);
    }
    if (hasBindAddress())     m_localFTPaddress=getBindAddress().getHostAddress().replace('.',',');
    setActive(true);
    fireServerEvent(ServerListener.ServerActive);
    while (hasShutdown() == false) {
      Socket sessSock=getSocket().accept();
      if (m_localFTPaddress == null) {
        if (sessSock.getLocalAddress() != null)         m_localFTPaddress=sessSock.getLocalAddress().getHostAddress().replace('.',',');
      }
      sessSock.setTcpNoDelay(true);
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getInetAddress().getHostAddress());
      FTPSrvSession srvSess=new FTPSrvSession(sessSock,this);
      srvSess.setSessionId(getNextSessionId());
      srvSess.setUniqueId(""String_Node_Str"" + srvSess.getSessionId());
      if (hasRootPath())       srvSess.setRootPath(getRootPath());
      addSession(srvSess);
      fireSessionOpenEvent(srvSess);
      Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
      srvThread.setDaemon(true);
      srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ sessSock.getInetAddress().getHostAddress());
      srvThread.start();
      try {
        Thread.sleep(1000L);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
 catch (  SocketException ex) {
    if (hasShutdown() == false) {
      logger.error(""String_Node_Str"",ex);
      setException(ex);
      fireServerEvent(ServerListener.ServerError);
    }
  }
catch (  Exception ex) {
    if (hasShutdown() == false) {
      logger.error(""String_Node_Str"",ex);
    }
    setException(ex);
    fireServerEvent(ServerListener.ServerError);
  }
  Enumeration enm=m_sessions.enumerate();
  while (enm.hasMoreElements()) {
    Integer sessId=(Integer)enm.nextElement();
    FTPSrvSession sess=m_sessions.findSession(sessId);
    if (logger.isDebugEnabled() && hasDebug())     logger.debug(""String_Node_Str"" + sess.getSessionId());
    sess.closeSession();
  }
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
  setActive(false);
  fireServerEvent(ServerListener.ServerShutdown);
}",0.9832442067736186
172296,"/** 
 * Run the NetBIOS session socket handler
 */
public void run(){
  try {
    clearShutdown();
    while (hasShutdown() == false) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"");
      Socket sessSock=getSocket().accept();
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getInetAddress().getHostAddress());
      try {
        PacketHandler pktHandler=new NetBIOSPacketHandler(sessSock);
        SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
        srvSess.setSessionId(getNextSessionId());
        srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
        srvSess.setDebugPrefix(""String_Node_Str"" + pktHandler.getShortName() + srvSess.getSessionId()+ ""String_Node_Str"");
        getServer().addSession(srvSess);
        Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
        srvThread.setDaemon(true);
        srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ sessSock.getInetAddress().getHostAddress());
        srvThread.start();
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
 catch (  SocketException ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
}","/** 
 * Run the NetBIOS session socket handler
 */
public void run(){
  try {
    clearShutdown();
    while (hasShutdown() == false) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"");
      Socket sessSock=getSocket().accept();
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getInetAddress().getHostAddress());
      try {
        PacketHandler pktHandler=new NetBIOSPacketHandler(sessSock);
        SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
        srvSess.setSessionId(getNextSessionId());
        srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
        getServer().addSession(srvSess);
        Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
        srvThread.setDaemon(true);
        srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ sessSock.getInetAddress().getHostAddress());
        srvThread.start();
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
 catch (  SocketException ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
}",0.95736568457539
172297,"/** 
 * Run the native SMB session socket handler
 */
public void run(){
  try {
    clearShutdown();
    while (hasShutdown() == false) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"");
      Socket sessSock=getSocket().accept();
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getInetAddress().getHostAddress());
      try {
        PacketHandler pktHandler=new TcpipSMBPacketHandler(sessSock);
        SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
        srvSess.setSessionId(getNextSessionId());
        srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
        srvSess.setDebugPrefix(""String_Node_Str"" + pktHandler.getShortName() + srvSess.getSessionId()+ ""String_Node_Str"");
        getServer().addSession(srvSess);
        Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
        srvThread.setDaemon(true);
        srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ sessSock.getInetAddress().getHostAddress());
        srvThread.start();
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
 catch (  SocketException ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
}","/** 
 * Run the native SMB session socket handler
 */
public void run(){
  try {
    clearShutdown();
    while (hasShutdown() == false) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"");
      Socket sessSock=getSocket().accept();
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getInetAddress().getHostAddress());
      try {
        PacketHandler pktHandler=new TcpipSMBPacketHandler(sessSock);
        SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
        srvSess.setSessionId(getNextSessionId());
        srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
        getServer().addSession(srvSess);
        Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
        srvThread.setDaemon(true);
        srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ sessSock.getInetAddress().getHostAddress());
        srvThread.start();
      }
 catch (      Exception ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
 catch (  SocketException ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    if (hasShutdown() == false)     logger.error(""String_Node_Str"",ex);
  }
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
}",0.9574835810577256
172298,"/** 
 * Run the Win32 Netbios() API listen code
 * @exception Exception If an unhandled error occurs
 */
private final void runNetBIOS() throws Exception {
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
  byte[] callerNameBuf=new byte[NetBIOS.NCBNameSize];
  String callerName=null;
  callerNameBuf[0]='\0';
  callerName=null;
  int lsn=Win32NetBIOS.Listen(m_lana,m_nbName.getNetBIOSName(),m_acceptClient,callerNameBuf);
  if (hasShutdown())   return;
  if (callerNameBuf[0] != '\0')   callerName=new String(callerNameBuf).trim();
 else   callerName=""String_Node_Str"";
  if (lsn >= 0) {
    try {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + lsn + ""String_Node_Str""+ callerName+ ""String_Node_Str"");
      PacketHandler pktHandler=new Win32NetBIOSPacketHandler(m_lana,lsn,callerName);
      SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
      srvSess.setSessionId(getNextSessionId());
      srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
      srvSess.setDebugPrefix(""String_Node_Str"" + pktHandler.getShortName() + srvSess.getSessionId()+ ""String_Node_Str"");
      getServer().addSession(srvSess);
      Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
      srvThread.setDaemon(true);
      srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ lsn);
      srvThread.start();
    }
 catch (    Exception ex) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + ex.toString());
    }
  }
 else {
    int sts=-lsn;
    if (sts == NetBIOS.NRC_Bridge) {
      m_lanaValid=false;
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + getLANANumber());
    }
 else     if (logger.isDebugEnabled() && hasDebug())     logger.debug(""String_Node_Str"" + Integer.toHexString(-lsn) + ""String_Node_Str""+ NetBIOS.getErrorString(-lsn));
  }
}","/** 
 * Run the Win32 Netbios() API listen code
 * @exception Exception If an unhandled error occurs
 */
private final void runNetBIOS() throws Exception {
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
  byte[] callerNameBuf=new byte[NetBIOS.NCBNameSize];
  String callerName=null;
  callerNameBuf[0]='\0';
  callerName=null;
  int lsn=Win32NetBIOS.Listen(m_lana,m_nbName.getNetBIOSName(),m_acceptClient,callerNameBuf);
  if (hasShutdown())   return;
  if (callerNameBuf[0] != '\0')   callerName=new String(callerNameBuf).trim();
 else   callerName=""String_Node_Str"";
  if (lsn >= 0) {
    try {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + lsn + ""String_Node_Str""+ callerName+ ""String_Node_Str"");
      PacketHandler pktHandler=new Win32NetBIOSPacketHandler(m_lana,lsn,callerName);
      SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
      srvSess.setSessionId(getNextSessionId());
      srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
      getServer().addSession(srvSess);
      Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
      srvThread.setDaemon(true);
      srvThread.setName(""String_Node_Str"" + srvSess.getSessionId() + ""String_Node_Str""+ lsn);
      srvThread.start();
    }
 catch (    Exception ex) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + ex.toString());
    }
  }
 else {
    int sts=-lsn;
    if (sts == NetBIOS.NRC_Bridge) {
      m_lanaValid=false;
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + getLANANumber());
    }
 else     if (logger.isDebugEnabled() && hasDebug())     logger.debug(""String_Node_Str"" + Integer.toHexString(-lsn) + ""String_Node_Str""+ NetBIOS.getErrorString(-lsn));
  }
}",0.9680823001846478
172299,"/** 
 * Run the Winsock NetBIOS listen code
 * @exception Exception If an unhandled error occurs
 */
private final void runWinsock() throws Exception {
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
  NetBIOSSocket sessSock=null;
  try {
    sessSock=m_nbSocket.listen();
  }
 catch (  WinsockNetBIOSException ex) {
    if (ex.getErrorCode() == WinsockError.WsaENetDown) {
      if (isLANAOnline(m_lana) == false) {
        if (m_nbSocket != null) {
          m_nbSocket.closeSocket();
          m_nbSocket=null;
        }
        if (m_wksSocket != null) {
          m_wksSocket.closeSocket();
          m_wksSocket=null;
        }
        m_lanaValid=false;
        if (logger.isDebugEnabled() && hasDebug())         logger.debug(""String_Node_Str"" + m_lana);
      }
    }
 else {
      if (hasShutdown() == false && logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + ex.getMessage());
    }
  }
  if (hasShutdown())   return;
  if (sessSock != null) {
    try {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getName());
      PacketHandler pktHandler=new WinsockNetBIOSPacketHandler(m_lana,sessSock);
      SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
      srvSess.setSessionId(getNextSessionId());
      srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
      srvSess.setDebugPrefix(""String_Node_Str"" + pktHandler.getShortName() + srvSess.getSessionId()+ ""String_Node_Str"");
      getServer().addSession(srvSess);
      Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
      srvThread.setDaemon(true);
      srvThread.setName(""String_Node_Str"" + srvSess.getSessionId());
      srvThread.start();
    }
 catch (    Exception ex) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + ex.toString());
    }
  }
}","/** 
 * Run the Winsock NetBIOS listen code
 * @exception Exception If an unhandled error occurs
 */
private final void runWinsock() throws Exception {
  if (logger.isDebugEnabled() && hasDebug())   logger.debug(""String_Node_Str"");
  NetBIOSSocket sessSock=null;
  try {
    sessSock=m_nbSocket.listen();
  }
 catch (  WinsockNetBIOSException ex) {
    if (ex.getErrorCode() == WinsockError.WsaENetDown) {
      if (isLANAOnline(m_lana) == false) {
        if (m_nbSocket != null) {
          m_nbSocket.closeSocket();
          m_nbSocket=null;
        }
        if (m_wksSocket != null) {
          m_wksSocket.closeSocket();
          m_wksSocket=null;
        }
        m_lanaValid=false;
        if (logger.isDebugEnabled() && hasDebug())         logger.debug(""String_Node_Str"" + m_lana);
      }
    }
 else {
      if (hasShutdown() == false && logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + ex.getMessage());
    }
  }
  if (hasShutdown())   return;
  if (sessSock != null) {
    try {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + sessSock.getName());
      PacketHandler pktHandler=new WinsockNetBIOSPacketHandler(m_lana,sessSock);
      SMBSrvSession srvSess=new SMBSrvSession(pktHandler,getServer());
      srvSess.setSessionId(getNextSessionId());
      srvSess.setUniqueId(pktHandler.getShortName() + srvSess.getSessionId());
      getServer().addSession(srvSess);
      Thread srvThread=new Thread(THREAD_GROUP_SESSION,srvSess);
      srvThread.setDaemon(true);
      srvThread.setName(""String_Node_Str"" + srvSess.getSessionId());
      srvThread.start();
    }
 catch (    Exception ex) {
      if (logger.isDebugEnabled() && hasDebug())       logger.debug(""String_Node_Str"" + ex.toString());
    }
  }
}",0.9673590504451038
172300,"@Override protected void executeImpl(Action action,NodeRef actionedUponNodeRef){
  Pair<Integer,String> versionPath=AVMNodeConverter.ToAVMVersionPath(actionedUponNodeRef);
  String[] storePath=versionPath.getSecond().split(""String_Node_Str"");
  String store=storePath[0];
  AVMNodeDescriptor toRevert=(AVMNodeDescriptor)action.getParameterValue(TOREVERT);
  List<Pair<Integer,String>> paths=fAVMService.getPaths(toRevert);
  Pair<Integer,String> found=new Pair<Integer,String>(Integer.MAX_VALUE,""String_Node_Str"");
  for (  Pair<Integer,String> path : paths) {
    if (!path.getSecond().startsWith(store + ':')) {
      continue;
    }
    if (path.getFirst() < found.getFirst()) {
      found=path;
    }
  }
  AVMDifference diff=new AVMDifference(found.getFirst(),found.getSecond(),-1,versionPath.getSecond(),AVMDifference.NEWER);
  List<AVMDifference> diffs=new ArrayList<AVMDifference>(1);
  diffs.add(diff);
  String message=""String_Node_Str"" + versionPath.getSecond() + ""String_Node_Str""+ found.getFirst()+ ""String_Node_Str"";
  fAVMSyncService.update(diffs,null,false,false,true,true,""String_Node_Str"",message);
}","@Override protected void executeImpl(Action action,NodeRef actionedUponNodeRef){
  Pair<Integer,String> versionPath=AVMNodeConverter.ToAVMVersionPath(actionedUponNodeRef);
  AVMNodeDescriptor toRevert=(AVMNodeDescriptor)action.getParameterValue(TOREVERT);
  List<Pair<Integer,String>> paths=fAVMService.getPaths(toRevert);
  if (paths.size() == 0) {
    fgLogger.error(""String_Node_Str"" + toRevert);
    throw new AlfrescoRuntimeException(""String_Node_Str"" + toRevert);
  }
  AVMDifference diff=new AVMDifference(paths.get(0).getFirst(),paths.get(0).getSecond(),-1,versionPath.getSecond(),AVMDifference.NEWER);
  List<AVMDifference> diffs=new ArrayList<AVMDifference>(1);
  diffs.add(diff);
  String message=""String_Node_Str"" + versionPath.getSecond() + ""String_Node_Str""+ paths.get(0).getFirst()+ ""String_Node_Str"";
  fAVMSyncService.update(diffs,null,false,false,true,true,""String_Node_Str"",message);
}",0.6782006920415224
172301,"/** 
 * Do the crawl test.
 */
public void testCrawl(){
  int n=2;
  int m=4;
  long runTime=600000;
  fService.purgeAVMStore(""String_Node_Str"");
  BulkLoader loader=new BulkLoader();
  loader.setAvmService(fService);
  for (int i=0; i < m; i++) {
    fService.createAVMStore(""String_Node_Str"" + i);
    loader.recursiveLoad(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str"");
    fService.createSnapshot(""String_Node_Str"" + i,null,null);
  }
  long startTime=System.currentTimeMillis();
  List<AVMCrawler> crawlers=new ArrayList<AVMCrawler>();
  List<Thread> threads=new ArrayList<Thread>();
  for (int i=0; i < n; i++) {
    crawlers.add(new AVMCrawler(fService));
    threads.add(new Thread(crawlers.get(i)));
    threads.get(i).start();
  }
  while (true) {
    try {
      Thread.sleep(5000);
      for (      AVMCrawler crawler : crawlers) {
        if (crawler.getError()) {
          for (          AVMCrawler craw : crawlers) {
            craw.setDone();
          }
          for (          Thread thread : threads) {
            try {
              thread.join();
            }
 catch (            InterruptedException ie) {
            }
          }
          fail();
        }
      }
    }
 catch (    InterruptedException ie) {
    }
    long now=System.currentTimeMillis();
    if (now - startTime > runTime) {
      break;
    }
  }
  for (  AVMCrawler crawler : crawlers) {
    crawler.setDone();
  }
  for (  Thread thread : threads) {
    try {
      thread.join();
    }
 catch (    InterruptedException ie) {
    }
  }
  long ops=0L;
  for (  AVMCrawler crawler : crawlers) {
    ops+=crawler.getOpCount();
  }
  long time=System.currentTimeMillis() - startTime;
  System.out.println(""String_Node_Str"" + (ops * 1000L / time));
}","/** 
 * Do the crawl test.
 */
public void testCrawl(){
  int n=8;
  int m=32;
  long runTime=21600000;
  fService.purgeAVMStore(""String_Node_Str"");
  BulkLoader loader=new BulkLoader();
  loader.setAvmService(fService);
  for (int i=0; i < m; i++) {
    fService.createAVMStore(""String_Node_Str"" + i);
    loader.recursiveLoad(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str"");
    fService.createSnapshot(""String_Node_Str"" + i,null,null);
  }
  long startTime=System.currentTimeMillis();
  List<AVMCrawler> crawlers=new ArrayList<AVMCrawler>();
  List<Thread> threads=new ArrayList<Thread>();
  for (int i=0; i < n; i++) {
    crawlers.add(new AVMCrawler(fService));
    threads.add(new Thread(crawlers.get(i)));
    threads.get(i).start();
  }
  while (true) {
    try {
      Thread.sleep(5000);
      for (      AVMCrawler crawler : crawlers) {
        if (crawler.getError()) {
          for (          AVMCrawler craw : crawlers) {
            craw.setDone();
          }
          for (          Thread thread : threads) {
            try {
              thread.join();
            }
 catch (            InterruptedException ie) {
            }
          }
          fail();
        }
      }
    }
 catch (    InterruptedException ie) {
    }
    long now=System.currentTimeMillis();
    if (now - startTime > runTime) {
      break;
    }
  }
  for (  AVMCrawler crawler : crawlers) {
    crawler.setDone();
  }
  for (  Thread thread : threads) {
    try {
      thread.join();
    }
 catch (    InterruptedException ie) {
    }
  }
  long ops=0L;
  for (  AVMCrawler crawler : crawlers) {
    ops+=crawler.getOpCount();
  }
  long time=System.currentTimeMillis() - startTime;
  System.out.println(""String_Node_Str"" + (ops * 1000L / time));
}",0.9980141843971632
172302,"/** 
 * Insert a child node without COW.
 * @param name The name to give the child.
 */
public void putChild(String name,AVMNode node){
  ChildKey key=new ChildKey(this,name);
  ChildEntry existing=AVMDAOs.Instance().fChildEntryDAO.get(key);
  if (existing != null) {
    existing.setChild(node);
    AVMDAOs.Instance().fChildEntryDAO.update(existing);
  }
 else {
    ChildEntry entry=new ChildEntryImpl(key,node);
    AVMDAOs.Instance().fAVMNodeDAO.flush();
    AVMDAOs.Instance().fChildEntryDAO.save(entry);
  }
}","/** 
 * Insert a child node without COW.
 * @param name The name to give the child.
 */
public void putChild(String name,AVMNode node){
  ChildKey key=new ChildKey(this,name);
  ChildEntry existing=AVMDAOs.Instance().fChildEntryDAO.get(key);
  if (existing != null) {
    AVMDAOs.Instance().fChildEntryDAO.delete(existing);
  }
  ChildEntry entry=new ChildEntryImpl(key,node);
  AVMDAOs.Instance().fAVMNodeDAO.flush();
  AVMDAOs.Instance().fChildEntryDAO.save(entry);
}",0.5725888324873096
172303,"/** 
 * Put a new child node into this directory.  No copy.
 * @param name The name of the child.
 * @param node The node to add.
 */
public void putChild(String name,AVMNode node){
  ChildKey key=new ChildKey(this,name);
  ChildEntry existing=AVMDAOs.Instance().fChildEntryDAO.get(key);
  if (existing != null) {
    existing.setChild(node);
    AVMDAOs.Instance().fChildEntryDAO.update(existing);
  }
 else {
    ChildEntry entry=new ChildEntryImpl(key,node);
    AVMDAOs.Instance().fAVMNodeDAO.flush();
    AVMDAOs.Instance().fChildEntryDAO.save(entry);
  }
}","/** 
 * Put a new child node into this directory.  No copy.
 * @param name The name of the child.
 * @param node The node to add.
 */
public void putChild(String name,AVMNode node){
  ChildKey key=new ChildKey(this,name);
  ChildEntry existing=AVMDAOs.Instance().fChildEntryDAO.get(key);
  if (existing != null) {
    AVMDAOs.Instance().fChildEntryDAO.delete(existing);
  }
  ChildEntry entry=new ChildEntryImpl(key,node);
  AVMDAOs.Instance().fAVMNodeDAO.flush();
  AVMDAOs.Instance().fChildEntryDAO.save(entry);
}",0.8319405756731661
172304,"/** 
 * Checks to see if a copy exists in the executed rules list
 * @param executedRules
 * @param actionedUponNodeRef
 * @param rule
 * @return
 */
private boolean checkForCopy(Set<ExecutedRuleData> executedRules,NodeRef actionedUponNodeRef,Rule rule){
  boolean result=true;
  if (this.nodeService.hasAspect(actionedUponNodeRef,ContentModel.ASPECT_COPIEDFROM) == true) {
    if (logger.isDebugEnabled() == true) {
      logger.debug(""String_Node_Str"" + actionedUponNodeRef.getId() + ""String_Node_Str"");
    }
    NodeRef copiedFrom=(NodeRef)this.nodeService.getProperty(actionedUponNodeRef,ContentModel.PROP_COPY_REFERENCE);
    if (logger.isDebugEnabled() == true && copiedFrom != null) {
      logger.debug(""String_Node_Str"" + copiedFrom.getId() + ""String_Node_Str"");
    }
    ;
    if (copiedFrom != null && executedRules.contains(new ExecutedRuleData(copiedFrom,rule)) == true) {
      if (logger.isDebugEnabled() == true) {
        logger.debug(""String_Node_Str"" + rule.getTitle() + ""String_Node_Str""+ copiedFrom.getId()+ ""String_Node_Str"");
      }
      return false;
    }
 else {
      if (logger.isDebugEnabled() == true) {
        logger.debug(""String_Node_Str"" + rule.getTitle() + ""String_Node_Str""+ actionedUponNodeRef.getId()+ ""String_Node_Str"");
        logger.debug(""String_Node_Str"");
      }
      result=checkForCopy(executedRules,copiedFrom,rule);
    }
  }
 else {
    if (logger.isDebugEnabled() == true) {
      logger.debug(""String_Node_Str"" + rule.getTitle() + ""String_Node_Str""+ actionedUponNodeRef.getId()+ ""String_Node_Str"");
    }
  }
  return result;
}","/** 
 * Checks to see if a copy exists in the executed rules list
 * @param executedRules
 * @param actionedUponNodeRef
 * @param rule
 * @return
 */
private boolean checkForCopy(Set<ExecutedRuleData> executedRules,NodeRef actionedUponNodeRef,Rule rule){
  boolean result=true;
  if (this.nodeService.exists(actionedUponNodeRef) == true && this.nodeService.hasAspect(actionedUponNodeRef,ContentModel.ASPECT_COPIEDFROM) == true) {
    if (logger.isDebugEnabled() == true) {
      logger.debug(""String_Node_Str"" + actionedUponNodeRef.getId() + ""String_Node_Str"");
    }
    NodeRef copiedFrom=(NodeRef)this.nodeService.getProperty(actionedUponNodeRef,ContentModel.PROP_COPY_REFERENCE);
    if (logger.isDebugEnabled() == true && copiedFrom != null) {
      logger.debug(""String_Node_Str"" + copiedFrom.getId() + ""String_Node_Str"");
    }
    ;
    if (copiedFrom != null && executedRules.contains(new ExecutedRuleData(copiedFrom,rule)) == true) {
      if (logger.isDebugEnabled() == true) {
        logger.debug(""String_Node_Str"" + rule.getTitle() + ""String_Node_Str""+ copiedFrom.getId()+ ""String_Node_Str"");
      }
      return false;
    }
 else {
      if (logger.isDebugEnabled() == true) {
        logger.debug(""String_Node_Str"" + rule.getTitle() + ""String_Node_Str""+ actionedUponNodeRef.getId()+ ""String_Node_Str"");
        logger.debug(""String_Node_Str"");
      }
      result=checkForCopy(executedRules,copiedFrom,rule);
    }
  }
 else {
    if (logger.isDebugEnabled() == true) {
      logger.debug(""String_Node_Str"" + rule.getTitle() + ""String_Node_Str""+ actionedUponNodeRef.getId()+ ""String_Node_Str"");
    }
  }
  return result;
}",0.9826517967781908
172305,"/** 
 * Recursive copy algorithm
 * @param sourceNodeRef
 * @param destinationParent
 * @param destinationAssocTypeQName
 * @param destinationQName
 * @param copyChildren
 * @param copiedChildren
 * @return
 */
private NodeRef recursiveCopy(NodeRef sourceNodeRef,NodeRef destinationParent,QName destinationAssocTypeQName,QName destinationQName,boolean copyChildren,Map<NodeRef,NodeRef> copiedChildren){
  QName sourceTypeRef=this.nodeService.getType(sourceNodeRef);
  TypeDefinition typeDef=dictionaryService.getType(sourceTypeRef);
  if (typeDef == null) {
    throw new InvalidTypeException(sourceTypeRef);
  }
  PolicyScope copyDetails=getCopyDetails(sourceNodeRef,destinationParent.getStoreRef(),true);
  Map<QName,Serializable> typeProps=copyDetails.getProperties();
  Map<QName,Serializable> properties=new HashMap<QName,Serializable>();
  if (typeProps != null) {
    properties.putAll(typeProps);
  }
  for (  AspectDefinition aspectDef : typeDef.getDefaultAspects()) {
    Map<QName,Serializable> aspectProps=copyDetails.getProperties(aspectDef.getName());
    if (aspectProps != null) {
      properties.putAll(aspectProps);
    }
  }
  AssociationDefinition assocDef=dictionaryService.getAssociation(destinationAssocTypeQName);
  if (!assocDef.isChild()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + destinationAssocTypeQName);
  }
 else {
    ChildAssociationDefinition childAssocDef=(ChildAssociationDefinition)assocDef;
    if (!childAssocDef.getDuplicateChildNamesAllowed()) {
      properties.remove(ContentModel.PROP_NAME);
    }
  }
  ChildAssociationRef destinationChildAssocRef=this.nodeService.createNode(destinationParent,destinationAssocTypeQName,destinationQName,sourceTypeRef,properties);
  NodeRef destinationNodeRef=destinationChildAssocRef.getChildRef();
  copiedChildren.put(sourceNodeRef,destinationNodeRef);
  this.ruleService.disableRules(destinationNodeRef);
  try {
    Map<QName,Serializable> copyProperties=new HashMap<QName,Serializable>();
    copyProperties.put(ContentModel.PROP_COPY_REFERENCE,sourceNodeRef);
    this.nodeService.addAspect(destinationNodeRef,ContentModel.ASPECT_COPIEDFROM,copyProperties);
    copyAspects(destinationNodeRef,copyDetails);
    copyAssociations(destinationNodeRef,copyDetails,copyChildren,copiedChildren);
    copyPermissions(sourceNodeRef,destinationNodeRef);
  }
  finally {
    this.ruleService.enableRules(destinationNodeRef);
  }
  return destinationNodeRef;
}","/** 
 * Recursive copy algorithm
 * @param dropName      drop the name property when associations don't allow duplicately named children
 */
private NodeRef recursiveCopy(NodeRef sourceNodeRef,NodeRef sourceParentRef,NodeRef destinationParentRef,QName destinationAssocTypeQName,QName destinationQName,boolean copyChildren,boolean dropName,Map<NodeRef,NodeRef> copiedChildren){
  QName sourceTypeRef=this.nodeService.getType(sourceNodeRef);
  TypeDefinition typeDef=dictionaryService.getType(sourceTypeRef);
  if (typeDef == null) {
    throw new InvalidTypeException(sourceTypeRef);
  }
  PolicyScope copyDetails=getCopyDetails(sourceNodeRef,destinationParentRef.getStoreRef(),true);
  Map<QName,Serializable> typeProps=copyDetails.getProperties();
  Map<QName,Serializable> properties=new HashMap<QName,Serializable>();
  if (typeProps != null) {
    properties.putAll(typeProps);
  }
  for (  AspectDefinition aspectDef : typeDef.getDefaultAspects()) {
    Map<QName,Serializable> aspectProps=copyDetails.getProperties(aspectDef.getName());
    if (aspectProps != null) {
      properties.putAll(aspectProps);
    }
  }
  AssociationDefinition assocDef=dictionaryService.getAssociation(destinationAssocTypeQName);
  if (!assocDef.isChild()) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + destinationAssocTypeQName);
  }
 else {
    ChildAssociationDefinition childAssocDef=(ChildAssociationDefinition)assocDef;
    if (dropName && !childAssocDef.getDuplicateChildNamesAllowed()) {
      properties.remove(ContentModel.PROP_NAME);
    }
  }
  ChildAssociationRef destinationChildAssocRef=this.nodeService.createNode(destinationParentRef,destinationAssocTypeQName,destinationQName,sourceTypeRef,properties);
  NodeRef destinationNodeRef=destinationChildAssocRef.getChildRef();
  copiedChildren.put(sourceNodeRef,destinationNodeRef);
  this.ruleService.disableRules(destinationNodeRef);
  try {
    Map<QName,Serializable> copyProperties=new HashMap<QName,Serializable>();
    copyProperties.put(ContentModel.PROP_COPY_REFERENCE,sourceNodeRef);
    this.nodeService.addAspect(destinationNodeRef,ContentModel.ASPECT_COPIEDFROM,copyProperties);
    copyAspects(destinationNodeRef,copyDetails);
    copyAssociations(destinationNodeRef,copyDetails,copyChildren,copiedChildren);
    copyPermissions(sourceNodeRef,destinationNodeRef);
  }
  finally {
    this.ruleService.enableRules(destinationNodeRef);
  }
  return destinationNodeRef;
}",0.9310204081632651
172306,"/** 
 * Copies the child associations onto the destiantion node reference. <p> If copyChildren is true then the nodes at the end of a primary assoc will be copied before they are associated.
 * @param classRef				the class reference
 * @param destinationNodeRef	the destination node reference
 * @param copyDetails			the copy details
 * @param copyChildren			indicates whether to copy the primary children
 */
private void copyChildAssociations(QName classRef,NodeRef destinationNodeRef,PolicyScope copyDetails,boolean copyChildren,Map<NodeRef,NodeRef> copiedChildren){
  List<ChildAssociationRef> childAssocs=copyDetails.getChildAssociations(classRef);
  if (childAssocs != null) {
    for (    ChildAssociationRef childAssoc : childAssocs) {
      if (copyChildren == true) {
        if (childAssoc.isPrimary() == true) {
          if (copiedChildren.containsKey(childAssoc.getChildRef()) == false && copiedChildren.containsValue(childAssoc.getChildRef()) == false) {
            recursiveCopy(childAssoc.getChildRef(),destinationNodeRef,childAssoc.getTypeQName(),childAssoc.getQName(),copyChildren,copiedChildren);
          }
        }
 else {
          NodeRef childRef=childAssoc.getChildRef();
          this.nodeService.addChild(destinationNodeRef,childRef,childAssoc.getTypeQName(),childAssoc.getQName());
        }
      }
 else {
        NodeRef childRef=childAssoc.getChildRef();
        QName childType=this.nodeService.getType(childRef);
        if (this.dictionaryService.isSubClass(childType,ContentModel.TYPE_CONFIGURATIONS) == true || copyDetails.isChildAssociationRefAlwaysTraversed(classRef,childAssoc) == true) {
          if (copiedChildren.containsKey(childRef) == false) {
            recursiveCopy(childRef,destinationNodeRef,childAssoc.getTypeQName(),childAssoc.getQName(),true,copiedChildren);
          }
        }
 else {
          this.nodeService.addChild(destinationNodeRef,childRef,childAssoc.getTypeQName(),childAssoc.getQName());
        }
      }
    }
  }
}","/** 
 * Copies the child associations onto the destiantion node reference. <p> If copyChildren is true then the nodes at the end of a primary assoc will be copied before they are associated.
 * @param classRef				the class reference
 * @param destinationNodeRef	the destination node reference
 * @param copyDetails			the copy details
 * @param copyChildren			indicates whether to copy the primary children
 */
private void copyChildAssociations(QName classRef,NodeRef destinationNodeRef,PolicyScope copyDetails,boolean copyChildren,Map<NodeRef,NodeRef> copiedChildren){
  List<ChildAssociationRef> childAssocs=copyDetails.getChildAssociations(classRef);
  if (childAssocs != null) {
    for (    ChildAssociationRef childAssoc : childAssocs) {
      if (copyChildren == true) {
        if (childAssoc.isPrimary() == true) {
          if (copiedChildren.containsKey(childAssoc.getChildRef()) == false && copiedChildren.containsValue(childAssoc.getChildRef()) == false) {
            recursiveCopy(childAssoc.getChildRef(),childAssoc.getParentRef(),destinationNodeRef,childAssoc.getTypeQName(),childAssoc.getQName(),copyChildren,false,copiedChildren);
          }
        }
 else {
          NodeRef childRef=childAssoc.getChildRef();
          this.nodeService.addChild(destinationNodeRef,childRef,childAssoc.getTypeQName(),childAssoc.getQName());
        }
      }
 else {
        NodeRef childRef=childAssoc.getChildRef();
        QName childType=this.nodeService.getType(childRef);
        if (this.dictionaryService.isSubClass(childType,ContentModel.TYPE_CONFIGURATIONS) == true || copyDetails.isChildAssociationRefAlwaysTraversed(classRef,childAssoc) == true) {
          if (copiedChildren.containsKey(childRef) == false) {
            recursiveCopy(childRef,childAssoc.getParentRef(),destinationNodeRef,childAssoc.getTypeQName(),childAssoc.getQName(),true,false,copiedChildren);
          }
        }
 else {
          this.nodeService.addChild(destinationNodeRef,childRef,childAssoc.getTypeQName(),childAssoc.getQName());
        }
      }
    }
  }
}",0.9654491609081934
172307,"/** 
 * Insert a child node without COW.
 * @param name The name to give the child.
 */
public void putChild(String name,AVMNode node){
  ChildEntry existing=AVMContext.fgInstance.fChildEntryDAO.getByNameParent(name,this);
  if (existing != null) {
    existing.setChild(node);
    AVMContext.fgInstance.fChildEntryDAO.update(existing);
  }
 else {
    ChildEntry entry=new ChildEntryImpl(name,this,node);
    AVMContext.fgInstance.fChildEntryDAO.save(entry);
  }
  DeletedChild dc=getDeleted(name);
  if (dc != null) {
    AVMContext.fgInstance.fDeletedChildDAO.delete(dc);
  }
}","/** 
 * Insert a child node without COW.
 * @param name The name to give the child.
 */
public void putChild(String name,AVMNode node){
  ChildEntry existing=AVMContext.fgInstance.fChildEntryDAO.getByNameParent(name,this);
  if (existing != null) {
    existing.setChild(node);
    AVMContext.fgInstance.fChildEntryDAO.update(existing);
  }
 else {
    ChildEntry entry=new ChildEntryImpl(name,this,node);
    AVMContext.fgInstance.fAVMNodeDAO.flush();
    AVMContext.fgInstance.fChildEntryDAO.save(entry);
  }
  DeletedChild dc=getDeleted(name);
  if (dc != null) {
    AVMContext.fgInstance.fDeletedChildDAO.delete(dc);
  }
}",0.9610604805302404
172308,"/** 
 * Put a new child node into this directory.  No copy.
 * @param name The name of the child.
 * @param node The node to add.
 */
public void putChild(String name,AVMNode node){
  ChildEntry existing=AVMContext.fgInstance.fChildEntryDAO.getByNameParent(name,this);
  if (existing != null) {
    existing.setChild(node);
    AVMContext.fgInstance.fChildEntryDAO.update(existing);
  }
 else {
    ChildEntry entry=new ChildEntryImpl(name,this,node);
    AVMContext.fgInstance.fChildEntryDAO.save(entry);
  }
}","/** 
 * Put a new child node into this directory.  No copy.
 * @param name The name of the child.
 * @param node The node to add.
 */
public void putChild(String name,AVMNode node){
  ChildEntry existing=AVMContext.fgInstance.fChildEntryDAO.getByNameParent(name,this);
  if (existing != null) {
    existing.setChild(node);
    AVMContext.fgInstance.fChildEntryDAO.update(existing);
  }
 else {
    ChildEntry entry=new ChildEntryImpl(name,this,node);
    AVMContext.fgInstance.fAVMNodeDAO.flush();
    AVMContext.fgInstance.fChildEntryDAO.save(entry);
  }
}",0.9560336763330216
172309,"/** 
 * Get an entry by name and parent.
 * @param name The name of the child to find.
 * @param parent The parent to look in.
 * @return The ChildEntry or null if not foun.
 */
public ChildEntry getByNameParent(String name,DirectoryNode parent){
  ChildEntry query=new ChildEntryImpl(name,parent,null);
  return (ChildEntry)getSession().get(ChildEntryImpl.class,(Serializable)query);
}","/** 
 * Get an entry by name and parent.
 * @param name The name of the child to find.
 * @param parent The parent to look in.
 * @return The ChildEntry or null if not foun.
 */
public ChildEntry getByNameParent(String name,DirectoryNode parent){
  Query query=getSession().createQuery(""String_Node_Str"");
  query.setString(""String_Node_Str"",name);
  query.setEntity(""String_Node_Str"",parent);
  query.setCacheable(true);
  return (ChildEntry)query.uniqueResult();
}",0.6173708920187794
172310,"/** 
 * Lookup a directory specifically.
 * @param version The version to look under.
 * @param path The path to lookup.
 * @return A lookup object.
 */
public Lookup lookupDirectory(int version,String path){
  Integer count=fLookupCount.get();
  if (count == null) {
    fLookupCount.set(1);
  }
 else {
    fLookupCount.set(count + 1);
  }
  if (fLookupCount.get() > 50) {
  }
  String[] pathParts=SplitPath(path);
  AVMStore store=getAVMStoreByName(pathParts[0]);
  return store.lookupDirectory(version,pathParts[1],false);
}","/** 
 * Lookup a directory specifically.
 * @param version The version to look under.
 * @param path The path to lookup.
 * @return A lookup object.
 */
public Lookup lookupDirectory(int version,String path){
  if (fLookupCount.get() > 50) {
    throw new AVMCycleException(""String_Node_Str"");
  }
  String[] pathParts=SplitPath(path);
  AVMStore store=getAVMStoreByName(pathParts[0]);
  return store.lookupDirectory(version,pathParts[1],false);
}",0.8020512820512821
172311,"/** 
 * Sets Properties of Task
 * @param instance  task instance
 * @param properties  properties to set
 */
@SuppressWarnings(""String_Node_Str"") protected Map<QName,Serializable> getTaskProperties(TaskInstance instance){
  TypeDefinition taskDef=getAnonymousTaskDefinition(getTaskDefinition(instance.getTask()));
  Map<QName,AssociationDefinition> taskAssocs=taskDef.getAssociations();
  Map<QName,Serializable> properties=new HashMap<QName,Serializable>(10);
  Map<String,Object> vars=instance.getVariablesLocally();
  for (  Entry<String,Object> entry : vars.entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    QName qname=QName.createQName(key);
    AssociationDefinition assocDef=taskAssocs.get(qname);
    if (assocDef != null && assocDef.getTargetClass().equals(ContentModel.TYPE_PERSON)) {
      if (!(value instanceof String[])) {
        throw new WorkflowException(""String_Node_Str"" + qname + ""String_Node_Str"");
      }
      value=mapNameToAuthority((String[])value);
    }
    properties.put(qname,(Serializable)value);
  }
  properties.put(WorkflowModel.PROP_TASK_ID,instance.getId());
  properties.put(WorkflowModel.PROP_START_DATE,instance.getStart());
  properties.put(WorkflowModel.PROP_DUE_DATE,instance.getDueDate());
  properties.put(WorkflowModel.PROP_COMPLETION_DATE,instance.getEnd());
  properties.put(WorkflowModel.PROP_PRIORITY,instance.getPriority());
  properties.put(ContentModel.PROP_OWNER,instance.getActorId());
  Set pooledActors=instance.getPooledActors();
  if (pooledActors != null) {
    String[] pooledActorIds=new String[pooledActors.size()];
    pooledActors.toArray(pooledActorIds);
    List<NodeRef> pooledActorNodeRefs=mapNameToAuthority(pooledActorIds);
    properties.put(WorkflowModel.ASSOC_POOLED_ACTORS,(Serializable)pooledActorNodeRefs);
  }
  return properties;
}","/** 
 * Sets Properties of Task
 * @param instance  task instance
 * @param properties  properties to set
 */
@SuppressWarnings(""String_Node_Str"") protected Map<QName,Serializable> getTaskProperties(TaskInstance instance){
  TypeDefinition taskDef=getAnonymousTaskDefinition(getTaskDefinition(instance.getTask()));
  Map<QName,AssociationDefinition> taskAssocs=taskDef.getAssociations();
  Map<QName,Serializable> properties=new HashMap<QName,Serializable>(10);
  Map<String,Object> vars=instance.getVariablesLocally();
  for (  Entry<String,Object> entry : vars.entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    QName qname=QName.createQName(key,this.namespaceService);
    AssociationDefinition assocDef=taskAssocs.get(qname);
    if (assocDef != null && assocDef.getTargetClass().equals(ContentModel.TYPE_PERSON)) {
      if (value instanceof String[]) {
        value=mapNameToAuthority((String[])value);
      }
 else       if (value instanceof String) {
        value=mapNameToAuthority(new String[]{(String)value});
      }
 else {
        throw new WorkflowException(""String_Node_Str"" + qname + ""String_Node_Str"");
      }
    }
    properties.put(qname,(Serializable)value);
  }
  properties.put(WorkflowModel.PROP_TASK_ID,instance.getId());
  properties.put(WorkflowModel.PROP_START_DATE,instance.getStart());
  properties.put(WorkflowModel.PROP_DUE_DATE,instance.getDueDate());
  properties.put(WorkflowModel.PROP_COMPLETION_DATE,instance.getEnd());
  properties.put(WorkflowModel.PROP_PRIORITY,instance.getPriority());
  properties.put(ContentModel.PROP_OWNER,instance.getActorId());
  Set pooledActors=instance.getPooledActors();
  if (pooledActors != null) {
    String[] pooledActorIds=new String[pooledActors.size()];
    pooledActors.toArray(pooledActorIds);
    List<NodeRef> pooledActorNodeRefs=mapNameToAuthority(pooledActorIds);
    properties.put(WorkflowModel.ASSOC_POOLED_ACTORS,(Serializable)pooledActorNodeRefs);
  }
  return properties;
}",0.9337145827917858
172312,"/** 
 * Sets Properties of Task
 * @param instance  task instance
 * @param properties  properties to set
 */
protected void setTaskProperties(TaskInstance instance,Map<QName,Serializable> properties){
  if (properties == null) {
    return;
  }
  TypeDefinition taskDef=getAnonymousTaskDefinition(getTaskDefinition(instance.getTask()));
  Map<QName,PropertyDefinition> taskProperties=taskDef.getProperties();
  Map<QName,AssociationDefinition> taskAssocs=taskDef.getAssociations();
  for (  Entry<QName,Serializable> entry : properties.entrySet()) {
    QName key=entry.getKey();
    Serializable value=entry.getValue();
    PropertyDefinition propDef=taskProperties.get(key);
    if (propDef != null) {
      if (propDef.isProtected()) {
        continue;
      }
      if (key.equals(WorkflowModel.PROP_DUE_DATE)) {
        if (!(value instanceof Date)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setDueDate((Date)value);
        continue;
      }
 else       if (key.equals(WorkflowModel.PROP_PRIORITY)) {
        if (!(value instanceof Integer)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setPriority((Integer)value);
        continue;
      }
 else       if (key.equals(ContentModel.PROP_OWNER)) {
        if (!(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setActorId((String)value);
        continue;
      }
    }
 else {
      AssociationDefinition assocDef=taskAssocs.get(key);
      if (assocDef != null) {
        if (assocDef.getTargetClass().equals(ContentModel.TYPE_PERSON)) {
          value=mapAuthorityToName((List<NodeRef>)value);
        }
        if (key.equals(WorkflowModel.ASSOC_POOLED_ACTORS)) {
          instance.setPooledActors((String[])value);
          continue;
        }
      }
    }
    String name=null;
    if (key.getNamespaceURI().equals(NamespaceService.DEFAULT_URI)) {
      name=key.getLocalName();
    }
 else {
      name=key.toString();
    }
    instance.setVariableLocally(name,value);
  }
}","/** 
 * Sets Properties of Task
 * @param instance  task instance
 * @param properties  properties to set
 */
protected void setTaskProperties(TaskInstance instance,Map<QName,Serializable> properties){
  if (properties == null) {
    return;
  }
  TypeDefinition taskDef=getAnonymousTaskDefinition(getTaskDefinition(instance.getTask()));
  Map<QName,PropertyDefinition> taskProperties=taskDef.getProperties();
  Map<QName,AssociationDefinition> taskAssocs=taskDef.getAssociations();
  for (  Entry<QName,Serializable> entry : properties.entrySet()) {
    QName key=entry.getKey();
    Serializable value=entry.getValue();
    PropertyDefinition propDef=taskProperties.get(key);
    if (propDef != null) {
      if (propDef.isProtected()) {
        continue;
      }
      if (key.equals(WorkflowModel.PROP_DUE_DATE)) {
        if (!(value instanceof Date)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setDueDate((Date)value);
        continue;
      }
 else       if (key.equals(WorkflowModel.PROP_PRIORITY)) {
        if (!(value instanceof Integer)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setPriority((Integer)value);
        continue;
      }
 else       if (key.equals(ContentModel.PROP_OWNER)) {
        if (!(value instanceof String)) {
          throw new WorkflowException(""String_Node_Str"" + value + ""String_Node_Str"");
        }
        instance.setActorId((String)value);
        continue;
      }
    }
 else {
      AssociationDefinition assocDef=taskAssocs.get(key);
      if (assocDef != null) {
        if (assocDef.getTargetClass().getName().equals(ContentModel.TYPE_PERSON)) {
          String[] authorityNames=mapAuthorityToName((List<NodeRef>)value);
          value=((assocDef.isTargetMany()) ? authorityNames : authorityNames[0]);
        }
        if (key.equals(WorkflowModel.ASSOC_POOLED_ACTORS)) {
          instance.setPooledActors((String[])value);
          continue;
        }
      }
    }
    String name=null;
    if (key.getNamespaceURI().equals(NamespaceService.DEFAULT_URI)) {
      name=key.getLocalName();
    }
 else {
      name=key.toPrefixString(this.namespaceService);
    }
    instance.setVariableLocally(name,value);
  }
}",0.9641664811929668
172313,"/** 
 * Execute the script content from the supplied Reader. Adds the data model into the default root scope for access by the script.
 * @param reader        Reader referencing the script to execute.
 * @param model         Data model containing objects to be added to the root scope.
 * @return result of the script execution, can be null.
 * @throws AlfrescoRuntimeException
 */
private Object executeScriptImpl(Reader reader,Map<String,Object> model) throws AlfrescoRuntimeException {
  Context cx=Context.enter();
  try {
    Scriptable topLevelScope=new ImporterTopLevel(cx);
    Scriptable scope=cx.initStandardObjects();
    scope.setParentScope(topLevelScope);
    if (model != null) {
      for (      String key : model.keySet()) {
        Object jsObject=Context.javaToJS(model.get(key),scope);
        ScriptableObject.putProperty(scope,key,jsObject);
      }
    }
    Object result=cx.evaluateReader(scope,reader,""String_Node_Str"",1,null);
    return result;
  }
 catch (  Throwable err) {
    throw new AlfrescoRuntimeException(err.getMessage(),err);
  }
 finally {
    cx.exit();
  }
}","/** 
 * Execute the script content from the supplied Reader. Adds the data model into the default root scope for access by the script.
 * @param reader        Reader referencing the script to execute.
 * @param model         Data model containing objects to be added to the root scope.
 * @return result of the script execution, can be null.
 * @throws AlfrescoRuntimeException
 */
private Object executeScriptImpl(Reader reader,Map<String,Object> model) throws AlfrescoRuntimeException {
  long startTime=0;
  if (logger.isDebugEnabled()) {
    startTime=System.currentTimeMillis();
  }
  Context cx=Context.enter();
  try {
    Scriptable topLevelScope=new ImporterTopLevel(cx);
    Scriptable scope=cx.initStandardObjects();
    scope.setParentScope(topLevelScope);
    if (model != null) {
      for (      String key : model.keySet()) {
        Object jsObject=Context.javaToJS(model.get(key),scope);
        ScriptableObject.putProperty(scope,key,jsObject);
      }
    }
    Object result=cx.evaluateReader(scope,reader,""String_Node_Str"",1,null);
    return result;
  }
 catch (  Throwable err) {
    throw new AlfrescoRuntimeException(err.getMessage(),err);
  }
 finally {
    cx.exit();
    if (logger.isDebugEnabled()) {
      long endTime=System.currentTimeMillis();
      logger.debug(""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
    }
  }
}",0.8908649959579629
172314,"/** 
 * @see org.alfresco.service.cmr.repository.TemplateProcessor#process(java.lang.String,java.lang.Object,java.io.Writer)
 */
public void process(String template,Object model,Writer out){
  if (template == null || template.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (model == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (out == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + template + ""String_Node_Str""+ model);
    Template t=getConfig().getTemplate(template);
    if (t != null) {
      try {
        t.process(model,out);
      }
 catch (      Throwable err) {
        throw new TemplateException(MSG_ERROR_TEMPLATE_FAIL,new Object[]{err.getMessage()},err);
      }
    }
 else {
      throw new TemplateException(MSG_ERROR_NO_TEMPLATE,new Object[]{template});
    }
  }
 catch (  IOException ioerr) {
    throw new TemplateException(MSG_ERROR_TEMPLATE_IO,new Object[]{template},ioerr);
  }
}","/** 
 * @see org.alfresco.service.cmr.repository.TemplateProcessor#process(java.lang.String,java.lang.Object,java.io.Writer)
 */
public void process(String template,Object model,Writer out){
  if (template == null || template.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (model == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (out == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    long startTime=0;
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + template);
      startTime=System.currentTimeMillis();
    }
    Template t=getConfig().getTemplate(template);
    if (t != null) {
      try {
        t.process(model,out);
      }
 catch (      Throwable err) {
        throw new TemplateException(MSG_ERROR_TEMPLATE_FAIL,new Object[]{err.getMessage()},err);
      }
    }
 else {
      throw new TemplateException(MSG_ERROR_NO_TEMPLATE,new Object[]{template});
    }
    if (logger.isDebugEnabled()) {
      long endTime=System.currentTimeMillis();
      logger.debug(""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
    }
  }
 catch (  IOException ioerr) {
    throw new TemplateException(MSG_ERROR_TEMPLATE_IO,new Object[]{template},ioerr);
  }
}",0.8843881856540085
172315,"private Configuration getStringConfig(String path,String template){
  Configuration config=new Configuration();
  config.setCacheStorage(new MruCacheStorage(20,0));
  StringTemplateLoader stringTemplateLoader=new StringTemplateLoader();
  stringTemplateLoader.putTemplate(path,template);
  config.setTemplateLoader(stringTemplateLoader);
  config.setObjectWrapper(new QNameAwareObjectWrapper());
  config.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
  return config;
}","/** 
 * FreeMarker configuration for loading the specified template directly from a String
 * @param path      Pseudo Path to the template
 * @param template  Template content
 * @return FreeMarker configuration
 */
private Configuration getStringConfig(String path,String template){
  Configuration config=new Configuration();
  StringTemplateLoader stringTemplateLoader=new StringTemplateLoader();
  stringTemplateLoader.putTemplate(path,template);
  config.setTemplateLoader(stringTemplateLoader);
  config.setObjectWrapper(new QNameAwareObjectWrapper());
  config.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
  return config;
}",0.7662901824500434
172316,"public void processString(String template,Object model,Writer out){
  if (template == null || template.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (model == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (out == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + template + ""String_Node_Str""+ model);
    Template t=getStringConfig(PATH,template).getTemplate(PATH);
    if (t != null) {
      try {
        t.process(model,out);
      }
 catch (      Throwable err) {
        throw new TemplateException(MSG_ERROR_TEMPLATE_FAIL,new Object[]{err.getMessage()},err);
      }
    }
 else {
      throw new TemplateException(MSG_ERROR_NO_TEMPLATE,new Object[]{template});
    }
  }
 catch (  IOException ioerr) {
    throw new TemplateException(MSG_ERROR_TEMPLATE_IO,new Object[]{template},ioerr);
  }
}","/** 
 * @see org.alfresco.service.cmr.repository.TemplateProcessor#processString(java.lang.String,java.lang.Object,java.io.Writer)
 */
public void processString(String template,Object model,Writer out){
  if (template == null || template.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (model == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (out == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    long startTime=0;
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + template);
      startTime=System.currentTimeMillis();
    }
    Template t=getStringConfig(PATH,template).getTemplate(PATH);
    if (t != null) {
      try {
        t.process(model,out);
        if (logger.isDebugEnabled()) {
          long endTime=System.currentTimeMillis();
          logger.debug(""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
        }
      }
 catch (      Throwable err) {
        throw new TemplateException(MSG_ERROR_TEMPLATE_FAIL,new Object[]{err.getMessage()},err);
      }
    }
 else {
      throw new TemplateException(MSG_ERROR_NO_TEMPLATE,new Object[]{template});
    }
  }
 catch (  IOException ioerr) {
    throw new TemplateException(MSG_ERROR_TEMPLATE_IO,new Object[]{template},ioerr);
  }
}",0.8156182212581344
172317,"/** 
 * @return The FreeMarker config instance for this processor
 */
private Configuration getConfig(){
  if (this.config == null) {
    Configuration config=new Configuration();
    config.setCacheStorage(new MruCacheStorage(20,0));
    config.setTemplateLoader(new ClassPathRepoTemplateLoader(nodeService,contentService));
    config.setObjectWrapper(new QNameAwareObjectWrapper());
    config.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    this.config=config;
  }
  return this.config;
}","/** 
 * Get the FreeMarker configuration for this instance
 * @return FreeMarker configuration
 */
private Configuration getConfig(){
  if (this.config == null) {
    Configuration config=new Configuration();
    config.setCacheStorage(new MruCacheStorage(20,0));
    config.setTemplateLoader(new ClassPathRepoTemplateLoader(nodeService,contentService));
    config.setObjectWrapper(new QNameAwareObjectWrapper());
    config.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    this.config=config;
  }
  return this.config;
}",0.9128397375820057
172318,"/** 
 * Return the TemplateProcessor implementation for the named template engine
 * @param name      Template Engine name
 * @return TemplateProcessor
 */
private TemplateProcessor getTemplateProcessorImpl(String name){
  Map<String,TemplateProcessor> procMap=processors.get();
  if (procMap == null) {
    procMap=new HashMap<String,TemplateProcessor>(7,1.0f);
    processors.set(procMap);
  }
  if (name == null) {
    name=defaultTemplateEngine;
  }
  TemplateProcessor processor=procMap.get(name);
  if (processor == null) {
    String className=templateEngines.get(name);
    if (className == null) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + name);
    }
    try {
      Object obj;
      try {
        obj=this.applicationContext.getBean(className);
      }
 catch (      BeansException err) {
        obj=Class.forName(className).newInstance();
      }
      if (obj instanceof TemplateProcessor) {
        processor=(TemplateProcessor)obj;
      }
 else {
        throw new AlfrescoRuntimeException(""String_Node_Str"" + className);
      }
    }
 catch (    ClassNotFoundException err1) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + className,err1);
    }
catch (    IllegalAccessException err2) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + className,err2);
    }
catch (    InstantiationException err3) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + className,err3);
    }
    procMap.put(name,processor);
  }
  return processor;
}","/** 
 * Return the TemplateProcessor implementation for the named template engine
 * @param name      Template Engine name
 * @return TemplateProcessor
 */
private TemplateProcessor getTemplateProcessorImpl(String name){
  Map<String,TemplateProcessor> procMap=processors.get();
  if (procMap == null) {
    procMap=new HashMap<String,TemplateProcessor>(2,1.0f);
    processors.set(procMap);
  }
  if (name == null) {
    name=defaultTemplateEngine;
  }
  TemplateProcessor processor=procMap.get(name);
  if (processor == null) {
    String className=templateEngines.get(name);
    if (className == null) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + name);
    }
    try {
      Object obj;
      try {
        obj=this.applicationContext.getBean(className);
      }
 catch (      BeansException err) {
        obj=Class.forName(className).newInstance();
      }
      if (obj instanceof TemplateProcessor) {
        processor=(TemplateProcessor)obj;
      }
 else {
        throw new AlfrescoRuntimeException(""String_Node_Str"" + className);
      }
    }
 catch (    ClassNotFoundException err1) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + className,err1);
    }
catch (    IllegalAccessException err2) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + className,err2);
    }
catch (    InstantiationException err3) {
      throw new AlfrescoRuntimeException(""String_Node_Str"" + className,err3);
    }
    procMap.put(name,processor);
  }
  return processor;
}",0.99933818663137
172319,"public String processTemplateString(String engine,String template,Object model) throws TemplateException {
  Writer out=new StringWriter(1024);
  processTemplateString(engine,template,model,out);
  return out.toString();
}","/** 
 * @see org.alfresco.service.cmr.repository.TemplateService#processTemplateString(java.lang.String,java.lang.String,java.lang.Object)
 */
public String processTemplateString(String engine,String template,Object model) throws TemplateException {
  Writer out=new StringWriter(1024);
  processTemplateString(engine,template,model,out);
  return out.toString();
}",0.7563884156729132
172320,"public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    Double d=Double.valueOf(candidate.termText());
    String valueString=NumericEncoder.encode(d.doubleValue());
    Token doubleToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
    return doubleToken;
  }
  return null;
}","public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    try {
      Double d=Double.valueOf(candidate.termText());
      String valueString=NumericEncoder.encode(d.doubleValue());
      Token doubleToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
      return doubleToken;
    }
 catch (    NumberFormatException e) {
    }
  }
  return null;
}",0.8355342136854742
172321,"public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    Float floatValue=Float.valueOf(candidate.termText());
    String valueString=NumericEncoder.encode(floatValue.floatValue());
    Token floatToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
    return floatToken;
  }
  return null;
}","public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    try {
      Float floatValue=Float.valueOf(candidate.termText());
      String valueString=NumericEncoder.encode(floatValue.floatValue());
      Token floatToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
      return floatToken;
    }
 catch (    NumberFormatException e) {
    }
  }
  return null;
}",0.8428405122235157
172322,"public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    Integer integer=Integer.valueOf(candidate.termText());
    String valueString=NumericEncoder.encode(integer.intValue());
    Token integerToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
    return integerToken;
  }
  return null;
}","public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    try {
      Integer integer=Integer.valueOf(candidate.termText());
      String valueString=NumericEncoder.encode(integer.intValue());
      Token integerToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
      return integerToken;
    }
 catch (    NumberFormatException e) {
    }
  }
  return null;
}",0.8381839348079162
172323,"public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    Long longValue=Long.valueOf(candidate.termText());
    String valueString=NumericEncoder.encode(longValue.longValue());
    Token longToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
    return longToken;
  }
  return null;
}","public Token next() throws IOException {
  Token candidate;
  while ((candidate=baseTokeniser.next()) != null) {
    try {
      Long longValue=Long.valueOf(candidate.termText());
      String valueString=NumericEncoder.encode(longValue.longValue());
      Token longToken=new Token(valueString,candidate.startOffset(),candidate.startOffset(),candidate.type());
      return longToken;
    }
 catch (    NumberFormatException e) {
    }
  }
  return null;
}",0.842603550295858
172324,"/** 
 * Copy like constructor.
 * @param other The other directory.
 * @param repos The Repository Object that will own us.
 */
@SuppressWarnings(""String_Node_Str"") public PlainDirectoryNodeImpl(PlainDirectoryNode other,Repository repos){
  super(repos.getSuperRepository().issueID(),repos);
  Session sess=repos.getSuperRepository().getSession();
  sess.save(this);
  for (  ChildEntry child : other.getChildren()) {
    ChildEntry newChild=new ChildEntryImpl(child.getName(),this,child.getChild());
    sess.save(newChild);
  }
}","/** 
 * Copy like constructor.
 * @param other The other directory.
 * @param repos The Repository Object that will own us.
 */
@SuppressWarnings(""String_Node_Str"") public PlainDirectoryNodeImpl(PlainDirectoryNode other,Repository repos){
  super(repos.getSuperRepository().issueID(),repos);
  Session sess=repos.getSuperRepository().getSession();
  sess.save(this);
  sess.flush();
  for (  ChildEntry child : other.getChildren()) {
    ChildEntry newChild=new ChildEntryImpl(child.getName(),this,child.getChild());
    sess.save(newChild);
    sess.flush();
  }
}",0.968978102189781
172325,"/** 
 * Put a new child node into this directory.  No copy.
 * @param name The name of the child.
 * @param node The node to add.
 */
public void putChild(String name,AVMNode node){
  Session sess=SuperRepository.GetInstance().getSession();
  sess.flush();
  ChildEntry entry=new ChildEntryImpl(name,this,node);
  ChildEntry existing=(ChildEntry)sess.get(ChildEntryImpl.class,(Serializable)entry);
  if (existing != null) {
    existing.setChild(node);
  }
 else {
    sess.save(entry);
  }
}","/** 
 * Put a new child node into this directory.  No copy.
 * @param name The name of the child.
 * @param node The node to add.
 */
public void putChild(String name,AVMNode node){
  Session sess=SuperRepository.GetInstance().getSession();
  ChildEntry entry=new ChildEntryImpl(name,this,node);
  ChildEntry existing=(ChildEntry)sess.get(ChildEntryImpl.class,(Serializable)entry);
  if (existing != null) {
    existing.setChild(node);
  }
 else {
    sess.save(entry);
  }
}",0.9834710743801652
172326,"/** 
 * Perform a set of operations under a single Hibernate transaction. Keep trying if the operation fails because of a concurrency issue.
 * @param callback The worker.
 * @param write Whether this is a write operation.
 * @return Whether the operation finished with a commit.
 */
public void perform(HibernateTxnCallback callback,boolean write){
  Session sess=null;
  Transaction txn=null;
  while (true) {
    try {
      sess=fSessionFactory.openSession();
      txn=sess.beginTransaction();
      callback.perform(sess);
      txn.commit();
      return;
    }
 catch (    Throwable t) {
      if (txn != null) {
        try {
          txn.rollback();
        }
 catch (        HibernateException he) {
        }
        if (t instanceof StaleStateException || t instanceof GenericJDBCException || t instanceof LockAcquisitionException) {
          if (t instanceof StaleStateException) {
            System.err.println(""String_Node_Str"");
            StackTraceElement[] stack=t.getStackTrace();
            long threadID=Thread.currentThread().getId();
            for (            StackTraceElement frame : stack) {
              System.err.println(threadID + ""String_Node_Str"" + frame);
            }
          }
 else {
            System.err.println(""String_Node_Str"");
            StackTraceElement[] stack=t.getStackTrace();
            long threadID=Thread.currentThread().getId();
            for (            StackTraceElement frame : stack) {
              System.err.println(threadID + ""String_Node_Str"" + frame);
            }
            try {
              long interval;
synchronized (fRandom) {
                interval=fRandom.nextInt(1000);
              }
              Thread.sleep(interval);
              continue;
            }
 catch (            InterruptedException ie) {
            }
          }
          continue;
        }
      }
      if (t instanceof AVMException) {
        throw (AVMException)t;
      }
      throw new AVMException(""String_Node_Str"",t);
    }
 finally {
      if (sess != null) {
        try {
          sess.close();
        }
 catch (        HibernateException he) {
        }
      }
    }
  }
}","/** 
 * Perform a set of operations under a single Hibernate transaction. Keep trying if the operation fails because of a concurrency issue.
 * @param callback The worker.
 * @param write Whether this is a write operation.
 * @return Whether the operation finished with a commit.
 */
public void perform(HibernateTxnCallback callback,boolean write){
  Session sess=null;
  Transaction txn=null;
  while (true) {
    try {
      sess=fSessionFactory.openSession();
      sess.setFlushMode(FlushMode.ALWAYS);
      txn=sess.beginTransaction();
      callback.perform(sess);
      txn.commit();
      return;
    }
 catch (    Throwable t) {
      if (txn != null) {
        try {
          txn.rollback();
        }
 catch (        HibernateException he) {
        }
        if (t instanceof StaleStateException || t instanceof GenericJDBCException || t instanceof LockAcquisitionException) {
          if (t instanceof StaleStateException) {
            System.err.println(""String_Node_Str"");
          }
 else {
            System.err.println(""String_Node_Str"");
            try {
              long interval;
synchronized (fRandom) {
                interval=fRandom.nextInt(1000);
              }
              Thread.sleep(interval);
              continue;
            }
 catch (            InterruptedException ie) {
            }
          }
          continue;
        }
      }
      if (t instanceof AVMException) {
        throw (AVMException)t;
      }
      throw new AVMException(""String_Node_Str"",t);
    }
 finally {
      if (sess != null) {
        try {
          sess.close();
        }
 catch (        HibernateException he) {
        }
      }
    }
  }
}",0.8444907528002084
172327,"public NodePermissionEntry getPermissions(NodeRef nodeRef){
  NodePermissionEntry npe=null;
  DbAccessControlList acl=null;
  Node node=getNode(nodeRef,false);
  if (node != null) {
    acl=getAccessControlList(node,false);
  }
  if (acl == null) {
    SimpleNodePermissionEntry snpe=new SimpleNodePermissionEntry(nodeRef,true,Collections.<SimplePermissionEntry>emptySet());
    npe=snpe;
  }
 else {
    npe=createSimpleNodePermissionEntry(node);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + nodeRef);
  }
  return npe;
}","public NodePermissionEntry getPermissions(NodeRef nodeRef){
  NodePermissionEntry npe=null;
  DbAccessControlList acl=null;
  Node node=getNode(nodeRef,false);
  if (node != null) {
    acl=getAccessControlList(node,false);
  }
  if (acl == null) {
    SimpleNodePermissionEntry snpe=new SimpleNodePermissionEntry(nodeRef,true,Collections.<SimplePermissionEntry>emptySet());
    npe=snpe;
  }
 else {
    npe=createSimpleNodePermissionEntry(node);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + nodeRef + ""String_Node_Str""+ ""String_Node_Str""+ npe);
  }
  return npe;
}",0.9451114922813036
172328,"/** 
 * Parse and validate the parameter string and create a device context object for this instance of the shared device. The same DeviceInterface implementation may be used for multiple shares.
 * @param args ConfigElement
 * @return DeviceContext
 * @exception DeviceContextException
 */
public DeviceContext createContext(ConfigElement cfg) throws DeviceContextException {
  authComponent.setCurrentUser(authComponent.getSystemUserName());
  UserTransaction tx=transactionService.getUserTransaction(true);
  ContentContext context=null;
  try {
    if (tx != null)     tx.begin();
    ConfigElement storeElement=cfg.getChild(KEY_STORE);
    if (storeElement == null || storeElement.getValue() == null || storeElement.getValue().length() == 0) {
      throw new DeviceContextException(""String_Node_Str"" + KEY_STORE);
    }
    String storeValue=storeElement.getValue();
    StoreRef storeRef=new StoreRef(storeValue);
    if (!nodeService.exists(storeRef)) {
      throw new DeviceContextException(""String_Node_Str"" + storeRef);
    }
    NodeRef storeRootNodeRef=nodeService.getRootNode(storeRef);
    ConfigElement rootPathElement=cfg.getChild(KEY_ROOT_PATH);
    if (rootPathElement == null || rootPathElement.getValue() == null || rootPathElement.getValue().length() == 0) {
      throw new DeviceContextException(""String_Node_Str"" + KEY_ROOT_PATH);
    }
    String rootPath=rootPathElement.getValue();
    List<NodeRef> nodeRefs=searchService.selectNodes(storeRootNodeRef,rootPath,null,namespaceService,false);
    NodeRef rootNodeRef=null;
    if (nodeRefs.size() > 1) {
      throw new DeviceContextException(""String_Node_Str"" + ""String_Node_Str"" + rootPath + ""String_Node_Str""+ ""String_Node_Str""+ nodeRefs);
    }
 else     if (nodeRefs.size() == 0) {
      throw new DeviceContextException(""String_Node_Str"" + ""String_Node_Str"" + rootPath);
    }
 else {
      rootNodeRef=nodeRefs.get(0);
    }
    ConfigElement relativePathElement=cfg.getChild(KEY_RELATIVE_PATH);
    if (relativePathElement != null) {
      String relPath=relativePathElement.getValue().replace('/',FileName.DOS_SEPERATOR);
      NodeRef relPathNode=cifsHelper.getNodeRef(rootNodeRef,relPath);
      if (cifsHelper.isDirectory(relPathNode) == false)       throw new DeviceContextException(""String_Node_Str"" + relativePathElement.getValue());
      rootNodeRef=relPathNode;
    }
    tx.commit();
    tx=null;
    context=new ContentContext(storeValue,rootPath,rootNodeRef);
    context.setDiskInformation(new SrvDiskInfo(2560,64,512,2304));
    context.setFilesystemAttributes(FileSystem.CasePreservedNames);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
  }
 finally {
    if (tx != null) {
      try {
        tx.rollback();
      }
 catch (      Exception ex) {
        logger.warn(""String_Node_Str"",ex);
      }
    }
  }
  try {
    Object ioctlObj=Class.forName(""String_Node_Str"").newInstance();
    if (ioctlObj instanceof IOControlHandler) {
      m_ioHandler=(IOControlHandler)ioctlObj;
      m_ioHandler.initialize(this,cifsHelper,transactionService,nodeService,checkInOutService);
    }
    if (m_ioHandler != null) {
      ConfigElement dragDropElem=cfg.getChild(""String_Node_Str"");
      if (dragDropElem != null) {
        ConfigElement pseudoName=dragDropElem.getChild(""String_Node_Str"");
        ConfigElement appPath=dragDropElem.getChild(""String_Node_Str"");
        if (pseudoName != null && appPath != null) {
          URL appURL=this.getClass().getClassLoader().getResource(appPath.getValue());
          if (appURL == null)           throw new DeviceContextException(""String_Node_Str"" + appPath.getValue());
          File appFile=new File(appURL.getFile());
          if (appFile.exists() == false)           throw new DeviceContextException(""String_Node_Str"" + appPath.getValue());
          PseudoFile dragDropPseudo=new LocalPseudoFile(pseudoName.getValue(),appFile.getAbsolutePath());
          context.setDragAndDropApp(dragDropPseudo);
        }
      }
    }
  }
 catch (  Exception ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"");
  }
  ConfigElement urlFileElem=cfg.getChild(""String_Node_Str"");
  if (urlFileElem != null) {
    ConfigElement pseudoName=urlFileElem.getChild(""String_Node_Str"");
    ConfigElement webPath=urlFileElem.getChild(""String_Node_Str"");
    if (pseudoName != null && webPath != null) {
      String path=webPath.getValue();
      if (path.endsWith(""String_Node_Str"") == false)       path=path + ""String_Node_Str"";
      if (pseudoName.getValue().endsWith(""String_Node_Str"") == false)       throw new DeviceContextException(""String_Node_Str"" + pseudoName.getValue());
      context.setURLFileName(pseudoName.getValue());
      context.setURLPrefix(path);
    }
  }
  if (context.hasDragAndDropApp() || context.hasURLFile()) {
    m_pseudoFiles=new ContentPseudoFileImpl();
  }
  ConfigElement offlineFiles=cfg.getChild(""String_Node_Str"");
  if (offlineFiles != null) {
    cifsHelper.setMarkLockedFilesAsOffline(true);
    logger.info(""String_Node_Str"");
  }
  return context;
}","/** 
 * Parse and validate the parameter string and create a device context object for this instance of the shared device. The same DeviceInterface implementation may be used for multiple shares.
 * @param args ConfigElement
 * @return DeviceContext
 * @exception DeviceContextException
 */
public DeviceContext createContext(ConfigElement cfg) throws DeviceContextException {
  authComponent.setCurrentUser(authComponent.getSystemUserName());
  UserTransaction tx=transactionService.getUserTransaction(true);
  ContentContext context=null;
  try {
    if (tx != null)     tx.begin();
    ConfigElement storeElement=cfg.getChild(KEY_STORE);
    if (storeElement == null || storeElement.getValue() == null || storeElement.getValue().length() == 0) {
      throw new DeviceContextException(""String_Node_Str"" + KEY_STORE);
    }
    String storeValue=storeElement.getValue();
    StoreRef storeRef=new StoreRef(storeValue);
    if (!nodeService.exists(storeRef)) {
      throw new DeviceContextException(""String_Node_Str"" + storeRef);
    }
    NodeRef storeRootNodeRef=nodeService.getRootNode(storeRef);
    ConfigElement rootPathElement=cfg.getChild(KEY_ROOT_PATH);
    if (rootPathElement == null || rootPathElement.getValue() == null || rootPathElement.getValue().length() == 0) {
      throw new DeviceContextException(""String_Node_Str"" + KEY_ROOT_PATH);
    }
    String rootPath=rootPathElement.getValue();
    List<NodeRef> nodeRefs=searchService.selectNodes(storeRootNodeRef,rootPath,null,namespaceService,false);
    NodeRef rootNodeRef=null;
    if (nodeRefs.size() > 1) {
      throw new DeviceContextException(""String_Node_Str"" + ""String_Node_Str"" + rootPath + ""String_Node_Str""+ ""String_Node_Str""+ nodeRefs);
    }
 else     if (nodeRefs.size() == 0) {
      throw new DeviceContextException(""String_Node_Str"" + ""String_Node_Str"" + rootPath);
    }
 else {
      rootNodeRef=nodeRefs.get(0);
    }
    ConfigElement relativePathElement=cfg.getChild(KEY_RELATIVE_PATH);
    if (relativePathElement != null) {
      String relPath=relativePathElement.getValue().replace('/',FileName.DOS_SEPERATOR);
      NodeRef relPathNode=cifsHelper.getNodeRef(rootNodeRef,relPath);
      if (cifsHelper.isDirectory(relPathNode) == false)       throw new DeviceContextException(""String_Node_Str"" + relativePathElement.getValue());
      rootNodeRef=relPathNode;
    }
    tx.commit();
    tx=null;
    context=new ContentContext(storeValue,rootPath,rootNodeRef);
    context.setDiskInformation(new SrvDiskInfo(2560000,64,512,2304000));
    context.setFilesystemAttributes(FileSystem.CasePreservedNames);
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
  }
 finally {
    if (tx != null) {
      try {
        tx.rollback();
      }
 catch (      Exception ex) {
        logger.warn(""String_Node_Str"",ex);
      }
    }
  }
  ConfigElement dragDropElem=cfg.getChild(""String_Node_Str"");
  if (dragDropElem != null) {
    ConfigElement pseudoName=dragDropElem.getChild(""String_Node_Str"");
    ConfigElement appPath=dragDropElem.getChild(""String_Node_Str"");
    if (pseudoName != null && appPath != null) {
      URL appURL=this.getClass().getClassLoader().getResource(appPath.getValue());
      if (appURL == null)       throw new DeviceContextException(""String_Node_Str"" + appPath.getValue());
      File appFile=new File(appURL.getFile());
      if (appFile.exists() == false)       throw new DeviceContextException(""String_Node_Str"" + appPath.getValue());
      PseudoFile dragDropPseudo=new LocalPseudoFile(pseudoName.getValue(),appFile.getAbsolutePath());
      context.setDragAndDropApp(dragDropPseudo);
    }
    try {
      m_ioHandler=new ContentIOControlHandler();
      m_ioHandler.initialize(this,cifsHelper,transactionService,nodeService,checkInOutService);
    }
 catch (    Exception ex) {
      logger.error(""String_Node_Str"",ex);
      throw new DeviceContextException(""String_Node_Str"");
    }
  }
  ConfigElement urlFileElem=cfg.getChild(""String_Node_Str"");
  if (urlFileElem != null) {
    ConfigElement pseudoName=urlFileElem.getChild(""String_Node_Str"");
    ConfigElement webPath=urlFileElem.getChild(""String_Node_Str"");
    if (pseudoName != null && webPath != null) {
      String path=webPath.getValue();
      if (path.endsWith(""String_Node_Str"") == false)       path=path + ""String_Node_Str"";
      if (pseudoName.getValue().endsWith(""String_Node_Str"") == false)       throw new DeviceContextException(""String_Node_Str"" + pseudoName.getValue());
      context.setURLFileName(pseudoName.getValue());
      context.setURLPrefix(path);
    }
  }
  if (context.hasDragAndDropApp() || context.hasURLFile()) {
    m_pseudoFiles=new ContentPseudoFileImpl();
  }
  ConfigElement offlineFiles=cfg.getChild(""String_Node_Str"");
  if (offlineFiles != null) {
    cifsHelper.setMarkLockedFilesAsOffline(true);
    logger.info(""String_Node_Str"");
  }
  return context;
}",0.8852985449071751
172329,"public Node newNode(Store store,String uuid,QName nodeTypeQName) throws InvalidTypeException {
  NodeKey key=new NodeKey(store.getKey(),uuid);
  Node node=new NodeImpl();
  node.setStore(store);
  node.setUuid(uuid);
  node.setTypeQName(nodeTypeQName);
  getHibernateTemplate().save(node);
  NodeStatus status=(NodeStatus)getHibernateTemplate().get(NodeStatusImpl.class,key);
  if (status == null) {
    status=new NodeStatusImpl();
    status.setKey(key);
  }
  status.setNode(node);
  status.setChangeTxnId(AlfrescoTransactionSupport.getTransactionId());
  getHibernateTemplate().save(status);
  return node;
}","public Node newNode(Store store,String uuid,QName nodeTypeQName) throws InvalidTypeException {
  NodeKey key=new NodeKey(store.getKey(),uuid);
  NodeStatus status=(NodeStatus)getHibernateTemplate().get(NodeStatusImpl.class,key);
  if (status == null) {
    status=new NodeStatusImpl();
    status.setKey(key);
  }
 else {
    if (status.getChangeTxnId().equals(AlfrescoTransactionSupport.getTransactionId())) {
      getHibernateTemplate().flush();
    }
  }
  Node node=new NodeImpl();
  node.setStore(store);
  node.setUuid(uuid);
  node.setTypeQName(nodeTypeQName);
  getHibernateTemplate().save(node);
  status.setNode(node);
  status.setChangeTxnId(AlfrescoTransactionSupport.getTransactionId());
  getHibernateTemplate().save(status);
  return node;
}",0.6281957633308984
172330,"public void flushPending() throws LuceneIndexException {
  IndexReader mainReader=null;
  try {
    mainReader=getReader();
    Set<NodeRef> forIndex=new LinkedHashSet<NodeRef>();
    for (    Command command : commandList) {
      if (command.action == Action.INDEX) {
        forIndex.add(command.nodeRef);
      }
 else       if (command.action == Action.REINDEX) {
        Set<NodeRef> set=deleteImpl(command.nodeRef,true,false,mainReader);
        forIndex.removeAll(set);
        forIndex.addAll(set);
      }
 else       if (command.action == Action.CASCADEREINDEX) {
        Set<NodeRef> set=deleteImpl(command.nodeRef,true,true,mainReader);
        forIndex.removeAll(set);
        forIndex.addAll(set);
      }
 else       if (command.action == Action.DELETE) {
        Set<NodeRef> set=deleteImpl(command.nodeRef,false,true,mainReader);
        forIndex.removeAll(set);
      }
    }
    commandList.clear();
    indexImpl(forIndex,false);
  }
  finally {
    if (mainReader != null) {
      try {
        mainReader.close();
      }
 catch (      IOException e) {
        throw new LuceneIndexException(""String_Node_Str"",e);
      }
    }
    closeDeltaWriter();
  }
}","public void flushPending() throws LuceneIndexException {
  IndexReader mainReader=null;
  try {
    mainReader=getReader();
    Set<NodeRef> forIndex=new LinkedHashSet<NodeRef>();
    for (    Command command : commandList) {
      if (command.action == Action.INDEX) {
        forIndex.add(command.nodeRef);
      }
 else       if (command.action == Action.REINDEX) {
        Set<NodeRef> set=deleteImpl(command.nodeRef,true,false,mainReader);
        forIndex.removeAll(set);
        forIndex.addAll(set);
      }
 else       if (command.action == Action.CASCADEREINDEX) {
        Set<NodeRef> set=deleteImpl(command.nodeRef,true,true,mainReader);
        forIndex.removeAll(set);
        forIndex.addAll(set);
      }
 else       if (command.action == Action.DELETE) {
        Set<NodeRef> set=deleteImpl(command.nodeRef,false,true,mainReader);
        forIndex.removeAll(set);
      }
    }
    commandList.clear();
    indexImpl(forIndex,false);
  }
  finally {
    if (mainReader != null) {
      try {
        mainReader.close();
      }
 catch (      IOException e) {
        throw new LuceneIndexException(""String_Node_Str"",e);
      }
    }
    closeDeltaReader();
    closeDeltaWriter();
  }
}",0.9899328859060402
172331,"public void testReadAgainstDelta() throws Exception {
  testTX.commit();
  UserTransaction tx=transactionService.getUserTransaction();
  tx.begin();
  luceneFTS.pause();
  buildBaseIndex();
  runBaseTests();
  tx.commit();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  serviceRegistry.getNodeService().deleteNode(n1);
  SearchParameters sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  ResultSet results=serviceRegistry.getSearchService().query(sp);
  assertEquals(5,results.length());
  results.close();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  assertEquals(5,serviceRegistry.getNodeService().getChildAssocs(rootNodeRef).size());
  serviceRegistry.getNodeService().createNode(rootNodeRef,ContentModel.ASSOC_CHILDREN,QName.createQName(""String_Node_Str""),testSuperType).getChildRef();
  assertEquals(6,serviceRegistry.getNodeService().getChildAssocs(rootNodeRef).size());
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(16,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(2,results.length());
  results.close();
  nodeService.setProperty(n1,QName.createQName(""String_Node_Str""),""String_Node_Str"");
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(1,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  sp.addSort(""String_Node_Str"",true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(2,results.length());
  results.close();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  serviceRegistry.getNodeService().deleteNode(n1);
  serviceRegistry.getNodeService().createNode(rootNodeRef,ContentModel.ASSOC_CHILDREN,QName.createQName(""String_Node_Str""),testSuperType).getChildRef();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(6,results.length());
  results.close();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
}","public void testReadAgainstDelta() throws Exception {
  testTX.commit();
  UserTransaction tx=transactionService.getUserTransaction();
  tx.begin();
  luceneFTS.pause();
  buildBaseIndex();
  runBaseTests();
  tx.commit();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  serviceRegistry.getNodeService().deleteNode(n1);
  SearchParameters sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  ResultSet results=serviceRegistry.getSearchService().query(sp);
  assertEquals(5,results.length());
  results.close();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  assertEquals(5,serviceRegistry.getNodeService().getChildAssocs(rootNodeRef).size());
  serviceRegistry.getNodeService().createNode(rootNodeRef,ContentModel.ASSOC_CHILDREN,QName.createQName(""String_Node_Str""),testSuperType).getChildRef();
  assertEquals(6,serviceRegistry.getNodeService().getChildAssocs(rootNodeRef).size());
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(16,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(2,results.length());
  results.close();
  nodeService.setProperty(n1,QName.createQName(""String_Node_Str""),""String_Node_Str"");
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(1,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  sp.addSort(""String_Node_Str"",true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(2,results.length());
  results.close();
  tx=transactionService.getUserTransaction();
  tx.begin();
  runBaseTests();
  serviceRegistry.getNodeService().deleteNode(n1);
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(5,results.length());
  results.close();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  NodeRef created=serviceRegistry.getNodeService().createNode(rootNodeRef,ContentModel.ASSOC_CHILDREN,QName.createQName(""String_Node_Str""),testSuperType).getChildRef();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(6,results.length());
  results.close();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  serviceRegistry.getNodeService().deleteNode(created);
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(5,results.length());
  results.close();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.excludeDataInTheCurrentTransaction(true);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
  tx.rollback();
  sp=new SearchParameters();
  sp.addStore(rootNodeRef.getStoreRef());
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"");
  sp.addSort(""String_Node_Str"",true);
  sp.excludeDataInTheCurrentTransaction(false);
  results=serviceRegistry.getSearchService().query(sp);
  assertEquals(15,results.length());
  results.close();
}",0.8775727466288148
172332,"public void setUp() throws Exception {
  DictionaryDAO dictionaryDao=(DictionaryDAO)ctx.getBean(""String_Node_Str"");
  ClassLoader cl=BaseNodeServiceTest.class.getClassLoader();
  InputStream modelStream=cl.getResourceAsStream(""String_Node_Str"");
  assertNotNull(modelStream);
  M2Model model=M2Model.createModel(modelStream);
  dictionaryDao.putModel(model);
  tagger=(IncompleteNodeTagger)ctx.getBean(""String_Node_Str"");
  serviceRegistry=(ServiceRegistry)ctx.getBean(ServiceRegistry.SERVICE_REGISTRY);
  nodeService=serviceRegistry.getNodeService();
  this.authenticationComponent=(AuthenticationComponent)ctx.getBean(""String_Node_Str"");
  this.authenticationComponent.setSystemUserAsCurrentUser();
  TransactionService transactionService=serviceRegistry.getTransactionService();
  txn=transactionService.getUserTransaction();
  txn.begin();
  StoreRef storeRef=new StoreRef(StoreRef.PROTOCOL_WORKSPACE,getName());
  if (!nodeService.exists(storeRef)) {
    nodeService.createStore(storeRef.getProtocol(),storeRef.getIdentifier());
  }
  rootNodeRef=nodeService.getRootNode(storeRef);
  properties=new PropertyMap();
  properties.put(IntegrityTest.TEST_PROP_TEXT_C,""String_Node_Str"");
}","public void setUp() throws Exception {
  DictionaryDAO dictionaryDao=(DictionaryDAO)IntegrityTest.ctx.getBean(""String_Node_Str"");
  ClassLoader cl=BaseNodeServiceTest.class.getClassLoader();
  InputStream modelStream=cl.getResourceAsStream(""String_Node_Str"");
  assertNotNull(modelStream);
  M2Model model=M2Model.createModel(modelStream);
  dictionaryDao.putModel(model);
  tagger=(IncompleteNodeTagger)IntegrityTest.ctx.getBean(""String_Node_Str"");
  serviceRegistry=(ServiceRegistry)IntegrityTest.ctx.getBean(ServiceRegistry.SERVICE_REGISTRY);
  nodeService=serviceRegistry.getNodeService();
  this.authenticationComponent=(AuthenticationComponent)IntegrityTest.ctx.getBean(""String_Node_Str"");
  this.authenticationComponent.setSystemUserAsCurrentUser();
  TransactionService transactionService=serviceRegistry.getTransactionService();
  txn=transactionService.getUserTransaction();
  txn.begin();
  StoreRef storeRef=new StoreRef(StoreRef.PROTOCOL_WORKSPACE,getName());
  if (!nodeService.exists(storeRef)) {
    nodeService.createStore(storeRef.getProtocol(),storeRef.getIdentifier());
  }
  rootNodeRef=nodeService.getRootNode(storeRef);
  properties=new PropertyMap();
  properties.put(IntegrityTest.TEST_PROP_TEXT_C,""String_Node_Str"");
}",0.9769736842105264
172333,"public NodeRef getPersonOrNull(String caseSensitiveUserName){
  String userName=userNamesAreCaseSensitive ? caseSensitiveUserName : caseSensitiveUserName.toLowerCase();
  SearchParameters sp=new SearchParameters();
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"" + userName);
  sp.addStore(storeRef);
  sp.excludeDataInTheCurrentTransaction(false);
  ResultSet rs=null;
  try {
    rs=searchService.query(sp);
    for (    ResultSetRow row : rs) {
      NodeRef nodeRef=row.getNodeRef();
      if (nodeService.exists(nodeRef)) {
        String realUserName=DefaultTypeConverter.INSTANCE.convert(String.class,nodeService.getProperty(nodeRef,ContentModel.PROP_USERNAME));
        realUserName=userNamesAreCaseSensitive ? realUserName : realUserName.toLowerCase();
        if (realUserName.equals(userName)) {
          return nodeRef;
        }
      }
    }
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return null;
}","public NodeRef getPersonOrNull(String caseSensitiveUserName){
  String userName=userNamesAreCaseSensitive ? caseSensitiveUserName : caseSensitiveUserName.toLowerCase();
  SearchParameters sp=new SearchParameters();
  sp.setLanguage(SearchService.LANGUAGE_LUCENE);
  sp.setQuery(""String_Node_Str"" + userName + ""String_Node_Str"");
  sp.addStore(storeRef);
  sp.excludeDataInTheCurrentTransaction(false);
  ResultSet rs=null;
  try {
    rs=searchService.query(sp);
    for (    ResultSetRow row : rs) {
      NodeRef nodeRef=row.getNodeRef();
      if (nodeService.exists(nodeRef)) {
        String realUserName=DefaultTypeConverter.INSTANCE.convert(String.class,nodeService.getProperty(nodeRef,ContentModel.PROP_USERNAME));
        realUserName=userNamesAreCaseSensitive ? realUserName : realUserName.toLowerCase();
        if (realUserName.equals(userName)) {
          return nodeRef;
        }
      }
    }
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return null;
}",0.989816700610998
172334,"/** 
 * Converts the source and target content to temporary files with the correct extensions for the mimetype that they map to.
 * @see #transformInternal(File,File)
 */
protected final void transformInternal(ContentReader reader,ContentWriter writer,Map<String,Object> options) throws Exception {
  String sourceMimetype=getMimetype(reader);
  String targetMimetype=getMimetype(writer);
  String sourceExtension=mimetypeService.getExtension(sourceMimetype);
  String targetExtension=mimetypeService.getExtension(targetMimetype);
  if (sourceExtension == null || targetExtension == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + sourceMimetype + ""String_Node_Str""+ ""String_Node_Str""+ sourceExtension+ ""String_Node_Str""+ ""String_Node_Str""+ targetMimetype+ ""String_Node_Str""+ ""String_Node_Str""+ targetExtension);
  }
  if (sourceMimetype.equals(targetMimetype)) {
    writer.putContent(reader.getContentInputStream());
    return;
  }
  File sourceFile=TempFileProvider.createTempFile(getClass().getSimpleName() + ""String_Node_Str"",""String_Node_Str"" + sourceExtension);
  File targetFile=TempFileProvider.createTempFile(getClass().getSimpleName() + ""String_Node_Str"",""String_Node_Str"" + targetExtension);
  Map<String,String> properties=new HashMap<String,String>(5);
  for (  Map.Entry<String,Object> entry : options.entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    properties.put(key,(value == null ? null : value.toString()));
  }
  properties.put(VAR_SOURCE,sourceFile.getAbsolutePath());
  properties.put(VAR_TARGET,targetFile.getAbsolutePath());
  reader.getContent(sourceFile);
  ExecutionResult result=null;
  try {
    result=transformCommand.execute(properties);
  }
 catch (  Throwable e) {
    throw new ContentIOException(""String_Node_Str"" + transformCommand,e);
  }
  if (!result.getSuccess()) {
    throw new ContentIOException(""String_Node_Str"" + result);
  }
  if (!targetFile.exists()) {
    throw new ContentIOException(""String_Node_Str"" + result);
  }
  writer.putContent(targetFile);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + reader + ""String_Node_Str""+ ""String_Node_Str""+ writer+ ""String_Node_Str""+ ""String_Node_Str""+ options+ ""String_Node_Str""+ ""String_Node_Str""+ result);
  }
}","/** 
 * Converts the source and target content to temporary files with the correct extensions for the mimetype that they map to.
 * @see #transformInternal(File,File)
 */
protected final void transformInternal(ContentReader reader,ContentWriter writer,Map<String,Object> options) throws Exception {
  String sourceMimetype=getMimetype(reader);
  String targetMimetype=getMimetype(writer);
  String sourceExtension=getMimetypeService().getExtension(sourceMimetype);
  String targetExtension=getMimetypeService().getExtension(targetMimetype);
  if (sourceExtension == null || targetExtension == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + sourceMimetype + ""String_Node_Str""+ ""String_Node_Str""+ sourceExtension+ ""String_Node_Str""+ ""String_Node_Str""+ targetMimetype+ ""String_Node_Str""+ ""String_Node_Str""+ targetExtension);
  }
  if (sourceMimetype.equals(targetMimetype)) {
    writer.putContent(reader.getContentInputStream());
    return;
  }
  File sourceFile=TempFileProvider.createTempFile(getClass().getSimpleName() + ""String_Node_Str"",""String_Node_Str"" + sourceExtension);
  File targetFile=TempFileProvider.createTempFile(getClass().getSimpleName() + ""String_Node_Str"",""String_Node_Str"" + targetExtension);
  Map<String,String> properties=new HashMap<String,String>(5);
  for (  Map.Entry<String,Object> entry : options.entrySet()) {
    String key=entry.getKey();
    Object value=entry.getValue();
    properties.put(key,(value == null ? null : value.toString()));
  }
  properties.put(VAR_SOURCE,sourceFile.getAbsolutePath());
  properties.put(VAR_TARGET,targetFile.getAbsolutePath());
  reader.getContent(sourceFile);
  ExecutionResult result=null;
  try {
    result=transformCommand.execute(properties);
  }
 catch (  Throwable e) {
    throw new ContentIOException(""String_Node_Str"" + transformCommand,e);
  }
  if (!result.getSuccess()) {
    throw new ContentIOException(""String_Node_Str"" + result);
  }
  if (!targetFile.exists()) {
    throw new ContentIOException(""String_Node_Str"" + result);
  }
  writer.putContent(targetFile);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + ""String_Node_Str"" + reader + ""String_Node_Str""+ ""String_Node_Str""+ writer+ ""String_Node_Str""+ ""String_Node_Str""+ options+ ""String_Node_Str""+ ""String_Node_Str""+ result);
  }
}",0.9969931271477664
172335,"/** 
 * Adds an Access Control Entry
 * @param accessStatus
 * @param authority
 * @param permission
 */
public void addAccessControlEntry(AccessStatus accessStatus,String authority,String permission){
  ACE ace=new ACE();
  ace.accessStatus=accessStatus;
  ace.authority=authority;
  ace.permission=permission;
  accessControlEntries.add(ace);
}","/** 
 * Adds an Access Control Entry
 * @param accessStatus
 * @param authority
 * @param permission
 */
public void addAccessControlEntry(AccessStatus accessStatus,String authority,String permission){
  if (permission.equalsIgnoreCase(""String_Node_Str"")) {
    permission=PermissionService.CONSUMER;
  }
  ACE ace=new ACE();
  ace.accessStatus=accessStatus;
  ace.authority=authority;
  ace.permission=permission;
  accessControlEntries.add(ace);
}",0.8704402515723271
172336,"/** 
 * Build a list of file name or file information objects for the specified server path
 * @param path FTPPath
 * @param nameOnly boolean
 * @param hidden boolean
 * @return Vector<FileInfo>
 */
protected final Vector<FileInfo> listFilesForPath(FTPPath path,boolean nameOnly,boolean hidden){
  if (path == null)   return null;
  Vector<FileInfo> files=new Vector<FileInfo>();
  if (path.hasSharedDevice() == false) {
    SharedDeviceList shares=null;
    if (getClientInformation().isGuest())     shares=getDynamicShareList();
 else     getShareList();
    if (shares != null) {
      Enumeration<SharedDevice> enm=shares.enumerateShares();
      while (enm.hasMoreElements()) {
        SharedDevice shr=enm.nextElement();
        if (nameOnly == false) {
          FileInfo finfo=new FileInfo(shr.getName(),0L,FileAttribute.Directory);
          files.add(finfo);
        }
 else         files.add(new FileInfo(shr.getName(),0L,FileAttribute.Directory));
      }
    }
  }
 else {
    String searchPath=path.getSharePath();
    if (path.isDirectory())     searchPath=path.makeSharePathToFile(""String_Node_Str"");
    TreeConnection tree=new TreeConnection(path.getSharedDevice());
    DiskInterface disk=null;
    SearchContext ctx=null;
    int searchAttr=FileAttribute.Directory + FileAttribute.Normal;
    if (hidden)     searchAttr+=FileAttribute.Hidden;
    try {
      disk=(DiskInterface)path.getSharedDevice().getInterface();
      ctx=disk.startSearch(this,tree,searchPath,searchAttr);
    }
 catch (    Exception ex) {
    }
    if (ctx != null) {
      while (ctx.hasMoreFiles()) {
        if (nameOnly) {
          files.add(new FileInfo(ctx.nextFileName(),0L,0));
        }
 else {
          FileInfo finfo=new FileInfo();
          if (ctx.nextFileInfo(finfo) == false)           break;
          if (finfo.getFileName() != null)           files.add(finfo);
        }
      }
    }
  }
  return files;
}","/** 
 * Build a list of file name or file information objects for the specified server path
 * @param path FTPPath
 * @param nameOnly boolean
 * @param hidden boolean
 * @return Vector<FileInfo>
 */
protected final Vector<FileInfo> listFilesForPath(FTPPath path,boolean nameOnly,boolean hidden){
  if (path == null)   return null;
  Vector<FileInfo> files=new Vector<FileInfo>();
  if (path.hasSharedDevice() == false) {
    SharedDeviceList shares=null;
    if (getClientInformation().isGuest())     shares=getDynamicShareList();
 else     shares=getShareList();
    if (shares != null) {
      Enumeration<SharedDevice> enm=shares.enumerateShares();
      while (enm.hasMoreElements()) {
        SharedDevice shr=enm.nextElement();
        if (nameOnly == false) {
          FileInfo finfo=new FileInfo(shr.getName(),0L,FileAttribute.Directory);
          files.add(finfo);
        }
 else         files.add(new FileInfo(shr.getName(),0L,FileAttribute.Directory));
      }
    }
  }
 else {
    String searchPath=path.getSharePath();
    if (path.isDirectory())     searchPath=path.makeSharePathToFile(""String_Node_Str"");
    TreeConnection tree=new TreeConnection(path.getSharedDevice());
    DiskInterface disk=null;
    SearchContext ctx=null;
    int searchAttr=FileAttribute.Directory + FileAttribute.Normal;
    if (hidden)     searchAttr+=FileAttribute.Hidden;
    try {
      disk=(DiskInterface)path.getSharedDevice().getInterface();
      ctx=disk.startSearch(this,tree,searchPath,searchAttr);
    }
 catch (    Exception ex) {
    }
    if (ctx != null) {
      while (ctx.hasMoreFiles()) {
        if (nameOnly) {
          files.add(new FileInfo(ctx.nextFileName(),0L,0));
        }
 else {
          FileInfo finfo=new FileInfo();
          if (ctx.nextFileInfo(finfo) == false)           break;
          if (finfo.getFileName() != null)           files.add(finfo);
        }
      }
    }
  }
  return files;
}",0.998181345804105
172337,"/** 
 * Start a new search on the filesystem using the specified searchPath that may contain wildcards.
 * @param sess Server session
 * @param tree Tree connection
 * @param searchPath File(s) to search for, may include wildcards.
 * @param attrib Attributes of the file(s) to search for, see class SMBFileAttribute.
 * @return SearchContext
 * @exception java.io.FileNotFoundException If the search could not be started.
 */
public SearchContext startSearch(SrvSession sess,TreeConnection tree,String searchPath,int attributes) throws FileNotFoundException {
  try {
    ContentContext ctx=(ContentContext)tree.getContext();
    String searchFileSpec=searchPath;
    NodeRef searchRootNodeRef=ctx.getRootNode();
    FileState searchFolderState=null;
    sess.beginTransaction(transactionService,true);
    String[] paths=null;
    if (ctx.hasStateTable()) {
      paths=FileName.splitPath(searchPath);
      if (paths[0] != null && paths[0].length() > 1) {
        searchFolderState=getStateForPath(tree,paths[0]);
        if (searchFolderState == null)         searchFolderState=ctx.getStateTable().findFileState(paths[0],true,true);
        if (hasPseudoFileInterface())         getPseudoFileInterface().addPseudoFilesToFolder(sess,tree,paths[0]);
        NodeRef nodeRef=getNodeForPath(tree,paths[0]);
        if (nodeRef != null) {
          searchRootNodeRef=nodeRef;
          searchFileSpec=paths[1];
          searchFolderState.setNodeRef(nodeRef);
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + searchPath);
        }
      }
    }
    List<NodeRef> results=cifsHelper.getNodeRefs(searchRootNodeRef,searchFileSpec);
    PseudoFileList pseudoList=null;
    if (sess instanceof SMBSrvSession && searchFolderState != null && searchFolderState.hasPseudoFiles()) {
      if (WildCard.containsWildcards(searchFileSpec)) {
        pseudoList=searchFolderState.getPseudoFileList();
      }
 else       if (results == null || results.size() == 0) {
        String fname=paths[1];
        if (fname != null) {
          PseudoFile pfile=searchFolderState.getPseudoFileList().findFile(fname,true);
          if (pfile != null) {
            pseudoList=new PseudoFileList();
            pseudoList.addFile(pfile);
          }
        }
      }
    }
    SearchContext searchCtx=new ContentSearchContext(cifsHelper,results,searchFileSpec,pseudoList);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + searchPath + ""String_Node_Str""+ ""String_Node_Str""+ attributes);
    }
    return searchCtx;
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + searchPath);
    throw new FileNotFoundException(""String_Node_Str"" + searchPath);
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new FileNotFoundException(""String_Node_Str"" + searchPath);
  }
}","/** 
 * Start a new search on the filesystem using the specified searchPath that may contain wildcards.
 * @param sess Server session
 * @param tree Tree connection
 * @param searchPath File(s) to search for, may include wildcards.
 * @param attrib Attributes of the file(s) to search for, see class SMBFileAttribute.
 * @return SearchContext
 * @exception java.io.FileNotFoundException If the search could not be started.
 */
public SearchContext startSearch(SrvSession sess,TreeConnection tree,String searchPath,int attributes) throws FileNotFoundException {
  try {
    ContentContext ctx=(ContentContext)tree.getContext();
    String searchFileSpec=searchPath;
    NodeRef searchRootNodeRef=ctx.getRootNode();
    FileState searchFolderState=null;
    sess.beginTransaction(transactionService,true);
    String[] paths=null;
    if (ctx.hasStateTable()) {
      paths=FileName.splitPath(searchPath);
      if (paths[0] != null && paths[0].length() > 1) {
        NodeRef nodeRef=getNodeForPath(tree,paths[0]);
        searchFolderState=getStateForPath(tree,paths[0]);
        if (searchFolderState == null) {
          searchFolderState=ctx.getStateTable().findFileState(paths[0],true,true);
        }
        if (searchFolderState.hasNodeRef() == false) {
          searchFolderState.setNodeRef(nodeRef);
        }
        if (hasPseudoFileInterface())         getPseudoFileInterface().addPseudoFilesToFolder(sess,tree,paths[0]);
        if (nodeRef != null) {
          searchRootNodeRef=nodeRef;
          searchFileSpec=paths[1];
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + searchPath);
        }
      }
    }
    List<NodeRef> results=cifsHelper.getNodeRefs(searchRootNodeRef,searchFileSpec);
    PseudoFileList pseudoList=null;
    if (sess instanceof SMBSrvSession && searchFolderState != null && searchFolderState.hasPseudoFiles()) {
      if (WildCard.containsWildcards(searchFileSpec)) {
        pseudoList=searchFolderState.getPseudoFileList();
      }
 else       if (results == null || results.size() == 0) {
        String fname=paths[1];
        if (fname != null) {
          PseudoFile pfile=searchFolderState.getPseudoFileList().findFile(fname,true);
          if (pfile != null) {
            pseudoList=new PseudoFileList();
            pseudoList.addFile(pfile);
          }
        }
      }
    }
    SearchContext searchCtx=new ContentSearchContext(cifsHelper,results,searchFileSpec,pseudoList);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + ""String_Node_Str"" + searchPath + ""String_Node_Str""+ ""String_Node_Str""+ attributes);
    }
    return searchCtx;
  }
 catch (  org.alfresco.repo.security.permissions.AccessDeniedException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + searchPath);
    throw new FileNotFoundException(""String_Node_Str"" + searchPath);
  }
catch (  AlfrescoRuntimeException ex) {
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"",ex);
    throw new FileNotFoundException(""String_Node_Str"" + searchPath);
  }
}",0.9457722103181144
172338,"/** 
 * Add pseudo files to a folder so that they appear in a folder search
 * @param sess SrvSession
 * @param tree TreeConnection
 * @param path String
 * @return int
 */
public int addPseudoFilesToFolder(SrvSession sess,TreeConnection tree,String path){
  int pseudoCnt=0;
  ContentContext ctx=(ContentContext)tree.getContext();
  FileState fstate=getStateForPath(ctx,path);
  if (fstate.hasPseudoFiles())   return 0;
  boolean isCIFS=sess instanceof SMBSrvSession;
  if (isCIFS && ctx.hasDragAndDropApp()) {
    if (fstate == null)     ctx.getStateTable().findFileState(path,true,true);
    String[] allPaths=FileName.splitAllPaths(path);
    String lastPath=allPaths[allPaths.length - 1].toUpperCase();
    if (lastPath.startsWith(""String_Node_Str"") && fstate.hasPseudoFiles() == false) {
      fstate.addPseudoFile(ctx.getDragAndDropApp());
      pseudoCnt++;
      if (logger.isInfoEnabled())       logger.info(""String_Node_Str"" + path);
    }
  }
  if (isCIFS && ctx.hasURLFile() && fstate.getNodeRef() != null) {
    StringBuilder urlStr=new StringBuilder();
    urlStr.append(""String_Node_Str"");
    urlStr.append(""String_Node_Str"");
    urlStr.append(ctx.getURLPrefix());
    urlStr.append(""String_Node_Str"");
    urlStr.append(fstate.getNodeRef().getId());
    urlStr.append(""String_Node_Str"");
    byte[] urlData=urlStr.toString().getBytes();
    MemoryPseudoFile urlFile=new MemoryPseudoFile(ctx.getURLFileName(),urlData);
    fstate.addPseudoFile(urlFile);
    pseudoCnt++;
    if (logger.isInfoEnabled())     logger.info(""String_Node_Str"" + path);
  }
  return pseudoCnt;
}","/** 
 * Add pseudo files to a folder so that they appear in a folder search
 * @param sess SrvSession
 * @param tree TreeConnection
 * @param path String
 * @return int
 */
public int addPseudoFilesToFolder(SrvSession sess,TreeConnection tree,String path){
  int pseudoCnt=0;
  ContentContext ctx=(ContentContext)tree.getContext();
  FileState fstate=getStateForPath(ctx,path);
  if (fstate.hasPseudoFiles())   return 0;
  boolean isCIFS=sess instanceof SMBSrvSession;
  if (isCIFS && ctx.hasDragAndDropApp()) {
    if (fstate == null)     ctx.getStateTable().findFileState(path,true,true);
    String[] allPaths=FileName.splitAllPaths(path);
    String lastPath=allPaths[allPaths.length - 1].toUpperCase();
    if (lastPath.startsWith(""String_Node_Str"") && fstate.hasPseudoFiles() == false) {
      fstate.addPseudoFile(ctx.getDragAndDropApp());
      pseudoCnt++;
      if (logger.isInfoEnabled())       logger.info(""String_Node_Str"" + path);
    }
  }
  if (isCIFS && ctx.hasURLFile()) {
    if (fstate.getNodeRef() != null) {
      StringBuilder urlStr=new StringBuilder();
      urlStr.append(""String_Node_Str"");
      urlStr.append(""String_Node_Str"");
      urlStr.append(ctx.getURLPrefix());
      urlStr.append(""String_Node_Str"");
      urlStr.append(fstate.getNodeRef().getId());
      urlStr.append(""String_Node_Str"");
      byte[] urlData=urlStr.toString().getBytes();
      MemoryPseudoFile urlFile=new MemoryPseudoFile(ctx.getURLFileName(),urlData);
      fstate.addPseudoFile(urlFile);
      pseudoCnt++;
      if (logger.isInfoEnabled())       logger.info(""String_Node_Str"" + path);
    }
  }
  return pseudoCnt;
}",0.9850839030453696
172339,"@Override public void beforeCompletion(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + this);
  }
  for (  TransactionListener listener : listeners) {
    listener.beforeCompletion();
  }
}","@Override public void beforeCompletion(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + this);
  }
  for (  TransactionListener listener : getListenersIterable()) {
    listener.beforeCompletion();
  }
}",0.9297052154195012
172340,"@Override public void afterCompletion(int status){
  String statusStr=""String_Node_Str"";
switch (status) {
case TransactionSynchronization.STATUS_COMMITTED:
    statusStr=""String_Node_Str"";
  break;
case TransactionSynchronization.STATUS_ROLLED_BACK:
statusStr=""String_Node_Str"";
break;
default :
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + statusStr + ""String_Node_Str""+ this);
}
for (LuceneIndexerAndSearcherFactory lucene : lucenes) {
try {
if (status == TransactionSynchronization.STATUS_COMMITTED) {
lucene.commit();
}
 else {
lucene.rollback();
}
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str"",e);
}
}
if (status == TransactionSynchronization.STATUS_COMMITTED) {
for (TransactionListener listener : listeners) {
try {
listener.afterCommit();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
 else {
for (TransactionListener listener : listeners) {
try {
listener.afterRollback();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
AlfrescoTransactionSupport.clearSynchronization();
}","@Override public void afterCompletion(int status){
  String statusStr=""String_Node_Str"";
switch (status) {
case TransactionSynchronization.STATUS_COMMITTED:
    statusStr=""String_Node_Str"";
  break;
case TransactionSynchronization.STATUS_ROLLED_BACK:
statusStr=""String_Node_Str"";
break;
default :
}
if (logger.isDebugEnabled()) {
logger.debug(""String_Node_Str"" + statusStr + ""String_Node_Str""+ this);
}
for (LuceneIndexerAndSearcherFactory lucene : lucenes) {
try {
if (status == TransactionSynchronization.STATUS_COMMITTED) {
lucene.commit();
}
 else {
lucene.rollback();
}
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str"",e);
}
}
List<TransactionListener> iterableListeners=getListenersIterable();
if (status == TransactionSynchronization.STATUS_COMMITTED) {
for (TransactionListener listener : iterableListeners) {
try {
listener.afterCommit();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
 else {
for (TransactionListener listener : iterableListeners) {
try {
listener.afterRollback();
}
 catch (RuntimeException e) {
logger.error(""String_Node_Str"" + statusStr + ""String_Node_Str""+ ""String_Node_Str""+ listener,e);
}
}
}
AlfrescoTransactionSupport.clearSynchronization();
}",0.9653270291568165
172341,"/** 
 * Performs the in-transaction flushing.  Typically done during a transaction or before commit.
 */
public void flush(){
  for (  IntegrityChecker integrityChecker : integrityCheckers) {
    integrityChecker.checkIntegrity();
  }
  for (  TransactionListener listener : listeners) {
    listener.flush();
  }
}","/** 
 * Performs the in-transaction flushing.  Typically done during a transaction or before commit.
 */
public void flush(){
  for (  IntegrityChecker integrityChecker : integrityCheckers) {
    integrityChecker.checkIntegrity();
  }
  for (  TransactionListener listener : getListenersIterable()) {
    listener.flush();
  }
}",0.9517884914463453
172342,"/** 
 * Pre-commit cleanup. <p> Ensures that the session resources are   {@link #flush() flushed}. The Lucene indexes are then prepared.
 */
@Override public void beforeCommit(boolean readOnly){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (readOnly ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ this);
  }
  TransactionSynchronizationImpl synch=(TransactionSynchronizationImpl)TransactionSynchronizationManager.getResource(RESOURCE_KEY_TXN_SYNCH);
  if (synch == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  for (  TransactionListener listener : listeners) {
    listener.beforeCommit(readOnly);
  }
  flush();
  for (  LuceneIndexerAndSearcherFactory lucene : lucenes) {
    lucene.prepare();
  }
}","/** 
 * Pre-commit cleanup. <p> Ensures that the session resources are   {@link #flush() flushed}. The Lucene indexes are then prepared.
 */
@Override public void beforeCommit(boolean readOnly){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + (readOnly ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ this);
  }
  TransactionSynchronizationImpl synch=(TransactionSynchronizationImpl)TransactionSynchronizationManager.getResource(RESOURCE_KEY_TXN_SYNCH);
  if (synch == null) {
    throw new AlfrescoRuntimeException(""String_Node_Str"");
  }
  for (  TransactionListener listener : getListenersIterable()) {
    listener.beforeCommit(readOnly);
  }
  flush();
  for (  LuceneIndexerAndSearcherFactory lucene : lucenes) {
    lucene.prepare();
  }
}",0.980012894906512
172343,"public void testListener() throws Exception {
  final List<String> strings=new ArrayList<String>(1);
  TransactionListener listener=new TransactionListener(){
    public void flush(){
      strings.add(""String_Node_Str"");
    }
    public void beforeCommit(    boolean readOnly){
      strings.add(""String_Node_Str"");
    }
    public void beforeCompletion(){
      strings.add(""String_Node_Str"");
    }
    public void afterCommit(){
      strings.add(""String_Node_Str"");
    }
    public void afterRollback(){
      strings.add(""String_Node_Str"");
    }
  }
;
  TransactionService transactionService=serviceRegistry.getTransactionService();
  UserTransaction txn=transactionService.getUserTransaction();
  txn.begin();
  AlfrescoTransactionSupport.bindListener(listener);
  AlfrescoTransactionSupport.flush();
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
  txn.commit();
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
}","public void testListener() throws Exception {
  final List<String> strings=new ArrayList<String>(1);
  TransactionListener listener=new TransactionListener(){
    public void flush(){
      strings.add(""String_Node_Str"");
    }
    public void beforeCommit(    boolean readOnly){
      strings.add(""String_Node_Str"");
    }
    public void beforeCompletion(){
      strings.add(""String_Node_Str"");
    }
    public void afterCommit(){
      strings.add(""String_Node_Str"");
    }
    public void afterRollback(){
      strings.add(""String_Node_Str"");
    }
  }
;
  UserTransaction txn=transactionService.getUserTransaction();
  txn.begin();
  AlfrescoTransactionSupport.bindListener(listener);
  AlfrescoTransactionSupport.flush();
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
  txn.commit();
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
  assertTrue(""String_Node_Str"",strings.contains(""String_Node_Str""));
}",0.9619539689995305
172344,"public void setUp() throws Exception {
  serviceRegistry=(ServiceRegistry)ctx.getBean(ServiceRegistry.SERVICE_REGISTRY);
}","public void setUp() throws Exception {
  serviceRegistry=(ServiceRegistry)ctx.getBean(ServiceRegistry.SERVICE_REGISTRY);
  transactionService=serviceRegistry.getTransactionService();
}",0.7973856209150327
172345,"public void testTransactionId() throws Exception {
  TransactionService transactionService=serviceRegistry.getTransactionService();
  UserTransaction txn=transactionService.getUserTransaction();
  assertNull(""String_Node_Str"",AlfrescoTransactionSupport.getTransactionId());
  txn.begin();
  String txnId=AlfrescoTransactionSupport.getTransactionId();
  assertNotNull(""String_Node_Str"",txnId);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      String txnId=AlfrescoTransactionSupport.getTransactionId();
      assertNull(""String_Node_Str"");
    }
  }
);
  String txnIdCheck=AlfrescoTransactionSupport.getTransactionId();
  assertEquals(""String_Node_Str"",txnId,txnIdCheck);
{
    UserTransaction txnInner=transactionService.getNonPropagatingUserTransaction();
    String txnIdInner=AlfrescoTransactionSupport.getTransactionId();
    assertEquals(""String_Node_Str"",txnId,txnIdInner);
    txnInner.begin();
    txnIdInner=AlfrescoTransactionSupport.getTransactionId();
    assertNotSame(""String_Node_Str"",txnIdInner,txnId);
    txnInner.rollback();
    txnIdCheck=AlfrescoTransactionSupport.getTransactionId();
    assertEquals(""String_Node_Str"",txnId,txnIdCheck);
  }
  txn.rollback();
  assertNull(""String_Node_Str"",AlfrescoTransactionSupport.getTransactionId());
  txn=transactionService.getUserTransaction();
  txn.begin();
  txnIdCheck=AlfrescoTransactionSupport.getTransactionId();
  assertNotSame(""String_Node_Str"",txnId,txnIdCheck);
  txn.rollback();
  assertNull(""String_Node_Str"",AlfrescoTransactionSupport.getTransactionId());
}","public void testTransactionId() throws Exception {
  TransactionService transactionService=serviceRegistry.getTransactionService();
  UserTransaction txn=transactionService.getUserTransaction();
  assertNull(""String_Node_Str"",AlfrescoTransactionSupport.getTransactionId());
  txn.begin();
  String txnId=AlfrescoTransactionSupport.getTransactionId();
  assertNotNull(""String_Node_Str"",txnId);
  String txnIdCheck=AlfrescoTransactionSupport.getTransactionId();
  assertEquals(""String_Node_Str"",txnId,txnIdCheck);
{
    UserTransaction txnInner=transactionService.getNonPropagatingUserTransaction();
    String txnIdInner=AlfrescoTransactionSupport.getTransactionId();
    assertEquals(""String_Node_Str"",txnId,txnIdInner);
    txnInner.begin();
    txnIdInner=AlfrescoTransactionSupport.getTransactionId();
    assertNotSame(""String_Node_Str"",txnIdInner,txnId);
    txnInner.rollback();
    txnIdCheck=AlfrescoTransactionSupport.getTransactionId();
    assertEquals(""String_Node_Str"",txnId,txnIdCheck);
  }
  txn.rollback();
  assertNull(""String_Node_Str"",AlfrescoTransactionSupport.getTransactionId());
  txn=transactionService.getUserTransaction();
  txn.begin();
  txnIdCheck=AlfrescoTransactionSupport.getTransactionId();
  assertNotSame(""String_Node_Str"",txnId,txnIdCheck);
  txn.rollback();
  assertNull(""String_Node_Str"",AlfrescoTransactionSupport.getTransactionId());
}",0.9379263301500682
172346,"public void beforeCommit(boolean readOnly){
  strings.add(""String_Node_Str"");
}","@Override public void beforeCommit(boolean readOnly){
  testList.remove(beforeCommit);
  TransactionListener postCommitListener=new TransactionListenerAdapter(){
    @Override public void afterCommit(){
      testList.remove(afterCommitInner);
    }
  }
;
  AlfrescoTransactionSupport.bindListener(postCommitListener);
}",0.2606516290726817
172347,"public void afterCommit(){
  strings.add(""String_Node_Str"");
}","@Override public void afterCommit(){
  testList.remove(afterCommitOuter);
}",0.5693430656934306
172348,"/** 
 * Return file information for the next file in the active search. Returns false if the search is complete.
 * @param info FileInfo to return the file information.
 * @return true if the file information is valid, else false
 */
public boolean nextFileInfo(FileInfo info){
  if (!hasMoreFiles())   return false;
  index++;
  resumeId++;
  if (donePseudoFiles == false && pseudoList != null) {
    if (index < pseudoList.numberOfFiles()) {
      PseudoFile pfile=pseudoList.getFileAt(index);
      if (pfile != null) {
        FileInfo pinfo=pfile.getFileInfo();
        info.copyFrom(pinfo);
        return true;
      }
    }
 else {
      donePseudoFiles=true;
      index=0;
      if (results == null || results.size() == 0)       return false;
    }
  }
  NodeRef nextNodeRef=results.get(index);
  try {
    FileInfo nextInfo=cifsHelper.getFileInformation(nextNodeRef,""String_Node_Str"");
    info.copyFrom(nextInfo);
    return true;
  }
 catch (  FileNotFoundException e) {
  }
  return false;
}","/** 
 * Return file information for the next file in the active search. Returns false if the search is complete.
 * @param info FileInfo to return the file information.
 * @return true if the file information is valid, else false
 */
public boolean nextFileInfo(FileInfo info){
  if (!hasMoreFiles())   return false;
  index++;
  resumeId++;
  if (donePseudoFiles == false && pseudoList != null) {
    if (index < pseudoList.numberOfFiles()) {
      PseudoFile pfile=pseudoList.getFileAt(index);
      if (pfile != null) {
        FileInfo pinfo=pfile.getFileInfo();
        info.copyFrom(pinfo);
        if (index == (pseudoList.numberOfFiles() - 1)) {
          donePseudoFiles=true;
          index=-1;
        }
        return true;
      }
    }
  }
  NodeRef nextNodeRef=results.get(index);
  try {
    FileInfo nextInfo=cifsHelper.getFileInformation(nextNodeRef,""String_Node_Str"");
    info.copyFrom(nextInfo);
    return true;
  }
 catch (  FileNotFoundException e) {
  }
  return false;
}",0.8701298701298701
172349,"/** 
 * Return the file name of the next file in the active search. Returns null is the search is complete.
 * @return String
 */
public String nextFileName(){
  if (!hasMoreFiles())   return null;
  index++;
  resumeId++;
  if (donePseudoFiles == false && pseudoList != null) {
    if (index < pseudoList.numberOfFiles()) {
      PseudoFile pfile=pseudoList.getFileAt(index);
      if (pfile != null) {
        FileInfo pinfo=pfile.getFileInfo();
        return pinfo.getFileName();
      }
    }
 else {
      donePseudoFiles=true;
      index=0;
      if (results == null || results.size() == 0)       return null;
    }
  }
  NodeRef nextNodeRef=results.get(index);
  try {
    FileInfo nextInfo=cifsHelper.getFileInformation(nextNodeRef,""String_Node_Str"");
    return nextInfo.getFileName();
  }
 catch (  FileNotFoundException e) {
  }
  return null;
}","/** 
 * Return the file name of the next file in the active search. Returns null is the search is complete.
 * @return String
 */
public String nextFileName(){
  if (!hasMoreFiles())   return null;
  index++;
  resumeId++;
  if (donePseudoFiles == false && pseudoList != null) {
    if (index < pseudoList.numberOfFiles()) {
      PseudoFile pfile=pseudoList.getFileAt(index);
      if (pfile != null) {
        FileInfo pinfo=pfile.getFileInfo();
        return pinfo.getFileName();
      }
    }
 else {
      donePseudoFiles=true;
      index=-1;
      if (results == null || results.size() == 0)       return null;
    }
  }
  NodeRef nextNodeRef=results.get(index);
  try {
    FileInfo nextInfo=cifsHelper.getFileInformation(nextNodeRef,""String_Node_Str"");
    return nextInfo.getFileName();
  }
 catch (  FileNotFoundException e) {
  }
  return null;
}",0.998252766453116
172350,"public Reader getDataStream(){
  try {
    InputStream dataStream=null;
    Enumeration entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)entries.nextElement();
      if (!entry.isDirectory()) {
        if (entry.getName().endsWith(""String_Node_Str"")) {
          dataStream=zipFile.getInputStream(entry);
        }
      }
    }
    if (dataStream == null) {
      throw new ImporterException(""String_Node_Str"");
    }
    Reader inputReader=(dataFileEncoding == null) ? new InputStreamReader(dataStream) : new InputStreamReader(dataStream,dataFileEncoding);
    return new BufferedReader(inputReader);
  }
 catch (  UnsupportedEncodingException e) {
    throw new ImporterException(""String_Node_Str"" + dataFileEncoding + ""String_Node_Str"");
  }
catch (  IOException e) {
    throw new ImporterException(""String_Node_Str"" + e.getMessage());
  }
}","public Reader getDataStream(){
  try {
    ZipEntry xmlMetaDataEntry=null;
    Enumeration entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)entries.nextElement();
      if (!entry.isDirectory()) {
        String entryName=entry.getName();
        if (entryName.endsWith(""String_Node_Str"") && entryName.indexOf('/') == -1 && entryName.indexOf('\\') == -1) {
          if (xmlMetaDataEntry != null) {
            throw new ImporterException(""String_Node_Str"");
          }
          xmlMetaDataEntry=entry;
        }
      }
    }
    if (xmlMetaDataEntry == null) {
      throw new ImporterException(""String_Node_Str"");
    }
    InputStream dataStream=zipFile.getInputStream(xmlMetaDataEntry);
    Reader inputReader=(dataFileEncoding == null) ? new InputStreamReader(dataStream) : new InputStreamReader(dataStream,dataFileEncoding);
    return new BufferedReader(inputReader);
  }
 catch (  UnsupportedEncodingException e) {
    throw new ImporterException(""String_Node_Str"" + dataFileEncoding + ""String_Node_Str"");
  }
catch (  IOException e) {
    throw new ImporterException(""String_Node_Str"" + e.getMessage());
  }
}",0.7602905569007264
172351,"/** 
 * Import Node Content. <p> The content URL, if present, will be a local URL.  This import copies the content from the local URL to a server-assigned location.
 * @param nodeRef containing node
 * @param propertyName the name of the content-type property
 * @param contentData the identifier of the content to import
 */
private void importContent(NodeRef nodeRef,QName propertyName,String importContentData){
  DataTypeDefinition dataTypeDef=dictionaryService.getDataType(DataTypeDefinition.CONTENT);
  importContentData=bindPlaceHolder(importContentData,binding);
  ContentData contentData=(ContentData)DefaultTypeConverter.INSTANCE.convert(dataTypeDef,importContentData);
  String contentUrl=contentData.getContentUrl();
  if (contentUrl != null && contentUrl.length() > 0) {
    InputStream contentStream=streamHandler.importStream(contentUrl);
    ContentWriter writer=contentService.getWriter(nodeRef,propertyName,true);
    writer.setEncoding(contentData.getEncoding());
    writer.setMimetype(contentData.getMimetype());
    writer.putContent(contentStream);
    reportContentCreated(nodeRef,contentUrl);
  }
}","/** 
 * Import Node Content. <p> The content URL, if present, will be a local URL.  This import copies the content from the local URL to a server-assigned location.
 * @param nodeRef containing node
 * @param propertyName the name of the content-type property
 * @param contentData the identifier of the content to import
 */
private void importContent(NodeRef nodeRef,QName propertyName,String importContentData){
  DataTypeDefinition dataTypeDef=dictionaryService.getDataType(DataTypeDefinition.CONTENT);
  importContentData=bindPlaceHolder(importContentData,binding);
  if (importContentData != null && importContentData.length() > 0) {
    ContentData contentData=(ContentData)DefaultTypeConverter.INSTANCE.convert(dataTypeDef,importContentData);
    String contentUrl=contentData.getContentUrl();
    if (contentUrl != null && contentUrl.length() > 0) {
      InputStream contentStream=streamHandler.importStream(contentUrl);
      ContentWriter writer=contentService.getWriter(nodeRef,propertyName,true);
      writer.setEncoding(contentData.getEncoding());
      writer.setMimetype(contentData.getMimetype());
      writer.putContent(contentStream);
      reportContentCreated(nodeRef,contentUrl);
    }
  }
}",0.960239418554938
172352,"/** 
 * Execute action implementation
 */
@Override protected void executeImpl(Action ruleAction,NodeRef actionedUponNodeRef){
  if (this.nodeService.exists(actionedUponNodeRef) == true) {
    QName categoryAspect=(QName)ruleAction.getParameterValue(PARAM_CATEGORY_ASPECT);
    NodeRef categoryValue=(NodeRef)ruleAction.getParameterValue(PARAM_CATEGORY_VALUE);
    if (this.dictionaryService.isSubClass(categoryAspect,ContentModel.ASPECT_CLASSIFIABLE) == true) {
      QName categoryProperty=null;
      Map<QName,PropertyDefinition> propertyDefs=this.dictionaryService.getAspect(categoryAspect).getProperties();
      for (      Map.Entry<QName,PropertyDefinition> entry : propertyDefs.entrySet()) {
        if (DataTypeDefinition.CATEGORY.equals(entry.getValue().getDataType().getName()) == true) {
          categoryProperty=entry.getKey();
          break;
        }
      }
      if (categoryAspect != null) {
        if (this.nodeService.hasAspect(actionedUponNodeRef,categoryAspect) == false) {
          Map<QName,Serializable> properties=new HashMap<QName,Serializable>();
          properties.put(categoryProperty,categoryValue);
          this.nodeService.addAspect(actionedUponNodeRef,categoryAspect,properties);
        }
 else {
          Serializable value=this.nodeService.getProperty(actionedUponNodeRef,categoryProperty);
          Collection<NodeRef> categories=DefaultTypeConverter.INSTANCE.getCollection(NodeRef.class,value);
          categories.add(categoryValue);
          this.nodeService.setProperty(actionedUponNodeRef,categoryProperty,(Serializable)categories);
        }
      }
    }
  }
}","/** 
 * Execute action implementation
 */
@Override protected void executeImpl(Action ruleAction,NodeRef actionedUponNodeRef){
  if (this.nodeService.exists(actionedUponNodeRef) == true) {
    QName categoryAspect=(QName)ruleAction.getParameterValue(PARAM_CATEGORY_ASPECT);
    NodeRef categoryValue=(NodeRef)ruleAction.getParameterValue(PARAM_CATEGORY_VALUE);
    if (this.dictionaryService.isSubClass(categoryAspect,ContentModel.ASPECT_CLASSIFIABLE) == true) {
      QName categoryProperty=null;
      Map<QName,PropertyDefinition> propertyDefs=this.dictionaryService.getAspect(categoryAspect).getProperties();
      for (      Map.Entry<QName,PropertyDefinition> entry : propertyDefs.entrySet()) {
        if (DataTypeDefinition.CATEGORY.equals(entry.getValue().getDataType().getName()) == true) {
          categoryProperty=entry.getKey();
          break;
        }
      }
      if (categoryAspect != null) {
        if (this.nodeService.hasAspect(actionedUponNodeRef,categoryAspect) == false) {
          Map<QName,Serializable> properties=new HashMap<QName,Serializable>();
          properties.put(categoryProperty,categoryValue);
          this.nodeService.addAspect(actionedUponNodeRef,categoryAspect,properties);
        }
 else {
          Serializable value=this.nodeService.getProperty(actionedUponNodeRef,categoryProperty);
          Collection<NodeRef> categories=DefaultTypeConverter.INSTANCE.getCollection(NodeRef.class,value);
          if (categories.contains(categoryValue) == false) {
            categories.add(categoryValue);
            this.nodeService.setProperty(actionedUponNodeRef,categoryProperty,(Serializable)categories);
          }
        }
      }
    }
  }
}",0.968344889960808
172353,"/** 
 * Convert an <b>xpath</b> like function clause into a <b>regex</b> query.
 * @param xpathLikeClause
 * @return Returns a valid regular expression that is equivalent to thegiven <b>xpath</b> like clause.
 */
public static String convertXPathLikeToRegex(String xpathLikeClause){
  return convert(DEF_XPATH_LIKE,DEF_REGEX,xpathLikeClause);
}","/** 
 * Convert an <b>xpath</b> like function clause into a <b>regex</b> query.
 * @param xpathLikeClause
 * @return Returns a valid regular expression that is equivalent to thegiven <b>xpath</b> like clause.
 */
public static String convertXPathLikeToRegex(String xpathLikeClause){
  return ""String_Node_Str"" + convert(DEF_XPATH_LIKE,DEF_REGEX,xpathLikeClause);
}",0.9717514124293786
172354,"public void extract(ContentReader reader,Map<QName,Serializable> destination) throws ContentIOException {
  final Map<QName,Serializable> tempDestination=new HashMap<QName,Serializable>();
  try {
    HTMLEditorKit.ParserCallback callback=new HTMLEditorKit.ParserCallback(){
      StringBuffer title=null;
      boolean inHead=false;
      public void handleText(      char[] data,      int pos){
        if (title != null) {
          title.append(data);
        }
      }
      public void handleComment(      char[] data,      int pos){
      }
      public void handleStartTag(      HTML.Tag t,      MutableAttributeSet a,      int pos){
        if (HTML.Tag.HEAD.equals(t)) {
          inHead=true;
        }
 else         if (HTML.Tag.TITLE.equals(t) && inHead) {
          title=new StringBuffer();
        }
 else         handleSimpleTag(t,a,pos);
      }
      public void handleEndTag(      HTML.Tag t,      int pos){
        if (HTML.Tag.HEAD.equals(t)) {
          inHead=false;
        }
 else         if (HTML.Tag.TITLE.equals(t)) {
          trimPut(ContentModel.PROP_TITLE,title.toString(),tempDestination);
          title=null;
        }
      }
      public void handleSimpleTag(      HTML.Tag t,      MutableAttributeSet a,      int pos){
        if (HTML.Tag.META.equals(t)) {
          Object nameO=a.getAttribute(HTML.Attribute.NAME);
          Object valueO=a.getAttribute(HTML.Attribute.CONTENT);
          if (nameO == null || valueO == null)           return;
          String name=nameO.toString();
          if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
            trimPut(ContentModel.PROP_AUTHOR,valueO,tempDestination);
          }
          if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
            trimPut(ContentModel.PROP_DESCRIPTION,valueO,tempDestination);
          }
        }
      }
      public void handleError(      String errorMsg,      int pos){
      }
    }
;
    String charsetGuess=""String_Node_Str"";
    int tries=0;
    while (tries < 3) {
      tempDestination.clear();
      Reader r=null;
      InputStream cis=null;
      try {
        cis=reader.getContentInputStream();
        r=new InputStreamReader(cis);
        HTMLEditorKit.Parser parser=new ParserDelegator();
        parser.parse(r,callback,tries > 0);
        destination.putAll(tempDestination);
        break;
      }
 catch (      ChangedCharSetException ccse) {
        tries++;
        charsetGuess=ccse.getCharSetSpec();
        int begin=charsetGuess.indexOf(""String_Node_Str"");
        if (begin > 0)         charsetGuess=charsetGuess.substring(begin + 8,charsetGuess.length());
        reader=reader.getReader();
      }
 finally {
        if (r != null)         r.close();
        if (cis != null)         cis.close();
      }
    }
  }
 catch (  IOException e) {
    throw new ContentIOException(""String_Node_Str"" + ""String_Node_Str"" + reader,e);
  }
}","public void extract(ContentReader reader,Map<QName,Serializable> destination) throws ContentIOException {
  final Map<QName,Serializable> tempDestination=new HashMap<QName,Serializable>();
  try {
    HTMLEditorKit.ParserCallback callback=new HTMLEditorKit.ParserCallback(){
      StringBuffer title=null;
      boolean inHead=false;
      public void handleText(      char[] data,      int pos){
        if (title != null) {
          title.append(data);
        }
      }
      public void handleComment(      char[] data,      int pos){
      }
      public void handleStartTag(      HTML.Tag t,      MutableAttributeSet a,      int pos){
        if (HTML.Tag.HEAD.equals(t)) {
          inHead=true;
        }
 else         if (HTML.Tag.TITLE.equals(t) && inHead) {
          title=new StringBuffer();
        }
 else         handleSimpleTag(t,a,pos);
      }
      public void handleEndTag(      HTML.Tag t,      int pos){
        if (HTML.Tag.HEAD.equals(t)) {
          inHead=false;
        }
 else         if (HTML.Tag.TITLE.equals(t) && title != null) {
          trimPut(ContentModel.PROP_TITLE,title.toString(),tempDestination);
          title=null;
        }
      }
      public void handleSimpleTag(      HTML.Tag t,      MutableAttributeSet a,      int pos){
        if (HTML.Tag.META.equals(t)) {
          Object nameO=a.getAttribute(HTML.Attribute.NAME);
          Object valueO=a.getAttribute(HTML.Attribute.CONTENT);
          if (nameO == null || valueO == null)           return;
          String name=nameO.toString();
          if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
            trimPut(ContentModel.PROP_AUTHOR,valueO,tempDestination);
          }
          if (name.equalsIgnoreCase(""String_Node_Str"") || name.equalsIgnoreCase(""String_Node_Str"")) {
            trimPut(ContentModel.PROP_DESCRIPTION,valueO,tempDestination);
          }
        }
      }
      public void handleError(      String errorMsg,      int pos){
      }
    }
;
    String charsetGuess=""String_Node_Str"";
    int tries=0;
    while (tries < 3) {
      tempDestination.clear();
      Reader r=null;
      InputStream cis=null;
      try {
        cis=reader.getContentInputStream();
        r=new InputStreamReader(cis);
        HTMLEditorKit.Parser parser=new ParserDelegator();
        parser.parse(r,callback,tries > 0);
        destination.putAll(tempDestination);
        break;
      }
 catch (      ChangedCharSetException ccse) {
        tries++;
        charsetGuess=ccse.getCharSetSpec();
        int begin=charsetGuess.indexOf(""String_Node_Str"");
        if (begin > 0)         charsetGuess=charsetGuess.substring(begin + 8,charsetGuess.length());
        reader=reader.getReader();
      }
 finally {
        if (r != null)         r.close();
        if (cis != null)         cis.close();
      }
    }
  }
 catch (  IOException e) {
    throw new ContentIOException(""String_Node_Str"" + ""String_Node_Str"" + reader,e);
  }
}",0.9971914753015034
172355,"public HtmlMetadataExtracter(){
  super(MimetypeMap.MIMETYPE_HTML,1.0,1000);
}","public HtmlMetadataExtracter(){
  super(MIMETYPES,1.0,1000);
}",0.8714285714285714
172356,"public void handleEndTag(HTML.Tag t,int pos){
  if (HTML.Tag.HEAD.equals(t)) {
    inHead=false;
  }
 else   if (HTML.Tag.TITLE.equals(t)) {
    trimPut(ContentModel.PROP_TITLE,title.toString(),tempDestination);
    title=null;
  }
}","public void handleEndTag(HTML.Tag t,int pos){
  if (HTML.Tag.HEAD.equals(t)) {
    inHead=false;
  }
 else   if (HTML.Tag.TITLE.equals(t) && title != null) {
    trimPut(ContentModel.PROP_TITLE,title.toString(),tempDestination);
    title=null;
  }
}",0.9648033126293996
172357,"/** 
 * Relink the content data from a new node to an existing node to preserve the version history.
 * @param oldNodeRef NodeRef
 * @param newNodeRef NodeRef
 */
public void relinkNode(NodeRef tempNodeRef,NodeRef nodeToMoveRef,NodeRef newParentNodeRef,String newName) throws FileNotFoundException, FileExistsException {
  org.alfresco.service.cmr.model.FileInfo tempFileInfo=fileFolderService.getFileInfo(tempNodeRef);
  org.alfresco.service.cmr.model.FileInfo fileToMoveInfo=fileFolderService.getFileInfo(nodeToMoveRef);
  String tempName=tempFileInfo.getName();
  try {
    fileFolderService.rename(tempNodeRef,newName);
    fileFolderService.rename(nodeToMoveRef,tempName);
  }
 catch (  org.alfresco.service.cmr.model.FileNotFoundException e) {
    throw new FileNotFoundException(e.getMessage());
  }
catch (  org.alfresco.service.cmr.model.FileExistsException e) {
    throw new FileExistsException(e.getMessage());
  }
  if (!tempFileInfo.isFolder() && !fileToMoveInfo.isFolder()) {
    ContentData oldContentData=tempFileInfo.getContentData();
    if (oldContentData == null) {
      String mimetype=mimetypeService.guessMimetype(tempName);
      oldContentData=ContentData.setMimetype(null,mimetype);
    }
    ContentData newContentData=fileToMoveInfo.getContentData();
    if (newContentData == null) {
      String mimetype=mimetypeService.guessMimetype(newName);
      newContentData=ContentData.setMimetype(null,mimetype);
    }
    nodeService.setProperty(tempNodeRef,ContentModel.PROP_CONTENT,newContentData);
    nodeService.setProperty(nodeToMoveRef,ContentModel.PROP_CONTENT,oldContentData);
  }
}","/** 
 * Relink the content data from a new node to an existing node to preserve the version history.
 * @param oldNodeRef NodeRef
 * @param newNodeRef NodeRef
 */
public void relinkNode(NodeRef tempNodeRef,NodeRef nodeToMoveRef,NodeRef newParentNodeRef,String newName) throws FileNotFoundException, FileExistsException {
  org.alfresco.service.cmr.model.FileInfo tempFileInfo=fileFolderService.getFileInfo(tempNodeRef);
  org.alfresco.service.cmr.model.FileInfo fileToMoveInfo=fileFolderService.getFileInfo(nodeToMoveRef);
  String tempName=tempFileInfo.getName();
  try {
    fileFolderService.rename(tempNodeRef,newName);
    fileFolderService.rename(nodeToMoveRef,tempName);
  }
 catch (  org.alfresco.service.cmr.model.FileNotFoundException e) {
    throw new FileNotFoundException(e.getMessage());
  }
catch (  org.alfresco.service.cmr.model.FileExistsException e) {
    throw new FileExistsException(e.getMessage());
  }
  if (!tempFileInfo.isFolder() && !fileToMoveInfo.isFolder()) {
    ContentData oldContentData=tempFileInfo.getContentData();
    if (oldContentData == null) {
      String mimetype=mimetypeService.guessMimetype(tempName);
      oldContentData=ContentData.setMimetype(null,mimetype);
    }
    ContentData newContentData=fileToMoveInfo.getContentData();
    String mimetype=mimetypeService.guessMimetype(newName);
    newContentData=ContentData.setMimetype(newContentData,mimetype);
    nodeService.setProperty(tempNodeRef,ContentModel.PROP_CONTENT,newContentData);
    nodeService.setProperty(nodeToMoveRef,ContentModel.PROP_CONTENT,oldContentData);
  }
}",0.9325
172358,"/** 
 * Navigate a Node.
 * @param nodeRef  the node to navigate
 */
private void walkNode(NodeRef nodeRef,ExporterCrawlerParameters parameters,Exporter exporter){
  QName type=nodeService.getType(nodeRef);
  if (isExcludedURI(parameters.getExcludeNamespaceURIs(),type.getNamespaceURI())) {
    return;
  }
  flushCount++;
  if (flushCount > flushThreshold) {
    AlfrescoTransactionSupport.flush();
    flushCount=0;
  }
  exporter.startNode(nodeRef);
  exporter.startAspects(nodeRef);
  Set<QName> aspects=nodeService.getAspects(nodeRef);
  for (  QName aspect : aspects) {
    if (!isExcludedURI(parameters.getExcludeNamespaceURIs(),aspect.getNamespaceURI())) {
      exporter.startAspect(nodeRef,aspect);
      exporter.endAspect(nodeRef,aspect);
    }
  }
  exporter.endAspects(nodeRef);
  Set<AccessPermission> permissions=permissionService.getAllSetPermissions(nodeRef);
  if (permissions.size() > 0) {
    exporter.startACL(nodeRef);
    for (    AccessPermission permission : permissions) {
      exporter.permission(nodeRef,permission);
    }
    exporter.endACL(nodeRef);
  }
  exporter.startProperties(nodeRef);
  Map<QName,Serializable> properties=nodeService.getProperties(nodeRef);
  for (  QName property : properties.keySet()) {
    if (isExcludedURI(parameters.getExcludeNamespaceURIs(),property.getNamespaceURI())) {
      continue;
    }
    Object value=properties.get(property);
    if (!parameters.isCrawlNullProperties() && value == null) {
      continue;
    }
    exporter.startProperty(nodeRef,property);
    PropertyDefinition propertyDef=dictionaryService.getProperty(property);
    boolean isContentProperty=(propertyDef == null) ? false : propertyDef.getDataType().getName().equals(DataTypeDefinition.CONTENT);
    if (isContentProperty) {
      ContentReader reader=contentService.getReader(nodeRef,property);
      if (reader == null || reader.exists() == false) {
        exporter.warning(""String_Node_Str"" + property + ""String_Node_Str""+ nodeRef);
      }
 else {
        if (parameters.isCrawlContent()) {
          InputStream inputStream=reader.getContentInputStream();
          try {
            exporter.content(nodeRef,property,inputStream,reader.getContentData());
          }
  finally {
            try {
              inputStream.close();
            }
 catch (            IOException e) {
              throw new ExporterException(""String_Node_Str"" + nodeRef,e);
            }
          }
        }
 else {
          exporter.content(nodeRef,property,null,null);
        }
      }
    }
 else {
      try {
        if (value instanceof Collection) {
          exporter.value(nodeRef,property,(Collection)value);
        }
 else {
          exporter.value(nodeRef,property,value);
        }
      }
 catch (      TypeConversionException e) {
        exporter.warning(""String_Node_Str"" + property + ""String_Node_Str"");
        exporter.value(nodeRef,property,properties.get(property).toString());
      }
    }
    exporter.endProperty(nodeRef,property);
  }
  exporter.endProperties(nodeRef);
  if (parameters.isCrawlChildNodes()) {
    exporter.startAssocs(nodeRef);
    List<ChildAssociationRef> childAssocs=nodeService.getChildAssocs(nodeRef);
    for (int i=0; i < childAssocs.size(); i++) {
      ChildAssociationRef childAssoc=childAssocs.get(i);
      QName childAssocType=childAssoc.getTypeQName();
      if (isExcludedURI(parameters.getExcludeNamespaceURIs(),childAssocType.getNamespaceURI())) {
        continue;
      }
      if (i == 0 || childAssocs.get(i - 1).getTypeQName().equals(childAssocType) == false) {
        exporter.startAssoc(nodeRef,childAssocType);
      }
      if (!isExcludedURI(parameters.getExcludeNamespaceURIs(),childAssoc.getQName().getNamespaceURI())) {
        walkNode(childAssoc.getChildRef(),parameters,exporter);
      }
      if (i == childAssocs.size() - 1 || childAssocs.get(i + 1).getTypeQName().equals(childAssocType) == false) {
        exporter.endAssoc(nodeRef,childAssocType);
      }
    }
    exporter.endAssocs(nodeRef);
  }
  exporter.endNode(nodeRef);
}","/** 
 * Navigate a Node.
 * @param nodeRef  the node to navigate
 */
private void walkNode(NodeRef nodeRef,ExporterCrawlerParameters parameters,Exporter exporter){
  QName type=nodeService.getType(nodeRef);
  if (isExcludedURI(parameters.getExcludeNamespaceURIs(),type.getNamespaceURI())) {
    return;
  }
  flushCount++;
  if (flushCount > flushThreshold) {
    AlfrescoTransactionSupport.flush();
    flushCount=0;
  }
  exporter.startNode(nodeRef);
  exporter.startAspects(nodeRef);
  Set<QName> aspects=nodeService.getAspects(nodeRef);
  for (  QName aspect : aspects) {
    if (!isExcludedURI(parameters.getExcludeNamespaceURIs(),aspect.getNamespaceURI())) {
      exporter.startAspect(nodeRef,aspect);
      exporter.endAspect(nodeRef,aspect);
    }
  }
  exporter.endAspects(nodeRef);
  Set<AccessPermission> permissions=permissionService.getAllSetPermissions(nodeRef);
  boolean inheritPermissions=permissionService.getInheritParentPermissions(nodeRef);
  if (permissions.size() > 0 || !inheritPermissions) {
    exporter.startACL(nodeRef);
    for (    AccessPermission permission : permissions) {
      exporter.permission(nodeRef,permission);
    }
    exporter.endACL(nodeRef);
  }
  exporter.startProperties(nodeRef);
  Map<QName,Serializable> properties=nodeService.getProperties(nodeRef);
  for (  QName property : properties.keySet()) {
    if (isExcludedURI(parameters.getExcludeNamespaceURIs(),property.getNamespaceURI())) {
      continue;
    }
    Object value=properties.get(property);
    if (!parameters.isCrawlNullProperties() && value == null) {
      continue;
    }
    exporter.startProperty(nodeRef,property);
    PropertyDefinition propertyDef=dictionaryService.getProperty(property);
    boolean isContentProperty=(propertyDef == null) ? false : propertyDef.getDataType().getName().equals(DataTypeDefinition.CONTENT);
    if (isContentProperty) {
      ContentReader reader=contentService.getReader(nodeRef,property);
      if (reader == null || reader.exists() == false) {
        exporter.warning(""String_Node_Str"" + property + ""String_Node_Str""+ nodeRef);
      }
 else {
        if (parameters.isCrawlContent()) {
          InputStream inputStream=reader.getContentInputStream();
          try {
            exporter.content(nodeRef,property,inputStream,reader.getContentData());
          }
  finally {
            try {
              inputStream.close();
            }
 catch (            IOException e) {
              throw new ExporterException(""String_Node_Str"" + nodeRef,e);
            }
          }
        }
 else {
          exporter.content(nodeRef,property,null,null);
        }
      }
    }
 else {
      try {
        if (value instanceof Collection) {
          exporter.value(nodeRef,property,(Collection)value);
        }
 else {
          exporter.value(nodeRef,property,value);
        }
      }
 catch (      TypeConversionException e) {
        exporter.warning(""String_Node_Str"" + property + ""String_Node_Str"");
        exporter.value(nodeRef,property,properties.get(property).toString());
      }
    }
    exporter.endProperty(nodeRef,property);
  }
  exporter.endProperties(nodeRef);
  if (parameters.isCrawlChildNodes()) {
    exporter.startAssocs(nodeRef);
    List<ChildAssociationRef> childAssocs=nodeService.getChildAssocs(nodeRef);
    for (int i=0; i < childAssocs.size(); i++) {
      ChildAssociationRef childAssoc=childAssocs.get(i);
      QName childAssocType=childAssoc.getTypeQName();
      if (isExcludedURI(parameters.getExcludeNamespaceURIs(),childAssocType.getNamespaceURI())) {
        continue;
      }
      if (i == 0 || childAssocs.get(i - 1).getTypeQName().equals(childAssocType) == false) {
        exporter.startAssoc(nodeRef,childAssocType);
      }
      if (!isExcludedURI(parameters.getExcludeNamespaceURIs(),childAssoc.getQName().getNamespaceURI())) {
        walkNode(childAssoc.getChildRef(),parameters,exporter);
      }
      if (i == childAssocs.size() - 1 || childAssocs.get(i + 1).getTypeQName().equals(childAssocType) == false) {
        exporter.endAssoc(nodeRef,childAssocType);
      }
    }
    exporter.endAssocs(nodeRef);
  }
  exporter.endNode(nodeRef);
}",0.9868613138686132
172359,"@Test public void test(){
  String codeOfAccounts=""String_Node_Str"";
  String organizationNo=""String_Node_Str"";
  String productNo=""String_Node_Str"";
  String customerNo=""String_Node_Str"";
  String accountNo2=""String_Node_Str"";
  String accountNo3=""String_Node_Str"";
  AccountNoSection.Builder accountNoSectionBuilder=AccountNoSection.builder();
  accountNoSectionBuilder.codeOfAccounts(codeOfAccounts);
  accountNoSectionBuilder.organizationNo(organizationNo);
  accountNoSectionBuilder.productNo(productNo);
  accountNoSectionBuilder.customerNo(customerNo);
  AccountNoSection acocuntNoSection=accountNoSectionBuilder.build();
  String accountNo1=accountNoService.createAccountNo(acocuntNoSection);
  accountNo1=accountNoService.getAccountNo(acocuntNoSection);
  Operation.Builder operationBuilder=Operation.builder();
  operationBuilder.openCustomer(codeOfAccounts,accountNo1,organizationNo,productNo,customerNo);
  Operation operation=operationBuilder.build();
  accountingService.post(operation);
  Voucher.Builder voucherBuilder=Voucher.builder();
  Voucher voucher=voucherBuilder.build();
  Transaction.Builder transactionBuilder=Transaction.builder();
  transactionBuilder.associate(voucher);
  transactionBuilder.credit(codeOfAccounts,accountNo1,new BigDecimal(""String_Node_Str""));
  transactionBuilder.debit(codeOfAccounts,accountNo2,new BigDecimal(""String_Node_Str""));
  transactionBuilder.debit(codeOfAccounts,accountNo3,new BigDecimal(""String_Node_Str""));
  Transaction transaction=transactionBuilder.build();
  accountingService.post(transaction);
  TransactionFlag[] transflags={TransactionFlag.RECORD};
  TransactionSymbol[] transSymbols={TransactionSymbol.CREDIT};
  List<TransactionEntry> transactionEntries=accountingService.auditTransaction(codeOfAccounts,LocalDate.now(),accountNo1,transflags,transSymbols,voucher.getBusinessId());
  operationBuilder=Operation.builder();
  operationBuilder.freeze(codeOfAccounts,accountNo1,new BigDecimal(""String_Node_Str""));
  operationBuilder.lock(codeOfAccounts,accountNo1,voucher.getBusinessId());
  operation=operationBuilder.build();
  accountingService.post(operation);
  OperationSymbol[] operSymbols={OperationSymbol.OPEN,OperationSymbol.CLOSE};
  List<OperationEntry> operationEntries=accountingService.auditOperation(codeOfAccounts,LocalDate.now(),accountNo3,operSymbols,voucher.getBusinessId());
}","@Test public void test(){
  String accountsNo=""String_Node_Str"";
  String organizationNo=""String_Node_Str"";
  String productNo=""String_Node_Str"";
  String customerNo=""String_Node_Str"";
  String accountNo2=""String_Node_Str"";
  String accountNo3=""String_Node_Str"";
  AccountNoSection.Builder accountNoSectionBuilder=AccountNoSection.builder();
  accountNoSectionBuilder.accountsNo(accountsNo);
  accountNoSectionBuilder.organizationNo(organizationNo);
  accountNoSectionBuilder.productNo(productNo);
  accountNoSectionBuilder.customerNo(customerNo);
  AccountNoSection acocuntNoSection=accountNoSectionBuilder.build();
  String accountNo1=accountNoService.createAccountNo(acocuntNoSection);
  accountNo1=accountNoService.getAccountNo(acocuntNoSection);
  Operation.Builder operationBuilder=Operation.builder();
  operationBuilder.openCustomer(accountsNo,accountNo1,organizationNo,productNo,customerNo);
  Operation operation=operationBuilder.build();
  accountingService.post(operation);
  Voucher.Builder voucherBuilder=Voucher.builder();
  Voucher voucher=voucherBuilder.build();
  Transaction.Builder transactionBuilder=Transaction.builder();
  transactionBuilder.associate(voucher);
  transactionBuilder.credit(accountsNo,accountNo1,new BigDecimal(""String_Node_Str""));
  transactionBuilder.debit(accountsNo,accountNo2,new BigDecimal(""String_Node_Str""));
  transactionBuilder.debit(accountsNo,accountNo3,new BigDecimal(""String_Node_Str""));
  Transaction transaction=transactionBuilder.build();
  accountingService.post(transaction);
  TransactionFlag[] transflags={TransactionFlag.RECORD};
  TransactionSymbol[] transSymbols={TransactionSymbol.CREDIT};
  List<TransactionEntry> transactionEntries=accountingService.auditTransaction(accountsNo,LocalDate.now(),accountNo1,transflags,transSymbols,voucher.getBusinessId());
  operationBuilder=Operation.builder();
  operationBuilder.freeze(accountsNo,accountNo1,new BigDecimal(""String_Node_Str""));
  operationBuilder.lock(accountsNo,accountNo1,voucher.getBusinessId());
  operation=operationBuilder.build();
  accountingService.post(operation);
  OperationSymbol[] operSymbols={OperationSymbol.OPEN,OperationSymbol.CLOSE};
  List<OperationEntry> operationEntries=accountingService.auditOperation(accountsNo,LocalDate.now(),accountNo3,operSymbols,voucher.getBusinessId());
}",0.9432109308283518
172360,"public CopyResult getRewards(int playerId,int copyId,CopyResult result){
  Player player=playerService.getPlayer(playerId);
  int star=result.star;
  result.victory=true;
  CopyConfig cfg=ConfigData.getConfig(CopyConfig.class,copyId);
  if (cfg.needEnergy > 0) {
    if (cfg.type == CopyInstance.TYPE_TRAVERSING) {
      playerService.decCurrency(playerId,Goods.TRAVERSING_ENERGY,cfg.needEnergy,LogConsume.TRAVERSING_COPY,cfg.id);
    }
 else {
      playerService.decEnergy(playerId,cfg.needEnergy,LogConsume.COPY_ENERGY,copyId);
    }
  }
  if (cfg.type == CopyInstance.TYPE_TRAVERSING) {
    Team team=teamService.getTeam(player.getTeamId());
    int leaderId=team.getLeader();
    if (playerId == leaderId) {
      traversingService.remvoeMap(playerId,team.getMapId());
    }
  }
  CopyInstance copy=instances.get(playerService.getPlayer(playerId).getCopyId());
  List<GoodsEntry> items=calculateCopyReward(playerId,copyId,star);
  if (cfg.type == CopyInstance.TYPE_LEADAWAY || cfg.type == CopyInstance.TYPE_GOLD) {
    for (    Reward reward : result.rewards) {
      items.add(new GoodsEntry(reward.id,reward.count));
    }
  }
  result.rewards=new ArrayList<Reward>();
  if (cfg.type == CopyInstance.TYPE_ENDLESS) {
    EndlessAttach attach=endlessLogic.getAttach(playerId);
    EndlessCfg eCfg=endlessLogic.getConfig();
    int multiple=(int)((attach.getCurrLayer() / eCfg.sectionLayer + 1) * eCfg.sectionMultiple);
    for (    GoodsEntry g : items) {
      g.count*=multiple;
    }
  }
 else   if (cfg.type == CopyInstance.TYPE_TRAVERSING) {
    List<Reward> affixReward=traversingService.takeReward(playerId,playerId,copy.getTraverseMap());
    if (affixReward != null) {
      result.rewards.addAll(affixReward);
    }
  }
  goodsService.addRewards(playerId,items,LogConsume.COPY_REWARD,copyId);
  for (  GoodsEntry g : items) {
    Reward reward=new Reward();
    reward.id=g.id;
    reward.count=g.count;
    result.rewards.add(reward);
  }
  String myName=playerService.getPlayer(playerId).getName();
  for (  GoodsNotice g : copy.getSpecReward()) {
    messageService.sendSysMsg(g.getNoticeId(),myName,g.getGoodsName());
  }
  if (cfg.type == CopyInstance.TYPE_COMMON) {
    CopyRank rank=updateCopyRank(playerId,copyId,result.time);
    result.passTime=rank.getPassTime();
    result.name=rank.getName();
  }
  return result;
}","public CopyResult getRewards(int playerId,int copyId,CopyResult result){
  Player player=playerService.getPlayer(playerId);
  int star=result.star;
  result.victory=true;
  CopyConfig cfg=ConfigData.getConfig(CopyConfig.class,copyId);
  if (cfg.needEnergy > 0) {
    if (cfg.type == CopyInstance.TYPE_TRAVERSING) {
      playerService.decCurrency(playerId,Goods.TRAVERSING_ENERGY,cfg.needEnergy,LogConsume.TRAVERSING_COPY,cfg.id);
    }
 else {
      playerService.decEnergy(playerId,cfg.needEnergy,LogConsume.COPY_ENERGY,copyId);
    }
  }
  if (cfg.type == CopyInstance.TYPE_TRAVERSING) {
    Team team=teamService.getTeam(player.getTeamId());
    int leaderId=team.getLeader();
    if (playerId == leaderId) {
      traversingService.remvoeMap(playerId,team.getMapId());
    }
  }
  CopyInstance copy=instances.get(playerService.getPlayer(playerId).getCopyId());
  List<GoodsEntry> items=calculateCopyReward(playerId,copyId,star);
  if (cfg.type == CopyInstance.TYPE_LEADAWAY || cfg.type == CopyInstance.TYPE_GOLD) {
    for (    Reward reward : result.rewards) {
      items.add(new GoodsEntry(reward.id,reward.count));
    }
  }
  result.rewards=new ArrayList<Reward>();
  if (cfg.type == CopyInstance.TYPE_ENDLESS) {
    EndlessAttach attach=endlessLogic.getAttach(playerId);
    EndlessCfg eCfg=endlessLogic.getConfig();
    int multiple=(int)((attach.getCurrLayer() / eCfg.sectionLayer + 1) * eCfg.sectionMultiple);
    for (    GoodsEntry g : items) {
      g.count*=multiple;
    }
    titleService.complete(playerId,TitleConsts.WJXW_LAYER,attach.getMaxLayer(),ActivityConsts.UpdateType.T_VALUE);
  }
 else   if (cfg.type == CopyInstance.TYPE_TRAVERSING) {
    List<Reward> affixReward=traversingService.takeReward(playerId,playerId,copy.getTraverseMap());
    if (affixReward != null) {
      result.rewards.addAll(affixReward);
    }
  }
  goodsService.addRewards(playerId,items,LogConsume.COPY_REWARD,copyId);
  for (  GoodsEntry g : items) {
    Reward reward=new Reward();
    reward.id=g.id;
    reward.count=g.count;
    result.rewards.add(reward);
  }
  String myName=playerService.getPlayer(playerId).getName();
  for (  GoodsNotice g : copy.getSpecReward()) {
    messageService.sendSysMsg(g.getNoticeId(),myName,g.getGoodsName());
  }
  if (cfg.type == CopyInstance.TYPE_COMMON) {
    CopyRank rank=updateCopyRank(playerId,copyId,result.time);
    result.passTime=rank.getPassTime();
    result.name=rank.getName();
  }
  return result;
}",0.9760566312721216
172361,"public void onLogin(int playerId){
  RankingList<FightingRankEntity> rank=rankService.getRankingList(RankService.TYPE_FIGHTING);
  FightingRankEntity rankEntity=rank.getEntity(playerId);
  if (rankEntity != null) {
    checkTitle(playerId,TitleConsts.FIGHTING,rankEntity.getFight(),ActivityConsts.UpdateType.T_VALUE,null);
  }
  int ladderLevel=ladderService.getRank(playerId);
  if (ladderLevel != 0) {
    checkTitle(playerId,TitleConsts.LADDER,ladderLevel,ActivityConsts.UpdateType.T_VALUE,null);
  }
}","public void onLogin(int playerId){
  doInit(playerId);
  RankingList<FightingRankEntity> rank=rankService.getRankingList(RankService.TYPE_FIGHTING);
  FightingRankEntity rankEntity=rank.getEntity(playerId);
  if (rankEntity != null) {
    checkTitle(playerId,TitleConsts.FIGHTING,rankEntity.getFight(),ActivityConsts.UpdateType.T_VALUE,null);
  }
  int ladderLevel=ladderService.getRank(playerId);
  if (ladderLevel != 0) {
    checkTitle(playerId,TitleConsts.LADDER,ladderLevel,ActivityConsts.UpdateType.T_VALUE,null);
  }
}",0.9805825242718448
172362,"public void doInit(int playerId){
  PlayerData data=playerService.getPlayerData(playerId);
  for (  Object obj : GameData.getConfigs(TitleConfig.class)) {
    TitleConfig cfg=(TitleConfig)obj;
    Title title=new Title();
    title.setId(cfg.id);
    title.setOpenFlag(false);
    title.setCondType(cfg.titleSubType);
    data.getTitleMap().put(cfg.id,title);
  }
}","public void doInit(int playerId){
  PlayerData data=playerService.getPlayerData(playerId);
  for (  Object obj : GameData.getConfigs(TitleConfig.class)) {
    TitleConfig cfg=(TitleConfig)obj;
    if (!data.getTitleMap().containsKey(cfg.id)) {
      Title title=new Title();
      title.setId(cfg.id);
      title.setOpenFlag(false);
      title.setCondType(cfg.titleSubType);
      data.getTitleMap().put(cfg.id,title);
    }
  }
}",0.9159347553324968
172363,"/** 
 * 发奖励，活动结束或者所有boss打死
 */
private void sendAward(){
  try {
    awardLock.lock();
    if (worldBossData.isbAward()) {
      return;
    }
    players.clear();
    worldBossData.setbAward(true);
    messageService.sendSysMsg(4);
    multiService.clearGroup(Scene.WORLD_BOSSS_PVE);
    List<HurtRecord> list=new ArrayList<>(worldBossData.getHurtMap().values());
    Collections.sort(list,SORT);
    List<GoodsEntry> killRewards=new ArrayList<>();
    Map<Integer,int[]> lastBeatReward=ConfigData.globalParam().worldBossLastFightReward;
    Map<Integer,int[]> killReward=ConfigData.globalParam().worldBossKillReward;
    Map<Integer,List<GoodsEntry>> beatRewardMap=new HashMap<>();
    for (    Map.Entry<Integer,Integer> s : worldBossData.getKillMap().entrySet()) {
      List<GoodsEntry> lastBeatRewards=beatRewardMap.get(s.getValue());
      if (lastBeatRewards == null) {
        lastBeatRewards=new ArrayList<>();
        beatRewardMap.put(s.getValue(),lastBeatRewards);
      }
      int[] nArr=lastBeatReward.get(s.getKey());
      for (int k=0; k < nArr.length; k+=2) {
        GoodsEntry goodsEntry=new GoodsEntry(nArr[k],nArr[k + 1]);
        lastBeatRewards.add(goodsEntry);
      }
      nArr=killReward.get(s.getKey());
      for (int k=0; k < nArr.length; k+=2) {
        GoodsEntry goodsEntry=new GoodsEntry(nArr[k],nArr[k + 1]);
        killRewards.add(goodsEntry);
      }
    }
    String lastTitle=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_LAST_BEAT_TITLE).tips;
    String lastContent=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_LAST_BEAT_CONTENT).tips;
    for (    Map.Entry<Integer,List<GoodsEntry>> s3 : beatRewardMap.entrySet()) {
      mailService.sendSysMail(lastTitle,lastContent,s3.getValue(),s3.getKey(),LogConsume.WORLD_BOSS_LAST_BEAT);
    }
    List<GoodsEntry> rewards=new ArrayList<>();
    int[][] rankReward=ConfigData.globalParam().worldBossReward;
    int[][] rankRewardRank=ConfigData.globalParam().worldBossRewardRank;
    int rankLen=rankRewardRank.length;
    WorldBossReward rewardCli=new WorldBossReward();
    rewardCli.hurtReward=new ArrayList<>();
    rewardCli.rankReward=new ArrayList<>();
    for (int i=0; i < list.size(); i++) {
      HurtRecord hr=list.get(i);
      int rank=i + 1;
      hr.setRank(rank);
      rewards.clear();
      for (int k=0; k < rankLen; k++) {
        int[] rankArr=rankRewardRank[k];
        int minRank=rankArr[0];
        int maxRank=rankArr[1];
        if (rank >= minRank && rank <= maxRank) {
          int[] nArr=rankReward[k];
          for (int n=0; n < nArr.length; n+=2) {
            GoodsEntry goodsEntry=new GoodsEntry(nArr[n],nArr[n + 1]);
            rewards.add(goodsEntry);
            Reward reward=new Reward();
            reward.count=nArr[n + 1];
            reward.id=nArr[n];
            rewardCli.rankReward.add(reward);
          }
          break;
        }
      }
      int itemId=ConfigData.globalParam().worldBossHurtReward[0];
      int num=ConfigData.globalParam().worldBossHurtReward[1];
      rewards.add(new GoodsEntry(itemId,num));
      Reward reward=new Reward();
      reward.count=itemId;
      reward.id=num;
      rewardCli.hurtReward.add(reward);
      String killTitle=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_TITLE).tips;
      String killContent=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_CONTENT).tips;
      String beatTitle=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_TITLE).tips;
      String beatContent=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_CONTENT).tips;
      mailService.sendSysMail(killTitle,killContent,rewards,hr.getPlayerId(),LogConsume.WORLD_BOSS_REWARD);
      if (!killRewards.isEmpty()) {
        mailService.sendSysMail(beatTitle,beatContent,killRewards,hr.getPlayerId(),LogConsume.WORLD_BOSS_KILL);
      }
    }
    saveData();
  }
  finally {
    awardLock.unlock();
  }
}","/** 
 * 发奖励，活动结束或者所有boss打死
 */
private void sendAward(){
  try {
    awardLock.lock();
    if (worldBossData.isbAward()) {
      return;
    }
    players.clear();
    worldBossData.setbAward(true);
    messageService.sendSysMsg(4);
    multiService.clearGroup(Scene.WORLD_BOSSS_PVE);
    List<GoodsEntry> killRewards=new ArrayList<>();
    Map<Integer,int[]> lastBeatReward=ConfigData.globalParam().worldBossLastFightReward;
    Map<Integer,int[]> killReward=ConfigData.globalParam().worldBossKillReward;
    Map<Integer,List<GoodsEntry>> beatRewardMap=new HashMap<>();
    for (    Map.Entry<Integer,Integer> s : worldBossData.getKillMap().entrySet()) {
      List<GoodsEntry> lastBeatRewards=beatRewardMap.get(s.getValue());
      if (lastBeatRewards == null) {
        lastBeatRewards=new ArrayList<>();
        beatRewardMap.put(s.getValue(),lastBeatRewards);
      }
      int[] nArr=lastBeatReward.get(s.getKey());
      for (int k=0; k < nArr.length; k+=2) {
        GoodsEntry goodsEntry=new GoodsEntry(nArr[k],nArr[k + 1]);
        lastBeatRewards.add(goodsEntry);
      }
      nArr=killReward.get(s.getKey());
      for (int k=0; k < nArr.length; k+=2) {
        GoodsEntry goodsEntry=new GoodsEntry(nArr[k],nArr[k + 1]);
        killRewards.add(goodsEntry);
      }
    }
    String lastTitle=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_LAST_BEAT_TITLE).tips;
    String lastContent=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_LAST_BEAT_CONTENT).tips;
    for (    Map.Entry<Integer,List<GoodsEntry>> s3 : beatRewardMap.entrySet()) {
      mailService.sendSysMail(lastTitle,lastContent,s3.getValue(),s3.getKey(),LogConsume.WORLD_BOSS_LAST_BEAT);
    }
    List<GoodsEntry> rewards=new ArrayList<>();
    int[][] rankReward=ConfigData.globalParam().worldBossReward;
    int[][] rankRewardRank=ConfigData.globalParam().worldBossRewardRank;
    int rankLen=rankRewardRank.length;
    WorldBossReward rewardCli=new WorldBossReward();
    rewardCli.hurtReward=new ArrayList<>();
    rewardCli.rankReward=new ArrayList<>();
    List<HurtRecord> list=hurtRank();
    for (int i=0; i < list.size(); i++) {
      HurtRecord hr=list.get(i);
      int rank=i + 1;
      hr.setRank(rank);
      rewards.clear();
      for (int k=0; k < rankLen; k++) {
        int[] rankArr=rankRewardRank[k];
        int minRank=rankArr[0];
        int maxRank=rankArr[1];
        if (rank >= minRank && rank <= maxRank) {
          int[] nArr=rankReward[k];
          for (int n=0; n < nArr.length; n+=2) {
            GoodsEntry goodsEntry=new GoodsEntry(nArr[n],nArr[n + 1]);
            rewards.add(goodsEntry);
            Reward reward=new Reward();
            reward.count=nArr[n + 1];
            reward.id=nArr[n];
            rewardCli.rankReward.add(reward);
          }
          break;
        }
      }
      int itemId=ConfigData.globalParam().worldBossHurtReward[0];
      int num=ConfigData.globalParam().worldBossHurtReward[1];
      rewards.add(new GoodsEntry(itemId,num));
      Reward reward=new Reward();
      reward.count=itemId;
      reward.id=num;
      rewardCli.hurtReward.add(reward);
      String killTitle=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_TITLE).tips;
      String killContent=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_CONTENT).tips;
      String beatTitle=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_TITLE).tips;
      String beatContent=ConfigData.getConfig(ErrCode.class,Response.WORLD_BOSS_KILL_CONTENT).tips;
      mailService.sendSysMail(killTitle,killContent,rewards,hr.getPlayerId(),LogConsume.WORLD_BOSS_REWARD);
      if (!killRewards.isEmpty()) {
        mailService.sendSysMail(beatTitle,beatContent,killRewards,hr.getPlayerId(),LogConsume.WORLD_BOSS_KILL);
      }
    }
    saveData();
  }
  finally {
    awardLock.unlock();
  }
}",0.9805587743015322
172364,"/** 
 * 获取实时伤害排名
 */
public Object getRealTimeHurtList(int playerId){
  WorldBossHurtRankVO vo=new WorldBossHurtRankVO();
  vo.rankList=new ArrayList<>();
  for (  HurtRecord hr : treeMap.values()) {
    WorldBossHurtVO vo1=new WorldBossHurtVO();
    vo1.hurt=hr.getHurt();
    vo1.nickName=hr.getName();
    vo.rankList.add(vo1);
  }
  HurtRecord hr=worldBossData.getHurtMap().get(playerId);
  if (hr != null) {
    vo.selfRank=hr.getRank();
    vo.hurt=hr.getCurHurt();
  }
  return vo;
}","/** 
 * 获取实时伤害排名
 */
public Object getRealTimeHurtList(int playerId){
  List<HurtRecord> listTmp=new ArrayList<>(treeMap.values());
  WorldBossHurtRankVO vo=toRankProto(listTmp);
  listTmp.clear();
  listTmp=null;
  HurtRecord hr=worldBossData.getHurtMap().get(playerId);
  if (hr != null) {
    vo.selfRank=hr.getRank();
    vo.hurt=hr.getCurHurt();
  }
  return vo;
}",0.2817229336437718
172365,"/** 
 * 伤害统计 需要同步处理
 * @param playerId
 * @param hurt
 */
private synchronized void onBossHurt(int playerId,int hurt,int bossId){
  WorldBoss boss=worldBossData.getWorldBossMap().get(bossId);
  if (boss == null || boss.getCurHp() <= 0) {
    ServerLogger.warn(""String_Node_Str"",bossId);
    return;
  }
  Player player=playerService.getPlayer(playerId);
  HurtRecord hr=worldBossData.getHurtMap().get(playerId);
  if (hr == null) {
    hr=new HurtRecord(playerId,player.getName());
    worldBossData.getHurtMap().put(playerId,hr);
  }
  int realHurt=hurt > boss.getCurHp() ? boss.getCurHp() : hurt;
  try {
    lock.lock();
    treeMap.remove(hr);
    hr.setHurt(hr.getHurt() + realHurt);
    hr.setName(player.getName());
    treeMap.put(hr,hr);
    if (treeMap.size() > size) {
      treeMap.pollLastEntry();
    }
    worldBossData.setbUpdate(true);
  }
  finally {
    lock.unlock();
  }
  boss.setCurHp(boss.getCurHp() - hurt);
  cleanupHurt(hr,bossId);
  hr.setCurHurt(hr.getCurHurt() + realHurt);
  MonsterHurtVO ret=new MonsterHurtVO();
  ret.monsterId=bossId;
  ret.curHp=boss.getCurHp() < 0 ? 0 : boss.getCurHp();
  ret.hurt=hurt;
  broadcast(CMD_MONSTER_INFO,ret);
  if (boss.getCurHp() <= 0) {
    worldBossData.getKillMap().put(bossId,playerId);
    Int2Param param=new Int2Param();
    param.param1=playerId;
    param.param2=bossId;
    broadcast(WorldBossExtension.BOSS_DEAD,param);
    worldBossData.getKillMap().put(bossId,playerId);
    MonsterRefreshConfig conf=ConfigData.getConfig(MonsterRefreshConfig.class,bossId);
    MonsterConfig conf1=ConfigData.getConfig(MonsterConfig.class,conf.monsterId);
    messageService.sendSysMsg(5,player.getName(),conf1.name);
    hurtRank();
    if (worldBossData.checkAllDead()) {
      sendAward();
    }
    if (bossId == worldBossData.getLastBossId()) {
      worldBossData.setLastKillPlayerId(playerId);
      worldBossData.setLastKillTime(System.currentTimeMillis());
    }
    return;
  }
}","/** 
 * 伤害统计 需要同步处理
 * @param playerId
 * @param hurt
 */
private synchronized void onBossHurt(int playerId,int hurt,int bossId){
  WorldBoss boss=worldBossData.getWorldBossMap().get(bossId);
  if (boss == null || boss.getCurHp() <= 0) {
    ServerLogger.warn(""String_Node_Str"",bossId);
    return;
  }
  Player player=playerService.getPlayer(playerId);
  HurtRecord hr=worldBossData.getHurtMap().get(playerId);
  if (hr == null) {
    hr=new HurtRecord(playerId,player.getName());
    worldBossData.getHurtMap().put(playerId,hr);
  }
  int realHurt=hurt > boss.getCurHp() ? boss.getCurHp() : hurt;
  try {
    lock.lock();
    treeMap.remove(hr);
    hr.setHurt(hr.getHurt() + realHurt);
    hr.setName(player.getName());
    treeMap.put(hr,hr);
    if (treeMap.size() > size) {
      treeMap.pollLastEntry();
    }
    worldBossData.setbUpdate(true);
  }
  finally {
    lock.unlock();
  }
  boss.setCurHp(boss.getCurHp() - hurt);
  cleanupHurt(hr,bossId);
  hr.setCurHurt(hr.getCurHurt() + realHurt);
  MonsterHurtVO ret=new MonsterHurtVO();
  ret.monsterId=bossId;
  ret.curHp=boss.getCurHp() < 0 ? 0 : boss.getCurHp();
  ret.hurt=hurt;
  broadcast(CMD_MONSTER_INFO,ret);
  if (boss.getCurHp() <= 0) {
    worldBossData.getKillMap().put(bossId,playerId);
    Int2Param param=new Int2Param();
    param.param1=playerId;
    param.param2=bossId;
    broadcast(WorldBossExtension.BOSS_DEAD,param);
    worldBossData.getKillMap().put(bossId,playerId);
    MonsterRefreshConfig conf=ConfigData.getConfig(MonsterRefreshConfig.class,bossId);
    MonsterConfig conf1=ConfigData.getConfig(MonsterConfig.class,conf.monsterId);
    messageService.sendSysMsg(5,player.getName(),conf1.name);
    Context.getThreadService().execute(new Runnable(){
      @Override public void run(){
        try {
          hurtRank();
        }
 catch (        Exception e) {
          ServerLogger.err(e,""String_Node_Str"");
        }
      }
    }
);
    if (worldBossData.checkAllDead()) {
      sendAward();
    }
    if (bossId == worldBossData.getLastBossId()) {
      worldBossData.setLastKillPlayerId(playerId);
      worldBossData.setLastKillTime(System.currentTimeMillis());
    }
    return;
  }
}",0.94316807738815
172366,"private void hurtRank(){
  List<HurtRecord> list=new ArrayList<>(worldBossData.getHurtMap().values());
  Collections.sort(list,SORT);
  worldBossData.getTop10().clear();
  worldBossData.getRankMap().clear();
  int size=0;
  for (int i=0; i < list.size(); i++) {
    HurtRecord hr=list.get(i);
    int rank=i + 1;
    hr.setRank(rank);
    HurtRecord selfRank=new HurtRecord();
    selfRank.setCurHurt(hr.getCurHurt());
    selfRank.setRank(rank);
    worldBossData.getRankMap().put(hr.getPlayerId(),selfRank);
    if (size < 10) {
      HurtRecord top10Hr=new HurtRecord(hr.getPlayerId(),hr.getName());
      top10Hr.setCurHurt(hr.getCurHurt());
      top10Hr.setHurt(hr.getHurt());
      top10Hr.setRank(hr.getRank());
      worldBossData.getTop10().add(top10Hr);
    }
  }
}","private List<HurtRecord> hurtRank(){
  try {
    wbLock.lock();
    List<HurtRecord> list=new ArrayList<>(worldBossData.getHurtMap().values());
    Collections.sort(list,SORT);
    List<HurtRecord> top10List=new ArrayList<>();
    Map<Integer,HurtRecord> rankMap=new HashMap<>();
    for (int i=0; i < list.size(); i++) {
      HurtRecord hr=list.get(i);
      int rank=i + 1;
      hr.setRank(rank);
      HurtRecord selfRank=new HurtRecord();
      selfRank.setCurHurt(hr.getCurHurt());
      selfRank.setRank(rank);
      rankMap.put(hr.getPlayerId(),selfRank);
      if (rank <= 10) {
        HurtRecord top10Hr=new HurtRecord(hr.getPlayerId(),hr.getName());
        top10Hr.setCurHurt(hr.getCurHurt());
        top10Hr.setHurt(hr.getHurt());
        top10Hr.setRank(hr.getRank());
        top10List.add(top10Hr);
      }
    }
    worldBossData.setTop10(top10List);
    worldBossData.setRankMap(rankMap);
    return list;
  }
  finally {
    wbLock.unlock();
  }
}",0.4446991404011461
172367,"/** 
 * 获取历史伤害排名
 */
public Object getHistoryHurtList(int playerId){
  WorldBossHurtRankVO vo=new WorldBossHurtRankVO();
  vo.rankList=new ArrayList<>();
  for (  HurtRecord hr : worldBossData.getTop10()) {
    WorldBossHurtVO vo1=new WorldBossHurtVO();
    vo1.hurt=hr.getHurt();
    vo1.nickName=hr.getName();
    vo.rankList.add(vo1);
  }
  HurtRecord hr=worldBossData.getRankMap().get(playerId);
  if (hr != null) {
    vo.selfRank=hr.getRank();
    vo.hurt=hr.getCurHurt();
  }
  return vo;
}","/** 
 * 获取历史伤害排名
 */
public Object getHistoryHurtList(int playerId){
  List<HurtRecord> list=worldBossData.getTop10();
  WorldBossHurtRankVO vo=toRankProto(list);
  Map<Integer,HurtRecord> rankMap=worldBossData.getRankMap();
  HurtRecord hr=rankMap.get(playerId);
  if (hr != null) {
    vo.selfRank=hr.getRank();
    vo.hurt=hr.getCurHurt();
  }
  return vo;
}",0.2703962703962704
172368,"@Override public void handleInit(){
  size=10;
  Integer curMaxId=worldBossDao.selectMaxId();
  if (curMaxId == null) {
    curMaxId=1;
  }
 else {
    byte[] data=worldBossDao.selectWorldBossRecords(curMaxId);
    if (data != null) {
      worldBossData=JsonUtils.string2Object(new String(CompressUtil.decompressBytes(data),Charset.forName(""String_Node_Str"")),WorldRecord.class);
      List<HurtRecord> list=new ArrayList<>(worldBossData.getHurtMap().values());
      Collections.sort(list,SORT);
      int n=list.size() > size ? size : list.size();
      for (int i=0; i < n; i++) {
        treeMap.put(list.get(i),list.get(i));
      }
    }
  }
  if (worldBossData == null) {
    worldBossData=new WorldRecord();
  }
  try {
    idLock.lock();
    maxId=(curMaxId / 1000);
  }
  finally {
    idLock.unlock();
  }
  checkActivity();
  Calendar c=Calendar.getInstance();
  int second=c.get(Calendar.SECOND);
  timerService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        checkActivity();
      }
 catch (      Exception e) {
        ServerLogger.err(e,""String_Node_Str"");
      }
    }
  }
,60 - second,60,TimeUnit.SECONDS);
  timerService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        if (worldBossData.getbUpdate().get()) {
          saveData();
          worldBossData.setbUpdate(false);
        }
      }
 catch (      Exception e) {
        ServerLogger.err(e,""String_Node_Str"");
      }
    }
  }
,1,1,TimeUnit.MINUTES);
}","@Override public void handleInit(){
  size=10;
  Integer curMaxId=worldBossDao.selectMaxId();
  if (curMaxId == null) {
    curMaxId=1;
  }
 else {
    byte[] data=worldBossDao.selectWorldBossRecords(curMaxId);
    if (data != null) {
      worldBossData=JsonUtils.string2Object(new String(CompressUtil.decompressBytes(data),Charset.forName(""String_Node_Str"")),WorldRecord.class);
      List<HurtRecord> list=new ArrayList<>(worldBossData.getHurtMap().values());
      Collections.sort(list,SORT);
      int n=list.size() > size ? size : list.size();
      for (int i=0; i < n; i++) {
        treeMap.put(list.get(i),list.get(i));
      }
    }
  }
  if (worldBossData == null) {
    worldBossData=new WorldRecord();
  }
  try {
    wbLock.lock();
    maxId=(curMaxId / 1000);
  }
  finally {
    wbLock.unlock();
  }
  checkActivity();
  Calendar c=Calendar.getInstance();
  int second=c.get(Calendar.SECOND);
  timerService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        checkActivity();
      }
 catch (      Exception e) {
        ServerLogger.err(e,""String_Node_Str"");
      }
    }
  }
,60 - second,60,TimeUnit.SECONDS);
  timerService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        if (worldBossData.getbUpdate().get()) {
          saveData();
          worldBossData.setbUpdate(false);
        }
      }
 catch (      Exception e) {
        ServerLogger.err(e,""String_Node_Str"");
      }
    }
  }
,1,1,TimeUnit.MINUTES);
}",0.9973597359735974
172369,"private int getNextId(){
  try {
    idLock.lock();
    maxId++;
    return maxId * 1000 + SysConfig.serverId;
  }
  finally {
    idLock.unlock();
  }
}","private int getNextId(){
  try {
    wbLock.lock();
    maxId++;
    return maxId * 1000 + SysConfig.serverId;
  }
  finally {
    wbLock.unlock();
  }
}",0.9738562091503268
172370,"public void handleSkillHurt(Player player,SkillHurtVO hurtVO){
  if (player.getGangId() == 0) {
    return;
  }
  Gang gang=gangService.getGang(player.getGangId());
  GangDungeon gangDungeon=serialDataService.getData().getGangMap().get(player.getGangId());
  GMember member=gang.getMembers().get(player.getPlayerId());
  if (member == null) {
    return;
  }
  if (hurtVO.targetType == 0) {
    member.hp=member.hp - hurtVO.hurtValue;
    if (member.hp <= 0) {
      onBattleEnd(player);
    }
  }
 else {
    Monster m=gangDungeon.getMonsterMap().get(hurtVO.targetId);
    int hp=m.getCurrentHp() - hurtVO.hurtValue > 0 ? m.getCurrentHp() - hurtVO.hurtValue : 0;
    m.setCurrentHp(hp);
    member.hurt+=hurtVO.hurtValue;
    if (gangDungeon.checkDeath()) {
      gangDungeon.setHasOpen(0);
      gangDungeon.setLayer(gangDungeon.getLayer() + 1);
      onBattleEnd(player);
    }
  }
  GangCopyCfg cfg=ConfigData.getConfig(GangCopyCfg.class,gangDungeon.getLayer());
  float progress=gangDungeon.getProgress();
  for (int i=0; i < cfg.progress.length; i++) {
    if (progress >= cfg.progress[i]) {
      if (gangDungeon.checkAndAdd(i)) {
        ServerLogger.warn(""String_Node_Str"" + cfg.progress[i]);
        List<GoodsEntry> rewards=new ArrayList<>();
        int[] itemArr=cfg.progressRewards[i];
        for (int k=0; k < itemArr.length; k+=2) {
          GoodsEntry goodsEntry=new GoodsEntry(itemArr[k],itemArr[k + 1]);
          rewards.add(goodsEntry);
        }
        String title=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_TITLE).tips;
        String content=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_CONTENT).tips;
        for (        int pid : gang.getMembers().keySet()) {
          mailService.sendSysMail(title,content,rewards,pid,LogConsume.GUILD_COPY_REWARD);
        }
        break;
      }
    }
  }
}","public void handleSkillHurt(Player player,SkillHurtVO hurtVO){
  if (player.getGangId() == 0) {
    return;
  }
  Gang gang=gangService.getGang(player.getGangId());
  GangDungeon gangDungeon=serialDataService.getData().getGangMap().get(player.getGangId());
  GMember member=gang.getMembers().get(player.getPlayerId());
  if (member == null) {
    return;
  }
  if (hurtVO.targetType == 0) {
    member.hp=member.hp - hurtVO.hurtValue;
    if (member.hp <= 0) {
      onBattleEnd(player);
    }
  }
 else {
    Monster m=gangDungeon.getMonsterMap().get(hurtVO.targetId);
    int hp=m.getCurrentHp() - hurtVO.hurtValue > 0 ? m.getCurrentHp() - hurtVO.hurtValue : 0;
    m.setCurrentHp(hp);
    member.hurt+=hurtVO.hurtValue;
    if (gangDungeon.checkDeath()) {
      gangDungeon.setHasOpen(0);
      gangDungeon.setLayer(gangDungeon.getLayer() + 1);
      onBattleEnd(player);
    }
  }
  GangCopyCfg cfg=ConfigData.getConfig(GangCopyCfg.class,gangDungeon.getLayer());
  float progress=gangDungeon.getProgress();
  for (int i=0; i < cfg.progress.length; i++) {
    if (progress >= cfg.progress[i]) {
      if (gangDungeon.checkAndAdd(i)) {
        ServerLogger.warn(""String_Node_Str"" + cfg.progress[i]);
        List<GoodsEntry> rewards=new ArrayList<>();
        int[][] itemArr=cfg.progressRewards.get(i);
        for (        int[] item : itemArr) {
          GoodsEntry goodsEntry=new GoodsEntry(item[0],item[1]);
          rewards.add(goodsEntry);
        }
        String title=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_TITLE).tips;
        String content=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_CONTENT).tips;
        for (        int pid : gang.getMembers().keySet()) {
          mailService.sendSysMail(title,content,rewards,pid,LogConsume.GUILD_COPY_REWARD);
        }
        break;
      }
    }
  }
}",0.9403830590774211
172371,"public ListParam<Reward> takeTrainingReward(int playerId){
  ListParam<Reward> result=new ListParam<Reward>();
  Player player=playerService.getPlayer(playerId);
  Gang gang=getGang(player.getGangId());
  if (gang == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GMember member=gang.getMembers().get(playerId);
  if (member.getStartTraining() == 0) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GTRoom room=gang.getGtRoom();
  if (room == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GangTrainingCfg cfg=GameData.getConfig(GangTrainingCfg.class,room.getId());
  float plus=Math.min(room.getMax() * cfg.rewardPlus[1],cfg.rewardPlus[0]);
  int hour=(int)member.getTrainingTime();
  int[][] rewards=calculateReward(member,room,plus);
  member.setStartTraining(0L);
  if (rewards != null) {
    result.params=new ArrayList<Reward>();
    goodsService.addRewards(playerId,rewards,LogConsume.GANG_TRAINING_REWARD,room.getId(),member.getTrainingTime() - hour);
    for (    int[] reward : rewards) {
      Reward re=new Reward();
      re.id=reward[0];
      re.count=reward[1];
      result.params.add(re);
    }
  }
  return result;
}","public ListParam<Reward> takeTrainingReward(int playerId){
  ListParam<Reward> result=new ListParam<Reward>();
  Player player=playerService.getPlayer(playerId);
  Gang gang=getGang(player.getGangId());
  if (gang == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GMember member=gang.getMembers().get(playerId);
  if (member.getStartTraining() == 0) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GTRoom room=gang.getGtRoom();
  if (room == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  room.setMax(room.getMax() - 1);
  GangTrainingCfg cfg=GameData.getConfig(GangTrainingCfg.class,room.getId());
  float plus=Math.min(room.getMax() * cfg.rewardPlus[1],cfg.rewardPlus[0]);
  int hour=(int)member.getTrainingTime();
  int[][] rewards=calculateReward(member,room,plus);
  member.setStartTraining(0L);
  if (rewards != null) {
    result.params=new ArrayList<Reward>();
    goodsService.addRewards(playerId,rewards,LogConsume.GANG_TRAINING_REWARD,room.getId(),member.getTrainingTime() - hour);
    for (    int[] reward : rewards) {
      Reward re=new Reward();
      re.id=reward[0];
      re.count=reward[1];
      result.params.add(re);
    }
  }
  return result;
}",0.9859504132231404
172372,"/** 
 * 1、玩家掉线 2、玩家退出 3、心跳检测
 * @param playerId
 */
public void onExit(int playerId){
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    if (group != null) {
      int oldId=group.getHostId();
      int masterId=group.removePlayer(playerId);
      ServerLogger.warn(""String_Node_Str"" + playerId + ""String_Node_Str""+ masterId);
      heartBeatMap.invalidate(playerId);
      ServerLogger.warn(""String_Node_Str"" + oldId + ""String_Node_Str""+ masterId);
      if (oldId != masterId) {
        pushHost(masterId);
      }
    }
  }
}","/** 
 * 1、玩家掉线 2、玩家退出 3、心跳检测
 * @param playerId
 */
public void onExit(int playerId){
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    if (group != null) {
      int oldId=group.getHostId();
      int masterId=group.removePlayer(playerId);
      ServerLogger.warn(""String_Node_Str"" + playerId + ""String_Node_Str""+ masterId);
      if (group.getAll().isEmpty()) {
        multiMap.remove(key);
      }
      heartBeatMap.invalidate(playerId);
      ServerLogger.warn(""String_Node_Str"" + oldId + ""String_Node_Str""+ masterId);
      if (oldId != masterId) {
        pushHost(masterId);
      }
    }
  }
}",0.9548156956004756
172373,"/** 
 * 主机判断心跳
 * @param playerId
 * @return
 */
public IntParam hostHeart(int playerId){
  IntParam param=new IntParam();
  heartBeatMap.put(playerId,System.currentTimeMillis());
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    param.param=group.getHostId();
  }
  return param;
}","/** 
 * 主机判断心跳
 * @param playerId
 * @return
 */
public IntParam hostHeart(int playerId){
  IntParam param=new IntParam();
  heartBeatMap.put(playerId,System.currentTimeMillis());
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    if (group != null) {
      param.param=group.getHostId();
    }
  }
  return param;
}",0.9469103568320278
172374,"/** 
 * 提升品质
 * @param playerId
 */
public Int2Param improveQuality(int playerId,int petId){
  Int2Param cli=new Int2Param();
  PetBag bag=getPetBag(playerId);
  Pet pet=bag.getPetMap().get(petId);
  if (pet == null) {
    cli.param1=Response.PET_NOT_EXIST;
    return cli;
  }
  PetConfig petConfig=ConfigData.getConfig(PetConfig.class,petId);
  Integer currentCount=bag.getMaterialMap().get(petConfig.materialId);
  if (currentCount == null) {
    currentCount=0;
  }
  if (currentCount < petConfig.nextQualityMaterialCount) {
    cli.param1=Response.PET_MATERIAL_NOT_ENOUGH;
    return cli;
  }
  if (petConfig.nextQualityId == 0) {
    cli.param1=Response.ERR_PARAM;
    return cli;
  }
  List<GoodsEntry> costs=Lists.newArrayList();
  for (int i=0; i < petConfig.nextQualityCost.length; i+=2) {
    GoodsEntry e=new GoodsEntry(petConfig.nextQualityCost[i],petConfig.nextQualityCost[i + 1]);
    costs.add(e);
  }
  int ret=goodsService.decConsume(playerId,costs,LogConsume.PET_IMPROVE);
  if (Response.SUCCESS != ret) {
    cli.param1=ret;
    return cli;
  }
  bag.getPetMap().remove(petId);
  List<Pet> addPets=Lists.newArrayList();
  List<Int2Param> updateIds=Lists.newArrayList();
  if (bag.getPetMap().containsKey(petConfig.nextQualityId)) {
    PetConfig newPetConfig=ConfigData.getConfig(PetConfig.class,petConfig.nextQualityId);
    samePetDecompose(bag,newPetConfig,updateIds);
    cli.param2=1;
  }
 else {
    Pet newPet=new Pet();
    newPet.setId(petConfig.nextQualityId);
    newPet.setSkillID(petConfig.activeSkillId);
    newPet.setPassiveSkillId(pet.getPassiveSkillId() + 1);
    bag.getPetMap().put(newPet.getId(),newPet);
    bag.getMaterialMap().put(petConfig.materialId,currentCount - petConfig.nextQualityMaterialCount);
    if (currentCount == petConfig.nextQualityMaterialCount) {
      bag.getMaterialMap().remove(petConfig.materialId);
    }
    addPets.add(newPet);
  }
  Int2Param delId=new Int2Param();
  delId.param1=petConfig.materialId;
  delId.param2=currentCount - petConfig.nextQualityMaterialCount;
  updateIds.add(delId);
  delId=new Int2Param();
  delId.param1=petId;
  delId.param2=0;
  updateIds.add(delId);
  pushUpdateBag(playerId,addPets,updateIds);
  cli.param1=Response.SUCCESS;
  SessionManager.getInstance().sendMsg(CMD_IMPROVE,cli,playerId);
  if (bag.getFightPetId() == petId) {
    Int2Param vo=toFight(playerId,petConfig.nextQualityId);
    SessionManager.getInstance().sendMsg(CMD_TO_FIGHT,vo,playerId);
  }
  return null;
}","/** 
 * 提升品质
 * @param playerId
 */
public Int2Param improveQuality(int playerId,int petId){
  Int2Param cli=new Int2Param();
  PetBag bag=getPetBag(playerId);
  Pet pet=bag.getPetMap().get(petId);
  if (pet == null) {
    cli.param1=Response.PET_NOT_EXIST;
    return cli;
  }
  PetConfig petConfig=ConfigData.getConfig(PetConfig.class,petId);
  Integer currentCount=bag.getMaterialMap().get(petConfig.materialId);
  if (currentCount == null) {
    currentCount=0;
  }
  if (currentCount < petConfig.nextQualityMaterialCount) {
    cli.param1=Response.PET_MATERIAL_NOT_ENOUGH;
    return cli;
  }
  if (petConfig.nextQualityId == 0) {
    cli.param1=Response.ERR_PARAM;
    return cli;
  }
  List<GoodsEntry> costs=Lists.newArrayList();
  for (int i=0; i < petConfig.nextQualityCost.length; i+=2) {
    GoodsEntry e=new GoodsEntry(petConfig.nextQualityCost[i],petConfig.nextQualityCost[i + 1]);
    costs.add(e);
  }
  int ret=goodsService.decConsume(playerId,costs,LogConsume.PET_IMPROVE);
  if (Response.SUCCESS != ret) {
    cli.param1=ret;
    return cli;
  }
  bag.getPetMap().remove(petId);
  List<Pet> addPets=Lists.newArrayList();
  List<Int2Param> updateIds=Lists.newArrayList();
  if (bag.getPetMap().containsKey(petConfig.nextQualityId)) {
    PetConfig newPetConfig=ConfigData.getConfig(PetConfig.class,petConfig.nextQualityId);
    samePetDecompose(bag,newPetConfig,updateIds);
    cli.param2=1;
  }
 else {
    Pet newPet=new Pet();
    newPet.setId(petConfig.nextQualityId);
    newPet.setSkillID(petConfig.activeSkillId);
    if (newPet.getPassiveSkillId() != 0) {
      newPet.setPassiveSkillId(pet.getPassiveSkillId() + 1);
    }
    bag.getPetMap().put(newPet.getId(),newPet);
    bag.getMaterialMap().put(petConfig.materialId,currentCount - petConfig.nextQualityMaterialCount);
    if (currentCount == petConfig.nextQualityMaterialCount) {
      bag.getMaterialMap().remove(petConfig.materialId);
    }
    addPets.add(newPet);
  }
  Int2Param delId=new Int2Param();
  delId.param1=petConfig.materialId;
  delId.param2=currentCount - petConfig.nextQualityMaterialCount;
  updateIds.add(delId);
  delId=new Int2Param();
  delId.param1=petId;
  delId.param2=0;
  updateIds.add(delId);
  pushUpdateBag(playerId,addPets,updateIds);
  cli.param1=Response.SUCCESS;
  SessionManager.getInstance().sendMsg(CMD_IMPROVE,cli,playerId);
  if (bag.getFightPetId() == petId) {
    Int2Param vo=toFight(playerId,petConfig.nextQualityId);
    SessionManager.getInstance().sendMsg(CMD_TO_FIGHT,vo,playerId);
  }
  return null;
}",0.9874326750448832
172375,"public Player addNewPlayer(String name,int sex,int vocation,String accName,String channel){
  final int playerId=getNextPlayerId();
  final Player player=new Player();
  player.setPlayerId(playerId);
  player.setName(name);
  player.setAccName(accName);
  player.setSex(sex);
  player.setLev(1);
  player.setVocation(vocation);
  player.setRegTime(new Date());
  player.setServerId(SysConfig.serverId);
  player.setEnergyTime(System.currentTimeMillis());
  player.setRefresh(false);
  player.setChannel(channel);
  GlobalConfig globalParam=ConfigData.globalParam();
  player.setEnergy(globalParam.maxEnergy);
  player.setSceneId(globalParam.firstScene);
  player.setX(globalParam.defaultPos[0]);
  player.setY(globalParam.defaultPos[1]);
  player.setZ(globalParam.defaultPos[2]);
  players.put(playerId,player);
  try {
    playerDao.insert(player);
  }
 catch (  Exception e) {
    ServerLogger.err(e,""String_Node_Str"");
    return null;
  }
  PlayerData playerData=initPlayerData(playerId,false);
  int fashionId=globalParam.fashionId[player.getVocation() - 1];
  player.setFashionId(fashionId);
  playerData.getFashions().add(fashionId);
  int weaponId=globalParam.weaponId[player.getVocation() - 1];
  player.setWeaponId(weaponId);
  playerData.getFashions().add(weaponId);
  int headId=globalParam.headId[player.getVocation() - 1];
  playerData.setCurHead(headId);
  playerData.getFashions().add(headId);
  playerData.setGroupTimes(ConfigData.globalParam().groupTimes);
  int[] skills=globalParam.playerDefaultSkill[player.getVocation() - 1];
  for (  int skill : skills) {
    playerData.getSkills().add(skill);
    playerData.getCurSkills().add(skill);
  }
  for (  Object object : ConfigData.getConfigs(ModuleOpenCfg.class)) {
    ModuleOpenCfg cfg=(ModuleOpenCfg)object;
    if (cfg.openType == 1) {
      playerData.getModules().add(cfg.id);
    }
  }
  playerData.setBlankGrids(globalParam.bagSize);
  taskService.initTask(playerId);
  goodsService.initBag(playerId);
  petService.initBag(playerId);
  playerCalculator.calculate(player);
  Context.getThreadService().execute(new Runnable(){
    @Override public void run(){
      updatePlayerData(playerId);
      update(player);
    }
  }
);
  return player;
}","public Player addNewPlayer(String name,int sex,int vocation,String accName,String channel){
  final int playerId=getNextPlayerId();
  final Player player=new Player();
  player.setPlayerId(playerId);
  player.setName(name);
  player.setAccName(accName);
  player.setSex(sex);
  player.setLev(1);
  player.setVocation(vocation);
  player.setRegTime(new Date());
  player.setServerId(SysConfig.serverId);
  player.setEnergyTime(System.currentTimeMillis());
  player.setRefresh(false);
  player.setChannel(channel);
  GlobalConfig globalParam=ConfigData.globalParam();
  player.setEnergy(globalParam.maxEnergy);
  player.setSceneId(globalParam.firstScene);
  player.setX(globalParam.defaultPos[0]);
  player.setY(globalParam.defaultPos[1]);
  player.setZ(globalParam.defaultPos[2]);
  players.put(playerId,player);
  try {
    playerDao.insert(player);
  }
 catch (  Exception e) {
    ServerLogger.err(e,""String_Node_Str"");
    return null;
  }
  PlayerData playerData=initPlayerData(playerId,false);
  int fashionId=globalParam.fashionId[player.getVocation() - 1];
  player.setFashionId(fashionId);
  playerData.getFashions().add(fashionId);
  int weaponId=globalParam.weaponId[player.getVocation() - 1];
  player.setWeaponId(weaponId);
  playerData.getFashions().add(weaponId);
  int headId=globalParam.headId[player.getVocation() - 1];
  playerData.setCurHead(headId);
  playerData.getFashions().add(headId);
  playerData.setGroupTimes(ConfigData.globalParam().groupTimes);
  int[] skills=globalParam.playerDefaultSkill[player.getVocation() - 1];
  for (  int skill : skills) {
    playerData.getSkills().add(skill);
    playerData.getCurSkills().add(skill);
  }
  for (  int[] cardArr : globalParam.newbieskillCard) {
    addSkillCard(playerId,cardArr[0],cardArr[1]);
  }
  for (  Object object : ConfigData.getConfigs(ModuleOpenCfg.class)) {
    ModuleOpenCfg cfg=(ModuleOpenCfg)object;
    if (cfg.openType == 1) {
      playerData.getModules().add(cfg.id);
    }
  }
  playerData.setBlankGrids(globalParam.bagSize);
  taskService.initTask(playerId);
  goodsService.initBag(playerId);
  for (  int[] itemArr : globalParam.GuideEquip) {
    if (vocation == itemArr[0]) {
      goodsService.addGoodsToBag(playerId,itemArr[1],1,LogConsume.BAG_INIT);
      break;
    }
  }
  petService.initBag(playerId);
  playerCalculator.calculate(player);
  Context.getThreadService().execute(new Runnable(){
    @Override public void run(){
      updatePlayerData(playerId);
      update(player);
    }
  }
);
  return player;
}",0.9377505802912008
172376,"public List<Integer> genRefreshs(int playerId,int type){
  Player player=playerService.getPlayer(playerId);
  List<Integer> ids=new ArrayList<Integer>(ConfigData.RefreshIds.get(type));
  List<Integer> rates=new ArrayList<Integer>(ConfigData.RefreshRates.get(type));
  List<Integer> result=new ArrayList<Integer>();
  int size=ids.size();
  for (int i=0; i < size; i++) {
    ShopCfg cfg=ConfigData.getConfig(ShopCfg.class,ids.get(i));
    if (cfg.isFixed) {
      result.add(ids.get(i));
      rates.set(i,0);
    }
  }
  if (result.size() < 6) {
    for (int i=0; i < 60; i++) {
      int index=RandomUtil.getRandomIndex(rates);
      ShopCfg cfg=ConfigData.getConfig(ShopCfg.class,ids.get(index));
      if (cfg == null) {
        ServerLogger.warn(""String_Node_Str"" + ids.get(index));
        continue;
      }
      GoodsConfig gCfg=ConfigData.getConfig(GoodsConfig.class,cfg.goodsId);
      if (gCfg == null) {
        ServerLogger.warn(""String_Node_Str"" + cfg.id);
        continue;
      }
      if ((gCfg.vocation != 0 && gCfg.vocation != player.getVocation())) {
        continue;
      }
      result.add(ids.get(index));
      rates.set(index,0);
      if (result.size() >= 6) {
        break;
      }
    }
  }
  return result;
}","public List<Integer> genRefreshs(int playerId,int type){
  Player player=playerService.getPlayer(playerId);
  List<Integer> ids=new ArrayList<Integer>(ConfigData.RefreshIds.get(type));
  List<Integer> rates=new ArrayList<Integer>(ConfigData.RefreshRates.get(type));
  List<Integer> result=new ArrayList<Integer>();
  int size=ids.size();
  for (int i=0; i < size; i++) {
    ShopCfg cfg=ConfigData.getConfig(ShopCfg.class,ids.get(i));
    if (cfg.isFixed) {
      result.add(ids.get(i));
      rates.set(i,0);
    }
  }
  int n=6;
  if (type == COMMON) {
    n=10;
  }
  if (result.size() < n) {
    for (int i=0; i < 60; i++) {
      int index=RandomUtil.getRandomIndex(rates);
      ShopCfg cfg=ConfigData.getConfig(ShopCfg.class,ids.get(index));
      if (cfg == null) {
        ServerLogger.warn(""String_Node_Str"" + ids.get(index));
        continue;
      }
      GoodsConfig gCfg=ConfigData.getConfig(GoodsConfig.class,cfg.goodsId);
      if (gCfg == null) {
        ServerLogger.warn(""String_Node_Str"" + cfg.id);
        continue;
      }
      if ((gCfg.vocation != 0 && gCfg.vocation != player.getVocation())) {
        continue;
      }
      result.add(ids.get(index));
      rates.set(index,0);
      if (result.size() >= n) {
        break;
      }
    }
  }
  return result;
}",0.9790596602133544
172377,"/** 
 * 开启挑战
 * @param playerId
 */
public IntParam openChallenge(int playerId){
  IntParam param=new IntParam();
  Player player=playerService.getPlayer(playerId);
  if (player.getGangId() == 0) {
    param.param=Response.GUILD_NOT_EXIST;
    return param;
  }
  Gang gang=gangService.getGang(player.getGangId());
  GMember member=gang.getMembers().get(playerId);
  if (member.getPosition() == Gang.MEMBER) {
    param.param=Response.GANG_NO_PRIVILEGE;
    return param;
  }
  GangDungeon gangDungeon=serialDataService.getData().getGangMap().get(player.getGangId());
  if (gangDungeon == null) {
    gangDungeon=new GangDungeon();
    serialDataService.getData().getGangMap().put(player.getGangId(),gangDungeon);
  }
  if (gangDungeon.getHasOpen() == 1) {
    param.param=Response.GUILD_COPY_HAS_OPEN;
    return param;
  }
  GangCopyCfg cfg=ConfigData.getConfig(GangCopyCfg.class,gangDungeon.getLayer());
  if (gang.getAsset() < cfg.needCredit) {
    param.param=Response.NO_GANG_ASSET;
    return param;
  }
  gangDungeon.setHasOpen(1);
  gang.setAsset(gang.getAsset() - cfg.needCredit);
  gangDungeon.getMonsterMap().clear();
  List<MonsterRefreshConfig> monsters=monsterMap.get(cfg.copyId);
  for (  MonsterRefreshConfig conf : monsters) {
    MonsterConfig monsterConfig=ConfigData.getConfig(MonsterConfig.class,conf.monsterId);
    Monster m=new Monster();
    m.setId(conf.id);
    m.setHp(monsterConfig.hp);
    m.setCurrentHp(monsterConfig.hp);
    gangDungeon.getMonsterMap().put(conf.id,m);
  }
  param.param=Response.SUCCESS;
  return param;
}","/** 
 * 开启挑战
 * @param playerId
 */
public IntParam openChallenge(int playerId){
  IntParam param=new IntParam();
  Player player=playerService.getPlayer(playerId);
  if (player.getGangId() == 0) {
    param.param=Response.GUILD_NOT_EXIST;
    return param;
  }
  Gang gang=gangService.getGang(player.getGangId());
  GMember member=gang.getMembers().get(playerId);
  if (member.getPosition() == Gang.MEMBER) {
    param.param=Response.GANG_NO_PRIVILEGE;
    return param;
  }
  GangDungeon gangDungeon=serialDataService.getData().getGangMap().get(player.getGangId());
  if (gangDungeon == null) {
    gangDungeon=new GangDungeon();
    serialDataService.getData().getGangMap().put(player.getGangId(),gangDungeon);
  }
  if (gangDungeon.getHasOpen() == 1) {
    param.param=Response.GUILD_COPY_HAS_OPEN;
    return param;
  }
  GangCopyCfg cfg=ConfigData.getConfig(GangCopyCfg.class,gangDungeon.getLayer());
  if (gang.getAsset() < cfg.needCredit) {
    param.param=Response.NO_GANG_ASSET;
    return param;
  }
  gangDungeon.setHasOpen(1);
  gang.setAsset(gang.getAsset() - cfg.needCredit);
  gangDungeon.getMonsterMap().clear();
  gangDungeon.getAwardStep().clear();
  List<MonsterRefreshConfig> monsters=monsterMap.get(cfg.copyId);
  for (  MonsterRefreshConfig conf : monsters) {
    MonsterConfig monsterConfig=ConfigData.getConfig(MonsterConfig.class,conf.monsterId);
    Monster m=new Monster();
    m.setId(conf.id);
    m.setHp(monsterConfig.hp);
    m.setCurrentHp(monsterConfig.hp);
    gangDungeon.getMonsterMap().put(conf.id,m);
  }
  param.param=Response.SUCCESS;
  return param;
}",0.987936507936508
172378,"public void handleSkillHurt(Player player,SkillHurtVO hurtVO){
  if (player.getGangId() == 0) {
    return;
  }
  Gang gang=gangService.getGang(player.getGangId());
  GangDungeon gangDungeon=serialDataService.getData().getGangMap().get(player.getGangId());
  GMember member=gang.getMembers().get(player.getPlayerId());
  if (member == null) {
    return;
  }
  if (hurtVO.targetType == 0) {
    member.hp=member.hp - hurtVO.hurtValue;
    if (member.hp <= 0) {
      onBattleEnd(player);
    }
  }
 else {
    Monster m=gangDungeon.getMonsterMap().get(hurtVO.targetId);
    int hp=m.getCurrentHp() - hurtVO.hurtValue > 0 ? m.getCurrentHp() - hurtVO.hurtValue : 0;
    m.setCurrentHp(hp);
    member.hurt+=hurtVO.hurtValue;
    if (gangDungeon.checkDeath()) {
      gangDungeon.setHasOpen(0);
      gangDungeon.setLayer(gangDungeon.getLayer() + 1);
      onBattleEnd(player);
    }
  }
  GangCopyCfg cfg=ConfigData.getConfig(GangCopyCfg.class,gangDungeon.getLayer());
  float progress=gangDungeon.getProgress();
  for (int i=0; i < cfg.progress.length; i++) {
    if (progress >= cfg.progress[i]) {
      if (gangDungeon.checkAndAdd(i)) {
        ServerLogger.warn(""String_Node_Str"" + cfg.progress[i]);
        List<GoodsEntry> rewards=new ArrayList<>();
        int[] itemArr=cfg.progressRewards[i];
        for (int k=0; k < itemArr.length; k+=2) {
          GoodsEntry goodsEntry=new GoodsEntry(itemArr[k],itemArr[k + 1]);
          rewards.add(goodsEntry);
        }
        String title=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_TITLE).tips;
        String content=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_CONTENT).tips;
        for (        int pid : gang.getMembers().keySet()) {
          mailService.sendSysMail(title,content,rewards,pid,LogConsume.GUILD_COPY_REWARD);
        }
        break;
      }
    }
  }
}","public void handleSkillHurt(Player player,SkillHurtVO hurtVO){
  if (player.getGangId() == 0) {
    return;
  }
  Gang gang=gangService.getGang(player.getGangId());
  GangDungeon gangDungeon=serialDataService.getData().getGangMap().get(player.getGangId());
  GMember member=gang.getMembers().get(player.getPlayerId());
  if (member == null) {
    return;
  }
  if (hurtVO.targetType == 0) {
    member.hp=member.hp - hurtVO.hurtValue;
    if (member.hp <= 0) {
      onBattleEnd(player);
    }
  }
 else {
    Monster m=gangDungeon.getMonsterMap().get(hurtVO.targetId);
    int hp=m.getCurrentHp() - hurtVO.hurtValue > 0 ? m.getCurrentHp() - hurtVO.hurtValue : 0;
    m.setCurrentHp(hp);
    member.hurt+=hurtVO.hurtValue;
    if (gangDungeon.checkDeath()) {
      gangDungeon.setHasOpen(0);
      gangDungeon.setLayer(gangDungeon.getLayer() + 1);
      onBattleEnd(player);
    }
  }
  GangCopyCfg cfg=ConfigData.getConfig(GangCopyCfg.class,gangDungeon.getLayer());
  float progress=gangDungeon.getProgress();
  for (int i=0; i <= cfg.progress.length; i++) {
    if (progress >= cfg.progress[i]) {
      int step=i + 1;
      if (gangDungeon.checkAndAdd(step)) {
        ServerLogger.warn(""String_Node_Str"" + cfg.progress[i]);
        List<GoodsEntry> rewards=new ArrayList<>();
        int[][] itemArr=cfg.progressRewards.get(step);
        for (        int[] item : itemArr) {
          GoodsEntry goodsEntry=new GoodsEntry(item[0],item[1]);
          rewards.add(goodsEntry);
        }
        String title=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_TITLE).tips;
        String content=ConfigData.getConfig(ErrCode.class,Response.GUILD_COPY_MAIL_CONTENT).tips;
        for (        int pid : gang.getMembers().keySet()) {
          mailService.sendSysMail(title,content,rewards,pid,LogConsume.GUILD_COPY_REWARD);
        }
        break;
      }
    }
  }
}",0.9325481798715204
172379,"public ListParam<Reward> takeTrainingReward(int playerId){
  ListParam<Reward> result=new ListParam<Reward>();
  Player player=playerService.getPlayer(playerId);
  Gang gang=getGang(player.getGangId());
  if (gang == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GMember member=gang.getMembers().get(playerId);
  if (member.getStartTraining() == 0) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GTRoom room=gang.getGtRoom();
  if (room == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GangTrainingCfg cfg=GameData.getConfig(GangTrainingCfg.class,room.getId());
  float plus=Math.min(room.getMax() * cfg.rewardPlus[1],cfg.rewardPlus[0]);
  int hour=(int)member.getTrainingTime();
  int[][] rewards=calculateReward(member,room,plus);
  member.setStartTraining(0L);
  if (rewards != null) {
    result.params=new ArrayList<Reward>();
    goodsService.addRewards(playerId,rewards,LogConsume.GANG_TRAINING_REWARD,room.getId(),member.getTrainingTime() - hour);
    for (    int[] reward : rewards) {
      Reward re=new Reward();
      re.id=reward[0];
      re.count=reward[1];
      result.params.add(re);
    }
  }
  return result;
}","public ListParam<Reward> takeTrainingReward(int playerId){
  ListParam<Reward> result=new ListParam<Reward>();
  Player player=playerService.getPlayer(playerId);
  Gang gang=getGang(player.getGangId());
  if (gang == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GMember member=gang.getMembers().get(playerId);
  if (member.getStartTraining() == 0) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  GTRoom room=gang.getGtRoom();
  if (room == null) {
    result.code=Response.ERR_PARAM;
    return result;
  }
  room.setMax(room.getMax() - 1);
  GangTrainingCfg cfg=GameData.getConfig(GangTrainingCfg.class,room.getId());
  float plus=Math.min(room.getMax() * cfg.rewardPlus[1],cfg.rewardPlus[0]);
  int hour=(int)member.getTrainingTime();
  int[][] rewards=calculateReward(member,room,plus);
  member.setStartTraining(0L);
  if (rewards != null) {
    result.params=new ArrayList<Reward>();
    goodsService.addRewards(playerId,rewards,LogConsume.GANG_TRAINING_REWARD,room.getId(),member.getTrainingTime() - hour);
    for (    int[] reward : rewards) {
      Reward re=new Reward();
      re.id=reward[0];
      re.count=reward[1];
      result.params.add(re);
    }
  }
  return result;
}",0.9859504132231404
172380,"public void addPetMaterial(int playerId,String... params){
  int petId=Integer.valueOf(params[0]);
  int count=Integer.valueOf(params[1]);
  petService.addPetMaterial(playerId,petId,count);
}","public void addPetMaterial(int playerId,String... params){
  int petId=Integer.valueOf(params[0]);
  int count=Integer.valueOf(params[1]);
  petService.addPetMaterial(playerId,petId,count,true);
}",0.9870801033591732
172381,"public void addRewrad(int playerId,int id,int count,LogConsume type,Object... params){
  Player player=playerService.getPlayer(playerId);
  GoodsConfig goods=getGoodsConfig(id);
  if (id > 10000) {
    if (goods.type == Goods.BOTTLE) {
      return;
    }
    if (goods.type == Goods.SKILL_CARD) {
      playerService.addSkillCard(playerId,goods.param1[0],count);
      taskService.doTask(playerId,Task.FINISH_CARD_COMPOSE,goods.color,0);
    }
 else     if (goods.type == Goods.SPECIAL_MAP) {
      traversingService.addMap(playerId,goods,count);
    }
 else     if (goods.type == Goods.FASHION) {
      fashionService.addFashion(playerId,goods.param1[0],goods.param1[1]);
    }
 else     if (goods.type == Goods.PET) {
      petService.addPet(playerId,id);
    }
 else     if (goods.type == Goods.PET_MATERIAL) {
      petService.addPetMaterial(playerId,id,count);
    }
 else {
      addGoodsToBag(playerId,id,count,type,params);
    }
  }
 else {
    if (id == Goods.COIN) {
      playerService.addCoin(playerId,count,type,params);
    }
 else     if (id == Goods.DIAMOND) {
      playerService.addDiamond(playerId,count,type,params);
    }
 else     if (id == Goods.EXP) {
      playerService.addExp(playerId,count,type,params);
    }
 else     if (id == Goods.ENERGY) {
      playerService.addEnergy(playerId,count,type,params);
    }
 else     if (id == Goods.VIP_EXP) {
      playerService.addVipExp(playerId,count);
    }
 else     if (id == Goods.EXPERIENCE_HP) {
      trainingLogic.addHP(playerId,count);
    }
 else     if (goods.type == Goods.FAME) {
      fameService.addFame(playerId,goods.param1[0],count);
    }
 else     if (goods.type == Goods.CURRENCY) {
      playerService.addCurrency(playerId,id,count,type,params);
    }
  }
}","public void addRewrad(int playerId,int id,int count,LogConsume type,Object... params){
  Player player=playerService.getPlayer(playerId);
  GoodsConfig goods=getGoodsConfig(id);
  if (id > 10000) {
    if (goods.type == Goods.BOTTLE) {
      return;
    }
    if (goods.type == Goods.SKILL_CARD) {
      playerService.addSkillCard(playerId,goods.param1[0],count);
      taskService.doTask(playerId,Task.FINISH_CARD_COMPOSE,goods.color,0);
    }
 else     if (goods.type == Goods.SPECIAL_MAP) {
      traversingService.addMap(playerId,goods,count);
    }
 else     if (goods.type == Goods.FASHION) {
      fashionService.addFashion(playerId,goods.param1[0],goods.param1[1]);
    }
 else     if (goods.type == Goods.PET) {
      petService.addPet(playerId,id);
    }
 else     if (goods.type == Goods.PET_MATERIAL) {
      petService.addPetMaterial(playerId,id,count,true);
    }
 else {
      addGoodsToBag(playerId,id,count,type,params);
    }
  }
 else {
    if (id == Goods.COIN) {
      playerService.addCoin(playerId,count,type,params);
    }
 else     if (id == Goods.DIAMOND) {
      playerService.addDiamond(playerId,count,type,params);
    }
 else     if (id == Goods.EXP) {
      playerService.addExp(playerId,count,type,params);
    }
 else     if (id == Goods.ENERGY) {
      playerService.addEnergy(playerId,count,type,params);
    }
 else     if (id == Goods.VIP_EXP) {
      playerService.addVipExp(playerId,count);
    }
 else     if (id == Goods.EXPERIENCE_HP) {
      trainingLogic.addHP(playerId,count);
    }
 else     if (goods.type == Goods.FAME) {
      fameService.addFame(playerId,goods.param1[0],count);
    }
 else     if (goods.type == Goods.CURRENCY) {
      playerService.addCurrency(playerId,id,count,type,params);
    }
  }
}",0.9985742800114058
172382,"/** 
 * 1、玩家掉线 2、玩家退出 3、心跳检测
 * @param playerId
 */
public void onExit(int playerId){
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    if (group != null) {
      int oldId=group.getHostId();
      int masterId=group.removePlayer(playerId);
      ServerLogger.warn(""String_Node_Str"" + playerId + ""String_Node_Str""+ masterId);
      heartBeatMap.invalidate(playerId);
      ServerLogger.warn(""String_Node_Str"" + oldId + ""String_Node_Str""+ masterId);
      if (oldId != masterId) {
        pushHost(masterId);
      }
    }
  }
}","/** 
 * 1、玩家掉线 2、玩家退出 3、心跳检测
 * @param playerId
 */
public void onExit(int playerId){
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    if (group != null) {
      int oldId=group.getHostId();
      int masterId=group.removePlayer(playerId);
      ServerLogger.warn(""String_Node_Str"" + playerId + ""String_Node_Str""+ masterId);
      if (group.getAll().isEmpty()) {
        multiMap.remove(key);
      }
      heartBeatMap.invalidate(playerId);
      ServerLogger.warn(""String_Node_Str"" + oldId + ""String_Node_Str""+ masterId);
      if (oldId != masterId) {
        pushHost(masterId);
      }
    }
  }
}",0.9548156956004756
172383,"/** 
 * 主机判断心跳
 * @param playerId
 * @return
 */
public IntParam hostHeart(int playerId){
  IntParam param=new IntParam();
  heartBeatMap.put(playerId,System.currentTimeMillis());
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    param.param=group.getHostId();
  }
  return param;
}","/** 
 * 主机判断心跳
 * @param playerId
 * @return
 */
public IntParam hostHeart(int playerId){
  IntParam param=new IntParam();
  heartBeatMap.put(playerId,System.currentTimeMillis());
  Player player=playerService.getPlayer(playerId);
  SceneConfig lastCfg=GameData.getConfig(SceneConfig.class,player.getSceneId());
  Map<String,MultiGroup> multiMap=mulitSceneMap.get(lastCfg.sceneSubType);
  if (multiMap != null) {
    String key=sceneService.getGroupKey(player);
    MultiGroup group=multiMap.get(key);
    if (group != null) {
      param.param=group.getHostId();
    }
  }
  return param;
}",0.9469103568320278
172384,"public PetVO toProto(){
  PetVO vo=new PetVO();
  vo.id=id;
  vo.skillId=skillID;
  vo.passiveSkillId=passiveSkillId;
  vo.hasMutate=mutateFlag;
  return vo;
}","public PetVO toProto(){
  PetVO vo=new PetVO();
  vo.id=id;
  vo.skillId=skillID;
  vo.passiveSkillId=passiveSkillId;
  vo.hasMutate=mutateFlag;
  vo.configId=configId;
  return vo;
}",0.9298245614035088
172385,"public Pet(int id,int skillID){
  this.id=id;
  this.skillID=skillID;
  this.mutateFlag=false;
}","public Pet(int id,int configId,int skillID){
  this.id=id;
  this.skillID=skillID;
  this.configId=configId;
  this.mutateFlag=false;
}",0.8311688311688312
172386,"@Override public void generatePage(Element sqlElement){
  Page page=executableElement.getAnnotation(Page.class);
  VariableElement variableElement=variableElements.get(0);
  String offset=page.offsetField();
  String limit=page.limitField();
  if (paramsAnnotated(variableElement)) {
    offset=variableElement.getSimpleName().toString() + ""String_Node_Str"" + offset;
    limit=variableElement.getSimpleName().toString() + ""String_Node_Str"" + limit;
  }
  if (page != null) {
    sqlElement.addText(String.format(""String_Node_Str"",offset,limit));
  }
}","@Override public void generatePage(Element sqlElement){
  Page page=executableElement.getAnnotation(Page.class);
  if (page != null) {
    VariableElement variableElement=variableElements.get(0);
    String offset=page.offsetField();
    String limit=page.limitField();
    if (paramsAnnotated(variableElement)) {
      offset=variableElement.getSimpleName().toString() + ""String_Node_Str"" + offset;
      limit=variableElement.getSimpleName().toString() + ""String_Node_Str"" + limit;
    }
    sqlElement.addText(String.format(""String_Node_Str"",offset,limit));
  }
}",0.9481216457960644
172387,"private void generateSet(Element updateElement){
  Element setElement=updateElement.addElement(""String_Node_Str"");
  VariableElement variableElement=variableElements.get(0);
  String objName=""String_Node_Str"";
  if (paramsAnnotated(variableElement)) {
    objName=variableElement.getSimpleName().toString() + ""String_Node_Str"";
  }
  if (StringUtils.isNotEmpty(update.columns())) {
    for (    String column : update.columns().split(Constants.separator)) {
      String field=tableInfo.getColumnToField().get(column);
      if (StringUtils.isNotEmpty(field)) {
        Element ifElement=setElement.addElement(""String_Node_Str"");
        ifElement.addAttribute(""String_Node_Str"",objName + field + ""String_Node_Str"");
        ifElement.addText(column + ""String_Node_Str"" + objName+ field+ ""String_Node_Str"");
      }
    }
    return;
  }
  for (  Map.Entry<String,String> entry : tableInfo.getFieldToColumn().entrySet()) {
    Element ifElement=setElement.addElement(""String_Node_Str"");
    ifElement.addAttribute(""String_Node_Str"",objName + entry.getKey() + ""String_Node_Str"");
    ifElement.addText(entry.getKey() + ""String_Node_Str"" + objName+ entry.getKey()+ ""String_Node_Str"");
  }
  tableInfo.getFieldToColumn().forEach((field,column) -> {
    Element ifElement=setElement.addElement(""String_Node_Str"");
    ifElement.addAttribute(""String_Node_Str"",field + ""String_Node_Str"");
    ifElement.addText(column + ""String_Node_Str"" + field+ ""String_Node_Str"");
  }
);
}","private void generateSet(Element updateElement){
  ModelCondition[] conditions=modelConditions.value();
  Set<String> fieldSet=new HashSet<>();
  for (  ModelCondition modelCondition : conditions) {
    fieldSet.add(modelCondition.field());
  }
  Element setElement=updateElement.addElement(""String_Node_Str"");
  VariableElement variableElement=variableElements.get(0);
  String objName=""String_Node_Str"";
  if (paramsAnnotated(variableElement)) {
    objName=variableElement.getSimpleName().toString() + ""String_Node_Str"";
  }
  if (StringUtils.isNotEmpty(update.columns())) {
    for (    String column : update.columns().split(Constants.separator)) {
      String field=tableInfo.getColumnToField().get(column);
      if (fieldSet.contains(field))       continue;
      if (StringUtils.isNotEmpty(field)) {
        Element ifElement=setElement.addElement(""String_Node_Str"");
        ifElement.addAttribute(""String_Node_Str"",objName + field + ""String_Node_Str"");
        ifElement.addText(column + ""String_Node_Str"" + objName+ field+ ""String_Node_Str"");
      }
    }
    return;
  }
  for (  Map.Entry<String,String> entry : tableInfo.getFieldToColumn().entrySet()) {
    if (fieldSet.contains(entry.getKey()))     continue;
    Element ifElement=setElement.addElement(""String_Node_Str"");
    ifElement.addAttribute(""String_Node_Str"",objName + entry.getKey() + ""String_Node_Str"");
    ifElement.addText(entry.getKey() + ""String_Node_Str"" + objName+ entry.getKey()+ ""String_Node_Str"");
  }
}",0.8021607022282242
172388,"@Override protected void checkAnnotatedRule(){
  if (executableElement.getParameters().size() != 1) {
    throw new TgDaoException(String.format(""String_Node_Str"",executableElement.getSimpleName().toString()));
  }
  ModelConditions modelConditions=executableElement.getAnnotation(ModelConditions.class);
  if (modelConditions != null) {
    whereSqlGen=new ModelWhereSqlGen(executableElement,tableInfo,update.sqlMode(),modelConditions);
  }
}","@Override protected void checkAnnotatedRule(){
  if (executableElement.getParameters().size() != 1) {
    throw new TgDaoException(String.format(""String_Node_Str"",executableElement.getSimpleName().toString()));
  }
  modelConditions=executableElement.getAnnotation(ModelConditions.class);
  if (modelConditions != null) {
    whereSqlGen=new ModelWhereSqlGen(executableElement,tableInfo,update.sqlMode(),modelConditions);
  }
}",0.9816091954022989
172389,"@Override protected void checkAnnotatedRule(){
  if (executableElement.getParameters().size() != 1) {
    throw new TgDaoException(String.format(""String_Node_Str"",executableElement.getSimpleName().toString()));
  }
  ModelConditions modelConditions=executableElement.getAnnotation(ModelConditions.class);
  if (modelConditions == null) {
  }
 else {
    whereSqlGen=new ModelWhereSqlGen(executableElement,tableInfo,SqlMode.COMMON,modelConditions);
  }
}","@Override protected void checkAnnotatedRule(){
  if (executableElement.getParameters().size() != 1) {
    throw new TgDaoException(String.format(""String_Node_Str"",executableElement.getSimpleName().toString()));
  }
  ModelConditions modelConditions=executableElement.getAnnotation(ModelConditions.class);
  if (modelConditions != null) {
    whereSqlGen=new ModelWhereSqlGen(executableElement,tableInfo,SqlMode.COMMON,modelConditions);
  }
}",0.970917225950783
172390,"public AbstractWhereSqlGen(ExecutableElement executableElement,TableMapping tableInfo,SqlMode sqlMode){
  super(executableElement,tableInfo);
  if (sqlMode == SqlMode.SELECTIVE) {
    if (executableElement.getAnnotation(ModelCondition.class) == null && executableElement.getParameters().size() == 1) {
      whereParamSqlGen=new DirectParamSqlGen();
      return;
    }
    whereParamSqlGen=new SelectiveParamSqlGen();
  }
 else {
    whereParamSqlGen=new DirectParamSqlGen();
  }
}","public AbstractWhereSqlGen(ExecutableElement executableElement,TableMapping tableInfo,SqlMode sqlMode){
  super(executableElement,tableInfo);
  if (sqlMode == SqlMode.SELECTIVE) {
    whereParamSqlGen=new SelectiveParamSqlGen();
  }
 else {
    whereParamSqlGen=new DirectParamSqlGen();
  }
}",0.6149870801033591
172391,"@Select(columns=""String_Node_Str"") List<User> queryUser1(Integer age);","@Select(columns=""String_Node_Str"") List<User> queryUser1(@Param(""String_Node_Str"") Integer age);",0.8433734939759037
172392,"/** 
 * Get a LifeCycleManager by passing in a   {@link android.app.Fragment}. <p>Only used after JELLY_BEAN_MR1(api 17), as fragment after this could add child fragment</p>
 * @param fragment
 * @param initSate
 * @return
 */
@NonNull @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) public static FragmentLifeCycleManager with(@NonNull android.app.Fragment fragment,InitSate initSate){
  return get().lifeCycleImpl.with(fragment,initSate);
}","/** 
 * Get a LifeCycleManager by passing in a   {@link android.app.Fragment}. <p> <p>Only used after JELLY_BEAN_MR1(api 17), as fragment after this could add child fragment</p>
 * @param fragment listened fragment, will not be retained
 * @param initSate fragment state when call this method
 * @return A LifeCycleManager to listen {@link me.ykrank.androidlifecycle.event.FragmentEvent}
 */
@NonNull @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) public static FragmentLifeCycleManager with(@NonNull android.app.Fragment fragment,InitSate initSate){
  return get().lifeCycleImpl.with(fragment,initSate);
}",0.8424068767908309
172393,"static InitSate getParentState(Fragment fragment){
  InitSate initState;
  if (fragment.isResumed()) {
    initState=InitSate.RESUMED;
  }
 else   if (fragment.isVisible()) {
    initState=InitSate.BEFORE_RESUMED;
  }
 else {
    initState=InitSate.BEFORE_STARTED;
  }
  return initState;
}","static InitSate getParentState(android.app.Fragment fragment){
  InitSate initState;
  if (fragment.isResumed()) {
    initState=InitSate.RESUMED;
  }
 else   if (fragment.isVisible()) {
    initState=InitSate.BEFORE_RESUMED;
  }
 else {
    initState=InitSate.BEFORE_STARTED;
  }
  return initState;
}",0.9797297297297296
172394,"private void l(String msg){
  Log.d(""String_Node_Str"",msg);
}","private void l(String msg){
  if (AndroidLifeCycle.loggable() && Log.isLoggable(TAG,Log.DEBUG)) {
    Log.d(TAG,msg);
  }
}",0.4782608695652174
172395,"@Override public void onResume(){
  super.onResume();
  l(""String_Node_Str"");
  if (!init) {
    if (initState == InitSate.RESUMED) {
      init=true;
      return;
    }
    init=true;
  }
  if (lifeCycle != null) {
    lifeCycle.onStart();
  }
}","@Override public void onResume(){
  super.onResume();
  l(""String_Node_Str"");
  if (!init) {
    if (initState == InitSate.RESUMED) {
      init=true;
      return;
    }
    init=true;
  }
  if (lifeCycle != null) {
    lifeCycle.onResume();
  }
}",0.9414141414141414
172396,"private void l(String msg){
  Log.d(""String_Node_Str"",msg);
}","private void l(String msg){
  if (AndroidLifeCycle.loggable() && Log.isLoggable(TAG,Log.DEBUG)) {
    Log.d(TAG,msg);
  }
}",0.4782608695652174
172397,"@Override public void onResume(){
  super.onResume();
  l(""String_Node_Str"");
  if (!init) {
    if (initState == InitSate.RESUMED) {
      init=true;
      return;
    }
    init=true;
  }
  if (lifeCycle != null) {
    lifeCycle.onStart();
  }
}","@Override public void onResume(){
  super.onResume();
  l(""String_Node_Str"");
  if (!init) {
    if (initState == InitSate.RESUMED) {
      init=true;
      return;
    }
    init=true;
  }
  if (lifeCycle != null) {
    lifeCycle.onResume();
  }
}",0.9414141414141414
172398,"@Override public void sendMessageToFirebaseUser(final Context context,final Chat chat,final String receiverFirebaseToken){
  final String room_type_1=chat.getSenderUid() + ""String_Node_Str"" + chat.getReceiverUid();
  final String room_type_2=chat.getReceiverUid() + ""String_Node_Str"" + chat.getSenderUid();
  final DatabaseReference databaseReference=FirebaseDatabase.getInstance().getReference();
  databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).getRef().addListenerForSingleValueEvent(new ValueEventListener(){
    @Override public void onDataChange(    DataSnapshot dataSnapshot){
      if (dataSnapshot.hasChild(room_type_1)) {
        Log.e(TAG,""String_Node_Str"" + room_type_1 + ""String_Node_Str"");
        databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_1).child(String.valueOf(chat.getTimestamp())).setValue(chat);
      }
 else       if (dataSnapshot.hasChild(room_type_2)) {
        Log.e(TAG,""String_Node_Str"" + room_type_2 + ""String_Node_Str"");
        databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_2).child(String.valueOf(chat.getTimestamp())).setValue(chat);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
        databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_1).child(String.valueOf(chat.getTimestamp())).setValue(chat);
        getMessageFromFirebaseUser(chat.getSenderUid(),chat.getReceiverUid());
      }
      sendPushNotificationToReceiver(chat.getSender(),chat.getMessage(),chat.getSenderUid(),new SharedPrefUtil(context).getString(Constants.INSTANCE.getARG_FIREBASE_TOKEN()),receiverFirebaseToken);
      mOnSendMessageListener.onSendMessageSuccess();
    }
    @Override public void onCancelled(    DatabaseError databaseError){
      mOnSendMessageListener.onSendMessageFailure(""String_Node_Str"" + databaseError.getMessage());
    }
  }
);
}","@Override public void sendMessageToFirebaseUser(@NonNull final Context context,@NonNull final Chat chat,@NonNull final String receiverFirebaseToken){
  final String room_type_1=chat.getSenderUid() + ""String_Node_Str"" + chat.getReceiverUid();
  final String room_type_2=chat.getReceiverUid() + ""String_Node_Str"" + chat.getSenderUid();
  final DatabaseReference databaseReference=FirebaseDatabase.getInstance().getReference();
  databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).getRef().addListenerForSingleValueEvent(new ValueEventListener(){
    @Override public void onDataChange(    DataSnapshot dataSnapshot){
      if (dataSnapshot.hasChild(room_type_1)) {
        Log.e(TAG,""String_Node_Str"" + room_type_1 + ""String_Node_Str"");
        databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_1).child(String.valueOf(chat.getTimestamp())).setValue(chat);
      }
 else       if (dataSnapshot.hasChild(room_type_2)) {
        Log.e(TAG,""String_Node_Str"" + room_type_2 + ""String_Node_Str"");
        databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_2).child(String.valueOf(chat.getTimestamp())).setValue(chat);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
        databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_1).child(String.valueOf(chat.getTimestamp())).setValue(chat);
        getMessageFromFirebaseUser(chat.getSenderUid(),chat.getReceiverUid());
      }
      sendPushNotificationToReceiver(chat.getSender(),chat.getMessage(),chat.getSenderUid(),new SharedPrefUtil(context).getString(Constants.INSTANCE.getARG_FIREBASE_TOKEN()),receiverFirebaseToken);
      mOnSendMessageListener.onSendMessageSuccess();
    }
    @Override public void onCancelled(    DatabaseError databaseError){
      mOnSendMessageListener.onSendMessageFailure(""String_Node_Str"" + databaseError.getMessage());
    }
  }
);
}",0.9929003418353932
172399,"@Override public void getMessageFromFirebaseUser(String senderUid,String receiverUid){
  final String room_type_1=senderUid + ""String_Node_Str"" + receiverUid;
  final String room_type_2=receiverUid + ""String_Node_Str"" + senderUid;
  final DatabaseReference databaseReference=FirebaseDatabase.getInstance().getReference();
  databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).getRef().addListenerForSingleValueEvent(new ValueEventListener(){
    @Override public void onDataChange(    DataSnapshot dataSnapshot){
      if (dataSnapshot.hasChild(room_type_1)) {
        Log.e(TAG,""String_Node_Str"" + room_type_1 + ""String_Node_Str"");
        FirebaseDatabase.getInstance().getReference().child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_1).addChildEventListener(new ChildEventListener(){
          @Override public void onChildAdded(          DataSnapshot dataSnapshot,          String s){
            Chat chat=dataSnapshot.getValue(Chat.class);
            mOnGetMessagesListener.onGetMessagesSuccess(chat);
          }
          @Override public void onChildChanged(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onChildRemoved(          DataSnapshot dataSnapshot){
          }
          @Override public void onChildMoved(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onCancelled(          DatabaseError databaseError){
            mOnGetMessagesListener.onGetMessagesFailure(""String_Node_Str"" + databaseError.getMessage());
          }
        }
);
      }
 else       if (dataSnapshot.hasChild(room_type_2)) {
        Log.e(TAG,""String_Node_Str"" + room_type_2 + ""String_Node_Str"");
        FirebaseDatabase.getInstance().getReference().child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_2).addChildEventListener(new ChildEventListener(){
          @Override public void onChildAdded(          DataSnapshot dataSnapshot,          String s){
            Chat chat=dataSnapshot.getValue(Chat.class);
            mOnGetMessagesListener.onGetMessagesSuccess(chat);
          }
          @Override public void onChildChanged(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onChildRemoved(          DataSnapshot dataSnapshot){
          }
          @Override public void onChildMoved(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onCancelled(          DatabaseError databaseError){
            mOnGetMessagesListener.onGetMessagesFailure(""String_Node_Str"" + databaseError.getMessage());
          }
        }
);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    @Override public void onCancelled(    DatabaseError databaseError){
      mOnGetMessagesListener.onGetMessagesFailure(""String_Node_Str"" + databaseError.getMessage());
    }
  }
);
}","@Override public void getMessageFromFirebaseUser(@NonNull String senderUid,@NonNull String receiverUid){
  final String room_type_1=senderUid + ""String_Node_Str"" + receiverUid;
  final String room_type_2=receiverUid + ""String_Node_Str"" + senderUid;
  final DatabaseReference databaseReference=FirebaseDatabase.getInstance().getReference();
  databaseReference.child(Constants.INSTANCE.getARG_CHAT_ROOMS()).getRef().addListenerForSingleValueEvent(new ValueEventListener(){
    @Override public void onDataChange(    DataSnapshot dataSnapshot){
      if (dataSnapshot.hasChild(room_type_1)) {
        Log.e(TAG,""String_Node_Str"" + room_type_1 + ""String_Node_Str"");
        FirebaseDatabase.getInstance().getReference().child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_1).addChildEventListener(new ChildEventListener(){
          @Override public void onChildAdded(          DataSnapshot dataSnapshot,          String s){
            Chat chat=dataSnapshot.getValue(Chat.class);
            mOnGetMessagesListener.onGetMessagesSuccess(chat);
          }
          @Override public void onChildChanged(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onChildRemoved(          DataSnapshot dataSnapshot){
          }
          @Override public void onChildMoved(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onCancelled(          DatabaseError databaseError){
            mOnGetMessagesListener.onGetMessagesFailure(""String_Node_Str"" + databaseError.getMessage());
          }
        }
);
      }
 else       if (dataSnapshot.hasChild(room_type_2)) {
        Log.e(TAG,""String_Node_Str"" + room_type_2 + ""String_Node_Str"");
        FirebaseDatabase.getInstance().getReference().child(Constants.INSTANCE.getARG_CHAT_ROOMS()).child(room_type_2).addChildEventListener(new ChildEventListener(){
          @Override public void onChildAdded(          DataSnapshot dataSnapshot,          String s){
            Chat chat=dataSnapshot.getValue(Chat.class);
            mOnGetMessagesListener.onGetMessagesSuccess(chat);
          }
          @Override public void onChildChanged(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onChildRemoved(          DataSnapshot dataSnapshot){
          }
          @Override public void onChildMoved(          DataSnapshot dataSnapshot,          String s){
          }
          @Override public void onCancelled(          DatabaseError databaseError){
            mOnGetMessagesListener.onGetMessagesFailure(""String_Node_Str"" + databaseError.getMessage());
          }
        }
);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
      }
    }
    @Override public void onCancelled(    DatabaseError databaseError){
      mOnGetMessagesListener.onGetMessagesFailure(""String_Node_Str"" + databaseError.getMessage());
    }
  }
);
}",0.9969230769230768
172400,"public ChatInteractor(ChatContract.OnSendMessageListener onSendMessageListener,ChatContract.OnGetMessagesListener onGetMessagesListener){
  this.mOnSendMessageListener=onSendMessageListener;
  this.mOnGetMessagesListener=onGetMessagesListener;
}","ChatInteractor(ChatContract.OnSendMessageListener onSendMessageListener,ChatContract.OnGetMessagesListener onGetMessagesListener){
  this.mOnSendMessageListener=onSendMessageListener;
  this.mOnGetMessagesListener=onGetMessagesListener;
}",0.9855072463768116
172401,"private void configureMyChatViewHolder(final MyChatViewHolder myChatViewHolder,int position){
  final Chat chat=mChats.get(position);
  myChatViewHolder.txtChatMessage.setText(chat.getMessage());
  FirebaseStorage storage=FirebaseStorage.getInstance();
  StorageReference storageRef=storage.getReferenceFromUrl(String.valueOf(R.string.storage_link));
  storageRef.child(""String_Node_Str"" + chat.getSender() + ""String_Node_Str"").getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>(){
    @Override public void onSuccess(    Uri uri){
      try {
        Glide.with(myChatViewHolder.imgViewUser.getContext()).load(""String_Node_Str"" + uri.toString()).diskCacheStrategy(DiskCacheStrategy.ALL).into(myChatViewHolder.imgViewUser);
      }
 catch (      Exception e) {
      }
    }
  }
);
  myChatViewHolder.imgViewUser.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(myChatViewHolder.imgViewUser.getContext(),ProfileActivity.class);
      Bundle b=new Bundle();
      b.putString(""String_Node_Str"",chat.getSender());
      intent.putExtras(b);
      myChatViewHolder.imgViewUser.getContext().startActivity(intent);
    }
  }
);
}","private void configureMyChatViewHolder(final MyChatViewHolder myChatViewHolder,int position){
  final Chat chat=mChats.get(position);
  myChatViewHolder.txtChatMessage.setText(chat.getMessage());
  FirebaseStorage storage=FirebaseStorage.getInstance();
  StorageReference storageRef=storage.getReferenceFromUrl(context.getResources().getString(R.string.storage_link));
  storageRef.child(""String_Node_Str"" + chat.getSender() + ""String_Node_Str"").getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>(){
    @Override public void onSuccess(    Uri uri){
      try {
        Glide.with(myChatViewHolder.imgViewUser.getContext()).load(""String_Node_Str"" + uri.toString()).diskCacheStrategy(DiskCacheStrategy.ALL).into(myChatViewHolder.imgViewUser);
      }
 catch (      Exception e) {
      }
    }
  }
);
  myChatViewHolder.imgViewUser.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(myChatViewHolder.imgViewUser.getContext(),ProfileActivity.class);
      Bundle b=new Bundle();
      b.putString(""String_Node_Str"",chat.getSender());
      intent.putExtras(b);
      myChatViewHolder.imgViewUser.getContext().startActivity(intent);
    }
  }
);
}",0.982011447260834
172402,"/** 
 * @param obj           input array
 * @param listItemClass Defines the conent type of the list
 * @return List<listItemClass>
 */
public static List getList(Object obj,@NonNull Class listItemClass){
  if (!isArray(obj)) {
    throw new IllegalArgumentException(""String_Node_Str"" + obj);
  }
  List<Object> convertedList=new ArrayList<>();
  if (obj instanceof Bundle[]) {
    Bundle[] bundles=(Bundle[])obj;
    for (    Bundle bundle : bundles) {
      Object item=BridgeArguments.objectFromBundle(bundle,listItemClass);
      convertedList.add(item);
    }
  }
 else   if (isSupportedPrimitiveType(obj.getClass())) {
    if (Object[].class.isAssignableFrom(obj.getClass())) {
      Collections.addAll(convertedList,(Object[])obj);
    }
 else     if (int[].class.isAssignableFrom(obj.getClass())) {
      int[] objectArray=(int[])obj;
      for (      Object o : objectArray) {
        convertedList.add(o);
      }
    }
 else     if (double[].class.isAssignableFrom(obj.getClass())) {
      double[] objectArray=(double[])obj;
      for (      Object o : objectArray) {
        convertedList.add(o);
      }
    }
 else     if (boolean[].class.isAssignableFrom(obj.getClass())) {
      boolean[] boolArray=(boolean[])obj;
      for (      Object o : boolArray) {
        convertedList.add(o);
      }
    }
 else     if (float[].class.isAssignableFrom(obj.getClass())) {
      float[] floatArray=(float[])obj;
      for (      Object o : floatArray) {
        convertedList.add(o);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + obj.getClass().getSimpleName() + ""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + obj.getClass().getSimpleName() + ""String_Node_Str"");
  }
  return updateListResponseIfRequired(convertedList,listItemClass);
}","/** 
 * @param obj           input array
 * @param listItemClass Defines the conent type of the list
 * @return List<listItemClass>
 */
public static List getList(Object obj,@NonNull Class listItemClass){
  if (!isArray(obj)) {
    throw new IllegalArgumentException(""String_Node_Str"" + obj);
  }
  List<Object> convertedList=new ArrayList<>();
  if (obj.getClass().isAssignableFrom(Bundle[].class)) {
    for (    Object bundle : (Object[])obj) {
      Object item=BridgeArguments.objectFromBundle((Bundle)bundle,listItemClass);
      convertedList.add(item);
    }
  }
 else   if (isSupportedPrimitiveType(obj.getClass())) {
    if (Object[].class.isAssignableFrom(obj.getClass())) {
      Collections.addAll(convertedList,(Object[])obj);
    }
 else     if (int[].class.isAssignableFrom(obj.getClass())) {
      int[] objectArray=(int[])obj;
      for (      Object o : objectArray) {
        convertedList.add(o);
      }
    }
 else     if (double[].class.isAssignableFrom(obj.getClass())) {
      double[] objectArray=(double[])obj;
      for (      Object o : objectArray) {
        convertedList.add(o);
      }
    }
 else     if (boolean[].class.isAssignableFrom(obj.getClass())) {
      boolean[] boolArray=(boolean[])obj;
      for (      Object o : boolArray) {
        convertedList.add(o);
      }
    }
 else     if (float[].class.isAssignableFrom(obj.getClass())) {
      float[] floatArray=(float[])obj;
      for (      Object o : floatArray) {
        convertedList.add(o);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + obj.getClass().getSimpleName() + ""String_Node_Str"");
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + obj.getClass().getSimpleName() + ""String_Node_Str"");
  }
  return updateListResponseIfRequired(convertedList,listItemClass);
}",0.956877729257642
172403,"@Override public void run(){
  ReactInstanceManager reactInstanceManager;
  try {
    reactInstanceManager=ReactInstanceManager.builder().setApplication(instrumentation.newApplication(MyTestApplication.class.getClassLoader(),MyTestApplication.class.getName(),getInstrumentation().getContext())).setBundleAssetName(""String_Node_Str"").setJSMainModuleName(""String_Node_Str"").addPackage(new MainReactPackage()).setUseDeveloperSupport(false).setInitialLifecycleState(LifecycleState.BEFORE_CREATE).addPackage(mockElectrodePackage).build();
    reactInstanceManager.createReactContextInBackground();
    reactInstanceManager.addReactInstanceEventListener(new ReactInstanceManager.ReactInstanceEventListener(){
      @Override public void onReactContextInitialized(      ReactContext context){
        mockElectrodePackage.onReactNativeInitialized();
        countDownLatch.countDown();
      }
    }
);
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}","@Override public void run(){
  ReactInstanceManager reactInstanceManager;
  try {
    reactInstanceManager=ReactInstanceManager.builder().setApplication(instrumentation.newApplication(MyTestApplication.class.getClassLoader(),MyTestApplication.class.getName(),getInstrumentation().getContext())).setBundleAssetName(""String_Node_Str"").addPackage(new MainReactPackage()).setUseDeveloperSupport(false).setInitialLifecycleState(LifecycleState.BEFORE_CREATE).addPackage(mockElectrodePackage).build();
    reactInstanceManager.createReactContextInBackground();
    reactInstanceManager.addReactInstanceEventListener(new ReactInstanceManager.ReactInstanceEventListener(){
      @Override public void onReactContextInitialized(      ReactContext context){
        mockElectrodePackage.onReactNativeInitialized();
        countDownLatch.countDown();
      }
    }
);
  }
 catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
}",0.981952799629801
172404,"private void initBridge(){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  final ElectrodeBridgePackage mockElectrodePackage=new MockElectrodePackage();
  final Instrumentation instrumentation=this.getInstrumentation();
  runOnUiThread(new Runnable(){
    @Override public void run(){
      ReactInstanceManager reactInstanceManager;
      try {
        reactInstanceManager=ReactInstanceManager.builder().setApplication(instrumentation.newApplication(MyTestApplication.class.getClassLoader(),MyTestApplication.class.getName(),getInstrumentation().getContext())).setBundleAssetName(""String_Node_Str"").setJSMainModuleName(""String_Node_Str"").addPackage(new MainReactPackage()).setUseDeveloperSupport(false).setInitialLifecycleState(LifecycleState.BEFORE_CREATE).addPackage(mockElectrodePackage).build();
        reactInstanceManager.createReactContextInBackground();
        reactInstanceManager.addReactInstanceEventListener(new ReactInstanceManager.ReactInstanceEventListener(){
          @Override public void onReactContextInitialized(          ReactContext context){
            mockElectrodePackage.onReactNativeInitialized();
            countDownLatch.countDown();
          }
        }
);
      }
 catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
);
  waitForCountDownToFinishOrFail(countDownLatch);
}","private void initBridge(){
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  final ElectrodeBridgePackage mockElectrodePackage=new MockElectrodePackage();
  final Instrumentation instrumentation=this.getInstrumentation();
  runOnUiThread(new Runnable(){
    @Override public void run(){
      ReactInstanceManager reactInstanceManager;
      try {
        reactInstanceManager=ReactInstanceManager.builder().setApplication(instrumentation.newApplication(MyTestApplication.class.getClassLoader(),MyTestApplication.class.getName(),getInstrumentation().getContext())).setBundleAssetName(""String_Node_Str"").addPackage(new MainReactPackage()).setUseDeveloperSupport(false).setInitialLifecycleState(LifecycleState.BEFORE_CREATE).addPackage(mockElectrodePackage).build();
        reactInstanceManager.createReactContextInBackground();
        reactInstanceManager.addReactInstanceEventListener(new ReactInstanceManager.ReactInstanceEventListener(){
          @Override public void onReactContextInitialized(          ReactContext context){
            mockElectrodePackage.onReactNativeInitialized();
            countDownLatch.countDown();
          }
        }
);
      }
 catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
);
  waitForCountDownToFinishOrFail(countDownLatch);
}",0.986986986986987
172405,"/** 
 * Method for testing only
 */
@VisibleForTesting void debug_ClearRequestHandlerRegistrar(){
  ((RequestRegistrarImpl)mRequestRegistrar).reset();
}","/** 
 * Method for testing only
 */
@VisibleForTesting void debug_ClearRequestHandlerRegistrar(){
  ((RequestRegistrarImpl)sRequestRegistrar).reset();
}",0.993421052631579
172406,"/** 
 * Initializes a new instance of ElectrodeBridgeTransceiver
 * @param reactContextWrapper The react application context
 */
private ElectrodeBridgeTransceiver(@NonNull ReactContextWrapper reactContextWrapper){
  super(reactContextWrapper.getContext());
  mReactContextWrapper=reactContextWrapper;
  mEventDispatcher=new EventDispatcherImpl(mEventRegistrar);
  mRequestDispatcher=new RequestDispatcherImpl(mRequestRegistrar);
}","/** 
 * Initializes a new instance of ElectrodeBridgeTransceiver
 * @param reactContextWrapper The react application context
 */
private ElectrodeBridgeTransceiver(@NonNull ReactContextWrapper reactContextWrapper){
  super(reactContextWrapper.getContext());
  mReactContextWrapper=reactContextWrapper;
}",0.8256130790190735
172407,"/** 
 * Creates the ElectrodeBridgeTransceiver singleton
 * @param reactContextWrapper {@link ReactContextWrapper}
 * @return The singleton instance of ElectrodeBridgeTransceiver
 */
@VisibleForTesting static ElectrodeBridgeTransceiver create(@NonNull ReactContextWrapper reactContextWrapper){
  Logger.d(TAG,""String_Node_Str"");
synchronized (ElectrodeBridgeTransceiver.class) {
    if (sInstance == null) {
      sInstance=new ElectrodeBridgeTransceiver(reactContextWrapper);
    }
  }
  return sInstance;
}","/** 
 * Creates the ElectrodeBridgeTransceiver singleton
 * @param reactContextWrapper {@link ReactContextWrapper}
 * @return The singleton instance of ElectrodeBridgeTransceiver
 */
@VisibleForTesting static ElectrodeBridgeTransceiver create(@NonNull ReactContextWrapper reactContextWrapper){
  Logger.d(TAG,""String_Node_Str"");
  sInstance=new ElectrodeBridgeTransceiver(reactContextWrapper);
  return sInstance;
}",0.8602383531960996
172408,"@Override public void registerRequestHandler(@NonNull String name,@NonNull ElectrodeBridgeRequestHandler<ElectrodeBridgeRequest,Object> requestHandler){
  mRequestRegistrar.registerRequestHandler(name,requestHandler);
}","@Override public void registerRequestHandler(@NonNull String name,@NonNull ElectrodeBridgeRequestHandler<ElectrodeBridgeRequest,Object> requestHandler){
  sRequestRegistrar.registerRequestHandler(name,requestHandler);
}",0.9954337899543378
172409,"private void notifyLocalEventListeners(@NonNull final ElectrodeBridgeEvent event){
  mReactContextWrapper.runOnUiQueueThread(new Runnable(){
    @Override public void run(){
      mEventDispatcher.dispatchEvent(event);
    }
  }
);
}","private void notifyLocalEventListeners(@NonNull final ElectrodeBridgeEvent event){
  mReactContextWrapper.runOnUiQueueThread(new Runnable(){
    @Override public void run(){
      sEventDispatcher.dispatchEvent(event);
    }
  }
);
}",0.9957081545064378
172410,"private void dispatchRequestToLocalHandler(@NonNull final BridgeTransaction transaction){
  Logger.d(TAG,""String_Node_Str"",transaction.getRequest().getId());
  final ElectrodeBridgeRequest request=transaction.getRequest();
  mRequestDispatcher.dispatchRequest(transaction.getRequest(),new ElectrodeBridgeResponseListener<Object>(){
    @Override public void onFailure(    @NonNull FailureMessage failureMessage){
      ElectrodeBridgeResponse response=ElectrodeBridgeResponse.createResponseForRequest(request,null,failureMessage);
      handleResponse(response);
    }
    @Override public void onSuccess(    @Nullable Object responseData){
      ElectrodeBridgeResponse response=ElectrodeBridgeResponse.createResponseForRequest(request,responseData,null);
      handleResponse(response);
    }
  }
);
}","private void dispatchRequestToLocalHandler(@NonNull final BridgeTransaction transaction){
  Logger.d(TAG,""String_Node_Str"",transaction.getRequest().getId());
  final ElectrodeBridgeRequest request=transaction.getRequest();
  sRequestDispatcher.dispatchRequest(transaction.getRequest(),new ElectrodeBridgeResponseListener<Object>(){
    @Override public void onFailure(    @NonNull FailureMessage failureMessage){
      ElectrodeBridgeResponse response=ElectrodeBridgeResponse.createResponseForRequest(request,null,failureMessage);
      handleResponse(response);
    }
    @Override public void onSuccess(    @Nullable Object responseData){
      ElectrodeBridgeResponse response=ElectrodeBridgeResponse.createResponseForRequest(request,responseData,null);
      handleResponse(response);
    }
  }
);
}",0.9987546699875468
172411,"private void handleRequest(@NonNull final ElectrodeBridgeRequest request,@Nullable ElectrodeBridgeResponseListener<ElectrodeBridgeResponse> responseListener){
  logRequest(request);
  if (responseListener == null && !request.isJsInitiated()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final BridgeTransaction bridgeTransaction=createTransaction(request,responseListener);
  if (mRequestDispatcher.canHandleRequest(request.getName())) {
    dispatchRequestToLocalHandler(bridgeTransaction);
  }
 else   if (!request.isJsInitiated()) {
    dispatchRequestToReact(bridgeTransaction);
  }
 else {
    Logger.d(TAG,""String_Node_Str"",request.getId(),request.getName());
    handleResponse(ElectrodeBridgeResponse.createResponseForRequest(request,null,BridgeFailureMessage.create(""String_Node_Str"",""String_Node_Str"" + request.getName())));
  }
}","private void handleRequest(@NonNull final ElectrodeBridgeRequest request,@Nullable ElectrodeBridgeResponseListener<ElectrodeBridgeResponse> responseListener){
  logRequest(request);
  if (responseListener == null && !request.isJsInitiated()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final BridgeTransaction bridgeTransaction=createTransaction(request,responseListener);
  if (sRequestDispatcher.canHandleRequest(request.getName())) {
    dispatchRequestToLocalHandler(bridgeTransaction);
  }
 else   if (!request.isJsInitiated()) {
    dispatchRequestToReact(bridgeTransaction);
  }
 else {
    Logger.d(TAG,""String_Node_Str"",request.getId(),request.getName());
    handleResponse(ElectrodeBridgeResponse.createResponseForRequest(request,null,BridgeFailureMessage.create(""String_Node_Str"",""String_Node_Str"" + request.getName())));
  }
}",0.9988399071925754
172412,"@NonNull private BridgeTransaction createTransaction(@NonNull ElectrodeBridgeRequest request,@Nullable ElectrodeBridgeResponseListener<ElectrodeBridgeResponse> responseListener){
  final BridgeTransaction bridgeTransaction=new BridgeTransaction(request,responseListener);
  pendingTransactions.put(request.getId(),bridgeTransaction);
  startTimeOutCheckForTransaction(bridgeTransaction);
  return bridgeTransaction;
}","@NonNull private BridgeTransaction createTransaction(@NonNull ElectrodeBridgeRequest request,@Nullable ElectrodeBridgeResponseListener<ElectrodeBridgeResponse> responseListener){
  final BridgeTransaction bridgeTransaction=new BridgeTransaction(request,responseListener);
  sPendingTransactions.put(request.getId(),bridgeTransaction);
  startTimeOutCheckForTransaction(bridgeTransaction);
  return bridgeTransaction;
}",0.9964071856287424
172413,"private void handleResponse(@NonNull ElectrodeBridgeResponse bridgeResponse){
  Logger.d(TAG,""String_Node_Str"");
  BridgeTransaction transaction=pendingTransactions.get(bridgeResponse.getId());
  if (transaction != null) {
    transaction.setResponse(bridgeResponse);
    completeTransaction(transaction);
  }
 else {
    Logger.i(TAG,""String_Node_Str"",bridgeResponse.getId(),bridgeResponse.getName());
  }
}","private void handleResponse(@NonNull ElectrodeBridgeResponse bridgeResponse){
  Logger.d(TAG,""String_Node_Str"");
  BridgeTransaction transaction=sPendingTransactions.get(bridgeResponse.getId());
  if (transaction != null) {
    transaction.setResponse(bridgeResponse);
    completeTransaction(transaction);
  }
 else {
    Logger.i(TAG,""String_Node_Str"",bridgeResponse.getId(),bridgeResponse.getName());
  }
}",0.996328029375765
172414,"@NonNull @Override public UUID addEventListener(@NonNull String name,@NonNull ElectrodeBridgeEventListener<ElectrodeBridgeEvent> eventListener){
  Logger.d(TAG,""String_Node_Str"",eventListener,name);
  return mEventRegistrar.registerEventListener(name,eventListener);
}","@NonNull @Override public UUID addEventListener(@NonNull String name,@NonNull ElectrodeBridgeEventListener<ElectrodeBridgeEvent> eventListener){
  Logger.d(TAG,""String_Node_Str"",eventListener,name);
  return sEventRegistrar.registerEventListener(name,eventListener);
}",0.996268656716418
172415,"private void completeTransaction(@NonNull final BridgeTransaction transaction){
  if (transaction.getResponse() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Logger.d(TAG,""String_Node_Str"",transaction.getId());
  pendingTransactions.remove(transaction.getId());
  final ElectrodeBridgeResponse response=transaction.getResponse();
  logResponse(response);
  if (transaction.isJsInitiated()) {
    Logger.d(TAG,""String_Node_Str"");
    mReactContextWrapper.emitEvent(response);
  }
 else {
    if (transaction.getFinalResponseListener() != null) {
      if (response.getFailureMessage() != null) {
        Logger.d(TAG,""String_Node_Str"");
        mReactContextWrapper.runOnUiQueueThread(new Runnable(){
          @Override public void run(){
            transaction.getFinalResponseListener().onFailure(response.getFailureMessage());
          }
        }
);
      }
 else {
        Logger.d(TAG,""String_Node_Str"");
        mReactContextWrapper.runOnUiQueueThread(new Runnable(){
          @Override public void run(){
            transaction.getFinalResponseListener().onSuccess(response);
          }
        }
);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}","private void completeTransaction(@NonNull final BridgeTransaction transaction){
  if (transaction.getResponse() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Logger.d(TAG,""String_Node_Str"",transaction.getId());
  sPendingTransactions.remove(transaction.getId());
  final ElectrodeBridgeResponse response=transaction.getResponse();
  logResponse(response);
  if (transaction.isJsInitiated()) {
    Logger.d(TAG,""String_Node_Str"");
    mReactContextWrapper.emitEvent(response);
  }
 else {
    if (transaction.getFinalResponseListener() != null) {
      if (response.getFailureMessage() != null) {
        Logger.d(TAG,""String_Node_Str"");
        mReactContextWrapper.runOnUiQueueThread(new Runnable(){
          @Override public void run(){
            transaction.getFinalResponseListener().onFailure(response.getFailureMessage());
          }
        }
);
      }
 else {
        Logger.d(TAG,""String_Node_Str"");
        mReactContextWrapper.runOnUiQueueThread(new Runnable(){
          @Override public void run(){
            transaction.getFinalResponseListener().onSuccess(response);
          }
        }
);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}",0.9987878787878788
172416,"/** 
 * Called whenever a request matching this handler is received
 * @param payload          The payload of the request as a Bundle, payload can be null for a request.
 * @param responseListener An instance of {@link ElectrodeBridgeResponseListener}
 */
void onRequest(@Nullable TReq payload,@NonNull ElectrodeBridgeResponseListener<TResp> responseListener);","/** 
 * Called whenever a request matching this handler is received
 * @param payload          The payload of the request, payload can be null for a request.
 * @param responseListener An instance of {@link ElectrodeBridgeResponseListener}
 */
void onRequest(@Nullable TReq payload,@NonNull ElectrodeBridgeResponseListener<TResp> responseListener);",0.9830508474576272
172417,"@Override public void execute(){
  Logger.d(TAG,""String_Node_Str"",requestName);
  Bundle data=BridgeArguments.generateDataBundle(requestPayload);
  ElectrodeBridgeRequest req=new ElectrodeBridgeRequest.Builder(requestName).withData(data).build();
  ElectrodeBridgeHolder.sendRequest(req,new ElectrodeBridgeResponseListener<Bundle>(){
    @Override public void onFailure(    @NonNull FailureMessage failureMessage){
      responseListener.onFailure(failureMessage);
    }
    @Override public void onSuccess(    @Nullable Bundle responseData){
      TResp response=(TResp)BridgeArguments.generateObject(responseData,responseType);
      if (response instanceof List && !((List)response).isEmpty() && !responseType.getClass().isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(responseType)) {
        response=(TResp)updateResponse((List)response);
      }
      runValidationForListResponse(response);
      Logger.d(TAG,""String_Node_Str"",response,requestName);
      responseListener.onSuccess(response);
    }
  }
);
}","@Override public void execute(){
  Logger.d(TAG,""String_Node_Str"",requestName);
  Bundle data=BridgeArguments.generateDataBundle(requestPayload);
  ElectrodeBridgeRequest req=new ElectrodeBridgeRequest.Builder(requestName).withData(data).build();
  ElectrodeBridgeHolder.sendRequest(req,new ElectrodeBridgeResponseListener<Bundle>(){
    @Override public void onFailure(    @NonNull FailureMessage failureMessage){
      responseListener.onFailure(failureMessage);
    }
    @Override public void onSuccess(    @Nullable Bundle responseData){
      TResp response=(TResp)BridgeArguments.generateObject(responseData,getResponseType(responseType));
      response=preOnSuccess(response);
      Logger.d(TAG,""String_Node_Str"",response,requestName);
      responseListener.onSuccess(response);
    }
  }
);
}",0.8130841121495327
172418,"@Override public void onSuccess(@Nullable Bundle responseData){
  TResp response=(TResp)BridgeArguments.generateObject(responseData,responseType);
  if (response instanceof List && !((List)response).isEmpty() && !responseType.getClass().isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(responseType)) {
    response=(TResp)updateResponse((List)response);
  }
  runValidationForListResponse(response);
  Logger.d(TAG,""String_Node_Str"",response,requestName);
  responseListener.onSuccess(response);
}","@Override public void onSuccess(@Nullable Bundle responseData){
  TResp response=(TResp)BridgeArguments.generateObject(responseData,getResponseType(responseType));
  response=preOnSuccess(response);
  Logger.d(TAG,""String_Node_Str"",response,requestName);
  responseListener.onSuccess(response);
}",0.5879732739420935
172419,"/** 
 * Looks for an entry with key =   {@link BridgeMessage#BRIDGE_MSG_DATA} inside the bundle and then tries to convert the value to either a primitive wrapper or {@link Bridgeable}
 * @param payload     {@link Bundle}
 * @param returnClass {@link Class}
 * @return T
 */
@Nullable public static Object generateObject(@Nullable Bundle payload,@NonNull Class<?> returnClass){
  if (payload == null || payload.isEmpty()) {
    return null;
  }
  Object data=payload.get(BridgeMessage.BRIDGE_MSG_DATA);
  if (data == null) {
    Logger.d(TAG,""String_Node_Str"",BridgeMessage.BRIDGE_MSG_DATA,payload);
    return null;
  }
  Object response;
  if (isArray(data)) {
    response=getList(data,returnClass);
  }
 else   if (data instanceof Bundle) {
    response=objectFromBundle((Bundle)data,returnClass);
  }
 else   if (returnClass.isAssignableFrom(data.getClass()) && isSupportedPrimitiveType(data.getClass())) {
    response=data;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + data.getClass() + ""String_Node_Str"");
  }
  return response;
}","/** 
 * Looks for an entry with key =   {@link BridgeMessage#BRIDGE_MSG_DATA} inside the bundle and then tries to convert the value to either a primitive wrapper or {@link Bridgeable}
 * @param payload     {@link Bundle}
 * @param returnClass {@link Class}
 * @return T
 */
@Nullable public static Object generateObject(@Nullable Bundle payload,@NonNull Class<?> returnClass){
  if (payload == null || payload.isEmpty()) {
    return null;
  }
  Object data=payload.get(BridgeMessage.BRIDGE_MSG_DATA);
  if (data == null) {
    Logger.d(TAG,""String_Node_Str"",BridgeMessage.BRIDGE_MSG_DATA,payload);
    return null;
  }
  Object response;
  if (isArray(data)) {
    response=getList(data,returnClass);
  }
 else   if (data instanceof Bundle) {
    response=objectFromBundle((Bundle)data,returnClass);
  }
 else   if (isSupportedPrimitiveType(data.getClass())) {
    response=data;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + data.getClass() + ""String_Node_Str""+ returnClass);
  }
  return response;
}",0.970334928229665
172420,"/** 
 * Called whenever a request matching this handler is received
 * @param payload          The payload of the request as a Bundle, payload can be null for a request.
 * @param responseListener An instance of {@link ElectrodeBridgeResponseListener}
 */
void onRequest(@Nullable TReq payload,@NonNull ElectrodeBridgeResponseListener<TResp> responseListener);","/** 
 * Called whenever a request matching this handler is received
 * @param payload          The payload of the request, payload can be null for a request.
 * @param responseListener An instance of {@link ElectrodeBridgeResponseListener}
 */
void onRequest(@Nullable TReq payload,@NonNull ElectrodeBridgeResponseListener<TResp> responseListener);",0.9830508474576272
172421,"@Override public void execute(){
  Logger.d(TAG,""String_Node_Str"",requestName);
  Bundle data=BridgeArguments.generateDataBundle(requestPayload);
  ElectrodeBridgeRequest req=new ElectrodeBridgeRequest.Builder(requestName).withData(data).build();
  ElectrodeBridgeHolder.sendRequest(req,new ElectrodeBridgeResponseListener<Bundle>(){
    @Override public void onFailure(    @NonNull FailureMessage failureMessage){
      responseListener.onFailure(failureMessage);
    }
    @Override public void onSuccess(    @Nullable Bundle responseData){
      TResp response=(TResp)BridgeArguments.generateObject(responseData,responseType);
      if (response instanceof List && !((List)response).isEmpty() && !responseType.getClass().isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(responseType)) {
        response=(TResp)updateResponse((List)response);
      }
      runValidationForListResponse(response);
      Logger.d(TAG,""String_Node_Str"",response,requestName);
      responseListener.onSuccess(response);
    }
  }
);
}","@Override public void execute(){
  Logger.d(TAG,""String_Node_Str"",requestName);
  Bundle data=BridgeArguments.generateDataBundle(requestPayload);
  ElectrodeBridgeRequest req=new ElectrodeBridgeRequest.Builder(requestName).withData(data).build();
  ElectrodeBridgeHolder.sendRequest(req,new ElectrodeBridgeResponseListener<Bundle>(){
    @Override public void onFailure(    @NonNull FailureMessage failureMessage){
      responseListener.onFailure(failureMessage);
    }
    @Override public void onSuccess(    @Nullable Bundle responseData){
      TResp response=(TResp)BridgeArguments.generateObject(responseData,getResponseType(responseType));
      response=preOnSuccess(response);
      Logger.d(TAG,""String_Node_Str"",response,requestName);
      responseListener.onSuccess(response);
    }
  }
);
}",0.8130841121495327
172422,"@Override public void onSuccess(@Nullable Bundle responseData){
  TResp response=(TResp)BridgeArguments.generateObject(responseData,responseType);
  if (response instanceof List && !((List)response).isEmpty() && !responseType.getClass().isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(((List)response).get(0).getClass())&& Number.class.isAssignableFrom(responseType)) {
    response=(TResp)updateResponse((List)response);
  }
  runValidationForListResponse(response);
  Logger.d(TAG,""String_Node_Str"",response,requestName);
  responseListener.onSuccess(response);
}","@Override public void onSuccess(@Nullable Bundle responseData){
  TResp response=(TResp)BridgeArguments.generateObject(responseData,getResponseType(responseType));
  response=preOnSuccess(response);
  Logger.d(TAG,""String_Node_Str"",response,requestName);
  responseListener.onSuccess(response);
}",0.5879732739420935
172423,"/** 
 * Looks for an entry with key =   {@link BridgeMessage#BRIDGE_MSG_DATA} inside the bundle and then tries to convert the value to either a primitive wrapper or {@link Bridgeable}
 * @param payload     {@link Bundle}
 * @param returnClass {@link Class}
 * @return T
 */
@Nullable public static Object generateObject(@Nullable Bundle payload,@NonNull Class<?> returnClass){
  if (payload == null || payload.isEmpty()) {
    return null;
  }
  Object data=payload.get(BridgeMessage.BRIDGE_MSG_DATA);
  if (data == null) {
    Logger.d(TAG,""String_Node_Str"",BridgeMessage.BRIDGE_MSG_DATA,payload);
    return null;
  }
  Object response;
  if (isArray(data)) {
    response=getList(data,returnClass);
  }
 else   if (data instanceof Bundle) {
    response=objectFromBundle((Bundle)data,returnClass);
  }
 else   if (returnClass.isAssignableFrom(data.getClass()) && isSupportedPrimitiveType(data.getClass())) {
    response=data;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + data.getClass() + ""String_Node_Str"");
  }
  return response;
}","/** 
 * Looks for an entry with key =   {@link BridgeMessage#BRIDGE_MSG_DATA} inside the bundle and then tries to convert the value to either a primitive wrapper or {@link Bridgeable}
 * @param payload     {@link Bundle}
 * @param returnClass {@link Class}
 * @return T
 */
@Nullable public static Object generateObject(@Nullable Bundle payload,@NonNull Class<?> returnClass){
  if (payload == null || payload.isEmpty()) {
    return null;
  }
  Object data=payload.get(BridgeMessage.BRIDGE_MSG_DATA);
  if (data == null) {
    Logger.d(TAG,""String_Node_Str"",BridgeMessage.BRIDGE_MSG_DATA,payload);
    return null;
  }
  Object response;
  if (isArray(data)) {
    response=getList(data,returnClass);
  }
 else   if (data instanceof Bundle) {
    response=objectFromBundle((Bundle)data,returnClass);
  }
 else   if (isSupportedPrimitiveType(data.getClass())) {
    response=data;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + data.getClass() + ""String_Node_Str""+ returnClass);
  }
  return response;
}",0.970334928229665
172424,"@Override public void onRequest(@Nullable String payload,@NonNull ElectrodeBridgeResponseListener<Integer> responseListener){
  assertNotNull(payload);
  assertNotNull(responseListener);
  responseListener.onSuccess(30);
  countDownLatch.countDown();
}","@Override public void onRequest(@Nullable None payload,@NonNull ElectrodeBridgeResponseListener<Person> responseListener){
  assertNull(payload);
  countDownLatch.countDown();
}",0.7925407925407926
172425,"/** 
 * Looks for an entry with key =   {@link BridgeMessage#BRIDGE_MSG_DATA} inside the bundle and then tries to convert the value to either a primitive wrapper or {@link Bridgeable}
 * @param payload     {@link Bundle}
 * @param returnClass {@link Class}
 * @param < T >         return type
 * @return T
 */
@Nullable public static <T>T generateObject(@Nullable Bundle payload,@NonNull Class<T> returnClass){
  T response=null;
  if (payload != null && !payload.isEmpty()) {
    String key=BridgeMessage.BRIDGE_MSG_DATA;
    if (payload.get(key) == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + key + ""String_Node_Str""+ payload);
    }
    if (Bridgeable.class.isAssignableFrom(returnClass)) {
      if (payload.getBundle(key) == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + key + ""String_Node_Str"");
      }
      response=BridgeArguments.bridgeableFromBundle(payload.getBundle(key),returnClass);
    }
 else {
      response=(T)BridgeArguments.getPrimitiveFromBundle(payload,returnClass);
    }
  }
  return response;
}","/** 
 * Looks for an entry with key =   {@link BridgeMessage#BRIDGE_MSG_DATA} inside the bundle and then tries to convert the value to either a primitive wrapper or {@link Bridgeable}
 * @param payload     {@link Bundle}
 * @param returnClass {@link Class}
 * @param < T >         return type
 * @return T
 */
@Nullable public static <T>T generateObject(@Nullable Bundle payload,@NonNull Class<T> returnClass){
  T response=null;
  if (payload != null && !payload.isEmpty()) {
    String key=BridgeMessage.BRIDGE_MSG_DATA;
    if (payload.get(key) == null) {
      Logger.d(TAG,""String_Node_Str"",key,payload);
      return null;
    }
    if (Bridgeable.class.isAssignableFrom(returnClass)) {
      if (payload.getBundle(key) == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + key + ""String_Node_Str"");
      }
      response=BridgeArguments.bridgeableFromBundle(payload.getBundle(key),returnClass);
    }
 else {
      response=(T)BridgeArguments.getPrimitiveFromBundle(payload,returnClass);
    }
  }
  return response;
}",0.817752596789424
172426,"private void getFirstWriteResults(List<WriteResponse.CHOICE> mmsResponseValues,List<BasicDataAttribute> totalBdasToBeWritten,int[] numBdas,int i,FcModelNode fcModelNode,Data mmsData){
  WriteResponse.CHOICE writeResult=getWriteResult(fcModelNode,mmsData);
  if (writeResult == null) {
    FcModelNode fcModelNodeCopy=(FcModelNode)fcModelNode.copy();
    try {
      fcModelNodeCopy.setValueFromMmsDataObj(mmsData);
    }
 catch (    ServiceError e) {
      logger.warn(""String_Node_Str"",e);
      WriteResponse.CHOICE writeResponseChoice=new WriteResponse.CHOICE();
      writeResponseChoice.setFailure(new DataAccessError(serviceErrorToMmsError(e)));
      mmsResponseValues.add(writeResponseChoice);
      return;
    }
    if (fcModelNodeCopy.fc == Fc.CO) {
      fcModelNodeCopy=(BasicDataAttribute)fcModelNodeCopy.getChild(""String_Node_Str"");
    }
 else {
    }
    List<BasicDataAttribute> bdas=fcModelNodeCopy.getBasicDataAttributes();
    totalBdasToBeWritten.addAll(bdas);
    numBdas[i]=bdas.size();
    mmsResponseValues.add(null);
  }
 else {
    mmsResponseValues.add(writeResult);
  }
}","private void getFirstWriteResults(List<WriteResponse.CHOICE> mmsResponseValues,List<BasicDataAttribute> totalBdasToBeWritten,int[] numBdas,int i,FcModelNode fcModelNode,Data mmsData){
  WriteResponse.CHOICE writeResult=getWriteResult(fcModelNode,mmsData);
  if (writeResult == null) {
    FcModelNode fcModelNodeCopy=(FcModelNode)fcModelNode.copy();
    try {
      fcModelNodeCopy.setValueFromMmsDataObj(mmsData);
    }
 catch (    ServiceError e) {
      logger.warn(""String_Node_Str"",e);
      WriteResponse.CHOICE writeResponseChoice=new WriteResponse.CHOICE();
      writeResponseChoice.setFailure(new DataAccessError(serviceErrorToMmsError(e)));
      mmsResponseValues.add(writeResponseChoice);
      return;
    }
    if (fcModelNodeCopy.fc == Fc.CO) {
      fcModelNodeCopy=(FcModelNode)fcModelNodeCopy.getChild(""String_Node_Str"");
    }
 else {
    }
    List<BasicDataAttribute> bdas=fcModelNodeCopy.getBasicDataAttributes();
    totalBdasToBeWritten.addAll(bdas);
    numBdas[i]=bdas.size();
    mmsResponseValues.add(null);
  }
 else {
    mmsResponseValues.add(writeResult);
  }
}",0.9876993166287016
172427,"public long getTimestampValue(){
  if (value.length != 6) {
    return -1;
  }
  return ((value[0] & 0xffl) << 24) + ((value[1] & 0xffl) << 16) + ((value[2] & 0xffl) << 8)+ (value[3] & 0xffl)+ (((value[4] & 0xffl) << 8) + (value[5] & 0xffl)) * 86400000l;
}","public long getTimestampValue(){
  if (value.length != 6) {
    return -1;
  }
  return (((value[0] & 0xffl) << 24) + ((value[1] & 0xffl) << 16) + ((value[2] & 0xffl) << 8)+ (value[3] & 0xffl)+ (((value[4] & 0xffl) << 8) + (value[5] & 0xffl)) * 86400000l) + 441763200000l;
}",0.9660377358490566
172428,"private boolean decodeGetFileDirectoryResponse(ConfirmedServiceResponse confirmedServiceResponse,List<FileInformation> files) throws ServiceError {
  if (confirmedServiceResponse.getFileDirectory() == null) {
    throw new ServiceError(ServiceError.FAILED_DUE_TO_COMMUNICATIONS_CONSTRAINT,""String_Node_Str"");
  }
  FileDirectoryResponse fileDirectoryRes=confirmedServiceResponse.getFileDirectory();
  List<DirectoryEntry> entries=fileDirectoryRes.getListOfDirectoryEntry().getDirectoryEntry();
  for (  DirectoryEntry entry : entries) {
    List<BerGraphicString> graphicStrings=entry.getFileName().getBerGraphicString();
    StringBuilder filename=new StringBuilder();
    for (    BerGraphicString bgs : graphicStrings) {
      filename.append(bgs.toString());
    }
    long fileSize=entry.getFileAttributes().getSizeOfFile().longValue();
    Calendar lastModified;
    try {
      lastModified=entry.getFileAttributes().getLastModified().asCalendar();
    }
 catch (    ParseException e) {
      throw new ServiceError(ServiceError.FAILED_DUE_TO_COMMUNICATIONS_CONSTRAINT,""String_Node_Str"");
    }
    FileInformation fileInfo=new FileInformation(filename.toString(),fileSize,lastModified);
    files.add(fileInfo);
  }
  boolean moreFollows=(fileDirectoryRes.getMoreFollows() == null) ? false : fileDirectoryRes.getMoreFollows().value;
  return moreFollows;
}","private boolean decodeGetFileDirectoryResponse(ConfirmedServiceResponse confirmedServiceResponse,List<FileInformation> files) throws ServiceError {
  if (confirmedServiceResponse.getFileDirectory() == null) {
    throw new ServiceError(ServiceError.FAILED_DUE_TO_COMMUNICATIONS_CONSTRAINT,""String_Node_Str"");
  }
  FileDirectoryResponse fileDirectoryRes=confirmedServiceResponse.getFileDirectory();
  List<DirectoryEntry> entries=fileDirectoryRes.getListOfDirectoryEntry().getDirectoryEntry();
  for (  DirectoryEntry entry : entries) {
    List<BerGraphicString> graphicStrings=entry.getFileName().getBerGraphicString();
    StringBuilder filename=new StringBuilder();
    for (    BerGraphicString bgs : graphicStrings) {
      filename.append(bgs.toString());
    }
    long fileSize=entry.getFileAttributes().getSizeOfFile().longValue();
    Calendar lastModified=null;
    try {
      if (entry.getFileAttributes().getLastModified() != null)       lastModified=entry.getFileAttributes().getLastModified().asCalendar();
    }
 catch (    ParseException e) {
      throw new ServiceError(ServiceError.FAILED_DUE_TO_COMMUNICATIONS_CONSTRAINT,""String_Node_Str"");
    }
    FileInformation fileInfo=new FileInformation(filename.toString(),fileSize,lastModified);
    files.add(fileInfo);
  }
  boolean moreFollows=(fileDirectoryRes.getMoreFollows() == null) ? false : fileDirectoryRes.getMoreFollows().value;
  return moreFollows;
}",0.9756795422031472
172429,"public Calendar getLastModified(){
  return lastModified;
}","/** 
 * Get the time stamp of last modification. As it is an optional attribute the return value can be null
 * @return the time stamp of last modification, or null if the time stamp is not present
 */
public Calendar getLastModified(){
  return lastModified;
}",0.36875
172430,"private WriteResponse.CHOICE getWriteResult(FcModelNode modelNode,Data mmsData){
  WriteResponse.CHOICE writeResponse=new WriteResponse.CHOICE();
  Fc fc=modelNode.getFc();
  if (fc == Fc.ST || fc == Fc.MX || fc == Fc.OR || fc == Fc.EX) {
    writeResponse.setFailure(new DataAccessError(3L));
    return writeResponse;
  }
  if (fc == Fc.CO) {
    String nodeName=modelNode.getName();
    if (nodeName.equals(""String_Node_Str"")) {
      FcModelNode cdcParent=(FcModelNode)modelNode.getParent();
      ModelNode ctlModelNode=serverModel.findModelNode(cdcParent.getReference(),Fc.CF).getChild(""String_Node_Str"");
      if (ctlModelNode == null || !(ctlModelNode instanceof BdaInt8)) {
        logger.warn(""String_Node_Str"");
        writeResponse.setFailure(new DataAccessError(3L));
        return writeResponse;
      }
      int ctlModel=((BdaInt8)ctlModelNode).getValue();
      if (ctlModel == 1) {
        return null;
      }
 else       if (ctlModel == 2) {
        if (cdcParent.isSelectedBy(this)) {
          return null;
        }
 else {
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else {
        logger.warn(""String_Node_Str"" + ctlModel);
        writeResponse.setFailure(new DataAccessError(9L));
        return writeResponse;
      }
    }
 else {
      logger.warn(""String_Node_Str"" + modelNode.getName());
      writeResponse.setFailure(new DataAccessError(9L));
      return writeResponse;
    }
  }
 else   if (fc == Fc.RP) {
    if (modelNode instanceof Rcb) {
      writeResponse.setFailure(new DataAccessError(3L));
      return writeResponse;
    }
    FcModelNode fcModelNodeCopy=(FcModelNode)modelNode.copy();
    try {
      fcModelNodeCopy.setValueFromMmsDataObj(mmsData);
    }
 catch (    ServiceError e) {
      WriteResponse.CHOICE writeResponseChoice=new WriteResponse.CHOICE();
      writeResponseChoice.setFailure(new DataAccessError(serviceErrorToMmsError(e)));
      return writeResponseChoice;
    }
    Urcb urcb=(Urcb)modelNode.getParent();
    String nodeName=modelNode.getName();
synchronized (urcb) {
      if (nodeName.equals(""String_Node_Str"")) {
        BdaBoolean rptEnaNode=(BdaBoolean)fcModelNodeCopy;
        if (rptEnaNode.getValue()) {
          if (urcb.dataSet == null) {
            logger.info(""String_Node_Str"");
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
          if (urcb.reserved == null) {
            urcb.reserved=this;
            urcb.enable();
            rsvdURCBs.add(urcb);
            ((BdaBoolean)modelNode).setValue(true);
            return writeSuccess;
          }
 else           if (urcb.reserved == this) {
            urcb.enable();
            ((BdaBoolean)modelNode).setValue(true);
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
 else {
          if (urcb.reserved == this) {
            urcb.disable();
            ((BdaBoolean)modelNode).setValue(false);
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        BdaBoolean rptResvNode=(BdaBoolean)fcModelNodeCopy;
        if (rptResvNode.getValue()) {
          if (urcb.reserved == null) {
            urcb.reserved=this;
            urcb.getResv().setValue(true);
            rsvdURCBs.add(urcb);
            return writeSuccess;
          }
 else           if (urcb.reserved == this) {
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
 else {
          if (urcb.reserved == this) {
            urcb.reserved=null;
            urcb.getResv().setValue(false);
            rsvdURCBs.remove(urcb);
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == null || urcb.reserved == this) && !urcb.enabled) {
          String dataSetRef=((BdaVisibleString)fcModelNodeCopy).getStringValue();
          if (dataSetRef.isEmpty()) {
            urcb.dataSet=null;
            ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
            return writeSuccess;
          }
 else {
            DataSet dataSet=serverModel.getDataSet(dataSetRef);
            if (dataSet != null) {
              urcb.dataSet=dataSet;
              ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
              return writeSuccess;
            }
 else {
              logger.info(""String_Node_Str"");
              writeResponse.setFailure(new DataAccessError(3L));
              return writeResponse;
            }
          }
        }
 else {
          logger.info(""String_Node_Str"");
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == null || urcb.reserved == this) && !urcb.enabled) {
          if (!((BdaOptFlds)modelNode).isBufferOverflow() && !((BdaOptFlds)modelNode).isConfigRevision() && !((BdaOptFlds)modelNode).isDataReference()&& !((BdaOptFlds)modelNode).isEntryId()) {
            ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
            return writeSuccess;
          }
 else {
            logger.info(""String_Node_Str"");
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
 else {
          logger.info(""String_Node_Str"");
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == this) && urcb.enabled && ((BdaTriggerConditions)urcb.getChild(""String_Node_Str"")).isGeneralInterrogation()) {
          urcb.generalInterrogation();
          return writeSuccess;
        }
 else {
          logger.info(""String_Node_Str"");
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else       if (nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"")|| nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == null || urcb.reserved == this) && !urcb.enabled) {
          ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
          return writeSuccess;
        }
 else {
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else {
        writeResponse.setFailure(new DataAccessError(3L));
        return writeResponse;
      }
    }
  }
 else {
    return null;
  }
}","private WriteResponse.CHOICE getWriteResult(FcModelNode modelNode,Data mmsData){
  WriteResponse.CHOICE writeResponse=new WriteResponse.CHOICE();
  Fc fc=modelNode.getFc();
  if (fc == Fc.ST || fc == Fc.MX || fc == Fc.OR || fc == Fc.EX) {
    writeResponse.setFailure(new DataAccessError(3L));
    return writeResponse;
  }
  if (fc == Fc.CO) {
    String nodeName=modelNode.getName();
    if (nodeName.equals(""String_Node_Str"")) {
      FcModelNode cdcParent=(FcModelNode)modelNode.getParent();
      ModelNode ctlModelNode=serverModel.findModelNode(cdcParent.getReference(),Fc.CF).getChild(""String_Node_Str"");
      if (ctlModelNode == null || !(ctlModelNode instanceof BdaInt8)) {
        logger.warn(""String_Node_Str"");
        writeResponse.setFailure(new DataAccessError(3L));
        return writeResponse;
      }
      int ctlModel=((BdaInt8)ctlModelNode).getValue();
      if (ctlModel == 1) {
        return null;
      }
 else       if (ctlModel == 2) {
        if (cdcParent.isSelectedBy(this)) {
          return null;
        }
 else {
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else {
        logger.warn(""String_Node_Str"" + ctlModel);
        writeResponse.setFailure(new DataAccessError(9L));
        return writeResponse;
      }
    }
 else {
      logger.warn(""String_Node_Str"" + modelNode.getName());
      writeResponse.setFailure(new DataAccessError(9L));
      return writeResponse;
    }
  }
 else   if (fc == Fc.RP) {
    if (modelNode instanceof Rcb) {
      writeResponse.setFailure(new DataAccessError(3L));
      return writeResponse;
    }
    FcModelNode fcModelNodeCopy=(FcModelNode)modelNode.copy();
    try {
      fcModelNodeCopy.setValueFromMmsDataObj(mmsData);
    }
 catch (    ServiceError e) {
      WriteResponse.CHOICE writeResponseChoice=new WriteResponse.CHOICE();
      writeResponseChoice.setFailure(new DataAccessError(serviceErrorToMmsError(e)));
      return writeResponseChoice;
    }
    Urcb urcb=(Urcb)modelNode.getParent();
    String nodeName=modelNode.getName();
synchronized (urcb) {
      if (nodeName.equals(""String_Node_Str"")) {
        BdaBoolean rptEnaNode=(BdaBoolean)fcModelNodeCopy;
        if (rptEnaNode.getValue()) {
          if (urcb.dataSet == null) {
            logger.info(""String_Node_Str"");
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
          if (urcb.reserved == null) {
            urcb.reserved=this;
            urcb.enable();
            rsvdURCBs.add(urcb);
            ((BdaBoolean)modelNode).setValue(true);
            return writeSuccess;
          }
 else           if (urcb.reserved == this) {
            urcb.enable();
            ((BdaBoolean)modelNode).setValue(true);
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
 else {
          if (urcb.reserved == this) {
            urcb.disable();
            ((BdaBoolean)modelNode).setValue(false);
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        BdaBoolean rptResvNode=(BdaBoolean)fcModelNodeCopy;
        if (rptResvNode.getValue()) {
          if (urcb.reserved == null) {
            urcb.reserved=this;
            urcb.getResv().setValue(true);
            rsvdURCBs.add(urcb);
            return writeSuccess;
          }
 else           if (urcb.reserved == this) {
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
 else {
          if (urcb.reserved == this) {
            urcb.reserved=null;
            urcb.getResv().setValue(false);
            rsvdURCBs.remove(urcb);
            return writeSuccess;
          }
 else {
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == null || urcb.reserved == this) && !urcb.enabled) {
          String dataSetRef=((BdaVisibleString)fcModelNodeCopy).getStringValue().replace('$','.');
          if (dataSetRef.isEmpty()) {
            urcb.dataSet=null;
            ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
            return writeSuccess;
          }
 else {
            DataSet dataSet=serverModel.getDataSet(dataSetRef);
            if (dataSet == null) {
              dataSet=nonPersistentDataSets.get(dataSetRef);
            }
            if (dataSet != null) {
              urcb.dataSet=dataSet;
              ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
              return writeSuccess;
            }
 else {
              logger.info(""String_Node_Str"");
              writeResponse.setFailure(new DataAccessError(3L));
              return writeResponse;
            }
          }
        }
 else {
          logger.info(""String_Node_Str"");
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == null || urcb.reserved == this) && !urcb.enabled) {
          if (!((BdaOptFlds)modelNode).isBufferOverflow() && !((BdaOptFlds)modelNode).isConfigRevision() && !((BdaOptFlds)modelNode).isDataReference()&& !((BdaOptFlds)modelNode).isEntryId()) {
            ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
            return writeSuccess;
          }
 else {
            logger.info(""String_Node_Str"");
            writeResponse.setFailure(new DataAccessError(3L));
            return writeResponse;
          }
        }
 else {
          logger.info(""String_Node_Str"");
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else       if (nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == this) && urcb.enabled && ((BdaTriggerConditions)urcb.getChild(""String_Node_Str"")).isGeneralInterrogation()) {
          urcb.generalInterrogation();
          return writeSuccess;
        }
 else {
          logger.info(""String_Node_Str"");
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else       if (nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"") || nodeName.equals(""String_Node_Str"")|| nodeName.equals(""String_Node_Str"")) {
        if ((urcb.reserved == null || urcb.reserved == this) && !urcb.enabled) {
          ((BasicDataAttribute)modelNode).setValueFrom((BasicDataAttribute)fcModelNodeCopy);
          return writeSuccess;
        }
 else {
          writeResponse.setFailure(new DataAccessError(3L));
          return writeResponse;
        }
      }
 else {
        writeResponse.setFailure(new DataAccessError(3L));
        return writeResponse;
      }
    }
  }
 else {
    return null;
  }
}",0.9911676750817164
172431,"void addDataSet(DataSet dataSet){
  dataSets.put(dataSet.getReferenceStr(),dataSet);
  for (  ModelNode ld : children.values()) {
    for (    ModelNode ln : ld.getChildren()) {
      for (      Urcb urcb : ((LogicalNode)ln).getUrcbs()) {
        urcb.dataSet=getDataSet(urcb.getDatSet().getStringValue().replace('$','.'));
      }
      for (      Brcb brcb : ((LogicalNode)ln).getBrcbs()) {
        brcb.dataSet=getDataSet(brcb.getDatSet().getStringValue().replace('$','.'));
      }
    }
  }
}","void addDataSet(DataSet dataSet){
  dataSets.put(dataSet.getReferenceStr().replace('$','.'),dataSet);
  for (  ModelNode ld : children.values()) {
    for (    ModelNode ln : ld.getChildren()) {
      for (      Urcb urcb : ((LogicalNode)ln).getUrcbs()) {
        urcb.dataSet=getDataSet(urcb.getDatSet().getStringValue().replace('$','.'));
      }
      for (      Brcb brcb : ((LogicalNode)ln).getBrcbs()) {
        brcb.dataSet=getDataSet(brcb.getDatSet().getStringValue().replace('$','.'));
      }
    }
  }
}",0.9831849653808112
172432,"/** 
 * Listens for a new PDU and writes it into the given buffer. Decodes all ACSE and lower layer headers. The resulting buffer's position points to the beginning of the ACSE SDU. The limit will point to the byte after the last byte of the ACSE SDU.
 * @param pduBuffer buffer to write the received pdu into
 * @throws DecodingException if a decoding error occurs
 * @throws IOException if a non recoverable error occurs. Afterwards the association should be closed by the user
 * @throws TimeoutException if a timeout occurs
 */
public void receive(ByteBuffer pduBuffer) throws DecodingException, IOException, TimeoutException {
  if (connected == false) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  tConnection.receive(pduBuffer);
  decodeSessionLayer(pduBuffer);
  decodePresentationLayer(pduBuffer);
}","/** 
 * Listens for a new PDU and writes it into the given buffer. Decodes all ACSE and lower layer headers. The resulting buffer's position points to the beginning of the ACSE SDU. The limit will point to the byte after the last byte of the ACSE SDU.
 * @param pduBuffer buffer to write the received pdu into
 * @throws DecodingException if a decoding error occurs
 * @throws IOException if a non recoverable error occurs. Afterwards the association should be closed by the user
 * @throws TimeoutException if a timeout occurs
 */
public byte[] receive(ByteBuffer pduBuffer) throws DecodingException, IOException, TimeoutException {
  if (connected == false) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  tConnection.receive(pduBuffer);
  decodeSessionLayer(pduBuffer);
  return decodePresentationLayer(pduBuffer);
}",0.9897652016857316
172433,"private void decodePresentationLayer(ByteBuffer pduBuffer) throws DecodingException {
  UserData user_data=new UserData();
  try {
    user_data.decode(new ByteBufferInputStream(pduBuffer),null);
  }
 catch (  IOException e) {
    throw new DecodingException(""String_Node_Str"",e);
  }
}","private byte[] decodePresentationLayer(ByteBuffer pduBuffer) throws DecodingException {
  UserData user_data=new UserData();
  try {
    user_data.decode(new ByteBufferInputStream(pduBuffer),null);
  }
 catch (  IOException e) {
    throw new DecodingException(""String_Node_Str"",e);
  }
  return user_data.getFullyEncodedData().getPDVList().get(0).getPresentationDataValues().getSingleASN1Type().value;
}",0.8173913043478261
172434,"private void encodePresentationLayer(ByteBuffer payload,List<byte[]> ssduList,List<Integer> ssduOffsets,List<Integer> ssduLengths) throws IOException {
  PDVList pdv_list=new PDVList();
  pdv_list.setPresentationContextIdentifier(new PresentationContextIdentifier(3l));
  PDVList.PresentationDataValues presentationDataValues=new PDVList.PresentationDataValues();
  presentationDataValues.setSingleASN1Type(new BerAny(Arrays.copyOfRange(payload.array(),payload.position(),payload.limit())));
  pdv_list.setPresentationDataValues(presentationDataValues);
  FullyEncodedData fully_encoded_data=new FullyEncodedData();
  List<PDVList> pdv_list_list=fully_encoded_data.getPDVList();
  pdv_list_list.add(pdv_list);
  UserData user_data=new UserData();
  user_data.setFullyEncodedData(fully_encoded_data);
  BerByteArrayOutputStream berOStream=new BerByteArrayOutputStream(200,true);
  user_data.encode(berOStream);
  ssduList.add(berOStream.buffer);
  ssduOffsets.add(berOStream.index + 1);
  ssduLengths.add(berOStream.buffer.length - (berOStream.index + 1));
  ssduList.add(payload.array());
  ssduOffsets.add(payload.arrayOffset() + payload.position());
  ssduLengths.add(payload.limit() - payload.position());
}","private void encodePresentationLayer(ByteBuffer payload,List<byte[]> ssduList,List<Integer> ssduOffsets,List<Integer> ssduLengths) throws IOException {
  PDVList pdv_list=new PDVList();
  pdv_list.setPresentationContextIdentifier(new PresentationContextIdentifier(3l));
  PDVList.PresentationDataValues presentationDataValues=new PDVList.PresentationDataValues();
  presentationDataValues.setSingleASN1Type(new BerAny(Arrays.copyOfRange(payload.array(),payload.position(),payload.limit())));
  pdv_list.setPresentationDataValues(presentationDataValues);
  FullyEncodedData fully_encoded_data=new FullyEncodedData();
  List<PDVList> pdv_list_list=fully_encoded_data.getPDVList();
  pdv_list_list.add(pdv_list);
  UserData user_data=new UserData();
  user_data.setFullyEncodedData(fully_encoded_data);
  BerByteArrayOutputStream berOStream=new BerByteArrayOutputStream(200,true);
  user_data.encode(berOStream);
  ssduList.add(berOStream.buffer);
  ssduOffsets.add(berOStream.index + 1);
  ssduLengths.add(berOStream.buffer.length - (berOStream.index + 1));
}",0.9325099250110278
172435,"private MMSpdu listenForMmsRequest(AcseAssociation acseAssociation){
  while (true) {
    MMSpdu mmsRequestPdu=null;
    pduBuffer.clear();
    try {
      acseAssociation.receive(pduBuffer);
    }
 catch (    EOFException e) {
      logger.debug(""String_Node_Str"");
      return null;
    }
catch (    SocketTimeoutException e) {
      logger.warn(""String_Node_Str"",e);
      return null;
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
      return null;
    }
catch (    DecodingException e) {
      logger.error(""String_Node_Str"",e);
      continue;
    }
catch (    TimeoutException e) {
      logger.error(""String_Node_Str"",e);
      return null;
    }
    mmsRequestPdu=new MMSpdu();
    try {
      mmsRequestPdu.decode(new ByteBufferInputStream(pduBuffer),null);
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
      continue;
    }
    if (mmsRequestPdu.getConfirmedRequestPDU() == null) {
      if (mmsRequestPdu.getConcludeRequestPDU() != null) {
        logger.debug(""String_Node_Str"");
        return null;
      }
 else {
        logger.warn(""String_Node_Str"");
        continue;
      }
    }
    return mmsRequestPdu;
  }
}","private MMSpdu listenForMmsRequest(AcseAssociation acseAssociation){
  while (true) {
    MMSpdu mmsRequestPdu=null;
    byte[] buffer;
    pduBuffer.clear();
    try {
      buffer=acseAssociation.receive(pduBuffer);
    }
 catch (    EOFException e) {
      logger.debug(""String_Node_Str"");
      return null;
    }
catch (    SocketTimeoutException e) {
      logger.warn(""String_Node_Str"",e);
      return null;
    }
catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
      return null;
    }
catch (    DecodingException e) {
      logger.error(""String_Node_Str"",e);
      continue;
    }
catch (    TimeoutException e) {
      logger.error(""String_Node_Str"",e);
      return null;
    }
    mmsRequestPdu=new MMSpdu();
    try {
      mmsRequestPdu.decode(new ByteArrayInputStream(buffer),null);
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
      continue;
    }
    if (mmsRequestPdu.getConfirmedRequestPDU() == null) {
      if (mmsRequestPdu.getConcludeRequestPDU() != null) {
        logger.debug(""String_Node_Str"");
        return null;
      }
 else {
        logger.warn(""String_Node_Str"");
        continue;
      }
    }
    return mmsRequestPdu;
  }
}",0.979235880398671
172436,"@Path(""String_Node_Str"") @PUT @RequestBody(name=""String_Node_Str"",description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",value=""String_Node_Str""))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",implementation=User.class),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(ref=""String_Node_Str"")))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Tag(ref=""String_Node_Str"") public Response updateUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true) @PathParam(""String_Node_Str"") String username,User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @PUT @RequestBody(name=""String_Node_Str"",description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",value=""String_Node_Str""))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(ref=""String_Node_Str""),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(ref=""String_Node_Str"")))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Tag(ref=""String_Node_Str"") public Response updateUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true) @PathParam(""String_Node_Str"") String username,User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}",0.9708245243128965
172437,"@POST @SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}) @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operations=@CallbackOperation(method=""String_Node_Str"",summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=SchemaType.ARRAY,implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=SchemaType.STRING))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}","@POST @SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}) @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operations=@CallbackOperation(method=""String_Node_Str"",summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=SchemaType.ARRAY,implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=SchemaType.STRING))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(ref=""String_Node_Str""),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}",0.98064006321612
172438,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testCallbackOperationAnnotations(String type){
  ValidatableResponse vr=callEndpoint(type);
  String endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testCallbackOperationAnnotations(String type){
  ValidatableResponse vr=callEndpoint(type);
  String endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",notNullValue());
}",0.9628154050464808
172439,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSchema(String type){
  ValidatableResponse vr=callEndpoint(type);
  String createSchema=""String_Node_Str"";
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",equalTo(1024));
  vr.body(""String_Node_Str"",equalTo(1));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  vr.body(createSchema + ""String_Node_Str"",equalTo(20));
  vr.body(createSchema + ""String_Node_Str"",equalTo(2));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSchema(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(1024));
  vr.body(""String_Node_Str"",equalTo(1));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  String createSchema=""String_Node_Str"";
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(createSchema + ""String_Node_Str"",equalTo(20));
  vr.body(createSchema + ""String_Node_Str"",equalTo(2));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
}",0.497971602434077
172440,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  String content2=""String_Node_Str"";
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",notNullValue());
  String content2=""String_Node_Str"";
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
}",0.9768292682926828
172441,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",notNullValue());
}",0.945868945868946
172442,"@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,explode=Explode.FALSE,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(type=SchemaType.ARRAY,implementation=User.class,nullable=true,writeOnly=true,minItems=2,maxItems=20,uniqueItems=true),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithArrayInput(@Parameter(description=""String_Node_Str"",required=true) User[] users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}","@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tag(ref=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithArrayInput(@RequestBody(description=""String_Node_Str"",required=true,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(type=SchemaType.ARRAY,implementation=User.class,nullable=true,writeOnly=true,minItems=2,maxItems=20,uniqueItems=true),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true))) User[] users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}",0.5962596259625963
172443,"@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tags(refs=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithListInput(@Parameter(description=""String_Node_Str"",required=true) java.util.List<User> users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}","@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tags(refs=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithListInput(@RequestBody(description=""String_Node_Str"",required=true) java.util.List<User> users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}",0.981981981981982
172444,"@Override public OpenAPI buildModel(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).format(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").description(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).ref(""String_Node_Str""))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class)))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"").externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str""))).externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).ref(""String_Node_Str"")).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}","@Override public OpenAPI buildModel(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).format(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").description(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).ref(""String_Node_Str""))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",""String_Node_Str""))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"").externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str""))).externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).ref(""String_Node_Str"")).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}",0.9971606475716064
172445,"@Test public void linkTest(){
  final Link l=processConstructible(Link.class);
  final String parameterKey=""String_Node_Str"";
  final Parameter parameterValue=createConstructibleInstance(Parameter.class);
  checkSameObject(l,l.addParameter(parameterKey,parameterValue));
  checkMapEntry(l.getParameters(),parameterKey,parameterValue);
}","@Test public void linkTest(){
  final Link l=processConstructible(Link.class);
  final String parameterKey=""String_Node_Str"";
  final String parameterValue=""String_Node_Str"";
  checkSameObject(l,l.addParameter(parameterKey,parameterValue));
  checkMapEntry(l.getParameters(),parameterKey,parameterValue);
}",0.881619937694704
172446,"@GET @Path(""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Produces(""String_Node_Str"") public Response getReviewByUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str"")),examples={@ExampleObject(""String_Node_Str""),@ExampleObject(""String_Node_Str"")}) @PathParam(""String_Node_Str"") String user){
  List<Review> reviewsByUser=new ArrayList<Review>();
  for (  Review review : reviews.values()) {
    User currentUser=review.getUser();
    if (currentUser.getUsername() == user) {
      reviewsByUser.add(review);
    }
  }
  if (!reviewsByUser.isEmpty()) {
    return Response.ok().entity(reviewsByUser).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}","@GET @Path(""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Produces(""String_Node_Str"") public Response getReviewByUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str"")),examples={@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str""),@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str"")}) @PathParam(""String_Node_Str"") String user){
  List<Review> reviewsByUser=new ArrayList<Review>();
  for (  Review review : reviews.values()) {
    User currentUser=review.getUser();
    if (currentUser.getUsername() == user) {
      reviewsByUser.add(review);
    }
  }
  if (!reviewsByUser.isEmpty()) {
    return Response.ok().entity(reviewsByUser).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}",0.9635299414678072
172447,"@GET @Path(""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewByAirlineAndUser(@Parameters(value={@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str""))),@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str"")))}) @PathParam(""String_Node_Str"") String user,@PathParam(""String_Node_Str"") String airlines){
  List<Review> reviewsByAirlinesUser=new ArrayList<Review>();
  for (  Review review : reviews.values()) {
    Airline currentAirline=review.getAirlines();
    User currentUser=review.getUser();
    if (currentAirline.getName() == airlines && currentUser.getUsername() == user) {
      reviewsByAirlinesUser.add(review);
    }
  }
  if (!reviewsByAirlinesUser.isEmpty()) {
    return Response.ok().entity(reviewsByAirlinesUser).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}","@GET @Path(""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewByAirlineAndUser(@Parameters(value={@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str""))),@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str"")))}) @PathParam(""String_Node_Str"") String user,@PathParam(""String_Node_Str"") String airlines){
  List<Review> reviewsByAirlinesUser=new ArrayList<Review>();
  for (  Review review : reviews.values()) {
    Airline currentAirline=review.getAirlines();
    User currentUser=review.getUser();
    if (currentAirline.getName() == airlines && currentUser.getUsername() == user) {
      reviewsByAirlinesUser.add(review);
    }
  }
  if (!reviewsByAirlinesUser.isEmpty()) {
    return Response.ok().entity(reviewsByAirlinesUser).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}",0.9830258302583026
172448,"@GET @Path(""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class)),headers={@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.INTEGER),required=true,allowEmptyValue=true,deprecated=true),@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true,allowEmptyValue=true,deprecated=true)}) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewById(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str""))) @PathParam(""String_Node_Str"") int id){
  Review review=reviews.get(id);
  if (review != null) {
    return Response.ok().entity(review).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}","@GET @Path(""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class)),headers={@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.INTEGER),required=true,allowEmptyValue=true,deprecated=true),@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true,allowEmptyValue=true,deprecated=true)}) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewById(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str""))) @PathParam(""String_Node_Str"") int id){
  Review review=reviews.get(id);
  if (review != null) {
    return Response.ok().entity(review).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}",0.9893271461716936
172449,"@GET @Path(""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str"")),example=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewByAirline(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str""))) @PathParam(""String_Node_Str"") String airlines){
  List<Review> reviewsByAirlines=new ArrayList<Review>();
  for (  Review review : reviews.values()) {
    Airline currentAirline=review.getAirlines();
    if (currentAirline.getName() == airlines) {
      reviewsByAirlines.add(review);
    }
  }
  if (!reviewsByAirlines.isEmpty()) {
    return Response.ok().entity(reviewsByAirlines).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}","@GET @Path(""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(name=""String_Node_Str"",value=""String_Node_Str"")),example=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewByAirline(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str""))) @PathParam(""String_Node_Str"") String airlines){
  List<Review> reviewsByAirlines=new ArrayList<Review>();
  for (  Review review : reviews.values()) {
    Airline currentAirline=review.getAirlines();
    if (currentAirline.getName() == airlines) {
      reviewsByAirlines.add(review);
    }
  }
  if (!reviewsByAirlines.isEmpty()) {
    return Response.ok().entity(reviewsByAirlines).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}",0.9904761904761904
172450,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExampleObject(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItem(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExampleObject(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
}",0.7780172413793104
172451,"@Path(""String_Node_Str"") @PUT @RequestBody(name=""String_Node_Str"",description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",value=""String_Node_Str""))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",implementation=User.class),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(ref=""String_Node_Str"")))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Tag(ref=""String_Node_Str"") public Response updateUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true) @PathParam(""String_Node_Str"") String username,User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @PUT @RequestBody(name=""String_Node_Str"",description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",value=""String_Node_Str""))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(ref=""String_Node_Str""),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(ref=""String_Node_Str"")))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Tag(ref=""String_Node_Str"") public Response updateUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true) @PathParam(""String_Node_Str"") String username,User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}",0.9708245243128965
172452,"@POST @SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}) @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operations=@CallbackOperation(method=""String_Node_Str"",summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=SchemaType.ARRAY,implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=SchemaType.STRING))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}","@POST @SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}) @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operations=@CallbackOperation(method=""String_Node_Str"",summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=SchemaType.ARRAY,implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=SchemaType.STRING))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(ref=""String_Node_Str""),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}",0.98064006321612
172453,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testCallbackOperationAnnotations(String type){
  ValidatableResponse vr=callEndpoint(type);
  String endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testCallbackOperationAnnotations(String type){
  ValidatableResponse vr=callEndpoint(type);
  String endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",notNullValue());
}",0.9628154050464808
172454,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSchema(String type){
  ValidatableResponse vr=callEndpoint(type);
  String createSchema=""String_Node_Str"";
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",equalTo(1024));
  vr.body(""String_Node_Str"",equalTo(1));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  vr.body(createSchema + ""String_Node_Str"",equalTo(20));
  vr.body(createSchema + ""String_Node_Str"",equalTo(2));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSchema(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(1024));
  vr.body(""String_Node_Str"",equalTo(1));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  String createSchema=""String_Node_Str"";
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
  vr.body(createSchema + ""String_Node_Str"",equalTo(20));
  vr.body(createSchema + ""String_Node_Str"",equalTo(2));
  vr.body(createSchema + ""String_Node_Str"",equalTo(true));
}",0.497971602434077
172455,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  String content2=""String_Node_Str"";
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",notNullValue());
  String content2=""String_Node_Str"";
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2,notNullValue());
  vr.body(content2 + ""String_Node_Str"",notNullValue());
  vr.body(content2 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content2 + ""String_Node_Str"",notNullValue());
}",0.9768292682926828
172456,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testContentInAPIResponse(String type){
  ValidatableResponse vr=callEndpoint(type);
  String content1=""String_Node_Str"";
  vr.body(content1,notNullValue());
  vr.body(content1 + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(content1 + ""String_Node_Str"",notNullValue());
}",0.945868945868946
172457,"@Override public OpenAPI buildModel(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).format(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").description(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).ref(""String_Node_Str""))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class)))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"").externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str""))).externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).ref(""String_Node_Str"")).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}","@Override public OpenAPI buildModel(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).format(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").description(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).ref(""String_Node_Str""))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",""String_Node_Str""))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"").externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str""))).externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).ref(""String_Node_Str"")).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}",0.9971606475716064
172458,"@Test public void linkTest(){
  final Link l=processConstructible(Link.class);
  final String parameterKey=""String_Node_Str"";
  final Parameter parameterValue=createConstructibleInstance(Parameter.class);
  checkSameObject(l,l.addParameter(parameterKey,parameterValue));
  checkMapEntry(l.getParameters(),parameterKey,parameterValue);
}","@Test public void linkTest(){
  final Link l=processConstructible(Link.class);
  final String parameterKey=""String_Node_Str"";
  final String parameterValue=""String_Node_Str"";
  checkSameObject(l,l.addParameter(parameterKey,parameterValue));
  checkMapEntry(l.getParameters(),parameterKey,parameterValue);
}",0.881619937694704
172459,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanDisable(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(0));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanDisable(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",notNullValue());
  vr.body(""String_Node_Str"",notNullValue());
  vr.body(""String_Node_Str"",notNullValue());
  vr.body(""String_Node_Str"",aMapWithSize(0));
}",0.7556142668428005
172460,"@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,explode=Explode.FALSE,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(type=SchemaType.ARRAY,implementation=User.class,nullable=true,writeOnly=true,minItems=2,maxItems=20,uniqueItems=true),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithArrayInput(@Parameter(description=""String_Node_Str"",required=true) User[] users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}","@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tag(ref=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithArrayInput(@RequestBody(description=""String_Node_Str"",required=true,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(type=SchemaType.ARRAY,implementation=User.class,nullable=true,writeOnly=true,minItems=2,maxItems=20,uniqueItems=true),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true))) User[] users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}",0.5962596259625963
172461,"@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tags(refs=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithListInput(@Parameter(description=""String_Node_Str"",required=true) java.util.List<User> users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}","@POST @Path(""String_Node_Str"") @Tag(ref=""String_Node_Str"") @Tags(refs=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(summary=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUsersWithListInput(@RequestBody(description=""String_Node_Str"",required=true) java.util.List<User> users){
  for (  User user : users) {
    userData.addUser(user);
  }
  return Response.ok().entity(""String_Node_Str"").build();
}",0.981981981981982
172462,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testVersion(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testVersion(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
}",0.9612403100775194
172463,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testVersion(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testVersion(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
}",0.9612403100775194
172464,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExcludedClass(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(11));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExcludedClass(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(11));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
}",0.9853321829163072
172465,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExcludedClasses(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(10));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExcludedClasses(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(10));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
}",0.9863672814755412
172466,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExcludePackage(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(14));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testExcludePackage(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(14));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",nullValue());
}",0.9812981298129811
172467,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanClass(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(5));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanClass(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(5));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
}",0.9888231426692964
172468,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanClasses(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(6));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanClasses(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(6));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
  vr.body(""String_Node_Str"",aMapWithSize(1));
}",0.9901677270098322
172469,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanDisable(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(0));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanDisable(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(0));
}",0.8403819918144612
172470,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanPackage(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(3));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testScanPackage(String type) throws InterruptedException {
  vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(""String_Node_Str"",aMapWithSize(2));
  vr.body(""String_Node_Str"",aMapWithSize(3));
}",0.9813800657174152
172471,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testStaticDocument(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(2));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  final String inventoryPathGet=""String_Node_Str"";
  vr.body(inventoryPathGet + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",both(containsString(""String_Node_Str"")).and(containsString(""String_Node_Str"")));
  vr.body(inventoryPathGet + ""String_Node_Str"",hasSize(3));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",aMapWithSize(2));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  final String inventoryPathPost=""String_Node_Str"";
  vr.body(inventoryPathPost + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",aMapWithSize(3));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testStaticDocument(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",startsWith(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(2));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  final String inventoryPathGet=""String_Node_Str"";
  vr.body(inventoryPathGet + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",both(containsString(""String_Node_Str"")).and(containsString(""String_Node_Str"")));
  vr.body(inventoryPathGet + ""String_Node_Str"",hasSize(3));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",aMapWithSize(2));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathGet + ""String_Node_Str"",equalTo(""String_Node_Str""));
  final String inventoryPathPost=""String_Node_Str"";
  vr.body(inventoryPathPost + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",aMapWithSize(3));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(inventoryPathPost + ""String_Node_Str"",equalTo(""String_Node_Str""));
}",0.55839037544078
172472,"@Override public OpenAPI buildModel(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).format(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").description(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).ref(""String_Node_Str""))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class)))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"").externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str""))).externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).ref(""String_Node_Str"")).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}","@Override public OpenAPI buildModel(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"").ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).ref(""String_Node_Str"")).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).format(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").description(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).ref(""String_Node_Str""))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class)))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"").externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str""))).externalDocs(OASFactory.createObject(ExternalDocumentation.class).description(""String_Node_Str"").url(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).ref(""String_Node_Str"")).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)).type(Schema.SchemaType.STRING))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY).ref(""String_Node_Str""))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}",0.9988569156602556
172473,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSchema(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSchema(String type) throws InterruptedException {
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
}",0.966551326412918
172474,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testTagsInOperations(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",contains(""String_Node_Str""));
  vr.body(""String_Node_Str"",containsInAnyOrder(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testTagsInOperations(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",containsInAnyOrder(""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",containsInAnyOrder(""String_Node_Str""));
}",0.9471830985915493
172475,"@Override public OpenAPI getOpenAPI(){
}","@Override public OpenAPI getOpenAPI(){
  return OASFactory.createObject(OpenAPI.class).info(OASFactory.createObject(Info.class).title(""String_Node_Str"").version(""String_Node_Str"").termsOfService(""String_Node_Str"").contact(OASFactory.createObject(Contact.class).name(""String_Node_Str"").url(""String_Node_Str"").email(""String_Node_Str"")).license(OASFactory.createObject(License.class).name(""String_Node_Str"").url(""String_Node_Str""))).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"")).servers(new ArrayList<Server>()).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"").variables(OASFactory.createObject(ServerVariables.class).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"").enumeration(new ArrayList<String>()).addEnumeration(""String_Node_Str"").addEnumeration(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"").description(""String_Node_Str"")).addServerVariable(""String_Node_Str"",OASFactory.createObject(ServerVariable.class).defaultValue(""String_Node_Str"")))).addServer(OASFactory.createObject(Server.class).url(""String_Node_Str"").description(""String_Node_Str"")).components(OASFactory.createObject(Components.class).schemas(new HashMap<String,Schema>()).addSchema(""String_Node_Str"",OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER).title(""String_Node_Str"")).responses(new HashMap<String,APIResponse>()).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).parameters(new HashMap<String,Parameter>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class).required(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).examples(new HashMap<String,Example>()).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).addExample(""String_Node_Str"",OASFactory.createObject(Example.class).summary(""String_Node_Str"").externalValue(""String_Node_Str"")).requestBodies(new HashMap<String,RequestBody>()).addRequestBody(""String_Node_Str"",OASFactory.createObject(RequestBody.class).required(true).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class))))).headers(new HashMap<String,Header>()).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER)).required(true).allowEmptyValue(true).deprecated(true)).addHeader(""String_Node_Str"",OASFactory.createObject(Header.class).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.INTEGER))).securitySchemes(new HashMap<String,SecurityScheme>()).addSecurityScheme(""String_Node_Str"",OASFactory.createObject(SecurityScheme.class).description(""String_Node_Str"").type(SecurityScheme.Type.HTTP).scheme(""String_Node_Str"")).links(new HashMap<String,Link>()).addLink(""String_Node_Str"",OASFactory.createObject(Link.class).description(""String_Node_Str"").operationId(""String_Node_Str"").parameters(new HashMap<String,Object>()).addParameter(""String_Node_Str"",OASFactory.createObject(Parameter.class))).callbacks(new HashMap<String,Callback>()).addCallback(""String_Node_Str"",OASFactory.createObject(Callback.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).summary(""String_Node_Str"")))).tags(new ArrayList<Tag>()).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).addTag(OASFactory.createObject(Tag.class).name(""String_Node_Str"").description(""String_Node_Str"")).paths(OASFactory.createObject(Paths.class).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class))))).parameters(new ArrayList<Parameter>()).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowEmptyValue(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).allowReserved(true).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)))).addParameter(OASFactory.createObject(Parameter.class).name(""String_Node_Str"").required(true).deprecated(true).in(Parameter.In.QUERY).description(""String_Node_Str"").schema(OASFactory.createObject(Schema.class).minimum(new BigDecimal(0)))))).addPathItem(""String_Node_Str"",OASFactory.createObject(PathItem.class).GET(OASFactory.createObject(Operation.class).tags(new ArrayList<String>()).addTag(""String_Node_Str"").summary(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).type(Schema.SchemaType.ARRAY))))).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"")))).POST(OASFactory.createObject(Operation.class).security(new ArrayList<SecurityRequirement>()).addSecurityRequirement(OASFactory.createObject(SecurityRequirement.class).addScheme(""String_Node_Str"",new ArrayList<String>(Arrays.asList(""String_Node_Str"",""String_Node_Str"")))).callbacks(new HashMap<String,Callback>()).summary(""String_Node_Str"").description(""String_Node_Str"").operationId(""String_Node_Str"").responses(OASFactory.createObject(APIResponses.class).addApiResponse(""String_Node_Str"",OASFactory.createObject(APIResponse.class).description(""String_Node_Str"").content(OASFactory.createObject(Content.class).addMediaType(""String_Node_Str"",OASFactory.createObject(MediaType.class).schema(OASFactory.createObject(Schema.class).title(""String_Node_Str"").description(""String_Node_Str"").type(Schema.SchemaType.STRING)))))))));
}",0.0090971116670457
172476,"@POST @SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}) @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operations=@CallbackOperation(summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=SchemaType.ARRAY,implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=SchemaType.STRING))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}","@POST @SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}) @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operations=@CallbackOperation(method=""String_Node_Str"",summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=SchemaType.ARRAY,implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=SchemaType.STRING))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}",0.9900517309988062
172477,"private void testAvailabilityGetParamater(ValidatableResponse vr){
  String availabilityParameters=""String_Node_Str"";
  vr.body(availabilityParameters,hasSize(6));
  vr.body(availabilityParameters + ""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  List<String[]> list=new ArrayList<String[]>();
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  for (int i=0; i < list.size(); i++) {
    String currentParam=list.get(i)[0];
    String query=availabilityParameters + ""String_Node_Str"" + currentParam+ ""String_Node_Str"";
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(list.get(i)[1])));
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(true)));
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  }
  vr.body(availabilityParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(0)));
  vr.body(availabilityParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(0)));
}","private void testAvailabilityGetParamater(ValidatableResponse vr){
  String availabilityParameters=""String_Node_Str"";
  vr.body(availabilityParameters,hasSize(6));
  vr.body(availabilityParameters + ""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  List<String[]> list=new ArrayList<String[]>();
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  list.add(new String[]{""String_Node_Str"",""String_Node_Str""});
  for (int i=0; i < list.size(); i++) {
    String currentParam=list.get(i)[0];
    String query=availabilityParameters + ""String_Node_Str"" + currentParam+ ""String_Node_Str"";
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(list.get(i)[1])));
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(true)));
    vr.body(query + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  }
  vr.body(availabilityParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(0)));
  vr.body(availabilityParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(0)));
  vr.body(availabilityParameters + ""String_Node_Str"",equalTo(""String_Node_Str""));
}",0.9508641138597086
172478,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testCallbackOperationAnnotations(String type){
  ValidatableResponse vr=callEndpoint(type);
  String endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testCallbackOperationAnnotations(String type){
  ValidatableResponse vr=callEndpoint(type);
  String endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  endpoint=""String_Node_Str"";
  vr.body(endpoint,hasKey(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(endpoint + ""String_Node_Str"",equalTo(""String_Node_Str""));
}",0.906832298136646
172479,"private void testBookingIdMethods(ValidatableResponse vr){
  String bookingParameters=""String_Node_Str"";
  for (  String method : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) {
    bookingParameters=String.format(bookingParameters,method);
    vr.body(bookingParameters,hasSize(1));
    vr.body(bookingParameters + ""String_Node_Str"",contains(""String_Node_Str""));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(true)));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  }
}","private void testBookingIdMethods(ValidatableResponse vr){
  String bookingParameters=""String_Node_Str"";
  for (  String method : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) {
    bookingParameters=String.format(bookingParameters,method);
    vr.body(bookingParameters,hasSize(1));
    vr.body(bookingParameters + ""String_Node_Str"",contains(""String_Node_Str""));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(true)));
    vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
  }
  bookingParameters=""String_Node_Str"";
  vr.body(bookingParameters + ""String_Node_Str"",both(hasSize(1)).and(contains(""String_Node_Str"")));
}",0.9188558085230588
172480,"@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSecurityRequirement(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(null));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",hasSize(2));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
}","@RunAsClient @Test(dataProvider=""String_Node_Str"") public void testSecurityRequirement(String type){
  ValidatableResponse vr=callEndpoint(type);
  vr.body(""String_Node_Str"",equalTo(null));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasSize(1));
  vr.body(""String_Node_Str"",hasSize(2));
  vr.body(""String_Node_Str"",equalTo(null));
  vr.body(""String_Node_Str"",empty());
}",0.5429162357807652
172481,"@GET @Path(""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class))) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewById(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str""))) @PathParam(""String_Node_Str"") int id){
  Review review=reviews.get(id);
  if (review != null) {
    return Response.ok().entity(review).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}","@GET @Path(""String_Node_Str"") @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(implementation=Review.class)),headers={@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.INTEGER),required=true,allowEmptyValue=true,deprecated=true),@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true,allowEmptyValue=true,deprecated=true)}) @APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"") @Operation(operationId=""String_Node_Str"",summary=""String_Node_Str"") @Produces(""String_Node_Str"") public Response getReviewById(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",required=true,in=ParameterIn.PATH,content=@Content(examples=@ExampleObject(value=""String_Node_Str""))) @PathParam(""String_Node_Str"") int id){
  Review review=reviews.get(id);
  if (review != null) {
    return Response.ok().entity(review).build();
  }
 else {
    return Response.status(Status.NOT_FOUND).build();
  }
}",0.8266373142542652
172482,"@Path(""String_Node_Str"") @PUT @RequestBody(name=""String_Node_Str"",description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",value=""String_Node_Str""))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",implementation=User.class),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Tag(ref=""String_Node_Str"") public Response updateUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true) @PathParam(""String_Node_Str"") String username,User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}","@Path(""String_Node_Str"") @PUT @RequestBody(name=""String_Node_Str"",description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",value=""String_Node_Str""))) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",implementation=User.class),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(ref=""String_Node_Str"")))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Tag(ref=""String_Node_Str"") public Response updateUser(@Parameter(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.STRING),required=true) @PathParam(""String_Node_Str"") String username,User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}",0.9834254143646408
172483,"@POST @Tags(refs={""String_Node_Str"",""String_Node_Str""}) @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Parameters(value={@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,allowReserved=true,style=ParameterStyle.FORM,schema=@Schema(type=SchemaType.INTEGER,format=""String_Node_Str"")),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.STRING,externalDocs=@ExternalDocumentation(description=""String_Node_Str"",url=""String_Node_Str""))),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,hidden=true,schema=@Schema(type=SchemaType.STRING,externalDocs=@ExternalDocumentation(description=""String_Node_Str"",url=""String_Node_Str""))),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",style=ParameterStyle.FORM,required=true,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,style=ParameterStyle.FORM,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.INTEGER,format=""String_Node_Str"")),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.INTEGER))}) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUser(@RequestBody(description=""String_Node_Str"",required=true,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(name=""String_Node_Str"",type=SchemaType.OBJECT,maxProperties=1024,minProperties=1,requiredProperties={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},required=true,implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(name=""String_Node_Str"")))) User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}","@POST @Tags(refs={""String_Node_Str"",""String_Node_Str""}) @APIResponses(value={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str""),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")}) @Parameters(value={@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,allowReserved=true,style=ParameterStyle.FORM,schema=@Schema(type=SchemaType.INTEGER,format=""String_Node_Str"")),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.STRING,externalDocs=@ExternalDocumentation(description=""String_Node_Str"",url=""String_Node_Str""))),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,hidden=true,schema=@Schema(type=SchemaType.STRING,externalDocs=@ExternalDocumentation(description=""String_Node_Str"",url=""String_Node_Str""))),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",style=ParameterStyle.FORM,required=true,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,style=ParameterStyle.FORM,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.INTEGER,format=""String_Node_Str"")),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.STRING)),@Parameter(name=""String_Node_Str"",in=ParameterIn.QUERY,description=""String_Node_Str"",required=true,schema=@Schema(type=SchemaType.INTEGER))}) @Operation(summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"") public Response createUser(@RequestBody(description=""String_Node_Str"",required=true,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(name=""String_Node_Str"",type=SchemaType.OBJECT,maxProperties=1024,minProperties=1,requiredProperties={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},required=true,implementation=User.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""),encoding=@Encoding(name=""String_Node_Str"",contentType=""String_Node_Str"",style=""String_Node_Str"",allowReserved=true,explode=true,headers=@Header(name=""String_Node_Str"",description=""String_Node_Str"",schema=@Schema(type=SchemaType.INTEGER),required=true,allowEmptyValue=true,deprecated=true)))) User user){
  userData.addUser(user);
  return Response.ok().entity(""String_Node_Str"").build();
}",0.977712285872168
172484,"@Test @RunAsClient public void testSchema() throws InterruptedException {
  Response response=given().when().get(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + response.asString());
  ValidatableResponse vr=response.then().parser(""String_Node_Str"",Parser.JSON).statusCode(200);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",equalTo(101));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",equalTo(9));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",equalTo(10));
  vr.body(""String_Node_Str"",equalTo(256));
  vr.body(""String_Node_Str"",equalTo(32));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasEntry(""String_Node_Str"",""String_Node_Str""));
}","@Test @RunAsClient public void testSchema() throws InterruptedException {
  Response response=given().when().get(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + response.asString());
  ValidatableResponse vr=response.then().parser(""String_Node_Str"",Parser.JSON).statusCode(200);
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",nullValue());
  vr.body(""String_Node_Str"",equalTo(101));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",equalTo(9));
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(""String_Node_Str"",equalTo(10));
  vr.body(""String_Node_Str"",equalTo(256));
  vr.body(""String_Node_Str"",equalTo(32));
  String storeOrderResponses=""String_Node_Str"";
  vr.body(""String_Node_Str"",equalTo(true));
  vr.body(storeOrderResponses + ""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str""));
  vr.body(storeOrderResponses + ""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str""));
  vr.body(""String_Node_Str"",hasItems(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  vr.body(storeOrderResponses + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(storeOrderResponses + ""String_Node_Str"",equalTo(""String_Node_Str""));
  vr.body(storeOrderResponses + ""String_Node_Str"",hasEntry(""String_Node_Str"",""String_Node_Str""));
}",0.9453287197231834
172485,"/** 
 * Style describes how the encoding value will be serialized depending on the type of the parameter value. <p> This method returns the style property from a Encoding instance. </p>
 * @return String style
 */
StyleEnum getStyle();","/** 
 * Style describes how the encoding value will be serialized depending on the type of the parameter value. <p> This method returns the style property from a Encoding instance. </p>
 * @return String style
 */
Style getStyle();",0.9914163090128756
172486,"/** 
 * Style describes how the encoding value will be serialized depending on the type of the parameter value. <p> This method sets the style property of Encoding instance to the given style argument. </p>
 * @param style a string that descibes how encoding value will be serialized
 */
void setStyle(StyleEnum style);","/** 
 * Style describes how the encoding value will be serialized depending on the type of the parameter value. <p> This method sets the style property of Encoding instance to the given style argument. </p>
 * @param style a string that descibes how encoding value will be serialized
 */
void setStyle(Style style);",0.9936908517350158
172487,"/** 
 * Style describes how the encoding value will be serialized depending on the type of the parameter value. <p> This method sets the style property of Encoding instance to the passed style argument and returns the modified instance </p>
 * @param style a string that descibes how encoding value will be serialized
 * @return Encoding
 */
Encoding style(StyleEnum style);","/** 
 * Style describes how the encoding value will be serialized depending on the type of the parameter value. <p> This method sets the style property of Encoding instance to the passed style argument and returns the modified instance </p>
 * @param style a string that descibes how encoding value will be serialized
 * @return Encoding
 */
Encoding style(Style style);",0.9946236559139784
172488,"@Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@Parameter(description=""String_Node_Str"",required=true,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}","@POST @Callback(name=""String_Node_Str"",callbackUrlExpression=""String_Node_Str"",operation=@Operation(summary=""String_Node_Str"",responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(type=""String_Node_Str"",implementation=Booking.class))),@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"")})) @Operation(method=""String_Node_Str"",summary=""String_Node_Str"",description=""String_Node_Str"",operationId=""String_Node_Str"",tags={""String_Node_Str""},security=@SecurityRequirement(name=""String_Node_Str"",scopes={""String_Node_Str"",""String_Node_Str""}),requestBody=@RequestBody(description=""String_Node_Str"",content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class),examples=@ExampleObject(name=""String_Node_Str"",summary=""String_Node_Str"",externalValue=""String_Node_Str""))),responses={@APIResponse(responseCode=""String_Node_Str"",description=""String_Node_Str"",content=@Content(schema=@Schema(name=""String_Node_Str"",description=""String_Node_Str"",type=""String_Node_Str"")))}) @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") public Response createBooking(@Parameter(description=""String_Node_Str"",required=true,content=@Content(mediaType=""String_Node_Str"",schema=@Schema(implementation=Booking.class))) Booking task){
  bookings.put(currentId,task);
  return Response.status(Status.CREATED).entity(""String_Node_Str"" + currentId++ + ""String_Node_Str"").build();
}",0.4228079612694997
172489,"/** 
 * Sets this Link's parameters property to the given map.
 * @param parameters a map representing parameters to pass to this link's operation as specified with operationId or identified via operationRef
 */
void setParameters(Map<String,String> parameters);","/** 
 * Sets this Link's parameters property to the given map.
 * @param parameters a map representing parameters to pass to this link's operation as specified with operationId or identified via operationRef
 */
void setParameters(Map<String,Object> parameters);",0.9770992366412212
172490,"/** 
 * Returns the parameters property from this instance of Link. The key is the parameter name and the value is a constant or a runtime expression to be passed to the linked operation.
 * @return a map representing parameters to pass to this link's operation
 */
Map<String,String> getParameters();","/** 
 * Returns the parameters property from this instance of Link. The key is the parameter name and the value is a constant or a runtime expression to be passed to the linked operation.
 * @return a map representing parameters to pass to this link's operation
 */
Map<String,Object> getParameters();",0.9800664451827242
172491,"/** 
 * Add a new parameter to the parameters property of this instance of Link.
 * @param name The name of the parameter. Can be qualified using the parameter location [{in}.]{name} for operations that use the same parametername in different locations (e.g. path.id).
 * @param parameter a constant or an expression to be evaluated at runtime and passed to the linked operation
 * @return the current Link instance
 */
Link parameters(String name,String parameter);","/** 
 * Add a new parameter to the parameters property of this instance of Link.
 * @param name The name of the parameter. Can be qualified using the parameter location [{in}.]{name} for operations that use the same parametername in different locations (e.g. path.id).
 * @param parameter a constant or an expression to be evaluated at runtime and passed to the linked operation
 * @return the current Link instance
 */
Link parameters(String name,Object parameter);",0.9871244635193132
172492,"/** 
 * Returns the in property from a Parameter instance.
 * @return the location of the parameter
 */
String getIn();","/** 
 * Returns the in property from a Parameter instance.
 * @return the location of the parameter
 */
In getIn();",0.9743589743589745
172493,"/** 
 * Sets the in property of a Parameter instance to the given string. If the in property is set to ""path"" then also sets the required property to true.
 * @param in the location of the parameter
 */
void setIn(String in);","/** 
 * Sets the in property of a Parameter instance to the given string. If the in property is set to ""path"" then also sets the required property to true.
 * @param in the location of the parameter
 */
void setIn(In in);",0.9820627802690582
172494,"/** 
 * Sets the in property of a Parameter instance to the given string. If the in property is set to ""path"" then also sets the required property to true.
 * @param in the location of the parameter
 * @return the current Parameter instance
 */
Parameter in(String in);","/** 
 * Sets the in property of a Parameter instance to the given string. If the in property is set to ""path"" then also sets the required property to true.
 * @param in the location of the parameter
 * @return the current Parameter instance
 */
Parameter in(In in);",0.9850187265917604
172495,"/** 
 * Allows filtering of a particular SecurityScheme.  Implementers of this method can choose to update the given SecurityScheme, pass it back as-is, or return null if removing this SecurityScheme.
 * @return the SecurityScheme to be used or null 
 */
SecurityScheme filterSecurityScheme(SecurityScheme securityScheme);","/** 
 * Allows filtering of a particular SecurityScheme.  Implementers of this method can choose to update the given SecurityScheme, pass it back as-is, or return null if removing this SecurityScheme.
 * @param securityScheme the current SecurityScheme element
 * @return the SecurityScheme to be used or null 
 */
SecurityScheme filterSecurityScheme(SecurityScheme securityScheme);",0.9147727272727272
172496,"/** 
 * Allows filtering of a particular Callback.  Implementers of this method can choose to update the given Callback, pass it back as-is, or return null if removing this Callback.
 * @return the Callback to be used or null 
 */
Callback filterCallback(Callback callback);","/** 
 * Allows filtering of a particular Callback.  Implementers of this method can choose to update the given Callback, pass it back as-is, or return null if removing this Callback.
 * @param callback the current Callback element
 * @return the Callback to be used or null 
 */
Callback filterCallback(Callback callback);",0.9194630872483222
172497,"/** 
 * Allows filtering of a particular Operation.  Implementers of this method can choose to update the given Operation, pass it back as-is, or return null if removing this Operation.
 * @return the Operation to be used or null 
 */
Operation filterOperation(Operation operation);","/** 
 * Allows filtering of a particular Operation.  Implementers of this method can choose to update the given Operation, pass it back as-is, or return null if removing this Operation.
 * @param operation the current Operation element
 * @return the Operation to be used or null 
 */
Operation filterOperation(Operation operation);",0.9185667752442996
172498,"/** 
 * Allows filtering of a particular Server.  Implementers of this method can choose to update the given Server, pass it back as-is, or return null if removing this Server.
 * @return the Server to be used or null 
 */
Server filterServer(Server server);","/** 
 * Allows filtering of a particular Server.  Implementers of this method can choose to update the given Server, pass it back as-is, or return null if removing this Server.
 * @param server the current Server element
 * @return the Server to be used or null 
 */
Server filterServer(Server server);",0.9214285714285714
172499,"/** 
 * Allows filtering of a particular Header.  Implementers of this method can choose to update the given Header, pass it back as-is, or return null if removing this Header.
 * @return the Header to be used or null 
 */
Header filterHeader(Header header);","/** 
 * Allows filtering of a particular Header.  Implementers of this method can choose to update the given Header, pass it back as-is, or return null if removing this Header.
 * @param header the current Header element
 * @return the Header to be used or null 
 */
Header filterHeader(Header header);",0.9214285714285714
172500,"/** 
 * Allows filtering of a particular Schema.  Implementers of this method can choose to update the given Schema, pass it back as-is, or return null if removing this Schema.
 * @return the Schema to be used or null 
 */
Schema<?> filterSchema(Schema<?> schema);","/** 
 * Allows filtering of a particular Schema.  Implementers of this method can choose to update the given Schema, pass it back as-is, or return null if removing this Schema.
 * @param schema the current Schema element
 * @return the Schema to be used or null 
 */
Schema<?> filterSchema(Schema<?> schema);",0.9230769230769232
172501,"/** 
 * Allows filtering of a particular Tag.  Implementers of this method can choose to update the given Tag, pass it back as-is, or return null if removing this Tag.
 * @return the Tag to be used or null 
 */
Tag filterTag(Tag tag);","/** 
 * Allows filtering of a particular Tag.  Implementers of this method can choose to update the given Tag, pass it back as-is, or return null if removing this Tag.
 * @param tag the current Tag element
 * @return the Tag to be used or null 
 */
Tag filterTag(Tag tag);",0.924901185770751
172502,"/** 
 * Allows filtering of a particular RequestBody.  Implementers of this method can choose to update the given RequestBody, pass it back as-is, or return null if removing this RequestBody.
 * @return the RequestBody to be used or null 
 */
RequestBody filterRequestBody(RequestBody requestBody);","/** 
 * Allows filtering of a particular RequestBody.  Implementers of this method can choose to update the given RequestBody, pass it back as-is, or return null if removing this RequestBody.
 * @param requestBody the current RequestBody element
 * @return the RequestBody to be used or null 
 */
RequestBody filterRequestBody(RequestBody requestBody);",0.916923076923077
172503,"/** 
 * Allows filtering of a particular Parameter.  Implementers of this method can choose to update the given Parameter, pass it back as-is, or return null if removing this Parameter.
 * @return the Parameter to be used or null 
 */
Parameter filterParameter(Parameter parameter);","/** 
 * Allows filtering of a particular Parameter.  Implementers of this method can choose to update the given Parameter, pass it back as-is, or return null if removing this Parameter.
 * @param parameter the current Parameter element
 * @return the Parameter to be used or null 
 */
Parameter filterParameter(Parameter parameter);",0.9185667752442996
172504,"/** 
 * Allows filtering of a particular Link.  Implementers of this method can choose to update the given Link, pass it back as-is, or return null if removing this Link.
 * @return the Link to be used or null 
 */
Link filterLink(Link link);","/** 
 * Allows filtering of a particular Link.  Implementers of this method can choose to update the given Link, pass it back as-is, or return null if removing this Link.
 * @param link the current Link element
 * @return the Link to be used or null 
 */
Link filterLink(Link link);",0.9236641221374046
172505,"/** 
 * Allows filtering of a particular PathItem.  Implementers of this method can choose to update the given PathItem, pass it back as-is, or return null if removing this PathItem.
 * @return the PathItem to be used or null 
 */
PathItem filterPathItem(PathItem pathItem);","/** 
 * Allows filtering of a particular PathItem.  Implementers of this method can choose to update the given PathItem, pass it back as-is, or return null if removing this PathItem.
 * @param pathItem the current PathItem element
 * @return the PathItem to be used or null 
 */
PathItem filterPathItem(PathItem pathItem);",0.9194630872483222
172506,"/** 
 * Allows filtering of a particular APIResponse.  Implementers of this method can choose to update the given APIResponse, pass it back as-is, or return null if removing this APIResponse.
 * @return the APIResponse to be used or null 
 */
APIResponse filterAPIResponse(APIResponse apiResponse);","/** 
 * Allows filtering of a particular APIResponse.  Implementers of this method can choose to update the given APIResponse, pass it back as-is, or return null if removing this APIResponse.
 * @param apiResponse the current APIResponse element
 * @return the APIResponse to be used or null 
 */
APIResponse filterAPIResponse(APIResponse apiResponse);",0.916923076923077
172507,"/** 
 * Allows filtering of the singleton OpenAPI element.  Implementers of this method can choose to update this element, or do nothing if no change is required.  Note that one cannot remove this element from the model tree, hence the return type of void.  
 * @return the OpenAPI object to be used
 */
void filterOpenAPI(OpenAPI openAPI);","/** 
 * Allows filtering of the singleton OpenAPI element.  Implementers of this method can choose to update this element, or do nothing if no change is required.  Note that one cannot remove this element from the model tree, hence the return type of void.  
 * @param openAPI the current OpenAPI element
 */
void filterOpenAPI(OpenAPI openAPI);",0.9197080291970804
172508,"/** 
 * Returns the requestBody property from a Link instance.
 * @return a literal value or runtime expression to use as a request body when calling the target operation
 */
RequestBody getRequestBody();","/** 
 * Returns the requestBody property from a Link instance.
 * @return a literal value or runtime expression to use as a request body when calling the target operation
 */
Object getRequestBody();",0.967741935483871
172509,"/** 
 * Sets this Link's requestBody property to the given object.
 * @param requestBody a literal value or runtime expression to use as a request body when calling the target operation
 */
void setRequestBody(RequestBody requestBody);","/** 
 * Sets this Link's requestBody property to the given object.
 * @param requestBody a literal value or runtime expression to use as a request body when calling the target operation
 */
void setRequestBody(Object requestBody);",0.9634408602150538
172510,"/** 
 * Sets this Link's requestBody property to the given object.
 * @param requestBody a literal value or runtime expression to use as a request body when calling the target operation
 * @return the current Link instance
 */
Link requestBody(RequestBody requestBody);","/** 
 * Sets this Link's requestBody property to the given object.
 * @param requestBody a literal value or runtime expression to use as a request body when calling the target operation
 * @return the current Link instance
 */
Link requestBody(Object requestBody);",0.9681050656660412
172511,"/** 
 * Listening to events from VK longpoll server and call callbacks on events. You can override only necessary methods in callback to get necessary events.
 */
private void startListening(){
  LOG.info(""String_Node_Str"");
  while (on) {
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"").append(server).append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(ts).append(""String_Node_Str"").append(wait).append(""String_Node_Str"").append(mode).append(""String_Node_Str"").append(version).append(""String_Node_Str"");
    JSONObject response=Connection.getRequestResponse(query.toString());
    if (response.has(""String_Node_Str"")) {
      int code=response.getInt(""String_Node_Str"");
      LOG.error(""String_Node_Str"",code);
switch (code) {
default :
{
          ts=response.has(""String_Node_Str"") ? response.getInt(""String_Node_Str"") : ts;
          setData(null,null,null,null,null,null);
          break;
        }
case 4:
{
        version=response.getInt(""String_Node_Str"");
        break;
      }
  }
}
 else {
  if (this.client.commands.size() > 0 || callbacks.size() > 0) {
    if (response.has(""String_Node_Str"") && response.has(""String_Node_Str"")) {
      Integer new_ts=response.getInt(""String_Node_Str"");
      Integer new_pts=response.has(""String_Node_Str"") ? response.getInt(""String_Node_Str"") : pts;
      JSONArray updates=response.getJSONArray(""String_Node_Str"");
      for (      Object currentUpdateObject : updates) {
        JSONArray currentUpdate=(JSONArray)currentUpdateObject;
        int updateType=currentUpdate.getInt(0);
switch (updateType) {
case 4:
{
            int messageFlags=currentUpdate.getInt(2);
            if ((messageFlags & 2) == 0) {
              Message message=new Message(access_token,currentUpdate.getInt(1),currentUpdate.getInt(2),currentUpdate.getInt(3),currentUpdate.getInt(4),currentUpdate.getString(5),(currentUpdate.length() > 6 ? (currentUpdate.get(6).toString().startsWith(""String_Node_Str"") ? new JSONObject(currentUpdate.get(6).toString()) : null) : null),currentUpdate.length() > 7 ? currentUpdate.getInt(7) : null);
              handleCommands(message);
              if (message.hasFwds() && callbacks.containsKey(""String_Node_Str"")) {
                ((OnMessageWithFwdsCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
              }
switch (message.messageType()) {
case ""String_Node_Str"":
{
                  if (callbacks.containsKey(""String_Node_Str"")) {
                    ((OnVoiceMessageCallback)callbacks.get(""String_Node_Str"")).OnVoiceMessage(message);
                  }
 else {
                    if (callbacks.containsKey(""String_Node_Str"")) {
                      ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
                    }
                  }
                  break;
                }
case ""String_Node_Str"":
{
                if (callbacks.containsKey(""String_Node_Str"")) {
                  ((OnStickerMessageCallback)callbacks.get(""String_Node_Str"")).OnStickerMessage(message);
                }
 else {
                  if (callbacks.containsKey(""String_Node_Str"")) {
                    ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
                  }
                }
                break;
              }
case ""String_Node_Str"":
{
              if (callbacks.containsKey(""String_Node_Str"")) {
                ((OnGifMessageCallback)callbacks.get(""String_Node_Str"")).OnGifMessage(message);
              }
 else {
                if (callbacks.containsKey(""String_Node_Str"")) {
                  ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
                }
              }
              break;
            }
case ""String_Node_Str"":
{
            if (callbacks.containsKey(""String_Node_Str"")) {
              ((OnAudioMessageCallback)callbacks.get(""String_Node_Str"")).onAudioMessage(message);
            }
 else {
              if (callbacks.containsKey(""String_Node_Str"")) {
                ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
              }
            }
            break;
          }
case ""String_Node_Str"":
{
          if (callbacks.containsKey(""String_Node_Str"")) {
            ((OnVideoMessageCallback)callbacks.get(""String_Node_Str"")).onVideoMessage(message);
          }
 else {
            if (callbacks.containsKey(""String_Node_Str"")) {
              ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
            }
          }
          break;
        }
case ""String_Node_Str"":
{
        if (callbacks.containsKey(""String_Node_Str"")) {
          ((OnDocMessageCallback)callbacks.get(""String_Node_Str"")).OnDocMessage(message);
        }
 else {
          if (callbacks.containsKey(""String_Node_Str"")) {
            ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
          }
        }
        break;
      }
case ""String_Node_Str"":
{
      if (callbacks.containsKey(""String_Node_Str"")) {
        ((OnVoiceMessageCallback)callbacks.get(""String_Node_Str"")).OnVoiceMessage(message);
      }
 else {
        if (callbacks.containsKey(""String_Node_Str"")) {
          ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
        }
      }
      break;
    }
case ""String_Node_Str"":
{
    if (callbacks.containsKey(""String_Node_Str"")) {
      ((OnPhotoMessageCallback)callbacks.get(""String_Node_Str"")).onPhotoMessage(message);
    }
 else {
      if (callbacks.containsKey(""String_Node_Str"")) {
        ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
      }
    }
    break;
  }
case ""String_Node_Str"":
{
  if (callbacks.containsKey(""String_Node_Str"")) {
    ((OnLinkMessageCallback)callbacks.get(""String_Node_Str"")).OnLinkMessage(message);
  }
 else {
    if (callbacks.containsKey(""String_Node_Str"")) {
      ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
    }
  }
  break;
}
case ""String_Node_Str"":
{
if (callbacks.containsKey(""String_Node_Str"")) {
  ((OnSimpleTextMessageCallback)callbacks.get(""String_Node_Str"")).OnSimpleTextMessage(message);
}
 else {
  if (callbacks.containsKey(""String_Node_Str"")) {
    ((OnOtherMessagesCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
  }
}
break;
}
}
if (callbacks.containsKey(""String_Node_Str"")) {
((OnMessageCallback)callbacks.get(""String_Node_Str"")).onMessage(message);
}
}
break;
}
case 61:
{
if (callbacks.containsKey(""String_Node_Str"")) {
((OnTypingCallback)callbacks.get(""String_Node_Str"")).OnTyping(currentUpdate.getInt(1));
}
break;
}
}
}
ts=new_ts;
}
 else {
LOG.error(""String_Node_Str"",response);
}
}
}
}
}","/** 
 * Listening to events from VK longpoll server and call callbacks on events. You can override only necessary methods in callback to get necessary events.
 */
private void startListening(){
  LOG.info(""String_Node_Str"");
  while (on) {
    StringBuilder query=new StringBuilder();
    query.append(""String_Node_Str"").append(server).append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(ts).append(""String_Node_Str"").append(wait).append(""String_Node_Str"").append(mode).append(""String_Node_Str"").append(version).append(""String_Node_Str"");
    JSONObject response=Connection.getRequestResponse(query.toString());
    LOG.info(""String_Node_Str"",response);
    if (response.has(""String_Node_Str"")) {
      int code=response.getInt(""String_Node_Str"");
      LOG.error(""String_Node_Str"",code);
switch (code) {
default :
{
          if (response.has(""String_Node_Str"")) {
            ts=response.getInt(""String_Node_Str"");
          }
          setData(null,null,null,null,null);
          break;
        }
case 4:
{
        version=response.getInt(""String_Node_Str"");
        setData(null,null,null,null,null);
        break;
      }
  }
}
 else {
  if (response.has(""String_Node_Str""))   ts=response.getInt(""String_Node_Str"");
  if (response.has(""String_Node_Str""))   pts=response.getInt(""String_Node_Str"");
  if (this.updatesHandler.callbacksCount() > 0 || this.updatesHandler.commandsCount() > 0) {
    if (response.has(""String_Node_Str"") && response.has(""String_Node_Str"")) {
      this.updatesHandler.handle(response.getJSONArray(""String_Node_Str""));
    }
 else {
      LOG.error(""String_Node_Str"",response);
    }
  }
}
}
}",0.1791080372048652
172512,"/** 
 * Setting all necessary parameters
 * @param access_token Access token of user or group
 * @param need_pts     param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param version      param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param API          param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param wait         param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param mode         param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 */
private void setData(String access_token,Integer need_pts,Integer version,Double API,Integer wait,Integer mode){
  this.access_token=(access_token != null && access_token.length() > 5) ? access_token : this.access_token;
  this.need_pts=need_pts == null ? this.need_pts : need_pts;
  this.version=version == null ? this.version : version;
  this.API=API == null ? this.API : API;
  this.wait=wait == null ? this.wait : wait;
  this.mode=mode == null ? this.mode : mode;
  GetLongPollServerResponse serverResponse=getLongPollServer(this.access_token);
  if (serverResponse == null) {
    LOG.error(""String_Node_Str"");
    return;
  }
  this.server=serverResponse.getServer();
  this.key=serverResponse.getKey();
  this.ts=serverResponse.getTs();
  this.pts=serverResponse.getPts();
}","/** 
 * Setting all necessary parameters
 * @param need_pts     param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param version      param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param API          param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param wait         param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param mode         param, info: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 */
private void setData(Integer need_pts,Integer version,Double API,Integer wait,Integer mode){
  this.need_pts=need_pts == null ? this.need_pts : need_pts;
  this.version=version == null ? this.version : version;
  this.API=API == null ? this.API : API;
  this.wait=wait == null ? this.wait : wait;
  this.mode=mode == null ? this.mode : mode;
  GetLongPollServerResponse serverResponse=getLongPollServer(client.getAccessToken());
  if (serverResponse == null) {
    LOG.error(""String_Node_Str"");
    return;
  }
  this.server=serverResponse.getServer();
  this.key=serverResponse.getKey();
  this.ts=serverResponse.getTs();
  this.pts=serverResponse.getPts();
}",0.917979797979798
172513,"/** 
 * Custom constructor
 * @param client   client with your access token key, more: <a href=""https://vk.com/dev/access_token"">link</a>
 * @param need_pts more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param version  more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param API      more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param wait     more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param mode     more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 */
public LongPoll(Client client,Integer need_pts,Integer version,Double API,Integer wait,Integer mode){
  this.client=client;
  setData(client.getAccessToken(),need_pts,version,API,wait,mode);
  if (!on) {
    on=true;
    new Thread(this::startListening).start();
  }
}","/** 
 * Custom constructor
 * @param client   client with your access token key, more: <a href=""https://vk.com/dev/access_token"">link</a>
 * @param need_pts more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param version  more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param API      more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param wait     more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 * @param mode     more: <a href=""https://vk.com/dev/using_longpoll"">link</a>
 */
public LongPoll(Client client,Integer need_pts,Integer version,Double API,Integer wait,Integer mode){
  this.updatesHandler=new UpdatesHandler(client);
  this.updatesHandler.start();
  this.client=client;
  setData(need_pts,version,API,wait,mode);
  if (!on) {
    on=true;
    new Thread(this::startListening).start();
  }
}",0.9149064574532288
172514,"/** 
 * Add callback to the map
 * @param name     Callback name
 * @param callback Callback
 */
public void registerCallback(String name,Callback callback){
  this.callbacks.put(name,callback);
}","/** 
 * Add callback to the map
 * @param name     Callback name
 * @param callback Callback
 */
public void registerCallback(String name,Callback callback){
  updatesHandler.registerCallback(name,callback);
}",0.8938271604938272
172515,"/** 
 * Attach doc to message
 * @param doc Doc link: url, from disk or already uploaded to VK as doc{owner_id}_{id}
 */
public Message doc(String doc,String... type){
  if (type.length > 0 && !type[0].contains(""String_Node_Str"") && !type[0].contains(""String_Node_Str"") && !type[0].contains(""String_Node_Str"")) {
    LOG.error(""String_Node_Str"",type[0]);
    if (type.length > 1)     LOG.error(""String_Node_Str"");
  }
  boolean fileFromUrl=false;
  if (Pattern.matches(""String_Node_Str"",doc) || Pattern.matches(""String_Node_Str"",doc) || Pattern.matches(""String_Node_Str"",doc)) {
    doc=doc.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (Pattern.matches(""String_Node_Str"",doc)) {
    File template_file;
    if (Pattern.matches(""String_Node_Str"",doc)) {
      int sizeOfFile=Utils.sizeOfFile(doc,""String_Node_Str"");
      if (sizeOfFile > 10) {
        LOG.error(""String_Node_Str"",doc,sizeOfFile);
        return this;
      }
      try {
        template_file=new File(doc.substring(doc.lastIndexOf('/') + 1,doc.length()));
        template_file.createNewFile();
        Files.setPosixFilePermissions(Paths.get(template_file.getAbsolutePath()),PosixFilePermissions.fromString(""String_Node_Str""));
        FileUtils.copyURLToFile(new URL(doc),template_file,5000,5000);
        fileFromUrl=true;
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",doc,ignored.toString());
        return this;
      }
    }
 else {
      template_file=new File(doc);
      if (!template_file.exists()) {
        LOG.error(""String_Node_Str"",doc);
        return this;
      }
    }
    String uploadUrl;
    int maxAttempts=5, i=0;
    boolean good=false;
    while (i < maxAttempts) {
      i++;
      String getUploadServerQuery=""String_Node_Str"" + (type.length > 0 ? ""String_Node_Str"" + type[0] : ""String_Node_Str"") + ""String_Node_Str""+ accessToken+ ""String_Node_Str""+ this.peerId+ ""String_Node_Str"";
      JSONObject getUploadServerResponse=Connection.getRequestResponse(getUploadServerQuery);
      uploadUrl=getUploadServerResponse.has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"") : null : null;
      if (uploadUrl == null) {
        LOG.error(""String_Node_Str"",getUploadServerResponse);
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException ignored) {
        }
        continue;
      }
      String uploadingOfDocResponseString=Connection.getFileUploadAnswerOfVK(uploadUrl,""String_Node_Str"",MediaType.parse(""String_Node_Str""),template_file);
      uploadingOfDocResponseString=(uploadingOfDocResponseString != null && uploadingOfDocResponseString.length() > 2) ? uploadingOfDocResponseString : ""String_Node_Str"";
      JSONObject uploadingOfDocResponse=new JSONObject(uploadingOfDocResponseString);
      String file;
      if (uploadingOfDocResponse.has(""String_Node_Str"")) {
        file=""String_Node_Str"" + uploadingOfDocResponse.getString(""String_Node_Str"");
      }
 else {
        LOG.error(""String_Node_Str"",uploadingOfDocResponse);
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException ignored) {
        }
        continue;
      }
      String saveMessagesDocQuery=""String_Node_Str"" + accessToken + ""String_Node_Str""+ file;
      JSONObject saveMessagesDocResponse=Connection.getRequestResponse(saveMessagesDocQuery);
      String docAsAttach=saveMessagesDocResponse.has(""String_Node_Str"") ? ""String_Node_Str"" + saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") + ""String_Node_Str""+ saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") : ""String_Node_Str"";
      if (docAsAttach.length() < 2) {
        LOG.error(""String_Node_Str"",saveMessagesDocResponse);
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException ignored) {
        }
        continue;
      }
      if (fileFromUrl) {
        try {
          Files.delete(Paths.get(template_file.getAbsolutePath()));
        }
 catch (        IOException ignored) {
        }
      }
      if (Pattern.matches(""String_Node_Str"",docAsAttach)) {
        doc=docAsAttach;
        good=true;
        break;
      }
    }
    if (!good) {
      return this;
    }
  }
  this.attachments=this.attachments != null ? this.attachments : new String[]{};
  String[] attachmentsNew=new String[this.attachments.length + 1];
  attachmentsNew[attachmentsNew.length - 1]=doc;
  System.arraycopy(this.attachments,0,attachmentsNew,0,attachments.length);
  this.attachments=attachmentsNew;
  return this;
}","/** 
 * Attach doc to message
 * @param doc Doc link: url, from disk or already uploaded to VK as doc{owner_id}_{id}
 */
public Message doc(String doc,String... type){
  if (type.length > 0 && !type[0].contains(""String_Node_Str"") && !type[0].contains(""String_Node_Str"") && !type[0].contains(""String_Node_Str"")) {
    LOG.error(""String_Node_Str"",type[0]);
    if (type.length > 1)     LOG.error(""String_Node_Str"");
  }
  boolean fileFromUrl=false;
  if (Pattern.matches(""String_Node_Str"",doc) || Pattern.matches(""String_Node_Str"",doc) || Pattern.matches(""String_Node_Str"",doc)) {
    doc=doc.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    File template_file;
    if (Pattern.matches(""String_Node_Str"",doc)) {
      int sizeOfFile=Utils.sizeOfFile(doc,""String_Node_Str"");
      if (sizeOfFile > 10) {
        LOG.error(""String_Node_Str"",doc,sizeOfFile);
        return this;
      }
      try {
        String tmpName=doc.substring(doc.lastIndexOf('/') + 1,doc.length());
        if (templateFileName != null && templateFileName.length() > 2) {
          tmpName=templateFileName;
        }
        template_file=new File(tmpName);
        template_file.createNewFile();
        Files.setPosixFilePermissions(Paths.get(template_file.getAbsolutePath()),PosixFilePermissions.fromString(""String_Node_Str""));
        FileUtils.copyURLToFile(new URL(doc),template_file,5000,5000);
        fileFromUrl=true;
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",doc,ignored.toString());
        return this;
      }
    }
 else {
      template_file=new File(doc);
      if (!template_file.exists()) {
        LOG.error(""String_Node_Str"",doc);
        return this;
      }
    }
    String uploadUrl;
    int maxAttempts=5, i=0;
    boolean good=false;
    while (i < maxAttempts) {
      i++;
      String getUploadServerQuery=""String_Node_Str"" + (type.length > 0 ? ""String_Node_Str"" + type[0] : ""String_Node_Str"") + ""String_Node_Str""+ accessToken+ ""String_Node_Str""+ this.peerId+ ""String_Node_Str"";
      JSONObject getUploadServerResponse=Connection.getRequestResponse(getUploadServerQuery);
      uploadUrl=getUploadServerResponse.has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"") : null : null;
      if (uploadUrl == null) {
        LOG.error(""String_Node_Str"",getUploadServerResponse);
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException ignored) {
        }
        continue;
      }
      String uploadingOfDocResponseString=Connection.getFileUploadAnswerOfVK(uploadUrl,""String_Node_Str"",MediaType.parse(""String_Node_Str""),template_file);
      uploadingOfDocResponseString=(uploadingOfDocResponseString != null && uploadingOfDocResponseString.length() > 2) ? uploadingOfDocResponseString : ""String_Node_Str"";
      JSONObject uploadingOfDocResponse=new JSONObject(uploadingOfDocResponseString);
      String file;
      if (uploadingOfDocResponse.has(""String_Node_Str"")) {
        file=""String_Node_Str"" + uploadingOfDocResponse.getString(""String_Node_Str"");
      }
 else {
        LOG.error(""String_Node_Str"",uploadingOfDocResponse);
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException ignored) {
        }
        continue;
      }
      String saveMessagesDocQuery=""String_Node_Str"" + accessToken + ""String_Node_Str""+ file;
      JSONObject saveMessagesDocResponse=Connection.getRequestResponse(saveMessagesDocQuery);
      String docAsAttach=saveMessagesDocResponse.has(""String_Node_Str"") ? ""String_Node_Str"" + saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") + ""String_Node_Str""+ saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") : ""String_Node_Str"";
      if (docAsAttach.length() < 2) {
        LOG.error(""String_Node_Str"",saveMessagesDocResponse);
        try {
          Thread.sleep(400);
        }
 catch (        InterruptedException ignored) {
        }
        continue;
      }
      if (fileFromUrl) {
        try {
          Files.delete(Paths.get(template_file.getAbsolutePath()));
        }
 catch (        IOException ignored) {
        }
      }
      if (Pattern.matches(""String_Node_Str"",docAsAttach)) {
        doc=docAsAttach;
        good=true;
        break;
      }
    }
    if (!good) {
      return this;
    }
  }
  this.attachments=this.attachments != null ? this.attachments : new String[]{};
  String[] attachmentsNew=new String[this.attachments.length + 1];
  attachmentsNew[attachmentsNew.length - 1]=doc;
  System.arraycopy(this.attachments,0,attachmentsNew,0,attachments.length);
  this.attachments=attachmentsNew;
  return this;
}",0.9750129600829446
172516,"/** 
 * Attach doc to message
 * @param doc Doc link: url, from disk or already uploaded to VK as doc{owner_id}_{id}
 */
public Message docAsync(String doc){
  if (Pattern.matches(""String_Node_Str"",doc)) {
    this.attachments.add(doc);
    return this;
  }
  this.docsToUpload.add(doc);
  return this;
}","/** 
 * Attach doc to message
 * @param doc Doc link: url, from disk or already uploaded to VK as doc{owner_id}_{id}
 */
public Message docAsync(String doc,String... type){
  if (Pattern.matches(""String_Node_Str"",doc)) {
    this.attachments.add(doc);
    return this;
  }
  this.docsToUpload.add(new JSONObject().put(""String_Node_Str"",doc).put(""String_Node_Str"",type));
  return this;
}",0.8712011577424024
172517,"/** 
 * Async uploading photos
 */
private void uploadDoc(String doc,ExecuteCallback callback){
  String type=null;
  File docFile=new File(doc);
  if (docFile.exists()) {
    type=""String_Node_Str"";
  }
  URL docUrl=null;
  if (type == null) {
    try {
      docUrl=new URL(doc);
      type=""String_Node_Str"";
    }
 catch (    MalformedURLException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
  }
  byte[] docBytes;
switch (type) {
case ""String_Node_Str"":
{
      try {
        docBytes=Files.readAllBytes(Paths.get(docFile.toURI()));
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",docFile.getAbsolutePath());
        callback.onResponse(""String_Node_Str"");
        return;
      }
      break;
    }
case ""String_Node_Str"":
{
    try {
      docBytes=Utils.toByteArray(docUrl);
    }
 catch (    IOException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
    break;
  }
default :
{
  LOG.error(""String_Node_Str"",doc);
  return;
}
}
if (docBytes != null) {
JSONObject params_getMessagesUploadServer=new JSONObject().put(""String_Node_Str"",peerId);
api.call(""String_Node_Str"",params_getMessagesUploadServer,response -> {
if (response.toString().equalsIgnoreCase(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"");
  callback.onResponse(""String_Node_Str"");
  return;
}
String uploadUrl=new JSONObject(response.toString()).getString(""String_Node_Str"");
RequestBody requestBody=new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(""String_Node_Str"",""String_Node_Str"",RequestBody.create(MediaType.parse(""String_Node_Str""),docBytes)).build();
Request request=new Request.Builder().url(uploadUrl).post(requestBody).build();
try {
  Connection.client.newCall(request).enqueue(new Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      LOG.error(""String_Node_Str"",e.toString());
      callback.onResponse(""String_Node_Str"");
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      String response_uploadFileString;
      ResponseBody responseBody=response.body();
      response_uploadFileString=responseBody != null ? responseBody.string() : ""String_Node_Str"";
      if (response_uploadFileString.length() < 2 || response_uploadFileString.contains(""String_Node_Str"") || !response_uploadFileString.contains(""String_Node_Str"")) {
        LOG.error(""String_Node_Str"",response_uploadFileString);
        callback.onResponse(""String_Node_Str"");
        return;
      }
      JSONObject getFileStringResponse;
      try {
        getFileStringResponse=new JSONObject(response_uploadFileString);
      }
 catch (      JSONException ignored) {
        LOG.error(""String_Node_Str"",response_uploadFileString);
        callback.onResponse(""String_Node_Str"");
        return;
      }
      if (!getFileStringResponse.has(""String_Node_Str"")) {
        LOG.error(""String_Node_Str"",getFileStringResponse.toString());
        callback.onResponse(""String_Node_Str"");
        return;
      }
      String fileParam=getFileStringResponse.getString(""String_Node_Str"");
      JSONObject params_photosSaveMessagesPhoto=new JSONObject().put(""String_Node_Str"",fileParam);
      api.call(""String_Node_Str"",params_photosSaveMessagesPhoto,response1 -> {
        if (response1.toString().equalsIgnoreCase(""String_Node_Str"")) {
          LOG.error(""String_Node_Str"");
          callback.onResponse(""String_Node_Str"");
          return;
        }
        JSONObject response_saveMessagesPhotoe=new JSONArray(response1.toString()).getJSONObject(0);
        int ownerId=response_saveMessagesPhotoe.getInt(""String_Node_Str""), id=response_saveMessagesPhotoe.getInt(""String_Node_Str"");
        String attach=""String_Node_Str"" + ownerId + '_'+ id;
        callback.onResponse(attach);
      }
);
    }
  }
);
}
  finally {
  Connection.client.connectionPool().evictAll();
}
}
);
}
}","/** 
 * Async uploading photos
 */
private void uploadDoc(JSONObject doc,ExecuteCallback callback){
  String type=null;
  File docFile=new File(doc.getString(""String_Node_Str""));
  if (docFile.exists()) {
    type=""String_Node_Str"";
  }
  URL docUrl=null;
  if (type == null) {
    try {
      docUrl=new URL(doc.getString(""String_Node_Str""));
      type=""String_Node_Str"";
    }
 catch (    MalformedURLException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
  }
  byte[] docBytes;
switch (type) {
case ""String_Node_Str"":
{
      try {
        docBytes=Files.readAllBytes(Paths.get(docFile.toURI()));
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",docFile.getAbsolutePath());
        callback.onResponse(""String_Node_Str"");
        return;
      }
      break;
    }
case ""String_Node_Str"":
{
    try {
      docBytes=Utils.toByteArray(docUrl);
    }
 catch (    IOException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
    break;
  }
default :
{
  LOG.error(""String_Node_Str"",doc);
  return;
}
}
if (docBytes != null) {
JSONObject params_getMessagesUploadServer=new JSONObject().put(""String_Node_Str"",peerId).put(""String_Node_Str"",doc.getString(""String_Node_Str""));
api.call(""String_Node_Str"",params_getMessagesUploadServer,response -> {
if (response.toString().equalsIgnoreCase(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"");
  callback.onResponse(""String_Node_Str"");
  return;
}
String uploadUrl=new JSONObject(response.toString()).getString(""String_Node_Str"");
RequestBody requestBody=new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(""String_Node_Str"",""String_Node_Str"",RequestBody.create(MediaType.parse(""String_Node_Str""),docBytes)).build();
Request request=new Request.Builder().url(uploadUrl).post(requestBody).build();
try {
  Connection.client.newCall(request).enqueue(new Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      LOG.error(""String_Node_Str"",e.toString());
      callback.onResponse(""String_Node_Str"");
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      String response_uploadFileString;
      ResponseBody responseBody=response.body();
      response_uploadFileString=responseBody != null ? responseBody.string() : ""String_Node_Str"";
      if (response_uploadFileString.length() < 2 || response_uploadFileString.contains(""String_Node_Str"") || !response_uploadFileString.contains(""String_Node_Str"")) {
        LOG.error(""String_Node_Str"",response_uploadFileString);
        callback.onResponse(""String_Node_Str"");
        return;
      }
      JSONObject getFileStringResponse;
      try {
        getFileStringResponse=new JSONObject(response_uploadFileString);
      }
 catch (      JSONException ignored) {
        LOG.error(""String_Node_Str"",response_uploadFileString);
        callback.onResponse(""String_Node_Str"");
        return;
      }
      if (!getFileStringResponse.has(""String_Node_Str"")) {
        LOG.error(""String_Node_Str"",getFileStringResponse.toString());
        callback.onResponse(""String_Node_Str"");
        return;
      }
      String fileParam=getFileStringResponse.getString(""String_Node_Str"");
      JSONObject params_photosSaveMessagesPhoto=new JSONObject().put(""String_Node_Str"",fileParam);
      api.call(""String_Node_Str"",params_photosSaveMessagesPhoto,response1 -> {
        if (response1.toString().equalsIgnoreCase(""String_Node_Str"")) {
          LOG.error(""String_Node_Str"");
          callback.onResponse(""String_Node_Str"");
          return;
        }
        JSONObject response_saveMessagesPhotoe=new JSONArray(response1.toString()).getJSONObject(0);
        int ownerId=response_saveMessagesPhotoe.getInt(""String_Node_Str""), id=response_saveMessagesPhotoe.getInt(""String_Node_Str"");
        String attach=""String_Node_Str"" + ownerId + '_'+ id;
        callback.onResponse(attach);
      }
);
    }
  }
);
}
  finally {
  Connection.client.connectionPool().evictAll();
}
}
);
}
}",0.9840725312423426
172518,"public Message doc(String doc){
  if (Pattern.matches(""String_Node_Str"",doc)) {
    this.attachments.add(doc.substring(doc.lastIndexOf(""String_Node_Str"")));
    return this;
  }
  String type=null;
  File docFile=new File(doc);
  if (docFile.exists()) {
    type=""String_Node_Str"";
  }
  URL docUrl=null;
  if (type == null) {
    try {
      docUrl=new URL(doc);
      type=""String_Node_Str"";
    }
 catch (    MalformedURLException ignored) {
      LOG.error(""String_Node_Str"",doc);
      return this;
    }
  }
  byte[] docBytes;
switch (type) {
case ""String_Node_Str"":
{
      try {
        docBytes=Files.readAllBytes(Paths.get(docFile.toURI()));
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",docFile.getAbsolutePath());
        return this;
      }
      break;
    }
case ""String_Node_Str"":
{
    try {
      docBytes=Utils.toByteArray(docUrl);
    }
 catch (    IOException ignored) {
      LOG.error(""String_Node_Str"",ignored.toString(),doc);
      return this;
    }
    break;
  }
default :
{
  LOG.error(""String_Node_Str"",doc);
  return this;
}
}
if (docBytes != null) {
String getUploadServerQuery=""String_Node_Str"" + accessToken + ""String_Node_Str""+ this.peerId+ ""String_Node_Str"";
JSONObject getUploadServerResponse=Connection.getRequestResponse(getUploadServerQuery);
String uploadUrl=getUploadServerResponse.has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"") : null : null;
if (uploadUrl == null) {
LOG.error(""String_Node_Str"",getUploadServerResponse);
return this;
}
String uploadingOfDocResponseString=Connection.getFileUploadAnswerOfVK(uploadUrl,""String_Node_Str"",MediaType.parse(""String_Node_Str""),docBytes);
JSONObject uploadingOfDocResponse;
try {
uploadingOfDocResponse=new JSONObject(uploadingOfDocResponseString);
}
 catch (JSONException ignored) {
LOG.error(""String_Node_Str"",uploadingOfDocResponseString,ignored.toString());
return this;
}
String file;
if (uploadingOfDocResponse.has(""String_Node_Str"")) {
file=uploadingOfDocResponse.getString(""String_Node_Str"");
}
 else {
LOG.error(""String_Node_Str"",uploadingOfDocResponseString);
return this;
}
String saveMessagesDocQuery=""String_Node_Str"" + accessToken + ""String_Node_Str""+ file;
JSONObject saveMessagesDocResponse=Connection.getRequestResponse(saveMessagesDocQuery);
String docAsAttach=saveMessagesDocResponse.has(""String_Node_Str"") ? ""String_Node_Str"" + saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") + ""String_Node_Str""+ saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") : ""String_Node_Str"";
this.attachments.add(docAsAttach);
}
return this;
}","public Message doc(String doc,String... typeOfDoc){
  if (Pattern.matches(""String_Node_Str"",doc)) {
    this.attachments.add(doc.substring(doc.lastIndexOf(""String_Node_Str"")));
    return this;
  }
  String type=null;
  File docFile=new File(doc);
  if (docFile.exists()) {
    type=""String_Node_Str"";
  }
  URL docUrl=null;
  if (type == null) {
    try {
      docUrl=new URL(doc);
      type=""String_Node_Str"";
    }
 catch (    MalformedURLException ignored) {
      LOG.error(""String_Node_Str"",doc);
      return this;
    }
  }
  byte[] docBytes;
switch (type) {
case ""String_Node_Str"":
{
      try {
        docBytes=Files.readAllBytes(Paths.get(docFile.toURI()));
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",docFile.getAbsolutePath());
        return this;
      }
      break;
    }
case ""String_Node_Str"":
{
    try {
      docBytes=Utils.toByteArray(docUrl);
    }
 catch (    IOException ignored) {
      LOG.error(""String_Node_Str"",ignored.toString(),doc);
      return this;
    }
    break;
  }
default :
{
  LOG.error(""String_Node_Str"",doc);
  return this;
}
}
if (docBytes != null) {
String getUploadServerQuery=""String_Node_Str"" + accessToken + ""String_Node_Str""+ this.peerId+ ""String_Node_Str""+ (typeOfDoc.length > 0 ? ""String_Node_Str"" + typeOfDoc[0] : ""String_Node_Str"");
LOG.error(""String_Node_Str"",getUploadServerQuery);
JSONObject getUploadServerResponse=Connection.getRequestResponse(getUploadServerQuery);
String uploadUrl=getUploadServerResponse.has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").has(""String_Node_Str"") ? getUploadServerResponse.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"") : null : null;
if (uploadUrl == null) {
LOG.error(""String_Node_Str"",getUploadServerResponse);
return this;
}
String uploadingOfDocResponseString=Connection.getFileUploadAnswerOfVK(uploadUrl,""String_Node_Str"",MediaType.parse(""String_Node_Str""),docBytes);
JSONObject uploadingOfDocResponse;
try {
uploadingOfDocResponse=new JSONObject(uploadingOfDocResponseString);
}
 catch (JSONException ignored) {
LOG.error(""String_Node_Str"",uploadingOfDocResponseString,ignored.toString());
return this;
}
String file;
if (uploadingOfDocResponse.has(""String_Node_Str"")) {
file=uploadingOfDocResponse.getString(""String_Node_Str"");
}
 else {
LOG.error(""String_Node_Str"",uploadingOfDocResponseString);
return this;
}
String saveMessagesDocQuery=""String_Node_Str"" + accessToken + ""String_Node_Str""+ file;
JSONObject saveMessagesDocResponse=Connection.getRequestResponse(saveMessagesDocQuery);
String docAsAttach=saveMessagesDocResponse.has(""String_Node_Str"") ? ""String_Node_Str"" + saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") + ""String_Node_Str""+ saveMessagesDocResponse.getJSONArray(""String_Node_Str"").getJSONObject(0).getInt(""String_Node_Str"") : ""String_Node_Str"";
this.attachments.add(docAsAttach);
}
return this;
}",0.9739764052741152
172519,"/** 
 * Send the message
 * @param callback will be called with response object
 */
public void send(ExecuteCallback... callback){
  if (photosToUpload.size() > 0) {
    String photo=photosToUpload.get(0);
    photosToUpload.remove(0);
    uploadPhoto(photo,response -> {
      if (!response.toString().equalsIgnoreCase(""String_Node_Str"")) {
        this.attachments.addIfAbsent(response.toString());
        send(callback);
      }
 else {
        LOG.error(""String_Node_Str"");
      }
    }
);
    return;
  }
  if (docsToUpload.size() > 0) {
    String doc=docsToUpload.get(0);
    docsToUpload.remove(0);
    uploadDoc(doc,response -> {
      if (!response.toString().equalsIgnoreCase(""String_Node_Str"")) {
        this.attachments.addIfAbsent(response.toString());
        send(callback);
      }
 else {
        LOG.error(""String_Node_Str"");
      }
    }
);
    return;
  }
  text=(text != null && text.length() > 0) ? text : ""String_Node_Str"";
  title=(title != null && title.length() > 0) ? title : ""String_Node_Str"";
  randomId=randomId != null && randomId > 0 ? randomId : 0;
  peerId=peerId != null ? peerId : -142409596;
  attachments=attachments != null && attachments.size() > 0 ? attachments : new CopyOnWriteArrayList<>();
  forwardedMessages=forwardedMessages != null && forwardedMessages.size() > 0 ? forwardedMessages : new CopyOnWriteArrayList<>();
  stickerId=stickerId != null && stickerId > 0 ? stickerId : 0;
  JSONObject params=new JSONObject();
  params.put(""String_Node_Str"",text);
  if (title != null && title.length() > 0)   params.put(""String_Node_Str"",title);
  if (randomId != null && randomId > 0)   params.put(""String_Node_Str"",randomId);
  params.put(""String_Node_Str"",peerId);
  if (attachments.size() > 0)   params.put(""String_Node_Str"",String.join(""String_Node_Str"",attachments));
  if (forwardedMessages.size() > 0)   params.put(""String_Node_Str"",String.join(""String_Node_Str"",forwardedMessages));
  if (stickerId != null && stickerId > 0)   params.put(""String_Node_Str"",stickerId);
  api.call(""String_Node_Str"",params,response -> {
    if (callback.length > 0) {
      callback[0].onResponse(response);
    }
    if (!(response instanceof Integer)) {
      LOG.error(""String_Node_Str"",response);
    }
  }
);
}","/** 
 * Send the message
 * @param callback will be called with response object
 */
public void send(ExecuteCallback... callback){
  if (photosToUpload.size() > 0) {
    String photo=photosToUpload.get(0);
    photosToUpload.remove(0);
    uploadPhoto(photo,response -> {
      if (!response.toString().equalsIgnoreCase(""String_Node_Str"")) {
        this.attachments.addIfAbsent(response.toString());
        send(callback);
      }
 else {
        LOG.error(""String_Node_Str"");
      }
    }
);
    return;
  }
  if (docsToUpload.size() > 0) {
    JSONObject doc=docsToUpload.get(0);
    docsToUpload.remove(0);
    uploadDoc(doc,response -> {
      if (!response.toString().equalsIgnoreCase(""String_Node_Str"")) {
        this.attachments.addIfAbsent(response.toString());
        send(callback);
      }
 else {
        LOG.error(""String_Node_Str"");
      }
    }
);
    return;
  }
  text=(text != null && text.length() > 0) ? text : ""String_Node_Str"";
  title=(title != null && title.length() > 0) ? title : ""String_Node_Str"";
  randomId=randomId != null && randomId > 0 ? randomId : 0;
  peerId=peerId != null ? peerId : -142409596;
  attachments=attachments != null && attachments.size() > 0 ? attachments : new CopyOnWriteArrayList<>();
  forwardedMessages=forwardedMessages != null && forwardedMessages.size() > 0 ? forwardedMessages : new CopyOnWriteArrayList<>();
  stickerId=stickerId != null && stickerId > 0 ? stickerId : 0;
  JSONObject params=new JSONObject();
  params.put(""String_Node_Str"",text);
  if (title != null && title.length() > 0)   params.put(""String_Node_Str"",title);
  if (randomId != null && randomId > 0)   params.put(""String_Node_Str"",randomId);
  params.put(""String_Node_Str"",peerId);
  if (attachments.size() > 0)   params.put(""String_Node_Str"",String.join(""String_Node_Str"",attachments));
  if (forwardedMessages.size() > 0)   params.put(""String_Node_Str"",String.join(""String_Node_Str"",forwardedMessages));
  if (stickerId != null && stickerId > 0)   params.put(""String_Node_Str"",stickerId);
  api.call(""String_Node_Str"",params,response -> {
    if (callback.length > 0) {
      callback[0].onResponse(response);
    }
    if (!(response instanceof Integer)) {
      LOG.error(""String_Node_Str"",response);
    }
  }
);
}",0.9964491788726144
172520,"/** 
 * Async uploading photos
 */
private void uploadDoc(JSONObject doc,ExecuteCallback callback){
  String type=null;
  File docFile=new File(doc.getString(""String_Node_Str""));
  if (docFile.exists()) {
    type=""String_Node_Str"";
  }
  URL docUrl=null;
  if (type == null) {
    try {
      docUrl=new URL(doc.getString(""String_Node_Str""));
      type=""String_Node_Str"";
    }
 catch (    MalformedURLException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
  }
  byte[] docBytes;
switch (type) {
case ""String_Node_Str"":
{
      try {
        docBytes=Files.readAllBytes(Paths.get(docFile.toURI()));
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",docFile.getAbsolutePath());
        callback.onResponse(""String_Node_Str"");
        return;
      }
      break;
    }
case ""String_Node_Str"":
{
    try {
      docBytes=Utils.toByteArray(docUrl);
    }
 catch (    IOException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
    break;
  }
default :
{
  LOG.error(""String_Node_Str"",doc);
  return;
}
}
if (docBytes != null) {
JSONObject params_getMessagesUploadServer=new JSONObject().put(""String_Node_Str"",peerId).put(""String_Node_Str"",doc.getString(""String_Node_Str""));
api.call(""String_Node_Str"",params_getMessagesUploadServer,response -> {
if (response.toString().equalsIgnoreCase(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"");
  callback.onResponse(""String_Node_Str"");
  return;
}
String uploadUrl=new JSONObject(response.toString()).getString(""String_Node_Str"");
String response_uploadFileString;
MultipartUtility multipartUtility=new MultipartUtility(uploadUrl);
multipartUtility.addBytesPart(""String_Node_Str"",""String_Node_Str"",docBytes);
response_uploadFileString=multipartUtility.finish();
if (response_uploadFileString.length() < 2 || response_uploadFileString.contains(""String_Node_Str"") || !response_uploadFileString.contains(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"",response_uploadFileString);
  callback.onResponse(""String_Node_Str"");
  return;
}
JSONObject getFileStringResponse;
try {
  getFileStringResponse=new JSONObject(response_uploadFileString);
}
 catch (JSONException ignored) {
  LOG.error(""String_Node_Str"",response_uploadFileString);
  callback.onResponse(""String_Node_Str"");
  return;
}
if (!getFileStringResponse.has(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"",getFileStringResponse.toString());
  callback.onResponse(""String_Node_Str"");
  return;
}
String fileParam=getFileStringResponse.getString(""String_Node_Str"");
JSONObject params_photosSaveMessagesPhoto=new JSONObject().put(""String_Node_Str"",fileParam);
api.call(""String_Node_Str"",params_photosSaveMessagesPhoto,response1 -> {
  if (response1.toString().equalsIgnoreCase(""String_Node_Str"")) {
    LOG.error(""String_Node_Str"");
    callback.onResponse(""String_Node_Str"");
    return;
  }
  JSONObject response_saveMessagesPhotoe=new JSONArray(response1.toString()).getJSONObject(0);
  int ownerId=response_saveMessagesPhotoe.getInt(""String_Node_Str""), id=response_saveMessagesPhotoe.getInt(""String_Node_Str"");
  String attach=""String_Node_Str"" + ownerId + '_'+ id;
  callback.onResponse(attach);
}
);
}
);
}
}","/** 
 * Async uploading photos
 */
private void uploadDoc(JSONObject doc,ExecuteCallback callback){
  String type=null, fileNameField;
  File docFile=new File(doc.getString(""String_Node_Str""));
  if (docFile.exists()) {
    type=""String_Node_Str"";
  }
  URL docUrl=null;
  if (type == null) {
    try {
      docUrl=new URL(doc.getString(""String_Node_Str""));
      type=""String_Node_Str"";
    }
 catch (    MalformedURLException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
  }
  byte[] docBytes;
switch (type) {
case ""String_Node_Str"":
{
      try {
        docBytes=Files.readAllBytes(Paths.get(docFile.toURI()));
        fileNameField=docFile.getName();
      }
 catch (      IOException ignored) {
        LOG.error(""String_Node_Str"",docFile.getAbsolutePath());
        callback.onResponse(""String_Node_Str"");
        return;
      }
      break;
    }
case ""String_Node_Str"":
{
    try {
      URLConnection conn=docUrl.openConnection();
      try {
        docBytes=Utils.toByteArray(conn);
        fileNameField=Utils.guessFileNameByContentType(conn.getContentType());
      }
  finally {
        Utils.close(conn);
      }
    }
 catch (    IOException ignored) {
      LOG.error(""String_Node_Str"",doc);
      callback.onResponse(""String_Node_Str"");
      return;
    }
    break;
  }
default :
{
  LOG.error(""String_Node_Str"",doc);
  return;
}
}
if (docBytes != null) {
JSONObject params_getMessagesUploadServer=new JSONObject().put(""String_Node_Str"",peerId).put(""String_Node_Str"",doc.getString(""String_Node_Str""));
api.call(""String_Node_Str"",params_getMessagesUploadServer,response -> {
if (response.toString().equalsIgnoreCase(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"");
  callback.onResponse(""String_Node_Str"");
  return;
}
String uploadUrl=new JSONObject(response.toString()).getString(""String_Node_Str"");
String response_uploadFileString;
MultipartUtility multipartUtility=new MultipartUtility(uploadUrl);
multipartUtility.addBytesPart(""String_Node_Str"",fileNameField,docBytes);
response_uploadFileString=multipartUtility.finish();
if (response_uploadFileString.length() < 2 || response_uploadFileString.contains(""String_Node_Str"") || !response_uploadFileString.contains(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"",response_uploadFileString);
  callback.onResponse(""String_Node_Str"");
  return;
}
JSONObject getFileStringResponse;
try {
  getFileStringResponse=new JSONObject(response_uploadFileString);
}
 catch (JSONException ignored) {
  LOG.error(""String_Node_Str"",response_uploadFileString);
  callback.onResponse(""String_Node_Str"");
  return;
}
if (!getFileStringResponse.has(""String_Node_Str"")) {
  LOG.error(""String_Node_Str"",getFileStringResponse.toString());
  callback.onResponse(""String_Node_Str"");
  return;
}
String fileParam=getFileStringResponse.getString(""String_Node_Str"");
JSONObject params_photosSaveMessagesPhoto=new JSONObject().put(""String_Node_Str"",fileParam);
api.call(""String_Node_Str"",params_photosSaveMessagesPhoto,response1 -> {
  if (response1.toString().equalsIgnoreCase(""String_Node_Str"")) {
    LOG.error(""String_Node_Str"");
    callback.onResponse(""String_Node_Str"");
    return;
  }
  JSONObject response_saveMessagesPhotoe=new JSONArray(response1.toString()).getJSONObject(0);
  int ownerId=response_saveMessagesPhotoe.getInt(""String_Node_Str""), id=response_saveMessagesPhotoe.getInt(""String_Node_Str"");
  String attach=""String_Node_Str"" + ownerId + '_'+ id;
  callback.onResponse(attach);
}
);
}
);
}
}",0.9567124890318808
172521,"/** 
 * Adds a upload file section to the request
 * @param fieldName  name of field in body of POST-request
 * @param bytes     an array of bytes to be uploaded
 */
public void addBytesPart(String fieldName,String fileName,byte[] bytes){
  try {
    request.writeBytes(this.twoHyphens + this.boundary + this.crlf);
    request.writeBytes(""String_Node_Str"" + fieldName + ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.crlf);
    request.writeBytes(this.crlf);
    request.write(bytes);
  }
 catch (  IOException ignored) {
    LOG.error(""String_Node_Str"",fieldName,fileName);
  }
}","/** 
 * Adds a upload file section to the request
 * @param fieldName  name of field in body of POST-requestx
 * @param bytes     an array of bytes to be uploaded
 */
public void addBytesPart(String fieldName,String fileName,byte[] bytes){
  try {
    request.writeBytes(this.twoHyphens + this.boundary + this.crlf);
    request.writeBytes(""String_Node_Str"" + fieldName + ""String_Node_Str""+ fileName+ ""String_Node_Str""+ this.crlf);
    request.writeBytes(this.crlf);
    request.write(bytes);
  }
 catch (  IOException ignored) {
    LOG.error(""String_Node_Str"",fieldName,fileName);
  }
}",0.9991489361702128
172522,"/** 
 * Listening to events from VK longpoll server and call callbacks on events. You can override only necessary methods in callback to get necessary events.
 */
private void startListening(){
  LOG.info(""String_Node_Str"");
  while (on) {
    JSONObject response=new JSONObject(Connection.getRequestResponse(""String_Node_Str"" + server + ""String_Node_Str""+ key+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ wait+ ""String_Node_Str""+ mode+ ""String_Node_Str""+ version+ ""String_Node_Str""));
    LOG.info(""String_Node_Str"",response);
    if (response.has(""String_Node_Str"")) {
      int code=response.getInt(""String_Node_Str"");
      LOG.error(""String_Node_Str"",code);
switch (code) {
default :
{
          if (response.has(""String_Node_Str"")) {
            ts=response.getInt(""String_Node_Str"");
          }
          setData(null,null,null,null,null);
          break;
        }
case 4:
{
        version=response.getInt(""String_Node_Str"");
        setData(null,null,null,null,null);
        break;
      }
  }
}
 else {
  if (response.has(""String_Node_Str""))   ts=response.getInt(""String_Node_Str"");
  if (response.has(""String_Node_Str""))   this.pts=response.getInt(""String_Node_Str"");
  if (this.updatesHandler.callbacksCount() > 0 || this.updatesHandler.commandsCount() > 0) {
    if (response.has(""String_Node_Str"") && response.has(""String_Node_Str"")) {
      this.updatesHandler.handle(response.getJSONArray(""String_Node_Str""));
    }
 else {
      LOG.error(""String_Node_Str"",response);
    }
  }
}
}
}","/** 
 * Listening to events from VK longpoll server and call callbacks on events. You can override only necessary methods in callback to get necessary events.
 */
private void startListening(){
  LOG.info(""String_Node_Str"");
  while (on) {
    JSONObject response;
    String responseString=""String_Node_Str"";
    try {
      responseString=Connection.getRequestResponse(""String_Node_Str"" + server + ""String_Node_Str""+ key+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ wait+ ""String_Node_Str""+ mode+ ""String_Node_Str""+ version+ ""String_Node_Str"");
      response=new JSONObject(responseString);
    }
 catch (    JSONException ignored) {
      LOG.error(""String_Node_Str"",responseString);
      continue;
    }
    LOG.info(""String_Node_Str"",response);
    if (response.has(""String_Node_Str"")) {
      int code=response.getInt(""String_Node_Str"");
      LOG.error(""String_Node_Str"",code);
switch (code) {
default :
{
          if (response.has(""String_Node_Str"")) {
            ts=response.getInt(""String_Node_Str"");
          }
          setData(null,null,null,null,null);
          break;
        }
case 4:
{
        version=response.getInt(""String_Node_Str"");
        setData(null,null,null,null,null);
        break;
      }
  }
}
 else {
  if (response.has(""String_Node_Str""))   ts=response.getInt(""String_Node_Str"");
  if (response.has(""String_Node_Str""))   this.pts=response.getInt(""String_Node_Str"");
  if (this.updatesHandler.callbacksCount() > 0 || this.updatesHandler.commandsCount() > 0) {
    if (response.has(""String_Node_Str"") && response.has(""String_Node_Str"")) {
      this.updatesHandler.handle(response.getJSONArray(""String_Node_Str""));
    }
 else {
      LOG.error(""String_Node_Str"",response);
    }
  }
}
}
}",0.2676579925650557
172523,"void putAll(JSONArray elements){
  for (int i=0; i < elements.length(); i++) {
    updates.add(elements.getJSONArray(i));
  }
}","/** 
 * We add all of updates from longpoll server to queue
 * @param elements Array of updates
 */
void putAll(JSONArray elements){
  for (int i=0; i < elements.length(); i++) {
    updates.add(elements.getJSONArray(i));
  }
}",0.7175141242937854
172524,"JSONArray shift(){
  JSONArray answer=new JSONArray();
  if (this.updates.size() > 0) {
    answer=this.updates.get(0);
    this.updates.remove(0);
  }
  return answer;
}","/** 
 * Analog method of 'shift()' method from javascript
 * @return First element of list, and then remove it
 */
JSONArray shift(){
  JSONArray answer=new JSONArray();
  if (this.updates.size() > 0) {
    answer=this.updates.get(0);
    this.updates.remove(0);
  }
  return answer;
}",0.7472527472527473
172525,"public void setCarrierNameFilter(String carrierNameFilter){
  presenter.setCarrierNameFilter(carrierNameFilter);
}","/** 
 * Carrier name filter works for sdk >21
 * @param carrierNameFilter
 */
public void setCarrierNameFilter(String carrierNameFilter){
  presenter.setCarrierNameFilter(carrierNameFilter);
}",0.7450980392156863
172526,"public void sendSMS(String message){
  PendingIntent sentPI=PendingIntent.getBroadcast(context,0,new Intent(SENT),0);
  PendingIntent deliveredPI=PendingIntent.getBroadcast(context,0,new Intent(DELIVERED),0);
  BroadcastReceiver mySender=new BroadcastReceiver(){
    @Override public void onReceive(    Context arg0,    Intent arg1){
switch (getResultCode()) {
case Activity.RESULT_OK:
        context.unregisterReceiver(this);
      if (mySmsManagerCallBack != null)       mySmsManagerCallBack.afterSuccessfulSMS(smsId);
    break;
case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
  context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
case SmsManager.RESULT_ERROR_NO_SERVICE:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
case SmsManager.RESULT_ERROR_NULL_PDU:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
case SmsManager.RESULT_ERROR_RADIO_OFF:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
}
}
}
;
context.registerReceiver(mySender,new IntentFilter(SENT));
BroadcastReceiver myReceiver=new BroadcastReceiver(){
@Override public void onReceive(Context arg0,Intent arg1){
switch (getResultCode()) {
case Activity.RESULT_OK:
context.unregisterReceiver(this);
mySmsManagerCallBack.afterDelivered(smsId);
break;
case Activity.RESULT_CANCELED:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
}
}
}
;
context.registerReceiver(myReceiver,new IntentFilter(DELIVERED));
SmsManager sms=SmsManager.getDefault();
int subscriptionId=carrierSlotNumber;
if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP_MR1 && carrierSlotCount > 1) {
if (checkCarrierNameFilter()) {
sms.getSmsManagerForSubscriptionId(subscriptionId).sendTextMessage(sms_number,null,message,sentPI,deliveredPI);
}
 else {
mySmsManagerCallBack.onCarrierNameNotMatch(smsId,""String_Node_Str"" + carrierNameFilter);
}
}
 else {
if (checkCarrierNameFilter()) {
sms.sendTextMessage(sms_number,null,message,sentPI,deliveredPI);
}
 else {
mySmsManagerCallBack.onCarrierNameNotMatch(smsId,""String_Node_Str"" + carrierNameFilter);
}
}
}","public void sendSMS(String message){
  PendingIntent sentPI=PendingIntent.getBroadcast(context,0,new Intent(SENT),0);
  PendingIntent deliveredPI=PendingIntent.getBroadcast(context,0,new Intent(DELIVERED),0);
  BroadcastReceiver mySender=new BroadcastReceiver(){
    @Override public void onReceive(    Context arg0,    Intent arg1){
switch (getResultCode()) {
case Activity.RESULT_OK:
        context.unregisterReceiver(this);
      if (mySmsManagerCallBack != null)       mySmsManagerCallBack.afterSuccessfulSMS(smsId);
    break;
case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
  context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
case SmsManager.RESULT_ERROR_NO_SERVICE:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
case SmsManager.RESULT_ERROR_NULL_PDU:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
case SmsManager.RESULT_ERROR_RADIO_OFF:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
}
}
}
;
context.registerReceiver(mySender,new IntentFilter(SENT));
BroadcastReceiver myReceiver=new BroadcastReceiver(){
@Override public void onReceive(Context arg0,Intent arg1){
switch (getResultCode()) {
case Activity.RESULT_OK:
context.unregisterReceiver(this);
mySmsManagerCallBack.afterDelivered(smsId);
break;
case Activity.RESULT_CANCELED:
context.unregisterReceiver(this);
if (mySmsManagerCallBack != null) mySmsManagerCallBack.afterUnSuccessfulSMS(smsId,""String_Node_Str"");
break;
}
}
}
;
context.registerReceiver(myReceiver,new IntentFilter(DELIVERED));
SmsManager sms=SmsManager.getDefault();
int subscriptionId=carrierSlotNumber;
if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP_MR1) {
if (checkCarrierNameFilter()) {
if (carrierSlotCount > 1) {
sendSms(message,sentPI,deliveredPI,sms.getSmsManagerForSubscriptionId(subscriptionId));
}
 else {
sendSms(message,sentPI,deliveredPI,sms);
}
}
 else {
mySmsManagerCallBack.onCarrierNameNotMatch(smsId,""String_Node_Str"" + carrierNameFilter);
}
}
 else {
sendSms(message,sentPI,deliveredPI,sms);
}
}",0.8554316398182569
172527,"@Override public void afterDelivered(int smsId){
  callBack.afterDelivered(smsId);
}","@Override public void afterDelivered(int smsId){
  if (mySmsId == smsId && view != null) {
    view.endView();
  }
  callBack.afterDelivered(smsId);
}",0.717948717948718
172528,"@Override public void afterSuccessfulSMS(int smsId){
  callBack.afterSuccessfulSMS(smsId);
}","@Override public void afterSuccessfulSMS(int smsId){
  if (mySmsId == smsId && view != null) {
    view.endView();
  }
  callBack.afterSuccessfulSMS(smsId);
}",0.736
172529,"@Override public void afterUnSuccessfulSMS(int smsId,String message){
  callBack.afterUnSuccessfulSMS(smsId,message);
}","@Override public void afterUnSuccessfulSMS(int smsId,String message){
  if (mySmsId == smsId && view != null) {
    view.endView();
  }
  callBack.afterUnSuccessfulSMS(smsId,message);
}",0.7828947368421053
172530,"private void sendSmsForOldPhones(){
  model.generateSMSForSingleSimCard(mySmsId,body,carrierNameFilter,new MySmsManager.SMSManagerCallBack(){
    @Override public void afterSuccessfulSMS(    int smsId){
      callBack.afterSuccessfulSMS(smsId);
    }
    @Override public void afterDelivered(    int smsId){
      callBack.afterDelivered(smsId);
    }
    @Override public void afterUnSuccessfulSMS(    int smsId,    String message){
      callBack.afterUnSuccessfulSMS(smsId,message);
    }
    @Override public void onCarrierNameNotMatch(    int smsId,    String message){
      callBack.onCarrierNameNotMatch(smsId,message);
    }
  }
);
}","private void sendSmsForOldPhones(){
  model.generateSMSForSingleSimCard(mySmsId,body,carrierNameFilter,new MySmsManager.SMSManagerCallBack(){
    @Override public void afterSuccessfulSMS(    int smsId){
      if (mySmsId == smsId && view != null) {
        view.endView();
      }
      callBack.afterSuccessfulSMS(smsId);
    }
    @Override public void afterDelivered(    int smsId){
      if (mySmsId == smsId && view != null) {
        view.endView();
      }
      callBack.afterDelivered(smsId);
    }
    @Override public void afterUnSuccessfulSMS(    int smsId,    String message){
      if (mySmsId == smsId && view != null) {
        view.endView();
      }
      callBack.afterUnSuccessfulSMS(smsId,message);
    }
    @Override public void onCarrierNameNotMatch(    int smsId,    String message){
      callBack.onCarrierNameNotMatch(smsId,message);
    }
  }
);
}",0.8458498023715415
172531,"@Override public void endView(){
  progressBar.setVisibility(View.INVISIBLE);
  dialog.dismiss();
}","@Override public void endView(){
  if (progressBar != null) {
    progressBar.setVisibility(View.INVISIBLE);
  }
  if (dialog != null) {
    dialog.dismiss();
  }
}",0.752851711026616
172532,"@Override public boolean onTouchEvent(MotionEvent event){
  if (!isEnabled() || event.getPointerCount() > 1 || mSourceImage == null || mGraffitiLayer == null) {
    return super.onTouchEvent(event);
  }
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mTouchPoint.set(event);
  mIsTouching=true;
mTouchPartHolder=new TouchPartHolder(mIsErase,mTouchMode);
mTouchPartHolder.onTouchDown(event,mPathWidth);
mGraffitiLayer.mTouchPartHolders.add(mTouchPartHolder);
if (mIsErase) {
for (GraffitiLayer layer : mGraffitiLayers) {
if (layer.equals(mGraffitiLayer)) {
layer.mTouchPartHolders.add(mTouchPartHolder);
}
}
}
break;
case MotionEvent.ACTION_MOVE:
mTouchPoint.set(event);
if (mTouchPartHolder != null) {
mTouchPartHolder.onTouchMove(event);
}
break;
case MotionEvent.ACTION_UP:
mTouchPoint.reset();
mIsTouching=false;
mTouchPartHolder=null;
break;
}
postInvalidate();
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (!isEnabled() || event.getPointerCount() > 1 || mSourceImage == null || mGraffitiLayer == null) {
    return super.onTouchEvent(event);
  }
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    mTouchPoint.set(event);
  mIsTouching=true;
mTouchPartHolder=new TouchPartHolder(mIsErase,mTouchMode);
mTouchPartHolder.onTouchDown(event,mPathWidth);
mGraffitiLayer.mTouchPartHolders.add(mTouchPartHolder);
if (mIsErase) {
for (GraffitiLayer layer : mGraffitiLayers) {
if (!layer.equals(mGraffitiLayer)) {
layer.mTouchPartHolders.add(mTouchPartHolder);
}
}
}
break;
case MotionEvent.ACTION_MOVE:
mTouchPoint.set(event);
if (mTouchPartHolder != null) {
mTouchPartHolder.onTouchMove(event);
}
break;
case MotionEvent.ACTION_UP:
mTouchPoint.reset();
mIsTouching=false;
mTouchPartHolder=null;
break;
}
postInvalidate();
return true;
}",0.9994453688297282
172533,"@Override public void onResourceReady(File resource,GlideAnimation<? super File> glideAnimation){
  Bitmap bitmap=BitmapFactory.decodeFile(resource.getAbsolutePath());
  addSticker(bitmap);
  addSticker(bitmap);
  addSticker(bitmap);
}","@Override public void onResourceReady(File resource,GlideAnimation<? super File> glideAnimation){
  addSticker(BitmapFactory.decodeFile(resource.getAbsolutePath()));
}",0.7810945273631841
172534,"@Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(StickerSourceActivity.StickerSourceEvent event){
  Glide.with(mContext).load(event.mStickerSource.getSourceUrl()).downloadOnly(new SimpleTarget<File>(){
    @Override public void onResourceReady(    File resource,    GlideAnimation<? super File> glideAnimation){
      Bitmap bitmap=BitmapFactory.decodeFile(resource.getAbsolutePath());
      addSticker(bitmap);
      addSticker(bitmap);
      addSticker(bitmap);
    }
  }
);
}","@Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(StickerSourceActivity.StickerSourceEvent event){
  Glide.with(mContext).load(event.mStickerSource.getSourceUrl()).downloadOnly(new SimpleTarget<File>(){
    @Override public void onResourceReady(    File resource,    GlideAnimation<? super File> glideAnimation){
      addSticker(BitmapFactory.decodeFile(resource.getAbsolutePath()));
    }
  }
);
}",0.8705357142857143
172535,"private StickerBaseTouchHandler getTouchHandler(int touchType){
  StickerBaseTouchHandler handler=mTouchHandlerMap.get(touchType);
  if (handler == null) {
switch (touchType) {
case StickerBaseTouchHandler.MOVE:
      handler=new MoveHandler();
    break;
case StickerBaseTouchHandler.BOTTOM_RIGHT_CORNER:
  handler=new BottomRightCornerHandler();
break;
case StickerBaseTouchHandler.TWO_FINGER:
handler=new TwoFingersHandler();
break;
}
}
return handler;
}","private StickerBaseTouchHandler getTouchHandler(int touchType){
  StickerBaseTouchHandler handler=mTouchHandlerMap.get(touchType);
  if (handler == null) {
switch (touchType) {
case StickerBaseTouchHandler.MOVE:
      handler=new MoveHandler();
    break;
case StickerBaseTouchHandler.BOTTOM_RIGHT_CORNER:
  handler=new BottomRightCornerHandler();
break;
case StickerBaseTouchHandler.TWO_FINGER:
handler=new TwoFingersHandler();
break;
}
if (handler != null) {
mTouchHandlerMap.put(touchType,handler);
}
}
return handler;
}",0.9
172536,"@Override public void addMessage(final String id,final SseMessageDTO dto){
  logger.debug(""String_Node_Str"");
  if (id != null) {
    clients.get(id).getMessages().add(dto.getBody());
    return;
  }
  clients.values().forEach((data) -> {
    if (data.getPath().equals(dto.getPath())) {
      data.getMessages().add(dto.getBody());
    }
  }
);
}","@Override public void addMessage(final String id,final SseMessageDTO dto){
  logger.debug(""String_Node_Str"");
  dto.setBody(GeneralUtils.removeAllLineBreaks(dto.getBody()));
  if (id != null) {
    clients.get(id).getMessages().add(dto.getBody());
    return;
  }
  clients.values().forEach((data) -> {
    if (data.getPath().equals(dto.getPath())) {
      data.getMessages().add(dto.getBody());
    }
  }
);
}",0.9153439153439152
172537,"public void sendMessage(final String id,final WebSocketDTO dto) throws IOException {
  logger.debug(""String_Node_Str"");
  final Set<SessionIdWrapper> sessions=sessionMap.get(dto.getPath());
  if (sessions == null) {
    return;
  }
  if (id != null) {
    for (    SessionIdWrapper s : sessions) {
      if (s.getId().equals(id)) {
        s.getSession().getRemote().sendString(dto.getBody());
        return;
      }
    }
  }
 else {
    for (    SessionIdWrapper s : sessions) {
      s.getSession().getRemote().sendString(dto.getBody());
    }
  }
}","public void sendMessage(final String id,final WebSocketDTO dto) throws IOException {
  logger.debug(""String_Node_Str"");
  dto.setBody(GeneralUtils.removeAllLineBreaks(dto.getBody()));
  final Set<SessionIdWrapper> sessions=sessionMap.get(dto.getPath());
  if (sessions == null) {
    return;
  }
  if (id != null) {
    for (    SessionIdWrapper s : sessions) {
      if (s.getId().equals(id)) {
        s.getSession().getRemote().sendString(dto.getBody());
        return;
      }
    }
  }
 else {
    for (    SessionIdWrapper s : sessions) {
      s.getSession().getRemote().sendString(dto.getBody());
    }
  }
}",0.9452991452991452
172538,"@RequestMapping(path=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<List<JmsMockResponseDTO>> get(){
  return new ResponseEntity<List<JmsMockResponseDTO>>(new ArrayList<JmsMockResponseDTO>(),HttpStatus.OK);
}","@RequestMapping(path=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<List<JmsMockResponseDTO>> get(){
  return new ResponseEntity<List<JmsMockResponseDTO>>(jmsMockService.loadAll(),HttpStatus.OK);
}",0.9225225225225224
172539,"@RequestMapping(path=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<SimpleMessageResponseDTO<String>> create(@RequestBody final JmsMockDTO dto){
  return new ResponseEntity<SimpleMessageResponseDTO<String>>(new SimpleMessageResponseDTO<String>(null),HttpStatus.CREATED);
}","@RequestMapping(path=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<SimpleMessageResponseDTO<String>> create(@RequestBody final JmsMockDTO dto){
  return new ResponseEntity<SimpleMessageResponseDTO<String>>(new SimpleMessageResponseDTO<String>(jmsMockService.createEndpoint(dto)),HttpStatus.CREATED);
}",0.9530864197530864
172540,"@RequestMapping(path=""String_Node_Str"",method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<String> update(@PathVariable(""String_Node_Str"") final String extId,@RequestBody final JmsMockDTO dto) throws RecordNotFoundException {
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}","@RequestMapping(path=""String_Node_Str"",method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<String> update(@PathVariable(""String_Node_Str"") final String extId,@RequestBody final JmsMockDTO dto) throws RecordNotFoundException {
  jmsMockService.updateEndpoint(extId,dto);
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}",0.9454094292803972
172541,"@RequestMapping(path=""String_Node_Str"",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<String> delete(@PathVariable(""String_Node_Str"") final String extId) throws RecordNotFoundException {
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}","@RequestMapping(path=""String_Node_Str"",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<String> delete(@PathVariable(""String_Node_Str"") final String extId) throws RecordNotFoundException {
  jmsMockService.deleteEndpoint(extId);
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}",0.9390243902439024
172542,"@RequestMapping(path=""String_Node_Str"",method=RequestMethod.PATCH,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<?> postJms(@RequestBody final QueueDTO dto) throws ValidationException {
  jmsProxyService.clearQueue(dto.getName());
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}","@RequestMapping(path=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<?> postJms(@RequestBody final JmsProxiedDTO dto) throws ValidationException {
  jmsProxyService.pushToQueue(dto.getQueueName(),dto.getBody(),0);
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}",0.9129287598944592
172543,"public JmsMockDTO(String name,RecordStatusEnum status,JmsMockTypeEnum mockType){
  this.name=name;
  this.status=status;
  this.mockType=mockType;
}","public JmsMockDTO(final String name,final RecordStatusEnum status,final JmsMockTypeEnum jmsMockType){
  this.name=name;
  this.status=status;
  this.jmsMockType=jmsMockType;
}",0.9164086687306502
172544,"@ResponseStatus(value=HttpStatus.BAD_REQUEST) @ExceptionHandler(DataIntegrityViolationException.class) public void badRequest(){
}","@ExceptionHandler(DataIntegrityViolationException.class) public ResponseEntity<String> badRequest(){
  return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
}",0.5540540540540541
172545,"@ResponseStatus(value=HttpStatus.BAD_REQUEST) @ExceptionHandler(ValidationException.class) public String ValidationBadRequest(ValidationException ex){
  return ex.getMessage();
}","@ExceptionHandler(ValidationException.class) public ResponseEntity<String> ValidationBadRequest(ValidationException ex){
  return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
}",0.1798941798941798
172546,"@ResponseStatus(value=HttpStatus.NOT_FOUND) @ExceptionHandler(RecordNotFoundException.class) public void notFound(){
}","@ExceptionHandler(RecordNotFoundException.class) public ResponseEntity<String> notFound(){
  return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
}",0.5294117647058824
172547,"@ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) @ExceptionHandler(MockServerException.class) public void internalServerError(MockServerException ex){
}","@ExceptionHandler(MockServerException.class) public ResponseEntity<String> internalServerError(MockServerException ex){
  return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
}",0.5706214689265536
172548,"@RequestMapping(path=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<?> postJms(@RequestBody final JmsProxiedDTO dto) throws ValidationException, MockServerException {
  jmsProxyService.pushToQueue(dto.getQueueName(),dto.getBody());
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}","@RequestMapping(path=""String_Node_Str"",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public @ResponseBody ResponseEntity<?> postJms(@RequestBody final JmsProxiedDTO dto) throws ValidationException {
  jmsProxyService.pushToQueue(dto.getQueueName(),dto.getBody());
  return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
}",0.9737827715355806
172549,"public void sendTextMessage(final String queueName,final String textBody) throws MockServerException {
  if (!getCurrentState().isRunning()) {
    return;
  }
  Connection connection=null;
  Session session=null;
  MessageProducer producer=null;
  try {
    connection=connectionFactory.createConnection();
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    producer=session.createProducer(session.createQueue(queueName));
    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
    producer.send(session.createTextMessage(textBody));
  }
 catch (  JMSException ex) {
    logger.error(""String_Node_Str"" + queueName,ex);
  }
 finally {
    if (producer != null) {
      try {
        producer.close();
      }
 catch (      JMSException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
    if (session != null) {
      try {
        session.close();
      }
 catch (      JMSException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      JMSException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
}","public void sendTextMessage(final String queueName,final String textBody){
  Connection connection=null;
  Session session=null;
  MessageProducer producer=null;
  try {
    if (!getCurrentState().isRunning()) {
      return;
    }
    connection=connectionFactory.createConnection();
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    producer=session.createProducer(session.createQueue(queueName));
    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
    producer.send(session.createTextMessage(textBody));
  }
 catch (  MockServerException|JMSException ex) {
    logger.error(""String_Node_Str"" + queueName,ex);
  }
 finally {
    if (producer != null) {
      try {
        producer.close();
      }
 catch (      JMSException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
    if (session != null) {
      try {
        session.close();
      }
 catch (      JMSException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      JMSException ex) {
        logger.error(""String_Node_Str"",ex);
      }
    }
  }
}",0.8864027538726333
172550,"void pushToQueue(final String queueName,final String body) throws ValidationException, MockServerException ;","void pushToQueue(final String queueName,final String body) throws ValidationException ;",0.8923076923076924
172551,"@Override public void pushToQueue(final String queueName,final String body) throws ValidationException, MockServerException {
  logger.debug(""String_Node_Str"");
  if (StringUtils.isBlank(queueName)) {
    throw new ValidationException(""String_Node_Str"");
  }
  if (StringUtils.isBlank(body)) {
    throw new ValidationException(""String_Node_Str"");
  }
  mockedJmsServerEngine.sendTextMessage(queueName,body);
}","@Override public void pushToQueue(final String queueName,final String body) throws ValidationException {
  logger.debug(""String_Node_Str"");
  if (StringUtils.isBlank(queueName)) {
    throw new ValidationException(""String_Node_Str"");
  }
  if (StringUtils.isBlank(body)) {
    throw new ValidationException(""String_Node_Str"");
  }
  mockedJmsServerEngine.sendTextMessage(queueName,body);
}",0.4881101376720901
172552,"void clearState(){
  webSocketService.clearSession();
  proxyService.clearSession();
}","void clearState(){
  webSocketService.clearSession();
  proxyService.clearSession();
  mockOrderingCounterService.clearState();
}",0.8
172553,"@Transactional void buildEndpoints(final List<RestfulMock> mocks) throws MockServerException {
  logger.debug(""String_Node_Str"");
  invokeAndDetachData(mocks);
  buildWebSocketEndpoints(mocks);
  buildHttpEndpoints(mocks);
}","@Transactional void buildEndpoints(final List<RestfulMock> mocks) throws MockServerException {
  logger.debug(""String_Node_Str"");
  invokeAndDetachData(mocks);
  buildWebSocketEndpoints(mocks);
  enableCORS(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  buildHttpEndpoints(mocks);
}",0.8665377176015474
172554,"RestfulMockDefinitionOrder getNextInSequence(final RestfulMock restfulMock){
  final long mockId=restfulMock.getId();
  Long mockDefinitionId=null;
synchronized (monitor) {
    final List<DefinitionCounter> definitionCounterList=synchronizedCounter.getOrDefault(mockId,new ArrayList<DefinitionCounter>(){
{
        restfulMock.getDefinitions().forEach(d -> add(new DefinitionCounter(d.getId(),(d.getFrequencyCount() > 0) ? d.getFrequencyCount() : 1)));
      }
    }
);
    for (    DefinitionCounter d : definitionCounterList) {
      if (d.getFrequencyCount() > d.getCurrentTally()) {
        mockDefinitionId=d.getDefinitionId();
        d.setCurrentTally(d.getCurrentTally() + 1);
        break;
      }
    }
    if (mockDefinitionId == null) {
      for (      DefinitionCounter d : definitionCounterList) {
        if (mockDefinitionId == null) {
          mockDefinitionId=d.getDefinitionId();
          d.setCurrentTally(1);
        }
 else {
          d.setCurrentTally(0);
        }
      }
    }
    synchronizedCounter.put(mockId,definitionCounterList);
  }
  for (  RestfulMockDefinitionOrder d : restfulMock.getDefinitions()) {
    if (d.getId() == mockDefinitionId) {
      return d;
    }
  }
  throw new NullPointerException(""String_Node_Str"");
}","RestfulMockDefinitionOrder getNextInSequence(final RestfulMock restfulMock){
  final String mockExtId=restfulMock.getExtId();
  String mockDefinitionId=null;
synchronized (monitor) {
    final List<DefinitionCounter> definitionCounterList=synchronizedCounter.getOrDefault(mockExtId,new ArrayList<DefinitionCounter>(){
{
        restfulMock.getDefinitions().forEach(d -> add(new DefinitionCounter(d.getExtId(),(d.getFrequencyCount() > 0) ? d.getFrequencyCount() : 1)));
      }
    }
);
    for (    DefinitionCounter d : definitionCounterList) {
      if (d.getFrequencyCount() > d.getCurrentTally()) {
        mockDefinitionId=d.getDefinitionExtId();
        d.setCurrentTally(d.getCurrentTally() + 1);
        break;
      }
    }
    if (mockDefinitionId == null) {
      for (      DefinitionCounter d : definitionCounterList) {
        if (mockDefinitionId == null) {
          mockDefinitionId=d.getDefinitionExtId();
          d.setCurrentTally(1);
        }
 else {
          d.setCurrentTally(0);
        }
      }
    }
    synchronizedCounter.put(mockExtId,definitionCounterList);
  }
  for (  RestfulMockDefinitionOrder d : restfulMock.getDefinitions()) {
    if (d.getExtId().equals(mockDefinitionId)) {
      return d;
    }
  }
  throw new NullPointerException(""String_Node_Str"");
}",0.6122608356110895
172555,"DefinitionCounter(long definitionId,int frequencyCount){
  this.definitionId=definitionId;
  this.frequencyCount=frequencyCount;
}","DefinitionCounter(String definitionExtId,int frequencyCount){
  this.definitionExtId=definitionExtId;
  this.frequencyCount=frequencyCount;
}",0.9446494464944648
172556,"@Before public void setUp(){
  mockOrderingCounterService=new MockOrderingCounterServiceImpl();
  restfulMock1=new RestfulMock();
  restfulMock1.setId(1);
  order1=new RestfulMockDefinitionOrder(restfulMock1,200,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",1,0,false,0,0);
  order1.setId(1);
  order2=new RestfulMockDefinitionOrder(restfulMock1,201,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",2,0,false,0,0);
  order2.setId(2);
  order3=new RestfulMockDefinitionOrder(restfulMock1,202,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",3,0,false,0,0);
  order3.setId(3);
  order4=new RestfulMockDefinitionOrder(restfulMock1,204,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",4,0,false,0,0);
  order4.setId(4);
  restfulMock1.getDefinitions().add(order1);
  restfulMock1.getDefinitions().add(order2);
  restfulMock1.getDefinitions().add(order3);
  restfulMock1.getDefinitions().add(order4);
  restfulMock2=new RestfulMock();
  restfulMock2.setId(2);
  order5=new RestfulMockDefinitionOrder(restfulMock2,400,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",1,0,false,0,0);
  order5.setId(5);
  order6=new RestfulMockDefinitionOrder(restfulMock2,500,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",2,0,false,0,0);
  order6.setId(6);
  restfulMock2.getDefinitions().add(order5);
  restfulMock2.getDefinitions().add(order6);
}","@Before public void setUp(){
  mockOrderingCounterService=new MockOrderingCounterServiceImpl();
  restfulMock1=new RestfulMock();
  restfulMock1.setExtId(GeneralUtils.generateUUID());
  order1=new RestfulMockDefinitionOrder(restfulMock1,200,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",1,0,false,0,0);
  order1.setExtId(GeneralUtils.generateUUID());
  order2=new RestfulMockDefinitionOrder(restfulMock1,201,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",2,0,false,0,0);
  order2.setExtId(GeneralUtils.generateUUID());
  order3=new RestfulMockDefinitionOrder(restfulMock1,202,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",3,0,false,0,0);
  order3.setExtId(GeneralUtils.generateUUID());
  order4=new RestfulMockDefinitionOrder(restfulMock1,204,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",4,0,false,0,0);
  order4.setExtId(GeneralUtils.generateUUID());
  restfulMock1.getDefinitions().add(order1);
  restfulMock1.getDefinitions().add(order2);
  restfulMock1.getDefinitions().add(order3);
  restfulMock1.getDefinitions().add(order4);
  restfulMock2=new RestfulMock();
  restfulMock2.setExtId(GeneralUtils.generateUUID());
  order5=new RestfulMockDefinitionOrder(restfulMock2,400,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",1,0,false,0,0);
  order5.setExtId(GeneralUtils.generateUUID());
  order6=new RestfulMockDefinitionOrder(restfulMock2,500,MediaType.APPLICATION_JSON_VALUE,""String_Node_Str"",2,0,false,0,0);
  order6.setExtId(GeneralUtils.generateUUID());
  restfulMock2.getDefinitions().add(order5);
  restfulMock2.getDefinitions().add(order6);
}",0.8375599725839616
172557,"@Override public RestfulResponse waitForResponse(final RestfulMock mock){
  final long timeOut=(mock.getProxyTimeOutInMillis() > 0) ? mock.getProxyTimeOutInMillis() : Long.MAX_VALUE;
  try {
    while (true) {
      boolean foundOne=signal.tryAcquire(signalPermitCount,timeOut,TimeUnit.MILLISECONDS);
      if (!foundOne) {
        return null;
      }
      lock.acquire();
      final List<ProxiedDTO> responses=responsesQueueMap.get(new ProxiedKey(mock.getPath(),mock.getMethod()));
      if (responses == null || responses.isEmpty()) {
        lock.release();
        continue;
      }
 else {
        final ProxiedDTO proxiedResponse=responses.remove(0);
        lock.release();
        return new RestfulResponse(proxiedResponse.getHttpStatusCode(),proxiedResponse.getResponseContentType(),proxiedResponse.getBody(),new HashSet<Map.Entry<String,String>>());
      }
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"",ex);
  }
  return null;
}","@Override public RestfulResponse waitForResponse(final RestfulMock mock){
  final long timeOut=(mock.getProxyTimeOutInMillis() > 0) ? mock.getProxyTimeOutInMillis() : MAX_TIMEOUT_MILLIS;
  try {
    while (true) {
      boolean foundOne=signal.tryAcquire(SIGNAL_PERMIT_COUNT,timeOut,TimeUnit.MILLISECONDS);
      if (!foundOne) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + mock.getMethod() + ""String_Node_Str""+ mock.getPath()+ ""String_Node_Str"");
          logger.debug(""String_Node_Str"");
        }
        return lookUpResponse(mock);
      }
      final RestfulResponse restfulResponse=lookUpResponse(mock);
      if (restfulResponse == null) {
        continue;
      }
      return restfulResponse;
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"",ex);
  }
  return null;
}",0.4384909786768726
172558,"@Override public void addResponse(final ProxiedDTO dto){
  try {
    lock.acquire();
    final List<ProxiedDTO> responses=responsesQueueMap.getOrDefault(dto.getPath(),new ArrayList<ProxiedDTO>());
    responses.add(dto);
    responsesQueueMap.put(new ProxiedKey(dto.getPath(),dto.getMethod()),responses);
    lock.release();
    signal.release(signalPermitCount);
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"",ex);
  }
}","@Override public void addResponse(final ProxiedDTO dto){
  try {
    lock.acquire();
    final ProxiedKey key=new ProxiedKey(dto.getPath(),dto.getMethod());
    final List<ProxiedDTO> responses=synchronizedProxyResponsesMap.getOrDefault(key,new ArrayList<ProxiedDTO>());
    responses.add(dto);
    synchronizedProxyResponsesMap.put(key,responses);
    lock.release();
    if (logger.isDebugEnabled())     logger.debug(""String_Node_Str"" + dto.getPath() + ""String_Node_Str""+ responses.size());
    signal.release(SIGNAL_PERMIT_COUNT);
  }
 catch (  Throwable ex) {
    logger.error(""String_Node_Str"",ex);
  }
}",0.4041548630783758
172559,"/** 
 * Returns the request parameter value for the given name. Look up is case insensitive (as Java Spark handles request parameter look ups with case sensitivity. Unclear on what the standard is for this...)
 * @param request
 * @param pathVarName
 * @returns String
 */
public static String findPathVarIgnoreCase(final Request request,final String pathVarName){
  for (  Map.Entry<String,String> pv : request.params().entrySet()) {
    if (pv.getKey().equalsIgnoreCase(pathVarName)) {
      return pv.getValue();
    }
  }
  return null;
}","/** 
 * Returns the request parameter value for the given name. Look up is case insensitive (as Java Spark handles request parameter look ups with case sensitivity. Unclear on what the standard is for this...)
 * @param request
 * @param pathVarName
 * @returns String
 */
public static String findPathVarIgnoreCase(final Request request,final String pathVarName){
  for (  Map.Entry<String,String> pv : request.params().entrySet()) {
    if (pv.getKey().equalsIgnoreCase((pathVarName.startsWith(""String_Node_Str"")) ? pathVarName : (""String_Node_Str"" + pathVarName))) {
      return pv.getValue();
    }
  }
  return null;
}",0.9296740994854202
172560,"String processRequest(final RestfulMock mock,final Request req,final Response res){
  RestfulResponse outcome;
switch (mock.getMockType()) {
case RULE:
    outcome=ruleEngine.process(req,mock.getRules());
  break;
case PROXY:
outcome=proxyService.waitForResponse(mock);
break;
case SEQ:
default :
outcome=mockOrderingCounterService.getNextInSequence(mock);
break;
}
if (outcome == null) {
outcome=getDefault(mock);
}
res.status(outcome.getHttpStatusCode());
res.type(outcome.getResponseContentType());
for (Map.Entry<String,String> e : outcome.getHeaders().entrySet()) {
res.header(e.getKey(),e.getValue());
}
final String response=inboundParamMatchService.enrichWithInboundParamMatches(req,outcome.getResponseBody());
return StringUtils.defaultIfBlank(response,""String_Node_Str"");
}","String processRequest(final RestfulMock mock,final Request req,final Response res){
  RestfulResponse outcome;
switch (mock.getMockType()) {
case RULE:
    outcome=ruleEngine.process(req,mock.getRules());
  break;
case PROXY:
outcome=proxyService.waitForResponse(req.pathInfo(),mock);
break;
case SEQ:
default :
outcome=mockOrderingCounterService.getNextInSequence(mock);
break;
}
if (outcome == null) {
outcome=getDefault(mock);
}
res.status(outcome.getHttpStatusCode());
res.type(outcome.getResponseContentType());
for (Map.Entry<String,String> e : outcome.getHeaders().entrySet()) {
res.header(e.getKey(),e.getValue());
}
final String response=inboundParamMatchService.enrichWithInboundParamMatches(req,outcome.getResponseBody());
return StringUtils.defaultIfBlank(response,""String_Node_Str"");
}",0.9905123339658444
172561,RestfulResponse waitForResponse(final RestfulMock mock);,"RestfulResponse waitForResponse(final String requestPath,final RestfulMock mock);",0.8175182481751825
172562,"@Override public RestfulResponse waitForResponse(final RestfulMock mock){
  try {
    lock.lock();
    final List<ProxiedDTO> responses=synchronizedProxyResponsesMap.get(new ProxiedKey(mock.getPath(),mock.getMethod()));
    if (responses == null || responses.isEmpty()) {
      final long timeOut=(mock.getProxyTimeOutInMillis() > 0) ? mock.getProxyTimeOutInMillis() : MAX_TIMEOUT_MILLIS;
      if (!condition.await(timeOut,TimeUnit.MILLISECONDS)) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + mock.getMethod() + ""String_Node_Str""+ mock.getPath()+ ""String_Node_Str"");
        }
        return null;
      }
      return waitForResponse(mock);
    }
 else {
      final ProxiedDTO proxiedResponse=responses.remove(0);
      return new RestfulResponse(proxiedResponse.getHttpStatusCode(),proxiedResponse.getResponseContentType(),proxiedResponse.getBody(),new HashSet<Map.Entry<String,String>>());
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"",ex);
  }
 finally {
    lock.unlock();
  }
  return null;
}","@Override public RestfulResponse waitForResponse(final String requestPath,final RestfulMock mock){
  try {
    lock.lock();
    final List<ProxiedDTO> responses=synchronizedProxyResponsesMap.get(new ProxiedKey(requestPath,mock.getMethod()));
    if (responses == null || responses.isEmpty()) {
      final long timeOut=(mock.getProxyTimeOutInMillis() > 0) ? mock.getProxyTimeOutInMillis() : MAX_TIMEOUT_MILLIS;
      if (!condition.await(timeOut,TimeUnit.MILLISECONDS)) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + mock.getMethod() + ""String_Node_Str""+ requestPath+ ""String_Node_Str"");
        }
        return null;
      }
      return waitForResponse(requestPath,mock);
    }
 else {
      final ProxiedDTO proxiedResponse=responses.remove(0);
      return new RestfulResponse(proxiedResponse.getHttpStatusCode(),proxiedResponse.getResponseContentType(),proxiedResponse.getBody(),new HashSet<Map.Entry<String,String>>());
    }
  }
 catch (  InterruptedException ex) {
    logger.error(""String_Node_Str"",ex);
  }
 finally {
    lock.unlock();
  }
  return null;
}",0.9692519504359798
172563,"@SideOnly(Side.CLIENT) public static String translatePageText(int pageNumber){
  String langFile=Minecraft.getMinecraft().gameSettings.language;
  langFile=langFile.substring(0,langFile.indexOf(""String_Node_Str"")) + langFile.substring(langFile.indexOf(""String_Node_Str"")).toUpperCase();
  InputStream in=Geolosys.class.getResourceAsStream(""String_Node_Str"" + langFile + ""String_Node_Str"");
  try {
    for (    String s : IOUtils.readLines(in,""String_Node_Str"")) {
      if (s.indexOf(""String_Node_Str"") == -1) {
        continue;
      }
      if (s.substring(0,s.indexOf(""String_Node_Str"")).equals(""String_Node_Str"" + pageNumber + ""String_Node_Str"")) {
        return s.substring(s.indexOf(""String_Node_Str"") + 1);
      }
    }
  }
 catch (  IOException e) {
  }
  return ""String_Node_Str"" + pageNumber;
}","@SideOnly(Side.CLIENT) public static String translatePageText(int pageNumber){
  String langFile=Minecraft.getMinecraft().gameSettings.language;
  langFile=langFile.substring(0,langFile.indexOf(""String_Node_Str"")) + langFile.substring(langFile.indexOf(""String_Node_Str"")).toUpperCase();
  InputStream in=Geolosys.class.getResourceAsStream(""String_Node_Str"" + langFile + ""String_Node_Str"");
  if (in == null) {
    langFile=""String_Node_Str"";
    in=Geolosys.class.getResourceAsStream(""String_Node_Str"" + langFile + ""String_Node_Str"");
  }
  try {
    for (    String s : IOUtils.readLines(in,""String_Node_Str"")) {
      if (s.indexOf(""String_Node_Str"") == -1) {
        continue;
      }
      if (s.substring(0,s.indexOf(""String_Node_Str"")).equals(""String_Node_Str"" + pageNumber + ""String_Node_Str"")) {
        return s.substring(s.indexOf(""String_Node_Str"") + 1);
      }
    }
  }
 catch (  IOException e) {
  }
  return ""String_Node_Str"" + pageNumber;
}",0.9155807365439094
172564,"@SideOnly(Side.CLIENT) public static String translateTitle(int pageNumber){
  String langFile=Minecraft.getMinecraft().gameSettings.language;
  langFile=langFile.substring(0,langFile.indexOf(""String_Node_Str"")) + langFile.substring(langFile.indexOf(""String_Node_Str"")).toUpperCase();
  InputStream in=Geolosys.class.getResourceAsStream(""String_Node_Str"" + langFile + ""String_Node_Str"");
  try {
    for (    String s : IOUtils.readLines(in,""String_Node_Str"")) {
      if (s.indexOf(""String_Node_Str"") == -1) {
        continue;
      }
      if (s.substring(0,s.indexOf(""String_Node_Str"")).equals(""String_Node_Str"" + pageNumber + ""String_Node_Str"")) {
        return s.substring(s.indexOf(""String_Node_Str"") + 1);
      }
    }
  }
 catch (  IOException e) {
  }
  return ""String_Node_Str"" + pageNumber;
}","@SideOnly(Side.CLIENT) public static String translateTitle(int pageNumber){
  String langFile=Minecraft.getMinecraft().gameSettings.language;
  langFile=langFile.substring(0,langFile.indexOf(""String_Node_Str"")) + langFile.substring(langFile.indexOf(""String_Node_Str"")).toUpperCase();
  InputStream in=Geolosys.class.getResourceAsStream(""String_Node_Str"" + langFile + ""String_Node_Str"");
  if (in == null) {
    langFile=""String_Node_Str"";
    in=Geolosys.class.getResourceAsStream(""String_Node_Str"" + langFile + ""String_Node_Str"");
  }
  try {
    for (    String s : IOUtils.readLines(in,""String_Node_Str"")) {
      if (s.indexOf(""String_Node_Str"") == -1) {
        continue;
      }
      if (s.substring(0,s.indexOf(""String_Node_Str"")).equals(""String_Node_Str"" + pageNumber + ""String_Node_Str"")) {
        return s.substring(s.indexOf(""String_Node_Str"") + 1);
      }
    }
  }
 catch (  IOException e) {
  }
  return ""String_Node_Str"" + pageNumber;
}",0.91529277998863
172565,"private void returnToScanningStatus(){
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      setStatus(R.string.fingerprint_state_scanning,R.color.fingerprint_circle,R.color.fingerprint_auth_scanning,R.drawable.fingerprint);
    }
  }
,1200);
}","private void returnToScanningStatus(){
  handler.postDelayed(returnToScanning,1200);
}",0.4456824512534819
172566,"private void auth(){
  cancellationSignal=new CancellationSignal();
  if (fingerprintManager.isHardwareDetected()) {
    if (fingerprintManager.hasEnrolledFingerprints()) {
      fingerprintManager.authenticate(cryptoObject,cancellationSignal,0,new FingerprintManager.AuthenticationCallback(){
        @Override public void onAuthenticationError(        int errorCode,        CharSequence errString){
          super.onAuthenticationError(errorCode,errString);
          setStatus(errString.toString(),errorColor,errorColor,R.drawable.fingerprint_error);
          returnToScanningStatus();
        }
        @Override public void onAuthenticationHelp(        int helpCode,        CharSequence helpString){
          super.onAuthenticationHelp(helpCode,helpString);
          setStatus(helpString.toString(),errorColor,errorColor,R.drawable.fingerprint_error);
          returnToScanningStatus();
        }
        @Override public void onAuthenticationSucceeded(        FingerprintManager.AuthenticationResult result){
          super.onAuthenticationSucceeded(result);
          setStatus(R.string.fingerprint_state_success,successColor,successColor,R.drawable.fingerprint_success);
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              dialog.cancel();
              if (fingerprintCallback != null) {
                fingerprintCallback.onAuthenticationSuccess();
              }
            }
          }
,delayAfterSuccess);
          tryCounter=0;
        }
        @Override public void onAuthenticationFailed(){
          super.onAuthenticationFailed();
          setStatus(R.string.fingerprint_state_failure,errorColor,errorColor,R.drawable.fingerprint_error);
          returnToScanningStatus();
          tryCounter++;
          if (counterCallback != null && tryCounter == limit) {
            counterCallback.onTryLimitReached();
          }
        }
      }
,null);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}","private void auth(){
  cancellationSignal=new CancellationSignal();
  if (fingerprintManager.isHardwareDetected()) {
    if (fingerprintManager.hasEnrolledFingerprints()) {
      fingerprintManager.authenticate(cryptoObject,cancellationSignal,0,new FingerprintManager.AuthenticationCallback(){
        @Override public void onAuthenticationError(        int errorCode,        CharSequence errString){
          super.onAuthenticationError(errorCode,errString);
          setStatus(errString.toString(),errorColor,errorColor,R.drawable.fingerprint_error);
          returnToScanningStatus();
        }
        @Override public void onAuthenticationHelp(        int helpCode,        CharSequence helpString){
          super.onAuthenticationHelp(helpCode,helpString);
          setStatus(helpString.toString(),errorColor,errorColor,R.drawable.fingerprint_error);
          returnToScanningStatus();
        }
        @Override public void onAuthenticationSucceeded(        FingerprintManager.AuthenticationResult result){
          super.onAuthenticationSucceeded(result);
          handler.removeCallbacks(returnToScanning);
          setStatus(R.string.fingerprint_state_success,successColor,successColor,R.drawable.fingerprint_success);
          handler.postDelayed(new Runnable(){
            @Override public void run(){
              dialog.cancel();
              if (fingerprintCallback != null) {
                fingerprintCallback.onAuthenticationSuccess();
              }
            }
          }
,delayAfterSuccess);
          tryCounter=0;
        }
        @Override public void onAuthenticationFailed(){
          super.onAuthenticationFailed();
          setStatus(R.string.fingerprint_state_failure,errorColor,errorColor,R.drawable.fingerprint_error);
          returnToScanningStatus();
          tryCounter++;
          if (counterCallback != null && tryCounter == limit) {
            counterCallback.onTryLimitReached();
          }
        }
      }
,null);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}",0.9823287339627208
172567,"@Override public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result){
  super.onAuthenticationSucceeded(result);
  setStatus(R.string.fingerprint_state_success,successColor,successColor,R.drawable.fingerprint_success);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      dialog.cancel();
      if (fingerprintCallback != null) {
        fingerprintCallback.onAuthenticationSuccess();
      }
    }
  }
,delayAfterSuccess);
  tryCounter=0;
}","@Override public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result){
  super.onAuthenticationSucceeded(result);
  handler.removeCallbacks(returnToScanning);
  setStatus(R.string.fingerprint_state_success,successColor,successColor,R.drawable.fingerprint_success);
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      dialog.cancel();
      if (fingerprintCallback != null) {
        fingerprintCallback.onAuthenticationSuccess();
      }
    }
  }
,delayAfterSuccess);
  tryCounter=0;
}",0.9371980676328504
172568,"private void init(String KEY_NAME){
  this.keyStoreHelper=new KeyStoreHelper(KEY_NAME);
  this.layoutInflater=LayoutInflater.from(context);
  this.builder=new AlertDialog.Builder(context);
  this.fingerprintCallback=null;
  this.fingerprintSecureCallback=null;
  this.counterCallback=null;
  this.successColor=R.color.fingerprint_auth_success;
  this.errorColor=R.color.fingerprint_auth_failed;
  this.delayAfterSuccess=1200;
  this.cancelOnTouchOutside=false;
  this.cancelOnPressBack=false;
  this.dimBackground=true;
  this.enterAnimation=DialogAnimation.NO_ANIMATION;
  this.exitAnimation=DialogAnimation.NO_ANIMATION;
  this.cryptoObject=null;
  this.tryCounter=0;
}","private void init(String KEY_NAME){
  this.keyStoreHelper=new KeyStoreHelper(KEY_NAME);
  this.layoutInflater=LayoutInflater.from(context);
  this.builder=new AlertDialog.Builder(context);
  this.handler=new Handler();
  this.fingerprintCallback=null;
  this.fingerprintSecureCallback=null;
  this.counterCallback=null;
  this.successColor=R.color.fingerprint_auth_success;
  this.errorColor=R.color.fingerprint_auth_failed;
  this.delayAfterSuccess=1200;
  this.cancelOnTouchOutside=false;
  this.cancelOnPressBack=false;
  this.dimBackground=true;
  this.enterAnimation=DialogAnimation.NO_ANIMATION;
  this.exitAnimation=DialogAnimation.NO_ANIMATION;
  this.cryptoObject=null;
  this.tryCounter=0;
}",0.978134110787172
172569,"private void showDialog(){
  view=layoutInflater.inflate(R.layout.fingerprint_dialog,null);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_message)).setText(message);
  builder.setPositiveButton(R.string.fingerprint_cancel_button,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      cancellationSignal.cancel();
      if (fingerprintCallback != null) {
        fingerprintCallback.onAuthenticationCancel();
      }
    }
  }
);
  builder.setView(view);
  dialog=builder.create();
  if (dialog.getWindow() != null && (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION)) {
    int style=getStyle(enterAnimation,exitAnimation);
    if (style == -1) {
      Log.w(TAG,""String_Node_Str"");
    }
 else {
      dialog.getWindow().getAttributes().windowAnimations=style;
    }
    if (!darkBackground) {
      dialog.getWindow().setDimAmount(0.0f);
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.setCancelable(cancelOnPressBack);
  dialog.show();
  auth();
}","private void showDialog(){
  view=layoutInflater.inflate(R.layout.fingerprint_dialog,null);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_message)).setText(message);
  builder.setPositiveButton(R.string.fingerprint_cancel_button,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      cancellationSignal.cancel();
      if (fingerprintCallback != null) {
        fingerprintCallback.onAuthenticationCancel();
      }
    }
  }
);
  builder.setView(view);
  dialog=builder.create();
  if (dialog.getWindow() != null) {
    if (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION) {
      int style=getStyle(enterAnimation,exitAnimation);
      if (style == -1) {
        Log.w(TAG,""String_Node_Str"");
      }
 else {
        dialog.getWindow().getAttributes().windowAnimations=style;
      }
    }
    if (!darkBackground) {
      dialog.getWindow().setDimAmount(0.0f);
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.setCancelable(cancelOnPressBack);
  dialog.show();
  auth();
}",0.9862896315338476
172570,"public PasswordDialog show(){
  if (title == null || message == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  View view=inflater.inflate(R.layout.password_dialog,null);
  ((TextView)view.findViewById(R.id.password_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.password_dialog_message)).setText(message);
  final EditText input=view.findViewById(R.id.password_dialog_input);
  input.setInputType(passwordType);
  dialog=builder.setView(view).setPositiveButton(R.string.password_confirm,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
    }
  }
).setNegativeButton(R.string.password_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      if (callback != null) {
        callback.onPasswordCancel();
      }
    }
  }
).create();
  if (dialog.getWindow() != null && (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION)) {
    int style=FingerprintDialog.getStyle(enterAnimation,exitAnimation);
    if (style == -1) {
      Log.w(TAG,""String_Node_Str"");
    }
 else {
      dialog.getWindow().getAttributes().windowAnimations=style;
    }
    if (!darkBackground) {
      dialog.getWindow().setDimAmount(0.0f);
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.setCancelable(cancelOnPressBack);
  dialog.show();
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (callback != null) {
        String password=input.getText().toString();
        if (callback.onPasswordCheck(password)) {
          dialog.dismiss();
          token.continueAuthentication();
          tryCounter=0;
        }
 else {
          input.setError(context.getResources().getString(R.string.password_incorrect));
          tryCounter++;
          if (counterCallback != null && tryCounter == limit) {
            counterCallback.onTryLimitReached();
          }
        }
      }
    }
  }
);
  return this;
}","public PasswordDialog show(){
  if (title == null || message == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  View view=inflater.inflate(R.layout.password_dialog,null);
  ((TextView)view.findViewById(R.id.password_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.password_dialog_message)).setText(message);
  final EditText input=view.findViewById(R.id.password_dialog_input);
  input.setInputType(passwordType);
  dialog=builder.setView(view).setPositiveButton(R.string.password_confirm,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
    }
  }
).setNegativeButton(R.string.password_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      if (callback != null) {
        callback.onPasswordCancel();
      }
    }
  }
).create();
  if (dialog.getWindow() != null) {
    if (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION) {
      int style=FingerprintDialog.getStyle(enterAnimation,exitAnimation);
      if (style == -1) {
        Log.w(TAG,""String_Node_Str"");
      }
 else {
        dialog.getWindow().getAttributes().windowAnimations=style;
      }
    }
    if (!darkBackground) {
      dialog.getWindow().setDimAmount(0.0f);
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.setCancelable(cancelOnPressBack);
  dialog.show();
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (callback != null) {
        String password=input.getText().toString();
        if (callback.onPasswordCheck(password)) {
          dialog.dismiss();
          token.continueAuthentication();
          tryCounter=0;
        }
 else {
          input.setError(context.getResources().getString(R.string.password_incorrect));
          tryCounter++;
          if (counterCallback != null && tryCounter == limit) {
            counterCallback.onTryLimitReached();
          }
        }
      }
    }
  }
);
  return this;
}",0.9924634950541686
172571,"@Override public void onNewFingerprintEnrolled(FingerprintToken token){
  PasswordDialog.initialize(FingerprintSecureExample.this,token).title(R.string.password_title).message(R.string.password_message).callback(FingerprintSecureExample.this).passwordType(PasswordDialog.PASSWORD_TYPE_TEXT).show();
}","@Override public void onNewFingerprintEnrolled(FingerprintToken token){
  Log.e(""String_Node_Str"",""String_Node_Str"");
  PasswordDialog.initialize(FingerprintSecureExample.this,token).title(R.string.password_title).message(R.string.password_message).callback(FingerprintSecureExample.this).passwordType(PasswordDialog.PASSWORD_TYPE_TEXT).show();
}",0.9287925696594428
172572,"private int getStyle(){
switch (enterAnimation) {
case ENTER_FROM_BOTTOM:
switch (exitAnimation) {
case EXIT_TO_BOTTOM:
      return R.style.BottomBottomAnimation;
case EXIT_TO_TOP:
    return R.style.BottomTopAnimation;
case NO_ANIMATION:
  return R.style.EnterFromBottomAnimation;
}
break;
case ENTER_FROM_TOP:
switch (exitAnimation) {
case EXIT_TO_BOTTOM:
return R.style.TopBottomAnimation;
case EXIT_TO_TOP:
return R.style.TopTopAnimation;
case NO_ANIMATION:
return R.style.EnterFromTopAnimation;
}
break;
case ENTER_FROM_LEFT:
switch (exitAnimation) {
case EXIT_TO_LEFT:
return R.style.LeftLeftAnimation;
case EXIT_TO_RIGHT:
return R.style.LeftRightAnimation;
case NO_ANIMATION:
return R.style.EnterFromLeftAnimation;
}
break;
case ENTER_FROM_RIGHT:
switch (exitAnimation) {
case EXIT_TO_LEFT:
return R.style.RightLeftAnimation;
case EXIT_TO_RIGHT:
return R.style.RightRightAnimation;
case NO_ANIMATION:
return R.style.EnterFromRightAnimation;
}
break;
case NO_ANIMATION:
switch (exitAnimation) {
case EXIT_TO_BOTTOM:
return R.style.ExitToBottomAnimation;
case EXIT_TO_TOP:
return R.style.ExitToTopAnimation;
case EXIT_TO_LEFT:
return R.style.ExitToLeftAnimation;
case EXIT_TO_RIGHT:
return R.style.ExitToRightAnimation;
}
break;
}
return -1;
}","public static int getStyle(int enterAnimation,int exitAnimation){
switch (enterAnimation) {
case ENTER_FROM_BOTTOM:
switch (exitAnimation) {
case EXIT_TO_BOTTOM:
      return R.style.BottomBottomAnimation;
case EXIT_TO_TOP:
    return R.style.BottomTopAnimation;
case NO_ANIMATION:
  return R.style.EnterFromBottomAnimation;
}
break;
case ENTER_FROM_TOP:
switch (exitAnimation) {
case EXIT_TO_BOTTOM:
return R.style.TopBottomAnimation;
case EXIT_TO_TOP:
return R.style.TopTopAnimation;
case NO_ANIMATION:
return R.style.EnterFromTopAnimation;
}
break;
case ENTER_FROM_LEFT:
switch (exitAnimation) {
case EXIT_TO_LEFT:
return R.style.LeftLeftAnimation;
case EXIT_TO_RIGHT:
return R.style.LeftRightAnimation;
case NO_ANIMATION:
return R.style.EnterFromLeftAnimation;
}
break;
case ENTER_FROM_RIGHT:
switch (exitAnimation) {
case EXIT_TO_LEFT:
return R.style.RightLeftAnimation;
case EXIT_TO_RIGHT:
return R.style.RightRightAnimation;
case NO_ANIMATION:
return R.style.EnterFromRightAnimation;
}
break;
case NO_ANIMATION:
switch (exitAnimation) {
case EXIT_TO_BOTTOM:
return R.style.ExitToBottomAnimation;
case EXIT_TO_TOP:
return R.style.ExitToTopAnimation;
case EXIT_TO_LEFT:
return R.style.ExitToLeftAnimation;
case EXIT_TO_RIGHT:
return R.style.ExitToRightAnimation;
}
break;
}
return -1;
}",0.978740157480315
172573,"private void showDialog(){
  view=layoutInflater.inflate(R.layout.fingerprint_dialog,null);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_message)).setText(message);
  builder.setPositiveButton(R.string.fingerprint_cancel_button,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      cancellationSignal.cancel();
      if (fingerprintCallback != null) {
        fingerprintCallback.onCancelled();
      }
    }
  }
);
  builder.setView(view);
  dialog=builder.create();
  if (dialog.getWindow() != null && (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION)) {
    int style=getStyle();
    if (style == -1) {
      Log.e(TAG,""String_Node_Str"");
    }
 else {
      dialog.getWindow().getAttributes().windowAnimations=style;
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.show();
  auth();
}","private void showDialog(){
  view=layoutInflater.inflate(R.layout.fingerprint_dialog,null);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.fingerprint_dialog_message)).setText(message);
  builder.setPositiveButton(R.string.fingerprint_cancel_button,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      cancellationSignal.cancel();
      if (fingerprintCallback != null) {
        fingerprintCallback.onCancelled();
      }
    }
  }
);
  builder.setView(view);
  dialog=builder.create();
  if (dialog.getWindow() != null && (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION)) {
    int style=getStyle(enterAnimation,exitAnimation);
    if (style == -1) {
      Log.w(TAG,""String_Node_Str"");
    }
 else {
      dialog.getWindow().getAttributes().windowAnimations=style;
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.show();
  auth();
}",0.9851337958374627
172574,"private void init(String KEY_NAME){
  this.keyStoreHelper=new KeyStoreHelper(KEY_NAME);
  this.layoutInflater=LayoutInflater.from(context);
  this.builder=new AlertDialog.Builder(context);
  this.fingerprintCallback=null;
  this.fingerprintSecureCallback=null;
  this.successColor=R.color.auth_success;
  this.errorColor=R.color.auth_failed;
  this.delayAfterSuccess=1200;
  this.cancelOnTouchOutside=false;
  this.enterAnimation=ENTER_FROM_BOTTOM;
  this.exitAnimation=EXIT_TO_BOTTOM;
  this.cryptoObject=null;
}","private void init(String KEY_NAME){
  this.keyStoreHelper=new KeyStoreHelper(KEY_NAME);
  this.layoutInflater=LayoutInflater.from(context);
  this.builder=new AlertDialog.Builder(context);
  this.fingerprintCallback=null;
  this.fingerprintSecureCallback=null;
  this.successColor=R.color.auth_success;
  this.errorColor=R.color.auth_failed;
  this.delayAfterSuccess=1200;
  this.cancelOnTouchOutside=false;
  this.enterAnimation=NO_ANIMATION;
  this.exitAnimation=NO_ANIMATION;
  this.cryptoObject=null;
}",0.9106967615309126
172575,"private PasswordDialog(Context context,FingerprintToken token){
  this.context=context;
  this.token=token;
  this.inflater=LayoutInflater.from(context);
  this.builder=new AlertDialog.Builder(context);
  this.passwordType=PASSWORD_TYPE_TEXT;
  this.callback=null;
}","private PasswordDialog(Context context,FingerprintToken token){
  this.context=context;
  this.token=token;
  this.inflater=LayoutInflater.from(context);
  this.builder=new AlertDialog.Builder(context);
  this.passwordType=PASSWORD_TYPE_TEXT;
  this.enterAnimation=NO_ANIMATION;
  this.exitAnimation=NO_ANIMATION;
  this.cancelOnTouchOutside=false;
  this.callback=null;
}",0.8338557993730408
172576,"@Override public void onClick(DialogInterface dialogInterface,int i){
  if (callback != null) {
    callback.onCancel();
  }
}","@Override public void onClick(View v){
  if (callback != null) {
    String password=input.getText().toString();
    if (callback.onPasswordCheck(password)) {
      dialog.dismiss();
      token.continueAuthentication();
    }
 else {
      input.setError(context.getResources().getString(R.string.password_incorrect));
    }
  }
}",0.3676148796498906
172577,"public PasswordDialog show(){
  if (title == null || message == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  View view=inflater.inflate(R.layout.password_dialog,null);
  ((TextView)view.findViewById(R.id.password_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.password_dialog_message)).setText(message);
  final EditText input=view.findViewById(R.id.password_dialog_input);
  input.setInputType(passwordType);
  builder.setView(view).setPositiveButton(R.string.password_confirm,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      if (callback != null) {
        String password=input.getText().toString();
        if (callback.onPasswordCheck(password)) {
          dialogInterface.cancel();
          token.continueAuthentication();
        }
 else {
          callback.onPasswordWrong();
        }
      }
    }
  }
).setNegativeButton(R.string.password_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      if (callback != null) {
        callback.onCancel();
      }
    }
  }
).setCancelable(false).show();
  return this;
}","public PasswordDialog show(){
  if (title == null || message == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  View view=inflater.inflate(R.layout.password_dialog,null);
  ((TextView)view.findViewById(R.id.password_dialog_title)).setText(title);
  ((TextView)view.findViewById(R.id.password_dialog_message)).setText(message);
  final EditText input=view.findViewById(R.id.password_dialog_input);
  input.setInputType(passwordType);
  dialog=builder.setView(view).setPositiveButton(R.string.password_confirm,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
    }
  }
).setNegativeButton(R.string.password_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      if (callback != null) {
        callback.onCancel();
      }
    }
  }
).create();
  if (dialog.getWindow() != null && (enterAnimation != NO_ANIMATION || exitAnimation != NO_ANIMATION)) {
    int style=FingerprintDialog.getStyle(enterAnimation,exitAnimation);
    if (style == -1) {
      Log.w(TAG,""String_Node_Str"");
    }
 else {
      dialog.getWindow().getAttributes().windowAnimations=style;
    }
  }
  dialog.setCanceledOnTouchOutside(cancelOnTouchOutside);
  dialog.show();
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (callback != null) {
        String password=input.getText().toString();
        if (callback.onPasswordCheck(password)) {
          dialog.dismiss();
          token.continueAuthentication();
        }
 else {
          input.setError(context.getResources().getString(R.string.password_incorrect));
        }
      }
    }
  }
);
  return this;
}",0.6055408970976254
172578,"@SuppressWarnings(""String_Node_Str"") public boolean removeFilter(FilterDescriptorBase removeFilter){
  if (filters == null) {
    filters=new FilterDescriptorBase[]{};
  }
  List<FilterDescriptorBase> filtersCopy=new ArrayList<>(Arrays.asList(filters));
  boolean result=filtersCopy.remove(removeFilter);
  this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  return result;
}","@SuppressWarnings(""String_Node_Str"") public boolean removeFilter(FilterDescriptorBase removeFilter){
  List<FilterDescriptorBase> filtersCopy=filters == null ? new ArrayList<>() : new ArrayList<>(Arrays.asList(filters));
  boolean result=filtersCopy.remove(removeFilter);
  this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  return result;
}",0.7898089171974523
172579,"@SuppressWarnings(""String_Node_Str"") public boolean addFilters(FilterDescriptorBase... newFilters){
  if (filters == null) {
    filters=new FilterDescriptorBase[]{};
  }
  List<FilterDescriptorBase> filtersCopy=new ArrayList<>(Arrays.asList(filters));
  List<FilterDescriptorBase> newFilterList=Arrays.asList(newFilters);
  boolean result=filtersCopy.addAll(newFilterList);
  this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  return result;
}","@SuppressWarnings(""String_Node_Str"") public boolean addFilters(FilterDescriptorBase... newFilters){
  List<FilterDescriptorBase> filtersCopy=filters == null ? new ArrayList<>() : new ArrayList<>(Arrays.asList(filters));
  List<FilterDescriptorBase> newFilterList=Arrays.asList(newFilters);
  boolean result=filtersCopy.addAll(newFilterList);
  this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  return result;
}",0.8302702702702702
172580,"public boolean removeSort(SortDescriptor sort){
  if (sorts == null) {
    sorts=new SortDescriptor[]{};
  }
  List<SortDescriptor> sortsCopy=new ArrayList<>(Arrays.asList(sorts));
  boolean result=sortsCopy.remove(sort);
  if (result) {
    this.setSorts(sortsCopy.toArray(new SortDescriptor[sortsCopy.size()]));
  }
  return result;
}","public boolean removeSort(SortDescriptor sort){
  List<SortDescriptor> sortsCopy=sorts == null ? new ArrayList<>() : new ArrayList<>(Arrays.asList(sorts));
  boolean result=sortsCopy.remove(sort);
  if (result) {
    this.setSorts(sortsCopy.toArray(new SortDescriptor[sortsCopy.size()]));
  }
  return result;
}",0.7820710973724884
172581,"public boolean addSorts(SortDescriptor... newFilters){
  if (sorts == null) {
    sorts=new SortDescriptor[]{};
  }
  List<SortDescriptor> sortsCopy=new ArrayList<>(Arrays.asList(sorts));
  List<SortDescriptor> newSortLists=Arrays.asList(newFilters);
  boolean result=sortsCopy.addAll(newSortLists);
  if (result) {
    this.setSorts(sortsCopy.toArray(new SortDescriptor[sortsCopy.size()]));
  }
  return result;
}","public boolean addSorts(SortDescriptor... newFilters){
  List<SortDescriptor> sortsCopy=sorts == null ? new ArrayList<>() : new ArrayList<>(Arrays.asList(sorts));
  List<SortDescriptor> newSortLists=Arrays.asList(newFilters);
  boolean result=sortsCopy.addAll(newSortLists);
  if (result) {
    this.setSorts(sortsCopy.toArray(new SortDescriptor[sortsCopy.size()]));
  }
  return result;
}",0.8667496886674969
172582,"@SuppressWarnings(""String_Node_Str"") public boolean addFilters(FilterDescriptorBase... newFilters){
  if (filters == null) {
    filters=new FilterDescriptorBase[]{};
  }
  List<FilterDescriptorBase> filtersCopy=new ArrayList<>(Arrays.asList(filters));
  List<FilterDescriptorBase> newFilterList=Arrays.asList(newFilters);
  boolean result=filtersCopy.addAll(newFilterList);
  if (result) {
    this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  }
  return result;
}","@SuppressWarnings(""String_Node_Str"") public boolean addFilters(FilterDescriptorBase... newFilters){
  List<FilterDescriptorBase> filtersCopy=filters == null ? new ArrayList<>() : new ArrayList<>(Arrays.asList(filters));
  List<FilterDescriptorBase> newFilterList=Arrays.asList(newFilters);
  boolean result=filtersCopy.addAll(newFilterList);
  if (result) {
    this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  }
  return result;
}",0.8379772961816305
172583,"@SuppressWarnings(""String_Node_Str"") public boolean removeFilter(FilterDescriptorBase removeFilter){
  if (filters == null) {
    filters=new FilterDescriptorBase[]{};
  }
  List<FilterDescriptorBase> filtersCopy=new ArrayList<>(Arrays.asList(filters));
  boolean result=filtersCopy.remove(removeFilter);
  if (result) {
    this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  }
  return result;
}","@SuppressWarnings(""String_Node_Str"") public boolean removeFilter(FilterDescriptorBase removeFilter){
  List<FilterDescriptorBase> filtersCopy=filters == null ? new ArrayList<>() : new ArrayList<>(Arrays.asList(filters));
  boolean result=filtersCopy.remove(removeFilter);
  if (result) {
    this.setFilters(filtersCopy.toArray(new FilterDescriptorBase[filtersCopy.size()]));
  }
  return result;
}",0.8009650180940893
172584,"@Test public void multiFilterDemo() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  FilterDescriptor priceFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,15);
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter,priceFilter);
  Product productView=northwindDao.getProductByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(Integer.valueOf(2),productView.getProductID());
}","@Test public void multiFilterDemo() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  FilterDescriptor priceFilter=new FilterDescriptor(""String_Node_Str"",FilterOperator.LESS_THAN,15);
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter,priceFilter);
  Product productView=northwindDao.getProductByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(Integer.valueOf(2),productView.getProductID());
}",0.965576592082616
172585,"public Object[] getParams(){
  return params.toArray();
}","public Object[] getParams(){
  return params;
}",0.903846153846154
172586,"@DeleteProvider(type=DynamicQueryProvider.class,method=""String_Node_Str"") int deleteByDynamicQuery(@Param(MapperConstants.DYNAMIC_QUERY) DynamicQuery dynamicQuery);","@DeleteProvider(type=DynamicQueryProvider.class,method=""String_Node_Str"") int deleteByDynamicQuery(@Param(MapperConstants.DYNAMIC_QUERY) DynamicQuery<T> dynamicQuery);",0.9909365558912386
172587,"@Test public void testIn() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.IN,new int[]{2,4});
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",idFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(Long.valueOf(2),productViews.get(0).getProductID());
  assertEquals(Long.valueOf(4),productViews.get(1).getProductID());
}","@Test public void testIn() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.IN,new int[]{2,4});
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",idFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(Long.valueOf(2),productViews.get(0).getProductID());
  assertEquals(Long.valueOf(4),productViews.get(1).getProductID());
}",0.9980506822612084
172588,"@Test public void multiFilterDemo() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  FilterDescriptor priceFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,15);
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter,priceFilter);
  Product productView=northwindDao.getProductByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(Integer.valueOf(2),productView.getProductID());
}","@Test public void multiFilterDemo() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  FilterDescriptor priceFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,15);
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter,priceFilter);
  Product productView=northwindDao.getProductByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(Integer.valueOf(2),productView.getProductID());
}",0.9983361064891848
172589,"@Test public void testEndWith() throws Exception {
  FilterDescriptor nameFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.END_WITH,""String_Node_Str"");
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",nameFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(""String_Node_Str"",productViews.get(0).getCategoryName());
}","@Test public void testEndWith() throws Exception {
  FilterDescriptor nameFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.END_WITH,""String_Node_Str"");
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",nameFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(""String_Node_Str"",productViews.get(0).getCategoryName());
}",0.997863247863248
172590,"@Test public void testGroupFilter() throws Exception {
  FilterGroupDescriptor groupIdFilter=new FilterGroupDescriptor();
  FilterDescriptor idFilter1=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN,""String_Node_Str"");
  FilterDescriptor idFilter2=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,""String_Node_Str"");
  groupIdFilter.addFilters(idFilter1,idFilter2);
  FilterDescriptor priceFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN,10);
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",groupIdFilter,priceFilter);
  northwindDao.getProductByDynamic(queryParams);
}","@Test public void testGroupFilter() throws Exception {
  FilterGroupDescriptor groupIdFilter=new FilterGroupDescriptor();
  FilterDescriptor idFilter1=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN,""String_Node_Str"");
  FilterDescriptor idFilter2=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,""String_Node_Str"");
  groupIdFilter.addFilters(idFilter1,idFilter2);
  FilterDescriptor priceFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN,10);
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",groupIdFilter,priceFilter);
  northwindDao.getProductByDynamic(queryParams);
}",0.9986648865153538
172591,"@Test public void testEqualNull() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.EQUAL,null);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  ProductView productView=northwindDao.getProductViewsByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(null,productView);
}","@Test public void testEqualNull() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.EQUAL,null);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  ProductView productView=northwindDao.getProductViewsByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(null,productView);
}",0.9983079526226736
172592,"@Test public void testLessThan() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,3);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() < 3));
}","@Test public void testLessThan() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN,3);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() < 3));
}",0.9983606557377048
172593,"@Test public void testNotEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_EQUAL,2);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().noneMatch(x -> x.getProductID() == 2));
}","@Test public void testNotEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_EQUAL,2);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().noneMatch(x -> x.getProductID() == 2));
}",0.9983660130718954
172594,"@Test public void testNotIn() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_IN,new int[]{2,4});
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",idFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(Long.valueOf(1),productViews.get(0).getProductID());
  assertEquals(Long.valueOf(3),productViews.get(1).getProductID());
}","@Test public void testNotIn() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_IN,new int[]{2,4});
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",idFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(Long.valueOf(1),productViews.get(0).getProductID());
  assertEquals(Long.valueOf(3),productViews.get(1).getProductID());
}",0.9980769230769232
172595,"@Test public void simpleDemo() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter);
  northwindDao.getProductByDynamic(queryParams);
}","@Test public void simpleDemo() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter);
  northwindDao.getProductByDynamic(queryParams);
}",0.9971181556195964
172596,"@Test public void testNotEqualNull() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_EQUAL,null);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().noneMatch(x -> x.getProductID() == null));
}","@Test public void testNotEqualNull() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_EQUAL,null);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().noneMatch(x -> x.getProductID() == null));
}",0.9983922829581994
172597,"@Test public void testSort() throws Exception {
  SortDescriptor priceSort=new SortDescriptor(""String_Node_Str"",SortDirection.DESC);
  Map<String,Object> queryParams=mybatisQueryProvider.getSortQueryParamMap(Product.class,""String_Node_Str"",priceSort);
  northwindDao.getProductByDynamic(queryParams);
}","@Test public void testSort() throws Exception {
  SortDescriptor priceSort=new SortDescriptor(""String_Node_Str"",SortDirection.DESC);
  Map<String,Object> queryParams=MybatisQueryProvider.getSortQueryParamMap(Product.class,""String_Node_Str"",priceSort);
  northwindDao.getProductByDynamic(queryParams);
}",0.9966887417218544
172598,"@Test public void testFilterSort() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_EQUAL,4);
  SortDescriptor priceSort=new SortDescriptor(""String_Node_Str"",SortDirection.ASC);
  Map<String,Object> filterParams=mybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter);
  Map<String,Object> sortParams=mybatisQueryProvider.getSortQueryParamMap(Product.class,""String_Node_Str"",priceSort);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(filterParams);
  queryParams.putAll(sortParams);
  northwindDao.getProductByDynamic(queryParams);
}","@Test public void testFilterSort() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.NOT_EQUAL,4);
  SortDescriptor priceSort=new SortDescriptor(""String_Node_Str"",SortDirection.ASC);
  Map<String,Object> filterParams=MybatisQueryProvider.getWhereQueryParamMap(Product.class,""String_Node_Str"",idFilter);
  Map<String,Object> sortParams=MybatisQueryProvider.getSortQueryParamMap(Product.class,""String_Node_Str"",priceSort);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(filterParams);
  queryParams.putAll(sortParams);
  northwindDao.getProductByDynamic(queryParams);
}",0.9969788519637462
172599,"@Test public void testStartWith() throws Exception {
  FilterDescriptor nameFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.START_WITH,""String_Node_Str"");
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",nameFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(""String_Node_Str"",productViews.get(0).getCategoryName());
}","@Test public void testStartWith() throws Exception {
  FilterDescriptor nameFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.START_WITH,""String_Node_Str"");
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",nameFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(""String_Node_Str"",productViews.get(0).getCategoryName());
}",0.9978813559322034
172600,"@Test public void testLessThanOrEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN_OR_EQUAL,3);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() <= 3));
}","@Test public void testLessThanOrEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.LESS_THAN_OR_EQUAL,3);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() <= 3));
}",0.9984051036682616
172601,"@Test public void testBetween() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.BETWEEN,new int[]{2,4});
  Map<String,Object> queryParams=mybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",idFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams).stream().sorted(Comparator.comparing(ProductView::getProductID)).collect(Collectors.toList());
  assertEquals(Long.valueOf(2),productViews.get(0).getProductID());
  assertEquals(Long.valueOf(3),productViews.get(1).getProductID());
  assertEquals(Long.valueOf(4),productViews.get(2).getProductID());
}","@Test public void testBetween() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.BETWEEN,new int[]{2,4});
  Map<String,Object> queryParams=MybatisQueryProvider.getWhereQueryParamMap(ProductView.class,""String_Node_Str"",idFilter);
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams).stream().sorted(Comparator.comparing(ProductView::getProductID)).collect(Collectors.toList());
  assertEquals(Long.valueOf(2),productViews.get(0).getProductID());
  assertEquals(Long.valueOf(3),productViews.get(1).getProductID());
  assertEquals(Long.valueOf(4),productViews.get(2).getProductID());
}",0.9985401459854014
172602,"@Test public void testEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.EQUAL,2);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  ProductView productView=northwindDao.getProductViewsByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(Long.valueOf(2),productView.getProductID());
}","@Test public void testEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.EQUAL,2);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  ProductView productView=northwindDao.getProductViewsByDynamic(queryParams).stream().findFirst().orElse(null);
  assertEquals(Long.valueOf(2),productView.getProductID());
}",0.9983606557377048
172603,"@Test public void testGreaterThan() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN,2);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() > 2));
}","@Test public void testGreaterThan() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN,2);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() > 2));
}",0.9983766233766234
172604,"@Test public void testMultiSort() throws Exception {
  SortDescriptor priceSort=new SortDescriptor(""String_Node_Str"",SortDirection.DESC);
  SortDescriptor idSort=new SortDescriptor(""String_Node_Str"",SortDirection.DESC);
  Map<String,Object> queryParams=mybatisQueryProvider.getSortQueryParamMap(Product.class,""String_Node_Str"",priceSort,idSort);
  northwindDao.getProductByDynamic(queryParams);
}","@Test public void testMultiSort() throws Exception {
  SortDescriptor priceSort=new SortDescriptor(""String_Node_Str"",SortDirection.DESC);
  SortDescriptor idSort=new SortDescriptor(""String_Node_Str"",SortDirection.DESC);
  Map<String,Object> queryParams=MybatisQueryProvider.getSortQueryParamMap(Product.class,""String_Node_Str"",priceSort,idSort);
  northwindDao.getProductByDynamic(queryParams);
}",0.9974747474747476
172605,"@Test public void testGreaterThanOrEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  ParamExpression paramExpression=mybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() >= 2));
}","@Test public void testGreaterThanOrEqual() throws Exception {
  FilterDescriptor idFilter=new FilterDescriptor(FilterCondition.AND,""String_Node_Str"",FilterOperator.GREATER_THAN_OR_EQUAL,2);
  ParamExpression paramExpression=MybatisQueryProvider.getWhereExpression(ProductView.class,idFilter);
  Map<String,Object> queryParams=new HashMap<>();
  queryParams.putAll(paramExpression.getParamMap());
  queryParams.put(""String_Node_Str"",paramExpression.getExpression());
  List<ProductView> productViews=northwindDao.getProductViewsByDynamic(queryParams);
  assertEquals(true,productViews.stream().allMatch(x -> x.getProductID() >= 2));
}",0.9984202211690364
172606,"@Test public void TestGetQueryColumn(){
  ColumnInfo result=EntityCache.getInstance().getColumnInfo(Student.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getQueryColumn());
  result=EntityCache.getInstance().getColumnInfo(Student.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getQueryColumn());
}","@Test public void TestGetQueryColumn(){
  ColumnInfo result=EntityCache.getInstance().getColumnInfo(Student.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getQueryColumn());
  result=EntityCache.getInstance().getColumnInfo(Student.class,""String_Node_Str"");
  assertEquals(""String_Node_Str"",result.getQueryColumn());
  assertEquals(""String_Node_Str"",result.getTableOrAlias());
}",0.918032786885246
172607,"public <T>FilterDescriptor(FilterCondition condition,Class<T> entityClass,Function<T,Object> getFieldFunc,FilterOperator operator,Object value){
  this.setCondition(condition);
  this.operator=operator;
  this.propertyPath=CommonsHelper.getPropertryName(entityClass,getFieldFunc);
  this.value=value;
}","public <T>FilterDescriptor(FilterCondition condition,Class<T> entityClass,Function<T,Object> getFieldFunc,FilterOperator operator,Object value){
  this.setCondition(condition);
  this.operator=operator;
  this.propertyPath=CommonsHelper.getPropertyName(entityClass,getFieldFunc);
  this.value=value;
}",0.9983416252072967
172608,"public <T>SortDescriptor(Class<T> entityClass,Function<T,Object> getFieldFunc,SortDirection sortDirection){
  this.propertyPath=CommonsHelper.getPropertryName(entityClass,getFieldFunc);
  this.sortDirection=sortDirection;
}","public <T>SortDescriptor(Class<T> entityClass,Function<T,Object> getFieldFunc,SortDirection sortDirection){
  this.propertyPath=CommonsHelper.getPropertyName(entityClass,getFieldFunc);
  this.sortDirection=sortDirection;
}",0.997752808988764
172609,"public static <T>String obtainGetMethodName(final Class<T> target,final Function<T,Object> getMethodFunc){
  Methref<T> methodRef=Methref.on(target);
  getMethodFunc.apply(methodRef.to());
  return methodRef.ref();
}","public static synchronized <T>String obtainGetMethodName(final Class<T> target,final Function<T,Object> getMethodFunc){
  Methref<T> methodRef=Methref.on(target);
  getMethodFunc.apply(methodRef.to());
  return methodRef.ref();
}",0.9707865168539326
172610,"@Test public void testGetPropertyName(){
  String result=CommonsHelper.getPropertryName(Student.class,Student::getAge);
  assertEquals(""String_Node_Str"",result);
}","@Test public void testGetPropertyName(){
  String result=CommonsHelper.getPropertyName(Student.class,Student::getAge);
  assertEquals(""String_Node_Str"",result);
}",0.9969230769230768
172611,"@Test public void testObtainGetMethodName(){
  String result=CommonsHelper.obtainGetMethodName(Student.class,Student::getAge);
  assertEquals(""String_Node_Str"",result);
  result=CommonsHelper.obtainGetMethodName(Student.class,(o) -> o.getName());
  assertEquals(""String_Node_Str"",result);
}","@Test public void testObtainGetMethodName(){
  int[] servers=new int[]{1,2,3,4,5,6,7,8,9,10};
  Arrays.stream(servers).parallel().forEach((a) -> {
    String result=CommonsHelper.obtainGetMethodName(Student.class,Student::getAge);
    assertEquals(""String_Node_Str"",result);
    result=CommonsHelper.obtainGetMethodName(Student.class,(o) -> o.getName());
    assertEquals(""String_Node_Str"",result);
    result=CommonsHelper.obtainGetMethodName(Student.class,(o) -> o.getNote());
    assertEquals(""String_Node_Str"",result);
  }
);
}",0.7064555420219245
172612,"/** 
 * Add filters boolean.
 * @param newFilters the new filters
 * @return the boolean
 */
public boolean addFilters(Collection<FilterDescriptorBase> newFilters){
  if (newFilters == null) {
    return false;
  }
  return filters.addAll(newFilters);
}","/** 
 * Add filters boolean.
 * @param newFilters the new filters
 * @return the boolean
 */
public boolean addFilters(final FilterDescriptorBase... newFilters){
  return filters.addAll(Arrays.asList(newFilters));
}",0.6495726495726496
172613,"private synchronized Map<String,DbColumnInfo> getPropertyDbColumnInfoMap(Class entityClass){
  if (entityClass == null) {
    throw new NullPointerException(ParamConstants.ENTITY_CLASS);
  }
  Map<String,DbColumnInfo> propertyDbColumnMap;
  if (dbColumnInfoCacheMap.containsKey(entityClass)) {
    propertyDbColumnMap=dbColumnInfoCacheMap.get(entityClass);
  }
 else {
    Map<String,DbColumnInfo> map=new HashMap<>();
    Field[] properties=ReflectHelper.getProperties(entityClass);
    for (    Field field : properties) {
      field.setAccessible(true);
      DbColumnInfo dbColumnInfo=new DbColumnInfo();
      dbColumnInfo.setField(field);
      String pName=field.getName();
      boolean updateIfNull=EntityHelper.isPropertyUpdateIfNull(pName,properties);
      String dbColumnName=EntityHelper.getDBColumnNameByProperty(pName,properties);
      dbColumnInfo.setUpdateIfNull(updateIfNull);
      dbColumnInfo.setDbColumnName(dbColumnName);
      map.put(pName,dbColumnInfo);
    }
    dbColumnInfoCacheMap.put(entityClass,map);
    propertyDbColumnMap=map;
  }
  return propertyDbColumnMap;
}","private synchronized Map<String,DbColumnInfo> getPropertyDbColumnInfoMap(Class entityClass){
  if (entityClass == null) {
    throw new NullPointerException(ENTITY_CLASS);
  }
  Map<String,DbColumnInfo> propertyDbColumnMap;
  if (dbColumnInfoCacheMap.containsKey(entityClass)) {
    propertyDbColumnMap=dbColumnInfoCacheMap.get(entityClass);
  }
 else {
    Map<String,DbColumnInfo> map=new HashMap<>();
    Field[] properties=ReflectHelper.getProperties(entityClass);
    for (    Field field : properties) {
      field.setAccessible(true);
      DbColumnInfo dbColumnInfo=new DbColumnInfo();
      dbColumnInfo.setField(field);
      String pName=field.getName();
      boolean updateIfNull=EntityHelper.isPropertyUpdateIfNull(pName,properties);
      String dbColumnName=EntityHelper.getDBColumnNameByProperty(pName,properties);
      dbColumnInfo.setUpdateIfNull(updateIfNull);
      dbColumnInfo.setDbColumnName(dbColumnName);
      map.put(pName,dbColumnInfo);
    }
    dbColumnInfoCacheMap.put(entityClass,map);
    propertyDbColumnMap=map;
  }
  return propertyDbColumnMap;
}",0.9931350114416476
172614,"synchronized String[] getPropertyNames(final Class entityClass){
  if (entityClass == null) {
    throw new NullPointerException(ParamConstants.ENTITY_CLASS);
  }
  if (propertyNameCacheMap.containsKey(entityClass)) {
    return propertyNameCacheMap.get(entityClass);
  }
 else {
    Field[] fields=ReflectHelper.getProperties(entityClass);
    Collection<String> propertyNames=new ArrayList<>();
    for (    Field field : fields) {
      propertyNames.add(field.getName());
    }
    String[] fieldArray=propertyNames.toArray(new String[propertyNames.size()]);
    propertyNameCacheMap.put(entityClass,fieldArray);
    return fieldArray;
  }
}","synchronized String[] getPropertyNames(final Class entityClass){
  if (entityClass == null) {
    throw new NullPointerException(ENTITY_CLASS);
  }
  if (propertyNameCacheMap.containsKey(entityClass)) {
    return propertyNameCacheMap.get(entityClass);
  }
 else {
    Field[] fields=ReflectHelper.getProperties(entityClass);
    Collection<String> propertyNames=new ArrayList<>();
    for (    Field field : fields) {
      propertyNames.add(field.getName());
    }
    String[] fieldArray=propertyNames.toArray(new String[propertyNames.size()]);
    propertyNameCacheMap.put(entityClass,fieldArray);
    return fieldArray;
  }
}",0.9882352941176472
172615,"synchronized QueryColumnInfo getQueryColumnInfo(Class entityClass,String propertyName){
  if (entityClass == null) {
    throw new NullPointerException(ParamConstants.ENTITY_CLASS);
  }
  if (propertyName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Map<String,QueryColumnInfo> propertyQueryColumnMap;
  if (queryColumnInfoCacheMap.containsKey(entityClass)) {
    propertyQueryColumnMap=queryColumnInfoCacheMap.get(entityClass);
  }
 else {
    Field[] properties=ReflectHelper.getProperties(entityClass);
    Map<String,QueryColumnInfo> map=new HashMap<>();
    for (    Field p : properties) {
      String pName=p.getName();
      String queryColumn=EntityHelper.getQueryColumnByProperty(pName,properties);
      QueryColumnInfo queryColumnInfo=new QueryColumnInfo();
      queryColumnInfo.setQueryColumn(queryColumn);
      queryColumnInfo.setField(p);
      map.put(pName,queryColumnInfo);
    }
    queryColumnInfoCacheMap.put(entityClass,map);
    propertyQueryColumnMap=map;
  }
  if (!propertyQueryColumnMap.containsKey(propertyName)) {
    throw new PropertyNotFoundInternalException(String.format(""String_Node_Str"",propertyName));
  }
  return propertyQueryColumnMap.get(propertyName);
}","synchronized QueryColumnInfo getQueryColumnInfo(Class entityClass,String propertyName){
  if (entityClass == null) {
    throw new NullPointerException(ENTITY_CLASS);
  }
  if (propertyName == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Map<String,QueryColumnInfo> propertyQueryColumnMap;
  if (queryColumnInfoCacheMap.containsKey(entityClass)) {
    propertyQueryColumnMap=queryColumnInfoCacheMap.get(entityClass);
  }
 else {
    Field[] properties=ReflectHelper.getProperties(entityClass);
    Map<String,QueryColumnInfo> map=new HashMap<>();
    for (    Field p : properties) {
      String pName=p.getName();
      String queryColumn=EntityHelper.getQueryColumnByProperty(pName,properties);
      QueryColumnInfo queryColumnInfo=new QueryColumnInfo();
      queryColumnInfo.setQueryColumn(queryColumn);
      queryColumnInfo.setField(p);
      map.put(pName,queryColumnInfo);
    }
    queryColumnInfoCacheMap.put(entityClass,map);
    propertyQueryColumnMap=map;
  }
  if (!propertyQueryColumnMap.containsKey(propertyName)) {
    throw new PropertyNotFoundInternalException(String.format(""String_Node_Str"",propertyName));
  }
  return propertyQueryColumnMap.get(propertyName);
}",0.9938398357289528
172616,"public ConfigurationBuilder loadConfiguration() throws Exception {
  flowMaps.clear();
  Map<String,Flow> flows=flowFileTranslator.getNodes();
  flowMaps.putAll(flows);
  Map<String,Node> externalRules=ruleSetTranslator.getNodes();
  Collection<Flow> fvalues=flowMaps.values();
  for (  Flow flow : fvalues) {
    if (flow.getNodes() == null || flow.getNodes().isEmpty()) {
      continue;
    }
    mergeRulesFromExternal(flow,externalRules);
  }
  return builder;
}","public ConfigurationBuilder loadConfiguration() throws Exception {
  flowMaps.clear();
  Map<String,Flow> flows=flowFileTranslator.getNodes();
  flowMaps.putAll(flows);
  Collection<Flow> fvalues=flowMaps.values();
  for (  Flow flow : fvalues) {
    if (flow.getNodes() == null || flow.getNodes().isEmpty()) {
      continue;
    }
    flow.nodeList2NodeMap();
    Map<String,Node> externalRules=ruleSetTranslator.getNodes();
    logger.debug(""String_Node_Str"" + flow.getId() + ""String_Node_Str"");
    mergeRulesFromExternal(flow,externalRules);
  }
  return builder;
}",0.7791706846673095
172617,"private void mergeRulesFromExternal(Flow flow,Map<String,Node> externalRules){
  Map<String,Node> flowMapNodes=flow.getNodeMap();
  Iterator<String> ite=flowMapNodes.keySet().iterator();
  while (ite.hasNext()) {
    String key=ite.next();
    Node fNode=flowMapNodes.get(key);
    if (fNode.isExternal()) {
      Node rule=externalRules.get(key);
      if (rule != null) {
        rule.setFromNodeId(fNode.getFromNodeId());
        rule.setToNodeId(fNode.getToNodeId());
        flowMapNodes.put(key,rule);
      }
    }
  }
  flow.setNodeMap(flowMapNodes);
}","private void mergeRulesFromExternal(Flow flow,Map<String,Node> externalRules){
  Map<String,Node> flowMapNodes=flow.getNodeMap();
  Iterator<String> ite=flowMapNodes.keySet().iterator();
  while (ite.hasNext()) {
    String key=ite.next();
    Node fNode=flowMapNodes.get(key);
    if (fNode.isExternal()) {
      Node rule=externalRules.get(key);
      if (rule != null) {
        rule.setFromNodeId(fNode.getFromNodeId());
        rule.setToNodeId(fNode.getToNodeId());
        flowMapNodes.put(key,rule);
      }
    }
  }
}",0.969641214351426
172618,"private void runFlowNode(Event event,String nodeId) throws Exception {
  if (StringUtils.isBlank(nodeId)) {
    return;
  }
  Node node=getNodeById(event,nodeId);
  if (node == null) {
    return;
  }
  String nextNodeId=nodeExecutorMap.get(node.getType()).execute(event,node);
  runFlowNode(event,nextNodeId);
}","private void runFlowNode(Event event,String nodeId) throws Exception {
  if (StringUtils.isBlank(nodeId)) {
    return;
  }
  Node node=getNodeById(event,nodeId);
  if (node == null) {
    return;
  }
  String nextNodeId=nodeExecutorMap.get(node.getType()).execute(event,node);
  logger.debug(""String_Node_Str"" + nodeId + ""String_Node_Str""+ nextNodeId+ ""String_Node_Str"");
  runFlowNode(event,nextNodeId);
}",0.8678720445062587
172619,"public Map<String,Node> getNodeMap(){
  for (  Node node : nodes) {
    nodeMap.put(node.getId(),node);
  }
  return nodeMap;
}","public Map<String,Node> getNodeMap(){
  return nodeMap;
}",0.6195652173913043
172620,"public String execute(Event event,Node node) throws Exception {
  Parallel parallel=(Parallel)node;
  logger.debug(""String_Node_Str"" + node.getId() + ""String_Node_Str""+ event.getEventId()+ ""String_Node_Str""+ parallel.getLines().size()+ ""String_Node_Str"");
  List<Line> lines=parallel.getLines();
  for (  Line line : lines) {
    if (eventListener != null) {
      eventListener.executeNewEvent(event.createNewEvent(),line.getToNodeId());
    }
  }
  return null;
}","public String execute(Event event,Node node) throws Exception {
  Parallel parallel=(Parallel)node;
  logger.debug(""String_Node_Str"" + node.getId() + ""String_Node_Str""+ event.getEventId()+ ""String_Node_Str""+ parallel.getLines().size()+ ""String_Node_Str"");
  List<Line> lines=parallel.getLines();
  for (  Line line : lines) {
    if (eventListener != null) {
      eventListener.addMultiEvent(event.createNewEvent(),line.getToNodeId());
    }
  }
  return null;
}",0.9482758620689656
172621,"public Map<String,Node> getNodes() throws Exception {
  Map<String,Node> ruleMaps=new HashMap<String,Node>();
  File file=null;
  if (StringUtils.isEmpty(ruleSetFolder)) {
    URL url=GeneralRuleSetExecutor.class.getClassLoader().getResource(ruleSetFolderName);
    file=new File(url.getFile());
  }
 else {
    file=new File(ruleSetFolder);
  }
  File[] rsf=file.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(ruleFileExtension);
    }
  }
);
  for (int i=0; i < rsf.length; i++) {
    Node node=loadRuleSetFromFile(rsf[i]);
    if (node != null) {
      ruleMaps.put(node.getId(),node);
    }
  }
  return ruleMaps;
}","public Map<String,Node> getNodes() throws Exception {
  Map<String,Node> ruleMaps=new HashMap<String,Node>();
  File file=null;
  if (StringUtils.isEmpty(ruleSetFolder)) {
    URL url=FileRuleSetTranslator.class.getClassLoader().getResource(ruleSetFolderName);
    file=new File(url.getFile());
  }
 else {
    file=new File(ruleSetFolder);
  }
  File[] rsf=file.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(ruleFileExtension);
    }
  }
);
  for (int i=0; i < rsf.length; i++) {
    Node node=loadRuleSetFromFile(rsf[i]);
    if (node != null) {
      ruleMaps.put(node.getId(),node);
    }
  }
  return ruleMaps;
}",0.5687272727272727
172622,"/** 
 * Flips all dimensions d0,d1,...,dn -> dn,...,d1,d0 
 */
public static <T extends RealType<T>>RandomAccessibleInterval<T> reverse(RandomAccessibleInterval<T> image){
  RandomAccessibleInterval<T> reversed=image;
  for (int d=0; d < image.numDimensions() / 2; d++) {
    reversed=Views.permute(reversed,d,image.numDimensions() - d - 1);
  }
  return reversed;
}","/** 
 * Flips all dimensions   {@code d0,d1,...,dn -> dn,...,d1,d0}. 
 */
public static <T extends RealType<T>>RandomAccessibleInterval<T> reverse(RandomAccessibleInterval<T> image){
  RandomAccessibleInterval<T> reversed=image;
  for (int d=0; d < image.numDimensions() / 2; d++) {
    reversed=Views.permute(reversed,d,image.numDimensions() - d - 1);
  }
  return reversed;
}",0.9851951547779272
172623,"/** 
 * Returns the default instance for the specified quantity type.
 * @param < Q > The type of the quantity
 * @param type the quantity type
 * @return the quantity factory for the specified type
 */
@SuppressWarnings(""String_Node_Str"") public static <Q extends Quantity<Q>>ProxyQuantityFactory<Q> getInstance(final Class<Q> type){
  logger.log(LOG_LEVEL,""String_Node_Str"" + type + ""String_Node_Str""+ type.isInterface());
  ProxyQuantityFactory<Q> factory;
  if (!type.isInterface()) {
    if (type != null && type.getInterfaces() != null & type.getInterfaces().length > 0) {
      logger.log(LOG_LEVEL,""String_Node_Str"" + type.getInterfaces()[0]);
      Class<?> type2=type.getInterfaces()[0];
      factory=INSTANCES.get(type2);
      if (factory != null)       return factory;
      if (!AbstractQuantity.class.isAssignableFrom(type2))       throw new ClassCastException();
      factory=new Default<>((Class<Q>)type2);
      INSTANCES.put(type2,factory);
    }
 else {
      factory=INSTANCES.get(type);
      if (factory != null)       return factory;
      if (!AbstractQuantity.class.isAssignableFrom(type))       throw new ClassCastException();
      factory=new Default<>(type);
      INSTANCES.put(type,factory);
    }
  }
 else {
    factory=INSTANCES.get(type);
    if (factory != null)     return factory;
    if (!Quantity.class.isAssignableFrom(type))     throw new ClassCastException();
    factory=new Default<>(type);
    INSTANCES.put(type,factory);
  }
  return factory;
}","/** 
 * Returns the default instance for the specified quantity type.
 * @param < Q > The type of the quantity
 * @param type the quantity type
 * @return the quantity factory for the specified type
 */
@SuppressWarnings(""String_Node_Str"") public static <Q extends Quantity<Q>>ProxyQuantityFactory<Q> getInstance(final Class<Q> type){
  if (type == null) {
    throw new NullPointerException();
  }
  logger.log(LOG_LEVEL,""String_Node_Str"" + type + ""String_Node_Str""+ type.isInterface());
  if (!type.isInterface() && type.getInterfaces().length > 0) {
    logger.log(LOG_LEVEL,""String_Node_Str"" + type.getInterfaces()[0]);
    Class<?> type2=findQuantityAssignableInterface(type);
    return returnOrCreateFactoryForQuantityAssignableType((Class<Q>)type2);
  }
 else {
    return returnOrCreateFactoryForQuantityAssignableType(type);
  }
}",0.5173447537473234
172624,"/** 
 * Overrides the default implementation of the factory for the specified quantity type.
 * @param < Q > The type of the quantity
 * @param type the quantity type
 * @param factory the quantity factory
 */
protected static <Q extends Quantity<Q>>void setInstance(final Class<Q> type,ProxyQuantityFactory<Q> factory){
  if (!AbstractQuantity.class.isAssignableFrom(type))   throw new ClassCastException();
  INSTANCES.put(type,factory);
}","/** 
 * Overrides the default implementation of the factory for the specified quantity type.
 * @param < Q > The type of the quantity
 * @param type the quantity type
 * @param factory the quantity factory
 */
protected static <Q extends Quantity<Q>>void setInstance(final Class<Q> type,ProxyQuantityFactory<Q> factory){
  throwClassCastExceptionIfNotQuantityAssignable(type);
  INSTANCES.put(type,factory);
}",0.8988235294117647
172625,"private void drawBackground(Canvas canvas,double shipBobSin){
  Rect dst=new Rect(0,(int)(shipBobSin * 10),mWidth,mHeight);
  canvas.drawBitmap(bgsScaled[0],null,dst,null);
}","private void drawBackground(Canvas canvas,double shipBobSin){
  canvas.drawBitmap(bgsScaled[0],0,(int)(shipBobSin * 10),null);
}",0.7019867549668874
172626,"@Override public void surfaceChanged(SurfaceHolder surfaceHolder,final int format,final int width,final int height){
  mWidth=width;
  mHeight=height;
  for (int b=0; b < bgs.length; b++) {
    int bgw=bgs[b].getWidth();
    int bgh=bgs[b].getHeight();
    int bgw2=(int)(bgw / (double)bgh * mHeight);
    Rect src=new Rect(bgw > mWidth ? Utils.getRand(bgw - mWidth - 1) : 0,0,bgw,bgh);
    Rect dest=new Rect(0,0,bgw2,mHeight);
    bgsScaled[b]=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(bgsScaled[b]);
    c.drawBitmap(bgs[b],src,dest,null);
  }
  for (int b=0; b < fgtops.length; b++) {
    int bgw=fgtops[b].getWidth();
    int bgh=fgtops[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgtopsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgtopsScaled[b]);
    c.drawBitmap(fgtops[b],src,dest,null);
  }
  for (int b=0; b < fgbottoms.length; b++) {
    int bgw=fgbottoms[b].getWidth();
    int bgh=fgbottoms[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgbottomsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgbottomsScaled[b]);
    c.drawBitmap(fgbottoms[b],src,dest,null);
  }
  Log.d(""String_Node_Str"",mWidth + ""String_Node_Str"" + mHeight);
  mThread=new RunThread(surfaceHolder);
  mThread.start();
}","@Override public void surfaceChanged(SurfaceHolder surfaceHolder,final int format,final int width,final int height){
  mWidth=width;
  mHeight=height;
  for (int b=0; b < bgs.length; b++) {
    int bgw=bgs[b].getWidth();
    int bgh=bgs[b].getHeight();
    int bgw2=(int)(bgw / (double)bgh * mHeight);
    Rect src=new Rect(bgw > mWidth ? Utils.getRand(bgw - mWidth - 1) : 0,0,bgw,bgh);
    Rect dest=new Rect(0,0,b == 0 ? mWidth : bgw2,mHeight);
    bgsScaled[b]=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(bgsScaled[b]);
    c.drawBitmap(bgs[b],src,dest,null);
  }
  for (int b=0; b < fgtops.length; b++) {
    int bgw=fgtops[b].getWidth();
    int bgh=fgtops[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgtopsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgtopsScaled[b]);
    c.drawBitmap(fgtops[b],src,dest,null);
  }
  for (int b=0; b < fgbottoms.length; b++) {
    int bgw=fgbottoms[b].getWidth();
    int bgh=fgbottoms[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgbottomsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgbottomsScaled[b]);
    c.drawBitmap(fgbottoms[b],src,dest,null);
  }
  Log.d(""String_Node_Str"",mWidth + ""String_Node_Str"" + mHeight);
  if (mThread != null) {
    mThread.stopRunning();
  }
  mThread=new RunThread(surfaceHolder);
  mThread.start();
}",0.9708121827411168
172627,"@Override public void surfaceCreated(SurfaceHolder surfaceHolder){
  mThread=new RunThread(surfaceHolder);
  mThread.start();
}","@Override public void surfaceCreated(SurfaceHolder surfaceHolder){
}",0.6974358974358974
172628,"@Override public void surfaceChanged(SurfaceHolder surfaceHolder,final int format,final int width,final int height){
  mWidth=width;
  mHeight=height;
  for (int b=0; b < bgs.length; b++) {
    int bgw=bgs[b].getWidth();
    int bgh=bgs[b].getHeight();
    int bgw2=(int)(bgw / (double)bgh * mHeight);
    Rect src=new Rect(bgw > mWidth ? Utils.getRand(bgw - mWidth - 1) : 0,0,bgw,bgh);
    Rect dest=new Rect(0,0,bgw2,mHeight);
    bgsScaled[b]=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(bgsScaled[b]);
    c.drawBitmap(bgs[b],src,dest,null);
  }
  for (int b=0; b < fgtops.length; b++) {
    int bgw=fgtops[b].getWidth();
    int bgh=fgtops[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgtopsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgtopsScaled[b]);
    c.drawBitmap(fgtops[b],src,dest,null);
  }
  for (int b=0; b < fgbottoms.length; b++) {
    int bgw=fgbottoms[b].getWidth();
    int bgh=fgbottoms[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgbottomsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgbottomsScaled[b]);
    c.drawBitmap(fgbottoms[b],src,dest,null);
  }
  Log.d(""String_Node_Str"",mWidth + ""String_Node_Str"" + mHeight);
}","@Override public void surfaceChanged(SurfaceHolder surfaceHolder,final int format,final int width,final int height){
  mWidth=width;
  mHeight=height;
  for (int b=0; b < bgs.length; b++) {
    int bgw=bgs[b].getWidth();
    int bgh=bgs[b].getHeight();
    int bgw2=(int)(bgw / (double)bgh * mHeight);
    Rect src=new Rect(bgw > mWidth ? Utils.getRand(bgw - mWidth - 1) : 0,0,bgw,bgh);
    Rect dest=new Rect(0,0,bgw2,mHeight);
    bgsScaled[b]=Bitmap.createBitmap(mWidth,mHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(bgsScaled[b]);
    c.drawBitmap(bgs[b],src,dest,null);
  }
  for (int b=0; b < fgtops.length; b++) {
    int bgw=fgtops[b].getWidth();
    int bgh=fgtops[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgtopsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgtopsScaled[b]);
    c.drawBitmap(fgtops[b],src,dest,null);
  }
  for (int b=0; b < fgbottoms.length; b++) {
    int bgw=fgbottoms[b].getWidth();
    int bgh=fgbottoms[b].getHeight();
    int bgh2=(int)(bgh / (double)bgw * mWidth);
    Rect src=new Rect(0,0,bgw,bgh);
    Rect dest=new Rect(0,0,mWidth,bgh2);
    fgbottomsScaled[b]=Bitmap.createBitmap(mWidth,bgh2,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(fgbottomsScaled[b]);
    c.drawBitmap(fgbottoms[b],src,dest,null);
  }
  Log.d(""String_Node_Str"",mWidth + ""String_Node_Str"" + mHeight);
  mThread=new RunThread(surfaceHolder);
  mThread.start();
}",0.9804571050016562
172629,"@Override public void surfaceDestroyed(SurfaceHolder surfaceHolder){
  mThread.stopRunning();
  mThread=null;
}","@Override public void surfaceDestroyed(SurfaceHolder surfaceHolder){
  if (mThread != null && mThread.isRunning()) {
    mThread.stopRunning();
  }
  mThread=null;
}",0.8043478260869565
172630,"public static boolean checkIdExists(String id){
  boolean check=false;
  id=AES256.encrypt(id);
  try {
    ResultSet rs=DB.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
    if (rs.getInt(1) == 1) {
      check=true;
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return check;
}","public static boolean checkIdExists(String id){
  boolean check=false;
  id=AES256.encrypt(id);
  try {
    ResultSet rs=DB.executeQuery(""String_Node_Str"",id);
    rs.next();
    if (rs.getInt(1) == 1) {
      check=true;
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return check;
}",0.946341463414634
172631,"public void handle(RoutingContext context){
  String htmlName=""String_Node_Str"";
  if (userManager.isLogined(context)) {
    htmlName=""String_Node_Str"";
  }
  DmsTemplate templates=new DmsTemplate(htmlName);
  try {
    context.response().setStatusCode(200);
    context.response().end(templates.process());
    context.response().close();
  }
 catch (  TemplateException e) {
    Log.l(""String_Node_Str"");
  }
catch (  IOException e) {
    Log.l(""String_Node_Str"");
  }
}","public void handle(RoutingContext context){
  String htmlName=""String_Node_Str"";
  if (UserManager.isLogined(context)) {
    htmlName=""String_Node_Str"";
  }
  DmsTemplate templates=new DmsTemplate(htmlName);
  try {
    context.response().setStatusCode(200);
    context.response().end(templates.process());
    context.response().close();
  }
 catch (  TemplateException e) {
    Log.l(""String_Node_Str"");
  }
catch (  IOException e) {
    Log.l(""String_Node_Str"");
  }
}",0.9978813559322034
172632,"@Override public void handle(RoutingContext ctx){
  if (!AdminManager.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  String number=ctx.request().getParam(""String_Node_Str"");
  String encryptedNumber=UserManager.getAES().encrypt(number);
  try {
    ResultSet rs=DB.executeQuery(""String_Node_Str"",encryptedNumber);
    if (rs.next()) {
      String uid=rs.getString(""String_Node_Str"");
      DB.executeUpdate(""String_Node_Str"",uid);
      ctx.response().setStatusCode(200).end();
      ctx.response().close();
    }
 else {
      ctx.response().setStatusCode(204).end();
      ctx.response().close();
    }
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  if (!AdminManager.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  String number=ctx.request().getParam(""String_Node_Str"");
  String encryptedNumber=AES256.encrypt(number);
  try {
    ResultSet rs=DB.executeQuery(""String_Node_Str"",encryptedNumber);
    if (rs.next()) {
      String uid=rs.getString(""String_Node_Str"");
      DB.executeUpdate(""String_Node_Str"",uid);
      ctx.response().setStatusCode(200).end();
      ctx.response().close();
    }
 else {
      ctx.response().setStatusCode(204).end();
      ctx.response().close();
    }
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.9874843554443054
172633,"private HashMap<Integer,String> getSeatDatas(int classId) throws SQLException {
  HashMap<Integer,String> map=new HashMap<Integer,String>();
  SafeResultSet resultSet=DataBase.getInstance().executeQuery(""String_Node_Str"",classId);
  while (resultSet.next()) {
    map.put(resultSet.getInt(""String_Node_Str""),UserManager.getAES().decrypt(resultSet.getString(""String_Node_Str"")));
  }
  return map;
}","private HashMap<Integer,String> getSeatDatas(int classId) throws SQLException {
  HashMap<Integer,String> map=new HashMap<Integer,String>();
  SafeResultSet resultSet=DataBase.getInstance().executeQuery(""String_Node_Str"",classId);
  while (resultSet.next()) {
    map.put(resultSet.getInt(""String_Node_Str""),AES256.decrypt(resultSet.getString(""String_Node_Str"")));
  }
  return map;
}",0.9744245524296676
172634,"@Override public void handle(RoutingContext ctx){
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  ctx.response().setStatusCode(200);
  ctx.response().end(PostModel.getPost(2,no).toString());
  ctx.response().close();
}","@Override public void handle(RoutingContext ctx){
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  ctx.response().setStatusCode(200);
  ctx.response().end(PostModel.getPostsAtPage(2,no).toString());
  ctx.response().close();
}",0.9857433808553973
172635,"@Override public void handle(RoutingContext ctx){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  EasyJsonObject tempObject=new EasyJsonObject();
  EasyJsonArray tempArray=new EasyJsonArray();
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    resultSet=database.executeQuery(""String_Node_Str"",no);
    if (resultSet.next()) {
      do {
        tempObject=new EasyJsonObject();
        tempObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",UserManager.getAES().decrypt(resultSet.getString(""String_Node_Str"")));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempArray.add(tempObject);
      }
 while (resultSet.next());
      responseObject.put(""String_Node_Str"",tempArray);
      ctx.response().setStatusCode(200);
      ctx.response().end(responseObject.toString());
      ctx.response().close();
    }
 else {
      ctx.response().setStatusCode(204).end();
      ctx.response().close();
    }
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  EasyJsonObject tempObject=new EasyJsonObject();
  EasyJsonArray tempArray=new EasyJsonArray();
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    resultSet=database.executeQuery(""String_Node_Str"",no);
    if (resultSet.next()) {
      do {
        tempObject=new EasyJsonObject();
        tempObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",AES256.decrypt(resultSet.getString(""String_Node_Str"")));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempArray.add(tempObject);
      }
 while (resultSet.next());
      responseObject.put(""String_Node_Str"",tempArray);
      ctx.response().setStatusCode(200);
      ctx.response().end(responseObject.toString());
      ctx.response().close();
    }
 else {
      ctx.response().setStatusCode(204).end();
      ctx.response().close();
    }
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.9931082012405238
172636,"@Override public void handle(RoutingContext ctx){
  DataBase database=DataBase.getInstance();
  AES256 aes=UserManager.getAES();
  String title=ctx.request().getParam(""String_Node_Str"");
  String content=ctx.request().getParam(""String_Node_Str"");
  boolean privacy=Boolean.parseBoolean(ctx.request().getParam(""String_Node_Str""));
  String uid=null;
  try {
    uid=userManager.getUid(userManager.getIdFromSession(ctx));
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (Guardian.checkParameters(title,content,privacy,uid)) {
    try {
      SafeResultSet rs=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
      rs.next();
      String name=aes.decrypt(rs.getString(""String_Node_Str""));
      database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"",privacy,""String_Node_Str"",uid,""String_Node_Str"",name,""String_Node_Str"");
      ctx.response().setStatusCode(201).end();
      ctx.response().close();
    }
 catch (    SQLException e) {
      ctx.response().setStatusCode(500).end();
      ctx.response().close();
    }
  }
  if (!ctx.response().closed()) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
  }
}","@Override public void handle(RoutingContext ctx){
  DataBase database=DataBase.getInstance();
  String title=ctx.request().getParam(""String_Node_Str"");
  String content=ctx.request().getParam(""String_Node_Str"");
  boolean privacy=Boolean.parseBoolean(ctx.request().getParam(""String_Node_Str""));
  String uid=null;
  try {
    uid=UserManager.getUid(UserManager.getIdFromSession(ctx));
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (Guardian.checkParameters(title,content,privacy,uid)) {
    try {
      SafeResultSet rs=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
      rs.next();
      String name=AES256.decrypt(rs.getString(""String_Node_Str""));
      database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"",privacy,""String_Node_Str"",uid,""String_Node_Str"",name,""String_Node_Str"");
      ctx.response().setStatusCode(201).end();
      ctx.response().close();
    }
 catch (    SQLException e) {
      ctx.response().setStatusCode(500).end();
      ctx.response().close();
    }
  }
  if (!ctx.response().closed()) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
  }
}",0.3018549747048903
172637,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String title=context.request().getParam(""String_Node_Str"");
  String content=context.request().getParam(""String_Node_Str"");
  int room=Integer.parseInt(context.request().getParam(""String_Node_Str""));
  String writer=null;
  if (userManager.isLogined(context)) {
    try {
      JobResult result=userManager.getUserInfo(userManager.getIdFromSession(context));
      if (result != null && result.isSuccess()) {
        writer=((Map<String,Object>)result.getArgs()[0]).get(""String_Node_Str"").toString();
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
    if (Guardian.checkParameters(title,content,room,writer)) {
      try {
        database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"",room,""String_Node_Str"",writer,""String_Node_Str"");
        context.response().setStatusCode(201).end();
        context.response().close();
      }
 catch (      SQLException e) {
        context.response().setStatusCode(500).end();
        context.response().close();
        Log.l(""String_Node_Str"");
      }
    }
  }
  if (!context.response().closed()) {
    context.response().setStatusCode(400).end();
    context.response().close();
  }
}","@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String title=context.request().getParam(""String_Node_Str"");
  String content=context.request().getParam(""String_Node_Str"");
  int room=Integer.parseInt(context.request().getParam(""String_Node_Str""));
  String writer=null;
  if (UserManager.isLogined(context)) {
    try {
      JSONObject result=UserManager.getUserInfo(UserManager.getIdFromSession(context));
      if (result.length() != 0) {
        writer=result.getString(""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
    if (Guardian.checkParameters(title,content,room,writer)) {
      try {
        database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"",room,""String_Node_Str"",writer,""String_Node_Str"");
        context.response().setStatusCode(201).end();
        context.response().close();
      }
 catch (      SQLException e) {
        context.response().setStatusCode(500).end();
        context.response().close();
        Log.l(""String_Node_Str"");
      }
    }
  }
  if (!context.response().closed()) {
    context.response().setStatusCode(400).end();
    context.response().close();
  }
}",0.8679542767047694
172638,"@Override public void handle(RoutingContext context){
  if (adminManager.isAdmin(context)) {
    DataBase database=DataBase.getInstance();
    SafeResultSet resultSet;
    SafeResultSet extensionStateResultSet;
    AES256 aes=UserManager.getAES();
    File file=getFile();
    try {
      wb=new XSSFWorkbook(new FileInputStream(file));
      XSSFSheet sheet=wb.getSheetAt(0);
      for (      Row row : sheet) {
        for (        Cell cell : row) {
switch (cell.getCellType()) {
case Cell.CELL_TYPE_NUMERIC:
            StringBuilder sb=new StringBuilder(Double.toString(cell.getNumericCellValue()));
          String studentNumber=aes.encrypt(sb.toString().substring(0,4));
        int classId=0;
      resultSet=database.executeQuery(""String_Node_Str"",studentNumber,""String_Node_Str"");
    if (resultSet.next()) {
      String uid=resultSet.getString(""String_Node_Str"");
      extensionStateResultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
      if (extensionStateResultSet.next()) {
        classId=extensionStateResultSet.getInt(""String_Node_Str"");
      }
    }
  XSSFRow studentRow=sheet.getRow(cell.getRowIndex());
XSSFCell extensionStateCell=studentRow.getCell(cell.getColumnIndex() + 2);
extensionStateCell.setCellValue(CLASS_NAMES[classId]);
break;
}
}
}
FileOutputStream xlsToSave=new FileOutputStream(FILE_DIR + ""String_Node_Str"");
wb.write(xlsToSave);
xlsToSave.close();
String fileName=new String(""String_Node_Str"".getBytes(""String_Node_Str""),""String_Node_Str"");
context.response().putHeader(HttpHeaders.CONTENT_DISPOSITION,""String_Node_Str"" + fileName).sendFile(FILE_DIR + ""String_Node_Str"");
context.response().close();
}
 catch (IOException|SQLException e) {
context.response().setStatusCode(500).end();
context.response().close();
}
}
 else {
context.response().setStatusCode(400).end();
context.response().end(""String_Node_Str"");
context.response().close();
}
}","@Override public void handle(RoutingContext context){
  if (AdminManager.isAdmin(context)) {
    DataBase database=DataBase.getInstance();
    SafeResultSet resultSet;
    SafeResultSet extensionStateResultSet;
    File file=getFile();
    try {
      wb=new XSSFWorkbook(new FileInputStream(file));
      XSSFSheet sheet=wb.getSheetAt(0);
      for (      Row row : sheet) {
        for (        Cell cell : row) {
switch (cell.getCellType()) {
case Cell.CELL_TYPE_NUMERIC:
            StringBuilder sb=new StringBuilder(Double.toString(cell.getNumericCellValue()));
          String studentNumber=AES256.encrypt(sb.toString().substring(0,4));
        int classId=0;
      resultSet=database.executeQuery(""String_Node_Str"",studentNumber,""String_Node_Str"");
    if (resultSet.next()) {
      String uid=resultSet.getString(""String_Node_Str"");
      extensionStateResultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
      if (extensionStateResultSet.next()) {
        classId=extensionStateResultSet.getInt(""String_Node_Str"");
      }
    }
  XSSFRow studentRow=sheet.getRow(cell.getRowIndex());
XSSFCell extensionStateCell=studentRow.getCell(cell.getColumnIndex() + 2);
extensionStateCell.setCellValue(CLASS_NAMES[classId]);
break;
}
}
}
FileOutputStream xlsToSave=new FileOutputStream(FILE_DIR + ""String_Node_Str"");
wb.write(xlsToSave);
xlsToSave.close();
String fileName=new String(""String_Node_Str"".getBytes(""String_Node_Str""),""String_Node_Str"");
context.response().putHeader(HttpHeaders.CONTENT_DISPOSITION,""String_Node_Str"" + fileName).sendFile(FILE_DIR + ""String_Node_Str"");
context.response().close();
}
 catch (IOException|SQLException e) {
context.response().setStatusCode(500).end();
context.response().close();
}
}
 else {
context.response().setStatusCode(400).end();
context.response().end(""String_Node_Str"");
context.response().close();
}
}",0.9873150105708244
172639,"@Override public void handle(RoutingContext context){
  if (adminManager.isAdmin(context)) {
    DataBase database=DataBase.getInstance();
    SafeResultSet resultSet;
    SafeResultSet stayStateResultSet;
    SafeResultSet stayDefaultResultSet;
    AES256 aes=UserManager.getAES();
    int year=Integer.parseInt(context.request().getParam(""String_Node_Str""));
    int month=Integer.parseInt(context.request().getParam(""String_Node_Str""));
    int week=Integer.parseInt(context.request().getParam(""String_Node_Str""));
    String targetWeek=StringFormatter.format(""String_Node_Str"",year,month,week).getValue();
    File file=getFile();
    try {
      wb=new XSSFWorkbook(new FileInputStream(file));
      XSSFSheet sheet=wb.getSheetAt(0);
      for (      Row row : sheet) {
        for (        Cell cell : row) {
switch (cell.getCellType()) {
case Cell.CELL_TYPE_NUMERIC:
            StringBuilder sb=new StringBuilder(Double.toString(cell.getNumericCellValue()));
          String studentNumber=aes.encrypt(sb.toString().substring(0,4));
        resultSet=database.executeQuery(""String_Node_Str"",studentNumber,""String_Node_Str"");
      if (resultSet.next()) {
        String uid=resultSet.getString(""String_Node_Str"");
        stayStateResultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
        if (stayStateResultSet.next()) {
          setCellValues(stayStateResultSet,database,sheet,cell,uid);
        }
 else {
          stayDefaultResultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
          if (stayDefaultResultSet.next()) {
            setCellValues(stayDefaultResultSet,database,sheet,cell,uid);
          }
        }
      }
    break;
}
}
}
FileOutputStream xlsToSave=new FileOutputStream(FILE_DIR + ""String_Node_Str"");
wb.write(xlsToSave);
xlsToSave.close();
String fileName=new String(""String_Node_Str"".getBytes(""String_Node_Str""),""String_Node_Str"");
context.response().putHeader(HttpHeaders.CONTENT_DISPOSITION,""String_Node_Str"" + fileName).sendFile(FILE_DIR + ""String_Node_Str"");
context.response().close();
}
 catch (IOException|SQLException e) {
e.printStackTrace();
context.response().setStatusCode(500).end();
context.response().close();
}
}
 else {
context.response().setStatusCode(400);
context.response().end(""String_Node_Str"");
context.response().close();
}
}","@Override public void handle(RoutingContext context){
  if (AdminManager.isAdmin(context)) {
    DataBase database=DataBase.getInstance();
    SafeResultSet resultSet;
    SafeResultSet stayStateResultSet;
    SafeResultSet stayDefaultResultSet;
    File file=getFile();
    try {
      wb=new XSSFWorkbook(new FileInputStream(file));
      XSSFSheet sheet=wb.getSheetAt(0);
      for (      Row row : sheet) {
        for (        Cell cell : row) {
switch (cell.getCellType()) {
case Cell.CELL_TYPE_NUMERIC:
            StringBuilder sb=new StringBuilder(Double.toString(cell.getNumericCellValue()));
          String studentNumber=AES256.encrypt(sb.toString().substring(0,4));
        resultSet=database.executeQuery(""String_Node_Str"",studentNumber,""String_Node_Str"");
      if (resultSet.next()) {
        String uid=resultSet.getString(""String_Node_Str"");
        stayStateResultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
        if (stayStateResultSet.next()) {
          setCellValues(stayStateResultSet,database,sheet,cell,uid);
        }
 else {
          stayDefaultResultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
          if (stayDefaultResultSet.next()) {
            setCellValues(stayDefaultResultSet,database,sheet,cell,uid);
          }
        }
      }
    break;
}
}
}
FileOutputStream xlsToSave=new FileOutputStream(FILE_DIR + ""String_Node_Str"");
wb.write(xlsToSave);
xlsToSave.close();
String fileName=new String(""String_Node_Str"".getBytes(""String_Node_Str""),""String_Node_Str"");
context.response().putHeader(HttpHeaders.CONTENT_DISPOSITION,""String_Node_Str"" + fileName).sendFile(FILE_DIR + ""String_Node_Str"");
context.response().close();
}
 catch (IOException|SQLException e) {
e.printStackTrace();
context.response().setStatusCode(500).end();
context.response().close();
}
}
 else {
context.response().setStatusCode(400);
context.response().end(""String_Node_Str"");
context.response().close();
}
}",0.9128109741920484
172640,"private void initResidualMaps(String date,HashMap<String,String> map){
  List<com.dms.api.xlsx.ResidualData> list=new ArrayList<com.dms.api.xlsx.ResidualData>();
  try {
    SafeResultSet rs=DataBase.getInstance().executeQuery(""String_Node_Str"");
    while (rs.next()) {
      com.dms.api.xlsx.ResidualData data=new com.dms.api.xlsx.ResidualData();
      data.setId(rs.getString(""String_Node_Str""));
      String uid=UserManager.getAES().decrypt(rs.getString(""String_Node_Str""));
      if (uid == null || uid.length() == 0)       continue;
      data.setNumber(Integer.valueOf(uid));
      data.setResidualDefault(rs.getInt(""String_Node_Str""));
      list.add(data);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  for (  com.dms.api.xlsx.ResidualData user : list) {
    try {
      int type;
      String query=QueryUtils.queryBuilder(""String_Node_Str"",user.getId(),""String_Node_Str"");
      SafeResultSet rs=DataBase.getInstance().executeQuery(query);
      if (rs.next())       type=rs.getInt(1);
 else       type=user.getResidualDefault();
      map.put(user.getNumber() + ""String_Node_Str"",RESIDUAL_TYPE[type - 1]);
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","private void initResidualMaps(String date,HashMap<String,String> map){
  List<com.dms.api.xlsx.ResidualData> list=new ArrayList<com.dms.api.xlsx.ResidualData>();
  try {
    SafeResultSet rs=DataBase.getInstance().executeQuery(""String_Node_Str"");
    while (rs.next()) {
      com.dms.api.xlsx.ResidualData data=new com.dms.api.xlsx.ResidualData();
      data.setId(rs.getString(""String_Node_Str""));
      String uid=AES256.decrypt(rs.getString(""String_Node_Str""));
      if (uid == null || uid.length() == 0)       continue;
      data.setNumber(Integer.valueOf(uid));
      data.setResidualDefault(rs.getInt(""String_Node_Str""));
      list.add(data);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  for (  com.dms.api.xlsx.ResidualData user : list) {
    try {
      int type;
      String query=QueryUtils.queryBuilder(""String_Node_Str"",user.getId(),""String_Node_Str"");
      SafeResultSet rs=DataBase.getInstance().executeQuery(query);
      if (rs.next())       type=rs.getInt(1);
 else       type=user.getResidualDefault();
      map.put(user.getNumber() + ""String_Node_Str"",RESIDUAL_TYPE[type - 1]);
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}",0.9917287014061208
172641,"public void handle(RoutingContext context){
  int code=400;
  String content=null;
  if (adminManager.isAdmin(context)) {
    try {
      SafeResultSet rs=DataBase.getInstance().executeQuery(""String_Node_Str"");
      List<HashMap<String,Object>> list=rs.toHashMap();
      for (      HashMap<String,Object> map : list) {
        map.put(""String_Node_Str"",userManager.getAES().decrypt((String)map.get(""String_Node_Str"")));
        map.put(""String_Node_Str"",userManager.getAES().decrypt((String)map.get(""String_Node_Str"")));
      }
      List<String> columns=rs.getColumns();
      DmsTemplate template=new DmsTemplate(""String_Node_Str"");
      template.put(""String_Node_Str"",""String_Node_Str"");
      template.put(""String_Node_Str"",columns);
      template.put(""String_Node_Str"",columns);
      template.put(""String_Node_Str"",list);
      content=template.process();
      code=200;
    }
 catch (    SQLException|TemplateException|IOException e) {
      e.printStackTrace();
      code=500;
    }
  }
  context.response().setStatusCode(code);
  if (content != null)   context.response().end(content);
 else   context.response().end();
  context.response().close();
}","public void handle(RoutingContext context){
  int code=400;
  String content=null;
  if (AdminManager.isAdmin(context)) {
    try {
      SafeResultSet rs=DataBase.getInstance().executeQuery(""String_Node_Str"");
      List<HashMap<String,Object>> list=rs.toHashMap();
      for (      HashMap<String,Object> map : list) {
        map.put(""String_Node_Str"",AES256.decrypt((String)map.get(""String_Node_Str"")));
        map.put(""String_Node_Str"",AES256.decrypt((String)map.get(""String_Node_Str"")));
      }
      List<String> columns=rs.getColumns();
      DmsTemplate template=new DmsTemplate(""String_Node_Str"");
      template.put(""String_Node_Str"",""String_Node_Str"");
      template.put(""String_Node_Str"",columns);
      template.put(""String_Node_Str"",columns);
      template.put(""String_Node_Str"",list);
      content=template.process();
      code=200;
    }
 catch (    SQLException|TemplateException|IOException e) {
      e.printStackTrace();
      code=500;
    }
  }
  context.response().setStatusCode(code);
  if (content != null)   context.response().end(content);
 else   context.response().end();
  context.response().close();
}",0.981786643538595
172642,"public boolean isApply(RoutingContext ctx){
  boolean result=false;
  try {
    if (DataBase.getInstance().executeQuery(""String_Node_Str"",userManager.getUid(userManager.getIdFromSession(ctx)),""String_Node_Str"").nextAndReturn().getInt(1) > 0) {
      result=true;
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return result;
}","public boolean isApply(RoutingContext ctx){
  boolean result=false;
  try {
    if (DataBase.getInstance().executeQuery(""String_Node_Str"",UserManager.getUid(UserManager.getIdFromSession(ctx)),""String_Node_Str"").nextAndReturn().getInt(1) > 0) {
      result=true;
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return result;
}",0.9942528735632185
172643,"public boolean canApply(RoutingContext ctx){
  boolean result=false;
  Calendar c=Calendar.getInstance();
  int month=c.get(Calendar.MONTH) + 1;
  int day=c.get(Calendar.DAY_OF_MONTH);
  if ((month == 5 && day > 29) || (month == 6 && day <= 2)) {
    try {
      SafeResultSet rs=DataBase.getInstance().executeQuery(""String_Node_Str"",userManager.getUid(userManager.getIdFromSession(ctx)),""String_Node_Str"");
      if (rs.next() && !UserManager.getAES().decrypt(rs.getString(1)).startsWith(""String_Node_Str"")) {
        result=true;
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  return result;
}","public boolean canApply(RoutingContext ctx){
  boolean result=false;
  Calendar c=Calendar.getInstance();
  int month=c.get(Calendar.MONTH) + 1;
  int day=c.get(Calendar.DAY_OF_MONTH);
  if ((month == 5 && day > 29) || (month == 6 && day <= 2)) {
    try {
      SafeResultSet rs=DataBase.getInstance().executeQuery(""String_Node_Str"",UserManager.getUid(UserManager.getIdFromSession(ctx)),""String_Node_Str"");
      if (rs.next() && !AES256.decrypt(rs.getString(1)).startsWith(""String_Node_Str"")) {
        result=true;
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  return result;
}",0.9807692307692308
172644,"@Override public void handle(RoutingContext context){
  String fileName=context.request().getParam(""String_Node_Str"");
  context.response().sendFile(""String_Node_Str"" + fileName);
}","public void handle(RoutingContext context){
  String fileName=context.request().getParam(""String_Node_Str"");
  context.response().sendFile(""String_Node_Str"" + fileName);
}",0.9715909090909092
172645,"public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String title=context.request().getParam(""String_Node_Str"");
  String content=context.request().getParam(""String_Node_Str"");
  if (!Guardian.checkParameters(title,content)) {
    context.response().setStatusCode(400).end();
    context.response().close();
    return;
  }
  try {
    database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"");
    context.response().setStatusCode(201).end();
    context.response().close();
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","public void handle(RoutingContext context){
  String title=context.request().getParam(""String_Node_Str"");
  String content=context.request().getParam(""String_Node_Str"");
  if (!Guardian.checkParameters(title,content)) {
    context.response().setStatusCode(400).end();
    context.response().close();
    return;
  }
  DB.executeUpdate(""String_Node_Str"",title,content);
  context.response().setStatusCode(201).end();
  context.response().close();
}",0.7139107611548556
172646,"@Override public void handle(RoutingContext ctx){
  if (!Guardian.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DataBase database=DataBase.getInstance();
  EasyJsonObject responseObject=new EasyJsonObject();
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    database.executeUpdate(""String_Node_Str"",no);
    ctx.response().setStatusCode(200);
    ctx.response().end(responseObject.toString());
    ctx.response().close();
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  if (!Guardian.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DB.executeUpdate(""String_Node_Str"",no);
  ctx.response().setStatusCode(200).end();
  ctx.response().close();
}",0.745253164556962
172647,"@Deprecated @Override public void handle(RoutingContext ctx){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    resultSet=database.executeQuery(""String_Node_Str"",no);
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
      ctx.response().setStatusCode(200);
      ctx.response().end(responseObject.toString());
      ctx.response().close();
    }
 else {
      ctx.response().setStatusCode(204).end();
      ctx.response().close();
    }
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Deprecated @Override public void handle(RoutingContext ctx){
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    ResultSet rs=DB.executeQuery(""String_Node_Str"",no);
    JSONObject response=new JSONObject();
    if (rs.next()) {
      response.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
      response.put(""String_Node_Str"",rs.getString(""String_Node_Str""));
      ctx.response().setStatusCode(200);
      ctx.response().end(response.toString());
      ctx.response().close();
    }
 else {
      ctx.response().setStatusCode(204).end();
      ctx.response().close();
    }
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.5430533544638141
172648,"@Override public void handle(RoutingContext ctx){
  if (!Guardian.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DataBase database=DataBase.getInstance();
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  String title=ctx.request().getParam(""String_Node_Str"");
  String content=ctx.request().getParam(""String_Node_Str"");
  if (!Guardian.checkParameters(no,title,content)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",no);
    database.executeUpdate(""String_Node_Str"",content,""String_Node_Str"",no);
    ctx.response().setStatusCode(200).end();
    ctx.response().end();
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  if (!Guardian.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  String title=ctx.request().getParam(""String_Node_Str"");
  String content=ctx.request().getParam(""String_Node_Str"");
  if (!Guardian.checkParameters(no,title,content)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DB.executeUpdate(""String_Node_Str"",title,no);
  DB.executeUpdate(""String_Node_Str"",content,no);
  ctx.response().setStatusCode(200).end();
  ctx.response().end();
}",0.7678684376976597
172649,"@Override public void handle(RoutingContext ctx){
  if (!Guardian.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DataBase database=DataBase.getInstance();
  String title=ctx.request().getParam(""String_Node_Str"");
  String content=ctx.request().getParam(""String_Node_Str"");
  if (!Guardian.checkParameters(title,content)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  try {
    database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"");
    ctx.response().setStatusCode(201).end();
    ctx.response().close();
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  if (!Guardian.isAdmin(ctx)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  String title=ctx.request().getParam(""String_Node_Str"");
  String content=ctx.request().getParam(""String_Node_Str"");
  if (!Guardian.checkParameters(title,content)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DB.executeUpdate(""String_Node_Str"",title,content);
  ctx.response().setStatusCode(201).end();
  ctx.response().close();
}",0.7680835197613721
172650,"@Override public void handle(RoutingContext ctx){
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.isAdmin(ctx) && Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DataBase database=DataBase.getInstance();
  try {
    database.executeUpdate(""String_Node_Str"",no);
    ctx.response().setStatusCode(200).end();
    ctx.response().close();
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  int no=Integer.parseInt(ctx.request().getParam(""String_Node_Str""));
  if (!Guardian.isAdmin(ctx) && Guardian.checkParameters(no)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  DB.executeUpdate(""String_Node_Str"",no);
  ctx.response().setStatusCode(200).end();
  ctx.response().close();
}",0.7913669064748201
172651,"public String getStayStatus(String id,String week){
  String status=""String_Node_Str"";
  try {
    String uid=getUid(id);
    ResultSet rs=DB.executeQuery(""String_Node_Str"",uid,week);
    if (rs.next()) {
      int value=rs.getInt(1);
      status=ApplyDataUtil.stayDataToString(value);
    }
 else {
      rs=DB.executeQuery(""String_Node_Str"",uid);
      if (rs.next()) {
        int value=rs.getInt(1);
        status=ApplyDataUtil.stayDataToString(value);
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return status;
}","public static String getStayStatus(String id,String week){
  String status=""String_Node_Str"";
  try {
    String uid=getUid(id);
    ResultSet rs=DB.executeQuery(""String_Node_Str"",uid,week);
    if (rs.next()) {
      int value=rs.getInt(1);
      status=ApplyDataUtil.stayDataToString(value);
    }
 else {
      rs=DB.executeQuery(""String_Node_Str"",uid);
      if (rs.next()) {
        int value=rs.getInt(1);
        status=ApplyDataUtil.stayDataToString(value);
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return status;
}",0.9936993699369936
172652,"public void handle(RoutingContext context){
  boolean isLogin=userManager.isLogined(context);
  if (isLogin) {
    try {
      JobResult result=userManager.getUserInfo(userManager.getIdFromSession(context));
      if (result.isSuccess()) {
        HashMap<String,Object> infos=(HashMap<String,Object>)result.getArgs()[0];
        DmsTemplate templates=new DmsTemplate(""String_Node_Str"");
        templates.put(""String_Node_Str"",infos.get(""String_Node_Str""));
        templates.put(""String_Node_Str"",infos.get(""String_Node_Str""));
        templates.put(""String_Node_Str"",infos.get(""String_Node_Str""));
        templates.put(""String_Node_Str"",infos.get(""String_Node_Str""));
        templates.put(""String_Node_Str"",infos.get(""String_Node_Str""));
        templates.put(""String_Node_Str"",infos.get(""String_Node_Str""));
        templates.put(""String_Node_Str"",userManager.getStayStatus(userManager.getIdFromSession(context),currentWeek()));
        templates.put(""String_Node_Str"",userManager.getIdFromSession(context));
        context.response().setStatusCode(200);
        context.response().end(templates.process());
        context.response().close();
      }
 else {
        context.response().setStatusCode(500);
        context.response().close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    TemplateException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    context.response().setStatusCode(200);
    context.response().putHeader(""String_Node_Str"",""String_Node_Str"");
    context.response().end(""String_Node_Str"");
    context.response().close();
  }
}","public void handle(RoutingContext context){
  boolean isLogin=UserManager.isLogined(context);
  if (isLogin) {
    try {
      JSONObject result=UserManager.getUserInfo(UserManager.getIdFromSession(context));
      if (result.length() != 0) {
        DmsTemplate templates=new DmsTemplate(""String_Node_Str"");
        templates.put(""String_Node_Str"",result.getString(""String_Node_Str""));
        templates.put(""String_Node_Str"",result.getString(""String_Node_Str""));
        templates.put(""String_Node_Str"",result.getString(""String_Node_Str""));
        templates.put(""String_Node_Str"",result.getString(""String_Node_Str""));
        templates.put(""String_Node_Str"",result.getString(""String_Node_Str""));
        templates.put(""String_Node_Str"",result.getString(""String_Node_Str""));
        templates.put(""String_Node_Str"",UserManager.getStayStatus(UserManager.getIdFromSession(context),currentWeek()));
        templates.put(""String_Node_Str"",UserManager.getIdFromSession(context));
        context.response().setStatusCode(200);
        context.response().end(templates.process());
        context.response().close();
      }
 else {
        context.response().setStatusCode(500);
        context.response().close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    TemplateException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    context.response().setStatusCode(200);
    context.response().putHeader(""String_Node_Str"",""String_Node_Str"");
    context.response().end(""String_Node_Str"");
    context.response().close();
  }
}",0.5296082599453386
172653,"@Override public void handle(RoutingContext ctx){
  UserManager userManager=new UserManager();
  DataBase database=DataBase.getInstance();
  String uid=null;
  try {
    uid=userManager.getUid(userManager.getIdFromSession(ctx));
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (!Guardian.checkParameters(uid)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  EasyJsonObject responseObject=new EasyJsonObject();
  try {
    SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",true);
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
    }
 else {
      responseObject.put(""String_Node_Str"",false);
    }
    resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",true);
      responseObject.put(""String_Node_Str"",resultSet.getBoolean(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getBoolean(""String_Node_Str""));
    }
 else {
      responseObject.put(""String_Node_Str"",false);
    }
    resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"",getCurrentWeek(),""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",true);
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    }
 else {
      responseObject.put(""String_Node_Str"",false);
    }
    ctx.response().setStatusCode(200);
    ctx.response().end(responseObject.toString());
    ctx.response().close();
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext ctx){
  UserManager userManager=new UserManager();
  DataBase database=DataBase.getInstance();
  String uid=null;
  try {
    uid=userManager.getUid(userManager.getIdFromSession(ctx));
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  if (!Guardian.checkParameters(uid)) {
    ctx.response().setStatusCode(400).end();
    ctx.response().close();
    return;
  }
  EasyJsonObject responseObject=new EasyJsonObject();
  try {
    SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",true);
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
    }
 else {
      responseObject.put(""String_Node_Str"",false);
    }
    resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",true);
      responseObject.put(""String_Node_Str"",resultSet.getBoolean(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getBoolean(""String_Node_Str""));
    }
 else {
      responseObject.put(""String_Node_Str"",false);
    }
    resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",true);
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    }
 else {
      responseObject.put(""String_Node_Str"",false);
    }
    ctx.response().setStatusCode(200);
    ctx.response().end(responseObject.toString());
    ctx.response().close();
  }
 catch (  SQLException e) {
    ctx.response().setStatusCode(500).end();
    ctx.response().close();
    e.printStackTrace();
    Log.l(""String_Node_Str"");
  }
}",0.9840425531914894
172654,"private void loadMeal(Date date){
  new LoadMealTask(getContext(),new LoadMealTask.OnPostExecuteListener(){
    @Override public void onPostExecute(    Meal meal){
      HomeMealFragment[] homeMealFragments=new HomeMealFragment[3];
      if (meal == null) {
        homeMealFragments[0]=HomeMealFragment.newInstance(getContext(),""String_Node_Str"");
        homeMealFragments[1]=HomeMealFragment.newInstance(getContext(),""String_Node_Str"");
        homeMealFragments[2]=HomeMealFragment.newInstance(getContext(),""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",meal.getBreakfast());
        Log.d(""String_Node_Str"",meal.getLunch());
        Log.d(""String_Node_Str"",meal.getDinner());
        homeMealFragments[0]=newInstance(getContext(),meal.getBreakfast());
        homeMealFragments[1]=newInstance(getContext(),meal.getLunch());
        homeMealFragments[2]=newInstance(getContext(),meal.getDinner());
      }
      if (mMealViewPager.getAdapter() == null) {
        mMealViewPager.setAdapter(new HomeMealFragmentPagerAdapter(getFragmentManager(),homeMealFragments));
      }
 else {
        ((HomeMealFragmentPagerAdapter)mMealViewPager.getAdapter()).changeItems(homeMealFragments);
      }
    }
  }
).execute(date);
}","private void loadMeal(Date date){
  new LoadMealTask(getContext(),new LoadMealTask.OnPostExecuteListener(){
    @Override public void onPostExecute(    Meal meal){
      HomeMealFragment[] homeMealFragments=new HomeMealFragment[3];
      PagerAdapter adapter=mMealViewPager.getAdapter();
      if (adapter == null) {
        mMealViewPager.setAdapter(new HomeMealFragmentPagerAdapter(getFragmentManager(),getContext(),meal));
      }
 else {
        ((HomeMealFragmentPagerAdapter)mMealViewPager.getAdapter()).setData(meal);
      }
    }
  }
).execute(date);
}",0.3740288568257491
172655,"@Override public void onPostExecute(Meal meal){
  HomeMealFragment[] homeMealFragments=new HomeMealFragment[3];
  if (meal == null) {
    homeMealFragments[0]=HomeMealFragment.newInstance(getContext(),""String_Node_Str"");
    homeMealFragments[1]=HomeMealFragment.newInstance(getContext(),""String_Node_Str"");
    homeMealFragments[2]=HomeMealFragment.newInstance(getContext(),""String_Node_Str"");
  }
 else {
    Log.d(""String_Node_Str"",meal.getBreakfast());
    Log.d(""String_Node_Str"",meal.getLunch());
    Log.d(""String_Node_Str"",meal.getDinner());
    homeMealFragments[0]=newInstance(getContext(),meal.getBreakfast());
    homeMealFragments[1]=newInstance(getContext(),meal.getLunch());
    homeMealFragments[2]=newInstance(getContext(),meal.getDinner());
  }
  if (mMealViewPager.getAdapter() == null) {
    mMealViewPager.setAdapter(new HomeMealFragmentPagerAdapter(getFragmentManager(),homeMealFragments));
  }
 else {
    ((HomeMealFragmentPagerAdapter)mMealViewPager.getAdapter()).changeItems(homeMealFragments);
  }
}","@Override public void onPostExecute(Meal meal){
  HomeMealFragment[] homeMealFragments=new HomeMealFragment[3];
  PagerAdapter adapter=mMealViewPager.getAdapter();
  if (adapter == null) {
    mMealViewPager.setAdapter(new HomeMealFragmentPagerAdapter(getFragmentManager(),getContext(),meal));
  }
 else {
    ((HomeMealFragmentPagerAdapter)mMealViewPager.getAdapter()).setData(meal);
  }
}",0.2245762711864407
172656,"/** 
 * 초기화
 * @param rootView 필요한 뷰를 찾을 최상위 뷰
 */
private void init(View rootView){
  String meal=getArguments().getString(getString(R.string.ARGS_MEAL));
  TextView mealTV=(TextView)rootView.findViewById(R.id.tv_home_meal);
  mealTV.setText(meal);
}","/** 
 * 초기화
 * @param rootView 필요한 뷰를 찾을 최상위 뷰
 */
private void init(View rootView){
  mMealString=getArguments().getString(getString(R.string.ARGS_MEAL));
  String meal=getArguments().getString(getString(R.string.ARGS_MEAL));
  TextView mealTV=(TextView)rootView.findViewById(R.id.tv_home_meal);
  mealTV.setText(meal);
}",0.8760907504363001
172657,"/** 
 * 초기화, 달력 날짜 클릭 이벤트 설정, 신청 버튼 클릭 이벤트 설정
 * @param rootView 필요한 뷰를 찾을 최상위 뷰
 */
private void init(View rootView){
  getActivity().setTitle(R.string.nav_stayapply);
  mAccountPrefs=getActivity().getSharedPreferences(getString(R.string.PREFS_ACCOUNT),MODE_PRIVATE);
  mDefaultStatusPrefs=getActivity().getSharedPreferences(getString(R.string.PREFS_DEFAULTSTATUS),MODE_PRIVATE);
  mDefaultStatusTV=(TextView)rootView.findViewById(R.id.tv_stayapply_defaultstatus);
  mSelectedWeekTV=(TextView)rootView.findViewById(R.id.tv_stayapply_selectedweek);
  mSelectedWeekStatusTV=(TextView)rootView.findViewById(R.id.tv_stayapply_selectedweekstatus);
  final CalendarView calendarView=(CalendarView)rootView.findViewById(R.id.calendar_stayapply);
  new LoadDefaultStayStatusTask().execute();
  Button changeDefaultStatusBtn=(Button)rootView.findViewById(R.id.btn_stayapply_changedefaultstatus);
  changeDefaultStatusBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ChangeDefaultStatusDialog.newInstance(getContext(),mDefaultStatusPrefs.getInt(getString(R.string.PREFS_DEFAULTSTATUS_DEFAULTSTATUS),STAY),new ChangeDefaultStatusDialog.ChangeDefaultStatusListener(){
        @Override public void onChangeDefaultStatus(        int defaultStatus){
          mDefaultStatusPrefs.edit().putInt(getString(R.string.PREFS_DEFAULTSTATUS_DEFAULTSTATUS),defaultStatus).apply();
          setDefaultStatusTV(StayApplyUtils.getStringFromStayStatus(defaultStatus));
        }
      }
).show(getChildFragmentManager(),null);
    }
  }
);
  setSelectedWeekTV(calendarView.getLastSelectedDay());
  mSelectedDate=new Date();
  new LoadStayStatusTask().execute(DateUtils.dateToWeekDateString(mSelectedDate));
  calendarView.setOnDateClickListener(new CalendarView.OnDateClickListener(){
    @Override public void onDateClick(    @NonNull Date date){
      mSelectedDate=date;
      setSelectedWeekTV(date);
      setSelectedWeekStatusTV(null);
      new LoadStayStatusTask().execute(DateUtils.dateToWeekDateString(mSelectedDate));
    }
  }
);
  final DMSRadioButton fridayGoRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_fridaygo);
  final DMSRadioButton saturdayGoRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_saturdaygo);
  final DMSRadioButton saturdayComeRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_saturdaycome);
  final DMSRadioButton stayRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_stay);
  DMSButton applyBtn=(DMSButton)rootView.findViewById(R.id.btn_stayapply_apply);
  applyBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (fridayGoRB.isChecked()) {
        new ApplyStayStatusTask().execute(FRIDAY_GO,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else       if (saturdayGoRB.isChecked()) {
        new ApplyStayStatusTask().execute(SATURDAY_GO,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else       if (saturdayComeRB.isChecked()) {
        new ApplyStayStatusTask().execute(SATURDAY_COME,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else       if (stayRB.isChecked()) {
        new ApplyStayStatusTask().execute(STAY,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else {
        Toast.makeText(getContext(),R.string.stayapply_nochecked,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
}","/** 
 * 초기화, 달력 날짜 클릭 이벤트 설정, 신청 버튼 클릭 이벤트 설정
 * @param rootView 필요한 뷰를 찾을 최상위 뷰
 */
private void init(View rootView){
  getActivity().setTitle(R.string.nav_stayapply);
  mAccountPrefs=getActivity().getSharedPreferences(getString(R.string.PREFS_ACCOUNT),MODE_PRIVATE);
  mDefaultStatusPrefs=getActivity().getSharedPreferences(getString(R.string.PREFS_DEFAULTSTATUS),MODE_PRIVATE);
  mDefaultStatusTV=(TextView)rootView.findViewById(R.id.tv_stayapply_defaultstatus);
  mSelectedWeekTV=(TextView)rootView.findViewById(R.id.tv_stayapply_selectedweek);
  mSelectedWeekStatusTV=(TextView)rootView.findViewById(R.id.tv_stayapply_selectedweekstatus);
  final CalendarView calendarView=(CalendarView)rootView.findViewById(R.id.calendar_stayapply);
  new LoadDefaultStayStatusTask().execute();
  Button changeDefaultStatusBtn=(Button)rootView.findViewById(R.id.btn_stayapply_changedefaultstatus);
  changeDefaultStatusBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ChangeDefaultStatusDialog.newInstance(getContext(),mDefaultStatusPrefs.getInt(getString(R.string.PREFS_DEFAULTSTATUS_DEFAULTSTATUS),STAY),new ChangeDefaultStatusDialog.ChangeDefaultStatusListener(){
        @Override public void onChangeDefaultStatus(        int defaultStatus){
          mDefaultStatusPrefs.edit().putInt(getString(R.string.PREFS_DEFAULTSTATUS_DEFAULTSTATUS),defaultStatus).apply();
          setDefaultStatusTV(StayApplyUtils.getStringFromStayStatus(defaultStatus));
        }
      }
).show(getChildFragmentManager(),null);
    }
  }
);
  setSelectedWeekTV(calendarView.getLastSelectedWeekString());
  mSelectedDate=new Date();
  new LoadStayStatusTask().execute(DateUtils.dateToWeekDateString(mSelectedDate));
  calendarView.setOnDateClickListener(new CalendarView.OnDateClickListener(){
    @Override public void onDateClick(    @NonNull Date date){
      mSelectedDate=date;
      setSelectedWeekTV(calendarView.getLastSelectedWeekString());
      setSelectedWeekStatusTV(null);
      new LoadStayStatusTask().execute(DateUtils.dateToWeekDateString(mSelectedDate));
    }
  }
);
  final DMSRadioButton fridayGoRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_fridaygo);
  final DMSRadioButton saturdayGoRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_saturdaygo);
  final DMSRadioButton saturdayComeRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_saturdaycome);
  final DMSRadioButton stayRB=(DMSRadioButton)rootView.findViewById(R.id.rb_stayapply_stay);
  DMSButton applyBtn=(DMSButton)rootView.findViewById(R.id.btn_stayapply_apply);
  applyBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (fridayGoRB.isChecked()) {
        new ApplyStayStatusTask().execute(FRIDAY_GO,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else       if (saturdayGoRB.isChecked()) {
        new ApplyStayStatusTask().execute(SATURDAY_GO,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else       if (saturdayComeRB.isChecked()) {
        new ApplyStayStatusTask().execute(SATURDAY_COME,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else       if (stayRB.isChecked()) {
        new ApplyStayStatusTask().execute(STAY,DateUtils.dateToWeekDateString(mSelectedDate));
      }
 else {
        Toast.makeText(getContext(),R.string.stayapply_nochecked,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
}",0.9916434540389972
172658,"private void setSelectedWeekTV(Date date){
  Calendar cal=Calendar.getInstance(Locale.KOREA);
  cal.setTime(date);
  cal.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.KOREA);
  mSelectedWeekTV.setText(sdf.format(cal.getTime()));
}","private void setSelectedWeekTV(String week){
  mSelectedWeekTV.setText(week);
}",0.3872679045092838
172659,"@Override public void onDateClick(@NonNull Date date){
  mSelectedDate=date;
  setSelectedWeekTV(date);
  setSelectedWeekStatusTV(null);
  new LoadStayStatusTask().execute(DateUtils.dateToWeekDateString(mSelectedDate));
}","@Override public void onDateClick(@NonNull Date date){
  mSelectedDate=date;
  setSelectedWeekTV(calendarView.getLastSelectedWeekString());
  setSelectedWeekStatusTV(null);
  new LoadStayStatusTask().execute(DateUtils.dateToWeekDateString(mSelectedDate));
}",0.7447698744769874
172660,"public static Response push(Request request) throws HttpBoxException, IOException {
  URL serverUrl=new URL(request.getUrl());
  HttpURLConnection urlConnection=(HttpURLConnection)serverUrl.openConnection();
  urlConnection.setRequestMethod(request.getType());
  for (int i=0; i < request.getHeaderPropertiesSize(); i++) {
    HeaderProperty property=request.getProperty(i);
    urlConnection.setRequestProperty(property.getKey(),property.getValue());
    Log.d(""String_Node_Str"",property.getKey() + ""String_Node_Str"" + property.getValue());
  }
  if (!urlConnection.getRequestMethod().equals(Request.TYPE_GET)) {
    urlConnection.setDoOutput(true);
  }
  if (request.getBodyData() != null) {
    BufferedWriter httpRequestBodyWriter=new BufferedWriter(new OutputStreamWriter(urlConnection.getOutputStream()));
    httpRequestBodyWriter.write(request.getBodyData());
    httpRequestBodyWriter.close();
  }
  Response response=new Response(urlConnection.getResponseCode(),urlConnection.getResponseMessage(),urlConnection.getHeaderFields());
  Scanner httpResponseScanner=new Scanner(urlConnection.getInputStream());
  while (httpResponseScanner.hasNextLine()) {
    response.appendBody(httpResponseScanner.nextLine());
  }
  httpResponseScanner.close();
  urlConnection.getHeaderFields();
  return response;
}","public static Response push(Request request) throws HttpBoxException, IOException {
  URL serverUrl=new URL(request.getUrl());
  HttpURLConnection urlConnection=(HttpURLConnection)serverUrl.openConnection();
  urlConnection.setRequestMethod(request.getType());
  for (int i=0; i < request.getHeaderPropertiesSize(); i++) {
    HeaderProperty property=request.getProperty(i);
    urlConnection.setRequestProperty(property.getKey(),property.getValue());
  }
  if (!urlConnection.getRequestMethod().equals(Request.TYPE_GET)) {
    urlConnection.setDoOutput(true);
  }
  if (request.getBodyData() != null) {
    BufferedWriter httpRequestBodyWriter=new BufferedWriter(new OutputStreamWriter(urlConnection.getOutputStream()));
    httpRequestBodyWriter.write(request.getBodyData());
    httpRequestBodyWriter.close();
  }
  Response response=new Response(urlConnection.getResponseCode(),urlConnection.getResponseMessage(),urlConnection.getHeaderFields());
  Scanner httpResponseScanner=new Scanner(urlConnection.getInputStream());
  while (httpResponseScanner.hasNextLine()) {
    response.appendBody(httpResponseScanner.nextLine());
  }
  httpResponseScanner.close();
  urlConnection.getHeaderFields();
  return response;
}",0.9643987341772152
172661,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  String uid=context.request().getParam(""String_Node_Str"");
  try {
    responseObject.put(""String_Node_Str"",ProfileImage.getProfileImage(uid));
    resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
      return;
    }
    resultSet=database.executeQuery(""String_Node_Str"",uid,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
      return;
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  EasyJsonObject responseObject=new EasyJsonObject();
  String id=context.request().getParam(""String_Node_Str"");
  try {
    responseObject.put(""String_Node_Str"",ProfileImage.getProfileImage(id));
    JobResult result=userManager.getUserInfo(id);
    if (result.isSuccess()) {
      Map<String,Object> datas=(Map)result.getArgs()[0];
      responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
      responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
      context.response().setStatusCode(200).end();
      context.response().close();
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.5055041831792162
172662,"@Override public void handle(RoutingContext context){
  String id=context.request().getParam(""String_Node_Str"");
  String password=context.request().getParam(""String_Node_Str"");
  try {
    if (Guardian.checkParameters(id,password)) {
      if (!userManager.login(id,password)) {
        responseObject.put(""String_Node_Str"",false);
        context.response().setStatusCode(404).end();
        context.response().close();
      }
 else {
        responseObject.put(""String_Node_Str"",true);
        JobResult result=userManager.getUserInfo(id);
        if (result.isSuccess()) {
          Map<String,Object> datas=(Map)result.getArgs()[0];
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
        }
 else {
        }
        context.response().setStatusCode(201);
        context.response().end(responseObject.toString());
        context.response().close();
      }
    }
 else {
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  EasyJsonObject responseObject=new EasyJsonObject();
  String id=context.request().getParam(""String_Node_Str"");
  String password=context.request().getParam(""String_Node_Str"");
  try {
    if (Guardian.checkParameters(id,password)) {
      if (!userManager.login(id,password)) {
        context.response().setStatusCode(404).end();
        context.response().close();
      }
 else {
        JobResult result=userManager.getUserInfo(id);
        if (result.isSuccess()) {
          Map<String,Object> datas=(Map)result.getArgs()[0];
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
          responseObject.put(""String_Node_Str"",datas.get(""String_Node_Str""));
        }
 else {
        }
        context.response().setStatusCode(201);
        context.response().end(responseObject.toString());
        context.response().close();
      }
    }
 else {
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.7833267793944161
172663,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String uid=context.request().getParam(""String_Node_Str"");
  String id=context.request().getParam(""String_Node_Str"");
  String password=context.request().getParam(""String_Node_Str"");
  int number=Integer.parseInt(context.request().getParam(""String_Node_Str""));
  int status=Integer.parseInt(context.request().getParam(""String_Node_Str""));
  String name=context.request().getParam(""String_Node_Str"");
  try {
    if (Guardian.checkParameters(uid,id,password)) {
      JobResult result=userManager.register(uid,id,password);
      if (result.isSuccess()) {
        database.executeUpdate(""String_Node_Str"",uid,""String_Node_Str"",number,""String_Node_Str"",status,""String_Node_Str"",name,""String_Node_Str"");
        database.executeUpdate(""String_Node_Str"",uid,""String_Node_Str"");
        database.executeUpdate(""String_Node_Str"",uid,""String_Node_Str"");
        context.response().setStatusCode(201);
        context.response().setStatusMessage(result.getMessage()).end();
        context.response().close();
      }
 else {
        context.response().setStatusCode(409);
        context.response().setStatusMessage(result.getMessage()).end();
        context.response().close();
      }
    }
 else {
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String uid=context.request().getParam(""String_Node_Str"");
  String id=context.request().getParam(""String_Node_Str"");
  String password=context.request().getParam(""String_Node_Str"");
  int number=Integer.parseInt(context.request().getParam(""String_Node_Str""));
  int status=Integer.parseInt(context.request().getParam(""String_Node_Str""));
  String name=context.request().getParam(""String_Node_Str"");
  try {
    if (Guardian.checkParameters(uid,id,password)) {
      JobResult result=userManager.register(uid,id,password);
      if (result.isSuccess()) {
        database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"",number,""String_Node_Str"",status,""String_Node_Str"",name,""String_Node_Str"");
        database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"");
        database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"");
        context.response().setStatusCode(201);
        context.response().setStatusMessage(result.getMessage()).end();
        context.response().close();
      }
 else {
        context.response().setStatusCode(409);
        context.response().setStatusMessage(result.getMessage()).end();
        context.response().close();
      }
    }
 else {
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.9989630141721396
172664,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String id=context.request().getParam(""String_Node_Str"");
  String date=context.request().getParam(""String_Node_Str"");
  String reason=context.request().getParam(""String_Node_Str"");
  try {
    database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"",date);
    database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"",date,""String_Node_Str"",reason,""String_Node_Str"");
    context.response().setStatusCode(201).end();
    context.response().close();
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String id=context.request().getParam(""String_Node_Str"");
  boolean date=Boolean.parseBoolean(context.request().getParam(""String_Node_Str""));
  String reason=context.request().getParam(""String_Node_Str"");
  try {
    database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"",date);
    database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"",date,""String_Node_Str"",reason,""String_Node_Str"");
    context.response().setStatusCode(201).end();
    context.response().close();
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.975643702157272
172665,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String id=context.request().getParam(""String_Node_Str"");
  try {
    database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"");
    context.response().setStatusCode(200).end();
    context.response().close();
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  String id=context.request().getParam(""String_Node_Str"");
  boolean date=Boolean.parseBoolean(context.request().getParam(""String_Node_Str""));
  try {
    database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"",date);
    context.response().setStatusCode(200).end();
    context.response().close();
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.912142152023692
172666,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  String id=context.request().getParam(""String_Node_Str"");
  try {
    resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
    if (resultSet.next()) {
      responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
      if (!resultSet.getString(""String_Node_Str"").isEmpty()) {
        responseObject.put(""String_Node_Str"",true);
        responseObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
      }
 else {
        responseObject.put(""String_Node_Str"",false);
      }
      context.response().setStatusCode(200);
      context.response().end(responseObject.toString());
      context.response().close();
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  EasyJsonObject tempObject=new EasyJsonObject();
  EasyJsonArray tempArray=new EasyJsonArray();
  String id=context.request().getParam(""String_Node_Str"");
  try {
    resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
    if (resultSet.next()) {
      do {
        tempObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        if (!resultSet.getString(""String_Node_Str"").isEmpty()) {
          tempObject.put(""String_Node_Str"",true);
          tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        }
 else {
          tempObject.put(""String_Node_Str"",false);
        }
        tempArray.add(tempObject);
      }
 while (resultSet.next());
      context.response().setStatusCode(200);
      context.response().end(responseObject.toString());
      context.response().close();
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.8580723871492476
172667,"@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  EasyJsonObject tempObject=new EasyJsonObject();
  EasyJsonArray tempArray=new EasyJsonArray();
  try {
    if (!context.request().params().contains(""String_Node_Str"") && !context.request().params().contains(""String_Node_Str"")) {
      resultSet=database.executeQuery(""String_Node_Str"");
    }
 else {
      int page=Integer.parseInt(context.request().getParam(""String_Node_Str""));
      int limit=Integer.parseInt(context.request().getParam(""String_Node_Str""));
      resultSet=database.executeQuery(""String_Node_Str"",((page - 1) * limit),""String_Node_Str"",limit);
    }
    int postCount=0;
    if (resultSet.next()) {
      do {
        tempObject=new EasyJsonObject();
        tempObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempArray.add(tempObject);
        postCount++;
      }
 while (resultSet.next());
      responseObject.put(""String_Node_Str"",postCount);
      responseObject.put(""String_Node_Str"",responseObject);
      context.response().setStatusCode(200);
      context.response().end(responseObject.toString());
      context.response().close();
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}","@Override public void handle(RoutingContext context){
  DataBase database=DataBase.getInstance();
  SafeResultSet resultSet;
  EasyJsonObject responseObject=new EasyJsonObject();
  EasyJsonObject tempObject=new EasyJsonObject();
  EasyJsonArray tempArray=new EasyJsonArray();
  try {
    if (!context.request().params().contains(""String_Node_Str"") && !context.request().params().contains(""String_Node_Str"")) {
      resultSet=database.executeQuery(""String_Node_Str"");
    }
 else {
      int page=Integer.parseInt(context.request().getParam(""String_Node_Str""));
      int limit=Integer.parseInt(context.request().getParam(""String_Node_Str""));
      resultSet=database.executeQuery(""String_Node_Str"",((page - 1) * limit),""String_Node_Str"",limit);
    }
    int postCount=0;
    if (resultSet.next()) {
      do {
        tempObject=new EasyJsonObject();
        tempObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempObject.put(""String_Node_Str"",resultSet.getString(""String_Node_Str""));
        tempArray.add(tempObject);
        postCount++;
      }
 while (resultSet.next());
      responseObject.put(""String_Node_Str"",postCount);
      responseObject.put(""String_Node_Str"",tempArray);
      context.response().setStatusCode(200);
      context.response().end(responseObject.toString());
      context.response().close();
    }
 else {
      context.response().setStatusCode(404).end();
      context.response().close();
    }
  }
 catch (  SQLException e) {
    context.response().setStatusCode(500).end();
    context.response().close();
    Log.l(""String_Node_Str"");
  }
}",0.9931892212022504
172668,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String title=requestObject.getString(""String_Node_Str"");
  String content=requestObject.getString(""String_Node_Str"");
  int status=database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"");
  responseObject.put(""String_Node_Str"",status);
  return responseObject;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String title=requestObject.getString(""String_Node_Str"");
  String content=requestObject.getString(""String_Node_Str"");
  int status=1;
  if (requestObject.containsKey(""String_Node_Str"")) {
    int no=requestObject.getInt(""String_Node_Str"");
    database.executeUpdate(""String_Node_Str"",no);
    status=database.executeUpdate(""String_Node_Str"",no,""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"");
  }
 else {
    status=database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"");
  }
  responseObject.put(""String_Node_Str"",status);
  return responseObject;
}",0.7283842794759825
172669,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  String password=requestObject.getString(""String_Node_Str"");
  SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
  if (!resultSet.next() || !resultSet.getString(""String_Node_Str"").equals(password)) {
    responseObject.put(""String_Node_Str"",false);
  }
 else   if (resultSet.getString(""String_Node_Str"").equals(password)) {
    responseObject.put(""String_Node_Str"",true);
    SafeResultSet tempResultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
    responseObject.put(""String_Node_Str"",tempResultSet.getInt(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",tempResultSet.getString(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",tempResultSet.getInt(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",tempResultSet.getInt(""String_Node_Str""));
  }
  return responseObject;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  String password=requestObject.getString(""String_Node_Str"");
  SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
  if (!resultSet.next() || !resultSet.getString(""String_Node_Str"").equals(password)) {
    responseObject.put(""String_Node_Str"",false);
  }
 else   if (resultSet.getString(""String_Node_Str"").equals(password)) {
    responseObject.put(""String_Node_Str"",true);
    SafeResultSet tempResultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
    tempResultSet.next();
    responseObject.put(""String_Node_Str"",tempResultSet.getInt(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",tempResultSet.getString(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",tempResultSet.getInt(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",tempResultSet.getInt(""String_Node_Str""));
  }
  return responseObject;
}",0.9526515151515152
172670,"private static void initialize(){
  if (!profileImgDir.exists()) {
    profileImgDir.mkdir();
  }
  ActionRegister.init(""String_Node_Str"",""String_Node_Str"");
  PostChangeDetector.getInstance().start();
  PostChangeDetector.getInstance().setOnCategoryUpdateListener(new PostUpdateListener(){
    @Override public void update(    int currentCategory){
      Calendar currentTime=Calendar.getInstance();
      int dayOfWeek=currentTime.get(Calendar.DAY_OF_WEEK);
      int hour=currentTime.get(Calendar.HOUR_OF_DAY);
      if (dayOfWeek == Calendar.MONDAY) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
      if (hour >= 0 && hour <= 8) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  vertx=Vertx.vertx();
  options=new VertxOptions();
}","private static void initialize(){
  if (!profileImgDir.exists()) {
    profileImgDir.mkdir();
  }
  ActionRegister.init(""String_Node_Str"",""String_Node_Str"");
  PostChangeDetector.getInstance().setOnCategoryUpdateListener(new PostUpdateListener(){
    @Override public void update(    int currentCategory){
      Calendar currentTime=Calendar.getInstance();
      int dayOfWeek=currentTime.get(Calendar.DAY_OF_WEEK);
      int hour=currentTime.get(Calendar.HOUR_OF_DAY);
      if (dayOfWeek == Calendar.MONDAY) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
      if (hour >= 0 && hour <= 8) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  vertx=Vertx.vertx();
  options=new VertxOptions();
}",0.9776649746192894
172671,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String title=requestObject.getString(""String_Node_Str"");
  String content=requestObject.getString(""String_Node_Str"");
  String writer=requestObject.getString(""String_Node_Str"");
  int privacy=requestObject.getInt(""String_Node_Str"");
  int status=database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"",writer,""String_Node_Str"",privacy,""String_Node_Str"");
  responseObject.put(""String_Node_Str"",status);
  return responseObject;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String title=requestObject.getString(""String_Node_Str"");
  String content=requestObject.getString(""String_Node_Str"");
  String writer=requestObject.getString(""String_Node_Str"");
  boolean privacy=requestObject.getBoolean(""String_Node_Str"");
  int status=database.executeUpdate(""String_Node_Str"",title,""String_Node_Str"",content,""String_Node_Str"",writer,""String_Node_Str"",privacy,""String_Node_Str"");
  responseObject.put(""String_Node_Str"",status);
  return responseObject;
}",0.9829642248722316
172672,"public static boolean canApply(String id,int no) throws SQLException {
  database=DataBase.getInstance();
  resultSet=database.executeQuery(""String_Node_Str"",no);
  targetDay[0]=resultSet.getBoolean(""String_Node_Str"");
  targetDay[1]=resultSet.getBoolean(""String_Node_Str"");
  targetDay[2]=resultSet.getBoolean(""String_Node_Str"");
  targetDay[3]=resultSet.getBoolean(""String_Node_Str"");
  resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
  if (resultSet.next()) {
    tempResultSet=database.executeQuery(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    do {
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[0]=true;
      }
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[1]=true;
      }
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[2]=true;
      }
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[3]=true;
      }
    }
 while (resultSet.next());
  }
 else {
    return true;
  }
  for (int i=0; i <= 3; i++) {
    if (targetDay[i] && !appliedDay[i]) {
      continue;
    }
 else {
      return false;
    }
  }
  return true;
}","public static boolean canApply(String id,int no) throws SQLException {
  database=DataBase.getInstance();
  resultSet=database.executeQuery(""String_Node_Str"",no);
  resultSet.next();
  targetDay[0]=resultSet.getBoolean(""String_Node_Str"");
  targetDay[1]=resultSet.getBoolean(""String_Node_Str"");
  targetDay[2]=resultSet.getBoolean(""String_Node_Str"");
  targetDay[3]=resultSet.getBoolean(""String_Node_Str"");
  resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
  if (resultSet.next()) {
    tempResultSet=database.executeQuery(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    do {
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[0]=true;
      }
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[1]=true;
      }
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[2]=true;
      }
      if (tempResultSet.getBoolean(""String_Node_Str"")) {
        appliedDay[3]=true;
      }
    }
 while (resultSet.next());
  }
 else {
    return true;
  }
  for (int i=0; i <= 3; i++) {
    if (targetDay[i] && !appliedDay[i]) {
      continue;
    }
 else {
      return false;
    }
  }
  return true;
}",0.9915966386554622
172673,"public static String getProfileImage(String id){
  hashedId=SHA256.encrypt(id);
  file=new File(directoryPath.concat(hashedId).concat(""String_Node_Str""));
  try {
    fr=new FileReader(file);
    int ch;
    while ((ch=fr.read()) != -1) {
      data.append((char)ch);
    }
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
  return data.toString();
}","public static String getProfileImage(String id){
  hashedId=SHA256.encrypt(id);
  file=new File(directoryPath.concat(hashedId).concat(""String_Node_Str""));
  try {
    fr=new FileReader(file);
    data=new StringBuilder();
    data.append((char)fr.read());
  }
 catch (  FileNotFoundException e) {
  }
catch (  IOException e) {
  }
  return data.toString();
}",0.8174386920980926
172674,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"");
  if (resultSet.next()) {
    responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
  }
 else {
    responseObject.put(""String_Node_Str"",404);
  }
  return responseObject;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String name=requestObject.getString(""String_Node_Str"");
  SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",name,""String_Node_Str"");
  if (resultSet.next()) {
    responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
    responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
  }
 else {
    responseObject.put(""String_Node_Str"",404);
  }
  return responseObject;
}",0.988826815642458
172675,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  int status=database.executeUpdate(""String_Node_Str"",id,""String_Node_Str"");
  responseObject.put(""String_Node_Str"",status);
  return responseObject;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String name=requestObject.getString(""String_Node_Str"");
  int status=database.executeUpdate(""String_Node_Str"",name,""String_Node_Str"");
  responseObject.put(""String_Node_Str"",status);
  return responseObject;
}",0.98159509202454
172676,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  return null;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  String hashedId=SHA256.encrypt(id);
  String data=requestObject.getString(""String_Node_Str"");
  File file=new File(""String_Node_Str"".concat(hashedId));
  if (!file.exists()) {
    try {
      file.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  try {
    FileWriter fw=new FileWriter(file);
    fw.write(data);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return responseObject;
}",0.3262032085561497
172677,"private static void initialize(){
  File profileImgDir=new File(""String_Node_Str"");
  if (!profileImgDir.exists()) {
    profileImgDir.mkdir();
  }
  ActionRegister.init(""String_Node_Str"",""String_Node_Str"");
  PostChangeDetector.getInstance().start();
  PostChangeDetector.getInstance().setOnCategoryUpdateListener(new PostUpdateListener(){
    @Override public void update(    int currentCategory){
      Calendar currentTime=Calendar.getInstance();
      int dayOfWeek=currentTime.get(Calendar.DAY_OF_WEEK);
      int hour=currentTime.get(Calendar.HOUR_OF_DAY);
      if (dayOfWeek == Calendar.MONDAY) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
      if (hour >= 0 && hour <= 8) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  vertx=Vertx.vertx();
  options=new VertxOptions();
}","private static void initialize(){
  if (!profileImgDir.exists()) {
    profileImgDir.mkdir();
  }
  ActionRegister.init(""String_Node_Str"",""String_Node_Str"");
  PostChangeDetector.getInstance().start();
  PostChangeDetector.getInstance().setOnCategoryUpdateListener(new PostUpdateListener(){
    @Override public void update(    int currentCategory){
      Calendar currentTime=Calendar.getInstance();
      int dayOfWeek=currentTime.get(Calendar.DAY_OF_WEEK);
      int hour=currentTime.get(Calendar.HOUR_OF_DAY);
      if (dayOfWeek == Calendar.MONDAY) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
      if (hour >= 0 && hour <= 8) {
        try {
          DataBase.getInstance().executeUpdate(""String_Node_Str"");
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  vertx=Vertx.vertx();
  options=new VertxOptions();
}",0.9757751937984496
172678,"/** 
 * (non-Javadoc)
 * @see io.vertx.core.AbstractVerticle#stop(io.vertx.core.Future)
 */
public void stop(@SuppressWarnings(""String_Node_Str"") Future stopFuture) throws Exception {
}","/** 
 * (non-Javadoc)
 * @see io.vertx.core.AbstractVerticle#stop(io.vertx.core.Future)
 */
@Deprecated public void stop(@SuppressWarnings(""String_Node_Str"") Future stopFuture) throws Exception {
}",0.9685863874345548
172679,"/** 
 * (non-Javadoc)
 * @see io.vertx.core.AbstractVerticle#start()
 */
@Override public void start() throws Exception {
  Log.l(""String_Node_Str"" + ApplicationInfo.VERSION);
  secureManager=SecureManager.getInstance();
  server=vertx.createHttpServer();
  server.requestHandler(request -> {
    Log.l(""String_Node_Str"" + request.host());
    Buffer totalBuffer=Buffer.buffer();
    if (request.method() == HttpMethod.POST) {
      Log.l(""String_Node_Str"" + request.host());
      Log.l(""String_Node_Str"" + request.getHeader(""String_Node_Str""));
      request.handler(buffer -> {
        totalBuffer.appendBuffer(buffer);
      }
);
      request.endHandler(v -> {
        Log.l(""String_Node_Str"" + totalBuffer);
        int command=Integer.parseInt(request.getHeader(""String_Node_Str""));
        requestObject=new EasyJsonObject(totalBuffer.toString());
        response=request.response();
        response.putHeader(""String_Node_Str"",""String_Node_Str"");
        try {
          Actionable.responseObject.clear();
          responseObject=ActionRegister.executeAction(new Sender(),command,requestObject);
          if (responseObject.containsKey(""String_Node_Str"")) {
            if (responseObject.getInt(""String_Node_Str"") == 200 || responseObject.getInt(""String_Node_Str"") == 1) {
              response.setStatusCode(200);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 404 || responseObject.getInt(""String_Node_Str"") == 0) {
              response.setStatusCode(204);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 500) {
              response.setStatusCode(205);
              Log.l(""String_Node_Str"");
            }
            responseObject.remove(""String_Node_Str"");
          }
 else {
            response.setStatusCode(200);
            Log.l(""String_Node_Str"");
          }
          Log.l(""String_Node_Str"" + responseObject.toString());
        }
 catch (        SQLException e) {
          response.setStatusCode(404);
          e.printStackTrace();
          Log.l(""String_Node_Str"");
        }
        response.end(responseObject.toString());
        response.close();
      }
);
    }
 else {
      response=request.response();
      response.putHeader(""String_Node_Str"",""String_Node_Str"");
      response.setStatusCode(405);
      response.end();
      response.close();
    }
  }
).listen(10419);
}","/** 
 * (non-Javadoc)
 * @see io.vertx.core.AbstractVerticle#start()
 */
@Override public void start() throws Exception {
  Log.l(""String_Node_Str"" + ApplicationInfo.VERSION);
  secureManager=SecureManager.getInstance();
  server=vertx.createHttpServer();
  server.requestHandler(request -> {
    Log.l(""String_Node_Str"" + request.host());
    Buffer totalBuffer=Buffer.buffer();
    if (request.method() == HttpMethod.POST) {
      Log.l(""String_Node_Str"" + request.host());
      Log.l(""String_Node_Str"" + request.getHeader(""String_Node_Str""));
      request.handler(buffer -> {
        totalBuffer.appendBuffer(buffer);
      }
);
      request.endHandler(v -> {
        Log.l(""String_Node_Str"" + totalBuffer);
        int command=Integer.parseInt(request.getHeader(""String_Node_Str""));
        requestObject=new EasyJsonObject(totalBuffer.toString());
        response=request.response();
        response.putHeader(""String_Node_Str"",""String_Node_Str"");
        try {
          Actionable.responseObject.clear();
          Actionable.array.clear();
          responseObject=ActionRegister.executeAction(new Sender(),command,requestObject);
          if (responseObject.containsKey(""String_Node_Str"")) {
            if (responseObject.getInt(""String_Node_Str"") == 200 || responseObject.getInt(""String_Node_Str"") == 1) {
              response.setStatusCode(200);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 404 || responseObject.getInt(""String_Node_Str"") == 0) {
              response.setStatusCode(204);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 500) {
              response.setStatusCode(205);
              Log.l(""String_Node_Str"");
            }
            responseObject.remove(""String_Node_Str"");
          }
 else {
            response.setStatusCode(200);
            Log.l(""String_Node_Str"");
          }
          Log.l(""String_Node_Str"" + responseObject.toString());
        }
 catch (        SQLException e) {
          response.setStatusCode(404);
          e.printStackTrace();
          Log.l(""String_Node_Str"");
        }
        response.end(responseObject.toString());
        response.close();
      }
);
    }
 else {
      response=request.response();
      response.putHeader(""String_Node_Str"",""String_Node_Str"");
      response.setStatusCode(405);
      response.end();
      response.close();
    }
  }
).listen(10419);
}",0.9927623642943304
172680,"/** 
 * (non-Javadoc)
 * @see io.vertx.core.AbstractVerticle#start()
 */
@Override public void start() throws Exception {
  Log.l(""String_Node_Str"" + ApplicationInfo.VERSION);
  secureManager=SecureManager.getInstance();
  server=vertx.createHttpServer();
  server.requestHandler(request -> {
    Log.l(""String_Node_Str"" + request.host());
    Buffer totalBuffer=Buffer.buffer();
    if (request.method() == HttpMethod.POST) {
      Log.l(""String_Node_Str"" + request.host());
      Log.l(""String_Node_Str"" + request.getHeader(""String_Node_Str""));
      request.handler(buffer -> {
        totalBuffer.appendBuffer(buffer);
      }
);
      request.endHandler(v -> {
        Log.l(""String_Node_Str"" + totalBuffer);
        int command=Integer.parseInt(request.getHeader(""String_Node_Str""));
        requestObject=new EasyJsonObject(totalBuffer.toString());
        response=request.response();
        response.putHeader(""String_Node_Str"",""String_Node_Str"");
        try {
          responseObject=ActionRegister.executeAction(new Sender(),command,requestObject);
          if (responseObject.containsKey(""String_Node_Str"")) {
            if (responseObject.getInt(""String_Node_Str"") == 200 || responseObject.getInt(""String_Node_Str"") == 1) {
              response.setStatusCode(200);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 404 || responseObject.getInt(""String_Node_Str"") == 0) {
              response.setStatusCode(501);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 500) {
              response.setStatusCode(500);
              Log.l(""String_Node_Str"");
            }
            responseObject.remove(""String_Node_Str"");
          }
 else {
            response.setStatusCode(200);
            Log.l(""String_Node_Str"");
          }
          Log.l(""String_Node_Str"" + responseObject.toString());
        }
 catch (        SQLException e) {
          response.setStatusCode(404);
          e.printStackTrace();
          Log.l(""String_Node_Str"");
        }
        response.end(responseObject.toString());
        response.close();
      }
);
    }
 else {
      response=request.response();
      response.putHeader(""String_Node_Str"",""String_Node_Str"");
      response.setStatusCode(405);
      response.end();
      response.close();
    }
  }
).listen(10419);
}","/** 
 * (non-Javadoc)
 * @see io.vertx.core.AbstractVerticle#start()
 */
@Override public void start() throws Exception {
  Log.l(""String_Node_Str"" + ApplicationInfo.VERSION);
  secureManager=SecureManager.getInstance();
  server=vertx.createHttpServer();
  server.requestHandler(request -> {
    Log.l(""String_Node_Str"" + request.host());
    Buffer totalBuffer=Buffer.buffer();
    if (request.method() == HttpMethod.POST) {
      Log.l(""String_Node_Str"" + request.host());
      Log.l(""String_Node_Str"" + request.getHeader(""String_Node_Str""));
      request.handler(buffer -> {
        totalBuffer.appendBuffer(buffer);
      }
);
      request.endHandler(v -> {
        Log.l(""String_Node_Str"" + totalBuffer);
        int command=Integer.parseInt(request.getHeader(""String_Node_Str""));
        requestObject=new EasyJsonObject(totalBuffer.toString());
        response=request.response();
        response.putHeader(""String_Node_Str"",""String_Node_Str"");
        try {
          Actionable.responseObject.clear();
          responseObject=ActionRegister.executeAction(new Sender(),command,requestObject);
          if (responseObject.containsKey(""String_Node_Str"")) {
            if (responseObject.getInt(""String_Node_Str"") == 200 || responseObject.getInt(""String_Node_Str"") == 1) {
              response.setStatusCode(200);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 404 || responseObject.getInt(""String_Node_Str"") == 0) {
              response.setStatusCode(501);
              Log.l(""String_Node_Str"");
            }
 else             if (responseObject.getInt(""String_Node_Str"") == 500) {
              response.setStatusCode(500);
              Log.l(""String_Node_Str"");
            }
            responseObject.remove(""String_Node_Str"");
          }
 else {
            response.setStatusCode(200);
            Log.l(""String_Node_Str"");
          }
          Log.l(""String_Node_Str"" + responseObject.toString());
        }
 catch (        SQLException e) {
          response.setStatusCode(404);
          e.printStackTrace();
          Log.l(""String_Node_Str"");
        }
        response.end(responseObject.toString());
        response.close();
      }
);
    }
 else {
      response=request.response();
      response.putHeader(""String_Node_Str"",""String_Node_Str"");
      response.setStatusCode(405);
      response.end();
      response.close();
    }
  }
).listen(10419);
}",0.9908031882280808
172681,"@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  String week=requestObject.getString(""String_Node_Str"");
  SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"",week,""String_Node_Str"");
  if (resultSet.next()) {
    responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
  }
 else {
    responseObject.put(""String_Node_Str"",404);
  }
  responseObject.put(""String_Node_Str"",array);
  return responseObject;
}","@Override public EasyJsonObject action(Sender sender,int command,EasyJsonObject requestObject) throws SQLException {
  String id=requestObject.getString(""String_Node_Str"");
  String week=requestObject.getString(""String_Node_Str"");
  SafeResultSet resultSet=database.executeQuery(""String_Node_Str"",id,""String_Node_Str"",week,""String_Node_Str"");
  if (resultSet.next()) {
    responseObject.put(""String_Node_Str"",resultSet.getInt(""String_Node_Str""));
  }
 else {
    responseObject.put(""String_Node_Str"",404);
  }
  return responseObject;
}",0.9241748438893844
172682,"/** 
 * Accept anything up to a newline, comma, or comment
 */
private void readFunction(int c,Runnable r) throws IOException {
  boolean endFunction=false;
  State newState=null;
  int posd=0;
  if (c == '\n' || c == ',') {
    endFunction=true;
  }
 else   if (c == '#') {
    endFunction=true;
    newState=this::readHashComment;
  }
 else   if (c == '/') {
    if (peek(0) == '/') {
      endFunction=true;
      newState=this::readSlashSlashComment;
      posd=1;
    }
 else     if (peek(0) == '*') {
      endFunction=true;
      newState=this::readBlockComment;
      posd=1;
    }
  }
  if (endFunction) {
    int end=trimTrailingWhitespaceAndComma(pos - 1,in);
    pos+=posd;
    String ret=listener.function(in,start,end - start);
    byte[] bytes=ret.getBytes(UTF_8);
    valueStart=maybeInitBAOS();
    valueSource=baos;
    valueSource.write(bytes);
    valueEnd=valueSource.size();
    r.run();
    pop();
    if (newState != null) {
      start=pos;
      push(newState);
    }
  }
}","/** 
 * Accept anything up to a newline, comma, or comment
 */
private void readFunction(int c,Runnable r) throws IOException {
  boolean endFunction=false;
  State newState=null;
  int posd=0;
  if (c == '\n' || c == ',') {
    endFunction=true;
  }
 else   if (c == '}' || c == ']') {
    endFunction=true;
    posd=-1;
  }
 else   if (c == '#') {
    endFunction=true;
    newState=this::readHashComment;
  }
 else   if (c == '/') {
    if (peek(0) == '/') {
      endFunction=true;
      newState=this::readSlashSlashComment;
      posd=1;
    }
 else     if (peek(0) == '*') {
      endFunction=true;
      newState=this::readBlockComment;
      posd=1;
    }
  }
  if (endFunction) {
    int end=trimTrailingWhitespaceAndComma(pos - 1,in);
    pos+=posd;
    String ret=listener.function(in,start,end - start);
    byte[] bytes=ret.getBytes(UTF_8);
    valueStart=maybeInitBAOS();
    valueSource=baos;
    valueSource.write(bytes);
    valueEnd=valueSource.size();
    r.run();
    pop();
    if (newState != null) {
      start=pos;
      push(newState);
    }
  }
}",0.9638205499276412
172683,"@Override public String function(byte[] src,int start,int length){
  System.out.println(""String_Node_Str"" + new String(src,start,length,StandardCharsets.UTF_8) + ""String_Node_Str"");
  return ""String_Node_Str"";
}","@Override public String function(byte[] src,int start,int length){
  System.out.println(""String_Node_Str"" + new String(src,start,length,StandardCharsets.UTF_8) + ""String_Node_Str"");
  return new String(src,start,length,StandardCharsets.UTF_8).toUpperCase();
}",0.825531914893617
172684,"@UiThreadTest @Test public void testRejectedOnUiThread(){
synchronized (this.lock_) {
    Promise.reject(new IllegalStateException())._catch(onUiThread(rejected(new Promise.RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
        complete_=true;
      }
    }
)));
    Assert.assertTrue(this.complete_);
  }
}","@UiThreadTest @Test public void testRejectedOnUiThread(){
synchronized (this.lock_) {
    Promise.reject(new IllegalStateException())._catch(onUiThread(rejected(new RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
        complete_=true;
      }
    }
)));
    Assert.assertTrue(this.complete_);
  }
}",0.991578947368421
172685,"@Test public void testRejected() throws Exception {
synchronized (this.lock_) {
    Promise.reject(new IllegalStateException())._catch(onUiThread(rejected(new Promise.RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
synchronized (lock_) {
          complete_=true;
          lock_.notify();
        }
      }
    }
)));
    this.lock_.wait(5000);
    Assert.assertTrue(this.complete_);
  }
}","@Test public void testRejected() throws Exception {
synchronized (this.lock_) {
    Promise.reject(new IllegalStateException())._catch(onUiThread(rejected(new RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
synchronized (lock_) {
          complete_=true;
          lock_.notify();
        }
      }
    }
)));
    this.lock_.wait(5000);
    Assert.assertTrue(this.complete_);
  }
}",0.992818671454219
172686,"@Test public void testResolved() throws Exception {
synchronized (this.lock_) {
    Promise.resolve(10).then(onUiThread(resolved(new Promise.ResolveNoReturn<Integer>(){
      @Override public void resolveNoReturn(      Integer value){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
synchronized (lock_) {
          complete_=true;
          lock_.notify();
        }
      }
    }
)))._catch(onUiThread(rejected(new Promise.RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
      }
    }
)));
    this.lock_.wait(5000);
    Assert.assertTrue(this.complete_);
  }
}","@Test public void testResolved() throws Exception {
synchronized (this.lock_) {
    Promise.resolve(10).then(onUiThread(resolved(new ResolveNoReturn<Integer>(){
      @Override public void resolveNoReturn(      Integer value){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
synchronized (lock_) {
          complete_=true;
          lock_.notify();
        }
      }
    }
)))._catch(onUiThread(rejected(new RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
      }
    }
)));
    this.lock_.wait(5000);
    Assert.assertTrue(this.complete_);
  }
}",0.9882005899705014
172687,"@UiThreadTest @Test public void testResolvedOnUiThread(){
synchronized (this.lock_) {
    Promise.resolve(10).then(onUiThread(resolved(new Promise.ResolveNoReturn<Integer>(){
      @Override public void resolveNoReturn(      Integer value){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
        complete_=true;
      }
    }
)))._catch(onUiThread(rejected(new Promise.RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
      }
    }
)));
    Assert.assertTrue(this.complete_);
  }
}","@UiThreadTest @Test public void testResolvedOnUiThread(){
synchronized (this.lock_) {
    Promise.resolve(10).then(onUiThread(resolved(new ResolveNoReturn<Integer>(){
      @Override public void resolveNoReturn(      Integer value){
        boolean isUiThread=Looper.getMainLooper().getThread().equals(Thread.currentThread());
        Assert.assertTrue(isUiThread);
        complete_=true;
      }
    }
)))._catch(onUiThread(rejected(new RejectNoReturn(){
      @Override public void rejectNoReturn(      Throwable reason){
      }
    }
)));
    Assert.assertTrue(this.complete_);
  }
}",0.9865771812080536
172688,"@Override public void handleMessage(Message msg){
  RejectedOnUIThread onUIThread=(RejectedOnUIThread)msg.obj;
  onUIThread.execute(onUIThread.reason_,onUIThread.cont_);
}","@Override public void handleMessage(Message msg){
  Executor onUIThread=(Executor)msg.obj;
  onUIThread.execute(onUIThread.reason_,onUIThread.cont_);
}",0.8881987577639752
172689,"/** 
 * Factory method that supports using a lambda function. It also removes the need for using the new method so its usage in the Promise statements reads more fluid.
 * @param onRejected      The real handler
 * @return                Promise.OnRejected object
 */
public static Promise.OnRejected onUiThread(@NonNull Promise.OnRejected onRejected){
  return new RejectedOnUIThread(onRejected);
}","/** 
 * Factory method that supports using a lambda function. It also removes the need for using the new method so its usage in the Promise statements reads more fluid.
 * @param onRejected      The real handler
 * @return                Promise.OnRejected object
 */
public static OnRejectedExecutor onUiThread(@NonNull Promise.OnRejected onRejected){
  return new Executor(onRejected);
}",0.9467005076142132
172690,"@Override void execute(Executor executor,final Throwable reason,final ContinuationPromise continuation){
  if (this.isUiThread()) {
    this.execute(reason,continuation);
  }
 else {
    this.reason_=reason;
    this.cont_=continuation;
    this.runOnUiThread();
  }
}","@Override void execute(java.util.concurrent.Executor executor,final Throwable reason,final ContinuationPromise continuation){
  if (this.isUiThread()) {
    this.execute(reason,continuation);
  }
 else {
    this.reason_=reason;
    this.cont_=continuation;
    this.runOnUiThread();
  }
}",0.96229802513465
172691,"public ArrayList<String> getArray(){
  SharedPreferences sp=this.getSharedPreferences(SHARED_PREFS_NAME,Activity.MODE_PRIVATE);
  Set<String> set=sp.getStringSet(""String_Node_Str"",new HashSet<String>());
  return new ArrayList<String>(set);
}","public List<String> getArray(){
  List accounts=passwordDatabase.getAcc();
  return accounts;
}",0.3560830860534125
172692,"public static Bitmap getVectorBitmap(Context context,@DrawableRes int id){
  Drawable drawable=ContextCompat.getDrawable(context,id);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP)   drawable=(DrawableCompat.wrap(drawable)).mutate();
  Bitmap result=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
  Canvas canvas=new Canvas(result);
  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
  drawable.draw(canvas);
  return result;
}","public static Bitmap getVectorBitmap(Context context,@DrawableRes int id){
  Drawable drawable=VectorDrawableCompat.create(context.getResources(),id,context.getTheme());
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP)   drawable=(DrawableCompat.wrap(drawable)).mutate();
  Bitmap result=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
  Canvas canvas=new Canvas(result);
  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
  drawable.draw(canvas);
  return result;
}",0.9224952741020794
172693,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  titleView=findViewById(R.id.title);
  highScoreView=findViewById(R.id.highScore);
  hintView=findViewById(R.id.hint);
  buttonLayout=findViewById(R.id.buttonLayout);
  musicView=findViewById(R.id.music);
  soundView=findViewById(R.id.sound);
  achievementsView=findViewById(R.id.achievements);
  rankView=findViewById(R.id.rank);
  aboutView=findViewById(R.id.about);
  pauseView=findViewById(R.id.pause);
  stopView=findViewById(R.id.stop);
  gameView=findViewById(R.id.game);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    soundPool=new SoundPool.Builder().setMaxStreams(2).setAudioAttributes(new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()).build();
  }
 else   soundPool=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
  explosionId=soundPool.load(this,R.raw.explosion,1);
  explosion2Id=soundPool.load(this,R.raw.explosion_two,1);
  buttonId=soundPool.load(this,R.raw.button,1);
  hissId=soundPool.load(this,R.raw.hiss,1);
  coinId=soundPool.load(this,R.raw.coin,1);
  replenishId=soundPool.load(this,R.raw.replenish,1);
  upgradeId=soundPool.load(this,R.raw.upgrade,1);
  errorId=soundPool.load(this,R.raw.error,1);
  WeaponData.loadSounds(this,soundPool);
  Typeface typeface=FontUtils.getTypeface(this);
  int colorPrimary=ContextCompat.getColor(this,R.color.colorPrimary);
  int colorAccent=ContextCompat.getColor(this,R.color.colorAccent);
  titleView.setTypeface(typeface);
  titleView.setPaintFlags(titleView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
  titleView.getPaint().setShader(new LinearGradient(0,0,0,titleView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  highScoreView.setTypeface(typeface);
  highScoreView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  hintView.setTypeface(typeface);
  hintView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  appName=getString(R.string.app_name);
  hintStart=getString(R.string.hint_start);
  isMusic=prefs.getBoolean(PreferenceUtils.PREF_MUSIC,true);
  musicEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_enabled),colorAccent,colorPrimary);
  musicDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_disabled),colorAccent,colorPrimary);
  musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
  musicView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isMusic=!isMusic;
      prefs.edit().putBoolean(PreferenceUtils.PREF_MUSIC,isMusic).apply();
      musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
      if (isMusic)       player.start();
 else       player.pause();
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  isSound=prefs.getBoolean(PreferenceUtils.PREF_SOUND,true);
  soundEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_enabled),colorAccent,colorPrimary);
  soundDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_disabled),colorAccent,colorPrimary);
  soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
  soundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isSound=!isSound;
      prefs.edit().putBoolean(PreferenceUtils.PREF_SOUND,isSound).apply();
      soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  achievementsView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_achievements),colorAccent,colorPrimary));
  achievementsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  rankView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_rank),colorAccent,colorPrimary));
  rankView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  aboutView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_info),colorAccent,colorPrimary));
  aboutView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!gameView.isPlaying() && (animator == null || !animator.isStarted())) {
        gameView.setOnClickListener(null);
        gameView.playTutorial();
        animateTitle(false);
        if (isSound)         soundPool.play(hissId,1,1,0,0,1);
      }
    }
  }
);
  play=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_play),colorAccent,colorPrimary);
  pause=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_pause),colorAccent,colorPrimary);
  stop=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_stop),colorAccent,colorPrimary);
  pauseView.setImageBitmap(pause);
  pauseView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isPaused=!isPaused;
      if (isPaused) {
        pauseView.setImageBitmap(play);
        stopView.setVisibility(View.VISIBLE);
        gameView.onPause();
      }
 else {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        stopView.setVisibility(View.GONE);
        gameView.onResume();
      }
    }
  }
);
  stopView.setImageBitmap(stop);
  stopView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isPaused) {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        gameView.onResume();
        isPaused=false;
      }
      onStop(gameView.score);
      gameView.stop();
    }
  }
);
  int highScore=prefs.getInt(PreferenceUtils.PREF_HIGH_SCORE,0);
  if (highScore > 0)   highScoreView.setText(String.format(getString(R.string.score_high),highScore));
  player=MediaPlayer.create(this,R.raw.music);
  player.setLooping(true);
  if (isMusic)   player.start();
  handler.postDelayed(hintRunnable,1000);
  gameView.setListener(this);
  if (prefs.getBoolean(PreferenceUtils.PREF_TUTORIAL,true)) {
    prefs.edit().putBoolean(PreferenceUtils.PREF_TUTORIAL,false).apply();
    gameView.playTutorial();
  }
 else {
    gameView.setOnClickListener(this);
    animateTitle(true);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setContentView(R.layout.activity_main);
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  titleView=findViewById(R.id.title);
  highScoreView=findViewById(R.id.highScore);
  hintView=findViewById(R.id.hint);
  buttonLayout=findViewById(R.id.buttonLayout);
  musicView=findViewById(R.id.music);
  soundView=findViewById(R.id.sound);
  achievementsView=findViewById(R.id.achievements);
  rankView=findViewById(R.id.rank);
  aboutView=findViewById(R.id.about);
  pauseView=findViewById(R.id.pause);
  stopView=findViewById(R.id.stop);
  gameView=findViewById(R.id.game);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    soundPool=new SoundPool.Builder().setMaxStreams(2).setAudioAttributes(new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()).build();
  }
 else   soundPool=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
  explosionId=soundPool.load(this,R.raw.explosion,1);
  explosion2Id=soundPool.load(this,R.raw.explosion_two,1);
  buttonId=soundPool.load(this,R.raw.button,1);
  hissId=soundPool.load(this,R.raw.hiss,1);
  coinId=soundPool.load(this,R.raw.coin,1);
  replenishId=soundPool.load(this,R.raw.replenish,1);
  upgradeId=soundPool.load(this,R.raw.upgrade,1);
  errorId=soundPool.load(this,R.raw.error,1);
  WeaponData.loadSounds(this,soundPool);
  Typeface typeface=FontUtils.getTypeface(this);
  int colorPrimary=ContextCompat.getColor(this,R.color.colorPrimary);
  int colorAccent=ContextCompat.getColor(this,R.color.colorAccent);
  titleView.setTypeface(typeface);
  titleView.setPaintFlags(titleView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
  titleView.getPaint().setShader(new LinearGradient(0,0,0,titleView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  highScoreView.setTypeface(typeface);
  highScoreView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  hintView.setTypeface(typeface);
  hintView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  appName=getString(R.string.app_name);
  hintStart=getString(R.string.hint_start);
  isMusic=prefs.getBoolean(PreferenceUtils.PREF_MUSIC,true);
  musicEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_enabled),colorAccent,colorPrimary);
  musicDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_disabled),colorAccent,colorPrimary);
  musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
  musicView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isMusic=!isMusic;
      prefs.edit().putBoolean(PreferenceUtils.PREF_MUSIC,isMusic).apply();
      musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
      if (isMusic)       player.start();
 else       player.pause();
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  isSound=prefs.getBoolean(PreferenceUtils.PREF_SOUND,true);
  soundEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_enabled),colorAccent,colorPrimary);
  soundDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_disabled),colorAccent,colorPrimary);
  soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
  soundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isSound=!isSound;
      prefs.edit().putBoolean(PreferenceUtils.PREF_SOUND,isSound).apply();
      soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  achievementsView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_achievements),colorAccent,colorPrimary));
  achievementsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  rankView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_rank),colorAccent,colorPrimary));
  rankView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  aboutView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_info),colorAccent,colorPrimary));
  aboutView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!gameView.isPlaying() && (animator == null || !animator.isStarted())) {
        gameView.setOnClickListener(null);
        gameView.playTutorial();
        animateTitle(false);
        if (isSound)         soundPool.play(hissId,1,1,0,0,1);
      }
    }
  }
);
  play=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_play),colorAccent,colorPrimary);
  pause=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_pause),colorAccent,colorPrimary);
  stop=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_stop),colorAccent,colorPrimary);
  pauseView.setImageBitmap(pause);
  pauseView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isPaused=!isPaused;
      if (isPaused) {
        pauseView.setImageBitmap(play);
        stopView.setVisibility(View.VISIBLE);
        gameView.onPause();
      }
 else {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        stopView.setVisibility(View.GONE);
        gameView.onResume();
      }
    }
  }
);
  stopView.setImageBitmap(stop);
  stopView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isPaused) {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        gameView.onResume();
        isPaused=false;
      }
      onStop(gameView.score);
      gameView.stop();
    }
  }
);
  int highScore=prefs.getInt(PreferenceUtils.PREF_HIGH_SCORE,0);
  if (highScore > 0)   highScoreView.setText(String.format(getString(R.string.score_high),highScore));
  player=MediaPlayer.create(this,R.raw.music);
  player.setLooping(true);
  if (isMusic)   player.start();
  handler.postDelayed(hintRunnable,1000);
  gameView.setListener(this);
  if (prefs.getBoolean(PreferenceUtils.PREF_TUTORIAL,true)) {
    prefs.edit().putBoolean(PreferenceUtils.PREF_TUTORIAL,false).apply();
    gameView.playTutorial();
  }
 else {
    gameView.setOnClickListener(this);
    animateTitle(true);
  }
}",0.9883636363636364
172694,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setContentView(R.layout.activity_main);
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  titleView=findViewById(R.id.title);
  highScoreView=findViewById(R.id.highScore);
  hintView=findViewById(R.id.hint);
  buttonLayout=findViewById(R.id.buttonLayout);
  musicView=findViewById(R.id.music);
  soundView=findViewById(R.id.sound);
  achievementsView=findViewById(R.id.achievements);
  rankView=findViewById(R.id.rank);
  gamesView=findViewById(R.id.games);
  aboutView=findViewById(R.id.about);
  pauseView=findViewById(R.id.pause);
  stopView=findViewById(R.id.stop);
  gameView=findViewById(R.id.game);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    soundPool=new SoundPool.Builder().setMaxStreams(2).setAudioAttributes(new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()).build();
  }
 else   soundPool=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
  explosionId=soundPool.load(this,R.raw.explosion,1);
  explosion2Id=soundPool.load(this,R.raw.explosion_two,1);
  buttonId=soundPool.load(this,R.raw.button,1);
  hissId=soundPool.load(this,R.raw.hiss,1);
  replenishId=soundPool.load(this,R.raw.replenish,1);
  upgradeId=soundPool.load(this,R.raw.upgrade,1);
  errorId=soundPool.load(this,R.raw.error,1);
  WeaponData.loadSounds(this,soundPool);
  Typeface typeface=FontUtils.getTypeface(this);
  int colorPrimary=ContextCompat.getColor(this,R.color.colorPrimary);
  int colorAccent=ContextCompat.getColor(this,R.color.colorAccent);
  titleView.setTypeface(typeface);
  titleView.setPaintFlags(titleView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
  titleView.getPaint().setShader(new LinearGradient(0,0,0,titleView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  highScoreView.setTypeface(typeface);
  highScoreView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  hintView.setTypeface(typeface);
  hintView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  appName=getString(R.string.app_name);
  hintStart=getString(R.string.hint_start);
  isMusic=prefs.getBoolean(PreferenceUtils.PREF_MUSIC,true);
  musicEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_enabled),colorAccent,colorPrimary);
  musicDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_disabled),colorAccent,colorPrimary);
  musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
  musicView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isMusic=!isMusic;
      prefs.edit().putBoolean(PreferenceUtils.PREF_MUSIC,isMusic).apply();
      musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
      if (isMusic)       player.start();
 else       player.pause();
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  isSound=prefs.getBoolean(PreferenceUtils.PREF_SOUND,true);
  soundEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_enabled),colorAccent,colorPrimary);
  soundDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_disabled),colorAccent,colorPrimary);
  soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
  soundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isSound=!isSound;
      prefs.edit().putBoolean(PreferenceUtils.PREF_SOUND,isSound).apply();
      soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  achievementsView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_achievements),colorAccent,colorPrimary));
  achievementsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivityForResult(Games.Achievements.getAchievementsIntent(apiClient),0);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  rankView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_rank),colorAccent,colorPrimary));
  rankView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivityForResult(Games.Leaderboards.getLeaderboardIntent(apiClient,getString(R.string.leaderboard_high_score)),0);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  gamesView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_game),colorAccent,colorPrimary));
  gamesView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (apiClient != null) {
        if (apiClient.isConnected()) {
          new AlertDialog.Builder(MainActivity.this).setTitle(R.string.title_sign_out).setMessage(R.string.msg_sign_out).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialogInterface,            int i){
              Games.signOut(apiClient);
              if (apiClient.isConnected())               apiClient.disconnect();
              achievementsView.setVisibility(View.GONE);
              rankView.setVisibility(View.GONE);
              dialogInterface.dismiss();
            }
          }
).setNegativeButton(android.R.string.no,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialogInterface,            int i){
              dialogInterface.dismiss();
            }
          }
).create().show();
        }
 else         apiClient.connect();
      }
    }
  }
);
  aboutView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_info),colorAccent,colorPrimary));
  aboutView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!gameView.isPlaying() && (animator == null || !animator.isStarted())) {
        gameView.setOnClickListener(null);
        gameView.playTutorial();
        animateTitle(false);
        if (isSound)         soundPool.play(hissId,1,1,0,0,1);
      }
    }
  }
);
  play=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_play),colorAccent,colorPrimary);
  pause=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_pause),colorAccent,colorPrimary);
  stop=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_stop),colorAccent,colorPrimary);
  pauseView.setImageBitmap(pause);
  pauseView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isPaused=!isPaused;
      if (isPaused) {
        pauseView.setImageBitmap(play);
        stopView.setVisibility(View.VISIBLE);
        gameView.onPause();
      }
 else {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        stopView.setVisibility(View.GONE);
        gameView.onResume();
      }
    }
  }
);
  stopView.setImageBitmap(stop);
  stopView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isPaused) {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        gameView.onResume();
        isPaused=false;
      }
      onStop(gameView.score);
      gameView.stop();
    }
  }
);
  int highScore=prefs.getInt(PreferenceUtils.PREF_HIGH_SCORE,0);
  if (highScore > 0)   highScoreView.setText(String.format(getString(R.string.score_high),highScore));
  player=MediaPlayer.create(this,R.raw.music);
  player.setLooping(true);
  if (isMusic)   player.start();
  handler.postDelayed(hintRunnable,1000);
  gameView.setListener(this);
  if (prefs.getBoolean(PreferenceUtils.PREF_TUTORIAL,true)) {
    gameView.playTutorial();
    buttonLayout.setVisibility(View.GONE);
    pauseView.setVisibility(View.VISIBLE);
    stopView.setVisibility(View.GONE);
  }
 else {
    gameView.setOnClickListener(this);
    animateTitle(true);
    apiClient=new GoogleApiClient.Builder(this).addConnectionCallbacks(this).addOnConnectionFailedListener(this).addApi(Games.API).addScope(Games.SCOPE_GAMES).build();
    apiClient.connect();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setContentView(R.layout.activity_main);
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  titleView=findViewById(R.id.title);
  highScoreView=findViewById(R.id.highScore);
  hintView=findViewById(R.id.hint);
  buttonLayout=findViewById(R.id.buttonLayout);
  musicView=findViewById(R.id.music);
  soundView=findViewById(R.id.sound);
  achievementsView=findViewById(R.id.achievements);
  rankView=findViewById(R.id.rank);
  gamesView=findViewById(R.id.games);
  aboutView=findViewById(R.id.about);
  pauseView=findViewById(R.id.pause);
  stopView=findViewById(R.id.stop);
  gameView=findViewById(R.id.game);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    soundPool=new SoundPool.Builder().setMaxStreams(2).setAudioAttributes(new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()).build();
  }
 else   soundPool=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
  explosionId=soundPool.load(this,R.raw.explosion,1);
  explosion2Id=soundPool.load(this,R.raw.explosion_two,1);
  buttonId=soundPool.load(this,R.raw.button,1);
  hissId=soundPool.load(this,R.raw.hiss,1);
  replenishId=soundPool.load(this,R.raw.replenish,1);
  upgradeId=soundPool.load(this,R.raw.upgrade,1);
  errorId=soundPool.load(this,R.raw.error,1);
  WeaponData.loadSounds(this,soundPool);
  Typeface typeface=FontUtils.getTypeface(this);
  int colorPrimary=ContextCompat.getColor(this,R.color.colorPrimary);
  int colorAccent=ContextCompat.getColor(this,R.color.colorAccent);
  titleView.setTypeface(typeface);
  titleView.setPaintFlags(titleView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
  titleView.getPaint().setShader(new LinearGradient(0,0,0,titleView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  highScoreView.setTypeface(typeface);
  highScoreView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  hintView.setTypeface(typeface);
  hintView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  appName=getString(R.string.app_name);
  hintStart=getString(R.string.hint_start);
  isMusic=prefs.getBoolean(PreferenceUtils.PREF_MUSIC,true);
  musicEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_enabled),colorAccent,colorPrimary);
  musicDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_disabled),colorAccent,colorPrimary);
  musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
  musicView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isMusic=!isMusic;
      prefs.edit().putBoolean(PreferenceUtils.PREF_MUSIC,isMusic).apply();
      musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
      if (isMusic)       player.start();
 else       player.pause();
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  isSound=prefs.getBoolean(PreferenceUtils.PREF_SOUND,true);
  soundEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_enabled),colorAccent,colorPrimary);
  soundDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_disabled),colorAccent,colorPrimary);
  soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
  soundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isSound=!isSound;
      prefs.edit().putBoolean(PreferenceUtils.PREF_SOUND,isSound).apply();
      soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  achievementsView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_achievements),colorAccent,colorPrimary));
  achievementsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivityForResult(Games.Achievements.getAchievementsIntent(apiClient),0);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  rankView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_rank),colorAccent,colorPrimary));
  rankView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivityForResult(Games.Leaderboards.getLeaderboardIntent(apiClient,getString(R.string.leaderboard_high_score)),0);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  gamesView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_game),colorAccent,colorPrimary));
  gamesView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (apiClient != null) {
        if (apiClient.isConnected()) {
          new AlertDialog.Builder(MainActivity.this).setTitle(R.string.title_sign_out).setMessage(R.string.msg_sign_out).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialogInterface,            int i){
              Games.signOut(apiClient);
              if (apiClient.isConnected())               apiClient.disconnect();
              achievementsView.setVisibility(View.GONE);
              rankView.setVisibility(View.GONE);
              dialogInterface.dismiss();
            }
          }
).setNegativeButton(android.R.string.no,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialogInterface,            int i){
              dialogInterface.dismiss();
            }
          }
).create().show();
        }
 else         apiClient.connect();
      }
    }
  }
);
  aboutView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_info),colorAccent,colorPrimary));
  aboutView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!gameView.isPlaying() && (animator == null || !animator.isStarted())) {
        gameView.setOnClickListener(null);
        gameView.playTutorial();
        animateTitle(false);
        if (isSound)         soundPool.play(hissId,1,1,0,0,1);
      }
    }
  }
);
  play=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_play),colorAccent,colorPrimary);
  pause=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_pause),colorAccent,colorPrimary);
  stop=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_stop),colorAccent,colorPrimary);
  pauseView.setImageBitmap(pause);
  pauseView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isPaused=!isPaused;
      if (isPaused) {
        pauseView.setImageBitmap(play);
        if (!gameView.isTutorial())         stopView.setVisibility(View.VISIBLE);
        gameView.onPause();
      }
 else {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        stopView.setVisibility(View.GONE);
        gameView.onResume();
      }
    }
  }
);
  stopView.setImageBitmap(stop);
  stopView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isPaused) {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        gameView.onResume();
        isPaused=false;
      }
      onStop(gameView.score);
      gameView.stop();
    }
  }
);
  int highScore=prefs.getInt(PreferenceUtils.PREF_HIGH_SCORE,0);
  if (highScore > 0)   highScoreView.setText(String.format(getString(R.string.score_high),highScore));
  player=MediaPlayer.create(this,R.raw.music);
  player.setLooping(true);
  if (isMusic)   player.start();
  handler.postDelayed(hintRunnable,1000);
  gameView.setListener(this);
  if (prefs.getBoolean(PreferenceUtils.PREF_TUTORIAL,true)) {
    gameView.playTutorial();
    buttonLayout.setVisibility(View.GONE);
    pauseView.setVisibility(View.VISIBLE);
    stopView.setVisibility(View.GONE);
  }
 else {
    gameView.setOnClickListener(this);
    animateTitle(true);
    apiClient=new GoogleApiClient.Builder(this).addConnectionCallbacks(this).addOnConnectionFailedListener(this).addApi(Games.API).addScope(Games.SCOPE_GAMES).build();
    apiClient.connect();
  }
}",0.997924114865644
172695,"@Override public boolean onTouch(View v,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    if (System.currentTimeMillis() - projectileTime < 350 && (!isTutorial || isUpgraded)) {
      if (ammoAnimator != null && ammoAnimator.isStarted())       ammoAnimator.end();
      if (ammo > 0) {
        weapon.fire(projectiles,shipPositionX,shipBitmap.getHeight() * shipPositionY * 1.5f);
        if (listener != null)         listener.onProjectileFired(weapon);
        ammoAnimator=ValueAnimator.ofFloat(ammo,ammo - 1);
        ammoAnimator.setDuration(500);
        ammoAnimator.setInterpolator(new DecelerateInterpolator());
        ammoAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
          @Override public void onAnimationUpdate(          ValueAnimator valueAnimator){
            ammo=(float)valueAnimator.getAnimatedValue();
          }
        }
);
        ammoAnimator.start();
      }
 else       if (isTutorial) {
        FontUtils.toast(getContext(),""String_Node_Str"");
        FontUtils.toast(getContext(),""String_Node_Str"");
        boxes.add(new BoxData(boxBitmap,new BoxData.BoxOpenedListener(){
          @Override public void onBoxOpened(          BoxData box){
            isReplenished=true;
            new Handler(Looper.getMainLooper()).post(new Runnable(){
              @Override public void run(){
                ammoAnimator=ValueAnimator.ofFloat(ammo,weapon.capacity);
                ammoAnimator.setDuration(500);
                ammoAnimator.setInterpolator(new DecelerateInterpolator());
                ammoAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
                  @Override public void onAnimationUpdate(                  ValueAnimator valueAnimator){
                    ammo=(float)valueAnimator.getAnimatedValue();
                  }
                }
);
                ammoAnimator.start();
                if (listener != null)                 listener.onAmmoReplenished();
              }
            }
);
          }
        }
));
      }
 else       if (listener != null)       listener.onOutOfAmmo();
      return false;
    }
 else     projectileTime=System.currentTimeMillis();
  if (animator != null && animator.isStarted())   animator.cancel();
if (event.getX() > getWidth() / 2) {
  if (shipPositionX < 1)   animator=ValueAnimator.ofFloat(shipPositionX,shipPositionX + 1);
 else   return false;
}
 else if (shipPositionX > 0) animator=ValueAnimator.ofFloat(shipPositionX,shipPositionX - 1);
animator.setDuration((long)(2000 / speed));
animator.setStartDelay(50);
animator.setInterpolator(new AccelerateInterpolator());
animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
@Override public void onAnimationUpdate(ValueAnimator valueAnimator){
float newX=(float)valueAnimator.getAnimatedValue();
if (newX <= 0) shipPositionX=0;
 else if (newX >= 1) shipPositionX=1;
 else shipPositionX=newX;
}
}
);
animator.start();
shipPositionStartX=shipPositionX;
break;
case MotionEvent.ACTION_UP:
if (animator != null && animator.isStarted()) animator.cancel();
if (isTutorial && !isMoved) {
if (System.currentTimeMillis() - projectileTime > 500) isMoved=true;
 else FontUtils.toast(getContext(),""String_Node_Str"");
}
float newX=shipPositionX + ((shipPositionX - shipPositionStartX) / 1.5f);
if (newX <= 0) newX=0;
 else if (newX >= 1) newX=1;
animator=ValueAnimator.ofFloat(shipPositionX,newX);
animator.setInterpolator(new DecelerateInterpolator());
animator.setDuration((long)(1000 / speed));
animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
@Override public void onAnimationUpdate(ValueAnimator valueAnimator){
float newX=(float)valueAnimator.getAnimatedValue();
if (newX <= 0) shipPositionX=0;
 else if (newX >= 1) shipPositionX=1;
 else shipPositionX=newX;
}
}
);
animator.start();
break;
}
return true;
}","@Override public boolean onTouch(View v,MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    if (System.currentTimeMillis() - projectileTime < 350 && (!isTutorial || isUpgraded)) {
      if (ammoAnimator != null && ammoAnimator.isStarted())       ammoAnimator.end();
      if (ammo > 0) {
        weapon.fire(projectiles,shipPositionX,shipBitmap.getHeight() * shipPositionY * 1.5f);
        if (listener != null)         listener.onProjectileFired(weapon);
        ammoAnimator=ValueAnimator.ofFloat(ammo,ammo - 1);
        ammoAnimator.setDuration(500);
        ammoAnimator.setInterpolator(new DecelerateInterpolator());
        ammoAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
          @Override public void onAnimationUpdate(          ValueAnimator valueAnimator){
            ammo=(float)valueAnimator.getAnimatedValue();
          }
        }
);
        ammoAnimator.start();
      }
 else       if (isTutorial && boxes.size() == 0) {
        FontUtils.toast(getContext(),""String_Node_Str"");
        FontUtils.toast(getContext(),""String_Node_Str"");
        boxes.add(new BoxData(boxBitmap,new BoxData.BoxOpenedListener(){
          @Override public void onBoxOpened(          BoxData box){
            isReplenished=true;
            new Handler(Looper.getMainLooper()).post(new Runnable(){
              @Override public void run(){
                ammoAnimator=ValueAnimator.ofFloat(ammo,weapon.capacity);
                ammoAnimator.setDuration(500);
                ammoAnimator.setInterpolator(new DecelerateInterpolator());
                ammoAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
                  @Override public void onAnimationUpdate(                  ValueAnimator valueAnimator){
                    ammo=(float)valueAnimator.getAnimatedValue();
                  }
                }
);
                ammoAnimator.start();
                if (listener != null)                 listener.onAmmoReplenished();
              }
            }
);
          }
        }
));
      }
 else       if (listener != null)       listener.onOutOfAmmo();
      return false;
    }
 else     projectileTime=System.currentTimeMillis();
  if (animator != null && animator.isStarted())   animator.cancel();
if (event.getX() > getWidth() / 2) {
  if (shipPositionX < 1)   animator=ValueAnimator.ofFloat(shipPositionX,shipPositionX + 1);
 else   return false;
}
 else if (shipPositionX > 0) animator=ValueAnimator.ofFloat(shipPositionX,shipPositionX - 1);
animator.setDuration((long)(2000 / speed));
animator.setStartDelay(50);
animator.setInterpolator(new AccelerateInterpolator());
animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
@Override public void onAnimationUpdate(ValueAnimator valueAnimator){
float newX=(float)valueAnimator.getAnimatedValue();
if (newX <= 0) shipPositionX=0;
 else if (newX >= 1) shipPositionX=1;
 else shipPositionX=newX;
}
}
);
animator.start();
shipPositionStartX=shipPositionX;
break;
case MotionEvent.ACTION_UP:
if (animator != null && animator.isStarted()) animator.cancel();
if (isTutorial && !isMoved) {
if (System.currentTimeMillis() - projectileTime > 500) isMoved=true;
 else FontUtils.toast(getContext(),""String_Node_Str"");
}
float newX=shipPositionX + ((shipPositionX - shipPositionStartX) / 1.5f);
if (newX <= 0) newX=0;
 else if (newX >= 1) newX=1;
animator=ValueAnimator.ofFloat(shipPositionX,newX);
animator.setInterpolator(new DecelerateInterpolator());
animator.setDuration((long)(1000 / speed));
animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
@Override public void onAnimationUpdate(ValueAnimator valueAnimator){
float newX=(float)valueAnimator.getAnimatedValue();
if (newX <= 0) shipPositionX=0;
 else if (newX >= 1) shipPositionX=1;
 else shipPositionX=newX;
}
}
);
animator.start();
break;
}
return true;
}",0.9972955569864778
172696,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  titleView=findViewById(R.id.title);
  highScoreView=findViewById(R.id.highScore);
  hintView=findViewById(R.id.hint);
  buttonLayout=findViewById(R.id.buttonLayout);
  musicView=findViewById(R.id.music);
  soundView=findViewById(R.id.sound);
  achievementsView=findViewById(R.id.achievements);
  rankView=findViewById(R.id.rank);
  aboutView=findViewById(R.id.about);
  pauseView=findViewById(R.id.pause);
  stopView=findViewById(R.id.stop);
  gameView=findViewById(R.id.game);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    soundPool=new SoundPool.Builder().setMaxStreams(2).setAudioAttributes(new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()).build();
  }
 else   soundPool=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
  explosionId=soundPool.load(this,R.raw.explosion,1);
  explosion2Id=soundPool.load(this,R.raw.explosion_two,1);
  buttonId=soundPool.load(this,R.raw.button,1);
  hissId=soundPool.load(this,R.raw.hiss,1);
  coinId=soundPool.load(this,R.raw.coin,1);
  replenishId=soundPool.load(this,R.raw.replenish,1);
  upgradeId=soundPool.load(this,R.raw.upgrade,1);
  errorId=soundPool.load(this,R.raw.error,1);
  WeaponData.loadSounds(this,soundPool);
  Typeface typeface=FontUtils.getTypeface(this);
  int colorPrimary=ContextCompat.getColor(this,R.color.colorPrimary);
  int colorAccent=ContextCompat.getColor(this,R.color.colorAccent);
  titleView.setTypeface(typeface);
  titleView.setPaintFlags(titleView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
  titleView.getPaint().setShader(new LinearGradient(0,0,0,titleView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  highScoreView.setTypeface(typeface);
  highScoreView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  hintView.setTypeface(typeface);
  hintView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  appName=getString(R.string.app_name);
  hintStart=getString(R.string.hint_start);
  isMusic=prefs.getBoolean(PreferenceUtils.PREF_MUSIC,true);
  musicEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_enabled),colorAccent,colorPrimary);
  musicDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_disabled),colorAccent,colorPrimary);
  musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
  musicView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isMusic=!isMusic;
      prefs.edit().putBoolean(PreferenceUtils.PREF_MUSIC,isMusic).apply();
      musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
      if (isMusic)       player.start();
 else       player.pause();
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  isSound=prefs.getBoolean(PreferenceUtils.PREF_SOUND,true);
  soundEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_enabled),colorAccent,colorPrimary);
  soundDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_disabled),colorAccent,colorPrimary);
  soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
  soundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isSound=!isSound;
      prefs.edit().putBoolean(PreferenceUtils.PREF_SOUND,isSound).apply();
      soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  achievementsView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_achievements),colorAccent,colorPrimary));
  achievementsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  rankView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_rank),colorAccent,colorPrimary));
  rankView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  aboutView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_info),colorAccent,colorPrimary));
  aboutView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!gameView.isPlaying() && (animator == null || !animator.isStarted())) {
        gameView.setOnClickListener(null);
        gameView.playTutorial();
        animateTitle(false);
        if (isSound)         soundPool.play(hissId,1,1,0,0,1);
      }
    }
  }
);
  play=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_play),colorAccent,colorPrimary);
  pause=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_pause),colorAccent,colorPrimary);
  stop=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_stop),colorAccent,colorPrimary);
  pauseView.setImageBitmap(pause);
  pauseView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isPaused=!isPaused;
      if (isPaused) {
        pauseView.setImageBitmap(play);
        stopView.setVisibility(View.VISIBLE);
        gameView.onPause();
      }
 else {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        stopView.setVisibility(View.GONE);
        gameView.onResume();
      }
    }
  }
);
  stopView.setImageBitmap(stop);
  stopView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isPaused) {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        gameView.onResume();
        isPaused=false;
      }
      gameView.stop();
      onStop(0);
    }
  }
);
  int highScore=prefs.getInt(PreferenceUtils.PREF_HIGH_SCORE,0);
  if (highScore > 0)   highScoreView.setText(String.format(getString(R.string.score_high),highScore));
  player=MediaPlayer.create(this,R.raw.music);
  player.setLooping(true);
  if (isMusic)   player.start();
  handler.postDelayed(hintRunnable,1000);
  gameView.setListener(this);
  if (prefs.getBoolean(PreferenceUtils.PREF_TUTORIAL,true)) {
    prefs.edit().putBoolean(PreferenceUtils.PREF_TUTORIAL,false).apply();
    gameView.playTutorial();
  }
 else {
    gameView.setOnClickListener(this);
    animateTitle(true);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  titleView=findViewById(R.id.title);
  highScoreView=findViewById(R.id.highScore);
  hintView=findViewById(R.id.hint);
  buttonLayout=findViewById(R.id.buttonLayout);
  musicView=findViewById(R.id.music);
  soundView=findViewById(R.id.sound);
  achievementsView=findViewById(R.id.achievements);
  rankView=findViewById(R.id.rank);
  aboutView=findViewById(R.id.about);
  pauseView=findViewById(R.id.pause);
  stopView=findViewById(R.id.stop);
  gameView=findViewById(R.id.game);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    soundPool=new SoundPool.Builder().setMaxStreams(2).setAudioAttributes(new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_MUSIC).build()).build();
  }
 else   soundPool=new SoundPool(2,AudioManager.STREAM_MUSIC,0);
  explosionId=soundPool.load(this,R.raw.explosion,1);
  explosion2Id=soundPool.load(this,R.raw.explosion_two,1);
  buttonId=soundPool.load(this,R.raw.button,1);
  hissId=soundPool.load(this,R.raw.hiss,1);
  coinId=soundPool.load(this,R.raw.coin,1);
  replenishId=soundPool.load(this,R.raw.replenish,1);
  upgradeId=soundPool.load(this,R.raw.upgrade,1);
  errorId=soundPool.load(this,R.raw.error,1);
  WeaponData.loadSounds(this,soundPool);
  Typeface typeface=FontUtils.getTypeface(this);
  int colorPrimary=ContextCompat.getColor(this,R.color.colorPrimary);
  int colorAccent=ContextCompat.getColor(this,R.color.colorAccent);
  titleView.setTypeface(typeface);
  titleView.setPaintFlags(titleView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
  titleView.getPaint().setShader(new LinearGradient(0,0,0,titleView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  highScoreView.setTypeface(typeface);
  highScoreView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  hintView.setTypeface(typeface);
  hintView.getPaint().setShader(new LinearGradient(0,0,0,hintView.getLineHeight(),colorAccent,colorPrimary,Shader.TileMode.REPEAT));
  appName=getString(R.string.app_name);
  hintStart=getString(R.string.hint_start);
  isMusic=prefs.getBoolean(PreferenceUtils.PREF_MUSIC,true);
  musicEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_enabled),colorAccent,colorPrimary);
  musicDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_music_disabled),colorAccent,colorPrimary);
  musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
  musicView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isMusic=!isMusic;
      prefs.edit().putBoolean(PreferenceUtils.PREF_MUSIC,isMusic).apply();
      musicView.setImageBitmap(isMusic ? musicEnabled : musicDisabled);
      if (isMusic)       player.start();
 else       player.pause();
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  isSound=prefs.getBoolean(PreferenceUtils.PREF_SOUND,true);
  soundEnabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_enabled),colorAccent,colorPrimary);
  soundDisabled=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_sound_disabled),colorAccent,colorPrimary);
  soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
  soundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isSound=!isSound;
      prefs.edit().putBoolean(PreferenceUtils.PREF_SOUND,isSound).apply();
      soundView.setImageBitmap(isSound ? soundEnabled : soundDisabled);
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  achievementsView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_achievements),colorAccent,colorPrimary));
  achievementsView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  rankView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_rank),colorAccent,colorPrimary));
  rankView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSound)       soundPool.play(buttonId,1,1,0,0,1);
    }
  }
);
  aboutView.setImageBitmap(ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_info),colorAccent,colorPrimary));
  aboutView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!gameView.isPlaying() && (animator == null || !animator.isStarted())) {
        gameView.setOnClickListener(null);
        gameView.playTutorial();
        animateTitle(false);
        if (isSound)         soundPool.play(hissId,1,1,0,0,1);
      }
    }
  }
);
  play=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_play),colorAccent,colorPrimary);
  pause=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_pause),colorAccent,colorPrimary);
  stop=ImageUtils.gradientBitmap(ImageUtils.getVectorBitmap(this,R.drawable.ic_stop),colorAccent,colorPrimary);
  pauseView.setImageBitmap(pause);
  pauseView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      isPaused=!isPaused;
      if (isPaused) {
        pauseView.setImageBitmap(play);
        stopView.setVisibility(View.VISIBLE);
        gameView.onPause();
      }
 else {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        stopView.setVisibility(View.GONE);
        gameView.onResume();
      }
    }
  }
);
  stopView.setImageBitmap(stop);
  stopView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isPaused) {
        pauseView.setImageBitmap(pause);
        pauseView.setAlpha(1f);
        gameView.onResume();
        isPaused=false;
      }
      onStop(gameView.score);
      gameView.stop();
    }
  }
);
  int highScore=prefs.getInt(PreferenceUtils.PREF_HIGH_SCORE,0);
  if (highScore > 0)   highScoreView.setText(String.format(getString(R.string.score_high),highScore));
  player=MediaPlayer.create(this,R.raw.music);
  player.setLooping(true);
  if (isMusic)   player.start();
  handler.postDelayed(hintRunnable,1000);
  gameView.setListener(this);
  if (prefs.getBoolean(PreferenceUtils.PREF_TUTORIAL,true)) {
    prefs.edit().putBoolean(PreferenceUtils.PREF_TUTORIAL,false).apply();
    gameView.playTutorial();
  }
 else {
    gameView.setOnClickListener(this);
    animateTitle(true);
  }
}",0.9955071076084556
172697,"public static void toast(Context context,String message){
  TextView textView=new TextView(context);
  textView.setText(message);
  textView.setTypeface(getTypeface(context));
  textView.getPaint().setShader(new LinearGradient(0,0,0,textView.getLineHeight(),ContextCompat.getColor(context,R.color.colorAccent),ContextCompat.getColor(context,R.color.colorPrimary),Shader.TileMode.REPEAT));
  Toast toast=new Toast(context);
  toast.setView(textView);
  toast.setDuration(Toast.LENGTH_SHORT);
  toast.show();
}","public static void toast(Context context,String message){
  TextView textView=new TextView(context);
  textView.setText(message);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1)   textView.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
  textView.setTypeface(getTypeface(context));
  textView.getPaint().setShader(new LinearGradient(0,0,0,textView.getLineHeight(),ContextCompat.getColor(context,R.color.colorAccent),ContextCompat.getColor(context,R.color.colorPrimary),Shader.TileMode.REPEAT));
  Toast toast=new Toast(context);
  toast.setView(textView);
  toast.setDuration(message.length() > 40 ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT);
  toast.show();
}",0.8581081081081081
172698,"public void stop(){
  isPlaying=false;
  setOnTouchListener(null);
  if (animator != null && animator.isStarted())   animator.cancel();
  ValueAnimator animator=ValueAnimator.ofFloat(shipPositionY,-1f);
  animator.setDuration(2000);
  animator.setInterpolator(new DecelerateInterpolator());
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      shipPositionY=(float)valueAnimator.getAnimatedValue();
      shipRotation=720 * valueAnimator.getAnimatedFraction();
    }
  }
);
  if (isTutorial) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        FontUtils.toast(getContext(),""String_Node_Str"");
        play();
      }
    }
);
  }
  animator.start();
  ValueAnimator animator1=ValueAnimator.ofFloat(speed,1);
  animator1.setInterpolator(new DecelerateInterpolator());
  animator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      speed=(float)valueAnimator.getAnimatedValue();
    }
  }
);
  animator1.start();
}","public void stop(){
  isPlaying=false;
  isTutorial=false;
  setOnTouchListener(null);
  if (animator != null && animator.isStarted())   animator.cancel();
  ValueAnimator animator=ValueAnimator.ofFloat(shipPositionY,-1f);
  animator.setDuration(2000);
  animator.setInterpolator(new DecelerateInterpolator());
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      shipPositionY=(float)valueAnimator.getAnimatedValue();
      shipRotation=720 * valueAnimator.getAnimatedFraction();
    }
  }
);
  if (isTutorial) {
    animator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        FontUtils.toast(getContext(),""String_Node_Str"");
        play();
      }
    }
);
  }
  animator.start();
  ValueAnimator animator1=ValueAnimator.ofFloat(speed,1);
  animator1.setInterpolator(new DecelerateInterpolator());
  animator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      speed=(float)valueAnimator.getAnimatedValue();
    }
  }
);
  animator1.start();
}",0.991701244813278
172699,"public static void toast(Context context,String message){
  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();
}","public static void toast(Context context,String message){
  TextView textView=new TextView(context);
  textView.setText(message);
  textView.setTypeface(getTypeface(context));
  textView.getPaint().setShader(new LinearGradient(0,0,0,textView.getLineHeight(),ContextCompat.getColor(context,R.color.colorAccent),ContextCompat.getColor(context,R.color.colorPrimary),Shader.TileMode.REPEAT));
  Toast toast=new Toast(context);
  toast.setView(textView);
  toast.setDuration(Toast.LENGTH_SHORT);
  toast.show();
}",0.2929936305732484
172700,"@Override public void onBoxOpened(){
  ammoAnimator=ValueAnimator.ofFloat(ammo,Math.min(ammo + 5,weapon.capacity));
  ammoAnimator.setDuration(500);
  ammoAnimator.setInterpolator(new DecelerateInterpolator());
  ammoAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      ammo=(float)valueAnimator.getAnimatedValue();
    }
  }
);
  ammoAnimator.start();
}","@Override public void onBoxOpened(){
  ammoAnimator=ValueAnimator.ofFloat(ammo,Math.min(ammo + 5,weapon.capacity));
  ammoAnimator.setDuration(500);
  ammoAnimator.setInterpolator(new DecelerateInterpolator());
  ammoAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      ammo=(float)valueAnimator.getAnimatedValue();
    }
  }
);
  ammoAnimator.start();
  new Handler(Looper.getMainLooper()).post(new Runnable(){
    @Override public void run(){
      if (listener != null)       listener.onAmmoReplenished();
    }
  }
);
}",0.8436632747456059
172701,"@Override public int compareTo(final UniqueId other){
  if (other == null) {
    throw new NullPointerException();
  }
  byte[] byteArray=toByteArray();
  byte[] otherByteArray=other.toByteArray();
  for (int i=0; i < 12; i++) {
    if (byteArray[i] != otherByteArray[i]) {
      return ((byteArray[i] & 0xff) < (otherByteArray[i] & 0xff)) ? -1 : 1;
    }
  }
  return 0;
}","@Override public int compareTo(final UniqueId other){
  if (other == null) {
    throw new NullPointerException();
  }
  byte[] byteArray=toByteArray();
  byte[] otherByteArray=other.toByteArray();
  for (int i=0; i < 15; i++) {
    if (byteArray[i] != otherByteArray[i]) {
      return ((byteArray[i] & 0xff) < (otherByteArray[i] & 0xff)) ? -1 : 1;
    }
  }
  return 0;
}",0.9973190348525468
172702,"public Set<String> doTest(){
  UniqueId uniqueId=UniqueId.get();
  String uniqueId20=null;
  String uniqueId30=null;
  for (int i=0; i < count; i++) {
    uniqueId20=UniqueId.get().toBase64String();
    Assert.assertTrue(""String_Node_Str"" + uniqueId20,20 == uniqueId20.length());
  }
  for (int i=0; i < count; i++) {
    uniqueId30=UniqueId.get().toHexString();
    Assert.assertTrue(""String_Node_Str"" + uniqueId30,30 == uniqueId30.length());
  }
  long begin=System.currentTimeMillis();
  for (int i=0; i < count; i++) {
    uniqueId20=UniqueId.get().toBase64String();
  }
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ (end - begin)+ ""String_Node_Str""+ (end - begin) / 1000);
  System.out.println(""String_Node_Str"" + count * 1000L / ((end - begin)));
  for (int i=0; i < count; i++) {
    UniqueId temp=null;
    temp=UniqueId.get();
    uniqueId30=temp.toHexString();
    uniqueId20=temp.toBase64String();
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(UUID.randomUUID().toString().substring(0,30)));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(UUID.randomUUID().toString()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(uniqueId30));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(uniqueId20));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,uniqueId30.equals(UniqueId.fromBase64String(uniqueId20).toHexString()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,uniqueId30.equals(UniqueId.fromByteArray(temp.toByteArray()).toHexString()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getTimestamp() == UniqueId.fromBase64String(uniqueId20).getTimestamp());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.getCurrentTimeStamp() >= UniqueId.fromBase64String(uniqueId20).getTimestamp());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getMachineIdentifier() == UniqueId.fromBase64String(uniqueId20).getMachineIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.getGeneratedMachineIdentifier() == UniqueId.fromBase64String(uniqueId20).getMachineIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getProcessIdentifier() == UniqueId.fromBase64String(uniqueId20).getProcessIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.getGeneratedProcessIdentifier() == UniqueId.fromBase64String(uniqueId20).getProcessIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getCounter() == UniqueId.fromBase64String(uniqueId20).getCounter());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getDate().getTime() == UniqueId.fromBase64String(uniqueId20).getDate().getTime());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).equals(UniqueId.fromBase64String(uniqueId20)));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).compareTo(UniqueId.fromBase64String(uniqueId20)) == 0);
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).toString().equals(UniqueId.fromBase64String(uniqueId20).toBase64String()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(temp));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(null));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(""String_Node_Str""));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).hashCode() == UniqueId.fromBase64String(uniqueId20).hashCode());
    Assert.assertFalse(UniqueId.fromHexString(uniqueId30).equals(UniqueId.get()));
    UniqueId.getCurrentCounter();
    temp.getCurrentCounter();
    temp.getCurrentTimeStamp();
    temp.getGeneratedMachineIdentifier();
    temp.getGeneratedProcessIdentifier();
  }
  Set<String> set=new HashSet<String>(count);
  for (int i=0; i < count; i++) {
    uniqueId20=UniqueId.get().toBase64String();
    set.add(uniqueId20);
  }
  int size=set.size();
  Assert.assertTrue(""String_Node_Str"" + uniqueId20,size == count);
  Assert.assertTrue(uniqueId.compareTo(UniqueId.get()) != 0);
  return set;
}","public Set<String> doTest(){
  UniqueId uniqueId=UniqueId.get();
  String uniqueId20=null;
  String uniqueId30=null;
  for (int i=0; i < count; i++) {
    uniqueId20=UniqueId.get().toBase64String();
    Assert.assertTrue(""String_Node_Str"" + uniqueId20,20 == uniqueId20.length());
  }
  for (int i=0; i < count; i++) {
    uniqueId30=UniqueId.get().toHexString();
    Assert.assertTrue(""String_Node_Str"" + uniqueId30,30 == uniqueId30.length());
  }
  long begin=System.currentTimeMillis();
  for (int i=0; i < count; i++) {
    uniqueId20=UniqueId.get().toBase64String();
  }
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ (end - begin)+ ""String_Node_Str""+ (end - begin) / 1000);
  System.out.println(""String_Node_Str"" + count * 1000L / ((end - begin)));
  for (int i=0; i < count; i++) {
    UniqueId temp=null;
    temp=UniqueId.get();
    uniqueId30=temp.toHexString();
    uniqueId20=temp.toBase64String();
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(UUID.randomUUID().toString().substring(0,30)));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId20,UniqueId.isValid(UUID.randomUUID().toString().substring(0,20)));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(UUID.randomUUID().toString().toUpperCase().substring(0,30)));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId20,UniqueId.isValid(UUID.randomUUID().toString().toUpperCase().substring(0,20)));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(UUID.randomUUID().toString()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(uniqueId30));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.isValid(uniqueId20));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(UniqueId.fromHexString(uniqueId30)));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(UniqueId.fromBase64String(uniqueId20)));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(UniqueId.fromByteArray(temp.toByteArray())));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,uniqueId30.equals(UniqueId.fromBase64String(uniqueId20).toHexString()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,uniqueId30.equals(UniqueId.fromByteArray(temp.toByteArray()).toHexString()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,uniqueId20.equals(UniqueId.fromHexString(uniqueId30).toBase64String()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,uniqueId20.equals(UniqueId.fromByteArray(temp.toByteArray()).toBase64String()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getTimestamp() == UniqueId.fromBase64String(uniqueId20).getTimestamp());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.getCurrentTimeStamp() >= UniqueId.fromBase64String(uniqueId20).getTimestamp());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getMachineIdentifier() == UniqueId.fromBase64String(uniqueId20).getMachineIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.getGeneratedMachineIdentifier() == UniqueId.fromBase64String(uniqueId20).getMachineIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getProcessIdentifier() == UniqueId.fromBase64String(uniqueId20).getProcessIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.getGeneratedProcessIdentifier() == UniqueId.fromBase64String(uniqueId20).getProcessIdentifier());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getCounter() == UniqueId.fromBase64String(uniqueId20).getCounter());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).getDate().getTime() == UniqueId.fromBase64String(uniqueId20).getDate().getTime());
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).equals(UniqueId.fromBase64String(uniqueId20)));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).compareTo(UniqueId.fromBase64String(uniqueId20)) == 0);
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).toString().equals(UniqueId.fromBase64String(uniqueId20).toBase64String()));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(temp));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(null));
    Assert.assertFalse(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,temp.equals(""String_Node_Str""));
    Assert.assertTrue(""String_Node_Str"" + i + ""String_Node_Str""+ uniqueId30,UniqueId.fromHexString(uniqueId30).hashCode() == UniqueId.fromBase64String(uniqueId20).hashCode());
    UniqueId newTemp=UniqueId.get();
    Assert.assertFalse(UniqueId.fromHexString(uniqueId30).equals(newTemp));
    Assert.assertFalse(newTemp.equals(temp));
    Assert.assertTrue(newTemp.compareTo(temp) != 0);
    UniqueId.getCurrentCounter();
    UniqueId.getCurrentTimeStamp();
    UniqueId.getGeneratedMachineIdentifier();
    UniqueId.getGeneratedProcessIdentifier();
  }
  Assert.assertFalse(UniqueId.get().equals(uniqueId));
  Assert.assertTrue(UniqueId.get().compareTo(uniqueId) != 0);
  Set<String> set=new HashSet<String>(count);
  for (int i=0; i < count; i++) {
    uniqueId20=UniqueId.get().toBase64String();
    set.add(uniqueId20);
  }
  int size=set.size();
  Assert.assertTrue(""String_Node_Str"" + uniqueId20,size == count);
  Assert.assertTrue(uniqueId.compareTo(UniqueId.get()) != 0);
  return set;
}",0.849578384259679
172703,"/** 
 * Gets a new object id.
 * @return the new id
 */
public static UniqueId get(){
  return new UniqueId(dateToTimestampSeconds(new Date()),MACHINE_IDENTIFIER,PROCESS_IDENTIFIER,NEXT_COUNTER.getAndIncrement(),false);
}","/** 
 * Gets a new object id.
 * @return the new https://oss.sonatype.org/content/repositories/snapshots
 */
public static UniqueId get(){
  return new UniqueId(dateToTimestampSeconds(new Date()),MACHINE_IDENTIFIER,PROCESS_IDENTIFIER,NEXT_COUNTER.getAndIncrement(),false);
}",0.8848484848484849
172704,"/** 
 * Checks if a string could be an   {@code UniqueId}.
 * @param hexString (base16) or base64String, a potential UniqueId as a String.
 * @return whether the string could be an object id
 * @throws IllegalArgumentException if hexString is null
 */
public static boolean isValid(final String idString){
  if (idString == null) {
    throw new IllegalArgumentException();
  }
  int len=idString.length();
  if (len == 30) {
    for (int i=0; i < len; i++) {
      char c=idString.charAt(i);
      if (c >= '0' && c <= '9') {
        continue;
      }
      if (c >= 'a' && c <= 'f') {
        continue;
      }
      if (c >= 'A' && c <= 'F') {
        continue;
      }
      return false;
    }
    return true;
  }
 else   if (len == 20) {
    for (int i=0; i < len; i++) {
      char c=idString.charAt(i);
      if (c >= '0' && c <= '9') {
        continue;
      }
      if (c >= 'a' && c <= 'z') {
        continue;
      }
      if (c >= 'A' && c <= 'Z') {
        continue;
      }
      if (c == '_' || c == '-') {
        continue;
      }
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Checks if a string could be an   {@code UniqueId}.
 * @param idString  hexString (base16) or base64String, a potential UniqueId as a String.
 * @return whether the string could be an object id
 * @throws IllegalArgumentException if hexString is null
 */
public static boolean isValid(final String idString){
  if (idString == null) {
    throw new IllegalArgumentException();
  }
  int len=idString.length();
  if (len == 30) {
    for (int i=0; i < len; i++) {
      char c=idString.charAt(i);
      if (c >= '0' && c <= '9') {
        continue;
      }
      if (c >= 'a' && c <= 'f') {
        continue;
      }
      if (c >= 'A' && c <= 'F') {
        continue;
      }
      return false;
    }
    return true;
  }
 else   if (len == 20) {
    for (int i=0; i < len; i++) {
      char c=idString.charAt(i);
      if (c >= '0' && c <= '9') {
        continue;
      }
      if (c >= 'a' && c <= 'z') {
        continue;
      }
      if (c >= 'A' && c <= 'Z') {
        continue;
      }
      if (c == '_' || c == '-') {
        continue;
      }
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9955947136563876
172705,"/** 
 * Constructs a new instance from a 30-byte hexadecimal (base16 encoding) string representation.
 * @param hexString the string to convert
 * @throws IllegalArgumentException if the string is not a valid hex string representation of an UniqueId
 */
public static UniqueId fromHexString(final String hexString){
  return new UniqueId(parseHexString(hexString));
}","/** 
 * Constructs a new instance from a 30-byte hexadecimal (base16 encoding) string representation.
 * @param hexString the string to convert
 * @return new UniqueId instance
 * @throws IllegalArgumentException if the string is not a valid hex string representation of an UniqueId
 */
public static UniqueId fromHexString(final String hexString){
  return new UniqueId(parseHexString(hexString));
}",0.9569752281616688
172706,"/** 
 * Constructs a new instance from a 20-byte base64 encoding string representation.
 * @param base64String the string to convert
 * @throws IllegalArgumentException if the string is not a valid hex string representation of an UniqueId
 */
public static UniqueId fromBase64String(final String base64String){
  return new UniqueId(parseBase64String(base64String));
}","/** 
 * Constructs a new instance from a 20-byte base64 encoding string representation.
 * @param base64String the string to convert
 * @return new UniqueId instance
 * @throws IllegalArgumentException if the string is not a valid hex string representation of an UniqueId
 */
public static UniqueId fromBase64String(final String base64String){
  return new UniqueId(parseBase64String(base64String));
}",0.9570871261378412
172707,"@Override public PrimitiveObject[] getPrimitiveObjectArray(final IExpressionIndex indexList,final int start,final int length){
  PrimitiveObject[] result=new PrimitiveObject[length];
  for (int i=0; i < result.length; i++) {
    result[i]=value;
  }
  return result;
}","@Override public PrimitiveObject[] getPrimitiveObjectArray(final IExpressionIndex indexList,final int start,final int length){
  PrimitiveObject[] result=new PrimitiveObject[length];
  int loopEnd=(start + length);
  if (indexList.size() < loopEnd) {
    loopEnd=indexList.size();
  }
  for (int i=start, index=0; i < loopEnd; i++, index++) {
    if (indexList.get(i) < this.length) {
      result[index]=value;
    }
  }
  return result;
}",0.6497175141242938
172708,"@Override public void setPrimitiveObjectArray(final IExpressionIndex indexList,final int start,final int length,final IMemoryAllocator allocator){
  for (int i=0; i < length; i++) {
    try {
      allocator.setPrimitiveObject(i,value);
    }
 catch (    IOException e) {
      allocator.setNull(i);
    }
  }
}","@Override public void setPrimitiveObjectArray(final IExpressionIndex indexList,final int start,final int length,final IMemoryAllocator allocator){
  int loopEnd=(start + length);
  if (indexList.size() < loopEnd) {
    loopEnd=indexList.size();
  }
  for (int i=start, index=0; i < loopEnd; i++, index++) {
    if (this.length <= indexList.get(i)) {
      allocator.setNull(index);
    }
 else {
      try {
        allocator.setPrimitiveObject(index,value);
      }
 catch (      IOException e) {
        allocator.setNull(index);
      }
    }
  }
  for (int i=loopEnd; i < (start + length); i++) {
    allocator.setNull(i);
  }
}",0.5896076352067868
172709,"public void T_createBinary_int_1() throws IOException {
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new IntegerObj(20),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.INTEGER);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(20,((PrimitiveObject)(decodeColumn.get(0).getRow())).getInt());
  assertEquals(20,((PrimitiveObject)(decodeColumn.get(1).getRow())).getInt());
  assertEquals(20,((PrimitiveObject)(decodeColumn.get(2).getRow())).getInt());
  assertNull(decodeColumn.get(3).getRow());
}","@Test public void T_createBinary_int_1() throws IOException {
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new IntegerObj(20),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.INTEGER);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(20,((PrimitiveObject)(decodeColumn.get(0).getRow())).getInt());
  assertEquals(20,((PrimitiveObject)(decodeColumn.get(1).getRow())).getInt());
  assertEquals(20,((PrimitiveObject)(decodeColumn.get(2).getRow())).getInt());
  assertNull(decodeColumn.get(3).getRow());
}",0.9964200477326968
172710,"public void T_createBinary_float_1() throws IOException {
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new FloatObj((float)0.1),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.FLOAT);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals((float)0.1,((PrimitiveObject)(decodeColumn.get(0).getRow())).getFloat());
  assertEquals((float)0.1,((PrimitiveObject)(decodeColumn.get(1).getRow())).getFloat());
  assertEquals((float)0.1,((PrimitiveObject)(decodeColumn.get(2).getRow())).getFloat());
  assertNull(decodeColumn.get(3).getRow());
}","@Test public void T_createBinary_float_1() throws IOException {
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new FloatObj((float)0.1),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.FLOAT);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals((float)0.1,((PrimitiveObject)(decodeColumn.get(0).getRow())).getFloat());
  assertEquals((float)0.1,((PrimitiveObject)(decodeColumn.get(1).getRow())).getFloat());
  assertEquals((float)0.1,((PrimitiveObject)(decodeColumn.get(2).getRow())).getFloat());
  assertNull(decodeColumn.get(3).getRow());
}",0.9965675057208238
172711,"public void T_createBinary_string_1() throws IOException {
  String str=""String_Node_Str"";
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new StringObj(str),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.STRING);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(0).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(1).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(2).getRow())).getString());
  assertNull(decodeColumn.get(3).getRow());
}","@Test public void T_createBinary_string_1() throws IOException {
  String str=""String_Node_Str"";
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new StringObj(str),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.STRING);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(0).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(1).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(2).getRow())).getString());
  assertNull(decodeColumn.get(3).getRow());
}",0.996606334841629
172712,"public void T_createBinary_bytes_1() throws IOException {
  String str=""String_Node_Str"";
  byte[] bytes=str.getBytes(""String_Node_Str"");
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new BytesObj(bytes),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.BYTES);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(0).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(1).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(2).getRow())).getString());
  assertNull(decodeColumn.get(3).getRow());
}","@Test public void T_createBinary_bytes_1() throws IOException {
  String str=""String_Node_Str"";
  byte[] bytes=str.getBytes(""String_Node_Str"");
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new BytesObj(bytes),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.BYTES);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(0).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(1).getRow())).getString());
  assertEquals(str,((PrimitiveObject)(decodeColumn.get(2).getRow())).getString());
  assertNull(decodeColumn.get(3).getRow());
}",0.9967776584317938
172713,"public void T_createBinary_double_1() throws IOException {
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new DoubleObj((double)0.1),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.DOUBLE);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals((double)0.1,((PrimitiveObject)(decodeColumn.get(0).getRow())).getDouble());
  assertEquals((double)0.1,((PrimitiveObject)(decodeColumn.get(1).getRow())).getDouble());
  assertEquals((double)0.1,((PrimitiveObject)(decodeColumn.get(2).getRow())).getDouble());
  assertNull(decodeColumn.get(3).getRow());
}","@Test public void T_createBinary_double_1() throws IOException {
  ColumnBinary columnBinary=ConstantColumnBinaryMaker.createColumnBinary(new DoubleObj((double)0.1),""String_Node_Str"",3);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.DOUBLE);
  ConstantColumnBinaryMaker maker=new ConstantColumnBinaryMaker();
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals((double)0.1,((PrimitiveObject)(decodeColumn.get(0).getRow())).getDouble());
  assertEquals((double)0.1,((PrimitiveObject)(decodeColumn.get(1).getRow())).getDouble());
  assertEquals((double)0.1,((PrimitiveObject)(decodeColumn.get(2).getRow())).getDouble());
  assertNull(decodeColumn.get(3).getRow());
}",0.996606334841629
172714,"@Override public Object getMapValueElement(final Object object,final Object key){
  if (object instanceof ColumnAndIndex) {
    ColumnAndIndex columnAndIndex=(ColumnAndIndex)object;
    IColumn childColumn=columnAndIndex.column.getColumn(key.toString());
    return getField.get(childColumn,columnAndIndex.index,columnAndIndex.columnIndex);
  }
 else {
    Map map=(Map)object;
    return map.get(key);
  }
}","@Override public Object getMapValueElement(final Object object,final Object key){
  if (object instanceof ColumnAndIndex) {
    ColumnAndIndex columnAndIndex=(ColumnAndIndex)object;
    IColumn childColumn=columnAndIndex.column.getColumn(key.toString());
    return getField.get(childColumn,columnAndIndex.index,columnAndIndex.columnIndex);
  }
 else {
    Map map=(Map)object;
    return map.get(key.toString());
  }
}",0.9866989117291416
172715,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
  boolean[] searchResult=original.filter(filter,new boolean[original.size()]);
  if (searchResult == null) {
    return null;
  }
  for (int i=0; i < filterArray.length; i++) {
    if (searchResult[columnIndexArray[i]]) {
      filterArray[i]=true;
    }
  }
  return filterArray;
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
  boolean[] searchResult=original.filter(filter,new boolean[original.size()]);
  if (searchResult == null) {
    return null;
  }
  int index=0;
  for (; index < filterArray.length && columnIndexArray[index] < searchResult.length; index++) {
    if (searchResult[columnIndexArray[index]]) {
      filterArray[index]=true;
    }
  }
  for (; index < filterArray.length; index++) {
    filterArray[index]=true;
  }
  return filterArray;
}",0.7586206896551724
172716,"public int toColumnBinaryTree(final byte[] metaBinary,final int start,final boolean isNeedAllChild,final Set<Integer> spreadIndexDict) throws IOException {
  ByteBuffer byteBuffer=ByteBuffer.wrap(metaBinary,start,(metaBinary.length - start));
  int offset=start;
  int childSize=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  for (int i=0; i < childSize; i++) {
    int childNameLength=byteBuffer.getInt(offset);
    offset+=Integer.BYTES;
    String childName=new String(metaBinary,offset,childNameLength);
    offset+=childNameLength;
    ColumnBinaryTree childColumnBinary=new ColumnBinaryTree();
    boolean isAppend=true;
    if (isNeedAllChild) {
      isAppend=true;
    }
 else {
      if (columnNameNode.containsChild(childName)) {
        childColumnBinary.setColumnFilter(columnNameNode.getChild(childName));
        isAppend=true;
      }
 else       if (ColumnTypeFactory.getColumnTypeFromName(childName) == ColumnType.ARRAY) {
        childColumnBinary.setColumnFilter(columnNameNode);
        isAppend=true;
      }
 else {
        ColumnNameNode childColumnNameNode=new ColumnNameNode(childName,true);
        childColumnNameNode.setNeedAllChild(false);
        childColumnBinary.setColumnFilter(childColumnNameNode);
        isAppend=false;
      }
    }
    offset=childColumnBinary.toColumnBinaryTree(metaBinary,offset,spreadIndexDict);
    if (isAppend) {
      childCount=childColumnBinary.size();
      childTreeMap.put(childName,childColumnBinary);
    }
  }
  allBinaryStart=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  allBinaryLength=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  int currentMetaBinaryLength=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  if (currentMetaBinaryLength != 0) {
    byte[] childBuffer=null;
    int childStartDataOffset=0;
    if (!columnNameNode.isDisable()) {
      childBuffer=new byte[allBinaryLength];
    }
    for (int startOffset=offset; offset < startOffset + currentMetaBinaryLength; ) {
      int index=byteBuffer.getInt(offset);
      offset+=Integer.BYTES;
      int metaBinaryLength=byteBuffer.getInt(offset);
      offset+=Integer.BYTES;
      if (columnNameNode.isDisable() || metaBinaryLength == 0) {
        currentColumnBinaryList.add(null);
      }
 else {
        List<ColumnBinary> childList=new ArrayList<ColumnBinary>();
        for (        Map.Entry<String,ColumnBinaryTree> entry : childTreeMap.entrySet()) {
          ColumnBinary childColumnBinary=entry.getValue().getColumnBinary(index);
          if (childColumnBinary != null) {
            childList.add(childColumnBinary);
          }
        }
        ColumnBinary childColumnBinary=ColumnBinary.newInstanceFromMetaBinary(metaBinary,offset,metaBinaryLength,childBuffer,childList);
        if (spreadIndexDict == null || spreadIndexDict.contains(Integer.valueOf(currentCount))) {
          if (allBinaryLength != 0) {
            blockReadOffsetList.add(new BlockReadOffset(childColumnBinary.binaryStart,childStartDataOffset,childColumnBinary.binaryLength,childBuffer));
          }
          currentColumnBinaryList.add(childColumnBinary);
        }
 else {
          currentColumnBinaryList.add(null);
        }
        childColumnBinary.binaryStart=childStartDataOffset;
        childStartDataOffset+=childColumnBinary.binaryLength;
      }
      offset+=metaBinaryLength;
      currentCount++;
    }
    if (allBinaryLength != 0 && currentCount == blockReadOffsetList.size()) {
      blockReadOffsetList.clear();
      blockReadOffsetList.add(new BlockReadOffset(allBinaryStart,0,allBinaryLength,childBuffer));
    }
  }
  return offset;
}","public int toColumnBinaryTree(final byte[] metaBinary,final int start,final boolean isNeedAllChild,final Set<Integer> spreadIndexDict) throws IOException {
  ByteBuffer byteBuffer=ByteBuffer.wrap(metaBinary,start,(metaBinary.length - start));
  int offset=start;
  int childSize=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  for (int i=0; i < childSize; i++) {
    int childNameLength=byteBuffer.getInt(offset);
    offset+=Integer.BYTES;
    String childName=new String(metaBinary,offset,childNameLength);
    offset+=childNameLength;
    ColumnBinaryTree childColumnBinary=new ColumnBinaryTree();
    boolean isAppend=true;
    if (isNeedAllChild) {
      isAppend=true;
    }
 else {
      if (columnNameNode.containsChild(childName)) {
        childColumnBinary.setColumnFilter(columnNameNode.getChild(childName));
        isAppend=true;
      }
 else       if (ColumnTypeFactory.getColumnTypeFromName(childName) == ColumnType.ARRAY) {
        childColumnBinary.setColumnFilter(columnNameNode);
        isAppend=true;
      }
 else {
        ColumnNameNode childColumnNameNode=new ColumnNameNode(childName,true);
        childColumnNameNode.setNeedAllChild(false);
        childColumnBinary.setColumnFilter(childColumnNameNode);
        isAppend=false;
      }
    }
    offset=childColumnBinary.toColumnBinaryTree(metaBinary,offset,spreadIndexDict);
    if (childCount < childColumnBinary.size()) {
      childCount=childColumnBinary.size();
    }
    if (isAppend) {
      childTreeMap.put(childName,childColumnBinary);
    }
  }
  allBinaryStart=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  allBinaryLength=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  int currentMetaBinaryLength=byteBuffer.getInt(offset);
  offset+=Integer.BYTES;
  if (currentMetaBinaryLength != 0) {
    byte[] childBuffer=null;
    int childStartDataOffset=0;
    if (!columnNameNode.isDisable()) {
      childBuffer=new byte[allBinaryLength];
    }
    for (int startOffset=offset; offset < startOffset + currentMetaBinaryLength; ) {
      int index=byteBuffer.getInt(offset);
      offset+=Integer.BYTES;
      int metaBinaryLength=byteBuffer.getInt(offset);
      offset+=Integer.BYTES;
      if (columnNameNode.isDisable() || metaBinaryLength == 0) {
        currentColumnBinaryList.add(null);
      }
 else {
        List<ColumnBinary> childList=new ArrayList<ColumnBinary>();
        for (        Map.Entry<String,ColumnBinaryTree> entry : childTreeMap.entrySet()) {
          ColumnBinary childColumnBinary=entry.getValue().getColumnBinary(index);
          if (childColumnBinary != null) {
            childList.add(childColumnBinary);
          }
        }
        ColumnBinary childColumnBinary=ColumnBinary.newInstanceFromMetaBinary(metaBinary,offset,metaBinaryLength,childBuffer,childList);
        if (spreadIndexDict == null || spreadIndexDict.contains(Integer.valueOf(currentCount))) {
          if (allBinaryLength != 0) {
            blockReadOffsetList.add(new BlockReadOffset(childColumnBinary.binaryStart,childStartDataOffset,childColumnBinary.binaryLength,childBuffer));
          }
          currentColumnBinaryList.add(childColumnBinary);
        }
 else {
          currentColumnBinaryList.add(null);
        }
        childColumnBinary.binaryStart=childStartDataOffset;
        childStartDataOffset+=childColumnBinary.binaryLength;
      }
      offset+=metaBinaryLength;
      currentCount++;
    }
    if (allBinaryLength != 0 && currentCount == blockReadOffsetList.size()) {
      blockReadOffsetList.clear();
      blockReadOffsetList.add(new BlockReadOffset(allBinaryStart,0,allBinaryLength,childBuffer));
    }
  }
  return offset;
}",0.980634528224145
172717,"@Override public Object getMapValueElement(final Object object,final Object key){
  Map map=(Map)object;
  return map.get(key);
}","@Override public Object getMapValueElement(final Object object,final Object key){
  if (object instanceof ColumnAndIndex) {
    ColumnAndIndex columnAndIndex=(ColumnAndIndex)object;
    IColumn childColumn=columnAndIndex.column.getColumn(key.toString());
    return getField.get(childColumn,columnAndIndex.index,columnAndIndex.columnIndex);
  }
 else {
    Map map=(Map)object;
    return map.get(key);
  }
}",0.4804469273743016
172718,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    for (int i=0; i < size(); i++) {
      if (dicIndexIntBuffer.get(i) != 0) {
        filterArray[i]=true;
      }
    }
  return filterArray;
case NULL:
for (int i=0; i < size(); i++) {
  if (dicIndexIntBuffer.get(i) == 0) {
    filterArray[i]=true;
  }
}
return filterArray;
default :
return index.filter(filter,filterArray);
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    if (columnType != ((INullFilter)filter).getTargetColumnType()) {
      return null;
    }
  for (int i=0; i < size(); i++) {
    if (dicIndexIntBuffer.get(i) != 0) {
      filterArray[i]=true;
    }
  }
return filterArray;
case NULL:
if (columnType != ((INullFilter)filter).getTargetColumnType()) {
return null;
}
for (int i=0; i < size(); i++) {
if (dicIndexIntBuffer.get(i) == 0) {
filterArray[i]=true;
}
}
return filterArray;
default :
return index.filter(filter,filterArray);
}
}",0.8209219858156028
172719,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return new boolean[filterArray.length];
default :
return index.filter(filter,filterArray);
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  if (columnType != ((INullFilter)filter).getTargetColumnType()) {
    return null;
  }
return new boolean[filterArray.length];
default :
return index.filter(filter,filterArray);
}
}",0.8660436137071651
172720,"public ConstantCellManager(final ColumnType columnType,final PrimitiveObject value,final int length){
  this.value=value;
  this.length=length;
  cell=new PrimitiveCell(columnType,value);
}","public ConstantCellManager(final ColumnType columnType,final PrimitiveObject value,final int length){
  this.columnType=columnType;
  this.value=value;
  this.length=length;
  cell=new PrimitiveCell(columnType,value);
}",0.9264705882352942
172721,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    for (int i=0; i < cellArray.length; i++) {
      if (cellArray[i] != null) {
        filterArray[i]=true;
      }
    }
  return filterArray;
case NULL:
for (int i=0; i < cellArray.length; i++) {
  if (cellArray[i] == null) {
    filterArray[i]=true;
  }
}
return filterArray;
default :
return null;
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return null;
default :
return null;
}
}",0.5146198830409356
172722,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    for (int i=0; i < buffer.length; i++) {
      if (buffer[i] != 2) {
        filterArray[i]=true;
      }
    }
  return filterArray;
case NULL:
for (int i=0; i < buffer.length; i++) {
  if (buffer[i] == 2) {
    filterArray[i]=true;
  }
}
return filterArray;
default :
return index.filter(filter,filterArray);
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return null;
default :
return index.filter(filter,filterArray);
}
}",0.628808864265928
172723,"@Test public void T_filter_6() throws IOException {
  List<PrimitiveObject> dic=new ArrayList<PrimitiveObject>();
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  IntBuffer buffer=IntBuffer.allocate(100);
  for (int i=0; i < 100; i++) {
    buffer.put(i % 5);
  }
  ICellIndex index=new BufferDirectSequentialStringCellIndex(new TestDicManager(dic),buffer);
  boolean[] result=index.filter(new NullFilter(),new boolean[100]);
  assertEquals(result,null);
}","@Test public void T_filter_6() throws IOException {
  List<PrimitiveObject> dic=new ArrayList<PrimitiveObject>();
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  dic.add(new StringObj(""String_Node_Str""));
  IntBuffer buffer=IntBuffer.allocate(100);
  for (int i=0; i < 100; i++) {
    buffer.put(i % 5);
  }
  ICellIndex index=new BufferDirectSequentialStringCellIndex(new TestDicManager(dic),buffer);
  boolean[] result=index.filter(new NullFilter(ColumnType.STRING),new boolean[100]);
  assertEquals(result,null);
}",0.9867704280155642
172724,"@Test public void T_filter_4() throws IOException {
  byte[] data=new byte[10];
  for (int i=0; i < 10; i++) {
    data[i]=(byte)(i % 2);
  }
  SequentialBooleanCellIndex index=new SequentialBooleanCellIndex(data);
  boolean[] result=index.filter(new NullFilter(),new boolean[10]);
  assertEquals(result,null);
}","@Test public void T_filter_4() throws IOException {
  byte[] data=new byte[10];
  for (int i=0; i < 10; i++) {
    data[i]=(byte)(i % 2);
  }
  SequentialBooleanCellIndex index=new SequentialBooleanCellIndex(data);
  boolean[] result=index.filter(new NullFilter(ColumnType.BOOLEAN),new boolean[10]);
  assertEquals(result,null);
}",0.97196261682243
172725,"@Test(dataProvider=""String_Node_Str"") public void T_notnull_1(final IColumn column) throws IOException {
  int[] mustReadIndex={0,1,2,3,4,5,6,7,8,9,20,21,22,23,24,25,26,27,28,29};
  IFilter filter=new NotNullFilter();
  boolean[] filterResult=new boolean[30];
  filterResult=column.filter(filter,filterResult);
  if (filterResult == null) {
    assertTrue(true);
    return;
  }
  for (int i=0; i < mustReadIndex.length; i++) {
    assertTrue(filterResult[mustReadIndex[i]]);
  }
}","@Test(dataProvider=""String_Node_Str"") public void T_notnull_1(final IColumn column) throws IOException {
  int[] mustReadIndex={0,1,2,3,4,5,6,7,8,9,20,21,22,23,24,25,26,27,28,29};
  IFilter filter=new NotNullFilter(column.getColumnType());
  boolean[] filterResult=new boolean[30];
  filterResult=column.filter(filter,filterResult);
  if (filterResult == null) {
    assertTrue(true);
    return;
  }
  for (int i=0; i < mustReadIndex.length; i++) {
    assertTrue(filterResult[mustReadIndex[i]]);
  }
}",0.9776422764227642
172726,"@Test(dataProvider=""String_Node_Str"") public void T_null_1(final IColumn column) throws IOException {
  int[] mustReadIndex={10,11,12,13,14,15,16,17,18,19};
  IFilter filter=new NullFilter();
  boolean[] filterResult=new boolean[30];
  filterResult=column.filter(filter,filterResult);
  if (filterResult == null) {
    assertTrue(true);
    return;
  }
  for (int i=0; i < mustReadIndex.length; i++) {
    assertTrue(filterResult[mustReadIndex[i]]);
  }
}","@Test(dataProvider=""String_Node_Str"") public void T_null_1(final IColumn column) throws IOException {
  int[] mustReadIndex={10,11,12,13,14,15,16,17,18,19};
  IFilter filter=new NullFilter(column.getColumnType());
  boolean[] filterResult=new boolean[30];
  filterResult=column.filter(filter,filterResult);
  if (filterResult == null) {
    assertTrue(true);
    return;
  }
  for (int i=0; i < mustReadIndex.length; i++) {
    assertTrue(filterResult[mustReadIndex[i]]);
  }
}",0.9763948497854076
172727,"@Test public void getFilterType(){
  NotNullFilter target=new NotNullFilter();
  assertEquals(target.getFilterType(),FilterType.NOT_NULL);
}","@Test public void getFilterType(){
  NotNullFilter target=new NotNullFilter(ColumnType.NULL);
  assertEquals(target.getFilterType(),FilterType.NOT_NULL);
}",0.9491525423728814
172728,"@Test public void getFilterType(){
  NullFilter target=new NullFilter();
  assertEquals(target.getFilterType(),FilterType.NULL);
}","@Test public void getFilterType(){
  NullFilter target=new NullFilter(ColumnType.NULL);
  assertEquals(target.getFilterType(),FilterType.NULL);
}",0.9454545454545454
172729,"@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
switch (columnBinary.columnType) {
case BOOLEAN:
    boolean booleanObj=wrapBuffer.get() == 1;
  for (int i=0; i < columnBinary.rowCount; i++) {
    allocator.setBoolean(i,booleanObj);
  }
break;
case BYTE:
byte byteObj=wrapBuffer.get();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setByte(i,byteObj);
}
break;
case SHORT:
short shortObj=wrapBuffer.getShort();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setShort(i,shortObj);
}
break;
case INTEGER:
int intObj=wrapBuffer.getInt();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setInteger(i,intObj);
}
break;
case LONG:
long longObj=wrapBuffer.getLong();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setLong(i,longObj);
}
break;
case FLOAT:
float floatObj=wrapBuffer.getFloat();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setFloat(i,floatObj);
}
break;
case DOUBLE:
double doubleObj=wrapBuffer.getDouble();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setDouble(i,doubleObj);
}
break;
case STRING:
int stringLength=wrapBuffer.getInt();
byte[] stringBytes=new byte[stringLength];
wrapBuffer.get(stringBytes);
String utf8=new String(stringBytes,""String_Node_Str"");
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setString(i,utf8);
}
break;
case BYTES:
int byteLength=wrapBuffer.getInt();
byte[] byteBytes=new byte[byteLength];
wrapBuffer.get(byteBytes);
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setBytes(i,byteBytes);
}
break;
default :
throw new IOException(""String_Node_Str"");
}
}","@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
switch (columnBinary.columnType) {
case BOOLEAN:
    boolean booleanObj=wrapBuffer.get() == 1;
  for (int i=0; i < columnBinary.rowCount; i++) {
    allocator.setBoolean(i,booleanObj);
  }
break;
case BYTE:
byte byteObj=wrapBuffer.get();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setByte(i,byteObj);
}
break;
case SHORT:
short shortObj=wrapBuffer.getShort();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setShort(i,shortObj);
}
break;
case INTEGER:
int intObj=wrapBuffer.getInt();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setInteger(i,intObj);
}
break;
case LONG:
long longObj=wrapBuffer.getLong();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setLong(i,longObj);
}
break;
case FLOAT:
float floatObj=wrapBuffer.getFloat();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setFloat(i,floatObj);
}
break;
case DOUBLE:
double doubleObj=wrapBuffer.getDouble();
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setDouble(i,doubleObj);
}
break;
case STRING:
int stringLength=wrapBuffer.getInt();
byte[] stringBytes=new byte[stringLength];
wrapBuffer.get(stringBytes);
String utf8=new String(stringBytes,""String_Node_Str"");
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setString(i,utf8);
}
break;
case BYTES:
int byteLength=wrapBuffer.getInt();
byte[] byteBytes=new byte[byteLength];
wrapBuffer.get(byteBytes);
for (int i=0; i < columnBinary.rowCount; i++) {
allocator.setBytes(i,byteBytes);
}
break;
default :
throw new IOException(""String_Node_Str"");
}
allocator.setValueCount(columnBinary.rowCount);
}",0.9867036011080332
172730,"@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  for (  ColumnBinary childColumnBinary : columnBinary.columnBinaryList) {
    IColumnBinaryMaker maker=FindColumnBinaryMaker.get(childColumnBinary.makerClassName);
    IMemoryAllocator childMemoryAllocator=allocator.getChild(childColumnBinary.columnName,childColumnBinary.columnType);
    maker.loadInMemoryStorage(childColumnBinary,childMemoryAllocator);
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] decompressBuffer=compressor.decompress(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  IntBuffer buffer=ByteBuffer.wrap(decompressBuffer).asIntBuffer();
  int length=buffer.capacity();
  int currentIndex=0;
  for (int i=0; i < length; i++) {
    int arrayLength=buffer.get();
    if (arrayLength != 0) {
      int start=currentIndex;
      allocator.setArrayIndex(i,start,arrayLength);
      currentIndex+=arrayLength;
    }
 else {
      allocator.setNull(i);
    }
  }
  allocator.setValueCount(length);
}","@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  for (  ColumnBinary childColumnBinary : columnBinary.columnBinaryList) {
    IColumnBinaryMaker maker=FindColumnBinaryMaker.get(childColumnBinary.makerClassName);
    IMemoryAllocator childMemoryAllocator=allocator.getArrayChild(childColumnBinary.rowCount,childColumnBinary.columnType);
    maker.loadInMemoryStorage(childColumnBinary,childMemoryAllocator);
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] decompressBuffer=compressor.decompress(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  IntBuffer buffer=ByteBuffer.wrap(decompressBuffer).asIntBuffer();
  int length=buffer.capacity();
  int currentIndex=0;
  for (int i=0; i < length; i++) {
    int arrayLength=buffer.get();
    if (arrayLength != 0) {
      int start=currentIndex;
      allocator.setArrayIndex(i,start,arrayLength);
      currentIndex+=arrayLength;
    }
 else {
      allocator.setNull(i);
    }
  }
  allocator.setValueCount(length);
}",0.9681185451279748
172731,"@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  ByteBuffer headerWrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  int minCharLength=headerWrapBuffer.getInt();
  headerWrapBuffer.position(headerWrapBuffer.position() + minCharLength);
  int maxCharLength=headerWrapBuffer.getInt();
  headerWrapBuffer.position(headerWrapBuffer.position() + maxCharLength);
  int headerSize=Integer.BYTES + minCharLength + Integer.BYTES+ maxCharLength;
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,columnBinary.binaryStart + headerSize,columnBinary.binaryLength - headerSize);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(binary,0,binary.length);
  int minLength=wrapBuffer.getInt();
  int maxLength=wrapBuffer.getInt();
  boolean hasNull=wrapBuffer.getInt() == 1;
  byte[] nullFlagBytes=new byte[columnBinary.rowCount];
  boolean[] isNullArray=new boolean[columnBinary.rowCount];
  if (hasNull) {
    for (int i=0; i < isNullArray.length; i++) {
      isNullArray[i]=wrapBuffer.get() != 0;
    }
  }
  ILengthMaker lengthMaker=chooseLengthMaker(hasNull,minLength,maxLength);
  int[] startArray=lengthMaker.getStartArray(wrapBuffer,columnBinary.rowCount);
  int binaryStart=wrapBuffer.position();
  allocator.setBytesAndLength(binary,binaryStart,binary.length - binaryStart,startArray,isNullArray);
  allocator.setValueCount(columnBinary.rowCount);
}","@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  ByteBuffer headerWrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  int minCharLength=headerWrapBuffer.getInt();
  headerWrapBuffer.position(headerWrapBuffer.position() + minCharLength);
  int maxCharLength=headerWrapBuffer.getInt();
  headerWrapBuffer.position(headerWrapBuffer.position() + maxCharLength);
  int headerSize=Integer.BYTES + minCharLength + Integer.BYTES+ maxCharLength;
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,columnBinary.binaryStart + headerSize,columnBinary.binaryLength - headerSize);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(binary,0,binary.length);
  int minLength=wrapBuffer.getInt();
  int maxLength=wrapBuffer.getInt();
  boolean hasNull=wrapBuffer.getInt() == 1;
  byte[] nullFlagBytes=new byte[columnBinary.rowCount];
  if (hasNull) {
    wrapBuffer.get(nullFlagBytes);
  }
  ILengthMaker lengthMaker=chooseLengthMaker(hasNull,minLength,maxLength);
  int[] lengthArray=lengthMaker.getLengthArray(wrapBuffer,columnBinary.rowCount);
  int currentStart=wrapBuffer.position();
  for (int i=0; i < columnBinary.rowCount; i++) {
    if (nullFlagBytes[i] == 0) {
      allocator.setBytes(i,binary,currentStart,lengthArray[i]);
      currentStart+=lengthArray[i];
    }
 else {
      allocator.setNull(i);
    }
  }
  allocator.setValueCount(columnBinary.rowCount);
}",0.72674791533034
172732,"@Override public int calcBinarySize(final IColumnAnalizeResult analizeResult){
  return 0;
}","@Override public int calcBinarySize(final IColumnAnalizeResult analizeResult){
  StringColumnAnalizeResult stringAnalizeResult=(StringColumnAnalizeResult)analizeResult;
  boolean hasNull=analizeResult.getNullCount() != 0;
  if (!hasNull && analizeResult.getUniqCount() == 1) {
    return stringAnalizeResult.getUniqUtf8ByteSize();
  }
  int nullBinaryLength=stringAnalizeResult.getColumnSize();
  if (!hasNull) {
    nullBinaryLength=0;
  }
  ILengthMaker lengthMaker=chooseLengthMaker(hasNull,stringAnalizeResult.getMinUtf8Bytes(),stringAnalizeResult.getMaxUtf8Bytes());
  return Integer.BYTES * 2 + Integer.BYTES + nullBinaryLength + lengthMaker.calcBinarySize(stringAnalizeResult.getColumnSize()) + stringAnalizeResult.getTotalUtf8ByteSize();
}",0.2050059594755661
172733,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(binary,0,binary.length);
  int minLength=wrapBuffer.getInt();
  int maxLength=wrapBuffer.getInt();
  boolean hasNull=wrapBuffer.getInt() == 1;
  byte[] nullFlagBytes=new byte[columnBinary.rowCount];
  if (hasNull) {
    wrapBuffer.get(nullFlagBytes);
  }
  ILengthMaker lengthMaker=chooseLengthMaker(hasNull,minLength,maxLength);
  int[] lengthArray=lengthMaker.getLengthArray(wrapBuffer,columnBinary.rowCount);
  PrimitiveObject[] dicArray=new PrimitiveObject[columnBinary.rowCount];
  int currentStart=wrapBuffer.position();
  for (int i=0; i < columnBinary.rowCount; i++) {
    if (nullFlagBytes[i] == 0) {
      dicArray[i]=new UTF8BytesLinkObj(binary,currentStart,lengthArray[i]);
    }
    currentStart+=lengthArray[i];
  }
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeStringDicManager(dicArray);
  column.setCellManager(new BufferDirectCellManager(columnBinary.columnType,dicManager,columnBinary.rowCount));
  column.setIndex(new SequentialStringCellIndex(dicManager));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(binary,0,binary.length);
  int minLength=wrapBuffer.getInt();
  int maxLength=wrapBuffer.getInt();
  boolean hasNull=wrapBuffer.getInt() == 1;
  byte[] nullFlagBytes=new byte[columnBinary.rowCount];
  if (hasNull) {
    wrapBuffer.get(nullFlagBytes);
  }
  ILengthMaker lengthMaker=chooseLengthMaker(hasNull,minLength,maxLength);
  int[] lengthArray=lengthMaker.getLengthArray(wrapBuffer,columnBinary.rowCount);
  PrimitiveObject[] dicArray=new PrimitiveObject[columnBinary.rowCount];
  int currentStart=wrapBuffer.position();
  for (int i=0; i < columnBinary.rowCount; i++) {
    if (nullFlagBytes[i] == 0) {
      dicArray[i]=new UTF8BytesLinkObj(binary,currentStart,lengthArray[i]);
      currentStart+=lengthArray[i];
    }
  }
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeStringDicManager(dicArray);
  column.setCellManager(new BufferDirectCellManager(columnBinary.columnType,dicManager,columnBinary.rowCount));
  column.setIndex(new SequentialStringCellIndex(dicManager));
  isCreate=true;
}",0.9739776951672864
172734,"public void appendRow(final List<ColumnBinary> binaryList,int spreadSize) throws IOException {
  if (!blockMaker.canAppend(binaryList)) {
    byte[] block=blockMaker.createFixedBlock();
    out.write(block,0,block.length);
  }
  blockMaker.append(spreadSize,binaryList);
}","public void appendRow(final List<ColumnBinary> binaryList,final int spreadSize) throws IOException {
  if (!blockMaker.canAppend(binaryList)) {
    byte[] block=blockMaker.createFixedBlock();
    out.write(block,0,block.length);
  }
  blockMaker.append(spreadSize,binaryList);
}",0.9890909090909092
172735,"public ColumnBinary(final String makerClassName,final String compressorClassName,final String columnName,final ColumnType columnType,final int rowCount,final int rawDataSize,final int logicalDataSize,int cardinality,final byte[] binary,final int binaryStart,final int binaryLength,final List<ColumnBinary> columnBinaryList){
  this.makerClassName=makerClassName;
  this.compressorClassName=compressorClassName;
  this.columnName=columnName;
  this.columnType=columnType;
  this.rowCount=rowCount;
  this.rawDataSize=rawDataSize;
  this.logicalDataSize=logicalDataSize;
  this.cardinality=cardinality;
  this.binaryStart=binaryStart;
  this.binaryLength=binaryLength;
  this.binary=binary;
  this.columnBinaryList=columnBinaryList;
}","public ColumnBinary(final String makerClassName,final String compressorClassName,final String columnName,final ColumnType columnType,final int rowCount,final int rawDataSize,final int logicalDataSize,final int cardinality,final byte[] binary,final int binaryStart,final int binaryLength,final List<ColumnBinary> columnBinaryList){
  this.makerClassName=makerClassName;
  this.compressorClassName=compressorClassName;
  this.columnName=columnName;
  this.columnType=columnType;
  this.rowCount=rowCount;
  this.rawDataSize=rawDataSize;
  this.logicalDataSize=logicalDataSize;
  this.cardinality=cardinality;
  this.binaryStart=binaryStart;
  this.binaryLength=binaryLength;
  this.binary=binary;
  this.columnBinaryList=columnBinaryList;
}",0.9959183673469388
172736,"public static String getShortCutName(final String className){
  String shortCutName=classNamePair.getPair2(className);
  if (shortCutName == null) {
    return className;
  }
  return shortCutName;
}","public static String getShortCutName(final String className){
  String shortCutName=CLASS_NAME_PAIR.getPair2(className);
  if (shortCutName == null) {
    return className;
  }
  return shortCutName;
}",0.935
172737,"public static String getClassName(final String shortCutName){
  String className=classNamePair.getPair1(shortCutName);
  if (className == null) {
    return shortCutName;
  }
  return className;
}","public static String getClassName(final String shortCutName){
  String className=CLASS_NAME_PAIR.getPair1(shortCutName);
  if (className == null) {
    return shortCutName;
  }
  return className;
}",0.9390862944162436
172738,"public static IField get(final ColumnBinary columnBinary) throws IOException {
switch (columnBinary.columnType) {
case UNION:
    UnionField unionSchema=new UnionField(columnBinary.columnName);
  for (  ColumnBinary childBinary : columnBinary.columnBinaryList) {
    unionSchema.set(get(childBinary));
  }
return unionSchema;
case ARRAY:
ArrayContainerField arraySchema=new ArrayContainerField(columnBinary.columnName,get(columnBinary.columnBinaryList.get(0)));
return arraySchema;
case SPREAD:
StructContainerField structSchema=new StructContainerField(columnBinary.columnName);
for (ColumnBinary childBinary : columnBinary.columnBinaryList) {
structSchema.set(get(childBinary));
}
return structSchema;
case BOOLEAN:
return new BooleanField(columnBinary.columnName);
case BYTE:
return new ByteField(columnBinary.columnName);
case BYTES:
return new BytesField(columnBinary.columnName);
case DOUBLE:
return new DoubleField(columnBinary.columnName);
case FLOAT:
return new FloatField(columnBinary.columnName);
case INTEGER:
return new IntegerField(columnBinary.columnName);
case LONG:
return new LongField(columnBinary.columnName);
case SHORT:
return new ShortField(columnBinary.columnName);
case STRING:
return new StringField(columnBinary.columnName);
default :
return new NullField(columnBinary.columnName);
}
}","public static IField get(final ColumnBinary columnBinary) throws IOException {
switch (columnBinary.columnType) {
case UNION:
    UnionField unionSchema=new UnionField(columnBinary.columnName);
  for (  ColumnBinary childBinary : columnBinary.columnBinaryList) {
    unionSchema.set(get(childBinary));
  }
return unionSchema;
case ARRAY:
return new ArrayContainerField(columnBinary.columnName,get(columnBinary.columnBinaryList.get(0)));
case SPREAD:
StructContainerField structSchema=new StructContainerField(columnBinary.columnName);
for (ColumnBinary childBinary : columnBinary.columnBinaryList) {
structSchema.set(get(childBinary));
}
return structSchema;
case BOOLEAN:
return new BooleanField(columnBinary.columnName);
case BYTE:
return new ByteField(columnBinary.columnName);
case BYTES:
return new BytesField(columnBinary.columnName);
case DOUBLE:
return new DoubleField(columnBinary.columnName);
case FLOAT:
return new FloatField(columnBinary.columnName);
case INTEGER:
return new IntegerField(columnBinary.columnName);
case LONG:
return new LongField(columnBinary.columnName);
case SHORT:
return new ShortField(columnBinary.columnName);
case STRING:
return new StringField(columnBinary.columnName);
default :
return new NullField(columnBinary.columnName);
}
}",0.97712291585886
172739,"@Override public void setPrimitiveObjectArray(final IExpressionIndex indexList,final int start,final int length,final IMemoryAllocator allocator){
  int loopEnd=(start + length);
  if (indexList.size() < loopEnd) {
    loopEnd=indexList.size();
  }
  int index=0;
  for (int i=start; i < loopEnd; i++, index++) {
    int targetIndex=indexList.get(i);
    if (indexSize <= targetIndex) {
      break;
    }
    int dicIndex=dicIndexIntBuffer.get(targetIndex);
    try {
      if (dicIndex != 0) {
        allocator.setPrimitiveObject(index,dicManager.get(dicIndex));
      }
 else {
        allocator.setNull(index);
      }
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
  }
  for (int i=index; i < length; i++) {
    allocator.setNull(i);
  }
}","@Override public void setPrimitiveObjectArray(final IExpressionIndex indexList,final int start,final int length,final IMemoryAllocator allocator){
  int loopEnd=(start + length);
  if (indexList.size() < loopEnd) {
    loopEnd=indexList.size();
  }
  int index=0;
  for (int i=start; i < loopEnd; i++, index++) {
    int targetIndex=indexList.get(i);
    if (indexSize <= targetIndex) {
      break;
    }
    int dicIndex=dicIndexIntBuffer.get(targetIndex);
    try {
      if (dicIndex == 0) {
        allocator.setNull(index);
      }
 else {
        allocator.setPrimitiveObject(index,dicManager.get(dicIndex));
      }
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
  }
  for (int i=index; i < length; i++) {
    allocator.setNull(i);
  }
}",0.7653846153846153
172740,"@Override public IColumn toColumn(final ColumnBinary columnBinary) throws IOException {
  IColumn result=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  ICellManager cellManager;
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
switch (columnBinary.columnType) {
case BOOLEAN:
    if (wrapBuffer.get() == 1) {
      cellManager=new ConstantCellManager(columnBinary.columnType,new BooleanObj(true),columnBinary.rowCount);
    }
 else {
      cellManager=new ConstantCellManager(columnBinary.columnType,new BooleanObj(false),columnBinary.rowCount);
    }
  break;
case BYTE:
byte byteValue=wrapBuffer.get();
cellManager=new ConstantCellManager(columnBinary.columnType,new ByteObj(byteValue),columnBinary.rowCount);
cellManager.setIndex(new RangeByteIndex(byteValue,byteValue));
break;
case SHORT:
short shortValue=wrapBuffer.getShort();
cellManager=new ConstantCellManager(columnBinary.columnType,new ShortObj(shortValue),columnBinary.rowCount);
cellManager.setIndex(new RangeShortIndex(shortValue,shortValue));
break;
case INTEGER:
int intValue=wrapBuffer.getInt();
cellManager=new ConstantCellManager(columnBinary.columnType,new IntegerObj(intValue),columnBinary.rowCount);
cellManager.setIndex(new RangeIntegerIndex(intValue,intValue));
break;
case LONG:
long longValue=wrapBuffer.getLong();
cellManager=new ConstantCellManager(columnBinary.columnType,new LongObj(longValue),columnBinary.rowCount);
cellManager.setIndex(new RangeLongIndex(longValue,longValue));
break;
case FLOAT:
float floatValue=wrapBuffer.getFloat();
cellManager=new ConstantCellManager(columnBinary.columnType,new FloatObj(floatValue),columnBinary.rowCount);
cellManager.setIndex(new RangeFloatIndex(floatValue,floatValue));
break;
case DOUBLE:
double doubleValue=wrapBuffer.getDouble();
cellManager=new ConstantCellManager(columnBinary.columnType,new DoubleObj(doubleValue),columnBinary.rowCount);
cellManager.setIndex(new RangeDoubleIndex(doubleValue,doubleValue));
break;
case STRING:
int stringLength=wrapBuffer.getInt();
byte[] stringBytes=new byte[stringLength];
wrapBuffer.get(stringBytes);
cellManager=new ConstantCellManager(columnBinary.columnType,new UTF8BytesLinkObj(stringBytes,0,stringBytes.length),columnBinary.rowCount);
String string=new String(stringBytes,0,stringBytes.length,""String_Node_Str"");
cellManager.setIndex(new RangeStringIndex(string,string,false));
break;
case BYTES:
int byteLength=wrapBuffer.getInt();
byte[] byteBytes=new byte[byteLength];
wrapBuffer.get(byteBytes);
cellManager=new ConstantCellManager(columnBinary.columnType,new BytesObj(byteBytes,0,byteBytes.length),columnBinary.rowCount);
break;
default :
throw new IOException(""String_Node_Str"");
}
result.setCellManager(cellManager);
return result;
}","@Override public IColumn toColumn(final ColumnBinary columnBinary) throws IOException {
  ICellManager cellManager;
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
switch (columnBinary.columnType) {
case BOOLEAN:
    if (wrapBuffer.get() == 1) {
      cellManager=new ConstantCellManager(columnBinary.columnType,new BooleanObj(true),columnBinary.rowCount);
    }
 else {
      cellManager=new ConstantCellManager(columnBinary.columnType,new BooleanObj(false),columnBinary.rowCount);
    }
  break;
case BYTE:
byte byteValue=wrapBuffer.get();
cellManager=new ConstantCellManager(columnBinary.columnType,new ByteObj(byteValue),columnBinary.rowCount);
cellManager.setIndex(new RangeByteIndex(byteValue,byteValue));
break;
case SHORT:
short shortValue=wrapBuffer.getShort();
cellManager=new ConstantCellManager(columnBinary.columnType,new ShortObj(shortValue),columnBinary.rowCount);
cellManager.setIndex(new RangeShortIndex(shortValue,shortValue));
break;
case INTEGER:
int intValue=wrapBuffer.getInt();
cellManager=new ConstantCellManager(columnBinary.columnType,new IntegerObj(intValue),columnBinary.rowCount);
cellManager.setIndex(new RangeIntegerIndex(intValue,intValue));
break;
case LONG:
long longValue=wrapBuffer.getLong();
cellManager=new ConstantCellManager(columnBinary.columnType,new LongObj(longValue),columnBinary.rowCount);
cellManager.setIndex(new RangeLongIndex(longValue,longValue));
break;
case FLOAT:
float floatValue=wrapBuffer.getFloat();
cellManager=new ConstantCellManager(columnBinary.columnType,new FloatObj(floatValue),columnBinary.rowCount);
cellManager.setIndex(new RangeFloatIndex(floatValue,floatValue));
break;
case DOUBLE:
double doubleValue=wrapBuffer.getDouble();
cellManager=new ConstantCellManager(columnBinary.columnType,new DoubleObj(doubleValue),columnBinary.rowCount);
cellManager.setIndex(new RangeDoubleIndex(doubleValue,doubleValue));
break;
case STRING:
int stringLength=wrapBuffer.getInt();
byte[] stringBytes=new byte[stringLength];
wrapBuffer.get(stringBytes);
cellManager=new ConstantCellManager(columnBinary.columnType,new UTF8BytesLinkObj(stringBytes,0,stringBytes.length),columnBinary.rowCount);
String string=new String(stringBytes,0,stringBytes.length,""String_Node_Str"");
cellManager.setIndex(new RangeStringIndex(string,string));
break;
case BYTES:
int byteLength=wrapBuffer.getInt();
byte[] byteBytes=new byte[byteLength];
wrapBuffer.get(byteBytes);
cellManager=new ConstantCellManager(columnBinary.columnType,new BytesObj(byteBytes,0,byteBytes.length),columnBinary.rowCount);
break;
default :
throw new IOException(""String_Node_Str"");
}
IColumn result=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
result.setCellManager(cellManager);
return result;
}",0.9681801930639972
172741,"@Override public void setBlockIndexNode(final BlockIndexNode parentNode,final ColumnBinary columnBinary,final int spreadIndex) throws IOException {
  BlockIndexNode currentNode=parentNode.getChildNode(columnBinary.columnName);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
switch (columnBinary.columnType) {
case BYTE:
    byte byteValue=wrapBuffer.get();
  currentNode.setBlockIndex(new ByteRangeBlockIndex(byteValue,byteValue));
break;
case SHORT:
short shortValue=wrapBuffer.getShort();
currentNode.setBlockIndex(new ShortRangeBlockIndex(shortValue,shortValue));
break;
case INTEGER:
int intValue=wrapBuffer.getInt();
currentNode.setBlockIndex(new IntegerRangeBlockIndex(intValue,intValue));
break;
case LONG:
long longValue=wrapBuffer.getLong();
currentNode.setBlockIndex(new LongRangeBlockIndex(longValue,longValue));
break;
case FLOAT:
float floatValue=wrapBuffer.getFloat();
currentNode.setBlockIndex(new FloatRangeBlockIndex(floatValue,floatValue));
break;
case DOUBLE:
double doubleValue=wrapBuffer.getDouble();
currentNode.setBlockIndex(new DoubleRangeBlockIndex(doubleValue,doubleValue));
break;
case STRING:
int stringLength=wrapBuffer.getInt();
byte[] stringBytes=new byte[stringLength];
wrapBuffer.get(stringBytes);
String string=new String(stringBytes,0,stringBytes.length,""String_Node_Str"");
currentNode.setBlockIndex(new StringRangeBlockIndex(string,string));
break;
default :
currentNode.disable();
}
}","@Override public void setBlockIndexNode(final BlockIndexNode parentNode,final ColumnBinary columnBinary,final int spreadIndex) throws IOException {
  BlockIndexNode currentNode=parentNode.getChildNode(columnBinary.columnName);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
switch (columnBinary.columnType) {
case BYTE:
    byte byteValue=wrapBuffer.get();
  currentNode.setBlockIndex(new ByteRangeBlockIndex(byteValue,byteValue));
break;
case SHORT:
short shortValue=wrapBuffer.getShort();
currentNode.setBlockIndex(new ShortRangeBlockIndex(shortValue,shortValue));
break;
case INTEGER:
int intValue=wrapBuffer.getInt();
currentNode.setBlockIndex(new IntegerRangeBlockIndex(intValue,intValue));
break;
case LONG:
long longValue=wrapBuffer.getLong();
currentNode.setBlockIndex(new LongRangeBlockIndex(longValue,longValue));
break;
case FLOAT:
float floatValue=wrapBuffer.getFloat();
currentNode.setBlockIndex(new FloatRangeBlockIndex(floatValue,floatValue));
break;
case DOUBLE:
double doubleValue=wrapBuffer.getDouble();
currentNode.setBlockIndex(new DoubleRangeBlockIndex(doubleValue,doubleValue));
break;
case STRING:
int stringLength=wrapBuffer.getInt();
byte[] stringBytes=new byte[stringLength];
wrapBuffer.get(stringBytes);
String string=new String(stringBytes,0,stringBytes.length,""String_Node_Str"");
currentNode.setBlockIndex(new StringRangeBlockIndex(string,string));
break;
default :
currentNode.disable();
break;
}
}",0.9976517946997652
172742,"@Override public ColumnBinary toBinary(final ColumnBinaryMakerConfig commonConfig,final ColumnBinaryMakerCustomConfigNode currentConfigNode,final IColumn column) throws IOException {
  ColumnBinaryMakerConfig currentConfig=commonConfig;
  if (currentConfigNode != null) {
    currentConfig=currentConfigNode.getCurrentConfig();
  }
  byte[] binaryRaw=new byte[Integer.BYTES * column.size()];
  IntBuffer intIndexBuffer=ByteBuffer.wrap(binaryRaw).asIntBuffer();
  List<Integer> numberList=new ArrayList<Integer>();
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell instanceof ArrayCell) {
      ArrayCell arrayCell=(ArrayCell)cell;
      intIndexBuffer.put(arrayCell.getEnd() - arrayCell.getStart());
    }
 else {
      intIndexBuffer.put(0);
    }
  }
  byte[] compressData=currentConfig.compressorClass.compress(binaryRaw,0,binaryRaw.length);
  IColumn childColumn=column.getColumn(0);
  List<ColumnBinary> columnBinaryList=new ArrayList<ColumnBinary>();
  ColumnBinaryMakerCustomConfigNode childColumnConfigNode=null;
  IColumnBinaryMaker maker=commonConfig.getColumnMaker(childColumn.getColumnType());
  if (currentConfigNode != null) {
    childColumnConfigNode=currentConfigNode.getChildConfigNode(childColumn.getColumnName());
    if (childColumnConfigNode != null) {
      maker=childColumnConfigNode.getCurrentConfig().getColumnMaker(childColumn.getColumnType());
    }
  }
  columnBinaryList.add(maker.toBinary(commonConfig,childColumnConfigNode,childColumn));
  return new ColumnBinary(this.getClass().getName(),currentConfig.compressorClass.getClass().getName(),column.getColumnName(),ColumnType.ARRAY,column.size(),binaryRaw.length,0,-1,compressData,0,compressData.length,columnBinaryList);
}","@Override public ColumnBinary toBinary(final ColumnBinaryMakerConfig commonConfig,final ColumnBinaryMakerCustomConfigNode currentConfigNode,final IColumn column) throws IOException {
  ColumnBinaryMakerConfig currentConfig=commonConfig;
  if (currentConfigNode != null) {
    currentConfig=currentConfigNode.getCurrentConfig();
  }
  byte[] binaryRaw=new byte[Integer.BYTES * column.size()];
  IntBuffer intIndexBuffer=ByteBuffer.wrap(binaryRaw).asIntBuffer();
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell instanceof ArrayCell) {
      ArrayCell arrayCell=(ArrayCell)cell;
      intIndexBuffer.put(arrayCell.getEnd() - arrayCell.getStart());
    }
 else {
      intIndexBuffer.put(0);
    }
  }
  byte[] compressData=currentConfig.compressorClass.compress(binaryRaw,0,binaryRaw.length);
  IColumn childColumn=column.getColumn(0);
  List<ColumnBinary> columnBinaryList=new ArrayList<ColumnBinary>();
  ColumnBinaryMakerCustomConfigNode childColumnConfigNode=null;
  IColumnBinaryMaker maker=commonConfig.getColumnMaker(childColumn.getColumnType());
  if (currentConfigNode != null) {
    childColumnConfigNode=currentConfigNode.getChildConfigNode(childColumn.getColumnName());
    if (childColumnConfigNode != null) {
      maker=childColumnConfigNode.getCurrentConfig().getColumnMaker(childColumn.getColumnType());
    }
  }
  columnBinaryList.add(maker.toBinary(commonConfig,childColumnConfigNode,childColumn));
  return new ColumnBinary(this.getClass().getName(),currentConfig.compressorClass.getClass().getName(),column.getColumnName(),ColumnType.ARRAY,column.size(),binaryRaw.length,0,-1,compressData,0,compressData.length,columnBinaryList);
}",0.9845345783484096
172743,"@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  for (  ColumnBinary childColumnBinary : columnBinary.columnBinaryList) {
    IColumnBinaryMaker maker=FindColumnBinaryMaker.get(childColumnBinary.makerClassName);
    IMemoryAllocator childMemoryAllocator=allocator.getArrayChild(childColumnBinary.rowCount,childColumnBinary.columnType);
    maker.loadInMemoryStorage(childColumnBinary,childMemoryAllocator);
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] decompressBuffer=compressor.decompress(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  IntBuffer buffer=ByteBuffer.wrap(decompressBuffer).asIntBuffer();
  int length=buffer.capacity();
  int currentIndex=0;
  for (int i=0; i < length; i++) {
    int arrayLength=buffer.get();
    if (arrayLength != 0) {
      int start=currentIndex;
      allocator.setArrayIndex(i,start,arrayLength);
      currentIndex+=arrayLength;
    }
 else {
      allocator.setNull(i);
    }
  }
  allocator.setValueCount(length);
}","@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  for (  ColumnBinary childColumnBinary : columnBinary.columnBinaryList) {
    IColumnBinaryMaker maker=FindColumnBinaryMaker.get(childColumnBinary.makerClassName);
    IMemoryAllocator childMemoryAllocator=allocator.getArrayChild(childColumnBinary.rowCount,childColumnBinary.columnType);
    maker.loadInMemoryStorage(childColumnBinary,childMemoryAllocator);
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] decompressBuffer=compressor.decompress(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  IntBuffer buffer=ByteBuffer.wrap(decompressBuffer).asIntBuffer();
  int length=buffer.capacity();
  int currentIndex=0;
  for (int i=0; i < length; i++) {
    int arrayLength=buffer.get();
    if (arrayLength == 0) {
      allocator.setNull(i);
    }
 else {
      int start=currentIndex;
      allocator.setArrayIndex(i,start,arrayLength);
      currentIndex+=arrayLength;
    }
  }
  allocator.setValueCount(length);
}",0.9318385650224216
172744,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    if (columnType != ((INullFilter)filter).getTargetColumnType()) {
      return null;
    }
  for (int i=0; i < size(); i++) {
    if (dicIndexIntBuffer.get(i) != 0) {
      filterArray[i]=true;
    }
  }
return filterArray;
case NULL:
if (columnType != ((INullFilter)filter).getTargetColumnType()) {
return null;
}
for (int i=0; i < size(); i++) {
if (dicIndexIntBuffer.get(i) == 0) {
filterArray[i]=true;
}
}
return filterArray;
default :
return index.filter(filter,filterArray);
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    if (columnType != ((INullFilter)filter).getTargetColumnType()) {
      return null;
    }
  for (int i=0; i < filterArray.length; i++) {
    if (i < size()) {
      if (dicIndexIntBuffer.get(i) != 0) {
        filterArray[i]=true;
      }
    }
 else {
      filterArray[i]=false;
    }
  }
return filterArray;
case NULL:
if (columnType != ((INullFilter)filter).getTargetColumnType()) {
return null;
}
for (int i=0; i < filterArray.length; i++) {
if (i < size()) {
if (dicIndexIntBuffer.get(i) == 0) {
  filterArray[i]=true;
}
}
 else {
filterArray[i]=true;
}
}
return filterArray;
default :
return index.filter(filter,filterArray);
}
}",0.8766550522648083
172745,"@Override public boolean[] exec(final Spread spread) throws IOException {
  boolean[] childCollection=childNode.exec(spread);
  if (childCollection == null) {
    return null;
  }
  for (int i=0; i < childCollection.length; i++) {
    childCollection[i]=!childCollection[i];
  }
  return childCollection;
}","@Override public boolean[] exec(final Spread spread) throws IOException {
  if (childNode == null) {
    return null;
  }
  boolean[] childCollection=childNode.exec(spread);
  if (childCollection == null) {
    return null;
  }
  for (int i=0; i < childCollection.length; i++) {
    childCollection[i]=!childCollection[i];
  }
  return childCollection;
}",0.9272727272727272
172746,"@Override public void setInteger(final int index,final int value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setInteger(final int index,final int value) throws IOException {
  setByte(index,new IntegerObj(value).getByte());
}",0.7430555555555556
172747,"@Override public void setShort(final int index,final short value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setShort(final int index,final short value) throws IOException {
  setByte(index,new ShortObj(value).getByte());
}",0.7412587412587412
172748,"@Override public void setLong(final int index,final long value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setLong(final int index,final long value) throws IOException {
  setByte(index,new LongObj(value).getByte());
}",0.7188612099644128
172749,"@Override public void setByte(final int index,final byte value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setByte(final int index,final byte value) throws IOException {
  setInteger(index,(int)value);
}",0.7744360902255639
172750,"@Override public void setShort(final int index,final short value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setShort(final int index,final short value) throws IOException {
  setInteger(index,(int)value);
}",0.7777777777777778
172751,"@Override public void setLong(final int index,final long value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setLong(final int index,final long value) throws IOException {
  setInteger(index,new LongObj(value).getInt());
}",0.7279151943462897
172752,"@Override public void setByte(final int index,final byte value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setByte(final int index,final byte value) throws IOException {
  setLong(index,(long)value);
}",0.75
172753,"@Override public void setInteger(final int index,final int value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setInteger(final int index,final int value) throws IOException {
  setLong(index,(long)value);
}",0.753731343283582
172754,"@Override public void setShort(final int index,final short value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setShort(final int index,final short value) throws IOException {
  setLong(index,(long)value);
}",0.753731343283582
172755,"@Override public void setByte(final int index,final byte value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setByte(final int index,final byte value) throws IOException {
  setShort(index,(short)value);
}",0.7669172932330827
172756,"@Override public void setInteger(final int index,final int value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setInteger(final int index,final int value) throws IOException {
  setShort(index,new IntegerObj(value).getShort());
}",0.7310344827586207
172757,"@Override public void setLong(final int index,final long value) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void setLong(final int index,final long value) throws IOException {
  setShort(index,new LongObj(value).getShort());
}",0.734982332155477
172758,"@Test public void T_setByte_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.BYTE,""String_Node_Str"");
  column.add(ColumnType.BYTE,new ByteObj((byte)100),0);
  column.add(ColumnType.BYTE,new ByteObj((byte)200),1);
  column.add(ColumnType.BYTE,new ByteObj((byte)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqByteColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.BYTE,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readByte().byteValue(),(byte)100);
  reader.setPosition(1);
  assertEquals(reader.readByte().byteValue(),(byte)200);
  reader.setPosition(5);
  assertEquals(reader.readByte().byteValue(),(byte)255);
  reader.setPosition(2);
  assertEquals(reader.readByte(),null);
  reader.setPosition(3);
  assertEquals(reader.readByte(),null);
  reader.setPosition(4);
  assertEquals(reader.readByte(),null);
}","@Test public void T_setByte_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.BYTE,""String_Node_Str"");
  column.add(ColumnType.BYTE,new ByteObj((byte)100),0);
  column.add(ColumnType.BYTE,new ByteObj((byte)200),1);
  column.add(ColumnType.BYTE,new ByteObj((byte)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeLongColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.BYTE,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readByte().byteValue(),(byte)100);
  reader.setPosition(1);
  assertEquals(reader.readByte().byteValue(),(byte)200);
  reader.setPosition(5);
  assertEquals(reader.readByte().byteValue(),(byte)255);
  reader.setPosition(2);
  assertEquals(reader.readByte(),null);
  reader.setPosition(3);
  assertEquals(reader.readByte(),null);
  reader.setPosition(4);
  assertEquals(reader.readByte(),null);
}",0.9938309685379396
172759,"@Test public void T_setDouble_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.DOUBLE,""String_Node_Str"");
  column.add(ColumnType.DOUBLE,new DoubleObj((double)100),0);
  column.add(ColumnType.DOUBLE,new DoubleObj((double)200),1);
  column.add(ColumnType.DOUBLE,new DoubleObj((double)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqDoubleColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.DOUBLE,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readDouble().doubleValue(),(double)100);
  reader.setPosition(1);
  assertEquals(reader.readDouble().doubleValue(),(double)200);
  reader.setPosition(5);
  assertEquals(reader.readDouble().doubleValue(),(double)255);
  reader.setPosition(2);
  assertEquals(reader.readDouble(),null);
  reader.setPosition(3);
  assertEquals(reader.readDouble(),null);
  reader.setPosition(4);
  assertEquals(reader.readDouble(),null);
}","@Test public void T_setDouble_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.DOUBLE,""String_Node_Str"");
  column.add(ColumnType.DOUBLE,new DoubleObj((double)100),0);
  column.add(ColumnType.DOUBLE,new DoubleObj((double)200),1);
  column.add(ColumnType.DOUBLE,new DoubleObj((double)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeDoubleColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.DOUBLE,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readDouble().doubleValue(),(double)100);
  reader.setPosition(1);
  assertEquals(reader.readDouble().doubleValue(),(double)200);
  reader.setPosition(5);
  assertEquals(reader.readDouble().doubleValue(),(double)255);
  reader.setPosition(2);
  assertEquals(reader.readDouble(),null);
  reader.setPosition(3);
  assertEquals(reader.readDouble(),null);
  reader.setPosition(4);
  assertEquals(reader.readDouble(),null);
}",0.9964093357271095
172760,"@Test public void T_setFloat_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.FLOAT,""String_Node_Str"");
  column.add(ColumnType.FLOAT,new FloatObj((float)100),0);
  column.add(ColumnType.FLOAT,new FloatObj((float)200),1);
  column.add(ColumnType.FLOAT,new FloatObj((float)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqFloatColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.FLOAT,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readFloat().floatValue(),(float)100);
  reader.setPosition(1);
  assertEquals(reader.readFloat().floatValue(),(float)200);
  reader.setPosition(5);
  assertEquals(reader.readFloat().floatValue(),(float)255);
  reader.setPosition(2);
  assertEquals(reader.readFloat(),null);
  reader.setPosition(3);
  assertEquals(reader.readFloat(),null);
  reader.setPosition(4);
  assertEquals(reader.readFloat(),null);
}","@Test public void T_setFloat_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.FLOAT,""String_Node_Str"");
  column.add(ColumnType.FLOAT,new FloatObj((float)100),0);
  column.add(ColumnType.FLOAT,new FloatObj((float)200),1);
  column.add(ColumnType.FLOAT,new FloatObj((float)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeFloatColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.FLOAT,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readFloat().floatValue(),(float)100);
  reader.setPosition(1);
  assertEquals(reader.readFloat().floatValue(),(float)200);
  reader.setPosition(5);
  assertEquals(reader.readFloat().floatValue(),(float)255);
  reader.setPosition(2);
  assertEquals(reader.readFloat(),null);
  reader.setPosition(3);
  assertEquals(reader.readFloat(),null);
  reader.setPosition(4);
  assertEquals(reader.readFloat(),null);
}",0.9963547995139732
172761,"@Test public void T_setInteger_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.INTEGER,""String_Node_Str"");
  column.add(ColumnType.INTEGER,new IntegerObj(100),0);
  column.add(ColumnType.INTEGER,new IntegerObj(200),1);
  column.add(ColumnType.INTEGER,new IntegerObj(255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqIntegerColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.INTEGER,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readInteger().intValue(),100);
  reader.setPosition(1);
  assertEquals(reader.readInteger().intValue(),200);
  reader.setPosition(5);
  assertEquals(reader.readInteger().intValue(),255);
  reader.setPosition(2);
  assertEquals(reader.readInteger(),null);
  reader.setPosition(3);
  assertEquals(reader.readInteger(),null);
  reader.setPosition(4);
  assertEquals(reader.readInteger(),null);
}","@Test public void T_setInteger_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.INTEGER,""String_Node_Str"");
  column.add(ColumnType.INTEGER,new IntegerObj(100),0);
  column.add(ColumnType.INTEGER,new IntegerObj(200),1);
  column.add(ColumnType.INTEGER,new IntegerObj(255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeLongColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.INTEGER,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readInteger().intValue(),100);
  reader.setPosition(1);
  assertEquals(reader.readInteger().intValue(),200);
  reader.setPosition(5);
  assertEquals(reader.readInteger().intValue(),255);
  reader.setPosition(2);
  assertEquals(reader.readInteger(),null);
  reader.setPosition(3);
  assertEquals(reader.readInteger(),null);
  reader.setPosition(4);
  assertEquals(reader.readInteger(),null);
}",0.9929382867669636
172762,"@Test public void T_setLong_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.LONG,""String_Node_Str"");
  column.add(ColumnType.LONG,new LongObj((long)100),0);
  column.add(ColumnType.LONG,new LongObj((long)200),1);
  column.add(ColumnType.LONG,new LongObj((long)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqLongColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.LONG,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readLong().longValue(),(long)100);
  reader.setPosition(1);
  assertEquals(reader.readLong().longValue(),(long)200);
  reader.setPosition(5);
  assertEquals(reader.readLong().longValue(),(long)255);
  reader.setPosition(2);
  assertEquals(reader.readLong(),null);
  reader.setPosition(3);
  assertEquals(reader.readLong(),null);
  reader.setPosition(4);
  assertEquals(reader.readLong(),null);
}","@Test public void T_setLong_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.LONG,""String_Node_Str"");
  column.add(ColumnType.LONG,new LongObj((long)100),0);
  column.add(ColumnType.LONG,new LongObj((long)200),1);
  column.add(ColumnType.LONG,new LongObj((long)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeLongColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.LONG,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readLong().longValue(),(long)100);
  reader.setPosition(1);
  assertEquals(reader.readLong().longValue(),(long)200);
  reader.setPosition(5);
  assertEquals(reader.readLong().longValue(),(long)255);
  reader.setPosition(2);
  assertEquals(reader.readLong(),null);
  reader.setPosition(3);
  assertEquals(reader.readLong(),null);
  reader.setPosition(4);
  assertEquals(reader.readLong(),null);
}",0.9962985811227636
172763,"@Test public void T_setShort_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.SHORT,""String_Node_Str"");
  column.add(ColumnType.SHORT,new ShortObj((short)100),0);
  column.add(ColumnType.SHORT,new ShortObj((short)200),1);
  column.add(ColumnType.SHORT,new ShortObj((short)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqShortColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.SHORT,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals((short)(reader.readCharacter().charValue()),(short)100);
  reader.setPosition(1);
  assertEquals((short)(reader.readCharacter().charValue()),(short)200);
  reader.setPosition(5);
  assertEquals((short)(reader.readCharacter().charValue()),(short)255);
  reader.setPosition(2);
  assertEquals(reader.readCharacter(),null);
  reader.setPosition(3);
  assertEquals(reader.readCharacter(),null);
  reader.setPosition(4);
  assertEquals(reader.readCharacter(),null);
}","@Test public void T_setShort_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.SHORT,""String_Node_Str"");
  column.add(ColumnType.SHORT,new ShortObj((short)100),0);
  column.add(ColumnType.SHORT,new ShortObj((short)200),1);
  column.add(ColumnType.SHORT,new ShortObj((short)255),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeLongColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.SHORT,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals((short)(reader.readCharacter().charValue()),(short)100);
  reader.setPosition(1);
  assertEquals((short)(reader.readCharacter().charValue()),(short)200);
  reader.setPosition(5);
  assertEquals((short)(reader.readCharacter().charValue()),(short)255);
  reader.setPosition(2);
  assertEquals(reader.readCharacter(),null);
  reader.setPosition(3);
  assertEquals(reader.readCharacter(),null);
  reader.setPosition(4);
  assertEquals(reader.readCharacter(),null);
}",0.9937998228520816
172764,"@Test public void T_setString_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.STRING,""String_Node_Str"");
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),0);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),1);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new UniqStringColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.STRING,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readText().toString(),""String_Node_Str"");
  reader.setPosition(1);
  assertEquals(reader.readText().toString(),""String_Node_Str"");
  reader.setPosition(5);
  assertEquals(reader.readText().toString(),""String_Node_Str"");
  reader.setPosition(2);
  assertEquals(reader.readText(),null);
  reader.setPosition(3);
  assertEquals(reader.readText(),null);
  reader.setPosition(4);
  assertEquals(reader.readText(),null);
}","@Test public void T_setString_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.STRING,""String_Node_Str"");
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),0);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),1);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new OptimizeDumpStringColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column);
  BufferAllocator allocator=new RootAllocator(1024 * 1024 * 10);
  SchemaChangeCallBack callBack=new SchemaChangeCallBack();
  MapVector parent=new MapVector(""String_Node_Str"",allocator,new FieldType(false,Struct.INSTANCE,null,null),callBack);
  parent.allocateNew();
  IMemoryAllocator memoryAllocator=ArrowMemoryAllocatorFactory.getFromMapVector(ColumnType.STRING,""String_Node_Str"",allocator,parent);
  maker.loadInMemoryStorage(columnBinary,memoryAllocator);
  MapReader rootReader=parent.getReader();
  FieldReader reader=rootReader.reader(""String_Node_Str"");
  reader.setPosition(0);
  assertEquals(reader.readText().toString(),""String_Node_Str"");
  reader.setPosition(1);
  assertEquals(reader.readText().toString(),""String_Node_Str"");
  reader.setPosition(5);
  assertEquals(reader.readText().toString(),""String_Node_Str"");
  reader.setPosition(2);
  assertEquals(reader.readText(),null);
  reader.setPosition(3);
  assertEquals(reader.readText(),null);
  reader.setPosition(4);
  assertEquals(reader.readText(),null);
}",0.995260663507109
172765,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return filterArray;
default :
return index.filter(filter,filterArray);
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return null;
default :
return index.filter(filter,filterArray);
}
}",0.9705304518664049
172766,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return filterArray;
default :
return index.filter(filter,filterArray);
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    return null;
case NULL:
  return new boolean[filterArray.length];
default :
return index.filter(filter,filterArray);
}
}",0.9626865671641792
172767,"@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    for (int i=0; i < cellArray.length; i++) {
      if (cellArray[i] != null) {
        filterArray[i]=true;
      }
    }
  return filterArray;
case NULL:
for (int i=0; i < cellArray.length; i++) {
  if (cellArray == null) {
    filterArray[i]=true;
  }
}
return filterArray;
default :
return null;
}
}","@Override public boolean[] filter(final IFilter filter,final boolean[] filterArray) throws IOException {
switch (filter.getFilterType()) {
case NOT_NULL:
    for (int i=0; i < cellArray.length; i++) {
      if (cellArray[i] != null) {
        filterArray[i]=true;
      }
    }
  return filterArray;
case NULL:
for (int i=0; i < cellArray.length; i++) {
  if (cellArray[i] == null) {
    filterArray[i]=true;
  }
}
return filterArray;
default :
return null;
}
}",0.9967355821545156
172768,"@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  Double min=Double.valueOf(wrapBuffer.getDouble());
  Double max=Double.valueOf(wrapBuffer.getDouble());
  IDictionaryIndexMaker indexMaker=chooseDictionaryIndexMaker(columnBinary.rowCount);
  IDictionaryMaker dicMaker=chooseDictionaryMaker(min.doubleValue(),max.doubleValue());
  int start=columnBinary.binaryStart + (Double.BYTES * 2);
  int length=columnBinary.binaryLength - (Double.BYTES * 2);
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,start,length);
  int indexLength=indexMaker.calcBinarySize(columnBinary.rowCount);
  int dicLength=dicMaker.calcBinarySize(columnBinary.cardinality);
  IntBuffer indexIntBuffer=indexMaker.getIndexIntBuffer(binary,0,indexLength);
  PrimitiveObject[] dicArray=dicMaker.getDicPrimitiveArray(binary,indexLength,dicLength);
  int loopCount=indexIntBuffer.capacity();
  for (int i=0; i < loopCount; i++) {
    int dicIndex=indexIntBuffer.get();
    if (dicIndex != 0) {
      allocator.setDouble(i,dicArray[dicIndex].getDouble());
    }
  }
  allocator.setValueCount(loopCount);
}","@Override public void loadInMemoryStorage(final ColumnBinary columnBinary,final IMemoryAllocator allocator) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  Double min=Double.valueOf(wrapBuffer.getDouble());
  Double max=Double.valueOf(wrapBuffer.getDouble());
  IDictionaryIndexMaker indexMaker=chooseDictionaryIndexMaker(columnBinary.rowCount);
  IDictionaryMaker dicMaker=chooseDictionaryMaker(min.doubleValue(),max.doubleValue());
  int start=columnBinary.binaryStart + (Double.BYTES * 2);
  int length=columnBinary.binaryLength - (Double.BYTES * 2);
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,start,length);
  int indexLength=indexMaker.calcBinarySize(columnBinary.rowCount);
  int dicLength=dicMaker.calcBinarySize(columnBinary.cardinality);
  IntBuffer indexIntBuffer=indexMaker.getIndexIntBuffer(binary,0,indexLength);
  PrimitiveObject[] dicArray=dicMaker.getDicPrimitiveArray(binary,indexLength,dicLength);
  for (int i=0; i < columnBinary.rowCount; i++) {
    int dicIndex=indexIntBuffer.get();
    if (dicIndex != 0) {
      allocator.setDouble(i,dicArray[dicIndex].getDouble());
    }
  }
  allocator.setValueCount(columnBinary.rowCount);
}",0.9691105321920356
172769,"@Override public ColumnBinary toBinary(final ColumnBinaryMakerConfig commonConfig,final ColumnBinaryMakerCustomConfigNode currentConfigNode,final IColumn column,final MakerCache makerCache) throws IOException {
  ColumnBinaryMakerConfig currentConfig=commonConfig;
  if (currentConfigNode != null) {
    currentConfig=currentConfigNode.getCurrentConfig();
  }
  byte[] nullFlagBytes=new byte[column.size()];
  List<byte[]> objList=new ArrayList<byte[]>();
  int totalLength=0;
  int logicalDataLength=0;
  int rowCount=0;
  boolean hasNull=false;
  String min=""String_Node_Str"";
  String max=""String_Node_Str"";
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullFlagBytes[i]=(byte)1;
      objList.add(new byte[0]);
      hasNull=true;
      continue;
    }
    PrimitiveCell byteCell=(PrimitiveCell)cell;
    String strObj=byteCell.getRow().getString();
    if (strObj == null) {
      nullFlagBytes[i]=(byte)1;
      objList.add(new byte[0]);
      hasNull=true;
      continue;
    }
    byte[] obj=strObj.getBytes(""String_Node_Str"");
    rowCount++;
    totalLength+=obj.length;
    logicalDataLength+=strObj.length() * Character.BYTES;
    objList.add(obj);
    if (max.compareTo(strObj) < 0) {
      max=strObj;
    }
    if (min.isEmpty() || 0 < min.compareTo(strObj)) {
      min=strObj;
    }
  }
  if (!hasNull && min.equals(max)) {
    return ConstantColumnBinaryMaker.createColumnBinary(new StringObj(min),column.getColumnName(),column.size());
  }
  byte[] binary;
  int rawLength;
  int minLength=Character.BYTES * min.length();
  int maxLength=Character.BYTES * max.length();
  int headerSize=Integer.BYTES + minLength + Integer.BYTES+ maxLength+ Integer.BYTES;
  if (hasNull) {
    byte[] binaryRaw=convertBinary(nullFlagBytes,objList,currentConfig,totalLength);
    byte[] compressBinaryRaw=currentConfig.compressorClass.compress(binaryRaw,0,binaryRaw.length);
    rawLength=binaryRaw.length;
    binary=new byte[headerSize + compressBinaryRaw.length];
    ByteBuffer wrapBuffer=ByteBuffer.wrap(binary);
    wrapBuffer.putInt(minLength);
    wrapBuffer.asCharBuffer().put(min);
    wrapBuffer.position(wrapBuffer.position() + minLength);
    wrapBuffer.putInt(maxLength);
    wrapBuffer.asCharBuffer().put(max);
    wrapBuffer.position(wrapBuffer.position() + maxLength);
    wrapBuffer.putInt(0);
    wrapBuffer.put(compressBinaryRaw);
  }
 else {
    rawLength=totalLength + Integer.BYTES * objList.size();
    byte[] binaryRaw=new byte[rawLength];
    ByteBuffer objBuffer=ByteBuffer.wrap(binaryRaw);
    for (    byte[] obj : objList) {
      objBuffer.putInt(obj.length);
      objBuffer.put(obj);
    }
    byte[] compressBinaryRaw=currentConfig.compressorClass.compress(binaryRaw,0,binaryRaw.length);
    binary=new byte[headerSize + compressBinaryRaw.length];
    ByteBuffer wrapBuffer=ByteBuffer.wrap(binary);
    wrapBuffer.putInt(minLength);
    wrapBuffer.asCharBuffer().put(min);
    wrapBuffer.position(wrapBuffer.position() + minLength);
    wrapBuffer.putInt(maxLength);
    wrapBuffer.asCharBuffer().put(max);
    wrapBuffer.position(wrapBuffer.position() + maxLength);
    wrapBuffer.putInt(1);
    wrapBuffer.put(compressBinaryRaw);
  }
  return new ColumnBinary(this.getClass().getName(),currentConfig.compressorClass.getClass().getName(),column.getColumnName(),ColumnType.STRING,rowCount,rawLength,logicalDataLength,-1,binary,0,binary.length,null);
}","@Override public ColumnBinary toBinary(final ColumnBinaryMakerConfig commonConfig,final ColumnBinaryMakerCustomConfigNode currentConfigNode,final IColumn column,final MakerCache makerCache) throws IOException {
  ColumnBinaryMakerConfig currentConfig=commonConfig;
  if (currentConfigNode != null) {
    currentConfig=currentConfigNode.getCurrentConfig();
  }
  byte[] nullFlagBytes=new byte[column.size()];
  List<byte[]> objList=new ArrayList<byte[]>();
  int totalLength=0;
  int logicalDataLength=0;
  int rowCount=0;
  boolean hasNull=false;
  String min=null;
  String max=""String_Node_Str"";
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullFlagBytes[i]=(byte)1;
      objList.add(new byte[0]);
      hasNull=true;
      continue;
    }
    PrimitiveCell byteCell=(PrimitiveCell)cell;
    String strObj=byteCell.getRow().getString();
    if (strObj == null) {
      nullFlagBytes[i]=(byte)1;
      objList.add(new byte[0]);
      hasNull=true;
      continue;
    }
    byte[] obj=strObj.getBytes(""String_Node_Str"");
    rowCount++;
    totalLength+=obj.length;
    logicalDataLength+=strObj.length() * Character.BYTES;
    objList.add(obj);
    if (max.compareTo(strObj) < 0) {
      max=strObj;
    }
    if (min == null || 0 < min.compareTo(strObj)) {
      min=strObj;
    }
  }
  if (!hasNull && min.equals(max)) {
    return ConstantColumnBinaryMaker.createColumnBinary(new StringObj(min),column.getColumnName(),column.size());
  }
  byte[] binary;
  int rawLength;
  int minLength=Character.BYTES * min.length();
  int maxLength=Character.BYTES * max.length();
  int headerSize=Integer.BYTES + minLength + Integer.BYTES+ maxLength+ Integer.BYTES;
  if (hasNull) {
    byte[] binaryRaw=convertBinary(nullFlagBytes,objList,currentConfig,totalLength);
    byte[] compressBinaryRaw=currentConfig.compressorClass.compress(binaryRaw,0,binaryRaw.length);
    rawLength=binaryRaw.length;
    binary=new byte[headerSize + compressBinaryRaw.length];
    ByteBuffer wrapBuffer=ByteBuffer.wrap(binary);
    wrapBuffer.putInt(minLength);
    wrapBuffer.asCharBuffer().put(min);
    wrapBuffer.position(wrapBuffer.position() + minLength);
    wrapBuffer.putInt(maxLength);
    wrapBuffer.asCharBuffer().put(max);
    wrapBuffer.position(wrapBuffer.position() + maxLength);
    wrapBuffer.putInt(0);
    wrapBuffer.put(compressBinaryRaw);
  }
 else {
    rawLength=totalLength + Integer.BYTES * objList.size();
    byte[] binaryRaw=new byte[rawLength];
    ByteBuffer objBuffer=ByteBuffer.wrap(binaryRaw);
    for (    byte[] obj : objList) {
      objBuffer.putInt(obj.length);
      objBuffer.put(obj);
    }
    byte[] compressBinaryRaw=currentConfig.compressorClass.compress(binaryRaw,0,binaryRaw.length);
    binary=new byte[headerSize + compressBinaryRaw.length];
    ByteBuffer wrapBuffer=ByteBuffer.wrap(binary);
    wrapBuffer.putInt(minLength);
    wrapBuffer.asCharBuffer().put(min);
    wrapBuffer.position(wrapBuffer.position() + minLength);
    wrapBuffer.putInt(maxLength);
    wrapBuffer.asCharBuffer().put(max);
    wrapBuffer.position(wrapBuffer.position() + maxLength);
    wrapBuffer.putInt(1);
    wrapBuffer.put(compressBinaryRaw);
  }
  return new ColumnBinary(this.getClass().getName(),currentConfig.compressorClass.getClass().getName(),column.getColumnName(),ColumnType.STRING,rowCount,rawLength,logicalDataLength,-1,binary,0,binary.length,null);
}",0.9943584550846232
172770,"@Override public void setBlockIndexNode(final BlockIndexNode parentNode,final ColumnBinary columnBinary) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  int minLength=wrapBuffer.getInt();
  char[] minCharArray=new char[minLength];
  wrapBuffer.asCharBuffer().get(minCharArray);
  wrapBuffer.position(wrapBuffer.position() + minLength);
  int maxLength=wrapBuffer.getInt();
  char[] maxCharArray=new char[maxLength];
  wrapBuffer.asCharBuffer().get(maxCharArray);
  wrapBuffer.position(wrapBuffer.position() + maxLength);
  String min=new String(minCharArray);
  String max=new String(maxCharArray);
  BlockIndexNode currentNode=parentNode.getChildNode(columnBinary.columnName);
  currentNode.setBlockIndex(new StringRangeBlockIndex(min,max));
}","@Override public void setBlockIndexNode(final BlockIndexNode parentNode,final ColumnBinary columnBinary) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  int minLength=wrapBuffer.getInt();
  char[] minCharArray=new char[minLength / Character.BYTES];
  wrapBuffer.asCharBuffer().get(minCharArray);
  wrapBuffer.position(wrapBuffer.position() + minLength);
  int maxLength=wrapBuffer.getInt();
  char[] maxCharArray=new char[maxLength / Character.BYTES];
  wrapBuffer.asCharBuffer().get(maxCharArray);
  wrapBuffer.position(wrapBuffer.position() + maxLength);
  String min=new String(minCharArray);
  String max=new String(maxCharArray);
  BlockIndexNode currentNode=parentNode.getChildNode(columnBinary.columnName);
  currentNode.setBlockIndex(new StringRangeBlockIndex(min,max));
}",0.9788235294117648
172771,"@Override public IColumn toColumn(final ColumnBinary columnBinary) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  int minLength=wrapBuffer.getInt();
  char[] minCharArray=new char[minLength];
  wrapBuffer.asCharBuffer().get(minCharArray);
  wrapBuffer.position(wrapBuffer.position() + minLength);
  int maxLength=wrapBuffer.getInt();
  char[] maxCharArray=new char[maxLength];
  wrapBuffer.asCharBuffer().get(maxCharArray);
  wrapBuffer.position(wrapBuffer.position() + maxLength);
  String min=new String(minCharArray);
  String max=new String(maxCharArray);
  int type=wrapBuffer.getInt();
  int headerSize=Integer.BYTES + minLength + Integer.BYTES+ maxLength+ Integer.BYTES;
  if (type == 0) {
    return new HeaderIndexLazyColumn(columnBinary.columnName,columnBinary.columnType,new StringColumnManager(columnBinary,columnBinary.binaryStart + headerSize,columnBinary.binaryLength - headerSize),new RangeStringIndex(min,max,true));
  }
 else {
    return new HeaderIndexLazyColumn(columnBinary.columnName,columnBinary.columnType,new RangeStringColumnManager(columnBinary,columnBinary.binaryStart + headerSize,columnBinary.binaryLength - headerSize),new RangeStringIndex(min,max,false));
  }
}","@Override public IColumn toColumn(final ColumnBinary columnBinary) throws IOException {
  ByteBuffer wrapBuffer=ByteBuffer.wrap(columnBinary.binary,columnBinary.binaryStart,columnBinary.binaryLength);
  int minLength=wrapBuffer.getInt();
  char[] minCharArray=new char[minLength / Character.BYTES];
  wrapBuffer.asCharBuffer().get(minCharArray);
  wrapBuffer.position(wrapBuffer.position() + minLength);
  int maxLength=wrapBuffer.getInt();
  char[] maxCharArray=new char[maxLength / Character.BYTES];
  wrapBuffer.asCharBuffer().get(maxCharArray);
  wrapBuffer.position(wrapBuffer.position() + maxLength);
  String min=new String(minCharArray);
  String max=new String(maxCharArray);
  int type=wrapBuffer.getInt();
  int headerSize=Integer.BYTES + minLength + Integer.BYTES+ maxLength+ Integer.BYTES;
  if (type == 0) {
    return new HeaderIndexLazyColumn(columnBinary.columnName,columnBinary.columnType,new StringColumnManager(columnBinary,columnBinary.binaryStart + headerSize,columnBinary.binaryLength - headerSize),new RangeStringIndex(min,max,true));
  }
 else {
    return new HeaderIndexLazyColumn(columnBinary.columnName,columnBinary.columnType,new RangeStringColumnManager(columnBinary,columnBinary.binaryStart + headerSize,columnBinary.binaryLength - headerSize),new RangeStringIndex(min,max,false));
  }
}",0.6541122213681784
172772,"@Test public void T_toBinary_1() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.STRING,""String_Node_Str"");
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),0);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),1);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new RangeDumpStringColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column,new MakerCache());
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,2);
  assertEquals(columnBinary.columnType,ColumnType.STRING);
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(""String_Node_Str"",((PrimitiveObject)(decodeColumn.get(0).getRow())).getString());
  assertEquals(""String_Node_Str"",((PrimitiveObject)(decodeColumn.get(1).getRow())).getString());
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
}","@Test public void T_toBinary_1() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.STRING,""String_Node_Str"");
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),0);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),1);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new RangeDumpStringColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column,new MakerCache());
  maker.setBlockIndexNode(new BlockIndexNode(),columnBinary);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,2);
  assertEquals(columnBinary.columnType,ColumnType.STRING);
  IColumn decodeColumn=maker.toColumn(columnBinary);
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
  assertEquals(""String_Node_Str"",((PrimitiveObject)(decodeColumn.get(0).getRow())).getString());
  assertEquals(""String_Node_Str"",((PrimitiveObject)(decodeColumn.get(1).getRow())).getString());
  assertEquals(decodeColumn.getColumnKeys().size(),0);
  assertEquals(decodeColumn.getColumnSize(),0);
}",0.9752791068580542
172773,"@Test public void T_loadInMemoryStorage_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.STRING,""String_Node_Str"");
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),0);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),1);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new RangeDumpStringColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column,new MakerCache());
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.STRING);
  TestStringMemoryAllocator allocator=new TestStringMemoryAllocator();
  maker.loadInMemoryStorage(columnBinary,allocator);
  assertEquals(allocator.list.get(0),""String_Node_Str"");
  assertEquals(allocator.list.get(1),""String_Node_Str"");
  assertEquals(allocator.list.get(2),null);
  assertEquals(allocator.list.get(3),null);
  assertEquals(allocator.list.get(4),null);
  assertEquals(allocator.list.get(5),""String_Node_Str"");
}","@Test public void T_loadInMemoryStorage_2() throws IOException {
  IColumn column=new PrimitiveColumn(ColumnType.STRING,""String_Node_Str"");
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),0);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),1);
  column.add(ColumnType.STRING,new StringObj(""String_Node_Str""),5);
  ColumnBinaryMakerConfig defaultConfig=new ColumnBinaryMakerConfig();
  ColumnBinaryMakerCustomConfigNode configNode=new ColumnBinaryMakerCustomConfigNode(""String_Node_Str"",defaultConfig);
  IColumnBinaryMaker maker=new RangeDumpStringColumnBinaryMaker();
  ColumnBinary columnBinary=maker.toBinary(defaultConfig,null,column,new MakerCache());
  maker.setBlockIndexNode(new BlockIndexNode(),columnBinary);
  assertEquals(columnBinary.columnName,""String_Node_Str"");
  assertEquals(columnBinary.rowCount,3);
  assertEquals(columnBinary.columnType,ColumnType.STRING);
  TestStringMemoryAllocator allocator=new TestStringMemoryAllocator();
  maker.loadInMemoryStorage(columnBinary,allocator);
  assertEquals(allocator.list.get(0),""String_Node_Str"");
  assertEquals(allocator.list.get(1),""String_Node_Str"");
  assertEquals(allocator.list.get(2),null);
  assertEquals(allocator.list.get(3),null);
  assertEquals(allocator.list.get(4),null);
  assertEquals(allocator.list.get(5),""String_Node_Str"");
}",0.9762815608263198
172774,"@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  byte setNumber;
try {
  setNumber=numberFilter.getNumberObject().getByte();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
byte setMin;
byte setMax;
try {
setMin=numberRangeFilter.getMinObject().getByte();
setMax=numberRangeFilter.getMaxObject().getByte();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}","@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  byte setNumber;
try {
  setNumber=numberFilter.getNumberObject().getByte();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
byte setMin;
byte setMax;
try {
setMin=numberRangeFilter.getMinObject().getByte();
setMax=numberRangeFilter.getMaxObject().getByte();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}",0.9555302166476624
172775,"@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Double setNumber;
try {
  setNumber=Double.valueOf(numberFilter.getNumberObject().getDouble());
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (0 <= min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (0 < min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max.compareTo(setNumber) <= 0) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max.compareTo(setNumber) < 0) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Double setMin;
Double setMax;
try {
setMin=Double.valueOf(numberRangeFilter.getMinObject().getDouble());
setMax=Double.valueOf(numberRangeFilter.getMaxObject().getDouble());
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 < max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 <= max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((min.compareTo(setMin) <= 0 && 0 < max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((min.compareTo(setMin) <= 0 && 0 <= max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}","@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Double setNumber;
try {
  setNumber=Double.valueOf(numberFilter.getNumberObject().getDouble());
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (0 <= min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (0 < min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max.compareTo(setNumber) <= 0) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max.compareTo(setNumber) < 0) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Double setMin;
Double setMax;
try {
setMin=Double.valueOf(numberRangeFilter.getMinObject().getDouble());
setMax=Double.valueOf(numberRangeFilter.getMaxObject().getDouble());
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}",0.935370741482966
172776,"@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Float setNumber;
try {
  setNumber=Float.valueOf(numberFilter.getNumberObject().getFloat());
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (0 <= min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (0 < min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max.compareTo(setNumber) <= 0) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max.compareTo(setNumber) < 0) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Float setMin;
Float setMax;
try {
setMin=Float.valueOf(numberRangeFilter.getMinObject().getFloat());
setMax=Float.valueOf(numberRangeFilter.getMaxObject().getFloat());
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 < max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 <= max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((min.compareTo(setMin) <= 0 && 0 < max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((min.compareTo(setMin) <= 0 && 0 <= max.compareTo(setMax)) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}","@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Float setNumber;
try {
  setNumber=Float.valueOf(numberFilter.getNumberObject().getFloat());
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (0 <= min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (0 < min.compareTo(setNumber)) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max.compareTo(setNumber) <= 0) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max.compareTo(setNumber) < 0) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Float setMin;
Float setMax;
try {
setMin=Float.valueOf(numberRangeFilter.getMinObject().getFloat());
setMax=Float.valueOf(numberRangeFilter.getMaxObject().getFloat());
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}",0.9350780070457976
172777,"@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  int setNumber;
try {
  setNumber=numberFilter.getNumberObject().getInt();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
int setMin;
int setMax;
try {
setMin=numberRangeFilter.getMinObject().getInt();
setMax=numberRangeFilter.getMaxObject().getInt();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}","@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  int setNumber;
try {
  setNumber=numberFilter.getNumberObject().getInt();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
int setMin;
int setMax;
try {
setMin=numberRangeFilter.getMinObject().getInt();
setMax=numberRangeFilter.getMaxObject().getInt();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}",0.9553775743707094
172778,"@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  long setNumber;
try {
  setNumber=numberFilter.getNumberObject().getLong();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
long setMin;
long setMax;
try {
setMin=numberRangeFilter.getMinObject().getLong();
setMax=numberRangeFilter.getMaxObject().getLong();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}","@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  long setNumber;
try {
  setNumber=numberFilter.getNumberObject().getLong();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
long setMin;
long setMax;
try {
setMin=numberRangeFilter.getMinObject().getLong();
setMax=numberRangeFilter.getMaxObject().getLong();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}",0.9555302166476624
172779,"@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  short setNumber;
try {
  setNumber=numberFilter.getNumberObject().getShort();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
short setMin;
short setMax;
try {
setMin=numberRangeFilter.getMinObject().getShort();
setMax=numberRangeFilter.getMaxObject().getShort();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}","@Override public List<Integer> filter(final IFilter filter) throws IOException {
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  short setNumber;
try {
  setNumber=numberFilter.getNumberObject().getShort();
}
 catch (NumberFormatException e) {
  return null;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return new ArrayList<Integer>();
}
return null;
case LT:
if (setNumber <= min) {
return new ArrayList<Integer>();
}
return null;
case LE:
if (setNumber < min) {
return new ArrayList<Integer>();
}
return null;
case GT:
if (max <= setNumber) {
return new ArrayList<Integer>();
}
return null;
case GE:
if (max < setNumber) {
return new ArrayList<Integer>();
}
return null;
default :
return null;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
short setMin;
short setMax;
try {
setMin=numberRangeFilter.getMinObject().getShort();
setMax=numberRangeFilter.getMaxObject().getShort();
}
 catch (NumberFormatException e) {
return null;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return new ArrayList<Integer>();
}
return null;
}
default :
return null;
}
}",0.9556818181818182
172780,"@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  byte setNumber;
try {
  setNumber=numberFilter.getNumberObject().getByte();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
byte setMin;
byte setMax;
try {
setMin=numberRangeFilter.getMinObject().getByte();
setMax=numberRangeFilter.getMaxObject().getByte();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return true;
}
return false;
}
default :
return false;
}
}","@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  byte setNumber;
try {
  setNumber=numberFilter.getNumberObject().getByte();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
byte setMin;
byte setMax;
try {
setMin=numberRangeFilter.getMinObject().getByte();
setMax=numberRangeFilter.getMaxObject().getByte();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return true;
}
return false;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return true;
}
return false;
}
default :
return false;
}
}",0.9497171590194846
172781,"@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Double setNumber;
try {
  setNumber=Double.valueOf(numberFilter.getNumberObject().getDouble());
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return true;
}
return false;
case LT:
if (0 <= min.compareTo(setNumber)) {
return true;
}
return false;
case LE:
if (0 < min.compareTo(setNumber)) {
return true;
}
return false;
case GT:
if (max.compareTo(setNumber) <= 0) {
return true;
}
return false;
case GE:
if (max.compareTo(setNumber) < 0) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Double setMin;
Double setMax;
try {
setMin=Double.valueOf(numberRangeFilter.getMinObject().getDouble());
setMax=Double.valueOf(numberRangeFilter.getMaxObject().getDouble());
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 < max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 <= max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((min.compareTo(setMin) <= 0 && 0 < max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
 else {
if ((min.compareTo(setMin) <= 0 && 0 <= max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
default :
return false;
}
}","@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Double setNumber;
try {
  setNumber=Double.valueOf(numberFilter.getNumberObject().getDouble());
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return true;
}
return false;
case LT:
if (0 <= min.compareTo(setNumber)) {
return true;
}
return false;
case LE:
if (0 < min.compareTo(setNumber)) {
return true;
}
return false;
case GT:
if (max.compareTo(setNumber) <= 0) {
return true;
}
return false;
case GE:
if (max.compareTo(setNumber) < 0) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Double setMin;
Double setMax;
try {
setMin=Double.valueOf(numberRangeFilter.getMinObject().getDouble());
setMax=Double.valueOf(numberRangeFilter.getMaxObject().getDouble());
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return true;
}
return false;
}
 else {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return true;
}
return false;
}
default :
return false;
}
}",0.9127114020731042
172782,"@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Float setNumber;
try {
  setNumber=Float.valueOf(numberFilter.getNumberObject().getFloat());
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return true;
}
return false;
case LT:
if (0 <= min.compareTo(setNumber)) {
return true;
}
return false;
case LE:
if (0 < min.compareTo(setNumber)) {
return true;
}
return false;
case GT:
if (max.compareTo(setNumber) <= 0) {
return true;
}
return false;
case GE:
if (max.compareTo(setNumber) < 0) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Float setMin;
Float setMax;
try {
setMin=Float.valueOf(numberRangeFilter.getMinObject().getFloat());
setMax=Float.valueOf(numberRangeFilter.getMaxObject().getFloat());
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 < max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((min.compareTo(setMin) < 0 && 0 <= max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((min.compareTo(setMin) <= 0 && 0 < max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
 else {
if ((min.compareTo(setMin) <= 0 && 0 <= max.compareTo(setMax)) != invert) {
return true;
}
return false;
}
default :
return false;
}
}","@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  Float setNumber;
try {
  setNumber=Float.valueOf(numberFilter.getNumberObject().getFloat());
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (0 < min.compareTo(setNumber) || max.compareTo(setNumber) < 0) {
  return true;
}
return false;
case LT:
if (0 <= min.compareTo(setNumber)) {
return true;
}
return false;
case LE:
if (0 < min.compareTo(setNumber)) {
return true;
}
return false;
case GT:
if (max.compareTo(setNumber) <= 0) {
return true;
}
return false;
case GE:
if (max.compareTo(setNumber) < 0) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
Float setMin;
Float setMax;
try {
setMin=Float.valueOf(numberRangeFilter.getMinObject().getFloat());
setMax=Float.valueOf(numberRangeFilter.getMaxObject().getFloat());
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((0 < min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) < 0) != invert) {
return true;
}
return false;
}
 else {
if ((0 <= min.compareTo(setMax) || max.compareTo(setMin) <= 0) != invert) {
return true;
}
return false;
}
default :
return false;
}
}",0.912280701754386
172783,"@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  int setNumber;
try {
  setNumber=numberFilter.getNumberObject().getInt();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
int setMin;
int setMax;
try {
setMin=numberRangeFilter.getMinObject().getInt();
setMax=numberRangeFilter.getMaxObject().getInt();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return true;
}
return false;
}
default :
return false;
}
}","@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  int setNumber;
try {
  setNumber=numberFilter.getNumberObject().getInt();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
int setMin;
int setMax;
try {
setMin=numberRangeFilter.getMinObject().getInt();
setMax=numberRangeFilter.getMaxObject().getInt();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return true;
}
return false;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return true;
}
return false;
}
default :
return false;
}
}",0.9495268138801262
172784,"@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  long setNumber;
try {
  setNumber=numberFilter.getNumberObject().getLong();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
long setMin;
long setMax;
try {
setMin=numberRangeFilter.getMinObject().getLong();
setMax=numberRangeFilter.getMaxObject().getLong();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return true;
}
return false;
}
default :
return false;
}
}","@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  long setNumber;
try {
  setNumber=numberFilter.getNumberObject().getLong();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
long setMin;
long setMax;
try {
setMin=numberRangeFilter.getMinObject().getLong();
setMax=numberRangeFilter.getMaxObject().getLong();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return true;
}
return false;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return true;
}
return false;
}
default :
return false;
}
}",0.9497171590194846
172785,"@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  short setNumber;
try {
  setNumber=numberFilter.getNumberObject().getShort();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
short setMin;
short setMax;
try {
setMin=numberRangeFilter.getMinObject().getShort();
setMax=numberRangeFilter.getMaxObject().getShort();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((min < setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((min < setMin && setMax <= max) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((min <= setMin && setMax < max) != invert) {
return true;
}
return false;
}
 else {
if ((min <= setMin && setMax <= max) != invert) {
return true;
}
return false;
}
default :
return false;
}
}","@Override public boolean canBlockSkip(final IFilter filter){
switch (filter.getFilterType()) {
case NUMBER:
    NumberFilter numberFilter=(NumberFilter)filter;
  short setNumber;
try {
  setNumber=numberFilter.getNumberObject().getShort();
}
 catch (NumberFormatException|IOException e) {
  return false;
}
switch (numberFilter.getNumberFilterType()) {
case EQUAL:
if (setNumber < min || max < setNumber) {
  return true;
}
return false;
case LT:
if (setNumber <= min) {
return true;
}
return false;
case LE:
if (setNumber < min) {
return true;
}
return false;
case GT:
if (max <= setNumber) {
return true;
}
return false;
case GE:
if (max < setNumber) {
return true;
}
return false;
default :
return false;
}
case NUMBER_RANGE:
NumberRangeFilter numberRangeFilter=(NumberRangeFilter)filter;
short setMin;
short setMax;
try {
setMin=numberRangeFilter.getMinObject().getShort();
setMax=numberRangeFilter.getMaxObject().getShort();
}
 catch (NumberFormatException|IOException e) {
return false;
}
boolean minHasEquals=numberRangeFilter.isMinHasEquals();
boolean maxHasEquals=numberRangeFilter.isMaxHasEquals();
boolean invert=numberRangeFilter.isInvert();
if (minHasEquals && maxHasEquals) {
if ((setMax < min || max < setMin) != invert) {
return true;
}
return false;
}
 else if (minHasEquals) {
if ((setMax < min || max <= setMin) != invert) {
return true;
}
return false;
}
 else if (maxHasEquals) {
if ((setMax <= min || max < setMin) != invert) {
return true;
}
return false;
}
 else {
if ((setMax <= min || max <= setMin) != invert) {
return true;
}
return false;
}
default :
return false;
}
}",0.949906073888541
172786,"@Override public int calcBinarySize(final IColumnAnalizeResult analizeResult){
  StringColumnAnalizeResult stringAnalizeResult=(StringColumnAnalizeResult)analizeResult;
  int dicBinarySize=(analizeResult.getColumnSize() * PrimitiveByteLength.INT_LENGTH) + stringAnalizeResult.getTotalUtf8ByteSize();
  return (PrimitiveByteLength.INT_LENGTH * 2) + analizeResult.getNullCount() + dicBinarySize;
}","@Override public int calcBinarySize(final IColumnAnalizeResult analizeResult){
  StringColumnAnalizeResult stringAnalizeResult=(StringColumnAnalizeResult)analizeResult;
  int dicBinarySize=(analizeResult.getColumnSize() * PrimitiveByteLength.INT_LENGTH) + stringAnalizeResult.getTotalUtf8ByteSize();
  return (PrimitiveByteLength.INT_LENGTH * 2) + analizeResult.getColumnSize() + dicBinarySize;
}",0.9759797724399494
172787,"public ByteOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpByteColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpByteColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqByteColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexByteColumnBinaryMaker.class.getName());
}","public ByteOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpByteColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqByteColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexByteColumnBinaryMaker.class.getName());
}",0.8883610451306413
172788,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  ByteColumnAnalizeResult castColumnAnalizeResult=(ByteColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.byteMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.byteMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  ByteColumnAnalizeResult castColumnAnalizeResult=(ByteColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.byteMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.byteMakerClass=makerClass;
  return currentConfig;
}",0.8378640776699029
172789,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  DoubleColumnAnalizeResult castColumnAnalizeResult=(DoubleColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.doubleMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.doubleMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  DoubleColumnAnalizeResult castColumnAnalizeResult=(DoubleColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.doubleMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.doubleMakerClass=makerClass;
  return currentConfig;
}",0.8391136801541426
172790,"public DoubleOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpDoubleColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpDoubleColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqDoubleColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexDoubleColumnBinaryMaker.class.getName());
}","public DoubleOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpDoubleColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqDoubleColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexDoubleColumnBinaryMaker.class.getName());
}",0.8883720930232558
172791,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  FloatColumnAnalizeResult castColumnAnalizeResult=(FloatColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.floatMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.floatMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  FloatColumnAnalizeResult castColumnAnalizeResult=(FloatColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.floatMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.floatMakerClass=makerClass;
  return currentConfig;
}",0.6634429400386848
172792,"public FloatOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpFloatColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpFloatColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqFloatColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexFloatColumnBinaryMaker.class.getName());
}","public FloatOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpFloatColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqFloatColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexFloatColumnBinaryMaker.class.getName());
}",0.8883666274970623
172793,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  IntegerColumnAnalizeResult castColumnAnalizeResult=(IntegerColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.integerMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.integerMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  IntegerColumnAnalizeResult castColumnAnalizeResult=(IntegerColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.integerMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.integerMakerClass=makerClass;
  return currentConfig;
}",0.6621880998080614
172794,"public IntegerOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpIntegerColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpIntegerColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqIntegerColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexIntegerColumnBinaryMaker.class.getName());
}","public IntegerOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpIntegerColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqIntegerColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexIntegerColumnBinaryMaker.class.getName());
}",0.8883774453394706
172795,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  LongColumnAnalizeResult castColumnAnalizeResult=(LongColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.longMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.longMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  LongColumnAnalizeResult castColumnAnalizeResult=(LongColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeUniqColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.longMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.longMakerClass=makerClass;
  return currentConfig;
}",0.5223300970873787
172796,"public LongOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpLongColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpLongColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqLongColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexLongColumnBinaryMaker.class.getName());
}","public LongOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpLongColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqLongColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexLongColumnBinaryMaker.class.getName());
}",0.8883610451306413
172797,"public ShortOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpShortColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpShortColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqShortColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexShortColumnBinaryMaker.class.getName());
}","public ShortOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpShortColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqShortColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexShortColumnBinaryMaker.class.getName());
}",0.8883666274970623
172798,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  ShortColumnAnalizeResult castColumnAnalizeResult=(ShortColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.shortMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.shortMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  ShortColumnAnalizeResult castColumnAnalizeResult=(ShortColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.shortMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.shortMakerClass=makerClass;
  return currentConfig;
}",0.6634429400386848
172799,"@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  StringColumnAnalizeResult castColumnAnalizeResult=(StringColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=rangeUniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=rangeUniqColumnBinaryMaker;
    }
  }
 else {
    int dump=dumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=dumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.stringMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.stringMakerClass=makerClass;
  return currentConfig;
}","@Override public ColumnBinaryMakerConfig getColumnBinaryMakerConfig(final ColumnBinaryMakerConfig commonConfig,final IColumnAnalizeResult analizeResult){
  ColumnBinaryMakerConfig currentConfig=new ColumnBinaryMakerConfig(commonConfig);
  StringColumnAnalizeResult castColumnAnalizeResult=(StringColumnAnalizeResult)analizeResult;
  IColumnBinaryMaker makerClass;
  if (castColumnAnalizeResult.maybeSorted()) {
    makerClass=rangeUniqColumnBinaryMaker;
  }
 else {
    int dump=rangeDumpColumnBinaryMaker.calcBinarySize(analizeResult);
    int uniq=uniqColumnBinaryMaker.calcBinarySize(analizeResult);
    if (dump < uniq) {
      makerClass=rangeDumpColumnBinaryMaker;
    }
 else {
      makerClass=uniqColumnBinaryMaker;
    }
  }
  if (currentConfig.stringMakerClass.getClass().getName().equals(makerClass.getClass().getName())) {
    return null;
  }
  currentConfig.stringMakerClass=makerClass;
  return currentConfig;
}",0.6628131021194605
172800,"public StringOptimizer(final Configuration config) throws IOException {
  dumpColumnBinaryMaker=FindColumnBinaryMaker.get(DumpStringColumnBinaryMaker.class.getName());
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpStringColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqStringToUTF8BytesColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexStringToUTF8BytesColumnBinaryMaker.class.getName());
}","public StringOptimizer(final Configuration config) throws IOException {
  rangeDumpColumnBinaryMaker=FindColumnBinaryMaker.get(RangeDumpStringColumnBinaryMaker.class.getName());
  uniqColumnBinaryMaker=FindColumnBinaryMaker.get(UniqStringToUTF8BytesColumnBinaryMaker.class.getName());
  rangeUniqColumnBinaryMaker=FindColumnBinaryMaker.get(RangeIndexStringToUTF8BytesColumnBinaryMaker.class.getName());
}",0.8938053097345132
172801,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Boolean currentSortCheckValue=false;
  int trueCount=0;
  int falseCount=0;
  int nullCount=0;
  int rowCount=0;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    boolean target=((PrimitiveCell)cell).getRow().getBoolean();
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    if (target) {
      trueCount++;
      rowCount++;
    }
 else {
      falseCount++;
      rowCount++;
    }
  }
  int uniqCount=0;
  if (trueCount != 0) {
    uniqCount++;
  }
  if (falseCount != 0) {
    uniqCount++;
  }
  return new BooleanColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,trueCount,falseCount);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Boolean currentSortCheckValue=false;
  int trueCount=0;
  int falseCount=0;
  int nullCount=0;
  int rowCount=0;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    boolean target=((PrimitiveCell)cell).getRow().getBoolean();
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    if (target) {
      trueCount++;
      rowCount++;
    }
 else {
      falseCount++;
      rowCount++;
    }
  }
  int uniqCount=0;
  if (trueCount != 0) {
    uniqCount++;
  }
  if (falseCount != 0) {
    uniqCount++;
  }
  return new BooleanColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,trueCount,falseCount);
}",0.9947089947089948
172802,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Byte currentSortCheckValue=Byte.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Byte> dicSet=new HashSet<Byte>();
  Byte min=Byte.MAX_VALUE;
  Byte max=Byte.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Byte target=Byte.valueOf(((PrimitiveCell)cell).getRow().getByte());
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Byte.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Byte.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new ByteColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Byte currentSortCheckValue=Byte.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Byte> dicSet=new HashSet<Byte>();
  Byte min=Byte.MAX_VALUE;
  Byte max=Byte.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Byte target=Byte.valueOf(((PrimitiveCell)cell).getRow().getByte());
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Byte.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Byte.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new ByteColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}",0.9952471482889734
172803,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Double currentSortCheckValue=Double.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Double> dicSet=new HashSet<Double>();
  Double min=Double.MAX_VALUE;
  Double max=Double.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Double target=Double.valueOf(((PrimitiveCell)cell).getRow().getDouble());
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Double.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Double.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new DoubleColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Double currentSortCheckValue=Double.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Double> dicSet=new HashSet<Double>();
  Double min=Double.MAX_VALUE;
  Double max=Double.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Double target=Double.valueOf(((PrimitiveCell)cell).getRow().getDouble());
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Double.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Double.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new DoubleColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}",0.9953703703703703
172804,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Float currentSortCheckValue=Float.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Float> dicSet=new HashSet<Float>();
  Float min=Float.MAX_VALUE;
  Float max=Float.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Float target=Float.valueOf(((PrimitiveCell)cell).getRow().getFloat());
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Float.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Float.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new FloatColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Float currentSortCheckValue=Float.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Float> dicSet=new HashSet<Float>();
  Float min=Float.MAX_VALUE;
  Float max=Float.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Float target=Float.valueOf(((PrimitiveCell)cell).getRow().getFloat());
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Float.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Float.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new FloatColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}",0.9953095684803002
172805,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Integer currentSortCheckValue=Integer.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Integer> dicSet=new HashSet<Integer>();
  Integer min=Integer.MAX_VALUE;
  Integer max=Integer.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Integer target=Integer.valueOf(((PrimitiveCell)cell).getRow().getInt());
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Integer.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Integer.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new IntegerColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Integer currentSortCheckValue=Integer.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Integer> dicSet=new HashSet<Integer>();
  Integer min=Integer.MAX_VALUE;
  Integer max=Integer.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Integer target=Integer.valueOf(((PrimitiveCell)cell).getRow().getInt());
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Integer.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Integer.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new IntegerColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}",0.9954128440366972
172806,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Long currentSortCheckValue=Long.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Long> dicSet=new HashSet<Long>();
  Long min=Long.MAX_VALUE;
  Long max=Long.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Long target=Long.valueOf(((PrimitiveCell)cell).getRow().getLong());
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Long.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Long.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new LongColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Long currentSortCheckValue=Long.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Long> dicSet=new HashSet<Long>();
  Long min=Long.MAX_VALUE;
  Long max=Long.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Long target=Long.valueOf(((PrimitiveCell)cell).getRow().getLong());
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Long.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Long.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new LongColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}",0.9952471482889734
172807,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Short currentSortCheckValue=Short.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Short> dicSet=new HashSet<Short>();
  Short min=Short.MAX_VALUE;
  Short max=Short.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Short target=Short.valueOf(((PrimitiveCell)cell).getRow().getShort());
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Short.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Short.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new ShortColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  Short currentSortCheckValue=Short.MIN_VALUE;
  int nullCount=0;
  int rowCount=0;
  Set<Short> dicSet=new HashSet<Short>();
  Short min=Short.MAX_VALUE;
  Short max=Short.MIN_VALUE;
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    Short target=Short.valueOf(((PrimitiveCell)cell).getRow().getShort());
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    rowCount++;
    if (!dicSet.contains(target)) {
      dicSet.add(target);
      if (0 < min.compareTo(target)) {
        min=Short.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=Short.valueOf(target);
      }
    }
  }
  int uniqCount=dicSet.size();
  return new ShortColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,min,max);
}",0.9953095684803002
172808,"public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  String currentSortCheckValue=""String_Node_Str"";
  int nullCount=0;
  int rowCount=0;
  int totalLogicalDataSize=0;
  int totalUtf8ByteSize=0;
  int uniqLogicalDataSize=0;
  int uniqUtf8ByteSize=0;
  int minCharLength=Integer.MAX_VALUE;
  int maxCharLength=0;
  int minUtfBytes=Integer.MAX_VALUE;
  int maxUtfBytes=0;
  Set<String> dicSet=new HashSet<String>();
  String min=""String_Node_Str"";
  String max=""String_Node_Str"";
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    String target=((PrimitiveCell)cell).getRow().getString();
    if (maybeSorted && 0 <= currentSortCheckValue.compareTo(target)) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    byte[] stringBytes=target.getBytes(""String_Node_Str"");
    rowCount++;
    int charLength=target.length() * PrimitiveByteLength.CHAR_LENGTH;
    totalLogicalDataSize+=charLength;
    totalUtf8ByteSize=stringBytes.length;
    if (!dicSet.contains(target)) {
      uniqLogicalDataSize+=charLength;
      uniqUtf8ByteSize=stringBytes.length;
      dicSet.add(target);
      if (min.isEmpty() || 0 < min.compareTo(target)) {
        min=String.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=String.valueOf(target);
      }
      if (charLength < minCharLength) {
        minUtfBytes=charLength;
      }
      if (maxCharLength < charLength) {
        maxUtfBytes=charLength;
      }
      if (stringBytes.length < minUtfBytes) {
        minUtfBytes=stringBytes.length;
      }
      if (maxUtfBytes < stringBytes.length) {
        maxUtfBytes=stringBytes.length;
      }
    }
  }
  int uniqCount=dicSet.size();
  return new StringColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,totalLogicalDataSize,totalUtf8ByteSize,uniqLogicalDataSize,uniqUtf8ByteSize,minCharLength,maxCharLength,minUtfBytes,maxUtfBytes,min,max);
}","public IColumnAnalizeResult analize() throws IOException {
  boolean maybeSorted=true;
  String currentSortCheckValue=""String_Node_Str"";
  int nullCount=0;
  int rowCount=0;
  int totalLogicalDataSize=0;
  int totalUtf8ByteSize=0;
  int uniqLogicalDataSize=0;
  int uniqUtf8ByteSize=0;
  int minCharLength=Integer.MAX_VALUE;
  int maxCharLength=0;
  int minUtfBytes=Integer.MAX_VALUE;
  int maxUtfBytes=0;
  Set<String> dicSet=new HashSet<String>();
  String min=""String_Node_Str"";
  String max=""String_Node_Str"";
  for (int i=0; i < column.size(); i++) {
    ICell cell=column.get(i);
    if (cell.getType() == ColumnType.NULL) {
      nullCount++;
      continue;
    }
    String target=((PrimitiveCell)cell).getRow().getString();
    if (maybeSorted && currentSortCheckValue.compareTo(target) <= 0) {
      currentSortCheckValue=target;
    }
 else {
      maybeSorted=false;
    }
    byte[] stringBytes=target.getBytes(""String_Node_Str"");
    rowCount++;
    int charLength=target.length() * PrimitiveByteLength.CHAR_LENGTH;
    totalLogicalDataSize+=charLength;
    totalUtf8ByteSize=stringBytes.length;
    if (!dicSet.contains(target)) {
      uniqLogicalDataSize+=charLength;
      uniqUtf8ByteSize=stringBytes.length;
      dicSet.add(target);
      if (min.isEmpty() || 0 < min.compareTo(target)) {
        min=String.valueOf(target);
      }
      if (max.compareTo(target) < 0) {
        max=String.valueOf(target);
      }
      if (charLength < minCharLength) {
        minUtfBytes=charLength;
      }
      if (maxCharLength < charLength) {
        maxUtfBytes=charLength;
      }
      if (stringBytes.length < minUtfBytes) {
        minUtfBytes=stringBytes.length;
      }
      if (maxUtfBytes < stringBytes.length) {
        maxUtfBytes=stringBytes.length;
      }
    }
  }
  int uniqCount=dicSet.size();
  return new StringColumnAnalizeResult(column.getColumnName(),column.size(),maybeSorted,nullCount,rowCount,uniqCount,totalLogicalDataSize,totalUtf8ByteSize,uniqLogicalDataSize,uniqUtf8ByteSize,minCharLength,maxCharLength,minUtfBytes,maxUtfBytes,min,max);
}",0.9975996159385502
172809,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeByteDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary));
  column.setCellManager(new BufferDirectCellManager(ColumnType.INTEGER,dicManager,columnBinary.rowCount));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeByteDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary));
  column.setCellManager(new BufferDirectCellManager(columnBinary.columnType,dicManager,columnBinary.rowCount));
  isCreate=true;
}",0.9789954337899544
172810,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeDoubleDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asDoubleBuffer());
  column.setCellManager(new BufferDirectCellManager(ColumnType.INTEGER,dicManager,columnBinary.rowCount));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeDoubleDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asDoubleBuffer());
  column.setCellManager(new BufferDirectCellManager(columnBinary.columnType,dicManager,columnBinary.rowCount));
  isCreate=true;
}",0.9796999117387468
172811,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeFloatDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asFloatBuffer());
  column.setCellManager(new BufferDirectCellManager(ColumnType.INTEGER,dicManager,columnBinary.rowCount));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeFloatDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asFloatBuffer());
  column.setCellManager(new BufferDirectCellManager(columnBinary.columnType,dicManager,columnBinary.rowCount));
  isCreate=true;
}",0.9796279893711248
172812,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeLongDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asLongBuffer());
  column.setCellManager(new BufferDirectCellManager(ColumnType.INTEGER,dicManager,columnBinary.rowCount));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeLongDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asLongBuffer());
  column.setCellManager(new BufferDirectCellManager(ColumnType.LONG,dicManager,columnBinary.rowCount));
  isCreate=true;
}",0.9937332139659804
172813,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeShortDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asShortBuffer());
  column.setCellManager(new BufferDirectCellManager(ColumnType.INTEGER,dicManager,columnBinary.rowCount));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeShortDicManager(primitiveObjectConnector,ByteBuffer.wrap(binary).asShortBuffer());
  column.setCellManager(new BufferDirectCellManager(ColumnType.SHORT,dicManager,columnBinary.rowCount));
  isCreate=true;
}",0.9910873440285204
172814,"private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(binary);
  PrimitiveObject[] dicArray=new PrimitiveObject[columnBinary.rowCount];
  for (int i=0; i < columnBinary.rowCount; i++) {
    int objLength=wrapBuffer.getInt();
    dicArray[i]=primitiveObjectConnector.convert(PrimitiveType.STRING,new UTF8BytesLinkObj(binary,wrapBuffer.position(),objLength));
    wrapBuffer.position(wrapBuffer.position() + objLength);
  }
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeStringDicManager(dicArray);
  column.setCellManager(new BufferDirectCellManager(ColumnType.INTEGER,dicManager,columnBinary.rowCount));
  isCreate=true;
}","private void create() throws IOException {
  if (isCreate) {
    return;
  }
  ICompressor compressor=FindCompressor.get(columnBinary.compressorClassName);
  byte[] binary=compressor.decompress(columnBinary.binary,binaryStart,binaryLength);
  ByteBuffer wrapBuffer=ByteBuffer.wrap(binary);
  PrimitiveObject[] dicArray=new PrimitiveObject[columnBinary.rowCount];
  for (int i=0; i < columnBinary.rowCount; i++) {
    int objLength=wrapBuffer.getInt();
    dicArray[i]=primitiveObjectConnector.convert(PrimitiveType.STRING,new UTF8BytesLinkObj(binary,wrapBuffer.position(),objLength));
    wrapBuffer.position(wrapBuffer.position() + objLength);
  }
  column=new PrimitiveColumn(columnBinary.columnType,columnBinary.columnName);
  IDicManager dicManager=new RangeStringDicManager(dicArray);
  column.setCellManager(new BufferDirectCellManager(columnBinary.columnType,dicManager,columnBinary.rowCount));
  isCreate=true;
}",0.987465940054496
172815,"@DataProvider(name=""String_Node_Str"") public Object[][] D_T_addRowNotException(){
  return new Object[][]{{ColumnType.UNION,DumpUnionColumnBinaryMaker.class.getName()},{ColumnType.ARRAY,DumpArrayColumnBinaryMaker.class.getName()},{ColumnType.SPREAD,DumpSpreadColumnBinaryMaker.class.getName()},{ColumnType.BOOLEAN,DumpBooleanColumnBinaryMaker.class.getName()},{ColumnType.BYTE,RangeIndexByteColumnBinaryMaker.class.getName()},{ColumnType.BYTES,DumpBytesColumnBinaryMaker.class.getName()},{ColumnType.DOUBLE,RangeIndexDoubleColumnBinaryMaker.class.getName()},{ColumnType.FLOAT,RangeIndexFloatColumnBinaryMaker.class.getName()},{ColumnType.INTEGER,RangeIndexIntegerColumnBinaryMaker.class.getName()},{ColumnType.LONG,RangeIndexLongColumnBinaryMaker.class.getName()},{ColumnType.SHORT,RangeIndexShortColumnBinaryMaker.class.getName()},{ColumnType.STRING,RangeIndexStringToUTF8BytesColumnBinaryMaker.class.getName()},{ColumnType.NULL,UnsupportedColumnBinaryMaker.class.getName()},{ColumnType.EMPTY_ARRAY,UnsupportedColumnBinaryMaker.class.getName()},{ColumnType.EMPTY_SPREAD,UnsupportedColumnBinaryMaker.class.getName()},{ColumnType.UNKNOWN,UnsupportedColumnBinaryMaker.class.getName()}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] D_T_addRowNotException(){
  return new Object[][]{{ColumnType.UNION,DumpUnionColumnBinaryMaker.class.getName()},{ColumnType.ARRAY,DumpArrayColumnBinaryMaker.class.getName()},{ColumnType.SPREAD,DumpSpreadColumnBinaryMaker.class.getName()},{ColumnType.BOOLEAN,DumpBooleanColumnBinaryMaker.class.getName()},{ColumnType.BYTE,RangeDumpByteColumnBinaryMaker.class.getName()},{ColumnType.BYTES,DumpBytesColumnBinaryMaker.class.getName()},{ColumnType.DOUBLE,RangeIndexDoubleColumnBinaryMaker.class.getName()},{ColumnType.FLOAT,RangeDumpFloatColumnBinaryMaker.class.getName()},{ColumnType.INTEGER,RangeDumpIntegerColumnBinaryMaker.class.getName()},{ColumnType.LONG,RangeIndexLongColumnBinaryMaker.class.getName()},{ColumnType.SHORT,RangeDumpShortColumnBinaryMaker.class.getName()},{ColumnType.STRING,RangeIndexStringToUTF8BytesColumnBinaryMaker.class.getName()},{ColumnType.NULL,UnsupportedColumnBinaryMaker.class.getName()},{ColumnType.EMPTY_ARRAY,UnsupportedColumnBinaryMaker.class.getName()},{ColumnType.EMPTY_SPREAD,UnsupportedColumnBinaryMaker.class.getName()},{ColumnType.UNKNOWN,UnsupportedColumnBinaryMaker.class.getName()}};
}",0.9847972972972971
172816,"@Override public boolean next(final NullWritable key,final VectorizedRowBatch outputBatch) throws IOException {
  outputBatch.reset();
  if (!isPartitionSetting) {
    setting.setPartitionValues(outputBatch);
    isPartitionSetting=true;
  }
  if (indexSize <= currentIndex) {
    if (!currentReader.hasNext()) {
      updateCounter(currentReader.getReadStats());
      outputBatch.endOfFile=true;
      isEnd=true;
      return false;
    }
    while (!setSpread()) {
      if (!currentReader.hasNext()) {
        updateCounter(currentReader.getReadStats());
        outputBatch.endOfFile=true;
        isEnd=true;
        return false;
      }
    }
  }
  int maxSize=outputBatch.getMaxSize();
  if (indexSize < currentIndex + maxSize) {
    maxSize=indexSize - currentIndex;
  }
  for (  int colIndex : needColumnIds) {
    assignors[colIndex].setColumnVector(outputBatch.cols[colIndex],currentIndexList,currentIndex,maxSize);
  }
  outputBatch.size=maxSize;
  currentIndex+=maxSize;
  if (indexSize <= currentIndex && !currentReader.hasNext()) {
    outputBatch.endOfFile=true;
  }
  return outputBatch.size > 0;
}","@Override public boolean next(final NullWritable key,final VectorizedRowBatch outputBatch) throws IOException {
  outputBatch.reset();
  setting.setPartitionValues(outputBatch);
  if (indexSize <= currentIndex) {
    if (!currentReader.hasNext()) {
      updateCounter(currentReader.getReadStats());
      outputBatch.endOfFile=true;
      isEnd=true;
      return false;
    }
    while (!setSpread()) {
      if (!currentReader.hasNext()) {
        updateCounter(currentReader.getReadStats());
        outputBatch.endOfFile=true;
        isEnd=true;
        return false;
      }
    }
  }
  int maxSize=outputBatch.getMaxSize();
  if (indexSize < currentIndex + maxSize) {
    maxSize=indexSize - currentIndex;
  }
  for (  int colIndex : needColumnIds) {
    assignors[colIndex].setColumnVector(outputBatch.cols[colIndex],currentIndexList,currentIndex,maxSize);
  }
  outputBatch.size=maxSize;
  currentIndex+=maxSize;
  if (indexSize <= currentIndex && !currentReader.hasNext()) {
    outputBatch.endOfFile=true;
  }
  return outputBatch.size > 0;
}",0.9604051565377532
172817,"public int toColumnBinaryTree(final byte[] metaBinary,final int start,final byte[] dataBuffer,final boolean isNeedAllChild) throws IOException {
  ByteBuffer byteBuffer=ByteBuffer.wrap(metaBinary,start,(metaBinary.length - start));
  int offset=start;
  int childSize=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  for (int i=0; i < childSize; i++) {
    int childNameLength=byteBuffer.getInt(offset);
    offset+=PrimitiveByteLength.INT_LENGTH;
    String childName=new String(metaBinary,offset,childNameLength);
    offset+=childNameLength;
    ColumnBinaryTree childColumnBinary=new ColumnBinaryTree();
    boolean isAppend=true;
    if (isNeedAllChild) {
      isAppend=true;
    }
 else {
      if (columnNameNode.containsChild(childName)) {
        childColumnBinary.setColumnFilter(columnNameNode.getChild(childName));
        isAppend=true;
      }
 else       if (ColumnTypeFactory.getColumnTypeFromName(childName) != ColumnType.UNKNOWN) {
        childColumnBinary.setColumnFilter(columnNameNode.getChild(childName));
        isAppend=true;
      }
 else {
        ColumnNameNode childColumnNameNode=new ColumnNameNode(childName);
        childColumnNameNode.setNeedAllChild(false);
        childColumnBinary.setColumnFilter(childColumnNameNode);
        isAppend=false;
      }
    }
    offset=childColumnBinary.toColumnBinaryTree(metaBinary,offset,dataBuffer);
    if (isAppend) {
      childCount=childColumnBinary.size();
      childTreeMap.put(childName,childColumnBinary);
    }
  }
  allBinaryStart=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  allBinaryLength=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  int currentMetaBinaryLength=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  if (currentMetaBinaryLength != 0) {
    for (int startOffset=offset; offset < startOffset + currentMetaBinaryLength; ) {
      currentCount++;
      int index=byteBuffer.getInt(offset);
      offset+=PrimitiveByteLength.INT_LENGTH;
      int metaBinaryLength=byteBuffer.getInt(offset);
      offset+=PrimitiveByteLength.INT_LENGTH;
      if (metaBinaryLength == 0) {
        currentColumnBinaryList.add(null);
      }
 else {
        List<ColumnBinary> childList=new ArrayList<ColumnBinary>();
        for (        Map.Entry<String,ColumnBinaryTree> entry : childTreeMap.entrySet()) {
          ColumnBinary childColumnBinary=entry.getValue().getColumnBinary(index);
          if (childColumnBinary != null) {
            childList.add(childColumnBinary);
          }
        }
        currentColumnBinaryList.add(ColumnBinary.newInstanceFromMetaBinary(metaBinary,offset,metaBinaryLength,dataBuffer,childList));
      }
      offset+=metaBinaryLength;
    }
  }
  return offset;
}","public int toColumnBinaryTree(final byte[] metaBinary,final int start,final byte[] dataBuffer,final boolean isNeedAllChild) throws IOException {
  ByteBuffer byteBuffer=ByteBuffer.wrap(metaBinary,start,(metaBinary.length - start));
  int offset=start;
  int childSize=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  for (int i=0; i < childSize; i++) {
    int childNameLength=byteBuffer.getInt(offset);
    offset+=PrimitiveByteLength.INT_LENGTH;
    String childName=new String(metaBinary,offset,childNameLength);
    offset+=childNameLength;
    ColumnBinaryTree childColumnBinary=new ColumnBinaryTree();
    boolean isAppend=true;
    if (isNeedAllChild) {
      isAppend=true;
    }
 else {
      if (columnNameNode.containsChild(childName)) {
        childColumnBinary.setColumnFilter(columnNameNode.getChild(childName));
        isAppend=true;
      }
 else       if (ColumnTypeFactory.getColumnTypeFromName(childName) == ColumnType.ARRAY) {
        childColumnBinary.setColumnFilter(columnNameNode);
        isAppend=true;
      }
 else {
        ColumnNameNode childColumnNameNode=new ColumnNameNode(childName);
        childColumnNameNode.setNeedAllChild(false);
        childColumnBinary.setColumnFilter(childColumnNameNode);
        isAppend=false;
      }
    }
    offset=childColumnBinary.toColumnBinaryTree(metaBinary,offset,dataBuffer);
    if (isAppend) {
      childCount=childColumnBinary.size();
      childTreeMap.put(childName,childColumnBinary);
    }
  }
  allBinaryStart=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  allBinaryLength=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  int currentMetaBinaryLength=byteBuffer.getInt(offset);
  offset+=PrimitiveByteLength.INT_LENGTH;
  if (currentMetaBinaryLength != 0) {
    for (int startOffset=offset; offset < startOffset + currentMetaBinaryLength; ) {
      currentCount++;
      int index=byteBuffer.getInt(offset);
      offset+=PrimitiveByteLength.INT_LENGTH;
      int metaBinaryLength=byteBuffer.getInt(offset);
      offset+=PrimitiveByteLength.INT_LENGTH;
      if (metaBinaryLength == 0) {
        currentColumnBinaryList.add(null);
      }
 else {
        List<ColumnBinary> childList=new ArrayList<ColumnBinary>();
        for (        Map.Entry<String,ColumnBinaryTree> entry : childTreeMap.entrySet()) {
          ColumnBinary childColumnBinary=entry.getValue().getColumnBinary(index);
          if (childColumnBinary != null) {
            childList.add(childColumnBinary);
          }
        }
        currentColumnBinaryList.add(ColumnBinary.newInstanceFromMetaBinary(metaBinary,offset,metaBinaryLength,dataBuffer,childList));
      }
      offset+=metaBinaryLength;
    }
  }
  return offset;
}",0.9938561619082038
172818,"/** 
 * Return the property value associated with the given key or the defaultValue if the key cannot be resolved.
 * @param key
 * @param defaultValue
 * @return
 */
public <T extends Enum<T>>T getEnum(String key,T defaultValue){
  final Optional<T> optional=getEnum(key,defaultValue.getClass());
  if (optional.isPresent()) {
    return optional.get();
  }
  return defaultValue;
}","/** 
 * Return the property value associated with the given key or the defaultValue if the key cannot be resolved.
 * @param key
 * @param defaultValue
 * @return
 */
public <T extends Enum<T>>T getEnum(String key,T defaultValue){
  final Optional<T> optional=getEnum(key,(Class<T>)defaultValue.getClass());
  if (optional.isPresent()) {
    return optional.get();
  }
  return defaultValue;
}",0.9871134020618556
172819,"@Listener public void onBlockBreak(ChangeBlockEvent.Break event){
  if (event.getCause().root() instanceof Player) {
    Player player=(Player)event.getCause().root();
    if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
      for (      Transaction<BlockSnapshot> transaction : event.getTransactions()) {
        World world=player.getWorld();
        if (MainLogic.getSafeZoneWorldNames().contains(world.getName())) {
          event.setCancelled(true);
          return;
        }
 else         if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && MainLogic.isBlockDestroyingInWarZoneDisabled()) {
          event.setCancelled(true);
          return;
        }
        Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
        Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
        Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
        if (optionalChunkFaction.isPresent()) {
          if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
            return;
          }
 else           if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
            return;
          }
 else           if (optionalPlayerFaction.isPresent()) {
            if (!FlagManager.canBreakBlock(player,optionalPlayerFaction.get(),optionalChunkFaction.get())) {
              player.sendMessage(Text.of(PluginInfo.ErrorPrefix,PluginMessages.YOU_DONT_HAVE_PRIVILEGES_TO_DESTROY_BLOCKS_HERE));
              event.setCancelled(true);
              return;
            }
          }
 else {
            event.setCancelled(true);
            player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.THIS_LAND_BELONGS_TO_SOMEONE_ELSE));
            return;
          }
        }
      }
    }
  }
 else {
    for (    Transaction<BlockSnapshot> transaction : event.getTransactions()) {
      World world=transaction.getFinal().getLocation().get().getExtent();
      if (MainLogic.getSafeZoneWorldNames().contains(world.getName())) {
        event.setCancelled(true);
        return;
      }
 else       if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && MainLogic.isBlockDestroyingInWarZoneDisabled()) {
        event.setCancelled(true);
        return;
      }
      Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
      Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
      if (optionalChunkFaction.isPresent()) {
        if (!optionalChunkFaction.get().Name.equals(""String_Node_Str"") && !optionalChunkFaction.get().Name.equals(""String_Node_Str"") && MainLogic.isBlockDestroyingDisabled()) {
          event.setCancelled(true);
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"")) {
          event.setCancelled(true);
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && MainLogic.isBlockDestroyingInWarZoneDisabled()) {
          event.setCancelled(true);
          return;
        }
      }
    }
  }
}","@Listener public void onBlockBreak(ChangeBlockEvent.Break event){
  if (event.getCause().root() instanceof Player) {
    Player player=(Player)event.getCause().root();
    if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
      for (      Transaction<BlockSnapshot> transaction : event.getTransactions()) {
        World world=player.getWorld();
        if (MainLogic.getSafeZoneWorldNames().contains(world.getName())) {
          event.setCancelled(true);
          return;
        }
 else         if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && MainLogic.isBlockDestroyingInWarZoneDisabled()) {
          event.setCancelled(true);
          return;
        }
        Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
        Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
        Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
        if (optionalChunkFaction.isPresent()) {
          if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
            return;
          }
 else           if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
            return;
          }
 else           if (optionalPlayerFaction.isPresent()) {
            if (!FlagManager.canBreakBlock(player,optionalPlayerFaction.get(),optionalChunkFaction.get())) {
              player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_DONT_HAVE_PRIVILEGES_TO_DESTROY_BLOCKS_HERE));
              event.setCancelled(true);
              return;
            }
          }
 else {
            event.setCancelled(true);
            player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.THIS_LAND_BELONGS_TO_SOMEONE_ELSE));
            return;
          }
        }
      }
    }
  }
 else {
    for (    Transaction<BlockSnapshot> transaction : event.getTransactions()) {
      World world=transaction.getFinal().getLocation().get().getExtent();
      if (MainLogic.getSafeZoneWorldNames().contains(world.getName())) {
        event.setCancelled(true);
        return;
      }
 else       if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && MainLogic.isBlockDestroyingInWarZoneDisabled()) {
        event.setCancelled(true);
        return;
      }
      Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
      Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
      if (optionalChunkFaction.isPresent()) {
        if (!optionalChunkFaction.get().Name.equals(""String_Node_Str"") && !optionalChunkFaction.get().Name.equals(""String_Node_Str"") && MainLogic.isBlockDestroyingDisabled()) {
          event.setCancelled(true);
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"")) {
          event.setCancelled(true);
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && MainLogic.isBlockDestroyingInWarZoneDisabled()) {
          event.setCancelled(true);
          return;
        }
      }
    }
  }
}",0.997714459850678
172820,"@Listener public void onChatMessage(MessageChannelEvent.Chat event,@Root Player player){
  Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
  if (optionalPlayerFaction.isPresent()) {
    MessageChannel messageChannel=event.getOriginalChannel();
    Faction playerFaction=optionalPlayerFaction.get();
    Text.Builder formattedMessage=Text.builder();
    Text.Builder factionAndRankPrefix=Text.builder();
    Text.Builder otherPrefixesAndPlayer=Text.builder();
    Text.Builder message=Text.builder();
    otherPrefixesAndPlayer.append(event.getMessage().getChildren().get(0));
    if (EagleFactions.ChatList.containsKey(player.getUniqueId())) {
      Text.Builder chatTypePrefix=Text.builder();
      if (EagleFactions.ChatList.get(player.getUniqueId()).equals(ChatEnum.Alliance)) {
        message.append(Text.of(TextColors.BLUE,event.getRawMessage()));
        chatTypePrefix.append(getAlliancePrefix());
        messageChannel.asMutable().clearMembers();
        Set<MessageReceiver> receivers=new HashSet<>();
        for (        String allianceName : playerFaction.Alliances) {
          receivers.addAll(FactionLogic.getOnlinePlayers(FactionLogic.getFactionByName(allianceName)));
        }
        receivers.addAll(FactionLogic.getOnlinePlayers(playerFaction));
        messageChannel=MessageChannel.fixed(receivers);
      }
 else       if (EagleFactions.ChatList.get(player.getUniqueId()).equals(ChatEnum.Faction)) {
        message.append(Text.of(TextColors.GREEN,event.getRawMessage()));
        chatTypePrefix.append(getFactionPrefix());
        messageChannel.asMutable().clearMembers();
        Set<MessageReceiver> receivers=new HashSet<>();
        receivers.addAll(FactionLogic.getOnlinePlayers(playerFaction));
        messageChannel=MessageChannel.fixed(receivers);
      }
      formattedMessage.append(chatTypePrefix.build());
    }
 else {
      message.append(event.getMessage().getChildren().get(1));
    }
    if (MainLogic.getPrefixOption().equals(""String_Node_Str"")) {
      if (!playerFaction.Tag.toPlainSingle().equals(""String_Node_Str"")) {
        if (MainLogic.areColoredTagsAllowed()) {
          Text factionTag=Text.builder().append(MainLogic.getFactionPrefixStart(),playerFaction.Tag,MainLogic.getFactionPrefixEnd()).build();
          factionAndRankPrefix.append(factionTag);
        }
 else {
          Text factionTag=Text.builder().append(MainLogic.getFactionPrefixStart(),Text.of(TextColors.GREEN,playerFaction.Tag),MainLogic.getFactionPrefixEnd()).build();
          factionAndRankPrefix.append(factionTag);
        }
      }
    }
 else     if (MainLogic.getPrefixOption().equals(""String_Node_Str"")) {
      Text factionNamePrefix=Text.builder().append(MainLogic.getFactionPrefixStart(),Text.of(TextColors.GREEN,playerFaction.Name,TextColors.RESET),MainLogic.getFactionPrefixEnd()).build();
      factionAndRankPrefix.append(factionNamePrefix);
    }
    if (MainLogic.shouldDisplayRank()) {
      if (playerFaction.Leader.equals(player.getUniqueId().toString())) {
        Text leaderPrefix=Text.builder().append(Text.of(""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.RESET,""String_Node_Str"")).build();
        factionAndRankPrefix.append(leaderPrefix);
      }
      if (playerFaction.Officers.contains(player.getUniqueId().toString())) {
        Text officerPrefix=Text.builder().append(Text.of(""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.RESET,""String_Node_Str"")).build();
        factionAndRankPrefix.append(officerPrefix);
      }
    }
    formattedMessage.append(factionAndRankPrefix.build());
    formattedMessage.append(otherPrefixesAndPlayer.build());
    formattedMessage.append(message.build());
    Text messageToPrint=Text.builder().append(formattedMessage.build()).build();
    event.setChannel(messageChannel);
    event.setMessage(messageToPrint);
  }
  return;
}","@Listener public void onChatMessage(MessageChannelEvent.Chat event,@Root Player player){
  Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
  if (optionalPlayerFaction.isPresent()) {
    MessageChannel messageChannel=event.getOriginalChannel();
    Faction playerFaction=optionalPlayerFaction.get();
    Text.Builder formattedMessage=Text.builder();
    Text.Builder factionAndRankPrefix=Text.builder();
    Text.Builder otherPrefixesAndPlayer=Text.builder();
    Text.Builder factionPrefixText=Text.builder();
    Text.Builder rankPrefixText=Text.builder();
    Text.Builder message=Text.builder();
    otherPrefixesAndPlayer.append(event.getMessage().getChildren().get(0));
    if (EagleFactions.ChatList.containsKey(player.getUniqueId())) {
      Text.Builder chatTypePrefix=Text.builder();
      if (EagleFactions.ChatList.get(player.getUniqueId()).equals(ChatEnum.Alliance)) {
        message.append(Text.of(TextColors.BLUE,event.getRawMessage()));
        chatTypePrefix.append(getAlliancePrefix());
        messageChannel.asMutable().clearMembers();
        Set<MessageReceiver> receivers=new HashSet<>();
        for (        String allianceName : playerFaction.Alliances) {
          receivers.addAll(FactionLogic.getOnlinePlayers(FactionLogic.getFactionByName(allianceName)));
        }
        receivers.addAll(FactionLogic.getOnlinePlayers(playerFaction));
        messageChannel=MessageChannel.fixed(receivers);
      }
 else       if (EagleFactions.ChatList.get(player.getUniqueId()).equals(ChatEnum.Faction)) {
        message.append(Text.of(TextColors.GREEN,event.getRawMessage()));
        chatTypePrefix.append(getFactionPrefix());
        messageChannel.asMutable().clearMembers();
        Set<MessageReceiver> receivers=new HashSet<>();
        receivers.addAll(FactionLogic.getOnlinePlayers(playerFaction));
        messageChannel=MessageChannel.fixed(receivers);
      }
      formattedMessage.append(chatTypePrefix.build());
    }
 else {
      message.append(event.getMessage().getChildren().get(1));
    }
    if (MainLogic.getPrefixOption().equals(""String_Node_Str"")) {
      if (!playerFaction.Tag.toPlainSingle().equals(""String_Node_Str"")) {
        if (MainLogic.areColoredTagsAllowed()) {
          Text factionTag=Text.builder().append(MainLogic.getFactionPrefixStart(),playerFaction.Tag,MainLogic.getFactionPrefixEnd()).build();
          factionPrefixText.append(factionTag);
        }
 else {
          Text factionTag=Text.builder().append(MainLogic.getFactionPrefixStart(),Text.of(TextColors.GREEN,playerFaction.Tag),MainLogic.getFactionPrefixEnd()).build();
          factionPrefixText.append(factionTag);
        }
      }
    }
 else     if (MainLogic.getPrefixOption().equals(""String_Node_Str"")) {
      Text factionNamePrefix=Text.builder().append(MainLogic.getFactionPrefixStart(),Text.of(TextColors.GREEN,playerFaction.Name,TextColors.RESET),MainLogic.getFactionPrefixEnd()).build();
      factionPrefixText.append(factionNamePrefix);
    }
    if (MainLogic.shouldDisplayRank()) {
      if (playerFaction.Leader.equals(player.getUniqueId().toString())) {
        Text leaderPrefix=Text.builder().append(Text.of(""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.RESET,""String_Node_Str"")).build();
        rankPrefixText.append(leaderPrefix);
      }
      if (playerFaction.Officers.contains(player.getUniqueId().toString())) {
        Text officerPrefix=Text.builder().append(Text.of(""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.RESET,""String_Node_Str"")).build();
        rankPrefixText.append(officerPrefix);
      }
    }
    if (MainLogic.isFactionPrefixFirstInChat()) {
      factionAndRankPrefix.append(factionPrefixText.build());
      factionAndRankPrefix.append(rankPrefixText.build());
    }
 else {
      factionAndRankPrefix.append(rankPrefixText.build());
      factionAndRankPrefix.append(factionPrefixText.build());
    }
    formattedMessage.append(factionAndRankPrefix.build());
    formattedMessage.append(otherPrefixesAndPlayer.build());
    formattedMessage.append(message.build());
    Text messageToPrint=Text.builder().append(formattedMessage.build()).build();
    event.setChannel(messageChannel);
    event.setMessage(messageToPrint);
  }
  return;
}",0.8728070175438597
172821,"@Listener public void onBlockPlace(ChangeBlockEvent.Place event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
    for (    Transaction<BlockSnapshot> transaction : event.getTransactions()) {
      World world=player.getWorld();
      if (MainLogic.getSafeZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.SAFE_ZONE_BUILD)) {
        return;
      }
      if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.WAR_ZONE_BUILD)) {
        return;
      }
      Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
      Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
      if (optionalChunkFaction.isPresent()) {
        if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.SAFE_ZONE_BUILD)) {
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.WAR_ZONE_BUILD)) {
          return;
        }
 else         if (optionalPlayerFaction.isPresent()) {
          if (!FlagManager.canPlaceBlock(player,optionalPlayerFaction.get(),optionalChunkFaction.get())) {
            player.sendMessage(Text.of(PluginInfo.ErrorPrefix,PluginMessages.YOU_DONT_HAVE_PRIVILEGES_TO_DESTROY_BLOCKS_HERE));
            event.setCancelled(true);
          }
          return;
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.THIS_LAND_BELONGS_TO_SOMEONE_ELSE));
        }
      }
    }
  }
}","@Listener public void onBlockPlace(ChangeBlockEvent.Place event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
    for (    Transaction<BlockSnapshot> transaction : event.getTransactions()) {
      World world=player.getWorld();
      if (MainLogic.getSafeZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.SAFE_ZONE_BUILD)) {
        return;
      }
      if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.WAR_ZONE_BUILD)) {
        return;
      }
      Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
      Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
      if (optionalChunkFaction.isPresent()) {
        if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.SAFE_ZONE_BUILD)) {
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.WAR_ZONE_BUILD)) {
          return;
        }
 else         if (optionalPlayerFaction.isPresent()) {
          if (!FlagManager.canPlaceBlock(player,optionalPlayerFaction.get(),optionalChunkFaction.get())) {
            player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_DONT_HAVE_PRIVILEGES_TO_DESTROY_BLOCKS_HERE));
            event.setCancelled(true);
          }
          return;
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.THIS_LAND_BELONGS_TO_SOMEONE_ELSE));
        }
      }
    }
  }
}",0.9958711808422792
172822,"@Listener public void onPlayerInteract(HandInteractEvent event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    if (event.getInteractionPoint().isPresent()) {
      World world=player.getWorld();
      if (MainLogic.getSafeZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.SAFE_ZONE_INTERACT)) {
        return;
      }
      if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.WAR_ZONE_INTERACT)) {
        return;
      }
      Vector3d vector3d=event.getInteractionPoint().get();
      Location location=new Location(world,vector3d);
      Vector3i claim=location.getChunkPosition();
      Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
      Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
      if (optionalChunkFaction.isPresent()) {
        if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.SAFE_ZONE_INTERACT)) {
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.WAR_ZONE_INTERACT)) {
          return;
        }
 else         if (optionalPlayerFaction.isPresent()) {
          if (!FlagManager.canInteract(player,optionalPlayerFaction.get(),optionalChunkFaction.get())) {
            player.sendMessage(Text.of(PluginInfo.ErrorPrefix,PluginMessages.YOU_DONT_HAVE_PRIVILEGES_TO_INTERACT_HERE));
            event.setCancelled(true);
          }
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_DONT_HAVE_ACCESS_TO_DO_THIS));
          return;
        }
      }
    }
  }
}","@Listener public void onPlayerInteract(HandInteractEvent event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    if (event.getInteractionPoint().isPresent()) {
      World world=player.getWorld();
      if (MainLogic.getSafeZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.SAFE_ZONE_INTERACT)) {
        return;
      }
      if (MainLogic.getWarZoneWorldNames().contains(world.getName()) && player.hasPermission(PluginPermissions.WAR_ZONE_INTERACT)) {
        return;
      }
      Vector3d vector3d=event.getInteractionPoint().get();
      Location location=new Location(world,vector3d);
      Vector3i claim=location.getChunkPosition();
      Optional<Faction> optionalPlayerFaction=FactionLogic.getFactionByPlayerUUID(player.getUniqueId());
      Optional<Faction> optionalChunkFaction=FactionLogic.getFactionByChunk(world.getUniqueId(),claim);
      if (optionalChunkFaction.isPresent()) {
        if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.SAFE_ZONE_INTERACT)) {
          return;
        }
 else         if (optionalChunkFaction.get().Name.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.WAR_ZONE_INTERACT)) {
          return;
        }
 else         if (optionalPlayerFaction.isPresent()) {
          if (!FlagManager.canInteract(player,optionalPlayerFaction.get(),optionalChunkFaction.get())) {
            player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_DONT_HAVE_PRIVILEGES_TO_INTERACT_HERE));
            event.setCancelled(true);
          }
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_DONT_HAVE_ACCESS_TO_DO_THIS));
          return;
        }
      }
    }
  }
}",0.995986085094996
172823,"private static boolean checkFlag(Player player,Faction playerFaction,Faction chunkFaction,FactionFlagTypes flagType){
  if (playerFaction.Alliances.contains(chunkFaction.Name)) {
    return chunkFaction.Flags.get(FactionMemberType.ALLY).get(flagType);
  }
  FactionMemberType memberType=PlayerManager.getFactionMemberType(player,playerFaction);
  return chunkFaction.Flags.get(memberType).get(flagType);
}","private static boolean checkFlag(Player player,Faction playerFaction,Faction chunkFaction,FactionFlagTypes flagType){
  if (playerFaction.Name.equals(chunkFaction.Name)) {
    FactionMemberType memberType=PlayerManager.getFactionMemberType(player,playerFaction);
    return chunkFaction.Flags.get(memberType).get(flagType);
  }
 else   if (playerFaction.Alliances.contains(chunkFaction.Name)) {
    return chunkFaction.Flags.get(FactionMemberType.ALLY).get(flagType);
  }
 else {
    return false;
  }
}",0.5770925110132159
172824,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    if (EagleFactions.AdminList.contains(player.getUniqueId())) {
      EagleFactions.AdminList.remove(player.getUniqueId());
      player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,PluginMessages.ADMIN_MODE,TextColors.WHITE,""String_Node_Str"" + PluginMessages.HAS_BEEN_TURNED + ""String_Node_Str"",TextColors.GOLD,PluginMessages.ON));
      return CommandResult.success();
    }
 else {
      EagleFactions.AdminList.add(player.getUniqueId());
      player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,PluginMessages.ADMIN_MODE,TextColors.WHITE,""String_Node_Str"" + PluginMessages.HAS_BEEN_TURNED + ""String_Node_Str"",TextColors.GOLD,PluginMessages.OFF));
      return CommandResult.success();
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    if (EagleFactions.AdminList.contains(player.getUniqueId())) {
      EagleFactions.AdminList.remove(player.getUniqueId());
      player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,PluginMessages.ADMIN_MODE,TextColors.WHITE,""String_Node_Str"" + PluginMessages.HAS_BEEN_TURNED + ""String_Node_Str"",TextColors.GOLD,PluginMessages.OFF));
      return CommandResult.success();
    }
 else {
      EagleFactions.AdminList.add(player.getUniqueId());
      player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,PluginMessages.ADMIN_MODE,TextColors.WHITE,""String_Node_Str"" + PluginMessages.HAS_BEEN_TURNED + ""String_Node_Str"",TextColors.GOLD,PluginMessages.ON));
      return CommandResult.success();
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
  }
  return CommandResult.success();
}",0.9972375690607734
172825,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Optional<ChatEnum> optionalChatType=context.<ChatEnum>getOne(""String_Node_Str"");
  if (source instanceof Player) {
    Player player=(Player)source;
    if (FactionLogic.getFactionName(player.getUniqueId()) != null) {
      if (optionalChatType.isPresent()) {
        if (EagleFactions.ChatList.containsKey(player.getUniqueId())) {
          if (optionalChatType.get().equals(ChatEnum.Global)) {
            EagleFactions.ChatList.remove(player.getUniqueId());
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.GLOBAL_CHAT,TextColors.RESET,""String_Node_Str""));
          }
 else {
            EagleFactions.ChatList.replace(player.getUniqueId(),EagleFactions.ChatList.get(player.getUniqueId()),optionalChatType.get());
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,optionalChatType.get(),TextColors.RESET,""String_Node_Str""));
          }
        }
 else {
          EagleFactions.ChatList.put(player.getUniqueId(),optionalChatType.get());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,optionalChatType.get(),TextColors.RESET,""String_Node_Str""));
        }
      }
 else {
        if (EagleFactions.ChatList.containsKey(player.getUniqueId())) {
          if (EagleFactions.ChatList.get(player.getUniqueId()).equals(ChatEnum.Alliance)) {
            EagleFactions.ChatList.replace(player.getUniqueId(),ChatEnum.Alliance,ChatEnum.Faction);
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.FACTION_CHAT,TextColors.RESET,""String_Node_Str""));
          }
 else {
            EagleFactions.ChatList.remove(player.getUniqueId());
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.GLOBAL_CHAT,TextColors.RESET,""String_Node_Str""));
          }
        }
 else {
          EagleFactions.ChatList.put(player.getUniqueId(),ChatEnum.Alliance);
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.ALLIANCE_CHAT,TextColors.RESET,""String_Node_Str""));
        }
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_MUST_BE_IN_FACTION_IN_ORDER_TO_USE_THIS_COMMAND));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Optional<ChatEnum> optionalChatType=context.<ChatEnum>getOne(""String_Node_Str"");
  if (source instanceof Player) {
    Player player=(Player)source;
    if (!FactionLogic.getFactionName(player.getUniqueId()).equals(""String_Node_Str"")) {
      if (optionalChatType.isPresent()) {
        if (EagleFactions.ChatList.containsKey(player.getUniqueId())) {
          if (optionalChatType.get().equals(ChatEnum.Global)) {
            EagleFactions.ChatList.remove(player.getUniqueId());
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.GLOBAL_CHAT,TextColors.RESET,""String_Node_Str""));
          }
 else {
            EagleFactions.ChatList.replace(player.getUniqueId(),EagleFactions.ChatList.get(player.getUniqueId()),optionalChatType.get());
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,optionalChatType.get(),TextColors.RESET,""String_Node_Str""));
          }
        }
 else {
          EagleFactions.ChatList.put(player.getUniqueId(),optionalChatType.get());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,optionalChatType.get(),TextColors.RESET,""String_Node_Str""));
        }
      }
 else {
        if (EagleFactions.ChatList.containsKey(player.getUniqueId())) {
          if (EagleFactions.ChatList.get(player.getUniqueId()).equals(ChatEnum.Alliance)) {
            EagleFactions.ChatList.replace(player.getUniqueId(),ChatEnum.Alliance,ChatEnum.Faction);
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.FACTION_CHAT,TextColors.RESET,""String_Node_Str""));
          }
 else {
            EagleFactions.ChatList.remove(player.getUniqueId());
            player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.GLOBAL_CHAT,TextColors.RESET,""String_Node_Str""));
          }
        }
 else {
          EagleFactions.ChatList.put(player.getUniqueId(),ChatEnum.Alliance);
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,PluginMessages.CHANGED_CHAT_TO + ""String_Node_Str"",TextColors.GOLD,PluginMessages.ALLIANCE_CHAT,TextColors.RESET,""String_Node_Str""));
        }
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_MUST_BE_IN_FACTION_IN_ORDER_TO_USE_THIS_COMMAND));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
  }
  return CommandResult.success();
}",0.9938757655293088
172826,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Optional<Player> optionalInvitedPlayer=context.<Player>getOne(""String_Node_Str"");
  if (optionalInvitedPlayer.isPresent()) {
    if (source instanceof Player) {
      Player senderPlayer=(Player)source;
      Player invitedPlayer=optionalInvitedPlayer.get();
      Optional<Faction> optionalSenderFaction=FactionLogic.getFactionByPlayerUUID(senderPlayer.getUniqueId());
      if (optionalSenderFaction.isPresent()) {
        Faction senderFaction=optionalSenderFaction.get();
        if (MainLogic.isPlayerLimit()) {
          int playerCount=0;
          playerCount+=senderFaction.Leader.equals(""String_Node_Str"") ? 0 : 1;
          playerCount+=senderFaction.Officers.isEmpty() ? 0 : senderFaction.Officers.size();
          playerCount+=senderFaction.Members.isEmpty() ? 0 : senderFaction.Members.size();
          if (playerCount >= MainLogic.getPlayerLimit()) {
            senderPlayer.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_CANT_INVITE_MORE_PLAYERS_TO_YOUR_FACTION + ""String_Node_Str"" + PluginMessages.FACTIONS_PLAYER_LIMIT_HAS_BEEN_REACHED));
            return CommandResult.success();
          }
        }
        if (FactionLogic.getFactionName(invitedPlayer.getUniqueId()) == null) {
          try {
            Invite invite=new Invite(senderFaction.Name,invitedPlayer.getUniqueId());
            EagleFactions.InviteList.add(invite);
            invitedPlayer.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.FACTION + ""String_Node_Str"",TextColors.GOLD,senderFaction.Name,TextColors.GREEN,""String_Node_Str"" + PluginMessages.HAS_SENT_YOU_AN_INVITE + ""String_Node_Str""+ PluginMessages.YOU_HAVE_TWO_MINUTES_TO_ACCEPT_IT+ ""String_Node_Str""+ PluginMessages.TYPE+ ""String_Node_Str"",TextColors.GOLD,""String_Node_Str"" + senderFaction.Name,TextColors.WHITE,""String_Node_Str"" + PluginMessages.TO_JOIN));
            senderPlayer.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.YOU_INVITED + ""String_Node_Str"",TextColors.GOLD,invitedPlayer.getName(),TextColors.GREEN,""String_Node_Str"" + PluginMessages.TO_YOUR_FACTION));
            Task.Builder taskBuilder=Sponge.getScheduler().createTaskBuilder();
            taskBuilder.execute(new Runnable(){
              @Override public void run(){
                if (EagleFactions.InviteList.contains(invite) && EagleFactions.InviteList != null) {
                  EagleFactions.InviteList.remove(invite);
                }
              }
            }
).delay(2,TimeUnit.MINUTES).name(""String_Node_Str"").submit(EagleFactions.getEagleFactions());
            return CommandResult.success();
          }
 catch (          Exception exception) {
            exception.printStackTrace();
          }
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.PLAYER_IS_ALREADY_IN_A_FACTION));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_MUST_BE_IN_FACTION_IN_ORDER_TO_USE_THIS_COMMAND));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.WRONG_COMMAND_ARGUMENTS));
    source.sendMessage(Text.of(TextColors.RED,PluginMessages.USAGE + ""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Optional<Player> optionalInvitedPlayer=context.<Player>getOne(""String_Node_Str"");
  if (optionalInvitedPlayer.isPresent()) {
    if (source instanceof Player) {
      Player senderPlayer=(Player)source;
      Player invitedPlayer=optionalInvitedPlayer.get();
      Optional<Faction> optionalSenderFaction=FactionLogic.getFactionByPlayerUUID(senderPlayer.getUniqueId());
      if (optionalSenderFaction.isPresent()) {
        Faction senderFaction=optionalSenderFaction.get();
        if (MainLogic.isPlayerLimit()) {
          int playerCount=0;
          playerCount+=senderFaction.Leader.equals(""String_Node_Str"") ? 0 : 1;
          playerCount+=senderFaction.Officers.isEmpty() ? 0 : senderFaction.Officers.size();
          playerCount+=senderFaction.Members.isEmpty() ? 0 : senderFaction.Members.size();
          if (playerCount >= MainLogic.getPlayerLimit()) {
            senderPlayer.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_CANT_INVITE_MORE_PLAYERS_TO_YOUR_FACTION + ""String_Node_Str"" + PluginMessages.FACTIONS_PLAYER_LIMIT_HAS_BEEN_REACHED));
            return CommandResult.success();
          }
        }
        if (FactionLogic.getFactionName(invitedPlayer.getUniqueId()).equals(""String_Node_Str"")) {
          try {
            Invite invite=new Invite(senderFaction.Name,invitedPlayer.getUniqueId());
            EagleFactions.InviteList.add(invite);
            invitedPlayer.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.FACTION + ""String_Node_Str"",TextColors.GOLD,senderFaction.Name,TextColors.GREEN,""String_Node_Str"" + PluginMessages.HAS_SENT_YOU_AN_INVITE + ""String_Node_Str""+ PluginMessages.YOU_HAVE_TWO_MINUTES_TO_ACCEPT_IT+ ""String_Node_Str""+ PluginMessages.TYPE+ ""String_Node_Str"",TextColors.GOLD,""String_Node_Str"" + senderFaction.Name,TextColors.WHITE,""String_Node_Str"" + PluginMessages.TO_JOIN));
            senderPlayer.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.YOU_INVITED + ""String_Node_Str"",TextColors.GOLD,invitedPlayer.getName(),TextColors.GREEN,""String_Node_Str"" + PluginMessages.TO_YOUR_FACTION));
            Task.Builder taskBuilder=Sponge.getScheduler().createTaskBuilder();
            taskBuilder.execute(new Runnable(){
              @Override public void run(){
                if (EagleFactions.InviteList.contains(invite) && EagleFactions.InviteList != null) {
                  EagleFactions.InviteList.remove(invite);
                }
              }
            }
).delay(2,TimeUnit.MINUTES).name(""String_Node_Str"").submit(EagleFactions.getEagleFactions());
            return CommandResult.success();
          }
 catch (          Exception exception) {
            exception.printStackTrace();
          }
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.PLAYER_IS_ALREADY_IN_A_FACTION));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_MUST_BE_IN_FACTION_IN_ORDER_TO_USE_THIS_COMMAND));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.WRONG_COMMAND_ARGUMENTS));
    source.sendMessage(Text.of(TextColors.RED,PluginMessages.USAGE + ""String_Node_Str""));
  }
  return CommandResult.success();
}",0.995258019525802
172827,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Optional<String> optionalFactionName=context.<String>getOne(""String_Node_Str"");
  if (optionalFactionName.isPresent()) {
    if (source instanceof Player) {
      Player player=(Player)source;
      String rawFactionName=optionalFactionName.get();
      if (FactionLogic.getFactionName(player.getUniqueId()) == null) {
        String factionName=FactionLogic.getRealFactionName(rawFactionName);
        if (factionName == null) {
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.THERE_IS_NO_FACTION_CALLED + ""String_Node_Str"",TextColors.GOLD,rawFactionName + ""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          if (EagleFactions.AdminList.contains(player.getUniqueId())) {
            FactionLogic.joinFaction(player.getUniqueId(),factionName);
            source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.SUCCESSFULLY_JOINED_FACTION + ""String_Node_Str"",TextColors.GOLD,factionName));
            return CommandResult.success();
          }
          for (          Invite invite : EagleFactions.InviteList) {
            if (invite.getPlayerUUID().equals(player.getUniqueId()) && invite.getFactionName().equals(factionName)) {
              try {
                if (MainLogic.isPlayerLimit()) {
                  int playerCount=0;
                  Faction faction=FactionLogic.getFaction(factionName);
                  playerCount+=faction.Leader.equals(""String_Node_Str"") ? 0 : 1;
                  playerCount+=faction.Officers.isEmpty() ? 0 : faction.Officers.size();
                  playerCount+=faction.Members.isEmpty() ? 0 : faction.Members.size();
                  if (playerCount >= MainLogic.getPlayerLimit()) {
                    player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_CANT_JOIN_THIS_FACTION_BECAUSE_IT_REACHED_ITS_PLAYER_LIMIT));
                    return CommandResult.success();
                  }
                }
                FactionLogic.joinFaction(player.getUniqueId(),factionName);
                EagleFactions.InviteList.remove(new Invite(factionName,player.getUniqueId()));
                source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.SUCCESSFULLY_JOINED_FACTION + ""String_Node_Str"",TextColors.GOLD,factionName));
                return CommandResult.success();
              }
 catch (              Exception exception) {
                exception.printStackTrace();
              }
            }
          }
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_HAVENT_BEEN_INVITED_TO_THIS_FACTION));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_ARE_ALREADY_IN_A_FACTION));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.WRONG_COMMAND_ARGUMENTS));
    source.sendMessage(Text.of(TextColors.RED,PluginMessages.USAGE + ""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Optional<String> optionalFactionName=context.<String>getOne(""String_Node_Str"");
  if (optionalFactionName.isPresent()) {
    if (source instanceof Player) {
      Player player=(Player)source;
      String rawFactionName=optionalFactionName.get();
      if (FactionLogic.getFactionName(player.getUniqueId()).equals(""String_Node_Str"")) {
        String factionName=FactionLogic.getRealFactionName(rawFactionName);
        if (factionName == null) {
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.THERE_IS_NO_FACTION_CALLED + ""String_Node_Str"",TextColors.GOLD,rawFactionName + ""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          if (EagleFactions.AdminList.contains(player.getUniqueId())) {
            FactionLogic.joinFaction(player.getUniqueId(),factionName);
            source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.SUCCESSFULLY_JOINED_FACTION + ""String_Node_Str"",TextColors.GOLD,factionName));
            return CommandResult.success();
          }
          for (          Invite invite : EagleFactions.InviteList) {
            if (invite.getPlayerUUID().equals(player.getUniqueId()) && invite.getFactionName().equals(factionName)) {
              try {
                if (MainLogic.isPlayerLimit()) {
                  int playerCount=0;
                  Faction faction=FactionLogic.getFaction(factionName);
                  playerCount+=faction.Leader.equals(""String_Node_Str"") ? 0 : 1;
                  playerCount+=faction.Officers.isEmpty() ? 0 : faction.Officers.size();
                  playerCount+=faction.Members.isEmpty() ? 0 : faction.Members.size();
                  if (playerCount >= MainLogic.getPlayerLimit()) {
                    player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_CANT_JOIN_THIS_FACTION_BECAUSE_IT_REACHED_ITS_PLAYER_LIMIT));
                    return CommandResult.success();
                  }
                }
                FactionLogic.joinFaction(player.getUniqueId(),factionName);
                EagleFactions.InviteList.remove(new Invite(factionName,player.getUniqueId()));
                source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,PluginMessages.SUCCESSFULLY_JOINED_FACTION + ""String_Node_Str"",TextColors.GOLD,factionName));
                return CommandResult.success();
              }
 catch (              Exception exception) {
                exception.printStackTrace();
              }
            }
          }
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_HAVENT_BEEN_INVITED_TO_THIS_FACTION));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.YOU_ARE_ALREADY_IN_A_FACTION));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.ONLY_IN_GAME_PLAYERS_CAN_USE_THIS_COMMAND));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,PluginMessages.WRONG_COMMAND_ARGUMENTS));
    source.sendMessage(Text.of(TextColors.RED,PluginMessages.USAGE + ""String_Node_Str""));
  }
  return CommandResult.success();
}",0.9949344457687724
172828,"@Listener public void onBlockPlace(ChangeBlockEvent.Place event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    for (    Transaction<BlockSnapshot> transaction : event.getTransactions()) {
      World world=player.getWorld();
      Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
      if (FactionLogic.isClaimed(world.getUniqueId(),claim)) {
        if (FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim).equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
          return;
        }
 else         if (FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim).equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
          return;
        }
 else         if (FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim).equals(playerFactionName)) {
          return;
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
          return;
        }
      }
 else       return;
    }
  }
  return;
}","@Listener public void onBlockPlace(ChangeBlockEvent.Place event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    for (    Transaction<BlockSnapshot> transaction : event.getTransactions()) {
      World world=player.getWorld();
      Vector3i claim=transaction.getFinal().getLocation().get().getChunkPosition();
      String chunkFactionName=FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim);
      if (!chunkFactionName.equals(""String_Node_Str"")) {
        if (chunkFactionName.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.SAFE_ZONE_BUILD)) {
          return;
        }
 else         if (chunkFactionName.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.WAR_ZONE_BUILD)) {
          return;
        }
 else         if (chunkFactionName.equals(playerFactionName)) {
          return;
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
          return;
        }
      }
    }
  }
  return;
}",0.756642766765078
172829,"@Listener public void onPlayerInteract(InteractBlockEvent.Secondary event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    Optional<Location<World>> location=event.getTargetBlock().getLocation();
    if (location.isPresent()) {
      World world=player.getWorld();
      Vector3i claim=location.get().getChunkPosition();
      if (FactionLogic.isClaimed(world.getUniqueId(),claim)) {
        if (FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim).equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
          return;
        }
 else         if (FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim).equals(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
          return;
        }
 else         if (FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim).equals(playerFactionName)) {
          return;
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
          return;
        }
      }
 else {
        return;
      }
    }
  }
}","@Listener public void onPlayerInteract(HandInteractEvent event,@Root Player player){
  if (!EagleFactions.AdminList.contains(player.getUniqueId())) {
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (event.getInteractionPoint().isPresent()) {
      World world=player.getWorld();
      Vector3d vector3d=event.getInteractionPoint().get();
      Location<World> location=new Location(world,vector3d);
      Vector3i claim=location.getChunkPosition();
      String chunkFactionName=FactionLogic.getFactionNameByChunk(world.getUniqueId(),claim);
      if (!chunkFactionName.equals(""String_Node_Str"")) {
        if (chunkFactionName.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.SAFE_ZONE_INTERACT)) {
          return;
        }
 else         if (chunkFactionName.equals(""String_Node_Str"") && player.hasPermission(PluginPermissions.WAR_ZONE_INTERACT)) {
          return;
        }
 else         if (chunkFactionName.equals(playerFactionName)) {
          return;
        }
 else {
          event.setCancelled(true);
          player.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
          return;
        }
      }
    }
  }
}",0.6244864420706656
172830,"private void InitializeCommands(){
  getLogger().info(""String_Node_Str"");
  Subcommands=new HashMap<List<String>,CommandSpec>();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.HelpCommand).executor(new HelpCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.CreateCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str""))),GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new CreateCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.DisbandCommand).executor(new DisbandCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ListCommand).executor(new ListCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.InviteCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new InviteCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.KickCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new KickCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.JoinCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new JoinCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.LeaveCommand).executor(new LeaveCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.VersionCommand).executor(new VersionCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.InfoCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new InfoCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.PlayerCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new PlayerCommand()).build());
  CommandSpec addAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AddAllyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddAllyCommand()).build();
  CommandSpec removeAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.RemoveAllyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveAllyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AllyCommands).child(addAllyCommand,""String_Node_Str"",""String_Node_Str"").child(removeAllyCommand,""String_Node_Str"",""String_Node_Str"").build());
  CommandSpec addEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AddEnemyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddEnemyCommand()).build();
  CommandSpec removeEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.RemoveEnemyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveEnemyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.EnemyCommands).child(addEnemyCommand,""String_Node_Str"",""String_Node_Str"").child(removeEnemyCommand,""String_Node_Str"",""String_Node_Str"").build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).permission(PluginPermissions.OfficerCommand).executor(new OfficerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.FriendlyFireCommand).executor(new FriendlyFireCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ClaimCommand).executor(new ClaimCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.UnclaimCommand).executor(new UnclaimCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.UnclaimAllCommand).executor(new UnclaimallCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.MapCommand).executor(new MapCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.SetHomeCommand).executor(new SetHomeCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.HomeCommand).executor(new HomeCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AutoClaimCommand).executor(new AutoClaimCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AutoMapCommand).executor(new AutoMapCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AdminCommand).executor(new AdminCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.CoordsCommand).executor(new CoordsCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.SetPowerCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str""))),GenericArguments.remainingJoinedStrings(Text.of(""String_Node_Str""))).executor(new SetPowerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.MaxPowerCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str""))),GenericArguments.remainingJoinedStrings(Text.of(""String_Node_Str""))).executor(new MaxPowerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AttackCommand).executor(new AttackCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ReloadCommand).executor(new ReloadCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ChatCommand).executor(new ChatCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.TopCommand).executor(new TopCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.SetLeaderCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new SetLeaderCommand()).build());
  CommandSpec commandEagleFactions=CommandSpec.builder().description(Text.of(""String_Node_Str"")).executor(new HelpCommand()).children(Subcommands).build();
  Sponge.getCommandManager().register(this,commandEagleFactions,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","private void InitializeCommands(){
  getLogger().info(""String_Node_Str"");
  Subcommands=new HashMap<List<String>,CommandSpec>();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.HelpCommand).executor(new HelpCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.CreateCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str""))),GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new CreateCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.DisbandCommand).executor(new DisbandCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ListCommand).executor(new ListCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.InviteCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new InviteCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.KickCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new KickCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.JoinCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new JoinCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.LeaveCommand).executor(new LeaveCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.VersionCommand).executor(new VersionCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.InfoCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new InfoCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.PlayerCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new PlayerCommand()).build());
  CommandSpec addAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AddAllyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddAllyCommand()).build();
  CommandSpec removeAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.RemoveAllyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveAllyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AllyCommands).child(addAllyCommand,""String_Node_Str"",""String_Node_Str"").child(removeAllyCommand,""String_Node_Str"",""String_Node_Str"").build());
  CommandSpec addEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AddEnemyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddEnemyCommand()).build();
  CommandSpec removeEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.RemoveEnemyCommand).arguments(GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveEnemyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.EnemyCommands).child(addEnemyCommand,""String_Node_Str"",""String_Node_Str"").child(removeEnemyCommand,""String_Node_Str"",""String_Node_Str"").build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).permission(PluginPermissions.OfficerCommand).executor(new OfficerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.FriendlyFireCommand).executor(new FriendlyFireCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ClaimCommand).executor(new ClaimCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.UnclaimCommand).executor(new UnclaimCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.UnclaimAllCommand).executor(new UnclaimallCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.MapCommand).executor(new MapCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.SetHomeCommand).executor(new SetHomeCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.HomeCommand).executor(new HomeCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AutoClaimCommand).executor(new AutoClaimCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AutoMapCommand).executor(new AutoMapCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AdminCommand).executor(new AdminCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.CoordsCommand).executor(new CoordsCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.SetPowerCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str""))),GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new SetPowerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.MaxPowerCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str""))),GenericArguments.optional(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new MaxPowerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.AttackCommand).executor(new AttackCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ReloadCommand).executor(new ReloadCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.ChatCommand).executor(new ChatCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.TopCommand).executor(new TopCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(PluginPermissions.SetLeaderCommand).arguments(GenericArguments.optional(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new SetLeaderCommand()).build());
  CommandSpec commandEagleFactions=CommandSpec.builder().description(Text.of(""String_Node_Str"")).executor(new HelpCommand()).children(Subcommands).build();
  Sponge.getCommandManager().register(this,commandEagleFactions,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9940210892488314
172831,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (playerFactionName != null) {
      if (FactionLogic.getLeader(playerFactionName).equals(player.getUniqueId().toString()) || FactionLogic.getOfficers(playerFactionName).contains(player.getUniqueId().toString())) {
        World world=player.getWorld();
        Vector3i chunk=player.getLocation().getChunkPosition();
        if (!FactionLogic.isClaimed(world.getUniqueId(),chunk)) {
          if (FactionLogic.getFaction(playerFactionName).Power.doubleValue() >= FactionLogic.getClaims(playerFactionName).size()) {
            if (!EagleFactions.AttackedFactions.contains(playerFactionName)) {
              if (!FactionLogic.getClaims(playerFactionName).isEmpty()) {
                if (playerFactionName.equals(""String_Node_Str"") || playerFactionName.equals(""String_Node_Str"")) {
                  FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                  player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                  return CommandResult.success();
                }
 else {
                  if (MainLogic.requireConnectedClaims()) {
                    if (FactionLogic.isClaimConnected(playerFactionName,world.getUniqueId(),chunk)) {
                      FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                      player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                      return CommandResult.success();
                    }
 else {
                      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
                    }
                  }
 else {
                    FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                    player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                    return CommandResult.success();
                  }
                }
              }
 else {
                FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                return CommandResult.success();
              }
            }
 else {
              source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.RED,""String_Node_Str""));
            }
          }
 else {
            source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
          }
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        }
      }
 else       if (EagleFactions.AdminList.contains(player.getUniqueId().toString())) {
        World world=player.getWorld();
        Vector3i chunk=player.getLocation().getChunkPosition();
        if (!FactionLogic.isClaimed(world.getUniqueId(),chunk)) {
          FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (playerFactionName != null) {
      if (FactionLogic.getLeader(playerFactionName).equals(player.getUniqueId().toString()) || FactionLogic.getOfficers(playerFactionName).contains(player.getUniqueId().toString())) {
        World world=player.getWorld();
        Vector3i chunk=player.getLocation().getChunkPosition();
        if (!FactionLogic.isClaimed(world.getUniqueId(),chunk)) {
          if (FactionLogic.getFaction(playerFactionName).Power.doubleValue() > FactionLogic.getClaims(playerFactionName).size()) {
            if (!EagleFactions.AttackedFactions.contains(playerFactionName)) {
              if (!FactionLogic.getClaims(playerFactionName).isEmpty()) {
                if (playerFactionName.equals(""String_Node_Str"") || playerFactionName.equals(""String_Node_Str"")) {
                  FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                  player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                  return CommandResult.success();
                }
 else {
                  if (MainLogic.requireConnectedClaims()) {
                    if (FactionLogic.isClaimConnected(playerFactionName,world.getUniqueId(),chunk)) {
                      FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                      player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                      return CommandResult.success();
                    }
 else {
                      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
                    }
                  }
 else {
                    FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                    player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                    return CommandResult.success();
                  }
                }
              }
 else {
                FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
                player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
                return CommandResult.success();
              }
            }
 else {
              source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.RED,""String_Node_Str""));
            }
          }
 else {
            source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
          }
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        }
      }
 else       if (EagleFactions.AdminList.contains(player.getUniqueId().toString())) {
        World world=player.getWorld();
        Vector3i chunk=player.getLocation().getChunkPosition();
        if (!FactionLogic.isClaimed(world.getUniqueId(),chunk)) {
          FactionLogic.addClaim(playerFactionName,world.getUniqueId(),chunk);
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,chunk.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}",0.9998893193137798
172832,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (playerFactionName != null) {
      if (FactionLogic.getHome(playerFactionName) != null) {
        World world=player.getWorld();
        if (FactionLogic.isHomeInWorld(world.getUniqueId(),playerFactionName)) {
          EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
          Vector3i home=FactionLogic.getHome(playerFactionName);
          EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
          player.setLocation(player.getLocation().setPosition(new Vector3d(home.getX(),player.getLocation().getY(),home.getZ())));
          source.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str""));
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,""String_Node_Str""));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (playerFactionName != null) {
      if (FactionLogic.getHome(playerFactionName) != null) {
        World world=player.getWorld();
        if (FactionLogic.isHomeInWorld(world.getUniqueId(),playerFactionName)) {
          Vector3i home=FactionLogic.getHome(playerFactionName);
          player.setLocation(player.getLocation().setPosition(new Vector3d(home.getX(),home.getY(),home.getZ())));
          source.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str""));
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,""String_Node_Str""));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}",0.9173047473200612
172833,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  String factionName=context.<String>getOne(""String_Node_Str"").get();
  if (FactionLogic.getFactionsNames().contains(factionName)) {
    Faction faction=FactionLogic.getFaction(factionName);
    List<Text> factionInfo=new ArrayList<>();
    String leaderName=""String_Node_Str"";
    if (faction.Leader != null && !faction.Leader.equals(""String_Node_Str""))     leaderName=PlayerService.getPlayerName(UUID.fromString(leaderName)).get();
    String membersList=""String_Node_Str"";
    if (!faction.Members.isEmpty() && faction.Members != null) {
      for (      String member : faction.Members) {
        membersList+=PlayerService.getPlayerName(UUID.fromString(member)).get() + ""String_Node_Str"";
      }
      membersList=membersList.substring(0,membersList.length() - 2);
    }
    String officersList=""String_Node_Str"";
    if (!faction.Officers.isEmpty() && faction.Officers != null) {
      for (      String officer : faction.Officers) {
        officersList+=PlayerService.getPlayerName(UUID.fromString(officer)).get() + ""String_Node_Str"";
      }
      officersList=officersList.substring(0,officersList.length() - 2);
    }
    String alliancesList=""String_Node_Str"";
    if (!faction.Alliances.isEmpty() && faction.Alliances != null) {
      for (      String alliance : faction.Alliances) {
        alliancesList+=alliance + ""String_Node_Str"";
      }
      alliancesList=alliancesList.substring(0,alliancesList.length() - 2);
    }
    String enemiesList=""String_Node_Str"";
    if (!faction.Enemies.isEmpty() && faction.Enemies != null) {
      for (      String enemy : faction.Enemies) {
        enemiesList+=enemy + ""String_Node_Str"";
      }
      enemiesList=enemiesList.substring(0,enemiesList.length() - 2);
    }
    Text info=Text.builder().append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Name + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Tag + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,leaderName + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,officersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.BLUE,alliancesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.RED,enemiesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GREEN,membersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Power + ""String_Node_Str"" + PowerService.getFactionMaxPower(faction)+ ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,String.valueOf(FactionLogic.getClaims(factionName).size()) + ""String_Node_Str"" + String.valueOf(faction.Power.intValue()))).build();
    factionInfo.add(info);
    PaginationService paginationService=Sponge.getServiceManager().provide(PaginationService.class).get();
    PaginationList.Builder paginationBuilder=paginationService.builder().title(Text.of(TextColors.GREEN,""String_Node_Str"")).contents(factionInfo);
    paginationBuilder.sendTo(source);
    CommandResult.success();
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,factionName));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  String factionName=context.<String>getOne(""String_Node_Str"").get();
  if (FactionLogic.getFactionsNames().contains(factionName)) {
    Faction faction=FactionLogic.getFaction(factionName);
    List<Text> factionInfo=new ArrayList<>();
    String leaderName=""String_Node_Str"";
    if (faction.Leader != null && !faction.Leader.equals(""String_Node_Str""))     leaderName=PlayerService.getPlayerName(UUID.fromString(faction.Leader)).get();
    String membersList=""String_Node_Str"";
    if (!faction.Members.isEmpty() && faction.Members != null) {
      for (      String member : faction.Members) {
        membersList+=PlayerService.getPlayerName(UUID.fromString(member)).get() + ""String_Node_Str"";
      }
      membersList=membersList.substring(0,membersList.length() - 2);
    }
    String officersList=""String_Node_Str"";
    if (!faction.Officers.isEmpty() && faction.Officers != null) {
      for (      String officer : faction.Officers) {
        officersList+=PlayerService.getPlayerName(UUID.fromString(officer)).get() + ""String_Node_Str"";
      }
      officersList=officersList.substring(0,officersList.length() - 2);
    }
    String alliancesList=""String_Node_Str"";
    if (!faction.Alliances.isEmpty() && faction.Alliances != null) {
      for (      String alliance : faction.Alliances) {
        alliancesList+=alliance + ""String_Node_Str"";
      }
      alliancesList=alliancesList.substring(0,alliancesList.length() - 2);
    }
    String enemiesList=""String_Node_Str"";
    if (!faction.Enemies.isEmpty() && faction.Enemies != null) {
      for (      String enemy : faction.Enemies) {
        enemiesList+=enemy + ""String_Node_Str"";
      }
      enemiesList=enemiesList.substring(0,enemiesList.length() - 2);
    }
    Text info=Text.builder().append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Name + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Tag + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,leaderName + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,officersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.BLUE,alliancesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.RED,enemiesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GREEN,membersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Power + ""String_Node_Str"" + PowerService.getFactionMaxPower(faction)+ ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,String.valueOf(FactionLogic.getClaims(factionName).size()) + ""String_Node_Str"" + String.valueOf(faction.Power.intValue()))).build();
    factionInfo.add(info);
    PaginationService paginationService=Sponge.getServiceManager().provide(PaginationService.class).get();
    PaginationList.Builder paginationBuilder=paginationService.builder().title(Text.of(TextColors.GREEN,""String_Node_Str"")).contents(factionInfo);
    paginationBuilder.sendTo(source);
    CommandResult.success();
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,factionName));
  }
  return CommandResult.success();
}",0.9965166908563134
172834,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (playerFactionName != null) {
      if (FactionLogic.getLeader(playerFactionName).equals(player.getUniqueId().toString()) || FactionLogic.getOfficers(playerFactionName).contains(player.getUniqueId().toString())) {
        if (EagleFactions.AutoClaimList.contains(player.getUniqueId().toString())) {
          EagleFactions.AutoClaimList.remove(player.getUniqueId().toString());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          EagleFactions.AutoClaimList.add(player.getUniqueId().toString());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str""));
          return CommandResult.success();
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (playerFactionName != null) {
      if (FactionLogic.getLeader(playerFactionName).equals(player.getUniqueId().toString()) || FactionLogic.getOfficers(playerFactionName).contains(player.getUniqueId().toString())) {
        if (EagleFactions.AutoClaimList.contains(player.getUniqueId().toString())) {
          EagleFactions.AutoClaimList.remove(player.getUniqueId().toString());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          EagleFactions.AutoClaimList.add(player.getUniqueId().toString());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str""));
          return CommandResult.success();
        }
      }
 else       if (EagleFactions.AdminList.contains(player.getUniqueId().toString())) {
        if (EagleFactions.AutoClaimList.contains(player.getUniqueId().toString())) {
          EagleFactions.AutoClaimList.remove(player.getUniqueId().toString());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          EagleFactions.AutoClaimList.add(player.getUniqueId().toString());
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,""String_Node_Str""));
          return CommandResult.success();
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}",0.7977148792521424
172835,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  String factionName=context.<String>getOne(""String_Node_Str"").get();
  if (source instanceof Player) {
    Player player=(Player)source;
    if (FactionLogic.getFactionName(player.getUniqueId()) == null) {
      if (FactionLogic.getFactionsNames().contains(factionName)) {
        if (EagleFactions.AdminList.contains(player.getUniqueId().toString()))         FactionLogic.joinFaction(player.getUniqueId(),factionName);
        for (        Invite invite : EagleFactions.InviteList) {
          if (invite.getPlayerUUID().equals(player.getUniqueId()) && invite.getFactionName().equals(factionName)) {
            try {
              FactionLogic.joinFaction(player.getUniqueId(),factionName);
              EagleFactions.InviteList.remove(new Invite(factionName,player.getUniqueId()));
              source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,""String_Node_Str"",TextColors.GOLD,factionName));
              return CommandResult.success();
            }
 catch (            Exception exception) {
              exception.printStackTrace();
            }
          }
        }
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,factionName));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  String factionName=context.<String>getOne(""String_Node_Str"").get();
  if (source instanceof Player) {
    Player player=(Player)source;
    if (FactionLogic.getFactionName(player.getUniqueId()) == null) {
      if (FactionLogic.getFactionsNames().contains(factionName)) {
        if (EagleFactions.AdminList.contains(player.getUniqueId().toString())) {
          FactionLogic.joinFaction(player.getUniqueId(),factionName);
          source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,""String_Node_Str"",TextColors.GOLD,factionName));
          return CommandResult.success();
        }
        for (        Invite invite : EagleFactions.InviteList) {
          if (invite.getPlayerUUID().equals(player.getUniqueId()) && invite.getFactionName().equals(factionName)) {
            try {
              FactionLogic.joinFaction(player.getUniqueId(),factionName);
              EagleFactions.InviteList.remove(new Invite(factionName,player.getUniqueId()));
              source.sendMessage(Text.of(PluginInfo.PluginPrefix,TextColors.GREEN,""String_Node_Str"",TextColors.GOLD,factionName));
              return CommandResult.success();
            }
 catch (            Exception exception) {
              exception.printStackTrace();
            }
          }
        }
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,factionName));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}",0.9490108665366396
172836,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    Text notCapturedMark=Text.of(TextColors.GRAY,""String_Node_Str"");
    Text factionMark=Text.of(TextColors.GREEN,""String_Node_Str"");
    Text allianceMark=Text.of(TextColors.AQUA,""String_Node_Str"");
    Text enemyMark=Text.of(TextColors.RED,""String_Node_Str"");
    Text normalFactionMark=Text.of(TextColors.WHITE,""String_Node_Str"");
    Text playerLocationMark=Text.of(TextColors.GOLD,""String_Node_Str"");
    Vector3i playerPosition=player.getLocation().getChunkPosition();
    List<Text> map=new ArrayList<>();
    String normalFactions=""String_Node_Str"";
    String allianceFactions=""String_Node_Str"";
    String enemyFactions=""String_Node_Str"";
    String playerFaction=""String_Node_Str"";
    int mapWidth=20;
    int mapHeight=8;
    int halfMapWidth=mapWidth / 2;
    int halfMapHeight=mapHeight / 2;
    for (int row=-halfMapHeight; row <= halfMapHeight; row++) {
      Text.Builder textBuilder=Text.builder();
      for (int column=-halfMapWidth; column <= halfMapWidth; column++) {
        if (row == 0 && column == 0) {
          textBuilder.append(playerLocationMark);
          continue;
        }
        Vector3i chunk=playerPosition.add(column,0,row);
        if (FactionLogic.isClaimed(chunk)) {
          String factionName=FactionLogic.getFactionNameByChunk(chunk);
          String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
          if (playerFactionName != null) {
            if (factionName.equals(playerFactionName)) {
              textBuilder.append(factionMark);
              playerFaction=factionName;
            }
 else             if (FactionLogic.getAlliances(playerFactionName).contains(factionName)) {
              textBuilder.append(allianceMark);
              if (!allianceFactions.contains(factionName))               allianceFactions+=factionName + ""String_Node_Str"";
            }
 else             if (FactionLogic.getEnemies(playerFactionName).contains(factionName)) {
              textBuilder.append(enemyMark);
              if (!enemyFactions.contains(factionName))               enemyFactions+=factionName + ""String_Node_Str"";
            }
 else {
              if (factionName.equals(""String_Node_Str""))               textBuilder.append(Text.of(TextColors.AQUA,""String_Node_Str""));
 else               if (factionName.equals(""String_Node_Str""))               textBuilder.append(Text.of(TextColors.DARK_RED,""String_Node_Str""));
 else               textBuilder.append(normalFactionMark);
              if (!normalFactions.contains(factionName))               normalFactions+=factionName + ""String_Node_Str"";
            }
          }
 else {
            if (factionName.equals(""String_Node_Str""))             textBuilder.append(Text.of(TextColors.AQUA,""String_Node_Str""));
 else             if (factionName.equals(""String_Node_Str""))             textBuilder.append(Text.of(TextColors.DARK_RED,""String_Node_Str""));
 else             textBuilder.append(normalFactionMark);
            if (!normalFactions.contains(factionName))             normalFactions+=factionName + ""String_Node_Str"";
          }
        }
 else {
          textBuilder.append(notCapturedMark);
        }
      }
      map.add(textBuilder.build());
    }
    String playerPositionCalim=""String_Node_Str"";
    if (FactionLogic.isClaimed(playerPosition)) {
      playerPositionCalim=FactionLogic.getFactionNameByChunk(playerPosition);
    }
    player.sendMessage(Text.of(TextColors.GREEN,""String_Node_Str""));
    for (    Text text : map) {
      player.sendMessage(Text.of(text));
    }
    player.sendMessage(Text.of(TextColors.GREEN,""String_Node_Str""));
    if (!playerFaction.equals(""String_Node_Str"")) {
      player.sendMessage(Text.of(TextColors.GREEN,""String_Node_Str"",TextColors.GREEN,playerFaction.substring(0,playerFaction.length() - 2)));
    }
    if (!normalFactions.isEmpty()) {
      player.sendMessage(Text.of(TextColors.WHITE,""String_Node_Str"",TextColors.RESET,normalFactions.substring(0,normalFactions.length() - 2)));
    }
    if (!allianceFactions.isEmpty()) {
      player.sendMessage(Text.of(TextColors.AQUA,""String_Node_Str"" + allianceFactions.substring(0,allianceFactions.length() - 2)));
    }
    if (!enemyFactions.isEmpty()) {
      player.sendMessage(Text.of(TextColors.RED,""String_Node_Str"" + enemyFactions.substring(0,enemyFactions.length() - 2)));
    }
    player.sendMessage(Text.of(""String_Node_Str"",TextColors.GOLD,playerPosition.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,playerPositionCalim));
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    Text notCapturedMark=Text.of(TextColors.GRAY,""String_Node_Str"");
    Text factionMark=Text.of(TextColors.GREEN,""String_Node_Str"");
    Text allianceMark=Text.of(TextColors.AQUA,""String_Node_Str"");
    Text enemyMark=Text.of(TextColors.RED,""String_Node_Str"");
    Text normalFactionMark=Text.of(TextColors.WHITE,""String_Node_Str"");
    Text playerLocationMark=Text.of(TextColors.GOLD,""String_Node_Str"");
    Vector3i playerPosition=player.getLocation().getChunkPosition();
    List<Text> map=new ArrayList<>();
    String normalFactions=""String_Node_Str"";
    String allianceFactions=""String_Node_Str"";
    String enemyFactions=""String_Node_Str"";
    String playerFaction=""String_Node_Str"";
    int mapWidth=20;
    int mapHeight=8;
    int halfMapWidth=mapWidth / 2;
    int halfMapHeight=mapHeight / 2;
    for (int row=-halfMapHeight; row <= halfMapHeight; row++) {
      Text.Builder textBuilder=Text.builder();
      for (int column=-halfMapWidth; column <= halfMapWidth; column++) {
        if (row == 0 && column == 0) {
          textBuilder.append(playerLocationMark);
          continue;
        }
        Vector3i chunk=playerPosition.add(column,0,row);
        if (FactionLogic.isClaimed(chunk)) {
          String factionName=FactionLogic.getFactionNameByChunk(chunk);
          String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
          if (playerFactionName != null) {
            if (factionName.equals(playerFactionName)) {
              textBuilder.append(factionMark);
              playerFaction=factionName;
            }
 else             if (FactionLogic.getAlliances(playerFactionName).contains(factionName)) {
              textBuilder.append(allianceMark);
              if (!allianceFactions.contains(factionName))               allianceFactions+=factionName + ""String_Node_Str"";
            }
 else             if (FactionLogic.getEnemies(playerFactionName).contains(factionName)) {
              textBuilder.append(enemyMark);
              if (!enemyFactions.contains(factionName))               enemyFactions+=factionName + ""String_Node_Str"";
            }
 else {
              if (factionName.equals(""String_Node_Str""))               textBuilder.append(Text.of(TextColors.AQUA,""String_Node_Str""));
 else               if (factionName.equals(""String_Node_Str""))               textBuilder.append(Text.of(TextColors.DARK_RED,""String_Node_Str""));
 else               textBuilder.append(normalFactionMark);
              if (!normalFactions.contains(factionName))               normalFactions+=factionName + ""String_Node_Str"";
            }
          }
 else {
            if (factionName.equals(""String_Node_Str""))             textBuilder.append(Text.of(TextColors.AQUA,""String_Node_Str""));
 else             if (factionName.equals(""String_Node_Str""))             textBuilder.append(Text.of(TextColors.DARK_RED,""String_Node_Str""));
 else             textBuilder.append(normalFactionMark);
            if (!normalFactions.contains(factionName))             normalFactions+=factionName + ""String_Node_Str"";
          }
        }
 else {
          textBuilder.append(notCapturedMark);
        }
      }
      map.add(textBuilder.build());
    }
    String playerPositionCalim=""String_Node_Str"";
    if (FactionLogic.isClaimed(playerPosition)) {
      playerPositionCalim=FactionLogic.getFactionNameByChunk(playerPosition);
    }
    player.sendMessage(Text.of(TextColors.GREEN,""String_Node_Str""));
    for (    Text text : map) {
      player.sendMessage(Text.of(text));
    }
    player.sendMessage(Text.of(TextColors.GREEN,""String_Node_Str""));
    if (!playerFaction.equals(""String_Node_Str"")) {
      player.sendMessage(Text.of(TextColors.GREEN,""String_Node_Str"",TextColors.GREEN,playerFaction));
    }
    if (!normalFactions.isEmpty()) {
      player.sendMessage(Text.of(TextColors.WHITE,""String_Node_Str"",TextColors.RESET,normalFactions.substring(0,normalFactions.length() - 2)));
    }
    if (!allianceFactions.isEmpty()) {
      player.sendMessage(Text.of(TextColors.AQUA,""String_Node_Str"" + allianceFactions.substring(0,allianceFactions.length() - 2)));
    }
    if (!enemyFactions.isEmpty()) {
      player.sendMessage(Text.of(TextColors.RED,""String_Node_Str"" + enemyFactions.substring(0,enemyFactions.length() - 2)));
    }
    player.sendMessage(Text.of(""String_Node_Str"",TextColors.GOLD,playerPosition.toString(),TextColors.WHITE,""String_Node_Str"",TextColors.GOLD,playerPositionCalim));
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}",0.9958307275380446
172837,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (EagleFactions.AdminList.contains(player.getUniqueId().toString())) {
      Vector3i chunk=player.getLocation().getChunkPosition();
      if (FactionLogic.isClaimed(chunk)) {
        World world=player.getWorld();
        Location homeLocation=world.getLocation(FactionLogic.getHome(playerFactionName));
        if (homeLocation.getChunkPosition().toString().equals(player.getLocation().getChunkPosition().toString()))         FactionLogic.setHome(playerFactionName,null);
        FactionLogic.removeClaim(playerFactionName,chunk);
        player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
        return CommandResult.success();
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
    if (playerFactionName != null) {
      if (FactionLogic.getLeader(playerFactionName).equals(player.getUniqueId().toString()) || FactionLogic.getOfficers(playerFactionName).contains(player.getUniqueId().toString())) {
        Vector3i chunk=player.getLocation().getChunkPosition();
        if (FactionLogic.isClaimed(chunk)) {
          World world=player.getWorld();
          Location homeLocation=world.getLocation(FactionLogic.getHome(playerFactionName));
          if (homeLocation.getChunkPosition().toString().equals(player.getLocation().getChunkPosition().toString()))           FactionLogic.setHome(playerFactionName,null);
          FactionLogic.removeClaim(playerFactionName,chunk);
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  if (source instanceof Player) {
    Player player=(Player)source;
    String playerFactionName=FactionLogic.getFactionName(player.getUniqueId());
    if (EagleFactions.AdminList.contains(player.getUniqueId().toString())) {
      Vector3i chunk=player.getLocation().getChunkPosition();
      if (FactionLogic.isClaimed(chunk)) {
        World world=player.getWorld();
        Location homeLocation=world.getLocation(FactionLogic.getHome(playerFactionName));
        if (homeLocation.getChunkPosition().toString().equals(player.getLocation().getChunkPosition().toString()))         FactionLogic.setHome(playerFactionName,null);
        FactionLogic.removeClaim(playerFactionName,chunk);
        player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
        return CommandResult.success();
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        return CommandResult.success();
      }
    }
    if (playerFactionName != null) {
      if (FactionLogic.getLeader(playerFactionName).equals(player.getUniqueId().toString()) || FactionLogic.getOfficers(playerFactionName).contains(player.getUniqueId().toString())) {
        Vector3i chunk=player.getLocation().getChunkPosition();
        if (FactionLogic.isClaimed(chunk)) {
          World world=player.getWorld();
          Location homeLocation=world.getLocation(FactionLogic.getHome(playerFactionName));
          if (homeLocation.getChunkPosition().toString().equals(player.getLocation().getChunkPosition().toString()))           FactionLogic.setHome(playerFactionName,null);
          FactionLogic.removeClaim(playerFactionName,chunk);
          player.sendMessage(Text.of(PluginInfo.PluginPrefix,""String_Node_Str"",TextColors.GOLD,""String_Node_Str"",TextColors.WHITE,""String_Node_Str""));
          return CommandResult.success();
        }
 else {
          source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
        }
      }
 else {
        source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
      }
    }
 else {
      source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
    }
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str""));
  }
  return CommandResult.success();
}",0.9920477137176938
172838,"@Listener public void onChatMessage(MessageChannelEvent.Chat event,@Root Player player){
  if (FactionLogic.getFactionName(player.getUniqueId()) != null) {
    Text fullMessage=event.getMessage();
    Text factionTag=Text.builder().append(Text.of(""String_Node_Str"",TextColors.GREEN,FactionLogic.getFactionTag(FactionLogic.getFactionName(player.getUniqueId())),TextColors.RESET,""String_Node_Str"")).build();
    String message=event.getMessage().toPlain();
    String messages[]=message.split(""String_Node_Str"");
    String body=messages[1];
    Text header=fullMessage.toBuilder().remove(Text.of(player.getName() + ""String_Node_Str"")).remove(Text.of(body)).build();
    Text messageToPrint=Text.builder().append(header).append(factionTag).append(Text.of(player.getName() + ""String_Node_Str"")).append(Text.of(body)).build();
    event.setMessage(messageToPrint);
  }
  return;
}","@Listener public void onChatMessage(MessageChannelEvent.Chat event,@Root Player player){
  if (FactionLogic.getFactionName(player.getUniqueId()) != null) {
    Text factionTag=Text.builder().append(Text.of(""String_Node_Str"",TextColors.GREEN,FactionLogic.getFactionTag(FactionLogic.getFactionName(player.getUniqueId())),TextColors.RESET,""String_Node_Str"")).build();
    EagleFactions.getEagleFactions().getLogger().info(factionTag.toPlain());
    Text messageToPrint=Text.builder().append(factionTag).append(event.getMessage()).build();
    event.setMessage(messageToPrint);
  }
  return;
}",0.5542662116040956
172839,"@Listener public void onEntityDamage(DamageEntityEvent event){
  if (event.getCause().root() instanceof EntityDamageSource) {
    EntityDamageSource source=(EntityDamageSource)event.getCause().root();
    if (source.getSource() instanceof Player) {
      Player player=(Player)source.getSource();
      if (event.getTargetEntity().getType() == EntityTypes.PLAYER) {
        Player attackedPlayer=(Player)event.getTargetEntity();
        if (FactionLogic.getFactionNameByChunk(attackedPlayer.getLocation().getChunkPosition()).equals(""String_Node_Str"") || FactionLogic.getFactionNameByChunk(player.getLocation().getChunkPosition()).equals(""String_Node_Str"")) {
          event.setBaseDamage(0);
          event.setCancelled(true);
        }
 else {
          if (FactionLogic.getFactionName(player.getUniqueId()) != null) {
            if (FactionLogic.getFactionName(player.getUniqueId()) == FactionLogic.getFactionName(attackedPlayer.getUniqueId())) {
              if (!FactionLogic.getFactionFriendlyFire(FactionLogic.getFactionName(player.getUniqueId()))) {
                event.setBaseDamage(0);
                event.setCancelled(true);
              }
 else               return;
            }
 else             if (FactionLogic.getAlliances(FactionLogic.getFactionName(player.getUniqueId())).contains(FactionLogic.getFactionName(attackedPlayer.getUniqueId())) && !MainLogic.getAllianceFriendlyFire()) {
              event.setBaseDamage(0);
              event.setCancelled(true);
            }
 else {
              if (event.willCauseDeath()) {
                PowerService.addPower(player.getUniqueId(),true);
              }
            }
          }
 else {
            if (event.willCauseDeath()) {
              PowerService.addPower(player.getUniqueId(),true);
            }
            return;
          }
        }
      }
    }
  }
  return;
}","@Listener public void onEntityDamage(DamageEntityEvent event){
  if (event.getCause().root() instanceof EntityDamageSource) {
    EntityDamageSource source=(EntityDamageSource)event.getCause().root();
    if (source.getSource() instanceof Player) {
      Player player=(Player)source.getSource();
      if (event.getTargetEntity().getType() == EntityTypes.PLAYER) {
        Player attackedPlayer=(Player)event.getTargetEntity();
        if (FactionLogic.getFactionNameByChunk(attackedPlayer.getLocation().getChunkPosition()).equals(""String_Node_Str"") || FactionLogic.getFactionNameByChunk(player.getLocation().getChunkPosition()).equals(""String_Node_Str"")) {
          event.setBaseDamage(0);
          event.setCancelled(true);
        }
 else {
          if (FactionLogic.getFactionName(player.getUniqueId()) != null) {
            EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
            if (FactionLogic.getFactionName(player.getUniqueId()) == FactionLogic.getFactionName(attackedPlayer.getUniqueId())) {
              if (!FactionLogic.getFactionFriendlyFire(FactionLogic.getFactionName(player.getUniqueId()))) {
                event.setBaseDamage(0);
                event.setCancelled(true);
              }
 else               return;
            }
 else             if (FactionLogic.getAlliances(FactionLogic.getFactionName(player.getUniqueId())).contains(FactionLogic.getFactionName(attackedPlayer.getUniqueId())) && !MainLogic.getAllianceFriendlyFire()) {
              event.setBaseDamage(0);
              event.setCancelled(true);
            }
 else {
              if (event.willCauseDeath()) {
                PowerService.addPower(player.getUniqueId(),true);
              }
            }
          }
 else {
            if (event.willCauseDeath()) {
              PowerService.addPower(player.getUniqueId(),true);
            }
 else             return;
          }
        }
      }
    }
  }
  return;
}",0.9769150052465896
172840,"public static String getFactionName(UUID playerUUID){
  for (  Object t : FactionLogic.getFactionsNames()) {
    String faction=String.valueOf(t);
    if (faction.equals(""String_Node_Str"") || faction.equals(""String_Node_Str"")) {
      continue;
    }
    if (FactionLogic.getMembers(faction).contains(playerUUID.toString())) {
      return faction;
    }
 else     if (FactionLogic.getLeader(faction).equals(playerUUID.toString())) {
      return faction;
    }
 else     if (FactionLogic.getOfficers(faction).contains(playerUUID.toString())) {
      return faction;
    }
  }
  return null;
}","public static String getFactionName(UUID playerUUID){
  for (  Object t : FactionLogic.getFactionsNames()) {
    String faction=String.valueOf(t);
    if (FactionLogic.getMembers(faction).contains(playerUUID.toString())) {
      return faction;
    }
 else     if (FactionLogic.getLeader(faction).equals(playerUUID.toString())) {
      return faction;
    }
 else     if (FactionLogic.getOfficers(faction).contains(playerUUID.toString())) {
      return faction;
    }
  }
  return null;
}",0.9038817005545288
172841,"public static String getFactionNameByChunk(Vector3i chunk){
  for (  Object object : getFactionsNames()) {
    String factionName=String.valueOf(object);
    if (getClaims(factionName).contains(chunk.toString())) {
      return factionName;
    }
  }
  return null;
}","public static String getFactionNameByChunk(Vector3i chunk){
  for (  Object object : getFactionsNames()) {
    String factionName=String.valueOf(object);
    if (getClaims(factionName).contains(chunk.toString())) {
      return factionName;
    }
  }
  return ""String_Node_Str"";
}",0.9616087751371116
172842,"private void InitializeCommands(){
  getLogger().info(""String_Node_Str"");
  Subcommands=new HashMap<List<String>,CommandSpec>();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new HelpCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new CreateCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new DisbandCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new ListCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new InviteCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new JoinCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new LeaveCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new VersionCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new InfoCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new PlayerCommand()).build());
  CommandSpec addAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddAllyCommand()).build();
  CommandSpec removeAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveAllyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").child(addAllyCommand,""String_Node_Str"",""String_Node_Str"").child(removeAllyCommand,""String_Node_Str"",""String_Node_Str"").build());
  CommandSpec addEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddEnemyCommand()).build();
  CommandSpec removeEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveEnemyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").child(addEnemyCommand,""String_Node_Str"",""String_Node_Str"").child(removeEnemyCommand,""String_Node_Str"",""String_Node_Str"").build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).arguments(GenericArguments.onlyOne(GenericArguments.player(Text.of(""String_Node_Str"")))).permission(""String_Node_Str"").executor(new OfficerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new FriendlyFireCommand()).build());
  CommandSpec commandEagleFactions=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new HelpCommand()).children(Subcommands).build();
  Sponge.getCommandManager().register(this,commandEagleFactions,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","private void InitializeCommands(){
  getLogger().info(""String_Node_Str"");
  Subcommands=new HashMap<List<String>,CommandSpec>();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new HelpCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new CreateCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new DisbandCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new ListCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new InviteCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new JoinCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new LeaveCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new VersionCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new InfoCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str"",""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.player(Text.of(""String_Node_Str"")))).executor(new PlayerCommand()).build());
  CommandSpec addAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddAllyCommand()).build();
  CommandSpec removeAllyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveAllyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").child(addAllyCommand,""String_Node_Str"",""String_Node_Str"").child(removeAllyCommand,""String_Node_Str"",""String_Node_Str"").build());
  CommandSpec addEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new AddEnemyCommand()).build();
  CommandSpec removeEnemyCommand=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").arguments(GenericArguments.onlyOne(GenericArguments.string(Text.of(""String_Node_Str"")))).executor(new RemoveEnemyCommand()).build();
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").child(addEnemyCommand,""String_Node_Str"",""String_Node_Str"").child(removeEnemyCommand,""String_Node_Str"",""String_Node_Str"").build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).arguments(GenericArguments.onlyOne(GenericArguments.player(Text.of(""String_Node_Str"")))).permission(""String_Node_Str"").executor(new OfficerCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new FriendlyFireCommand()).build());
  Subcommands.put(Arrays.asList(""String_Node_Str""),CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new ClaimCommand()).build());
  CommandSpec commandEagleFactions=CommandSpec.builder().description(Text.of(""String_Node_Str"")).permission(""String_Node_Str"").executor(new HelpCommand()).children(Subcommands).build();
  Sponge.getCommandManager().register(this,commandEagleFactions,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9814626196781422
172843,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  String factionName=context.<String>getOne(""String_Node_Str"").get();
  if (FactionLogic.getFactions().contains(factionName)) {
    Faction faction=FactionLogic.getFaction(factionName);
    List<Text> factionInfo=new ArrayList<>();
    String membersList=""String_Node_Str"";
    if (!faction.Members.isEmpty() && faction.Members != null) {
      for (      String member : faction.Members) {
        membersList+=PlayerService.getPlayerName(UUID.fromString(member)).get() + ""String_Node_Str"";
      }
      membersList=membersList.substring(0,membersList.length() - 2);
    }
    String officersList=""String_Node_Str"";
    if (!faction.Officers.isEmpty() && faction.Officers != null) {
      for (      String officer : faction.Officers) {
        officersList+=PlayerService.getPlayerName(UUID.fromString(officer)).get() + ""String_Node_Str"";
      }
      officersList=officersList.substring(0,officersList.length() - 2);
    }
    String alliancesList=""String_Node_Str"";
    if (!faction.Alliances.isEmpty() && faction.Alliances != null) {
      for (      String alliance : faction.Alliances) {
        alliancesList+=alliance + ""String_Node_Str"";
      }
      alliancesList=alliancesList.substring(0,alliancesList.length() - 2);
    }
    String enemiesList=""String_Node_Str"";
    if (!faction.Enemies.isEmpty() && faction.Enemies != null) {
      for (      String enemy : faction.Enemies) {
        enemiesList+=enemy + ""String_Node_Str"";
      }
      enemiesList=enemiesList.substring(0,enemiesList.length() - 2);
    }
    Text info=Text.builder().append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Name + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,PlayerService.getPlayerName(faction.Leader).get() + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,officersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.BLUE,alliancesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.RED,enemiesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GREEN,membersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Power + ""String_Node_Str"" + PowerService.getFactionMaxPower(faction))).build();
    factionInfo.add(info);
    PaginationService paginationService=Sponge.getServiceManager().provide(PaginationService.class).get();
    PaginationList.Builder paginationBuilder=paginationService.builder().title(Text.of(TextColors.GREEN,""String_Node_Str"")).contents(factionInfo);
    paginationBuilder.sendTo(source);
    CommandResult.success();
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,factionName));
  }
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  String factionName=context.<String>getOne(""String_Node_Str"").get();
  if (FactionLogic.getFactions().contains(factionName)) {
    Faction faction=FactionLogic.getFaction(factionName);
    List<Text> factionInfo=new ArrayList<>();
    String membersList=""String_Node_Str"";
    if (!faction.Members.isEmpty() && faction.Members != null) {
      for (      String member : faction.Members) {
        membersList+=PlayerService.getPlayerName(UUID.fromString(member)).get() + ""String_Node_Str"";
      }
      membersList=membersList.substring(0,membersList.length() - 2);
    }
    String officersList=""String_Node_Str"";
    if (!faction.Officers.isEmpty() && faction.Officers != null) {
      for (      String officer : faction.Officers) {
        officersList+=PlayerService.getPlayerName(UUID.fromString(officer)).get() + ""String_Node_Str"";
      }
      officersList=officersList.substring(0,officersList.length() - 2);
    }
    String alliancesList=""String_Node_Str"";
    if (!faction.Alliances.isEmpty() && faction.Alliances != null) {
      for (      String alliance : faction.Alliances) {
        alliancesList+=alliance + ""String_Node_Str"";
      }
      alliancesList=alliancesList.substring(0,alliancesList.length() - 2);
    }
    String enemiesList=""String_Node_Str"";
    if (!faction.Enemies.isEmpty() && faction.Enemies != null) {
      for (      String enemy : faction.Enemies) {
        enemiesList+=enemy + ""String_Node_Str"";
      }
      enemiesList=enemiesList.substring(0,enemiesList.length() - 2);
    }
    Text info=Text.builder().append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Name + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,PlayerService.getPlayerName(faction.Leader).get() + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,officersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.BLUE,alliancesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.RED,enemiesList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GREEN,membersList + ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,faction.Power + ""String_Node_Str"" + PowerService.getFactionMaxPower(faction)+ ""String_Node_Str"")).append(Text.of(TextColors.AQUA,""String_Node_Str"",TextColors.GOLD,String.valueOf(FactionLogic.getClaims(factionName).size()) + ""String_Node_Str"" + String.valueOf(faction.Power.intValue()))).build();
    factionInfo.add(info);
    PaginationService paginationService=Sponge.getServiceManager().provide(PaginationService.class).get();
    PaginationList.Builder paginationBuilder=paginationService.builder().title(Text.of(TextColors.GREEN,""String_Node_Str"")).contents(factionInfo);
    paginationBuilder.sendTo(source);
    CommandResult.success();
  }
 else {
    source.sendMessage(Text.of(PluginInfo.ErrorPrefix,TextColors.RED,""String_Node_Str"",TextColors.GOLD,factionName));
  }
  return CommandResult.success();
}",0.9662008449788756
172844,"public static boolean createFaction(String factionName,UUID playerUUID){
  try {
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},(playerUUID.toString()));
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},""String_Node_Str"");
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},false);
  }
 catch (  Exception exception) {
    return false;
  }
  return true;
}","public static boolean createFaction(String factionName,UUID playerUUID){
  try {
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},(playerUUID.toString()));
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},""String_Node_Str"");
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<String>());
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},false);
    ConfigAccess.setValueAndSave(factionsConfig,new Object[]{""String_Node_Str"",factionName,""String_Node_Str""},new ArrayList<Chunk>());
  }
 catch (  Exception exception) {
    return false;
  }
  return true;
}",0.9413808076422058
172845,"public static Faction getFaction(String factionName){
  ConfigurationNode leaderNode=ConfigAccess.getConfig(factionsConfig).getNode(""String_Node_Str"",factionName,""String_Node_Str"");
  Object leaderUUID=leaderNode.getValue();
  Faction faction=new Faction(factionName,UUID.fromString(leaderUUID.toString()));
  faction.Members=getMembers(factionName);
  faction.Officers=getOfficers(factionName);
  faction.Enemies=getEnemies(factionName);
  faction.Alliances=getAlliances(factionName);
  faction.Power=PowerService.getFactionPower(faction);
  return faction;
}","public static Faction getFaction(String factionName){
  ConfigurationNode leaderNode=ConfigAccess.getConfig(factionsConfig).getNode(""String_Node_Str"",factionName,""String_Node_Str"");
  Object leaderUUID=leaderNode.getValue();
  Faction faction=new Faction(factionName,UUID.fromString(leaderUUID.toString()));
  faction.Members=getMembers(factionName);
  faction.Officers=getOfficers(factionName);
  faction.Enemies=getEnemies(factionName);
  faction.Alliances=getAlliances(factionName);
  faction.Claims=getClaims(factionName);
  faction.Power=PowerService.getFactionPower(faction);
  return faction;
}",0.9646856158484064
172846,"public static BigDecimal getFactionMaxPower(Faction faction){
  BigDecimal factionMaxPower=BigDecimal.ZERO;
  if (faction.Leader != null) {
    factionMaxPower.add(PowerService.getPlayerMaxPower(faction.Leader));
  }
  if (faction.Officers != null && !faction.Officers.isEmpty()) {
    for (    String officer : faction.Officers) {
      factionMaxPower.add(PowerService.getPlayerMaxPower(UUID.fromString(officer)));
    }
  }
  if (faction.Members != null && !faction.Members.isEmpty()) {
    for (    String member : faction.Members) {
      factionMaxPower.add(PowerService.getPlayerMaxPower(UUID.fromString(member)));
    }
  }
  return factionMaxPower;
}","public static BigDecimal getFactionMaxPower(Faction faction){
  BigDecimal factionMaxPower=BigDecimal.ZERO;
  if (faction.Leader != null) {
    factionMaxPower=factionMaxPower.add(PowerService.getPlayerMaxPower(faction.Leader));
  }
  if (faction.Officers != null && !faction.Officers.isEmpty()) {
    for (    String officer : faction.Officers) {
      factionMaxPower=factionMaxPower.add(PowerService.getPlayerMaxPower(UUID.fromString(officer)));
    }
  }
  if (faction.Members != null && !faction.Members.isEmpty()) {
    for (    String member : faction.Members) {
      factionMaxPower=factionMaxPower.add(PowerService.getPlayerMaxPower(UUID.fromString(member)));
    }
  }
  return factionMaxPower;
}",0.9648609077598828
172847,"public static BigDecimal getFactionPower(Faction faction){
  BigDecimal factionPower=BigDecimal.ZERO;
  if (faction.Leader != null) {
    factionPower.add(getPlayerPower(faction.Leader));
  }
  if (faction.Officers != null && !faction.Officers.isEmpty()) {
    for (    String officer : faction.Officers) {
      BigDecimal officerPower=getPlayerPower(UUID.fromString(officer));
      factionPower.add(officerPower);
    }
  }
  if (faction.Members != null && !faction.Members.isEmpty()) {
    for (    String member : faction.Members) {
      BigDecimal memberPower=getPlayerPower(UUID.fromString(member));
      factionPower.add(memberPower);
    }
  }
  return factionPower;
}","public static BigDecimal getFactionPower(Faction faction){
  BigDecimal factionPower=BigDecimal.ZERO;
  if (faction.Leader != null) {
    factionPower=factionPower.add(getPlayerPower(faction.Leader));
    EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"" + getPlayerPower(faction.Leader).toString());
    EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"" + factionPower.toString());
  }
  if (faction.Officers != null && !faction.Officers.isEmpty()) {
    for (    String officer : faction.Officers) {
      BigDecimal officerPower=getPlayerPower(UUID.fromString(officer));
      factionPower=factionPower.add(officerPower);
    }
  }
  if (faction.Members != null && !faction.Members.isEmpty()) {
    for (    String member : faction.Members) {
      BigDecimal memberPower=getPlayerPower(UUID.fromString(member));
      factionPower=factionPower.add(memberPower);
    }
  }
  EagleFactions.getEagleFactions().getLogger().info(factionPower.toString());
  return factionPower;
}",0.8021264028352038
172848,"public static void increasePower(UUID playerUUID){
  Task.Builder taskBuilder=Sponge.getScheduler().createTaskBuilder();
  taskBuilder.execute(new Runnable(){
    @Override public void run(){
      if (!PlayerService.isPlayerOnline(playerUUID))       return;
      if (PowerService.getPlayerPower(playerUUID).add(MainLogic.getPowerIncrement()).doubleValue() < PowerService.getPlayerMaxPower(playerUUID).doubleValue()) {
        EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
        EagleFactions.getEagleFactions().getLogger().info(String.valueOf(PowerService.getPlayerPower(playerUUID)));
        EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
        EagleFactions.getEagleFactions().getLogger().info(String.valueOf(MainLogic.getPowerIncrement()));
        PowerService.addPower(playerUUID,false);
        EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
        EagleFactions.getEagleFactions().getLogger().info(String.valueOf(PowerService.getPlayerPower(playerUUID)));
        increasePower(playerUUID);
      }
 else {
        PowerService.setPower(playerUUID,PowerService.getPlayerMaxPower(playerUUID));
        increasePower(playerUUID);
      }
    }
  }
).delay(1,TimeUnit.MINUTES).name(""String_Node_Str"").submit(Sponge.getPluginManager().getPlugin(PluginInfo.Id).get().getInstance().get());
}","public static void increasePower(UUID playerUUID){
  Task.Builder taskBuilder=Sponge.getScheduler().createTaskBuilder();
  taskBuilder.execute(new Runnable(){
    @Override public void run(){
      if (!PlayerService.isPlayerOnline(playerUUID))       return;
      if (PowerService.getPlayerPower(playerUUID).add(MainLogic.getPowerIncrement()).doubleValue() < PowerService.getPlayerMaxPower(playerUUID).doubleValue()) {
        PowerService.addPower(playerUUID,false);
        increasePower(playerUUID);
      }
 else {
        PowerService.setPower(playerUUID,PowerService.getPlayerMaxPower(playerUUID));
        increasePower(playerUUID);
      }
    }
  }
).delay(1,TimeUnit.MINUTES).name(""String_Node_Str"").submit(Sponge.getPluginManager().getPlugin(PluginInfo.Id).get().getInstance().get());
}",0.7361623616236163
172849,"@Override public void run(){
  if (!PlayerService.isPlayerOnline(playerUUID))   return;
  if (PowerService.getPlayerPower(playerUUID).add(MainLogic.getPowerIncrement()).doubleValue() < PowerService.getPlayerMaxPower(playerUUID).doubleValue()) {
    EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
    EagleFactions.getEagleFactions().getLogger().info(String.valueOf(PowerService.getPlayerPower(playerUUID)));
    EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
    EagleFactions.getEagleFactions().getLogger().info(String.valueOf(MainLogic.getPowerIncrement()));
    PowerService.addPower(playerUUID,false);
    EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"");
    EagleFactions.getEagleFactions().getLogger().info(String.valueOf(PowerService.getPlayerPower(playerUUID)));
    increasePower(playerUUID);
  }
 else {
    PowerService.setPower(playerUUID,PowerService.getPlayerMaxPower(playerUUID));
    increasePower(playerUUID);
  }
}","@Override public void run(){
  if (!PlayerService.isPlayerOnline(playerUUID))   return;
  if (PowerService.getPlayerPower(playerUUID).add(MainLogic.getPowerIncrement()).doubleValue() < PowerService.getPlayerMaxPower(playerUUID).doubleValue()) {
    PowerService.addPower(playerUUID,false);
    increasePower(playerUUID);
  }
 else {
    PowerService.setPower(playerUUID,PowerService.getPlayerMaxPower(playerUUID));
    increasePower(playerUUID);
  }
}",0.4275862068965517
172850,"public static BigDecimal getPlayerPower(UUID playerUUID){
  Path playerFile=Paths.get(EagleFactions.getEagleFactions().getConfigDir().resolve(""String_Node_Str"") + ""String_Node_Str"" + playerUUID.toString()+ ""String_Node_Str"");
  if (checkIfPlayerExists(playerUUID)) {
    try {
      ConfigurationLoader<CommentedConfigurationNode> configLoader=HoconConfigurationLoader.builder().setPath(playerFile).build();
      CommentedConfigurationNode playerNode=configLoader.load();
      if (playerNode.getNode(""String_Node_Str"").getValue() != null) {
        BigDecimal playerPower=new BigDecimal(playerNode.getNode(""String_Node_Str"").getString());
        return playerPower;
      }
    }
 catch (    Exception exception) {
      exception.printStackTrace();
    }
  }
 else {
    addPlayer(playerUUID);
    return getPlayerPower(playerUUID);
  }
  return BigDecimal.ZERO;
}","public static BigDecimal getPlayerPower(UUID playerUUID){
  Path playerFile=Paths.get(EagleFactions.getEagleFactions().getConfigDir().resolve(""String_Node_Str"") + ""String_Node_Str"" + playerUUID.toString()+ ""String_Node_Str"");
  if (checkIfPlayerExists(playerUUID)) {
    try {
      ConfigurationLoader<CommentedConfigurationNode> configLoader=HoconConfigurationLoader.builder().setPath(playerFile).build();
      CommentedConfigurationNode playerNode=configLoader.load();
      if (playerNode.getNode(""String_Node_Str"").getValue() != null) {
        BigDecimal playerPower=new BigDecimal(playerNode.getNode(""String_Node_Str"").getString());
        EagleFactions.getEagleFactions().getLogger().info(""String_Node_Str"" + playerPower.toString());
        return playerPower;
      }
    }
 catch (    Exception exception) {
      exception.printStackTrace();
    }
  }
 else {
    addPlayer(playerUUID);
    return getPlayerPower(playerUUID);
  }
  return BigDecimal.ZERO;
}",0.9439912996193583
172851,"@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Map<List<String>,CommandSpec> commands=EagleFactions.getEagleFactions().Subcommands;
  List<Text> helpList=Lists.newArrayList();
  for (  List<String> aliases : commands.keySet()) {
    CommandSpec commandSpec=commands.get(aliases);
    Text commandHelp=Text.builder().append(Text.builder().append(Text.of(TextColors.AQUA,""String_Node_Str"" + aliases.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))).append(Text.of(TextColors.AQUA,""String_Node_Str"" + aliases.toString().t)).build()).append(Text.builder().append(Text.of(TextColors.GRAY,""String_Node_Str"" + commandSpec.getShortDescription(source).get().toPlain())).build()).build();
    helpList.add(commandHelp);
  }
  PaginationService paginationService=Sponge.getServiceManager().provide(PaginationService.class).get();
  PaginationList.Builder paginationBuilder=paginationService.builder().title(Text.of(TextColors.GREEN,""String_Node_Str"")).padding(Text.of(""String_Node_Str"")).contents(helpList);
  paginationBuilder.sendTo(source);
  return CommandResult.success();
}","@Override public CommandResult execute(CommandSource source,CommandContext context) throws CommandException {
  Map<List<String>,CommandSpec> commands=EagleFactions.getEagleFactions().Subcommands;
  List<Text> helpList=Lists.newArrayList();
  for (  List<String> aliases : commands.keySet()) {
    CommandSpec commandSpec=commands.get(aliases);
    Text commandHelp=Text.builder().append(Text.builder().append(Text.of(TextColors.AQUA,""String_Node_Str"" + aliases.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))).build()).append(Text.builder().append(Text.of(TextColors.GRAY,""String_Node_Str"" + commandSpec.getShortDescription(source).get().toPlain())).build()).build();
    helpList.add(commandHelp);
  }
  PaginationService paginationService=Sponge.getServiceManager().provide(PaginationService.class).get();
  PaginationList.Builder paginationBuilder=paginationService.builder().title(Text.of(TextColors.GREEN,""String_Node_Str"")).padding(Text.of(""String_Node_Str"")).contents(helpList);
  paginationBuilder.sendTo(source);
  return CommandResult.success();
}",0.967798085291558
172852,"private boolean sendProgress(Queue<Pair<Object,OutMessage>> pendingSendMessages,int sendId){
  boolean canProgress=true;
  while (pendingSendMessages.size() > 0 && canProgress) {
    Pair<Object,OutMessage> pair=pendingSendMessages.peek();
    OutMessage outMessage=pair.getValue();
    Object messageObject=pair.getKey();
    if (outMessage.serializedState() == OutMessage.SendState.INIT) {
      int startOfInternalRouts=outMessage.getAcceptedInternalSends();
      List<Integer> inRoutes=new ArrayList<>(outMessage.getInternalSends());
      for (int i=startOfInternalRouts; i < outMessage.getInternalSends().size(); i++) {
        boolean receiveAccepted;
        lock.lock();
        try {
          receiveAccepted=receiver.receiveSendInternally(outMessage.getSource(),inRoutes.get(i),outMessage.getPath(),outMessage.getFlags(),messageObject);
        }
  finally {
          lock.unlock();
        }
        if (!receiveAccepted) {
          canProgress=false;
          break;
        }
        outMessage.incrementAcceptedInternalSends();
      }
      if (canProgress) {
        outMessage.setSendState(OutMessage.SendState.SENT_INTERNALLY);
      }
    }
    if (canProgress) {
      if (outMessage.getExternalSends().size() == 0) {
        pendingSendMessages.poll();
        continue;
      }
      OutMessage message=(OutMessage)messageSerializer.get(sendId).build(pair.getKey(),outMessage);
      if (message.serializedState() == OutMessage.SendState.SERIALIZED) {
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        int noOfExternalSends=startOfExternalRouts;
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            outMessage.getChannelMessage().incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(message.getChannelMessage(),exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
 else {
              noOfExternalSends=outMessage.incrementAcceptedExternalSends();
              externalSendsPending.incrementAndGet();
            }
          }
        }
  finally {
          lock.unlock();
        }
        if (noOfExternalSends == exRoutes.size()) {
          outMessage.setSendState(OutMessage.SendState.FINISHED);
          pendingSendMessages.poll();
        }
      }
 else       if (message.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
        if (message.getChannelMessage().getBuffers().size() == 0) {
          break;
        }
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        ChannelMessage sendCopy=createChannelMessageCopy(message.getChannelMessage());
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            outMessage.getChannelMessage().incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(sendCopy,exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
          }
        }
  finally {
          lock.unlock();
        }
      }
 else {
        break;
      }
    }
  }
  return canProgress;
}","private boolean sendProgress(Queue<Pair<Object,OutMessage>> pendingSendMessages,int sendId){
  boolean canProgress=true;
  while (pendingSendMessages.size() > 0 && canProgress) {
    Pair<Object,OutMessage> pair=pendingSendMessages.peek();
    OutMessage outMessage=pair.getValue();
    Object messageObject=pair.getKey();
    if (outMessage.serializedState() == OutMessage.SendState.INIT) {
      int startOfInternalRouts=outMessage.getAcceptedInternalSends();
      List<Integer> inRoutes=new ArrayList<>(outMessage.getInternalSends());
      for (int i=startOfInternalRouts; i < outMessage.getInternalSends().size(); i++) {
        boolean receiveAccepted;
        lock.lock();
        try {
          receiveAccepted=receiver.receiveSendInternally(outMessage.getSource(),inRoutes.get(i),outMessage.getPath(),outMessage.getFlags(),messageObject);
        }
  finally {
          lock.unlock();
        }
        if (!receiveAccepted) {
          canProgress=false;
          break;
        }
        outMessage.incrementAcceptedInternalSends();
      }
      if (canProgress) {
        outMessage.setSendState(OutMessage.SendState.SENT_INTERNALLY);
      }
    }
    if (canProgress) {
      if (outMessage.getExternalSends().size() == 0) {
        pendingSendMessages.poll();
        continue;
      }
      OutMessage message=(OutMessage)messageSerializer.get(sendId).build(pair.getKey(),outMessage);
      if (message.serializedState() == OutMessage.SendState.SERIALIZED) {
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        int noOfExternalSends=startOfExternalRouts;
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            outMessage.getChannelMessage().incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(message.getChannelMessage(),exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
 else {
              noOfExternalSends=outMessage.incrementAcceptedExternalSends();
              externalSendsPending.incrementAndGet();
            }
          }
        }
  finally {
          lock.unlock();
        }
        if (noOfExternalSends == exRoutes.size()) {
          outMessage.setSendState(OutMessage.SendState.FINISHED);
          pendingSendMessages.poll();
        }
      }
 else       if (message.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
        if (message.getChannelMessage().getBuffers().size() == 0) {
          break;
        }
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        ChannelMessage sendCopy=createChannelMessageCopy(message.getChannelMessage());
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            sendCopy.incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(sendCopy,exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
          }
        }
  finally {
          outMessage.setOutCountUpdated(false);
          lock.unlock();
        }
      }
 else {
        break;
      }
    }
  }
  return canProgress;
}",0.9885527391659852
172853,"/** 
 * Terminate a job
 * @param jobName the name of the job to terminate
 */
public void terminateJob(String jobName,Config config){
  String statemgrClass=SchedulerContext.stateManagerClass(config);
  if (statemgrClass == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String launcherClass=SchedulerContext.launcherClass(config);
  if (launcherClass == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ILauncher launcher;
  IStateManager statemgr;
  try {
    statemgr=ReflectionUtils.newInstance(statemgrClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    throw new JobSubmissionException(String.format(""String_Node_Str"",statemgrClass),e);
  }
  try {
    launcher=ReflectionUtils.newInstance(launcherClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    throw new LauncherException(String.format(""String_Node_Str"",launcherClass),e);
  }
  statemgr.initialize(config);
  updatedConfig=Config.newBuilder().putAll(updatedConfig).put(SchedulerContext.STATE_MANAGER_OBJECT,statemgr).build();
  launcher.initialize(updatedConfig);
  boolean terminated=launcher.terminateJob(jobName);
  if (!terminated) {
    LOG.log(Level.SEVERE,""String_Node_Str"");
  }
}","/** 
 * Terminate a job
 * @param jobName the name of the job to terminate
 */
public void terminateJob(String jobName,Config config){
  String statemgrClass=SchedulerContext.stateManagerClass(config);
  if (statemgrClass == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String launcherClass=SchedulerContext.launcherClass(config);
  if (launcherClass == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ILauncher launcher;
  IStateManager statemgr;
  try {
    statemgr=ReflectionUtils.newInstance(statemgrClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    throw new JobSubmissionException(String.format(""String_Node_Str"",statemgrClass),e);
  }
  try {
    launcher=ReflectionUtils.newInstance(launcherClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    throw new LauncherException(String.format(""String_Node_Str"",launcherClass),e);
  }
  statemgr.initialize(config);
  updatedConfig=Config.newBuilder().putAll(config).put(SchedulerContext.STATE_MANAGER_OBJECT,statemgr).build();
  launcher.initialize(updatedConfig);
  boolean terminated=launcher.terminateJob(jobName);
  if (!terminated) {
    LOG.log(Level.SEVERE,""String_Node_Str"");
  }
}",0.9964802502933124
172854,"public static void main(String[] args){
  setupOptions();
  Options cmdOptions=null;
  try {
    cmdOptions=setupOptions();
    CommandLineParser parser=new DefaultParser();
    CommandLine cmd=parser.parse(cmdOptions,args);
    Config config=loadConfigurations(cmd);
    LOG.log(Level.INFO,""String_Node_Str"");
    String command=cmd.getOptionValue(""String_Node_Str"");
    executeCommand(config,command);
  }
 catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",cmdOptions);
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  Throwable t) {
    String msg=""String_Node_Str"";
    LOG.log(Level.SEVERE,msg,t);
    throw new RuntimeException(msg);
  }
}","public static void main(String[] args){
  setupOptions();
  Options cmdOptions=null;
  try {
    cmdOptions=setupOptions();
    CommandLineParser parser=new DefaultParser();
    CommandLine cmd=parser.parse(cmdOptions,args);
    Config config=loadConfigurations(cmd);
    LOG.log(Level.INFO,""String_Node_Str"");
    String command=cmd.getOptionValue(""String_Node_Str"");
    executeCommand(config,command);
  }
 catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",cmdOptions);
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  Throwable t) {
    String msg=""String_Node_Str"";
    LOG.log(Level.SEVERE,msg,t);
    throw new RuntimeException(msg,t);
  }
}",0.9986376021798364
172855,"@Override public boolean terminateJob(String jobName){
  return false;
}","@Override public boolean terminateJob(String jobName){
  LOG.log(Level.INFO,""String_Node_Str"",StandaloneContext.clusterType(config));
  String jobWorkingDirectory=StandaloneContext.workingDirectory(config);
  Config newConfig=Config.newBuilder().putAll(config).put(SchedulerContext.WORKING_DIRECTORY,jobWorkingDirectory).build();
  IController controller=new StandaloneController(true);
  controller.initialize(newConfig);
  jobWorkingDirectory=Paths.get(jobWorkingDirectory,jobName).toAbsolutePath().toString();
  String jobDescFile=JobUtils.getJobDescriptionFilePath(jobWorkingDirectory,jobName,config);
  JobAPI.Job job=JobUtils.readJobFile(null,jobDescFile);
  return controller.kill(job);
}",0.1564537157757496
172856,"@Override public Object build(Object message,Object partialBuildObject){
  OutMessage sendMessage=(OutMessage)partialBuildObject;
  if (sendMessage.getChannelMessage().isComplete()) {
    sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
    return sendMessage;
  }
  if (sendMessage.getSerializationState() == null) {
    sendMessage.setSerializationState(new SerializeState());
  }
  while (sendBuffers.size() > 0 && sendMessage.serializedState() != OutMessage.SendState.SERIALIZED) {
    DataBuffer buffer=sendBuffers.poll();
    if (buffer == null) {
      break;
    }
    if (sendMessage.serializedState() == OutMessage.SendState.INIT || sendMessage.serializedState() == OutMessage.SendState.SENT_INTERNALLY) {
      buildHeader(buffer,sendMessage);
      sendMessage.setSendState(OutMessage.SendState.HEADER_BUILT);
    }
    if (sendMessage.serializedState() == OutMessage.SendState.HEADER_BUILT || sendMessage.serializedState() == OutMessage.SendState.BODY_BUILT || sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      if ((sendMessage.getFlags() & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
        sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
        sendMessage.getSerializationState().setTotalBytes(0);
      }
 else {
        boolean complete=serializeBody(message,sendMessage,buffer);
        if (complete) {
          sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
        }
 else {
          sendMessage.setSendState(OutMessage.SendState.PARTIALLY_SERIALIZED);
        }
      }
    }
    sendMessage.getChannelMessage().addBuffer(buffer);
    if (sendMessage.serializedState() == OutMessage.SendState.SERIALIZED) {
      ChannelMessage channelMessage=sendMessage.getChannelMessage();
      SerializeState state=sendMessage.getSerializationState();
      if (!channelMessage.isHeaderSent()) {
        int totalBytes=state.getTotalBytes();
        channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
        MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
        builder.destination(sendMessage.getDestintationIdentifier());
        sendMessage.getChannelMessage().setHeader(builder.build());
        state.setTotalBytes(0);
        channelMessage.setHeaderSent(true);
      }
      channelMessage.setComplete(true);
    }
 else     if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      ChannelMessage channelMessage=sendMessage.getChannelMessage();
      SerializeState state=sendMessage.getSerializationState();
      if (!channelMessage.isHeaderSent()) {
        int totalBytes=state.getData().length;
        channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
        MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
        builder.destination(sendMessage.getDestintationIdentifier());
        sendMessage.getChannelMessage().setHeader(builder.build());
        channelMessage.setHeaderSent(true);
      }
      state.setTotalBytes(0);
      LOG.fine(""String_Node_Str"");
    }
 else {
      LOG.fine(""String_Node_Str"");
    }
  }
  return sendMessage;
}","@Override public Object build(Object message,Object partialBuildObject){
  OutMessage sendMessage=(OutMessage)partialBuildObject;
  if (sendMessage.getChannelMessage().isComplete()) {
    sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
    return sendMessage;
  }
  if (sendMessage.getSerializationState() == null) {
    sendMessage.setSerializationState(new SerializeState());
  }
  while (sendBuffers.size() > 0 && sendMessage.serializedState() != OutMessage.SendState.SERIALIZED) {
    DataBuffer buffer=sendBuffers.poll();
    if (buffer == null) {
      break;
    }
    if (sendMessage.serializedState() == OutMessage.SendState.INIT || sendMessage.serializedState() == OutMessage.SendState.SENT_INTERNALLY) {
      buildHeader(buffer,sendMessage);
      sendMessage.setSendState(OutMessage.SendState.HEADER_BUILT);
    }
    if (sendMessage.serializedState() == OutMessage.SendState.HEADER_BUILT || sendMessage.serializedState() == OutMessage.SendState.BODY_BUILT || sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      if ((sendMessage.getFlags() & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
        sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
        sendMessage.getSerializationState().setTotalBytes(0);
      }
 else {
        boolean complete=serializeBody(message,sendMessage,buffer);
        if (complete) {
          sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
        }
 else {
          sendMessage.setSendState(OutMessage.SendState.PARTIALLY_SERIALIZED);
        }
      }
    }
    sendMessage.getChannelMessage().addBuffer(buffer);
    if (sendMessage.serializedState() == OutMessage.SendState.SERIALIZED) {
      ChannelMessage channelMessage=sendMessage.getChannelMessage();
      SerializeState state=sendMessage.getSerializationState();
      if (!channelMessage.isHeaderSent()) {
        int totalBytes=state.getTotalBytes();
        channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
        MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
        builder.destination(sendMessage.getDestintationIdentifier());
        sendMessage.getChannelMessage().setHeader(builder.build());
        state.setTotalBytes(0);
        channelMessage.setHeaderSent(true);
      }
      channelMessage.setComplete(true);
    }
 else     if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      ChannelMessage channelMessage=sendMessage.getChannelMessage();
      SerializeState state=sendMessage.getSerializationState();
      if (!channelMessage.isHeaderSent()) {
        int totalBytes=state.getCurretHeaderLength();
        channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
        MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
        builder.destination(sendMessage.getDestintationIdentifier());
        sendMessage.getChannelMessage().setHeader(builder.build());
        channelMessage.setHeaderSent(true);
      }
      state.setTotalBytes(0);
      LOG.fine(""String_Node_Str"");
    }
 else {
      LOG.fine(""String_Node_Str"");
    }
  }
  return sendMessage;
}",0.9965220021170422
172857,"private boolean serializeData(Object content,SerializeState state,DataBuffer targetBuffer,MessageType messageType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int dataLength=DataSerializer.serializeData(content,messageType,state,serializer);
    state.setPart(SerializeState.Part.BODY);
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,messageType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}","private boolean serializeData(Object content,SerializeState state,DataBuffer targetBuffer,MessageType messageType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int dataLength=DataSerializer.serializeData(content,messageType,state,serializer);
    state.setCurretHeaderLength(dataLength);
    state.setPart(SerializeState.Part.BODY);
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,messageType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}",0.9727767695099818
172858,"private boolean serializeKeyedData(Object content,Object key,SerializeState state,DataBuffer targetBuffer,MessageType contentType,MessageType keyType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int keyLength=KeySerializer.serializeKey(key,keyType,state,serializer);
    int dataLength=DataSerializer.serializeData(content,contentType,state,serializer);
  }
  if (state.getPart() == SerializeState.Part.INIT || state.getPart() == SerializeState.Part.HEADER) {
    boolean complete=KeySerializer.copyKeyToBuffer(key,keyType,targetBuffer.getByteBuffer(),state,serializer);
    if (complete) {
      state.setPart(SerializeState.Part.BODY);
    }
 else {
      state.setPart(SerializeState.Part.HEADER);
    }
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,contentType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}","private boolean serializeKeyedData(Object content,Object key,SerializeState state,DataBuffer targetBuffer,MessageType contentType,MessageType keyType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int keyLength=KeySerializer.serializeKey(key,keyType,state,serializer);
    int dataLength=DataSerializer.serializeData(content,contentType,state,serializer);
    state.setCurretHeaderLength(dataLength + keyLength);
  }
  if (state.getPart() == SerializeState.Part.INIT || state.getPart() == SerializeState.Part.HEADER) {
    boolean complete=KeySerializer.copyKeyToBuffer(key,keyType,targetBuffer.getByteBuffer(),state,serializer);
    if (complete) {
      state.setPart(SerializeState.Part.BODY);
    }
 else {
      state.setPart(SerializeState.Part.HEADER);
    }
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,contentType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}",0.977245508982036
172859,"private boolean sendProgress(Queue<Pair<Object,OutMessage>> pendingSendMessages,int sendId){
  boolean canProgress=true;
  while (pendingSendMessages.size() > 0 && canProgress) {
    Pair<Object,OutMessage> pair=pendingSendMessages.peek();
    OutMessage outMessage=pair.getValue();
    Object messageObject=pair.getKey();
    if (outMessage.serializedState() == OutMessage.SendState.INIT) {
      int startOfInternalRouts=outMessage.getAcceptedInternalSends();
      List<Integer> inRoutes=new ArrayList<>(outMessage.getInternalSends());
      for (int i=startOfInternalRouts; i < outMessage.getInternalSends().size(); i++) {
        boolean receiveAccepted;
        lock.lock();
        try {
          receiveAccepted=receiver.receiveSendInternally(outMessage.getSource(),inRoutes.get(i),outMessage.getPath(),outMessage.getFlags(),messageObject);
        }
  finally {
          lock.unlock();
        }
        if (!receiveAccepted) {
          canProgress=false;
          break;
        }
        outMessage.incrementAcceptedInternalSends();
      }
      if (canProgress) {
        outMessage.setSendState(OutMessage.SendState.SENT_INTERNALLY);
      }
    }
    if (canProgress) {
      if (outMessage.getExternalSends().size() == 0) {
        pendingSendMessages.poll();
        continue;
      }
      OutMessage message=(OutMessage)messageSerializer.get(sendId).build(pair.getKey(),outMessage);
      if (message.serializedState() == OutMessage.SendState.SERIALIZED) {
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        int noOfExternalSends=startOfExternalRouts;
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            outMessage.getChannelMessage().incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(message.getChannelMessage(),exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
 else {
              noOfExternalSends=outMessage.incrementAcceptedExternalSends();
              externalSendsPending.incrementAndGet();
            }
          }
        }
  finally {
          lock.unlock();
        }
        if (noOfExternalSends == exRoutes.size()) {
          outMessage.setSendState(OutMessage.SendState.FINISHED);
          pendingSendMessages.poll();
        }
      }
 else       if (message.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
        if (message.getChannelMessage().getBuffers().size() == 0) {
          break;
        }
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        ChannelMessage sendCopy=createChannelMessageCopy(message.getChannelMessage());
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            sendCopy.incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(sendCopy,exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
          }
        }
  finally {
          outMessage.setOutCountUpdated(false);
          lock.unlock();
        }
      }
 else {
        break;
      }
    }
  }
  return canProgress;
}","private boolean sendProgress(Queue<Pair<Object,OutMessage>> pendingSendMessages,int sendId){
  boolean canProgress=true;
  while (pendingSendMessages.size() > 0 && canProgress) {
    Pair<Object,OutMessage> pair=pendingSendMessages.peek();
    OutMessage outMessage=pair.getValue();
    Object messageObject=pair.getKey();
    if (outMessage.serializedState() == OutMessage.SendState.INIT) {
      int startOfInternalRouts=outMessage.getAcceptedInternalSends();
      List<Integer> inRoutes=new ArrayList<>(outMessage.getInternalSends());
      for (int i=startOfInternalRouts; i < outMessage.getInternalSends().size(); i++) {
        boolean receiveAccepted;
        lock.lock();
        try {
          receiveAccepted=receiver.receiveSendInternally(outMessage.getSource(),inRoutes.get(i),outMessage.getPath(),outMessage.getFlags(),messageObject);
        }
  finally {
          lock.unlock();
        }
        if (!receiveAccepted) {
          canProgress=false;
          break;
        }
        outMessage.incrementAcceptedInternalSends();
      }
      if (canProgress) {
        outMessage.setSendState(OutMessage.SendState.SENT_INTERNALLY);
      }
    }
    if (canProgress) {
      if (outMessage.getExternalSends().size() == 0) {
        pendingSendMessages.poll();
        continue;
      }
      OutMessage message=(OutMessage)messageSerializer.get(sendId).build(pair.getKey(),outMessage);
      if (message.serializedState() == OutMessage.SendState.SERIALIZED) {
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        int noOfExternalSends=startOfExternalRouts;
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            outMessage.getChannelMessage().incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(message.getChannelMessage(),exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
 else {
              noOfExternalSends=outMessage.incrementAcceptedExternalSends();
              externalSendsPending.incrementAndGet();
            }
          }
        }
  finally {
          lock.unlock();
        }
        if (noOfExternalSends == exRoutes.size()) {
          outMessage.setSendState(OutMessage.SendState.FINISHED);
          pendingSendMessages.poll();
        }
      }
 else       if (message.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
        if (message.getChannelMessage().getBuffers().size() == 0) {
          break;
        }
        List<Integer> exRoutes=new ArrayList<>(outMessage.getExternalSends());
        int startOfExternalRouts=outMessage.getAcceptedExternalSends();
        ChannelMessage sendCopy=createChannelMessageCopy(message.getChannelMessage());
        lock.lock();
        try {
          if (!outMessage.isOutCountUpdated()) {
            sendCopy.incrementRefCount(outMessage.getExternalSends().size());
            outMessage.setOutCountUpdated(true);
          }
          for (int i=startOfExternalRouts; i < exRoutes.size(); i++) {
            boolean sendAccepted=sendMessageToTarget(sendCopy,exRoutes.get(i));
            if (!sendAccepted) {
              canProgress=false;
              break;
            }
 else {
              externalSendsPending.incrementAndGet();
            }
          }
        }
  finally {
          outMessage.setOutCountUpdated(false);
          lock.unlock();
        }
      }
 else {
        break;
      }
    }
  }
  return canProgress;
}",0.9897849462365592
172860,"private static TWSChannel initializeTCPNetwork(Config config,IWorkerController wController,ResourcePlan resourcePlan){
  TCPChannel channel;
  int index=wController.getWorkerNetworkInfo().getWorkerID();
  Integer workerPort=wController.getWorkerNetworkInfo().getWorkerPort();
  String localIp=wController.getWorkerNetworkInfo().getWorkerIP().getHostAddress();
  try {
    channel=createChannel(config,new WorkerNetworkInfo(InetAddress.getByName(localIp),workerPort,index),index);
    channel.startListening();
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + localIp,e);
  }
  wController.waitOnBarrier(30);
  List<WorkerNetworkInfo> wInfo=wController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP().getHostAddress());
    nInfos.add(networkInfo);
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
  }
  channel.startConnections(nInfos);
  channel.waitForConnections();
  return new TWSTCPChannel(config,resourcePlan.getThisId(),channel);
}","private static TWSChannel initializeTCPNetwork(Config config,IWorkerController wController,ResourcePlan resourcePlan){
  TCPChannel channel;
  int index=wController.getWorkerNetworkInfo().getWorkerID();
  Integer workerPort=wController.getWorkerNetworkInfo().getWorkerPort();
  String localIp=wController.getWorkerNetworkInfo().getWorkerIP().getHostAddress();
  try {
    channel=createChannel(config,new WorkerNetworkInfo(InetAddress.getByName(localIp),workerPort,index),index);
    channel.startListening();
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + localIp,e);
  }
  wController.waitOnBarrier(30000);
  List<WorkerNetworkInfo> wInfo=wController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP().getHostAddress());
    nInfos.add(networkInfo);
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
  }
  channel.startConnections(nInfos);
  channel.waitForConnections();
  return new TWSTCPChannel(config,resourcePlan.getThisId(),channel);
}",0.9988536492166604
172861,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  worker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  targets=new HashSet<>(expectedIds.keySet());
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  worker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  targets=new HashSet<>(expectedIds.keySet());
  executor=op.getTaskPlan().getThisExecutor();
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}",0.9837538886968544
172862,"@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    if (finished.contains(source)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",worker,source));
    }
 else {
      finished.add(source);
    }
    if (finished.size() == partition.getSources().size()) {
      finishedTargets.add(target);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    if (finished.contains(source)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",worker,source));
    }
 else {
      finished.add(source);
    }
    if (finished.size() == partition.getSources().size()) {
      finishedTargets.add(target);
    }
 else {
      LOG.log(Level.INFO,executor + ""String_Node_Str"" + finished);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}",0.9711229946524064
172863,"public void partition(int source,Object message,int flags){
  int destinations=destinationSelector.next(source);
  partition.send(source,message,flags,destinations);
}","public boolean partition(int source,Object message,int flags){
  int destinations=destinationSelector.next(source);
  return partition.send(source,message,flags,destinations);
}",0.9534883720930232
172864,"@SuppressWarnings(""String_Node_Str"") private void serializeBody(Object object,OutMessage sendMessage,DataBuffer buffer){
  List objectList=(List)object;
  SerializeState state=sendMessage.getSerializationState();
  boolean isTailPart=false;
  if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED && state.getData() != null) {
    isTailPart=true;
  }
  int startIndex=state.getCurrentObject();
  int remaining=buffer.getByteBuffer().remaining();
  if (remaining <= MAX_SUB_MESSAGE_HEADER_SPACE) {
    throw new RuntimeException(""String_Node_Str"" + remaining);
  }
  for (int i=startIndex; i < objectList.size(); i++) {
    Object o=objectList.get(i);
    if (o instanceof ChannelMessage) {
      ChannelMessage channelMessage=(ChannelMessage)o;
      boolean complete=serializeBufferedMessage(channelMessage,state,buffer);
      if (complete) {
        state.setCurrentObject(i + 1);
      }
 else {
        break;
      }
    }
 else {
      boolean complete=serializeMessage(o,sendMessage,buffer);
      if (complete) {
        state.setCurrentObject(i + 1);
        if (isTailPart) {
          break;
        }
      }
 else {
        break;
      }
    }
    remaining=buffer.getByteBuffer().remaining();
    if (!(remaining > MAX_SUB_MESSAGE_HEADER_SPACE && state.getCurrentObject() < objectList.size())) {
      break;
    }
  }
  if (state.getCurrentObject() == objectList.size()) {
    sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
  }
 else {
    sendMessage.setSendState(OutMessage.SendState.PARTIALLY_SERIALIZED);
  }
}","@SuppressWarnings(""String_Node_Str"") private void serializeBody(Object object,OutMessage sendMessage,DataBuffer buffer){
  List objectList=(List)object;
  SerializeState state=sendMessage.getSerializationState();
  int startIndex=state.getCurrentObject();
  int remaining=buffer.getByteBuffer().remaining();
  if (remaining <= MAX_SUB_MESSAGE_HEADER_SPACE) {
    throw new RuntimeException(""String_Node_Str"" + remaining);
  }
  for (int i=startIndex; i < objectList.size(); i++) {
    Object o=objectList.get(i);
    if (o instanceof ChannelMessage) {
      ChannelMessage channelMessage=(ChannelMessage)o;
      boolean complete=serializeBufferedMessage(channelMessage,state,buffer);
      if (complete) {
        state.setCurrentObject(i + 1);
      }
 else {
        break;
      }
    }
 else {
      boolean complete=serializeMessage(o,sendMessage,buffer);
      if (complete) {
        state.setCurrentObject(i + 1);
      }
 else {
        break;
      }
    }
    remaining=buffer.getByteBuffer().remaining();
    if (!(remaining > MAX_SUB_MESSAGE_HEADER_SPACE && state.getCurrentObject() < objectList.size())) {
      break;
    }
  }
  if (state.getCurrentObject() == objectList.size()) {
    sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
  }
 else {
    sendMessage.setSendState(OutMessage.SendState.PARTIALLY_SERIALIZED);
  }
}",0.18760698390962
172865,"@Override public Object build(Object message,Object partialBuildObject){
  int noOfMessages=1;
  if (message instanceof List) {
    noOfMessages=((List)message).size();
  }
  OutMessage sendMessage=(OutMessage)partialBuildObject;
  ChannelMessage channelMessage=sendMessage.getMPIMessage();
  if (channelMessage.isComplete()) {
    sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
    return sendMessage;
  }
  if (sendMessage.getSerializationState() == null) {
    sendMessage.setSerializationState(new SerializeState());
  }
  while (sendBuffers.size() > 0 && sendMessage.serializedState() != OutMessage.SendState.SERIALIZED) {
    DataBuffer buffer=sendBuffers.poll();
    if (sendMessage.serializedState() == OutMessage.SendState.INIT || sendMessage.serializedState() == OutMessage.SendState.SENT_INTERNALLY) {
      buildHeader(buffer,sendMessage);
      sendMessage.setSendState(OutMessage.SendState.HEADER_BUILT);
    }
    if (sendMessage.serializedState() == OutMessage.SendState.HEADER_BUILT || sendMessage.serializedState() == OutMessage.SendState.BODY_BUILT || sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      if ((sendMessage.getFlags() & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
        sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
        sendMessage.getSerializationState().setTotalBytes(0);
      }
 else {
        if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED && sendMessage.getSerializationState().getData() == null) {
          buildHeader(buffer,sendMessage);
        }
        serializeBody(message,sendMessage,buffer);
      }
    }
    channelMessage.addBuffer(buffer);
    if (sendMessage.serializedState() == OutMessage.SendState.SERIALIZED) {
      SerializeState state=sendMessage.getSerializationState();
      if (!channelMessage.isHeaderSent()) {
        int totalBytes=state.getTotalBytes();
        channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
        MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
        builder.destination(sendMessage.getDestintationIdentifier());
        sendMessage.getMPIMessage().setHeader(builder.build());
        channelMessage.setHeaderSent(true);
      }
      state.setTotalBytes(0);
      channelMessage.setComplete(true);
    }
 else     if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      SerializeState state=sendMessage.getSerializationState();
      if (!channelMessage.isHeaderSent()) {
        int totalBytes=state.getTotalBytes();
        int missing=state.getData().length - state.getBytesCopied();
        totalBytes=totalBytes + missing;
        channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
        MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
        builder.destination(sendMessage.getDestintationIdentifier());
        sendMessage.getMPIMessage().setHeader(builder.build());
        channelMessage.setHeaderSent(true);
      }
      state.setTotalBytes(0);
    }
  }
  return sendMessage;
}","@Override public Object build(Object message,Object partialBuildObject){
  int noOfMessages=1;
  if (message instanceof List) {
    noOfMessages=((List)message).size();
  }
  OutMessage sendMessage=(OutMessage)partialBuildObject;
  ChannelMessage channelMessage=sendMessage.getMPIMessage();
  if (channelMessage.isComplete()) {
    sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
    return sendMessage;
  }
  if (sendMessage.getSerializationState() == null) {
    sendMessage.setSerializationState(new SerializeState());
  }
  while (sendBuffers.size() > 0 && sendMessage.serializedState() != OutMessage.SendState.SERIALIZED) {
    DataBuffer buffer=sendBuffers.poll();
    if (sendMessage.serializedState() == OutMessage.SendState.INIT || sendMessage.serializedState() == OutMessage.SendState.SENT_INTERNALLY) {
      buildHeader(buffer,sendMessage);
      sendMessage.setSendState(OutMessage.SendState.HEADER_BUILT);
    }
    if (sendMessage.serializedState() == OutMessage.SendState.HEADER_BUILT || sendMessage.serializedState() == OutMessage.SendState.BODY_BUILT || sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      if ((sendMessage.getFlags() & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
        sendMessage.setSendState(OutMessage.SendState.SERIALIZED);
        sendMessage.getSerializationState().setTotalBytes(0);
      }
 else {
        if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED && sendMessage.getSerializationState().getData() == null) {
          buildHeader(buffer,sendMessage);
        }
        serializeBody(message,sendMessage,buffer);
      }
    }
    channelMessage.addBuffer(buffer);
    if (sendMessage.serializedState() == OutMessage.SendState.SERIALIZED) {
      SerializeState state=sendMessage.getSerializationState();
      int totalBytes=state.getTotalBytes();
      channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
      MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
      builder.destination(sendMessage.getDestintationIdentifier());
      sendMessage.getMPIMessage().setHeader(builder.build());
      state.setTotalBytes(0);
      channelMessage.setComplete(true);
    }
 else     if (sendMessage.serializedState() == OutMessage.SendState.PARTIALLY_SERIALIZED) {
      SerializeState state=sendMessage.getSerializationState();
      int totalBytes=state.getTotalBytes();
      channelMessage.getBuffers().get(0).getByteBuffer().putInt(HEADER_SIZE - Integer.BYTES,totalBytes);
      MessageHeader.Builder builder=MessageHeader.newBuilder(sendMessage.getSource(),sendMessage.getEdge(),totalBytes);
      builder.destination(sendMessage.getDestintationIdentifier());
      sendMessage.getMPIMessage().setHeader(builder.build());
      state.setTotalBytes(0);
    }
  }
  return sendMessage;
}",0.8038261997405967
172866,"/** 
 * Serializes a java object using kryo serialization
 */
private boolean serializeData(Object content,SerializeState state,DataBuffer targetBuffer,MessageType messageType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int dataLength=DataSerializer.serializeData(content,messageType,state,serializer);
    if (!buildSubMessageHeader(targetBuffer,dataLength)) {
      LOG.warning(""String_Node_Str"");
      return false;
    }
    state.addTotalBytes(NORMAL_SUB_MESSAGE_HEADER_SIZE);
    state.setPart(SerializeState.Part.BODY);
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,messageType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Serializes a java object using kryo serialization
 */
private boolean serializeData(Object content,SerializeState state,DataBuffer targetBuffer,MessageType messageType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int dataLength=DataSerializer.serializeData(content,messageType,state,serializer);
    int remaining=targetBuffer.getByteBuffer().remaining();
    if (remaining < dataLength + MAX_SUB_MESSAGE_HEADER_SPACE) {
      LOG.fine(""String_Node_Str"" + ""String_Node_Str"");
      return false;
    }
    if (!buildSubMessageHeader(targetBuffer,dataLength)) {
      LOG.warning(""String_Node_Str"");
      return false;
    }
    state.addTotalBytes(NORMAL_SUB_MESSAGE_HEADER_SIZE);
    state.setPart(SerializeState.Part.BODY);
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,messageType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}",0.9103568320278504
172867,"private boolean serializeKeyedData(Object content,Object key,SerializeState state,DataBuffer targetBuffer,MessageType contentType,MessageType keyType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int keyLength=KeySerializer.serializeKey(key,keyType,state,serializer);
    int dataLength=DataSerializer.serializeData(content,contentType,state,serializer);
    if (!buildSubMessageHeader(targetBuffer,dataLength + keyLength)) {
      LOG.warning(""String_Node_Str"");
      return false;
    }
    state.setTotalBytes(state.getTotalBytes() + NORMAL_SUB_MESSAGE_HEADER_SIZE);
  }
  if (state.getPart() == SerializeState.Part.INIT || state.getPart() == SerializeState.Part.HEADER) {
    boolean complete=KeySerializer.copyKeyToBuffer(key,keyType,targetBuffer.getByteBuffer(),state,serializer);
    if (complete) {
      state.setPart(SerializeState.Part.BODY);
    }
 else {
      state.setPart(SerializeState.Part.HEADER);
    }
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,contentType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}","private boolean serializeKeyedData(Object content,Object key,SerializeState state,DataBuffer targetBuffer,MessageType contentType,MessageType keyType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int keyLength=KeySerializer.serializeKey(key,keyType,state,serializer);
    int dataLength=DataSerializer.serializeData(content,contentType,state,serializer);
    int remaining=targetBuffer.getByteBuffer().remaining();
    if (remaining < dataLength + keyLength + MAX_SUB_MESSAGE_HEADER_SPACE) {
      LOG.fine(""String_Node_Str"" + ""String_Node_Str"");
      return false;
    }
    if (!buildSubMessageHeader(targetBuffer,dataLength + keyLength)) {
      LOG.warning(""String_Node_Str"");
      return false;
    }
    state.setTotalBytes(state.getTotalBytes() + NORMAL_SUB_MESSAGE_HEADER_SIZE);
  }
  if (state.getPart() == SerializeState.Part.INIT || state.getPart() == SerializeState.Part.HEADER) {
    boolean complete=KeySerializer.copyKeyToBuffer(key,keyType,targetBuffer.getByteBuffer(),state,serializer);
    if (complete) {
      state.setPart(SerializeState.Part.BODY);
    }
 else {
      state.setPart(SerializeState.Part.HEADER);
    }
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,contentType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}",0.6352485474499677
172868,"/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.router=new DirectRouter(taskPlan,sources,destination);
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    pendingReceiveDeSerializations.put(s,new ArrayBlockingQueue<ChannelMessage>(DataFlowContext.sendPendingMax(cfg)));
    serializerMap.put(s,new SingleMessageSerializer(new KryoSerializer()));
  }
  MessageDeSerializer messageDeSerializer=new SingleMessageDeSerializer(new KryoSerializer());
  deSerializerMap.put(destination,messageDeSerializer);
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,false);
}","/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.router=new DirectRouter(taskPlan,sources,destination);
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    pendingReceiveDeSerializations.put(s,new ArrayBlockingQueue<ChannelMessage>(DataFlowContext.sendPendingMax(cfg)));
    serializerMap.put(s,new SingleMessageSerializer(new KryoSerializer()));
  }
  MessageDeSerializer messageDeSerializer=new SingleMessageDeSerializer(new KryoSerializer());
  deSerializerMap.put(destination,messageDeSerializer);
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,false);
}",0.9963481436396836
172869,"/** 
 * Initialize
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.type=t;
  this.instancePlan=taskPlan;
  this.executor=taskPlan.getThisExecutor();
  this.router=new InvertedBinaryTreeRouter(cfg,taskPlan,destination,sources,index);
  if (this.partialReceiver != null && !isLastReceiver()) {
    partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=router.sendQueueIds();
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new MultiMessageSerializer(new KryoSerializer(),executor));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new MultiMessageDeserializer(new KryoSerializer(),executor));
  }
  Set<Integer> sourcesOfThisExec=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  int s : sourcesOfThisExec) {
    sendRoutingParameters(s,pathToUse);
    partialSendRoutingParameters(s,pathToUse);
  }
  delegete.init(cfg,t,t,keyType,keyType,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,isKeyed);
}","/** 
 * Initialize
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.type=t;
  this.instancePlan=taskPlan;
  this.executor=taskPlan.getThisExecutor();
  this.router=new InvertedBinaryTreeRouter(cfg,taskPlan,destination,sources,index);
  if (this.partialReceiver != null && !isLastReceiver()) {
    partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=router.sendQueueIds();
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new MultiMessageSerializer(new KryoSerializer(),executor));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new MultiMessageDeserializer(new KryoSerializer(),executor));
  }
  Set<Integer> sourcesOfThisExec=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  for (  int s : sourcesOfThisExec) {
    sendRoutingParameters(s,pathToUse);
    partialSendRoutingParameters(s,pathToUse);
  }
  delegete.init(cfg,t,t,keyType,keyType,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,isKeyed);
}",0.9975718332658844
172870,"/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.thisSources=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor(),thisSources));
  this.thisTasks=taskPlan.getTasksOfThisExecutor();
  this.router=new PartitionRouter(taskPlan,sources,destinations);
  Map<Integer,Set<Integer>> internal=router.getInternalSendTasks(0);
  Map<Integer,Set<Integer>> external=router.getExternalSendTasks(0);
  this.instancePlan=taskPlan;
  this.type=t;
  LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  try {
    for (    int s : thisSources) {
      Set<Integer> integerSetMap=internal.get(s);
      if (integerSetMap != null) {
        this.dests.internal.addAll(integerSetMap);
      }
      Set<Integer> integerSetMap1=external.get(s);
      if (integerSetMap1 != null) {
        this.dests.external.addAll(integerSetMap1);
      }
      LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor(),s));
      break;
    }
  }
 catch (  Throwable te) {
    te.printStackTrace();
  }
  LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new SingleMessageSerializer(new KryoSerializer()));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new SingleMessageDeSerializer(new KryoSerializer()));
  }
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,false);
}","/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.thisSources=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor(),thisSources));
  this.thisTasks=taskPlan.getTasksOfThisExecutor();
  this.router=new PartitionRouter(taskPlan,sources,destinations);
  Map<Integer,Set<Integer>> internal=router.getInternalSendTasks(0);
  Map<Integer,Set<Integer>> external=router.getExternalSendTasks(0);
  this.instancePlan=taskPlan;
  this.type=t;
  LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  try {
    for (    int s : thisSources) {
      Set<Integer> integerSetMap=internal.get(s);
      if (integerSetMap != null) {
        this.dests.internal.addAll(integerSetMap);
      }
      Set<Integer> integerSetMap1=external.get(s);
      if (integerSetMap1 != null) {
        this.dests.external.addAll(integerSetMap1);
      }
      LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor(),s));
      break;
    }
  }
 catch (  Throwable te) {
    te.printStackTrace();
  }
  LOG.info(String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new SingleMessageSerializer(new KryoSerializer()));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new SingleMessageDeSerializer(new KryoSerializer()));
  }
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,false);
}",0.9961439588688946
172871,"/** 
 * Initialize
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int ed){
  this.edge=ed;
  this.thisSources=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  LOG.log(Level.FINE,String.format(""String_Node_Str"",taskPlan.getThisExecutor(),sources,destinations));
  this.thisTasks=taskPlan.getTasksOfThisExecutor();
  this.router=new PartitionRouter(taskPlan,sources,destinations);
  Map<Integer,Set<Integer>> internal=router.getInternalSendTasks(0);
  Map<Integer,Set<Integer>> external=router.getExternalSendTasks(0);
  this.instancePlan=taskPlan;
  this.dataType=t;
  if (this.receiveType == null) {
    this.receiveType=dataType;
  }
  LOG.log(Level.FINE,String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  for (  int s : thisSources) {
    Set<Integer> integerSetMap=internal.get(s);
    if (integerSetMap != null) {
      this.dests.internal.addAll(integerSetMap);
    }
    Set<Integer> integerSetMap1=external.get(s);
    if (integerSetMap1 != null) {
      this.dests.external.addAll(integerSetMap1);
    }
    LOG.fine(String.format(""String_Node_Str"",taskPlan.getThisExecutor(),s));
    break;
  }
  LOG.log(Level.FINE,String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.partialReceiver != null) {
    this.partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  Set<Integer> tempsrcs=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  Integer src : tempsrcs) {
    srcs.add((src * -1) - 1);
  }
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new MultiMessageSerializer(new KryoSerializer(),executor));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int ex : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(ex,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(ex,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(ex,new MultiMessageDeserializer(new KryoSerializer(),executor));
  }
  for (  int src : srcs) {
    for (    int dest : destinations) {
      sendRoutingParameters(src,dest);
    }
  }
  delegete.setCompletionListener(completionListener);
  delegete.init(cfg,t,receiveType,keyType,receiveKeyType,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,isKeyed);
  delegete.setKeyType(keyType);
}","/** 
 * Initialize
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int ed){
  this.edge=ed;
  this.thisSources=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  LOG.log(Level.FINE,String.format(""String_Node_Str"",taskPlan.getThisExecutor(),sources,destinations));
  this.thisTasks=taskPlan.getTasksOfThisExecutor();
  this.router=new PartitionRouter(taskPlan,sources,destinations);
  Map<Integer,Set<Integer>> internal=router.getInternalSendTasks(0);
  Map<Integer,Set<Integer>> external=router.getExternalSendTasks(0);
  this.instancePlan=taskPlan;
  this.dataType=t;
  if (this.receiveType == null) {
    this.receiveType=dataType;
  }
  LOG.log(Level.FINE,String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  for (  int s : thisSources) {
    Set<Integer> integerSetMap=internal.get(s);
    if (integerSetMap != null) {
      this.dests.internal.addAll(integerSetMap);
    }
    Set<Integer> integerSetMap1=external.get(s);
    if (integerSetMap1 != null) {
      this.dests.external.addAll(integerSetMap1);
    }
    LOG.fine(String.format(""String_Node_Str"",taskPlan.getThisExecutor(),s));
    break;
  }
  LOG.log(Level.FINE,String.format(""String_Node_Str"",taskPlan.getThisExecutor()));
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.partialReceiver != null) {
    this.partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  Set<Integer> tempsrcs=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  for (  Integer src : tempsrcs) {
    srcs.add((src * -1) - 1);
  }
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new MultiMessageSerializer(new KryoSerializer(),executor));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int ex : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(ex,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(ex,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(ex,new MultiMessageDeserializer(new KryoSerializer(),executor));
  }
  for (  int src : srcs) {
    for (    int dest : destinations) {
      sendRoutingParameters(src,dest);
    }
  }
  delegete.setCompletionListener(completionListener);
  delegete.init(cfg,t,receiveType,keyType,receiveKeyType,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,isKeyed);
  delegete.setKeyType(keyType);
}",0.9949986107252016
172872,"/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.instancePlan=taskPlan;
  this.config=cfg;
  this.type=t;
  this.executor=instancePlan.getThisExecutor();
  this.router=new InvertedBinaryTreeRouter(cfg,taskPlan,destination,sources,index);
  if (this.partialReceiver != null && !isLastReceiver()) {
    partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  LOG.log(Level.FINE,String.format(""String_Node_Str"",executor,sources,destination,router.sendQueueIds()));
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=router.sendQueueIds();
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new SingleMessageSerializer(new KryoSerializer()));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new SingleMessageDeSerializer(new KryoSerializer()));
  }
  Set<Integer> sourcesOfThisExec=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  int s : sourcesOfThisExec) {
    sendRoutingParameters(s,pathToUse);
    partialSendRoutingParameters(s,pathToUse);
  }
  this.delegete.setCompletionListener(completionListener);
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,false);
}","/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.instancePlan=taskPlan;
  this.config=cfg;
  this.type=t;
  this.executor=instancePlan.getThisExecutor();
  this.router=new InvertedBinaryTreeRouter(cfg,taskPlan,destination,sources,index);
  if (this.partialReceiver != null && !isLastReceiver()) {
    partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  LOG.log(Level.FINE,String.format(""String_Node_Str"",executor,sources,destination,router.sendQueueIds()));
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=router.sendQueueIds();
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new SingleMessageSerializer(new KryoSerializer()));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new SingleMessageDeSerializer(new KryoSerializer()));
  }
  Set<Integer> sourcesOfThisExec=TaskPlanUtils.getTasksOfThisWorker(taskPlan,sources);
  for (  int s : sourcesOfThisExec) {
    sendRoutingParameters(s,pathToUse);
    partialSendRoutingParameters(s,pathToUse);
  }
  this.delegete.setCompletionListener(completionListener);
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,false);
}",0.8446348733233979
172873,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  worker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  targets=new HashSet<>(expectedIds.keySet());
  executor=op.getTaskPlan().getThisExecutor();
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  thisWorker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  targets=new HashSet<>(expectedIds.keySet());
  taskPlan=op.getTaskPlan();
  participatingWorkers=TaskPlanUtils.getWorkersOfTasks(taskPlan,((DataFlowPartition)op).getSources());
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}",0.950808847804556
172874,"@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    if (finished.contains(source)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",worker,source));
    }
 else {
      finished.add(source);
    }
    if (finished.size() == partition.getSources().size()) {
      finishedTargets.add(target);
    }
 else {
      LOG.log(Level.INFO,executor + ""String_Node_Str"" + finished);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    int worker=taskPlan.getExecutorForChannel(source);
    if (finished.contains(worker)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",this.thisWorker,worker));
    }
 else {
      finished.add(worker);
    }
    if (finished.size() == participatingWorkers.size()) {
      finishedTargets.add(target);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}",0.911056853854203
172875,"/** 
 * Initialize the data structure
 * @param cfg
 * @param plan
 * @param roots
 * @param dests
 */
public KeyedInvertedBinaryTreeRouter(Config cfg,TaskPlan plan,Set<Integer> roots,Set<Integer> dests){
  int interNodeDegree=DataFlowContext.interNodeDegree(cfg,2);
  int intraNodeDegree=DataFlowContext.intraNodeDegree(cfg,2);
  mainTaskLast=false;
  this.taskPlan=plan;
  this.destinationIdentifiers=new HashMap<>();
  this.pathToTask=new HashMap<>();
  this.receiveTasks=new HashMap<Integer,Map<Integer,List<Integer>>>();
  sendExternalTasksPartial=new HashMap<>();
  sendInternalTasks=new HashMap<>();
  sendExternalTasks=new HashMap<>();
  receiveExecutors=new HashSet<>();
  List<Integer> rootsSorted=new ArrayList<Integer>(roots);
  Collections.sort(rootsSorted);
  mainTask=new HashMap<>();
  Set<Integer> destinationsInThisExecutor=TaskPlanUtils.getTasksOfThisExecutor(plan,dests);
  for (  int t : destinationsInThisExecutor) {
    int path=rootsSorted.indexOf(t);
    pathToTask.put(path,t);
  }
  for (int path=0; path < roots.size(); path++) {
    int root=rootsSorted.get(path);
    BinaryTree tree=new BinaryTree(interNodeDegree,intraNodeDegree,plan,root,dests);
    Node treeRoot=tree.buildInterGroupTree(path);
    Set<Integer> thisExecutorTasks=plan.getChannelsOfExecutor(plan.getThisExecutor());
    Set<Integer> thisExecutorTasksOfOperation=new HashSet<>();
    for (    int t : thisExecutorTasks) {
      if (dests.contains(t) || root == t) {
        thisExecutorTasksOfOperation.add(t);
      }
    }
    LOG.fine(String.format(""String_Node_Str"",plan.getThisExecutor(),thisExecutorTasksOfOperation.toString()));
    for (    int t : thisExecutorTasksOfOperation) {
      List<Integer> recv=new ArrayList<>();
      Node search=BinaryTree.search(treeRoot,t);
      if (search != null) {
        mainTask.put(path,search.getTaskId());
        LOG.fine(String.format(""String_Node_Str"",plan.getThisExecutor(),mainTask));
        for (        int k : search.getRemoteChildrenIds()) {
          receiveExecutors.add(plan.getExecutorForChannel(k));
        }
        recv.addAll(search.getAllChildrenIds());
        Map<Integer,List<Integer>> receivePathMap;
        if (receiveTasks.containsKey(t)) {
          receivePathMap=receiveTasks.get(t);
        }
 else {
          receivePathMap=new HashMap<>();
        }
        receivePathMap.put(path,new ArrayList<>(recv));
        receiveTasks.put(t,receivePathMap);
        List<Integer> directChildren=search.getDirectChildren();
        if (t == path) {
          LOG.log(Level.FINE,String.format(""String_Node_Str"",plan.getThisExecutor(),directChildren));
        }
        for (        int child : directChildren) {
          Map<Integer,Set<Integer>> sendMap;
          if (sendInternalTasks.containsKey(child)) {
            sendMap=sendInternalTasks.get(child);
          }
 else {
            sendMap=new HashMap<>();
          }
          Set<Integer> sendTasks=new HashSet<>();
          sendTasks.add(t);
          sendMap.put(path,sendTasks);
          sendInternalTasks.put(child,sendMap);
          Map<Integer,Integer> destinationMap=new HashMap<>();
          if (destinationIdentifiers.containsKey(path)) {
            destinationMap=destinationIdentifiers.get(path);
          }
          destinationMap.put(child,t);
          destinationIdentifiers.put(path,destinationMap);
        }
        Node parent=search.getParent();
        if (parent != null) {
          Map<Integer,Set<Integer>> mainSendMap;
          if (sendExternalTasksPartial.containsKey(t)) {
            mainSendMap=sendExternalTasksPartial.get(t);
          }
 else {
            mainSendMap=new HashMap<>();
          }
          Set<Integer> sendTasks=new HashSet<>();
          sendTasks.add(parent.getTaskId());
          mainSendMap.put(path,sendTasks);
          sendExternalTasksPartial.put(t,mainSendMap);
          Map<Integer,Integer> destinationMap=new HashMap<>();
          if (destinationIdentifiers.containsKey(path)) {
            destinationMap=destinationIdentifiers.get(path);
          }
          destinationMap.put(t,parent.getTaskId());
          destinationIdentifiers.put(path,destinationMap);
        }
 else {
          mainTaskLast=true;
        }
      }
 else {
        LOG.fine(String.format(""String_Node_Str"",plan.getThisExecutor(),t));
      }
    }
  }
}","/** 
 * Initialize the data structure
 * @param cfg
 * @param plan
 * @param roots
 * @param dests
 */
public KeyedInvertedBinaryTreeRouter(Config cfg,TaskPlan plan,Set<Integer> roots,Set<Integer> dests){
  int interNodeDegree=DataFlowContext.interNodeDegree(cfg,2);
  int intraNodeDegree=DataFlowContext.intraNodeDegree(cfg,2);
  mainTaskLast=false;
  this.taskPlan=plan;
  this.destinationIdentifiers=new HashMap<>();
  this.pathToTask=new HashMap<>();
  this.receiveTasks=new HashMap<Integer,Map<Integer,List<Integer>>>();
  sendExternalTasksPartial=new HashMap<>();
  sendInternalTasks=new HashMap<>();
  sendExternalTasks=new HashMap<>();
  receiveExecutors=new HashSet<>();
  List<Integer> rootsSorted=new ArrayList<Integer>(roots);
  Collections.sort(rootsSorted);
  mainTask=new HashMap<>();
  Set<Integer> destinationsInThisExecutor=TaskPlanUtils.getTasksOfThisWorker(plan,dests);
  for (  int t : destinationsInThisExecutor) {
    int path=rootsSorted.indexOf(t);
    pathToTask.put(path,t);
  }
  for (int path=0; path < roots.size(); path++) {
    int root=rootsSorted.get(path);
    BinaryTree tree=new BinaryTree(interNodeDegree,intraNodeDegree,plan,root,dests);
    Node treeRoot=tree.buildInterGroupTree(path);
    Set<Integer> thisExecutorTasks=plan.getChannelsOfExecutor(plan.getThisExecutor());
    Set<Integer> thisExecutorTasksOfOperation=new HashSet<>();
    for (    int t : thisExecutorTasks) {
      if (dests.contains(t) || root == t) {
        thisExecutorTasksOfOperation.add(t);
      }
    }
    LOG.fine(String.format(""String_Node_Str"",plan.getThisExecutor(),thisExecutorTasksOfOperation.toString()));
    for (    int t : thisExecutorTasksOfOperation) {
      List<Integer> recv=new ArrayList<>();
      Node search=BinaryTree.search(treeRoot,t);
      if (search != null) {
        mainTask.put(path,search.getTaskId());
        LOG.fine(String.format(""String_Node_Str"",plan.getThisExecutor(),mainTask));
        for (        int k : search.getRemoteChildrenIds()) {
          receiveExecutors.add(plan.getExecutorForChannel(k));
        }
        recv.addAll(search.getAllChildrenIds());
        Map<Integer,List<Integer>> receivePathMap;
        if (receiveTasks.containsKey(t)) {
          receivePathMap=receiveTasks.get(t);
        }
 else {
          receivePathMap=new HashMap<>();
        }
        receivePathMap.put(path,new ArrayList<>(recv));
        receiveTasks.put(t,receivePathMap);
        List<Integer> directChildren=search.getDirectChildren();
        if (t == path) {
          LOG.log(Level.FINE,String.format(""String_Node_Str"",plan.getThisExecutor(),directChildren));
        }
        for (        int child : directChildren) {
          Map<Integer,Set<Integer>> sendMap;
          if (sendInternalTasks.containsKey(child)) {
            sendMap=sendInternalTasks.get(child);
          }
 else {
            sendMap=new HashMap<>();
          }
          Set<Integer> sendTasks=new HashSet<>();
          sendTasks.add(t);
          sendMap.put(path,sendTasks);
          sendInternalTasks.put(child,sendMap);
          Map<Integer,Integer> destinationMap=new HashMap<>();
          if (destinationIdentifiers.containsKey(path)) {
            destinationMap=destinationIdentifiers.get(path);
          }
          destinationMap.put(child,t);
          destinationIdentifiers.put(path,destinationMap);
        }
        Node parent=search.getParent();
        if (parent != null) {
          Map<Integer,Set<Integer>> mainSendMap;
          if (sendExternalTasksPartial.containsKey(t)) {
            mainSendMap=sendExternalTasksPartial.get(t);
          }
 else {
            mainSendMap=new HashMap<>();
          }
          Set<Integer> sendTasks=new HashSet<>();
          sendTasks.add(parent.getTaskId());
          mainSendMap.put(path,sendTasks);
          sendExternalTasksPartial.put(t,mainSendMap);
          Map<Integer,Integer> destinationMap=new HashMap<>();
          if (destinationIdentifiers.containsKey(path)) {
            destinationMap=destinationIdentifiers.get(path);
          }
          destinationMap.put(t,parent.getTaskId());
          destinationIdentifiers.put(path,destinationMap);
        }
 else {
          mainTaskLast=true;
        }
      }
 else {
        LOG.fine(String.format(""String_Node_Str"",plan.getThisExecutor(),t));
      }
    }
  }
}",0.9986187845303868
172876,"/** 
 * Called when the end of the operation is reached
 */
default void onFinish(int target){
}","/** 
 * Called when the end of the operation is reached
 */
default void onFinish(int source){
}",0.9583333333333334
172877,"@Override public void finish(int source){
  if (partialReceiver != null) {
    partialReceiver.onFinish(source * -1);
  }
}","@Override public void finish(int source){
  if (partialReceiver != null) {
    partialReceiver.onFinish(source);
  }
}",0.979253112033195
172878,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  thisWorker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  targets=new HashSet<>(expectedIds.keySet());
  taskPlan=op.getTaskPlan();
  participatingWorkers=TaskPlanUtils.getWorkersOfTasks(taskPlan,((DataFlowPartition)op).getSources());
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  thisWorker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  targets=new HashSet<>(expectedIds.keySet());
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}",0.955793703951775
172879,"@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    int worker=taskPlan.getExecutorForChannel(source);
    if (finished.contains(worker)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",this.thisWorker,worker));
    }
 else {
      finished.add(worker);
    }
    if (finished.size() == participatingWorkers.size()) {
      finishedTargets.add(target);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    if (finished.contains(source)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",this.thisWorker,source));
    }
 else {
      finished.add(source);
    }
    if (finished.size() == partition.getSources().size()) {
      finishedTargets.add(target);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}",0.9416815742397138
172880,"@Override public boolean progress(){
  for (  Shuffle sorts : sortedMergers.values()) {
    sorts.run();
  }
  for (  int i : finishedTargets) {
    if (!finishedTargetsCompleted.contains(i)) {
      onFinish(i);
      finishedTargetsCompleted.add(i);
    }
  }
  return !finishedTargets.equals(targets);
}","@Override public boolean progress(){
  for (  Shuffle sorts : sortedMergers.values()) {
    sorts.run();
  }
  for (  int i : finishedTargets) {
    if (!finishedTargetsCompleted.contains(i)) {
      finishTarget(i);
      finishedTargetsCompleted.add(i);
    }
  }
  return !finishedTargets.equals(targets);
}",0.9675324675324676
172881,"@Override public void onFinish(int target){
  Shuffle sortedMerger=sortedMergers.get(target);
  sortedMerger.switchToReading();
  Iterator<Object> itr=sortedMerger.readIterator();
  batchReceiver.receive(target,itr);
}","@Override public void onFinish(int source){
}",0.311787072243346
172882,"@Override public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  lowWaterMark=DataFlowContext.getNetworkPartitionMessageGroupLowWaterMark(cfg);
  highWaterMark=DataFlowContext.getNetworkPartitionMessageGroupHighWaterMark(cfg);
  executor=op.getTaskPlan().getThisExecutor();
  destinations=((DataFlowPartition)op).getDestinations();
  this.operation=op;
  for (  int d : destinations) {
    destinationMessages.put(d,new ArrayList<>());
  }
}","@Override public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  lowWaterMark=DataFlowContext.getNetworkPartitionMessageGroupLowWaterMark(cfg);
  highWaterMark=DataFlowContext.getNetworkPartitionMessageGroupHighWaterMark(cfg);
  executor=op.getTaskPlan().getThisExecutor();
  TaskPlan taskPlan=op.getTaskPlan();
  thisWorkerSources=TaskPlanUtils.getTasksOfThisWorker(taskPlan,((DataFlowPartition)op).getSources());
  for (  int s : thisWorkerSources) {
    finishedDestinations.put(s,new HashSet<>());
  }
  destinations=((DataFlowPartition)op).getDestinations();
  this.operation=op;
  for (  int d : destinations) {
    destinationMessages.put(d,new ArrayList<>());
  }
}",0.8047138047138047
172883,"@Override public boolean onMessage(int src,int destination,int target,int flags,Object object){
  this.source=src;
  List<Object> dests=destinationMessages.get(destination);
  int size=dests.size();
  if (size > highWaterMark) {
    return false;
  }
  lock.lock();
  try {
    dests.add(object);
    if (dests.size() > lowWaterMark) {
      swapToReady(destination,dests);
    }
  }
  finally {
    lock.unlock();
  }
  return true;
}","@Override public boolean onMessage(int src,int destination,int target,int flags,Object object){
  this.representSource=src;
  List<Object> dests=destinationMessages.get(destination);
  int size=dests.size();
  if (size > highWaterMark) {
    return false;
  }
  lock.lock();
  try {
    dests.add(object);
    if (dests.size() > lowWaterMark) {
      swapToReady(destination,dests);
    }
  }
  finally {
    lock.unlock();
  }
  return true;
}",0.987485779294653
172884,"@Override public boolean progress(){
  boolean needsFurtherProgress=false;
  lock.lock();
  if (progressAttempts > 2) {
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      if (e.getValue().size() > 0) {
        swapToReady(e.getKey(),e.getValue());
      }
    }
    progressAttempts=0;
  }
  try {
    if (finish && readyToSend.isEmpty() && finishedDestinations.size() != destinations.size()) {
      for (      int dest : destinations) {
        if (!finishedDestinations.contains(dest)) {
          if (operation.sendPartial(source,new byte[1],MessageFlags.EMPTY,dest)) {
            finishedDestinations.add(dest);
            progressAttempts=0;
          }
 else {
            needsFurtherProgress=true;
            break;
          }
        }
      }
      return needsFurtherProgress;
    }
    Iterator<Map.Entry<Integer,List<Object>>> it=readyToSend.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,List<Object>> e=it.next();
      List<Object> send=new ArrayList<>(e.getValue());
      if (operation.sendPartial(source,send,0,e.getKey())) {
        e.getValue().clear();
        it.remove();
        counts++;
        progressAttempts=0;
      }
 else {
        needsFurtherProgress=true;
      }
    }
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      if (e.getValue().size() > 0) {
        needsFurtherProgress=true;
      }
    }
    for (    Map.Entry<Integer,List<Object>> e : readyToSend.entrySet()) {
      if (e.getValue().size() > 0) {
        needsFurtherProgress=true;
      }
    }
  }
  finally {
    lock.unlock();
  }
  progressAttempts++;
  return needsFurtherProgress;
}","@Override public boolean progress(){
  boolean needsFurtherProgress=false;
  lock.lock();
  if (progressAttempts > 2) {
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      if (e.getValue().size() > 0) {
        swapToReady(e.getKey(),e.getValue());
      }
    }
    progressAttempts=0;
  }
  try {
    if (onFinishedSources.equals(thisWorkerSources) && readyToSend.isEmpty() && finishedDestinations.size() != destinations.size()) {
      for (      int source : thisWorkerSources) {
        Set<Integer> finishedDestPerSource=finishedDestinations.get(source);
        for (        int dest : destinations) {
          if (!finishedDestPerSource.contains(dest)) {
            if (operation.sendPartial(source,new byte[1],MessageFlags.EMPTY,dest)) {
              finishedDestPerSource.add(dest);
              progressAttempts=0;
            }
 else {
              needsFurtherProgress=true;
              break;
            }
          }
        }
      }
      return needsFurtherProgress;
    }
    Iterator<Map.Entry<Integer,List<Object>>> it=readyToSend.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,List<Object>> e=it.next();
      List<Object> send=new ArrayList<>(e.getValue());
      if (operation.sendPartial(representSource,send,0,e.getKey())) {
        e.getValue().clear();
        it.remove();
        counts++;
        progressAttempts=0;
      }
 else {
        needsFurtherProgress=true;
      }
    }
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      if (e.getValue().size() > 0) {
        needsFurtherProgress=true;
      }
    }
    for (    Map.Entry<Integer,List<Object>> e : readyToSend.entrySet()) {
      if (e.getValue().size() > 0) {
        needsFurtherProgress=true;
      }
    }
  }
  finally {
    lock.unlock();
  }
  progressAttempts++;
  return needsFurtherProgress;
}",0.9174057649667404
172885,"@Override public void onFinish(int target){
  lock.lock();
  try {
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      List<Object> messages=new ArrayList<>();
      Integer key=e.getKey();
      if (readyToSend.containsKey(key)) {
        messages=readyToSend.get(key);
      }
 else {
        readyToSend.put(key,messages);
      }
      messages.addAll(e.getValue());
    }
    finish=true;
  }
  finally {
    lock.unlock();
  }
}","@Override public void onFinish(int source){
  lock.lock();
  try {
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      List<Object> messages=new ArrayList<>();
      Integer key=e.getKey();
      if (readyToSend.containsKey(key)) {
        messages=readyToSend.get(key);
      }
 else {
        readyToSend.put(key,messages);
      }
      messages.addAll(e.getValue());
    }
    onFinishedSources.add(source);
  }
  finally {
    lock.unlock();
  }
}",0.8645833333333334
172886,"@Override public void onFinish(int target){
}","@Override public void onFinish(int source){
}",0.9111111111111112
172887,"@Override public void init(Config config,int id,ResourcePlan resourcePlan,IWorkerController workerController,IPersistentVolume persistentVolume,IVolatileVolume volatileVolume){
  this.workerController=workerController;
  workerNetworkInfo=workerController.getWorkerNetworkInfo();
  LOG.info(""String_Node_Str"" + workerNetworkInfo);
  Thread echoServer=new Thread(this);
  echoServer.start();
  List<WorkerNetworkInfo> workerList=workerController.waitForAllWorkersToJoin(50000);
  if (workerList != null) {
    LOG.info(""String_Node_Str"" + WorkerNetworkInfo.workerListAsString(workerList));
  }
 else {
    LOG.severe(""String_Node_Str"");
    return;
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (  WorkerNetworkInfo worker : workerList) {
    if (worker.equals(workerNetworkInfo)) {
      continue;
    }
    sendReceiveHello(worker);
  }
  K8sWorkerUtils.waitIndefinitely();
}","@Override public void init(Config config,int id,ResourcePlan resourcePlan,IWorkerController wController,IPersistentVolume persistentVolume,IVolatileVolume volatileVolume){
  this.workerController=wController;
  workerNetworkInfo=wController.getWorkerNetworkInfo();
  LOG.info(""String_Node_Str"" + workerNetworkInfo);
  Thread echoServer=new Thread(this);
  echoServer.start();
  List<WorkerNetworkInfo> workerList=wController.waitForAllWorkersToJoin(50000);
  if (workerList != null) {
    LOG.info(""String_Node_Str"" + WorkerNetworkInfo.workerListAsString(workerList));
  }
 else {
    LOG.severe(""String_Node_Str"");
    return;
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (  WorkerNetworkInfo worker : workerList) {
    if (worker.equals(workerNetworkInfo)) {
      continue;
    }
    sendReceiveHello(worker);
  }
  K8sWorkerUtils.waitIndefinitely();
}",0.9892588614393124
172888,"@Override public void init(Config cfg,int wID,ResourcePlan plan,IWorkerDiscoverer workerController,IPersistentVolume persistentVolume,IVolatileVolume volatileVolume){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=wID;
  setupNetwork(cfg,workerController,plan);
  List<WorkerNetworkInfo> workerList=workerController.waitForAllWorkersToJoin(50000);
  if (workerList != null) {
    LOG.info(""String_Node_Str"" + WorkerNetworkInfo.workerListAsString(workerList));
  }
 else {
    LOG.severe(""String_Node_Str"");
    return;
  }
  setupTasks();
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  partition=new DataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),false,true,new IntegerComparator()),new PartitionPartialReceiver(),DataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}","@Override public void init(Config cfg,int wID,ResourcePlan plan,IWorkerDiscoverer workerController,IPersistentVolume persistentVolume,IVolatileVolume volatileVolume){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=wID;
  setupNetwork(cfg,workerController,plan);
  setupTasks();
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  partition=new DataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),false,true,new IntegerComparator()),new PartitionPartialReceiver(),DataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}",0.8527918781725888
172889,"public Double getDoubleValue(String key,double defaultValue){
  Object value=get(key);
  if (value != null) {
    if (value instanceof Integer || value instanceof Double) {
      return (Double)value;
    }
 else     if (value instanceof String) {
      return Double.valueOf((String)value);
    }
 else {
      return defaultValue;
    }
  }
  return defaultValue;
}","public Double getDoubleValue(String key,double defaultValue){
  Object value=get(key);
  if (value != null) {
    if (value instanceof Integer) {
      return ((Integer)value).doubleValue();
    }
 else     if (value instanceof Double) {
      return (Double)value;
    }
 else     if (value instanceof String) {
      return Double.valueOf((String)value);
    }
 else {
      return defaultValue;
    }
  }
  return defaultValue;
}",0.9086357947434291
172890,"private void listWorkersMessageReceived(RequestID id,Network.ListWorkersRequest listMessage){
  if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.IMMEDIATE_RESPONSE) {
    sendListWorkersResponse(listMessage.getWorkerID(),id);
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
 else   if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.RESPONSE_AFTER_ALL_JOINED) {
    waitList.put(listMessage.getWorkerID(),id);
    if (workers.size() == numberOfWorkers) {
      sendListWorkersResponseToWaitList();
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
  LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
}","private void listWorkersMessageReceived(RequestID id,Network.ListWorkersRequest listMessage){
  if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.IMMEDIATE_RESPONSE) {
    sendListWorkersResponse(listMessage.getWorkerID(),id);
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
 else   if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.RESPONSE_AFTER_ALL_JOINED) {
    if (workers.size() == numberOfWorkers) {
      sendListWorkersResponse(listMessage.getWorkerID(),id);
    }
 else {
      waitList.put(listMessage.getWorkerID(),id);
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
}",0.8414067684140677
172891,"/** 
 * Initialize
 * @param cfg
 * @param t
 * @param taskPlan
 * @param edge
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.type=t;
  this.instancePlan=taskPlan;
  this.executor=taskPlan.getThisExecutor();
  this.router=new InvertedBinaryTreeRouter(cfg,taskPlan,destination,sources,index);
  if (this.partialReceiver != null && !isLastReceiver()) {
    partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=router.sendQueueIds();
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new MultiMessageSerializer(new KryoSerializer(),executor));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new MultiMessageDeserializer(new KryoSerializer(),executor));
  }
  Set<Integer> sourcesOfThisExec=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  int s : sourcesOfThisExec) {
    sendRoutingParameters(s,pathToUse);
    partialSendRoutingParameters(s,pathToUse);
  }
  delegete.init(cfg,t,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,isKeyed);
  delegete.setKeyType(keyType);
}","/** 
 * Initialize
 */
public void init(Config cfg,MessageType t,TaskPlan taskPlan,int edge){
  this.type=t;
  this.instancePlan=taskPlan;
  this.executor=taskPlan.getThisExecutor();
  this.router=new InvertedBinaryTreeRouter(cfg,taskPlan,destination,sources,index);
  if (this.partialReceiver != null && !isLastReceiver()) {
    partialReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  if (this.finalReceiver != null && isLastReceiver()) {
    this.finalReceiver.init(cfg,this,receiveExpectedTaskIds());
  }
  Map<Integer,ArrayBlockingQueue<Pair<Object,OutMessage>>> pendingSendMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<Pair<Object,ChannelMessage>>> pendingReceiveMessagesPerSource=new HashMap<>();
  Map<Integer,Queue<ChannelMessage>> pendingReceiveDeSerializations=new HashMap<>();
  Map<Integer,MessageSerializer> serializerMap=new HashMap<>();
  Map<Integer,MessageDeSerializer> deSerializerMap=new HashMap<>();
  Set<Integer> srcs=router.sendQueueIds();
  for (  int s : srcs) {
    ArrayBlockingQueue<Pair<Object,OutMessage>> pendingSendMessages=new ArrayBlockingQueue<Pair<Object,OutMessage>>(DataFlowContext.sendPendingMax(cfg));
    pendingSendMessagesPerSource.put(s,pendingSendMessages);
    serializerMap.put(s,new MultiMessageSerializer(new KryoSerializer(),executor));
  }
  int maxReceiveBuffers=DataFlowContext.receiveBufferCount(cfg);
  int receiveExecutorsSize=receivingExecutors().size();
  if (receiveExecutorsSize == 0) {
    receiveExecutorsSize=1;
  }
  Set<Integer> execs=router.receivingExecutors();
  for (  int e : execs) {
    int capacity=maxReceiveBuffers * 2 * receiveExecutorsSize;
    Queue<Pair<Object,ChannelMessage>> pendingReceiveMessages=new ArrayBlockingQueue<Pair<Object,ChannelMessage>>(capacity);
    pendingReceiveMessagesPerSource.put(e,pendingReceiveMessages);
    pendingReceiveDeSerializations.put(e,new ArrayBlockingQueue<ChannelMessage>(capacity));
    deSerializerMap.put(e,new MultiMessageDeserializer(new KryoSerializer(),executor));
  }
  Set<Integer> sourcesOfThisExec=TaskPlanUtils.getTasksOfThisExecutor(taskPlan,sources);
  for (  int s : sourcesOfThisExec) {
    sendRoutingParameters(s,pathToUse);
    partialSendRoutingParameters(s,pathToUse);
  }
  delegete.init(cfg,t,t,keyType,keyType,taskPlan,edge,router.receivingExecutors(),router.isLastReceiver(),this,pendingSendMessagesPerSource,pendingReceiveMessagesPerSource,pendingReceiveDeSerializations,serializerMap,deSerializerMap,isKeyed);
}",0.9043443603029095
172892,"/** 
 * We can receive messages from internal tasks or an external task, we allways receive messages to the main task of the executor and we go from there
 * @param currentMessage
 * @param object
 */
@Override public boolean receiveMessage(ChannelMessage currentMessage,Object object){
  MessageHeader header=currentMessage.getHeader();
  int messageDestId=currentMessage.getHeader().getDestinationIdentifier();
  if (!isLast() && partialReceiver != null) {
    return partialReceiver.onMessage(header.getSourceId(),DataFlowContext.DEFAULT_DESTINATION,router.mainTaskOfExecutor(instancePlan.getThisExecutor(),DataFlowContext.DEFAULT_DESTINATION),header.getFlags(),currentMessage);
  }
 else {
    return finalReceiver.onMessage(header.getSourceId(),DataFlowContext.DEFAULT_DESTINATION,router.mainTaskOfExecutor(instancePlan.getThisExecutor(),DataFlowContext.DEFAULT_DESTINATION),header.getFlags(),object);
  }
}","/** 
 * We can receive messages from internal tasks or an external task, we allways receive messages to the main task of the executor and we go from there
 */
@Override public boolean receiveMessage(ChannelMessage currentMessage,Object object){
  MessageHeader header=currentMessage.getHeader();
  int messageDestId=currentMessage.getHeader().getDestinationIdentifier();
  if (!isLast() && partialReceiver != null) {
    return partialReceiver.onMessage(header.getSourceId(),DataFlowContext.DEFAULT_DESTINATION,router.mainTaskOfExecutor(instancePlan.getThisExecutor(),DataFlowContext.DEFAULT_DESTINATION),header.getFlags(),currentMessage);
  }
 else {
    return finalReceiver.onMessage(header.getSourceId(),DataFlowContext.DEFAULT_DESTINATION,router.mainTaskOfExecutor(instancePlan.getThisExecutor(),DataFlowContext.DEFAULT_DESTINATION),header.getFlags(),object);
  }
}",0.9764309764309764
172893,"/** 
 * Progress the communications that are pending
 */
public void progress(){
  while (pendingSends.size() > 0) {
    TCPSendRequests sendRequests=pendingSends.poll();
    postMessage(sendRequests);
    waitForCompletionSends.add(sendRequests);
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    TCPReceiveRequests receiveRequests=registeredReceives.get(i);
    if (receiveRequests.availableBuffers.size() > 0) {
      postReceive(receiveRequests);
    }
  }
  Iterator<TCPSendRequests> sendRequestsIterator=waitForCompletionSends.iterator();
  while (sendRequestsIterator.hasNext()) {
    TCPSendRequests sendRequests=sendRequestsIterator.next();
    Iterator<Request> requestIterator=sendRequests.pendingSends.iterator();
    while (requestIterator.hasNext()) {
      Request r=requestIterator.next();
      TCPStatus status=r.request.testStatus();
      if (status != null) {
        requestIterator.remove();
      }
    }
    if (sendRequests.pendingSends.size() == 0) {
      sendRequests.callback.onSendComplete(sendRequests.rank,sendRequests.edge,sendRequests.message);
      sendRequestsIterator.remove();
    }
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    TCPReceiveRequests receiveRequests=registeredReceives.get(i);
    Iterator<Request> requestIterator=receiveRequests.pendingRequests.iterator();
    while (requestIterator.hasNext()) {
      Request r=requestIterator.next();
      TCPStatus status=r.request.testStatus();
      if (status != null) {
        r.buffer.setSize(r.buffer.getByteBuffer().limit());
        receiveRequests.callback.onReceiveComplete(receiveRequests.rank,receiveRequests.edge,r.buffer);
        requestIterator.remove();
      }
    }
  }
}","/** 
 * Progress the communications that are pending
 */
public void progress(){
  while (pendingSends.size() > 0) {
    TCPSendRequests sendRequests=pendingSends.poll();
    postMessage(sendRequests);
    waitForCompletionSends.add(sendRequests);
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    TCPReceiveRequests receiveRequests=registeredReceives.get(i);
    if (receiveRequests.availableBuffers.size() > 0) {
      postReceive(receiveRequests);
    }
  }
  Iterator<TCPSendRequests> sendRequestsIterator=waitForCompletionSends.iterator();
  while (sendRequestsIterator.hasNext()) {
    TCPSendRequests sendRequests=sendRequestsIterator.next();
    Iterator<Request> requestIterator=sendRequests.pendingSends.iterator();
    while (requestIterator.hasNext()) {
      Request r=requestIterator.next();
      TCPStatus status=r.request.testStatus();
      if (status != null) {
        requestIterator.remove();
      }
    }
    if (sendRequests.pendingSends.size() == 0) {
      sendRequests.callback.onSendComplete(sendRequests.rank,sendRequests.edge,sendRequests.message);
      sendRequestsIterator.remove();
    }
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    TCPReceiveRequests receiveRequests=registeredReceives.get(i);
    Iterator<Request> requestIterator=receiveRequests.pendingRequests.iterator();
    while (requestIterator.hasNext()) {
      Request r=requestIterator.next();
      TCPStatus status=r.request.testStatus();
      if (status != null) {
        r.buffer.setSize(r.buffer.getByteBuffer().limit());
        receiveRequests.callback.onReceiveComplete(receiveRequests.rank,receiveRequests.edge,r.buffer);
        requestIterator.remove();
      }
    }
  }
  comm.progress();
}",0.9944847605224963
172894,"public int getGroupOfExecutor(int executor){
  return executorToGroup.get(executor);
}","public int getGroupOfExecutor(int executor){
  if (executorToGroup.containsKey(executor)) {
    return executorToGroup.get(executor);
  }
  return 0;
}",0.7257383966244726
172895,"public Set<Integer> getExecutesOfGroup(int group){
  return groupsToExecutor.get(group);
}","public Set<Integer> getExecutesOfGroup(int group){
  if (groupsToExecutor.keySet().size() == 0) {
    return new HashSet<>(executorToChannels.keySet());
  }
  return groupsToExecutor.get(group);
}",0.6293706293706294
172896,"private void listWorkersMessageReceived(RequestID id,Network.ListWorkersRequest listMessage){
  if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.IMMEDIATE_RESPONSE) {
    sendListWorkersResponse(listMessage.getWorkerID(),id);
  }
 else   if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.RESPONSE_AFTER_ALL_JOINED) {
    if (workers.size() == numberOfWorkers) {
      sendListWorkersResponse(listMessage.getWorkerID(),id);
    }
 else {
      waitList.put(listMessage.getWorkerID(),id);
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
}","private void listWorkersMessageReceived(RequestID id,Network.ListWorkersRequest listMessage){
  if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.IMMEDIATE_RESPONSE) {
    sendListWorkersResponse(listMessage.getWorkerID(),id);
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
 else   if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.RESPONSE_AFTER_ALL_JOINED) {
    if (workers.size() == numberOfWorkers) {
      sendListWorkersResponse(listMessage.getWorkerID(),id);
    }
 else {
      waitList.put(listMessage.getWorkerID(),id);
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
  LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
}",0.8787878787878788
172897,"public JobMasterClient(Config config,WorkerNetworkInfo thisWorker){
  this.config=config;
  this.thisWorker=thisWorker;
  this.masterAddress=JobMasterContext.jobMasterIP(config);
  this.masterPort=JobMasterContext.jobMasterPort(config);
}","public JobMasterClient(Config config,WorkerNetworkInfo thisWorker,String masterHost,int masterPort){
  this.config=config;
  this.thisWorker=thisWorker;
  this.masterAddress=masterHost;
  this.masterPort=masterPort;
}",0.6813186813186813
172898,"/** 
 * Create the job master client to get information about the workers
 */
private static JobMasterClient createMasterClient(Config cfg,int workerId,String host,int port) throws UnknownHostException {
  JobMasterClient jobMasterClient=new JobMasterClient(cfg,new WorkerNetworkInfo(InetAddress.getByName(host),port,workerId));
  LOG.log(Level.INFO,String.format(""String_Node_Str"",host,port));
  jobMasterClient.init();
  jobMasterClient.sendWorkerStartingMessage();
  return jobMasterClient;
}","/** 
 * Create the job master client to get information about the workers
 */
private static JobMasterClient createMasterClient(Config cfg,int workerId,String host,int workerPort,int masterPort,String masterHost) throws UnknownHostException {
  JobMasterClient jobMasterClient=new JobMasterClient(cfg,new WorkerNetworkInfo(InetAddress.getByName(host),workerPort,workerId),masterHost,masterPort);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",host,workerPort));
  jobMasterClient.init();
  jobMasterClient.sendWorkerStartingMessage();
  return jobMasterClient;
}",0.9219190968955786
172899,"/** 
 * Create the resource plan
 * @param config config
 * @return
 */
private static ResourcePlan createResourcePlan(Config config){
  String indexEnv=System.getenv(""String_Node_Str"");
  String idEnv=System.getenv(""String_Node_Str"");
  int index=Integer.valueOf(indexEnv);
  initLogger(config,index);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",idEnv,index));
  ResourcePlan resourcePlan=new ResourcePlan(""String_Node_Str"",index);
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=null;
  String jobMasterIP=JobMasterContext.jobMasterIP(config);
  int masterPort=JobMasterContext.jobMasterPort(config);
  TCPChannel channel;
  try {
    channel=initNetworkServer(config,new WorkerNetworkInfo(InetAddress.getByName(""String_Node_Str""),ports.get(""String_Node_Str""),index),index);
    client=createMasterClient(config,index,jobMasterIP,masterPort);
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + jobMasterIP,e);
  }
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  List<WorkerNetworkInfo> wInfo=workerController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP());
    nInfos.add(networkInfo);
  }
  channel.startConnections(nInfos,null);
  return resourcePlan;
}","/** 
 * Create the resource plan
 * @param config config
 * @return
 */
private static ResourcePlan createResourcePlan(Config config){
  String indexEnv=System.getenv(""String_Node_Str"");
  String idEnv=System.getenv(""String_Node_Str"");
  int index=Integer.valueOf(indexEnv);
  initLogger(config,index);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",idEnv,index));
  ResourcePlan resourcePlan=new ResourcePlan(""String_Node_Str"",index);
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=null;
  String jobMasterIP=JobMasterContext.jobMasterIP(config);
  int masterPort=JobMasterContext.jobMasterPort(config);
  TCPChannel channel;
  try {
    Integer workerPort=ports.get(""String_Node_Str"");
    channel=initNetworkServer(config,new WorkerNetworkInfo(InetAddress.getByName(""String_Node_Str""),workerPort,index),index);
    client=createMasterClient(config,index,InetAddress.getLocalHost().getHostName(),workerPort,masterPort,jobMasterIP);
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + jobMasterIP,e);
  }
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  List<WorkerNetworkInfo> wInfo=workerController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP());
    nInfos.add(networkInfo);
  }
  channel.startConnections(nInfos,null);
  return resourcePlan;
}",0.9520488230165648
172900,"/** 
 * Create the resource plan
 * @param config config
 * @return
 */
private static ResourcePlan createResourcePlan(Config config){
  String indexEnv=System.getenv(""String_Node_Str"");
  String idEnv=System.getenv(""String_Node_Str"");
  int index=Integer.valueOf(indexEnv);
  initLogger(config,index);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",idEnv,index));
  ResourcePlan resourcePlan=new ResourcePlan(""String_Node_Str"",index);
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=null;
  String jobMasterIP=JobMasterContext.jobMasterIP(config);
  int masterPort=JobMasterContext.jobMasterPort(config);
  TCPChannel channel;
  try {
    Integer workerPort=ports.get(""String_Node_Str"");
    String localIp=getIPAddress();
    channel=initNetworkServer(config,new WorkerNetworkInfo(InetAddress.getByName(localIp),workerPort,index),index);
    client=createMasterClient(config,index,localIp,workerPort,masterPort,jobMasterIP);
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + jobMasterIP,e);
  }
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  List<WorkerNetworkInfo> wInfo=workerController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP().toString());
    nInfos.add(networkInfo);
  }
  channel.startConnections(nInfos,null);
  return resourcePlan;
}","/** 
 * Create the resource plan
 * @param config config
 * @return
 */
private static ResourcePlan createResourcePlan(Config config){
  String indexEnv=System.getenv(""String_Node_Str"");
  String idEnv=System.getenv(""String_Node_Str"");
  int index=Integer.valueOf(indexEnv);
  initLogger(config,index);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",idEnv,index));
  ResourcePlan resourcePlan=new ResourcePlan(""String_Node_Str"",index);
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=null;
  String jobMasterIP=JobMasterContext.jobMasterIP(config);
  int masterPort=JobMasterContext.jobMasterPort(config);
  TCPChannel channel;
  try {
    Integer workerPort=ports.get(""String_Node_Str"");
    String localIp=getIPAddress();
    channel=initNetworkServer(config,new WorkerNetworkInfo(InetAddress.getByName(localIp),workerPort,index),index);
    client=createMasterClient(config,index,localIp,workerPort,masterPort,jobMasterIP);
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + jobMasterIP,e);
  }
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  List<WorkerNetworkInfo> wInfo=workerController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP().toString());
    nInfos.add(networkInfo);
  }
  channel.startConnections(nInfos,null);
  channel.waitForConnections();
  return resourcePlan;
}",0.9910263600673024
172901,"private void listWorkersMessageReceived(RequestID id,Network.ListWorkersRequest listMessage){
  if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.IMMEDIATE_RESPONSE) {
    sendListWorkersResponse(listMessage.getWorkerID(),id);
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
 else   if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.RESPONSE_AFTER_ALL_JOINED) {
    if (workers.size() == numberOfWorkers) {
      sendListWorkersResponse(listMessage.getWorkerID(),id);
    }
 else {
      waitList.put(listMessage.getWorkerID(),id);
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
  LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
}","private void listWorkersMessageReceived(RequestID id,Network.ListWorkersRequest listMessage){
  if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.IMMEDIATE_RESPONSE) {
    sendListWorkersResponse(listMessage.getWorkerID(),id);
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
 else   if (listMessage.getRequestType() == Network.ListWorkersRequest.RequestType.RESPONSE_AFTER_ALL_JOINED) {
    waitList.put(listMessage.getWorkerID(),id);
    if (workers.size() == numberOfWorkers) {
      sendListWorkersResponseToWaitList();
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
  }
  LOG.log(Level.INFO,String.format(""String_Node_Str"",numberOfWorkers,workers.size()));
}",0.904642409033877
172902,"@Override public void onMessage(RequestID id,int workerId,Message message){
  if (message instanceof Network.Ping) {
    Network.Ping ping=(Network.Ping)message;
    pingMessageReceived(id,ping);
  }
 else   if (message instanceof Network.WorkerStateChange) {
    Network.WorkerStateChange wscMessage=(Network.WorkerStateChange)message;
    stateChangeMessageReceived(id,wscMessage);
  }
 else   if (message instanceof Network.ListWorkersRequest) {
    Network.ListWorkersRequest listMessage=(Network.ListWorkersRequest)message;
    listWorkersMessageReceived(id,listMessage);
  }
}","@Override public void onMessage(RequestID id,int workerId,Message message){
  if (message instanceof Network.Ping) {
    LOG.log(Level.INFO,""String_Node_Str"" + message.toString());
    Network.Ping ping=(Network.Ping)message;
    pingMessageReceived(id,ping);
  }
 else   if (message instanceof Network.WorkerStateChange) {
    LOG.log(Level.INFO,""String_Node_Str"" + message.toString());
    Network.WorkerStateChange wscMessage=(Network.WorkerStateChange)message;
    stateChangeMessageReceived(id,wscMessage);
  }
 else   if (message instanceof Network.ListWorkersRequest) {
    LOG.log(Level.INFO,""String_Node_Str"" + message.toString());
    Network.ListWorkersRequest listMessage=(Network.ListWorkersRequest)message;
    listWorkersMessageReceived(id,listMessage);
  }
}",0.8584070796460177
172903,"public JobMasterClient(Config config,WorkerNetworkInfo thisWorker,String masterHost,int masterPort){
  this.config=config;
  this.thisWorker=thisWorker;
  this.masterAddress=masterHost;
  this.masterPort=masterPort;
}","public JobMasterClient(Config config,WorkerNetworkInfo thisWorker,String masterHost,int masterPort,int numberOfWorkers){
  this.config=config;
  this.thisWorker=thisWorker;
  this.masterAddress=masterHost;
  this.masterPort=masterPort;
  this.numberOfWorkers=numberOfWorkers;
}",0.8785425101214575
172904,"/** 
 * initialize JobMasterClient wait until it connects to JobMaster return false, if it can not connec to JobMaster
 * @return
 */
public boolean init(){
  looper=new Progress();
  ClientConnectHandler connectHandler=new ClientConnectHandler();
  rrClient=new RRClient(masterAddress,masterPort,null,looper,thisWorker.getWorkerID(),connectHandler);
  long interval=JobMasterContext.pingInterval(config);
  pinger=new Pinger(thisWorker,rrClient,interval);
  workerController=new WorkerController(config,thisWorker,rrClient);
  Network.Ping.Builder pingBuilder=Network.Ping.newBuilder();
  rrClient.registerResponseHandler(pingBuilder,pinger);
  ListWorkersRequest.Builder listRequestBuilder=ListWorkersRequest.newBuilder();
  ListWorkersResponse.Builder listResponseBuilder=ListWorkersResponse.newBuilder();
  rrClient.registerResponseHandler(listRequestBuilder,workerController);
  rrClient.registerResponseHandler(listResponseBuilder,workerController);
  Network.WorkerStateChange.Builder stateChangeBuilder=Network.WorkerStateChange.newBuilder();
  Network.WorkerStateChangeResponse.Builder stateChangeResponseBuilder=Network.WorkerStateChangeResponse.newBuilder();
  ResponseMessageHandler responseMessageHandler=new ResponseMessageHandler();
  rrClient.registerResponseHandler(stateChangeBuilder,responseMessageHandler);
  rrClient.registerResponseHandler(stateChangeResponseBuilder,responseMessageHandler);
  long connectionTimeLimit=100000;
  tryUntilConnected(connectionTimeLimit);
  if (rrClient.isConnected()) {
    LOG.info(""String_Node_Str"");
  }
 else {
    LOG.severe(""String_Node_Str"");
    return false;
  }
  this.start();
  return true;
}","/** 
 * initialize JobMasterClient wait until it connects to JobMaster return false, if it can not connec to JobMaster
 * @return
 */
public boolean init(){
  looper=new Progress();
  ClientConnectHandler connectHandler=new ClientConnectHandler();
  rrClient=new RRClient(masterAddress,masterPort,null,looper,thisWorker.getWorkerID(),connectHandler);
  long interval=JobMasterContext.pingInterval(config);
  pinger=new Pinger(thisWorker,rrClient,interval);
  workerController=new WorkerController(config,thisWorker,rrClient,numberOfWorkers);
  Network.Ping.Builder pingBuilder=Network.Ping.newBuilder();
  rrClient.registerResponseHandler(pingBuilder,pinger);
  ListWorkersRequest.Builder listRequestBuilder=ListWorkersRequest.newBuilder();
  ListWorkersResponse.Builder listResponseBuilder=ListWorkersResponse.newBuilder();
  rrClient.registerResponseHandler(listRequestBuilder,workerController);
  rrClient.registerResponseHandler(listResponseBuilder,workerController);
  Network.WorkerStateChange.Builder stateChangeBuilder=Network.WorkerStateChange.newBuilder();
  Network.WorkerStateChangeResponse.Builder stateChangeResponseBuilder=Network.WorkerStateChangeResponse.newBuilder();
  ResponseMessageHandler responseMessageHandler=new ResponseMessageHandler();
  rrClient.registerResponseHandler(stateChangeBuilder,responseMessageHandler);
  rrClient.registerResponseHandler(stateChangeResponseBuilder,responseMessageHandler);
  long connectionTimeLimit=100000;
  tryUntilConnected(connectionTimeLimit);
  if (rrClient.isConnected()) {
    LOG.info(""String_Node_Str"");
  }
 else {
    LOG.severe(""String_Node_Str"");
    return false;
  }
  this.start();
  return true;
}",0.9951951951951952
172905,"public WorkerController(Config config,WorkerNetworkInfo thisWorker,RRClient rrClient){
  this.config=config;
  this.numberOfWorkers=JobMasterContext.workerInstances(config);
  this.thisWorker=thisWorker;
  this.rrClient=rrClient;
  workerList=new ArrayList<>();
  workerList.add(thisWorker);
}","public WorkerController(Config config,WorkerNetworkInfo thisWorker,RRClient rrClient,int numberOfWorkers){
  this.config=config;
  this.numberOfWorkers=numberOfWorkers;
  this.thisWorker=thisWorker;
  this.rrClient=rrClient;
  workerList=new ArrayList<>();
  workerList.add(thisWorker);
}",0.8709122203098106
172906,"/** 
 * Create the job master client to get information about the workers
 */
private static JobMasterClient createMasterClient(Config cfg,int workerId,String host,int workerPort,int masterPort,String masterHost) throws UnknownHostException {
  JobMasterClient jobMasterClient=new JobMasterClient(cfg,new WorkerNetworkInfo(InetAddress.getByName(host),workerPort,workerId),masterHost,masterPort);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",host,workerPort));
  jobMasterClient.init();
  jobMasterClient.sendWorkerStartingMessage();
  return jobMasterClient;
}","/** 
 * Create the job master client to get information about the workers
 */
private static JobMasterClient createMasterClient(Config cfg,int workerId,String host,int workerPort,int masterPort,String masterHost) throws UnknownHostException {
  JobMasterClient jobMasterClient=new JobMasterClient(cfg,new WorkerNetworkInfo(InetAddress.getByName(host),workerPort,workerId),masterHost,masterPort,4);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",host,workerPort));
  jobMasterClient.init();
  jobMasterClient.sendWorkerStartingMessage();
  return jobMasterClient;
}",0.9982425307557118
172907,"/** 
 * Start the connections to the servers
 * @param workerInfo
 * @param updatedThisInfo
 */
public void startConnections(List<NetworkInfo> workerInfo,NetworkInfo updatedThisInfo){
  this.networkInfos=workerInfo;
  for (  NetworkInfo ni : workerInfo) {
    networkInfoMap.put(ni.getProcId(),ni);
    helloSendByteBuffers.add(ByteBuffer.allocate(4));
    helloReceiveByteBuffers.add(ByteBuffer.allocate(4));
    helloSendByteBuffers.add(ByteBuffer.allocate(4));
    helloReceiveByteBuffers.add(ByteBuffer.allocate(4));
  }
  for (  NetworkInfo info : networkInfos) {
    if (info.getProcId() == thisInfo.getProcId()) {
      continue;
    }
    String remoteHost=TCPContext.getHostName(info);
    int remotePort=TCPContext.getPort(info);
    Client client=new Client(remoteHost,remotePort,config,looper,new ClientChannelChannelHandler());
    client.connect();
    clients.put(info.getProcId(),client);
    invertedClientChannels.put(client.getSocketChannel(),info.getProcId());
  }
  while (clientsConnected != (networkInfos.size() - 1) || (clientsCompleted != networkInfos.size() - 1)) {
    looper.loop();
  }
  LOG.log(Level.FINEST,""String_Node_Str"" + clientsConnected + ""String_Node_Str""+ clientsCompleted);
}","/** 
 * Start the connections to the servers
 * @param workerInfo
 * @param updatedThisInfo
 */
public void startConnections(List<NetworkInfo> workerInfo,NetworkInfo updatedThisInfo){
  this.networkInfos=workerInfo;
  for (  NetworkInfo ni : workerInfo) {
    networkInfoMap.put(ni.getProcId(),ni);
    helloSendByteBuffers.add(ByteBuffer.allocate(4));
    helloReceiveByteBuffers.add(ByteBuffer.allocate(4));
    helloSendByteBuffers.add(ByteBuffer.allocate(4));
    helloReceiveByteBuffers.add(ByteBuffer.allocate(4));
  }
  for (  NetworkInfo info : networkInfos) {
    if (info.getProcId() == thisInfo.getProcId()) {
      continue;
    }
    try {
      String remoteHost=TCPContext.getHostName(info);
      int remotePort=TCPContext.getPort(info);
      Client client=new Client(remoteHost,remotePort,config,looper,new ClientChannelChannelHandler());
      client.connect();
      clients.put(info.getProcId(),client);
      invertedClientChannels.put(client.getSocketChannel(),info.getProcId());
    }
 catch (    UnresolvedAddressException e) {
    }
  }
  while (clientsConnected != (networkInfos.size() - 1) || (clientsCompleted != networkInfos.size() - 1)) {
    looper.loop();
  }
  LOG.log(Level.FINEST,""String_Node_Str"" + clientsConnected + ""String_Node_Str""+ clientsCompleted);
}",0.9545816733067728
172908,"public static String getHostName(NetworkInfo networkInfo){
  return networkInfo.getProperties().get(NETWORK_HOSTNAME).toString();
}","public static String getHostName(NetworkInfo networkInfo){
  return (String)networkInfo.getProperties().get(NETWORK_HOSTNAME);
}",0.9266409266409268
172909,"/** 
 * Create the job master client to get information about the workers
 */
private static JobMasterClient createMasterClient(Config cfg,int workerId,String host,int workerPort,int masterPort,String masterHost) throws UnknownHostException {
  String jobName=StandaloneContext.jobName(cfg);
  String jobDescFile=JobUtils.getJobDescriptionFilePath(jobName,cfg);
  JobAPI.Job job=JobUtils.readJobFile(null,jobDescFile);
  int numberContainers=job.getJobResources().getNoOfContainers();
  JobMasterClient jobMasterClient=new JobMasterClient(cfg,new WorkerNetworkInfo(InetAddress.getByName(host),workerPort,workerId),masterHost,masterPort,numberContainers);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",host,workerPort));
  jobMasterClient.init();
  jobMasterClient.sendWorkerStartingMessage();
  return jobMasterClient;
}","/** 
 * Create the job master client to get information about the workers
 */
private static JobMasterClient createMasterClient(Config cfg,int workerId,String workerHost,int workerPort,int masterPort,String masterHost) throws UnknownHostException {
  String jobName=StandaloneContext.jobName(cfg);
  String jobDescFile=JobUtils.getJobDescriptionFilePath(jobName,cfg);
  JobAPI.Job job=JobUtils.readJobFile(null,jobDescFile);
  int numberContainers=job.getJobResources().getNoOfContainers();
  JobMasterClient jobMasterClient=new JobMasterClient(cfg,new WorkerNetworkInfo(InetAddress.getByName(workerHost),workerPort,workerId),masterHost,masterPort,numberContainers);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",workerHost,workerPort));
  jobMasterClient.init();
  jobMasterClient.sendWorkerStartingMessage();
  return jobMasterClient;
}",0.985645933014354
172910,"/** 
 * Create the resource plan
 * @param config config
 * @return
 */
private static ResourcePlan createResourcePlan(Config config){
  String indexEnv=System.getenv(""String_Node_Str"");
  String idEnv=System.getenv(""String_Node_Str"");
  int index=Integer.valueOf(indexEnv);
  initLogger(config,index);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",idEnv,index));
  ResourcePlan resourcePlan=new ResourcePlan(""String_Node_Str"",index);
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=null;
  String jobMasterIP=JobMasterContext.jobMasterIP(config);
  int masterPort=JobMasterContext.jobMasterPort(config);
  TCPChannel channel;
  try {
    Integer workerPort=ports.get(""String_Node_Str"");
    channel=initNetworkServer(config,new WorkerNetworkInfo(InetAddress.getByName(""String_Node_Str""),workerPort,index),index);
    client=createMasterClient(config,index,InetAddress.getLocalHost().getHostName(),workerPort,masterPort,jobMasterIP);
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + jobMasterIP,e);
  }
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  List<WorkerNetworkInfo> wInfo=workerController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP());
    nInfos.add(networkInfo);
  }
  channel.startConnections(nInfos,null);
  return resourcePlan;
}","/** 
 * Create the resource plan
 * @param config config
 * @return
 */
private static ResourcePlan createResourcePlan(Config config){
  String indexEnv=System.getenv(""String_Node_Str"");
  String idEnv=System.getenv(""String_Node_Str"");
  int index=Integer.valueOf(indexEnv);
  initLogger(config,index);
  LOG.log(Level.INFO,String.format(""String_Node_Str"",idEnv,index));
  ResourcePlan resourcePlan=new ResourcePlan(""String_Node_Str"",index);
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=null;
  String jobMasterIP=JobMasterContext.jobMasterIP(config);
  int masterPort=JobMasterContext.jobMasterPort(config);
  TCPChannel channel;
  try {
    Integer workerPort=ports.get(""String_Node_Str"");
    channel=initNetworkServer(config,new WorkerNetworkInfo(InetAddress.getByName(""String_Node_Str""),workerPort,index),index);
    String localIp=getIPAddress();
    client=createMasterClient(config,index,localIp,workerPort,masterPort,jobMasterIP);
  }
 catch (  UnknownHostException e) {
    throw new RuntimeException(""String_Node_Str"" + jobMasterIP,e);
  }
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  List<WorkerNetworkInfo> wInfo=workerController.getWorkerList();
  List<NetworkInfo> nInfos=new ArrayList<>();
  for (  WorkerNetworkInfo w : wInfo) {
    ResourceContainer container=new ResourceContainer(w.getWorkerID());
    resourcePlan.addContainer(container);
    NetworkInfo networkInfo=new NetworkInfo(w.getWorkerID());
    networkInfo.addProperty(TCPContext.NETWORK_PORT,w.getWorkerPort());
    networkInfo.addProperty(TCPContext.NETWORK_HOSTNAME,w.getWorkerIP().toString());
    nInfos.add(networkInfo);
  }
  channel.startConnections(nInfos,null);
  return resourcePlan;
}",0.9703473595029652
172911,"public boolean addWriteRequest(TCPMessage request){
  ByteBuffer byteBuffer=request.getByteBuffer();
  byteBuffer.position(request.getLength());
  return pendingSends.offer(request);
}","public boolean addWriteRequest(TCPMessage request){
  ByteBuffer byteBuffer=request.getByteBuffer();
  if (request.getLength() == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (byteBuffer.remaining() == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return pendingSends.offer(request);
}",0.4752475247524752
172912,"private int writeRequest(SocketChannel channel,TCPMessage message){
  ByteBuffer buffer=message.getByteBuffer();
  int written=0;
  if (writeStatus == DataStatus.INIT) {
    writeHeader.clear();
    writeStatus=DataStatus.HEADER;
    writeHeader.putInt(message.getLength());
    writeHeader.putInt(message.getEdge());
    writeHeader.flip();
    LOG.finest(String.format(""String_Node_Str"",message.getLength(),message.getEdge()));
  }
  if (writeStatus == DataStatus.HEADER) {
    written=writeToChannel(channel,writeHeader);
    if (written < 0) {
      return written;
    }
 else     if (written == 0) {
      writeStatus=DataStatus.BODY;
    }
  }
  if (writeStatus == DataStatus.BODY) {
    buffer.flip();
    written=writeToChannel(channel,buffer);
    if (written < 0) {
      return written;
    }
 else     if (written == 0) {
      LOG.finest(String.format(""String_Node_Str"",buffer.limit()));
      writeStatus=DataStatus.INIT;
      return written;
    }
  }
  return written;
}","private int writeRequest(SocketChannel channel,TCPMessage message){
  ByteBuffer buffer=message.getByteBuffer();
  int written=0;
  if (writeStatus == DataStatus.INIT) {
    writeHeader.clear();
    writeStatus=DataStatus.HEADER;
    writeHeader.putInt(message.getLength());
    writeHeader.putInt(message.getEdge());
    writeHeader.flip();
    LOG.finest(String.format(""String_Node_Str"",message.getLength(),message.getEdge()));
  }
  if (writeStatus == DataStatus.HEADER) {
    written=writeToChannel(channel,writeHeader);
    if (written < 0) {
      return written;
    }
 else     if (written == 0) {
      writeStatus=DataStatus.BODY;
    }
  }
  if (writeStatus == DataStatus.BODY) {
    written=writeToChannel(channel,buffer);
    if (written < 0) {
      return written;
    }
 else     if (written == 0) {
      LOG.finest(String.format(""String_Node_Str"",buffer.limit()));
      writeStatus=DataStatus.INIT;
      return written;
    }
  }
  return written;
}",0.9902912621359224
172913,"public TCPMessage send(SocketChannel sc,ByteBuffer buffer,int size,int edge){
  if (sc != socketChannel) {
    return null;
  }
  if (!isConnected) {
    return null;
  }
  channel.enableWriting();
  TCPMessage request=new TCPMessage(buffer,edge,size);
  if (channel.addWriteRequest(request)) {
    return request;
  }
  return null;
}","public TCPMessage send(SocketChannel sc,ByteBuffer buffer,int size,int edge){
  if (sc != socketChannel) {
    return null;
  }
  if (!isConnected) {
    return null;
  }
  buffer.limit(size);
  buffer.position(0);
  channel.enableWriting();
  TCPMessage request=new TCPMessage(buffer,edge,size);
  if (channel.addWriteRequest(request)) {
    return request;
  }
  return null;
}",0.938375350140056
172914,"public TCPMessage send(SocketChannel sc,ByteBuffer buffer,int size,int edge){
  BaseNetworkChannel channel=connectedChannels.get(sc);
  if (channel == null) {
    return null;
  }
  channel.enableWriting();
  TCPMessage request=new TCPMessage(buffer,edge,size);
  channel.addWriteRequest(request);
  return request;
}","public TCPMessage send(SocketChannel sc,ByteBuffer buffer,int size,int edge){
  BaseNetworkChannel channel=connectedChannels.get(sc);
  if (channel == null) {
    return null;
  }
  buffer.limit(size);
  buffer.position(0);
  channel.enableWriting();
  TCPMessage request=new TCPMessage(buffer,edge,size);
  channel.addWriteRequest(request);
  return request;
}",0.935103244837758
172915,"/** 
 * Start listening
 */
public void startListening(){
  String hostName=TCPContext.getHostName(thisInfo);
  int port=TCPContext.getPort(thisInfo);
  looper=new Progress();
  server=new Server(config,hostName,port,looper,new ChannelServerChannelHandler());
  server.start();
}","/** 
 * Start listening
 */
public void startListening(){
  String hostName=TCPContext.getHostName(thisInfo);
  int port=TCPContext.getPort(thisInfo);
  looper=new Progress();
  server=new Server(config,hostName,port,looper,new ServerChannelHandler(),true);
  server.start();
}",0.9784172661870504
172916,"public void waitForConnections(){
  while (clientsConnected != (networkInfos.size() - 1) || (clientsCompleted != networkInfos.size() - 1)) {
    looper.loop();
  }
  while (serverChannel.size() != networkInfos.size() - 1) {
    looper.loop();
  }
  LOG.log(Level.FINEST,""String_Node_Str"" + clientsConnected + ""String_Node_Str""+ clientsCompleted);
}","/** 
 * Wait for handshakes to happen between servers and clients
 */
public void waitForConnections(){
  while (clientsConnected != (networkInfos.size() - 1) || (clientsCompleted != networkInfos.size() - 1)) {
    looper.loop();
  }
  while (serverChannel.size() != networkInfos.size() - 1) {
    looper.loop();
  }
  LOG.log(Level.FINEST,""String_Node_Str"" + clientsConnected + ""String_Node_Str""+ clientsCompleted);
}",0.908616187989556
172917,"private void sendHelloMessage(int destProcId,SocketChannel sc){
  ByteBuffer buffer=helloSendByteBuffers.remove(0);
  buffer.putInt(thisInfo.getProcId());
  Client client=clients.get(destProcId);
  client.send(sc,buffer,4,-1);
}","private void sendHelloMessage(int destProcId,SocketChannel sc){
  ByteBuffer buffer=helloSendByteBuffers.remove(0);
  buffer.clear();
  buffer.putInt(thisInfo.getProcId());
  Client client=clients.get(destProcId);
  client.send(sc,buffer,4,-1);
}",0.9620253164556962
172918,"@Test public void sendMessages(){
  List<TCPMessage> sends=new ArrayList<>();
  List<TCPMessage> recvs=new ArrayList<>();
  for (int i=0; i < NO_OF_CHANNELS; i++) {
    TCPChannel channel=channels.get(i);
    for (int j=0; j < NO_OF_CHANNELS; j++) {
      if (j != i) {
        TCPMessage message=channel.iRecv(buffers.get(j),10,j,1);
        recvs.add(message);
      }
    }
  }
  for (int i=0; i < NO_OF_CHANNELS; i++) {
    TCPChannel channel=channels.get(i);
    for (int j=0; j < NO_OF_CHANNELS; j++) {
      if (j != i) {
        TCPMessage message=channel.iSend(buffers.get(j),10,j,1);
        sends.add(message);
      }
    }
  }
  List<Integer> completedSends=new ArrayList<>();
  List<Integer> completedRcvs=new ArrayList<>();
  while (completedRcvs.size() != NO_OF_CHANNELS || completedSends.size() != NO_OF_CHANNELS) {
    for (int i=0; i < NO_OF_CHANNELS; i++) {
      TCPMessage sendMsg=sends.get(i);
      TCPMessage rcvMsg=recvs.get(i);
      if (sendMsg.isComplete()) {
        if (!completedSends.contains(i)) {
          completedSends.add(i);
        }
      }
      if (rcvMsg.isComplete()) {
        if (!completedRcvs.contains(i)) {
          completedRcvs.add(i);
        }
      }
      TCPChannel ch=channels.get(i);
      ch.progress();
    }
  }
}","@Test public void sendMessages(){
  List<TCPMessage> sends=new ArrayList<>();
  List<TCPMessage> recvs=new ArrayList<>();
  for (int i=0; i < NO_OF_CHANNELS; i++) {
    TCPChannel channel=channels.get(i);
    for (int j=0; j < NO_OF_CHANNELS; j++) {
      if (j != i) {
        ByteBuffer buffer=buffers.get(j);
        buffer.clear();
        TCPMessage message=channel.iRecv(buffer,10,j,1);
        recvs.add(message);
      }
    }
  }
  for (int i=0; i < NO_OF_CHANNELS; i++) {
    TCPChannel channel=channels.get(i);
    for (int j=0; j < NO_OF_CHANNELS; j++) {
      if (j != i) {
        ByteBuffer buffer=buffers.get(j);
        buffer.clear();
        buffer.put(new byte[10]);
        TCPMessage message=channel.iSend(buffer,10,j,1);
        sends.add(message);
      }
    }
  }
  List<Integer> completedSends=new ArrayList<>();
  List<Integer> completedRcvs=new ArrayList<>();
  while (completedRcvs.size() != NO_OF_CHANNELS || completedSends.size() != NO_OF_CHANNELS) {
    for (int i=0; i < NO_OF_CHANNELS; i++) {
      TCPMessage sendMsg=sends.get(i);
      TCPMessage rcvMsg=recvs.get(i);
      if (sendMsg.isComplete()) {
        if (!completedSends.contains(i)) {
          completedSends.add(i);
        }
      }
      if (rcvMsg.isComplete()) {
        if (!completedRcvs.contains(i)) {
          completedRcvs.add(i);
        }
      }
      TCPChannel ch=channels.get(i);
      ch.progress();
    }
  }
}",0.9326923076923076
172919,"@After public void tearDown() throws Exception {
  for (  TCPChannel channel : channels) {
    channel.stop();
  }
}","@After public void tearDown() throws Exception {
}",0.6024096385542169
172920,"private static ResourcePlan createResourcePlan(Config config){
  return null;
}","private static ResourcePlan createResourcePlan(Config config){
  Map<String,Integer> ports=getPorts(config);
  JobMasterClient client=createMasterClient(config,0,new InetSocketAddress(0).getAddress(),ports);
  WorkerController workerController=client.getWorkerController();
  workerController.waitForAllWorkersToJoin(30000);
  return null;
}",0.3761904761904762
172921,"@Override public TaskSchedulePlan schedule(DataFlowTaskGraph graph,WorkerPlan workerPlan){
  Set<TaskSchedulePlan.ContainerPlan> containerPlans=new HashSet<>();
  LinkedHashSet<Vertex> taskVertexSet=graph.getTaskVertexSet();
  Map<Integer,List<InstanceId>> datalocalityAwareContainerInstanceMap=DataLocalityAwareScheduling.DataLocalityAwareSchedulingAlgorithm(taskVertexSet,workerPlan.getNumberOfWorkers(),workerPlan,this.cfg);
  TaskInstanceMapCalculation instanceMapCalculation=new TaskInstanceMapCalculation(this.instanceRAM,this.instanceCPU,this.instanceDisk);
  Map<Integer,Map<InstanceId,Double>> instancesRamMap=instanceMapCalculation.getInstancesRamMapInContainer(datalocalityAwareContainerInstanceMap,taskVertexSet);
  Map<Integer,Map<InstanceId,Double>> instancesDiskMap=instanceMapCalculation.getInstancesDiskMapInContainer(datalocalityAwareContainerInstanceMap,taskVertexSet);
  Map<Integer,Map<InstanceId,Double>> instancesCPUMap=instanceMapCalculation.getInstancesCPUMapInContainer(datalocalityAwareContainerInstanceMap,taskVertexSet);
  for (  int containerId : datalocalityAwareContainerInstanceMap.keySet()) {
    Double containerRAMValue=TaskSchedulerContext.containerRamPadding(cfg);
    Double containerDiskValue=TaskSchedulerContext.containerDiskPadding(cfg);
    Double containerCpuValue=TaskSchedulerContext.containerCpuPadding(cfg);
    List<InstanceId> taskInstanceIds=datalocalityAwareContainerInstanceMap.get(containerId);
    Map<InstanceId,TaskSchedulePlan.TaskInstancePlan> taskInstancePlanMap=new HashMap<>();
    for (    InstanceId id : taskInstanceIds) {
      double instanceRAMValue=instancesRamMap.get(containerId).get(id);
      double instanceDiskValue=instancesDiskMap.get(containerId).get(id);
      double instanceCPUValue=instancesCPUMap.get(containerId).get(id);
      Resource instanceResource=new Resource(instanceRAMValue,instanceDiskValue,instanceCPUValue);
      taskInstancePlanMap.put(id,new TaskSchedulePlan.TaskInstancePlan(id.getTaskName(),id.getTaskId(),id.getTaskIndex(),instanceResource));
      containerRAMValue+=instanceRAMValue;
      containerDiskValue+=instanceDiskValue;
      containerCpuValue+=instanceDiskValue;
    }
    Worker worker=workerPlan.getWorker(containerId);
    Resource containerResource;
    if (worker != null && worker.getCpu() > 0 && worker.getDisk() > 0 && worker.getRam() > 0) {
      containerResource=new Resource((double)worker.getRam(),(double)worker.getDisk(),(double)worker.getCpu());
      LOG.fine(String.format(""String_Node_Str"" + containerId + ""String_Node_Str""+ worker.getRam()+ ""String_Node_Str""+ worker.getDisk()+ ""String_Node_Str""+ worker.getCpu()));
    }
 else {
      containerResource=new Resource(containerRAMValue,containerDiskValue,containerCpuValue);
      LOG.fine(String.format(""String_Node_Str"" + containerId + ""String_Node_Str""+ containerRAMValue+ ""String_Node_Str""+ containerDiskValue+ ""String_Node_Str""+ containerCpuValue));
    }
    TaskSchedulePlan.ContainerPlan taskContainerPlan=new TaskSchedulePlan.ContainerPlan(containerId,new HashSet<>(taskInstancePlanMap.values()),containerResource);
    containerPlans.add(taskContainerPlan);
  }
  return new TaskSchedulePlan(taskSchedulePlanId,containerPlans);
}","@Override public TaskSchedulePlan schedule(DataFlowTaskGraph graph,WorkerPlan workerPlan){
  Set<TaskSchedulePlan.ContainerPlan> containerPlans=new HashSet<>();
  Set<Vertex> taskVertexSet=graph.getTaskVertexSet();
  Map<Integer,List<InstanceId>> datalocalityAwareContainerInstanceMap=DataLocalityAwareScheduling.DataLocalityAwareSchedulingAlgorithm(taskVertexSet,workerPlan.getNumberOfWorkers(),workerPlan,this.cfg);
  TaskInstanceMapCalculation instanceMapCalculation=new TaskInstanceMapCalculation(this.instanceRAM,this.instanceCPU,this.instanceDisk);
  Map<Integer,Map<InstanceId,Double>> instancesRamMap=instanceMapCalculation.getInstancesRamMapInContainer(datalocalityAwareContainerInstanceMap,taskVertexSet);
  Map<Integer,Map<InstanceId,Double>> instancesDiskMap=instanceMapCalculation.getInstancesDiskMapInContainer(datalocalityAwareContainerInstanceMap,taskVertexSet);
  Map<Integer,Map<InstanceId,Double>> instancesCPUMap=instanceMapCalculation.getInstancesCPUMapInContainer(datalocalityAwareContainerInstanceMap,taskVertexSet);
  for (  int containerId : datalocalityAwareContainerInstanceMap.keySet()) {
    Double containerRAMValue=TaskSchedulerContext.containerRamPadding(cfg);
    Double containerDiskValue=TaskSchedulerContext.containerDiskPadding(cfg);
    Double containerCpuValue=TaskSchedulerContext.containerCpuPadding(cfg);
    List<InstanceId> taskInstanceIds=datalocalityAwareContainerInstanceMap.get(containerId);
    Map<InstanceId,TaskSchedulePlan.TaskInstancePlan> taskInstancePlanMap=new HashMap<>();
    for (    InstanceId id : taskInstanceIds) {
      double instanceRAMValue=instancesRamMap.get(containerId).get(id);
      double instanceDiskValue=instancesDiskMap.get(containerId).get(id);
      double instanceCPUValue=instancesCPUMap.get(containerId).get(id);
      Resource instanceResource=new Resource(instanceRAMValue,instanceDiskValue,instanceCPUValue);
      taskInstancePlanMap.put(id,new TaskSchedulePlan.TaskInstancePlan(id.getTaskName(),id.getTaskId(),id.getTaskIndex(),instanceResource));
      containerRAMValue+=instanceRAMValue;
      containerDiskValue+=instanceDiskValue;
      containerCpuValue+=instanceDiskValue;
    }
    Worker worker=workerPlan.getWorker(containerId);
    Resource containerResource;
    if (worker != null && worker.getCpu() > 0 && worker.getDisk() > 0 && worker.getRam() > 0) {
      containerResource=new Resource((double)worker.getRam(),(double)worker.getDisk(),(double)worker.getCpu());
      LOG.fine(String.format(""String_Node_Str"" + containerId + ""String_Node_Str""+ worker.getRam()+ ""String_Node_Str""+ worker.getDisk()+ ""String_Node_Str""+ worker.getCpu()));
    }
 else {
      containerResource=new Resource(containerRAMValue,containerDiskValue,containerCpuValue);
      LOG.fine(String.format(""String_Node_Str"" + containerId + ""String_Node_Str""+ containerRAMValue+ ""String_Node_Str""+ containerDiskValue+ ""String_Node_Str""+ containerCpuValue));
    }
    TaskSchedulePlan.ContainerPlan taskContainerPlan=new TaskSchedulePlan.ContainerPlan(containerId,new HashSet<>(taskInstancePlanMap.values()),containerResource);
    containerPlans.add(taskContainerPlan);
  }
  return new TaskSchedulePlan(taskSchedulePlanId,containerPlans);
}",0.9984467225846536
172922,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  executor=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=DataFlowContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=DataFlowContext.getShuffleMaxRecordsInMemory(cfg);
  String path=DataFlowContext.getShuffleDirectoryPath(cfg);
  worker=op.getTaskPlan().getThisExecutor();
  finishedSources=new HashMap<>();
  partition=(DataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
    totalReceives.put(target,0);
    finishedSources.put(target,new HashSet<>());
  }
}",0.9956427015250544
172923,"@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    if (finished.contains(source)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",executor,source));
    }
 else {
      finished.add(source);
    }
    if (finished.size() == partition.getSources().size()) {
      finishedTargets.add(target);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if ((flags & MessageFlags.EMPTY) == MessageFlags.EMPTY) {
    Set<Integer> finished=finishedSources.get(target);
    if (finished.contains(source)) {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",worker,source));
    }
 else {
      finished.add(source);
    }
    if (finished.size() == partition.getSources().size()) {
      finishedTargets.add(target);
    }
    return true;
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
    int total=totalReceives.get(target);
    total+=keyedContents.size();
    totalReceives.put(target,total);
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
    int total=totalReceives.get(target);
    total+=contents.size();
    totalReceives.put(target,total);
  }
  return true;
}",0.9955979457079972
172924,"@Override public void onFinish(int target){
  Shuffle sortedMerger=sortedMergers.get(target);
  sortedMerger.switchToReading();
  Iterator<Object> itr=sortedMerger.readIterator();
  try {
    batchReceiver.receive(target,itr);
  }
 catch (  RuntimeException e) {
    LOG.log(Level.INFO,""String_Node_Str"" + executor + ""String_Node_Str""+ target,e);
  }
}","@Override public void onFinish(int target){
  Shuffle sortedMerger=sortedMergers.get(target);
  sortedMerger.switchToReading();
  Iterator<Object> itr=sortedMerger.readIterator();
  batchReceiver.receive(target,itr);
}",0.7649122807017544
172925,"@Override public boolean onMessage(int src,int destination,int target,int flags,Object object){
  this.source=src;
  List<Object> dests=destinationMessages.get(destination);
  int size=dests.size();
  if (size > highWaterMark) {
    return false;
  }
  dests.add(object);
  if (dests.size() > lowWaterMark) {
    lock.lock();
    try {
      readyToSend.put(destination,new ArrayList<>(dests));
      dests.clear();
    }
  finally {
      lock.unlock();
    }
  }
  totals++;
  return true;
}","@Override public boolean onMessage(int src,int destination,int target,int flags,Object object){
  this.source=src;
  List<Object> dests=destinationMessages.get(destination);
  int size=dests.size();
  if (size > highWaterMark) {
    return false;
  }
  dests.add(object);
  if (dests.size() > lowWaterMark) {
    lock.lock();
    try {
      readyToSend.put(destination,new ArrayList<>(dests));
      dests.clear();
    }
  finally {
      lock.unlock();
    }
  }
  return true;
}",0.9876796714579056
172926,"@Override public void progress(){
  lock.lock();
  try {
    if (finish && readyToSend.isEmpty() && finishedDestinations.size() != destinations.size()) {
      for (      int dest : destinations) {
        if (!finishedDestinations.contains(dest)) {
          if (operation.sendPartial(source,new byte[1],MessageFlags.EMPTY,dest)) {
            finishedDestinations.add(dest);
          }
        }
      }
      return;
    }
    Iterator<Map.Entry<Integer,List<Object>>> it=readyToSend.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,List<Object>> e=it.next();
      List<Object> send=new ArrayList<>(e.getValue());
      if (operation.sendPartial(source,send,0,e.getKey())) {
        e.getValue().clear();
        it.remove();
      }
    }
  }
  finally {
    lock.unlock();
  }
}","@Override public void progress(){
  lock.lock();
  try {
    if (finish && readyToSend.isEmpty() && finishedDestinations.size() != destinations.size()) {
      for (      int dest : destinations) {
        if (!finishedDestinations.contains(dest)) {
          if (operation.sendPartial(source,new byte[1],MessageFlags.EMPTY,dest)) {
            finishedDestinations.add(dest);
          }
 else {
            break;
          }
        }
      }
      return;
    }
    Iterator<Map.Entry<Integer,List<Object>>> it=readyToSend.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,List<Object>> e=it.next();
      List<Object> send=new ArrayList<>(e.getValue());
      if (operation.sendPartial(source,send,0,e.getKey())) {
        e.getValue().clear();
        it.remove();
      }
    }
  }
  finally {
    lock.unlock();
  }
}",0.976491862567812
172927,"/** 
 * Method used to progress work
 */
public void progress(){
  for (  int t : messages.keySet()) {
    if (batchDone.get(t)) {
      continue;
    }
    boolean allFinished=true;
    Map<Integer,Queue<Object>> map=messages.get(t);
    Map<Integer,Boolean> finishedForTarget=finished.get(t);
    Map<Integer,Integer> countMap=counts.get(t);
    if (!isStoreBased) {
      boolean found=true;
      for (      Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
        if (e.getValue().size() == 0 && !finishedForTarget.get(e.getKey())) {
          found=false;
        }
        if (!finishedForTarget.get(e.getKey())) {
          allFinished=false;
        }
      }
      if (found) {
        List<Object> out=new ArrayList<>();
        for (        Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
          Queue<Object> valueList=e.getValue();
          if (valueList.size() > 0) {
            Object value=valueList.poll();
            out.add(value);
            allFinished=false;
          }
        }
        finalMessages.get(t).addAll(out);
      }
 else {
        allFinished=false;
      }
    }
 else {
      for (      Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
        if (!finishedForTarget.get(e.getKey())) {
          allFinished=false;
        }
      }
    }
    if (allFinished) {
      batchDone.put(t,true);
      if (!isStoreBased) {
        gatherBatchReceiver.receive(t,finalMessages.get(t).iterator());
      }
 else {
        gatherBatchReceiver.receive(t,memoryManagers.get(t).iterator());
      }
    }
  }
}","/** 
 * Method used to progress work
 */
public void progress(){
  for (  int t : messages.keySet()) {
    if (batchDone.get(t)) {
      continue;
    }
    boolean allFinished=true;
    Map<Integer,Queue<Object>> map=messages.get(t);
    Map<Integer,Boolean> finishedForTarget=finished.get(t);
    Map<Integer,Integer> countMap=counts.get(t);
    if (!isStoreBased) {
      boolean found=true;
      for (      Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
        if (e.getValue().size() == 0 && !finishedForTarget.get(e.getKey())) {
          found=false;
        }
        if (!finishedForTarget.get(e.getKey())) {
          allFinished=false;
        }
      }
      if (found) {
        List<Object> out=new ArrayList<>();
        for (        Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
          Queue<Object> valueList=e.getValue();
          if (valueList.size() > 0) {
            Object value=valueList.poll();
            out.add(value);
            allFinished=false;
          }
        }
        finalMessages.get(t).addAll(out);
      }
 else {
        allFinished=false;
      }
    }
 else {
      for (      Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
        if (!finishedForTarget.get(e.getKey())) {
          allFinished=false;
        }
      }
    }
    if (allFinished) {
      batchDone.put(t,true);
      if (!isStoreBased) {
        gatherBatchReceiver.receive(t,finalMessages.get(t).iterator());
      }
 else {
        gatherBatchReceiver.receive(t,memoryManagers.get(t).iterator());
      }
      onFinish(t);
    }
  }
}",0.9895204826929184
172928,"/** 
 * Method used to progress work
 */
public void progress(){
  for (  int t : messages.keySet()) {
    if (batchDone.get(t)) {
      continue;
    }
    boolean allFinished=true;
    Map<Integer,Queue<Object>> map=messages.get(t);
    Map<Integer,Boolean> finishedForTarget=finished.get(t);
    Map<Integer,Integer> countMap=counts.get(t);
    Map<Integer,Integer> totalCountMap=totalCounts.get(t);
    boolean found=true;
    for (    Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
      if (e.getValue().size() == 0 && !finishedForTarget.get(e.getKey())) {
        found=false;
      }
      if (!finishedForTarget.get(e.getKey())) {
        allFinished=false;
      }
    }
    if (found) {
      List<Object> out=new ArrayList<>();
      for (      Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
        Queue<Object> valueList=e.getValue();
        if (valueList.size() > 0) {
          Object value=valueList.poll();
          out.add(value);
          allFinished=false;
        }
      }
      for (      Map.Entry<Integer,Integer> e : countMap.entrySet()) {
        Integer i=e.getValue();
        e.setValue(i - 1);
      }
      finalMessages.get(t).addAll(out);
    }
 else {
      allFinished=false;
    }
    if (allFinished) {
      batchDone.put(t,true);
      Object previous=null;
      List<Object> finalMessagePerTask=finalMessages.get(t);
      for (int i=0; i < finalMessagePerTask.size(); i++) {
        if (previous == null) {
          previous=finalMessagePerTask.get(i);
        }
 else {
          Object current=finalMessagePerTask.get(i);
          previous=reduceFunction.reduce(previous,current);
        }
      }
      reduceReceiver.receive(t,previous);
    }
  }
}","/** 
 * Method used to progress work
 */
public void progress(){
  for (  int t : messages.keySet()) {
    if (batchDone.get(t)) {
      continue;
    }
    boolean allFinished=true;
    Map<Integer,Queue<Object>> map=messages.get(t);
    Map<Integer,Boolean> finishedForTarget=finished.get(t);
    Map<Integer,Integer> countMap=counts.get(t);
    Map<Integer,Integer> totalCountMap=totalCounts.get(t);
    boolean found=true;
    for (    Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
      if (e.getValue().size() == 0 && !finishedForTarget.get(e.getKey())) {
        found=false;
      }
      if (!finishedForTarget.get(e.getKey())) {
        allFinished=false;
      }
    }
    if (found) {
      List<Object> out=new ArrayList<>();
      for (      Map.Entry<Integer,Queue<Object>> e : map.entrySet()) {
        Queue<Object> valueList=e.getValue();
        if (valueList.size() > 0) {
          Object value=valueList.poll();
          out.add(value);
          allFinished=false;
        }
      }
      for (      Map.Entry<Integer,Integer> e : countMap.entrySet()) {
        Integer i=e.getValue();
        e.setValue(i - 1);
      }
      finalMessages.get(t).addAll(out);
    }
 else {
      allFinished=false;
    }
    if (allFinished) {
      batchDone.put(t,true);
      Object previous=null;
      List<Object> finalMessagePerTask=finalMessages.get(t);
      for (int i=0; i < finalMessagePerTask.size(); i++) {
        if (previous == null) {
          previous=finalMessagePerTask.get(i);
        }
 else {
          Object current=finalMessagePerTask.get(i);
          previous=reduceFunction.reduce(previous,current);
        }
      }
      reduceReceiver.receive(t,previous);
      onFinish(t);
    }
  }
}",0.9945070829719572
172929,"private Object buildMessage(MPIMessage mpiMessage,List<MPIBuffer> message,int length){
  MessageType type=mpiMessage.getType();
  if (keyed) {
    Pair<Integer,Object> keyPair=KeyDeserializer.deserializeKey(mpiMessage.getKeyType(),message,serializer);
    if (MessageTypeUtils.isMultiMessageType(mpiMessage.getKeyType())) {
      return DataDeserializer.deserializeData(message,length - keyPair.getKey(),serializer,type,((List)keyPair.getValue()).size());
    }
 else {
      return DataDeserializer.deserializeData(message,length - keyPair.getKey(),serializer,type);
    }
  }
 else {
    return DataDeserializer.deserializeData(message,length,serializer,type);
  }
}","private Object buildMessage(MPIMessage mpiMessage,List<MPIBuffer> message,int length){
  MessageType type=mpiMessage.getType();
  if (keyed) {
    Pair<Integer,Object> keyPair=KeyDeserializer.deserializeKey(mpiMessage.getKeyType(),message,serializer);
    Object data;
    if (MessageTypeUtils.isMultiMessageType(mpiMessage.getKeyType())) {
      data=DataDeserializer.deserializeData(message,length - keyPair.getKey(),serializer,type,((List)keyPair.getValue()).size());
    }
 else {
      data=DataDeserializer.deserializeData(message,length - keyPair.getKey(),serializer,type);
    }
    return new KeyedContent(keyPair.getValue(),data,mpiMessage.getKeyType(),mpiMessage.getType());
  }
 else {
    return DataDeserializer.deserializeData(message,length,serializer,type);
  }
}",0.7334254143646409
172930,"private boolean serializeKeyedData(Object content,Object key,SerializeState state,MPIBuffer targetBuffer,MessageType contentType,MessageType keyType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int keyLength=KeySerializer.serializeKey(key,keyType,state,serializer);
    int dataLength=DataSerializer.serializeData(content,contentType,state,serializer);
    LOG.info(String.format(""String_Node_Str"",executor,dataLength,byteBuffer.position()));
    if (!buildSubMessageHeader(targetBuffer,dataLength + keyLength)) {
      LOG.warning(""String_Node_Str"");
      return false;
    }
    state.setTotalBytes(state.getTotalBytes() + NORMAL_SUB_MESSAGE_HEADER_SIZE);
    LOG.info(String.format(""String_Node_Str"",executor,byteBuffer.position()));
    LOG.info(String.format(""String_Node_Str"",executor,state.getTotalBytes()));
  }
  if (state.getPart() == SerializeState.Part.INIT || state.getPart() == SerializeState.Part.HEADER) {
    boolean complete=KeySerializer.copyKeyToBuffer(key,keyType,targetBuffer.getByteBuffer(),state,serializer);
    LOG.info(String.format(""String_Node_Str"",executor,byteBuffer.position()));
    LOG.info(String.format(""String_Node_Str"",executor,state.getTotalBytes()));
    if (complete) {
      state.setPart(SerializeState.Part.BODY);
    }
 else {
      state.setPart(SerializeState.Part.HEADER);
    }
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,contentType,byteBuffer,state,serializer);
  LOG.info(String.format(""String_Node_Str"",executor,byteBuffer.position()));
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    LOG.info(String.format(""String_Node_Str"",executor,state.getTotalBytes()));
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}","private boolean serializeKeyedData(Object content,Object key,SerializeState state,MPIBuffer targetBuffer,MessageType contentType,MessageType keyType){
  ByteBuffer byteBuffer=targetBuffer.getByteBuffer();
  if (state.getPart() == SerializeState.Part.INIT) {
    int keyLength=KeySerializer.serializeKey(key,keyType,state,serializer);
    int dataLength=DataSerializer.serializeData(content,contentType,state,serializer);
    if (!buildSubMessageHeader(targetBuffer,dataLength + keyLength)) {
      LOG.warning(""String_Node_Str"");
      return false;
    }
    state.setTotalBytes(state.getTotalBytes() + NORMAL_SUB_MESSAGE_HEADER_SIZE);
  }
  if (state.getPart() == SerializeState.Part.INIT || state.getPart() == SerializeState.Part.HEADER) {
    boolean complete=KeySerializer.copyKeyToBuffer(key,keyType,targetBuffer.getByteBuffer(),state,serializer);
    if (complete) {
      state.setPart(SerializeState.Part.BODY);
    }
 else {
      state.setPart(SerializeState.Part.HEADER);
    }
  }
  if (state.getPart() != SerializeState.Part.BODY) {
    return false;
  }
  boolean completed=DataSerializer.copyDataToBuffer(content,contentType,byteBuffer,state,serializer);
  targetBuffer.setSize(byteBuffer.position());
  if (completed) {
    state.setBytesCopied(0);
    state.setBufferNo(0);
    state.setData(null);
    state.setPart(SerializeState.Part.INIT);
    state.setKeySize(0);
    return true;
  }
 else {
    return false;
  }
}",0.8029069767441861
172931,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  partition=(MPIDataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    finished.put(target,perTarget);
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  partition=(MPIDataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    finished.put(target,perTarget);
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
  }
}",0.9972495088408644
172932,"public PartitionBatchFinalReceiver(GatherBatchReceiver receiver,boolean srt,boolean d){
  this.batchReceiver=receiver;
  this.sorted=srt;
  this.disk=d;
  this.kryoSerializer=new KryoSerializer();
}","public PartitionBatchFinalReceiver(GatherBatchReceiver receiver,boolean srt,boolean d,Comparator<Object> com){
  this.batchReceiver=receiver;
  this.sorted=srt;
  this.disk=d;
  this.kryoSerializer=new KryoSerializer();
  this.comparator=com;
}",0.8959276018099548
172933,"/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(key,data,keyComparator));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(convertKeyToArray(key),data,keyComparator));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}",0.9768732654949122
172934,"FSIterator(){
  heap=new Heap(noOfFileWritten + 1,keyComparator);
  maxMemoryPerFile=maxBytesToKeepInMemory / noOfFileWritten;
  for (int i=0; i < noOfFileWritten; i++) {
    OpenFilePart part=FileLoader.openPart(getSaveFileName(i),0,maxMemoryPerFile,keyType,dataType,kryoSerializer);
    openFiles.put(i,part);
  }
  openFiles.put(-1,new OpenFilePart(objectsInMemory,0,0,null));
  for (  Map.Entry<Integer,OpenFilePart> e : openFiles.entrySet()) {
    OpenFilePart part=e.getValue();
    if (part.hasNext()) {
      KeyValue keyValue=part.next();
      heap.insert(keyValue,e.getKey());
      numValuesInHeap++;
    }
 else {
      LOG.log(Level.WARNING,""String_Node_Str"" + part.getFileName());
    }
  }
}","FSIterator(){
  heap=new Heap(noOfFileWritten + 1,keyComparator);
  if (noOfFileWritten > 0) {
    maxMemoryPerFile=maxBytesToKeepInMemory / noOfFileWritten;
  }
 else {
    maxMemoryPerFile=maxBytesToKeepInMemory;
  }
  for (int i=0; i < noOfFileWritten; i++) {
    OpenFilePart part=FileLoader.openPart(getSaveFileName(i),0,maxMemoryPerFile,keyType,dataType,kryoSerializer);
    openFiles.put(i,part);
  }
  openFiles.put(-1,new OpenFilePart(objectsInMemory,0,0,null));
  for (  Map.Entry<Integer,OpenFilePart> e : openFiles.entrySet()) {
    OpenFilePart part=e.getValue();
    if (part.hasNext()) {
      KeyValue keyValue=part.next();
      heap.insert(keyValue,e.getKey());
      numValuesInHeap++;
    }
 else {
      LOG.log(Level.WARNING,String.format(""String_Node_Str"",part.getFileName(),target));
    }
  }
}",0.9226736566186108
172935,"public FSKeyedSortedMerger(int maxBytesInMemory,int maxRecsInMemory,String dir,String opName,MessageType kType,MessageType dType,Comparator<Object> kComparator){
  this.maxBytesToKeepInMemory=maxBytesInMemory;
  this.maxRecordsInMemory=maxRecsInMemory;
  this.folder=dir;
  this.operationName=opName;
  this.keyType=kType;
  this.dataType=dType;
  this.keyComparator=kComparator;
  this.kryoSerializer=new KryoMemorySerializer();
}","public FSKeyedSortedMerger(int maxBytesInMemory,int maxRecsInMemory,String dir,String opName,MessageType kType,MessageType dType,Comparator<Object> kComparator,int tar){
  this.maxBytesToKeepInMemory=maxBytesInMemory;
  this.maxRecordsInMemory=maxRecsInMemory;
  this.folder=dir;
  this.operationName=opName;
  this.keyType=kType;
  this.dataType=dType;
  this.keyComparator=kComparator;
  this.kryoSerializer=new KryoMemorySerializer();
  this.target=tar;
}",0.96962879640045
172936,"@Before public void before() throws Exception {
  fsMerger=new FSKeyedSortedMerger(1000,100,""String_Node_Str"",""String_Node_Str"",MessageType.INTEGER,MessageType.OBJECT,new KeyComparator());
  random=new Random();
  serializer=new KryoSerializer();
}","@Before public void before() throws Exception {
  fsMerger=new FSKeyedSortedMerger(1000,100,""String_Node_Str"",""String_Node_Str"",MessageType.INTEGER,MessageType.OBJECT,new KeyComparator(),0);
  random=new Random();
  serializer=new KryoSerializer();
}",0.9959839357429718
172937,"@Override public void init(Config cfg,int containerId,ResourcePlan plan){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=containerId;
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  setupTasks();
  setupNetwork();
  partition=new MPIDataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),true,true),new PartitionPartialReceiver(),MPIDataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}","@Override public void init(Config cfg,int containerId,ResourcePlan plan){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=containerId;
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  setupTasks();
  setupNetwork();
  partition=new MPIDataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),true,true,new IntegerComparator()),new PartitionPartialReceiver(),MPIDataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}",0.9812206572769951
172938,"@Override public void init(Config cfg,DataFlowOperation op,Map<Integer,Map<Integer,List<Integer>>> exp){
  Map<Integer,List<Integer>> expectedIds=exp.get(0);
  for (  Map.Entry<Integer,List<Integer>> e : expectedIds.entrySet()) {
    Map<Integer,List<Object>> messagesPerTask=new HashMap<>();
    Map<Integer,Integer> countsPerTask=new HashMap<>();
    for (    int i : e.getValue()) {
      messagesPerTask.put(i,new ArrayList<Object>());
      countsPerTask.put(i,0);
    }
    messages.put(e.getKey(),messagesPerTask);
    counts.put(e.getKey(),countsPerTask);
  }
  LOG.info(String.format(""String_Node_Str"",expectedIds));
}","@Override public void init(Config cfg,DataFlowOperation operation,Map<Integer,Map<Integer,List<Integer>>> exp){
  Map<Integer,List<Integer>> expectedIds=exp.get(0);
  for (  Map.Entry<Integer,List<Integer>> e : expectedIds.entrySet()) {
    Map<Integer,List<Object>> messagesPerTask=new HashMap<>();
    Map<Integer,Integer> countsPerTask=new HashMap<>();
    for (    int i : e.getValue()) {
      messagesPerTask.put(i,new ArrayList<Object>());
      countsPerTask.put(i,0);
    }
    messages.put(e.getKey(),messagesPerTask);
    counts.put(e.getKey(),countsPerTask);
  }
  LOG.info(String.format(""String_Node_Str"",expectedIds));
}",0.9944488501189532
172939,"public void prepare(Set<Integer> srcs,int dest,EdgeGenerator e,DataType dataType,String edgeName,Config config,TaskPlan taskPlan){
  LOG.info(""String_Node_Str"" + edgeName);
  this.edge=e;
  communicationEdge=e.generate(edgeName);
  op=new MPIDataFlowGather(channel,srcs,dest,new GatherReceiver(),0,0,config,MessageType.INTEGER,taskPlan,e.getIntegerMapping(edgeName));
  LOG.info(""String_Node_Str"" + e.getIntegerMapping(edgeName));
  op.init(config,Utils.dataTypeToMessageType(dataType),taskPlan,communicationEdge);
}","public void prepare(Set<Integer> srcs,int dest,EdgeGenerator e,DataType dataType,String edgeName,Config config,TaskPlan taskPlan){
  this.edge=e;
  op=new MPIDataFlowGather(channel,srcs,dest,new GatherReceiver(),0,0,config,MessageType.INTEGER,taskPlan,0);
  communicationEdge=e.generate(edgeName);
  op.init(config,Utils.dataTypeToMessageType(dataType),taskPlan,communicationEdge);
}",0.5717463848720801
172940,"@Override public boolean onMessage(int source,int destination,int target,int flags,Object object){
  TaskMessage msg=new TaskMessage(object,edge.getStringMapping(communicationEdge),target);
  LOG.info(""String_Node_Str"" + msg.getContent());
  return outMessages.get(target).offer(msg);
}","@Override public boolean onMessage(int source,int destination,int target,int flags,Object object){
  TaskMessage msg=new TaskMessage(object,edge.getStringMapping(communicationEdge),target);
  LOG.info(""String_Node_Str"" + object.getClass().getName());
  boolean status=outMessages.get(target).offer(msg);
  LOG.info(""String_Node_Str"" + status);
  return status;
}",0.7067901234567902
172941,"@Override public boolean receive(int target,Object object){
  count++;
  if (count > 5900 || count % 10 == 0) {
  }
  TaskMessage msg=new TaskMessage(object,edge.getStringMapping(communicationEdge),target);
  outMessages.get(target).offer(msg);
  return true;
}","@Override public boolean receive(int target,Object object){
  TaskMessage msg=new TaskMessage(object,edge.getStringMapping(communicationEdge),target);
  outMessages.get(target).offer(msg);
  return true;
}",0.8798283261802575
172942,"@Override public void init(Config cfg,DataFlowOperation operation,Map<Integer,Map<Integer,List<Integer>>> exp){
  Map<Integer,List<Integer>> expectedIds=exp.get(0);
  for (  Map.Entry<Integer,List<Integer>> e : expectedIds.entrySet()) {
    Map<Integer,List<Object>> messagesPerTask=new HashMap<>();
    Map<Integer,Integer> countsPerTask=new HashMap<>();
    for (    int i : e.getValue()) {
      messagesPerTask.put(i,new ArrayList<Object>());
      countsPerTask.put(i,0);
    }
    messages.put(e.getKey(),messagesPerTask);
    counts.put(e.getKey(),countsPerTask);
  }
  LOG.info(String.format(""String_Node_Str"",expectedIds));
}","@Override public void init(Config cfg,DataFlowOperation operation,Map<Integer,Map<Integer,List<Integer>>> exp){
  Map<Integer,List<Integer>> expectedIds=exp.get(8);
  for (  Map.Entry<Integer,List<Integer>> e : expectedIds.entrySet()) {
    Map<Integer,List<Object>> messagesPerTask=new HashMap<>();
    Map<Integer,Integer> countsPerTask=new HashMap<>();
    for (    int i : e.getValue()) {
      messagesPerTask.put(i,new ArrayList<Object>());
      countsPerTask.put(i,0);
    }
    messages.put(e.getKey(),messagesPerTask);
    counts.put(e.getKey(),countsPerTask);
  }
  LOG.info(String.format(""String_Node_Str"",expectedIds));
}",0.998422712933754
172943,"@Override public void onFinish(int target){
}","@Override public void onFinish(int target){
  lock.lock();
  try {
    for (    Map.Entry<Integer,List<Object>> e : destinationMessages.entrySet()) {
      List<Object> messages=new ArrayList<>();
      Integer key=e.getKey();
      if (readyToSend.containsKey(key)) {
        messages=readyToSend.get(key);
      }
 else {
        readyToSend.put(key,messages);
      }
      messages.addAll(e.getValue());
    }
  }
  finally {
    lock.unlock();
  }
}",0.1763527054108216
172944,"/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(key,data));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  lock.lock();
  Object k1=FileLoader.convertKeyToArray(keyType,key);
  try {
    recordsInMemory.add(new KeyValue(k1,data));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}",0.9466911764705882
172945,"public void switchToReading(){
  status=FSStatus.READING;
  deserializeObjects();
}","public void switchToReading(){
  lock.lock();
  try {
    status=FSStatus.READING;
    deserializeObjects();
  }
  finally {
    lock.unlock();
  }
}",0.7155172413793104
172946,"/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object k1=convertKeyToArray(key);
  int[] k=(int[])k1;
  try {
    int i=k[0];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  LOG.log(Level.INFO,""String_Node_Str"" + target + ""String_Node_Str""+ recordsInMemory.size());
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(k1,data,keyComparator));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object k1=FileLoader.convertKeyToArray(keyType,key);
  int[] k=(int[])k1;
  try {
    int i=k[0];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  LOG.log(Level.INFO,""String_Node_Str"" + target + ""String_Node_Str""+ recordsInMemory.size());
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(k1,data,keyComparator));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}",0.9884357881923312
172947,"@Override public void init(Config cfg,int containerId,ResourcePlan plan){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=containerId;
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  setupTasks();
  setupNetwork();
  partition=new MPIDataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),true,true,new IntegerComparator()),new PartitionPartialReceiver(),MPIDataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}","@Override public void init(Config cfg,int containerId,ResourcePlan plan){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=containerId;
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  setupTasks();
  setupNetwork();
  partition=new MPIDataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),false,true,new IntegerComparator()),new PartitionPartialReceiver(),MPIDataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}",0.9946277820414428
172948,"private void scheduleTasks(){
  if (id < 2) {
    for (int i=0; i < noOfTasksPerExecutor; i++) {
      Thread mapThread=new Thread(new RecordSource(config,partition,new ArrayList<>(destinations),id,1000,10000,NO_OF_TASKS / 2));
      mapThread.start();
    }
  }
}","private void scheduleTasks(){
  if (id < NO_OF_TASKS / 2) {
    for (int i=0; i < noOfTasksPerExecutor; i++) {
      Thread mapThread=new Thread(new RecordSource(config,partition,new ArrayList<>(destinations),id,1000,10000,NO_OF_TASKS / 2));
      mapThread.start();
    }
  }
}",0.974169741697417
172949,"public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(SortJob.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),4);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}","public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(SortJob.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),NO_OF_TASKS);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}",0.9873684210526316
172950,"public boolean sendMessage(int source,Object message,int path,int flags,RoutingParameters routingParameters){
  ArrayBlockingQueue<Pair<Object,MPISendMessage>> pendingSendMessages=pendingSendMessagesPerSource.get(source);
  if (pendingSendMessages.remainingCapacity() > 0) {
    MPIMessage mpiMessage=new MPIMessage(source,dataType,MPIMessageDirection.OUT,this);
    int di=-1;
    if (routingParameters.getExternalRoutes().size() > 0) {
      di=routingParameters.getDestinationId();
    }
    MPISendMessage sendMessage=new MPISendMessage(source,mpiMessage,edge,di,path,flags,routingParameters.getInternalRoutes(),routingParameters.getExternalRoutes());
    boolean offer=pendingSendMessages.offer(new ImmutablePair<Object,MPISendMessage>(message,sendMessage));
    if (!offer) {
      sendAttempts++;
    }
 else {
      ((TWSMPIChannel)channel).setDebug(false);
      sendAttempts=0;
      sendsOfferred++;
    }
    return offer;
  }
  return false;
}","public boolean sendMessage(int source,Object message,int path,int flags,RoutingParameters routingParameters){
  ArrayBlockingQueue<Pair<Object,MPISendMessage>> pendingSendMessages=pendingSendMessagesPerSource.get(source);
  if (pendingSendMessages == null) {
    throw new RuntimeException(String.format(""String_Node_Str"",executor,source));
  }
  if (pendingSendMessages.remainingCapacity() > 0) {
    MPIMessage mpiMessage=new MPIMessage(source,dataType,MPIMessageDirection.OUT,this);
    int di=-1;
    if (routingParameters.getExternalRoutes().size() > 0) {
      di=routingParameters.getDestinationId();
    }
    MPISendMessage sendMessage=new MPISendMessage(source,mpiMessage,edge,di,path,flags,routingParameters.getInternalRoutes(),routingParameters.getExternalRoutes());
    boolean offer=pendingSendMessages.offer(new ImmutablePair<Object,MPISendMessage>(message,sendMessage));
    if (!offer) {
      sendAttempts++;
    }
 else {
      ((TWSMPIChannel)channel).setDebug(false);
      sendAttempts=0;
      sendsOfferred++;
    }
    return offer;
  }
  return false;
}",0.9395577395577396
172951,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    finished.put(target,perTarget);
    Shuffle sortedMerger;
    partition=(MPIDataFlowPartition)op;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
  }
  keyed=partition.getKeyType() != null;
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  partition=(MPIDataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    finished.put(target,perTarget);
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
  }
}",0.9377952755905512
172952,"@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
  }
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  Shuffle sortedMerger=sortedMergers.get(target);
  if (sortedMerger == null) {
    throw new RuntimeException(""String_Node_Str"" + target);
  }
  LOG.info(String.format(""String_Node_Str"",target));
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
  }
  return true;
}",0.9656957928802588
172953,"@Override public void run(){
  for (int i=0; i < noOfWords; i++) {
    Record word=recordGenerator.next();
    int destIndex=0;
    int val=word.getKey();
    for (int j=0; j < partitioning.size() - 1; j++) {
      if (val > partitioning.get(j) && val <= partitioning.get(j + 1)) {
        destIndex=j;
      }
    }
    int dest=destinations.get(destIndex);
    int flags=0;
    if (i >= (noOfWords - noOfDestinations)) {
      flags=MessageFlags.FLAGS_LAST;
    }
    while (!operation.send(taskId,new KeyedContent(word.getKey(),word.getData(),MessageType.INTEGER,MessageType.BYTE),flags,dest)) {
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  operation.finish(taskId);
}","@Override public void run(){
  for (int i=0; i < noOfWords; i++) {
    Record word=recordGenerator.next();
    int destIndex=0;
    int val=word.getKey();
    for (int j=0; j < partitioning.size() - 1; j++) {
      if (val > partitioning.get(j) && val <= partitioning.get(j + 1)) {
        destIndex=j;
      }
    }
    int dest=destinations.get(destIndex);
    int flags=0;
    if (i >= (noOfWords - noOfDestinations)) {
      flags=MessageFlags.FLAGS_LAST;
    }
    LOG.log(Level.INFO,String.format(""String_Node_Str"",executor,taskId,dest));
    while (!operation.send(taskId,new KeyedContent(word.getKey(),word.getData(),MessageType.INTEGER,MessageType.BYTE),flags,dest)) {
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  operation.finish(taskId);
}",0.9505941213258288
172954,"@Override public void init(Config cfg,int containerId,ResourcePlan plan){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=containerId;
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  setupTasks();
  setupNetwork();
  partition=new MPIDataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),true,true),new PartitionPartialReceiver(),MPIDataFlowPartition.PartitionStratergy.DIRECT,MessageType.OBJECT,MessageType.OBJECT,null,null,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}","@Override public void init(Config cfg,int containerId,ResourcePlan plan){
  this.config=cfg;
  this.resourcePlan=plan;
  this.id=containerId;
  this.noOfTasksPerExecutor=NO_OF_TASKS / plan.noOfContainers();
  setupTasks();
  setupNetwork();
  partition=new MPIDataFlowPartition(config,channel,taskPlan,sources,destinations,new PartitionBatchFinalReceiver(new RecordSave(),true,true),new PartitionPartialReceiver(),MPIDataFlowPartition.PartitionStratergy.DIRECT,MessageType.BYTE,MessageType.BYTE,MessageType.INTEGER,MessageType.INTEGER,OperationSemantics.STREAMING_BATCH,new EdgeGenerator(0));
  scheduleTasks();
  progress();
}",0.9462540716612378
172955,"private void setupTasks(){
  taskPlan=WordCountUtils.createWordCountPlan(config,resourcePlan,NO_OF_TASKS + 2);
  sources=new HashSet<>();
  for (int i=0; i < NO_OF_TASKS / 2; i++) {
    sources.add(i);
  }
  destinations=new HashSet<>();
  for (int i=0; i < NO_OF_TASKS / 2; i++) {
    destinations.add(NO_OF_TASKS / 2 + i);
  }
}","private void setupTasks(){
  taskPlan=WordCountUtils.createWordCountPlan(config,resourcePlan,NO_OF_TASKS);
  sources=new HashSet<>();
  for (int i=0; i < NO_OF_TASKS / 2; i++) {
    sources.add(i);
  }
  destinations=new HashSet<>();
  for (int i=0; i < NO_OF_TASKS / 2; i++) {
    destinations.add(NO_OF_TASKS / 2 + i);
  }
}",0.9939024390243902
172956,"public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(SortJob.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),1);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}","public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(SortJob.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),4);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}",0.997872340425532
172957,"/** 
 * Let assume we have 2 tasks per container and one additional for first container, which will be the destination
 * @param plan the resource plan from scheduler
 * @return task plan
 */
public static TaskPlan createWordCountPlan(Config cfg,ResourcePlan plan,int noOfTasks){
  int noOfProcs=plan.noOfContainers();
  Map<Integer,Set<Integer>> executorToGraphNodes=new HashMap<>();
  Map<Integer,Set<Integer>> groupsToExeuctors=new HashMap<>();
  int thisExecutor=plan.getThisId();
  List<ResourceContainer> containers=plan.getContainers();
  Map<String,List<ResourceContainer>> containersPerNode=new HashMap<>();
  for (  ResourceContainer c : containers) {
    String name=(String)c.getProperty(SchedulerContext.WORKER_NAME);
    List<ResourceContainer> containerList;
    if (!containersPerNode.containsKey(name)) {
      containerList=new ArrayList<>();
      containersPerNode.put(name,containerList);
    }
 else {
      containerList=containersPerNode.get(name);
    }
    containerList.add(c);
  }
  int taskPerExecutor=noOfTasks / noOfProcs;
  for (int i=0; i < noOfProcs; i++) {
    Set<Integer> nodesOfExecutor=new HashSet<>();
    for (int j=0; j < taskPerExecutor; j++) {
      nodesOfExecutor.add(i * taskPerExecutor + j);
    }
    executorToGraphNodes.put(i,nodesOfExecutor);
  }
  int i=0;
  for (  Map.Entry<String,List<ResourceContainer>> e : containersPerNode.entrySet()) {
    Set<Integer> executorsOfGroup=new HashSet<>();
    for (    ResourceContainer c : e.getValue()) {
      executorsOfGroup.add(c.getId());
    }
    groupsToExeuctors.put(i,executorsOfGroup);
    i++;
  }
  LOG.fine(String.format(""String_Node_Str"",plan.getThisId(),executorToGraphNodes));
  LOG.fine(String.format(""String_Node_Str"",plan.getThisId(),groupsToExeuctors));
  return new TaskPlan(executorToGraphNodes,groupsToExeuctors,thisExecutor);
}","/** 
 * Let assume we have 2 tasks per container and one additional for first container, which will be the destination
 * @param plan the resource plan from scheduler
 * @return task plan
 */
public static TaskPlan createWordCountPlan(Config cfg,ResourcePlan plan,int noOfTasks){
  int noOfProcs=plan.noOfContainers();
  Map<Integer,Set<Integer>> executorToGraphNodes=new HashMap<>();
  Map<Integer,Set<Integer>> groupsToExeuctors=new HashMap<>();
  int thisExecutor=plan.getThisId();
  List<ResourceContainer> containers=plan.getContainers();
  Map<String,List<ResourceContainer>> containersPerNode=new HashMap<>();
  for (  ResourceContainer c : containers) {
    String name=(String)c.getProperty(SchedulerContext.WORKER_NAME);
    List<ResourceContainer> containerList;
    if (!containersPerNode.containsKey(name)) {
      containerList=new ArrayList<>();
      containersPerNode.put(name,containerList);
    }
 else {
      containerList=containersPerNode.get(name);
    }
    containerList.add(c);
  }
  int taskPerExecutor=noOfTasks / noOfProcs;
  for (int i=0; i < noOfProcs; i++) {
    Set<Integer> nodesOfExecutor=new HashSet<>();
    for (int j=0; j < taskPerExecutor; j++) {
      nodesOfExecutor.add(i * taskPerExecutor + j);
    }
    if (i == 0) {
      nodesOfExecutor.add(noOfTasks);
    }
    executorToGraphNodes.put(i,nodesOfExecutor);
  }
  int i=0;
  for (  Map.Entry<String,List<ResourceContainer>> e : containersPerNode.entrySet()) {
    Set<Integer> executorsOfGroup=new HashSet<>();
    for (    ResourceContainer c : e.getValue()) {
      executorsOfGroup.add(c.getId());
    }
    groupsToExeuctors.put(i,executorsOfGroup);
    i++;
  }
  LOG.fine(String.format(""String_Node_Str"",plan.getThisId(),executorToGraphNodes));
  LOG.fine(String.format(""String_Node_Str"",plan.getThisId(),groupsToExeuctors));
  return new TaskPlan(executorToGraphNodes,groupsToExeuctors,thisExecutor);
}",0.9834842834310068
172958,"public static void main(String[] args){
  Options cmdOptions=null;
  try {
    MPI.Init(args);
    int rank=MPI.COMM_WORLD.getRank();
    int size=MPI.COMM_WORLD.getSize();
    cmdOptions=setupOptions();
    CommandLineParser parser=new DefaultParser();
    CommandLine cmd=parser.parse(cmdOptions,args);
    Config config=loadConfigurations(cmd,rank);
    LOG.log(Level.FINE,""String_Node_Str"");
    worker(config,rank);
  }
 catch (  MPIException e) {
    LOG.log(Level.SEVERE,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",cmdOptions);
    throw new RuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      MPI.Finalize();
    }
 catch (    MPIException ignore) {
    }
  }
}","public static void main(String[] args){
  Options cmdOptions=null;
  try {
    MPI.Init(args);
    int rank=MPI.COMM_WORLD.getRank();
    int size=MPI.COMM_WORLD.getSize();
    cmdOptions=setupOptions();
    CommandLineParser parser=new DefaultParser();
    CommandLine cmd=parser.parse(cmdOptions,args);
    Config config=loadConfigurations(cmd,rank);
    LOG.log(Level.FINE,""String_Node_Str"");
    worker(config,rank);
  }
 catch (  MPIException e) {
    LOG.log(Level.SEVERE,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",cmdOptions);
    throw new RuntimeException(""String_Node_Str"",e);
  }
catch (  Throwable t) {
    String msg=""String_Node_Str"";
    LOG.log(Level.SEVERE,msg,t);
    throw new RuntimeException(msg);
  }
 finally {
    try {
      MPI.Finalize();
    }
 catch (    MPIException ignore) {
    }
  }
}",0.9258426966292136
172959,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  partition=(MPIDataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    finished.put(target,perTarget);
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  executor=op.getTaskPlan().getThisExecutor();
  finished=new ConcurrentHashMap<>();
  partition=(MPIDataFlowPartition)op;
  keyed=partition.getKeyType() != null;
  for (  Integer target : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(target)) {
      perTarget.put(exp,false);
    }
    finished.put(target,perTarget);
    Shuffle sortedMerger;
    if (partition.getKeyType() == null) {
      sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getDataType());
    }
 else {
      if (sorted) {
        sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType(),comparator,target);
      }
 else {
        sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(target),partition.getKeyType(),partition.getDataType());
      }
    }
    sortedMergers.put(target,sortedMerger);
  }
}",0.9819161215852252
172960,"@Override public void onFinish(int target){
  Shuffle sortedMerger=sortedMergers.get(target);
  sortedMerger.switchToReading();
  Iterator<Object> itr=sortedMerger.readIterator();
  batchReceiver.receive(target,itr);
}","@Override public void onFinish(int target){
  Shuffle sortedMerger=sortedMergers.get(target);
  sortedMerger.switchToReading();
  Iterator<Object> itr=sortedMerger.readIterator();
  try {
    batchReceiver.receive(target,itr);
  }
 catch (  RuntimeException e) {
    LOG.log(Level.INFO,""String_Node_Str"" + executor + ""String_Node_Str""+ target,e);
  }
}",0.7649122807017544
172961,"/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(convertKeyToArray(key),data,keyComparator));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Add the data to the file
 * @param data
 * @param length
 */
public void add(Object key,byte[] data,int length){
  if (status == FSStatus.READING) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Object k1=convertKeyToArray(key);
  int[] k=(int[])k1;
  try {
    int i=k[0];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  LOG.log(Level.INFO,""String_Node_Str"" + target + ""String_Node_Str""+ recordsInMemory.size());
  lock.lock();
  try {
    recordsInMemory.add(new KeyValue(k1,data,keyComparator));
    bytesLength.add(length);
    numOfBytesInMemory+=length;
    if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
      notFull.signal();
    }
  }
  finally {
    lock.unlock();
  }
}",0.6005873715124816
172962,"public void switchToReading(){
  status=FSStatus.READING;
  deserializeObjects();
  Collections.sort(objectsInMemory);
}","public void switchToReading(){
  status=FSStatus.READING;
  for (  KeyValue k1 : objectsInMemory) {
    int[] k=(int[])k1.getKey();
    try {
      int i=k[0];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  Collections.sort(objectsInMemory);
  for (  KeyValue k1 : objectsInMemory) {
    int[] k=(int[])k1.getKey();
    try {
      int i=k[0];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.3221884498480243
172963,"public void insert(KeyValue data,int listNo){
  if (position == 0) {
    heap[position + 1]=new HeapNode(data,listNo);
    position=2;
  }
 else {
    heap[position++]=new HeapNode(data,listNo);
    bubbleUp();
  }
}","public void insert(KeyValue data,int listNo){
  int[] key=(int[])data.getKey();
  try {
    int i=key[0];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw e;
  }
  if (position == 0) {
    heap[position + 1]=new HeapNode(data,listNo);
    position=2;
  }
 else {
    heap[position++]=new HeapNode(data,listNo);
    bubbleUp();
  }
}",0.7728085867620751
172964,"@Override public boolean send(int src,Object message,int flags,int dest){
  return delegete.sendMessage(src,message,dest,flags,sendRoutingParameters(src,0));
}","@Override public boolean send(int src,Object message,int flags,int dest){
  RoutingParameters routingParameters=sendRoutingParameters(src,0);
  return delegete.sendMessage(src,message,dest,flags,routingParameters);
}",0.576
172965,"@Override public void onReceiveComplete(int id,int e,MPIBuffer buffer){
  MPIMessage currentMessage=currentMessages.get(id);
  ByteBuffer byteBuffer=buffer.getByteBuffer();
  byteBuffer.position(buffer.getSize());
  byteBuffer.flip();
  receiveCount++;
  if (currentMessage == null) {
    currentMessage=new MPIMessage(id,type,MPIMessageDirection.IN,this);
    if (isKeyed) {
      currentMessage.setKeyType(keyType);
    }
    currentMessages.put(id,currentMessage);
    MessageHeader header=messageDeSerializer.get(id).buildHeader(buffer,e);
    currentMessage.setHeader(header);
    currentMessage.setHeaderSize(16);
  }
  currentMessage.addBuffer(buffer);
  currentMessage.build();
  if (currentMessage.isComplete()) {
    currentMessages.remove(id);
    Queue<MPIMessage> deserializeQueue=pendingReceiveDeSerializations.get(id);
    if (!deserializeQueue.offer(currentMessage)) {
      throw new RuntimeException(executor + ""String_Node_Str"" + deserializeQueue.size());
    }
  }
}","@Override public void onReceiveComplete(int id,int e,MPIBuffer buffer){
  MPIMessage currentMessage=currentMessages.get(id);
  ByteBuffer byteBuffer=buffer.getByteBuffer();
  byteBuffer.position(buffer.getSize());
  byteBuffer.flip();
  receiveCount++;
  if (currentMessage == null) {
    currentMessage=new MPIMessage(id,type,MPIMessageDirection.IN,this);
    if (isKeyed) {
      currentMessage.setKeyType(keyType);
    }
    currentMessages.put(id,currentMessage);
    MessageHeader header=messageDeSerializer.get(id).buildHeader(buffer,e);
    currentMessage.setHeader(header);
    currentMessage.setHeaderSize(16);
  }
  currentMessage.addBuffer(buffer);
  currentMessage.build();
  if (currentMessage.isComplete()) {
    currentMessages.remove(id);
    LOG.info(String.format(""String_Node_Str"",executor,id));
    Queue<MPIMessage> deserializeQueue=pendingReceiveDeSerializations.get(id);
    if (!deserializeQueue.offer(currentMessage)) {
      throw new RuntimeException(executor + ""String_Node_Str"" + deserializeQueue.size());
    }
  }
}",0.970472440944882
172966,"@Override public ExecutionPlan schedule(Config cfg,DataFlowTaskGraph taskGraph,TaskSchedulePlan taskSchedule){
  noOfThreads=ExecutorContext.threadsPerContainer(cfg);
  TaskPlan taskPlan=TaskPlanBuilder.build(resourcePlan,taskSchedule,taskIdGenerator);
  ParallelOperationFactory opFactory=new ParallelOperationFactory(cfg,network.getChannel(),taskPlan,edgeGenerator);
  Map<Integer,TaskSchedulePlan.ContainerPlan> containersMap=taskSchedule.getContainersMap();
  TaskSchedulePlan.ContainerPlan conPlan=containersMap.get(workerId);
  if (conPlan == null) {
    LOG.log(Level.INFO,""String_Node_Str"" + workerId);
    return null;
  }
  ExecutionPlan execution=new ExecutionPlan();
  execution.setNumThreads(noOfThreads);
  Set<TaskSchedulePlan.TaskInstancePlan> instancePlan=conPlan.getTaskInstances();
  for (  TaskSchedulePlan.TaskInstancePlan ip : instancePlan) {
    Vertex v=taskGraph.vertex(ip.getTaskName());
    if (v == null) {
      throw new RuntimeException(""String_Node_Str"" + ip.getTaskName());
    }
    INode node=v.getTask();
    if (node instanceof ITask || node instanceof ISource) {
      Set<Edge> edges=taskGraph.outEdges(v);
      for (      Edge e : edges) {
        Vertex child=taskGraph.childOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(child.getName(),getTaskIdOfTask(child.getName(),taskSchedule),taskGraph);
        if (!parOpTable.contains(v.getName(),e.getName())) {
          parOpTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
          sendTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
        }
      }
    }
    if (node instanceof ITask || node instanceof ISink) {
      Set<Edge> parentEdges=taskGraph.inEdges(v);
      for (      Edge e : parentEdges) {
        Vertex parent=taskGraph.getParentOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(parent.getName(),getTaskIdOfTask(parent.getName(),taskSchedule),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        if (!parOpTable.contains(parent.getName(),e.getName())) {
          parOpTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
          recvTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
        }
      }
    }
    INodeInstance iNodeInstance=createInstances(cfg,ip,v);
    execution.addNodes(taskIdGenerator.generateGlobalTaskId(v.getName(),ip.getTaskId(),ip.getTaskIndex()),iNodeInstance);
  }
  for (  Table.Cell<String,String,Communication> cell : parOpTable.cellSet()) {
    Communication c=cell.getValue();
    IParallelOperation op=opFactory.build(c.getEdge(),c.getSourceTasks(),c.getTargetTasks());
    Set<Integer> sourcesOfThisWorker=intersectionOfTasks(conPlan,c.getSourceTasks());
    Set<Integer> targetsOfThisWorker=intersectionOfTasks(conPlan,c.getTargetTasks());
    for (    Integer i : sourcesOfThisWorker) {
      if (taskInstances.contains(c.getSourceTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getSourceTask(),i);
        taskInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else       if (sourceInstances.contains(c.getSourceTask(),i)) {
        SourceInstance sourceInstance=sourceInstances.get(c.getSourceTask(),i);
        sourceInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getSourceTask());
      }
    }
    for (    Integer i : targetsOfThisWorker) {
      if (taskInstances.contains(c.getTargetTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getTargetTask(),i);
        op.register(i,taskInstance.getInQueue());
      }
 else       if (sinkInstances.contains(c.getTargetTask(),i)) {
        SinkInstance sourceInstance=sinkInstances.get(c.getTargetTask(),i);
        op.register(i,sourceInstance.getInQueue());
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getTargetTask());
      }
    }
    execution.addOps(op);
  }
  return execution;
}","@Override public ExecutionPlan schedule(Config cfg,DataFlowTaskGraph taskGraph,TaskSchedulePlan taskSchedule){
  noOfThreads=ExecutorContext.threadsPerContainer(cfg);
  TaskPlan taskPlan=TaskPlanBuilder.build(resourcePlan,taskSchedule,taskIdGenerator);
  ParallelOperationFactory opFactory=new ParallelOperationFactory(cfg,network.getChannel(),taskPlan,edgeGenerator);
  Map<Integer,TaskSchedulePlan.ContainerPlan> containersMap=taskSchedule.getContainersMap();
  TaskSchedulePlan.ContainerPlan conPlan=containersMap.get(workerId);
  if (conPlan == null) {
    LOG.log(Level.INFO,""String_Node_Str"" + workerId);
    return null;
  }
  ExecutionPlan execution=new ExecutionPlan();
  execution.setNumThreads(noOfThreads);
  Set<TaskSchedulePlan.TaskInstancePlan> instancePlan=conPlan.getTaskInstances();
  for (  TaskSchedulePlan.TaskInstancePlan ip : instancePlan) {
    Vertex v=taskGraph.vertex(ip.getTaskName());
    if (v == null) {
      throw new RuntimeException(""String_Node_Str"" + ip.getTaskName());
    }
    INode node=v.getTask();
    if (node instanceof ITask || node instanceof ISource) {
      Set<Edge> edges=taskGraph.outEdges(v);
      for (      Edge e : edges) {
        Vertex child=taskGraph.childOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(child.getName(),getTaskIdOfTask(child.getName(),taskSchedule),taskGraph);
        if (!parOpTable.contains(v.getName(),e.getName())) {
          parOpTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
        }
      }
    }
    if (node instanceof ITask || node instanceof ISink) {
      Set<Edge> parentEdges=taskGraph.inEdges(v);
      for (      Edge e : parentEdges) {
        Vertex parent=taskGraph.getParentOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(parent.getName(),getTaskIdOfTask(parent.getName(),taskSchedule),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        if (!parOpTable.contains(parent.getName(),e.getName())) {
          parOpTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
        }
      }
    }
    INodeInstance iNodeInstance=createInstances(cfg,ip,v);
    execution.addNodes(taskIdGenerator.generateGlobalTaskId(v.getName(),ip.getTaskId(),ip.getTaskIndex()),iNodeInstance);
  }
  for (  Table.Cell<String,String,Communication> cell : parOpTable.cellSet()) {
    Communication c=cell.getValue();
    IParallelOperation op=opFactory.build(c.getEdge(),c.getSourceTasks(),c.getTargetTasks());
    Set<Integer> sourcesOfThisWorker=intersectionOfTasks(conPlan,c.getSourceTasks());
    Set<Integer> targetsOfThisWorker=intersectionOfTasks(conPlan,c.getTargetTasks());
    for (    Integer i : sourcesOfThisWorker) {
      if (taskInstances.contains(c.getSourceTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getSourceTask(),i);
        taskInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else       if (sourceInstances.contains(c.getSourceTask(),i)) {
        SourceInstance sourceInstance=sourceInstances.get(c.getSourceTask(),i);
        sourceInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getSourceTask());
      }
    }
    for (    Integer i : targetsOfThisWorker) {
      if (taskInstances.contains(c.getTargetTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getTargetTask(),i);
        op.register(i,taskInstance.getInQueue());
        taskInstance.registerInParallelOperation(c.getEdge().getName(),op);
      }
 else       if (sinkInstances.contains(c.getTargetTask(),i)) {
        SinkInstance sourceInstance=sinkInstances.get(c.getTargetTask(),i);
        sourceInstance.registerInParallelOperation(c.getEdge().getName(),op);
        op.register(i,sourceInstance.getInQueue());
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getTargetTask());
      }
    }
    execution.addOps(op);
  }
  return execution;
}",0.4676663542642924
172967,"public void execute(){
  while (!inQueue.isEmpty()) {
    IMessage m=inQueue.poll();
    task.execute(m);
  }
}","public void execute(){
  while (!inQueue.isEmpty()) {
    IMessage m=inQueue.poll();
    task.execute(m);
  }
  for (  Map.Entry<String,IParallelOperation> e : inParOps.entrySet()) {
    e.getValue().progress();
  }
}",0.676829268292683
172968,"public void execute(){
  while (!inQueue.isEmpty()) {
    IMessage m=inQueue.poll();
    task.run(m);
    while (!outQueue.isEmpty()) {
      IMessage message=outQueue.poll();
      if (message != null) {
        String edge=message.edge();
        IParallelOperation op=outParOps.get(edge);
        op.send(taskId,message);
      }
    }
  }
  for (  Map.Entry<String,IParallelOperation> e : outParOps.entrySet()) {
    e.getValue().progress();
  }
}","public void execute(){
  while (!inQueue.isEmpty()) {
    IMessage m=inQueue.poll();
    task.run(m);
    while (!outQueue.isEmpty()) {
      IMessage message=outQueue.poll();
      if (message != null) {
        String edge=message.edge();
        IParallelOperation op=outParOps.get(edge);
        op.send(taskId,message);
      }
    }
  }
  for (  Map.Entry<String,IParallelOperation> e : outParOps.entrySet()) {
    e.getValue().progress();
  }
  for (  Map.Entry<String,IParallelOperation> e : inParOps.entrySet()) {
    e.getValue().progress();
  }
}",0.8948412698412699
172969,"public void partition(Object message){
}","public void partition(int source,Object message){
  if (!comm.getSources().contains(source)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  partition.send(source,message,0,MPIContext.DEFAULT_DESTINATION);
}",0.3100775193798449
172970,"@Override public void init(Config config,int id,ResourcePlan resourcePlan){
  GeneratorTask g=new GeneratorTask();
  RecevingTask r=new RecevingTask();
  GraphBuilder builder=GraphBuilder.newBuilder();
  builder.addSource(""String_Node_Str"",g);
  builder.setParallelism(""String_Node_Str"",4);
  builder.addSink(""String_Node_Str"",r);
  builder.setParallelism(""String_Node_Str"",1);
  builder.connect(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Operations.REDUCE);
  DataFlowTaskGraph graph=builder.build();
  RoundRobinTaskScheduling roundRobinTaskScheduling=new RoundRobinTaskScheduling();
  roundRobinTaskScheduling.initialize(config);
  WorkerPlan workerPlan=createWorkerPlan(resourcePlan);
  TaskSchedulePlan taskSchedulePlan=roundRobinTaskScheduling.schedule(graph,workerPlan);
  TWSNetwork network=new TWSNetwork(config,resourcePlan.getThisId());
  ExecutionPlanBuilder executionPlanBuilder=new ExecutionPlanBuilder(resourcePlan,network);
  ExecutionPlan plan=executionPlanBuilder.schedule(config,graph,taskSchedulePlan);
  ExecutionModel executionModel=new ExecutionModel(ExecutionModel.SHARED);
  ThreadExecutor executor=new ThreadExecutor(executionModel,plan);
  executor.execute();
  while (true) {
    network.getChannel().progress();
  }
}","@Override public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds,TaskContext context){
}",0.0986937590711175
172971,"public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(PartitionTask.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),4);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}","public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(ReduceTask.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),4);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}",0.9841938883034772
172972,"/** 
 * This method saves the data to file system
 */
public void run(){
  List<KeyValue> list;
  lock.lock();
  try {
    list=recordsInMemory;
    recordsInMemory=new ArrayList<>();
  }
  finally {
    lock.unlock();
  }
  if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
    Collections.sort(list);
    int totalSize=FileLoader.saveKeyValues(recordsInMemory,bytesLength,numOfBytesInMemory,getSaveFileName(noOfFileWritten),keyType,kryoSerializer);
    filePartBytes.add(totalSize);
    recordsInMemory.clear();
    bytesLength.clear();
    noOfFileWritten++;
    numOfBytesInMemory=0;
  }
}","/** 
 * This method saves the data to file system
 */
public void run(){
  List<KeyValue> list;
  lock.lock();
  try {
    list=recordsInMemory;
    recordsInMemory=new ArrayList<>();
  }
  finally {
    lock.unlock();
  }
  if (numOfBytesInMemory > maxBytesToKeepInMemory || recordsInMemory.size() > maxRecordsInMemory) {
    Collections.sort(list);
    int totalSize=FileLoader.saveKeyValues(list,bytesLength,numOfBytesInMemory,getSaveFileName(noOfFileWritten),keyType,kryoSerializer);
    filePartBytes.add(totalSize);
    recordsInMemory.clear();
    bytesLength.clear();
    noOfFileWritten++;
    numOfBytesInMemory=0;
  }
}",0.985051140833989
172973,"public static OpenFilePart openPart(String fileName,long startOffSet,int maxSize,MessageType keyType,MessageType dataType,KryoMemorySerializer deserializer){
  List<KeyValue> keyValues=new ArrayList<>();
  String outFileName=Paths.get(fileName).toString();
  FileChannel rwChannel;
  try {
    rwChannel=new RandomAccessFile(outFileName,""String_Node_Str"").getChannel();
    long size=maxSize < rwChannel.size() - startOffSet ? maxSize : rwChannel.size() - startOffSet;
    ByteBuffer os=rwChannel.map(FileChannel.MapMode.READ_ONLY,startOffSet,size);
    int totalRead=0;
    while (totalRead < size) {
      Object key;
      Object value;
      int keySize=os.getInt();
      key=deserialize(keyType,deserializer,os,keySize);
      if (totalRead + keySize > size) {
        break;
      }
      int dataSize=os.getInt();
      value=deserialize(dataType,deserializer,os,dataSize);
      if (totalRead + keySize + dataSize > size) {
        break;
      }
      keyValues.add(new KeyValue(key,value));
      totalRead+=8 + keySize + dataSize;
    }
    rwChannel.close();
    return new OpenFilePart(keyValues,totalRead + (int)startOffSet,(int)rwChannel.size(),fileName);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Reads a file part upto max size from start offset
 * @param fileName
 * @param startOffSet
 * @param maxSize
 * @param keyType
 * @param dataType
 * @param deserializer
 * @return
 */
public static OpenFilePart openPart(String fileName,long startOffSet,int maxSize,MessageType keyType,MessageType dataType,KryoMemorySerializer deserializer){
  List<KeyValue> keyValues=new ArrayList<>();
  String outFileName=Paths.get(fileName).toString();
  FileChannel rwChannel;
  try {
    rwChannel=new RandomAccessFile(outFileName,""String_Node_Str"").getChannel();
    long size=maxSize <= rwChannel.size() - startOffSet ? maxSize : rwChannel.size() - startOffSet;
    ByteBuffer os=rwChannel.map(FileChannel.MapMode.READ_ONLY,startOffSet,size);
    int totalRead=0;
    int count=0;
    while (totalRead < size) {
      Object key;
      Object value;
      int keySize=os.getInt();
      key=deserialize(keyType,deserializer,os,keySize);
      if (totalRead + keySize > size) {
        break;
      }
      int dataSize=os.getInt();
      value=deserialize(dataType,deserializer,os,dataSize);
      if (totalRead + keySize + dataSize > size) {
        break;
      }
      LOG.log(Level.INFO,""String_Node_Str"" + dataSize + ""String_Node_Str""+ count+ ""String_Node_Str""+ fileName+ ""String_Node_Str""+ totalRead+ ""String_Node_Str""+ value);
      keyValues.add(new KeyValue(key,value));
      totalRead+=8 + keySize + dataSize;
      count++;
    }
    rwChannel.close();
    return new OpenFilePart(keyValues,totalRead + (int)startOffSet,(int)rwChannel.size(),fileName);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.8634942688433483
172974,"public static void main(ExecutionModel[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(PartitionTask.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),4);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}","public static void main(String[] args){
  Config config=ResourceAllocator.loadConfig(new HashMap<>());
  JobConfig jobConfig=new JobConfig();
  BasicJob.BasicJobBuilder jobBuilder=BasicJob.newBuilder();
  jobBuilder.setName(""String_Node_Str"");
  jobBuilder.setContainerClass(PartitionTask.class.getName());
  jobBuilder.setRequestResource(new ResourceContainer(2,1024),4);
  jobBuilder.setConfig(jobConfig);
  Twister2Submitter.submitContainerJob(jobBuilder.build(),config);
}",0.9791666666666666
172975,"@Override public KeyValue next(){
  HeapNode node=heap.extractMin();
  numValuesInHeap--;
  OpenFilePart part=openFiles.get(node.listNo);
  if (!part.hasNext()) {
    if (part.getFileSize() <= part.getReadOffSet()) {
      openFiles.remove(node.listNo);
    }
 else {
      OpenFilePart newPart=FileLoader.openPart(getSaveFileName(node.listNo),part.getReadOffSet(),maxMemoryPerFile,keyType,dataType,kryoSerializer);
      openFiles.put(node.listNo,newPart);
      if (newPart.hasNext()) {
        heap.insert(newPart.next(),node.listNo);
        numValuesInHeap++;
      }
    }
  }
 else {
    heap.insert(part.next(),node.listNo);
    numValuesInHeap++;
  }
  return node.data;
}","@Override public KeyValue next(){
  HeapNode node=heap.extractMin();
  numValuesInHeap--;
  OpenFilePart part=openFiles.get(node.listNo);
  if (!part.hasNext()) {
    if (part.getFileSize() <= part.getReadOffSet()) {
      openFiles.remove(node.listNo);
    }
 else {
      OpenFilePart newPart=FileLoader.openPart(getSaveFileName(node.listNo),part.getReadOffSet(),maxMemoryPerFile,keyType,dataType,kryoSerializer);
      openFiles.put(node.listNo,newPart);
      if (newPart.hasNext()) {
        KeyValue next=newPart.next();
        heap.insert(next,node.listNo);
        numValuesInHeap++;
      }
    }
  }
 else {
    heap.insert(part.next(),node.listNo);
    numValuesInHeap++;
  }
  return node.data;
}",0.962589928057554
172976,"@Override public boolean onMessage(int source,int destination,int target,int flags,Object object){
  LOG.info(""String_Node_Str"");
  TaskMessage msg=new TaskMessage(object,edge.getStringMapping(communicationEdge),target);
  LOG.info(""String_Node_Str"" + source + ""String_Node_Str""+ msg.getContent()+ ""String_Node_Str""+ target+ ""String_Node_Str""+ destination);
  if (object instanceof List) {
    for (    Object o : (List)object) {
      outMessages.get(target).offer(msg);
    }
  }
  return true;
}","@Override public boolean onMessage(int source,int destination,int target,int flags,Object object){
  if (object instanceof List) {
    for (    Object o : (List)object) {
      TaskMessage msg=new TaskMessage(o,edge.getStringMapping(communicationEdge),target);
      outMessages.get(target).offer(msg);
      LOG.info(""String_Node_Str"" + source + ""String_Node_Str""+ msg.getContent()+ ""String_Node_Str""+ target+ ""String_Node_Str""+ destination);
    }
  }
  return true;
}",0.2789256198347107
172977,"/** 
 * Save the list of records to the file system
 * @param records records to be written
 * @param size total size of the records
 * @param outFileName out file name
 */
public static int saveKeyValues(List<KeyValue> records,List<Integer> sizes,long size,String outFileName,MessageType keyType,KryoMemorySerializer serializer){
  try {
    int totalSize=0;
    List<byte[]> byteKeys=new ArrayList<>();
    if (keyType == MessageType.OBJECT) {
      for (      KeyValue record : records) {
        byte[] data=serializer.serialize(record.getKey());
        totalSize+=data.length;
        byteKeys.add(data);
      }
    }
 else {
      for (      KeyValue record : records) {
        if (keyType == MessageType.BYTE) {
          byte[] key=(byte[])record.getKey();
          totalSize+=key.length;
        }
 else         if (keyType == MessageType.DOUBLE) {
          double[] d=(double[])record.getKey();
          totalSize+=d.length * 8;
        }
 else         if (keyType == MessageType.INTEGER) {
          int[] d=(int[])record.getKey();
          totalSize+=d.length * 4;
        }
 else         if (keyType == MessageType.LONG) {
          long[] d=(long[])record.getKey();
          totalSize+=d.length * 8;
        }
 else         if (keyType == MessageType.CHAR) {
          char[] d=(char[])record.getKey();
          totalSize+=d.length;
        }
 else         if (keyType == MessageType.SHORT) {
          short[] d=(short[])record.getKey();
          totalSize+=d.length * 2;
        }
      }
    }
    long sum=0;
    for (    Integer s : sizes) {
      sum+=s;
    }
    if (sum != size) {
      LOG.log(Level.WARNING,""String_Node_Str"" + sum + ""String_Node_Str""+ size);
    }
    totalSize+=size + records.size() * 8;
    LOG.log(Level.INFO,String.format(""String_Node_Str"",totalSize,sum,size,records.size()));
    Files.createDirectories(Paths.get(outFileName).getParent());
    FileChannel rwChannel=new RandomAccessFile(outFileName,""String_Node_Str"").getChannel();
    ByteBuffer os=rwChannel.map(FileChannel.MapMode.READ_WRITE,0,totalSize);
    int totalWritten=0;
    for (int i=0; i < records.size(); i++) {
      KeyValue keyValue=records.get(i);
      byte[] r=(byte[])keyValue.getValue();
      if (keyType == MessageType.OBJECT) {
        byte[] src=byteKeys.get(i);
        os.putInt(src.length);
        os.put(src);
      }
 else       if (keyType == MessageType.BYTE) {
        byte[] key=(byte[])keyValue.getKey();
        os.putInt(key.length);
        os.put(key);
      }
 else       if (keyType == MessageType.DOUBLE) {
        double[] kd=(double[])keyValue.getKey();
        os.putInt(kd.length * 8);
        for (        double d : kd) {
          os.putDouble(d);
        }
      }
 else       if (keyType == MessageType.INTEGER) {
        int[] kd=(int[])keyValue.getKey();
        os.putInt(kd.length * 4);
        for (        int d : kd) {
          os.putInt(d);
          totalWritten+=4;
          LOG.log(Level.INFO,String.format(""String_Node_Str"",totalWritten));
        }
      }
 else       if (keyType == MessageType.LONG) {
        long[] kd=(long[])keyValue.getKey();
        os.putInt(kd.length * 8);
        for (        long d : kd) {
          os.putLong(d);
        }
      }
 else       if (keyType == MessageType.CHAR) {
        char[] kd=(char[])keyValue.getKey();
        os.putInt(kd.length);
        for (        char d : kd) {
          os.putChar(d);
        }
      }
 else       if (keyType == MessageType.SHORT) {
        short[] kd=(short[])keyValue.getKey();
        os.putInt(kd.length * 2);
        for (        short d : kd) {
          os.putShort(d);
        }
      }
      os.putInt(sizes.get(i));
      os.put(r,0,sizes.get(i));
    }
    rwChannel.close();
    return totalSize;
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}","/** 
 * Save the list of records to the file system
 * @param records records to be written
 * @param size total size of the records
 * @param outFileName out file name
 */
public static int saveKeyValues(List<KeyValue> records,List<Integer> sizes,long size,String outFileName,MessageType keyType,KryoMemorySerializer serializer){
  try {
    int totalSize=0;
    List<byte[]> byteKeys=new ArrayList<>();
    if (keyType == MessageType.OBJECT) {
      for (      KeyValue record : records) {
        byte[] data=serializer.serialize(record.getKey());
        totalSize+=data.length;
        byteKeys.add(data);
      }
    }
 else {
      for (      KeyValue record : records) {
        if (keyType == MessageType.BYTE) {
          byte[] key=(byte[])record.getKey();
          totalSize+=key.length;
        }
 else         if (keyType == MessageType.DOUBLE) {
          double[] d=(double[])record.getKey();
          totalSize+=d.length * 8;
        }
 else         if (keyType == MessageType.INTEGER) {
          int[] d=(int[])record.getKey();
          totalSize+=d.length * 4;
        }
 else         if (keyType == MessageType.LONG) {
          long[] d=(long[])record.getKey();
          totalSize+=d.length * 8;
        }
 else         if (keyType == MessageType.CHAR) {
          char[] d=(char[])record.getKey();
          totalSize+=d.length;
        }
 else         if (keyType == MessageType.SHORT) {
          short[] d=(short[])record.getKey();
          totalSize+=d.length * 2;
        }
      }
    }
    long sum=0;
    for (    Integer s : sizes) {
      sum+=s;
    }
    if (sum != size) {
      LOG.log(Level.WARNING,""String_Node_Str"" + sum + ""String_Node_Str""+ size);
    }
    totalSize+=size + records.size() * 8;
    LOG.log(Level.INFO,String.format(""String_Node_Str"",totalSize,sum,size,records.size()));
    Files.createDirectories(Paths.get(outFileName).getParent());
    FileChannel rwChannel=new RandomAccessFile(outFileName,""String_Node_Str"").getChannel();
    ByteBuffer os=rwChannel.map(FileChannel.MapMode.READ_WRITE,0,totalSize);
    int totalWritten=0;
    for (int i=0; i < records.size(); i++) {
      KeyValue keyValue=records.get(i);
      byte[] r=(byte[])keyValue.getValue();
      if (keyType == MessageType.OBJECT) {
        byte[] src=byteKeys.get(i);
        os.putInt(src.length);
        os.put(src);
      }
 else       if (keyType == MessageType.BYTE) {
        byte[] key=(byte[])keyValue.getKey();
        os.putInt(key.length);
        os.put(key);
      }
 else       if (keyType == MessageType.DOUBLE) {
        double[] kd=(double[])keyValue.getKey();
        os.putInt(kd.length * 8);
        for (        double d : kd) {
          os.putDouble(d);
        }
      }
 else       if (keyType == MessageType.INTEGER) {
        int[] kd=(int[])keyValue.getKey();
        os.putInt(kd.length * 4);
        for (        int d : kd) {
          os.putInt(d);
          totalWritten+=4;
        }
      }
 else       if (keyType == MessageType.LONG) {
        long[] kd=(long[])keyValue.getKey();
        os.putInt(kd.length * 8);
        for (        long d : kd) {
          os.putLong(d);
        }
      }
 else       if (keyType == MessageType.CHAR) {
        char[] kd=(char[])keyValue.getKey();
        os.putInt(kd.length);
        for (        char d : kd) {
          os.putChar(d);
        }
      }
 else       if (keyType == MessageType.SHORT) {
        short[] kd=(short[])keyValue.getKey();
        os.putInt(kd.length * 2);
        for (        short d : kd) {
          os.putShort(d);
        }
      }
      os.putInt(sizes.get(i));
      os.put(r,0,sizes.get(i));
    }
    rwChannel.close();
    return totalSize;
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,""String_Node_Str"",e);
    throw new RuntimeException(e);
  }
}",0.9899882980106618
172978,"@Override public ExecutionPlan schedule(Config cfg,DataFlowTaskGraph taskGraph,TaskSchedulePlan taskSchedule){
  noOfThreads=ExecutorContext.threadsPerContainer(cfg);
  TaskPlan taskPlan=TaskPlanBuilder.build(resourcePlan,taskSchedule,taskIdGenerator);
  ParallelOperationFactory opFactory=new ParallelOperationFactory(cfg,network.getChannel(),taskPlan,edgeGenerator);
  Map<Integer,TaskSchedulePlan.ContainerPlan> containersMap=taskSchedule.getContainersMap();
  TaskSchedulePlan.ContainerPlan conPlan=containersMap.get(workerId);
  if (conPlan == null) {
    LOG.log(Level.INFO,""String_Node_Str"" + workerId);
    return null;
  }
  ExecutionPlan execution=new ExecutionPlan();
  Set<TaskSchedulePlan.TaskInstancePlan> instancePlan=conPlan.getTaskInstances();
  for (  TaskSchedulePlan.TaskInstancePlan ip : instancePlan) {
    Vertex v=taskGraph.vertex(ip.getTaskName());
    if (v == null) {
      throw new RuntimeException(""String_Node_Str"" + ip.getTaskName());
    }
    INode node=v.getTask();
    if (node instanceof ITask || node instanceof ISource) {
      Set<Edge> edges=taskGraph.outEdges(v);
      for (      Edge e : edges) {
        Vertex child=taskGraph.childOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(child.getName(),getTaskIdOfTask(child.getName(),taskSchedule),taskGraph);
        if (!parOpTable.contains(v.getName(),e.getName())) {
          parOpTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
          sendTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
        }
      }
    }
    if (node instanceof ITask || node instanceof ISink) {
      Set<Edge> parentEdges=taskGraph.inEdges(v);
      for (      Edge e : parentEdges) {
        Vertex parent=taskGraph.getParentOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(parent.getName(),getTaskIdOfTask(parent.getName(),taskSchedule),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        if (!parOpTable.contains(parent.getName(),e.getName())) {
          parOpTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
          recvTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
        }
      }
    }
    INodeInstance iNodeInstance=createInstances(cfg,ip,v);
    execution.addNodes(taskIdGenerator.generateGlobalTaskId(v.getName(),ip.getTaskId(),ip.getTaskIndex()),iNodeInstance);
  }
  for (  Table.Cell<String,String,Communication> cell : parOpTable.cellSet()) {
    Communication c=cell.getValue();
    IParallelOperation op=opFactory.build(c.getEdge(),c.getSourceTasks(),c.getTargetTasks());
    Set<Integer> sourcesOfThisWorker=intersectionOfTasks(conPlan,c.getSourceTasks());
    Set<Integer> targetsOfThisWorker=intersectionOfTasks(conPlan,c.getTargetTasks());
    for (    Integer i : sourcesOfThisWorker) {
      if (taskInstances.contains(c.getSourceTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getSourceTasks(),i);
        taskInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else       if (sourceInstances.contains(c.getSourceTask(),i)) {
        SourceInstance sourceInstance=sourceInstances.get(c.getSourceTask(),i);
        sourceInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getSourceTask());
      }
    }
    for (    Integer i : targetsOfThisWorker) {
      if (taskInstances.contains(c.getTargetTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getTargetTask(),i);
        op.register(i,taskInstance.getInQueue());
      }
 else       if (sinkInstances.contains(c.getTargetTask(),i)) {
        SinkInstance sourceInstance=sinkInstances.get(c.getTargetTask(),i);
        op.register(i,sourceInstance.getInQueue());
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getTargetTask());
      }
    }
    execution.addOps(op);
  }
  ThreadSharingExecutor threadSharingExecutor=new ThreadSharingExecutor(noOfThreads);
  threadSharingExecutor.execute(execution);
  return execution;
}","@Override public ExecutionPlan schedule(Config cfg,DataFlowTaskGraph taskGraph,TaskSchedulePlan taskSchedule){
  noOfThreads=ExecutorContext.threadsPerContainer(cfg);
  TaskPlan taskPlan=TaskPlanBuilder.build(resourcePlan,taskSchedule,taskIdGenerator);
  ParallelOperationFactory opFactory=new ParallelOperationFactory(cfg,network.getChannel(),taskPlan,edgeGenerator);
  Map<Integer,TaskSchedulePlan.ContainerPlan> containersMap=taskSchedule.getContainersMap();
  TaskSchedulePlan.ContainerPlan conPlan=containersMap.get(workerId);
  if (conPlan == null) {
    LOG.log(Level.INFO,""String_Node_Str"" + workerId);
    return null;
  }
  ExecutionPlan execution=new ExecutionPlan();
  Set<TaskSchedulePlan.TaskInstancePlan> instancePlan=conPlan.getTaskInstances();
  for (  TaskSchedulePlan.TaskInstancePlan ip : instancePlan) {
    Vertex v=taskGraph.vertex(ip.getTaskName());
    if (v == null) {
      throw new RuntimeException(""String_Node_Str"" + ip.getTaskName());
    }
    INode node=v.getTask();
    if (node instanceof ITask || node instanceof ISource) {
      Set<Edge> edges=taskGraph.outEdges(v);
      for (      Edge e : edges) {
        Vertex child=taskGraph.childOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(child.getName(),getTaskIdOfTask(child.getName(),taskSchedule),taskGraph);
        if (!parOpTable.contains(v.getName(),e.getName())) {
          parOpTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
          sendTable.put(v.getName(),e.getName(),new Communication(e,v.getName(),child.getName(),srcTasks,tarTasks));
        }
      }
    }
    if (node instanceof ITask || node instanceof ISink) {
      Set<Edge> parentEdges=taskGraph.inEdges(v);
      for (      Edge e : parentEdges) {
        Vertex parent=taskGraph.getParentOfTask(v,e.getName());
        Set<Integer> srcTasks=taskIdGenerator.getTaskIds(parent.getName(),getTaskIdOfTask(parent.getName(),taskSchedule),taskGraph);
        Set<Integer> tarTasks=taskIdGenerator.getTaskIds(v.getName(),ip.getTaskId(),taskGraph);
        if (!parOpTable.contains(parent.getName(),e.getName())) {
          parOpTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
          recvTable.put(parent.getName(),e.getName(),new Communication(e,parent.getName(),v.getName(),srcTasks,tarTasks));
        }
      }
    }
    INodeInstance iNodeInstance=createInstances(cfg,ip,v);
    execution.addNodes(taskIdGenerator.generateGlobalTaskId(v.getName(),ip.getTaskId(),ip.getTaskIndex()),iNodeInstance);
  }
  for (  Table.Cell<String,String,Communication> cell : parOpTable.cellSet()) {
    Communication c=cell.getValue();
    IParallelOperation op=opFactory.build(c.getEdge(),c.getSourceTasks(),c.getTargetTasks());
    Set<Integer> sourcesOfThisWorker=intersectionOfTasks(conPlan,c.getSourceTasks());
    Set<Integer> targetsOfThisWorker=intersectionOfTasks(conPlan,c.getTargetTasks());
    for (    Integer i : sourcesOfThisWorker) {
      if (taskInstances.contains(c.getSourceTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getSourceTask(),i);
        taskInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else       if (sourceInstances.contains(c.getSourceTask(),i)) {
        SourceInstance sourceInstance=sourceInstances.get(c.getSourceTask(),i);
        sourceInstance.registerOutParallelOperation(c.getEdge().getName(),op);
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getSourceTask());
      }
    }
    for (    Integer i : targetsOfThisWorker) {
      if (taskInstances.contains(c.getTargetTask(),i)) {
        TaskInstance taskInstance=taskInstances.get(c.getTargetTask(),i);
        op.register(i,taskInstance.getInQueue());
      }
 else       if (sinkInstances.contains(c.getTargetTask(),i)) {
        SinkInstance sourceInstance=sinkInstances.get(c.getTargetTask(),i);
        op.register(i,sourceInstance.getInQueue());
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c.getTargetTask());
      }
    }
    execution.addOps(op);
  }
  ThreadSharingExecutor threadSharingExecutor=new ThreadSharingExecutor(noOfThreads);
  threadSharingExecutor.execute(execution);
  return execution;
}",0.9998864023628308
172979,"public void prepare(int srcs,Set<Integer> dests,EdgeGenerator e,DataType dataType,String edgeName){
  this.edge=e;
  op=new MPIDataFlowBroadcast(channel,srcs,dests,new BcastReceiver());
  communicationEdge=e.generate(edgeName);
  op.init(config,Utils.dataTypeToMessageType(dataType),taskPlan,communicationEdge);
}","public void prepare(int srcs,Set<Integer> dests,EdgeGenerator e,DataType dataType,String edgeName){
  this.edge=e;
  LOG.info(String.format(""String_Node_Str"",srcs,dests));
  op=new MPIDataFlowBroadcast(channel,srcs,dests,new BcastReceiver());
  communicationEdge=e.generate(edgeName);
  op.init(config,Utils.dataTypeToMessageType(dataType),taskPlan,communicationEdge);
}",0.9165446559297218
172980,"boolean receiveMessage(int rank,int stream,MPIMessageListener callback,Queue<MPIBuffer> receiveBuffers);","/** 
 * Receive a message
 * @param id worker id
 * @param edge the graph edge to receive from
 * @param callback callback for message completions
 * @param receiveBuffers the list of receive buffers
 * @return true if sending is accepted
 */
boolean receiveMessage(int id,int edge,MPIMessageListener callback,Queue<MPIBuffer> receiveBuffers);",0.4205816554809843
172981,"boolean sendMessage(int id,MPIMessage message,MPIMessageListener callback);","/** 
 * Send a message
 * @param id worker id
 * @param message message
 * @param callback callback for message completions
 * @return true if sending is accepted
 */
boolean sendMessage(int id,MPIMessage message,MPIMessageListener callback);",0.473186119873817
172982,void progress();,"/** 
 * Progress the channel
 */
void progress();",0.4923076923076923
172983,ByteBuffer createBuffer(int capacity);,"/** 
 * Create a buffer
 * @param capacity capacity
 * @return the byte buffer
 */
ByteBuffer createBuffer(int capacity);",0.4779874213836478
172984,"public KeyedContent(Object source,Object object,MessageType keyType,MessageType contentType){
  this.source=source;
  this.object=object;
  this.keyType=keyType;
  this.contentType=contentType;
}","public KeyedContent(Object source,Object object,MessageType keyType,MessageType contentType){
  this.key=source;
  this.value=object;
  this.keyType=keyType;
  this.contentType=contentType;
}",0.9585492227979274
172985,"/** 
 * Serialized the message into the buffer
 * @return true if the message is completely written
 */
private boolean serializeBody(Object payload,MPISendMessage sendMessage,MPIBuffer buffer){
  MessageType type=sendMessage.getMPIMessage().getType();
  if (type == MessageType.OBJECT || type == MessageType.INTEGER || type == MessageType.LONG || type == MessageType.DOUBLE || type == MessageType.BYTE || type == MessageType.STRING || type == MessageType.MULTI_FIXED_BYTE) {
    if (!keyed) {
      return serializeData(payload,sendMessage.getSerializationState(),buffer,type);
    }
 else {
      KeyedContent keyedContent=(KeyedContent)payload;
      return serializeKeyedData(keyedContent.getObject(),keyedContent.getSource(),sendMessage.getSerializationState(),buffer,type,keyedContent.getKeyType());
    }
  }
  if (type == MessageType.BUFFER) {
    return serializeBuffer(payload,sendMessage,buffer);
  }
  return false;
}","/** 
 * Serialized the message into the buffer
 * @return true if the message is completely written
 */
private boolean serializeBody(Object payload,MPISendMessage sendMessage,MPIBuffer buffer){
  MessageType type=sendMessage.getMPIMessage().getType();
  if (type == MessageType.OBJECT || type == MessageType.INTEGER || type == MessageType.LONG || type == MessageType.DOUBLE || type == MessageType.BYTE || type == MessageType.STRING || type == MessageType.MULTI_FIXED_BYTE) {
    if (!keyed) {
      return serializeData(payload,sendMessage.getSerializationState(),buffer,type);
    }
 else {
      KeyedContent keyedContent=(KeyedContent)payload;
      return serializeKeyedData(keyedContent.getValue(),keyedContent.getKey(),sendMessage.getSerializationState(),buffer,type,keyedContent.getKeyType());
    }
  }
  if (type == MessageType.BUFFER) {
    return serializeBuffer(payload,sendMessage,buffer);
  }
  return false;
}",0.989212513484358
172986,"/** 
 * Serialized the message into the buffer
 * @return true if the message is completely written
 */
private boolean serializeMessage(Object payload,MPISendMessage sendMessage,MPIBuffer buffer){
  MessageType type=sendMessage.getMPIMessage().getType();
  if (!keyed) {
    return serializeData(payload,sendMessage.getSerializationState(),buffer,type);
  }
 else {
    KeyedContent kc=(KeyedContent)payload;
    return serializeKeyedData(kc.getObject(),kc.getSource(),sendMessage.getSerializationState(),buffer,kc.getContentType(),kc.getKeyType());
  }
}","/** 
 * Serialized the message into the buffer
 * @return true if the message is completely written
 */
private boolean serializeMessage(Object payload,MPISendMessage sendMessage,MPIBuffer buffer){
  MessageType type=sendMessage.getMPIMessage().getType();
  if (!keyed) {
    return serializeData(payload,sendMessage.getSerializationState(),buffer,type);
  }
 else {
    KeyedContent kc=(KeyedContent)payload;
    return serializeKeyedData(kc.getValue(),kc.getKey(),sendMessage.getSerializationState(),buffer,kc.getContentType(),kc.getKeyType());
  }
}",0.8574007220216606
172987,"private void deserialize(MPIMessage message){
  List<MPIBuffer> buffers=message.getBuffers();
  for (  MPIBuffer mpiBuffer : buffers) {
    mpiBuffer.getByteBuffer().flip();
    mpiBuffer.getByteBuffer().rewind();
  }
  if (message.isComplete()) {
    System.out.printf(""String_Node_Str"");
  }
  message.setKeyType(MessageType.SHORT);
  MessageHeader header=mpiMultiMessageDeserializer.buildHeader(message.getBuffers().get(0),0);
  message.setHeader(header);
  System.out.println(String.format(""String_Node_Str"",header.getLength(),header.getSourceId(),header.getEdge()));
  Object d=mpiMultiMessageDeserializer.build(message,0);
  List list=(List)d;
  for (  Object o : list) {
    if (o instanceof KeyedContent) {
      System.out.println(((KeyedContent)o).getSource());
      if (((KeyedContent)o).getObject() instanceof IntData) {
        System.out.println(""String_Node_Str"" + ((IntData)((KeyedContent)o).getObject()).getData().length);
      }
    }
  }
  System.out.println(""String_Node_Str"");
}","private void deserialize(MPIMessage message){
  List<MPIBuffer> buffers=message.getBuffers();
  for (  MPIBuffer mpiBuffer : buffers) {
    mpiBuffer.getByteBuffer().flip();
    mpiBuffer.getByteBuffer().rewind();
  }
  if (message.isComplete()) {
    System.out.printf(""String_Node_Str"");
  }
  message.setKeyType(MessageType.SHORT);
  MessageHeader header=mpiMultiMessageDeserializer.buildHeader(message.getBuffers().get(0),0);
  message.setHeader(header);
  System.out.println(String.format(""String_Node_Str"",header.getLength(),header.getSourceId(),header.getEdge()));
  Object d=mpiMultiMessageDeserializer.build(message,0);
  List list=(List)d;
  for (  Object o : list) {
    if (o instanceof KeyedContent) {
      System.out.println(((KeyedContent)o).getKey());
      if (((KeyedContent)o).getValue() instanceof IntData) {
        System.out.println(""String_Node_Str"" + ((IntData)((KeyedContent)o).getValue()).getData().length);
      }
    }
  }
  System.out.println(""String_Node_Str"");
}",0.9674511767651476
172988,"public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  for (  Integer integer : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    Map<Integer,List<Object>> d=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(integer)) {
      perTarget.put(exp,false);
      d.put(exp,new ArrayList<>());
    }
    finished.put(integer,perTarget);
  }
  partition=(MPIDataFlowPartition)op;
  if (partition.getKeyType() == null) {
    merger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(),partition.getDataType());
  }
 else {
    if (sorted) {
      sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(),partition.getKeyType(),partition.getDataType(),comparator);
    }
 else {
      keyedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(),partition.getKeyType(),partition.getDataType());
    }
  }
}","public void init(Config cfg,DataFlowOperation op,Map<Integer,List<Integer>> expectedIds){
  int maxBytesInMemory=MPIContext.getShuffleMaxBytesInMemory(cfg);
  int maxRecordsInMemory=MPIContext.getShuffleMaxRecordsInMemory(cfg);
  String path=MPIContext.getShuffleDirectoryPath(cfg);
  finished=new ConcurrentHashMap<>();
  for (  Integer integer : expectedIds.keySet()) {
    Map<Integer,Boolean> perTarget=new ConcurrentHashMap<>();
    Map<Integer,List<Object>> d=new ConcurrentHashMap<>();
    for (    Integer exp : expectedIds.get(integer)) {
      perTarget.put(exp,false);
      d.put(exp,new ArrayList<>());
    }
    finished.put(integer,perTarget);
  }
  partition=(MPIDataFlowPartition)op;
  if (partition.getKeyType() == null) {
    sortedMerger=new FSMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(),partition.getDataType());
  }
 else {
    if (sorted) {
      sortedMerger=new FSKeyedSortedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(),partition.getKeyType(),partition.getDataType(),comparator);
    }
 else {
      sortedMerger=new FSKeyedMerger(maxBytesInMemory,maxRecordsInMemory,path,getOperationName(),partition.getKeyType(),partition.getDataType());
    }
  }
  keyed=partition.getKeyType() != null;
}",0.9777777777777776
172989,"@Override public boolean onMessage(int source,int destination,int target,int flags,Object object){
  byte[] d=(byte[])object;
  merger.add(d,d.length);
  return true;
}","@Override @SuppressWarnings(""String_Node_Str"") public boolean onMessage(int source,int destination,int target,int flags,Object object){
  if (keyed) {
    List<KeyedContent> keyedContents=(List<KeyedContent>)object;
    for (    KeyedContent kc : keyedContents) {
      Object data=kc.getValue();
      byte[] d=kryoSerializer.serialize(data);
      sortedMerger.add(kc.getKey(),d,d.length);
    }
  }
 else {
    List<Object> contents=(List<Object>)object;
    for (    Object kc : contents) {
      byte[] d=kryoSerializer.serialize(kc);
      sortedMerger.add(d,d.length);
    }
  }
  return true;
}",0.4025974025974026
172990,"@Override public void onFinish(){
  merger.switchToReading();
  Iterator<Object> itr=merger.readIterator();
  batchReceiver.receive(0,itr);
}","@Override public void onFinish(){
  sortedMerger.switchToReading();
  Iterator<Object> itr=sortedMerger.readIterator();
  batchReceiver.receive(0,itr);
}",0.9455782312925172
172991,"public PartitionBatchFinalReceiver(GatherBatchReceiver receiver,boolean srt,boolean d){
  this.batchReceiver=receiver;
  this.sorted=srt;
  this.disk=d;
}","public PartitionBatchFinalReceiver(GatherBatchReceiver receiver,boolean srt,boolean d){
  this.batchReceiver=receiver;
  this.sorted=srt;
  this.disk=d;
  this.kryoSerializer=new KryoSerializer();
}",0.875
172992,"@Override public boolean onMessage(int src,int destination,int target,int flags,Object object){
  this.source=src;
  List<Object> dests=destinationMessages.get(destination);
  int size=dests.size();
  if (size > highWaterMark) {
    return false;
  }
  dests.add(new ImmutableTriple<>(object,src,flags));
  if (dests.size() > lowWaterMark) {
    readyToSend.put(destination,dests);
  }
  return true;
}","@Override public boolean onMessage(int src,int destination,int target,int flags,Object object){
  this.source=src;
  List<Object> dests=destinationMessages.get(destination);
  int size=dests.size();
  if (size > highWaterMark) {
    return false;
  }
  dests.add(object);
  if (dests.size() > lowWaterMark) {
    lock.lock();
    try {
      readyToSend.put(destination,new ArrayList<>(dests));
      dests.clear();
    }
  finally {
      lock.unlock();
    }
  }
  return true;
}",0.6432616081540203
172993,"@Override public void progress(){
  Iterator<Map.Entry<Integer,List<Object>>> it=readyToSend.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<Integer,List<Object>> e=it.next();
    List<Object> send=new ArrayList<>(e.getValue());
    if (operation.sendPartial(source,send,0,e.getKey())) {
      e.getValue().clear();
      it.remove();
    }
  }
}","@Override public void progress(){
  lock.lock();
  try {
    Iterator<Map.Entry<Integer,List<Object>>> it=readyToSend.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry<Integer,List<Object>> e=it.next();
      List<Object> send=new ArrayList<>(e.getValue());
      if (operation.sendPartial(source,send,0,e.getKey())) {
        e.getValue().clear();
        it.remove();
      }
    }
  }
  finally {
    lock.unlock();
  }
}",0.9
172994,"@Override public boolean onMessage(int source,int path,int target,int flags,Object object){
  if (object instanceof List) {
    for (    Object o : (List)object) {
      if (o instanceof KeyedContent) {
        addValue(((KeyedContent)o).getObject().toString());
      }
 else {
        addValue(o.toString());
      }
    }
  }
 else   if (object instanceof KeyedContent) {
    String value=((KeyedContent)object).getObject().toString();
    addValue(value);
  }
 else {
    addValue(object.toString());
  }
  return true;
}","@Override public boolean onMessage(int source,int path,int target,int flags,Object object){
  if (object instanceof List) {
    for (    Object o : (List)object) {
      if (o instanceof KeyedContent) {
        addValue(((KeyedContent)o).getValue().toString());
      }
 else {
        addValue(o.toString());
      }
    }
  }
 else   if (object instanceof KeyedContent) {
    String value=((KeyedContent)object).getValue().toString();
    addValue(value);
  }
 else {
    addValue(object.toString());
  }
  return true;
}",0.9790076335877864
172995,"/** 
 * The actual message callback
 * @param object the actual message
 */
boolean onMessage(int source,int destination,int target,int flags,Object object);","/** 
 * The actual message callback
 * @param source  the source task
 * @param destination the final destination
 * @param target the target of this receiver
 * @param flags the communication flags
 * @param object the actual message
 * @return true if the message is accepted
 */
boolean onMessage(int source,int destination,int target,int flags,Object object);",0.6038461538461538
172996,"public boolean receiveSendInternally(int source,int t,int path,int flags,Object message){
  if (source == path) {
    return finalReceiver.onMessage(source,path,t,flags,message);
  }
  return partialReceiver.onMessage(source,path,t,flags,message);
}","public boolean receiveSendInternally(int source,int t,int destination,int flags,Object message){
  if (source == destination) {
    return finalReceiver.onMessage(source,destination,t,flags,message);
  }
  return partialReceiver.onMessage(source,destination,t,flags,message);
}",0.5779467680608364
172997,"/** 
 * Progress the communications that are pending
 */
public void progress(){
  while (pendingSends.size() > 0) {
    MPISendRequests sendRequests=pendingSends.poll();
    if (sendRequests != null) {
      postMessage(sendRequests);
      waitForCompletionSends.add(sendRequests);
    }
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    MPIReceiveRequests receiveRequests=registeredReceives.get(i);
    if (debug) {
      LOG.info(String.format(""String_Node_Str"",executor,receiveRequests.rank,receiveRequests.availableBuffers.size(),receiveRequests.availableBuffers.peek()));
    }
    if (receiveRequests.availableBuffers.size() > 0) {
      postReceive(receiveRequests);
    }
  }
  Iterator<MPISendRequests> sendRequestsIterator=waitForCompletionSends.iterator();
  boolean canProgress=true;
  while (sendRequestsIterator.hasNext() && canProgress) {
    MPISendRequests sendRequests=sendRequestsIterator.next();
    Iterator<MPIRequest> requestIterator=sendRequests.pendingSends.iterator();
    while (requestIterator.hasNext()) {
      MPIRequest r=requestIterator.next();
      try {
        Status status=r.request.testStatus();
        if (status != null) {
          completedSendCount++;
          requestIterator.remove();
        }
 else {
          canProgress=false;
          break;
        }
      }
 catch (      MPIException e) {
        throw new RuntimeException(""String_Node_Str"" + sendRequests.rank,e);
      }
    }
    if (sendRequests.pendingSends.size() == 0) {
      sendRequests.callback.onSendComplete(sendRequests.rank,sendRequests.edge,sendRequests.message);
      sendRequestsIterator.remove();
    }
  }
  if (false) {
    LOG.info(String.format(""String_Node_Str"",executor,sendCount,completedSendCount,receiveCount,pendingReceiveCount,pendingSends.size(),waitForCompletionSends.size()));
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    MPIReceiveRequests receiveRequests=registeredReceives.get(i);
    try {
      Iterator<MPIRequest> requestIterator=receiveRequests.pendingRequests.iterator();
      while (requestIterator.hasNext()) {
        MPIRequest r=requestIterator.next();
        Status status=r.request.testStatus();
        if (status != null) {
          if (!status.isCancelled()) {
            ++receiveCount;
            r.buffer.setSize(status.getCount(MPI.BYTE));
            receiveRequests.callback.onReceiveComplete(receiveRequests.rank,receiveRequests.edge,r.buffer);
            requestIterator.remove();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
 else {
          break;
        }
      }
    }
 catch (    MPIException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","/** 
 * Progress the communications that are pending
 */
public void progress(){
  while (pendingSends.size() > 0) {
    MPISendRequests sendRequests=pendingSends.poll();
    if (sendRequests != null) {
      postMessage(sendRequests);
      waitForCompletionSends.add(sendRequests);
    }
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    MPIReceiveRequests receiveRequests=registeredReceives.get(i);
    if (debug) {
      LOG.info(String.format(""String_Node_Str"",executor,receiveRequests.rank,receiveRequests.availableBuffers.size(),receiveRequests.availableBuffers.peek()));
    }
    if (receiveRequests.availableBuffers.size() > 0) {
      postReceive(receiveRequests);
    }
  }
  Iterator<MPISendRequests> sendRequestsIterator=waitForCompletionSends.iterator();
  boolean canProgress=true;
  while (sendRequestsIterator.hasNext() && canProgress) {
    MPISendRequests sendRequests=sendRequestsIterator.next();
    Iterator<MPIRequest> requestIterator=sendRequests.pendingSends.iterator();
    while (requestIterator.hasNext()) {
      MPIRequest r=requestIterator.next();
      try {
        Status status=r.request.testStatus();
        if (status != null) {
          completedSendCount++;
          requestIterator.remove();
        }
 else {
          canProgress=false;
          break;
        }
      }
 catch (      MPIException e) {
        throw new RuntimeException(""String_Node_Str"" + sendRequests.rank,e);
      }
    }
    if (sendRequests.pendingSends.size() == 0) {
      sendRequests.callback.onSendComplete(sendRequests.rank,sendRequests.edge,sendRequests.message);
      sendRequestsIterator.remove();
    }
  }
  if (debug) {
    LOG.info(String.format(""String_Node_Str"",executor,sendCount,completedSendCount,receiveCount,pendingReceiveCount,pendingSends.size(),waitForCompletionSends.size()));
  }
  for (int i=0; i < registeredReceives.size(); i++) {
    MPIReceiveRequests receiveRequests=registeredReceives.get(i);
    try {
      Iterator<MPIRequest> requestIterator=receiveRequests.pendingRequests.iterator();
      while (requestIterator.hasNext()) {
        MPIRequest r=requestIterator.next();
        Status status=r.request.testStatus();
        if (status != null) {
          if (!status.isCancelled()) {
            ++receiveCount;
            r.buffer.setSize(status.getCount(MPI.BYTE));
            receiveRequests.callback.onReceiveComplete(receiveRequests.rank,receiveRequests.edge,r.buffer);
            requestIterator.remove();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
 else {
          break;
        }
      }
    }
 catch (    MPIException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}",0.9982040229885056
172998,"private void buildHeader(MPIBuffer buffer,MPISendMessage sendMessage){
  if (buffer.getCapacity() < 16) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ByteBuffer byteBuffer=buffer.getByteBuffer();
  byteBuffer.putInt(sendMessage.getSource());
  byteBuffer.putInt(sendMessage.getFlags());
  byteBuffer.putInt(sendMessage.getDestintationIdentifier());
  byteBuffer.putInt(0);
  sendMessage.setWrittenHeaderSize(16);
  buffer.setSize(16);
}","private void buildHeader(MPIBuffer buffer,MPISendMessage sendMessage){
  if (buffer.getCapacity() < HEADER_SIZE) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ByteBuffer byteBuffer=buffer.getByteBuffer();
  byteBuffer.putInt(sendMessage.getSource());
  byteBuffer.putInt(sendMessage.getFlags());
  byteBuffer.putInt(sendMessage.getDestintationIdentifier());
  byteBuffer.putInt(0);
  sendMessage.setWrittenHeaderSize(HEADER_SIZE);
  buffer.setSize(16);
}",0.2270742358078602
172999,"public RRServer(Config cfg,String host,int port,Progress loop){
  server=new Server(cfg,host,port,loop,new Handler(),false);
}","public RRServer(Config cfg,String host,int port,Progress loop,int wId){
  this.workerId=wId;
  server=new Server(cfg,host,port,loop,new Handler(),false);
}",0.896797153024911
173000,"@Override public void onReceiveComplete(SocketChannel channel,TCPMessage readRequest){
  ByteBuffer data=readRequest.getByteBuffer();
  byte[] id=new byte[RequestID.ID_SIZE];
  data.get(id);
  String messageType=ByteUtils.unPackString(data);
  int serverWorkerId=data.getInt();
  RequestID requestID=RequestID.fromBytes(id);
  Message.Builder builder=messageBuilders.get(messageType);
  if (builder == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    builder.mergeFrom(data.array());
    Message m=builder.build();
    MessageHandler handler=requests.get(requestID);
    handler.onMessage(requestID,serverWorkerId,m);
  }
 catch (  InvalidProtocolBufferException e) {
    LOG.log(Level.SEVERE,""String_Node_Str"",e);
  }
}","@Override public void onReceiveComplete(SocketChannel channel,TCPMessage readRequest){
  ByteBuffer data=readRequest.getByteBuffer();
  byte[] id=new byte[RequestID.ID_SIZE];
  data.get(id);
  String messageType=ByteUtils.unPackString(data);
  int clientId=data.getInt();
  RequestID requestID=RequestID.fromBytes(id);
  Message.Builder builder=messageBuilders.get(messageType);
  if (builder == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    builder.mergeFrom(data.array());
    Message m=builder.build();
    MessageHandler handler=requestHandlers.get(messageType);
    handler.onMessage(requestID,clientId,m);
    requestToWorkers.put(requestID,clientId);
    requestChannels.put(requestID,channel);
  }
 catch (  InvalidProtocolBufferException e) {
    LOG.log(Level.SEVERE,""String_Node_Str"",e);
  }
}",0.8993033565547816
