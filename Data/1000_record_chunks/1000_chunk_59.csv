record_number,buggy_code,fixed_code,code_similarity
58001,"/** 
 * Constructor
 * @param manager The gl view managing the container.
 * @param category Every category in  {@link EIDCategory} can have one bookmarkcontainer, therefore you need to specify the concrete category. The category should be specified by the concrete subclass and therefore not be part of its constructor.
 * @param internalIDType the id type the container uses to internally store the bookmarks
 */
ABookmarkContainer(GLBookmarkView manager,IDCategory category,IDType internalIDType){
  this.internalIDType=internalIDType;
  this.manager=manager;
  this.category=category;
  this.categoryName=category.getCategoryName();
  this.pickingIDManager=manager.getPickingIDManager();
  this.containerLayout=new Column();
  containerLayout.setYDynamic(true);
  containerLayout.setRatioSizeX(1);
  containerLayout.setBottomUp(false);
  ContainerHeading heading=new ContainerHeading(manager);
  heading.setCaption(category.getCategoryName());
  containerLayout.append(heading.getLayout());
}","/** 
 * Constructor
 * @param manager The gl view managing the container.
 * @param category Every category in  {@link EIDCategory} can have one bookmarkcontainer, therefore you need to specify the concrete category. The category should be specified by the concrete subclass and therefore not be part of its constructor.
 * @param internalIDType the id type the container uses to internally store the bookmarks
 */
ABookmarkContainer(GLBookmarkView manager,IDCategory category,IDType internalIDType){
  this.internalIDType=internalIDType;
  this.manager=manager;
  this.category=category;
  this.categoryName=category.getCategoryName();
  this.pickingIDManager=manager.getPickingIDManager();
  this.containerLayout=new Column(""String_Node_Str"");
  containerLayout.setYDynamic(true);
  containerLayout.setRatioSizeX(1);
  containerLayout.setBottomUp(false);
  ContainerHeading heading=new ContainerHeading(manager);
  heading.setCaption(category.getCategoryName());
  containerLayout.append(heading.getLayout());
}",0.9915380786460926
58002,"@Override public ElementLayout getLayout(){
  return layoutElement;
}","@Override public ElementLayout getLayout(){
  return layout;
}",0.9465648854961832
58003,"public ContainerHeading(GLBookmarkView manager){
  this.manager=manager;
  layoutElement=new ElementLayout();
  layoutElement.setPixelGLConverter(manager.getParentGLCanvas().getPixelGLConverter());
  layoutElement.setRatioSizeX(1);
  layoutElement.setPixelSizeY(20);
  layoutElement.setRenderer(this);
}","public ContainerHeading(GLBookmarkView manager){
  this.manager=manager;
  layout=new ElementLayout(""String_Node_Str"");
  layout.setPixelGLConverter(manager.getParentGLCanvas().getPixelGLConverter());
  layout.setRatioSizeX(1);
  layout.setPixelSizeY(20);
  layout.setRenderer(this);
}",0.8367346938775511
58004,"@Override public void render(GL2 gl){
  super.render(gl);
  float height=(layoutElement.getSizeScaledY() - (float)manager.getMinSizeTextRenderer().getBounds(""String_Node_Str"").getHeight()) / 2;
  RenderingHelpers.renderText(gl,manager.getMinSizeTextRenderer(),caption,0 + BookmarkRenderStyle.SIDE_SPACING,height,GeneralRenderStyle.SMALL_FONT_SCALING_FACTOR);
}","@Override public void render(GL2 gl){
  super.render(gl);
  PixelGLConverter pixelGLConverter=manager.getParentGLCanvas().getPixelGLConverter();
  float ySpacing=pixelGLConverter.getGLHeightForPixelHeight(Y_SPACING_PIXEL);
  float xSpacing=pixelGLConverter.getGLWidthForPixelWidth(X_SPACING_PIXEL);
  manager.getTextRenderer().setColor(0,0,0,1);
  manager.getTextRenderer().renderTextInBounds(gl,caption,0 + xSpacing,0 + ySpacing,0,x - xSpacing,y - 2 * ySpacing);
}",0.2278787878787878
58005,"public void setGlobalViewSwitching(boolean isGlobalViewSwitching){
  this.isGlobalViewSwitching=isGlobalViewSwitching;
  for (  GLBrick brick : topBricks) {
    brick.setGlobalViewSwitching(isGlobalViewSwitching);
  }
  for (  GLBrick brick : bottomBricks) {
    brick.setGlobalViewSwitching(isGlobalViewSwitching);
  }
}","public void setGlobalViewSwitching(boolean isGlobalViewSwitching){
  this.isGlobalViewSwitching=isGlobalViewSwitching;
  for (  GLBrick brick : topBricks) {
    brick.setGlobalViewSwitching(isGlobalViewSwitching);
  }
  for (  GLBrick brick : bottomBricks) {
    brick.setGlobalViewSwitching(isGlobalViewSwitching);
  }
  if (detailBrick != null) {
    detailBrick.setGlobalViewSwitching(isGlobalViewSwitching);
  }
}",0.8699186991869918
58006,"/** 
 * Switch all bricks to the specified view type
 * @param viewType
 */
public void switchBrickViews(EContainedViewType viewType){
  for (  GLBrick brick : topBricks) {
    brick.setContainedView(viewType);
  }
  for (  GLBrick brick : bottomBricks) {
    brick.setContainedView(viewType);
  }
  detailRow.updateSubLayout();
}","/** 
 * Switch all bricks to the specified view type
 * @param viewType
 */
public void switchBrickViews(EContainedViewType viewType){
  for (  GLBrick brick : topBricks) {
    brick.setContainedView(viewType);
  }
  for (  GLBrick brick : bottomBricks) {
    brick.setContainedView(viewType);
  }
  if (detailBrick != null) {
    detailBrick.setContainedView(viewType);
  }
  detailRow.updateSubLayout();
}",0.8955223880597015
58007,"private void renderFlexibleArch(GL2 gl){
  if (connectionRenderer == null)   return;
  if (!isVertical)   return;
  float leftCenterBrickTop=0;
  float leftCenterBrickBottom=0;
  float rightCenterBrickTop=0;
  float rightCenterBrickBottom=0;
  float curveOffset=x * 0.2f;
  float xStart;
  float xEnd;
  if (leftDimGroup == null && rightDimGroup == null && glVisBricks != null) {
    leftCenterBrickBottom=glVisBricks.getArchBottomY();
    leftCenterBrickTop=glVisBricks.getArchTopY();
    rightCenterBrickBottom=glVisBricks.getArchBottomY();
    rightCenterBrickTop=glVisBricks.getArchTopY();
  }
  if (leftDimGroup != null) {
    GLBrick leftCenterBrick=leftDimGroup.getCenterBrick();
    ElementLayout layout=leftCenterBrick.getLayout();
    leftCenterBrickBottom=layout.getTranslateY();
    leftCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledY();
    xStart=leftDimGroup.getLayout().getTranslateX() - leftCenterBrick.getLayout().getTranslateX();
    if (xStart != 0) {
      connectionRenderer.renderSingleBand(gl,new float[]{xStart,leftCenterBrickTop,0},new float[]{xStart,leftCenterBrickBottom,0},new float[]{0,leftCenterBrickTop,0},new float[]{0,leftCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
    }
  }
 else {
    if (rightDimGroup != null) {
      leftCenterBrickBottom=glVisBricks.getArchBottomY();
      leftCenterBrickTop=glVisBricks.getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (rightDimGroup != null) {
    GLBrick rightCenterBrick=rightDimGroup.getCenterBrick();
    ElementLayout layout=rightCenterBrick.getLayout();
    rightCenterBrickBottom=layout.getTranslateY();
    rightCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledY();
    xEnd=x + rightCenterBrick.getLayout().getTranslateX() - rightDimGroup.getLayout().getTranslateX();
    if (xEnd != 0) {
      connectionRenderer.renderStraightBand(gl,new float[]{x,rightCenterBrickTop,0},new float[]{x,rightCenterBrickBottom,0},new float[]{xEnd,rightCenterBrickTop,0},new float[]{xEnd,rightCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
    }
  }
 else {
    if (leftDimGroup != null) {
      rightCenterBrickBottom=glVisBricks.getArchBottomY();
      rightCenterBrickTop=glVisBricks.getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (leftCenterBrickBottom == 0 && rightCenterBrickBottom == 0)   return;
  connectionRenderer.renderSingleBand(gl,new float[]{0,leftCenterBrickTop,0},new float[]{0,leftCenterBrickBottom,0},new float[]{x,rightCenterBrickTop,0},new float[]{x,rightCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
}","private void renderFlexibleArch(GL2 gl){
  if (connectionRenderer == null)   return;
  if (!isVertical)   return;
  float leftCenterBrickTop=0;
  float leftCenterBrickBottom=0;
  float rightCenterBrickTop=0;
  float rightCenterBrickBottom=0;
  float curveOffset=x * 0.2f;
  float xStart=0;
  float xEnd;
  if (leftDimGroup == null && rightDimGroup == null && glVisBricks != null) {
    leftCenterBrickBottom=glVisBricks.getArchBottomY();
    leftCenterBrickTop=glVisBricks.getArchTopY();
    rightCenterBrickBottom=glVisBricks.getArchBottomY();
    rightCenterBrickTop=glVisBricks.getArchTopY();
  }
  if (leftDimGroup != null) {
    if (leftDimGroup.isDetailBrickShown() && !leftDimGroup.isExpandLeft())     return;
    GLBrick leftCenterBrick=leftDimGroup.getCenterBrick();
    ElementLayout layout=leftCenterBrick.getLayout();
    leftCenterBrickBottom=layout.getTranslateY();
    leftCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledY();
    if (!leftDimGroup.isDetailBrickShown())     xStart=leftDimGroup.getLayout().getTranslateX() - leftCenterBrick.getLayout().getTranslateX();
    if (xStart != 0) {
      connectionRenderer.renderSingleBand(gl,new float[]{xStart,leftCenterBrickTop,0},new float[]{xStart,leftCenterBrickBottom,0},new float[]{0,leftCenterBrickTop,0},new float[]{0,leftCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
    }
  }
 else {
    if (rightDimGroup != null) {
      leftCenterBrickBottom=glVisBricks.getArchBottomY();
      leftCenterBrickTop=glVisBricks.getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (rightDimGroup != null) {
    if (rightDimGroup.isDetailBrickShown() && rightDimGroup.isExpandLeft())     return;
    GLBrick rightCenterBrick=rightDimGroup.getCenterBrick();
    ElementLayout layout=rightCenterBrick.getLayout();
    rightCenterBrickBottom=layout.getTranslateY();
    rightCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledY();
    if (!rightDimGroup.isDetailBrickShown())     xEnd=x + rightCenterBrick.getLayout().getTranslateX() - rightDimGroup.getLayout().getTranslateX();
 else     xEnd=x + rightCenterBrick.getLayout().getTranslateX();
    if (xEnd != 0) {
      connectionRenderer.renderStraightBand(gl,new float[]{x,rightCenterBrickTop,0},new float[]{x,rightCenterBrickBottom,0},new float[]{xEnd,rightCenterBrickTop,0},new float[]{xEnd,rightCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
    }
  }
 else {
    if (leftDimGroup != null) {
      rightCenterBrickBottom=glVisBricks.getArchBottomY();
      rightCenterBrickTop=glVisBricks.getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (leftCenterBrickBottom == 0 && rightCenterBrickBottom == 0)   return;
  connectionRenderer.renderSingleBand(gl,new float[]{0,leftCenterBrickTop,0},new float[]{0,leftCenterBrickBottom,0},new float[]{x,rightCenterBrickTop,0},new float[]{x,rightCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
}",0.9403711043055304
58008,"private void renderCaption(GL2 gl,float normalizedValue){
  if (getParentGLCanvas().getSize().getWidth() < 500)   return;
  textRenderer.begin3DRendering();
  textRenderer.setColor(0,0,0,1);
  gl.glDisable(GL2.GL_DEPTH_TEST);
  double correspondingValue=dataDomain.getSet().getRawForNormalized(normalizedValue);
  String text=Formatter.formatNumber(correspondingValue);
  textRenderer.draw3D(text,sideSpacing + normalizedValue * fRenderWidth + HistogramRenderStyle.CAPTION_SPACING,HistogramRenderStyle.CAPTION_SPACING,0.001f,GeneralRenderStyle.HEADING_FONT_SCALING_FACTOR);
  textRenderer.end3DRendering();
}","private void renderCaption(GL2 gl,float normalizedValue){
  if (getParentGLCanvas().getSize().getWidth() < 500 || dataDomain.getSet().getSetType() != ESetDataType.NUMERIC)   return;
  textRenderer.begin3DRendering();
  textRenderer.setColor(0,0,0,1);
  gl.glDisable(GL2.GL_DEPTH_TEST);
  double correspondingValue=dataDomain.getSet().getRawForNormalized(normalizedValue);
  String text=Formatter.formatNumber(correspondingValue);
  textRenderer.draw3D(text,sideSpacing + normalizedValue * fRenderWidth + HistogramRenderStyle.CAPTION_SPACING,HistogramRenderStyle.CAPTION_SPACING,0.001f,GeneralRenderStyle.HEADING_FONT_SCALING_FACTOR);
  textRenderer.end3DRendering();
}",0.9529780564263324
58009,"public void expand(){
  ABrickLayoutTemplate layoutTemplate=brickLayout.getExpandedLayoutTemplate();
  if (expandedBrickState != null) {
    setBrickLayoutTemplate(layoutTemplate,expandedBrickState.getViewType());
    wrappingLayout.setAbsoluteSizeX(expandedBrickState.getWidth());
    wrappingLayout.setAbsoluteSizeY(expandedBrickState.getHeight());
  }
 else {
    setBrickLayoutTemplate(layoutTemplate,currentViewType);
    float defaultHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getDefaultHeightPixels());
    float defaultWidth=getParentGLCanvas().getPixelGLConverter().getGLWidthForPixelWidth(layoutTemplate.getDefaultWidthPixels());
    wrappingLayout.setAbsoluteSizeY(defaultHeight);
    wrappingLayout.setAbsoluteSizeX(defaultWidth);
  }
  isInOverviewMode=false;
}","public void expand(){
  ABrickLayoutTemplate layoutTemplate=brickLayout.getExpandedLayoutTemplate();
  if (expandedBrickState != null) {
    setBrickLayoutTemplate(layoutTemplate,expandedBrickState.getViewType());
    wrappingLayout.setAbsoluteSizeX(expandedBrickState.getWidth());
    wrappingLayout.setAbsoluteSizeY(expandedBrickState.getHeight());
  }
 else {
    setBrickLayoutTemplate(layoutTemplate,currentViewType);
    float defaultHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getDefaultHeightPixels());
    float defaultWidth=getParentGLCanvas().getPixelGLConverter().getGLWidthForPixelWidth(layoutTemplate.getDefaultWidthPixels());
    wrappingLayout.setAbsoluteSizeY(defaultHeight);
    wrappingLayout.setAbsoluteSizeX(defaultWidth);
  }
  isInOverviewMode=false;
  isSizeFixed=true;
  brickLayout.setLockResizing(true);
}",0.966450853443202
58010,"@Override public int getMinWidthPixels(){
  return 3 * SPACING_PIXELS + viewRenderer.getMinWidthPixels() + BUTTON_WIDTH_PIXELS;
}","@Override public int getMinWidthPixels(){
  if (viewRenderer == null)   return 3 * SPACING_PIXELS + 60 + BUTTON_WIDTH_PIXELS;
  return 3 * SPACING_PIXELS + viewRenderer.getMinWidthPixels() + BUTTON_WIDTH_PIXELS;
}",0.7543859649122807
58011,"/** 
 * Creates all bricks except for the center brick based on the groupList in the contentVA
 */
private void createSubBricks(){
  destroyOldBricks();
  ContentVirtualArray contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (contentVA.getGroupList() == null)   return;
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  for (  Group group : groupList) {
    GLBrick subBrick=createBrick(new ElementLayout(""String_Node_Str""));
    ContentVirtualArray subVA=new ContentVirtualArray(""String_Node_Str"",contentVA.getVirtualArray().subList(group.getStartIndex(),group.getEndIndex() + 1));
    subBrick.setContentVA(group,subVA);
    subBrick.getLayout().setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    subBrick.getLayout().setPixelSizeY(80);
    if (centerBrick.getAverageValue() < subBrick.getAverageValue()) {
      insertBrick(subBrick,topBricks,topCol);
    }
 else {
      insertBrick(subBrick,bottomBricks,bottomCol);
    }
  }
  ElementLayout brickSpacingLayout=new ElementLayout(""String_Node_Str"");
  brickSpacingLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  brickSpacingLayout.setPixelSizeY(10);
  brickSpacingLayout.setRatioSizeX(0);
  for (int count=0; count < topCol.size(); ) {
    topCol.add(count,brickSpacingLayout);
    count++;
    count++;
  }
  for (int count=0; count < bottomCol.size(); ) {
    bottomCol.add(count,brickSpacingLayout);
    count++;
    count++;
  }
}","/** 
 * Creates all bricks except for the center brick based on the groupList in the contentVA
 */
private void createSubBricks(){
  destroyOldBricks();
  ContentVirtualArray contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (contentVA.getGroupList() == null)   return;
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  for (  Group group : groupList) {
    GLBrick subBrick=createBrick(new ElementLayout(""String_Node_Str""));
    ContentVirtualArray subVA=new ContentVirtualArray(""String_Node_Str"",contentVA.getVirtualArray().subList(group.getStartIndex(),group.getEndIndex() + 1));
    subBrick.setContentVA(group,subVA);
    ABrickLayoutTemplate layoutTemplate=new DefaultBrickLayoutTemplate(subBrick,glVisBricksView,this,subBrick.getLayoutConfigurer());
    subBrick.setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
    subBrick.getLayout().setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    subBrick.getLayout().setPixelSizeY(80);
    if (centerBrick.getAverageValue() < subBrick.getAverageValue()) {
      insertBrick(subBrick,topBricks,topCol);
    }
 else {
      insertBrick(subBrick,bottomBricks,bottomCol);
    }
  }
  ElementLayout brickSpacingLayout=new ElementLayout(""String_Node_Str"");
  brickSpacingLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  brickSpacingLayout.setPixelSizeY(10);
  brickSpacingLayout.setRatioSizeX(0);
  for (int count=0; count < topCol.size(); ) {
    topCol.add(count,brickSpacingLayout);
    count++;
    count++;
  }
  for (int count=0; count < bottomCol.size(); ) {
    bottomCol.add(count,brickSpacingLayout);
    count++;
    count++;
  }
}",0.9295418641390204
58012,"@Override public void handleLayoutSizeCollision(int managingClassID,int layoutID,float toBigBy){
  if (managingClassID != uniqueID)   return;
  System.out.println(""String_Node_Str"");
  if (layoutID == TOP_COLUMN_ID) {
    boolean changeMade=false;
    for (int count=topBricks.size() - 1; count >= 0; count--) {
      GLBrick brick=topBricks.get(count);
      if (toBigBy < 0)       break;
      if (!brick.isInOverviewMode() && !brick.isSizeFixed()) {
      }
    }
    if (changeMade)     topCol.updateSubLayout();
  }
  if (layoutID == BOTTOM_COLUMN_ID) {
    boolean changeMade=false;
    for (int count=bottomBricks.size() - 1; count >= 0; count--) {
      GLBrick brick=bottomBricks.get(count);
      if (toBigBy < 0)       break;
      if (!brick.isInOverviewMode() && !brick.isSizeFixed()) {
      }
    }
    if (changeMade)     bottomCol.updateSubLayout();
  }
}","@Override public void handleLayoutSizeCollision(int managingClassID,int layoutID,float toBigBy){
  if (managingClassID != uniqueID)   return;
  System.out.println(""String_Node_Str"");
  if (layoutID == TOP_COLUMN_ID) {
    boolean changeMade=false;
    for (int count=topBricks.size() - 1; count >= 0; count--) {
      GLBrick brick=topBricks.get(count);
      if (toBigBy < 0)       break;
      if (!brick.isInOverviewMode() && !brick.isSizeFixed()) {
        toBigBy-=brick.collapse();
        changeMade=true;
      }
    }
    if (changeMade)     topCol.updateSubLayout();
  }
  if (layoutID == BOTTOM_COLUMN_ID) {
    boolean changeMade=false;
    for (int count=bottomBricks.size() - 1; count >= 0; count--) {
      GLBrick brick=bottomBricks.get(count);
      if (toBigBy < 0)       break;
      if (!brick.isInOverviewMode() && !brick.isSizeFixed()) {
        toBigBy-=brick.collapse();
        changeMade=true;
      }
    }
    if (changeMade)     bottomCol.updateSubLayout();
  }
}",0.9356223175965666
58013,"@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  if (set == null)   set=dataDomain.getSet();
  if (contentVA == null)   contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (storageVA == null)   storageVA=set.getStorageData(Set.STORAGE).getStorageVA();
  templateRenderer=new LayoutManager(viewFrustum);
  if (set.getSetType().equals(ESetDataType.NUMERIC)) {
    brickConfigurer=new NumericalDataConfigurer();
  }
 else {
    brickConfigurer=new NominalDataConfigurer();
  }
  if (brickLayout == null) {
    brickLayout=new DefaultBrickLayoutTemplate(this,visBricks,dimensionGroup,brickConfigurer);
  }
  brickConfigurer.setBrickViews(this,gl,glMouseListener,brickLayout);
  currentViewType=brickLayout.getDefaultViewType();
  brickLayout.setViewRenderer(containedViewRenderers.get(currentViewType));
  currentRemoteView=views.get(currentRemoteView);
  templateRenderer.setTemplate(brickLayout);
  float defaultHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(brickLayout.getDefaultHeightPixels());
  float defaultWidth=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(brickLayout.getDefaultWidthPixels());
  wrappingLayout.setAbsoluteSizeY(defaultHeight);
  wrappingLayout.setAbsoluteSizeX(defaultWidth);
  templateRenderer.updateLayout();
  addPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      SelectionType currentSelectionType=contentGroupSelectionManager.getSelectionType();
      contentGroupSelectionManager.clearSelection(currentSelectionType);
      contentGroupSelectionManager.addToType(currentSelectionType,group.getID());
      SelectionUpdateEvent event=new SelectionUpdateEvent();
      event.setDataDomainType(getDataDomain().getDataDomainType());
      event.setSender(this);
      SelectionDelta delta=contentGroupSelectionManager.getDelta();
      event.setSelectionDelta(delta);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
      showHandles();
      selectElementsByGroup();
    }
    @Override public void mouseOver(    Pick pick){
      showHandles();
    }
    public void showHandles(){
      if (brickLayout.isShowHandles())       return;
      ArrayList<DimensionGroup> dimensionGroups=dimensionGroup.getVisBricksView().getDimensionGroupManager().getDimensionGroups();
      for (      DimensionGroup dimensionGroup : dimensionGroups) {
        dimensionGroup.hideHandles();
      }
      if (!brickLayout.isShowHandles()) {
        brickLayout.setShowHandles(true);
        templateRenderer.updateLayout();
      }
    }
  }
,EPickingType.BRICK,getID());
  dimensionGroup.updateLayout();
}","@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  if (set == null)   set=dataDomain.getSet();
  if (contentVA == null)   contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (storageVA == null)   storageVA=set.getStorageData(Set.STORAGE).getStorageVA();
  templateRenderer=new LayoutManager(viewFrustum);
  if (set.getSetType().equals(ESetDataType.NUMERIC)) {
    brickConfigurer=new NumericalDataConfigurer();
  }
 else {
    brickConfigurer=new NominalDataConfigurer();
  }
  if (brickLayout == null) {
    brickLayout=new DefaultBrickLayoutTemplate(this,visBricks,dimensionGroup,brickConfigurer);
  }
  brickConfigurer.setBrickViews(this,gl,glMouseListener,brickLayout);
  currentViewType=brickLayout.getDefaultViewType();
  brickLayout.setViewRenderer(containedViewRenderers.get(currentViewType));
  currentRemoteView=views.get(currentRemoteView);
  templateRenderer.setTemplate(brickLayout);
  float defaultHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(brickLayout.getDefaultHeightPixels());
  float defaultWidth=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(brickLayout.getDefaultWidthPixels());
  wrappingLayout.setAbsoluteSizeY(defaultHeight);
  wrappingLayout.setAbsoluteSizeX(defaultWidth);
  templateRenderer.updateLayout();
  addPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      SelectionType currentSelectionType=contentGroupSelectionManager.getSelectionType();
      contentGroupSelectionManager.clearSelection(currentSelectionType);
      contentGroupSelectionManager.addToType(currentSelectionType,group.getID());
      SelectionUpdateEvent event=new SelectionUpdateEvent();
      event.setDataDomainType(getDataDomain().getDataDomainType());
      event.setSender(this);
      SelectionDelta delta=contentGroupSelectionManager.getDelta();
      event.setSelectionDelta(delta);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
      showHandles();
      selectElementsByGroup();
    }
    @Override public void mouseOver(    Pick pick){
      showHandles();
    }
    public void showHandles(){
      if (brickLayout.isShowHandles())       return;
      ArrayList<DimensionGroup> dimensionGroups=dimensionGroup.getVisBricksView().getDimensionGroupManager().getDimensionGroups();
      for (      DimensionGroup dimensionGroup : dimensionGroups) {
        dimensionGroup.hideHandles();
      }
      if (!brickLayout.isShowHandles()) {
        brickLayout.setShowHandles(true);
        templateRenderer.updateLayout();
      }
    }
  }
,EPickingType.BRICK,getID());
  dimensionGroup.updateLayout();
  isInitialized=true;
}",0.995964783565664
58014,"/** 
 * Sets this brick collapsed
 * @return how much this has affected the height of the brick.
 */
public float collapse(){
  if (!isInOverviewMode) {
    expandedBrickState=new BrickState(currentViewType,wrappingLayout.getSizeScaledY(),wrappingLayout.getSizeScaledX());
  }
  ABrickLayoutTemplate layoutTemplate=brickLayout.getCollapsedLayoutTemplate();
  setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
  float minHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinHeightPixels());
  float minWidth=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinWidthPixels());
  float currentSize=wrappingLayout.getSizeScaledY();
  wrappingLayout.setAbsoluteSizeY(minHeight);
  wrappingLayout.setAbsoluteSizeX(minWidth);
  return currentSize - minHeight;
}","/** 
 * Sets this brick collapsed
 * @return how much this has affected the height of the brick.
 */
public float collapse(){
  if (!isInOverviewMode && isInitialized) {
    expandedBrickState=new BrickState(currentViewType,wrappingLayout.getSizeScaledY(),wrappingLayout.getSizeScaledX());
  }
  ABrickLayoutTemplate layoutTemplate=brickLayout.getCollapsedLayoutTemplate();
  setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
  float minHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinHeightPixels());
  float minWidth=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinWidthPixels());
  float currentSize=wrappingLayout.getSizeScaledY();
  wrappingLayout.setAbsoluteSizeY(minHeight);
  wrappingLayout.setAbsoluteSizeX(minWidth);
  return currentSize - minHeight;
}",0.9902130109383996
58015,"public void expand(){
  ABrickLayoutTemplate layoutTemplate=brickLayout.getExpandedLayoutTemplate();
  if (expandedBrickState != null) {
    setBrickLayoutTemplate(layoutTemplate,expandedBrickState.getViewType());
    wrappingLayout.setAbsoluteSizeX(expandedBrickState.getWidth());
    wrappingLayout.setAbsoluteSizeY(expandedBrickState.getHeight());
  }
 else {
    setBrickLayoutTemplate(layoutTemplate,currentViewType);
    float defaultHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getDefaultHeightPixels());
    float defaultWidth=getParentGLCanvas().getPixelGLConverter().getGLWidthForPixelWidth(layoutTemplate.getDefaultWidthPixels());
    wrappingLayout.setAbsoluteSizeY(defaultHeight);
    wrappingLayout.setAbsoluteSizeX(defaultWidth);
  }
  isInOverviewMode=false;
  isSizeFixed=true;
  brickLayout.setLockResizing(true);
}","public void expand(){
  ABrickLayoutTemplate layoutTemplate=brickLayout.getExpandedLayoutTemplate();
  if (expandedBrickState != null) {
    setBrickLayoutTemplate(layoutTemplate,expandedBrickState.getViewType());
    wrappingLayout.setAbsoluteSizeX(expandedBrickState.getWidth());
    wrappingLayout.setAbsoluteSizeY(expandedBrickState.getHeight());
  }
 else {
    setBrickLayoutTemplate(layoutTemplate,currentViewType);
    float defaultHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getDefaultHeightPixels());
    float defaultWidth=getParentGLCanvas().getPixelGLConverter().getGLWidthForPixelWidth(layoutTemplate.getDefaultWidthPixels());
    wrappingLayout.setAbsoluteSizeY(defaultHeight);
    wrappingLayout.setAbsoluteSizeX(defaultWidth);
  }
  isInOverviewMode=false;
  isSizeFixed=true;
  brickLayout.setLockResizing(true);
  visBricks.updateLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
}",0.9527943570265872
58016,"/** 
 * Sets this brick collapsed
 * @return how much this has affected the height of the brick.
 */
public float collapse(){
  if (!isInOverviewMode && isInitialized) {
    expandedBrickState=new BrickState(currentViewType,wrappingLayout.getSizeScaledY(),wrappingLayout.getSizeScaledX());
  }
  ABrickLayoutTemplate layoutTemplate=brickLayout.getCollapsedLayoutTemplate();
  setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
  float minHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinHeightPixels());
  float minWidth=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinWidthPixels());
  float currentSize=wrappingLayout.getSizeScaledY();
  wrappingLayout.setAbsoluteSizeY(minHeight);
  wrappingLayout.setAbsoluteSizeX(minWidth);
  return currentSize - minHeight;
}","/** 
 * Sets this brick collapsed
 * @return how much this has affected the height of the brick.
 */
public float collapse(){
  if (!isInOverviewMode && isInitialized) {
    expandedBrickState=new BrickState(currentViewType,wrappingLayout.getSizeScaledY(),wrappingLayout.getSizeScaledX());
  }
  ABrickLayoutTemplate layoutTemplate=brickLayout.getCollapsedLayoutTemplate();
  setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
  float minHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinHeightPixels());
  float minWidth=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(layoutTemplate.getMinWidthPixels());
  float currentSize=wrappingLayout.getSizeScaledY();
  wrappingLayout.setAbsoluteSizeY(minHeight);
  wrappingLayout.setAbsoluteSizeX(minWidth);
  visBricks.updateLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
  return currentSize - minHeight;
}",0.9527430744160782
58017,"@Override public void display(GL2 gl){
  if (showDetailBrick) {
    detailRow.clear();
    if (expandLeft) {
      detailRow.append(detailBrickLayout);
      detailRow.append(overviewDetailGapLayout);
      detailRow.append(groupColumn);
      visBricks.switchToDetailModeRight(this);
    }
 else {
      detailRow.append(groupColumn);
      detailRow.append(overviewDetailGapLayout);
      detailRow.append(detailBrickLayout);
      visBricks.switchToDetailModeLeft(this);
    }
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
    showDetailBrick=false;
    isDetailBrickShown=true;
  }
  if (hideDetailBrick || (isCollapsed && detailBrick != null)) {
    detailRow.clear();
    detailRow.append(groupColumn);
    if (detailBrick != null) {
      GeneralManager.get().getViewGLCanvasManager().unregisterGLView(detailBrick);
      detailBrick.unregisterEventListeners();
      detailBrick.destroy();
      detailBrick=null;
    }
    isDetailBrickShown=false;
    if (hideDetailBrick && expandLeft) {
      visBricks.switchToOverviewModeRight();
    }
    if (hideDetailBrick && !expandLeft) {
      visBricks.switchToOverviewModeLeft();
    }
    hideDetailBrick=false;
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
  }
  while (!uninitializedBricks.isEmpty()) {
    uninitializedBricks.poll().initRemote(gl,this,glMouseListener);
  }
  handleVerticalMoveDragging(gl);
  checkForHits(gl);
}","@Override public void display(GL2 gl){
  if (showDetailBrick) {
    detailRow.clear();
    if (expandLeft) {
      detailRow.append(detailBrickLayout);
      detailRow.append(overviewDetailGapLayout);
      detailRow.append(groupColumn);
      visBricks.switchToDetailModeRight(this);
    }
 else {
      detailRow.append(groupColumn);
      detailRow.append(overviewDetailGapLayout);
      detailRow.append(detailBrickLayout);
      visBricks.switchToDetailModeLeft(this);
    }
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
    showDetailBrick=false;
    isDetailBrickShown=true;
  }
  if (hideDetailBrick || (isCollapsed && detailBrick != null)) {
    detailRow.clear();
    detailRow.append(groupColumn);
    if (detailBrick != null) {
      GeneralManager.get().getViewGLCanvasManager().unregisterGLView(detailBrick);
      detailBrick.unregisterEventListeners();
      detailBrick.destroy();
      detailBrick=null;
    }
    isDetailBrickShown=false;
    if (hideDetailBrick && expandLeft) {
      visBricks.switchToOverviewModeRight();
    }
    if (hideDetailBrick && !expandLeft) {
      visBricks.switchToOverviewModeLeft();
    }
    hideDetailBrick=false;
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
  }
  while (!uninitializedBricks.isEmpty()) {
    uninitializedBricks.poll().initRemote(gl,this,glMouseListener);
    glVisBricksView.updateLayout();
    glVisBricksView.updateConnectionLinesBetweenDimensionGroups();
  }
  handleVerticalMoveDragging(gl);
  checkForHits(gl);
}",0.967741935483871
58018,"public void updateConnectionLinesBetweenDimensionGroups(){
  if (centerRowLayout != null) {
    for (    ElementLayout elementLayout : centerRowLayout.getElements()) {
      if (elementLayout.getRenderer() instanceof DimensionGroupSpacingRenderer) {
        ((DimensionGroupSpacingRenderer)elementLayout.getRenderer()).init();
      }
    }
  }
}","public void updateConnectionLinesBetweenDimensionGroups(){
  connectionBandIDCounter=0;
  if (centerRowLayout != null) {
    for (    ElementLayout elementLayout : centerRowLayout.getElements()) {
      if (elementLayout.getRenderer() instanceof DimensionGroupSpacingRenderer) {
        ((DimensionGroupSpacingRenderer)elementLayout.getRenderer()).init();
      }
    }
  }
}",0.9597780859916782
58019,"public void init(){
  if (relationAnalyzer == null || leftDimGroup == null || rightDimGroup == null)   return;
  hashGroupID2GroupMatches.clear();
  connectionBandIDCounter=0;
  List<GLBrick> leftBricks=leftDimGroup.getBricksForRelations();
  List<GLBrick> rightBricks=rightDimGroup.getBricksForRelations();
  if (leftBricks.size() == 0 || rightBricks.size() == 0)   return;
  SimilarityMap similarityMap=relationAnalyzer.getSimilarityMap(leftDimGroup.getSetID());
  if (similarityMap == null)   return;
  VASimilarity<ContentVirtualArray,ContentGroupList> vaSimilarityMap=similarityMap.getVASimilarity(rightDimGroup.getSetID());
  if (vaSimilarityMap == null)   return;
  for (  GLBrick leftBrick : leftBricks) {
    GroupMatch groupMatch=new GroupMatch(leftBrick);
    hashGroupID2GroupMatches.put(leftBrick.getGroupID(),groupMatch);
    ElementLayout leftBrickElementLayout=leftBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> leftGroupSimilarity=vaSimilarityMap.getGroupSimilarity(leftDimGroup.getSetID(),leftBrick.getGroupID());
    float[] leftSimilarities=leftGroupSimilarity.getSimilarities();
    float leftSimilarityOffsetY=0;
    for (    GLBrick rightBrick : rightBricks) {
      SubGroupMatch subGroupMatch=new SubGroupMatch(connectionBandIDCounter++,rightBrick);
      groupMatch.addSubGroupMatch(rightBrick.getGroupID(),subGroupMatch);
      calculateSubMatchSelections(subGroupMatch,leftGroupSimilarity.getSimilarityVAs(rightBrick.getGroupID()));
      float leftSimilarityRatioY=leftSimilarities[rightBrick.getGroupID()];
      leftSimilarityOffsetY+=leftSimilarityRatioY;
      subGroupMatch.setSimilarityRatioLeft(leftSimilarityRatioY);
      subGroupMatch.setLeftAnchorYStart(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY));
      subGroupMatch.setLeftAnchorYEnd(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY - leftSimilarityRatioY));
    }
  }
  for (  GLBrick rightBrick : rightBricks) {
    ElementLayout rightBrickElementLayout=rightBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> rightGroupSimilarity=vaSimilarityMap.getGroupSimilarity(rightDimGroup.getSetID(),rightBrick.getGroupID());
    float[] rightSimilarities=rightGroupSimilarity.getSimilarities();
    float rightSimilarityOffsetY=0;
    for (    GLBrick leftBrick : leftBricks) {
      GroupMatch groupMatch=hashGroupID2GroupMatches.get(leftBrick.getGroupID());
      SubGroupMatch subGroupMatch=groupMatch.getSubGroupMatch(rightBrick.getGroupID());
      float rightSimilarityRatioY=rightSimilarities[leftBrick.getGroupID()];
      rightSimilarityOffsetY+=rightSimilarityRatioY;
      subGroupMatch.setSimilarityRatioRight(rightSimilarityRatioY);
      subGroupMatch.setRightAnchorYStart(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY));
      subGroupMatch.setRightAnchorYEnd(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY - rightSimilarityRatioY));
    }
  }
}","public void init(){
  if (relationAnalyzer == null || leftDimGroup == null || rightDimGroup == null)   return;
  hashGroupID2GroupMatches.clear();
  List<GLBrick> leftBricks=leftDimGroup.getBricksForRelations();
  List<GLBrick> rightBricks=rightDimGroup.getBricksForRelations();
  if (leftBricks.size() == 0 || rightBricks.size() == 0)   return;
  SimilarityMap similarityMap=relationAnalyzer.getSimilarityMap(leftDimGroup.getSetID());
  if (similarityMap == null)   return;
  VASimilarity<ContentVirtualArray,ContentGroupList> vaSimilarityMap=similarityMap.getVASimilarity(rightDimGroup.getSetID());
  if (vaSimilarityMap == null)   return;
  for (  GLBrick leftBrick : leftBricks) {
    GroupMatch groupMatch=new GroupMatch(leftBrick);
    hashGroupID2GroupMatches.put(leftBrick.getGroupID(),groupMatch);
    ElementLayout leftBrickElementLayout=leftBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> leftGroupSimilarity=vaSimilarityMap.getGroupSimilarity(leftDimGroup.getSetID(),leftBrick.getGroupID());
    float[] leftSimilarities=leftGroupSimilarity.getSimilarities();
    float leftSimilarityOffsetY=0;
    for (    GLBrick rightBrick : rightBricks) {
      SubGroupMatch subGroupMatch=new SubGroupMatch(glVisBricks.getNextConnectionBandID(),rightBrick);
      groupMatch.addSubGroupMatch(rightBrick.getGroupID(),subGroupMatch);
      calculateSubMatchSelections(subGroupMatch,leftGroupSimilarity.getSimilarityVAs(rightBrick.getGroupID()));
      float leftSimilarityRatioY=leftSimilarities[rightBrick.getGroupID()];
      leftSimilarityOffsetY+=leftSimilarityRatioY;
      subGroupMatch.setSimilarityRatioLeft(leftSimilarityRatioY);
      subGroupMatch.setLeftAnchorYStart(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY));
      subGroupMatch.setLeftAnchorYEnd(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY - leftSimilarityRatioY));
    }
  }
  for (  GLBrick rightBrick : rightBricks) {
    ElementLayout rightBrickElementLayout=rightBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> rightGroupSimilarity=vaSimilarityMap.getGroupSimilarity(rightDimGroup.getSetID(),rightBrick.getGroupID());
    float[] rightSimilarities=rightGroupSimilarity.getSimilarities();
    float rightSimilarityOffsetY=0;
    for (    GLBrick leftBrick : leftBricks) {
      GroupMatch groupMatch=hashGroupID2GroupMatches.get(leftBrick.getGroupID());
      SubGroupMatch subGroupMatch=groupMatch.getSubGroupMatch(rightBrick.getGroupID());
      float rightSimilarityRatioY=rightSimilarities[leftBrick.getGroupID()];
      rightSimilarityOffsetY+=rightSimilarityRatioY;
      subGroupMatch.setSimilarityRatioRight(rightSimilarityRatioY);
      subGroupMatch.setRightAnchorYStart(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY));
      subGroupMatch.setRightAnchorYEnd(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY - rightSimilarityRatioY));
    }
  }
}",0.2219391816589715
58020,"public void switchToOverviewModeRight(){
  isRightDetailShown=false;
}","public void switchToOverviewModeRight(){
  isRightDetailShown=false;
  initLeftLayout();
  initCenterLayout();
  initRightLayout();
}",0.6896551724137931
58021,"public void switchToOverviewModeLeft(){
  isLeftDetailShown=false;
}","public void switchToOverviewModeLeft(){
  isLeftDetailShown=false;
  initLeftLayout();
  initCenterLayout();
  initRightLayout();
}",0.6834170854271356
58022,"@Override public void display(GL2 gl){
  handleHorizontalMoveDragging(gl);
  if (true) {
    isLayoutDirty=false;
    centerLayoutManager.updateLayout();
    float minWidth=parentGLCanvas.getPixelGLConverter().getGLWidthForPixelWidth(DIMENSION_GROUP_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof DimensionGroupSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    int size=centerRowLayout.size();
    if (size >= 3) {
      if (lastResizeDirectionWasToLeft) {
        dimensionGroupManager.setCenterGroupStartIndex(dimensionGroupManager.getCenterGroupStartIndex() + 1);
        float width=centerRowLayout.getElements().get(0).getSizeScaledX() + centerRowLayout.getElements().get(1).getSizeScaledX() + centerRowLayout.getElements().get(2).getSizeScaledX();
        centerRowLayout.remove(0);
        centerRowLayout.remove(0);
        leftDimensionGroupSpacing=centerRowLayout.getElements().get(0);
        leftDimensionGroupSpacing.setAbsoluteSizeX(width);
        ((DimensionGroupSpacingRenderer)leftDimensionGroupSpacing.getRenderer()).setLeftDimGroup(null);
        initLeftLayout();
      }
 else {
        dimensionGroupManager.setRightGroupStartIndex(dimensionGroupManager.getRightGroupStartIndex() - 1);
        float width=centerRowLayout.getElements().get(size - 1).getSizeScaledX() + centerRowLayout.getElements().get(size - 2).getSizeScaledX() + centerRowLayout.getElements().get(size - 3).getSizeScaledX();
        centerRowLayout.remove(centerRowLayout.size() - 1);
        centerRowLayout.remove(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing=centerRowLayout.getElements().get(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing.setGrabX(true);
        ((DimensionGroupSpacingRenderer)rightDimensionGroupSpacing.getRenderer()).setRightDimGroup(null);
        initRightLayout();
      }
    }
    centerLayoutManager.updateLayout();
    resizeNecessary=false;
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    renderArch(gl);
  }
  for (  DimensionGroup dimensionGroup : dimensionGroupManager.getDimensionGroups()) {
    dimensionGroup.display(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    leftLayoutManager.render(gl);
  }
  gl.glTranslatef(archInnerWidth,0,0);
  centerLayoutManager.render(gl);
  gl.glTranslatef(-archInnerWidth,0,0);
  if (!isLeftDetailShown && !isRightDetailShown) {
    float rightArchStand=(1 - ARCH_STAND_WIDTH_PERCENT) * viewFrustum.getWidth();
    gl.glTranslatef(rightArchStand,0,0);
    rightLayoutManager.render(gl);
    gl.glTranslatef(-rightArchStand,0,0);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void display(GL2 gl){
  handleHorizontalMoveDragging(gl);
  if (true) {
    isLayoutDirty=false;
    centerLayoutManager.updateLayout();
    float minWidth=parentGLCanvas.getPixelGLConverter().getGLWidthForPixelWidth(DIMENSION_GROUP_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof DimensionGroupSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    int size=centerRowLayout.size();
    if (size >= 3) {
      if (lastResizeDirectionWasToLeft) {
        dimensionGroupManager.setCenterGroupStartIndex(dimensionGroupManager.getCenterGroupStartIndex() + 1);
        float width=centerRowLayout.getElements().get(0).getSizeScaledX() + centerRowLayout.getElements().get(1).getSizeScaledX() + centerRowLayout.getElements().get(2).getSizeScaledX();
        centerRowLayout.remove(0);
        centerRowLayout.remove(0);
        leftDimensionGroupSpacing=centerRowLayout.getElements().get(0);
        leftDimensionGroupSpacing.setAbsoluteSizeX(width);
        ((DimensionGroupSpacingRenderer)leftDimensionGroupSpacing.getRenderer()).setLeftDimGroup(null);
        initLeftLayout();
      }
 else {
        dimensionGroupManager.setRightGroupStartIndex(dimensionGroupManager.getRightGroupStartIndex() - 1);
        float width=centerRowLayout.getElements().get(size - 1).getSizeScaledX() + centerRowLayout.getElements().get(size - 2).getSizeScaledX() + centerRowLayout.getElements().get(size - 3).getSizeScaledX();
        centerRowLayout.remove(centerRowLayout.size() - 1);
        centerRowLayout.remove(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing=centerRowLayout.getElements().get(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing.setGrabX(true);
        ((DimensionGroupSpacingRenderer)rightDimensionGroupSpacing.getRenderer()).setRightDimGroup(null);
        initRightLayout();
      }
    }
    centerLayoutManager.updateLayout();
    resizeNecessary=false;
  }
  for (  DimensionGroup dimensionGroup : dimensionGroupManager.getDimensionGroups()) {
    dimensionGroup.display(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    renderArch(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    leftLayoutManager.render(gl);
  }
  gl.glTranslatef(archInnerWidth,0,0);
  centerLayoutManager.render(gl);
  gl.glTranslatef(-archInnerWidth,0,0);
  if (!isLeftDetailShown && !isRightDetailShown) {
    float rightArchStand=(1 - ARCH_STAND_WIDTH_PERCENT) * viewFrustum.getWidth();
    gl.glTranslatef(rightArchStand,0,0);
    rightLayoutManager.render(gl);
    gl.glTranslatef(-rightArchStand,0,0);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}",0.9571428571428572
58023,"@Override public void render(GL2 gl){
  ISet set=brick.getSet();
  ContentVirtualArray contentVA=brick.getContentVA();
  if (set == null || contentVA == null)   return;
  ContentVirtualArray setContentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (setContentVA == null)   return;
  int totalNumElements=setContentVA.size();
  int currentNumElements=contentVA.size();
  float fuelWidth=(float)x / totalNumElements * currentNumElements;
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.BRICK,brick.getID()));
  gl.glBegin(GL2.GL_QUADS);
  if (selectionManager.checkStatus(SelectionType.SELECTION,brick.getGroup().getID()))   gl.glColor3f(1,0,0);
 else   gl.glColor3f(0.3f,0.3f,0.3f);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glColor3f(0.1f,0.1f,0.1f);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glColor3f(0,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(fuelWidth,0,0);
  gl.glColor3f(1,1f,1);
  gl.glVertex3f(fuelWidth,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  gl.glPopName();
}","@Override public void render(GL2 gl){
  ISet set=brick.getSet();
  ContentVirtualArray contentVA=brick.getContentVA();
  if (set == null || contentVA == null)   return;
  ContentVirtualArray setContentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (setContentVA == null)   return;
  int totalNumElements=setContentVA.size();
  int currentNumElements=contentVA.size();
  float fuelWidth=(float)x / totalNumElements * currentNumElements;
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.BRICK,brick.getID()));
  gl.glBegin(GL2.GL_QUADS);
  if (selectionManager.checkStatus(SelectionType.SELECTION,brick.getGroup().getID()))   gl.glColor4fv(SelectionType.SELECTION.getColor(),0);
 else   gl.glColor3f(0.3f,0.3f,0.3f);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glColor3f(0.1f,0.1f,0.1f);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glColor3f(0,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(fuelWidth,0,0);
  gl.glColor3f(1,1f,1);
  gl.glVertex3f(fuelWidth,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  gl.glPopName();
}",0.9792648444863336
58024,"@Override public synchronized void render(GL2 gl){
  if (neighborSetID == -1 || similarities == null)   return;
  float yOffset=0;
  for (  GLBrick brick : neighborBrickOrder) {
    int foreignGroupID=brick.getGroup().getGroupID();
    float similarity=similarities[foreignGroupID];
    float height=similarity * y;
    gl.glBegin(GL2.GL_POLYGON);
    gl.glColor3f(0,0,0);
    gl.glVertex3f(0,yOffset,0);
    gl.glVertex3f(x,yOffset,0);
    if (brick.getContentGroupSelectionManager().checkStatus(SelectionType.SELECTION,brick.getGroup().getID()))     gl.glColor3f(1,0,0);
 else     gl.glColor3f(1,1,1);
    gl.glVertex3f(x,yOffset + height,0);
    gl.glVertex3f(0,yOffset + height,0);
    gl.glEnd();
    yOffset+=height;
    if (yOffset > y + 0.001f)     GLHelperFunctions.drawSmallPointAt(gl,x,yOffset,0);
  }
}","@Override public synchronized void render(GL2 gl){
  if (neighborSetID == -1 || similarities == null)   return;
  float yOffset=0;
  for (  GLBrick brick : neighborBrickOrder) {
    int foreignGroupID=brick.getGroup().getGroupID();
    float similarity=similarities[foreignGroupID];
    float height=similarity * y;
    gl.glBegin(GL2.GL_POLYGON);
    gl.glColor3f(0,0,0);
    gl.glVertex3f(0,yOffset,0);
    gl.glVertex3f(x,yOffset,0);
    if (brick.getContentGroupSelectionManager().checkStatus(SelectionType.SELECTION,brick.getGroup().getID()))     gl.glColor4fv(SelectionType.SELECTION.getColor(),0);
 else     gl.glColor3f(1,1,1);
    gl.glVertex3f(x,yOffset + height,0);
    gl.glVertex3f(0,yOffset + height,0);
    gl.glEnd();
    yOffset+=height;
    if (yOffset > y + 0.001f)     GLHelperFunctions.drawSmallPointAt(gl,x,yOffset,0);
  }
}",0.9734939759036144
58025,"public int getDetailBrickWidthPixels(){
  return 200;
}","public int getDetailBrickWidthPixels(){
  DimensionGroupManager dimensionGroupManager=visBricks.getDimensionGroupManager();
  ArrayList<DimensionGroup> dimensionGroups=dimensionGroupManager.getDimensionGroups();
  int dimensionGroupIndex=dimensionGroups.indexOf(this);
  int otherDimensionGroupColumnWidth=0;
  if (isLeftmost()) {
    DimensionGroup dimensionGroupRight=dimensionGroups.get(dimensionGroupIndex + 1);
    otherDimensionGroupColumnWidth+=dimensionGroupRight.getGroupColumnWidthPixels();
  }
  if (isRightmost()) {
    DimensionGroup dimensionGroupLeftt=dimensionGroups.get(dimensionGroupIndex - 1);
    otherDimensionGroupColumnWidth+=dimensionGroupLeftt.getGroupColumnWidthPixels();
  }
  int detailAreaWidth=parentGLCanvas.getWidth() - 2 * OVERVIEW_DETAIL_GAP_PIXEL - 100 - getGroupColumnWidthPixels() - otherDimensionGroupColumnWidth;
  int detailGapWidth=(int)(DETAIL_GAP_PORTION * detailAreaWidth);
  detailGapWidth=(detailGapWidth < MIN_DETAIL_GAP_PIXEL) ? MIN_DETAIL_GAP_PIXEL : detailGapWidth;
  int detailWidth=(int)((detailAreaWidth - detailGapWidth) / 2.0f);
  return detailWidth;
}",0.0843373493975903
58026,"@Override public void display(GL2 gl){
  if (showDetailBrick) {
    ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
    spacingLayoutX.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    spacingLayoutX.setPixelSizeX(50);
    spacingLayoutX.setRatioSizeY(0);
    detailRow.clear();
    if (expandLeft) {
      detailRow.append(detailBrickLayout);
      detailRow.append(spacingLayoutX);
      detailRow.append(groupColumn);
      visBricks.switchToDetailModeRight(this);
    }
 else {
      detailRow.append(groupColumn);
      detailRow.append(spacingLayoutX);
      detailRow.append(detailBrickLayout);
      visBricks.switchToDetailModeLeft(this);
    }
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
    showDetailBrick=false;
    isDetailBrickShown=true;
  }
  if (hideDetailBrick || (isCollapsed && detailBrick != null)) {
    detailRow.clear();
    detailRow.append(groupColumn);
    if (detailBrick != null) {
      GeneralManager.get().getViewGLCanvasManager().unregisterGLView(detailBrick);
      detailBrick.unregisterEventListeners();
      detailBrick.destroy();
      detailBrick=null;
    }
    if (hideDetailBrick && expandLeft) {
      visBricks.switchToOverviewModeRight();
    }
    if (hideDetailBrick && !expandLeft) {
      visBricks.switchToOverviewModeLeft();
    }
    hideDetailBrick=false;
    isDetailBrickShown=false;
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
  }
  while (!uninitializedBricks.isEmpty()) {
    uninitializedBricks.poll().initRemote(gl,this,glMouseListener);
  }
  handleVerticalMoveDragging(gl);
  checkForHits(gl);
}","@Override public void display(GL2 gl){
  if (showDetailBrick) {
    ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
    spacingLayoutX.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    spacingLayoutX.setPixelSizeX(OVERVIEW_DETAIL_GAP_PIXEL);
    spacingLayoutX.setRatioSizeY(0);
    detailRow.clear();
    if (expandLeft) {
      detailRow.append(detailBrickLayout);
      detailRow.append(spacingLayoutX);
      detailRow.append(groupColumn);
      visBricks.switchToDetailModeRight(this);
    }
 else {
      detailRow.append(groupColumn);
      detailRow.append(spacingLayoutX);
      detailRow.append(detailBrickLayout);
      visBricks.switchToDetailModeLeft(this);
    }
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
    showDetailBrick=false;
    isDetailBrickShown=true;
  }
  if (hideDetailBrick || (isCollapsed && detailBrick != null)) {
    detailRow.clear();
    detailRow.append(groupColumn);
    if (detailBrick != null) {
      GeneralManager.get().getViewGLCanvasManager().unregisterGLView(detailBrick);
      detailBrick.unregisterEventListeners();
      detailBrick.destroy();
      detailBrick=null;
    }
    isDetailBrickShown=false;
    if (hideDetailBrick && expandLeft) {
      visBricks.switchToOverviewModeRight();
    }
    if (hideDetailBrick && !expandLeft) {
      visBricks.switchToOverviewModeLeft();
    }
    hideDetailBrick=false;
    detailRow.updateSubLayout();
    visBricks.updateLayout();
    visBricks.updateConnectionLinesBetweenDimensionGroups();
  }
  while (!uninitializedBricks.isEmpty()) {
    uninitializedBricks.poll().initRemote(gl,this,glMouseListener);
  }
  handleVerticalMoveDragging(gl);
  checkForHits(gl);
}",0.9753191489361702
58027,"/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL2 gl){
  textRenderer.setColor(0,0,0,1);
  int numberOfAxis=storageVA.size();
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(uniqueID,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(renderStyle.getXAxisStart(),0.0f,0.0f);
  gl.glVertex3f(renderStyle.getXAxisEnd(),0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=storageSelectionManager.getElements(SelectionType.SELECTION);
  Set<Integer> mouseOverSet=storageSelectionManager.getElements(SelectionType.MOUSE_OVER);
  int iCount=0;
  while (iCount < numberOfAxis) {
    float fXPosition=axisSpacings.get(iCount);
    if (selectedSet.contains(storageVA.get(iCount))) {
      gl.glColor4fv(SelectionType.SELECTION.getColor(),0);
      gl.glLineWidth(Y_AXIS_SELECTED_LINE_WIDTH);
      gl.glEnable(GL2.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else     if (mouseOverSet.contains(storageVA.get(iCount))) {
      gl.glColor4fv(SelectionType.MOUSE_OVER.getColor(),0);
      gl.glLineWidth(Y_AXIS_MOUSE_OVER_LINE_WIDTH);
      gl.glEnable(GL2.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else {
      gl.glColor4fv(Y_AXIS_COLOR,0);
      gl.glLineWidth(Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(uniqueID,EPickingType.Y_AXIS_SELECTION,storageVA.get(iCount)));
    gl.glBegin(GL2.GL_LINES);
    gl.glVertex3f(fXPosition,0,AXIS_Z);
    gl.glVertex3f(fXPosition,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glEnd();
    gl.glDisable(GL2.GL_LINE_STIPPLE);
    if (detailLevel != DetailLevel.HIGH || !renderStyle.isEnoughSpaceForText(numberOfAxis)) {
      gl.glPopName();
    }
    if (!isRenderedRemote()) {
      float fMarkerSpacing=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
      for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS; iInnerCount++) {
        float fCurrentHeight=fMarkerSpacing * iInnerCount;
        if (iCount == 0) {
          if (set.isSetHomogeneous()) {
            float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
            Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),PCRenderStyle.MIN_NUMBER_TEXT_SIZE);
            float fWidth=(float)bounds.getWidth();
            float fHeightHalf=(float)bounds.getHeight() / 3.0f;
            renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf);
          }
 else {
          }
        }
        gl.glColor3fv(Y_AXIS_COLOR,0);
        gl.glBegin(GL2.GL_LINES);
        gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glEnd();
      }
    }
    String sAxisLabel=null;
    sAxisLabel=set.get(storageVA.get(iCount)).getLabel();
    gl.glTranslatef(fXPosition,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
    float width=renderStyle.getAxisSpacing(storageVA.size());
    if (iCount == numberOfAxis - 1)     width=fYTranslation;
    textRenderer.renderTextInBounds(gl,sAxisLabel,0,0,0.02f,width,parentGLCanvas.getPixelGLConverter().getGLHeightForPixelHeight(10));
    gl.glTranslatef(-fXPosition,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
    if (set.isSetHomogeneous()) {
    }
 else {
    }
    gl.glPopAttrib();
    if (!isRenderedRemote()) {
      float fXButtonOrigin=axisSpacings.get(iCount);
      Vec3f lowerLeftCorner=new Vec3f(fXButtonOrigin - 0.03f,PCRenderStyle.NAN_Y_OFFSET - 0.03f,PCRenderStyle.NAN_Z);
      Vec3f lowerRightCorner=new Vec3f(fXButtonOrigin + 0.03f,PCRenderStyle.NAN_Y_OFFSET - 0.03f,PCRenderStyle.NAN_Z);
      Vec3f upperRightCorner=new Vec3f(fXButtonOrigin + 0.03f,PCRenderStyle.NAN_Y_OFFSET + 0.03f,PCRenderStyle.NAN_Z);
      Vec3f upperLeftCorner=new Vec3f(fXButtonOrigin - 0.03f,PCRenderStyle.NAN_Y_OFFSET + 0.03f,PCRenderStyle.NAN_Z);
      Vec3f scalingPivot=new Vec3f(fXButtonOrigin,PCRenderStyle.NAN_Y_OFFSET,PCRenderStyle.NAN_Z);
      int iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.REMOVE_NAN,storageVA.get(iCount));
      gl.glPushName(iPickingID);
      textureManager.renderGUITexture(gl,EIconTextures.NAN,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,100);
      gl.glPopName();
      iPickingID=-1;
      float fYDropOrigin=-PCRenderStyle.AXIS_BUTTONS_Y_OFFSET;
      gl.glBlendFunc(GL2.GL_ONE,GL2.GL_ONE_MINUS_SRC_ALPHA);
      float fYGateAddOrigin=renderStyle.getAxisHeight();
      iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.ADD_GATE,storageVA.get(iCount));
      lowerLeftCorner.set(fXButtonOrigin - 0.03f,fYGateAddOrigin,AXIS_Z);
      lowerRightCorner.set(fXButtonOrigin + 0.03f,fYGateAddOrigin,AXIS_Z);
      upperRightCorner.set(fXButtonOrigin + 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
      upperLeftCorner.set(fXButtonOrigin - 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
      scalingPivot.set(fXButtonOrigin,fYGateAddOrigin,AXIS_Z);
      gl.glPushName(iPickingID);
      textureManager.renderGUITexture(gl,EIconTextures.ADD_GATE,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,100);
      gl.glPopName();
      if (selectedSet.contains(storageVA.get(iCount)) || mouseOverSet.contains(storageVA.get(iCount))) {
        lowerLeftCorner.set(fXButtonOrigin - 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
        lowerRightCorner.set(fXButtonOrigin + 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
        upperRightCorner.set(fXButtonOrigin + 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
        upperLeftCorner.set(fXButtonOrigin - 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
        scalingPivot.set(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.005f);
        if (iChangeDropOnAxisNumber == iCount) {
          textureManager.renderGUITexture(gl,dropTexture,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
          if (!bWasAxisMoved) {
            dropTexture=EIconTextures.DROP_NORMAL;
          }
        }
 else {
          textureManager.renderGUITexture(gl,EIconTextures.DROP_NORMAL,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
        }
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.MOVE_AXIS,iCount);
        gl.glColor4f(0,0,0,0f);
        gl.glPushName(iPickingID);
        gl.glBegin(GL2.GL_TRIANGLES);
        gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
        gl.glEnd();
        gl.glPopName();
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.DUPLICATE_AXIS,iCount);
        gl.glPushName(iPickingID);
        gl.glBegin(GL2.GL_TRIANGLES);
        gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin - 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glEnd();
        gl.glPopName();
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.REMOVE_AXIS,iCount);
        gl.glPushName(iPickingID);
        gl.glBegin(GL2.GL_TRIANGLES);
        gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin + 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glEnd();
        gl.glPopName();
      }
 else {
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.MOVE_AXIS,iCount);
        gl.glPushAttrib(GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT);
        gl.glPushName(iPickingID);
        lowerLeftCorner.set(fXButtonOrigin - 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
        lowerRightCorner.set(fXButtonOrigin + 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
        upperRightCorner.set(fXButtonOrigin + 0.05f,fYDropOrigin,AXIS_Z);
        upperLeftCorner.set(fXButtonOrigin - 0.05f,fYDropOrigin,AXIS_Z);
        scalingPivot.set(fXButtonOrigin,fYDropOrigin,AXIS_Z);
        textureManager.renderGUITexture(gl,EIconTextures.SMALL_DROP,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
        gl.glPopName();
        gl.glPopAttrib();
      }
      gl.glBlendFunc(GL2.GL_SRC_ALPHA,GL2.GL_ONE_MINUS_SRC_ALPHA);
      gl.glPopName();
    }
    iCount++;
  }
}","/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL2 gl){
  textRenderer.setColor(0,0,0,1);
  int numberOfAxis=storageVA.size();
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(uniqueID,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(renderStyle.getXAxisStart(),0.0f,0.0f);
  gl.glVertex3f(renderStyle.getXAxisEnd(),0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=storageSelectionManager.getElements(SelectionType.SELECTION);
  Set<Integer> mouseOverSet=storageSelectionManager.getElements(SelectionType.MOUSE_OVER);
  int iCount=0;
  while (iCount < numberOfAxis) {
    float fXPosition=axisSpacings.get(iCount);
    if (selectedSet.contains(storageVA.get(iCount))) {
      gl.glColor4fv(SelectionType.SELECTION.getColor(),0);
      gl.glLineWidth(Y_AXIS_SELECTED_LINE_WIDTH);
      gl.glEnable(GL2.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else     if (mouseOverSet.contains(storageVA.get(iCount))) {
      gl.glColor4fv(SelectionType.MOUSE_OVER.getColor(),0);
      gl.glLineWidth(Y_AXIS_MOUSE_OVER_LINE_WIDTH);
      gl.glEnable(GL2.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else {
      gl.glColor4fv(Y_AXIS_COLOR,0);
      gl.glLineWidth(Y_AXIS_LINE_WIDTH);
    }
    int axisPickingID=pickingManager.getPickingID(uniqueID,EPickingType.Y_AXIS_SELECTION,storageVA.get(iCount));
    gl.glPushName(axisPickingID);
    gl.glBegin(GL2.GL_LINES);
    gl.glVertex3f(fXPosition,0,AXIS_Z);
    gl.glVertex3f(fXPosition,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glEnd();
    gl.glDisable(GL2.GL_LINE_STIPPLE);
    gl.glPopName();
    if (!isRenderedRemote()) {
      float fMarkerSpacing=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
      for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS; iInnerCount++) {
        float fCurrentHeight=fMarkerSpacing * iInnerCount;
        if (iCount == 0) {
          if (set.isSetHomogeneous()) {
            float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
            Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),PCRenderStyle.MIN_NUMBER_TEXT_SIZE);
            float fWidth=(float)bounds.getWidth();
            float fHeightHalf=(float)bounds.getHeight() / 3.0f;
            renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf);
          }
 else {
          }
        }
        gl.glColor3fv(Y_AXIS_COLOR,0);
        gl.glBegin(GL2.GL_LINES);
        gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glEnd();
      }
    }
    String sAxisLabel=null;
    sAxisLabel=set.get(storageVA.get(iCount)).getLabel();
    gl.glTranslatef(fXPosition,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
    float width=renderStyle.getAxisSpacing(storageVA.size());
    if (iCount == numberOfAxis - 1)     width=fYTranslation;
    textRenderer.renderTextInBounds(gl,sAxisLabel,0,0,0.02f,width,parentGLCanvas.getPixelGLConverter().getGLHeightForPixelHeight(10));
    gl.glTranslatef(-fXPosition,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
    if (set.isSetHomogeneous()) {
    }
 else {
    }
    if (!isRenderedRemote()) {
      float fXButtonOrigin=axisSpacings.get(iCount);
      Vec3f lowerLeftCorner=new Vec3f(fXButtonOrigin - 0.03f,PCRenderStyle.NAN_Y_OFFSET - 0.03f,PCRenderStyle.NAN_Z);
      Vec3f lowerRightCorner=new Vec3f(fXButtonOrigin + 0.03f,PCRenderStyle.NAN_Y_OFFSET - 0.03f,PCRenderStyle.NAN_Z);
      Vec3f upperRightCorner=new Vec3f(fXButtonOrigin + 0.03f,PCRenderStyle.NAN_Y_OFFSET + 0.03f,PCRenderStyle.NAN_Z);
      Vec3f upperLeftCorner=new Vec3f(fXButtonOrigin - 0.03f,PCRenderStyle.NAN_Y_OFFSET + 0.03f,PCRenderStyle.NAN_Z);
      Vec3f scalingPivot=new Vec3f(fXButtonOrigin,PCRenderStyle.NAN_Y_OFFSET,PCRenderStyle.NAN_Z);
      int iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.REMOVE_NAN,storageVA.get(iCount));
      gl.glPushName(iPickingID);
      textureManager.renderGUITexture(gl,EIconTextures.NAN,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,100);
      gl.glPopName();
      iPickingID=-1;
      float fYDropOrigin=-PCRenderStyle.AXIS_BUTTONS_Y_OFFSET;
      gl.glBlendFunc(GL2.GL_ONE,GL2.GL_ONE_MINUS_SRC_ALPHA);
      float fYGateAddOrigin=renderStyle.getAxisHeight();
      iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.ADD_GATE,storageVA.get(iCount));
      lowerLeftCorner.set(fXButtonOrigin - 0.03f,fYGateAddOrigin,AXIS_Z);
      lowerRightCorner.set(fXButtonOrigin + 0.03f,fYGateAddOrigin,AXIS_Z);
      upperRightCorner.set(fXButtonOrigin + 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
      upperLeftCorner.set(fXButtonOrigin - 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
      scalingPivot.set(fXButtonOrigin,fYGateAddOrigin,AXIS_Z);
      gl.glPushName(iPickingID);
      textureManager.renderGUITexture(gl,EIconTextures.ADD_GATE,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,100);
      gl.glPopName();
      if (selectedSet.contains(storageVA.get(iCount)) || mouseOverSet.contains(storageVA.get(iCount))) {
        lowerLeftCorner.set(fXButtonOrigin - 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
        lowerRightCorner.set(fXButtonOrigin + 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
        upperRightCorner.set(fXButtonOrigin + 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
        upperLeftCorner.set(fXButtonOrigin - 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
        scalingPivot.set(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.005f);
        if (iChangeDropOnAxisNumber == iCount) {
          textureManager.renderGUITexture(gl,dropTexture,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
          if (!bWasAxisMoved) {
            dropTexture=EIconTextures.DROP_NORMAL;
          }
        }
 else {
          textureManager.renderGUITexture(gl,EIconTextures.DROP_NORMAL,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
        }
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.MOVE_AXIS,iCount);
        gl.glColor4f(0,0,0,0f);
        gl.glPushName(iPickingID);
        gl.glBegin(GL2.GL_TRIANGLES);
        gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
        gl.glEnd();
        gl.glPopName();
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.DUPLICATE_AXIS,iCount);
        gl.glPushName(iPickingID);
        gl.glBegin(GL2.GL_TRIANGLES);
        gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin - 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glEnd();
        gl.glPopName();
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.REMOVE_AXIS,iCount);
        gl.glPushName(iPickingID);
        gl.glBegin(GL2.GL_TRIANGLES);
        gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glVertex3f(fXButtonOrigin + 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
        gl.glEnd();
        gl.glPopName();
      }
 else {
        iPickingID=pickingManager.getPickingID(uniqueID,EPickingType.MOVE_AXIS,iCount);
        gl.glPushAttrib(GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT);
        gl.glPushName(iPickingID);
        lowerLeftCorner.set(fXButtonOrigin - 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
        lowerRightCorner.set(fXButtonOrigin + 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
        upperRightCorner.set(fXButtonOrigin + 0.05f,fYDropOrigin,AXIS_Z);
        upperLeftCorner.set(fXButtonOrigin - 0.05f,fYDropOrigin,AXIS_Z);
        scalingPivot.set(fXButtonOrigin,fYDropOrigin,AXIS_Z);
        textureManager.renderGUITexture(gl,EIconTextures.SMALL_DROP,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
        gl.glPopName();
        gl.glPopAttrib();
      }
      gl.glBlendFunc(GL2.GL_SRC_ALPHA,GL2.GL_ONE_MINUS_SRC_ALPHA);
    }
    iCount++;
  }
}",0.9791258604286752
58028,"@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  if (set == null)   set=dataDomain.getSet();
  if (contentVA == null)   contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (storageVA == null)   storageVA=set.getStorageData(Set.STORAGE).getStorageVA();
  templateRenderer=new LayoutManager(viewFrustum);
  if (set.getSetType().equals(ESetDataType.NUMERIC)) {
    brickConfigurer=new NumericalDataConfigurer();
  }
 else {
    brickConfigurer=new NominalDataConfigurer();
  }
  if (brickLayout == null) {
    brickLayout=new DefaultBrickLayoutTemplate(this,visBricks,dimensionGroup,brickConfigurer);
  }
  brickConfigurer.setBrickViews(this,gl,glMouseListener,brickLayout);
  currentViewType=brickLayout.getDefaultViewType();
  brickLayout.setViewRenderer(containedViewRenderers.get(currentViewType));
  currentRemoteView=views.get(currentRemoteView);
  templateRenderer.setTemplate(brickLayout);
  float minSize=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(brickLayout.getMinHeightPixels());
  wrappingLayout.setAbsoluteSizeY(minSize);
  templateRenderer.updateLayout();
  addPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      SelectionType currentSelectionType=contentGroupSelectionManager.getSelectionType();
      contentGroupSelectionManager.clearSelection(currentSelectionType);
      contentGroupSelectionManager.addToType(currentSelectionType,group.getID());
      SelectionUpdateEvent event=new SelectionUpdateEvent();
      event.setDataDomainType(getDataDomain().getDataDomainType());
      event.setSender(this);
      SelectionDelta delta=contentGroupSelectionManager.getDelta();
      event.setSelectionDelta(delta);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
      showHandles();
      selectElementsByGroup();
    }
    @Override public void mouseOver(    Pick pick){
      showHandles();
    }
    public void showHandles(){
      if (brickLayout.isShowHandles())       return;
      ArrayList<DimensionGroup> dimensionGroups=dimensionGroup.getVisBricksView().getDimensionGroupManager().getDimensionGroups();
      for (      DimensionGroup dimensionGroup : dimensionGroups) {
        dimensionGroup.hideHandles();
      }
      if (!brickLayout.isShowHandles()) {
        brickLayout.setShowHandles(true);
        templateRenderer.updateLayout();
      }
    }
  }
,EPickingType.BRICK,getID());
}","@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  if (set == null)   set=dataDomain.getSet();
  if (contentVA == null)   contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (storageVA == null)   storageVA=set.getStorageData(Set.STORAGE).getStorageVA();
  templateRenderer=new LayoutManager(viewFrustum);
  if (set.getSetType().equals(ESetDataType.NUMERIC)) {
    brickConfigurer=new NumericalDataConfigurer();
  }
 else {
    brickConfigurer=new NominalDataConfigurer();
  }
  if (brickLayout == null) {
    brickLayout=new DefaultBrickLayoutTemplate(this,visBricks,dimensionGroup,brickConfigurer);
  }
  brickConfigurer.setBrickViews(this,gl,glMouseListener,brickLayout);
  currentViewType=brickLayout.getDefaultViewType();
  brickLayout.setViewRenderer(containedViewRenderers.get(currentViewType));
  currentRemoteView=views.get(currentRemoteView);
  templateRenderer.setTemplate(brickLayout);
  float minSize=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(brickLayout.getMinHeightPixels());
  wrappingLayout.setAbsoluteSizeY(minSize);
  templateRenderer.updateLayout();
  addPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      SelectionType currentSelectionType=contentGroupSelectionManager.getSelectionType();
      contentGroupSelectionManager.clearSelection(currentSelectionType);
      contentGroupSelectionManager.addToType(currentSelectionType,group.getID());
      SelectionUpdateEvent event=new SelectionUpdateEvent();
      event.setDataDomainType(getDataDomain().getDataDomainType());
      event.setSender(this);
      SelectionDelta delta=contentGroupSelectionManager.getDelta();
      event.setSelectionDelta(delta);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
      showHandles();
      selectElementsByGroup();
    }
    @Override public void mouseOver(    Pick pick){
      showHandles();
    }
    public void showHandles(){
      if (brickLayout.isShowHandles())       return;
      ArrayList<DimensionGroup> dimensionGroups=dimensionGroup.getVisBricksView().getDimensionGroupManager().getDimensionGroups();
      for (      DimensionGroup dimensionGroup : dimensionGroups) {
        dimensionGroup.hideHandles();
      }
      if (!brickLayout.isShowHandles()) {
        brickLayout.setShowHandles(true);
        templateRenderer.updateLayout();
      }
    }
  }
,EPickingType.BRICK,getID());
  dimensionGroup.updateLayout();
}",0.9934171154997008
58029,"/** 
 * Sets the type of view that should be rendered in the brick. The view type is not set, if it is not valid for the current brick layout.
 * @param viewType
 */
public void setContainedView(EContainedViewType viewType){
  AContainedViewRenderer viewRenderer=containedViewRenderers.get(viewType);
  if (viewRenderer == null)   return;
  if (!brickLayout.isViewTypeValid(viewType))   return;
  currentRemoteView=views.get(viewType);
  brickLayout.setViewRenderer(viewRenderer);
  brickLayout.viewTypeChanged(viewType);
  int minHeightPixels=brickLayout.getMinHeightPixels();
  float minHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(minHeightPixels);
  if (isSizeFixed) {
    float currentHeight=wrappingLayout.getSizeScaledY();
    if (currentHeight < minHeight) {
      wrappingLayout.setAbsoluteSizeY(minHeight);
    }
  }
 else {
    wrappingLayout.setAbsoluteSizeY(minHeight);
  }
  templateRenderer.updateLayout();
  currentViewType=viewType;
}","/** 
 * Sets the type of view that should be rendered in the brick. The view type is not set, if it is not valid for the current brick layout.
 * @param viewType
 */
public void setContainedView(EContainedViewType viewType){
  AContainedViewRenderer viewRenderer=containedViewRenderers.get(viewType);
  if (viewRenderer == null)   return;
  if (!brickLayout.isViewTypeValid(viewType))   return;
  currentRemoteView=views.get(viewType);
  brickLayout.setViewRenderer(viewRenderer);
  brickLayout.viewTypeChanged(viewType);
  int minHeightPixels=brickLayout.getMinHeightPixels();
  int minWidthPixels=brickLayout.getMinWidthPixels();
  float minHeight=getParentGLCanvas().getPixelGLConverter().getGLHeightForPixelHeight(minHeightPixels);
  float minWidth=getParentGLCanvas().getPixelGLConverter().getGLWidthForPixelWidth(minWidthPixels);
  if (isSizeFixed) {
    float currentHeight=wrappingLayout.getSizeScaledY();
    float currentWidth=wrappingLayout.getSizeScaledX();
    if (currentHeight < minHeight) {
      wrappingLayout.setAbsoluteSizeY(minHeight);
    }
    if (currentWidth < minWidth) {
      wrappingLayout.setAbsoluteSizeX(minWidth);
    }
  }
 else {
    wrappingLayout.setAbsoluteSizeY(minHeight);
    wrappingLayout.setAbsoluteSizeX(minWidth);
  }
  templateRenderer.updateLayout();
  visBricks.updateLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
  currentViewType=viewType;
}",0.8121869782971619
58030,"@Override public int getMinWidthPixels(){
  return 2 * SPACING_PIXELS + viewRenderer.getMinWidthPixels();
}","@Override public int getMinWidthPixels(){
  return pixelGLConverter.getPixelWidthForGLWidth(dimensionGroup.getMinWidth());
}",0.6493506493506493
58031,"@Override public int getMinWidthPixels(){
  return pixelGLConverter.getPixelWidthForGLWidth(brick.getWrappingLayout().getSizeScaledX());
}","@Override public int getMinWidthPixels(){
  return pixelGLConverter.getPixelWidthForGLWidth(dimensionGroup.getMinWidth());
}",0.8091603053435115
58032,"@Override public int getMinWidthPixels(){
  return 2 * SPACING_PIXELS + viewRenderer.getMinWidthPixels();
}","@Override public int getMinWidthPixels(){
  return pixelGLConverter.getPixelWidthForGLWidth(dimensionGroup.getMinWidth());
}",0.6493506493506493
58033,"@Override public void setStaticLayouts(){
  Row baseRow=new Row(""String_Node_Str"");
  baseRow.setFrameColor(0,0,1,0);
  setBaseElementLayout(baseRow);
  leftRelationIndicatorRenderer.updateRelations();
  rightRelationIndicatorRenderer.updateRelations();
  ElementLayout leftRelationIndicatorLayout=new ElementLayout(""String_Node_Str"");
  leftRelationIndicatorLayout.setPixelGLConverter(pixelGLConverter);
  leftRelationIndicatorLayout.setPixelSizeX(RELATION_INDICATOR_WIDTH_PIXELS);
  leftRelationIndicatorLayout.setRenderer(leftRelationIndicatorRenderer);
  baseRow.append(leftRelationIndicatorLayout);
  Column baseColumn=new Column(""String_Node_Str"");
  baseColumn.setFrameColor(0,1,0,0);
  ElementLayout fuelBarLayout=new ElementLayout(""String_Node_Str"");
  fuelBarLayout.setFrameColor(0,1,0,0);
  baseRow.setRenderer(new BorderedAreaRenderer());
  if (showHandles) {
    baseRow.addForeGroundRenderer(new HandleRenderer(brick,pixelGLConverter,HANDLE_SIZE_PIXELS,brick.getTextureManager(),HandleRenderer.ALL_RESIZE_HANDLES & HandleRenderer.MOVE_VERTICALLY_HANDLE));
  }
  fuelBarLayout.setPixelGLConverter(pixelGLConverter);
  fuelBarLayout.setPixelSizeY(SPACING_PIXELS);
  fuelBarLayout.setRenderer(new FuelBarRenderer(brick));
  ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
  spacingLayoutX.setPixelGLConverter(pixelGLConverter);
  spacingLayoutX.setPixelSizeX(SPACING_PIXELS);
  spacingLayoutX.setRatioSizeY(0);
  baseRow.append(spacingLayoutX);
  baseRow.append(baseColumn);
  baseRow.append(spacingLayoutX);
  ElementLayout viewLayout=new ElementLayout(""String_Node_Str"");
  viewLayout.setFrameColor(1,0,0,1);
  viewLayout.addBackgroundRenderer(new BackGroundRenderer(brick));
  viewLayout.setRenderer(viewRenderer);
  Row toolBar=createBrickToolBar(TOOLBAR_HEIGHT_PIXELS);
  ElementLayout spacingLayoutY=new ElementLayout(""String_Node_Str"");
  spacingLayoutY.setPixelGLConverter(pixelGLConverter);
  spacingLayoutY.setPixelSizeY(SPACING_PIXELS);
  spacingLayoutY.setPixelSizeX(0);
  baseColumn.append(spacingLayoutY);
  baseColumn.append(fuelBarLayout);
  baseColumn.append(spacingLayoutY);
  baseColumn.append(viewLayout);
  baseColumn.append(spacingLayoutY);
  baseColumn.append(toolBar);
  baseColumn.append(spacingLayoutY);
  ElementLayout rightRelationIndicatorLayout=new ElementLayout(""String_Node_Str"");
  rightRelationIndicatorLayout.setPixelGLConverter(pixelGLConverter);
  rightRelationIndicatorLayout.setPixelSizeX(RELATION_INDICATOR_WIDTH_PIXELS);
  rightRelationIndicatorLayout.setRenderer(rightRelationIndicatorRenderer);
  baseRow.append(rightRelationIndicatorLayout);
}","@Override public void setStaticLayouts(){
  Row baseRow=new Row(""String_Node_Str"");
  baseRow.setFrameColor(0,0,1,0);
  setBaseElementLayout(baseRow);
  leftRelationIndicatorRenderer.updateRelations();
  rightRelationIndicatorRenderer.updateRelations();
  ElementLayout leftRelationIndicatorLayout=new ElementLayout(""String_Node_Str"");
  leftRelationIndicatorLayout.setPixelGLConverter(pixelGLConverter);
  leftRelationIndicatorLayout.setPixelSizeX(RELATION_INDICATOR_WIDTH_PIXELS);
  leftRelationIndicatorLayout.setRenderer(leftRelationIndicatorRenderer);
  baseRow.append(leftRelationIndicatorLayout);
  Column baseColumn=new Column(""String_Node_Str"");
  baseColumn.setFrameColor(0,1,0,0);
  ElementLayout fuelBarLayout=new ElementLayout(""String_Node_Str"");
  fuelBarLayout.setFrameColor(0,1,0,0);
  baseRow.setRenderer(new BorderedAreaRenderer());
  if (showHandles) {
    baseRow.addForeGroundRenderer(new HandleRenderer(brick,pixelGLConverter,HANDLE_SIZE_PIXELS,brick.getTextureManager(),HandleRenderer.ALL_RESIZE_HANDLES | HandleRenderer.MOVE_VERTICALLY_HANDLE));
  }
  fuelBarLayout.setPixelGLConverter(pixelGLConverter);
  fuelBarLayout.setPixelSizeY(SPACING_PIXELS);
  fuelBarLayout.setRenderer(new FuelBarRenderer(brick));
  ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
  spacingLayoutX.setPixelGLConverter(pixelGLConverter);
  spacingLayoutX.setPixelSizeX(SPACING_PIXELS);
  spacingLayoutX.setRatioSizeY(0);
  baseRow.append(spacingLayoutX);
  baseRow.append(baseColumn);
  baseRow.append(spacingLayoutX);
  ElementLayout viewLayout=new ElementLayout(""String_Node_Str"");
  viewLayout.setFrameColor(1,0,0,1);
  viewLayout.addBackgroundRenderer(new BackGroundRenderer(brick));
  viewLayout.setRenderer(viewRenderer);
  Row toolBar=createBrickToolBar(TOOLBAR_HEIGHT_PIXELS);
  ElementLayout spacingLayoutY=new ElementLayout(""String_Node_Str"");
  spacingLayoutY.setPixelGLConverter(pixelGLConverter);
  spacingLayoutY.setPixelSizeY(SPACING_PIXELS);
  spacingLayoutY.setPixelSizeX(0);
  baseColumn.append(spacingLayoutY);
  baseColumn.append(fuelBarLayout);
  baseColumn.append(spacingLayoutY);
  baseColumn.append(viewLayout);
  baseColumn.append(spacingLayoutY);
  baseColumn.append(toolBar);
  baseColumn.append(spacingLayoutY);
  ElementLayout rightRelationIndicatorLayout=new ElementLayout(""String_Node_Str"");
  rightRelationIndicatorLayout.setPixelGLConverter(pixelGLConverter);
  rightRelationIndicatorLayout.setPixelSizeX(RELATION_INDICATOR_WIDTH_PIXELS);
  rightRelationIndicatorLayout.setRenderer(rightRelationIndicatorRenderer);
  baseRow.append(rightRelationIndicatorLayout);
}",0.99961788307222
58034,"public void init(){
  if (relationAnalyzer == null || leftDimGroup == null || rightDimGroup == null)   return;
  hashGroupID2GroupMatches.clear();
  List<GLBrick> leftBricks=leftDimGroup.getBricks();
  List<GLBrick> rightBricks=rightDimGroup.getBricks();
  if (leftBricks.size() == 0 || rightBricks.size() == 0)   return;
  SimilarityMap similarityMap=relationAnalyzer.getSimilarityMap(leftDimGroup.getSetID());
  if (similarityMap == null)   return;
  VASimilarity<ContentVirtualArray,ContentGroupList> vaSimilarityMap=similarityMap.getVASimilarity(rightDimGroup.getSetID());
  if (vaSimilarityMap == null)   return;
  for (  GLBrick leftBrick : leftBricks) {
    GroupMatch groupMatch=new GroupMatch(leftBrick);
    hashGroupID2GroupMatches.put(leftBrick.getGroupID(),groupMatch);
    ElementLayout leftBrickElementLayout=leftBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> leftGroupSimilarity=vaSimilarityMap.getGroupSimilarity(leftDimGroup.getSetID(),leftBrick.getGroupID());
    float[] leftSimilarities=leftGroupSimilarity.getSimilarities();
    float leftSimilarityOffsetY=0;
    for (    GLBrick rightBrick : rightBricks) {
      SubGroupMatch subGroupMatch=new SubGroupMatch(rightBrick);
      groupMatch.addSubGroupMatch(rightBrick.getGroupID(),subGroupMatch);
      calculateSubMatchSelections(subGroupMatch,leftGroupSimilarity.getSimilarityVAs(rightBrick.getGroupID()));
      float leftSimilarityRatioY=leftSimilarities[rightBrick.getGroupID()];
      leftSimilarityOffsetY+=leftSimilarityRatioY;
      subGroupMatch.setSimilarityRatioLeft(leftSimilarityRatioY);
      subGroupMatch.setLeftAnchorYStart(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY));
      subGroupMatch.setLeftAnchorYEnd(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY - leftSimilarityRatioY));
    }
  }
  for (  GLBrick rightBrick : rightBricks) {
    ElementLayout rightBrickElementLayout=rightBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> rightGroupSimilarity=vaSimilarityMap.getGroupSimilarity(rightDimGroup.getSetID(),rightBrick.getGroupID());
    float[] rightSimilarities=rightGroupSimilarity.getSimilarities();
    float rightSimilarityOffsetY=0;
    for (    GLBrick leftBrick : leftBricks) {
      GroupMatch groupMatch=hashGroupID2GroupMatches.get(leftBrick.getGroupID());
      SubGroupMatch subGroupMatch=groupMatch.getSubGroupMatch(rightBrick.getGroupID());
      float rightSimilarityRatioY=rightSimilarities[leftBrick.getGroupID()];
      rightSimilarityOffsetY+=rightSimilarityRatioY;
      subGroupMatch.setSimilarityRatioRight(rightSimilarityRatioY);
      subGroupMatch.setRightAnchorYStart(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY));
      subGroupMatch.setRightAnchorYEnd(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY - rightSimilarityRatioY));
    }
  }
}","public void init(){
  if (relationAnalyzer == null || leftDimGroup == null || rightDimGroup == null)   return;
  hashGroupID2GroupMatches.clear();
  connectionBandIDCounter=0;
  List<GLBrick> leftBricks=leftDimGroup.getBricks();
  List<GLBrick> rightBricks=rightDimGroup.getBricks();
  if (leftBricks.size() == 0 || rightBricks.size() == 0)   return;
  SimilarityMap similarityMap=relationAnalyzer.getSimilarityMap(leftDimGroup.getSetID());
  if (similarityMap == null)   return;
  VASimilarity<ContentVirtualArray,ContentGroupList> vaSimilarityMap=similarityMap.getVASimilarity(rightDimGroup.getSetID());
  if (vaSimilarityMap == null)   return;
  for (  GLBrick leftBrick : leftBricks) {
    GroupMatch groupMatch=new GroupMatch(leftBrick);
    hashGroupID2GroupMatches.put(leftBrick.getGroupID(),groupMatch);
    ElementLayout leftBrickElementLayout=leftBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> leftGroupSimilarity=vaSimilarityMap.getGroupSimilarity(leftDimGroup.getSetID(),leftBrick.getGroupID());
    float[] leftSimilarities=leftGroupSimilarity.getSimilarities();
    float leftSimilarityOffsetY=0;
    for (    GLBrick rightBrick : rightBricks) {
      SubGroupMatch subGroupMatch=new SubGroupMatch(connectionBandIDCounter++,rightBrick);
      groupMatch.addSubGroupMatch(rightBrick.getGroupID(),subGroupMatch);
      calculateSubMatchSelections(subGroupMatch,leftGroupSimilarity.getSimilarityVAs(rightBrick.getGroupID()));
      float leftSimilarityRatioY=leftSimilarities[rightBrick.getGroupID()];
      leftSimilarityOffsetY+=leftSimilarityRatioY;
      subGroupMatch.setSimilarityRatioLeft(leftSimilarityRatioY);
      subGroupMatch.setLeftAnchorYStart(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY));
      subGroupMatch.setLeftAnchorYEnd(leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * (leftSimilarityOffsetY - leftSimilarityRatioY));
    }
  }
  for (  GLBrick rightBrick : rightBricks) {
    ElementLayout rightBrickElementLayout=rightBrick.getLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> rightGroupSimilarity=vaSimilarityMap.getGroupSimilarity(rightDimGroup.getSetID(),rightBrick.getGroupID());
    float[] rightSimilarities=rightGroupSimilarity.getSimilarities();
    float rightSimilarityOffsetY=0;
    for (    GLBrick leftBrick : leftBricks) {
      GroupMatch groupMatch=hashGroupID2GroupMatches.get(leftBrick.getGroupID());
      SubGroupMatch subGroupMatch=groupMatch.getSubGroupMatch(rightBrick.getGroupID());
      float rightSimilarityRatioY=rightSimilarities[leftBrick.getGroupID()];
      rightSimilarityOffsetY+=rightSimilarityRatioY;
      subGroupMatch.setSimilarityRatioRight(rightSimilarityRatioY);
      subGroupMatch.setRightAnchorYStart(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY));
      subGroupMatch.setRightAnchorYEnd(rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * (rightSimilarityOffsetY - rightSimilarityRatioY));
    }
  }
}",0.9911218724778048
58035,"public SubGroupMatch(GLBrick glBrick){
  this.glBrick=glBrick;
  connectionID=GeneralManager.get().getIDCreator().createID(EManagedObjectType.BRICK_CONNECTIONS);
}","public SubGroupMatch(int connectionBandID,GLBrick glBrick){
  this.glBrick=glBrick;
  this.connectionBandID=connectionBandID;
}",0.6068965517241379
58036,"public int getConnectionBandID(){
  return connectionID;
}","public int getConnectionBandID(){
  return connectionBandID;
}",0.9666666666666668
58037,"/** 
 * resize of a brick 
 */
private void handleBrickResize(GL2 gl){
  if (!isBrickResizeActive)   return;
  isSizeFixed=true;
  brickLayout.setLockResizing(true);
  if (glMouseListener.wasMouseReleased()) {
    isBrickResizeActive=false;
    previousXCoordinate=Float.NaN;
    return;
  }
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] pointCordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  if (Float.isNaN(previousXCoordinate)) {
    previousXCoordinate=pointCordinates[0];
    return;
  }
  float changeX=pointCordinates[0] - previousXCoordinate;
  float width=wrappingLayout.getSizeScaledX();
  float changePercentage=changeX / width;
  float newWidth=width + changeX;
  if (newWidth < dimensionGroup.getMinWidth())   return;
  previousXCoordinate=pointCordinates[0];
  wrappingLayout.setAbsoluteSizeX(newWidth);
  float height=wrappingLayout.getSizeScaledY();
  wrappingLayout.setAbsoluteSizeY(height * (1 + changePercentage));
  visBricks.setLastResizeDirectionWasToLeft(false);
  visBricks.updateLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
}","/** 
 * resize of a brick 
 */
private void handleBrickResize(GL2 gl){
  if (!isBrickResizeActive)   return;
  isSizeFixed=true;
  brickLayout.setLockResizing(true);
  if (glMouseListener.wasMouseReleased()) {
    isBrickResizeActive=false;
    previousXCoordinate=Float.NaN;
    return;
  }
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] pointCordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  if (Float.isNaN(previousXCoordinate)) {
    previousXCoordinate=pointCordinates[0];
    return;
  }
  float changeX=pointCordinates[0] - previousXCoordinate;
  float width=wrappingLayout.getSizeScaledX();
  float changePercentage=changeX / width;
  float newWidth=width + changeX;
  if (newWidth < dimensionGroup.getMinWidth() - 0.001f)   return;
  previousXCoordinate=pointCordinates[0];
  wrappingLayout.setAbsoluteSizeX(newWidth);
  float height=wrappingLayout.getSizeScaledY();
  wrappingLayout.setAbsoluteSizeY(height * (1 + changePercentage));
  visBricks.setLastResizeDirectionWasToLeft(false);
  visBricks.updateLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
}",0.9961089494163424
58038,"private void renderDimensionGroupConnections(GL2 gl){
  if (relationAnalyzer == null)   return;
  float splineFactor=0.1f * x;
  gl.glLineWidth(1);
  for (  GroupMatch groupMatch : hashGroupID2GroupMatches.values()) {
    GLBrick brick=groupMatch.getBrick();
    float xStart=leftDimGroup.getLayout().getTranslateX() - brick.getLayout().getTranslateX();
    if (groupMatch.getBrick().isInOverviewMode())     continue;
    for (    SubGroupMatch subGroupMatch : groupMatch.getSubGroupMatches()) {
      GLBrick subBrick=subGroupMatch.getBrick();
      if (subGroupMatch.getBrick().isInOverviewMode())       continue;
      float xEnd=x + subBrick.getLayout().getTranslateX() - rightDimGroup.getLayout().getTranslateX();
      if (xStart != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},(groupMatch.getBrick().isActive() || subGroupMatch.getBrick().isActive()),splineFactor,0,false,new float[]{0.0f,0.0f,1},0.15f);
      }
      if (xEnd != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYTop(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYBottom(),0},(groupMatch.getBrick().isActive() || subGroupMatch.getBrick().isActive()),splineFactor,0,false,new float[]{0.0f,0.0f,1},0.15f);
      }
      HashMap<SelectionType,Float> hashRatioToSelectionType=subGroupMatch.getHashRatioToSelectionType();
      connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0.0f},0.1f);
      for (      SelectionType selectionType : hashRatioToSelectionType.keySet()) {
        float ratio=hashRatioToSelectionType.get(selectionType);
        if (ratio == 0)         continue;
        float leftYDiff=subGroupMatch.getLeftAnchorYTop() - subGroupMatch.getLeftAnchorYBottom();
        float leftYDiffSelection=leftYDiff * ratio;
        float rightYDiff=subGroupMatch.getRightAnchorYTop() - subGroupMatch.getRightAnchorYBottom();
        float rightYDiffSelection=rightYDiff * ratio;
        float[] color=selectionType.getColor();
        color[3]=0.2f;
        connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop() - leftYDiffSelection,0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYTop() - rightYDiffSelection,0},true,splineFactor,0,false,color,0.15f);
      }
    }
  }
}","private void renderDimensionGroupConnections(GL2 gl){
  if (relationAnalyzer == null)   return;
  float splineFactor=0.1f * x;
  gl.glLineWidth(1);
  for (  GroupMatch groupMatch : hashGroupID2GroupMatches.values()) {
    GLBrick brick=groupMatch.getBrick();
    float xStart=leftDimGroup.getLayout().getTranslateX() - brick.getLayout().getTranslateX();
    if (groupMatch.getBrick().isInOverviewMode())     continue;
    for (    SubGroupMatch subGroupMatch : groupMatch.getSubGroupMatches()) {
      GLBrick subBrick=subGroupMatch.getBrick();
      if (subGroupMatch.getBrick().isInOverviewMode())       continue;
      float xEnd=x + subBrick.getLayout().getTranslateX() - rightDimGroup.getLayout().getTranslateX();
      if (xStart != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0},0.1f);
      }
      if (xEnd != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYTop(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,1},0.1f);
      }
      HashMap<SelectionType,Float> hashRatioToSelectionType=subGroupMatch.getHashRatioToSelectionType();
      connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0.0f},0.1f);
      for (      SelectionType selectionType : hashRatioToSelectionType.keySet()) {
        float ratio=hashRatioToSelectionType.get(selectionType);
        if (ratio == 0)         continue;
        float leftYDiff=subGroupMatch.getLeftAnchorYTop() - subGroupMatch.getLeftAnchorYBottom();
        float leftYDiffSelection=leftYDiff * ratio;
        float rightYDiff=subGroupMatch.getRightAnchorYTop() - subGroupMatch.getRightAnchorYBottom();
        float rightYDiffSelection=rightYDiff * ratio;
        float[] color=selectionType.getColor();
        color[3]=0.2f;
        connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop() - leftYDiffSelection,0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYTop() - rightYDiffSelection,0},true,splineFactor,0,false,color,0.15f);
        if (xStart != 0) {
          connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},true,splineFactor,0,false,color,0.5f);
        }
      }
    }
  }
}",0.9119735755573906
58039,"@Override void calculateScales(float totalWidth,float totalHeight){
  super.calculateScales(totalWidth,totalHeight);
  float availableWidth=getSizeScaledX();
  float availableHeight=getSizeScaledY();
  if (isXDynamic)   availableWidth=totalWidth;
  if (isYDynamic)   availableHeight=totalHeight;
  float widestElement=0;
  for (  ElementLayout element : elements) {
    float tempWidth=element.getUnscalableElementWidth();
    if (tempWidth > widestElement)     widestElement=tempWidth;
    float unscalabelElementHeight=element.getUnscalableElementHeight();
    availableHeight-=unscalabelElementHeight;
  }
  availableWidth-=widestElement;
  if (availableHeight < -0.0001) {
    if (managingClassID != -1 && layoutID != -1) {
      LayoutSizeCollisionEvent event=new LayoutSizeCollisionEvent();
      event.setToBigBy(Math.abs(availableHeight));
      event.setIDs(managingClassID,layoutID);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
    }
  }
  calculateSubElementScales(availableWidth,availableHeight);
}","@Override void calculateScales(float totalWidth,float totalHeight){
  super.calculateScales(totalWidth,totalHeight);
  float availableWidth=getSizeScaledX();
  float availableHeight=getSizeScaledY();
  if (isXDynamic)   availableWidth=totalWidth;
  if (isYDynamic)   availableHeight=totalHeight;
  float widestElement=0;
  for (  ElementLayout element : elements) {
    float tempWidth=element.getUnscalableElementWidth();
    if (tempWidth > widestElement)     widestElement=tempWidth;
    float unscalabelElementHeight=element.getUnscalableElementHeight();
    availableHeight-=unscalabelElementHeight;
  }
  if (availableHeight < -0.0001) {
    if (managingClassID != -1 && layoutID != -1) {
      LayoutSizeCollisionEvent event=new LayoutSizeCollisionEvent();
      event.setToBigBy(Math.abs(availableHeight));
      event.setIDs(managingClassID,layoutID);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
    }
  }
  calculateSubElementScales(availableWidth,availableHeight);
}",0.9837837837837838
58040,"private void initLayouts(){
  dimensionGroupManager.getDimensionGroupSpacers().clear();
  initCenterLayout();
  leftColumnLayout=new Column(""String_Node_Str"");
  leftLayout=new LayoutTemplate();
  ViewFrustum archFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,archSideThickness,0,archBottomY,0,1);
  leftLayoutManager=new LayoutManager(archFrustum);
  initSideLayout(leftColumnLayout,leftLayout,leftLayoutManager,0,dimensionGroupManager.getCenterGroupStartIndex());
  rightColumnLayout=new Column(""String_Node_Str"");
  rightLayout=new LayoutTemplate();
  rightLayoutManager=new LayoutManager(archFrustum);
  initSideLayout(rightColumnLayout,rightLayout,rightLayoutManager,dimensionGroupManager.getRightGroupStartIndex(),dimensionGroupManager.getDimensionGroups().size());
  updateConnectionLinesBetweenDimensionGroups();
}","private void initLayouts(){
  dimensionGroupManager.getDimensionGroupSpacers().clear();
  initCenterLayout();
  ViewFrustum leftArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,archSideThickness,0,archBottomY,0,1);
  leftLayoutManager=new LayoutManager(leftArchFrustum);
  leftColumnLayout=new Column(""String_Node_Str"");
  leftLayoutTemplate=new LayoutTemplate();
  initSideLayout(leftColumnLayout,leftLayoutTemplate,leftLayoutManager,0,dimensionGroupManager.getCenterGroupStartIndex());
  ViewFrustum rightArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,archSideThickness,0,archBottomY,0,1);
  rightColumnLayout=new Column(""String_Node_Str"");
  rightLayout=new LayoutTemplate();
  rightLayoutManager=new LayoutManager(rightArchFrustum);
  initSideLayout(rightColumnLayout,rightLayout,rightLayoutManager,dimensionGroupManager.getRightGroupStartIndex(),dimensionGroupManager.getDimensionGroups().size());
  updateConnectionLinesBetweenDimensionGroups();
}",0.7309812568908489
58041,"/** 
 * Initialize the layout for the sides of the arch
 * @param columnLayout
 * @param layout
 * @param layoutManager
 * @param dimensinoGroupStartIndex
 * @param dimensinoGroupEndIndex
 */
private void initSideLayout(Column columnLayout,LayoutTemplate layout,LayoutManager layoutManager,int dimensinoGroupStartIndex,int dimensinoGroupEndIndex){
  columnLayout.setFrameColor(1,1,0,1);
  leftColumnLayout.setDebug(true);
  columnLayout.setBottomUp(true);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=null;
  dimensionGroupSpacing.setDebug(true);
  if (dimensinoGroupStartIndex == 0) {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,null,this);
  }
 else {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,dimensionGroupManager.getDimensionGroups().get(dimensionGroupManager.getCenterGroupStartIndex()),this);
  }
  dimensionGroupSpacingRenderer.setVertical(false);
  dimensionGroupSpacingRenderer.setLineLength(archSideThickness);
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setGrabY(true);
  columnLayout.append(dimensionGroupSpacing);
  for (int dimensionGroupIndex=dimensinoGroupStartIndex; dimensionGroupIndex < dimensinoGroupEndIndex; dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex);
    group.getLayout().setRatioSizeX(1);
    group.getLayout().setAbsoluteSizeY(archSideThickness);
    group.getLayout().setDebug(true);
    group.setArchHeight(0);
    columnLayout.append(group.getLayout());
    group.setCollapsed(true);
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,null,group,null,this);
    dimensionGroupSpacingRenderer.setVertical(false);
    dimensionGroupSpacingRenderer.setLineLength(archSideThickness);
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setDebug(true);
    dimensionGroupSpacing.setGrabY(true);
    columnLayout.append(dimensionGroupSpacing);
  }
  layout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  layout.setBaseElementLayout(columnLayout);
  layoutManager.setTemplate(layout);
  layoutManager.updateLayout();
}","/** 
 * Initialize the layout for the sides of the arch
 * @param columnLayout
 * @param layoutTemplate
 * @param layoutManager
 * @param dimensinoGroupStartIndex
 * @param dimensinoGroupEndIndex
 */
private void initSideLayout(Column columnLayout,LayoutTemplate layoutTemplate,LayoutManager layoutManager,int dimensinoGroupStartIndex,int dimensinoGroupEndIndex){
  layoutTemplate.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  layoutTemplate.setBaseElementLayout(columnLayout);
  layoutManager.setTemplate(layoutTemplate);
  columnLayout.setFrameColor(1,1,0,1);
  columnLayout.setBottomUp(true);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  dimensionGroupSpacing.setGrabY(true);
  columnLayout.append(dimensionGroupSpacing);
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=null;
  if (dimensinoGroupStartIndex == 0) {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,null,this);
  }
 else {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,dimensionGroupManager.getDimensionGroups().get(dimensionGroupManager.getCenterGroupStartIndex()),this);
  }
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacingRenderer.setVertical(false);
  dimensionGroupSpacingRenderer.setLineLength(archSideThickness);
  for (int dimensionGroupIndex=dimensinoGroupStartIndex; dimensionGroupIndex < dimensinoGroupEndIndex; dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex);
    group.getLayout().setAbsoluteSizeY(archSideThickness);
    group.setArchHeight(-1);
    columnLayout.append(group.getLayout());
    group.setCollapsed(true);
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacing.setGrabY(true);
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,null,group,null,this);
    columnLayout.append(dimensionGroupSpacing);
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacingRenderer.setVertical(false);
    dimensionGroupSpacingRenderer.setLineLength(archSideThickness);
  }
  layoutManager.updateLayout();
}",0.7239238410596026
58042,"@Override public void handleDrop(GL2 gl,java.util.Set<IDraggable> draggables,float mouseCoordinateX,float mouseCoordinateY,DragAndDropController dragAndDropController){
  glVisBricks.clearDimensionGroupSpacerHighlight();
  for (  IDraggable draggable : draggables) {
    if (draggable == this)     break;
    glVisBricks.moveGroupDimension(this,(DimensionGroup)draggable,leftDimGroup);
  }
  draggables.clear();
}","@Override public void handleDrop(GL2 gl,java.util.Set<IDraggable> draggables,float mouseCoordinateX,float mouseCoordinateY,DragAndDropController dragAndDropController){
  glVisBricks.clearDimensionGroupSpacerHighlight();
  for (  IDraggable draggable : draggables) {
    if (draggable == this)     break;
    glVisBricks.moveDimensionGroup(this,(DimensionGroup)draggable,leftDimGroup);
  }
  draggables.clear();
}",0.9782082324455206
58043,"private void renderBackground(GL2 gl){
  int pickingID=glVisBricks.getPickingManager().getPickingID(glVisBricks.getID(),EPickingType.DIMENSION_GROUP_SPACER,ID);
  float avoidDragHandle=0;
  gl.glPushName(pickingID);
  gl.glColor4f(1,1,0,0.3f);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex2f(0,0);
  gl.glVertex2f(x - avoidDragHandle,0);
  gl.glVertex2f(x - avoidDragHandle,y);
  gl.glVertex2f(0,y);
  gl.glEnd();
  gl.glPopName();
}","private void renderBackground(GL2 gl){
  int pickingID=glVisBricks.getPickingManager().getPickingID(glVisBricks.getID(),EPickingType.DIMENSION_GROUP_SPACER,ID);
  float avoidDragHandle=0;
  gl.glPushName(pickingID);
  gl.glColor4f(1,1,0,0f);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex2f(0,0);
  gl.glVertex2f(x - avoidDragHandle,0);
  gl.glVertex2f(x - avoidDragHandle,y);
  gl.glVertex2f(0,y);
  gl.glEnd();
  gl.glPopName();
}",0.9976744186046512
58044,"public void calculateContentSpacing(int contentElements,int storageElements,float x,float y,float minSelectedFieldHeight){
  fieldWidth=x / storageElements;
  if (y / contentElements > minSelectedFieldHeight || heatMap.getZoomedElements().size() == 0) {
    spacingCalculator=new NormalSpacingCalculator(heatMap,y,contentElements);
    useFishEye=false;
  }
 else {
    useFishEye=true;
    spacingCalculator=new FishEyeSpacingCalculator(heatMap,y,contentElements,minSelectedFieldHeight);
  }
  spacingCalculator.calculateFieldHeights();
}","public void calculateContentSpacing(int contentElements,int storageElements,float x,float y,float minSelectedFieldHeight){
  fieldWidth=x / storageElements;
  spacingCalculator=new NormalSpacingCalculator(heatMap,y,contentElements);
  useFishEye=false;
  spacingCalculator.calculateFieldHeights();
}",0.4200477326968974
58045,"private void renderSelectedPolylines(GL2 gl,SelectionType selectionType){
  int nrVisibleLines=contentSelectionManager.getNumberOfElements(selectionType);
  Iterable<Integer> lines=contentSelectionManager.getElements(selectionType);
  PolyLineState renderState=renderStyle.getPolyLineState(selectionType,nrVisibleLines / displayEveryNthPolyline);
  renderState.updateOcclusionPrev(nrVisibleLines);
  for (  Integer contentID : lines) {
    if (contentVA.contains(contentID))     renderSingleLine(gl,contentID,selectionType,renderState,true);
  }
}","private void renderSelectedPolylines(GL2 gl,SelectionType selectionType){
  int nrVisibleLines=contentSelectionManager.getNumberOfElements(selectionType);
  Set<Integer> lines=contentSelectionManager.getElements(selectionType);
  PolyLineState renderState=renderStyle.getPolyLineState(selectionType,nrVisibleLines / displayEveryNthPolyline);
  renderState.updateOcclusionPrev(nrVisibleLines);
  for (  Integer contentID : lines) {
    boolean renderAsSelection=true;
    if (lines.size() > 1)     renderAsSelection=false;
    if (contentVA.contains(contentID))     renderSingleLine(gl,contentID,selectionType,renderState,renderAsSelection);
  }
}",0.8968985750209556
58046,"public void renderStraightBand(GL2 gl,float[] leftTopPos,float[] leftBottomPos,float[] rightTopPos,float[] rightBottomPos,boolean highlight,float xOffset,int bandID,boolean bandDetailAdaption,float[] color,float opacity){
  if (leftTopPos == null || leftBottomPos == null || rightTopPos == null || rightBottomPos == null)   return;
  gl.glLineWidth(1);
  if (highlight)   gl.glColor4f(color[0],color[1],color[2],1);
 else   gl.glColor4f(color[0],color[1],color[2],opacity * 2);
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(leftTopPos[0],leftTopPos[1],0);
  gl.glVertex3f(rightTopPos[0],rightTopPos[1],0);
  gl.glEnd();
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(rightBottomPos[0],rightBottomPos[1],0);
  gl.glVertex3f(leftBottomPos[0],leftBottomPos[1],0);
  gl.glEnd();
  if (highlight)   gl.glColor4f(color[0],color[1],color[2],0.8f);
 else   gl.glColor4f(color[0],color[1],color[2],opacity);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(leftTopPos[0],leftTopPos[1],0);
  gl.glVertex3f(rightTopPos[0],rightTopPos[1],0);
  gl.glVertex3f(rightBottomPos[0],rightBottomPos[1],0);
  gl.glVertex3f(leftBottomPos[0],leftBottomPos[1],0);
  gl.glEnd();
}","public void renderStraightBand(GL2 gl,float[] leftTopPos,float[] leftBottomPos,float[] rightTopPos,float[] rightBottomPos,boolean highlight,float xOffset,int bandID,boolean bandDetailAdaption,float[] color,float opacity){
  if (leftTopPos == null || leftBottomPos == null || rightTopPos == null || rightBottomPos == null)   return;
  gl.glLineWidth(1);
  if (highlight)   gl.glColor4f(color[0],color[1],color[2],0.8f);
 else   gl.glColor4f(color[0],color[1],color[2],opacity * 2);
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(leftTopPos[0],leftTopPos[1],0);
  gl.glVertex3f(rightTopPos[0],rightTopPos[1],0);
  gl.glEnd();
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(rightBottomPos[0],rightBottomPos[1],0);
  gl.glVertex3f(leftBottomPos[0],leftBottomPos[1],0);
  gl.glEnd();
  if (highlight)   gl.glColor4f(color[0],color[1],color[2],0.5f);
 else   gl.glColor4f(color[0],color[1],color[2],opacity);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(leftTopPos[0],leftTopPos[1],0);
  gl.glVertex3f(rightTopPos[0],rightTopPos[1],0);
  gl.glVertex3f(rightBottomPos[0],rightBottomPos[1],0);
  gl.glVertex3f(leftBottomPos[0],leftBottomPos[1],0);
  gl.glEnd();
}",0.996952546800174
58047,"private void renderDimensionGroupConnections(GL2 gl){
  if (relationAnalyzer == null)   return;
  float splineFactor=0.1f * x;
  gl.glLineWidth(1);
  for (  GroupMatch groupMatch : hashGroupID2GroupMatches.values()) {
    GLBrick brick=groupMatch.getBrick();
    float xStart=leftDimGroup.getLayout().getTranslateX() - brick.getLayout().getTranslateX();
    if (groupMatch.getBrick().isInOverviewMode())     continue;
    for (    SubGroupMatch subGroupMatch : groupMatch.getSubGroupMatches()) {
      GLBrick subBrick=subGroupMatch.getBrick();
      if (subGroupMatch.getBrick().isInOverviewMode())       continue;
      float xEnd=x + subBrick.getLayout().getTranslateX() - rightDimGroup.getLayout().getTranslateX();
      if (xStart != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0},0.1f);
      }
      if (xEnd != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYTop(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,1},0.1f);
      }
      HashMap<SelectionType,Float> hashRatioToSelectionType=subGroupMatch.getHashRatioToSelectionType();
      connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0.0f},0.1f);
      for (      SelectionType selectionType : hashRatioToSelectionType.keySet()) {
        float ratio=hashRatioToSelectionType.get(selectionType);
        if (ratio == 0)         continue;
        float leftYDiff=subGroupMatch.getLeftAnchorYTop() - subGroupMatch.getLeftAnchorYBottom();
        float leftYDiffSelection=leftYDiff * ratio;
        float rightYDiff=subGroupMatch.getRightAnchorYTop() - subGroupMatch.getRightAnchorYBottom();
        float rightYDiffSelection=rightYDiff * ratio;
        float[] color=selectionType.getColor();
        color[3]=0.2f;
        connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop() - leftYDiffSelection,0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYTop() - rightYDiffSelection,0},true,splineFactor,0,false,color,0.15f);
        if (xStart != 0) {
          connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},true,splineFactor,0,false,color,0.5f);
        }
      }
    }
  }
}","private void renderDimensionGroupConnections(GL2 gl){
  if (relationAnalyzer == null)   return;
  float splineFactor=0.1f * x;
  gl.glLineWidth(1);
  for (  GroupMatch groupMatch : hashGroupID2GroupMatches.values()) {
    GLBrick brick=groupMatch.getBrick();
    float xStart=leftDimGroup.getLayout().getTranslateX() - brick.getLayout().getTranslateX();
    if (groupMatch.getBrick().isInOverviewMode())     continue;
    for (    SubGroupMatch subGroupMatch : groupMatch.getSubGroupMatches()) {
      GLBrick subBrick=subGroupMatch.getBrick();
      if (subGroupMatch.getBrick().isInOverviewMode())       continue;
      float xEnd=x + subBrick.getLayout().getTranslateX() - rightDimGroup.getLayout().getTranslateX();
      if (xStart != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0},0.1f);
      }
      if (xEnd != 0) {
        connectionRenderer.renderStraightBand(gl,new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYTop(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0},0.1f);
      }
      HashMap<SelectionType,Float> hashRatioToSelectionType=subGroupMatch.getHashRatioToSelectionType();
      connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYBottom(),0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYBottom(),0},false,splineFactor,0,false,new float[]{0.0f,0.0f,0.0f},0.1f);
      for (      SelectionType selectionType : hashRatioToSelectionType.keySet()) {
        float ratio=hashRatioToSelectionType.get(selectionType);
        if (ratio == 0)         continue;
        float leftYDiff=subGroupMatch.getLeftAnchorYTop() - subGroupMatch.getLeftAnchorYBottom();
        float leftYDiffSelection=leftYDiff * ratio;
        float rightYDiff=subGroupMatch.getRightAnchorYTop() - subGroupMatch.getRightAnchorYBottom();
        float rightYDiffSelection=rightYDiff * ratio;
        float[] color=selectionType.getColor();
        color[3]=0.2f;
        connectionRenderer.renderSingleBand(gl,new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop() - leftYDiffSelection,0},new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYTop() - rightYDiffSelection,0},true,splineFactor,0,false,color,0.15f);
        if (xStart != 0) {
          connectionRenderer.renderStraightBand(gl,new float[]{xStart,subGroupMatch.getLeftAnchorYTop(),0},new float[]{xStart,subGroupMatch.getLeftAnchorYTop() - leftYDiffSelection,0},new float[]{0,subGroupMatch.getLeftAnchorYTop(),0},new float[]{0,subGroupMatch.getLeftAnchorYTop() - leftYDiffSelection,0},false,splineFactor,0,false,color,0.5f);
        }
        if (xEnd != 0) {
          connectionRenderer.renderStraightBand(gl,new float[]{x,subGroupMatch.getRightAnchorYTop(),0},new float[]{x,subGroupMatch.getRightAnchorYTop() - rightYDiffSelection,0},new float[]{xEnd,subGroupMatch.getRightAnchorYTop(),0},new float[]{xEnd,subGroupMatch.getRightAnchorYTop() - rightYDiffSelection,0},false,splineFactor,0,false,color,0.5f);
        }
      }
    }
  }
}",0.9319371727748692
58048,"@Override public void render(GL2 gl){
  gl.glColor3f(1,1,1);
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
}","@Override public void render(GL2 gl){
  gl.glPushName(view.getPickingManager().getPickingID(view.getID(),EPickingType.BRICK,view.getID()));
  gl.glColor3f(1,1,1);
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  gl.glPopName();
}",0.7692307692307693
58049,"/** 
 * Calls the displayRemote of the view to be rendered plus pushes the ID of the Brick.
 */
@Override public void render(GL2 gl){
  view.displayRemote(gl);
}","/** 
 * Calls the displayRemote of the view to be rendered plus pushes the ID of the Brick.
 */
@Override public void render(GL2 gl){
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.BRICK,brick.getID()));
  view.displayRemote(gl);
  gl.glPopName();
}",0.7235955056179775
58050,"private void renderBackground(GL2 gl){
  int pickingID=glVisBricks.getPickingManager().getPickingID(glVisBricks.getID(),EPickingType.DIMENSION_GROUP_SPACER,ID);
  gl.glPushName(pickingID);
  gl.glColor4f(1,1,1,1);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex2f(0,0);
  gl.glVertex2f(x,0);
  gl.glVertex2f(x,y);
  gl.glVertex2f(0,y);
  gl.glEnd();
  gl.glPopName();
}","private void renderBackground(GL2 gl){
}",0.1975308641975308
58051,"@Override public void render(GL2 gl){
  float glHandleHeight=pixelGLConverter.getGLHeightForPixelHeight(handleSize);
  float glHandleWidth=pixelGLConverter.getGLWidthForPixelWidth(handleSize);
  gl.glLineWidth(3);
  gl.glColor3f(0,0,0);
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_LOWER_LEFT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(glHandleWidth,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(0,glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_LOWER_RIGHT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x - glHandleWidth,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_UPPER_RIGHT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x - glHandleWidth,y,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x,y - glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_UPPER_LEFT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(glHandleWidth,y,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(0,y - glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getDimensionGroup().getID(),EPickingType.DRAGGING_HANDLE,0));
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(-glHandleWidth * 2.0f,y / 2.0f - glHandleHeight,0);
  gl.glVertex3f(-glHandleWidth * 2.0f,y / 2.0f + glHandleHeight,0);
  gl.glVertex3f(0,y / 2.0f + glHandleHeight,0);
  gl.glVertex3f(0,y / 2.0f - glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
}","@Override public void render(GL2 gl){
  float glHandleHeight=pixelGLConverter.getGLHeightForPixelHeight(handleSize);
  float glHandleWidth=pixelGLConverter.getGLWidthForPixelWidth(handleSize);
  gl.glLineWidth(3);
  gl.glColor3f(0,0,0);
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_LOWER_LEFT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(glHandleWidth,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(0,glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_LOWER_RIGHT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x - glHandleWidth,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_UPPER_RIGHT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x - glHandleWidth,y,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x,y - glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getID(),EPickingType.RESIZE_HANDLE_UPPER_LEFT,1));
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(glHandleWidth,y,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(0,y - glHandleHeight,0);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(brick.getPickingManager().getPickingID(brick.getDimensionGroup().getID(),EPickingType.DRAGGING_HANDLE,0));
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(-glHandleWidth * 2.0f,y / 2.0f - glHandleHeight,1);
  gl.glVertex3f(-glHandleWidth * 2.0f,y / 2.0f + glHandleHeight,1);
  gl.glVertex3f(0,y / 2.0f + glHandleHeight,1);
  gl.glVertex3f(0,y / 2.0f - glHandleHeight,1);
  gl.glEnd();
  gl.glPopName();
}",0.9978296256104178
58052,"private void renderBackground(GL2 gl){
  int pickingID=glVisBricks.getPickingManager().getPickingID(glVisBricks.getID(),EPickingType.DIMENSION_GROUP_SPACER,ID);
  float avoidDragHandle=0;
  if (isVertical)   avoidDragHandle=glVisBricks.getParentGLCanvas().getPixelGLConverter().getGLWidthForPixelWidth(20);
  gl.glPushName(pickingID);
  gl.glColor4f(1,1,0,0.3f);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex2f(0,0);
  gl.glVertex2f(x - avoidDragHandle,0);
  gl.glVertex2f(x - avoidDragHandle,y);
  gl.glVertex2f(0,y);
  gl.glEnd();
  gl.glPopName();
}","private void renderBackground(GL2 gl){
  int pickingID=glVisBricks.getPickingManager().getPickingID(glVisBricks.getID(),EPickingType.DIMENSION_GROUP_SPACER,ID);
  float avoidDragHandle=0;
  gl.glPushName(pickingID);
  gl.glColor4f(1,1,0,0.3f);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex2f(0,0);
  gl.glVertex2f(x - avoidDragHandle,0);
  gl.glVertex2f(x - avoidDragHandle,y);
  gl.glVertex2f(0,y);
  gl.glEnd();
  gl.glPopName();
}",0.8786952089704383
58053,"@Override public void replaceContentVA(int setID,String dataDomainType,String vaType){
  if (set.getID() == setID) {
    topCol.clear();
    topBricks.clear();
    bottomCol.clear();
    bottomBricks.clear();
    createSubBricks();
    topCol.updateSubLayout();
    bottomCol.updateSubLayout();
    visBricks.initiConnectionLinesBetweenDimensionGroups();
  }
}","@Override public void replaceContentVA(int setID,String dataDomainType,String vaType){
  if (set.getID() == setID) {
    topCol.clear();
    topBricks.clear();
    bottomCol.clear();
    bottomBricks.clear();
    createSubBricks();
    groupColumn.updateSubLayout();
    visBricks.initiConnectionLinesBetweenDimensionGroups();
  }
}",0.8554913294797688
58054,"/** 
 * Get the unscalable height part of this layout
 * @return
 */
float getUnscalableElementWidth(){
  if (pixelSizeX != Integer.MIN_VALUE)   return pixelGLConverter.getGLWidthForPixelWidth(pixelSizeX);
 else   if (!Float.isNaN(absoluteSizeX))   return absoluteSizeX;
 else   return 0;
}","/** 
 * Get the unscalable height part of this layout
 * @return
 */
float getUnscalableElementWidth(){
  if (grabX)   return 0;
 else   if (pixelSizeX != Integer.MIN_VALUE)   return pixelGLConverter.getGLWidthForPixelWidth(pixelSizeX);
 else   if (!Float.isNaN(absoluteSizeX))   return absoluteSizeX;
 else   return 0;
}",0.9492635024549918
58055,"/** 
 * Get the unscalable height part of this layout
 * @return
 */
float getUnscalableElementHeight(){
  if (pixelSizeY != Integer.MIN_VALUE)   return pixelGLConverter.getGLHeightForPixelHeight(pixelSizeY);
 else   if (!Float.isNaN(absoluteSizeY))   return absoluteSizeY;
 else   return 0;
}","/** 
 * Get the unscalable height part of this layout
 * @return
 */
float getUnscalableElementHeight(){
  if (grabY)   return 0;
 else   if (pixelSizeY != Integer.MIN_VALUE)   return pixelGLConverter.getGLHeightForPixelHeight(pixelSizeY);
 else   if (!Float.isNaN(absoluteSizeY))   return absoluteSizeY;
 else   return 0;
}",0.9497568881685576
58056,"private void initLayoutCenter(){
  archSideThickness=viewFrustum.getWidth() * ARCH_STAND_WIDTH_PERCENT;
  archInnerWidth=viewFrustum.getWidth() * (ARCH_STAND_WIDTH_PERCENT + 0.024f);
  archBottomY=viewFrustum.getHeight() * ARCH_BOTTOM_PERCENT;
  archHeight=parentGLCanvas.getPixelGLConverter().getGLHeightForPixelHeight(ARCH_PIXEL_HEIGHT);
  archTopY=archBottomY + archHeight;
  float centerLayoutWidth=viewFrustum.getWidth() - 2 * (archInnerWidth);
  centerRowLayout=new Row(""String_Node_Str"");
  centerRowLayout.setFrameColor(1,1,0,1);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,dimensionGroupManager.getDimensionGroups().get(dimensionGroupManager.getCenterGroupStartIndex()));
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacingRenderer.setLineLength(archHeight);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setPixelSizeX(70);
  centerRowLayout.append(dimensionGroupSpacing);
  for (int dimensionGroupIndex=dimensionGroupManager.getCenterGroupStartIndex(); dimensionGroupIndex < dimensionGroupManager.getRightGroupStartIndex(); dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex);
    group.setCollapsed(false);
    group.setArchHeight(ARCH_PIXEL_HEIGHT);
    centerRowLayout.append(group.getLayout());
    if (dimensionGroupIndex != dimensionGroupManager.getRightGroupStartIndex() - 1) {
      dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(relationAnalyzer,connectionRenderer,group,dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex + 1));
      dimensionGroupSpacing.grabX();
    }
 else {
      dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,group,null);
      dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
      dimensionGroupSpacing.setPixelSizeX(50);
    }
    dimensionGroupSpacingRenderer.setLineLength(archHeight);
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    centerRowLayout.append(dimensionGroupSpacing);
  }
  centerLayout=new LayoutTemplate();
  centerLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  centerLayout.setBaseElementLayout(centerRowLayout);
  ViewFrustum centerArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,centerLayoutWidth,0,viewFrustum.getHeight(),0,1);
  centerLayoutManager=new LayoutManager(centerArchFrustum);
  centerLayoutManager.setTemplate(centerLayout);
  centerLayoutManager.updateLayout();
}","private void initLayoutCenter(){
  archSideThickness=viewFrustum.getWidth() * ARCH_STAND_WIDTH_PERCENT;
  archInnerWidth=viewFrustum.getWidth() * (ARCH_STAND_WIDTH_PERCENT + 0.024f);
  archBottomY=viewFrustum.getHeight() * ARCH_BOTTOM_PERCENT;
  archHeight=parentGLCanvas.getPixelGLConverter().getGLHeightForPixelHeight(ARCH_PIXEL_HEIGHT);
  archTopY=archBottomY + archHeight;
  float centerLayoutWidth=viewFrustum.getWidth() - 2 * (archInnerWidth);
  centerRowLayout=new Row(""String_Node_Str"");
  centerRowLayout.setFrameColor(1,1,0,1);
  centerRowLayout.setDebug(false);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  dimensionGroupSpacing.setDebug(true);
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,dimensionGroupManager.getDimensionGroups().get(dimensionGroupManager.getCenterGroupStartIndex()));
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacingRenderer.setLineLength(archHeight);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setPixelSizeX(70);
  centerRowLayout.append(dimensionGroupSpacing);
  for (int dimensionGroupIndex=dimensionGroupManager.getCenterGroupStartIndex(); dimensionGroupIndex < dimensionGroupManager.getRightGroupStartIndex(); dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex);
    group.setCollapsed(false);
    group.setArchHeight(ARCH_PIXEL_HEIGHT);
    centerRowLayout.append(group.getLayout());
    centerRowLayout.setDebug(true);
    if (dimensionGroupIndex != dimensionGroupManager.getRightGroupStartIndex() - 1) {
      dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(relationAnalyzer,connectionRenderer,group,dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex + 1));
      dimensionGroupSpacing.grabX();
    }
 else {
      dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,group,null);
      dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
      dimensionGroupSpacing.setPixelSizeX(50);
    }
    dimensionGroupSpacing.setDebug(true);
    dimensionGroupSpacingRenderer.setLineLength(archHeight);
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    centerRowLayout.append(dimensionGroupSpacing);
  }
  centerLayout=new LayoutTemplate();
  centerLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  centerLayout.setBaseElementLayout(centerRowLayout);
  ViewFrustum centerArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,centerLayoutWidth,0,viewFrustum.getHeight(),0,1);
  centerLayoutManager=new LayoutManager(centerArchFrustum);
  centerLayoutManager.setTemplate(centerLayout);
  centerLayoutManager.updateLayout();
}",0.974001699235344
58057,"public DimensionGroup(GLCaleydoCanvas canvas,ViewFrustum viewFrustum){
  super(canvas,viewFrustum,true);
  groupColumn=new Column(""String_Node_Str"");
  groupColumn.setXDynamic(true);
  bottomCol=new Column(""String_Node_Str"");
  bottomCol.setFrameColor(1,0,1,1);
  bottomCol.setBottomUp(false);
  bottomCol.setXDynamic(true);
  bottomCol.setIDs(uniqueID,BOTTOM_COLUMN_ID);
  bottomBricks=new ArrayList<GLBrick>(20);
  centerLayout=new Column(""String_Node_Str"");
  centerLayout.setFrameColor(1,1,0,1);
  centerLayout.setDebug(true);
  topCol=new Column(""String_Node_Str"");
  topCol.setFrameColor(1,0,1,1);
  topBricks=new ArrayList<GLBrick>(20);
  topCol.setXDynamic(true);
  topCol.setIDs(uniqueID,TOP_COLUMN_ID);
  initGroupColumn();
}","public DimensionGroup(GLCaleydoCanvas canvas,ViewFrustum viewFrustum){
  super(canvas,viewFrustum,true);
  groupColumn=new Column(""String_Node_Str"");
  groupColumn.setDebug(true);
  groupColumn.setXDynamic(true);
  bottomCol=new Column(""String_Node_Str"");
  bottomCol.setFrameColor(1,0,1,1);
  bottomCol.setBottomUp(false);
  bottomCol.setXDynamic(true);
  bottomCol.setIDs(uniqueID,BOTTOM_COLUMN_ID);
  bottomBricks=new ArrayList<GLBrick>(20);
  centerLayout=new Column(""String_Node_Str"");
  centerLayout.setFrameColor(1,1,0,1);
  topCol=new Column(""String_Node_Str"");
  topCol.setFrameColor(1,0,1,1);
  topBricks=new ArrayList<GLBrick>(20);
  topCol.setXDynamic(true);
  topCol.setIDs(uniqueID,TOP_COLUMN_ID);
  initGroupColumn();
}",0.9584751531654186
58058,"private void renderFlexibleArch(GL2 gl){
  float leftCenterBrickTop=0;
  float leftCenterBrickBottom=0;
  float rightCenterBrickTop=0;
  float rightCenterBrickBottom=0;
  float curveOffset=0.4f;
  if (leftDimGroup != null) {
    GLBrick leftCenterBrick=leftDimGroup.getCenterBrick();
    ElementLayout layout=leftCenterBrick.getWrappingLayout();
    leftCenterBrickBottom=layout.getTranslateY();
    leftCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledX();
  }
 else {
    if (rightDimGroup != null) {
      leftCenterBrickBottom=rightDimGroup.getVisBricksView().getArchBottomY();
      leftCenterBrickTop=rightDimGroup.getVisBricksView().getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (rightDimGroup != null) {
    GLBrick rightCenterBrick=rightDimGroup.getCenterBrick();
    ElementLayout layout=rightCenterBrick.getWrappingLayout();
    rightCenterBrickBottom=layout.getTranslateY();
    rightCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledX();
  }
 else {
    if (leftDimGroup != null) {
      rightCenterBrickBottom=leftDimGroup.getVisBricksView().getArchBottomY();
      rightCenterBrickTop=leftDimGroup.getVisBricksView().getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (leftCenterBrickBottom == 0 && rightCenterBrickBottom == 0)   return;
  connectionRenderer.renderSingleBand(gl,new float[]{0,leftCenterBrickTop,0},new float[]{0,leftCenterBrickBottom,0},new float[]{x,rightCenterBrickTop,0},new float[]{x,rightCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
}","private void renderFlexibleArch(GL2 gl){
  float leftCenterBrickTop=0;
  float leftCenterBrickBottom=0;
  float rightCenterBrickTop=0;
  float rightCenterBrickBottom=0;
  float curveOffset=0.4f;
  if (leftDimGroup != null) {
    GLBrick leftCenterBrick=leftDimGroup.getCenterBrick();
    ElementLayout layout=leftCenterBrick.getWrappingLayout();
    leftCenterBrickBottom=layout.getTranslateY();
    leftCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledY();
  }
 else {
    if (rightDimGroup != null) {
      leftCenterBrickBottom=rightDimGroup.getVisBricksView().getArchBottomY();
      leftCenterBrickTop=rightDimGroup.getVisBricksView().getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (rightDimGroup != null) {
    GLBrick rightCenterBrick=rightDimGroup.getCenterBrick();
    ElementLayout layout=rightCenterBrick.getWrappingLayout();
    rightCenterBrickBottom=layout.getTranslateY();
    rightCenterBrickTop=layout.getTranslateY() + layout.getSizeScaledY();
  }
 else {
    if (leftDimGroup != null) {
      rightCenterBrickBottom=leftDimGroup.getVisBricksView().getArchBottomY();
      rightCenterBrickTop=leftDimGroup.getVisBricksView().getArchTopY();
      curveOffset=0.1f;
    }
  }
  if (leftCenterBrickBottom == 0 && rightCenterBrickBottom == 0)   return;
  connectionRenderer.renderSingleBand(gl,new float[]{0,leftCenterBrickTop,0},new float[]{0,leftCenterBrickBottom,0},new float[]{x,rightCenterBrickTop,0},new float[]{x,rightCenterBrickBottom,0},false,curveOffset,0,false,new float[]{0,0,0},0.5f);
}",0.9986936642717178
58059,"@Override protected void calculateTransforms(float bottom,float left,float top,float right){
  super.calculateTransforms(bottom,left,top,right);
  float x;
  if (isLeftToRight)   x=left;
 else   x=right;
  for (  ElementLayout element : elements) {
    if (isBottomUp) {
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      element.setTranslateX(x);
      element.setTranslateY(bottom);
      bottom+=element.getSizeScaledY();
    }
 else {
      bottom=top - element.getSizeScaledY();
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      top-=element.getSizeScaledY();
      element.setTranslateX(x);
      element.setTranslateY(top);
    }
  }
}","@Override protected void calculateTransforms(float bottom,float left,float top,float right){
  super.calculateTransforms(bottom,left,top,right);
  float x;
  if (isLeftToRight)   x=left;
 else   x=right;
  for (  ElementLayout element : elements) {
    if (isBottomUp) {
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,bottom + element.getSizeScaledY(),right);
      }
      element.setTranslateX(x);
      element.setTranslateY(bottom);
      bottom+=element.getSizeScaledY();
    }
 else {
      bottom=top - element.getSizeScaledY();
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      top-=element.getSizeScaledY();
      element.setTranslateX(x);
      element.setTranslateY(bottom);
    }
  }
}",0.973198332340679
58060,"@Override void calculateScales(float totalWidth,float totalHeight){
  super.calculateScales(totalWidth,totalHeight);
  float availableWidth=getSizeScaledX();
  float availableHeight=getSizeScaledY();
  if (isXDynamic)   availableWidth=totalWidth;
  if (isYDynamic)   availableHeight=totalHeight;
  float highestElement=0;
  for (  ElementLayout element : elements) {
    float tempHeight=element.getUnscalableElementHeight();
    if (tempHeight > highestElement)     highestElement=tempHeight;
    availableWidth-=element.getUnscalableElementWidth();
  }
  availableHeight-=highestElement;
  calculateSubElementScales(availableWidth,availableHeight);
}","@Override void calculateScales(float totalWidth,float totalHeight){
  super.calculateScales(totalWidth,totalHeight);
  float availableWidth=getSizeScaledX();
  float availableHeight=getSizeScaledY();
  if (isXDynamic)   availableWidth=totalWidth;
  if (isYDynamic)   availableHeight=totalHeight;
  float highestElement=0;
  for (  ElementLayout element : elements) {
    float tempHeight=element.getUnscalableElementHeight();
    if (tempHeight > highestElement)     highestElement=tempHeight;
    availableWidth-=element.getUnscalableElementWidth();
  }
  calculateSubElementScales(availableWidth,availableHeight);
}",0.9535066981875492
58061,"/** 
 * Set a ratio size in y direction. The ration indicates how much of the containing element this element occupies. The size has to be normalized between 0 and 1, where 1 is the whole space available for the rendered elements
 * @param ratioSizeY the size of the element in relation to other elements in the same container on a scale of 0 to 1
 */
public void setRatioSizeY(float ratioSizeY){
  if (ratioSizeY > 1 || ratioSizeY < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  this.ratioSizeY=ratioSizeY;
}","/** 
 * Set a ratio size in y direction. The ration indicates how much of the containing element this element occupies. The size has to be normalized between 0 and 1, where 1 is the whole space available for the rendered elements
 * @param ratioSizeY the size of the element in relation to other elements in the same container on a scale of 0 to 1
 */
public void setRatioSizeY(float ratioSizeY){
  if (ratioSizeY > 1 || ratioSizeY < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  resetY();
  this.ratioSizeY=ratioSizeY;
}",0.9887005649717514
58062,"/** 
 * Set a ratio size in x direction. The ration indicates how much of the containing element this element occupies. The size has to be normalized between 0 and 1, where 1 is the whole space available for the rendered elements
 * @param ratioSizeX the size of the element in relation to other elements in the same container on a scale of 0 to 1
 */
public void setRatioSizeX(float ratioSizeX){
  if (ratioSizeX > 1 || ratioSizeX < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  this.ratioSizeX=ratioSizeX;
}","/** 
 * Set a ratio size in x direction. The ration indicates how much of the containing element this element occupies. The size has to be normalized between 0 and 1, where 1 is the whole space available for the rendered elements
 * @param ratioSizeX the size of the element in relation to other elements in the same container on a scale of 0 to 1
 */
public void setRatioSizeX(float ratioSizeX){
  if (ratioSizeX > 1 || ratioSizeX < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  resetX();
  this.ratioSizeX=ratioSizeX;
}",0.9887005649717514
58063,"/** 
 * Set the absolute size in GL coordinates of the element in y direction.
 * @param absoluteSizeX
 */
public void setAbsoluteSizeY(float absoluteSizeY){
  this.absoluteSizeY=absoluteSizeY;
}","/** 
 * Set the absolute size in GL coordinates of the element in y direction.
 * @param absoluteSizeX
 */
public void setAbsoluteSizeY(float absoluteSizeY){
  resetY();
  this.absoluteSizeY=absoluteSizeY;
}",0.9701492537313432
58064,"/** 
 * Set the absolute size in GL coordinates of the element in x direction.
 * @param absoluteSizeX
 */
public void setAbsoluteSizeX(float absoluteSizeX){
  this.absoluteSizeX=absoluteSizeX;
}","/** 
 * Set the absolute size in GL coordinates of the element in x direction.
 * @param absoluteSizeX
 */
public void setAbsoluteSizeX(float absoluteSizeX){
  resetX();
  this.absoluteSizeX=absoluteSizeX;
}",0.9701492537313432
58065,"/** 
 * Set the size of the element in x direction in pixels. As a consequence, the size remains static even if the window size changes. This requires the PixelGLConverte to be set (see  {@link #setPixelGLConverter(PixelGLConverter)}).
 * @param pixelSizeX
 */
public void setPixelSizeX(int pixelSizeX){
  if (pixelGLConverter == null)   throw new IllegalStateException(""String_Node_Str"");
  this.pixelSizeX=pixelSizeX;
}","/** 
 * Set the size of the element in x direction in pixels. As a consequence, the size remains static even if the window size changes. This requires the PixelGLConverte to be set (see  {@link #setPixelGLConverter(PixelGLConverter)}).
 * @param pixelSizeX
 */
public void setPixelSizeX(int pixelSizeX){
  if (pixelGLConverter == null)   throw new IllegalStateException(""String_Node_Str"");
  resetX();
  this.pixelSizeX=pixelSizeX;
}",0.9859484777517564
58066,"/** 
 * Set the size of the element in y direction in pixels. As a consequence, the size remains static even if the window size changes. This requires the PixelGLConverte to be set (see  {@link #setPixelGLConverter(PixelGLConverter)}).
 * @param pixelSizeY
 */
public void setPixelSizeY(int pixelSizeY){
  if (pixelGLConverter == null)   throw new IllegalStateException(""String_Node_Str"");
  this.pixelSizeY=pixelSizeY;
}","/** 
 * Set the size of the element in y direction in pixels. As a consequence, the size remains static even if the window size changes. This requires the PixelGLConverte to be set (see  {@link #setPixelGLConverter(PixelGLConverter)}).
 * @param pixelSizeY
 */
public void setPixelSizeY(int pixelSizeY){
  if (pixelGLConverter == null)   throw new IllegalStateException(""String_Node_Str"");
  resetY();
  this.pixelSizeY=pixelSizeY;
}",0.9859484777517564
58067,"/** 
 * Instruct the element to grab the remaining space in the x direction.
 */
public void grabX(){
  this.grabX=true;
}","/** 
 * Instruct the element to grab the remaining space in the x direction.
 */
public void grabX(){
  resetX();
  this.grabX=true;
}",0.953125
58068,"/** 
 * Instruct the element to grab the remaining space in the y direction
 */
public void grabY(){
  this.grabY=true;
}","/** 
 * Instruct the element to grab the remaining space in the y direction
 */
public void grabY(){
  resetY();
  this.grabY=true;
}",0.952755905511811
58069,"private void initLayoutCenter(){
  archWidth=viewFrustum.getWidth() * ARCH_STAND_WIDTH_PERCENT;
  archInnerWidth=viewFrustum.getWidth() * (ARCH_STAND_WIDTH_PERCENT + 0.05f);
  archTopY=viewFrustum.getHeight() * ARCH_TOP_PERCENT;
  archBottomY=viewFrustum.getHeight() * ARCH_BOTTOM_PERCENT;
  archHeight=(ARCH_TOP_PERCENT - ARCH_BOTTOM_PERCENT) * viewFrustum.getHeight();
  float centerLayoutWidth=viewFrustum.getWidth() - 2 * archInnerWidth;
  float spacerWidth=(centerLayoutWidth - (centerGroupEndIndex - centerGroupStartIndex) * archHeight) / (centerGroupEndIndex - centerGroupStartIndex);
  centerRowLayout=new Row(""String_Node_Str"");
  centerRowLayout.setFrameColor(1,1,0,1);
  centerRowLayout.setDebug(false);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setAbsoluteSizeX(spacerWidth);
  centerRowLayout.appendElement(dimensionGroupSpacing);
  for (int dimensionGroupIndex=centerGroupStartIndex; dimensionGroupIndex < centerGroupEndIndex; dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroups.get(dimensionGroupIndex);
    group.setCollapsed(false);
    group.getLayout().setAbsoluteSizeX(archHeight);
    group.getLayout().setRatioSizeY(1);
    group.setArchBounds(archHeight,ARCH_BOTTOM_PERCENT,ARCH_TOP_PERCENT - ARCH_BOTTOM_PERCENT,ARCH_BOTTOM_PERCENT);
    centerRowLayout.appendElement(group.getLayout());
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setAbsoluteSizeX(spacerWidth);
    centerRowLayout.appendElement(dimensionGroupSpacing);
  }
  centerLayout=new LayoutTemplate();
  centerLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  centerLayout.setBaseElementLayout(centerRowLayout);
  ViewFrustum centerArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,centerLayoutWidth,0,viewFrustum.getHeight(),0,1);
  centerLayoutManager=new LayoutManager(centerArchFrustum);
  centerLayoutManager.setTemplate(centerLayout);
  if (uninitializedDimensionGroups.size() == 0)   centerLayoutManager.updateLayout();
}","private void initLayoutCenter(){
  sideArchThickness=viewFrustum.getWidth() * ARCH_STAND_WIDTH_PERCENT;
  archInnerWidth=viewFrustum.getWidth() * (ARCH_STAND_WIDTH_PERCENT + 0.05f);
  archTopY=viewFrustum.getHeight() * ARCH_TOP_PERCENT;
  archBottomY=viewFrustum.getHeight() * ARCH_BOTTOM_PERCENT;
  archHeight=(ARCH_TOP_PERCENT - ARCH_BOTTOM_PERCENT) * viewFrustum.getHeight();
  float centerLayoutWidth=viewFrustum.getWidth() - 2 * archInnerWidth;
  float spacerWidth=(centerLayoutWidth - (rightGroupStartIndex - centerGroupStartIndex) * archHeight) / (rightGroupStartIndex - centerGroupStartIndex);
  centerRowLayout=new Row(""String_Node_Str"");
  centerRowLayout.setFrameColor(1,1,0,1);
  centerRowLayout.setDebug(false);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setAbsoluteSizeX(spacerWidth);
  centerRowLayout.appendElement(dimensionGroupSpacing);
  for (int dimensionGroupIndex=centerGroupStartIndex; dimensionGroupIndex < rightGroupStartIndex; dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroups.get(dimensionGroupIndex);
    group.setCollapsed(false);
    group.getLayout().setAbsoluteSizeX(archHeight);
    group.getLayout().setRatioSizeY(1);
    group.setArchBounds(ARCH_BOTTOM_PERCENT,ARCH_TOP_PERCENT - ARCH_BOTTOM_PERCENT,ARCH_BOTTOM_PERCENT);
    centerRowLayout.appendElement(group.getLayout());
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setAbsoluteSizeX(spacerWidth);
    centerRowLayout.appendElement(dimensionGroupSpacing);
  }
  centerLayout=new LayoutTemplate();
  centerLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  centerLayout.setBaseElementLayout(centerRowLayout);
  ViewFrustum centerArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,centerLayoutWidth,0,viewFrustum.getHeight(),0,1);
  centerLayoutManager=new LayoutManager(centerArchFrustum);
  centerLayoutManager.setTemplate(centerLayout);
  centerLayoutManager.updateLayout();
}",0.9657643312101912
58070,"private void initializeBricks(ArrayList<ISet> metaSets){
  dimensionGroups.clear();
  for (  ISet set : metaSets) {
    DimensionGroup dimensionGroup=(DimensionGroup)GeneralManager.get().getViewGLCanvasManager().createGLView(DimensionGroup.class,getParentGLCanvas(),new ViewFrustum(ECameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
    dimensionGroup.setDataDomain(dataDomain);
    dimensionGroup.setSet(set);
    dimensionGroup.setRemoteRenderingGLView(this);
    dimensionGroup.setVisBricksViewID(iUniqueID);
    dimensionGroup.initialize();
    dimensionGroups.add(dimensionGroup);
    uninitializedDimensionGroups.add(dimensionGroup);
  }
  if (dimensionGroups.size() > MAX_CENTER_DIMENSION_GROUPS) {
    centerGroupStartIndex=(dimensionGroups.size() - MAX_CENTER_DIMENSION_GROUPS) / 2;
    centerGroupEndIndex=centerGroupStartIndex + MAX_CENTER_DIMENSION_GROUPS;
  }
 else {
    centerGroupStartIndex=0;
    centerGroupEndIndex=dimensionGroups.size();
  }
}","private void initializeBricks(ArrayList<ISet> metaSets){
  dimensionGroups.clear();
  for (  ISet set : metaSets) {
    DimensionGroup dimensionGroup=(DimensionGroup)GeneralManager.get().getViewGLCanvasManager().createGLView(DimensionGroup.class,getParentGLCanvas(),new ViewFrustum(ECameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
    dimensionGroup.setDataDomain(dataDomain);
    dimensionGroup.setSet(set);
    dimensionGroup.setRemoteRenderingGLView(this);
    dimensionGroup.setVisBricksViewID(iUniqueID);
    dimensionGroup.initialize();
    dimensionGroups.add(dimensionGroup);
    uninitializedDimensionGroups.add(dimensionGroup);
  }
  if (dimensionGroups.size() > MAX_CENTER_DIMENSION_GROUPS) {
    centerGroupStartIndex=(dimensionGroups.size() - MAX_CENTER_DIMENSION_GROUPS) / 2;
    rightGroupStartIndex=centerGroupStartIndex + MAX_CENTER_DIMENSION_GROUPS;
  }
 else {
    centerGroupStartIndex=0;
    rightGroupStartIndex=dimensionGroups.size();
  }
}",0.9699170124481328
58071,"public void moveGroupDimension(DimensionGroup referenceDimGroup,DimensionGroup movedDimGroup,boolean hightlightAfter){
  int hightlightOffset=0;
  if (hightlightAfter)   hightlightOffset=+1;
  int movedDimGroupIndex=dimensionGroups.indexOf(movedDimGroup);
  int refDimGroupIndex=dimensionGroups.indexOf(referenceDimGroup);
  if (refDimGroupIndex < centerGroupStartIndex)   centerGroupStartIndex++;
 else   if (refDimGroupIndex > centerGroupStartIndex && refDimGroupIndex < centerGroupEndIndex) {
    if (movedDimGroupIndex > centerGroupEndIndex)     centerGroupEndIndex++;
 else     if (movedDimGroupIndex < centerGroupStartIndex)     centerGroupStartIndex--;
  }
 else   if (refDimGroupIndex > centerGroupEndIndex)   centerGroupEndIndex--;
  dimensionGroups.remove(movedDimGroup);
  dimensionGroups.add(dimensionGroups.indexOf(referenceDimGroup) + hightlightOffset,movedDimGroup);
  initLayoutCenter();
  initLayoutLeft();
  initLayoutRight();
}","public void moveGroupDimension(DimensionGroup referenceDimGroup,DimensionGroup movedDimGroup,boolean hightlightAfter){
  int hightlightOffset=0;
  if (hightlightAfter)   hightlightOffset=+1;
  int movedDimGroupIndex=dimensionGroups.indexOf(movedDimGroup);
  int refDimGroupIndex=dimensionGroups.indexOf(referenceDimGroup);
  if (refDimGroupIndex < centerGroupStartIndex)   centerGroupStartIndex++;
 else   if (refDimGroupIndex > centerGroupStartIndex && refDimGroupIndex < rightGroupStartIndex) {
    if (movedDimGroupIndex > rightGroupStartIndex)     rightGroupStartIndex++;
 else     if (movedDimGroupIndex < centerGroupStartIndex)     centerGroupStartIndex--;
  }
 else   if (refDimGroupIndex > rightGroupStartIndex)   rightGroupStartIndex--;
  dimensionGroups.remove(movedDimGroup);
  dimensionGroups.add(dimensionGroups.indexOf(referenceDimGroup) + hightlightOffset,movedDimGroup);
  initLayoutCenter();
  initLayoutLeft();
  initLayoutRight();
}",0.9024775962045336
58072,"private void initLayoutLeft(){
  leftColumnLayout=new Column(""String_Node_Str"");
  leftColumnLayout.setFrameColor(1,1,0,1);
  leftColumnLayout.setDebug(false);
  leftColumnLayout.setBottomUp(false);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setPixelSizeY(5);
  leftColumnLayout.appendElement(dimensionGroupSpacing);
  for (int dimensionGroupIndex=0; dimensionGroupIndex < centerGroupStartIndex; dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroups.get(dimensionGroupIndex);
    group.getLayout().setRatioSizeX(1);
    group.getLayout().setAbsoluteSizeY(archWidth);
    group.getLayout().setDebug(false);
    group.setArchBounds(viewFrustum.getHeight(),ARCH_BOTTOM_PERCENT,ARCH_TOP_PERCENT - ARCH_BOTTOM_PERCENT,ARCH_BOTTOM_PERCENT);
    leftColumnLayout.appendElement(group.getLayout());
    group.setCollapsed(true);
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setPixelSizeY(DIMENSION_GROUP_SPACING);
    leftColumnLayout.appendElement(dimensionGroupSpacing);
  }
  leftLayout=new LayoutTemplate();
  leftLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  leftLayout.setBaseElementLayout(leftColumnLayout);
  ViewFrustum leftArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,archWidth,0,archBottomY,0,1);
  leftLayoutManager=new LayoutManager(leftArchFrustum);
  leftLayoutManager.setTemplate(leftLayout);
  if (uninitializedDimensionGroups.size() == 0)   leftLayoutManager.updateLayout();
}","private void initLayoutLeft(){
  leftColumnLayout=new Column(""String_Node_Str"");
  leftColumnLayout.setFrameColor(1,1,0,1);
  leftColumnLayout.setDebug(true);
  leftColumnLayout.setBottomUp(false);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setPixelSizeY(DIMENSION_GROUP_SPACING);
  leftColumnLayout.appendElement(dimensionGroupSpacing);
  for (int dimensionGroupIndex=0; dimensionGroupIndex < centerGroupStartIndex; dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroups.get(dimensionGroupIndex);
    group.getLayout().setRatioSizeX(1);
    group.getLayout().setAbsoluteSizeY(sideArchThickness);
    group.getLayout().setDebug(true);
    group.setArchBounds(0,0,0);
    leftColumnLayout.appendElement(group.getLayout());
    group.setCollapsed(true);
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setPixelSizeY(DIMENSION_GROUP_SPACING);
    leftColumnLayout.appendElement(dimensionGroupSpacing);
  }
  leftLayout=new LayoutTemplate();
  leftLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  leftLayout.setBaseElementLayout(leftColumnLayout);
  ViewFrustum leftArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,sideArchThickness,0,archBottomY,0,1);
  leftLayoutManager=new LayoutManager(leftArchFrustum);
  leftLayoutManager.setTemplate(leftLayout);
  leftLayoutManager.updateLayout();
}",0.4143914263842817
58073,"private void renderArch(GL2 gl){
  gl.glColor3f(1,0,0);
  gl.glColor4f(0.5f,0.5f,0.5f,1f);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(0,0,0f);
  gl.glVertex3f(0,archBottomY,0f);
  gl.glVertex3f(archWidth,archBottomY,0f);
  gl.glVertex3f(archWidth,0,0f);
  gl.glEnd();
  ArrayList<Vec3f> inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(0,archBottomY,0));
  inputPoints.add(new Vec3f(0,archTopY,0));
  inputPoints.add(new Vec3f(archInnerWidth * 0.9f,archTopY,0));
  NURBSCurve curve=new NURBSCurve(inputPoints,10);
  ArrayList<Vec3f> outputPoints=curve.getCurvePoints();
  outputPoints.add(new Vec3f(archInnerWidth,archTopY,0));
  outputPoints.add(new Vec3f(archInnerWidth,archBottomY,0));
  inputPoints.clear();
  inputPoints.add(new Vec3f(archInnerWidth,archBottomY,0));
  inputPoints.add(new Vec3f(archWidth,archBottomY,0));
  inputPoints.add(new Vec3f(archWidth,archBottomY * 0.8f,0));
  curve=new NURBSCurve(inputPoints,10);
  outputPoints.addAll(curve.getCurvePoints());
  connectionRenderer.render(gl,outputPoints);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(viewFrustum.getWidth(),0,0f);
  gl.glVertex3f(viewFrustum.getWidth(),archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - archWidth,archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - archWidth,0,0f);
  gl.glEnd();
  inputPoints.clear();
  inputPoints.add(new Vec3f(viewFrustum.getWidth(),archBottomY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth(),archTopY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth * 0.9f,archTopY,0));
  curve=new NURBSCurve(inputPoints,10);
  outputPoints.clear();
  outputPoints.addAll(curve.getCurvePoints());
  outputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth,archTopY,0));
  outputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth,archBottomY,0));
  inputPoints.clear();
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth,archBottomY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - archWidth,archBottomY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - archWidth,archBottomY * 0.8f,0));
  curve=new NURBSCurve(inputPoints,10);
  outputPoints.addAll(curve.getCurvePoints());
  connectionRenderer.render(gl,outputPoints);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(archInnerWidth,archTopY,0f);
  gl.glVertex3f(archInnerWidth,archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - archInnerWidth,archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - archInnerWidth,archTopY,0f);
  gl.glEnd();
}","private void renderArch(GL2 gl){
  gl.glColor3f(1,0,0);
  gl.glColor4f(0.5f,0.5f,0.5f,1f);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(0,0,0f);
  gl.glVertex3f(0,archBottomY,0f);
  gl.glVertex3f(sideArchThickness,archBottomY,0f);
  gl.glVertex3f(sideArchThickness,0,0f);
  gl.glEnd();
  ArrayList<Vec3f> inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(0,archBottomY,0));
  inputPoints.add(new Vec3f(0,archTopY,0));
  inputPoints.add(new Vec3f(archInnerWidth * 0.9f,archTopY,0));
  NURBSCurve curve=new NURBSCurve(inputPoints,10);
  ArrayList<Vec3f> outputPoints=curve.getCurvePoints();
  outputPoints.add(new Vec3f(archInnerWidth,archTopY,0));
  outputPoints.add(new Vec3f(archInnerWidth,archBottomY,0));
  inputPoints.clear();
  inputPoints.add(new Vec3f(archInnerWidth,archBottomY,0));
  inputPoints.add(new Vec3f(sideArchThickness,archBottomY,0));
  inputPoints.add(new Vec3f(sideArchThickness,archBottomY * 0.8f,0));
  curve=new NURBSCurve(inputPoints,10);
  outputPoints.addAll(curve.getCurvePoints());
  connectionRenderer.render(gl,outputPoints);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(viewFrustum.getWidth(),0,0f);
  gl.glVertex3f(viewFrustum.getWidth(),archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - sideArchThickness,archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - sideArchThickness,0,0f);
  gl.glEnd();
  inputPoints.clear();
  inputPoints.add(new Vec3f(viewFrustum.getWidth(),archBottomY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth(),archTopY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth * 0.9f,archTopY,0));
  curve=new NURBSCurve(inputPoints,10);
  outputPoints.clear();
  outputPoints.addAll(curve.getCurvePoints());
  outputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth,archTopY,0));
  outputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth,archBottomY,0));
  inputPoints.clear();
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - archInnerWidth,archBottomY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - sideArchThickness,archBottomY,0));
  inputPoints.add(new Vec3f(viewFrustum.getWidth() - sideArchThickness,archBottomY * 0.8f,0));
  curve=new NURBSCurve(inputPoints,10);
  outputPoints.addAll(curve.getCurvePoints());
  connectionRenderer.render(gl,outputPoints);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(archInnerWidth,archTopY,0f);
  gl.glVertex3f(archInnerWidth,archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - archInnerWidth,archBottomY,0f);
  gl.glVertex3f(viewFrustum.getWidth() - archInnerWidth,archTopY,0f);
  gl.glEnd();
}",0.9163408913213448
58074,"private void initLayoutRight(){
  rightColumnLayout=new Column(""String_Node_Str"");
  rightColumnLayout.setFrameColor(1,1,0,1);
  rightColumnLayout.setBottomUp(false);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setPixelSizeY(5);
  rightColumnLayout.appendElement(dimensionGroupSpacing);
  for (int dimensionGroupIndex=centerGroupEndIndex; dimensionGroupIndex < dimensionGroups.size(); dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroups.get(dimensionGroupIndex);
    group.getLayout().setRatioSizeX(1);
    group.getLayout().setAbsoluteSizeY(archWidth);
    group.getLayout().setDebug(false);
    group.getLayout().updateSubLayout();
    group.setArchBounds(viewFrustum.getHeight(),ARCH_BOTTOM_PERCENT,ARCH_TOP_PERCENT - ARCH_BOTTOM_PERCENT,ARCH_BOTTOM_PERCENT);
    rightColumnLayout.appendElement(group.getLayout());
    group.setCollapsed(true);
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setPixelSizeY(DIMENSION_GROUP_SPACING);
    rightColumnLayout.appendElement(dimensionGroupSpacing);
  }
  rightLayout=new LayoutTemplate();
  rightLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  rightLayout.setBaseElementLayout(rightColumnLayout);
  ViewFrustum leftArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,archWidth,0,archBottomY,0,1);
  rightLayoutManager=new LayoutManager(leftArchFrustum);
  rightLayoutManager.setTemplate(rightLayout);
  if (uninitializedDimensionGroups.size() == 0)   rightLayoutManager.updateLayout();
}","private void initLayoutRight(){
  rightColumnLayout=new Column(""String_Node_Str"");
  rightColumnLayout.setFrameColor(1,1,0,1);
  rightColumnLayout.setBottomUp(false);
  rightColumnLayout.setDebug(true);
  ElementLayout dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
  dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  dimensionGroupSpacing.setPixelSizeY(5);
  rightColumnLayout.appendElement(dimensionGroupSpacing);
  for (int dimensionGroupIndex=rightGroupStartIndex; dimensionGroupIndex < dimensionGroups.size(); dimensionGroupIndex++) {
    DimensionGroup group=dimensionGroups.get(dimensionGroupIndex);
    group.setCollapsed(true);
    group.getLayout().setRatioSizeX(1);
    group.getLayout().setAbsoluteSizeY(sideArchThickness);
    group.getLayout().setDebug(true);
    group.setArchBounds(0,0,0);
    rightColumnLayout.appendElement(group.getLayout());
    dimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer();
    dimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
    dimensionGroupSpacing.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
    dimensionGroupSpacing.setPixelSizeY(DIMENSION_GROUP_SPACING);
    rightColumnLayout.appendElement(dimensionGroupSpacing);
  }
  rightLayout=new LayoutTemplate();
  rightLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  rightLayout.setBaseElementLayout(rightColumnLayout);
  ViewFrustum leftArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,sideArchThickness,0,archBottomY,0,1);
  rightLayoutManager=new LayoutManager(leftArchFrustum);
  rightLayoutManager.setTemplate(rightLayout);
  rightLayoutManager.updateLayout();
}",0.8766364551863042
58075,"@Override protected void calculateTransforms(float bottom,float left,float top,float right){
  super.calculateTransforms(bottom,left,top,right);
  float x;
  if (isLeftToRight)   x=left;
 else   x=right;
  for (  ElementLayout element : elements) {
    if (isBottomUp) {
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      element.setTranslateX(x);
      element.setTranslateY(bottom);
      bottom+=element.getSizeScaledY();
    }
 else {
      bottom=top - element.getSizeScaledY();
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      top-=element.getSizeScaledY();
      element.setTranslateX(x);
      element.setTranslateY(top);
    }
    element.setAbsoluteTranslateX(element.getTranslateX() + absoluteTranslateX);
    element.setAbsoluteTranslateY(element.getTranslateY() + absoluteTranslateY);
  }
}","@Override protected void calculateTransforms(float bottom,float left,float top,float right){
  super.calculateTransforms(bottom,left,top,right);
  float x;
  if (isLeftToRight)   x=left;
 else   x=right;
  for (  ElementLayout element : elements) {
    if (isBottomUp) {
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      element.setTranslateX(x);
      element.setTranslateY(bottom);
      bottom+=element.getSizeScaledY();
    }
 else {
      bottom=top - element.getSizeScaledY();
      if (element instanceof LayoutContainer) {
        ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
      }
      top-=element.getSizeScaledY();
      element.setTranslateX(x);
      element.setTranslateY(top);
    }
  }
}",0.9103982300884956
58076,"@Override protected void calculateTransforms(float bottom,float left,float top,float right){
  super.calculateTransforms(bottom,left,top,right);
  float y;
  if (isBottomUp)   y=bottom;
 else   y=top;
  for (  ElementLayout element : elements) {
    if (element instanceof LayoutContainer) {
      ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
    }
    if (isLeftToRight) {
      element.setTranslateX(left);
      element.setTranslateY(y);
      left+=element.getSizeScaledX();
    }
 else {
      element.setTranslateX(right);
      element.setTranslateY(y);
      right-=element.getSizeScaledX();
    }
    element.setAbsoluteTranslateX(element.getTranslateX() + absoluteTranslateX);
    element.setAbsoluteTranslateY(element.getTranslateY() + absoluteTranslateY);
  }
}","@Override protected void calculateTransforms(float bottom,float left,float top,float right){
  super.calculateTransforms(bottom,left,top,right);
  float y;
  if (isBottomUp)   y=bottom;
 else   y=top;
  for (  ElementLayout element : elements) {
    if (element instanceof LayoutContainer) {
      ((LayoutContainer)element).calculateTransforms(bottom,left,top,right);
    }
    if (isLeftToRight) {
      element.setTranslateX(left);
      element.setTranslateY(y);
      left+=element.getSizeScaledX();
    }
 else {
      element.setTranslateX(right);
      element.setTranslateY(y);
      right-=element.getSizeScaledX();
    }
  }
}",0.8871866295264624
58077,"private void createSubBricks(){
  ContentVirtualArray contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (contentVA.getGroupList() == null)   return;
  ContentGroupList groupList=contentVA.getGroupList();
  int count=0;
  groupList.updateGroupInfo();
  for (  Group group : groupList) {
    GLBrick subBrick=(GLBrick)GeneralManager.get().getViewGLCanvasManager().createGLView(GLBrick.class,getParentGLCanvas(),new ViewFrustum());
    subBrick.setRemoteRenderingGLView(getRemoteRenderingGLCanvas());
    subBrick.setDataDomain(dataDomain);
    subBrick.setSet(set);
    subBrick.setVisBricks(visBricks);
    ElementLayout brickLayout=new ElementLayout(""String_Node_Str"");
    ViewLayoutRenderer brickRenderer=new ViewLayoutRenderer(subBrick);
    brickLayout.setRenderer(brickRenderer);
    brickLayout.setFrameColor(1,0,0,1);
    ContentVirtualArray subVA=new ContentVirtualArray(""String_Node_Str"",contentVA.getVirtualArray().subList(group.getStartIndex(),group.getEndIndex() + 1));
    subBrick.setContentVA(group.getGroupID(),subVA);
    subBrick.initialize();
    uninitializedBricks.add(subBrick);
    if (count < groupList.size() / 2) {
      bottomBricks.add(subBrick);
      bottomCol.appendElement(brickLayout);
      subBrick.setWrappingLayout(bottomCol);
    }
 else {
      topBricks.add(subBrick);
      topCol.appendElement(brickLayout);
      subBrick.setWrappingLayout(topCol);
    }
    count++;
  }
  for (  ElementLayout layout : topCol) {
    layout.setRatioSizeY(1.0f / topCol.size());
  }
  for (  ElementLayout layout : bottomCol) {
    layout.setRatioSizeY(1.0f / bottomCol.size());
  }
}","private void createSubBricks(){
  ContentVirtualArray contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (contentVA.getGroupList() == null)   return;
  ContentGroupList groupList=contentVA.getGroupList();
  int count=0;
  groupList.updateGroupInfo();
  for (  Group group : groupList) {
    GLBrick subBrick=(GLBrick)GeneralManager.get().getViewGLCanvasManager().createGLView(GLBrick.class,getParentGLCanvas(),new ViewFrustum());
    subBrick.setRemoteRenderingGLView(getRemoteRenderingGLCanvas());
    subBrick.setDataDomain(dataDomain);
    subBrick.setSet(set);
    subBrick.setVisBricks(visBricks);
    ElementLayout brickLayout=new ElementLayout(""String_Node_Str"");
    ViewLayoutRenderer brickRenderer=new ViewLayoutRenderer(subBrick);
    brickLayout.setRenderer(brickRenderer);
    brickLayout.setFrameColor(1,0,0,1);
    subBrick.setWrappingLayout(brickLayout);
    ContentVirtualArray subVA=new ContentVirtualArray(""String_Node_Str"",contentVA.getVirtualArray().subList(group.getStartIndex(),group.getEndIndex() + 1));
    subBrick.setContentVA(group.getGroupID(),subVA);
    subBrick.initialize();
    uninitializedBricks.add(subBrick);
    if (count < groupList.size() / 2) {
      bottomBricks.add(subBrick);
      bottomCol.appendElement(brickLayout);
    }
 else {
      topBricks.add(subBrick);
      topCol.appendElement(brickLayout);
    }
    count++;
  }
  for (  ElementLayout layout : topCol) {
    layout.setRatioSizeY(1.0f / topCol.size());
  }
  for (  ElementLayout layout : bottomCol) {
    layout.setRatioSizeY(1.0f / bottomCol.size());
  }
}",0.9101123595505618
58078,"private void renderDimensionGroupConnections(GL2 gl){
  gl.glColor4f(1,1,0,1f);
  gl.glLineWidth(4);
  List<GLBrick> leftBricks=leftDimGroup.getBricks();
  List<GLBrick> rightBricks=rightDimGroup.getBricks();
  SimilarityMap similarityMap=relationAnalyzer.getSimilarityMap(leftDimGroup.getSetID());
  if (similarityMap == null)   return;
  VASimilarity<ContentVirtualArray,ContentGroupList> vaSimilarityMap=similarityMap.getVASimilarity(rightDimGroup.getSetID());
  if (vaSimilarityMap == null)   return;
  for (  GLBrick leftBrick : leftBricks) {
    GroupSimilarity<ContentVirtualArray,ContentGroupList> leftGroupSimilarity=vaSimilarityMap.getGroupSimilarity(leftDimGroup.getSetID(),leftBrick.getGroupID());
    float[] leftSimilarities=leftGroupSimilarity.getSimilarities();
    float leftSimilarityOffsetY=0;
    float rightSimilarityOffsetY=0;
    for (    GLBrick rightBrick : rightBricks) {
      float leftSimilarityRatioY=leftSimilarities[rightBrick.getGroupID()];
      leftSimilarityOffsetY+=leftSimilarityRatioY;
      GroupSimilarity<ContentVirtualArray,ContentGroupList> rightGroupSimilarity=vaSimilarityMap.getGroupSimilarity(rightDimGroup.getSetID(),rightBrick.getGroupID());
      float[] rightSimilarities=rightGroupSimilarity.getSimilarities();
      float rightSimilarityRatioY=rightSimilarities[leftBrick.getGroupID()];
      rightSimilarityOffsetY+=rightSimilarityRatioY;
      ElementLayout leftBrickElementLayout=leftBrick.getLayout();
      ElementLayout leftBrickWrappingLayout=leftBrick.getWrappingLayout();
      ElementLayout rightBrickElementLayout=rightBrick.getLayout();
      ElementLayout rightBrickWrappingLayout=rightBrick.getWrappingLayout();
      gl.glBegin(GL2.GL_LINES);
      gl.glVertex2f(0,leftBrickWrappingLayout.getAbsoluteTranslateY() + leftBrickElementLayout.getSizeScaledY() * leftSimilarityOffsetY);
      gl.glVertex2f(x,rightBrickWrappingLayout.getAbsoluteTranslateY() + rightBrickElementLayout.getSizeScaledY() * rightSimilarityOffsetY);
      gl.glEnd();
    }
  }
}","private void renderDimensionGroupConnections(GL2 gl){
  gl.glColor4f(1,1,0,1f);
  gl.glLineWidth(4);
  List<GLBrick> leftBricks=leftDimGroup.getBricks();
  List<GLBrick> rightBricks=rightDimGroup.getBricks();
  SimilarityMap similarityMap=relationAnalyzer.getSimilarityMap(leftDimGroup.getSetID());
  if (similarityMap == null)   return;
  VASimilarity<ContentVirtualArray,ContentGroupList> vaSimilarityMap=similarityMap.getVASimilarity(rightDimGroup.getSetID());
  if (vaSimilarityMap == null)   return;
  for (  GLBrick leftBrick : leftBricks) {
    ElementLayout leftBrickElementLayout=leftBrick.getWrappingLayout();
    GroupSimilarity<ContentVirtualArray,ContentGroupList> leftGroupSimilarity=vaSimilarityMap.getGroupSimilarity(leftDimGroup.getSetID(),leftBrick.getGroupID());
    float[] leftSimilarities=leftGroupSimilarity.getSimilarities();
    float leftSimilarityOffsetY=0;
    float rightSimilarityOffsetY=0;
    for (    GLBrick rightBrick : rightBricks) {
      ElementLayout rightBrickElementLayout=rightBrick.getWrappingLayout();
      float leftSimilarityRatioY=leftSimilarities[rightBrick.getGroupID()];
      leftSimilarityOffsetY+=leftSimilarityRatioY;
      GroupSimilarity<ContentVirtualArray,ContentGroupList> rightGroupSimilarity=vaSimilarityMap.getGroupSimilarity(rightDimGroup.getSetID(),rightBrick.getGroupID());
      float[] rightSimilarities=rightGroupSimilarity.getSimilarities();
      float rightSimilarityRatioY=rightSimilarities[leftBrick.getGroupID()];
      rightSimilarityOffsetY+=rightSimilarityRatioY;
      gl.glBegin(GL2.GL_LINES);
      gl.glVertex2f(0,leftBrickElementLayout.getTranslateY() + leftBrickElementLayout.getSizeScaledY() * leftSimilarityOffsetY);
      gl.glVertex2f(x,rightBrickElementLayout.getTranslateY() + rightBrickElementLayout.getSizeScaledY() * rightSimilarityOffsetY);
      gl.glEnd();
    }
  }
}",0.8661174047373842
58079,"@Override public void setStaticLayouts(){
  Row baseRow=new Row(""String_Node_Str"");
  baseRow.setFrameColor(0,0,1,0);
  setBaseElementLayout(baseRow);
  Column baseColumn=new Column(""String_Node_Str"");
  baseColumn.setFrameColor(0,1,0,0);
  ElementLayout fuelBarLayout=new ElementLayout(""String_Node_Str"");
  fuelBarLayout.setFrameColor(0,1,0,0);
  fuelBarLayout.setPixelGLConverter(pixelGLConverter);
  fuelBarLayout.setPixelSizeX(15);
  baseRow.appendElement(baseColumn);
  baseRow.appendElement(fuelBarLayout);
  ElementLayout dimensionBarLayout=new ElementLayout(""String_Node_Str"");
  dimensionBarLayout.setFrameColor(1,0,1,0);
  dimensionBarLayout.setPixelGLConverter(pixelGLConverter);
  dimensionBarLayout.setPixelSizeY(15);
  ElementLayout viewLayout=new ElementLayout(""String_Node_Str"");
  viewLayout.setFrameColor(1,0,0,1);
  viewLayout.setRenderer(viewRenderer);
  ElementLayout viewToolBarLayout=new ElementLayout(""String_Node_Str"");
  viewToolBarLayout.setFrameColor(0.5f,0.5f,0,1);
  viewToolBarLayout.setPixelGLConverter(pixelGLConverter);
  viewToolBarLayout.setPixelSizeY(15);
  viewToolBarLayout.setRenderer(new ViewToolBarRenderer(brick));
  baseColumn.appendElement(dimensionBarLayout);
  baseColumn.appendElement(viewLayout);
  baseColumn.appendElement(viewToolBarLayout);
}","@Override public void setStaticLayouts(){
  Row baseRow=new Row(""String_Node_Str"");
  baseRow.setFrameColor(0,0,1,0);
  setBaseElementLayout(baseRow);
  Column baseColumn=new Column(""String_Node_Str"");
  baseColumn.setFrameColor(0,1,0,0);
  ElementLayout fuelBarLayout=new ElementLayout(""String_Node_Str"");
  fuelBarLayout.setFrameColor(0,1,0,0);
  fuelBarLayout.setPixelGLConverter(pixelGLConverter);
  fuelBarLayout.setPixelSizeY(15);
  fuelBarLayout.setRenderer(new FuelBarRenderer(brick));
  baseRow.appendElement(baseColumn);
  ElementLayout dimensionBarLayout=new ElementLayout(""String_Node_Str"");
  dimensionBarLayout.setFrameColor(1,0,1,0);
  dimensionBarLayout.setPixelGLConverter(pixelGLConverter);
  dimensionBarLayout.setPixelSizeY(15);
  ElementLayout viewLayout=new ElementLayout(""String_Node_Str"");
  viewLayout.setFrameColor(1,0,0,1);
  viewLayout.setRenderer(viewRenderer);
  ElementLayout viewToolBarLayout=new ElementLayout(""String_Node_Str"");
  viewToolBarLayout.setFrameColor(0.5f,0.5f,0,1);
  viewToolBarLayout.setPixelGLConverter(pixelGLConverter);
  viewToolBarLayout.setPixelSizeY(15);
  viewToolBarLayout.setRenderer(new ViewToolBarRenderer(brick));
  baseColumn.appendElement(fuelBarLayout);
  baseColumn.appendElement(viewLayout);
  baseColumn.appendElement(viewToolBarLayout);
}",0.95695618754804
58080,"private void createSubBricks(){
  ContentVirtualArray contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (contentVA.getGroupList() == null)   return;
  ContentGroupList groupList=contentVA.getGroupList();
  int count=0;
  groupList.updateGroupInfo();
  for (  Group group : groupList) {
    GLBrick subBrick=(GLBrick)GeneralManager.get().getViewGLCanvasManager().createGLView(GLBrick.class,getParentGLCanvas(),new ViewFrustum());
    subBrick.setRemoteRenderingGLView(getRemoteRenderingGLCanvas());
    subBrick.setDataDomain(dataDomain);
    subBrick.setSet(set);
    ElementLayout brickLayout=new ElementLayout(""String_Node_Str"");
    ViewLayoutRenderer brickRenderer=new ViewLayoutRenderer(subBrick);
    brickLayout.setRenderer(brickRenderer);
    brickLayout.setFrameColor(1,0,0,1);
    uninitializedBricks.add(subBrick);
    ContentVirtualArray subVA=new ContentVirtualArray(""String_Node_Str"",contentVA.getVirtualArray().subList(group.getStartIndex(),group.getEndIndex()));
    subBrick.setContentVA(subVA);
    if (count < groupList.size() / 2) {
      bottomBricks.add(subBrick);
      bottomCol.appendElement(brickLayout);
    }
 else {
      topBricks.add(subBrick);
      topCol.appendElement(brickLayout);
    }
    count++;
  }
  for (  ElementLayout layout : topCol) {
    layout.setRatioSizeY(1.0f / topCol.size());
  }
  for (  ElementLayout layout : bottomCol) {
    layout.setRatioSizeY(1.0f / bottomCol.size());
  }
}","private void createSubBricks(){
  ContentVirtualArray contentVA=set.getContentData(Set.CONTENT).getContentVA();
  if (contentVA.getGroupList() == null)   return;
  ContentGroupList groupList=contentVA.getGroupList();
  int count=0;
  groupList.updateGroupInfo();
  for (  Group group : groupList) {
    GLBrick subBrick=(GLBrick)GeneralManager.get().getViewGLCanvasManager().createGLView(GLBrick.class,getParentGLCanvas(),new ViewFrustum());
    subBrick.setRemoteRenderingGLView(getRemoteRenderingGLCanvas());
    subBrick.setDataDomain(dataDomain);
    subBrick.setSet(set);
    ElementLayout brickLayout=new ElementLayout(""String_Node_Str"");
    ViewLayoutRenderer brickRenderer=new ViewLayoutRenderer(subBrick);
    brickLayout.setRenderer(brickRenderer);
    brickLayout.setFrameColor(1,0,0,1);
    uninitializedBricks.add(subBrick);
    ContentVirtualArray subVA=new ContentVirtualArray(""String_Node_Str"",contentVA.getVirtualArray().subList(group.getStartIndex(),group.getEndIndex() + 1));
    subBrick.setContentVA(subVA);
    if (count < groupList.size() / 2) {
      bottomBricks.add(subBrick);
      bottomCol.appendElement(brickLayout);
    }
 else {
      topBricks.add(subBrick);
      topCol.appendElement(brickLayout);
    }
    count++;
  }
  for (  ElementLayout layout : topCol) {
    layout.setRatioSizeY(1.0f / topCol.size());
  }
  for (  ElementLayout layout : bottomCol) {
    layout.setRatioSizeY(1.0f / bottomCol.size());
  }
}",0.9986206896551724
58081,"@Override protected void calculateSubElementScales(float availableWidth,float availableHeight){
  float largestWidth=0;
  float totalHeight=0;
  float dynamicHeight=0;
  ElementLayout greedyElement=null;
  for (  ElementLayout element : elements) {
    if (element.grabY) {
      if (greedyElement != null)       throw new IllegalStateException(""String_Node_Str"" + this);
      greedyElement=element;
      continue;
    }
    element.calculateScales(availableWidth,availableHeight);
    totalHeight+=element.getSizeScaledY();
    if (!element.isHeightStatic())     dynamicHeight+=element.getSizeScaledY();
    if (largestWidth < element.getSizeScaledX())     largestWidth=element.getSizeScaledX();
  }
  if (greedyElement != null) {
    greedyElement.setAbsoluteSizeY(availableHeight - dynamicHeight);
    greedyElement.calculateScales(availableWidth,availableHeight - dynamicHeight);
  }
  if (isXDynamic)   sizeScaledX=largestWidth;
  if (isYDynamic)   sizeScaledY=totalHeight;
}","@Override protected void calculateSubElementScales(float availableWidth,float availableHeight){
  float largestWidth=0;
  float totalHeight=0;
  float dynamicHeight=0;
  ElementLayout greedyElement=null;
  for (  ElementLayout element : elements) {
    if (element.grabY) {
      if (greedyElement != null)       throw new IllegalStateException(""String_Node_Str"" + this);
      greedyElement=element;
      continue;
    }
    if (isXDynamic && !element.isWidthStatic() && element.ratioSizeX == 1)     throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ element+ ""String_Node_Str"");
    element.calculateScales(availableWidth,availableHeight);
    totalHeight+=element.getSizeScaledY();
    if (!element.isHeightStatic())     dynamicHeight+=element.getSizeScaledY();
    if (largestWidth < element.getSizeScaledX())     largestWidth=element.getSizeScaledX();
  }
  if (greedyElement != null) {
    greedyElement.setAbsoluteSizeY(availableHeight - dynamicHeight);
    greedyElement.calculateScales(availableWidth,availableHeight - dynamicHeight);
  }
  if (isXDynamic)   sizeScaledX=largestWidth;
  if (isYDynamic)   sizeScaledY=totalHeight;
}",0.9134883720930232
58082,"public boolean isHeightStatic(){
  if (!Float.isNaN(absoluteSizeY))   return true;
  if (pixelSizeY == Integer.MIN_VALUE)   return true;
  return false;
}","public boolean isHeightStatic(){
  if (!Float.isNaN(absoluteSizeY))   return true;
  if (pixelSizeY != Integer.MIN_VALUE)   return true;
  return false;
}",0.9935064935064936
58083,"public boolean isWidthStatic(){
  if (!Float.isNaN(absoluteSizeX))   return true;
  if (pixelSizeX == Integer.MIN_VALUE)   return true;
  return false;
}","public boolean isWidthStatic(){
  if (!Float.isNaN(absoluteSizeX))   return true;
  if (pixelSizeX != Integer.MIN_VALUE)   return true;
  return false;
}",0.9934640522875816
58084,"@Override protected void calculateSubElementScales(float availableWidth,float availableHeight){
  float dynamicWidth=0;
  float totalWidth=0;
  float largestHeight=0;
  ElementLayout greedyElement=null;
  for (  ElementLayout element : elements) {
    if (element.grabX) {
      if (greedyElement != null)       throw new IllegalStateException(""String_Node_Str"" + this);
      greedyElement=element;
      continue;
    }
    element.calculateScales(availableWidth,availableHeight);
    totalWidth+=element.getSizeScaledX();
    if (!element.isWidthStatic())     dynamicWidth+=element.getSizeScaledX();
    if (largestHeight < element.getSizeScaledY())     largestHeight=element.getSizeScaledY();
  }
  if (greedyElement != null) {
    greedyElement.setAbsoluteSizeX(availableWidth - dynamicWidth);
    greedyElement.calculateScales(availableWidth - dynamicWidth,availableHeight);
    dynamicWidth=availableWidth;
  }
  if (isXDynamic)   sizeScaledX=totalWidth;
  if (isYDynamic)   sizeScaledY=largestHeight;
}","@Override protected void calculateSubElementScales(float availableWidth,float availableHeight){
  float dynamicWidth=0;
  float totalWidth=0;
  float largestHeight=0;
  ElementLayout greedyElement=null;
  for (  ElementLayout element : elements) {
    if (element.grabX) {
      if (greedyElement != null)       throw new IllegalStateException(""String_Node_Str"" + this);
      greedyElement=element;
      continue;
    }
    if (isYDynamic && !element.isHeightStatic() && element.ratioSizeY == 1)     throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ element+ ""String_Node_Str"");
    element.calculateScales(availableWidth,availableHeight);
    totalWidth+=element.getSizeScaledX();
    if (!element.isWidthStatic())     dynamicWidth+=element.getSizeScaledX();
    if (largestHeight < element.getSizeScaledY())     largestHeight=element.getSizeScaledY();
  }
  if (greedyElement != null) {
    greedyElement.setAbsoluteSizeX(availableWidth - dynamicWidth);
    greedyElement.calculateScales(availableWidth - dynamicWidth,availableHeight);
    dynamicWidth=availableWidth;
  }
  if (isXDynamic)   sizeScaledX=totalWidth;
  if (isYDynamic)   sizeScaledY=largestHeight;
}",0.915269596737653
58085,"void render(GL2 gl){
  gl.glTranslatef(getTransformX(),getTransformY(),0);
  if (renderDebugFrame) {
    float yPositionDebugText=0;
    float[] color;
    if (frameColor == null)     color=new float[]{0,0,0,0};
 else {
      color=frameColor;
    }
    gl.glColor4fv(color,0);
    if (this instanceof LayoutContainer) {
      gl.glLineWidth(6);
      yPositionDebugText=getSizeScaledY() / 2;
    }
 else {
      gl.glLineWidth(2);
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,0.2f);
    gl.glVertex3f(getSizeScaledX(),0,0.2f);
    gl.glVertex3f(getSizeScaledX(),getSizeScaledY(),0.2f);
    gl.glVertex3f(0,getSizeScaledY(),0.2f);
    gl.glEnd();
    if (textRenderer == null) {
      textRenderer=new MinSizeTextRenderer();
    }
    textRenderer.setColor(color[0],color[1],color[2],color[3]);
    textRenderer.renderText(gl,layoutName,0,yPositionDebugText,0.4f);
  }
  if (backgroundRenderers != null) {
    for (    LayoutRenderer backgroundRenderer : backgroundRenderers) {
      backgroundRenderer.render(gl);
    }
  }
  renderer.render(gl);
  if (foregroundRenderers != null) {
    for (    LayoutRenderer foregroundRenderer : foregroundRenderers) {
      foregroundRenderer.render(gl);
    }
  }
  gl.glTranslatef(-getTransformX(),-getTransformY(),0);
}","void render(GL2 gl){
  gl.glTranslatef(getTransformX(),getTransformY(),0);
  if (debug) {
    float yPositionDebugText=0;
    float[] color;
    if (frameColor == null)     color=new float[]{0,0.5f,0.5f,1};
 else {
      color=frameColor;
    }
    gl.glColor4fv(color,0);
    if (this instanceof LayoutContainer) {
      gl.glLineWidth(6);
      yPositionDebugText=getSizeScaledY() / 2;
    }
 else {
      gl.glLineWidth(2);
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,0.2f);
    gl.glVertex3f(getSizeScaledX(),0,0.2f);
    gl.glVertex3f(getSizeScaledX(),getSizeScaledY(),0.2f);
    gl.glVertex3f(0,getSizeScaledY(),0.2f);
    gl.glEnd();
    if (textRenderer == null) {
      textRenderer=new MinSizeTextRenderer();
    }
    textRenderer.setColor(color[0],color[1],color[2],color[3]);
    textRenderer.renderText(gl,layoutName,0,yPositionDebugText,0.4f);
  }
  if (backgroundRenderers != null) {
    for (    LayoutRenderer backgroundRenderer : backgroundRenderers) {
      backgroundRenderer.render(gl);
    }
  }
  renderer.render(gl);
  if (foregroundRenderers != null) {
    for (    LayoutRenderer foregroundRenderer : foregroundRenderers) {
      foregroundRenderer.render(gl);
    }
  }
  gl.glTranslatef(-getTransformX(),-getTransformY(),0);
}",0.9894076108277756
58086,"@Override public void render(GL2 gl){
  super.render(gl);
  float height=(layoutElement.getSizeScaledY() - (float)manager.getTextRenderer().getBounds(""String_Node_Str"").getHeight()) / 2;
  RenderingHelpers.renderText(gl,manager.getMinSizeTextRenderer(),caption,0 + BookmarkRenderStyle.SIDE_SPACING,height,GeneralRenderStyle.SMALL_FONT_SCALING_FACTOR);
}","@Override public void render(GL2 gl){
  super.render(gl);
  float height=(layoutElement.getSizeScaledY() - (float)manager.getMinSizeTextRenderer().getBounds(""String_Node_Str"").getHeight()) / 2;
  RenderingHelpers.renderText(gl,manager.getMinSizeTextRenderer(),caption,0 + BookmarkRenderStyle.SIDE_SPACING,height,GeneralRenderStyle.SMALL_FONT_SCALING_FACTOR);
}",0.9901823281907434
58087,"public void zoomIn(){
  Set<Integer> elements=mainTreeMapView.getSelectionManager().getElements(SelectionType.SELECTION);
  if (elements.size() == 1) {
    ClusterNode dataRoot=dataDomain.getSet().getContentData(contentVAType).getContentTree().getNodeByNumber(elements.iterator().next());
    mainTreeMapView.setRemotePickingManager(null,0);
    mainTreeMapView.clearAllSelections();
    mainTreeMapView.getSelectionManager().addToType(SelectionType.SELECTION,dataRoot.getID());
    mainTreeMapView.setDrawLabel(false);
    @SuppressWarnings(""String_Node_Str"") Vector<GLTreeMap> beginThumbnails=(Vector<GLTreeMap>)thumbnailTreemapViews.clone();
    mainTreeMapView.setInteractive(false);
    thumbnailTreemapViews.add(mainTreeMapView);
    GLTreeMap beginMainView=mainTreeMapView;
    setMainTreeMapView(createEmbeddedTreeMap());
    mainTreeMapView.setDrawLabel(true);
    mainTreeMapView.setRootClusterID(dataRoot.getID());
    mainTreeMapView.setZoomActive(true);
    mainTreeMapView.initData();
    animationControle.initAnimation(this,beginMainView,mainTreeMapView,beginThumbnails,thumbnailTreemapViews,AnimationControle.ZOOM_IN_ANIMATION);
    animationControle.setActive(true);
    setDisplayListDirty();
  }
}","public void zoomIn(){
  Set<Integer> elements=mainTreeMapView.getSelectionManager().getElements(SelectionType.SELECTION);
  if (elements.size() == 1) {
    ClusterNode dataRoot=dataDomain.getSet().getContentData(contentVAType).getContentTree().getNodeByNumber(elements.iterator().next());
    mainTreeMapView.setRemotePickingManager(null,0);
    mainTreeMapView.clearAllSelections();
    mainTreeMapView.getSelectionManager().addToType(SelectionType.SELECTION,dataRoot.getID());
    mainTreeMapView.setDrawLabel(false);
    @SuppressWarnings(""String_Node_Str"") Vector<GLTreeMap> beginThumbnails=(Vector<GLTreeMap>)thumbnailTreemapViews.clone();
    mainTreeMapView.setInteractive(false);
    thumbnailTreemapViews.add(mainTreeMapView);
    GLTreeMap beginMainView=mainTreeMapView;
    GLTreeMap treeMap=createEmbeddedTreeMap();
    setMainTreeMapView(treeMap);
    uninitializedTreeMap.add(treeMap);
    mainTreeMapView.setDrawLabel(true);
    mainTreeMapView.setRootClusterID(dataRoot.getID());
    mainTreeMapView.setZoomActive(true);
    mainTreeMapView.initData();
    animationControle.initAnimation(this,beginMainView,mainTreeMapView,beginThumbnails,thumbnailTreemapViews,AnimationControle.ZOOM_IN_ANIMATION);
    animationControle.setActive(true);
    setDisplayListDirty();
  }
}",0.9568690095846646
58088,"@Override public void displayLocal(GL2 gl){
  if (mainTreeMapView != null)   mainTreeMapView.processEvents();
  for (  GLTreeMap view : thumbnailTreemapViews)   view.processEvents();
  pickingManager.handlePicking(this,gl);
  display(gl);
  checkForHits(gl);
}","@Override public void displayLocal(GL2 gl){
  while (!uninitializedTreeMap.isEmpty()) {
    uninitializedTreeMap.poll().initRemote(gl,this,glMouseListener);
  }
  if (mainTreeMapView != null)   mainTreeMapView.processEvents();
  for (  GLTreeMap view : thumbnailTreemapViews)   view.processEvents();
  pickingManager.handlePicking(this,gl);
  display(gl);
  checkForHits(gl);
}",0.8163265306122449
58089,"@Override public void init(GL2 gl){
  renderer.initCache(gl);
}","@Override public void init(GL2 gl){
  if (textRenderer == null)   textRenderer=new CaleydoTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),true,true);
  renderer.initCache(gl);
}",0.5101214574898786
58090,"public void initRenderer(ViewFrustum viewFrustum,PickingManager pickingManager,int viewID,SelectionManager selectionManager,CaleydoTextRenderer textRenderer){
  this.pickingManager=pickingManager;
  this.viewFrustum=viewFrustum;
  this.viewID=viewID;
  this.selectionManager=selectionManager;
  this.textRenderer=textRenderer;
}","public void initRenderer(ViewFrustum viewFrustum,PickingManager pickingManager,int viewID,SelectionManager selectionManager,CaleydoTextRenderer textRenderer){
  if (textRenderer == null)   throw new IllegalArgumentException(""String_Node_Str"");
  this.pickingManager=pickingManager;
  this.viewFrustum=viewFrustum;
  this.viewID=viewID;
  this.selectionManager=selectionManager;
  this.textRenderer=textRenderer;
}",0.8852901484480432
58091,"@Override protected void calculateSubElementScales(float availableWidth,float availableHeight){
  float actualWidth=0;
  float actualHeight=0;
  float totalHeight=0;
  ElementLayout greedyElement=null;
  for (  ElementLayout element : elements) {
    if (element.grabY) {
      if (greedyElement != null)       throw new IllegalStateException(""String_Node_Str"" + this);
      greedyElement=element;
      continue;
    }
    element.calculateScales(availableWidth,availableHeight - actualHeight);
    totalHeight+=element.getSizeScaledY();
    if (!(!Float.isNaN(element.absoluteSizeY) || Integer.MIN_VALUE != element.pixelSizeY))     actualHeight+=element.getSizeScaledY();
    if (actualWidth < element.getSizeScaledX())     actualWidth=element.getSizeScaledX();
  }
  if (greedyElement != null) {
    greedyElement.setAbsoluteSizeY(availableHeight - actualHeight);
    greedyElement.calculateScales(availableWidth,availableHeight - actualHeight);
    actualHeight=availableHeight;
  }
  if (isXDynamic)   sizeScaledX=actualWidth;
  if (isYDynamic)   sizeScaledY=totalHeight;
}","@Override protected void calculateSubElementScales(float availableWidth,float availableHeight){
  float actualWidth=0;
  float actualHeight=0;
  float totalHeight=0;
  ElementLayout greedyElement=null;
  for (  ElementLayout element : elements) {
    if (element.grabY) {
      if (greedyElement != null)       throw new IllegalStateException(""String_Node_Str"" + this);
      greedyElement=element;
      continue;
    }
    element.calculateScales(availableWidth,availableHeight);
    totalHeight+=element.getSizeScaledY();
    if (!(!Float.isNaN(element.absoluteSizeY) || Integer.MIN_VALUE != element.pixelSizeY))     actualHeight+=element.getSizeScaledY();
    if (actualWidth < element.getSizeScaledX())     actualWidth=element.getSizeScaledX();
  }
  if (greedyElement != null) {
    greedyElement.setAbsoluteSizeY(availableHeight - actualHeight);
    greedyElement.calculateScales(availableWidth,availableHeight - actualHeight);
    actualHeight=availableHeight;
  }
  if (isXDynamic)   sizeScaledX=actualWidth;
  if (isYDynamic)   sizeScaledY=totalHeight;
}",0.9930004666355576
58092,"public void metaSetsUpdated(){
  ArrayList<ISet> meatSets=dataDomain.getSet().getStorageData(storageVAType).getStorageTree().getRoot().getAllMetaSetsFromSubTree();
  System.out.println(""String_Node_Str"");
}","public void metaSetsUpdated(){
  ArrayList<ISet> allMetaSets=dataDomain.getSet().getStorageData(storageVAType).getStorageTree().getRoot().getAllMetaSetsFromSubTree();
  ArrayList<ISet> filteredMetaSets=new ArrayList<ISet>(allMetaSets.size() / 2);
  for (  ISet metaSet : allMetaSets) {
    if (metaSet.size() > 1 && metaSet.size() != dataDomain.getSet().size())     filteredMetaSets.add(metaSet);
  }
  initializeBricks(filteredMetaSets);
  System.out.println(""String_Node_Str"");
}",0.5880640465793304
58093,"@Override public void init(GL2 gl){
  renderStyle=new VisBricksRenderStyle(viewFrustum);
  super.renderStyle=renderStyle;
  detailLevel=DetailLevel.HIGH;
  connectionRenderer.init(gl);
  initLayout();
}","@Override public void init(GL2 gl){
  renderStyle=new VisBricksRenderStyle(viewFrustum);
  super.renderStyle=renderStyle;
  detailLevel=DetailLevel.HIGH;
  connectionRenderer.init(gl);
}",0.9587628865979382
58094,"@Override protected void handlePickingEvents(EPickingType pickingType,EPickingMode pickingMode,int pickingID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
switch (pickingType) {
case TREEMAP_ELEMENT_SELECTED:
switch (pickingMode) {
case CLICKED:
      mouseWheeleSelectionId=pickingID;
    treeSelectionManager.clearSelection(SelectionType.SELECTION);
  treeSelectionManager.addToType(SelectionType.SELECTION,mouseWheeleSelectionId);
bIsMouseWheeleUsed=true;
mouseWheeleSelectionHeight=0;
break;
case MOUSE_OVER:
treeSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
treeSelectionManager.addToType(SelectionType.MOUSE_OVER,pickingID);
break;
case RIGHT_CLICKED:
break;
case DRAGGED:
break;
default :
return;
}
publishSelectionEvent();
setHighLichtingListDirty();
break;
default :
return;
}
}","@Override protected void handlePickingEvents(EPickingType pickingType,EPickingMode pickingMode,int pickingID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
switch (pickingType) {
case TREEMAP_ELEMENT_SELECTED:
switch (pickingMode) {
case CLICKED:
      mouseWheeleSelectionId=pickingID;
    treeSelectionManager.clearSelection(SelectionType.SELECTION);
  treeSelectionManager.addToType(SelectionType.SELECTION,mouseWheeleSelectionId);
bIsMouseWheeleUsed=true;
mouseWheeleSelectionHeight=0;
break;
case MOUSE_OVER:
treeSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
treeSelectionManager.addToType(SelectionType.MOUSE_OVER,pickingID);
break;
case RIGHT_CLICKED:
break;
case DRAGGED:
break;
default :
return;
}
publishSelectionEvent();
setHighLightingListDirty();
break;
default :
return;
}
}",0.9987908101571948
58095,"public void processMouseWheeleEvent(MouseWheelEvent e){
  if (bIsMouseWheeleUsed) {
    if (e.getWheelRotation() > 0) {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseWheeleSelectionId);
      mouseWheeleSelectionHeight++;
      ATreeMapNode parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
      if (parent != null) {
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
 else {
        mouseWheeleSelectionHeight--;
      }
    }
 else {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseWheeleSelectionId);
      if (mouseWheeleSelectionHeight > 0) {
        mouseWheeleSelectionHeight--;
        ATreeMapNode parent;
        if (mouseWheeleSelectionHeight == 0)         parent=node;
 else         parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
    }
    setHighLichtingListDirty();
  }
}","public void processMouseWheeleEvent(MouseWheelEvent e){
  if (bIsMouseWheeleUsed) {
    if (e.getWheelRotation() > 0) {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseWheeleSelectionId);
      mouseWheeleSelectionHeight++;
      ATreeMapNode parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
      if (parent != null) {
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
 else {
        mouseWheeleSelectionHeight--;
      }
    }
 else {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseWheeleSelectionId);
      if (mouseWheeleSelectionHeight > 0) {
        mouseWheeleSelectionHeight--;
        ATreeMapNode parent;
        if (mouseWheeleSelectionHeight == 0)         parent=node;
 else         parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
    }
    setHighLightingListDirty();
  }
}",0.9991311902693312
58096,"public void setHighLightingLevel(int level){
  treeSelectionManager.clearSelection(SelectionType.LEVEL_HIGHLIGHTING);
  if (level > 0) {
    ArrayList<ClusterNode> nodes, newNodes;
    nodes=tree.getRoot().getChildren();
    for (int i=0; i < level; i++) {
      newNodes=new ArrayList<ClusterNode>();
      for (      ClusterNode node : nodes) {
        ArrayList<ClusterNode> children=node.getChildren();
        if (children != null)         newNodes.addAll(children);
      }
      nodes=newNodes;
    }
    for (    ClusterNode node : nodes) {
      treeSelectionManager.addToType(SelectionType.LEVEL_HIGHLIGHTING,node.getID());
    }
  }
  setHighLichtingListDirty();
}","public void setHighLightingLevel(int level){
  treeSelectionManager.clearSelection(SelectionType.LEVEL_HIGHLIGHTING);
  if (level > 0) {
    ArrayList<ClusterNode> nodes, newNodes;
    nodes=tree.getRoot().getChildren();
    for (int i=0; i < level; i++) {
      newNodes=new ArrayList<ClusterNode>();
      for (      ClusterNode node : nodes) {
        ArrayList<ClusterNode> children=node.getChildren();
        if (children != null)         newNodes.addAll(children);
      }
      nodes=newNodes;
    }
    for (    ClusterNode node : nodes) {
      treeSelectionManager.addToType(SelectionType.LEVEL_HIGHLIGHTING,node.getID());
    }
  }
  setHighLightingListDirty();
}",0.9985185185185184
58097,"@Override public void display(GL gl){
  if (bIsDisplayListDirtyLocal) {
    renderer.initCache(gl);
    renderer.initRenderer(viewFrustum,getActivePickingManager(),getPickingViewID(),treeSelectionManager,textRenderer);
    renderer.renderTreeMap(gl,treeMapModel.getRoot());
    bIsDisplayListDirtyLocal=false;
    setHighLichtingListDirty();
  }
  if (bIsHighlightingListDirty) {
    renderer.paintHighlighting(gl,treeMapModel,treeSelectionManager);
    bIsHighlightingListDirty=false;
  }
  renderer.renderTreeMapFromCache(gl);
}","@Override public void display(GL gl){
  if (bIsDisplayListDirtyLocal) {
    renderer.initCache(gl);
    renderer.initRenderer(viewFrustum,getActivePickingManager(),getPickingViewID(),treeSelectionManager,textRenderer);
    renderer.renderTreeMap(gl,treeMapModel.getRoot());
    bIsDisplayListDirtyLocal=false;
    setHighLightingListDirty();
  }
  if (bIsHighlightingListDirty) {
    renderer.paintHighlighting(gl,treeMapModel,treeSelectionManager);
    bIsHighlightingListDirty=false;
  }
  renderer.renderTreeMapFromCache(gl);
}",0.9981132075471698
58098,"/** 
 * Creates the gui components which are initialized with default values or from the pref store.
 */
@Override public void createFieldEditors(){
  Composite baseComposite=new Composite(getFieldEditorParent(),SWT.NULL);
  baseComposite.setLayout(new GridLayout(1,false));
  Label l=new Label(baseComposite,SWT.SHADOW_NONE);
  l.setText(""String_Node_Str"");
  layoutAlgorithmCB=new Combo(baseComposite,SWT.READ_ONLY);
  layoutAlgorithmCB.setItems(LAYOUT_ALGORITHM_DISPLAYNAME);
  int selectedLayout=preferenceStore.getInt(PreferenceConstants.TREEMAP_LAYOUT_ALGORITHM);
  layoutAlgorithmCB.setText(LAYOUT_ALGORITHM_DISPLAYNAME[selectedLayout]);
  frameButton=new Button(baseComposite,SWT.CHECK);
  boolean frameSelection=preferenceStore.getBoolean(PreferenceConstants.TREEMAP_DRAW_CLUSTER_FRAME);
  frameButton.setSelection(frameSelection);
  frameButton.setText(""String_Node_Str"");
  int maxDepth=preferenceStore.getInt(PreferenceConstants.TREEMAP_MAX_DEPTH);
  maxDepthButton=new Button(baseComposite,SWT.CHECK);
  maxDepthButton.setSelection(maxDepth > 0);
  maxDepthButton.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      maxDepthSp.setEnabled(maxDepthButton.getSelection());
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  maxDepthSp=new Spinner(baseComposite,SWT.BORDER);
  maxDepthSp.setEnabled(maxDepth > 0);
  maxDepthSp.setDigits(0);
  maxDepthSp.setMaximum(999);
  maxDepthSp.setMinimum(1);
  maxDepthSp.setIncrement(1);
  maxDepthSp.setSelection(maxDepth);
  baseComposite.pack();
}","/** 
 * Creates the gui components which are initialized with default values or from the pref store.
 */
@Override public void createFieldEditors(){
  Composite baseComposite=new Composite(getFieldEditorParent(),SWT.NULL);
  baseComposite.setLayout(new GridLayout(1,false));
  Label l=new Label(baseComposite,SWT.SHADOW_NONE);
  l.setText(""String_Node_Str"");
  layoutAlgorithmCB=new Combo(baseComposite,SWT.READ_ONLY);
  layoutAlgorithmCB.setItems(LAYOUT_ALGORITHM_DISPLAYNAME);
  int selectedLayout=preferenceStore.getInt(PreferenceConstants.TREEMAP_LAYOUT_ALGORITHM);
  layoutAlgorithmCB.setText(LAYOUT_ALGORITHM_DISPLAYNAME[selectedLayout]);
  frameButton=new Button(baseComposite,SWT.CHECK);
  boolean frameSelection=preferenceStore.getBoolean(PreferenceConstants.TREEMAP_DRAW_CLUSTER_FRAME);
  frameButton.setSelection(frameSelection);
  frameButton.setText(""String_Node_Str"");
  int maxDepth=preferenceStore.getInt(PreferenceConstants.TREEMAP_MAX_DEPTH);
  maxDepthButton=new Button(baseComposite,SWT.CHECK);
  maxDepthButton.setSelection(maxDepth > 0);
  maxDepthButton.setText(""String_Node_Str"");
  maxDepthButton.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      maxDepthSp.setEnabled(maxDepthButton.getSelection());
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  maxDepthSp=new Spinner(baseComposite,SWT.BORDER);
  maxDepthSp.setEnabled(maxDepth > 0);
  maxDepthSp.setDigits(0);
  maxDepthSp.setMaximum(999);
  maxDepthSp.setMinimum(1);
  maxDepthSp.setIncrement(1);
  maxDepthSp.setSelection(maxDepth);
  baseComposite.pack();
}",0.9861751152073732
58099,"@Override public String getShortInfo(){
  return ""String_Node_Str"";
}","@Override public String getShortInfo(){
  return ""String_Node_Str"" + dataDomain.getSet().getContentData(contentVAType).getContentTree().getNumberOfNodes() + ""String_Node_Str"";
}",0.5609756097560976
58100,"@Override public String getDetailedInfo(){
  return ""String_Node_Str"";
}","@Override public String getDetailedInfo(){
  return ""String_Node_Str"" + dataDomain.getSet().getContentData(contentVAType).getContentTree().getNumberOfNodes() + ""String_Node_Str""+ thumbnailTreemapViews.size()+ ""String_Node_Str"";
}",0.4784053156146179
58101,"@Override protected void handlePickingEvents(EPickingType pickingType,EPickingMode pickingMode,int pickingID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
switch (pickingType) {
case TREEMAP_ELEMENT_SELECTED:
switch (pickingMode) {
case CLICKED:
      mouseWheeleSelectionId=pickingID;
    treeSelectionManager.clearSelection(SelectionType.SELECTION);
  treeSelectionManager.addToType(SelectionType.SELECTION,mouseWheeleSelectionId);
bIsMouseWheeleUsed=true;
mouseWheeleSelectionHeight=0;
break;
case MOUSE_OVER:
treeSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
treeSelectionManager.addToType(SelectionType.MOUSE_OVER,pickingID);
break;
case RIGHT_CLICKED:
break;
case DRAGGED:
break;
default :
return;
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(dataDomain.getDataDomainType());
event.setSelectionDelta(treeSelectionManager.getDelta());
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
setHighLichtingListDirty();
break;
default :
return;
}
}","@Override protected void handlePickingEvents(EPickingType pickingType,EPickingMode pickingMode,int pickingID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
switch (pickingType) {
case TREEMAP_ELEMENT_SELECTED:
switch (pickingMode) {
case CLICKED:
      mouseWheeleSelectionId=pickingID;
    treeSelectionManager.clearSelection(SelectionType.SELECTION);
  treeSelectionManager.addToType(SelectionType.SELECTION,mouseWheeleSelectionId);
bIsMouseWheeleUsed=true;
mouseWheeleSelectionHeight=0;
break;
case MOUSE_OVER:
treeSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
treeSelectionManager.addToType(SelectionType.MOUSE_OVER,pickingID);
break;
case RIGHT_CLICKED:
break;
case DRAGGED:
break;
default :
return;
}
publishSelectionEvent();
setHighLichtingListDirty();
break;
default :
return;
}
}",0.8130939809926082
58102,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  labelListener=new ToggleLabelListener();
  labelListener.setHandler(this);
  eventPublisher.addListener(ToggleLabelEvent.class,labelListener);
  coloringModeListener=new ToggleColoringModeListener();
  coloringModeListener.setHandler(this);
  eventPublisher.addListener(ToggleColoringModeEvent.class,coloringModeListener);
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setDataDomainType(dataDomain.getDataDomainType());
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  updateColorMappingListener=new UpdateColorMappingListener();
  updateColorMappingListener.setHandler(this);
  eventPublisher.addListener(UpdateColorMappingEvent.class,updateColorMappingListener);
  updateViewListener=new UpdateViewListener();
  updateViewListener.setHandler(this);
  eventPublisher.addListener(UpdateViewEvent.class,updateViewListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  labelListener=new ToggleLabelListener();
  labelListener.setHandler(this);
  eventPublisher.addListener(ToggleLabelEvent.class,labelListener);
  coloringModeListener=new ToggleColoringModeListener();
  coloringModeListener.setHandler(this);
  eventPublisher.addListener(ToggleColoringModeEvent.class,coloringModeListener);
  levelHighlightingListener=new LevelHighlightingListener();
  levelHighlightingListener.setHandler(this);
  eventPublisher.addListener(LevelHighlightingEvent.class,levelHighlightingListener);
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setDataDomainType(dataDomain.getDataDomainType());
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  updateColorMappingListener=new UpdateColorMappingListener();
  updateColorMappingListener.setHandler(this);
  eventPublisher.addListener(UpdateColorMappingEvent.class,updateColorMappingListener);
  updateViewListener=new UpdateViewListener();
  updateViewListener.setHandler(this);
  eventPublisher.addListener(UpdateViewEvent.class,updateViewListener);
}",0.9138777331548416
58103,"@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (labelListener != null) {
    eventPublisher.removeListener(labelListener);
    labelListener=null;
  }
  if (coloringModeListener != null) {
    eventPublisher.removeListener(coloringModeListener);
    coloringModeListener=null;
  }
  if (updateColorMappingListener != null) {
    eventPublisher.removeListener(updateColorMappingListener);
    updateColorMappingListener=null;
  }
  if (updateViewListener != null) {
    eventPublisher.removeListener(updateViewListener);
    updateViewListener=null;
  }
}","@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (labelListener != null) {
    eventPublisher.removeListener(labelListener);
    labelListener=null;
  }
  if (coloringModeListener != null) {
    eventPublisher.removeListener(coloringModeListener);
    coloringModeListener=null;
  }
  if (levelHighlightingListener != null) {
    eventPublisher.removeListener(levelHighlightingListener);
    levelHighlightingListener=null;
  }
  if (updateColorMappingListener != null) {
    eventPublisher.removeListener(updateColorMappingListener);
    updateColorMappingListener=null;
  }
  if (updateViewListener != null) {
    eventPublisher.removeListener(updateViewListener);
    updateViewListener=null;
  }
}",0.910438542310068
58104,"@Override public String getDetailedInfo(){
  return null;
}","@Override public String getDetailedInfo(){
  return ""String_Node_Str"";
}",0.8549618320610687
58105,"/** 
 * Returns different color depending how <code>setColorData</code> is used.
 */
@Override public float[] getColorAttribute(){
  if (referenzData.bUseExpressionValues) {
    StorageSelectionManager storageSelectionManager=referenzData.dataDomain.getStorageSelectionManager();
    Set<Integer> storageIDs=storageSelectionManager.getElements(SelectionType.SELECTION);
    if (storageIDs != null && storageIDs.size() > 0) {
      float expressionValue=0;
      for (      Integer storageID : storageIDs) {
        expressionValue+=referenzData.dataDomain.getSet().get(storageID).getFloat(EDataRepresentation.NORMALIZED,data.getLeafID());
      }
      expressionValue/=storageIDs.size();
      return referenzData.colorMapper.getColor(expressionValue);
    }
  }
  return referenzData.colorMapper.getColor(data.getAverageExpressionValue() / referenzData.colorReferenzSpace);
}","/** 
 * Returns different color depending how <code>setColorData</code> is used.
 */
@Override public float[] getColorAttribute(){
  if (referenzData.bUseExpressionValues && data.getLeafID() >= 0) {
    StorageSelectionManager storageSelectionManager=referenzData.dataDomain.getStorageSelectionManager();
    Set<Integer> storageIDs=storageSelectionManager.getElements(SelectionType.SELECTION);
    if (storageIDs != null && storageIDs.size() > 0) {
      float expressionValue=0;
      for (      Integer storageID : storageIDs) {
        expressionValue+=referenzData.dataDomain.getSet().get(storageID).getFloat(EDataRepresentation.NORMALIZED,data.getLeafID());
      }
      expressionValue/=storageIDs.size();
      return referenzData.colorMapper.getColor(expressionValue);
    }
  }
  return referenzData.colorMapper.getColor(data.getAverageExpressionValue() / referenzData.colorReferenzSpace);
}",0.985947161326588
58106,"void initAnimation(GLHierarchicalTreeMap parentView,GLTreeMap beginMainView,GLTreeMap endMainView,Vector<GLTreeMap> beginThumbnails,Vector<GLTreeMap> endThumbnails,int direction){
  this.beginMainView=beginMainView;
  this.endMainView=endMainView;
  this.beginThumbnails=beginThumbnails;
  this.endThumbnails=endThumbnails;
  this.direcetion=direction;
  this.parentView=parentView;
  startTime=Calendar.getInstance().getTimeInMillis();
  parentView.thumbnailTreemapViews=beginThumbnails;
  calcData();
  System.out.println(""String_Node_Str"" + direction);
}","void initAnimation(GLHierarchicalTreeMap parentView,GLTreeMap beginMainView,GLTreeMap endMainView,Vector<GLTreeMap> beginThumbnails,Vector<GLTreeMap> endThumbnails,int direction){
  this.beginMainView=beginMainView;
  this.endMainView=endMainView;
  this.beginThumbnails=beginThumbnails;
  this.endThumbnails=endThumbnails;
  this.direcetion=direction;
  this.parentView=parentView;
  startTime=Calendar.getInstance().getTimeInMillis();
  parentView.thumbnailTreemapViews=beginThumbnails;
  calcData();
  zoomStage=0;
}",0.9460966542750928
58107,"void display(GL gl){
  float x, y, width, height;
  long time=Calendar.getInstance().getTimeInMillis();
  float progress=((float)(time - startTime)) / animationTime;
  if (progress >= 1) {
    endAnimation();
    return;
  }
  x=(endX - beginX) * progress + beginX;
  y=(endY - beginY) * progress + beginY;
  width=(endWidth - beginWidth) * progress + beginWidth;
  height=(endHeight - beginHeight) * progress + beginHeight;
  parentView.displayThumbnailTreemaps(gl);
  if (direcetion == ZOOM_IN_ANIMATION) {
    parentView.displayMainTreeMap(gl,true);
  }
  beginMainView.getViewFrustum().setTop(parentView.getViewFrustum().getHeight() * (y + height));
  beginMainView.getViewFrustum().setBottom(parentView.getViewFrustum().getHeight() * y);
  beginMainView.getViewFrustum().setLeft(parentView.getViewFrustum().getWidth() * x);
  beginMainView.getViewFrustum().setRight(parentView.getViewFrustum().getWidth() * (x + width));
  beginMainView.setDisplayListDirty();
  beginMainView.display(gl);
  System.out.println(progress + ""String_Node_Str"" + x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ beginMainView.getViewFrustum());
}","void display(GL gl){
  float x, y, width, height;
  long time=Calendar.getInstance().getTimeInMillis();
  float progress=Math.min(((float)(time - startTime)) / animationTime,1);
  x=(endX - beginX) * progress + beginX;
  y=(endY - beginY) * progress + beginY;
  width=(endWidth - beginWidth) * progress + beginWidth;
  height=(endHeight - beginHeight) * progress + beginHeight;
  parentView.displayThumbnailTreemaps(gl);
  beginMainView.getViewFrustum().setTop(parentView.getViewFrustum().getHeight() * (y + height));
  beginMainView.getViewFrustum().setBottom(parentView.getViewFrustum().getHeight() * y);
  beginMainView.getViewFrustum().setLeft(parentView.getViewFrustum().getWidth() * x);
  beginMainView.getViewFrustum().setRight(parentView.getViewFrustum().getWidth() * (x + width));
  beginMainView.setDisplayListDirty();
  beginMainView.display(gl);
  if (direcetion == ZOOM_IN_ANIMATION && progress >= 1 && zoomStage == 0) {
    zoomStage=1;
    parentView.thumbnailTreemapViews=endThumbnails;
    for (    GLTreeMap view : endThumbnails)     view.setDisplayListDirty();
    calcSecondZoomStage();
    progress=0;
    startTime=Calendar.getInstance().getTimeInMillis();
  }
  if (progress >= 1) {
    endAnimation();
    return;
  }
}",0.4049586776859504
58108,"private void setMainTreeMapView(GLTreeMap treemap){
  mainTreeMapView=treemap;
}","private void setMainTreeMapView(GLTreeMap treemap){
  mainTreeMapView=treemap;
  mainTreeMapView.setInteractive(true);
}",0.8
58109,"@Override public String getShortInfo(){
  return ""String_Node_Str"" + dataDomain.getSet().getContentData(contentVAType).getContentTree().getNumberOfNodes() + ""String_Node_Str"";
}","@Override public String getShortInfo(){
  return ""String_Node_Str"" + dataDomain.getSet().getBaseStorageVA().size() + ""String_Node_Str"";
}",0.7961783439490446
58110,"public void zoomIn(){
  Set<Integer> elements=mainTreeMapView.getSelectionManager().getElements(SelectionType.SELECTION);
  if (elements.size() == 1) {
    ClusterNode dataRoot=dataDomain.getSet().getContentData(contentVAType).getContentTree().getNodeByNumber(elements.iterator().next());
    mainTreeMapView.setRemotePickingManager(null,0);
    mainTreeMapView.clearAllSelections();
    mainTreeMapView.getSelectionManager().addToType(SelectionType.SELECTION,dataRoot.getID());
    mainTreeMapView.setDrawLabel(false);
    Vector<GLTreeMap> beginThumbnails=(Vector<GLTreeMap>)thumbnailTreemapViews.clone();
    thumbnailTreemapViews.add(mainTreeMapView);
    GLTreeMap beginMainView=mainTreeMapView;
    setMainTreeMapView(createEmbeddedTreeMap());
    mainTreeMapView.setDrawLabel(true);
    mainTreeMapView.setRootClusterID(dataRoot.getID());
    mainTreeMapView.setZoomActive(true);
    mainTreeMapView.initData();
    animationControle.initAnimation(this,beginMainView,mainTreeMapView,beginThumbnails,thumbnailTreemapViews,AnimationControle.ZOOM_IN_ANIMATION);
    animationControle.setActive(true);
    setDisplayListDirty();
  }
}","public void zoomIn(){
  Set<Integer> elements=mainTreeMapView.getSelectionManager().getElements(SelectionType.SELECTION);
  if (elements.size() == 1) {
    ClusterNode dataRoot=dataDomain.getSet().getContentData(contentVAType).getContentTree().getNodeByNumber(elements.iterator().next());
    mainTreeMapView.setRemotePickingManager(null,0);
    mainTreeMapView.clearAllSelections();
    mainTreeMapView.getSelectionManager().addToType(SelectionType.SELECTION,dataRoot.getID());
    mainTreeMapView.setDrawLabel(false);
    @SuppressWarnings(""String_Node_Str"") Vector<GLTreeMap> beginThumbnails=(Vector<GLTreeMap>)thumbnailTreemapViews.clone();
    mainTreeMapView.setInteractive(false);
    thumbnailTreemapViews.add(mainTreeMapView);
    GLTreeMap beginMainView=mainTreeMapView;
    setMainTreeMapView(createEmbeddedTreeMap());
    mainTreeMapView.setDrawLabel(true);
    mainTreeMapView.setRootClusterID(dataRoot.getID());
    mainTreeMapView.setZoomActive(true);
    mainTreeMapView.initData();
    animationControle.initAnimation(this,beginMainView,mainTreeMapView,beginThumbnails,thumbnailTreemapViews,AnimationControle.ZOOM_IN_ANIMATION);
    animationControle.setActive(true);
    setDisplayListDirty();
  }
}",0.9660152931180968
58111,"@Override public String getDetailedInfo(){
  return ""String_Node_Str"" + dataDomain.getSet().getContentData(contentVAType).getContentTree().getNumberOfNodes() + ""String_Node_Str""+ thumbnailTreemapViews.size()+ ""String_Node_Str"";
}","@Override public String getDetailedInfo(){
  return getShortInfo();
}",0.4161073825503356
58112,"@Override public void doCommand(){
  GLCapabilities glCapabilities=new GLCapabilities(GLProfile.getDefault());
  glCapabilities.setStencilBits(1);
  createdObject=new GLCaleydoCanvas(glCapabilities);
  ViewManager viewManager=generalManager.getViewGLCanvasManager();
  viewManager.registerGLCanvas(createdObject);
  if (externalID != -1) {
    generalManager.getIDManager().mapInternalToExternalID(createdObject.getID(),externalID);
  }
  createdObject.setNavigationModes(bEnablePan,bEnableRotate,bEnableZoom);
}","@Override public void doCommand(){
  GLCapabilities glCapabilities=new GLCapabilities(GLProfile.get(GLProfile.GL2));
  glCapabilities.setStencilBits(1);
  createdObject=new GLCaleydoCanvas(glCapabilities);
  ViewManager viewManager=generalManager.getViewGLCanvasManager();
  viewManager.registerGLCanvas(createdObject);
  if (externalID != -1) {
    generalManager.getIDManager().mapInternalToExternalID(createdObject.getID(),externalID);
  }
  createdObject.setNavigationModes(bEnablePan,bEnableRotate,bEnableZoom);
}",0.9805825242718448
58113,"/** 
 * This method has to be called in every display step. It is responsible for the ray tracing which does the actual picking. It needs the ID of the calling view and a gl context. It calls the display() method of the calling view, therefore only elements rendered in the display() can be picked.
 * @param glView a reference to the calling view
 * @param gl the GL2 context
 */
public void handlePicking(final AGLView glView,final GL2 gl){
  if (bEnablePicking == false)   return;
  GLMouseListener glMouseListener=glView.getParentGLCanvas().getGLMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (glMouseListener.wasMouseDoubleClicked()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.DOUBLE_CLICKED;
  }
 else   if (glMouseListener.wasMouseDragged()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (glMouseListener.wasLeftMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (glMouseListener.wasRightMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.RIGHT_CLICKED;
  }
 else   if (glMouseListener.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) != null && hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) == true) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null)   return;
  hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=IntBuffer.allocate(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL2.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL2.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  ViewFrustum viewFrustum=glView.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  glView.display(gl);
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL2.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,ePickingMode,tmpPickPoint,glMouseListener.getPickedPointDragStart());
  }
}","/** 
 * This method has to be called in every display step. It is responsible for the ray tracing which does the actual picking. It needs the ID of the calling view and a gl context. It calls the display() method of the calling view, therefore only elements rendered in the display() can be picked.
 * @param glView a reference to the calling view
 * @param gl the GL2 context
 */
public void handlePicking(final AGLView glView,final GL2 gl){
  if (bEnablePicking == false)   return;
  GLMouseListener glMouseListener=glView.getParentGLCanvas().getGLMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (glMouseListener.wasMouseDoubleClicked()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.DOUBLE_CLICKED;
  }
 else   if (glMouseListener.wasMouseDragged()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (glMouseListener.wasLeftMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (glMouseListener.wasRightMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.RIGHT_CLICKED;
  }
 else   if (glMouseListener.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) != null && hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) == true) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null)   return;
  hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=Buffers.newDirectIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL2.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL2.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  ViewFrustum viewFrustum=glView.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  glView.display(gl);
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL2.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,ePickingMode,tmpPickPoint,glMouseListener.getPickedPointDragStart());
  }
}",0.9945111492281304
58114,"public void init(){
  fpsAnimator=new FPSAnimator(60);
  displayLoopExecution=DisplayLoopExecution.get();
  fpsAnimator.add(displayLoopExecution.getDisplayLoopCanvas());
  displayLoopExecution.executeMultiple(connectedElementRepManager);
}","public void init(){
  fpsAnimator=new FPSAnimator(60);
}",0.3796610169491525
58115,"/** 
 * Constructor.
 */
protected AGLView(GLCaleydoCanvas glCanvas,final ViewFrustum viewFrustum,final boolean bRegisterToParentCanvasNow){
  super(GeneralManager.get().getIDManager().createID(EManagedObjectType.GL_VIEW));
  GeneralManager.get().getViewGLCanvasManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  textRenderer=new CaleydoTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),true,true);
  if (bRegisterToParentCanvasNow && parentGLCanvas != null) {
    glMouseListener=parentGLCanvas.getGLMouseListener();
  }
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(iUniqueID);
  pickingManager=generalManager.getViewGLCanvasManager().getPickingManager();
  idMappingManager=generalManager.getIDMappingManager();
  textureManager=new TextureManager();
  contextMenu=ContextMenu.get();
  queue=new LinkedBlockingQueue<Pair<AEventListener<? extends IListenerOwner>,AEvent>>();
  bShowMagnifyingGlass=false;
}","/** 
 * Constructor.
 */
protected AGLView(GLCaleydoCanvas glCanvas,final ViewFrustum viewFrustum,final boolean bRegisterToParentCanvasNow){
  super(GeneralManager.get().getIDManager().createID(EManagedObjectType.GL_VIEW));
  GeneralManager.get().getViewGLCanvasManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  if (bRegisterToParentCanvasNow && parentGLCanvas != null) {
    glMouseListener=parentGLCanvas.getGLMouseListener();
  }
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(iUniqueID);
  pickingManager=generalManager.getViewGLCanvasManager().getPickingManager();
  idMappingManager=generalManager.getIDMappingManager();
  textureManager=new TextureManager();
  contextMenu=ContextMenu.get();
  queue=new LinkedBlockingQueue<Pair<AEventListener<? extends IListenerOwner>,AEvent>>();
  bShowMagnifyingGlass=false;
}",0.9480156512017888
58116,"void display(GL gl){
  float x, y, width, height;
  long time=Calendar.getInstance().getTimeInMillis();
  float progress=Math.min(((float)(time - startTime)) / animationTime,1);
  x=(endX - beginX) * progress + beginX;
  y=(endY - beginY) * progress + beginY;
  width=(endWidth - beginWidth) * progress + beginWidth;
  height=(endHeight - beginHeight) * progress + beginHeight;
  parentView.displayThumbnailTreemaps(gl);
  beginMainView.getViewFrustum().setTop(parentView.getViewFrustum().getHeight() * (y + height));
  beginMainView.getViewFrustum().setBottom(parentView.getViewFrustum().getHeight() * y);
  beginMainView.getViewFrustum().setLeft(parentView.getViewFrustum().getWidth() * x);
  beginMainView.getViewFrustum().setRight(parentView.getViewFrustum().getWidth() * (x + width));
  beginMainView.setDisplayListDirty();
  beginMainView.display(gl);
  if (direcetion == ZOOM_IN_ANIMATION && progress >= 1 && zoomStage == 0) {
    zoomStage=1;
    parentView.thumbnailTreemapViews=endThumbnails;
    for (    GLTreeMap view : endThumbnails)     view.setDisplayListDirty();
    calcSecondZoomStage();
    progress=0;
    startTime=Calendar.getInstance().getTimeInMillis();
  }
  if (progress >= 1) {
    endAnimation();
    return;
  }
}","void display(GL gl){
  float x, y, width, height;
  long time=Calendar.getInstance().getTimeInMillis();
  float progress=Math.min(((float)(time - startTime)) / animationTime,1);
  x=(endX - beginX) * progress + beginX;
  y=(endY - beginY) * progress + beginY;
  width=(endWidth - beginWidth) * progress + beginWidth;
  height=(endHeight - beginHeight) * progress + beginHeight;
  parentView.displayThumbnailTreemaps(gl);
  if (direcetion == ZOOM_IN_ANIMATION && zoomStage == 1) {
    endMainView.getViewFrustum().setTop(parentView.getViewFrustum().getHeight() * (y + height));
    endMainView.getViewFrustum().setBottom(parentView.getViewFrustum().getHeight() * y);
    endMainView.getViewFrustum().setLeft(parentView.getViewFrustum().getWidth() * x);
    endMainView.getViewFrustum().setRight(parentView.getViewFrustum().getWidth() * (x + width));
    endMainView.setDisplayListDirty();
    endMainView.display(gl);
  }
 else {
    beginMainView.getViewFrustum().setTop(parentView.getViewFrustum().getHeight() * (y + height));
    beginMainView.getViewFrustum().setBottom(parentView.getViewFrustum().getHeight() * y);
    beginMainView.getViewFrustum().setLeft(parentView.getViewFrustum().getWidth() * x);
    beginMainView.getViewFrustum().setRight(parentView.getViewFrustum().getWidth() * (x + width));
    beginMainView.setDisplayListDirty();
    beginMainView.display(gl);
  }
  if (direcetion == ZOOM_IN_ANIMATION && progress >= 1 && zoomStage == 0) {
    zoomStage=1;
    parentView.thumbnailTreemapViews=endThumbnails;
    for (    GLTreeMap view : endThumbnails)     view.setDisplayListDirty();
    calcSecondZoomStage();
    progress=0;
    startTime=Calendar.getInstance().getTimeInMillis();
  }
  if (progress >= 1) {
    endAnimation();
    return;
  }
}",0.5355481727574751
58117,"private void zoomOut(int index){
  if (thumbnailTreemapViews.size() > 0) {
    GLTreeMap beginMainView=mainTreeMapView;
    setMainTreeMapView(thumbnailTreemapViews.get(index));
    for (int i=thumbnailTreemapViews.size() - 1; i > index; i--) {
      thumbnailTreemapViews.get(i).unregisterEventListeners();
      thumbnailTreemapViews.remove(i);
    }
    Vector<GLTreeMap> beginThumbnails=(Vector<GLTreeMap>)thumbnailTreemapViews.clone();
    thumbnailTreemapViews.remove(index);
    mainTreeMapView.setDrawLabel(true);
    mainTreeMapView.setRemotePickingManager(pickingManager,getID());
    animationControle.initAnimation(this,beginMainView,mainTreeMapView,beginThumbnails,thumbnailTreemapViews,AnimationControle.ZOOM_OUT_ANIMATION);
    animationControle.setActive(true);
    setDisplayListDirty();
  }
}","private void zoomOut(int index){
  if (thumbnailTreemapViews.size() > 0) {
    GLTreeMap beginMainView=mainTreeMapView;
    setMainTreeMapView(thumbnailTreemapViews.get(index));
    for (int i=thumbnailTreemapViews.size() - 1; i > index; i--) {
      thumbnailTreemapViews.get(i).unregisterEventListeners();
      thumbnailTreemapViews.remove(i);
    }
    Vector<GLTreeMap> beginThumbnails=(Vector<GLTreeMap>)thumbnailTreemapViews.clone();
    thumbnailTreemapViews.remove(index);
    mainTreeMapView.setDrawLabel(true);
    mainTreeMapView.setRemotePickingManager(pickingManager,getID());
    animationControle.initAnimation(this,beginMainView,mainTreeMapView,beginThumbnails,thumbnailTreemapViews,AnimationControle.ZOOM_OUT_ANIMATION);
    animationControle.setActive(true);
    setDisplayListDirty();
    System.out.println(""String_Node_Str"" + thumbnailTreemapViews.size());
  }
}",0.9563164108618654
58118,"@Override public void initData(){
  set=dataDomain.getSet();
  super.initData();
  bRenderOnlyContext=(glRemoteRenderingView != null && glRemoteRenderingView.getViewType().equals(""String_Node_Str""));
  initLists();
}","@Override public void initData(){
  if (set == null)   set=dataDomain.getSet();
  super.initData();
  bRenderOnlyContext=(glRemoteRenderingView != null && glRemoteRenderingView.getViewType().equals(""String_Node_Str""));
  initLists();
}",0.9578713968957872
58119,"private GLHeatMap createHeatMap(GL gl,GLMouseListener glMouseListener){
  ViewFrustum viewFrustum=new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,50,0,50,-20,20);
  GLHeatMap heatMap=new GLHeatMap(parentView.getParentGLCanvas(),viewFrustum);
  heatMap.setRemoteRenderingGLView(parentView);
  heatMap.setDataDomain(dataDomain);
  heatMap.setContentVAType(GLHeatMap.CONTENT_EMBEDDED_VA);
  if (layout instanceof HeatMapLayoutDetailViewRight)   heatMap.setRenderTemplate(new ComparerDetailTemplate(false));
 else   heatMap.setRenderTemplate(new ComparerDetailTemplate(true));
  heatMap.initData();
  heatMap.setDetailLevel(DetailLevel.MEDIUM);
  heatMap.initRemote(gl,glParentView,glMouseListener,infoAreaManager);
  heatMap.setSendClearSelectionsEvent(true);
  heatMap.useFishEye(false);
  return heatMap;
}","private GLHeatMap createHeatMap(GL gl,GLMouseListener glMouseListener){
  ViewFrustum viewFrustum=new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,50,0,50,-20,20);
  GLHeatMap heatMap=new GLHeatMap(parentView.getParentGLCanvas(),viewFrustum);
  heatMap.setRemoteRenderingGLView(parentView);
  heatMap.setDataDomain(dataDomain);
  heatMap.setContentVAType(GLHeatMap.CONTENT_EMBEDDED_VA);
  if (layout instanceof HeatMapLayoutDetailViewRight)   heatMap.setRenderTemplate(new ComparerDetailTemplate(false));
 else   heatMap.setRenderTemplate(new ComparerDetailTemplate(true));
  heatMap.setSet(set);
  heatMap.initData();
  heatMap.setDetailLevel(DetailLevel.MEDIUM);
  heatMap.initRemote(gl,glParentView,glMouseListener,infoAreaManager);
  heatMap.setSendClearSelectionsEvent(true);
  heatMap.useFishEye(false);
  return heatMap;
}",0.9859841560024376
58120,"private void addGeneContextMenu(){
  final Menu menu=new Menu(geneTable.getShell(),SWT.POP_UP);
  geneTable.setMenu(menu);
  menu.addListener(SWT.Show,new Listener(){
    @Override public void handleEvent(    Event event){
      MenuItem[] menuItems=menu.getItems();
      for (int i=0; i < menuItems.length; i++) {
        menuItems[i].dispose();
      }
      for (      final TableItem tableItem : geneTable.getSelection()) {
        if (tableItem.getText(0).equals(""String_Node_Str"")) {
          MenuItem openInBrowserMenuItem=new MenuItem(menu,SWT.PUSH);
          openInBrowserMenuItem.setText(""String_Node_Str"");
          openInBrowserMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          openInBrowserMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.selectGeneSystemWide(dataDomain.getContentIDType(),(Integer)tableItem.getData());
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
          }
);
          MenuItem loadPathwayInBucketMenuItem=new MenuItem(menu,SWT.PUSH);
          loadPathwayInBucketMenuItem.setText(""String_Node_Str"");
          loadPathwayInBucketMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          loadPathwayInBucketMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.loadPathwayByGene((Integer)tableItem.getData());
            }
          }
);
          MenuItem loadGeneInHeatMapMenuItem=new MenuItem(menu,SWT.PUSH);
          loadGeneInHeatMapMenuItem.setText(""String_Node_Str"");
          loadGeneInHeatMapMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          loadGeneInHeatMapMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.selectGeneSystemWide(dataDomain.getContentIDType(),(Integer)tableItem.getData());
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
          }
);
          MenuItem loadGeneInParallelCoordinatesMenuItem=new MenuItem(menu,SWT.PUSH);
          loadGeneInParallelCoordinatesMenuItem.setText(""String_Node_Str"");
          loadGeneInParallelCoordinatesMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          loadGeneInParallelCoordinatesMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.selectGeneSystemWide(dataDomain.getContentIDType(),(Integer)tableItem.getData());
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
          }
);
        }
 else {
          MenuItem openInBrowserMenuItem=new MenuItem(menu,SWT.PUSH);
          openInBrowserMenuItem.setText(""String_Node_Str"");
        }
      }
    }
  }
);
}","private void addGeneContextMenu(){
  final Menu menu=new Menu(geneTable.getShell(),SWT.POP_UP);
  geneTable.setMenu(menu);
  menu.addListener(SWT.Show,new Listener(){
    @Override public void handleEvent(    Event event){
      MenuItem[] menuItems=menu.getItems();
      for (int i=0; i < menuItems.length; i++) {
        menuItems[i].dispose();
      }
      for (      final TableItem tableItem : geneTable.getSelection()) {
        if (tableItem.getText(0).equals(""String_Node_Str"")) {
          MenuItem openInBrowserMenuItem=new MenuItem(menu,SWT.PUSH);
          openInBrowserMenuItem.setText(""String_Node_Str"");
          openInBrowserMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          openInBrowserMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.selectGeneSystemWide(dataDomain.getPrimaryContentMappingType(),(Integer)tableItem.getData());
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
          }
);
          MenuItem loadPathwayInBucketMenuItem=new MenuItem(menu,SWT.PUSH);
          loadPathwayInBucketMenuItem.setText(""String_Node_Str"");
          loadPathwayInBucketMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          loadPathwayInBucketMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.loadPathwayByGene((Integer)tableItem.getData());
            }
          }
);
          MenuItem loadGeneInHeatMapMenuItem=new MenuItem(menu,SWT.PUSH);
          loadGeneInHeatMapMenuItem.setText(""String_Node_Str"");
          loadGeneInHeatMapMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          loadGeneInHeatMapMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.selectGeneSystemWide(dataDomain.getPrimaryContentMappingType(),(Integer)tableItem.getData());
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
          }
);
          MenuItem loadGeneInParallelCoordinatesMenuItem=new MenuItem(menu,SWT.PUSH);
          loadGeneInParallelCoordinatesMenuItem.setText(""String_Node_Str"");
          loadGeneInParallelCoordinatesMenuItem.setImage(generalManager.getResourceLoader().getImage(geneTable.getDisplay(),""String_Node_Str""));
          loadGeneInParallelCoordinatesMenuItem.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              searchViewMediator.selectGeneSystemWide(dataDomain.getPrimaryContentMappingType(),(Integer)tableItem.getData());
              try {
                PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
          }
);
        }
 else {
          MenuItem openInBrowserMenuItem=new MenuItem(menu,SWT.PUSH);
          openInBrowserMenuItem.setText(""String_Node_Str"");
        }
      }
    }
  }
);
}",0.9936
58121,"public void selectGeneSystemWide(IDType contentIDType,int davidID){
  ClearSelectionsEvent clearSelectionsEvent=new ClearSelectionsEvent();
  clearSelectionsEvent.setSender(this);
  eventPublisher.triggerEvent(clearSelectionsEvent);
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSender(this);
  ISelectionDelta delta=new SelectionDelta(contentIDType);
  Set<Integer> setExpIndex=GeneralManager.get().getIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),contentIDType,davidID);
  for (  Integer expressionIndex : setExpIndex) {
    delta.addSelection(expressionIndex,SelectionType.SELECTION);
  }
  selectionUpdateEvent.setSelectionDelta((SelectionDelta)delta);
  eventPublisher.triggerEvent(selectionUpdateEvent);
}","public void selectGeneSystemWide(IDType contentIDType,int davidID){
  ClearSelectionsEvent clearSelectionsEvent=new ClearSelectionsEvent();
  clearSelectionsEvent.setSender(this);
  eventPublisher.triggerEvent(clearSelectionsEvent);
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSender(this);
  ISelectionDelta delta=new SelectionDelta(contentIDType);
  delta.addSelection(davidID,SelectionType.SELECTION);
  selectionUpdateEvent.setSelectionDelta((SelectionDelta)delta);
  eventPublisher.triggerEvent(selectionUpdateEvent);
}",0.7964731814842028
58122,"/** 
 * Loads the project from a specified zip-archive.
 * @param fileName name of the file to load the project from
 * @return initialization data for the application from which it can restore itself
 */
public DataInitializationData load(String fileName){
  ZipUtils zipUtils=new ZipUtils();
  zipUtils.unzipToDirectory(fileName,TEMP_PROJECT_DIR_NAME);
  DataInitializationData initData=loadDirectory(TEMP_PROJECT_DIR_NAME);
  return initData;
}","/** 
 * Loads the project from a specified zip-archive.
 * @param fileName name of the file to load the project from
 * @return initialization data for the application from which it can restore itself
 */
public DataInitializationData load(String fileName){
  FileOperations.deleteDirectory(TEMP_PROJECT_DIR_NAME);
  ZipUtils zipUtils=new ZipUtils();
  zipUtils.unzipToDirectory(fileName,TEMP_PROJECT_DIR_NAME);
  DataInitializationData initData=loadDirectory(TEMP_PROJECT_DIR_NAME);
  return initData;
}",0.7423764458464774
58123,"/** 
 * Retrieves the singleton reference of this class. If no singleton exists yet, it will be created.
 * @return
 */
public static DisplayLoopExecution get(){
  if (displayLoopExecution == null) {
    displayLoopExecution=new DisplayLoopExecution();
    GLCapabilities glCapabilities=new GLCapabilities();
    glCapabilities.setStencilBits(1);
    displayLoopExecution.displayLoopCanvas=new GLCanvas(new GLCapabilities());
    displayLoopExecution.displayLoopCanvas.addGLEventListener(displayLoopExecution);
    displayLoopExecution.displayLoopShell=new Shell(Display.getDefault(),SWT.EMBEDDED | SWT.NO_TRIM | SWT.ON_TOP);
    Region region=new Region();
    displayLoopExecution.displayLoopShell.setRegion(region);
    Frame frame=SWT_AWT.new_Frame(displayLoopExecution.displayLoopShell);
    frame.add(displayLoopExecution.displayLoopCanvas);
  }
  return displayLoopExecution;
}","/** 
 * Retrieves the singleton reference of this class. If no singleton exists yet, it will be created.
 * @return
 */
public static DisplayLoopExecution get(){
  if (displayLoopExecution == null) {
    displayLoopExecution=new DisplayLoopExecution();
    GLCapabilities glCapabilities=new GLCapabilities();
    glCapabilities.setStencilBits(1);
    displayLoopExecution.displayLoopCanvas=new GLCanvas(new GLCapabilities());
    displayLoopExecution.displayLoopCanvas.addGLEventListener(displayLoopExecution);
    displayLoopExecution.displayLoopShell=new Shell(Display.getDefault(),SWT.EMBEDDED | SWT.NO_TRIM | SWT.ON_TOP);
    displayLoopExecution.displayLoopShell.setSize(1,1);
    displayLoopExecution.displayLoopShell.open();
    Region region=new Region();
    displayLoopExecution.displayLoopShell.setRegion(region);
    Frame frame=SWT_AWT.new_Frame(displayLoopExecution.displayLoopShell);
    frame.add(displayLoopExecution.displayLoopCanvas);
  }
  return displayLoopExecution;
}",0.943436499466382
58124,"@Override public void setContentVA(String vaType,ContentVirtualArray virtualArray){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null)   contentData=createContentData(vaType);
 else   contentData.reset();
  contentData.setContentVA(virtualArray);
  if (vaType == CONTENT)   defaultContentData=contentData;
  hashContentData.put(vaType,contentData);
}","@Override public void setContentVA(String vaType,ContentVirtualArray virtualArray){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null)   contentData=createContentData(vaType);
 else   contentData.reset();
  contentData.setContentVA(virtualArray);
  hashContentData.put(vaType,contentData);
}",0.8620199146514936
58125,"@Override public void widgetSelected(SelectionEvent e){
  applyFilter();
}","@Override public void widgetSelected(SelectionEvent e){
  isDirty=true;
}",0.8707482993197279
58126,"public void create(){
  super.create();
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      ((Shell)parentComposite).setText(TITLE);
      Composite infoComposite=new Composite(parentComposite,SWT.NULL);
      GridData gridData=new GridData();
      infoComposite.setLayoutData(gridData);
      infoComposite.setLayout(new GridLayout(4,false));
      final Label foldChangeLabel=new Label(infoComposite,SWT.NULL);
      foldChangeLabel.setText(""String_Node_Str"");
      final Text foldChangeInputField=new Text(infoComposite,SWT.SINGLE);
      final Slider foldChangeSlider=new Slider(infoComposite,SWT.HORIZONTAL);
      foldChangeInputField.setEditable(true);
      foldChangeInputField.setText(Float.toString(foldChange));
      foldChangeInputField.addKeyListener(new KeyAdapter(){
        @Override public void keyPressed(        KeyEvent e){
          String enteredValue=foldChangeInputField.getText();
          if (enteredValue != null && !enteredValue.isEmpty()) {
            foldChange=new Float(enteredValue);
            foldChangeSlider.setSelection((int)(foldChange * 10));
            isDirty=true;
          }
        }
      }
);
      final Button applyFilterButton=new Button(infoComposite,SWT.PUSH);
      applyFilterButton.setText(""String_Node_Str"");
      applyFilterButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          applyFilter();
        }
      }
);
      evaluatorCheckBox=new Button[3];
      evaluatorCheckBox[0]=new Button(parentComposite,SWT.CHECK);
      evaluatorCheckBox[0].setSelection(true);
      evaluatorCheckBox[0].setText(""String_Node_Str"");
      evaluatorCheckBox[1]=new Button(parentComposite,SWT.CHECK);
      evaluatorCheckBox[1].setText(""String_Node_Str"");
      foldChangeSlider.setMinimum(0);
      foldChangeSlider.setMaximum(100);
      foldChangeSlider.setIncrement(1);
      foldChangeSlider.setPageIncrement(10);
      foldChangeSlider.setSelection((int)(foldChange * 10));
      foldChangeSlider.addMouseListener(new MouseAdapter(){
        @Override public void mouseUp(        MouseEvent e){
          foldChange=foldChangeSlider.getSelection() / 10f;
          foldChangeInputField.setText(""String_Node_Str"" + foldChange);
          isDirty=true;
        }
      }
);
      ;
      set1.getStatisticsResult().getFoldChangeResult(set2).getFirst();
      Composite histoComposite=new Composite(parentComposite,SWT.NULL);
      histoComposite.setLayout(new FillLayout(SWT.VERTICAL));
      gridData=new GridData();
      gridData.heightHint=300;
      gridData.widthHint=500;
      histoComposite.setLayoutData(gridData);
      RcpBasicGLHistogramView histogramView=new RcpBasicGLHistogramView();
      histogramView.setDataDomain(DataDomainManager.get().getDataDomain(""String_Node_Str""));
      histogramView.createDefaultSerializedView();
      histogramView.createPartControl(histoComposite);
      ((GLHistogram)(histogramView.getGLView())).setHistogram(histogram);
      GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
    }
  }
);
  addOKCancel();
}","public void create(){
  super.create();
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      ((Shell)parentComposite).setText(TITLE);
      Composite infoComposite=new Composite(parentComposite,SWT.NULL);
      GridData gridData=new GridData();
      infoComposite.setLayoutData(gridData);
      infoComposite.setLayout(new GridLayout(4,false));
      final Label foldChangeLabel=new Label(infoComposite,SWT.NULL);
      foldChangeLabel.setText(""String_Node_Str"");
      final Text foldChangeInputField=new Text(infoComposite,SWT.SINGLE);
      final Slider foldChangeSlider=new Slider(infoComposite,SWT.HORIZONTAL);
      foldChangeInputField.setEditable(true);
      foldChangeInputField.setText(Float.toString(foldChange));
      foldChangeInputField.addKeyListener(new KeyAdapter(){
        @Override public void keyPressed(        KeyEvent e){
          String enteredValue=foldChangeInputField.getText();
          if (enteredValue != null && !enteredValue.isEmpty()) {
            foldChange=new Float(enteredValue);
            foldChangeSlider.setSelection((int)(foldChange * 10));
            isDirty=true;
          }
        }
      }
);
      final Button applyFilterButton=new Button(infoComposite,SWT.PUSH);
      applyFilterButton.setText(""String_Node_Str"");
      applyFilterButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          applyFilter();
        }
      }
);
      evaluatorCheckBox=new Button[3];
      evaluatorCheckBox[0]=new Button(parentComposite,SWT.CHECK);
      evaluatorCheckBox[0].setSelection(true);
      evaluatorCheckBox[0].setText(""String_Node_Str"");
      evaluatorCheckBox[1]=new Button(parentComposite,SWT.CHECK);
      evaluatorCheckBox[1].setText(""String_Node_Str"");
      evaluatorCheckBox[0].addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          isDirty=true;
        }
      }
);
      evaluatorCheckBox[1].addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          isDirty=true;
        }
      }
);
      foldChangeSlider.setMinimum(0);
      foldChangeSlider.setMaximum(100);
      foldChangeSlider.setIncrement(1);
      foldChangeSlider.setPageIncrement(10);
      foldChangeSlider.setSelection((int)(foldChange * 10));
      foldChangeSlider.addMouseListener(new MouseAdapter(){
        @Override public void mouseUp(        MouseEvent e){
          foldChange=foldChangeSlider.getSelection() / 10f;
          foldChangeInputField.setText(""String_Node_Str"" + foldChange);
          isDirty=true;
        }
      }
);
      ;
      set1.getStatisticsResult().getFoldChangeResult(set2).getFirst();
      Composite histoComposite=new Composite(parentComposite,SWT.NULL);
      histoComposite.setLayout(new FillLayout(SWT.VERTICAL));
      gridData=new GridData();
      gridData.heightHint=300;
      gridData.widthHint=500;
      histoComposite.setLayoutData(gridData);
      RcpBasicGLHistogramView histogramView=new RcpBasicGLHistogramView();
      histogramView.setDataDomain(DataDomainManager.get().getDataDomain(""String_Node_Str""));
      histogramView.createDefaultSerializedView();
      histogramView.createPartControl(histoComposite);
      ((GLHistogram)(histogramView.getGLView())).setHistogram(histogram);
      GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
    }
  }
);
  addOKCancel();
}",0.944
58127,"@Override public void run(){
  ((Shell)parentComposite).setText(TITLE);
  Composite infoComposite=new Composite(parentComposite,SWT.NULL);
  GridData gridData=new GridData();
  infoComposite.setLayoutData(gridData);
  infoComposite.setLayout(new GridLayout(4,false));
  final Label foldChangeLabel=new Label(infoComposite,SWT.NULL);
  foldChangeLabel.setText(""String_Node_Str"");
  final Text foldChangeInputField=new Text(infoComposite,SWT.SINGLE);
  final Slider foldChangeSlider=new Slider(infoComposite,SWT.HORIZONTAL);
  foldChangeInputField.setEditable(true);
  foldChangeInputField.setText(Float.toString(foldChange));
  foldChangeInputField.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      String enteredValue=foldChangeInputField.getText();
      if (enteredValue != null && !enteredValue.isEmpty()) {
        foldChange=new Float(enteredValue);
        foldChangeSlider.setSelection((int)(foldChange * 10));
        isDirty=true;
      }
    }
  }
);
  final Button applyFilterButton=new Button(infoComposite,SWT.PUSH);
  applyFilterButton.setText(""String_Node_Str"");
  applyFilterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      applyFilter();
    }
  }
);
  evaluatorCheckBox=new Button[3];
  evaluatorCheckBox[0]=new Button(parentComposite,SWT.CHECK);
  evaluatorCheckBox[0].setSelection(true);
  evaluatorCheckBox[0].setText(""String_Node_Str"");
  evaluatorCheckBox[1]=new Button(parentComposite,SWT.CHECK);
  evaluatorCheckBox[1].setText(""String_Node_Str"");
  foldChangeSlider.setMinimum(0);
  foldChangeSlider.setMaximum(100);
  foldChangeSlider.setIncrement(1);
  foldChangeSlider.setPageIncrement(10);
  foldChangeSlider.setSelection((int)(foldChange * 10));
  foldChangeSlider.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      foldChange=foldChangeSlider.getSelection() / 10f;
      foldChangeInputField.setText(""String_Node_Str"" + foldChange);
      isDirty=true;
    }
  }
);
  ;
  set1.getStatisticsResult().getFoldChangeResult(set2).getFirst();
  Composite histoComposite=new Composite(parentComposite,SWT.NULL);
  histoComposite.setLayout(new FillLayout(SWT.VERTICAL));
  gridData=new GridData();
  gridData.heightHint=300;
  gridData.widthHint=500;
  histoComposite.setLayoutData(gridData);
  RcpBasicGLHistogramView histogramView=new RcpBasicGLHistogramView();
  histogramView.setDataDomain(DataDomainManager.get().getDataDomain(""String_Node_Str""));
  histogramView.createDefaultSerializedView();
  histogramView.createPartControl(histoComposite);
  ((GLHistogram)(histogramView.getGLView())).setHistogram(histogram);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
}","@Override public void run(){
  ((Shell)parentComposite).setText(TITLE);
  Composite infoComposite=new Composite(parentComposite,SWT.NULL);
  GridData gridData=new GridData();
  infoComposite.setLayoutData(gridData);
  infoComposite.setLayout(new GridLayout(4,false));
  final Label foldChangeLabel=new Label(infoComposite,SWT.NULL);
  foldChangeLabel.setText(""String_Node_Str"");
  final Text foldChangeInputField=new Text(infoComposite,SWT.SINGLE);
  final Slider foldChangeSlider=new Slider(infoComposite,SWT.HORIZONTAL);
  foldChangeInputField.setEditable(true);
  foldChangeInputField.setText(Float.toString(foldChange));
  foldChangeInputField.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      String enteredValue=foldChangeInputField.getText();
      if (enteredValue != null && !enteredValue.isEmpty()) {
        foldChange=new Float(enteredValue);
        foldChangeSlider.setSelection((int)(foldChange * 10));
        isDirty=true;
      }
    }
  }
);
  final Button applyFilterButton=new Button(infoComposite,SWT.PUSH);
  applyFilterButton.setText(""String_Node_Str"");
  applyFilterButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      applyFilter();
    }
  }
);
  evaluatorCheckBox=new Button[3];
  evaluatorCheckBox[0]=new Button(parentComposite,SWT.CHECK);
  evaluatorCheckBox[0].setSelection(true);
  evaluatorCheckBox[0].setText(""String_Node_Str"");
  evaluatorCheckBox[1]=new Button(parentComposite,SWT.CHECK);
  evaluatorCheckBox[1].setText(""String_Node_Str"");
  evaluatorCheckBox[0].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isDirty=true;
    }
  }
);
  evaluatorCheckBox[1].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isDirty=true;
    }
  }
);
  foldChangeSlider.setMinimum(0);
  foldChangeSlider.setMaximum(100);
  foldChangeSlider.setIncrement(1);
  foldChangeSlider.setPageIncrement(10);
  foldChangeSlider.setSelection((int)(foldChange * 10));
  foldChangeSlider.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      foldChange=foldChangeSlider.getSelection() / 10f;
      foldChangeInputField.setText(""String_Node_Str"" + foldChange);
      isDirty=true;
    }
  }
);
  ;
  set1.getStatisticsResult().getFoldChangeResult(set2).getFirst();
  Composite histoComposite=new Composite(parentComposite,SWT.NULL);
  histoComposite.setLayout(new FillLayout(SWT.VERTICAL));
  gridData=new GridData();
  gridData.heightHint=300;
  gridData.widthHint=500;
  histoComposite.setLayoutData(gridData);
  RcpBasicGLHistogramView histogramView=new RcpBasicGLHistogramView();
  histogramView.setDataDomain(DataDomainManager.get().getDataDomain(""String_Node_Str""));
  histogramView.createDefaultSerializedView();
  histogramView.createPartControl(histoComposite);
  ((GLHistogram)(histogramView.getGLView())).setHistogram(histogram);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
}",0.9445564516129032
58128,"/** 
 * Removes a element form a particular selection type and puts it into the normal type. Can not be called on the normal type. Nothing happens if the element is not contained in the type
 * @param selectionType
 * @param elementID
 * @throws IllegalArgumentException if called with the normal type, REMOVE or ADD
 */
public void removeFromType(SelectionType selectionType,int elementID){
  if (selectionType == SelectionType.NORMAL)   throw new IllegalArgumentException(""String_Node_Str"");
  if (hashSelectionTypes.get(selectionType).containsKey(elementID)) {
    if (!deltaBlackList.containsKey(selectionType))     selectionDelta.removeSelection(elementID,selectionType);
  }
}","/** 
 * Removes a element form a particular selection type and puts it into the normal type. Can not be called on the normal type. Nothing happens if the element is not contained in the type
 * @param selectionType
 * @param elementID
 * @throws IllegalArgumentException if called with the normal type, REMOVE or ADD
 */
public void removeFromType(SelectionType selectionType,int elementID){
  if (selectionType == SelectionType.NORMAL)   throw new IllegalArgumentException(""String_Node_Str"");
  if (hashSelectionTypes.get(selectionType).containsKey(elementID)) {
    hashSelectionTypes.get(selectionType).remove(elementID);
    if (!deltaBlackList.containsKey(selectionType))     selectionDelta.removeSelection(elementID,selectionType);
  }
}",0.9571929824561404
58129,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case GROUPER_GROUP_SELECTION:
    final GroupRepresentation groupRep=hashGroups.get(iExternalID);
switch (pickingMode) {
case CLICKED:
    iDraggedOverCollapseButtonID=-1;
  if (groupRep != null) {
    if (!bControlPressed && !selectionManager.checkStatus(SelectionType.SELECTION,groupRep.getID())) {
      dragAndDropController.clearDraggables();
      selectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.clearSelection(selectionTypeClicked);
    }
    if (!bControlPressed) {
      potentialNewSelectedGroup=groupRep;
      bPotentialNewSelection=true;
    }
    dragAndDropController.setDraggingStartPosition(pick.getPickedPoint());
    groupRep.addAsDraggable(dragAndDropController);
    groupRep.setSelectionTypeRec(SelectionType.SELECTION,selectionManager);
    selectionManager.addToType(selectionTypeClicked,groupRep.getID());
    rootGroup.updateSelections(selectionManager,drawingStrategyManager);
    triggerSelectionEvents();
    setDisplayListDirty();
  }
break;
case DRAGGED:
iDraggedOverCollapseButtonID=-1;
if (groupRep != null && dragAndDropController.hasDraggables()) {
if (!dragAndDropController.isDragging()) {
if (dragAndDropController.containsDraggable(groupRep)) {
  bPotentialNewSelection=false;
  dragAndDropController.startDragging();
}
}
if (groupRep.isLeaf()) {
GroupRepresentation parent=(GroupRepresentation)groupRep.getParent();
if (parent != null) dragAndDropController.setDropArea(parent);
}
 else {
dragAndDropController.setDropArea(groupRep);
}
}
break;
case MOUSE_OVER:
iDraggedOverCollapseButtonID=-1;
if (groupRep != null) {
if (selectionManager.checkStatus(SelectionType.MOUSE_OVER,groupRep.getID()) || selectionManager.checkStatus(SelectionType.SELECTION,groupRep.getID())) {
return;
}
selectionManager.clearSelection(SelectionType.MOUSE_OVER);
selectionManager.addToType(SelectionType.MOUSE_OVER,groupRep.getID());
rootGroup.updateSelections(selectionManager,drawingStrategyManager);
triggerSelectionEvents();
setDisplayListDirty();
}
break;
case RIGHT_CLICKED:
if (groupRep != null) {
boolean bContextMenueItemsAvailable=false;
if (selectionManager.checkStatus(SelectionType.SELECTION,groupRep.getID()) && groupRep != rootGroup) {
RenameGroupItem renameItem=new RenameGroupItem(iExternalID);
contextMenu.addContextMenueItem(renameItem);
Set<Integer> setSelectedGroups=new HashSet<Integer>(selectionManager.getElements(SelectionType.SELECTION));
CreateGroupItem createGroupItem=new CreateGroupItem(setSelectedGroups);
contextMenu.addContextMenueItem(createGroupItem);
CopyGroupsItem copyGroupsItem=new CopyGroupsItem(setSelectedGroups);
contextMenu.addContextMenueItem(copyGroupsItem);
DeleteGroupsItem deleteGroupsItem=new DeleteGroupsItem(setSelectedGroups);
contextMenu.addContextMenueItem(deleteGroupsItem);
Set<Integer> setClickedGroups=new HashSet<Integer>(selectionManager.getElements(selectionTypeClicked));
ArrayList<ICompositeGraphic> orderedComposites=getOrderedCompositeList(setClickedGroups,false);
ArrayList<ISet> selectedSets=new ArrayList<ISet>();
for (ICompositeGraphic composite : orderedComposites) {
selectedSets.add(((GroupRepresentation)composite).getClusterNode().getMetaSet());
}
if (Platform.getBundle(""String_Node_Str"") != null) {
contextMenu.addSeparator();
GeneralManager.get().getRStatisticsPerformer();
StatisticsPValueReductionItem pValueReductionItem=new StatisticsPValueReductionItem(selectedSets);
contextMenu.addContextMenueItem(pValueReductionItem);
if (orderedComposites.size() == 2) {
StatisticsFoldChangeReductionItem foldChangeReductionItem=new StatisticsFoldChangeReductionItem(selectedSets.get(0),selectedSets.get(1));
contextMenu.addContextMenueItem(foldChangeReductionItem);
StatisticsTwoSidedTTestReductionItem twoSidedTTestReductionItem=new StatisticsTwoSidedTTestReductionItem(selectedSets);
contextMenu.addContextMenueItem(twoSidedTTestReductionItem);
}
}
if (orderedComposites.size() >= 2) {
contextMenu.addSeparator();
CompareGroupsItem compareGroupsItem=new CompareGroupsItem(selectedSets);
contextMenu.addContextMenueItem(compareGroupsItem);
}
bContextMenueItemsAvailable=true;
}
if (setCopiedGroups != null && !setCopiedGroups.contains(groupRep.getID()) && !groupRep.isLeaf()) {
PasteGroupsItem pasteGroupItem=new PasteGroupsItem(groupRep.getID());
contextMenu.addContextMenueItem(pasteGroupItem);
bContextMenueItemsAvailable=true;
}
if (!isRenderedRemote() && bContextMenueItemsAvailable) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
}
break;
default :
return;
}
break;
case GROUPER_BACKGROUND_SELECTION:
switch (pickingMode) {
case CLICKED:
iDraggedOverCollapseButtonID=-1;
dragAndDropController.clearDraggables();
selectionManager.clearSelections();
rootGroup.updateSelections(selectionManager,drawingStrategyManager);
triggerSelectionEvents();
setDisplayListDirty();
break;
default :
return;
}
break;
case GROUPER_COLLAPSE_BUTTON_SELECTION:
GroupRepresentation group=hashGroups.get(iExternalID);
switch (pickingMode) {
case CLICKED:
iDraggedOverCollapseButtonID=-1;
if (group != null) {
group.setCollapsed(!group.isCollapsed());
setDisplayListDirty();
}
break;
case DRAGGED:
if (group != null && group.isCollapsed()) {
double dCurrentTimeStamp=Calendar.getInstance().getTimeInMillis();
if (dCurrentTimeStamp - dCollapseButtonDragOverTime > 500 && group.getID() == iDraggedOverCollapseButtonID) {
group.setCollapsed(false);
iDraggedOverCollapseButtonID=-1;
setDisplayListDirty();
return;
}
if (group.getID() != iDraggedOverCollapseButtonID) dCollapseButtonDragOverTime=dCurrentTimeStamp;
iDraggedOverCollapseButtonID=group.getID();
}
default :
return;
}
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case GROUPER_GROUP_SELECTION:
    final GroupRepresentation groupRep=hashGroups.get(iExternalID);
switch (pickingMode) {
case CLICKED:
    iDraggedOverCollapseButtonID=-1;
  if (groupRep != null) {
    if (!bControlPressed && !selectionManager.checkStatus(SelectionType.SELECTION,groupRep.getID())) {
      dragAndDropController.clearDraggables();
      selectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.clearSelection(selectionTypeClicked);
    }
    if (!bControlPressed) {
      potentialNewSelectedGroup=groupRep;
      bPotentialNewSelection=true;
    }
    dragAndDropController.setDraggingStartPosition(pick.getPickedPoint());
    groupRep.addAsDraggable(dragAndDropController);
    groupRep.setSelectionTypeRec(SelectionType.SELECTION,selectionManager);
    selectionManager.addToType(selectionTypeClicked,groupRep.getID());
    if (groupRep.isLeaf())     rootGroup.updateSelections(selectionManager,drawingStrategyManager);
    triggerSelectionEvents();
    setDisplayListDirty();
  }
break;
case DRAGGED:
iDraggedOverCollapseButtonID=-1;
if (groupRep != null && dragAndDropController.hasDraggables()) {
if (!dragAndDropController.isDragging()) {
if (dragAndDropController.containsDraggable(groupRep)) {
  bPotentialNewSelection=false;
  dragAndDropController.startDragging();
}
}
if (groupRep.isLeaf()) {
GroupRepresentation parent=(GroupRepresentation)groupRep.getParent();
if (parent != null) dragAndDropController.setDropArea(parent);
}
 else {
dragAndDropController.setDropArea(groupRep);
}
}
break;
case MOUSE_OVER:
iDraggedOverCollapseButtonID=-1;
if (groupRep != null) {
if (selectionManager.checkStatus(SelectionType.MOUSE_OVER,groupRep.getID()) || selectionManager.checkStatus(SelectionType.SELECTION,groupRep.getID())) {
return;
}
selectionManager.clearSelection(SelectionType.MOUSE_OVER);
selectionManager.addToType(SelectionType.MOUSE_OVER,groupRep.getID());
rootGroup.updateSelections(selectionManager,drawingStrategyManager);
triggerSelectionEvents();
setDisplayListDirty();
}
break;
case RIGHT_CLICKED:
if (groupRep != null) {
boolean bContextMenueItemsAvailable=false;
if (selectionManager.checkStatus(SelectionType.SELECTION,groupRep.getID()) && groupRep != rootGroup) {
RenameGroupItem renameItem=new RenameGroupItem(iExternalID);
contextMenu.addContextMenueItem(renameItem);
Set<Integer> setSelectedGroups=new HashSet<Integer>(selectionManager.getElements(SelectionType.SELECTION));
CreateGroupItem createGroupItem=new CreateGroupItem(setSelectedGroups);
contextMenu.addContextMenueItem(createGroupItem);
CopyGroupsItem copyGroupsItem=new CopyGroupsItem(setSelectedGroups);
contextMenu.addContextMenueItem(copyGroupsItem);
DeleteGroupsItem deleteGroupsItem=new DeleteGroupsItem(setSelectedGroups);
contextMenu.addContextMenueItem(deleteGroupsItem);
Set<Integer> setClickedGroups=new HashSet<Integer>(selectionManager.getElements(selectionTypeClicked));
ArrayList<ICompositeGraphic> orderedComposites=getOrderedCompositeList(setClickedGroups,false);
ArrayList<ISet> selectedSets=new ArrayList<ISet>();
for (ICompositeGraphic composite : orderedComposites) {
selectedSets.add(((GroupRepresentation)composite).getClusterNode().getMetaSet());
}
if (Platform.getBundle(""String_Node_Str"") != null) {
contextMenu.addSeparator();
GeneralManager.get().getRStatisticsPerformer();
StatisticsPValueReductionItem pValueReductionItem=new StatisticsPValueReductionItem(selectedSets);
contextMenu.addContextMenueItem(pValueReductionItem);
if (orderedComposites.size() == 2) {
StatisticsFoldChangeReductionItem foldChangeReductionItem=new StatisticsFoldChangeReductionItem(selectedSets.get(0),selectedSets.get(1));
contextMenu.addContextMenueItem(foldChangeReductionItem);
StatisticsTwoSidedTTestReductionItem twoSidedTTestReductionItem=new StatisticsTwoSidedTTestReductionItem(selectedSets);
contextMenu.addContextMenueItem(twoSidedTTestReductionItem);
}
}
if (orderedComposites.size() >= 2) {
contextMenu.addSeparator();
CompareGroupsItem compareGroupsItem=new CompareGroupsItem(selectedSets);
contextMenu.addContextMenueItem(compareGroupsItem);
}
bContextMenueItemsAvailable=true;
}
if (setCopiedGroups != null && !setCopiedGroups.contains(groupRep.getID()) && !groupRep.isLeaf()) {
PasteGroupsItem pasteGroupItem=new PasteGroupsItem(groupRep.getID());
contextMenu.addContextMenueItem(pasteGroupItem);
bContextMenueItemsAvailable=true;
}
if (!isRenderedRemote() && bContextMenueItemsAvailable) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
}
break;
default :
return;
}
break;
case GROUPER_BACKGROUND_SELECTION:
switch (pickingMode) {
case CLICKED:
iDraggedOverCollapseButtonID=-1;
dragAndDropController.clearDraggables();
selectionManager.clearSelections();
rootGroup.updateSelections(selectionManager,drawingStrategyManager);
triggerSelectionEvents();
setDisplayListDirty();
break;
default :
return;
}
break;
case GROUPER_COLLAPSE_BUTTON_SELECTION:
GroupRepresentation group=hashGroups.get(iExternalID);
switch (pickingMode) {
case CLICKED:
iDraggedOverCollapseButtonID=-1;
if (group != null) {
group.setCollapsed(!group.isCollapsed());
setDisplayListDirty();
}
break;
case DRAGGED:
if (group != null && group.isCollapsed()) {
double dCurrentTimeStamp=Calendar.getInstance().getTimeInMillis();
if (dCurrentTimeStamp - dCollapseButtonDragOverTime > 500 && group.getID() == iDraggedOverCollapseButtonID) {
group.setCollapsed(false);
iDraggedOverCollapseButtonID=-1;
setDisplayListDirty();
return;
}
if (group.getID() != iDraggedOverCollapseButtonID) dCollapseButtonDragOverTime=dCurrentTimeStamp;
iDraggedOverCollapseButtonID=group.getID();
}
default :
return;
}
break;
}
}",0.9977186311787072
58130,"@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() == dataDomain.getStorageIDType()) {
    Collection<SelectionDeltaItem> deltaItems=selectionDelta.getAllItems();
    Tree<ClusterNode> experimentTree=set.getStorageData(storageVAType).getStorageTree();
    if (experimentTree != null) {
      selectionManager.clearSelections();
      dragAndDropController.clearDraggables();
      for (      SelectionDeltaItem item : deltaItems) {
        ArrayList<Integer> alNodeIDs=experimentTree.getNodeIDsFromLeafID(item.getPrimaryID());
        for (        Integer nodeID : alNodeIDs) {
          GroupRepresentation groupRep=hashGroups.get(nodeID);
          if (item.getSelectionType() == SelectionType.SELECTION) {
            groupRep.addAsDraggable(dragAndDropController);
          }
          groupRep.setSelectionTypeRec(item.getSelectionType(),selectionManager);
        }
        rootGroup.updateSelections(selectionManager,drawingStrategyManager);
      }
      setDisplayListDirty();
    }
  }
}","@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() == selectionManager.getIDType() || selectionDelta.getIDType() == dataDomain.getStorageIDType()) {
    Collection<SelectionDeltaItem> deltaItems=selectionDelta.getAllItems();
    Tree<ClusterNode> experimentTree=set.getStorageData(storageVAType).getStorageTree();
    if (experimentTree != null) {
      dragAndDropController.clearDraggables();
      for (      SelectionDeltaItem item : deltaItems) {
        ArrayList<Integer> alNodeIDs=experimentTree.getNodeIDsFromLeafID(item.getPrimaryID());
        for (        Integer nodeID : alNodeIDs) {
          GroupRepresentation groupRep=hashGroups.get(nodeID);
          if (item.isRemove()) {
            groupRep.setSelectionTypeRec(SelectionType.NORMAL,selectionManager);
            selectionManager.remove(nodeID,false);
          }
 else {
            if (item.getSelectionType() == SelectionType.SELECTION) {
              groupRep.addAsDraggable(dragAndDropController);
            }
            groupRep.setSelectionTypeRec(item.getSelectionType(),selectionManager);
          }
        }
        rootGroup.updateSelections(selectionManager,drawingStrategyManager);
      }
      setDisplayListDirty();
    }
  }
}",0.8720496894409938
58131,"/** 
 * Triggers events for currently selected elements.
 */
private void triggerSelectionEvents(){
  SelectionDelta clusterIDDelta=selectionManager.getDelta();
  ClusterNodeSelectionEvent event=new ClusterNodeSelectionEvent();
  event.setSender(this);
  event.setSelectionDelta(clusterIDDelta);
  eventPublisher.triggerEvent(event);
}","/** 
 * Triggers events for currently selected elements.
 */
private void triggerSelectionEvents(){
  SelectionDelta clusterIDDelta=selectionManager.getDelta();
  ClusterNodeSelectionEvent event=new ClusterNodeSelectionEvent();
  event.setSender(this);
  event.setSelectionDelta(clusterIDDelta);
  eventPublisher.triggerEvent(event);
  SelectionDelta delta=new SelectionDelta(dataDomain.getStorageIDType());
  for (  SelectionDeltaItem item : clusterIDDelta.getAllItems()) {
    GroupRepresentation groupRep=hashGroups.get(item.getPrimaryID());
    if (groupRep != null && groupRep.isLeaf()) {
      ClusterNode clusterNode=groupRep.getClusterNode();
      if (item.isRemove())       delta.removeSelection(clusterNode.getLeafID(),item.getSelectionType());
 else       delta.addSelection(clusterNode.getLeafID(),item.getSelectionType());
    }
  }
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSender(this);
  selectionUpdateEvent.setDataDomainType(dataDomain.getDataDomainType());
  selectionUpdateEvent.setSelectionDelta(delta);
  eventPublisher.triggerEvent(selectionUpdateEvent);
}",0.4554724677090415
58132,"@Override public void setSelectionTypeRec(SelectionType selectionType,SelectionManager selectionManager){
  selectionManager.addToType(selectionType,getID());
  clusterNode.setSelectionType(selectionType);
  for (  ICompositeGraphic child : alChildren) {
    child.setSelectionTypeRec(selectionType,selectionManager);
  }
}","@Override public void setSelectionTypeRec(SelectionType selectionType,SelectionManager selectionManager){
  if (selectionType != SelectionType.NORMAL)   selectionManager.addToType(selectionType,getID());
  clusterNode.setSelectionType(selectionType);
  for (  ICompositeGraphic child : alChildren) {
    child.setSelectionTypeRec(selectionType,selectionManager);
  }
}",0.934876989869754
58133,"@Override public void registerEventListeners(){
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  selectionUpdateListener.setExclusiveDataDomainType(dataDomainType);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  selectionCommandListener=new SelectionCommandListener();
  selectionCommandListener.setHandler(this);
  selectionCommandListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(SelectionCommandEvent.class,selectionCommandListener);
  startClusteringListener=new StartClusteringListener();
  startClusteringListener.setHandler(this);
  startClusteringListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(StartClusteringEvent.class,startClusteringListener);
  replaceContentVirtualArrayInUseCaseListener=new ReplaceContentVAInUseCaseListener();
  replaceContentVirtualArrayInUseCaseListener.setHandler(this);
  replaceContentVirtualArrayInUseCaseListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(ReplaceContentVAInUseCaseEvent.class,replaceContentVirtualArrayInUseCaseListener);
  replaceStorageVirtualArrayInUseCaseListener=new ReplaceStorageVAInUseCaseListener();
  replaceStorageVirtualArrayInUseCaseListener.setHandler(this);
  replaceStorageVirtualArrayInUseCaseListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(ReplaceStorageVAInUseCaseEvent.class,replaceStorageVirtualArrayInUseCaseListener);
  virtualArrayUpdateListener=new ContentVAUpdateListener();
  virtualArrayUpdateListener.setHandler(this);
  virtualArrayUpdateListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(VirtualArrayUpdateEvent.class,virtualArrayUpdateListener);
}","@Override public void registerEventListeners(){
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  selectionUpdateListener.setExclusiveDataDomainType(dataDomainType);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  selectionCommandListener=new SelectionCommandListener();
  selectionCommandListener.setHandler(this);
  selectionCommandListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(SelectionCommandEvent.class,selectionCommandListener);
  startClusteringListener=new StartClusteringListener();
  startClusteringListener.setHandler(this);
  startClusteringListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(StartClusteringEvent.class,startClusteringListener);
  replaceContentVirtualArrayInUseCaseListener=new ReplaceContentVAInUseCaseListener();
  replaceContentVirtualArrayInUseCaseListener.setHandler(this);
  replaceContentVirtualArrayInUseCaseListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(ReplaceContentVAInUseCaseEvent.class,replaceContentVirtualArrayInUseCaseListener);
  replaceStorageVirtualArrayInUseCaseListener=new ReplaceStorageVAInUseCaseListener();
  replaceStorageVirtualArrayInUseCaseListener.setHandler(this);
  replaceStorageVirtualArrayInUseCaseListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(ReplaceStorageVAInUseCaseEvent.class,replaceStorageVirtualArrayInUseCaseListener);
  contentVAUpdateListener=new ContentVAUpdateListener();
  contentVAUpdateListener.setHandler(this);
  contentVAUpdateListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(ContentVAUpdateEvent.class,contentVAUpdateListener);
  storageVAUpdateListener=new StorageVAUpdateListener();
  storageVAUpdateListener.setHandler(this);
  storageVAUpdateListener.setDataDomainType(dataDomainType);
  eventPublisher.addListener(StorageVAUpdateEvent.class,storageVAUpdateListener);
}",0.8204576043068641
58134,"/** 
 * A dataDomain may contribute to the context menu. This function returns the contentItemContainer of the context menue if one was specified. This should be overridden by subclasses if needed.
 * @return a context menu item container related to content items
 */
public AItemContainer getContentItemContainer(IDType idType,int id){
  return null;
}","/** 
 * A dataDomain may contribute to the context menu. This function returns the contentItemContainer of the context menu if one was specified. This should be overridden by subclasses if needed.
 * @return a context menu item container related to content items
 */
public AItemContainer getContentItemContainer(IDType idType,int id){
  return null;
}",0.998581560283688
58135,"@Override public void unregisterEventListeners(){
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (selectionCommandListener != null) {
    eventPublisher.removeListener(selectionCommandListener);
    selectionCommandListener=null;
  }
  if (startClusteringListener != null) {
    eventPublisher.removeListener(startClusteringListener);
    startClusteringListener=null;
  }
  if (replaceContentVirtualArrayInUseCaseListener != null) {
    eventPublisher.removeListener(replaceContentVirtualArrayInUseCaseListener);
    replaceContentVirtualArrayInUseCaseListener=null;
  }
  if (replaceStorageVirtualArrayInUseCaseListener != null) {
    eventPublisher.removeListener(replaceStorageVirtualArrayInUseCaseListener);
    replaceStorageVirtualArrayInUseCaseListener=null;
  }
  if (virtualArrayUpdateListener != null) {
    eventPublisher.removeListener(virtualArrayUpdateListener);
    virtualArrayUpdateListener=null;
  }
}","@Override public void unregisterEventListeners(){
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (selectionCommandListener != null) {
    eventPublisher.removeListener(selectionCommandListener);
    selectionCommandListener=null;
  }
  if (startClusteringListener != null) {
    eventPublisher.removeListener(startClusteringListener);
    startClusteringListener=null;
  }
  if (replaceContentVirtualArrayInUseCaseListener != null) {
    eventPublisher.removeListener(replaceContentVirtualArrayInUseCaseListener);
    replaceContentVirtualArrayInUseCaseListener=null;
  }
  if (replaceStorageVirtualArrayInUseCaseListener != null) {
    eventPublisher.removeListener(replaceStorageVirtualArrayInUseCaseListener);
    replaceStorageVirtualArrayInUseCaseListener=null;
  }
  if (contentVAUpdateListener != null) {
    eventPublisher.removeListener(contentVAUpdateListener);
    contentVAUpdateListener=null;
  }
  if (storageVAUpdateListener != null) {
    eventPublisher.removeListener(storageVAUpdateListener);
    storageVAUpdateListener=null;
  }
}",0.890018484288355
58136,"@Override public void handleVAUpdate(StorageVADelta delta,String info){
  super.handleVAUpdate(delta,info);
  bRedrawTextures=true;
}","@Override public void handleVAUpdate(ContentVADelta delta,String info){
  super.handleVAUpdate(delta,info);
  bRedrawTextures=true;
  hasDataWindowChanged=true;
  iPickedSampleLevel1=0;
  setDisplayListDirty();
  initData();
}",0.7019498607242339
58137,"@Override protected void handlePickingEvents(final EPickingType pickingType,final EPickingMode pickingMode,final int pickingID,final Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  SelectionType selectionType;
switch (pickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=pickingID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (!dataDomain.getDataDomainType().equals(""String_Node_Str"")) break;
ContentContextMenuItemContainer contentContextMenuItemContainer=new ContentContextMenuItemContainer();
contentContextMenuItemContainer.setDataDomain(dataDomain);
contentContextMenuItemContainer.setID(contentIDType,pickingID);
contextMenu.addItemContanier(contentContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (contentSelectionManager.checkStatus(selectionType,pickingID)) {
break;
}
connectedElementRepresentationManager.clear(contentSelectionManager.getIDType(),selectionType);
contentSelectionManager.clearSelection(selectionType);
contentSelectionManager.addToType(selectionType,pickingID);
contentSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),pickingID);
if (!bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(dataDomain.getDataDomainType());
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
StorageContextMenuItemContainer experimentContextMenuItemContainer=new StorageContextMenuItemContainer();
experimentContextMenuItemContainer.setDataDomain(dataDomain);
experimentContextMenuItemContainer.setID(storageIDType,pickingID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
storageSelectionManager.clearSelection(selectionType);
storageSelectionManager.addToType(selectionType,pickingID);
storageSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),pickingID);
connectedElementRepresentationManager.clear(storageSelectionManager.getIDType(),selectionType);
ISelectionDelta selectionDelta=storageSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(dataDomain.getDataDomainType());
event.setSelectionDelta((SelectionDelta)selectionDelta);
eventPublisher.triggerEvent(event);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case PC_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (storageVA.containsElement(storageVA.get(pickingID)) == 1) {
removeGate(storageVA.get(pickingID));
}
Integer storageID=storageVA.get(pickingID);
storageSelectionManager.remove(pickingID);
StorageVADelta vaDelta=new StorageVADelta(StorageVAType.STORAGE,storageIDType);
vaDelta.add(VADeltaItem.remove(pickingID));
sendStorageFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getStorageLabel(storageID));
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (pickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=pickingID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=pickingID;
setDisplayListDirty();
break;
}
break;
case DUPLICATE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (pickingID >= 0) {
StorageVADelta vaDelta=new StorageVADelta(StorageVAType.STORAGE,storageIDType);
vaDelta.add(VADeltaItem.copy(pickingID));
sendStorageFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getStorageLabel(storageVA.get(pickingID)));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
AGate gate;
if (set.isSetHomogeneous()) {
gate=new Gate(++iGateCounter,pickingID,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
}
 else {
gate=new NominalGate(++iGateCounter,pickingID,0,0.5f,set,renderStyle);
}
hashGates.put(this.iGateCounter,gate);
hashIsGateBlocking.put(this.iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
Gate gate=new Gate(++iGateCounter,-1,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
gate.setMasterGate(true);
hashMasterGates.put(iGateCounter,gate);
hashIsGateBlocking.put(iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashGates.remove(pickingID) == null) hashMasterGates.remove(pickingID);
hashIsGateBlocking.remove(pickingID);
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashExcludeNAN.containsKey(pickingID)) {
hashExcludeNAN.remove(pickingID);
}
 else {
hashExcludeNAN.put(pickingID,null);
}
setDisplayListDirty();
break;
}
break;
}
}","@Override protected void handlePickingEvents(final EPickingType pickingType,final EPickingMode pickingMode,final int pickingID,final Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  SelectionType selectionType;
switch (pickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=pickingID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (!dataDomain.getDataDomainType().equals(""String_Node_Str"")) break;
ContentContextMenuItemContainer contentContextMenuItemContainer=new ContentContextMenuItemContainer();
contentContextMenuItemContainer.setDataDomain(dataDomain);
contentContextMenuItemContainer.setID(contentIDType,pickingID);
contextMenu.addItemContanier(contentContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (contentSelectionManager.checkStatus(selectionType,pickingID)) {
break;
}
connectedElementRepresentationManager.clear(contentSelectionManager.getIDType(),selectionType);
contentSelectionManager.clearSelection(selectionType);
contentSelectionManager.addToType(selectionType,pickingID);
contentSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),pickingID);
if (!bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(dataDomain.getDataDomainType());
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
StorageContextMenuItemContainer experimentContextMenuItemContainer=new StorageContextMenuItemContainer();
experimentContextMenuItemContainer.setDataDomain(dataDomain);
experimentContextMenuItemContainer.setID(storageIDType,pickingID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
storageSelectionManager.clearSelection(selectionType);
storageSelectionManager.addToType(selectionType,pickingID);
storageSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),pickingID);
connectedElementRepresentationManager.clear(storageSelectionManager.getIDType(),selectionType);
ISelectionDelta selectionDelta=storageSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(dataDomain.getDataDomainType());
event.setSelectionDelta((SelectionDelta)selectionDelta);
eventPublisher.triggerEvent(event);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case PC_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (storageVA.containsElement(storageVA.get(pickingID)) == 1) {
removeGate(storageVA.get(pickingID));
}
Integer storageID=storageVA.get(pickingID);
storageSelectionManager.remove(pickingID);
StorageVADelta vaDelta=new StorageVADelta(StorageVAType.STORAGE,storageIDType);
vaDelta.add(VADeltaItem.remove(pickingID));
triggerStorageFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getStorageLabel(storageID));
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (pickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=pickingID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=pickingID;
setDisplayListDirty();
break;
}
break;
case DUPLICATE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (pickingID >= 0) {
StorageVADelta vaDelta=new StorageVADelta(StorageVAType.STORAGE,storageIDType);
vaDelta.add(VADeltaItem.copy(pickingID));
triggerStorageFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getStorageLabel(storageVA.get(pickingID)));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
AGate gate;
if (set.isSetHomogeneous()) {
gate=new Gate(++iGateCounter,pickingID,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
}
 else {
gate=new NominalGate(++iGateCounter,pickingID,0,0.5f,set,renderStyle);
}
hashGates.put(this.iGateCounter,gate);
hashIsGateBlocking.put(this.iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
Gate gate=new Gate(++iGateCounter,-1,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
gate.setMasterGate(true);
hashMasterGates.put(iGateCounter,gate);
hashIsGateBlocking.put(iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashGates.remove(pickingID) == null) hashMasterGates.remove(pickingID);
hashIsGateBlocking.remove(pickingID);
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashExcludeNAN.containsKey(pickingID)) {
hashExcludeNAN.remove(pickingID);
}
 else {
hashExcludeNAN.put(pickingID,null);
}
setDisplayListDirty();
break;
}
break;
}
}",0.9985913689332822
58138,"/** 
 * TODO: revise this, not very performance friendly, especially the clearing of the DESELECTED
 */
private void handleUnselection(){
  if (!hasFilterChanged)   return;
  handleGateUnselection();
  handleNANUnselection();
  if (set.isSetHomogeneous())   handleMasterGateUnselection();
  contentSelectionManager.clearSelection(SelectionType.DESELECTED);
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    contentSelectionManager.addToType(SelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    contentSelectionManager.addToType(SelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : hashIsNANBlocking.values()) {
    contentSelectionManager.addToType(SelectionType.DESELECTED,alCurrent);
  }
  if (bIsDraggingActive || bIsAngularBrushingActive) {
  }
}","/** 
 * TODO: revise this, not very performance friendly, especially the clearing of the DESELECTED
 */
private void handleUnselection(){
  if (!hasFilterChanged)   return;
  hasFilterChanged=false;
  handleGateUnselection();
  handleNANUnselection();
  if (set.isSetHomogeneous())   handleMasterGateUnselection();
  contentSelectionManager.clearSelection(SelectionType.DESELECTED);
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    contentSelectionManager.addToType(SelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    contentSelectionManager.addToType(SelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : hashIsNANBlocking.values()) {
    contentSelectionManager.addToType(SelectionType.DESELECTED,alCurrent);
  }
  if (bIsDraggingActive || bIsAngularBrushingActive) {
    triggerSelectionUpdate();
  }
  System.out.println(""String_Node_Str"");
}",0.9463792150359316
58139,"public void saveSelection(){
  contentSelectionManager.removeElements(SelectionType.DESELECTED);
  clearAllSelections();
  setDisplayListDirty();
  contentVA.setGroupList(null);
  ReplaceContentVAInUseCaseEvent event=new ReplaceContentVAInUseCaseEvent(dataDomain.getDataDomainType(),contentVAType,contentVA);
  event.setDataDomainType(dataDomain.getDataDomainType());
  event.setSender(this);
  eventPublisher.triggerEvent(event);
}","public void saveSelection(){
  Set<Integer> removedElements=contentSelectionManager.getElements(SelectionType.DESELECTED);
  ContentVADelta delta=new ContentVADelta(ContentVAType.CONTENT,contentIDType);
  for (  Integer contentID : removedElements) {
    delta.add(VADeltaItem.removeElement(contentID));
  }
  contentSelectionManager.clearSelection(SelectionType.DESELECTED);
  clearFilters();
  triggerContentFilterEvent(delta,""String_Node_Str"");
}",0.322360953461975
58140,"private void adjustAxisSpacing(GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fWidth=fArTargetWorldCoordinates[0] - fXTranslation - fXDefaultTranslation;
  if (bWasAxisDraggedFirstTime) {
    fAxisDraggingOffset=fWidth - alAxisSpacing.get(iMovedAxisPosition);
    bWasAxisDraggedFirstTime=false;
  }
  fWidth-=fAxisDraggingOffset;
  if (fWidth < renderStyle.getXAxisStart()) {
    fWidth=renderStyle.getXAxisStart();
  }
  if (fWidth > renderStyle.getXAxisEnd()) {
    fWidth=renderStyle.getXAxisEnd();
  }
  int iSwitchAxisWithThis=-1;
  for (int iCount=0; iCount < alAxisSpacing.size(); iCount++) {
    if (iMovedAxisPosition > iCount && fWidth < alAxisSpacing.get(iCount)) {
      iSwitchAxisWithThis=iCount;
      break;
    }
    if (iMovedAxisPosition < iCount && fWidth > alAxisSpacing.get(iCount)) {
      iSwitchAxisWithThis=iCount;
    }
  }
  if (iSwitchAxisWithThis != -1) {
    storageVA.move(iMovedAxisPosition,iSwitchAxisWithThis);
    alAxisSpacing.remove(iMovedAxisPosition);
    alAxisSpacing.add(iSwitchAxisWithThis,fWidth);
    StorageVADelta vaDelta=new StorageVADelta(storageVAType,storageIDType);
    vaDelta.add(VADeltaItem.move(iMovedAxisPosition,iSwitchAxisWithThis));
    sendStorageFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getStorageLabel(storageVA.get(iMovedAxisPosition)));
    iMovedAxisPosition=iSwitchAxisWithThis;
  }
 else {
    alAxisSpacing.set(iMovedAxisPosition,fWidth);
  }
  setDisplayListDirty();
}","private void adjustAxisSpacing(GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fWidth=fArTargetWorldCoordinates[0] - fXTranslation - fXDefaultTranslation;
  if (bWasAxisDraggedFirstTime) {
    fAxisDraggingOffset=fWidth - alAxisSpacing.get(iMovedAxisPosition);
    bWasAxisDraggedFirstTime=false;
  }
  fWidth-=fAxisDraggingOffset;
  if (fWidth < renderStyle.getXAxisStart()) {
    fWidth=renderStyle.getXAxisStart();
  }
  if (fWidth > renderStyle.getXAxisEnd()) {
    fWidth=renderStyle.getXAxisEnd();
  }
  int iSwitchAxisWithThis=-1;
  for (int iCount=0; iCount < alAxisSpacing.size(); iCount++) {
    if (iMovedAxisPosition > iCount && fWidth < alAxisSpacing.get(iCount)) {
      iSwitchAxisWithThis=iCount;
      break;
    }
    if (iMovedAxisPosition < iCount && fWidth > alAxisSpacing.get(iCount)) {
      iSwitchAxisWithThis=iCount;
    }
  }
  if (iSwitchAxisWithThis != -1) {
    storageVA.move(iMovedAxisPosition,iSwitchAxisWithThis);
    alAxisSpacing.remove(iMovedAxisPosition);
    alAxisSpacing.add(iSwitchAxisWithThis,fWidth);
    StorageVADelta vaDelta=new StorageVADelta(storageVAType,storageIDType);
    vaDelta.add(VADeltaItem.move(iMovedAxisPosition,iSwitchAxisWithThis));
    triggerStorageFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getStorageLabel(storageVA.get(iMovedAxisPosition)));
    iMovedAxisPosition=iSwitchAxisWithThis;
  }
 else {
    alAxisSpacing.set(iMovedAxisPosition,fWidth);
  }
  setDisplayListDirty();
}",0.996578538102644
58141,"/** 
 * Reset all selections and deselections
 */
@Override public void clearAllSelections(){
  initGates();
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  bIsAngularBrushingActive=false;
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    alCurrent.clear();
  }
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    alCurrent.clear();
  }
  setDisplayListDirty();
  connectedElementRepresentationManager.clear(contentIDType);
}","/** 
 * Reset all selections and deselections
 */
@Override public void clearAllSelections(){
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  clearFilters();
  setDisplayListDirty();
  connectedElementRepresentationManager.clear(contentIDType);
}",0.6900878293601004
58142,"/** 
 * Sets a storageVA. The storageVA in the storageData object is replaced and the other elements in the storageData are reset.
 * @param vaType
 * @param virtualArray
 */
public void setStorageVA(StorageVAType vaType,StorageVirtualArray virtualArray);","/** 
 * Sets a storageVA. The storageVA in the storageData object is replaced and the other elements in the storageData are reset.
 * @param vaType
 * @param virtualArray
 */
public void setStorageVA(String vaType,StorageVirtualArray virtualArray);",0.9701789264413518
58143,"/** 
 * Returns a   {@link ContentData} object for the specified ContentVAType. The ContentData provides accessto all data on a storage, e.g., virtualArryay, cluster tree, group list etc.
 * @param vaType
 * @return
 */
public ContentData getContentData(ContentVAType vaType);","/** 
 * Returns a   {@link ContentData} object for the specified ContentVAType. The ContentData provides accessto all data on a storage, e.g., virtualArryay, cluster tree, group list etc.
 * @param vaType
 * @return
 */
public ContentData getContentData(String vaType);",0.9651376146788992
58144,"/** 
 * Iterate over the storages based on a virtual array
 * @param type
 * @return
 */
public Iterator<IStorage> iterator(StorageVAType type);","/** 
 * Iterate over the storages based on a virtual array
 * @param type
 * @return
 */
public Iterator<IStorage> iterator(String type);",0.9608540925266904
58145,"/** 
 * Returns a   {@link StorageData} object for the specified StorageVAType. The StorageData provides accessto all data on a storage, e.g., virtualArryay, cluster tree, group list etc.
 * @param vaType
 * @return
 */
public StorageData getStorageData(StorageVAType vaType);","/** 
 * Returns a   {@link StorageData} object for the specified StorageVAType. The StorageData provides accessto all data on a storage, e.g., virtualArryay, cluster tree, group list etc.
 * @param vaType
 * @return
 */
public StorageData getStorageData(String vaType);",0.9724770642201837
58146,"/** 
 * Set a contentVA. The contentVA in the contentData object is replaced and the other elements in the contentData are reset.
 * @param vaType
 * @param virtualArray
 */
public void setContentVA(ContentVAType vaType,ContentVirtualArray virtualArray);","/** 
 * Set a contentVA. The contentVA in the contentData object is replaced and the other elements in the contentData are reset.
 * @param vaType
 * @param virtualArray
 */
public void setContentVA(String vaType,ContentVirtualArray virtualArray);",0.9620758483033932
58147,"public void exportTrees(ISet set,String directory){
  try {
    Tree<ClusterNode> tree=set.getContentData(ContentVAType.CONTENT).getContentTree();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      treePorter.setDataDomain(set.getDataDomain());
      treePorter.exportTree(directory + ""String_Node_Str"",tree);
    }
    tree=set.getStorageData(StorageVAType.STORAGE).getStorageTree();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      treePorter.setDataDomain(set.getDataDomain());
      treePorter.exportTree(directory + ""String_Node_Str"",tree);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void exportTrees(ISet set,String directory){
  try {
    Tree<ClusterNode> tree=set.getContentData(Set.CONTENT).getContentTree();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      treePorter.setDataDomain(set.getDataDomain());
      treePorter.exportTree(directory + ""String_Node_Str"",tree);
    }
    tree=set.getStorageData(Set.STORAGE).getStorageTree();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      treePorter.setDataDomain(set.getDataDomain());
      treePorter.exportTree(directory + ""String_Node_Str"",tree);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9770290964777948
58148,"public void exportGroups(ISet set,String sFileName,ArrayList<Integer> alGenes,ArrayList<Integer> alExperiments,IDType targetIDType){
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : alExperiments) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    out.println();
    String identifier;
    IDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
    for (    Integer iContentIndex : alGenes) {
      if (set.getDataDomain().getDataDomainType().equals(""String_Node_Str"")) {
        Set<String> setRefSeqIDs=iDMappingManager.getIDAsSet(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
        if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
          identifier=(String)setRefSeqIDs.toArray()[0];
        }
 else {
          continue;
        }
      }
 else {
        identifier=iDMappingManager.getID(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
      }
      out.print(identifier + ""String_Node_Str"");
      for (      Integer iStorageIndex : alExperiments) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      out.println();
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void exportGroups(ISet set,String sFileName,ArrayList<Integer> alGenes,ArrayList<Integer> alExperiments,IDType targetIDType){
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : alExperiments) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    out.println();
    String identifier;
    IDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
    for (    Integer iContentIndex : alGenes) {
      if (set.getDataDomain().getDataDomainType().equals(""String_Node_Str"")) {
        java.util.Set<String> setRefSeqIDs=iDMappingManager.getIDAsSet(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
        if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
          identifier=(String)setRefSeqIDs.toArray()[0];
        }
 else {
          continue;
        }
      }
 else {
        identifier=iDMappingManager.getID(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
      }
      out.print(identifier + ""String_Node_Str"");
      for (      Integer iStorageIndex : alExperiments) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      out.println();
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.996617050067659
58149,"@SuppressWarnings(""String_Node_Str"") public void export(ISet set,String sFileName,EWhichViewToExport eWhichViewToExport,IDType targetIDType){
  ContentVirtualArray contentVA=null;
  StorageVirtualArray storageVA=null;
  ASetBasedDataDomain dataDomain=set.getDataDomain();
  if (eWhichViewToExport == EWhichViewToExport.BUCKET) {
    contentVA=dataDomain.getContentVA(ContentVAType.CONTENT_CONTEXT);
    storageVA=dataDomain.getStorageVA(StorageVAType.STORAGE);
  }
 else   if (eWhichViewToExport == EWhichViewToExport.WHOLE_DATA) {
    contentVA=dataDomain.getContentVA(ContentVAType.CONTENT);
    storageVA=dataDomain.getStorageVA(StorageVAType.STORAGE);
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    if (contentVA.getGroupList() != null)     out.print(""String_Node_Str"");
    out.println();
    int cnt=-1;
    int cluster=0;
    int iExample=0;
    int index=0;
    int offset=0;
    String identifier;
    IDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
    for (    Integer iContentIndex : contentVA) {
      if (dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
        Set<String> setRefSeqIDs=iDMappingManager.getIDAsSet(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
        if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
          identifier=(String)setRefSeqIDs.toArray()[0];
        }
 else {
          continue;
        }
      }
 else {
        identifier=iDMappingManager.getID(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
      }
      out.print(identifier + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      if (contentVA.getGroupList() != null) {
        if (cnt == contentVA.getGroupList().get(cluster).getNrElements() - 1) {
          offset=offset + contentVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        iExample=contentVA.getGroupList().get(cluster).getIdxExample();
        out.print(cluster + ""String_Node_Str"" + iExample+ ""String_Node_Str"");
        index++;
      }
      out.println();
    }
    if (storageVA.getGroupList() != null) {
      String stClusterNr=""String_Node_Str"";
      String stClusterRep=""String_Node_Str"";
      cluster=0;
      cnt=-1;
      for (      Integer iStorageIndex : storageVA) {
        if (cnt == storageVA.getGroupList().get(cluster).getNrElements() - 1) {
          offset=offset + storageVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        iExample=storageVA.getGroupList().get(cluster).getIdxExample();
        stClusterNr+=cluster + ""String_Node_Str"";
        stClusterRep+=iExample + ""String_Node_Str"";
      }
      stClusterNr+=""String_Node_Str"";
      stClusterRep+=""String_Node_Str"";
      out.print(stClusterNr);
      out.print(stClusterRep);
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@SuppressWarnings(""String_Node_Str"") public void export(ISet set,String sFileName,EWhichViewToExport eWhichViewToExport,IDType targetIDType){
  ContentVirtualArray contentVA=null;
  StorageVirtualArray storageVA=null;
  ASetBasedDataDomain dataDomain=set.getDataDomain();
  if (eWhichViewToExport == EWhichViewToExport.BUCKET) {
    contentVA=dataDomain.getContentVA(Set.CONTENT_CONTEXT);
    storageVA=dataDomain.getStorageVA(Set.STORAGE);
  }
 else   if (eWhichViewToExport == EWhichViewToExport.WHOLE_DATA) {
    contentVA=dataDomain.getContentVA(Set.CONTENT);
    storageVA=dataDomain.getStorageVA(Set.STORAGE);
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    if (contentVA.getGroupList() != null)     out.print(""String_Node_Str"");
    out.println();
    int cnt=-1;
    int cluster=0;
    int iExample=0;
    int index=0;
    int offset=0;
    String identifier;
    IDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
    for (    Integer iContentIndex : contentVA) {
      if (dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
        java.util.Set<String> setRefSeqIDs=iDMappingManager.getIDAsSet(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
        if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
          identifier=(String)setRefSeqIDs.toArray()[0];
        }
 else {
          continue;
        }
      }
 else {
        identifier=iDMappingManager.getID(set.getDataDomain().getContentIDType(),targetIDType,iContentIndex);
      }
      out.print(identifier + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      if (contentVA.getGroupList() != null) {
        if (cnt == contentVA.getGroupList().get(cluster).getNrElements() - 1) {
          offset=offset + contentVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        iExample=contentVA.getGroupList().get(cluster).getIdxExample();
        out.print(cluster + ""String_Node_Str"" + iExample+ ""String_Node_Str"");
        index++;
      }
      out.println();
    }
    if (storageVA.getGroupList() != null) {
      String stClusterNr=""String_Node_Str"";
      String stClusterRep=""String_Node_Str"";
      cluster=0;
      cnt=-1;
      for (      Integer iStorageIndex : storageVA) {
        if (cnt == storageVA.getGroupList().get(cluster).getNrElements() - 1) {
          offset=offset + storageVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        iExample=storageVA.getGroupList().get(cluster).getIdxExample();
        stClusterNr+=cluster + ""String_Node_Str"";
        stClusterRep+=iExample + ""String_Node_Str"";
      }
      stClusterNr+=""String_Node_Str"";
      stClusterRep+=""String_Node_Str"";
      out.print(stClusterNr);
      out.print(stClusterRep);
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9899684723416452
58150,"@SuppressWarnings(""String_Node_Str"") public MetaSet(Set originalSet,Tree<ClusterNode> storageTree,ClusterNode storageTreeRoot){
  super();
  this.dataDomain=originalSet.getDataDomain();
  this.iUniqueID=GeneralManager.get().getIDManager().createID(EManagedObjectType.SET);
  this.isSetHomogeneous=true;
  this.externalDataRep=originalSet.getExternalDataRep();
  this.hashContentData=(HashMap<ContentVAType,ContentData>)originalSet.hashContentData.clone();
  this.hashStorages=new HashMap<Integer,IStorage>();
  defaultStorageData=new StorageData();
  defaultStorageData.setStorageVA(new StorageVirtualArray(StorageVAType.STORAGE));
  defaultStorageData.setStorageTree(storageTree);
  defaultStorageData.setStorageTreeRoot(storageTreeRoot);
  hashStorageData=new HashMap<StorageVAType,StorageData>();
  hashStorageData.put(StorageVAType.STORAGE,defaultStorageData.clone());
  defaultStorageData.setStorageVA(new StorageVirtualArray(StorageVAType.STORAGE));
  statisticsResult=new StatisticsResult(this);
}","@SuppressWarnings(""String_Node_Str"") public MetaSet(Set originalSet,Tree<ClusterNode> storageTree,ClusterNode storageTreeRoot){
  super();
  this.dataDomain=originalSet.getDataDomain();
  this.iUniqueID=GeneralManager.get().getIDManager().createID(EManagedObjectType.SET);
  this.isSetHomogeneous=true;
  this.externalDataRep=originalSet.getExternalDataRep();
  this.hashContentData=(HashMap<String,ContentData>)originalSet.hashContentData.clone();
  this.hashStorages=new HashMap<Integer,IStorage>();
  defaultStorageData=new StorageData();
  defaultStorageData.setStorageVA(new StorageVirtualArray(STORAGE));
  defaultStorageData.setStorageTree(storageTree);
  defaultStorageData.setStorageTreeRoot(storageTreeRoot);
  hashStorageData=new HashMap<String,StorageData>();
  hashStorageData.put(STORAGE,defaultStorageData.clone());
  defaultStorageData.setStorageVA(new StorageVirtualArray(STORAGE));
  statisticsResult=new StatisticsResult(this);
}",0.764344262295082
58151,"@Override public void cluster(ClusterState clusterState){
  if (bIsNumerical == true && isSetHomogeneous == true) {
    ContentVAType contentVAType=clusterState.getContentVAType();
    if (contentVAType != null) {
      clusterState.setContentVA(getContentData(contentVAType).getContentVA());
      clusterState.setContentIDType(dataDomain.getContentIDType());
    }
    StorageVAType storageVAType=clusterState.getStorageVAType();
    if (storageVAType != null) {
      clusterState.setStorageVA(getStorageData(storageVAType).getStorageVA());
      clusterState.setStorageIDType(dataDomain.getStorageIDType());
    }
    ClusterManager clusterManager=new ClusterManager(this);
    ClusterResult result=clusterManager.cluster(clusterState);
    ContentData contentResult=result.getContentResult();
    if (contentResult != null) {
      hashContentData.put(clusterState.getContentVAType(),contentResult);
    }
    StorageData storageResult=result.getStorageResult();
    if (storageResult != null) {
      hashStorageData.put(clusterState.getStorageVAType(),storageResult);
    }
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","@Override public void cluster(ClusterState clusterState){
  if (bIsNumerical == true && isSetHomogeneous == true) {
    String contentVAType=clusterState.getContentVAType();
    if (contentVAType != null) {
      clusterState.setContentVA(getContentData(contentVAType).getContentVA());
      clusterState.setContentIDType(dataDomain.getContentIDType());
    }
    String storageVAType=clusterState.getStorageVAType();
    if (storageVAType != null) {
      clusterState.setStorageVA(getStorageData(storageVAType).getStorageVA());
      clusterState.setStorageIDType(dataDomain.getStorageIDType());
    }
    ClusterManager clusterManager=new ClusterManager(this);
    ClusterResult result=clusterManager.cluster(clusterState);
    ContentData contentResult=result.getContentResult();
    if (contentResult != null) {
      hashContentData.put(clusterState.getContentVAType(),contentResult);
    }
    StorageData storageResult=result.getStorageResult();
    if (storageResult != null) {
      hashStorageData.put(clusterState.getStorageVAType(),storageResult);
    }
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}",0.9850746268656716
58152,"private ContentData createContentData(ContentVAType vaType){
  ContentData contentData=new ContentData(dataDomain.getContentIDType());
  ContentVirtualArray contentVA=new ContentVirtualArray(vaType);
  if (!vaType.isEmptyByDefault()) {
    for (int count=0; count < depth(); count++) {
      contentVA.append(count);
    }
  }
  contentData.setContentVA(contentVA);
  return contentData;
}","private ContentData createContentData(String vaType){
  ContentData contentData=new ContentData(dataDomain.getContentIDType());
  ContentVirtualArray contentVA=new ContentVirtualArray(vaType);
  if (vaType != CONTENT_CONTEXT) {
    for (int count=0; count < depth(); count++) {
      contentVA.append(count);
    }
  }
  contentData.setContentVA(contentVA);
  return contentData;
}",0.9142857142857144
58153,"@Override public void setStorageVA(StorageVAType vaType,StorageVirtualArray virtualArray){
  StorageData storageData=hashStorageData.get(vaType);
  if (storageData == null)   storageData=defaultStorageData.clone();
 else   storageData.reset();
  storageData.setStorageVA(virtualArray);
  hashStorageData.put(vaType,storageData);
}","@Override public void setStorageVA(String vaType,StorageVirtualArray virtualArray){
  StorageData storageData=hashStorageData.get(vaType);
  if (storageData == null)   storageData=defaultStorageData.clone();
 else   storageData.reset();
  storageData.setStorageVA(virtualArray);
  hashStorageData.put(vaType,storageData);
}",0.9770290964777948
58154,"@Override public ContentData getContentData(ContentVAType vaType){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null) {
    contentData=createContentData(vaType);
    hashContentData.put(vaType,contentData);
  }
  return contentData;
}","@Override public ContentData getContentData(String vaType){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null) {
    contentData=createContentData(vaType);
    hashContentData.put(vaType,contentData);
  }
  return contentData;
}",0.9638095238095238
58155,"@Override public Iterator<IStorage> iterator(StorageVAType type){
  return new StorageIterator(hashStorages,hashStorageData.get(type).getStorageVA());
}","@Override public Iterator<IStorage> iterator(String type){
  return new StorageIterator(hashStorages,hashStorageData.get(type).getStorageVA());
}",0.9629629629629628
58156,"@Override public void restoreOriginalContentVA(){
  ContentData contentData=createContentData(ContentVAType.CONTENT);
  hashContentData.put(ContentVAType.CONTENT,contentData);
}","@Override public void restoreOriginalContentVA(){
  ContentData contentData=createContentData(CONTENT);
  hashContentData.put(CONTENT,contentData);
}",0.9141104294478528
58157,"@Override public void setContentVA(ContentVAType vaType,ContentVirtualArray virtualArray){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null)   contentData=createContentData(vaType);
 else   contentData.reset();
  contentData.setContentVA(virtualArray);
  hashContentData.put(vaType,contentData);
}","@Override public void setContentVA(String vaType,ContentVirtualArray virtualArray){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null)   contentData=createContentData(vaType);
 else   contentData.reset();
  contentData.setContentVA(virtualArray);
  hashContentData.put(vaType,contentData);
}",0.9708141321044548
58158,"/** 
 * Initialization of member variables. Safe to be called by sub-classes.
 */
protected void init(){
  hashStorages=new HashMap<Integer,IStorage>();
  hashContentData=new HashMap<ContentVAType,ContentData>();
  hashStorageData=new HashMap<StorageVAType,StorageData>(3);
  defaultStorageData=new StorageData();
  defaultStorageData.setStorageVA(new StorageVirtualArray(StorageVAType.STORAGE));
  statisticsResult=new StatisticsResult(this);
}","/** 
 * Initialization of member variables. Safe to be called by sub-classes.
 */
protected void init(){
  hashStorages=new HashMap<Integer,IStorage>();
  hashContentData=new HashMap<String,ContentData>(6);
  hashStorageData=new HashMap<String,StorageData>(3);
  defaultStorageData=new StorageData();
  defaultStorageData.setStorageVA(new StorageVirtualArray(STORAGE));
  statisticsResult=new StatisticsResult(this);
}",0.5840092699884125
58159,"/** 
 * Creates a   {@link MetaSet} for every node in the storage tree.
 */
public void createMetaSets(){
  ClusterNode rootNode=hashStorageData.get(StorageVAType.STORAGE).getStorageTreeRoot();
  rootNode.createMetaSets(this);
}","/** 
 * Creates a   {@link MetaSet} for every node in the storage tree.
 */
public void createMetaSets(){
  ClusterNode rootNode=hashStorageData.get(STORAGE).getStorageTreeRoot();
  rootNode.createMetaSets(this);
}",0.9683257918552036
58160,"@Override public StorageData getStorageData(StorageVAType vaType){
  return hashStorageData.get(vaType);
}","@Override public StorageData getStorageData(String vaType){
  return hashStorageData.get(vaType);
}",0.946341463414634
58161,"void finalizeAddedStorages(){
  if ((this.getClass().equals(Set.class))) {
    Tree<ClusterNode> tree=defaultStorageData.getStorageTree();
    int count=1;
    for (    Integer storageID : defaultStorageData.getStorageVA()) {
      ClusterNode node=new ClusterNode(tree,get(storageID).getLabel(),count++,false,storageID);
      tree.addChild(tree.getRoot(),node);
    }
    tree.getRoot().createMetaSets(this);
  }
  hashStorageData.put(StorageVAType.STORAGE,defaultStorageData.clone());
}","void finalizeAddedStorages(){
  if ((this.getClass().equals(Set.class))) {
    Tree<ClusterNode> tree=defaultStorageData.getStorageTree();
    int count=1;
    for (    Integer storageID : defaultStorageData.getStorageVA()) {
      ClusterNode node=new ClusterNode(tree,get(storageID).getLabel(),count++,false,storageID);
      tree.addChild(tree.getRoot(),node);
    }
    tree.getRoot().createMetaSets(this);
  }
  hashStorageData.put(STORAGE,defaultStorageData.clone());
}",0.9854771784232366
58162,"public static SetRelations compareSets(ISet setLeft,ISet setRight){
  SetRelations setRelations=new SetRelations(setLeft,setRight);
  ContentVirtualArray contentVALeft=setLeft.getContentData(ContentVAType.CONTENT).getContentVA();
  ContentVirtualArray contentVARight=setRight.getContentData(ContentVAType.CONTENT).getContentVA();
  HashMap<Integer,Integer> hashRightIndices=new HashMap<Integer,Integer>();
  int rightIndex=0;
  for (  Integer rightID : contentVARight) {
    hashRightIndices.put(rightID,rightIndex++);
  }
  int leftIndex=0;
  for (  Integer leftID : contentVALeft) {
    setRelations.hashLeftToRight.put(leftIndex,hashRightIndices.get(leftID));
    setRelations.hashRightToLeft.put(hashRightIndices.get(leftID),leftIndex);
    leftIndex++;
  }
  return setRelations;
}","public static SetRelations compareSets(ISet setLeft,ISet setRight){
  SetRelations setRelations=new SetRelations(setLeft,setRight);
  ContentVirtualArray contentVALeft=setLeft.getContentData(Set.CONTENT).getContentVA();
  ContentVirtualArray contentVARight=setRight.getContentData(Set.CONTENT).getContentVA();
  HashMap<Integer,Integer> hashRightIndices=new HashMap<Integer,Integer>();
  int rightIndex=0;
  for (  Integer rightID : contentVARight) {
    hashRightIndices.put(rightID,rightIndex++);
  }
  int leftIndex=0;
  for (  Integer leftID : contentVALeft) {
    setRelations.hashLeftToRight.put(leftIndex,hashRightIndices.get(leftID));
    setRelations.hashRightToLeft.put(hashRightIndices.get(leftID),leftIndex);
    leftIndex++;
  }
  return setRelations;
}",0.979381443298969
58163,"@Override public void handleVAUpdate(ContentVADelta delta,String info){
  super.handleVAUpdate(delta,info);
  if (delta.getVAType() == ContentVAType.CONTENT_CONTEXT && contentVAType == ContentVAType.CONTENT_CONTEXT) {
    ClusterState state=new ClusterState(EClustererAlgo.AFFINITY_PROPAGATION,EClustererType.CONTENT_CLUSTERING,EDistanceMeasure.EUCLIDEAN_DISTANCE);
    int contentVAID=contentVA.getID();
    state.setContentVA(contentVA);
    state.setStorageVA(storageVA);
    state.setAffinityPropClusterFactorGenes(4.0f);
    ClusterManager clusterManger=new ClusterManager(set);
    ClusterResult result=clusterManger.cluster(state);
    contentVA=result.getContentResult().getContentVA();
    contentSelectionManager.setVA(contentVA);
    contentVA.setID(contentVAID);
  }
}","@Override public void handleVAUpdate(ContentVADelta delta,String info){
  super.handleVAUpdate(delta,info);
  if (delta.getVAType() == ContentVAType.CONTENT_CONTEXT && contentVAType == ContentVAType.CONTENT_CONTEXT) {
    ClusterState state=new ClusterState(EClustererAlgo.AFFINITY_PROPAGATION,EClustererType.CONTENT_CLUSTERING,EDistanceMeasure.EUCLIDEAN_DISTANCE);
    int contentVAID=contentVA.getID();
    if (contentVA.size() == 0 || storageVA.size() == 0)     return;
    state.setContentVA(contentVA);
    state.setStorageVA(storageVA);
    state.setAffinityPropClusterFactorGenes(4.0f);
    ClusterManager clusterManger=new ClusterManager(set);
    ClusterResult result=clusterManger.cluster(state);
    contentVA=result.getContentResult().getContentVA();
    contentSelectionManager.setVA(contentVA);
    contentVA.setID(contentVAID);
  }
}",0.9582309582309584
58164,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType;
switch (ePickingType) {
case TREEMAP_ELEMENT_SELECTED:
    ATreeMapNode node;
switch (pickingMode) {
case CLICKED:
    break;
case MOUSE_OVER:
  selectionType=SelectionType.MOUSE_OVER;
System.out.println(""String_Node_Str"" + iExternalID);
mouseOverClusterId=iExternalID;
treeSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
treeSelectionManager.addToType(SelectionType.MOUSE_OVER,iExternalID);
break;
case RIGHT_CLICKED:
break;
case DRAGGED:
selectionType=SelectionType.SELECTION;
break;
default :
return;
}
setHighLichtingListDirty();
break;
default :
return;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType;
switch (ePickingType) {
case TREEMAP_ELEMENT_SELECTED:
    ATreeMapNode node;
switch (pickingMode) {
case CLICKED:
    break;
case MOUSE_OVER:
  selectionType=SelectionType.MOUSE_OVER;
mouseOverClusterId=iExternalID;
treeSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
treeSelectionManager.addToType(SelectionType.MOUSE_OVER,iExternalID);
break;
case RIGHT_CLICKED:
break;
case DRAGGED:
selectionType=SelectionType.SELECTION;
break;
default :
return;
}
setHighLichtingListDirty();
break;
default :
return;
}
}",0.9652459016393444
58165,"public void mousePressed(MouseEvent e){
  if (e.getButton() == MouseEvent.BUTTON1) {
    treeSelectionManager.clearSelection(SelectionType.SELECTION);
    treeSelectionManager.addToType(SelectionType.SELECTION,mouseOverClusterId);
    bIsMouseWheeleUsed=true;
  }
}","public void mousePressed(MouseEvent e){
  if (e.getButton() == MouseEvent.BUTTON1) {
    treeSelectionManager.clearSelection(SelectionType.SELECTION);
    treeSelectionManager.addToType(SelectionType.SELECTION,mouseOverClusterId);
    bIsMouseWheeleUsed=true;
    mouseWheeleSelectionHeight=0;
  }
}",0.9397163120567376
58166,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLTreeMap(GLCaleydoCanvas glCanvas,final ViewFrustum viewFrustum){
  super(glCanvas,viewFrustum,true);
  viewType=GLTreeMap.VIEW_ID;
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  parentGLCanvas.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON1) {
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,mouseOverClusterId);
        bIsMouseWheeleUsed=true;
      }
    }
    public void mouseReleased(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON1) {
        bIsMouseWheeleUsed=false;
      }
    }
  }
);
  parentGLCanvas.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseWheelMoved(    MouseWheelEvent e){
      if (bIsMouseWheeleUsed) {
        System.out.println(""String_Node_Str"" + e.getWheelRotation());
        if (e.getWheelRotation() > 0) {
          ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
          mouseWheeleSelectionHeight++;
          System.out.println(""String_Node_Str"" + node.selectionLevel);
          ATreeMapNode parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
          if (parent != null) {
            treeSelectionManager.clearSelection(SelectionType.SELECTION);
            treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
          }
 else {
            mouseWheeleSelectionHeight--;
          }
        }
 else {
          ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
          if (mouseWheeleSelectionHeight > 0) {
            mouseWheeleSelectionHeight--;
            ATreeMapNode parent;
            if (mouseWheeleSelectionHeight == 0)             parent=node;
 else             parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
            treeSelectionManager.clearSelection(SelectionType.SELECTION);
            treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
          }
        }
        setHighLichtingListDirty();
      }
    }
  }
);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLTreeMap(GLCaleydoCanvas glCanvas,final ViewFrustum viewFrustum){
  super(glCanvas,viewFrustum,true);
  viewType=GLTreeMap.VIEW_ID;
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  parentGLCanvas.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON1) {
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,mouseOverClusterId);
        bIsMouseWheeleUsed=true;
        mouseWheeleSelectionHeight=0;
      }
    }
    public void mouseReleased(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON1) {
        bIsMouseWheeleUsed=false;
      }
    }
  }
);
  parentGLCanvas.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseWheelMoved(    MouseWheelEvent e){
      if (bIsMouseWheeleUsed) {
        if (e.getWheelRotation() > 0) {
          ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
          mouseWheeleSelectionHeight++;
          ATreeMapNode parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
          if (parent != null) {
            treeSelectionManager.clearSelection(SelectionType.SELECTION);
            treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
          }
 else {
            mouseWheeleSelectionHeight--;
          }
        }
 else {
          ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
          if (mouseWheeleSelectionHeight > 0) {
            mouseWheeleSelectionHeight--;
            ATreeMapNode parent;
            if (mouseWheeleSelectionHeight == 0)             parent=node;
 else             parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
            treeSelectionManager.clearSelection(SelectionType.SELECTION);
            treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
          }
        }
        setHighLichtingListDirty();
      }
    }
  }
);
}",0.9600535594733318
58167,"@Override public void mouseWheelMoved(MouseWheelEvent e){
  if (bIsMouseWheeleUsed) {
    System.out.println(""String_Node_Str"" + e.getWheelRotation());
    if (e.getWheelRotation() > 0) {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
      mouseWheeleSelectionHeight++;
      System.out.println(""String_Node_Str"" + node.selectionLevel);
      ATreeMapNode parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
      if (parent != null) {
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
 else {
        mouseWheeleSelectionHeight--;
      }
    }
 else {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
      if (mouseWheeleSelectionHeight > 0) {
        mouseWheeleSelectionHeight--;
        ATreeMapNode parent;
        if (mouseWheeleSelectionHeight == 0)         parent=node;
 else         parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
    }
    setHighLichtingListDirty();
  }
}","@Override public void mouseWheelMoved(MouseWheelEvent e){
  if (bIsMouseWheeleUsed) {
    if (e.getWheelRotation() > 0) {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
      mouseWheeleSelectionHeight++;
      ATreeMapNode parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
      if (parent != null) {
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
 else {
        mouseWheeleSelectionHeight--;
      }
    }
 else {
      ATreeMapNode node=treeMapModel.getNodeByNumber(mouseOverClusterId);
      if (mouseWheeleSelectionHeight > 0) {
        mouseWheeleSelectionHeight--;
        ATreeMapNode parent;
        if (mouseWheeleSelectionHeight == 0)         parent=node;
 else         parent=node.getParentWithLevel(node.getHierarchyLevel() - mouseWheeleSelectionHeight);
        treeSelectionManager.clearSelection(SelectionType.SELECTION);
        treeSelectionManager.addToType(SelectionType.SELECTION,parent.getID());
      }
    }
    setHighLichtingListDirty();
  }
}",0.9451093685513826
58168,"public static ClusterTreeMapNode createFromClusterNodeTree(ClusterNode clusterNode,ColorMapping colorMapper){
  if (clusterNode != null) {
    Tree<ATreeMapNode> tree=new Tree<ATreeMapNode>();
    ClusterTreeMapNode treemapNode=new ClusterTreeMapNode();
    ClusterReferenzData referenz=new ClusterReferenzData();
    referenz.colorMapper=colorMapper;
    tree.setRootNode(treemapNode);
    treemapNode.setTree(tree);
    treemapNode.data=clusterNode;
    treemapNode.referenzData=referenz;
    try {
      referenz.sizeGetMehtod=clusterNode.getClass().getMethod(""String_Node_Str"",new Class[0]);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
    createHelp(treemapNode,clusterNode,referenz);
    return treemapNode;
  }
  return null;
}","public static ClusterTreeMapNode createFromClusterNodeTree(ClusterNode clusterNode,ColorMapping colorMapper){
  if (clusterNode != null) {
    Tree<ATreeMapNode> tree=new Tree<ATreeMapNode>();
    ClusterTreeMapNode treemapNode=new ClusterTreeMapNode();
    ClusterReferenzData referenz=new ClusterReferenzData();
    referenz.sizeReferenzValue=0;
    referenz.colorMapper=colorMapper;
    tree.setRootNode(treemapNode);
    treemapNode.setTree(tree);
    treemapNode.data=clusterNode;
    treemapNode.referenzData=referenz;
    try {
      referenz.sizeGetMehtod=clusterNode.getClass().getMethod(""String_Node_Str"",new Class[0]);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
    createHelp(treemapNode,clusterNode,referenz);
    return treemapNode;
  }
  return null;
}",0.9800469483568076
58169,"void initialize(){
  preferenceStore=new PreferenceStore(GeneralManager.CALEYDO_HOME_PATH + PREFERENCE_FILE_NAME);
  initializeDefaultPreferences();
  try {
    if (GeneralManager.VERSION == null)     throw new IllegalStateException(""String_Node_Str"");
    preferenceStore.load();
    String sStoredVersion=preferenceStore.getString(PreferenceConstants.VERSION);
    if (sStoredVersion.equals(""String_Node_Str"") || (new Integer(sStoredVersion.substring(0,1)) <= new Integer(GeneralManager.VERSION.substring(0,1)) && new Integer(sStoredVersion.substring(2,3)) < new Integer(GeneralManager.VERSION.substring(2,3)))) {
      MessageBox messageBox=new MessageBox(new Shell(),SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"" + GeneralManager.VERSION + ""String_Node_Str"");
      messageBox.open();
      FileOperations.deleteDir(new File(GeneralManager.CALEYDO_HOME_PATH));
      initCaleydoFolder();
    }
  }
 catch (  IOException e) {
    initCaleydoFolder();
  }
  if (preferenceStore.getBoolean(PreferenceConstants.USE_PROXY)) {
    System.setProperty(""String_Node_Str"",preferenceStore.getString(PreferenceConstants.PROXY_SERVER));
    System.setProperty(""String_Node_Str"",preferenceStore.getString(PreferenceConstants.PROXY_PORT));
  }
}","void initialize(){
  preferenceStore=new PreferenceStore(GeneralManager.CALEYDO_HOME_PATH + PREFERENCE_FILE_NAME);
  initializeDefaultPreferences();
  try {
    if (GeneralManager.VERSION == null)     throw new IllegalStateException(""String_Node_Str"");
    preferenceStore.load();
    String sStoredVersion=preferenceStore.getString(PreferenceConstants.VERSION);
    if (sStoredVersion.equals(""String_Node_Str"") || (new Integer(sStoredVersion.substring(0,1)) <= new Integer(GeneralManager.VERSION.substring(0,1)) && new Integer(sStoredVersion.substring(2,3)) < new Integer(GeneralManager.VERSION.substring(2,3)))) {
      MessageBox messageBox=new MessageBox(new Shell(),SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"" + GeneralManager.VERSION + ""String_Node_Str"");
      messageBox.open();
      FileOperations.deleteDirectory(new File(GeneralManager.CALEYDO_HOME_PATH));
      initCaleydoFolder();
    }
  }
 catch (  IOException e) {
    initCaleydoFolder();
  }
  if (preferenceStore.getBoolean(PreferenceConstants.USE_PROXY)) {
    System.setProperty(""String_Node_Str"",preferenceStore.getString(PreferenceConstants.PROXY_SERVER));
    System.setProperty(""String_Node_Str"",preferenceStore.getString(PreferenceConstants.PROXY_PORT));
  }
}",0.9976762199845082
58170,"private void saveDataDomains(String dirName){
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    File dataDomainFile=new File(dirName + DATA_DOMAIN_FILE_NAME);
    ArrayList<ADataDomain> dataDomains=new ArrayList<ADataDomain>();
    for (    IDataDomain dataDomain : DataDomainManager.get().getDataDomains()) {
      dataDomains.add((ADataDomain)dataDomain);
    }
    DataDomainList dataDomainList=new DataDomainList();
    dataDomainList.setDataDomains(dataDomains);
    marshaller.marshal(dataDomainList,dataDomainFile);
    for (    IDataDomain dataDomain : DataDomainManager.get().getDataDomains()) {
      if (dataDomain instanceof ASetBasedDataDomain) {
        LoadDataParameters parameters=dataDomain.getLoadDataParameters();
        try {
          FileOperations.writeInputStreamToFile(dirName + SET_DATA_FILE_NAME,GeneralManager.get().getResourceLoader().getResource(parameters.getFileName()));
        }
 catch (        FileNotFoundException e) {
          throw new IllegalStateException(""String_Node_Str"",e);
        }
        ASetBasedDataDomain setBasedDataDomain=(ASetBasedDataDomain)dataDomain;
        for (        ContentVAType type : ContentVAType.getRegisteredVATypes()) {
          saveContentVA(marshaller,dirName,setBasedDataDomain,type);
        }
        for (        StorageVAType type : StorageVAType.getRegisteredVATypes()) {
          saveStorageVA(marshaller,dirName,setBasedDataDomain,type);
        }
        TreePorter treePorter=new TreePorter();
        Tree<ClusterNode> geneTree=setBasedDataDomain.getSet().getContentData(ContentVAType.CONTENT).getContentTree();
        if (geneTree != null) {
          treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
        }
        treePorter=new TreePorter();
        Tree<ClusterNode> expTree=setBasedDataDomain.getSet().getStorageData(StorageVAType.STORAGE).getStorageTree();
        if (expTree != null) {
          treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
        }
      }
    }
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","private void saveDataDomains(String dirName){
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    File dataDomainFile=new File(dirName + DATA_DOMAIN_FILE_NAME);
    ArrayList<ADataDomain> dataDomains=new ArrayList<ADataDomain>();
    for (    IDataDomain dataDomain : DataDomainManager.get().getDataDomains()) {
      dataDomains.add((ADataDomain)dataDomain);
    }
    DataDomainList dataDomainList=new DataDomainList();
    dataDomainList.setDataDomains(dataDomains);
    marshaller.marshal(dataDomainList,dataDomainFile);
    for (    IDataDomain dataDomain : DataDomainManager.get().getDataDomains()) {
      if (dataDomain instanceof ASetBasedDataDomain) {
        LoadDataParameters parameters=dataDomain.getLoadDataParameters();
        String sourceFileName=parameters.getFileName();
        if (sourceFileName.contains(RECENT_PROJECT_DIR_NAME))         sourceFileName=sourceFileName.replace(RECENT_PROJECT_DIR_NAME,RECENT_PROJECT_DIR_NAME_TMP);
        try {
          FileOperations.writeInputStreamToFile(dirName + SET_DATA_FILE_NAME,GeneralManager.get().getResourceLoader().getResource(sourceFileName));
        }
 catch (        FileNotFoundException e) {
          throw new IllegalStateException(""String_Node_Str"",e);
        }
        ASetBasedDataDomain setBasedDataDomain=(ASetBasedDataDomain)dataDomain;
        for (        ContentVAType type : ContentVAType.getRegisteredVATypes()) {
          saveContentVA(marshaller,dirName,setBasedDataDomain,type);
        }
        for (        StorageVAType type : StorageVAType.getRegisteredVATypes()) {
          saveStorageVA(marshaller,dirName,setBasedDataDomain,type);
        }
        TreePorter treePorter=new TreePorter();
        Tree<ClusterNode> geneTree=setBasedDataDomain.getSet().getContentData(ContentVAType.CONTENT).getContentTree();
        if (geneTree != null) {
          treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
        }
        treePorter=new TreePorter();
        Tree<ClusterNode> expTree=setBasedDataDomain.getSet().getStorageData(StorageVAType.STORAGE).getStorageTree();
        if (expTree != null) {
          treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
        }
      }
    }
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.951338199513382
58171,"/** 
 * Saves the project into a specified zip-archive.
 * @param fileName name of the file to save the project in.
 */
public void save(String fileName){
  ZipUtils zipUtils=new ZipUtils();
  prepareDirectory(TEMP_PROJECT_DIR_NAME);
  savePluginData(TEMP_PROJECT_DIR_NAME);
  saveProjectData(TEMP_PROJECT_DIR_NAME);
  saveViewData(TEMP_PROJECT_DIR_NAME);
  zipUtils.zipDirectory(TEMP_PROJECT_DIR_NAME,fileName);
  zipUtils.deleteDirectory(TEMP_PROJECT_DIR_NAME);
}","/** 
 * Saves the project into a specified zip-archive.
 * @param fileName name of the file to save the project in.
 */
public void save(String fileName){
  ;
  FileOperations.createDirectory(TEMP_PROJECT_DIR_NAME);
  savePluginData(TEMP_PROJECT_DIR_NAME);
  saveProjectData(TEMP_PROJECT_DIR_NAME);
  saveViewData(TEMP_PROJECT_DIR_NAME);
  ZipUtils zipUtils=new ZipUtils();
  zipUtils.zipDirectory(TEMP_PROJECT_DIR_NAME,fileName);
  FileOperations.deleteDirectory(TEMP_PROJECT_DIR_NAME);
}",0.8721174004192872
58172,"/** 
 * Saves the project to the directory for the recent project
 */
public void saveRecentProject(){
  prepareDirectory(RECENT_PROJECT_DIR_NAME);
  savePluginData(RECENT_PROJECT_DIR_NAME);
  saveProjectData(RECENT_PROJECT_DIR_NAME);
  saveViewData(RECENT_PROJECT_DIR_NAME);
}","/** 
 * Saves the project to the directory for the recent project
 */
public void saveRecentProject(){
  if (new File(RECENT_PROJECT_DIR_NAME).exists())   FileOperations.renameDirectory(RECENT_PROJECT_DIR_NAME,RECENT_PROJECT_DIR_NAME_TMP);
  FileOperations.createDirectory(RECENT_PROJECT_DIR_NAME);
  savePluginData(RECENT_PROJECT_DIR_NAME);
  saveProjectData(RECENT_PROJECT_DIR_NAME);
  FileOperations.deleteDirectory(RECENT_PROJECT_DIR_NAME_TMP);
  saveViewData(RECENT_PROJECT_DIR_NAME);
}",0.7057291666666666
58173,"private SerializationManager(){
  try {
    Collection<Class<? extends AEvent>> eventTypes=getSerializeableEventTypes();
    projectTypes=new ArrayList<Class<?>>();
    projectTypes.add(DataInitializationData.class);
    projectTypes.add(DataDomainList.class);
    projectTypes.add(ViewList.class);
    projectTypes.add(ASerializedView.class);
    Class<?>[] classes=new Class<?>[eventTypes.size()];
    classes=eventTypes.toArray(classes);
    eventContext=JAXBContext.newInstance(classes);
    createNewProjectContext();
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","private SerializationManager(){
  try {
    Collection<Class<? extends AEvent>> eventTypes=getSerializeableEventTypes();
    projectTypes=new ArrayList<Class<?>>();
    projectTypes.add(DataInitializationData.class);
    projectTypes.add(DataDomainList.class);
    projectTypes.add(ViewList.class);
    Class<?>[] classes=new Class<?>[eventTypes.size()];
    classes=eventTypes.toArray(classes);
    eventContext=JAXBContext.newInstance(classes);
    createNewProjectContext();
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.962089300758214
58174,"/** 
 * Every use case needs to state all ID Categories it can handle. The string must specify which primary VAType (  {@link VAType#getPrimaryVAType()} is associated for the ID Category
 */
@Override public String getDataDomainType(){
  return dataDomainType;
}","@Override public String getDataDomainType(){
  return dataDomainType;
}",0.4264264264264264
58175,"public ASetBasedDataDomain(String dataDomainType){
  this.dataDomainType=dataDomainType;
  eventPublisher=GeneralManager.get().getEventPublisher();
  registerEventListeners();
  init();
}","public ASetBasedDataDomain(String dataDomainType){
  super();
  this.dataDomainType=dataDomainType;
  eventPublisher=GeneralManager.get().getEventPublisher();
  registerEventListeners();
  init();
}",0.9714285714285714
58176,"/** 
 * Creates the plug-in, registeres all the types needed for serialization, and loads the id mapping.
 */
@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  SerializationManager.get().registerSerializableType(GeneticDataDomain.class);
  GeneralManager.get().getXmlParserManager().parseXmlFileByName(""String_Node_Str"");
}","/** 
 * Creates the plug-in, registeres all the types needed for serialization, and loads the id mapping.
 */
@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  SerializationManager.get().registerSerializableType(GeneticDataDomain.class);
}",0.8771929824561403
58177,"/** 
 * Set a virtual array delta to reflect changes to be made due to VA operations in the selection manager. When the virtual array is managed by the selection manager the delta is also applied to the virtual array.
 * @param delta the delta containing the changes
 */
public void setVADelta(VADelta delta){
  if (virtualArray == null)   return;
  if (delta.getIDType() == iDType) {
    for (    VADeltaItem item : delta) {
switch (item.getType()) {
case REMOVE_ELEMENT:
        remove(item.getPrimaryID(),false);
      break;
case REMOVE:
    remove(virtualArray.get(item.getIndex()),false);
  break;
}
}
virtualArray.setDelta(delta);
}
}","/** 
 * Set a virtual array delta to reflect changes to be made due to VA operations in the selection manager. When the virtual array is managed by the selection manager the delta is also applied to the virtual array.
 * @param delta the delta containing the changes
 */
public void setVADelta(VADelta delta){
  if (virtualArray == null)   return;
  VADelta localDelta;
  if (delta.getIDType().getIDCategory() != iDType.getIDCategory())   throw new IllegalStateException(""String_Node_Str"");
  if (delta.getIDType() != iDType)   localDelta=DeltaConverter.convertDelta(iDType,delta);
 else   localDelta=delta;
  for (  VADeltaItem item : localDelta) {
switch (item.getType()) {
case REMOVE_ELEMENT:
      remove(item.getPrimaryID(),false);
    break;
case REMOVE:
  remove(virtualArray.get(item.getIndex()),false);
break;
}
}
virtualArray.setDelta(localDelta);
}",0.7741505662891406
58178,"private void runContentClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.contentResult=new ContentData(set.getDataDomain().getContentIDType());
  result.contentResult.setContentVA(new ContentVirtualArray(clusterState.getContentVAType(),tempResult.indices));
  result.contentResult.setContentClusterSizes(tempResult.clusterSizes);
  result.contentResult.setContentSampleElements(tempResult.sampleElements);
  tempResult.tree.initializeIDTypes(clusterState.getContentIDType());
  result.contentResult.setContentTree(tempResult.tree);
}","private void runContentClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.contentResult=new ContentData(set.getDataDomain().getContentIDType());
  result.contentResult.setContentVA(new ContentVirtualArray(clusterState.getContentVAType(),tempResult.indices));
  result.contentResult.setContentClusterSizes(tempResult.clusterSizes);
  result.contentResult.setContentSampleElements(tempResult.sampleElements);
  if (tempResult.tree != null) {
    tempResult.tree.initializeIDTypes(clusterState.getContentIDType());
    result.contentResult.setContentTree(tempResult.tree);
  }
}",0.9737010904425916
58179,"@Override public void handleContentVAUpdate(ContentVADelta delta,String info){
  contentVA.setGroupList(null);
  reactOnContentVAChanges(delta);
  setDisplayListDirty();
}","@Override public void handleContentVAUpdate(ContentVADelta delta,String info){
  contentVA.setGroupList(null);
  contentSelectionManager.setVADelta(delta);
  reactOnContentVAChanges(delta);
  setDisplayListDirty();
}",0.8837209302325582
58180,"@Override public void handleContentVAUpdate(ContentVADelta delta,String info){
  super.handleContentVAUpdate(delta,info);
  if (delta.getVAType() == ContentVAType.CONTENT_CONTEXT && contentVAType == ContentVAType.CONTENT_CONTEXT) {
    if (contentVA.size() == 0)     return;
    AffinityClusterer clusterer=new AffinityClusterer();
    ClusterState state=new ClusterState(EClustererAlgo.AFFINITY_PROPAGATION,EClustererType.CONTENT_CLUSTERING,EDistanceMeasure.EUCLIDEAN_DISTANCE);
    int contentVAID=contentVA.getID();
    state.setContentVA(contentVA);
    state.setStorageVA(storageVA);
    state.setAffinityPropClusterFactorGenes(4.0f);
    ClusterManager clusterManger=new ClusterManager(set);
    ClusterResult result=clusterManger.cluster(state);
    contentVA=result.getContentResult().getContentVA();
    contentSelectionManager.setVA(contentVA);
    contentVA.setID(contentVAID);
  }
}","@Override public void handleContentVAUpdate(ContentVADelta delta,String info){
  super.handleContentVAUpdate(delta,info);
  if (delta.getVAType() == ContentVAType.CONTENT_CONTEXT && contentVAType == ContentVAType.CONTENT_CONTEXT) {
    AffinityClusterer clusterer=new AffinityClusterer();
    ClusterState state=new ClusterState(EClustererAlgo.AFFINITY_PROPAGATION,EClustererType.CONTENT_CLUSTERING,EDistanceMeasure.EUCLIDEAN_DISTANCE);
    int contentVAID=contentVA.getID();
    state.setContentVA(contentVA);
    state.setStorageVA(storageVA);
    state.setAffinityPropClusterFactorGenes(4.0f);
    ClusterManager clusterManger=new ClusterManager(set);
    ClusterResult result=clusterManger.cluster(state);
    contentVA=result.getContentResult().getContentVA();
    contentSelectionManager.setVA(contentVA);
    contentVA.setID(contentVAID);
  }
}",0.9753581661891118
58181,"@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() == mappingDataDomain.getContentIDType()) {
    for (    SelectionDeltaItem item : selectionDelta.getAllItems()) {
      if (item.getSelectionType() == SelectionType.MOUSE_OVER) {
        iCurrentStorageIndex=item.getPrimaryID();
        break;
      }
    }
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType().getIDCategory() == mappingDataDomain.getContentIDCategory()) {
    ISelectionDelta resolvedDelta=resolveExternalSelectionDelta(selectionDelta);
    selectionManager.setDelta(resolvedDelta);
    setDisplayListDirty();
    int iPathwayHeight=pathway.getHeight();
    for (    SelectionDeltaItem item : resolvedDelta) {
      if (item.getSelectionType() != SelectionType.MOUSE_OVER && item.getSelectionType() != SelectionType.SELECTION) {
        continue;
      }
      PathwayVertexGraphItemRep vertexRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(item.getPrimaryID());
      int iViewID=iUniqueID;
      SelectedElementRep elementRep=new SelectedElementRep(mappingDataDomain.getContentIDType(),iViewID,vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(iPathwayHeight - vertexRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        connectedElementRepresentationManager.addSelection(iConnectionID,elementRep);
      }
    }
  }
}","@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() == mappingDataDomain.getStorageIDType()) {
    for (    SelectionDeltaItem item : selectionDelta.getAllItems()) {
      if (item.getSelectionType() == SelectionType.MOUSE_OVER) {
        iCurrentStorageIndex=item.getPrimaryID();
        break;
      }
    }
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType().getIDCategory() == mappingDataDomain.getContentIDCategory()) {
    ISelectionDelta resolvedDelta=resolveExternalSelectionDelta(selectionDelta);
    selectionManager.setDelta(resolvedDelta);
    setDisplayListDirty();
    int iPathwayHeight=pathway.getHeight();
    for (    SelectionDeltaItem item : resolvedDelta) {
      if (item.getSelectionType() != SelectionType.MOUSE_OVER && item.getSelectionType() != SelectionType.SELECTION) {
        continue;
      }
      PathwayVertexGraphItemRep vertexRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(item.getPrimaryID());
      int iViewID=iUniqueID;
      SelectedElementRep elementRep=new SelectedElementRep(mappingDataDomain.getContentIDType(),iViewID,vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(iPathwayHeight - vertexRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        connectedElementRepresentationManager.addSelection(iConnectionID,elementRep);
      }
    }
  }
}",0.9955780164245104
58182,"private float[] determineNodeColor(PathwayVertexGraphItemRep vertexRep){
  int iDavidID=pathwayItemManager.getDavidIdByPathwayVertexGraphItem((PathwayVertexGraphItem)vertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0));
  if (iDavidID == -1 || iDavidID == 0) {
  }
 else {
    for (    Object iExpressionIndex : idMappingManager.<Integer,Object>getIDAsSet(glPathwayView.getDataDomain().getDavidIDType(),glPathwayView.getMappingDataDomain().getContentIDType(),((Integer)iDavidID))) {
      return colorMapper.getColor(geneticDataDomain.getSet().get(glPathwayView.iCurrentStorageIndex).getFloat(EDataRepresentation.NORMALIZED,((Integer)iExpressionIndex).intValue()));
    }
  }
  return null;
}","private float[] determineNodeColor(PathwayVertexGraphItemRep vertexRep){
  int iDavidID=pathwayItemManager.getDavidIdByPathwayVertexGraphItem((PathwayVertexGraphItem)vertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0));
  if (iDavidID == -1 || iDavidID == 0)   return null;
 else {
    Set<Integer> ids=idMappingManager.<Integer,Integer>getIDAsSet(glPathwayView.getDataDomain().getDavidIDType(),glPathwayView.getMappingDataDomain().getContentIDType(),iDavidID);
    if (ids == null)     return null;
    for (    Integer iExpressionIndex : ids) {
      IStorage storage=geneticDataDomain.getSet().get(glPathwayView.iCurrentStorageIndex);
      if (storage == null)       throw new IllegalStateException(""String_Node_Str"" + glPathwayView.iCurrentStorageIndex);
      float expressionValue=storage.getFloat(EDataRepresentation.NORMALIZED,iExpressionIndex);
      return colorMapper.getColor(expressionValue);
    }
  }
  return null;
}",0.4779722389861195
58183,"/** 
 * Load data from file using a token pattern.
 */
public void doCommand(){
  createdObject=new Set();
  createdObject.setLabel(label);
  if (externalID != -1) {
    generalManager.getIDManager().mapInternalToExternalID(createdObject.getID(),externalID);
  }
  fillSets(createdObject);
  generalManager.getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + createdObject.getID() + ""String_Node_Str""+ externalID+ ""String_Node_Str""));
  dataDomain.setSet(createdObject);
}","/** 
 * Load data from file using a token pattern.
 */
public void doCommand(){
  createdObject=new Set(dataDomain);
  createdObject.setLabel(label);
  if (externalID != -1) {
    generalManager.getIDManager().mapInternalToExternalID(createdObject.getID(),externalID);
  }
  fillSets(createdObject);
  generalManager.getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + createdObject.getID() + ""String_Node_Str""+ externalID+ ""String_Node_Str""));
  dataDomain.setSet(createdObject);
}",0.9902152641878668
58184,"public void finish(){
  if (contentVA != null && contentClusterSizes != null && contentSampleElements != null) {
    isPartitionallyClustered=true;
    ContentGroupList contentGroupList=new ContentGroupList();
    int cnt=0;
    contentTree=new Tree<ClusterNode>();
    contentTree.setUseDefaultComparator(false);
    int clusterNr=0;
    ClusterNode root=new ClusterNode(contentTree,""String_Node_Str"",clusterNr++,true,-1);
    contentTree.setRootNode(root);
    ClusterNode node;
    int from=0;
    int to=0;
    for (    Integer clusterSize : contentClusterSizes) {
      node=new ClusterNode(contentTree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
      Group temp=new Group(clusterSize,false,contentSampleElements.get(cnt),SelectionType.NORMAL,node);
      contentTree.addChild(root,node);
      contentGroupList.append(temp);
      cnt++;
      to+=clusterSize;
      ClusterNode leaf;
      for (int vaIndex=from; vaIndex < to; vaIndex++) {
        Integer contentID=contentVA.get(vaIndex);
        leaf=new ClusterNode(contentTree,""String_Node_Str"" + contentID,clusterNr++,true,contentID);
        contentTree.addChild(node,leaf);
      }
      from=to;
    }
    contentVA.setGroupList(contentGroupList);
  }
 else   if (contentVA != null && contentTree != null) {
    contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
  }
  contentTree.setUseDefaultComparator(false);
}","public void finish(){
  if (contentVA != null && contentClusterSizes != null && contentSampleElements != null) {
    isPartitionallyClustered=true;
    ContentGroupList contentGroupList=new ContentGroupList();
    int cnt=0;
    contentTree=new Tree<ClusterNode>(contentIDIdType);
    contentTree.setUseDefaultComparator(false);
    int clusterNr=0;
    ClusterNode root=new ClusterNode(contentTree,""String_Node_Str"",clusterNr++,true,-1);
    contentTree.setRootNode(root);
    ClusterNode node;
    int from=0;
    int to=0;
    for (    Integer clusterSize : contentClusterSizes) {
      node=new ClusterNode(contentTree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
      Group temp=new Group(clusterSize,false,contentSampleElements.get(cnt),SelectionType.NORMAL,node);
      contentTree.addChild(root,node);
      contentGroupList.append(temp);
      cnt++;
      to+=clusterSize;
      ClusterNode leaf;
      for (int vaIndex=from; vaIndex < to; vaIndex++) {
        Integer contentID=contentVA.get(vaIndex);
        leaf=new ClusterNode(contentTree,""String_Node_Str"" + contentID,clusterNr++,true,contentID);
        contentTree.addChild(node,leaf);
      }
      from=to;
    }
    contentVA.setGroupList(contentGroupList);
  }
 else   if (contentVA != null && contentTree != null) {
    contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
  }
  contentTree.setUseDefaultComparator(false);
}",0.9946827366182204
58185,"@SuppressWarnings(""String_Node_Str"") public MetaSet(Set originalSet,Tree<ClusterNode> storageTree,ClusterNode storageTreeRoot){
  init();
  this.iUniqueID=GeneralManager.get().getIDManager().createID(EManagedObjectType.SET);
  this.isSetHomogeneous=true;
  this.externalDataRep=originalSet.getExternalDataRep();
  this.hashContentData=(HashMap<ContentVAType,ContentData>)originalSet.hashContentData.clone();
  defaultStorageData.setStorageTree(storageTree);
  defaultStorageData.setStorageTreeRoot(storageTreeRoot);
  hashStorageData.put(StorageVAType.STORAGE,defaultStorageData.clone());
}","@SuppressWarnings(""String_Node_Str"") public MetaSet(Set originalSet,Tree<ClusterNode> storageTree,ClusterNode storageTreeRoot){
  super(originalSet.getDataDomain());
  init();
  this.iUniqueID=GeneralManager.get().getIDManager().createID(EManagedObjectType.SET);
  this.isSetHomogeneous=true;
  this.externalDataRep=originalSet.getExternalDataRep();
  this.hashContentData=(HashMap<ContentVAType,ContentData>)originalSet.hashContentData.clone();
  defaultStorageData.setStorageTree(storageTree);
  defaultStorageData.setStorageTreeRoot(storageTreeRoot);
  hashStorageData.put(StorageVAType.STORAGE,defaultStorageData.clone());
}",0.9688013136289
58186,"@Override public void cluster(ClusterState clusterState){
  if (bIsNumerical == true && isSetHomogeneous == true) {
    ContentVAType contentVAType=clusterState.getContentVAType();
    if (contentVAType != null) {
      clusterState.setContentVA(getContentData(contentVAType).getContentVA());
    }
    StorageVAType storageVAType=clusterState.getStorageVAType();
    if (storageVAType != null) {
      clusterState.setStorageVA(getStorageData(storageVAType).getStorageVA());
    }
    ClusterManager clusterManager=new ClusterManager(this);
    ClusterResult result=clusterManager.cluster(clusterState);
    ContentData contentResult=result.getContentResult();
    if (contentResult != null) {
      hashContentData.put(clusterState.getContentVAType(),contentResult);
    }
    StorageData storageResult=result.getStorageResult();
    if (storageResult != null) {
      hashStorageData.put(clusterState.getStorageVAType(),storageResult);
    }
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","@Override public void cluster(ClusterState clusterState){
  if (bIsNumerical == true && isSetHomogeneous == true) {
    ContentVAType contentVAType=clusterState.getContentVAType();
    if (contentVAType != null) {
      clusterState.setContentVA(getContentData(contentVAType).getContentVA());
      clusterState.setContentIDType(dataDomain.getContentIDType());
    }
    StorageVAType storageVAType=clusterState.getStorageVAType();
    if (storageVAType != null) {
      clusterState.setStorageVA(getStorageData(storageVAType).getStorageVA());
      clusterState.setStorageIDType(dataDomain.getStorageIDType());
    }
    ClusterManager clusterManager=new ClusterManager(this);
    ClusterResult result=clusterManager.cluster(clusterState);
    ContentData contentResult=result.getContentResult();
    if (contentResult != null) {
      hashContentData.put(clusterState.getContentVAType(),contentResult);
    }
    StorageData storageResult=result.getStorageResult();
    if (storageResult != null) {
      hashStorageData.put(clusterState.getStorageVAType(),storageResult);
    }
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}",0.9369202226345084
58187,"private ContentData createContentData(ContentVAType vaType){
  ContentData contentData=new ContentData();
  ContentVirtualArray contentVA=new ContentVirtualArray(vaType);
  if (!vaType.isEmptyByDefault()) {
    for (int count=0; count < depth(); count++) {
      contentVA.append(count);
    }
  }
  contentData.setContentVA(contentVA);
  return contentData;
}","private ContentData createContentData(ContentVAType vaType){
  ContentData contentData=new ContentData(dataDomain.getContentIDType());
  ContentVirtualArray contentVA=new ContentVirtualArray(vaType);
  if (!vaType.isEmptyByDefault()) {
    for (int count=0; count < depth(); count++) {
      contentVA.append(count);
    }
  }
  contentData.setContentVA(contentVA);
  return contentData;
}",0.9612817089452604
58188,"/** 
 * Constructor for the set. Creates and initializes members and registers the set whit the set manager. Also creates a new default tree. This should not be called by implementing sub-classes.
 */
public Set(){
  super(GeneralManager.get().getIDManager().createID(EManagedObjectType.SET));
  SetManager.getInstance().registerItem(this);
  init();
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  ClusterNode root=new ClusterNode(tree,""String_Node_Str"",1,true,-1);
  tree.setRootNode(root);
  defaultStorageData.setStorageTree(tree);
  hashStorageData.put(StorageVAType.STORAGE,defaultStorageData.clone());
}","/** 
 * Constructor for the set. Creates and initializes members and registers the set whit the set manager. Also creates a new default tree. This should not be called by implementing sub-classes.
 */
public Set(ASetBasedDataDomain dataDomain){
  super(GeneralManager.get().getIDManager().createID(EManagedObjectType.SET));
  this.dataDomain=dataDomain;
  SetManager.getInstance().registerItem(this);
  init();
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  tree.initializeIDTypes(dataDomain.getStorageIDType());
  ClusterNode root=new ClusterNode(tree,""String_Node_Str"",1,true,-1);
  tree.setRootNode(root);
  defaultStorageData.setStorageTree(tree);
  hashStorageData.put(StorageVAType.STORAGE,defaultStorageData.clone());
}",0.9130111524163568
58189,"/** 
 * Load trees as specified in loadDataParameters and write them to the set. FIXME: this is not aware of possibly alternative   {@link ContentVAType}s or   {@link StorageVAType}s
 * @param loadDataParameters
 * @param set
 */
public static void loadTrees(LoadDataParameters loadDataParameters,ISet set){
  String geneTreeFileName=loadDataParameters.getGeneTreeFileName();
  if (geneTreeFileName != null) {
    if (geneTreeFileName.equals(""String_Node_Str"") == false) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + geneTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importTree(geneTreeFileName);
        tree.setUseDefaultComparator(false);
        set.getContentData(ContentVAType.CONTENT).setContentTree(tree);
      }
 catch (      JAXBException e) {
        e.printStackTrace();
      }
catch (      FileNotFoundException e) {
      }
    }
  }
  String experimentsTreeFileName=loadDataParameters.getExperimentsFileName();
  if (experimentsTreeFileName != null) {
    if (experimentsTreeFileName.equals(""String_Node_Str"") == false) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + experimentsTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importStorageTree(experimentsTreeFileName);
        set.getStorageData(StorageVAType.STORAGE).setStorageTree(tree);
      }
 catch (      JAXBException e) {
        e.printStackTrace();
      }
catch (      FileNotFoundException e) {
      }
    }
  }
}","/** 
 * Load trees as specified in loadDataParameters and write them to the set. FIXME: this is not aware of possibly alternative   {@link ContentVAType}s or   {@link StorageVAType}s
 * @param loadDataParameters
 * @param set
 */
public static void loadTrees(LoadDataParameters loadDataParameters,ISet set){
  String geneTreeFileName=loadDataParameters.getGeneTreeFileName();
  if (geneTreeFileName != null) {
    if (geneTreeFileName.equals(""String_Node_Str"") == false) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + geneTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importTree(geneTreeFileName,set.getDataDomain().getContentIDType());
        tree.setUseDefaultComparator(false);
        set.getContentData(ContentVAType.CONTENT).setContentTree(tree);
      }
 catch (      JAXBException e) {
        e.printStackTrace();
      }
catch (      FileNotFoundException e) {
      }
    }
  }
  String experimentsTreeFileName=loadDataParameters.getExperimentsFileName();
  if (experimentsTreeFileName != null) {
    if (experimentsTreeFileName.equals(""String_Node_Str"") == false) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + experimentsTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importStorageTree(experimentsTreeFileName);
        set.getStorageData(StorageVAType.STORAGE).setStorageTree(tree);
      }
 catch (      JAXBException e) {
        e.printStackTrace();
      }
catch (      FileNotFoundException e) {
      }
    }
  }
}",0.988626421697288
58190,"public Tree<ClusterNode> importStorageTree(String fileName) throws JAXBException, FileNotFoundException {
  Tree<ClusterNode> tree=importTree(fileName);
  org.caleydo.core.data.collection.set.Set set=(org.caleydo.core.data.collection.set.Set)dataDomain.getSet();
  tree.getRoot().createMetaSets(set);
  return tree;
}","public Tree<ClusterNode> importStorageTree(String fileName) throws JAXBException, FileNotFoundException {
  Tree<ClusterNode> tree=importTree(fileName,dataDomain.getStorageIDType());
  org.caleydo.core.data.collection.set.Set set=(org.caleydo.core.data.collection.set.Set)dataDomain.getSet();
  tree.getRoot().createMetaSets(set);
  return tree;
}",0.9548192771084336
58191,"/** 
 * Imports a tree with the aid of   {@link JAXBContext}.
 * @param fileName Full file name of the serialized tree
 * @return the imported tree
 * @throws JAXBException in case of a XML-serialization error
 */
public Tree<ClusterNode> importTree(String fileName) throws JAXBException, FileNotFoundException {
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  tree.initializeIDTypes(IDType.getIDType(leaveIDTypeString));
  ClusterNode rootNode=null;
  DirectedGraph<ClusterNode,DefaultEdge> graph=new DefaultDirectedGraph<ClusterNode,DefaultEdge>(DefaultEdge.class);
  JAXBContext jaxbContext=null;
  TreePorter treePorter=null;
  Unmarshaller unmarshaller;
  jaxbContext=JAXBContext.newInstance(TreePorter.class);
  unmarshaller=jaxbContext.createUnmarshaller();
  treePorter=(TreePorter)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(fileName));
  int size=(int)(treePorter.nodeSet.size() * 1.5);
  HashMap<Integer,ClusterNode> hashClusterNr=new HashMap<Integer,ClusterNode>(size);
  HashMap<String,ClusterNode> hashClusterNodes=new HashMap<String,ClusterNode>(size);
  HashMap<Integer,ArrayList<Integer>> hashLeafIDToNodeIDs=new HashMap<Integer,ArrayList<Integer>>(size);
  for (  ClusterNode node : treePorter.nodeSet) {
    graph.addVertex(node);
    hashClusterNodes.put(node.toString(),node);
    hashClusterNr.put(node.getID(),node);
    if (node.isRootNode())     rootNode=node;
    node.setTree(tree);
    node.setNode(node);
    if (node.getLeafID() >= 0) {
      if (hashLeafIDToNodeIDs.containsKey(node.getLeafID())) {
        ArrayList<Integer> alNodeIDs=hashLeafIDToNodeIDs.get(node.getLeafID());
        alNodeIDs.add(node.getID());
      }
 else {
        ArrayList<Integer> alNodeIDs=new ArrayList<Integer>();
        alNodeIDs.add(node.getID());
        hashLeafIDToNodeIDs.put(node.getLeafID(),alNodeIDs);
      }
    }
  }
  for (  String[] edge : treePorter.edges) {
    graph.addEdge(hashClusterNodes.get(edge[0]),hashClusterNodes.get(edge[1]));
  }
  tree.setHashMap(hashClusterNr);
  tree.setRootNode(rootNode);
  tree.setGraph(graph);
  tree.hashLeafIDToNodeIDs=hashLeafIDToNodeIDs;
  return tree;
}","/** 
 * Imports a tree with the aid of   {@link JAXBContext}.
 * @param fileName Full file name of the serialized tree
 * @return the imported tree
 * @throws JAXBException in case of a XML-serialization error
 */
public Tree<ClusterNode> importTree(String fileName,IDType idType) throws JAXBException, FileNotFoundException {
  Tree<ClusterNode> tree=new Tree<ClusterNode>(idType);
  tree.initializeIDTypes(IDType.getIDType(leaveIDTypeString));
  ClusterNode rootNode=null;
  DirectedGraph<ClusterNode,DefaultEdge> graph=new DefaultDirectedGraph<ClusterNode,DefaultEdge>(DefaultEdge.class);
  JAXBContext jaxbContext=null;
  TreePorter treePorter=null;
  Unmarshaller unmarshaller;
  jaxbContext=JAXBContext.newInstance(TreePorter.class);
  unmarshaller=jaxbContext.createUnmarshaller();
  treePorter=(TreePorter)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(fileName));
  int size=(int)(treePorter.nodeSet.size() * 1.5);
  HashMap<Integer,ClusterNode> hashClusterNr=new HashMap<Integer,ClusterNode>(size);
  HashMap<String,ClusterNode> hashClusterNodes=new HashMap<String,ClusterNode>(size);
  HashMap<Integer,ArrayList<Integer>> hashLeafIDToNodeIDs=new HashMap<Integer,ArrayList<Integer>>(size);
  for (  ClusterNode node : treePorter.nodeSet) {
    graph.addVertex(node);
    hashClusterNodes.put(node.toString(),node);
    hashClusterNr.put(node.getID(),node);
    if (node.isRootNode())     rootNode=node;
    node.setTree(tree);
    node.setNode(node);
    if (node.getLeafID() >= 0) {
      if (hashLeafIDToNodeIDs.containsKey(node.getLeafID())) {
        ArrayList<Integer> alNodeIDs=hashLeafIDToNodeIDs.get(node.getLeafID());
        alNodeIDs.add(node.getID());
      }
 else {
        ArrayList<Integer> alNodeIDs=new ArrayList<Integer>();
        alNodeIDs.add(node.getID());
        hashLeafIDToNodeIDs.put(node.getLeafID(),alNodeIDs);
      }
    }
  }
  for (  String[] edge : treePorter.edges) {
    graph.addEdge(hashClusterNodes.get(edge[0]),hashClusterNodes.get(edge[1]));
  }
  tree.setHashMap(hashClusterNr);
  tree.setRootNode(rootNode);
  tree.setGraph(graph);
  tree.hashLeafIDToNodeIDs=hashLeafIDToNodeIDs;
  return tree;
}",0.9953895804518212
58192,"/** 
 * Adds a new, custom selection type to the selection manager. Should only be called via a  {@link SelectionTypeEvent}
 */
public void addSelectionType(SelectionType selectionType){
  hashSelectionTypes.put(selectionType,new HashMap<Integer,Integer>());
  selectionTypes.add(selectionType);
}","/** 
 * Adds a new, custom selection type to the selection manager. Should only be called via a  {@link SelectionTypeEvent}
 */
public void addSelectionType(SelectionType selectionType){
  if (!hashSelectionTypes.containsKey(selectionType)) {
    hashSelectionTypes.put(selectionType,new HashMap<Integer,Integer>());
    selectionTypes.add(selectionType);
  }
}",0.9027355623100304
58193,"@Override public ISet createSet(){
  ISet set=new Set();
  return set;
}","@Override public ISet createSet(){
  throw new IllegalStateException(""String_Node_Str"");
}",0.6296296296296297
58194,"@Override public void setSet(ISet set){
  assert(set != null);
  set.setDataDomain(this);
  ISet oldSet=this.set;
  this.set=set;
  if (oldSet != null) {
    oldSet.destroy();
    oldSet=null;
  }
}","@Override public void setSet(ISet set){
  assert(set != null);
  ISet oldSet=this.set;
  this.set=set;
  if (oldSet != null) {
    oldSet.destroy();
    oldSet=null;
  }
}",0.926829268292683
58195,"private void runContentClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.contentResult=new ContentData();
  result.contentResult.setContentVA(new ContentVirtualArray(clusterState.getContentVAType(),tempResult.indices));
  result.contentResult.setContentClusterSizes(tempResult.clusterSizes);
  result.contentResult.setContentSampleElements(tempResult.sampleElements);
  result.contentResult.setContentTree(tempResult.tree);
}","private void runContentClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.contentResult=new ContentData(set.getDataDomain().getContentIDType());
  result.contentResult.setContentVA(new ContentVirtualArray(clusterState.getContentVAType(),tempResult.indices));
  result.contentResult.setContentClusterSizes(tempResult.clusterSizes);
  result.contentResult.setContentSampleElements(tempResult.sampleElements);
  tempResult.tree.initializeIDTypes(clusterState.getContentIDType());
  result.contentResult.setContentTree(tempResult.tree);
}",0.8524822695035461
58196,"/** 
 * Depending on the cluster state the corresponding clusterer will be called. Virtual arrays for content and storage will be returned.
 * @param clusterState All information needed ba cluster algorithm
 * @return array list of {@link IVirtualArray}s including VAs for content and storage.
 */
public ClusterResult cluster(ClusterState clusterState){
  ClusterResult clusterResult=null;
switch (clusterState.getClustererAlgo()) {
case TREE_CLUSTERER:
    clusterResult=runClustering(new TreeClusterer(),clusterState);
  break;
case COBWEB_CLUSTERER:
clusterResult=runClustering(new HierarchicalClusterer(),clusterState);
break;
case AFFINITY_PROPAGATION:
clusterResult=runClustering(new AffinityClusterer(),clusterState);
break;
case KMEANS_CLUSTERER:
clusterResult=runClustering(new KMeansClusterer(),clusterState);
}
GeneralManager.get().getEventPublisher().triggerEvent(new UpdateViewEvent());
if (clusterResult == null) {
GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
public void run(){
Shell shell=new Shell();
MessageBox messageBox=new MessageBox(shell,SWT.ERROR);
messageBox.setText(""String_Node_Str"");
messageBox.setMessage(""String_Node_Str"");
messageBox.open();
}
}
);
}
return clusterResult;
}","/** 
 * Depending on the cluster state the corresponding clusterer will be called. Virtual arrays for content and storage will be returned.
 * @param clusterState All information needed ba cluster algorithm
 * @return array list of {@link IVirtualArray}s including VAs for content and storage.
 */
public ClusterResult cluster(ClusterState clusterState){
  ClusterResult clusterResult=null;
switch (clusterState.getClustererAlgo()) {
case TREE_CLUSTERER:
    clusterResult=runClustering(new TreeClusterer(),clusterState);
  break;
case COBWEB_CLUSTERER:
clusterResult=runClustering(new HierarchicalClusterer(),clusterState);
break;
case AFFINITY_PROPAGATION:
clusterResult=runClustering(new AffinityClusterer(),clusterState);
break;
case KMEANS_CLUSTERER:
clusterResult=runClustering(new KMeansClusterer(),clusterState);
}
if (clusterResult == null) {
GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
public void run(){
Shell shell=new Shell();
MessageBox messageBox=new MessageBox(shell,SWT.ERROR);
messageBox.setText(""String_Node_Str"");
messageBox.setMessage(""String_Node_Str"");
messageBox.open();
}
}
);
}
 else {
GeneralManager.get().getEventPublisher().triggerEvent(new UpdateViewEvent());
}
return clusterResult;
}",0.9170024174053184
58197,"private void runStorageClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.storageResult=new StorageData();
  result.storageResult.setStorageVA(new StorageVirtualArray(clusterState.getStorageVAType(),tempResult.indices));
  result.storageResult.setStorageClusterSizes(tempResult.clusterSizes);
  result.storageResult.setStorageSampleElements(tempResult.sampleElements);
  if (tempResult.tree == null) {
    result.storageResult.setDefaultTree(true);
  }
 else {
    result.storageResult.setStorageTree(tempResult.tree);
    result.storageResult.setDefaultTree(false);
  }
}","private void runStorageClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.storageResult=new StorageData();
  result.storageResult.setStorageVA(new StorageVirtualArray(clusterState.getStorageVAType(),tempResult.indices));
  result.storageResult.setStorageClusterSizes(tempResult.clusterSizes);
  result.storageResult.setStorageSampleElements(tempResult.sampleElements);
  if (tempResult.tree == null) {
    result.storageResult.setDefaultTree(true);
  }
 else {
    result.storageResult.setStorageTree(tempResult.tree);
    result.storageResult.setDefaultTree(false);
  }
  result.storageResult.getStorageTree().initializeIDTypes(clusterState.getContentIDType());
}",0.9454329774614472
58198,"private TempResult cluster(ISet set,ClusterState clusterState){
  ArrayList<Integer> indices=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  int iPercentage=1;
  if (clusterState.getClustererType() == EClustererType.CONTENT_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (clusterState.getClustererType() == EClustererType.CONTENT_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  Arrays.sort(clusterAssignments);
  for (int i=0; i < data.numInstances(); i++) {
    int temp=0;
    for (    double cluster : clusters) {
      if (clusterAssignments[i] == cluster) {
        indices.add(temp);
        break;
      }
      temp++;
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(tree,""String_Node_Str"",0,true,-1);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,clusterState.getClustererType());
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  TempResult tempResult=new TempResult();
  tempResult.indices=indices;
  tempResult.tree=tree;
  return tempResult;
}","private TempResult cluster(ISet set,ClusterState clusterState){
  ArrayList<Integer> indices=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  int iPercentage=1;
  if (clusterState.getClustererType() == EClustererType.CONTENT_CLUSTERING) {
    tree=new Tree<ClusterNode>(set.getDataDomain().getContentIDType());
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
 else {
    tree=new Tree<ClusterNode>(set.getDataDomain().getStorageIDType());
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (clusterState.getClustererType() == EClustererType.CONTENT_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  Arrays.sort(clusterAssignments);
  for (int i=0; i < data.numInstances(); i++) {
    int temp=0;
    for (    double cluster : clusters) {
      if (clusterAssignments[i] == cluster) {
        indices.add(temp);
        break;
      }
      temp++;
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(tree,""String_Node_Str"",0,true,-1);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,clusterState.getClustererType());
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  TempResult tempResult=new TempResult();
  tempResult.indices=indices;
  tempResult.tree=tree;
  return tempResult;
}",0.9875303082784898
58199,"/** 
 * <p> Set a virtual array if the data you are managing with this selection manager is also managed by a virtual array. </p> <p> If you reset this virtual array at runtime the manager is completely resetted and reinitialized with the data of the virtual array </p>
 * @param virtualArray the currently active virtual array
 */
public void setVA(VA virtualArray){
  this.virtualArray=virtualArray;
}","/** 
 * <p> Set a virtual array if the data you are managing with this selection manager is also managed by a virtual array. </p>
 * @param virtualArray the currently active virtual array
 */
public void setVA(VA virtualArray){
  clearSelections();
  this.virtualArray=virtualArray;
}",0.7656477438136827
58200,"/** 
 * Replace content VA for a specific set.
 * @param setID
 * @param dataDomainType
 * @param vaType
 * @param virtualArray
 */
public void replaceContentVA(int setID,String dataDomainType,ContentVAType vaType,ContentVirtualArray virtualArray){
  if (dataDomainType != this.dataDomainType) {
    handleForeignContentVAUpdate(setID,dataDomainType,vaType,virtualArray);
    return;
  }
  ISet set;
  if (setID == this.set.getID()) {
    set=this.set;
  }
 else {
    set=this.set.getStorageData(StorageVAType.STORAGE).getStorageTreeRoot().getMetaSetFromSubTree(setID);
  }
  set.setContentVA(vaType,virtualArray.clone());
  virtualArray.setGroupList(null);
  eventPublisher.triggerEvent(new ReplaceContentVAEvent(set,dataDomainType,vaType));
}","/** 
 * Replace content VA for a specific set.
 * @param setID
 * @param dataDomainType
 * @param vaType
 * @param virtualArray
 */
public void replaceContentVA(int setID,String dataDomainType,ContentVAType vaType,ContentVirtualArray virtualArray){
  if (dataDomainType != this.dataDomainType) {
    handleForeignContentVAUpdate(setID,dataDomainType,vaType,virtualArray);
    return;
  }
  ISet set;
  if (setID == this.set.getID()) {
    set=this.set;
  }
 else {
    set=this.set.getStorageData(StorageVAType.STORAGE).getStorageTreeRoot().getMetaSetFromSubTree(setID);
  }
  set.setContentVA(vaType,virtualArray.clone());
  virtualArray.setGroupList(null);
  System.out.println(""String_Node_Str"");
  eventPublisher.triggerEvent(new ReplaceContentVAEvent(set,dataDomainType,vaType));
}",0.9732201175702156
58201,"@Override public String getStorageLabel(Object id){
  return getStorageLabel(storageIDType,id);
}","@Override public String getStorageLabel(IDType idType,Object id){
  return set.get((Integer)id).getLabel();
}",0.7475728155339806
58202,"@Override public String getContentLabel(IDType idType,Object id){
  String geneSymbol=null;
  String refSeq=null;
  return ""String_Node_Str"";
}","@Override public String getContentLabel(IDType idType,Object id){
  String geneSymbol=null;
  String refSeq=null;
  Set<String> setRefSeqIDs=idMappingManager.getIDAsSet(idType,IDType.getIDType(""String_Node_Str""),id);
  if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
    refSeq=(String)setRefSeqIDs.toArray()[0];
  }
  Set<String> setGeneSymbols=idMappingManager.getIDAsSet(contentIDType,humanReadableContentIDType,id);
  if ((setGeneSymbols != null && !setGeneSymbols.isEmpty())) {
    geneSymbol=(String)setGeneSymbols.toArray()[0];
  }
  if (geneSymbol != null)   return geneSymbol + ""String_Node_Str"" + refSeq;
 else   if (refSeq != null)   return refSeq;
 else   return ""String_Node_Str"";
}",0.3164108618654073
58203,"@Override public String getStorageLabel(IDType idType,Object id){
  return null;
}","@Override public String getStorageLabel(IDType idType,Object id){
  return super.getStorageLabel(idType,id);
}",0.8333333333333334
58204,"@Override public void init(Shell splash){
  super.init(splash);
  createUI();
  doEventLoop();
  splash.setText(""String_Node_Str"");
}","@Override public void init(Shell splash){
  super.init(splash);
  shell=splash;
  createUI();
  doEventLoop();
  splash.setText(""String_Node_Str"");
}",0.9432624113475178
58205,"/** 
 * Static method for initializing the Caleydo core. Called when initializing the workbench because XML startup the progress bar is needed
 */
public void initCore(){
  GeneralManager.get().getSWTGUIManager();
  GeneralManager.get().init(new RCPBridge());
  GeneralManager.get().getGUIBridge().init();
  if (startupProcedure == null) {
    Shell shell=display.getActiveShell();
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (projectWizardDialog.open() == Window.CANCEL) {
      shutdown();
    }
  }
  startupProcedure.init(appInitData);
  startupProcedure.execute();
  ColorMappingManager.get().initiFromPreferenceStore(EColorMappingType.GENE_EXPRESSION);
}","/** 
 * Static method for initializing the Caleydo core. Called when initializing the workbench because XML startup the progress bar is needed
 */
public void initCore(){
  GeneralManager.get().getSWTGUIManager();
  GeneralManager.get().init(new RCPBridge());
  GeneralManager.get().getGUIBridge().init();
  if (startupProcedure == null) {
    Shell shell=InteractiveSplashHandler.getShell();
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (projectWizardDialog.open() == Window.CANCEL) {
      shutdown();
    }
  }
  startupProcedure.init(appInitData);
  startupProcedure.execute();
  ColorMappingManager.get().initiFromPreferenceStore(EColorMappingType.GENE_EXPRESSION);
}",0.9757785467128028
58206,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLGrouper(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=VIEW_ID;
  hashGroups=new HashMap<Integer,GroupRepresentation>();
  dragAndDropController=new DragAndDropController(this);
  selectionTypeClicked=new SelectionType(""String_Node_Str"",new float[]{1.0f,0.0f,1.0f,0.0f},1,true,false,1.0f);
  SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(selectionTypeClicked);
  eventPublisher.triggerEvent(selectionTypeEvent);
  selectionManager.addTypeToDeltaBlacklist(selectionTypeClicked);
  renderStyle=new GrouperRenderStyle(viewFrustum);
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.PLAIN,32),true,true);
  glKeyListener=new GLGrouperKeyListener(this);
  iDraggedOverCollapseButtonID=-1;
  bHierarchyChanged=true;
  iLastUsedGroupID=0;
  bPotentialNewSelection=false;
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLGrouper(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=VIEW_ID;
  hashGroups=new HashMap<Integer,GroupRepresentation>();
  dragAndDropController=new DragAndDropController(this);
  selectionTypeClicked=new SelectionType(""String_Node_Str"",new float[]{1.0f,0.0f,1.0f,0.0f},1,true,false,1.0f);
  SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(selectionTypeClicked);
  eventPublisher.triggerEvent(selectionTypeEvent);
  renderStyle=new GrouperRenderStyle(viewFrustum);
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.PLAIN,32),true,true);
  glKeyListener=new GLGrouperKeyListener(this);
  iDraggedOverCollapseButtonID=-1;
  bHierarchyChanged=true;
  iLastUsedGroupID=0;
  bPotentialNewSelection=false;
}",0.964818763326226
58207,"@Override public void init(GL gl){
  set=dataDomain.getSet();
  storageVA=set.getStorageData(StorageVAType.STORAGE).getStorageVA();
  drawingStrategyManager=new DrawingStrategyManager(pickingManager,iUniqueID,renderStyle);
  if (set.getStorageData(storageVAType).getStorageTree() != null) {
    tree=set.getStorageData(storageVAType).getStorageTree();
    selectionManager=new SelectionManager(tree.getNodeIDType());
    initHierarchy(tree);
  }
 else {
    createNewHierarchy();
  }
}","@Override public void init(GL gl){
}",0.1381957773512476
58208,"@Override public void setDataDomain(ASetBasedDataDomain dataDomain){
  this.dataDomain=dataDomain;
}","@Override public void setDataDomain(ASetBasedDataDomain dataDomain){
  this.dataDomain=dataDomain;
  setSet(this.dataDomain.getSet());
  storageVA=set.getStorageData(StorageVAType.STORAGE).getStorageVA();
  drawingStrategyManager=new DrawingStrategyManager(pickingManager,iUniqueID,renderStyle);
  if (set.getStorageData(storageVAType).getStorageTree() != null) {
    tree=set.getStorageData(storageVAType).getStorageTree();
    selectionManager=new SelectionManager(tree.getNodeIDType());
    initHierarchy(tree);
  }
 else {
    createNewHierarchy();
  }
  selectionManager.addTypeToDeltaBlacklist(selectionTypeClicked);
}",0.2762430939226519
58209,"/** 
 * Constructor.
 */
public ClinicalDataDomain(){
  super(""String_Node_Str"");
  icon=EIconTextures.DATA_DOMAIN_CLINICAL;
}","/** 
 * Constructor.
 */
public ClinicalDataDomain(){
  super(DATA_DOMAIN_TYPE);
  icon=EIconTextures.DATA_DOMAIN_CLINICAL;
}",0.8924302788844621
58210,"/** 
 * Constructor.
 */
public GenericDataDomain(){
  super(""String_Node_Str"");
  contentLabelSingular=""String_Node_Str"";
  contentLabelPlural=""String_Node_Str"";
}","/** 
 * Constructor.
 */
public GenericDataDomain(){
  super(DATA_DOMAIN_TYPE);
  contentLabelSingular=""String_Node_Str"";
  contentLabelPlural=""String_Node_Str"";
}",0.9174311926605504
58211,"/** 
 * Constructor.
 */
public GeneticDataDomain(){
  super(""String_Node_Str"");
  icon=EIconTextures.DATA_DOMAIN_GENETIC;
  primaryContentMappingType=IDType.getIDType(""String_Node_Str"");
  humanReadableContentIDType=IDType.getIDType(""String_Node_Str"");
  humanReadableStorageIDType=IDType.getIDType(""String_Node_Str"");
  pathwayViewerMode=false;
  contentLabelSingular=""String_Node_Str"";
  contentLabelPlural=""String_Node_Str"";
}","/** 
 * Constructor.
 */
public GeneticDataDomain(){
  super(DATA_DOMAIN_TYPE);
  icon=EIconTextures.DATA_DOMAIN_GENETIC;
  primaryContentMappingType=IDType.getIDType(""String_Node_Str"");
  humanReadableContentIDType=IDType.getIDType(""String_Node_Str"");
  humanReadableStorageIDType=IDType.getIDType(""String_Node_Str"");
  pathwayViewerMode=false;
  contentLabelSingular=""String_Node_Str"";
  contentLabelPlural=""String_Node_Str"";
}",0.9615832363213038
58212,"private void createMenuContent(int davidID){
  GeneralManager generalManager=GeneralManager.get();
  String sGeneSymbol=generalManager.getIDMappingManager().getID(dataDomain.getPrimaryContentMappingType(),((GeneticDataDomain)(DataDomainManager.getInstance().getDataDomain(GeneticDataDomain.dataDomainType))).getHumanReadableContentIDType(),davidID);
  if (sGeneSymbol == ""String_Node_Str"" || sGeneSymbol == null)   sGeneSymbol=""String_Node_Str"";
  addHeading(sGeneSymbol);
  if (PathwayManager.get().isPathwayLoadingFinished()) {
    LoadPathwaysByGeneItem loadPathwaysByGeneItem=new LoadPathwaysByGeneItem();
    loadPathwaysByGeneItem.setDavid(dataDomain.getPrimaryContentMappingType(),davidID);
    addContextMenuItem(loadPathwaysByGeneItem);
    ShowPathwaysByGeneItem showPathwaysByGeneItem=new ShowPathwaysByGeneItem();
    showPathwaysByGeneItem.setDavid(dataDomain.getPrimaryContentMappingType(),davidID);
    addContextMenuItem(showPathwaysByGeneItem);
  }
  BookmarkItem addToListItem=new BookmarkItem(dataDomain.getPrimaryContentMappingType(),davidID);
  addContextMenuItem(addToListItem);
}","private void createMenuContent(int davidID){
  GeneralManager generalManager=GeneralManager.get();
  String sGeneSymbol=generalManager.getIDMappingManager().getID(dataDomain.getPrimaryContentMappingType(),((GeneticDataDomain)(DataDomainManager.getInstance().getDataDomain(dataDomain.getDataDomainType()))).getHumanReadableContentIDType(),davidID);
  if (sGeneSymbol == ""String_Node_Str"" || sGeneSymbol == null)   sGeneSymbol=""String_Node_Str"";
  addHeading(sGeneSymbol);
  if (PathwayManager.get().isPathwayLoadingFinished()) {
    LoadPathwaysByGeneItem loadPathwaysByGeneItem=new LoadPathwaysByGeneItem();
    loadPathwaysByGeneItem.setDavid(dataDomain.getPrimaryContentMappingType(),davidID);
    addContextMenuItem(loadPathwaysByGeneItem);
    ShowPathwaysByGeneItem showPathwaysByGeneItem=new ShowPathwaysByGeneItem();
    showPathwaysByGeneItem.setDavid(dataDomain.getPrimaryContentMappingType(),davidID);
    addContextMenuItem(showPathwaysByGeneItem);
  }
  BookmarkItem addToListItem=new BookmarkItem(dataDomain.getPrimaryContentMappingType(),davidID);
  addContextMenuItem(addToListItem);
}",0.983651226158038
58213,"public void handleForeignSelectionCommand(String dataDomainType,EIDCategory category,SelectionCommand selectionCommand);","public void handleForeignSelectionCommand(String dataDomainType,IDType idType,SelectionCommand selectionCommand);",0.9012875536480688
58214,"/** 
 * Interface used by   {@link ForeignSelectionCommandListener} to signal foreign selection commands. Can beimplemented in concrete classes, has no functionality in base class.
 */
@Override public void handleForeignSelectionCommand(String dataDomainType,EIDCategory category,SelectionCommand selectionCommand){
}","/** 
 * Interface used by   {@link ForeignSelectionCommandListener} to signal foreign selection commands. Can beimplemented in concrete classes, has no functionality in base class.
 */
@Override public void handleForeignSelectionCommand(String dataDomainType,IDType idType,SelectionCommand selectionCommand){
}",0.9537480063795852
58215,"@Override public void handleSelectionCommand(EIDCategory category,SelectionCommand selectionCommand){
}","@Override public void handleSelectionCommand(IDType idType,SelectionCommand selectionCommand){
}",0.8844221105527639
58216,"@Override public boolean checkIntegrity(){
  if (category == null)   throw new NullPointerException(""String_Node_Str"");
  if (selectionCommand == null)   throw new NullPointerException(""String_Node_Str"");
  return true;
}","@Override public boolean checkIntegrity(){
  if (idType == null)   throw new NullPointerException(""String_Node_Str"");
  if (selectionCommand == null)   throw new NullPointerException(""String_Node_Str"");
  return true;
}",0.9727272727272728
58217,"@Override public void handleContentVAUpdate(ContentVADelta delta,String info){
  contentVA.setGroupList(null);
  if (delta.getIDType() == EIDType.REFSEQ_MRNA_INT)   delta=DeltaConverter.convertDelta(EIDType.EXPRESSION_INDEX,delta);
  reactOnContentVAChanges(delta);
  contentSelectionManager.setVADelta(delta);
  setDisplayListDirty();
}","@Override public void handleContentVAUpdate(ContentVADelta delta,String info){
  contentVA.setGroupList(null);
  reactOnContentVAChanges(delta);
  contentSelectionManager.setVADelta(delta);
  setDisplayListDirty();
}",0.7811934900542495
58218,"/** 
 * Handles the creation of   {@link SelectedElementRep} according to the data in a selectionDelta
 * @param selectionDelta the selection data that should be handled
 */
protected void handleConnectedElementRep(ISelectionDelta selectionDelta){
  try {
    int iStorageIndex=-1;
    int iID=-1;
    EIDType idType;
    if (selectionDelta.size() > 0) {
      for (      SelectionDeltaItem item : selectionDelta) {
        if (!(item.getSelectionType() == SelectionType.MOUSE_OVER)) {
          continue;
        }
        if (selectionDelta.getIDType() == EIDType.EXPRESSION_INDEX) {
          iStorageIndex=item.getPrimaryID();
          iID=item.getSecondaryID();
          idType=EIDType.EXPRESSION_INDEX;
        }
 else         if (selectionDelta.getSecondaryIDType() == EIDType.EXPRESSION_INDEX) {
          iStorageIndex=item.getSecondaryID();
          iID=item.getPrimaryID();
          idType=EIDType.EXPRESSION_INDEX;
        }
 else         if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX) {
          iID=item.getPrimaryID();
          iStorageIndex=iID;
          idType=EIDType.EXPERIMENT_INDEX;
        }
 else         if (selectionDelta.getIDType() == EIDType.UNSPECIFIED) {
          iStorageIndex=item.getPrimaryID();
          iID=item.getPrimaryID();
          idType=EIDType.UNSPECIFIED;
        }
 else         throw new InvalidAttributeValueException(""String_Node_Str"" + selectionDelta.getIDType());
        if (iStorageIndex == -1)         throw new IllegalArgumentException(""String_Node_Str"");
        ArrayList<SelectedElementRep> alRep=createElementRep(idType,iStorageIndex);
        if (alRep == null) {
          continue;
        }
        for (        SelectedElementRep rep : alRep) {
          if (rep == null) {
            continue;
          }
          for (          Integer iConnectionID : item.getConnectionIDs()) {
            connectedElementRepresentationManager.addSelection(iConnectionID,rep);
          }
        }
      }
    }
  }
 catch (  InvalidAttributeValueException e) {
    generalManager.getLogger().log(new Status(IStatus.WARNING,IGeneralManager.PLUGIN_ID,""String_Node_Str"",e));
  }
}","/** 
 * Handles the creation of   {@link SelectedElementRep} according to the data in a selectionDelta
 * @param selectionDelta the selection data that should be handled
 */
protected void handleConnectedElementRep(ISelectionDelta selectionDelta){
  try {
    int iStorageIndex=-1;
    int iID=-1;
    IDType idType;
    if (selectionDelta.size() > 0) {
      for (      SelectionDeltaItem item : selectionDelta) {
        if (!(item.getSelectionType() == SelectionType.MOUSE_OVER)) {
          continue;
        }
        if (selectionDelta.getIDType() == contentIDType) {
          iStorageIndex=item.getPrimaryID();
          iID=item.getSecondaryID();
          idType=contentIDType;
        }
 else         if (selectionDelta.getIDType() == storageIDType) {
          iID=item.getPrimaryID();
          iStorageIndex=iID;
          idType=storageIDType;
        }
 else         throw new InvalidAttributeValueException(""String_Node_Str"" + selectionDelta.getIDType());
        if (iStorageIndex == -1)         throw new IllegalArgumentException(""String_Node_Str"");
        ArrayList<SelectedElementRep> alRep=createElementRep(idType,iStorageIndex);
        if (alRep == null) {
          continue;
        }
        for (        SelectedElementRep rep : alRep) {
          if (rep == null) {
            continue;
          }
          for (          Integer iConnectionID : item.getConnectionIDs()) {
            connectedElementRepresentationManager.addSelection(iConnectionID,rep);
          }
        }
      }
    }
  }
 catch (  InvalidAttributeValueException e) {
    generalManager.getLogger().log(new Status(IStatus.WARNING,IGeneralManager.PLUGIN_ID,""String_Node_Str"",e));
  }
}",0.8289131565262611
58219,"@Override public void handleSelectionCommand(EIDCategory category,SelectionCommand selectionCommand){
  if (category == EIDCategory.GENE)   contentSelectionManager.executeSelectionCommand(selectionCommand);
 else   storageSelectionManager.executeSelectionCommand(selectionCommand);
  setDisplayListDirty();
}","@Override public void handleSelectionCommand(IDType idType,SelectionCommand selectionCommand){
  if (idType == contentIDType)   contentSelectionManager.executeSelectionCommand(selectionCommand);
 else   storageSelectionManager.executeSelectionCommand(selectionCommand);
  setDisplayListDirty();
}",0.5397350993377483
58220,"@Override public void setDataDomain(ASetBasedDataDomain dataDomain){
  this.dataDomain=(ASetBasedDataDomain)dataDomain;
  contentSelectionManager=this.dataDomain.getContentSelectionManager();
  storageSelectionManager=this.dataDomain.getStorageSelectionManager();
  setSet(this.dataDomain.getSet());
}","@Override public void setDataDomain(ASetBasedDataDomain dataDomain){
  this.dataDomain=(ASetBasedDataDomain)dataDomain;
  contentSelectionManager=this.dataDomain.getContentSelectionManager();
  storageSelectionManager=this.dataDomain.getStorageSelectionManager();
  contentIDType=dataDomain.getContentIDType();
  storageIDType=dataDomain.getStorageIDType();
  setSet(this.dataDomain.getSet());
}",0.8649425287356322
58221,"@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType().getCategory() == EIDCategory.GENE && dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
    contentSelectionManager.setDelta(selectionDelta);
    initForAddedElements();
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX && dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
    storageSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX && dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
    contentSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPRESSION_INDEX && dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
    contentSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX && dataDomain.getDataDomainType().equals(""String_Node_Str"")) {
    storageSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
}","@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() == contentIDType) {
    contentSelectionManager.setDelta(selectionDelta);
    initForAddedElements();
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == storageIDType) {
    storageSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(selectionDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
}",0.2520500647388864
58222,"@Override public void clearAllSelections(){
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  setDisplayListDirty();
}","@Override public void clearAllSelections(){
  connectedElementRepresentationManager.clear(contentIDType);
  connectedElementRepresentationManager.clear(storageIDType);
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  setDisplayListDirty();
}",0.8355899419729207
58223,"/** 
 * Create 0:n   {@link SelectedElementRep} for the selectionDelta
 * @param iDType TODO
 * @param selectionDelta the selection delta which should be represented
 * @throws InvalidAttributeValueException when the selectionDelta does not contain a valid type for this view
 */
protected abstract ArrayList<SelectedElementRep> createElementRep(EIDType idType,int iStorageIndex) throws InvalidAttributeValueException ;","/** 
 * Create 0:n   {@link SelectedElementRep} for the selectionDelta
 * @param iDType TODO
 * @param selectionDelta the selection delta which should be represented
 * @throws InvalidAttributeValueException when the selectionDelta does not contain a valid type for this view
 */
protected abstract ArrayList<SelectedElementRep> createElementRep(IDType idType,int iStorageIndex) throws InvalidAttributeValueException ;",0.998805256869773
58224,"/** 
 * Handles   {@link SelectionCommandEvent}s by extracting the events payload and calling the related handler
 * @param event {@link SelectionCommandEvent} to handle, other events will be ignored
 */
@Override public void handleEvent(AEvent event){
  if (event instanceof SelectionCommandEvent) {
    SelectionCommandEvent selectionCommandEvent=(SelectionCommandEvent)event;
    SelectionCommand selectionCommand=selectionCommandEvent.getSelectionCommand();
    EIDCategory category=selectionCommandEvent.getCategory();
    String dataDomainType=selectionCommandEvent.getDataDomainType();
    handler.handleForeignSelectionCommand(dataDomainType,category,selectionCommand);
  }
}","/** 
 * Handles   {@link SelectionCommandEvent}s by extracting the events payload and calling the related handler
 * @param event {@link SelectionCommandEvent} to handle, other events will be ignored
 */
@Override public void handleEvent(AEvent event){
  if (event instanceof SelectionCommandEvent) {
    SelectionCommandEvent selectionCommandEvent=(SelectionCommandEvent)event;
    SelectionCommand selectionCommand=selectionCommandEvent.getSelectionCommand();
    IDType idType=selectionCommandEvent.getIDType();
    String dataDomainType=selectionCommandEvent.getDataDomainType();
    handler.handleForeignSelectionCommand(dataDomainType,idType,selectionCommand);
  }
}",0.9579335793357934
58225,"/** 
 * Handler method to be called when a TriggerSelectionCommand event is caught that should trigger a content-selection-command by a related. by a related   {@link SelectionCommandListener}.
 * @param selectionCommands
 */
public void handleSelectionCommand(EIDCategory category,SelectionCommand selectionCommand);","/** 
 * Handler method to be called when a TriggerSelectionCommand event is caught that should trigger a content-selection-command by a related. by a related   {@link SelectionCommandListener}.
 * @param selectionCommands
 */
public void handleSelectionCommand(IDType idType,SelectionCommand selectionCommand);",0.960127591706539
58226,"/** 
 * Handles   {@link SelectionCommandEvent}s by extracting the events payload and calling the related handler
 * @param event {@link SelectionCommandEvent} to handle, other events will be ignored
 */
@Override public void handleEvent(AEvent event){
  if (event instanceof SelectionCommandEvent) {
    SelectionCommandEvent selectionCommandEvent=(SelectionCommandEvent)event;
    SelectionCommand selectionCommand=selectionCommandEvent.getSelectionCommand();
    EIDCategory category=selectionCommandEvent.getCategory();
    handler.handleSelectionCommand(category,selectionCommand);
  }
}","/** 
 * Handles   {@link SelectionCommandEvent}s by extracting the events payload and calling the related handler
 * @param event {@link SelectionCommandEvent} to handle, other events will be ignored
 */
@Override public void handleEvent(AEvent event){
  if (event instanceof SelectionCommandEvent) {
    SelectionCommandEvent selectionCommandEvent=(SelectionCommandEvent)event;
    SelectionCommand selectionCommand=selectionCommandEvent.getSelectionCommand();
    IDType idType=selectionCommandEvent.getIDType();
    handler.handleSelectionCommand(idType,selectionCommand);
  }
}",0.9582267689684568
58227,"/** 
 * Load data from file using a token pattern.
 * @see org.caleydo.core.command.ICommand#doCommand()
 */
public void doCommand(){
  LookupTableLoader loader=null;
  if (sFileName.contains(""String_Node_Str"")) {
    EOrganism eOrganism=GeneralManager.get().getOrganism();
    this.sFileName=sFileName.replace(""String_Node_Str"",eOrganism.toString());
  }
  IIDMappingManager genomeIdManager=generalManager.getIDMappingManager();
  MappingType mappingType=genomeIdManager.getMappingType(fromIDType.getTypeName() + ""String_Node_Str"" + toIDType.getTypeName());
  int iIndex=0;
  if (sFileName.equals(""String_Node_Str"")) {
    MappingType tmpMappingType=genomeIdManager.createMap(IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),false);
    Map<String,Integer> hashTmp=genomeIdManager.getMap(tmpMappingType);
    for (    Object refSeqIDObject : genomeIdManager.getMap(genomeIdManager.getMappingType(""String_Node_Str"")).values()) {
      hashTmp.put((String)refSeqIDObject,iIndex++);
    }
  }
 else   if (!sFileName.equals(""String_Node_Str"")) {
    loader=new LookupTableLoader(sFileName,fromIDType,toIDType,false);
    loader.setTokenSeperator(sLookupTableDelimiter);
    loader.setStartParsingStopParsingAtLine(iStartPareseFileAtLine,iStopParseFileAtLine);
    loader.loadData();
  }
  commandManager.runDoCommand(this);
}","/** 
 * Load data from file using a token pattern.
 * @see org.caleydo.core.command.ICommand#doCommand()
 */
public void doCommand(){
}",0.1824324324324324
58228,"public Tree(IDType leaveIDType){
  init();
  setLeaveIDType(leaveIDType);
}","public Tree(IDType leaveIDType){
  init();
  initializeIDTypes(leaveIDType);
}",0.915032679738562
58229,"/** 
 * Returns the id type of the leaves
 * @return
 */
public IDType getLeaveIDType(){
  return leaveIDType;
}","/** 
 * Returns the id type of the leaves
 * @return
 */
public IDType getLeaveIDType(){
  return leafIDType;
}",0.9865470852017936
58230,"/** 
 * Imports a tree with the aid of   {@link JAXBContext}.
 * @param fileName Full file name of the serialized tree
 * @return the imported tree
 * @throws JAXBException in case of a XML-serialization error
 */
public Tree<ClusterNode> importTree(String fileName) throws JAXBException, FileNotFoundException {
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  tree.setLeaveIDType(IDType.getIDType(leaveIDTypeString));
  ClusterNode rootNode=null;
  DirectedGraph<ClusterNode,DefaultEdge> graph=new DefaultDirectedGraph<ClusterNode,DefaultEdge>(DefaultEdge.class);
  JAXBContext jaxbContext=null;
  TreePorter treePorter=null;
  Unmarshaller unmarshaller;
  jaxbContext=JAXBContext.newInstance(TreePorter.class);
  unmarshaller=jaxbContext.createUnmarshaller();
  treePorter=(TreePorter)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(fileName));
  int size=(int)(treePorter.nodeSet.size() * 1.5);
  HashMap<Integer,ClusterNode> hashClusterNr=new HashMap<Integer,ClusterNode>(size);
  HashMap<String,ClusterNode> hashClusterNodes=new HashMap<String,ClusterNode>(size);
  HashMap<Integer,ArrayList<Integer>> hashLeafIDToNodeIDs=new HashMap<Integer,ArrayList<Integer>>(size);
  for (  ClusterNode node : treePorter.nodeSet) {
    graph.addVertex(node);
    hashClusterNodes.put(node.toString(),node);
    hashClusterNr.put(node.getID(),node);
    if (node.isRootNode())     rootNode=node;
    node.setTree(tree);
    node.setNode(node);
    if (node.getLeafID() >= 0) {
      if (hashLeafIDToNodeIDs.containsKey(node.getLeafID())) {
        ArrayList<Integer> alNodeIDs=hashLeafIDToNodeIDs.get(node.getLeafID());
        alNodeIDs.add(node.getID());
      }
 else {
        ArrayList<Integer> alNodeIDs=new ArrayList<Integer>();
        alNodeIDs.add(node.getID());
        hashLeafIDToNodeIDs.put(node.getLeafID(),alNodeIDs);
      }
    }
  }
  for (  String[] edge : treePorter.edges) {
    graph.addEdge(hashClusterNodes.get(edge[0]),hashClusterNodes.get(edge[1]));
  }
  tree.setHashMap(hashClusterNr);
  tree.setRootNode(rootNode);
  tree.setGraph(graph);
  tree.hashLeafIDToNodeIDs=hashLeafIDToNodeIDs;
  return tree;
}","/** 
 * Imports a tree with the aid of   {@link JAXBContext}.
 * @param fileName Full file name of the serialized tree
 * @return the imported tree
 * @throws JAXBException in case of a XML-serialization error
 */
public Tree<ClusterNode> importTree(String fileName) throws JAXBException, FileNotFoundException {
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  tree.initializeIDTypes(IDType.getIDType(leaveIDTypeString));
  ClusterNode rootNode=null;
  DirectedGraph<ClusterNode,DefaultEdge> graph=new DefaultDirectedGraph<ClusterNode,DefaultEdge>(DefaultEdge.class);
  JAXBContext jaxbContext=null;
  TreePorter treePorter=null;
  Unmarshaller unmarshaller;
  jaxbContext=JAXBContext.newInstance(TreePorter.class);
  unmarshaller=jaxbContext.createUnmarshaller();
  treePorter=(TreePorter)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(fileName));
  int size=(int)(treePorter.nodeSet.size() * 1.5);
  HashMap<Integer,ClusterNode> hashClusterNr=new HashMap<Integer,ClusterNode>(size);
  HashMap<String,ClusterNode> hashClusterNodes=new HashMap<String,ClusterNode>(size);
  HashMap<Integer,ArrayList<Integer>> hashLeafIDToNodeIDs=new HashMap<Integer,ArrayList<Integer>>(size);
  for (  ClusterNode node : treePorter.nodeSet) {
    graph.addVertex(node);
    hashClusterNodes.put(node.toString(),node);
    hashClusterNr.put(node.getID(),node);
    if (node.isRootNode())     rootNode=node;
    node.setTree(tree);
    node.setNode(node);
    if (node.getLeafID() >= 0) {
      if (hashLeafIDToNodeIDs.containsKey(node.getLeafID())) {
        ArrayList<Integer> alNodeIDs=hashLeafIDToNodeIDs.get(node.getLeafID());
        alNodeIDs.add(node.getID());
      }
 else {
        ArrayList<Integer> alNodeIDs=new ArrayList<Integer>();
        alNodeIDs.add(node.getID());
        hashLeafIDToNodeIDs.put(node.getLeafID(),alNodeIDs);
      }
    }
  }
  for (  String[] edge : treePorter.edges) {
    graph.addEdge(hashClusterNodes.get(edge[0]),hashClusterNodes.get(edge[1]));
  }
  tree.setHashMap(hashClusterNr);
  tree.setRootNode(rootNode);
  tree.setGraph(graph);
  tree.hashLeafIDToNodeIDs=hashLeafIDToNodeIDs;
  return tree;
}",0.9960602549246812
58231,"private void createMenuContent(EIDType idType,int id){
  if (idType.getCategory() == EIDCategory.GENE) {
    ContentContextMenuItemContainer geneContainer=new ContentContextMenuItemContainer();
    geneContainer.setID(EIDType.DAVID,id);
    addItemContainer(geneContainer);
    addSeparator();
  }
  RemoveBookmarkItem removeBookmarkItem=new RemoveBookmarkItem(idType,id);
  addContextMenuItem(removeBookmarkItem);
}","private void createMenuContent(IDType idType,int id){
  if (idType.getCategory() == EIDCategory.GENE) {
    ContentContextMenuItemContainer geneContainer=new ContentContextMenuItemContainer();
    geneContainer.setID(EIDType.DAVID,id);
    addItemContainer(geneContainer);
    addSeparator();
  }
  RemoveBookmarkItem removeBookmarkItem=new RemoveBookmarkItem(idType,id);
  addContextMenuItem(removeBookmarkItem);
}",0.9987966305655837
58232,"/** 
 * Set the experiment index
 */
public void setID(EIDType idType,int id){
  createMenuContent(idType,id);
}","/** 
 * Set the experiment index
 */
public void setID(IDType idType,int id){
  createMenuContent(idType,id);
}",0.9955156950672646
58233,"public void setID(EIDType idType,int id){
  Integer davidID=GeneralManager.get().getIDMappingManager().getID(idType,EIDType.DAVID,id);
  if (davidID == null)   return;
  createMenuContent(davidID);
}","public void setID(IDType idType,int id){
  Integer davidID=GeneralManager.get().getIDMappingManager().getID(idType,IDType.DAVID,id);
  if (davidID == null)   return;
  createMenuContent(davidID);
}",0.9949494949494948
58234,"private void createMenuContent(int experimentIndex){
  String sExperimentTitle=((ISetBasedDataDomain)DataDomainManager.getInstance().getDataDomain(""String_Node_Str"")).getSet().get(experimentIndex).getLabel();
  addHeading(sExperimentTitle);
  BookmarkItem addToListItem=new BookmarkItem(EIDType.EXPERIMENT_INDEX,experimentIndex);
  addContextMenuItem(addToListItem);
}","private void createMenuContent(IDType idType,int experimentIndex){
  String sExperimentTitle=((ISetBasedDataDomain)DataDomainManager.getInstance().getDataDomain(""String_Node_Str"")).getSet().get(experimentIndex).getLabel();
  addHeading(sExperimentTitle);
  BookmarkItem addToListItem=new BookmarkItem(idType,experimentIndex);
  addContextMenuItem(addToListItem);
}",0.8087431693989071
58235,"/** 
 * Set the experiment index
 */
public void setID(int experimentIndex){
  createMenuContent(experimentIndex);
}","/** 
 * Set the experiment index
 */
public void setID(IDType idType,int experimentIndex){
  createMenuContent(idType,experimentIndex);
}",0.91699604743083
58236,"public void setGenes(EIDType idType,ArrayList<Integer> genes){
  if (isGeneGroup) {
    ShowPathwaysByGenesItem pathwaysItem=new ShowPathwaysByGenesItem();
    pathwaysItem.setIDs(idType,genes);
    addContextMenuItem(pathwaysItem);
  }
}","public void setGenes(IDType idType,ArrayList<Integer> genes){
  if (isGeneGroup) {
    ShowPathwaysByGenesItem pathwaysItem=new ShowPathwaysByGenesItem();
    pathwaysItem.setIDs(idType,genes);
    addContextMenuItem(pathwaysItem);
  }
}",0.9978947368421052
58237,"/** 
 * Constructor which takes an array of storage indices.
 * @param alStorageIndex
 */
public RemoveBookmarkItem(EIDType idType,ArrayList<Integer> ids){
  super();
  setIconTexture(EIconTextures.CM_BOOKMARK);
  setText(""String_Node_Str"");
  BookmarkEvent<Integer> event=new BookmarkEvent<Integer>(idType);
  for (  Integer id : ids)   event.addBookmark(id);
  registerEvent(event);
}","/** 
 * Constructor which takes an array of storage indices.
 * @param alStorageIndex
 */
public RemoveBookmarkItem(IDType idType,ArrayList<Integer> ids){
  super();
  setIconTexture(EIconTextures.CM_BOOKMARK);
  setText(""String_Node_Str"");
  BookmarkEvent<Integer> event=new BookmarkEvent<Integer>(idType);
  for (  Integer id : ids)   event.addBookmark(id);
  registerEvent(event);
}",0.9987029831387808
58238,"/** 
 * Convenience method that automatically creates a   {@link LoadPathwaysByGeneEvent} based on a david ID
 * @param david the int code associated with a refseq
 */
public void setIDs(EIDType idType,ArrayList<Integer> genes){
  HashMap<PathwayGraph,Integer> hashPathwaysToOccurences=new HashMap<PathwayGraph,Integer>();
  for (  int gene : genes) {
    int david=GeneralManager.get().getIDMappingManager().getID(idType,EIDType.DAVID,gene);
    Set<PathwayGraph> pathwayGraphs=GeneticIDMappingHelper.get().getPathwayGraphsByGeneID(EIDType.DAVID,david);
    if (pathwayGraphs != null) {
      for (      PathwayGraph pathwayGraph : pathwayGraphs) {
        if (!hashPathwaysToOccurences.containsKey(pathwayGraph))         hashPathwaysToOccurences.put(pathwayGraph,1);
 else {
          int occurences=hashPathwaysToOccurences.get(pathwayGraph);
          occurences++;
          hashPathwaysToOccurences.put(pathwayGraph,occurences);
        }
      }
    }
  }
  ArrayList<Pair<Integer,PathwayGraph>> pathways=new ArrayList<Pair<Integer,PathwayGraph>>();
  for (  PathwayGraph pathway : hashPathwaysToOccurences.keySet()) {
    pathways.add(new Pair<Integer,PathwayGraph>(hashPathwaysToOccurences.get(pathway),pathway));
  }
  Collections.sort(pathways);
  for (int count=pathways.size() - 1; count >= 0; count--) {
    Pair<Integer,PathwayGraph> pair=pathways.get(count);
    if (pair.getFirst() > 1) {
      LoadPathwaysByPathwayIDItem item=new LoadPathwaysByPathwayIDItem(pair.getSecond().getID(),pair.getFirst());
      addSubItem(item);
    }
  }
}","/** 
 * Convenience method that automatically creates a   {@link LoadPathwaysByGeneEvent} based on a david ID
 * @param david the int code associated with a refseq
 */
public void setIDs(IDType idType,ArrayList<Integer> genes){
  HashMap<PathwayGraph,Integer> hashPathwaysToOccurences=new HashMap<PathwayGraph,Integer>();
  for (  int gene : genes) {
    int david=GeneralManager.get().getIDMappingManager().getID(idType,EIDType.DAVID,gene);
    Set<PathwayGraph> pathwayGraphs=GeneticIDMappingHelper.get().getPathwayGraphsByGeneID(EIDType.DAVID,david);
    if (pathwayGraphs != null) {
      for (      PathwayGraph pathwayGraph : pathwayGraphs) {
        if (!hashPathwaysToOccurences.containsKey(pathwayGraph))         hashPathwaysToOccurences.put(pathwayGraph,1);
 else {
          int occurences=hashPathwaysToOccurences.get(pathwayGraph);
          occurences++;
          hashPathwaysToOccurences.put(pathwayGraph,occurences);
        }
      }
    }
  }
  ArrayList<Pair<Integer,PathwayGraph>> pathways=new ArrayList<Pair<Integer,PathwayGraph>>();
  for (  PathwayGraph pathway : hashPathwaysToOccurences.keySet()) {
    pathways.add(new Pair<Integer,PathwayGraph>(hashPathwaysToOccurences.get(pathway),pathway));
  }
  Collections.sort(pathways);
  for (int count=pathways.size() - 1; count >= 0; count--) {
    Pair<Integer,PathwayGraph> pair=pathways.get(count);
    if (pair.getFirst() > 1) {
      LoadPathwaysByPathwayIDItem item=new LoadPathwaysByPathwayIDItem(pair.getSecond().getID(),pair.getFirst());
      addSubItem(item);
    }
  }
}",0.9996783531682212
58239,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType=SelectionType.NORMAL;
switch (ePickingType) {
case DENDROGRAM_CUT_SELECTION:
switch (pickingMode) {
case CLICKED:
      break;
case DRAGGED:
    bIsDraggingActive=true;
  setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case DENDROGRAM_GENE_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
ClusterNode leafNode=tree.getNodeByNumber(iExternalID);
if (contentSelectionManager.checkStatus(leafNode.getLeafID()) == false && storageSelectionManager.checkStatus(leafNode.getLeafID()) == false) break;
if (!dataDomain.getDataDomainType().equals(""String_Node_Str"")) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ContentContextMenuItemContainer geneContextMenuItemContainer=new ContentContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,leafNode.getLeafID());
contextMenu.addItemContanier(geneContextMenuItemContainer);
break;
}
if (selectionType != SelectionType.NORMAL) {
resetAllTreeSelections();
if (tree.getNodeByNumber(iExternalID) != null) tree.getNodeByNumber(iExternalID).setSelectionType(selectionType);
ISelectionDelta selectionDelta=null;
VABasedSelectionManager selectionManager=null;
selectionManager=contentSelectionManager;
selectionManager.clearSelection(selectionType);
selectionManager.addToType(selectionType,tree.getNodeByNumber(iExternalID).getLeafID());
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
case DENDROGRAM_GENE_NODE_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
}
if (selectionType != SelectionType.NORMAL && tree.getNodeByNumber(iExternalID) != null) {
resetAllTreeSelections();
tree.getNodeByNumber(iExternalID).setSelectionType(selectionType);
ClusterNodeSelectionEvent clusterNodeEvent=new ClusterNodeSelectionEvent();
SelectionDelta selectionDeltaClusterNode=new SelectionDelta(EIDType.CLUSTER_NUMBER);
selectionDeltaClusterNode.addSelection(iExternalID,selectionType);
clusterNodeEvent.setSelectionDelta(selectionDeltaClusterNode);
eventPublisher.triggerEvent(clusterNodeEvent);
}
break;
case DENDROGRAM_EXPERIMENT_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
ClusterNode leafNode=tree.getNodeByNumber(iExternalID);
if (contentSelectionManager.checkStatus(leafNode.getLeafID()) == false && storageSelectionManager.checkStatus(leafNode.getLeafID()) == false) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(leafNode.getLeafID());
contextMenu.addItemContanier(experimentContextMenuItemContainer);
break;
}
if (selectionType != SelectionType.NORMAL) {
resetAllTreeSelections();
if (tree.getNodeByNumber(iExternalID) != null) tree.getNodeByNumber(iExternalID).setSelectionType(selectionType);
ISelectionDelta selectionDelta=null;
VABasedSelectionManager selectionManager=null;
selectionManager=storageSelectionManager;
selectionManager.clearSelection(selectionType);
selectionManager.addToType(selectionType,tree.getNodeByNumber(iExternalID).getLeafID());
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType=SelectionType.NORMAL;
switch (ePickingType) {
case DENDROGRAM_CUT_SELECTION:
switch (pickingMode) {
case CLICKED:
      break;
case DRAGGED:
    bIsDraggingActive=true;
  setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case DENDROGRAM_GENE_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
ClusterNode leafNode=tree.getNodeByNumber(iExternalID);
if (contentSelectionManager.checkStatus(leafNode.getLeafID()) == false && storageSelectionManager.checkStatus(leafNode.getLeafID()) == false) break;
if (!dataDomain.getDataDomainType().equals(""String_Node_Str"")) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ContentContextMenuItemContainer geneContextMenuItemContainer=new ContentContextMenuItemContainer();
geneContextMenuItemContainer.setID(contentIDType,leafNode.getLeafID());
contextMenu.addItemContanier(geneContextMenuItemContainer);
break;
}
if (selectionType != SelectionType.NORMAL) {
resetAllTreeSelections();
if (tree.getNodeByNumber(iExternalID) != null) tree.getNodeByNumber(iExternalID).setSelectionType(selectionType);
ISelectionDelta selectionDelta=null;
VABasedSelectionManager selectionManager=null;
selectionManager=contentSelectionManager;
selectionManager.clearSelection(selectionType);
selectionManager.addToType(selectionType,tree.getNodeByNumber(iExternalID).getLeafID());
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
case DENDROGRAM_GENE_NODE_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
}
if (selectionType != SelectionType.NORMAL && tree.getNodeByNumber(iExternalID) != null) {
resetAllTreeSelections();
tree.getNodeByNumber(iExternalID).setSelectionType(selectionType);
ClusterNodeSelectionEvent clusterNodeEvent=new ClusterNodeSelectionEvent();
SelectionDelta selectionDeltaClusterNode=new SelectionDelta(EIDType.CLUSTER_NUMBER);
selectionDeltaClusterNode.addSelection(iExternalID,selectionType);
clusterNodeEvent.setSelectionDelta(selectionDeltaClusterNode);
eventPublisher.triggerEvent(clusterNodeEvent);
}
break;
case DENDROGRAM_EXPERIMENT_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
ClusterNode leafNode=tree.getNodeByNumber(iExternalID);
if (contentSelectionManager.checkStatus(leafNode.getLeafID()) == false && storageSelectionManager.checkStatus(leafNode.getLeafID()) == false) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(leafNode.getLeafID());
contextMenu.addItemContanier(experimentContextMenuItemContainer);
break;
}
if (selectionType != SelectionType.NORMAL) {
resetAllTreeSelections();
if (tree.getNodeByNumber(iExternalID) != null) tree.getNodeByNumber(iExternalID).setSelectionType(selectionType);
ISelectionDelta selectionDelta=null;
VABasedSelectionManager selectionManager=null;
selectionManager=storageSelectionManager;
selectionManager.clearSelection(selectionType);
selectionManager.addToType(selectionType,tree.getNodeByNumber(iExternalID).getLeafID());
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
}
}",0.9958993682810596
58240,"private void initializeDefaultPreferences(){
  IPreferenceStore store=GeneralManager.get().getPreferenceStore();
  store.setDefault(PreferenceConstants.P_BOOLEAN,true);
  store.setDefault(PreferenceConstants.P_CHOICE,""String_Node_Str"");
  store.setDefault(PreferenceConstants.P_STRING,""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_VALUE + ""String_Node_Str"",0.0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_VALUE + ""String_Node_Str"",0.5f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_VALUE + ""String_Node_Str"",1.0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_LEFT_SPREAD + ""String_Node_Str"",0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_LEFT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_LEFT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_RIGHT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_RIGHT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_RIGHT_SPREAD + ""String_Node_Str"",0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_COLOR + ""String_Node_Str"",""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_COLOR + ""String_Node_Str"",""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_COLOR + ""String_Node_Str"",""String_Node_Str"");
  store.setDefault(NAN_COLOR,""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + NUMBER_OF_COLOR_MARKER_POINTS,3);
  store.setDefault(PreferenceConstants.HM_NUM_RANDOM_SAMPLING_POINT,100);
  store.setDefault(PreferenceConstants.HM_NUM_SAMPLES_PER_TEXTURE,500);
  store.setDefault(PreferenceConstants.HM_NUM_SAMPLES_PER_HEATMAP,30);
  store.setDefault(PreferenceConstants.HM_LIMIT_REMOTE_TO_CONTEXT,true);
  store.setDefault(PreferenceConstants.PC_NUM_RANDOM_SAMPLING_POINT,400);
  store.setDefault(PreferenceConstants.PC_LIMIT_REMOTE_TO_CONTEXT,true);
  store.setDefault(PreferenceConstants.DATA_FILTER_LEVEL,""String_Node_Str"");
  store.setDefault(PreferenceConstants.PERFORMANCE_LEVEL,""String_Node_Str"");
  store.setDefault(PreferenceConstants.VERSION,IGeneralManager.VERSION);
  store.setDefault(PreferenceConstants.FIRST_START,true);
  store.setDefault(PreferenceConstants.PATHWAY_DATA_OK,""String_Node_Str"");
  store.setDefault(PreferenceConstants.LAST_CHOSEN_ORGANISM,EOrganism.HOMO_SAPIENS.name());
  store.setDefault(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,EPathwayDatabaseType.KEGG.name() + ""String_Node_Str"" + EPathwayDatabaseType.BIOCARTA.name());
  store.setDefault(PreferenceConstants.LAST_CHOSEN_PROJECT_MODE,""String_Node_Str"");
  store.setDefault(PreferenceConstants.USE_PROXY,false);
  store.setDefault(PreferenceConstants.BROWSER_QUERY_DATABASE,EBrowserQueryType.GeneCards.name());
  store.setDefault(PreferenceConstants.VISUAL_LINKS_STYLE,2);
  store.setDefault(PreferenceConstants.VISUAL_LINKS_ANIMATION,false);
  store.setDefault(PreferenceConstants.VISUAL_LINKS_WIDTH,2.0f);
  store.setDefault(PreferenceConstants.VISUAL_LINKS_COLOR,""String_Node_Str"");
  store.setDefault(PreferenceConstants.VISUAL_LINKS_ANIMATED_HALO,false);
}","private void initializeDefaultPreferences(){
  IPreferenceStore store=GeneralManager.get().getPreferenceStore();
  store.setDefault(PreferenceConstants.P_BOOLEAN,true);
  store.setDefault(PreferenceConstants.P_CHOICE,""String_Node_Str"");
  store.setDefault(PreferenceConstants.P_STRING,""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_VALUE + ""String_Node_Str"",0.0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_VALUE + ""String_Node_Str"",0.5f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_VALUE + ""String_Node_Str"",1.0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_LEFT_SPREAD + ""String_Node_Str"",0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_LEFT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_LEFT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_RIGHT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_RIGHT_SPREAD + ""String_Node_Str"",0.1f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_RIGHT_SPREAD + ""String_Node_Str"",0f);
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_COLOR + ""String_Node_Str"",""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_COLOR + ""String_Node_Str"",""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + COLOR_MARKER_POINT_COLOR + ""String_Node_Str"",""String_Node_Str"");
  store.setDefault(NAN_COLOR,""String_Node_Str"");
  store.setDefault(GENE_EXPRESSION_PREFIX + NUMBER_OF_COLOR_MARKER_POINTS,3);
  store.setDefault(PreferenceConstants.HM_NUM_RANDOM_SAMPLING_POINT,100);
  store.setDefault(PreferenceConstants.HM_NUM_SAMPLES_PER_TEXTURE,500);
  store.setDefault(PreferenceConstants.HM_NUM_SAMPLES_PER_HEATMAP,30);
  store.setDefault(PreferenceConstants.HM_LIMIT_REMOTE_TO_CONTEXT,true);
  store.setDefault(PreferenceConstants.PC_NUM_RANDOM_SAMPLING_POINT,400);
  store.setDefault(PreferenceConstants.PC_LIMIT_REMOTE_TO_CONTEXT,true);
  store.setDefault(PreferenceConstants.DATA_FILTER_LEVEL,""String_Node_Str"");
  store.setDefault(PreferenceConstants.PERFORMANCE_LEVEL,""String_Node_Str"");
  store.setDefault(PreferenceConstants.VERSION,IGeneralManager.VERSION);
  store.setDefault(PreferenceConstants.FIRST_START,true);
  store.setDefault(PreferenceConstants.PATHWAY_DATA_OK,""String_Node_Str"");
  store.setDefault(PreferenceConstants.LAST_CHOSEN_ORGANISM,EOrganism.HOMO_SAPIENS.name());
  store.setDefault(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,""String_Node_Str"");
  store.setDefault(PreferenceConstants.LAST_CHOSEN_PROJECT_MODE,""String_Node_Str"");
  store.setDefault(PreferenceConstants.USE_PROXY,false);
  store.setDefault(PreferenceConstants.BROWSER_QUERY_DATABASE,EBrowserQueryType.GeneCards.name());
  store.setDefault(PreferenceConstants.VISUAL_LINKS_STYLE,2);
  store.setDefault(PreferenceConstants.VISUAL_LINKS_ANIMATION,false);
  store.setDefault(PreferenceConstants.VISUAL_LINKS_WIDTH,2.0f);
  store.setDefault(PreferenceConstants.VISUAL_LINKS_COLOR,""String_Node_Str"");
  store.setDefault(PreferenceConstants.VISUAL_LINKS_ANIMATED_HALO,false);
}",0.8266993263931415
58241,"protected final boolean closeCurrentTag(){
  if (this.currentHandler == null)   throw new IllegalStateException(""String_Node_Str"");
  IXmlParserHandler buffer=currentHandler;
  if (!llXmlParserStack.isEmpty()) {
    if (!llXmlParserStack.remove(buffer))     return false;
    if (llXmlParserStack.isEmpty()) {
      currentHandler=null;
    }
 else {
      currentHandler=llXmlParserStack.getLast();
    }
  }
 else {
    currentHandler=null;
  }
  if (buffer.isHandlerDestoryedAfterClosingTag()) {
    unregisterSaxHandler(buffer.getXmlActivationTag());
    buffer.destroyHandler();
    buffer=null;
  }
 else {
  }
  return true;
}","protected final boolean closeCurrentTag(){
  if (this.currentHandler == null)   throw new IllegalStateException(""String_Node_Str"");
  IXmlParserHandler buffer=currentHandler;
  if (!llXmlParserStack.isEmpty()) {
    if (!llXmlParserStack.remove(buffer))     return false;
    if (llXmlParserStack.isEmpty()) {
      currentHandler=null;
    }
 else {
      currentHandler=llXmlParserStack.getLast();
    }
  }
 else {
    currentHandler=null;
  }
  if (buffer.isHandlerDestoryedAfterClosingTag()) {
    unregisterSaxHandler(buffer.getXmlActivationTag());
    buffer.destroyHandler();
    buffer=null;
  }
  return true;
}",0.9681020733652312
58242,"/** 
 * Create a new dataDomain
 * @param dataDomainType the plug-in id of the datadomain
 * @return
 */
public IDataDomain createDataDomain(String dataDomainType){
  IExtensionRegistry reg=Platform.getExtensionRegistry();
  IExtensionPoint ep=reg.getExtensionPoint(""String_Node_Str"");
  IExtension ext=ep.getExtension(dataDomainType);
  IConfigurationElement[] ce=ext.getConfigurationElements();
  try {
    IDataDomain dataDomain=(IDataDomain)ce[0].createExecutableExtension(""String_Node_Str"");
    register(dataDomain);
    return dataDomain;
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","/** 
 * Create a new dataDomain
 * @param dataDomainType the plug-in id of the data domain
 * @return
 */
public IDataDomain createDataDomain(String dataDomainType){
  IExtensionRegistry reg=Platform.getExtensionRegistry();
  IExtensionPoint ep=reg.getExtensionPoint(""String_Node_Str"");
  IExtension ext=ep.getExtension(dataDomainType);
  IConfigurationElement[] ce=ext.getConfigurationElements();
  try {
    IDataDomain dataDomain=(IDataDomain)ce[0].createExecutableExtension(""String_Node_Str"");
    register(dataDomain);
    return dataDomain;
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.999213217938631
58243,"/** 
 * register a concrete datadomain
 * @param dataDomain
 */
public void register(IDataDomain dataDomain){
  registeredDataDomains.put(dataDomain.getDataDomainType(),dataDomain);
}","/** 
 * register a concrete data domain
 * @param dataDomain
 */
public void register(IDataDomain dataDomain){
  registeredDataDomains.put(dataDomain.getDataDomainType(),dataDomain);
}",0.997275204359673
58244,"/** 
 * Constructor.
 */
public PathwayDataDomain(){
  dataDomainType=""String_Node_Str"";
  icon=EIconTextures.DATA_DOMAIN_PATHWAY;
  PathwayManager.get().triggerParsingPathwayDatabases();
  new PathwayLoadingProgressIndicatorAction().run(null);
  primaryIDType=IDType.getIDType(""String_Node_Str"");
}","/** 
 * Constructor.
 */
public PathwayDataDomain(){
  dataDomainType=""String_Node_Str"";
  icon=EIconTextures.DATA_DOMAIN_PATHWAY;
  primaryIDType=IDType.getIDType(""String_Node_Str"");
}",0.7644628099173554
58245,"/** 
 * Reacts on the elements of the entry tag. An example entry tag looks like this: <entry id=""1"" name=""ec:1.8.4.1"" type=""enzyme"" reaction=""rn:R01292"" link=""http://www.genome.jp/dbget-bin/www_bget?enzyme+1.8.4.1"">
 */
protected void handleEntryTag(){
  String sName=""String_Node_Str"";
  String sType=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  String sReactionId=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionId=attributes.getValue(iAttributeIndex);
    }
  }
  alCurrentVertex.clear();
  if (sType.equals(""String_Node_Str"")) {
    StringTokenizer sTokenText=new StringTokenizer(sName,""String_Node_Str"");
    Integer iDavidId=-1;
    String sTmpVertexName=""String_Node_Str"";
    Set<Integer> iSetDavidID=new HashSet<Integer>();
    while (sTokenText.hasMoreTokens()) {
      sTmpVertexName=sTokenText.nextToken();
      if (sTmpVertexName.substring(4).equals(""String_Node_Str"")) {
        continue;
      }
      try {
        iDavidId=generalManager.getIDMappingManager().getID(IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),Integer.valueOf(sTmpVertexName.substring(4)));
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
      }
      if (iDavidId == null) {
        continue;
      }
      iSetDavidID.add(iDavidId);
    }
    alCurrentVertex.addAll(pathwayItemManager.createVertexGene(sTmpVertexName,sType,sExternalLink,sReactionId,iSetDavidID));
  }
 else {
    currentVertex=pathwayItemManager.createVertex(sName,sType,sExternalLink,sReactionId);
    if (currentVertex == null)     throw new IllegalStateException(""String_Node_Str"");
    alCurrentVertex.add(currentVertex);
  }
}","/** 
 * Reacts on the elements of the entry tag. An example entry tag looks like this: <entry id=""1"" name=""ec:1.8.4.1"" type=""enzyme"" reaction=""rn:R01292"" link=""http://www.genome.jp/dbget-bin/www_bget?enzyme+1.8.4.1"">
 */
protected void handleEntryTag(){
  String sName=""String_Node_Str"";
  String sType=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  String sReactionId=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionId=attributes.getValue(iAttributeIndex);
    }
  }
  alCurrentVertex.clear();
  if (sType.equals(""String_Node_Str"")) {
    StringTokenizer sTokenText=new StringTokenizer(sName,""String_Node_Str"");
    Integer iDavidId=-1;
    String sTmpVertexName=""String_Node_Str"";
    Set<Integer> iSetDavidID=new HashSet<Integer>();
    while (sTokenText.hasMoreTokens()) {
      sTmpVertexName=sTokenText.nextToken();
      if (sTmpVertexName.substring(4).equals(""String_Node_Str"")) {
        continue;
      }
      try {
        iDavidId=generalManager.getIDMappingManager().getID(IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),Integer.valueOf(sTmpVertexName.substring(4)));
      }
 catch (      Exception e) {
      }
      if (iDavidId == null) {
        continue;
      }
      iSetDavidID.add(iDavidId);
    }
    alCurrentVertex.addAll(pathwayItemManager.createVertexGene(sTmpVertexName,sType,sExternalLink,sReactionId,iSetDavidID));
  }
 else {
    currentVertex=pathwayItemManager.createVertex(sName,sType,sExternalLink,sReactionId);
    if (currentVertex == null)     throw new IllegalStateException(""String_Node_Str"");
    alCurrentVertex.add(currentVertex);
  }
}",0.9900739176346356
58246,"/** 
 * Static method for initializing the Caleydo core. Called when initializing the workbench because XML startup the progress bar is needed
 */
public void initCore(){
  GeneralManager.get().getSWTGUIManager();
  GeneralManager.get().init(new RCPBridge());
  GeneralManager.get().getGUIBridge().init();
  if (startupProcedure == null) {
    Shell shell=new Shell();
    shell.setActive();
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (projectWizardDialog.open() == Window.CANCEL) {
      shutdown();
    }
  }
  startupProcedure.init(appInitData);
  startupProcedure.execute();
  ColorMappingManager.get().initiFromPreferenceStore(EColorMappingType.GENE_EXPRESSION);
}","/** 
 * Static method for initializing the Caleydo core. Called when initializing the workbench because XML startup the progress bar is needed
 */
public void initCore(){
  GeneralManager.get().getSWTGUIManager();
  GeneralManager.get().init(new RCPBridge());
  GeneralManager.get().getGUIBridge().init();
  if (startupProcedure == null) {
    Shell shell=display.getActiveShell();
    WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
    if (projectWizardDialog.open() == Window.CANCEL) {
      shutdown();
    }
  }
  startupProcedure.init(appInitData);
  startupProcedure.execute();
  ColorMappingManager.get().initiFromPreferenceStore(EColorMappingType.GENE_EXPRESSION);
}",0.969529085872576
58247,"private ISelectionDelta createExternalSelectionDelta(ISelectionDelta selectionDelta){
  ISelectionDelta newSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
  for (  SelectionDeltaItem item : selectionDelta) {
    for (    int iExpressionIndex : getExpressionIndicesFromPathwayVertexGraphItemRep(item.getPrimaryID())) {
      SelectionDeltaItem newItem=newSelectionDelta.addSelection(iExpressionIndex,item.getSelectionType(),item.getPrimaryID());
      newItem.setRemove(item.isRemove());
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        newSelectionDelta.addConnectionID(iExpressionIndex,iConnectionID);
      }
    }
  }
  return newSelectionDelta;
}","private ISelectionDelta createExternalSelectionDelta(ISelectionDelta selectionDelta){
  ISelectionDelta newSelectionDelta=new SelectionDelta(mappingDataDomain.getContentIDType());
  for (  SelectionDeltaItem item : selectionDelta) {
    for (    int iExpressionIndex : getExpressionIndicesFromPathwayVertexGraphItemRep(item.getPrimaryID())) {
      SelectionDeltaItem newItem=newSelectionDelta.addSelection(iExpressionIndex,item.getSelectionType(),item.getPrimaryID());
      newItem.setRemove(item.isRemove());
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        newSelectionDelta.addConnectionID(iExpressionIndex,iConnectionID);
      }
    }
  }
  return newSelectionDelta;
}",0.9655172413793104
58248,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case PATHWAY_ELEMENT_SELECTION:
    SelectionType selectionType;
  PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(iExternalID);
setDisplayListDirty();
switch (pickingMode) {
case DOUBLE_CLICKED:
selectionType=SelectionType.SELECTION;
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
PathwayGraph pathway=pathwayManager.searchPathwayByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG);
if (pathway != null) {
  LoadPathwayEvent event=new LoadPathwayEvent();
  event.setSender(this);
  event.setPathwayID(pathway.getID());
  eventPublisher.triggerEvent(event);
}
}
 else {
}
break;
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
EmbeddedPathwayContextMenuItemContainer pathwayContextMenuItemContainer=new EmbeddedPathwayContextMenuItemContainer();
pathwayContextMenuItemContainer.setPathway(pathwayManager.searchPathwayByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG));
contextMenu.addItemContanier(pathwayContextMenuItemContainer);
}
 else if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.gene) {
for (IGraphItem pathwayVertexGraphItem : tmpVertexGraphItemRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT)) {
ContentContextMenuItemContainer geneContextMenuItemContainer=new ContentContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.DAVID,pathwayItemManager.getDavidIdByPathwayVertexGraphItem((PathwayVertexGraphItem)pathwayVertexGraphItem));
contextMenu.addItemContanier(geneContextMenuItemContainer);
}
}
 else {
break;
}
default :
return;
}
if (selectionManager.checkStatus(selectionType,iExternalID)) {
break;
}
selectionManager.clearSelection(selectionType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,selectionType);
sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
selectionManager.addToType(selectionType,tmpVertexGraphItemRep.getId());
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
selectionManager.addConnectionID(iConnectionID,tmpVertexGraphItemRep.getId());
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
createConnectionLines(selectionType,iConnectionID);
ISelectionDelta selectionDelta=createExternalSelectionDelta(selectionManager.getDelta());
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(mappingDataDomain.getDataDomainType());
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case PATHWAY_ELEMENT_SELECTION:
    SelectionType selectionType;
  PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(iExternalID);
setDisplayListDirty();
switch (pickingMode) {
case DOUBLE_CLICKED:
selectionType=SelectionType.SELECTION;
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
PathwayGraph pathway=pathwayManager.searchPathwayByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG);
if (pathway != null) {
  LoadPathwayEvent event=new LoadPathwayEvent();
  event.setSender(this);
  event.setPathwayID(pathway.getID());
  eventPublisher.triggerEvent(event);
}
}
 else {
}
break;
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
EmbeddedPathwayContextMenuItemContainer pathwayContextMenuItemContainer=new EmbeddedPathwayContextMenuItemContainer();
pathwayContextMenuItemContainer.setPathway(pathwayManager.searchPathwayByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG));
contextMenu.addItemContanier(pathwayContextMenuItemContainer);
}
 else if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.gene) {
for (IGraphItem pathwayVertexGraphItem : tmpVertexGraphItemRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT)) {
ContentContextMenuItemContainer geneContextMenuItemContainer=new ContentContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.DAVID,pathwayItemManager.getDavidIdByPathwayVertexGraphItem((PathwayVertexGraphItem)pathwayVertexGraphItem));
contextMenu.addItemContanier(geneContextMenuItemContainer);
}
}
 else {
break;
}
default :
return;
}
if (selectionManager.checkStatus(selectionType,iExternalID)) {
break;
}
selectionManager.clearSelection(selectionType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,selectionType);
sendSelectionCommandEvent(mappingDataDomain.getContentIDType(),command);
selectionManager.addToType(selectionType,tmpVertexGraphItemRep.getId());
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
selectionManager.addConnectionID(iConnectionID,tmpVertexGraphItemRep.getId());
connectedElementRepresentationManager.clear(mappingDataDomain.getContentIDType());
createConnectionLines(selectionType,iConnectionID);
ISelectionDelta selectionDelta=createExternalSelectionDelta(selectionManager.getDelta());
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainType(mappingDataDomain.getDataDomainType());
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
break;
}
}",0.9800465580312604
58249,"private ArrayList<Integer> getExpressionIndicesFromPathwayVertexGraphItemRep(int iPathwayVertexGraphItemRepID){
  ArrayList<Integer> alExpressionIndex=new ArrayList<Integer>();
  for (  IGraphItem pathwayVertexGraphItem : pathwayItemManager.getItem(iPathwayVertexGraphItemRepID).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT)) {
    int iDavidID=pathwayItemManager.getDavidIdByPathwayVertexGraphItem((PathwayVertexGraphItem)pathwayVertexGraphItem);
    if (iDavidID == -1) {
      continue;
    }
    Set<Integer> iSetRefSeq=idMappingManager.getID(EIDType.DAVID,EIDType.REFSEQ_MRNA_INT,iDavidID);
    if (iSetRefSeq == null) {
      generalManager.getLogger().log(new Status(IStatus.ERROR,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + iDavidID));
      continue;
    }
    for (    Integer iRefSeqID : iSetRefSeq) {
      Set<Integer> iSetExpressionIndex=idMappingManager.getIDAsSet(EIDType.REFSEQ_MRNA_INT,EIDType.EXPRESSION_INDEX,iRefSeqID);
      if (iSetExpressionIndex == null)       continue;
      alExpressionIndex.addAll(iSetExpressionIndex);
    }
  }
  return alExpressionIndex;
}","private ArrayList<Integer> getExpressionIndicesFromPathwayVertexGraphItemRep(int iPathwayVertexGraphItemRepID){
  ArrayList<Integer> alExpressionIndex=new ArrayList<Integer>();
  for (  IGraphItem pathwayVertexGraphItem : pathwayItemManager.getItem(iPathwayVertexGraphItemRepID).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT)) {
    int davidID=pathwayItemManager.getDavidIdByPathwayVertexGraphItem((PathwayVertexGraphItem)pathwayVertexGraphItem);
    if (davidID == -1) {
      continue;
    }
    Set<Integer> iSetExpressionIndex=idMappingManager.getIDAsSet(IDType.getIDType(""String_Node_Str""),mappingDataDomain.getContentIDType(),davidID);
    if (iSetExpressionIndex == null)     continue;
    alExpressionIndex.addAll(iSetExpressionIndex);
  }
  return alExpressionIndex;
}",0.5732551944592434
58250,"@Override public void initData(){
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  iCurrentStorageIndex=-1;
  super.initData();
}","@Override public void initData(){
  connectedElementRepresentationManager.clear(mappingDataDomain.getContentIDType());
  iCurrentStorageIndex=-1;
  super.initData();
}",0.8509316770186336
58251,"@Override public void handleSelectionCommand(EIDCategory category,SelectionCommand selectionCommand){
  if (EIDCategory.GENE == category)   selectionManager.executeSelectionCommand(selectionCommand);
}","@Override public void handleSelectionCommand(IDCategory category,SelectionCommand selectionCommand){
  if (mappingDataDomain.getContentIDCategory() == category)   selectionManager.executeSelectionCommand(selectionCommand);
}",0.9129411764705884
58252,"@Override public void setDataDomain(IDataDomain dataDomain){
  this.dataDomain=dataDomain;
}","@Override public void setDataDomain(PathwayDataDomain dataDomain){
  this.dataDomain=dataDomain;
}",0.9578947368421052
58253,"private void createConnectionLines(SelectionType SelectionType,int iConnectionID){
  PathwayVertexGraphItemRep tmpPathwayVertexGraphItemRep;
  int iPathwayHeight=pathway.getHeight();
  int iViewID=iUniqueID;
  for (  int iVertexRepID : selectionManager.getElements(SelectionType)) {
    tmpPathwayVertexGraphItemRep=pathwayItemManager.getPathwayVertexRep(iVertexRepID);
    SelectedElementRep elementRep=new SelectedElementRep(EIDType.EXPRESSION_INDEX,iViewID,tmpPathwayVertexGraphItemRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(iPathwayHeight - tmpPathwayVertexGraphItemRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
    connectedElementRepresentationManager.addSelection(iConnectionID,elementRep);
  }
}","private void createConnectionLines(SelectionType SelectionType,int iConnectionID){
  PathwayVertexGraphItemRep tmpPathwayVertexGraphItemRep;
  int iPathwayHeight=pathway.getHeight();
  int iViewID=iUniqueID;
  for (  int iVertexRepID : selectionManager.getElements(SelectionType)) {
    tmpPathwayVertexGraphItemRep=pathwayItemManager.getPathwayVertexRep(iVertexRepID);
    SelectedElementRep elementRep=new SelectedElementRep(mappingDataDomain.getContentIDType(),iViewID,tmpPathwayVertexGraphItemRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(iPathwayHeight - tmpPathwayVertexGraphItemRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
    connectedElementRepresentationManager.addSelection(iConnectionID,elementRep);
  }
}",0.9704433497536946
58254,"@Override public IDataDomain getDataDomain(){
  return dataDomain;
}","@Override public PathwayDataDomain getDataDomain(){
  return dataDomain;
}",0.943661971830986
58255,"private void handleDataDomainSelection(int externalPickingID){
  HistoryNode historyNode=(HistoryNode)historyPath.getLastNode();
  if (historyNode != null) {
    for (int i=0; i < MAX_HISTORY_DATA_DOMAINS; i++) {
      String dataDomainType=historyNode.getDataDomainType();
      String interfaceType=historyNode.getInterfaceType(externalPickingID);
      if (interfaceType == null) {
        if (historyPath.getPrecedingNode(historyNode) != null && historyPath.getPrecedingNode(historyNode).size() < 1)         break;
        historyNode=(HistoryNode)historyPath.getPrecedingNode(historyNode).get(0);
        if (historyNode == null)         break;
        continue;
      }
      lastSelectedDataDomainNode=historyNode;
      if (interfaceType.contains(""String_Node_Str"")) {
        addView(historyNode,interfaceType);
      }
 else       triggerAnalyticalInterface(dataDomainType,interfaceType);
      if (!interfaceType.equals(""String_Node_Str""))       closeBrowserOverlay();
      if (interfaceType.equals(""String_Node_Str"")) {
        currentGuidanceNode=(GuidanceNode)guidancePath.getFollowingNodes(currentGuidanceNode).get(0);
      }
      currentGuidanceNode.setInterfaceVisited(interfaceType);
      break;
    }
  }
}","private void handleDataDomainSelection(int externalPickingID){
  HistoryNode historyNode=(HistoryNode)historyPath.getLastNode();
  if (historyNode != null) {
    for (int i=0; i < MAX_HISTORY_DATA_DOMAINS; i++) {
      String dataDomainType=historyNode.getDataDomainType();
      String interfaceType=historyNode.getInterfaceType(externalPickingID);
      if (interfaceType == null) {
        if (historyPath.getPrecedingNode(historyNode) != null && historyPath.getPrecedingNode(historyNode).size() < 1)         break;
        historyNode=(HistoryNode)historyPath.getPrecedingNode(historyNode).get(0);
        if (historyNode == null)         break;
        continue;
      }
      lastSelectedDataDomainNode=historyNode;
      if (interfaceType.contains(""String_Node_Str"")) {
        addView(historyNode,interfaceType);
      }
 else       triggerAnalyticalInterface(dataDomainType,interfaceType);
      if (!interfaceType.equals(""String_Node_Str""))       closeBrowserOverlay();
      if (interfaceType.equals(""String_Node_Str"") || (interfaceType.equals(""String_Node_Str"") && dataDomainType.equals(""String_Node_Str""))) {
        currentGuidanceNode=(GuidanceNode)guidancePath.getFollowingNodes(currentGuidanceNode).get(0);
      }
      currentGuidanceNode.setInterfaceVisited(interfaceType);
      break;
    }
  }
}",0.9650569297212408
58256,"private void initGuidancePath(){
  guidancePath=new Path();
  ArrayList<String> interfaces=new ArrayList<String>();
  interfaces.add(""String_Node_Str"");
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  currentGuidanceNode=(GuidanceNode)guidancePath.getLastNode();
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  interfaces.clear();
  GuidanceNode tmpNode=(GuidanceNode)guidancePath.getLastNode();
  guidancePath.addNode(tmpNode,new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(tmpNode,new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
}","private void initGuidancePath(){
  guidancePath=new Path();
  ArrayList<String> interfaces=new ArrayList<String>();
  interfaces.add(""String_Node_Str"");
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  currentGuidanceNode=(GuidanceNode)guidancePath.getLastNode();
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  interfaces.clear();
  GuidanceNode tmpNode=(GuidanceNode)guidancePath.getLastNode();
  guidancePath.addNode(tmpNode,new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(tmpNode,new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  interfaces.add(""String_Node_Str"");
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
  guidancePath.addNode(new GuidanceNode(""String_Node_Str"",interfaces,""String_Node_Str""));
  interfaces.clear();
}",0.9018136335209506
58257,"/** 
 * checks if the given views should be ignored by the toolbar. this means that the toolbar should stay as it is, e.g. when activating a help view like histogramm
 * @param viewIDs list of view-ids as used by IViewManager
 * @return true if the views should be ignored by the toolbar, false otherwise
 */
public boolean isIgnored(List<IView> views){
  boolean ignored=false;
  for (  IView view : views) {
    ToolBarInfo info;
    try {
      info=toolBarInfos.get(view.getViewType());
      if (info != null) {
        ignored|=info.ignored;
      }
    }
 catch (    IllegalArgumentException ex) {
      ignored=true;
    }
  }
  return ignored;
}","/** 
 * checks if the given views should be ignored by the toolbar. this means that the toolbar should stay as it is, e.g. when activating a help view like histogramm
 * @param viewIDs list of view-ids as used by IViewManager
 * @return true if the views should be ignored by the toolbar, false otherwise
 */
public boolean isIgnored(List<IView> views){
  boolean ignored=false;
  for (  IView view : views) {
    if (view == null)     return ignored;
    ToolBarInfo info;
    try {
      info=toolBarInfos.get(view.getViewType());
      if (info != null) {
        ignored|=info.ignored;
      }
    }
 catch (    IllegalArgumentException ex) {
      ignored=true;
    }
catch (    NullPointerException ex) {
      ex.printStackTrace();
    }
  }
  return ignored;
}",0.919831223628692
58258,"public ContentSelectionManager(EIDType idType){
  super(idType);
}","public ContentSelectionManager(IDType idType){
  super(idType);
}",0.9923664122137404
58259,"/** 
 * Returns the type which the representation belongs to. Examples are gene expression values, expression experiments. See   {@link EIDType} for details.
 * @return the type of the id
 */
public EIDType getIDType(){
  return idType;
}","/** 
 * Returns the type which the representation belongs to. Examples are gene expression values, expression experiments. See   {@link EIDType} for details.
 * @return the type of the id
 */
public IDType getIDType(){
  return idType;
}",0.9978947368421052
58260,"/** 
 * Constructor. Use this constructor for a list of points
 * @param containingViewID the unique id of the view
 * @param remoteViewID the unique id of the view the coordinates are related to
 * @param points3d the list of connection points
 */
public SelectedElementRep(EIDType idType,final int sourceViewID,int remoteViewID,final ArrayList<Vec3f> points3d){
  this.idType=idType;
  this.sourceViewID=sourceViewID;
  this.remoteViewID=remoteViewID;
  this.points=points3d;
}","/** 
 * Constructor. Use this constructor for a list of points
 * @param containingViewID the unique id of the view
 * @param remoteViewID the unique id of the view the coordinates are related to
 * @param points3d the list of connection points
 */
public SelectedElementRep(IDType idType,final int sourceViewID,int remoteViewID,final ArrayList<Vec3f> points3d){
  this.idType=idType;
  this.sourceViewID=sourceViewID;
  this.remoteViewID=remoteViewID;
  this.points=points3d;
}",0.9989550679205852
58261,"/** 
 * Constructor
 */
public SelectionManager(EIDType idType){
  this.iDType=idType;
  selectionTypes=new ArrayList<SelectionType>(SelectionType.getDefaultTypes());
  hashSelectionTypes=new HashMap<SelectionType,HashMap<Integer,Integer>>();
  hashConnectionToElementID=new HashMap<Integer,ArrayList<Integer>>();
  deltaBlackList=new HashMap<SelectionType,Boolean>(2);
  selectionDelta=new SelectionDelta(iDType);
  for (  SelectionType selectionType : selectionTypes) {
    if (selectionType != SelectionType.NORMAL)     hashSelectionTypes.put(selectionType,new HashMap<Integer,Integer>());
  }
  registerEventListeners();
}","/** 
 * Constructor
 */
public SelectionManager(IDType idType){
  this.iDType=idType;
  selectionTypes=new ArrayList<SelectionType>(SelectionType.getDefaultTypes());
  hashSelectionTypes=new HashMap<SelectionType,HashMap<Integer,Integer>>();
  hashConnectionToElementID=new HashMap<Integer,ArrayList<Integer>>();
  deltaBlackList=new HashMap<SelectionType,Boolean>(2);
  selectionDelta=new SelectionDelta(iDType);
  for (  SelectionType selectionType : selectionTypes) {
    if (selectionType != SelectionType.NORMAL)     hashSelectionTypes.put(selectionType,new HashMap<Integer,Integer>());
  }
  registerEventListeners();
}",0.9992006394884092
58262,"/** 
 * Returns the id type the storage is handling.
 * @return
 */
public EIDType getIDType(){
  return iDType;
}","/** 
 * Returns the id type the storage is handling.
 * @return
 */
public IDType getIDType(){
  return iDType;
}",0.9955947136563876
58263,"public StorageSelectionManager(EIDType idType){
  super(idType);
}","public StorageSelectionManager(IDType idType){
  super(idType);
}",0.9923664122137404
58264,"/** 
 * Constructor
 */
public VABasedSelectionManager(EIDType idType){
  super(idType);
}","/** 
 * Constructor
 */
public VABasedSelectionManager(IDType idType){
  super(idType);
}",0.994413407821229
58265,"public ContentVADelta(ContentVAType vaType,EIDType idType,EIDType secondaryIDType){
  super(vaType,idType,secondaryIDType);
}","public ContentVADelta(ContentVAType vaType,IDType idType,IDType secondaryIDType){
  super(vaType,idType,secondaryIDType);
}",0.9919354838709676
58266,"/** 
 * Convert method. TODO: only DAVID_2_EXPRESSION_INDEX is supported ATM
 * @param < T > the type of the delta, an implementation of  {@link IDelta}
 * @param targetType the target type of the id conversion
 * @param delta the src delta containing the src type
 * @return the new delta, which can be longer than the original
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends IDelta>T convertDelta(EIDType targetType,T delta){
  T newDelta=null;
  if (delta instanceof SelectionDelta) {
    newDelta=(T)new SelectionDelta(targetType,delta.getIDType());
  }
 else   if (delta instanceof VirtualArrayDelta) {
    VirtualArrayDelta vaDelta=(VirtualArrayDelta)delta;
    VirtualArrayDelta newVADelta=vaDelta.getInstance();
    newVADelta.setIDType(targetType);
    newVADelta.setVAType(vaDelta.getVAType());
    newDelta=(T)newVADelta;
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  for (  Object tempItem : delta) {
    IDeltaItem item=(IDeltaItem)tempItem;
    Set<Integer> setIDs=GeneralManager.get().getIDMappingManager().getIDAsSet(delta.getIDType(),targetType,item.getPrimaryID());
    if (setIDs == null) {
      continue;
    }
    for (    Integer id : setIDs) {
      IDeltaItem clonedItem=(IDeltaItem)item.clone();
      clonedItem.setPrimaryID(id);
      clonedItem.setSecondaryID(item.getPrimaryID());
      newDelta.add(clonedItem);
    }
  }
  return newDelta;
}","/** 
 * Convert method. TODO: only DAVID_2_EXPRESSION_INDEX is supported ATM
 * @param < T > the type of the delta, an implementation of  {@link IDelta}
 * @param targetType the target type of the id conversion
 * @param delta the src delta containing the src type
 * @return the new delta, which can be longer than the original
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends IDelta>T convertDelta(IDType targetType,T delta){
  T newDelta=null;
  if (delta instanceof SelectionDelta) {
    newDelta=(T)new SelectionDelta(targetType,delta.getIDType());
  }
 else   if (delta instanceof VirtualArrayDelta) {
    VirtualArrayDelta vaDelta=(VirtualArrayDelta)delta;
    VirtualArrayDelta newVADelta=vaDelta.getInstance();
    newVADelta.setIDType(targetType);
    newVADelta.setVAType(vaDelta.getVAType());
    newDelta=(T)newVADelta;
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  for (  Object tempItem : delta) {
    IDeltaItem item=(IDeltaItem)tempItem;
    Set<Integer> setIDs=GeneralManager.get().getIDMappingManager().getIDAsSet(delta.getIDType(),targetType,item.getPrimaryID());
    if (setIDs == null) {
      continue;
    }
    for (    Integer id : setIDs) {
      IDeltaItem clonedItem=(IDeltaItem)item.clone();
      clonedItem.setPrimaryID(id);
      clonedItem.setSecondaryID(item.getPrimaryID());
      newDelta.add(clonedItem);
    }
  }
  return newDelta;
}",0.999645515774548
58267,"/** 
 * Get the type of the id, which has to be listed in   {@link EIDType}
 * @return the type of the id
 */
public EIDType getIDType();","/** 
 * Get the type of the id, which has to be listed in   {@link EIDType}
 * @return the type of the id
 */
public IDType getIDType();",0.9963369963369964
58268,"/** 
 * Set the id type of the delta 
 */
public void setIDType(EIDType idType);","/** 
 * Set the id type of the delta 
 */
public void setIDType(IDType idType);",0.9937106918238994
58269,"/** 
 * Get the type of the secondary ID, which has to be listed in   {@link EIDType}. Returns null if no internal ID type was set
 * @return the type of the internal id
 */
public EIDType getSecondaryIDType();","/** 
 * Get the type of the secondary ID, which has to be listed in   {@link EIDType}. Returns null if no internal ID type was set
 * @return the type of the internal id
 */
public IDType getSecondaryIDType();",0.9976133651551312
58270,"@Override public EIDType getIDType(){
  return idType;
}","@Override public IDType getIDType(){
  return idType;
}",0.990990990990991
58271,"public void setIDType(EIDType idType){
  this.idType=idType;
}","public void setIDType(IDType idType){
  this.idType=idType;
}",0.991869918699187
58272,"public void setSecondaryIDType(EIDType secondaryIDType){
  this.secondaryIDType=secondaryIDType;
}","public void setSecondaryIDType(IDType secondaryIDType){
  this.secondaryIDType=secondaryIDType;
}",0.9948717948717948
58273,"@Override public EIDType getSecondaryIDType(){
  return secondaryIDType;
}","@Override public IDType getSecondaryIDType(){
  return secondaryIDType;
}",0.9931972789115646
58274,"public SelectionDelta(EIDType idType,EIDType internalIDType){
  this(idType);
  this.secondaryIDType=internalIDType;
}","public SelectionDelta(IDType idType,IDType internalIDType){
  this(idType);
  this.secondaryIDType=internalIDType;
}",0.9914529914529916
58275,"public StorageVADelta(StorageVAType vaType,EIDType idType,EIDType secondaryIDType){
  super(vaType,idType,secondaryIDType);
}","public StorageVADelta(StorageVAType vaType,IDType idType,IDType secondaryIDType){
  super(vaType,idType,secondaryIDType);
}",0.9919354838709676
58276,"@Override protected void handlePickingEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  iMouseOverObjectID=-1;
switch (pickingType) {
case REMOTE_VIEW_DRAG:
switch (pickingMode) {
case CLICKED:
      if (!dragAndDrop.isDragActionRunning()) {
        dragAndDrop.startDragAction(iExternalID);
      }
    iMouseOverObjectID=iExternalID;
  compactPoolLevel();
break;
}
break;
case REMOTE_VIEW_REMOVE:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
AGLView glView=element.getGLView();
removeView(glView);
element.setGLView(null);
containedGLViews.remove(glView);
if (element.getRemoteLevel() == poolLevel) {
compactPoolLevel();
}
setDisplayListDirty();
break;
}
break;
case REMOTE_VIEW_LOCK:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
element.lock(!element.isLocked());
break;
}
break;
case REMOTE_LEVEL_ELEMENT:
switch (pickingMode) {
case MOUSE_OVER:
case DRAGGED:
iMouseOverObjectID=iExternalID;
break;
case CLICKED:
if (dragAndDrop.isDragActionRunning()) {
break;
}
for (RemoteLevelElement element : poolLevel.getAllElements()) {
if (element.getID() == iExternalID) {
loadViewToFocusLevel(iExternalID);
break;
}
}
break;
}
break;
case REMOTE_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
if (iActiveViewID == iExternalID) {
break;
}
iActiveViewID=iExternalID;
setDisplayListDirty();
break;
case CLICKED:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case CONTEXT_MENU_SELECTION:
System.out.println(""String_Node_Str"");
break;
}
}","@Override protected void handlePickingEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case REMOTE_VIEW_DRAG:
switch (pickingMode) {
case CLICKED:
      if (!dragAndDrop.isDragActionRunning()) {
        dragAndDrop.startDragAction(iExternalID);
      }
    iMouseOverObjectID=iExternalID;
  compactPoolLevel();
break;
}
break;
case REMOTE_VIEW_REMOVE:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
AGLView glView=element.getGLView();
removeView(glView);
element.setGLView(null);
containedGLViews.remove(glView);
if (element.getRemoteLevel() == poolLevel) {
compactPoolLevel();
}
setDisplayListDirty();
break;
}
break;
case REMOTE_VIEW_LOCK:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
element.lock(!element.isLocked());
break;
}
break;
case REMOTE_LEVEL_ELEMENT:
switch (pickingMode) {
case MOUSE_OVER:
case DRAGGED:
iMouseOverObjectID=iExternalID;
break;
case CLICKED:
if (dragAndDrop.isDragActionRunning()) {
break;
}
for (RemoteLevelElement element : poolLevel.getAllElements()) {
if (element.getID() == iExternalID) {
loadViewToFocusLevel(iExternalID);
break;
}
}
break;
}
break;
case REMOTE_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
if (iActiveViewID == iExternalID) {
break;
}
iActiveViewID=iExternalID;
setDisplayListDirty();
break;
case CLICKED:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case CONTEXT_MENU_SELECTION:
System.out.println(""String_Node_Str"");
break;
}
}",0.9928263988522238
58277,"/** 
 * Unregister view from event system. Remove view from GL render loop.
 */
public void removeView(AGLView glEventListener){
  if (glEventListener != null) {
    glEventListener.destroy();
  }
}","/** 
 * Unregister view from event system. Remove view from GL render loop.
 */
public void removeView(AGLView glEventListener){
}",0.7926829268292683
58278,"private void renderNextDataDomain(final GL gl,String dataDomainType,float x,float y,boolean highlight,boolean mouseOver,float splineAchorX1,float splineAnchorX2,float splineAnchorY1,float splineAnchorY2){
  EIconTextures dataDomainIcon=null;
  float[] connectionSplineColor=new float[]{0.3f,0.3f,0.3f};
  if (!dataDomainType.equals(""String_Node_Str"")) {
    IDataDomain dataDomain=DataDomainManager.getInstance().getDataDomain(dataDomainType);
    dataDomainIcon=dataDomain.getIcon();
  }
 else   dataDomainIcon=EIconTextures.DATA_DOMAIN_ORGAN;
  gl.glTranslatef(x,y,DATA_DOMAIN_Z);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.NEXT_DATA_DOMAIN_SELECTION,dataDomainType.hashCode()));
  EIconTextures iconTextureBackgroundRound=EIconTextures.DATA_FLIPPER_DATA_ICON_BACKGROUND_ROUND;
  float r=1;
  float g=1;
  float b=1;
  float a=1;
  float yIconOffset=0.02f;
  boolean isGuidanceDomain=false;
  for (  INode guidanceNode : guidancePath.getFollowingNodes(currentGuidanceNode)) {
    if (dataDomainType.equals(guidanceNode.getDataDomainType())) {
      isGuidanceDomain=true;
      break;
    }
  }
  if (!checkPreCondition(dataDomainType,mouseOverInterface) && currentGuidanceNode.allInterfacesVisited() && isGuidanceDomain) {
    r=1f;
    g=1f;
    b=1f;
    a=1;
    String conditionText=""String_Node_Str"";
    if (dataDomainType.equals(""String_Node_Str""))     conditionText=""String_Node_Str"";
 else     if (dataDomainType.equals(""String_Node_Str""))     conditionText=""String_Node_Str"";
 else     if (dataDomainType.equals(""String_Node_Str""))     conditionText=""String_Node_Str"";
    textRenderer.setColor(0f,0f,0f,1);
    textRenderer.begin3DRendering();
    textRenderer.draw3D(conditionText,0.34f,0.0f,0,0.0028f);
    textRenderer.end3DRendering();
    connectionSplineColor=new float[]{0.3f,0f,0.0f};
    if (mouseOver) {
      r=0.3f;
      g=0.3f;
      b=0.3f;
      a=1;
      connectionSplineColor=new float[]{0.15f,0.15f,0.15f};
    }
    iconTextureBackgroundRound=EIconTextures.DATA_FLIPPER_DATA_ICON_BACKGROUND_ROUND_HIGHLIGHTED;
    yIconOffset=0.05f;
    textureManager.renderTexture(gl,EIconTextures.DATA_FLIPPER_EXCLAMATION_MARK,new Vec3f(0.25f,0.03f,0),new Vec3f(0.3f,0.03f,0),new Vec3f(0.3f,0.17f,0),new Vec3f(0.25f,0.17f,0),r,g,b,a);
  }
 else   if (mouseOver) {
    r=0.3f;
    g=0.3f;
    b=0.3f;
    a=1;
    connectionSplineColor=new float[]{0.15f,0.15f,0.15f};
  }
 else   if (highlight && currentGuidanceNode.allInterfacesVisited()) {
    r=1f;
    g=0.3f;
    b=0.3f;
    a=1;
    iconTextureBackgroundRound=EIconTextures.DATA_FLIPPER_DATA_ICON_BACKGROUND_ROUND_HIGHLIGHTED;
    yIconOffset=0.05f;
    connectionSplineColor=new float[]{0.3f,0.f,0.f};
  }
  textureManager.renderTexture(gl,iconTextureBackgroundRound,new Vec3f(0,0,0),new Vec3f(0.21f * DATA_DOMAIN_SCALING_FACTOR,0,0),new Vec3f(0.21f * DATA_DOMAIN_SCALING_FACTOR,0.2f * DATA_DOMAIN_SCALING_FACTOR,0),new Vec3f(0,0.2f * DATA_DOMAIN_SCALING_FACTOR,0),r,g,b,a);
  textureManager.renderTexture(gl,dataDomainIcon,new Vec3f(0f,yIconOffset,0.01f),new Vec3f(0.2f * DATA_DOMAIN_SCALING_FACTOR,yIconOffset * DATA_DOMAIN_SCALING_FACTOR,0.01f),new Vec3f(0.2f * DATA_DOMAIN_SCALING_FACTOR,0.18f * DATA_DOMAIN_SCALING_FACTOR,0.01f),new Vec3f(0.0f,0.18f * DATA_DOMAIN_SCALING_FACTOR,0.01f),1,1,1,1);
  gl.glPopName();
  for (  INode nextNode : guidancePath.getFollowingNodes(currentGuidanceNode)) {
    if (nextNode.getDataDomainType().equals(dataDomainType) && currentGuidanceNode.allInterfacesVisited()) {
      renderTaskDescription((GuidanceNode)nextNode,0.34f,0.07f,0.0035f);
      break;
    }
  }
  gl.glTranslatef(-x,-y,-DATA_DOMAIN_Z);
  gl.glLineWidth(5);
  float z=DATA_DOMAIN_Z;
  gl.glColor3fv(connectionSplineColor,0);
  ArrayList<Vec3f> points=new ArrayList<Vec3f>();
  points.add(new Vec3f(splineAchorX1,splineAnchorY1,z));
  points.add(new Vec3f(splineAchorX1 + Math.abs((splineAchorX1 - splineAnchorX2) / 3),splineAnchorY1,z));
  points.add(new Vec3f(splineAnchorX2 - Math.abs((splineAchorX1 - splineAnchorX2) / 3),splineAnchorY2,z));
  points.add(new Vec3f(splineAnchorX2,splineAnchorY2,z));
  renderSingleCurve(gl,points,20);
}","private void renderNextDataDomain(final GL gl,String dataDomainType,float x,float y,boolean highlight,boolean mouseOver,float splineAchorX1,float splineAnchorX2,float splineAnchorY1,float splineAnchorY2){
  EIconTextures dataDomainIcon=null;
  float[] connectionSplineColor=new float[]{0.3f,0.3f,0.3f};
  if (!dataDomainType.equals(""String_Node_Str"")) {
    IDataDomain dataDomain=DataDomainManager.getInstance().getDataDomain(dataDomainType);
    dataDomainIcon=dataDomain.getIcon();
  }
 else   dataDomainIcon=EIconTextures.DATA_DOMAIN_ORGAN;
  gl.glTranslatef(x,y,DATA_DOMAIN_Z);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.NEXT_DATA_DOMAIN_SELECTION,dataDomainType.hashCode()));
  EIconTextures iconTextureBackgroundRound=EIconTextures.DATA_FLIPPER_DATA_ICON_BACKGROUND_ROUND;
  float r=1;
  float g=1;
  float b=1;
  float a=1;
  float yIconOffset=0.02f;
  boolean isGuidanceDomain=false;
  for (  INode guidanceNode : guidancePath.getFollowingNodes(currentGuidanceNode)) {
    if (dataDomainType.equals(guidanceNode.getDataDomainType())) {
      isGuidanceDomain=true;
      break;
    }
  }
  if (!checkPreCondition(dataDomainType,mouseOverInterface) && currentGuidanceNode.oneInterfaceVisited() && isGuidanceDomain) {
    r=1f;
    g=1f;
    b=1f;
    a=1;
    String conditionText=""String_Node_Str"";
    if (dataDomainType.equals(""String_Node_Str""))     conditionText=""String_Node_Str"";
 else     if (dataDomainType.equals(""String_Node_Str""))     conditionText=""String_Node_Str"";
 else     if (dataDomainType.equals(""String_Node_Str""))     conditionText=""String_Node_Str"";
    textRenderer.setColor(0f,0f,0f,1);
    textRenderer.begin3DRendering();
    textRenderer.draw3D(conditionText,0.34f,0.0f,0,0.0028f);
    textRenderer.end3DRendering();
    connectionSplineColor=new float[]{0.3f,0f,0.0f};
    if (mouseOver) {
      r=0.3f;
      g=0.3f;
      b=0.3f;
      a=1;
      connectionSplineColor=new float[]{0.15f,0.15f,0.15f};
    }
    iconTextureBackgroundRound=EIconTextures.DATA_FLIPPER_DATA_ICON_BACKGROUND_ROUND_HIGHLIGHTED;
    yIconOffset=0.05f;
    textureManager.renderTexture(gl,EIconTextures.DATA_FLIPPER_EXCLAMATION_MARK,new Vec3f(0.25f,0.03f,0),new Vec3f(0.3f,0.03f,0),new Vec3f(0.3f,0.17f,0),new Vec3f(0.25f,0.17f,0),r,g,b,a);
  }
 else   if (mouseOver) {
    r=0.3f;
    g=0.3f;
    b=0.3f;
    a=1;
    connectionSplineColor=new float[]{0.15f,0.15f,0.15f};
  }
 else   if (highlight && currentGuidanceNode.oneInterfaceVisited()) {
    r=1f;
    g=0.3f;
    b=0.3f;
    a=1;
    iconTextureBackgroundRound=EIconTextures.DATA_FLIPPER_DATA_ICON_BACKGROUND_ROUND_HIGHLIGHTED;
    yIconOffset=0.05f;
    connectionSplineColor=new float[]{0.3f,0.f,0.f};
  }
  textureManager.renderTexture(gl,iconTextureBackgroundRound,new Vec3f(0,0,0),new Vec3f(0.21f * DATA_DOMAIN_SCALING_FACTOR,0,0),new Vec3f(0.21f * DATA_DOMAIN_SCALING_FACTOR,0.2f * DATA_DOMAIN_SCALING_FACTOR,0),new Vec3f(0,0.2f * DATA_DOMAIN_SCALING_FACTOR,0),r,g,b,a);
  textureManager.renderTexture(gl,dataDomainIcon,new Vec3f(0f,yIconOffset,0.01f),new Vec3f(0.2f * DATA_DOMAIN_SCALING_FACTOR,yIconOffset * DATA_DOMAIN_SCALING_FACTOR,0.01f),new Vec3f(0.2f * DATA_DOMAIN_SCALING_FACTOR,0.18f * DATA_DOMAIN_SCALING_FACTOR,0.01f),new Vec3f(0.0f,0.18f * DATA_DOMAIN_SCALING_FACTOR,0.01f),1,1,1,1);
  gl.glPopName();
  for (  INode nextNode : guidancePath.getFollowingNodes(currentGuidanceNode)) {
    if (nextNode.getDataDomainType().equals(dataDomainType) && currentGuidanceNode.oneInterfaceVisited()) {
      renderTaskDescription((GuidanceNode)nextNode,0.34f,0.07f,0.0035f);
      break;
    }
  }
  gl.glTranslatef(-x,-y,-DATA_DOMAIN_Z);
  gl.glLineWidth(5);
  float z=DATA_DOMAIN_Z;
  gl.glColor3fv(connectionSplineColor,0);
  ArrayList<Vec3f> points=new ArrayList<Vec3f>();
  points.add(new Vec3f(splineAchorX1,splineAnchorY1,z));
  points.add(new Vec3f(splineAchorX1 + Math.abs((splineAchorX1 - splineAnchorX2) / 3),splineAnchorY1,z));
  points.add(new Vec3f(splineAnchorX2 - Math.abs((splineAchorX1 - splineAnchorX2) / 3),splineAnchorY2,z));
  points.add(new Vec3f(splineAnchorX2,splineAnchorY2,z));
  renderSingleCurve(gl,points,20);
}",0.9909605881643968
58279,"/** 
 * Sets the attributes of this command according to the given serialized form. Inherited classes should override this method to set the view depended attributes.
 * @param serView serialized form of the view to create
 */
public void setAttributesFromSerializedForm(ASerializedView serView){
  setViewFrustum(serView.getViewFrustum());
}","/** 
 * Sets the attributes of this command according to the given serialized form. Inherited classes should override this method to set the view depended attributes.
 * @param serView serialized form of the view to create
 */
public void setAttributesFromSerializedForm(ASerializedView serView){
  setViewFrustum(serView.getViewFrustum());
  dataDomainType=serView.getDataDomainType();
}",0.936986301369863
58280,"public void setAttributes(final EProjectionMode eProjectionMode,final float fLeft,final float fRight,final float fBottom,final float fTop,final float fNear,final float fFar,final int iParentCanvasID,final float fCamOriginX,final float fCamOriginY,final float fCamOriginZ,final float fCamRotationX,final float fCamRotationY,final float fCamRotationZ,final float fCamRotationAngle){
  setAttributes(eProjectionMode,fLeft,fRight,fBottom,fTop,fNear,fFar,iParentCanvasID);
  cameraOrigin.set(fCamOriginX,fCamOriginY,fCamOriginZ);
  cameraRotation.set(new Vec3f(fCamRotationX,fCamRotationY,fCamRotationZ),(float)Math.toRadians(fCamRotationAngle));
}","/** 
 * Set attributes of the view, including camera parameters.
 * @param eProjectionMode
 * @param fLeft
 * @param fRight
 * @param fBottom
 * @param fTop
 * @param fNear
 * @param fFar
 * @param iParentCanvasID
 * @param fCamOriginX
 * @param fCamOriginY
 * @param fCamOriginZ
 * @param fCamRotationX
 * @param fCamRotationY
 * @param fCamRotationZ
 * @param fCamRotationAngle
 */
public void setAttributes(final EProjectionMode eProjectionMode,final float fLeft,final float fRight,final float fBottom,final float fTop,final float fNear,final float fFar,final int iParentCanvasID,final float fCamOriginX,final float fCamOriginY,final float fCamOriginZ,final float fCamRotationX,final float fCamRotationY,final float fCamRotationZ,final float fCamRotationAngle){
  setAttributes(eProjectionMode,fLeft,fRight,fBottom,fTop,fNear,fFar,iParentCanvasID);
  cameraOrigin.set(fCamOriginX,fCamOriginY,fCamOriginZ);
  cameraRotation.set(new Vec3f(fCamRotationX,fCamRotationY,fCamRotationZ),(float)Math.toRadians(fCamRotationAngle));
}",0.770059880239521
58281,"@Override public void doCommand(){
  IViewManager glCanvasManager=generalManager.getViewGLCanvasManager();
  if (iExternalID != -1 && iParentContainerId != -1) {
    iParentContainerId=generalManager.getIDManager().getInternalFromExternalID(iParentContainerId);
  }
  GLCaleydoCanvas glCanvas=generalManager.getViewGLCanvasManager().getCanvas(iParentContainerId);
  createdObject=glCanvasManager.createGLView(viewID,glCanvas,sLabel,viewFrustum);
  if (iExternalID != -1) {
    generalManager.getIDManager().mapInternalToExternalID(createdObject.getID(),iExternalID);
  }
  createdObject.getViewCamera().setCameraPosition(cameraOrigin);
  createdObject.getViewCamera().setCameraRotation(cameraRotation);
  commandManager.runDoCommand(this);
}","@Override public void doCommand(){
  IViewManager glCanvasManager=generalManager.getViewGLCanvasManager();
  if (iExternalID != -1 && iParentContainerId != -1) {
    iParentContainerId=generalManager.getIDManager().getInternalFromExternalID(iParentContainerId);
  }
  GLCaleydoCanvas glCanvas=generalManager.getViewGLCanvasManager().getCanvas(iParentContainerId);
  createdObject=glCanvasManager.createGLView(viewID,glCanvas,sLabel,viewFrustum);
  if (iExternalID != -1) {
    generalManager.getIDManager().mapInternalToExternalID(createdObject.getID(),iExternalID);
  }
  createdObject.getViewCamera().setCameraPosition(cameraOrigin);
  createdObject.getViewCamera().setCameraRotation(cameraRotation);
  if (createdObject instanceof IDataDomainBasedView<?>) {
    if (dataDomainType == null)     throw new IllegalStateException(""String_Node_Str"" + viewID);
    IDataDomain dataDomain=DataDomainManager.getInstance().getDataDomain(dataDomainType);
    IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)createdObject;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  createdObject.initialize();
  commandManager.runDoCommand(this);
}",0.7385416666666667
58282,"@Override public ContentData getContentData(ContentVAType vaType){
  return hashContentData.get(vaType);
}","@Override public ContentData getContentData(ContentVAType vaType){
  ContentData contentData=hashContentData.get(vaType);
  if (contentData == null) {
    contentData=createContentData(vaType);
    hashContentData.put(vaType,contentData);
  }
  return contentData;
}",0.532258064516129
58283,"public void setStorageVA(StorageVAType vaType,StorageVirtualArray virtualArray){
  StorageData storageData=hashStorageData.get(vaType);
  if (storageData == null)   storageData=defaultStorageData.clone();
  hashStorageData.put(vaType,storageData);
}","public void setStorageVA(StorageVAType vaType,StorageVirtualArray virtualArray){
  StorageData storageData=hashStorageData.get(vaType);
  if (storageData == null)   storageData=defaultStorageData.clone();
  storageData.setStorageVA(virtualArray);
  hashStorageData.put(vaType,storageData);
}",0.9222222222222224
58284,"public void replaceContentVA(EIDCategory idCategory,ContentVAType vaType,ContentVirtualArray virtualArray);","/** 
 * Replaces the content virtua
 * @param dataDomainType
 * @param vaType
 * @param virtualArray
 */
public void replaceContentVA(String dataDomainType,ContentVAType vaType,ContentVirtualArray virtualArray);",0.5408805031446541
58285,"/** 
 * Replaces the virtual array of that id category with the virtual array specified
 * @param idCategory the type of id
 * @param the type of the virtual array
 * @param virtualArray the new virtual array
 */
public void replaceStorageVA(EIDCategory idCategory,StorageVAType vaType,StorageVirtualArray virtualArray);","/** 
 * Replaces the storage virtual array with the virtual array specified, if the dataDomain matches. If the dataDomain doesn't match, the method  {@link #handleContentVAUpdateForForeignDataDomain(int,String,ContentVAType,ContentVirtualArray)} iscalled.
 * @param idCategory the type of id
 * @param the type of the virtual array
 * @param virtualArray the new virtual array
 */
public void replaceStorageVA(String dataDomainType,StorageVAType vaType,StorageVirtualArray virtualArray);",0.3172242874845105
58286,"/** 
 * Returns clustered Tree for experiments
 * @return Tree
 */
public Tree<ClusterNode> getStorageTree();","/** 
 * Returns clustered Tree for experiments
 * @return Tree
 */
@Deprecated public Tree<ClusterNode> getStorageTree();",0.9478260869565216
58287,public ContentGroupList getContentGroupList();,@Deprecated public ContentGroupList getContentGroupList();,0.8846153846153846
58288,public ContentVirtualArray getContentVA(ContentVAType vaType);,@Deprecated public ContentVirtualArray getContentVA(ContentVAType vaType);,0.9117647058823528
58289,"/** 
 * Returns the root node of the storage tree
 * @return
 */
public ClusterNode getStorageTreeRoot();","/** 
 * Returns the root node of the storage tree
 * @return
 */
@Deprecated public ClusterNode getStorageTreeRoot();",0.945945945945946
58290,"/** 
 * Set the root of the storage tree. This is only necessary if you want the root to be different from the original root of the tree (which is typically the case in meta-sets)
 * @param storageTreeRoot the root node of the storage tree
 */
public void setStorageTreeRoot(ClusterNode storageTreeRoot);","/** 
 * Set the root of the storage tree. This is only necessary if you want the root to be different from the original root of the tree (which is typically the case in meta-sets)
 * @param storageTreeRoot the root node of the storage tree
 */
@Deprecated public void setStorageTreeRoot(ClusterNode storageTreeRoot);",0.9806451612903224
58291,public StorageGroupList getStorageGroupList();,@Deprecated public StorageGroupList getStorageGroupList();,0.8846153846153846
58292,"/** 
 * Sets clustered Tree for experiments
 * @param Tree
 */
public void setStorageTree(Tree<ClusterNode> clusteredTree);","/** 
 * Sets clustered Tree for experiments
 * @param Tree
 */
@Deprecated public void setStorageTree(Tree<ClusterNode> clusteredTree);",0.9534883720930232
58293,"/** 
 * Returns clustered Tree for genes
 * @return Tree
 */
public Tree<ClusterNode> getContentTree();","/** 
 * Returns clustered Tree for genes
 * @return Tree
 */
@Deprecated public Tree<ClusterNode> getContentTree();",0.944954128440367
58294,public void setStorageGroupList(StorageGroupList groupList);,@Deprecated public void setStorageGroupList(StorageGroupList groupList);,0.9090909090909092
58295,"/** 
 * Creates a virtual array based on the list of indices supplied for the storages in the set, aka content
 * @param iAlSelections a list of indices
 * @return the id of the newly created VA
 */
public StorageVirtualArray getStorageVA(StorageVAType vaType);","/** 
 * Creates a virtual array based on the list of indices supplied for the storages in the set, aka content
 * @param iAlSelections a list of indices
 * @return the id of the newly created VA
 */
@Deprecated public StorageVirtualArray getStorageVA(StorageVAType vaType);",0.9775280898876404
58296,"/** 
 * Sets clustered Tree for genes
 * @param Tree
 */
public void setContentTree(Tree<ClusterNode> clusteredTree);","/** 
 * Sets clustered Tree for genes
 * @param Tree
 */
@Deprecated public void setContentTree(Tree<ClusterNode> clusteredTree);",0.951219512195122
58297,public void setContentGroupList(ContentGroupList groupList);,@Deprecated public void setContentGroupList(ContentGroupList groupList);,0.9090909090909092
58298,"private void runStorageClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.storageResult=new StorageData();
  result.storageResult.storageVA=new StorageVirtualArray(clusterState.getStorageVAType(),tempResult.indices);
  result.storageResult.storageClusterSizes=tempResult.clusterSizes;
  result.storageResult.storageSampleElements=tempResult.sampleElements;
  result.storageResult.storageTree=tempResult.tree;
}","private void runStorageClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.storageResult=new StorageData();
  result.storageResult.storageVA=new StorageVirtualArray(clusterState.getStorageVAType(),tempResult.indices);
  result.storageResult.storageClusterSizes=tempResult.clusterSizes;
  result.storageResult.storageSampleElements=tempResult.sampleElements;
  if (tempResult.tree == null) {
    result.storageResult.setDefaultTree(true);
  }
 else {
    result.storageResult.storageTree=tempResult.tree;
    result.storageResult.setDefaultTree(false);
  }
}",0.8573446327683616
58299,"void finish(){
  if (contentVA != null && contentClusterSizes != null && contentSampleElements != null) {
    ContentGroupList contentGroupList=new ContentGroupList();
    int cnt=0;
    contentTree=new Tree<ClusterNode>();
    contentTree.setUseDefaultComparator(false);
    int clusterNr=0;
    ClusterNode root=new ClusterNode(contentTree,""String_Node_Str"",clusterNr++,true,-1);
    contentTree.setRootNode(root);
    ClusterNode node;
    int from=0;
    int to=0;
    for (    Integer clusterSize : contentClusterSizes) {
      node=new ClusterNode(contentTree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
      Group temp=new Group(clusterSize,false,contentSampleElements.get(cnt),SelectionType.NORMAL,node);
      contentTree.addChild(root,node);
      contentGroupList.append(temp);
      cnt++;
      to+=clusterSize;
      ClusterNode leaf;
      for (int vaIndex=from; vaIndex < to; vaIndex++) {
        Integer contentID=contentVA.get(vaIndex);
        leaf=new ClusterNode(contentTree,""String_Node_Str"" + contentID,clusterNr++,true,contentID);
        contentTree.addChild(node,leaf);
      }
      from=to;
    }
    contentVA.setGroupList(contentGroupList);
  }
 else   if (contentVA != null && contentTree != null) {
    contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
  }
  contentTree.setUseDefaultComparator(false);
}","void finish(){
  if (contentVA != null && contentClusterSizes != null && contentSampleElements != null) {
    isPartitionallyClustered=true;
    ContentGroupList contentGroupList=new ContentGroupList();
    int cnt=0;
    contentTree=new Tree<ClusterNode>();
    contentTree.setUseDefaultComparator(false);
    int clusterNr=0;
    ClusterNode root=new ClusterNode(contentTree,""String_Node_Str"",clusterNr++,true,-1);
    contentTree.setRootNode(root);
    ClusterNode node;
    int from=0;
    int to=0;
    for (    Integer clusterSize : contentClusterSizes) {
      node=new ClusterNode(contentTree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
      Group temp=new Group(clusterSize,false,contentSampleElements.get(cnt),SelectionType.NORMAL,node);
      contentTree.addChild(root,node);
      contentGroupList.append(temp);
      cnt++;
      to+=clusterSize;
      ClusterNode leaf;
      for (int vaIndex=from; vaIndex < to; vaIndex++) {
        Integer contentID=contentVA.get(vaIndex);
        leaf=new ClusterNode(contentTree,""String_Node_Str"" + contentID,clusterNr++,true,contentID);
        contentTree.addChild(node,leaf);
      }
      from=to;
    }
    contentVA.setGroupList(contentGroupList);
  }
 else   if (contentVA != null && contentTree != null) {
    contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
  }
  contentTree.setUseDefaultComparator(false);
}",0.9873050417120058
58300,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glPushMatrix();
  if (isMirrored) {
    gl.glTranslatef(viewFrustum.getWidth(),0,0);
    gl.glScalef(-1.0f,1.0f,1.0f);
  }
  if (tree == null) {
    iAlClusterNodes.clear();
    if (bRenderContentTree == true) {
      if (set.getContentTree() != null) {
        tree=set.getContentTree();
        groupList=(GroupType)new ContentGroupList();
        rootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getStorageTree() != null) {
        tree=set.getStorageTree();
        groupList=(GroupType)new StorageGroupList();
        rootNode=set.getStorageTreeRoot();
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bHasFrustumChanged || bRedrawDendrogram) {
      if (bRenderContentTree) {
        xGlobalMax=viewFrustum.getWidth();
        fSampleHeight=viewFrustum.getHeight() / rootNode.getNrLeaves();
        fLevelWidth=(viewFrustum.getWidth() - 0.1f) / rootNode.getDepth();
        yPosInit=viewFrustum.getHeight();
      }
 else {
        yGlobalMin=0.0f;
        fSampleWidth=viewFrustum.getWidth() / rootNode.getNrLeaves();
        fLevelHeight=(viewFrustum.getHeight() - 0.1f) / rootNode.getDepth();
        xPosInit=0.0f;
      }
      determinePositions();
      bRedrawDendrogram=false;
      bHasFrustumChanged=false;
    }
    gl.glLineWidth(renderStyle.getDendrogramLineWidth());
    if (bRenderContentTree) {
      gl.glTranslatef(0,-fSampleHeight / 2,0);
      renderDendrogramGenes(gl,rootNode,1);
    }
 else {
      gl.glTranslatef(fSampleWidth / 2,0,0);
      renderDendrogramExperiments(gl,rootNode,1);
    }
    if (bRenderUntilCut == false)     renderSelections(gl,rootNode);
    if (bRenderContentTree)     gl.glTranslatef(0,+fSampleHeight / 2,0);
 else     gl.glTranslatef(-fSampleWidth / 2,0,0);
  }
  gl.glEndList();
  gl.glNewList(iGLDisplayListCutOffValue,GL.GL_COMPILE);
  if (tree != null && bRenderUntilCut == false)   renderCut(gl);
  gl.glPopMatrix();
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glPushMatrix();
  if (isMirrored) {
    gl.glTranslatef(viewFrustum.getWidth(),0,0);
    gl.glScalef(-1.0f,1.0f,1.0f);
  }
  if (tree == null) {
    iAlClusterNodes.clear();
    if (bRenderContentTree == true) {
      if (set.getContentTree() != null) {
        tree=set.getContentTree();
        groupList=(GroupType)new ContentGroupList();
        rootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (!set.getStorageData(StorageVAType.STORAGE).isDefaultTree() && set.getStorageData(StorageVAType.STORAGE).getStorageTree() != null) {
        tree=set.getStorageTree();
        groupList=(GroupType)new StorageGroupList();
        rootNode=set.getStorageTreeRoot();
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bHasFrustumChanged || bRedrawDendrogram) {
      if (bRenderContentTree) {
        xGlobalMax=viewFrustum.getWidth();
        fSampleHeight=viewFrustum.getHeight() / rootNode.getNrLeaves();
        fLevelWidth=(viewFrustum.getWidth() - 0.1f) / rootNode.getDepth();
        yPosInit=viewFrustum.getHeight();
      }
 else {
        yGlobalMin=0.0f;
        fSampleWidth=viewFrustum.getWidth() / rootNode.getNrLeaves();
        fLevelHeight=(viewFrustum.getHeight() - 0.1f) / rootNode.getDepth();
        xPosInit=0.0f;
      }
      determinePositions();
      bRedrawDendrogram=false;
      bHasFrustumChanged=false;
    }
    gl.glLineWidth(renderStyle.getDendrogramLineWidth());
    if (bRenderContentTree) {
      gl.glTranslatef(0,-fSampleHeight / 2,0);
      renderDendrogramGenes(gl,rootNode,1);
    }
 else {
      gl.glTranslatef(fSampleWidth / 2,0,0);
      renderDendrogramExperiments(gl,rootNode,1);
    }
    if (bRenderUntilCut == false)     renderSelections(gl,rootNode);
    if (bRenderContentTree)     gl.glTranslatef(0,+fSampleHeight / 2,0);
 else     gl.glTranslatef(-fSampleWidth / 2,0,0);
  }
  gl.glEndList();
  gl.glNewList(iGLDisplayListCutOffValue,GL.GL_COMPILE);
  if (tree != null && bRenderUntilCut == false)   renderCut(gl);
  gl.glPopMatrix();
  gl.glEndList();
}",0.9752798507462688
58301,"@Override public void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursorLevel1();
  if (bSkipLevel2 == false) {
    initPosCursorLevel2();
  }
  if (set.getContentTree() != null) {
    bGeneDendrogramActive=true;
    bGeneDendrogramRenderCut=false;
    bFirstStartGeneDendrogram=true;
    renderStyle.setWidthGeneDendrogram(1.6f);
  }
 else {
    bGeneDendrogramActive=false;
    bGeneDendrogramRenderCut=false;
  }
  if (set.getStorageTree() != null) {
    bExperimentDendrogramActive=true;
    bExperimentDendrogramRenderCut=false;
    bFirstStartExperimentDendrogram=true;
    renderStyle.setHeightExperimentDendrogram(1.45f);
  }
 else {
    bExperimentDendrogramActive=false;
    bExperimentDendrogramRenderCut=false;
  }
  if (bSkipLevel2 == false)   bRedrawTextures=true;
}","@Override public void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursorLevel1();
  if (bSkipLevel2 == false) {
    initPosCursorLevel2();
  }
  if (set.getContentTree() != null) {
    bGeneDendrogramActive=true;
    bGeneDendrogramRenderCut=false;
    bFirstStartGeneDendrogram=true;
    renderStyle.setWidthGeneDendrogram(1.6f);
  }
 else {
    bGeneDendrogramActive=false;
    bGeneDendrogramRenderCut=false;
  }
  if (!set.getStorageData(StorageVAType.STORAGE).isDefaultTree()) {
    bExperimentDendrogramActive=true;
    bExperimentDendrogramRenderCut=false;
    bFirstStartExperimentDendrogram=true;
    renderStyle.setHeightExperimentDendrogram(1.45f);
  }
 else {
    bExperimentDendrogramActive=false;
    bExperimentDendrogramRenderCut=false;
  }
  if (bSkipLevel2 == false)   bRedrawTextures=true;
}",0.9664268585131894
58302,"private void renderExperimentDendrogramBackground(GL gl){
  float fHeight=viewFrustum.getHeight();
  float fWidthLevel3=renderStyle.getWidthLevel3();
  float fSizeHeatmapArrow=renderStyle.getSizeHeatmapArrow();
  float fHeightExperimentDendrogram=renderStyle.getHeightExperimentDendrogram();
  float fWidthCurveTexture=GAP_BETWEEN_LEVELS / 4;
  if (bExperimentDendrogramActive || bExperimentDendrogramRenderCut) {
    gl.glColor4f(1,1,1,1);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,fHeight - fWidthCurveTexture,0);
    gl.glVertex3f(fWidthLevel3,fHeight - fWidthCurveTexture,0);
    gl.glVertex3f(fWidthLevel3,fHeight - fHeightExperimentDendrogram,0);
    gl.glVertex3f(0,fHeight - fHeightExperimentDendrogram,0);
    gl.glEnd();
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(fWidthCurveTexture,fHeight,0);
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight,0);
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glVertex3f(fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glEnd();
    gl.glLineWidth(1f);
    gl.glColor4f(1,0,0,1);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(0,fHeight,0);
    gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight,0);
    gl.glEnd();
    gl.glColor4f(1,1,1,1);
    gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
    Texture textureMaskNeg=textureManager.getIconTexture(gl,EIconTextures.NAVIGATION_MASK_CURVE_NEG_WHITE);
    textureMaskNeg.enable();
    textureMaskNeg.bind();
    TextureCoords texCoordsMaskNeg=textureMaskNeg.getImageTexCoords();
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(0,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
    gl.glVertex3f(fWidthCurveTexture,fHeight,0);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
    gl.glVertex3f(0,fHeight,0);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(fWidthLevel3,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
    gl.glVertex3f(fWidthLevel3,fHeight,0);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight,0);
    gl.glEnd();
    textureMaskNeg.disable();
    gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
    gl.glPopAttrib();
  }
  if (set.getStorageTree() != null) {
    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
    Texture tempTexture=textureManager.getIconTexture(gl,EIconTextures.HEAT_MAP_ARROW);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_ACTIVATE_STORAGE_DENDROGRAM,1));
    if (bExperimentDendrogramActive) {
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight,BUTTON_Z);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight,BUTTON_Z);
      gl.glEnd();
    }
 else {
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight,BUTTON_Z);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight,BUTTON_Z);
      gl.glEnd();
    }
    gl.glPopName();
    tempTexture.disable();
    gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  }
}","private void renderExperimentDendrogramBackground(GL gl){
  float fHeight=viewFrustum.getHeight();
  float fWidthLevel3=renderStyle.getWidthLevel3();
  float fSizeHeatmapArrow=renderStyle.getSizeHeatmapArrow();
  float fHeightExperimentDendrogram=renderStyle.getHeightExperimentDendrogram();
  float fWidthCurveTexture=GAP_BETWEEN_LEVELS / 4;
  if (bExperimentDendrogramActive || bExperimentDendrogramRenderCut) {
    gl.glColor4f(1,1,1,1);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,fHeight - fWidthCurveTexture,0);
    gl.glVertex3f(fWidthLevel3,fHeight - fWidthCurveTexture,0);
    gl.glVertex3f(fWidthLevel3,fHeight - fHeightExperimentDendrogram,0);
    gl.glVertex3f(0,fHeight - fHeightExperimentDendrogram,0);
    gl.glEnd();
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(fWidthCurveTexture,fHeight,0);
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight,0);
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glVertex3f(fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glEnd();
    gl.glLineWidth(1f);
    gl.glColor4f(1,0,0,1);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(0,fHeight,0);
    gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight,0);
    gl.glEnd();
    gl.glColor4f(1,1,1,1);
    gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
    Texture textureMaskNeg=textureManager.getIconTexture(gl,EIconTextures.NAVIGATION_MASK_CURVE_NEG_WHITE);
    textureMaskNeg.enable();
    textureMaskNeg.bind();
    TextureCoords texCoordsMaskNeg=textureMaskNeg.getImageTexCoords();
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(0,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
    gl.glVertex3f(fWidthCurveTexture,fHeight,0);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
    gl.glVertex3f(0,fHeight,0);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
    gl.glVertex3f(fWidthLevel3,fHeight - fWidthCurveTexture,0);
    gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
    gl.glVertex3f(fWidthLevel3,fHeight,0);
    gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
    gl.glVertex3f(fWidthLevel3 - fWidthCurveTexture,fHeight,0);
    gl.glEnd();
    textureMaskNeg.disable();
    gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
    gl.glPopAttrib();
  }
  if (!set.getStorageData(StorageVAType.STORAGE).isDefaultTree()) {
    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
    Texture tempTexture=textureManager.getIconTexture(gl,EIconTextures.HEAT_MAP_ARROW);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_ACTIVATE_STORAGE_DENDROGRAM,1));
    if (bExperimentDendrogramActive) {
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight,BUTTON_Z);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight,BUTTON_Z);
      gl.glEnd();
    }
 else {
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight,BUTTON_Z);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f - fSizeHeatmapArrow,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight - fSizeHeatmapArrow,BUTTON_Z);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(fWidthLevel3 + 0.4f,fHeight,BUTTON_Z);
      gl.glEnd();
    }
    gl.glPopName();
    tempTexture.disable();
    gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  }
}",0.9937647817673618
58303,"private void makeScreenshot(){
  Image screenshot=new Image(browser.getShell().getDisplay(),browser.getShell().getBounds());
  GC gc=new GC(browser.getShell().getDisplay());
  gc.copyArea(screenshot,730,150);
  gc.dispose();
  ImageLoader loader=new ImageLoader();
  loader.data=new ImageData[]{screenshot.getImageData()};
  loader.save(GeneralManager.CALEYDO_HOME_PATH + ""String_Node_Str"",SWT.IMAGE_PNG);
  screenshot.dispose();
}","private void makeScreenshot(){
  Image screenshot=new Image(browser.getShell().getDisplay(),browser.getShell().getBounds());
  GC gc=new GC(browser.getShell().getDisplay());
  gc.copyArea(screenshot,743,143);
  gc.dispose();
  ImageLoader loader=new ImageLoader();
  loader.data=new ImageData[]{screenshot.getImageData()};
  loader.save(GeneralManager.CALEYDO_HOME_PATH + ""String_Node_Str"",SWT.IMAGE_PNG);
  screenshot.dispose();
}",0.9930394431554525
58304,"private void triggerEvents(AEvent event,Collection<AEventListener<?>> listeners){
  if (listeners != null) {
    for (    AEventListener<?> receiver : listeners) {
      if (!(event.getDataDomainType() == null && receiver.isOnlyDataDomain()))       receiver.queueEvent(event);
    }
  }
}","private void triggerEvents(AEvent event,Collection<AEventListener<?>> listeners){
  if (listeners != null) {
    for (    AEventListener<?> receiver : listeners) {
      if (!(event.getDataDomainType() == null && receiver.isExclusiveDataDomain()))       receiver.queueEvent(event);
    }
  }
}",0.9776247848537004
58305,"public void handleSelectionUpdate(final ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() != EIDType.EXPRESSION_INDEX)   return;
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!checkInternetConnection())       return;
      int iItemsToLoad=0;
      for (      SelectionDeltaItem selectionDeltaItem : selectionDelta) {
        if (selectionDeltaItem.getSelectionType() == SelectionType.MOUSE_OVER || selectionDeltaItem.getSelectionType() == SelectionType.SELECTION) {
          int expressionIndex=selectionDeltaItem.getPrimaryID();
          Set<String> setRefSeqIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.REFSEQ_MRNA,expressionIndex);
          String sRefSeqID=null;
          if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
            sRefSeqID=(String)setRefSeqIDs.toArray()[0];
          }
          Set<Integer> setDavidIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,expressionIndex);
          Integer iDavidID=null;
          if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
            iDavidID=(Integer)setDavidIDs.toArray()[0];
          }
          if (iDavidID == null)           continue;
          if (iItemsToLoad == 0) {
            String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
            browser.setUrl(sURL);
            browser.update();
            textURL.setText(sURL);
            iAlDavidID.clear();
          }
          String sOutput=""String_Node_Str"";
          sOutput=sOutput + generalManager.getIDMappingManager().getID(EIDType.DAVID,EIDType.GENE_SYMBOL,iDavidID);
          sOutput=sOutput + ""String_Node_Str"";
          sOutput=sOutput + sRefSeqID;
          if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
            continue;
          }
          iAlDavidID.add(iDavidID);
          iItemsToLoad++;
        }
      }
    }
  }
);
}","public void handleSelectionUpdate(final ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() != EIDType.EXPRESSION_INDEX)   return;
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!checkInternetConnection())       return;
      int iItemsToLoad=0;
      for (      SelectionDeltaItem selectionDeltaItem : selectionDelta) {
        if (selectionDeltaItem.getSelectionType() == SelectionType.SELECTION) {
          int expressionIndex=selectionDeltaItem.getPrimaryID();
          Set<String> setRefSeqIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.REFSEQ_MRNA,expressionIndex);
          String sRefSeqID=null;
          if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
            sRefSeqID=(String)setRefSeqIDs.toArray()[0];
          }
          Set<Integer> setDavidIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,expressionIndex);
          Integer iDavidID=null;
          if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
            iDavidID=(Integer)setDavidIDs.toArray()[0];
          }
          if (iDavidID == null)           continue;
          if (iItemsToLoad == 0) {
            String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
            browser.setUrl(sURL);
            browser.update();
            textURL.setText(sURL);
            iAlDavidID.clear();
          }
          String sOutput=""String_Node_Str"";
          sOutput=sOutput + generalManager.getIDMappingManager().getID(EIDType.DAVID,EIDType.GENE_SYMBOL,iDavidID);
          sOutput=sOutput + ""String_Node_Str"";
          sOutput=sOutput + sRefSeqID;
          if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
            continue;
          }
          iAlDavidID.add(iDavidID);
          iItemsToLoad++;
        }
      }
    }
  }
);
}",0.9824024483550114
58306,"public void run(){
  if (!checkInternetConnection())   return;
  int iItemsToLoad=0;
  for (  SelectionDeltaItem selectionDeltaItem : selectionDelta) {
    if (selectionDeltaItem.getSelectionType() == SelectionType.MOUSE_OVER || selectionDeltaItem.getSelectionType() == SelectionType.SELECTION) {
      int expressionIndex=selectionDeltaItem.getPrimaryID();
      Set<String> setRefSeqIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.REFSEQ_MRNA,expressionIndex);
      String sRefSeqID=null;
      if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
        sRefSeqID=(String)setRefSeqIDs.toArray()[0];
      }
      Set<Integer> setDavidIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,expressionIndex);
      Integer iDavidID=null;
      if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
        iDavidID=(Integer)setDavidIDs.toArray()[0];
      }
      if (iDavidID == null)       continue;
      if (iItemsToLoad == 0) {
        String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
        browser.setUrl(sURL);
        browser.update();
        textURL.setText(sURL);
        iAlDavidID.clear();
      }
      String sOutput=""String_Node_Str"";
      sOutput=sOutput + generalManager.getIDMappingManager().getID(EIDType.DAVID,EIDType.GENE_SYMBOL,iDavidID);
      sOutput=sOutput + ""String_Node_Str"";
      sOutput=sOutput + sRefSeqID;
      if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
        continue;
      }
      iAlDavidID.add(iDavidID);
      iItemsToLoad++;
    }
  }
}","public void run(){
  if (!checkInternetConnection())   return;
  int iItemsToLoad=0;
  for (  SelectionDeltaItem selectionDeltaItem : selectionDelta) {
    if (selectionDeltaItem.getSelectionType() == SelectionType.SELECTION) {
      int expressionIndex=selectionDeltaItem.getPrimaryID();
      Set<String> setRefSeqIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.REFSEQ_MRNA,expressionIndex);
      String sRefSeqID=null;
      if ((setRefSeqIDs != null && !setRefSeqIDs.isEmpty())) {
        sRefSeqID=(String)setRefSeqIDs.toArray()[0];
      }
      Set<Integer> setDavidIDs=generalManager.getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,expressionIndex);
      Integer iDavidID=null;
      if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
        iDavidID=(Integer)setDavidIDs.toArray()[0];
      }
      if (iDavidID == null)       continue;
      if (iItemsToLoad == 0) {
        String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
        browser.setUrl(sURL);
        browser.update();
        textURL.setText(sURL);
        iAlDavidID.clear();
      }
      String sOutput=""String_Node_Str"";
      sOutput=sOutput + generalManager.getIDMappingManager().getID(EIDType.DAVID,EIDType.GENE_SYMBOL,iDavidID);
      sOutput=sOutput + ""String_Node_Str"";
      sOutput=sOutput + sRefSeqID;
      if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
        continue;
      }
      iAlDavidID.add(iDavidID);
      iItemsToLoad++;
    }
  }
}",0.9779341221618164
58307,"/** 
 * Constructor.
 */
public GenomeHTMLBrowser(int iParentContainerID,String sLabel){
  super(iParentContainerID,sLabel,GeneralManager.get().getIDManager().createID(EManagedObjectType.VIEW_SWT_BROWSER_GENOME));
  urlGenerator=new URLGenerator();
  iAlDavidID=new ArrayList<Integer>();
}","/** 
 * Constructor.
 */
public GenomeHTMLBrowser(int iParentContainerID,String sLabel){
  super(iParentContainerID,sLabel,GeneralManager.get().getIDManager().createID(EManagedObjectType.VIEW_SWT_BROWSER_GENOME));
  registerEventListeners();
  urlGenerator=new URLGenerator();
  iAlDavidID=new ArrayList<Integer>();
}",0.9537953795379538
58308,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  selectionUpdateListener.setExclusiveDataDomainType(""String_Node_Str"");
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
}",0.8793388429752066
58309,"public void drawNode(PoincareNode node,int mode){
  float[] size=new float[2];
  if (node != this.getCenteredNode()) {
    size=getMetric(node.getPosition(),nodeSize);
  }
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DATAW_NODE,node.iComparableValue);
  gl.glPushName(iPickingID);
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 2) {
    node.eyeTrackable=false;
    float alpha=1;
    if (node.markedToRemove == true) {
      alpha=0.7f;
    }
    size[0]=size[0] * 4;
    size[1]=size[1] * 4;
    Vec3f lowerLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f lowerRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f scalingPivot=new Vec3f(1,1,1);
    textureManager.renderGUITexture(gl,EIconTextures.PATHWAY_ICON,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,alpha,0);
  }
 else {
    if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
      if (node == this.getCenteredNode()) {
        size=this.findOptimalCenterNodeSize(node,0.001f);
      }
    }
    node.eyeTrackable=true;
    float[] position=new float[2];
    position[0]=-size[0] * canvasWidth / 2 + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2;
    position[1]=-size[1] * canvasHeight / 2 * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2;
    hyperbolic.drawRemoteView(gl,node,position,size[0]);
  }
  gl.glPopName();
}","public void drawNode(PoincareNode node,int mode){
  float[] size=new float[2];
  if (node != this.getCenteredNode()) {
    size=getMetric(node.getPosition(),nodeSize);
  }
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DATAW_NODE,node.iComparableValue);
  gl.glPushName(iPickingID);
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 2) {
    node.eyeTrackable=false;
    System.out.println(""String_Node_Str"" + eyeTrackableNodes.size());
    this.eyeTrackableNodes.remove(node);
    System.out.println(""String_Node_Str"" + eyeTrackableNodes.size());
    size[0]=size[0] * 4;
    size[1]=size[1] * 4;
    Vec3f lowerLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f lowerRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f scalingPivot=new Vec3f(1,1,1);
    textureManager.renderGUITexture(gl,EIconTextures.PATHWAY_ICON,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,0);
  }
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
    if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
      if (node == this.getCenteredNode()) {
        size=this.findOptimalCenterNodeSize(node,0.001f);
      }
    }
    if (this.eyeTrackableNodes.contains(node) == false) {
      this.eyeTrackableNodes.add(node);
    }
    node.eyeTrackable=true;
    float[] position=new float[2];
    position[0]=-size[0] * canvasWidth / 2 + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2;
    position[1]=-size[1] * canvasHeight / 2 * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2;
    hyperbolic.drawRemoteView(gl,node,position,size[0]);
  }
  gl.glPopName();
}",0.9142141515341264
58310,"public void displayDetailLevels(){
  gl.glLineWidth(1);
}","public void displayDetailLevels(){
}",0.7741935483870968
58311,"public PoincareNode processEyeTrackerAction(float[] normedEyePosition,ArrayList<NodeSlerp> arSlerpActions){
  PoincareNode returnNode=null;
  if (this.distanceFromOrigin(normedEyePosition) < this.levelOfDetailLimits[0]) {
    returnNode=findNodeByCoordinate(normedEyePosition,10);
  }
  if (returnNode != null) {
    float[] emptyPoint=new float[2];
    emptyPoint[0]=0;
    emptyPoint[1]=0;
    arSlerpActions.add(new NodeSlerp(4,returnNode.getPosition(),emptyPoint));
  }
  return returnNode;
}","public PoincareNode processEyeTrackerAction(float[] normedEyePosition,ArrayList<NodeSlerp> arSlerpActions,boolean mouseControlled){
  PoincareNode returnNode=null;
  if (mouseControlled) {
    returnNode=findNodeByCoordinate(normedEyePosition,0);
    if (returnNode != null) {
      float[] emptyPoint=new float[2];
      emptyPoint[0]=0;
      emptyPoint[1]=0;
      arSlerpActions.add(new NodeSlerp(4,returnNode.getPosition(),emptyPoint));
    }
    return returnNode;
  }
  returnNode=findNodeByCoordinate(normedEyePosition,1f);
  if (this.eyeTrackableNodes.contains(returnNode)) {
    System.out.println(""String_Node_Str"" + normedEyePosition[0]);
    float[] emptyPoint=new float[2];
    emptyPoint[0]=0;
    emptyPoint[1]=0;
    arSlerpActions.add(new NodeSlerp(4,returnNode.getPosition(),emptyPoint));
    return returnNode;
  }
 else {
    return null;
  }
}",0.5393093313739897
58312,"private void evaluateUserSelection(){
  boolean foundNode=false;
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    float[] translation=new float[2];
    float[] scalation=new float[2];
    translation[0]=remoteElementHyperbolic.getTransform().getTranslation().x();
    translation[1]=remoteElementHyperbolic.getTransform().getTranslation().y();
    scalation[0]=remoteElementHyperbolic.getTransform().getScale().x();
    scalation[1]=remoteElementHyperbolic.getTransform().getScale().y();
    if (translation != null && scalation != null) {
      foundNode=this.directHyperbolicView.setEyeTrackerAction(eyeTracker.getFixedCoordinate(),translation,scalation);
    }
    eyeTracker.resetFixedCoordinate();
    if (foundNode) {
      eyeTracker.pauseEyeTracker();
    }
  }
  if (selectedInput == inputType.MOUSE_ONLY) {
    if (glMouseListener.getPickedPoint() != null) {
      if (manualPickFlag == true) {
        mousePoint=glMouseListener.getPickedPoint();
        int[] mousePosition=new int[2];
        mousePosition[0]=(int)mousePoint.getX();
        mousePosition[1]=(int)mousePoint.getY();
        float[] translation=new float[2];
        float[] scalation=new float[2];
        translation[0]=remoteElementHyperbolic.getTransform().getTranslation().x();
        translation[1]=remoteElementHyperbolic.getTransform().getTranslation().y();
        scalation[0]=remoteElementHyperbolic.getTransform().getScale().x();
        scalation[1]=remoteElementHyperbolic.getTransform().getScale().y();
        this.directHyperbolicView.setEyeTrackerAction(mousePosition,translation,scalation);
      }
    }
  }
}","private void evaluateUserSelection(){
  boolean foundNode=false;
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    float[] translation=new float[2];
    float[] scalation=new float[2];
    translation[0]=remoteElementHyperbolic.getTransform().getTranslation().x();
    translation[1]=remoteElementHyperbolic.getTransform().getTranslation().y();
    scalation[0]=remoteElementHyperbolic.getTransform().getScale().x();
    scalation[1]=remoteElementHyperbolic.getTransform().getScale().y();
    if (translation != null && scalation != null) {
      foundNode=this.directHyperbolicView.setEyeTrackerAction(eyeTracker.getFixedCoordinate(),translation,scalation,false);
    }
    eyeTracker.resetFixedCoordinate();
    if (foundNode) {
      eyeTracker.pauseEyeTracker();
    }
  }
  if (selectedInput == inputType.MOUSE_ONLY) {
    if (glMouseListener.getPickedPoint() != null) {
      if (manualPickFlag == true) {
        mousePoint=glMouseListener.getPickedPoint();
        int[] mousePosition=new int[2];
        mousePosition[0]=(int)mousePoint.getX();
        mousePosition[1]=(int)mousePoint.getY();
        float[] translation=new float[2];
        float[] scalation=new float[2];
        translation[0]=remoteElementHyperbolic.getTransform().getTranslation().x();
        translation[1]=remoteElementHyperbolic.getTransform().getTranslation().y();
        scalation[0]=remoteElementHyperbolic.getTransform().getScale().x();
        scalation[1]=remoteElementHyperbolic.getTransform().getScale().y();
        this.directHyperbolicView.setEyeTrackerAction(mousePosition,translation,scalation,true);
      }
    }
  }
}",0.996711509715994
58313,"@Override public void display(GL gl){
  doSlerpActions();
  canvasWidth=viewFrustum.getWidth();
  canvasHeight=viewFrustum.getHeight();
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  pixelDimensions[0]=viewport[2];
  pixelDimensions[1]=viewport[3];
  if (layoutHotSpotInitSwitch == false) {
    layoutHotSpot[0]=canvasWidth / 2;
    layoutHotSpot[1]=canvasHeight / 2;
    layoutHotSpotInitSwitch=true;
  }
  defaultLayoutHotSpot[0]=canvasWidth / 2;
  defaultLayoutHotSpot[1]=canvasHeight / 2;
  Transform heatmapTransform=new Transform();
  heatmapTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)layoutHotSpot[1],0));
  heatmapTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / canvasWidth,(float)(canvasHeight - layoutHotSpot[1]) / canvasHeight,1));
  remoteElementHeatMap.setTransform(heatmapTransform);
  Transform hyperbolicTransform=new Transform();
  hyperbolicTransform.setScale(new Vec3f(layoutHotSpot[0] / canvasWidth,1 * fAspectRatio,1));
  hyperbolicTransform.setTranslation(new Vec3f(0,0,0));
  remoteElementHyperbolic.setTransform(hyperbolicTransform);
  Transform parCoordsTransform=new Transform();
  parCoordsTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)0,0));
  parCoordsTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / 8,(float)layoutHotSpot[1] / 8,1));
  remoteElementParCoords.setTransform(parCoordsTransform);
  renderRemoteLevelElement(gl,remoteElementHyperbolic);
  renderRemoteLevelElement(gl,remoteElementHeatMap);
  renderRemoteLevelElement(gl,remoteElementParCoords);
  if (selectedInput == inputType.EYETRACKER_SIMULATED || selectedInput == inputType.MOUSE_ONLY) {
    int[] mousePositionInt=new int[2];
    mousePositionInt[0]=this.glMouseListener.mousePosition[0];
    mousePositionInt[1]=this.glMouseListener.mousePosition[1];
    this.eyeTracker.setRawEyeTrackerPosition(mousePositionInt);
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.receiveData();
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (eyeTracker.getFixedCoordinate() != null) {
    if (eyeTracker.getFixedCoordinate()[0] != 0) {
      if (eyeTracker.getFixedCoordinate()[0] < (pixelDimensions[0] * (layoutHotSpot[0] / canvasWidth))) {
        this.focusViewEvent(remoteViewType.HYPERBOLIC);
      }
 else {
        if ((pixelDimensions[1] - eyeTracker.getFixedCoordinate()[1]) < (pixelDimensions[1] * (layoutHotSpot[1] / canvasHeight))) {
          this.focusViewEvent(remoteViewType.PARCOORDS);
        }
 else {
          this.focusViewEvent(remoteViewType.HEATMAP);
        }
      }
    }
  }
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    this.evaluateUserSelection();
  }
  contextMenu.render(gl,this);
}","@Override public void display(GL gl){
  doSlerpActions();
  canvasWidth=viewFrustum.getWidth();
  canvasHeight=viewFrustum.getHeight();
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  pixelDimensions[0]=viewport[2];
  pixelDimensions[1]=viewport[3];
  if (layoutHotSpotInitSwitch == false) {
    layoutHotSpot[0]=canvasWidth / 2;
    layoutHotSpot[1]=canvasHeight / 2;
    layoutHotSpotInitSwitch=true;
  }
  defaultLayoutHotSpot[0]=canvasWidth / 2;
  defaultLayoutHotSpot[1]=canvasHeight / 2;
  Transform heatmapTransform=new Transform();
  heatmapTransform.setTranslation(new Vec3f((float)layoutHotSpot[0] + 0.1f,(float)layoutHotSpot[1],0));
  heatmapTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / canvasWidth,(float)(canvasHeight - layoutHotSpot[1]) / canvasHeight,1));
  remoteElementHeatMap.setTransform(heatmapTransform);
  Transform hyperbolicTransform=new Transform();
  hyperbolicTransform.setScale(new Vec3f(layoutHotSpot[0] / canvasWidth,1 * fAspectRatio,1));
  hyperbolicTransform.setTranslation(new Vec3f(0,0,0));
  remoteElementHyperbolic.setTransform(hyperbolicTransform);
  Transform parCoordsTransform=new Transform();
  parCoordsTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)0,0));
  parCoordsTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / 8,(float)layoutHotSpot[1] / 8,1));
  remoteElementParCoords.setTransform(parCoordsTransform);
  renderRemoteLevelElement(gl,remoteElementHyperbolic);
  renderRemoteLevelElement(gl,remoteElementHeatMap);
  renderRemoteLevelElement(gl,remoteElementParCoords);
  if (selectedInput == inputType.EYETRACKER_SIMULATED || selectedInput == inputType.MOUSE_ONLY) {
    int[] mousePositionInt=new int[2];
    mousePositionInt[0]=this.glMouseListener.mousePosition[0];
    mousePositionInt[1]=this.glMouseListener.mousePosition[1];
    this.eyeTracker.setRawEyeTrackerPosition(mousePositionInt);
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.receiveData();
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (eyeTracker.getFixedCoordinate() != null) {
    if (eyeTracker.getFixedCoordinate()[0] != 0) {
      if (eyeTracker.getFixedCoordinate()[0] < (pixelDimensions[0] * (layoutHotSpot[0] / canvasWidth))) {
        this.focusViewEvent(remoteViewType.HYPERBOLIC);
      }
 else {
        if ((pixelDimensions[1] - eyeTracker.getFixedCoordinate()[1]) < (pixelDimensions[1] * (layoutHotSpot[1] / canvasHeight))) {
          this.focusViewEvent(remoteViewType.PARCOORDS);
        }
 else {
          this.focusViewEvent(remoteViewType.HEATMAP);
        }
      }
    }
  }
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    if (eyeTracker.getFixedCoordinate()[0] != 0 && eyeTracker.eyeTrackerPauseStatus == 0) {
      this.evaluateUserSelection();
    }
  }
  contextMenu.render(gl,this);
}",0.9823052753431454
58314,"/** 
 * /** Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLDataWindows(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  canvas=glCanvas;
  viewType=GLDataWindows.VIEW_ID;
  containedGLViews=new ArrayList<AGLView>();
  newViews=new ArrayList<ASerializedView>();
  defaultLayoutHotSpot=new float[2];
  layoutHotSpot=new float[2];
  selectedInput=inputType.MOUSE_ONLY;
  viewport=new int[4];
  pixelDimensions=new int[2];
  eyeTracker=new eyeTracking(true,""String_Node_Str"");
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.startTracking();
  }
  viewSlerpStartPoint=new float[2];
  viewSlerpTargetPoint=new float[2];
  simpleSlerpActions=new ArrayList<SimpleSlerp>();
  zoomPointHyperbolic=new float[2];
  zoomPointHyperbolic[0]=1.5f;
  zoomPointHyperbolic[1]=1;
  zoomPointHeatmap=new float[2];
  zoomPointHeatmap[0]=0.5f;
  zoomPointHeatmap[1]=0.5f;
  zoomPointParCoord=new float[2];
  zoomPointParCoord[0]=0.5f;
  zoomPointParCoord[1]=1.5f;
  CmdDataCreateDataDomain cmd=new CmdDataCreateDataDomain(ECommandType.CREATE_DATA_DOMAIN);
  cmd.setAttributes(""String_Node_Str"");
  cmd.doCommand();
  getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      upperLeftScreenPos=getParentGLCanvas().getParentComposite().toDisplay(1,1);
    }
  }
);
}","/** 
 * /** Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLDataWindows(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  canvas=glCanvas;
  viewType=GLDataWindows.VIEW_ID;
  containedGLViews=new ArrayList<AGLView>();
  newViews=new ArrayList<ASerializedView>();
  defaultLayoutHotSpot=new float[2];
  layoutHotSpot=new float[2];
  selectedInput=inputType.EYETRACKER_SIMULATED;
  viewport=new int[4];
  pixelDimensions=new int[2];
  eyeTracker=new eyeTracking(true,""String_Node_Str"");
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.startTracking();
  }
  viewSlerpStartPoint=new float[2];
  viewSlerpTargetPoint=new float[2];
  simpleSlerpActions=new ArrayList<SimpleSlerp>();
  zoomPointHyperbolic=new float[2];
  zoomPointHyperbolic[0]=1.5f;
  zoomPointHyperbolic[1]=1;
  zoomPointHeatmap=new float[2];
  zoomPointHeatmap[0]=0.5f;
  zoomPointHeatmap[1]=0.5f;
  zoomPointParCoord=new float[2];
  zoomPointParCoord[0]=0.5f;
  zoomPointParCoord[1]=1.5f;
  CmdDataCreateDataDomain cmd=new CmdDataCreateDataDomain(ECommandType.CREATE_DATA_DOMAIN);
  cmd.setAttributes(""String_Node_Str"");
  cmd.doCommand();
  getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      upperLeftScreenPos=getParentGLCanvas().getParentComposite().toDisplay(1,1);
    }
  }
);
}",0.9916608756080612
58315,"public boolean setEyeTrackerAction(int[] mouseCoord,float[] offset,float[] scalation){
  if (this.displayFullView) {
    return false;
  }
  float[] mousePoint=new float[2];
  mousePoint[0]=(float)mouseCoord[0];
  mousePoint[1]=(float)mouseCoord[1];
  boolean returnValue;
  float factorX=1 / (float)(this.getParentGLCanvas().getWidth() * scalation[0]);
  float factorY=1 / (float)(this.getParentGLCanvas().getHeight());
  if (mousePoint != null && offset != null) {
    mousePoint[0]=(mousePoint[0] * factorX - offset[0]) * 2 - 1;
    mousePoint[1]=((this.getParentGLCanvas().getHeight() - mousePoint[1]) * factorY - offset[1]) * 2 - 1;
  }
  PoincareNode selectedNode=disk.processEyeTrackerAction(mousePoint.clone(),arSlerpActions);
  if (selectedNode == disk.getCenteredNode()) {
    return true;
  }
  if (selectedNode != null) {
    disk.setCenteredNode(selectedNode);
    slerpedNode=selectedNode;
    returnValue=true;
  }
 else {
    returnValue=false;
  }
  correctDiskAngle();
  return returnValue;
}","public boolean setEyeTrackerAction(int[] mouseCoord,float[] offset,float[] scalation,boolean eyeControlled){
  if (this.displayFullView) {
    return false;
  }
  float[] mousePoint=new float[2];
  mousePoint[0]=(float)mouseCoord[0];
  mousePoint[1]=(float)mouseCoord[1];
  boolean returnValue;
  float factorX=1 / (float)(this.getParentGLCanvas().getWidth() * scalation[0]);
  float factorY=1 / (float)(this.getParentGLCanvas().getHeight());
  if (mousePoint != null && offset != null) {
    mousePoint[0]=(mousePoint[0] * factorX - offset[0]) * 2 - 1;
    mousePoint[1]=((this.getParentGLCanvas().getHeight() - mousePoint[1]) * factorY - offset[1]) * 2 - 1;
  }
  PoincareNode selectedNode=disk.processEyeTrackerAction(mousePoint.clone(),arSlerpActions,eyeControlled);
  if (selectedNode == disk.getCenteredNode()) {
    return true;
  }
  if (selectedNode != null) {
    disk.setCenteredNode(selectedNode);
    slerpedNode=selectedNode;
    returnValue=true;
  }
 else {
    returnValue=false;
  }
  correctDiskAngle();
  return returnValue;
}",0.9824902723735408
58316,"public PoincareDisk(){
  radius=1f;
  nodeSize=0.1f;
  lineWidth=2;
  absolutePosition=new float[2];
}","public PoincareDisk(){
  radius=1f;
  nodeSize=0.1f;
  lineWidth=2;
  absolutePosition=new float[2];
  eyeTrackableNodes=new ArrayList<PoincareNode>();
}",0.8
58317,"public void insertNode(PoincareNode node,PoincareNode parentNode){
  float[] actualPosition=new float[2];
  actualPosition[0]=node.getPosition()[0] * -1;
  actualPosition[1]=node.getPosition()[1] * -1;
  this.getTree().addChild(parentNode,node);
  this.moebiusLayoutTree(2);
  this.translateTreeMoebius(actualPosition);
}","public void insertNode(PoincareNode node,PoincareNode parentNode){
  float[] actualPosition=new float[2];
  this.getTree().addChild(parentNode,node);
  this.moebiusLayoutTree(2);
  actualPosition[0]=node.getPosition()[0] * -1;
  actualPosition[1]=node.getPosition()[1] * -1;
  this.translateTreeMoebius(actualPosition);
}",0.7414330218068536
58318,"public void drawLine(PoincareNode node1,PoincareNode node2,int numberOfDetails,int mode){
  if (numberOfDetails != 0) {
    float[] startPoint=new float[2];
    startPoint=this.projectPoint(node1.getZoomedPosition(),false);
    float[] endPoint=new float[2];
    endPoint=projectPoint(node2.getZoomedPosition(),false);
    float length=this.distancePoints(startPoint,endPoint);
    gl.glLineWidth((float)lineWidth);
    gl.glBegin(GL.GL_LINE_STRIP);
    gl.glColor3i(0,0,0);
    gl.glVertex3d(node1.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node1.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,0);
    float[] eV=new float[2];
    eV[0]=endPoint[0] - startPoint[0];
    eV[1]=endPoint[1] - startPoint[1];
    eV=getEV(eV);
    float[] actPosition=new float[2];
    actPosition=startPoint.clone();
    float[] actProjectedPosition=new float[2];
    for (int i=0; i < numberOfDetails; i++) {
      actPosition[0]=actPosition[0] + eV[0] * (length / (float)numberOfDetails);
      actPosition[1]=actPosition[1] + eV[1] * (length / (float)numberOfDetails);
      actProjectedPosition=this.projectPoint(actPosition,true);
      gl.glLineWidth((float)lineWidth);
      gl.glBegin(GL.GL_LINE_STRIP);
      gl.glColor3i(0,0,0);
      gl.glVertex3d(actProjectedPosition[0] * displayScaleFactorX + (canvasWidth / 2),actProjectedPosition[1] * displayScaleFactorY + canvasHeight / 2,0);
    }
    gl.glVertex3d(node2.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node2.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,0);
    gl.glEnd();
  }
 else {
    gl.glLineWidth((float)lineWidth);
    gl.glBegin(GL.GL_LINE_STRIP);
    gl.glColor3i(0,0,0);
    gl.glVertex3d(node1.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node1.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,0);
    gl.glVertex3d(node2.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node2.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,0);
    gl.glEnd();
  }
}","public void drawLine(PoincareNode node1,PoincareNode node2,int numberOfDetails,int mode){
  if (numberOfDetails != 0) {
    float[] startPoint=new float[2];
    startPoint=this.projectPoint(node1.getZoomedPosition(),false);
    float[] endPoint=new float[2];
    endPoint=projectPoint(node2.getZoomedPosition(),false);
    float length=this.distancePoints(startPoint,endPoint);
    gl.glLineWidth((float)lineWidth);
    gl.glBegin(GL.GL_LINE_STRIP);
    gl.glColor3i(0,0,0);
    gl.glVertex3d(node1.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node1.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,-2);
    float[] eV=new float[2];
    eV[0]=endPoint[0] - startPoint[0];
    eV[1]=endPoint[1] - startPoint[1];
    eV=getEV(eV);
    float[] actPosition=new float[2];
    actPosition=startPoint.clone();
    float[] actProjectedPosition=new float[2];
    for (int i=0; i < numberOfDetails; i++) {
      actPosition[0]=actPosition[0] + eV[0] * (length / (float)numberOfDetails);
      actPosition[1]=actPosition[1] + eV[1] * (length / (float)numberOfDetails);
      actProjectedPosition=this.projectPoint(actPosition,true);
      gl.glLineWidth((float)lineWidth);
      gl.glBegin(GL.GL_LINE_STRIP);
      gl.glColor3i(0,0,0);
      gl.glVertex3d(actProjectedPosition[0] * displayScaleFactorX + (canvasWidth / 2),actProjectedPosition[1] * displayScaleFactorY + canvasHeight / 2,-2);
    }
    gl.glVertex3d(node2.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node2.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,-2);
    gl.glEnd();
  }
 else {
    gl.glLineWidth((float)lineWidth);
    gl.glBegin(GL.GL_LINE_STRIP);
    gl.glColor3i(0,0,0);
    gl.glVertex3d(node1.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node1.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,0);
    gl.glVertex3d(node2.getZoomedPosition()[0] * displayScaleFactorX + (canvasWidth / 2),node2.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2,0);
    gl.glEnd();
  }
}",0.9978118161925602
58319,"public void drawNode(PoincareNode node,int mode){
  float[] size=new float[2];
  if (node != this.getCenteredNode()) {
    size=getMetric(node.getPosition(),nodeSize);
  }
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DATAW_NODE,node.iComparableValue);
  gl.glPushName(iPickingID);
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 2) {
    node.eyeTrackable=false;
    System.out.println(""String_Node_Str"" + eyeTrackableNodes.size());
    this.eyeTrackableNodes.remove(node);
    System.out.println(""String_Node_Str"" + eyeTrackableNodes.size());
    size[0]=size[0] * 4;
    size[1]=size[1] * 4;
    Vec3f lowerLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f lowerRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f scalingPivot=new Vec3f(1,1,1);
    textureManager.renderGUITexture(gl,EIconTextures.PATHWAY_ICON,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,0);
  }
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
    if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
      if (node == this.getCenteredNode()) {
        size=this.findOptimalCenterNodeSize(node,0.001f);
      }
    }
    if (this.eyeTrackableNodes.contains(node) == false) {
      this.eyeTrackableNodes.add(node);
    }
    node.eyeTrackable=true;
    float[] position=new float[2];
    position[0]=-size[0] * canvasWidth / 2 + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2;
    position[1]=-size[1] * canvasHeight / 2 * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2;
    hyperbolic.drawRemoteView(gl,node,position,size[0]);
  }
  gl.glPopName();
}","public void drawNode(PoincareNode node,int mode){
  float[] size=new float[2];
  if (node != this.getCenteredNode()) {
    size=getMetric(node.getPosition(),nodeSize);
  }
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DATAW_NODE,node.iComparableValue);
  gl.glPushName(iPickingID);
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 2) {
    node.eyeTrackable=false;
    this.eyeTrackableNodes.remove(node);
    size[0]=size[0] * 4;
    size[1]=size[1] * 4;
    Vec3f lowerLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f lowerRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f scalingPivot=new Vec3f(1,1,1);
    textureManager.renderGUITexture(gl,EIconTextures.PATHWAY_ICON,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,0);
  }
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
    if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
      if (node == this.getCenteredNode()) {
        size=this.findOptimalCenterNodeSize(node,0.001f);
      }
    }
    if (this.eyeTrackableNodes.contains(node) == false) {
      this.eyeTrackableNodes.add(node);
    }
    node.eyeTrackable=true;
    float[] position=new float[2];
    position[0]=-size[0] * canvasWidth / 2 + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2;
    position[1]=-size[1] * canvasHeight / 2 * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2;
    hyperbolic.drawRemoteView(gl,node,position,size[0]);
  }
  gl.glPopName();
}",0.958842705786471
58320,"/** 
 * /** Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLDataWindows(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  canvas=glCanvas;
  viewType=GLDataWindows.VIEW_ID;
  containedGLViews=new ArrayList<AGLView>();
  newViews=new ArrayList<ASerializedView>();
  defaultLayoutHotSpot=new float[2];
  layoutHotSpot=new float[2];
  selectedInput=inputType.EYETRACKER_SIMULATED;
  viewport=new int[4];
  pixelDimensions=new int[2];
  eyeTracker=new eyeTracking(true,""String_Node_Str"");
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.startTracking();
  }
  viewSlerpStartPoint=new float[2];
  viewSlerpTargetPoint=new float[2];
  simpleSlerpActions=new ArrayList<SimpleSlerp>();
  zoomPointHyperbolic=new float[2];
  zoomPointHyperbolic[0]=1.5f;
  zoomPointHyperbolic[1]=1;
  zoomPointHeatmap=new float[2];
  zoomPointHeatmap[0]=0.5f;
  zoomPointHeatmap[1]=0.5f;
  zoomPointParCoord=new float[2];
  zoomPointParCoord[0]=0.5f;
  zoomPointParCoord[1]=1.5f;
  CmdDataCreateDataDomain cmd=new CmdDataCreateDataDomain(ECommandType.CREATE_DATA_DOMAIN);
  cmd.setAttributes(""String_Node_Str"");
  cmd.doCommand();
  getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      upperLeftScreenPos=getParentGLCanvas().getParentComposite().toDisplay(1,1);
    }
  }
);
}","/** 
 * /** Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLDataWindows(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  canvas=glCanvas;
  viewType=GLDataWindows.VIEW_ID;
  containedGLViews=new ArrayList<AGLView>();
  newViews=new ArrayList<ASerializedView>();
  defaultLayoutHotSpot=new float[2];
  layoutHotSpot=new float[2];
  selectedInput=inputType.MOUSE_ONLY;
  viewport=new int[4];
  pixelDimensions=new int[2];
  eyeTracker=new eyeTracking(true,""String_Node_Str"");
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.startTracking();
  }
  viewSlerpStartPoint=new float[2];
  viewSlerpTargetPoint=new float[2];
  simpleSlerpActions=new ArrayList<SimpleSlerp>();
  zoomPointHyperbolic=new float[2];
  zoomPointHyperbolic[0]=1.5f;
  zoomPointHyperbolic[1]=1;
  zoomPointHeatmap=new float[2];
  zoomPointHeatmap[0]=0.5f;
  zoomPointHeatmap[1]=0.5f;
  zoomPointParCoord=new float[2];
  zoomPointParCoord[0]=0.5f;
  zoomPointParCoord[1]=1.5f;
  CmdDataCreateDataDomain cmd=new CmdDataCreateDataDomain(ECommandType.CREATE_DATA_DOMAIN);
  cmd.setAttributes(""String_Node_Str"");
  cmd.doCommand();
  getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      upperLeftScreenPos=getParentGLCanvas().getParentComposite().toDisplay(1,1);
    }
  }
);
}",0.9909659485753995
58321,"public void drawRemoteView(GL gl,PoincareNode node,float[] position,float size){
  Transform transform=new Transform();
  remoteNodeElement.setGLView(((ViewHyperbolicNode)node).getGlView());
  if (this.displayFullView == true && (this.disk.getCenteredNode() == node)) {
    transform.setScale(new Vec3f(1,1,1));
    transform.setTranslation(new Vec3f(0,0,2));
  }
 else {
    transform.setScale(new Vec3f(size,size * fAspectRatio,1));
    transform.setTranslation(new Vec3f(position[0],position[1],0));
  }
  remoteNodeElement.setTransform(transform);
  renderRemoteLevelElement(gl,remoteNodeElement);
}","public void drawRemoteView(GL gl,PoincareNode node,float[] position,float size){
  Transform transform=new Transform();
  remoteNodeElement.setGLView(((ViewHyperbolicNode)node).getGlView());
  if (this.displayFullView == true && (this.disk.getCenteredNode() == node)) {
    transform.setScale(new Vec3f(1,1,1));
    transform.setTranslation(new Vec3f(0,0,0.1f));
  }
 else {
    transform.setScale(new Vec3f(size,size * fAspectRatio,1));
    transform.setTranslation(new Vec3f(position[0],position[1],0));
  }
  remoteNodeElement.setTransform(transform);
  renderRemoteLevelElement(gl,remoteNodeElement);
}",0.9958643507030605
58322,"/** 
 * Initializes a virtual array with all elements, according to the data filters, as defined in   {@link EDataFilterLevel}.
 */
@Override protected void initFullVA(){
  String sLevel=GeneralManager.get().getPreferenceStore().getString(PreferenceConstants.DATA_FILTER_LEVEL);
  if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.COMPLETE;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    if (GeneralManager.get().getPathwayManager().size() > 100) {
      dataFilterLevel=EDataFilterLevel.ONLY_CONTEXT;
    }
 else {
      dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
    }
  }
 else   dataFilterLevel=EDataFilterLevel.COMPLETE;
  ArrayList<Integer> alTempList=new ArrayList<Integer>(set.depth());
  for (int iCount=0; iCount < set.depth(); iCount++) {
    if (dataFilterLevel != EDataFilterLevel.COMPLETE) {
      Integer iDavidID=null;
      Set<Integer> setDavidIDs=GeneralManager.get().getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,iCount);
      if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
        iDavidID=(Integer)setDavidIDs.toArray()[0];
      }
      if (iDavidID == null) {
        continue;
      }
      if (dataFilterLevel == EDataFilterLevel.ONLY_CONTEXT) {
        PathwayVertexGraphItem tmpPathwayVertexGraphItem=GeneralManager.get().getPathwayItemManager().getPathwayVertexGraphItemByDavidId(iDavidID);
        if (tmpPathwayVertexGraphItem == null) {
          continue;
        }
      }
    }
    alTempList.add(iCount);
  }
  ContentVirtualArray contentVA=new ContentVirtualArray(ContentVAType.CONTENT,alTempList);
  set.setContentVA(ContentVAType.CONTENT,contentVA);
}","/** 
 * Initializes a virtual array with all elements, according to the data filters, as defined in   {@link EDataFilterLevel}.
 */
@Override protected void initFullVA(){
  String sLevel=GeneralManager.get().getPreferenceStore().getString(PreferenceConstants.DATA_FILTER_LEVEL);
  if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.COMPLETE;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    if (GeneralManager.get().getPathwayManager().size() > 100) {
      dataFilterLevel=EDataFilterLevel.ONLY_CONTEXT;
    }
 else {
      dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
    }
  }
 else   dataFilterLevel=EDataFilterLevel.COMPLETE;
  ArrayList<Integer> alTempList=new ArrayList<Integer>(set.depth());
  for (int iCount=0; iCount < set.depth(); iCount++) {
    if (dataFilterLevel != EDataFilterLevel.COMPLETE) {
      Integer iDavidID=null;
      Set<Integer> setDavidIDs=GeneralManager.get().getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,iCount);
      if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
        iDavidID=(Integer)setDavidIDs.toArray()[0];
      }
      if (iDavidID == null) {
        continue;
      }
      if (dataFilterLevel == EDataFilterLevel.ONLY_CONTEXT) {
        PathwayVertexGraphItem tmpPathwayVertexGraphItem=GeneralManager.get().getPathwayItemManager().getPathwayVertexGraphItemByDavidId(iDavidID);
        if (tmpPathwayVertexGraphItem == null) {
          continue;
        }
      }
    }
    alTempList.add(iCount);
  }
}",0.9575471698113208
58323,"@Override public void init(GL gl){
  compareViewStateController=new CompareViewStateController(this,iUniqueID,textRenderer,textureManager,pickingManager,glMouseListener,contextMenu,dataDomain);
  compareViewStateController.init(gl);
}","@Override public void init(GL gl){
  compareViewStateController=new CompareViewStateController(this,iUniqueID,textRenderer,textureManager,pickingManager,glMouseListener,contextMenu,dataDomain);
  compareViewStateController.init(gl);
  parentGLCanvas.getParentComposite().getDisplay().asyncExec(new Runnable(){
    public void run(){
      KeyListener listener=new org.eclipse.swt.events.KeyAdapter(){
        @Override public void keyPressed(        KeyEvent e){
          if (e.keyCode == SWT.CTRL) {
            eventPublisher.triggerEvent(new ClearSelectionsEvent());
          }
        }
      }
;
      parentGLCanvas.getParentComposite().addKeyListener(listener);
    }
  }
);
}",0.5092491838955386
58324,"@Override public void replaceContentVA(int setID,EIDCategory idCategory,ContentVAType vaType){
  clusteredSets.add(setID);
  boolean allSetsClustered=true;
  for (  ISet set : setsToCompare) {
    if (!clusteredSets.contains(set.getID())) {
      allSetsClustered=false;
      break;
    }
  }
  if (!allSetsClustered)   return;
  compareViewStateController.setSetsToCompare(setsToCompare);
  compareViewStateController.handleReplaceContentVA(setID,idCategory,vaType);
  clusteredSets.clear();
}","@Override public void replaceContentVA(int setID,EIDCategory idCategory,ContentVAType vaType){
  clusteredSets.add(setID);
  boolean allSetsClustered=true;
  for (  ISet set : setsToCompare) {
    if (!clusteredSets.contains(set.getID())) {
      allSetsClustered=false;
      break;
    }
  }
  compareViewStateController.setSetsToCompare(setsToCompare);
  compareViewStateController.handleReplaceContentVA(setID,idCategory,vaType);
  clusteredSets.clear();
}",0.9633507853403142
58325,"public void handleContentGroupListUpdate(ContentGroupList contentGroupList){
  selectedGroups.clear();
  contentVA.setGroupList(contentGroupList);
  contentGroupList.updateGroupInfo();
  for (int i=0; i <= 10 && i < contentGroupList.size(); i++) {
    Group group=contentGroupList.get(i);
    group.setSelectionType(SelectionType.SELECTION);
    selectedGroups.put(group,null);
  }
  setHeatMapsInactive();
  clearDeselected();
  overview.updateHeatMapTextures(contentSelectionManager);
  isInitialized=false;
  isNewSelection=true;
}","public void handleContentGroupListUpdate(ContentGroupList contentGroupList){
  selectedGroups.clear();
  contentVA.setGroupList(contentGroupList);
  contentGroupList.updateGroupInfo();
  setHeatMapsInactive();
  clearDeselected();
  overview.updateHeatMapTextures(contentSelectionManager);
  isInitialized=false;
  isNewSelection=true;
}",0.7738231917336394
58326,"@Override public void display(GL gl){
  doSlerpActions();
  canvasWidth=viewFrustum.getWidth();
  canvasHeight=viewFrustum.getHeight();
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  pixelDimensions[0]=viewport[2];
  pixelDimensions[1]=viewport[3];
  if (layoutHotSpotInitSwitch == false) {
    layoutHotSpot[0]=canvasWidth / 2;
    layoutHotSpot[1]=canvasHeight / 2;
    layoutHotSpotInitSwitch=true;
  }
  defaultLayoutHotSpot[0]=canvasWidth / 2;
  defaultLayoutHotSpot[1]=canvasHeight / 2;
  Transform heatmapTransform=new Transform();
  heatmapTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)layoutHotSpot[1],0));
  heatmapTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / canvasWidth,(float)(canvasHeight - layoutHotSpot[1]) / canvasHeight,1));
  remoteElementHeatMap.setTransform(heatmapTransform);
  Transform hyperbolicTransform=new Transform();
  hyperbolicTransform.setScale(new Vec3f(layoutHotSpot[0] / canvasWidth,1 * fAspectRatio,1));
  hyperbolicTransform.setTranslation(new Vec3f(0,0,0));
  remoteElementHyperbolic.setTransform(hyperbolicTransform);
  Transform parCoordsTransform=new Transform();
  parCoordsTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)0,0));
  parCoordsTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / 8,(float)layoutHotSpot[1] / 8,1));
  remoteElementParCoords.setTransform(parCoordsTransform);
  renderRemoteLevelElement(gl,remoteElementHyperbolic);
  renderRemoteLevelElement(gl,remoteElementHeatMap);
  renderRemoteLevelElement(gl,remoteElementParCoords);
  if (selectedInput == inputType.EYETRACKER_SIMULATED) {
    int[] mousePositionInt=new int[2];
    mousePositionInt[0]=this.glMouseListener.mousePositionForEyeTracker[0];
    mousePositionInt[1]=this.glMouseListener.mousePositionForEyeTracker[1];
    this.eyeTracker.setRawEyeTrackerPosition(mousePositionInt);
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.receiveData();
    System.out.println(upperLeftScreenPos.x);
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    if (eyeTracker.getFixedCoordinate() != null) {
      if (eyeTracker.getFixedCoordinate()[0] != 0) {
        if (eyeTracker.getFixedCoordinate()[0] < (pixelDimensions[0] * (layoutHotSpot[0] / canvasWidth))) {
          this.focusViewEvent(remoteViewType.HYPERBOLIC);
        }
 else {
          if ((pixelDimensions[1] - eyeTracker.getFixedCoordinate()[1]) < (pixelDimensions[1] * (layoutHotSpot[1] / canvasHeight))) {
            this.focusViewEvent(remoteViewType.PARCOORDS);
          }
 else {
            this.focusViewEvent(remoteViewType.HEATMAP);
          }
        }
      }
    }
    this.evaluateUserSelection();
  }
  contextMenu.render(gl,this);
}","@Override public void display(GL gl){
  doSlerpActions();
  canvasWidth=viewFrustum.getWidth();
  canvasHeight=viewFrustum.getHeight();
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  pixelDimensions[0]=viewport[2];
  pixelDimensions[1]=viewport[3];
  if (layoutHotSpotInitSwitch == false) {
    layoutHotSpot[0]=canvasWidth / 2;
    layoutHotSpot[1]=canvasHeight / 2;
    layoutHotSpotInitSwitch=true;
  }
  defaultLayoutHotSpot[0]=canvasWidth / 2;
  defaultLayoutHotSpot[1]=canvasHeight / 2;
  Transform heatmapTransform=new Transform();
  heatmapTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)layoutHotSpot[1],0));
  heatmapTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / canvasWidth,(float)(canvasHeight - layoutHotSpot[1]) / canvasHeight,1));
  remoteElementHeatMap.setTransform(heatmapTransform);
  Transform hyperbolicTransform=new Transform();
  hyperbolicTransform.setScale(new Vec3f(layoutHotSpot[0] / canvasWidth,1 * fAspectRatio,1));
  hyperbolicTransform.setTranslation(new Vec3f(0,0,0));
  remoteElementHyperbolic.setTransform(hyperbolicTransform);
  Transform parCoordsTransform=new Transform();
  parCoordsTransform.setTranslation(new Vec3f((float)layoutHotSpot[0],(float)0,0));
  parCoordsTransform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot[0]) / 8,(float)layoutHotSpot[1] / 8,1));
  remoteElementParCoords.setTransform(parCoordsTransform);
  renderRemoteLevelElement(gl,remoteElementHyperbolic);
  renderRemoteLevelElement(gl,remoteElementHeatMap);
  renderRemoteLevelElement(gl,remoteElementParCoords);
  if (selectedInput == inputType.EYETRACKER_SIMULATED) {
    int[] mousePositionInt=new int[2];
    mousePositionInt[0]=this.glMouseListener.mousePositionForEyeTracker[0];
    mousePositionInt[1]=this.glMouseListener.mousePositionForEyeTracker[1];
    this.eyeTracker.setRawEyeTrackerPosition(mousePositionInt);
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (selectedInput == inputType.EYETRACKER_ONLY) {
    eyeTracker.receiveData();
    eyeTracker.cutWindowOffset(upperLeftScreenPos.x,upperLeftScreenPos.y);
    eyeTracker.checkForFixedCoordinate();
  }
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    if (eyeTracker.getFixedCoordinate() != null) {
      if (eyeTracker.getFixedCoordinate()[0] != 0) {
        if (eyeTracker.getFixedCoordinate()[0] < (pixelDimensions[0] * (layoutHotSpot[0] / canvasWidth))) {
          this.focusViewEvent(remoteViewType.HYPERBOLIC);
        }
 else {
          if ((pixelDimensions[1] - eyeTracker.getFixedCoordinate()[1]) < (pixelDimensions[1] * (layoutHotSpot[1] / canvasHeight))) {
            this.focusViewEvent(remoteViewType.PARCOORDS);
          }
 else {
            this.focusViewEvent(remoteViewType.HEATMAP);
          }
        }
      }
    }
    this.evaluateUserSelection();
  }
  contextMenu.render(gl,this);
}",0.9923435419440746
58327,"/** 
 * /** Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLDataWindows(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  canvas=glCanvas;
  viewType=GLDataWindows.VIEW_ID;
  containedGLViews=new ArrayList<AGLView>();
  newViews=new ArrayList<ASerializedView>();
  defaultLayoutHotSpot=new float[2];
  layoutHotSpot=new float[2];
  selectedInput=inputType.EYETRACKER_SIMULATED;
  viewport=new int[4];
  pixelDimensions=new int[2];
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    eyeTracker=new eyeTracking(true,""String_Node_Str"");
    if (selectedInput == inputType.EYETRACKER_ONLY) {
      eyeTracker.startTracking();
    }
  }
  viewSlerpStartPoint=new float[2];
  viewSlerpTargetPoint=new float[2];
  simpleSlerpActions=new ArrayList<SimpleSlerp>();
  zoomPointHyperbolic=new float[2];
  zoomPointHyperbolic[0]=1.5f;
  zoomPointHyperbolic[1]=1;
  zoomPointHeatmap=new float[2];
  zoomPointHeatmap[0]=0.5f;
  zoomPointHeatmap[1]=0.5f;
  zoomPointParCoord=new float[2];
  zoomPointParCoord[0]=0.5f;
  zoomPointParCoord[1]=1.5f;
  CmdDataCreateDataDomain cmd=new CmdDataCreateDataDomain(ECommandType.CREATE_DATA_DOMAIN);
  cmd.setAttributes(""String_Node_Str"");
  cmd.doCommand();
  getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      upperLeftScreenPos=getParentGLCanvas().getParentComposite().toDisplay(1,1);
    }
  }
);
}","/** 
 * /** Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLDataWindows(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  canvas=glCanvas;
  viewType=GLDataWindows.VIEW_ID;
  containedGLViews=new ArrayList<AGLView>();
  newViews=new ArrayList<ASerializedView>();
  defaultLayoutHotSpot=new float[2];
  layoutHotSpot=new float[2];
  selectedInput=inputType.EYETRACKER_ONLY;
  viewport=new int[4];
  pixelDimensions=new int[2];
  if (selectedInput == inputType.EYETRACKER_ONLY || selectedInput == inputType.EYETRACKER_SIMULATED) {
    eyeTracker=new eyeTracking(true,""String_Node_Str"");
    if (selectedInput == inputType.EYETRACKER_ONLY) {
      eyeTracker.startTracking();
    }
  }
  viewSlerpStartPoint=new float[2];
  viewSlerpTargetPoint=new float[2];
  simpleSlerpActions=new ArrayList<SimpleSlerp>();
  zoomPointHyperbolic=new float[2];
  zoomPointHyperbolic[0]=1.5f;
  zoomPointHyperbolic[1]=1;
  zoomPointHeatmap=new float[2];
  zoomPointHeatmap[0]=0.5f;
  zoomPointHeatmap[1]=0.5f;
  zoomPointParCoord=new float[2];
  zoomPointParCoord[0]=0.5f;
  zoomPointParCoord[1]=1.5f;
  CmdDataCreateDataDomain cmd=new CmdDataCreateDataDomain(ECommandType.CREATE_DATA_DOMAIN);
  cmd.setAttributes(""String_Node_Str"");
  cmd.doCommand();
  getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      upperLeftScreenPos=getParentGLCanvas().getParentComposite().toDisplay(1,1);
    }
  }
);
}",0.995823964021844
58328,"public float calculateCorrectDiskRotation(PoincareNode currentNode){
  if (currentNode != null) {
    if (currentNode.iComparableValue != 1) {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] parentPosition;
      parentPosition=currentNode.getParent().getPosition().clone();
      float[] relativePosition=new float[2];
      relativePosition[0]=-currentPosition[0];
      relativePosition[1]=-currentPosition[1];
      currentPosition[0]=0;
      currentPosition[1]=0;
      ComplexNumber moebiusTransformation=new ComplexNumber();
      ComplexNumber complexParentPosition=new ComplexNumber();
      moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
      complexParentPosition.setValue((double)parentPosition[0],(double)parentPosition[1]);
      complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
      relativePosition[0]=(float)complexParentPosition.getRealPart();
      relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
      float[] eV=getEV(relativePosition);
      float angle=(float)Math.atan2(eV[1],eV[0]);
      if (Math.abs(-angle + Math.PI) < Math.PI) {
        return -angle + (float)Math.PI;
      }
 else {
        return -angle - (float)Math.PI;
      }
    }
 else {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] childPosition;
      if (currentNode.getNrLeaves() != 0) {
        childPosition=currentNode.getChildren().get(0).getPosition();
        float[] relativePosition=new float[2];
        relativePosition[0]=-currentPosition[0];
        relativePosition[1]=-currentPosition[1];
        currentPosition[0]=0;
        currentPosition[1]=0;
        ComplexNumber moebiusTransformation=new ComplexNumber();
        ComplexNumber complexParentPosition=new ComplexNumber();
        moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
        complexParentPosition.setValue((double)childPosition[0],(double)childPosition[1]);
        complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
        relativePosition[0]=(float)complexParentPosition.getRealPart();
        relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
        float[] eV=getEV(relativePosition);
        float angle=(float)Math.atan2(eV[1],eV[0]);
        float angleOffset=((float)Math.PI / (float)currentNode.getChildren().size()) / 2;
        angle=angle + angleOffset + (float)Math.PI / 2;
        if (Math.abs(-angle + Math.PI) < Math.PI) {
          return -angle + (float)Math.PI;
        }
 else {
          return -angle - (float)Math.PI;
        }
      }
    }
  }
 else {
  }
  return 0;
}","public float calculateCorrectDiskRotation(PoincareNode currentNode){
  if (currentNode != null) {
    if (currentNode.iComparableValue != 1) {
      calculateRootNodeAngleSwitch=true;
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] parentPosition;
      parentPosition=currentNode.getParent().getPosition().clone();
      float[] relativePosition=new float[2];
      relativePosition[0]=-currentPosition[0];
      relativePosition[1]=-currentPosition[1];
      currentPosition[0]=0;
      currentPosition[1]=0;
      ComplexNumber moebiusTransformation=new ComplexNumber();
      ComplexNumber complexParentPosition=new ComplexNumber();
      moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
      complexParentPosition.setValue((double)parentPosition[0],(double)parentPosition[1]);
      complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
      relativePosition[0]=(float)complexParentPosition.getRealPart();
      relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
      float[] eV=getEV(relativePosition);
      float angle=(float)Math.atan2(eV[1],eV[0]);
      if (Math.abs(-angle + Math.PI) < Math.PI) {
        return -angle + (float)Math.PI;
      }
 else {
        return -angle - (float)Math.PI;
      }
    }
 else {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] childPosition;
      if (this.calculateRootNodeAngleSwitch == true) {
        if (currentNode.getChildren() != null) {
          childPosition=currentNode.getChildren().get(0).getPosition();
          float[] relativePosition=new float[2];
          relativePosition[0]=-currentPosition[0];
          relativePosition[1]=-currentPosition[1];
          currentPosition[0]=0;
          currentPosition[1]=0;
          ComplexNumber moebiusTransformation=new ComplexNumber();
          ComplexNumber complexParentPosition=new ComplexNumber();
          moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
          complexParentPosition.setValue((double)childPosition[0],(double)childPosition[1]);
          complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
          relativePosition[0]=(float)complexParentPosition.getRealPart();
          relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
          float[] eV=getEV(relativePosition);
          float angle=(float)Math.atan2(eV[1],eV[0]);
          float angleOffset=((float)Math.PI / (float)currentNode.getChildren().size()) / 2;
          angle=angle + angleOffset + (float)Math.PI / 2;
          if (Math.abs(-angle + Math.PI) < Math.PI) {
            return -angle + (float)Math.PI;
          }
 else {
            return -angle - (float)Math.PI;
          }
        }
      }
    }
  }
  return 0;
}",0.9590602867507342
58329,"public void receiveData(){
  receivedEyeData=tracker.getEyeTrackData();
  rawEyeTrackerPosition[0]=(int)receivedEyeData[0];
  rawEyeTrackerPosition[1]=(int)receivedEyeData[1];
  if (this.rawEyeTrackerPosition[0] != 0) {
    System.out.println(""String_Node_Str"" + rawEyeTrackerPosition[0] + ""String_Node_Str""+ rawEyeTrackerPosition[0]);
  }
}","public void receiveData(){
  receivedEyeData=tracker.getEyeTrackData();
  rawEyeTrackerPosition[0]=(int)receivedEyeData[0];
  rawEyeTrackerPosition[1]=(int)receivedEyeData[1];
  if (this.rawEyeTrackerPosition[0] != 0) {
  }
}",0.7950530035335689
58330,"public void drawNode(PoincareNode node,int mode){
  float[] size=new float[2];
  if (node != this.getCenteredNode()) {
    size=getMetric(node.getPosition(),nodeSize);
  }
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DATAW_NODE,node.iComparableValue);
  gl.glPushName(iPickingID);
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 2) {
    float alpha=1;
    if (node.markedToRemove == true) {
      alpha=0.7f;
    }
    size[0]=size[0] * 4;
    size[1]=size[1] * 4;
    Vec3f lowerLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f lowerRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f scalingPivot=new Vec3f(1,1,1);
    textureManager.renderGUITexture(gl,EIconTextures.PATHWAY_ICON,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,alpha,0);
  }
 else {
    if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
      if (node == this.getCenteredNode()) {
        size=this.findOptimalCenterNodeSize(node,0.001f);
      }
    }
    float[] position=new float[2];
    position[0]=-size[0] * canvasWidth / 2 + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2;
    position[1]=-size[1] * canvasHeight / 2 * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2;
    hyperbolic.drawRemoteView(gl,node,position,size[0]);
  }
  gl.glPopName();
}","public void drawNode(PoincareNode node,int mode){
  float[] size=new float[2];
  if (node != this.getCenteredNode()) {
    size=getMetric(node.getPosition(),nodeSize);
  }
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DATAW_NODE,node.iComparableValue);
  gl.glPushName(iPickingID);
  if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 2) {
    node.eyeTrackable=false;
    float alpha=1;
    if (node.markedToRemove == true) {
      alpha=0.7f;
    }
    size[0]=size[0] * 4;
    size[1]=size[1] * 4;
    Vec3f lowerLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f lowerRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(-size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperRightCorner=new Vec3f((size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f upperLeftCorner=new Vec3f((-size[0] + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2),(size[1] * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2),0);
    Vec3f scalingPivot=new Vec3f(1,1,1);
    textureManager.renderGUITexture(gl,EIconTextures.PATHWAY_ICON,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,alpha,0);
  }
 else {
    if (distanceToDetaillevel(node.getDistanceFromOrigin()) == 1) {
      if (node == this.getCenteredNode()) {
        size=this.findOptimalCenterNodeSize(node,0.001f);
      }
    }
    node.eyeTrackable=true;
    float[] position=new float[2];
    position[0]=-size[0] * canvasWidth / 2 + node.getZoomedPosition()[0] * displayScaleFactorX + canvasWidth / 2;
    position[1]=-size[1] * canvasHeight / 2 * (canvasHeight / canvasWidth) + node.getZoomedPosition()[1] * displayScaleFactorY + canvasHeight / 2;
    hyperbolic.drawRemoteView(gl,node,position,size[0]);
  }
  gl.glPopName();
}",0.9872682599955328
58331,"public boolean setEyeTrackerAction(int[] mouseCoord,float[] offset,float[] scalation){
  float[] mousePoint=new float[2];
  mousePoint[0]=(float)mouseCoord[0];
  mousePoint[1]=(float)mouseCoord[1];
  boolean returnValue;
  float factorX=1 / (float)(this.getParentGLCanvas().getWidth() * scalation[0]);
  float factorY=1 / (float)(this.getParentGLCanvas().getHeight());
  if (mousePoint != null && offset != null) {
    mousePoint[0]=(mousePoint[0] * factorX - offset[0]) * 2 - 1;
    mousePoint[1]=((this.getParentGLCanvas().getHeight() - mousePoint[1]) * factorY - offset[1]) * 2 - 1;
  }
  PoincareNode selectedNode=disk.processEyeTrackerAction(mousePoint.clone(),arSlerpActions);
  if (selectedNode == disk.getCenteredNode()) {
    return true;
  }
  if (selectedNode != null) {
    disk.setCenteredNode(selectedNode);
    slerpedNode=selectedNode;
    returnValue=true;
  }
 else {
    returnValue=false;
  }
  correctDiskAngle();
  return returnValue;
}","public boolean setEyeTrackerAction(int[] mouseCoord,float[] offset,float[] scalation){
  if (this.displayFullView) {
    return false;
  }
  float[] mousePoint=new float[2];
  mousePoint[0]=(float)mouseCoord[0];
  mousePoint[1]=(float)mouseCoord[1];
  boolean returnValue;
  float factorX=1 / (float)(this.getParentGLCanvas().getWidth() * scalation[0]);
  float factorY=1 / (float)(this.getParentGLCanvas().getHeight());
  if (mousePoint != null && offset != null) {
    mousePoint[0]=(mousePoint[0] * factorX - offset[0]) * 2 - 1;
    mousePoint[1]=((this.getParentGLCanvas().getHeight() - mousePoint[1]) * factorY - offset[1]) * 2 - 1;
  }
  PoincareNode selectedNode=disk.processEyeTrackerAction(mousePoint.clone(),arSlerpActions);
  if (selectedNode == disk.getCenteredNode()) {
    return true;
  }
  if (selectedNode != null) {
    disk.setCenteredNode(selectedNode);
    slerpedNode=selectedNode;
    returnValue=true;
  }
 else {
    returnValue=false;
  }
  correctDiskAngle();
  return returnValue;
}",0.9735772357723578
58332,"public float calculateCorrectDiskRotation(PoincareNode currentNode){
  if (currentNode != null) {
    if (currentNode.iComparableValue != 1) {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] parentPosition;
      parentPosition=currentNode.getParent().getPosition().clone();
      float[] relativePosition=new float[2];
      relativePosition[0]=-currentPosition[0];
      relativePosition[1]=-currentPosition[1];
      currentPosition[0]=0;
      currentPosition[1]=0;
      ComplexNumber moebiusTransformation=new ComplexNumber();
      ComplexNumber complexParentPosition=new ComplexNumber();
      moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
      complexParentPosition.setValue((double)parentPosition[0],(double)parentPosition[1]);
      complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
      relativePosition[0]=(float)complexParentPosition.getRealPart();
      relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
      float[] eV=getEV(relativePosition);
      float angle=(float)Math.atan2(eV[1],eV[0]);
      if (Math.abs(-angle + Math.PI) < Math.PI) {
        return -angle + (float)Math.PI;
      }
 else {
        return -angle - (float)Math.PI;
      }
    }
 else {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] childPosition;
      if (currentNode.getChildren() != null) {
        childPosition=currentNode.getChildren().get(0).getPosition();
        float[] relativePosition=new float[2];
        relativePosition[0]=-currentPosition[0];
        relativePosition[1]=-currentPosition[1];
        currentPosition[0]=0;
        currentPosition[1]=0;
        ComplexNumber moebiusTransformation=new ComplexNumber();
        ComplexNumber complexParentPosition=new ComplexNumber();
        moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
        complexParentPosition.setValue((double)childPosition[0],(double)childPosition[1]);
        complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
        relativePosition[0]=(float)complexParentPosition.getRealPart();
        relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
        float[] eV=getEV(relativePosition);
        float angle=(float)Math.atan2(eV[1],eV[0]);
        float angleOffset=((float)Math.PI / (float)currentNode.getChildren().size()) / 2;
        angle=angle + angleOffset + (float)Math.PI / 2;
        if (Math.abs(-angle + Math.PI) < Math.PI) {
          return -angle + (float)Math.PI;
        }
 else {
          return -angle - (float)Math.PI;
        }
      }
    }
  }
 else {
  }
  return 0;
}","public float calculateCorrectDiskRotation(PoincareNode currentNode){
  if (currentNode != null) {
    if (currentNode.iComparableValue != 1) {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] parentPosition;
      parentPosition=currentNode.getParent().getPosition().clone();
      float[] relativePosition=new float[2];
      relativePosition[0]=-currentPosition[0];
      relativePosition[1]=-currentPosition[1];
      currentPosition[0]=0;
      currentPosition[1]=0;
      ComplexNumber moebiusTransformation=new ComplexNumber();
      ComplexNumber complexParentPosition=new ComplexNumber();
      moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
      complexParentPosition.setValue((double)parentPosition[0],(double)parentPosition[1]);
      complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
      relativePosition[0]=(float)complexParentPosition.getRealPart();
      relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
      float[] eV=getEV(relativePosition);
      float angle=(float)Math.atan2(eV[1],eV[0]);
      if (Math.abs(-angle + Math.PI) < Math.PI) {
        return -angle + (float)Math.PI;
      }
 else {
        return -angle - (float)Math.PI;
      }
    }
 else {
      float[] currentPosition=new float[2];
      currentPosition=currentNode.getPosition().clone();
      float[] childPosition;
      if (currentNode.getNrLeaves() != 0) {
        childPosition=currentNode.getChildren().get(0).getPosition();
        float[] relativePosition=new float[2];
        relativePosition[0]=-currentPosition[0];
        relativePosition[1]=-currentPosition[1];
        currentPosition[0]=0;
        currentPosition[1]=0;
        ComplexNumber moebiusTransformation=new ComplexNumber();
        ComplexNumber complexParentPosition=new ComplexNumber();
        moebiusTransformation.setValue((double)relativePosition[0],(double)relativePosition[1]);
        complexParentPosition.setValue((double)childPosition[0],(double)childPosition[1]);
        complexParentPosition=this.moebiusTransformation(complexParentPosition,moebiusTransformation);
        relativePosition[0]=(float)complexParentPosition.getRealPart();
        relativePosition[1]=(float)complexParentPosition.getImaginaryPart();
        float[] eV=getEV(relativePosition);
        float angle=(float)Math.atan2(eV[1],eV[0]);
        float angleOffset=((float)Math.PI / (float)currentNode.getChildren().size()) / 2;
        angle=angle + angleOffset + (float)Math.PI / 2;
        if (Math.abs(-angle + Math.PI) < Math.PI) {
          return -angle + (float)Math.PI;
        }
 else {
          return -angle - (float)Math.PI;
        }
      }
    }
  }
 else {
  }
  return 0;
}",0.553018233315631
58333,"private void renderRemoteLevelElement(final GL gl,RemoteLevelElement element){
  AGLView glView=element.getGLView();
  if (glView == null) {
    return;
  }
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.REMOTE_LEVEL_ELEMENT,element.getID()));
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,glView.getID()));
  gl.glPushMatrix();
  Transform transform=element.getTransform();
  Vec3f translation=transform.getTranslation();
  Rotf rot=transform.getRotation();
  Vec3f scale=transform.getScale();
  Vec3f axis=new Vec3f();
  float fAngle=rot.get(axis);
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  gl.glScalef(scale.x(),scale.y(),scale.z());
  glView.displayRemote(gl);
  gl.glPopMatrix();
  gl.glPopName();
  gl.glPopName();
}","private void renderRemoteLevelElement(final GL gl,RemoteLevelElement element){
  AGLView glView=element.getGLView();
  if (glView == null) {
    return;
  }
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.REMOTE_LEVEL_ELEMENT,element.getID()));
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,glView.getID()));
  gl.glPushMatrix();
  Transform transform=element.getTransform();
  Vec3f translation=transform.getTranslation();
  Rotf rot=transform.getRotation();
  Vec3f scale=transform.getScale();
  Vec3f axis=new Vec3f();
  float fAngle=rot.get(axis);
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  gl.glScalef(scale.x(),scale.y(),scale.z());
  glView.displayRemote(gl);
  gl.glPopMatrix();
  gl.glPopName();
  gl.glPopName();
}",0.9237199582027168
58334,"public NodeSlerp(float speed,float[] startPoint,float[] targetPoint){
  this.startPoint=startPoint;
  this.targetPoint=targetPoint;
  this.speed=speed;
  time=new SystemTime();
  ((SystemTime)time).rebase();
  float[] tempVector=new float[2];
  tempVector[0]=targetPoint[0] - startPoint[0];
  tempVector[1]=targetPoint[1] - startPoint[1];
  length=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
  directionVector=new float[2];
  directionVector[0]=tempVector[0] / length;
  directionVector[1]=tempVector[1] / length;
  actualPoint=new float[2];
  returnPoint=new float[2];
  actualPoint=startPoint.clone();
  time.update();
  dummyDisk=new DataWindowsDisk(null);
  Tree<PoincareNode> dummyTree=new Tree<PoincareNode>();
  new PoincareNode(dummyTree,""String_Node_Str"",1);
  tempVector=new float[2];
  calcuatedPosition=new float[2];
}","public NodeSlerp(float speed,float[] startPoint,float[] targetPoint){
  this.startPoint=startPoint;
  this.targetPoint=targetPoint;
  this.speed=speed;
  time=new SystemTime();
  ((SystemTime)time).rebase();
  float[] tempVector=new float[2];
  tempVector[0]=targetPoint[0] - startPoint[0];
  tempVector[1]=targetPoint[1] - startPoint[1];
  length=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
  directionVector=new float[2];
  directionVector[0]=tempVector[0] / length;
  directionVector[1]=tempVector[1] / length;
  actualPoint=new float[2];
  returnPoint=new float[2];
  actualPoint=startPoint.clone();
  time.update();
  dummyDisk=new DataWindowsDisk(null);
  Tree<PoincareNode> dummyTree=new Tree<PoincareNode>();
  new PoincareNode(dummyTree,""String_Node_Str"",1);
}",0.9635385534967124
58335,"public boolean doASlerp(float[] position){
  actualPoint=position.clone();
  slerpFactor=speed * (float)time.deltaT();
  tempVector[0]=targetPoint[0] - actualPoint[0];
  tempVector[1]=targetPoint[1] - actualPoint[1];
  distanceToTarget=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
  if (distanceToTarget <= slerpFactor) {
    slerpFactor=0;
    if ((targetPoint[0] == 0) && (targetPoint[1] == 0)) {
      returnPoint[0]=position[0] * -1;
      returnPoint[1]=position[1] * -1;
      return false;
    }
    oldDistanceToTarget=distanceToTarget;
    tempVector[0]=targetPoint[0] - actualPoint[0];
    tempVector[1]=targetPoint[1] - actualPoint[1];
    oldDistanceToTarget=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
    for (int i=0; i < numberOfIterations; i++) {
      actualPoint=position.clone();
      tempVector[0]=targetPoint[0] - calcuatedPosition[0];
      tempVector[1]=targetPoint[1] - calcuatedPosition[1];
      oldDistanceToTarget=distanceToTarget;
      distanceToTarget=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
      if (distanceToTarget < precision) {
        break;
      }
      if ((distanceToTarget > oldDistanceToTarget) && (i > 1)) {
        break;
      }
      slerpFactor=slerpFactor + precision;
      ComplexNumber complexPoint=new ComplexNumber();
      complexPoint.setValue(actualPoint[0],actualPoint[1]);
      complexPoint=dummyDisk.moebiusTransformation(complexPoint,new ComplexNumber(directionVector[0] * slerpFactor,directionVector[1] * slerpFactor));
      calcuatedPosition[0]=(float)complexPoint.getRealPart();
      calcuatedPosition[1]=(float)complexPoint.getImaginaryPart();
    }
    returnPoint[0]=directionVector[0] * slerpFactor;
    returnPoint[1]=directionVector[1] * slerpFactor;
    ComplexNumber complexPoint=new ComplexNumber();
    complexPoint.setValue(position[0],position[1]);
    complexPoint=dummyDisk.moebiusTransformation(complexPoint,new ComplexNumber(returnPoint[0],returnPoint[1]));
    calcuatedPosition[0]=(float)complexPoint.getRealPart();
    calcuatedPosition[1]=(float)complexPoint.getImaginaryPart();
    return false;
  }
  tempVector[0]=targetPoint[0] - actualPoint[0];
  tempVector[1]=targetPoint[1] - actualPoint[1];
  dLength=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
  directionVector[0]=tempVector[0] / dLength;
  directionVector[1]=tempVector[1] / dLength;
  returnPoint[0]=directionVector[0] * slerpFactor;
  returnPoint[1]=directionVector[1] * slerpFactor;
  time.update();
  return true;
}","public boolean doASlerp(float[] position){
  actualPoint=position.clone();
  slerpFactor=speed * (float)time.deltaT();
  float[] tempVector=new float[2];
  tempVector[0]=actualPoint[0] - startPoint[0];
  tempVector[1]=actualPoint[1] - startPoint[1];
  tempVector[0]=targetPoint[0] - actualPoint[0];
  tempVector[1]=targetPoint[1] - actualPoint[1];
  distanceToTarget=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
  if (distanceToTarget <= slerpFactor) {
    slerpFactor=0;
    if ((targetPoint[0] == 0) && (targetPoint[1] == 0)) {
      returnPoint[0]=(position[0]) * -1;
      returnPoint[1]=(position[1]) * -1;
      return false;
    }
    float oldDistanceToTarget=distanceToTarget;
    float[] calcuatedPosition=new float[2];
    tempVector[0]=targetPoint[0] - actualPoint[0];
    tempVector[1]=targetPoint[1] - actualPoint[1];
    oldDistanceToTarget=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
    for (int i=0; i < numberOfIterations; i++) {
      actualPoint=position.clone();
      tempVector[0]=targetPoint[0] - calcuatedPosition[0];
      tempVector[1]=targetPoint[1] - calcuatedPosition[1];
      oldDistanceToTarget=distanceToTarget;
      distanceToTarget=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
      if (distanceToTarget < precision) {
        break;
      }
      if ((distanceToTarget > oldDistanceToTarget) && (i > 1)) {
        break;
      }
      slerpFactor=slerpFactor + precision;
      ComplexNumber complexPoint=new ComplexNumber();
      complexPoint.setValue(actualPoint[0],actualPoint[1]);
      complexPoint=dummyDisk.moebiusTransformation(complexPoint,new ComplexNumber(directionVector[0] * slerpFactor,directionVector[1] * slerpFactor));
      calcuatedPosition[0]=(float)complexPoint.getRealPart();
      calcuatedPosition[1]=(float)complexPoint.getImaginaryPart();
    }
    returnPoint[0]=directionVector[0] * slerpFactor;
    returnPoint[1]=directionVector[1] * slerpFactor;
    ComplexNumber complexPoint=new ComplexNumber();
    complexPoint.setValue(position[0],position[1]);
    complexPoint=dummyDisk.moebiusTransformation(complexPoint,new ComplexNumber(returnPoint[0],returnPoint[1]));
    calcuatedPosition[0]=(float)complexPoint.getRealPart();
    calcuatedPosition[1]=(float)complexPoint.getImaginaryPart();
    return false;
  }
  tempVector[0]=targetPoint[0] - actualPoint[0];
  tempVector[1]=targetPoint[1] - actualPoint[1];
  dLength=(float)Math.sqrt(tempVector[0] * tempVector[0] + tempVector[1] * tempVector[1]);
  directionVector[0]=tempVector[0] / dLength;
  directionVector[1]=tempVector[1] / dLength;
  returnPoint[0]=directionVector[0] * slerpFactor;
  returnPoint[1]=directionVector[1] * slerpFactor;
  time.update();
  return true;
}",0.9578035747189976
58336,"/** 
 * Constructor.
 * @param sName
 * @param sShapeType
 * @param shX
 * @param shY
 * @param shWidth
 * @param shHeight
 */
public PathwayVertexGraphItemRep(final String sName,final String sShapeType,final short shX,final short shY,final short shWidth,final short shHeight){
  super(EGraphItemKind.NODE);
  if (sShapeType == null || sShapeType.isEmpty())   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    shape=EPathwayVertexShape.valueOf(sShapeType);
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
  this.sName=sName;
  this.shWidth=shWidth;
  this.shHeight=shHeight;
  setRectangularCoords(shX,shY,shWidth,shHeight);
}","/** 
 * Constructor.
 * @param sName
 * @param sShapeType
 * @param shX
 * @param shY
 * @param shWidth
 * @param shHeight
 */
public PathwayVertexGraphItemRep(final String sName,final String sShapeType,final short shX,final short shY,final short shWidth,final short shHeight){
  super(EGraphItemKind.NODE);
  if (sShapeType == null || sShapeType.isEmpty())   shape=EPathwayVertexShape.rect;
 else   shape=EPathwayVertexShape.valueOf(sShapeType);
  this.sName=sName;
  this.shWidth=shWidth;
  this.shHeight=shHeight;
  setRectangularCoords(shX,shY,shWidth,shHeight);
}",0.6634304207119741
58337,"public void init(){
  initialContainedViews=new ArrayList<ASerializedView>();
  SerializedParallelCoordinatesView parCoords=new SerializedParallelCoordinatesView();
  parCoords.setDataDomain(EDataDomain.GENETIC_DATA);
  initialContainedViews.add(parCoords);
  SerializedTissueViewBrowserView tissueViewBrowser=new SerializedTissueViewBrowserView();
  tissueViewBrowser.setDataDomain(EDataDomain.TISSUE_DATA);
  initialContainedViews.add(tissueViewBrowser);
  SerializedHierarchicalHeatMapView heatMap=new SerializedHierarchicalHeatMapView();
  heatMap.setDataDomain(EDataDomain.GENETIC_DATA);
  initialContainedViews.add(heatMap);
  parCoords=new SerializedParallelCoordinatesView();
  parCoords.setDataDomain(EDataDomain.CLINICAL_DATA);
  initialContainedViews.add(parCoords);
  SerializedPathwayViewBrowserView pathwayViewBrowser=new SerializedPathwayViewBrowserView();
  pathwayViewBrowser.setDataDomain(EDataDomain.PATHWAY_DATA);
  initialContainedViews.add(pathwayViewBrowser);
  SerializedGlyphView glyph=new SerializedGlyphView();
  glyph.setDataDomain(EDataDomain.CLINICAL_DATA);
  initialContainedViews.add(glyph);
}","public void init(){
  initialContainedViews=new ArrayList<ASerializedView>();
  SerializedParallelCoordinatesView parCoords=new SerializedParallelCoordinatesView();
  parCoords.setDataDomain(EDataDomain.GENETIC_DATA);
  initialContainedViews.add(parCoords);
  SerializedTissueViewBrowserView tissueViewBrowser=new SerializedTissueViewBrowserView();
  tissueViewBrowser.setDataDomain(EDataDomain.TISSUE_DATA);
  initialContainedViews.add(tissueViewBrowser);
  SerializedHierarchicalHeatMapView heatMap=new SerializedHierarchicalHeatMapView();
  heatMap.setDataDomain(EDataDomain.GENETIC_DATA);
  initialContainedViews.add(heatMap);
  GeneralManager.get().getUseCase(EDataDomain.CLINICAL_DATA).updateSetInViews();
  parCoords=new SerializedParallelCoordinatesView();
  parCoords.setDataDomain(EDataDomain.CLINICAL_DATA);
  initialContainedViews.add(parCoords);
  SerializedPathwayViewBrowserView pathwayViewBrowser=new SerializedPathwayViewBrowserView();
  pathwayViewBrowser.setDataDomain(EDataDomain.PATHWAY_DATA);
  initialContainedViews.add(pathwayViewBrowser);
  SerializedGlyphView glyph=new SerializedGlyphView();
  glyph.setDataDomain(EDataDomain.CLINICAL_DATA);
  initialContainedViews.add(glyph);
}",0.646074646074646
58338,"@Override public void display(final GL gl){
  if (bShowSelectionHeatMap) {
    gl.glTranslatef(viewFrustum.getRight() - glBookmarks.getViewFrustum().getWidth(),0,0.002f);
    IViewFrustum sHMFrustum=glBookmarks.getViewFrustum();
    sHMFrustum.setTop(viewFrustum.getTop());
    sHMFrustum.setBottom(viewFrustum.getBottom());
    gl.glColor4fv(GeneralRenderStyle.PANEL_BACKGROUN_COLOR,0);
    gl.glLineWidth(1);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(glBookmarks.getViewFrustum().getWidth(),0,0);
    gl.glVertex3f(glBookmarks.getViewFrustum().getWidth(),glBookmarks.getViewFrustum().getHeight(),0);
    gl.glVertex3f(0,glBookmarks.getViewFrustum().getHeight(),0);
    gl.glEnd();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.PCS_VIEW_SELECTION,glBookmarks.getID());
    gl.glPushName(iPickingID);
    glBookmarks.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(-viewFrustum.getRight() + glBookmarks.getViewFrustum().getWidth(),0,-0.002f);
  }
  if (generalManager.getTrackDataProvider().isTrackModeActive())   handleTrackInput(gl);
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (glMouseListener.wasMouseReleased()) {
      bWasAxisMoved=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
}","@Override public void display(final GL gl){
  if (bShowSelectionHeatMap) {
    gl.glTranslatef(viewFrustum.getRight() - glBookmarks.getViewFrustum().getWidth(),0,0.002f);
    IViewFrustum sHMFrustum=glBookmarks.getViewFrustum();
    sHMFrustum.setTop(viewFrustum.getTop());
    sHMFrustum.setBottom(viewFrustum.getBottom());
    gl.glColor4fv(GeneralRenderStyle.PANEL_BACKGROUN_COLOR,0);
    gl.glLineWidth(1);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(glBookmarks.getViewFrustum().getWidth(),0,0);
    gl.glVertex3f(glBookmarks.getViewFrustum().getWidth(),glBookmarks.getViewFrustum().getHeight(),0);
    gl.glVertex3f(0,glBookmarks.getViewFrustum().getHeight(),0);
    gl.glEnd();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.PCS_VIEW_SELECTION,glBookmarks.getID());
    gl.glPushName(iPickingID);
    glBookmarks.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(-viewFrustum.getRight() + glBookmarks.getViewFrustum().getWidth(),0,-0.002f);
  }
  if (generalManager.getTrackDataProvider().isTrackModeActive())   handleTrackInput(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (glMouseListener.wasMouseReleased()) {
      bWasAxisMoved=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
}",0.9936459909228442
58339,"public int getElementNumberOfFoldChangeReduction(ISet compareSet){
  int numberOfElements=0;
  ContentVirtualArray origVA=compareSet.getContentVA(ContentVAType.CONTENT);
  double[] resultVector=setToFoldChangeResult.get(compareSet).getFirst();
  FoldChangeSettings settings=setToFoldChangeResult.get(compareSet).getSecond();
  double foldChangeRatio=settings.getRatio();
  FoldChangeEvaluator foldChangeEvaluator=settings.getEvaluator();
  for (Integer contentIndex=0; contentIndex < origVA.size(); contentIndex++) {
switch (foldChangeEvaluator) {
case LESS:
      if (resultVector[contentIndex] > foldChangeRatio)       continue;
    break;
case GREATER:
  if (resultVector[contentIndex] < foldChangeRatio)   continue;
break;
case SAME:
if (Math.abs(resultVector[contentIndex]) > foldChangeRatio) continue;
break;
}
numberOfElements++;
}
return numberOfElements;
}","public int getElementNumberOfFoldChangeReduction(ISet compareSet){
  int numberOfElements=0;
  ContentVirtualArray origVA=compareSet.getContentVA(ContentVAType.CONTENT);
  double[] resultVector=setToFoldChangeResult.get(compareSet).getFirst();
  FoldChangeSettings settings=setToFoldChangeResult.get(compareSet).getSecond();
  double foldChangeRatio=settings.getRatio();
  FoldChangeEvaluator foldChangeEvaluator=settings.getEvaluator();
  for (Integer contentIndex=0; contentIndex < origVA.size(); contentIndex++) {
switch (foldChangeEvaluator) {
case LESS:
      if (resultVector[contentIndex] * -1 < foldChangeRatio)       continue;
    break;
case GREATER:
  if (resultVector[contentIndex] < foldChangeRatio)   continue;
break;
case SAME:
if (Math.abs(resultVector[contentIndex]) > foldChangeRatio) continue;
break;
}
System.out.println(""String_Node_Str"" + compareSet + ""String_Node_Str""+ contentIndex);
numberOfElements++;
}
return numberOfElements;
}",0.9489291598023064
58340,"public void registerEventListeners(){
  addSelectionTypeListener=new SelectionTypeListener();
  addSelectionTypeListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(SelectionTypeEvent.class,addSelectionTypeListener);
}","public void registerEventListeners(){
  addSelectionTypeListener=new SelectionTypeListener();
  addSelectionTypeListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(SelectionTypeEvent.class,addSelectionTypeListener);
  removeManagedSelectionTypesListener=new RemoveManagedSelectionTypesListener();
  removeManagedSelectionTypesListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(RemoveManagedSelectionTypesEvent.class,removeManagedSelectionTypesListener);
}",0.6474442988204456
58341,"public void unregisterEventListeners(){
  if (addSelectionTypeListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(addSelectionTypeListener);
    addSelectionTypeListener=null;
  }
}","public void unregisterEventListeners(){
  if (addSelectionTypeListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(addSelectionTypeListener);
    addSelectionTypeListener=null;
  }
  if (removeManagedSelectionTypesListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(removeManagedSelectionTypesListener);
    removeManagedSelectionTypesListener=null;
  }
}",0.6752827140549273
58342,"@Override public void run(){
  super.run();
  ClearSelectionsEvent event=new ClearSelectionsEvent();
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","@Override public void run(){
  super.run();
  ClearSelectionsEvent event=new ClearSelectionsEvent();
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
  RemoveManagedSelectionTypesEvent resetSelectionTypesEvent=new RemoveManagedSelectionTypesEvent();
  resetSelectionTypesEvent.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(resetSelectionTypesEvent);
}",0.6272577996715928
58343,"@Override public void setParameters(){
  Row row=new Row();
  row.sizeY=1;
  RenderParameters heatMapLayout=new RenderParameters();
  heatMapLayout.sizeX=0.715f;
  heatMapLayout.sizeY=0.84f;
  heatMapLayout.renderer=new HeatMapRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(heatMapLayout);
  RenderParameters contentSelectionLayout=new RenderParameters();
  contentSelectionLayout.isBackground=true;
  contentSelectionLayout.sizeX=0.72f;
  contentSelectionLayout.renderer=new ContentSelectionRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(contentSelectionLayout);
  RenderParameters storageSelectionLayout=new RenderParameters();
  storageSelectionLayout.isBackground=true;
  storageSelectionLayout.sizeY=0.84f;
  storageSelectionLayout.renderer=new StorageSelectionRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(storageSelectionLayout);
  row.appendElement(contentSelectionLayout);
  row.appendElement(storageSelectionLayout);
  row.appendElement(heatMapLayout);
  RenderParameters spacing=new RenderParameters();
  spacing.sizeX=0.01f;
  row.appendElement(spacing);
  RenderParameters contentCaptionLayout=new RenderParameters();
  contentCaptionLayout.sizeX=0.29f;
  contentCaptionLayout.sizeY=0.84f;
  contentCaptionLayout.transformX=0.7f + templateRenderer.SPACING;
  contentCaptionLayout.renderer=new ContentCaptionRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(contentCaptionLayout);
  row.appendElement(contentCaptionLayout);
  add(row);
  spacing=new RenderParameters();
  spacing.sizeY=0.16f;
  add(spacing);
}","@Override public void setParameters(){
  templateRenderer.clearRenderers();
  Row row=new Row();
  row.sizeY=1;
  RenderParameters heatMapLayout=new RenderParameters();
  heatMapLayout.sizeX=0.715f;
  heatMapLayout.sizeY=0.84f;
  heatMapLayout.renderer=new HeatMapRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(heatMapLayout);
  RenderParameters contentSelectionLayout=new RenderParameters();
  contentSelectionLayout.isBackground=true;
  contentSelectionLayout.sizeX=0.72f;
  contentSelectionLayout.renderer=new ContentSelectionRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(contentSelectionLayout);
  RenderParameters storageSelectionLayout=new RenderParameters();
  storageSelectionLayout.isBackground=true;
  storageSelectionLayout.sizeY=0.84f;
  storageSelectionLayout.renderer=new StorageSelectionRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(storageSelectionLayout);
  row.appendElement(contentSelectionLayout);
  row.appendElement(storageSelectionLayout);
  row.appendElement(heatMapLayout);
  RenderParameters spacing=new RenderParameters();
  spacing.sizeX=0.01f;
  row.appendElement(spacing);
  RenderParameters contentCaptionLayout=new RenderParameters();
  contentCaptionLayout.sizeX=0.29f;
  contentCaptionLayout.sizeY=0.84f;
  contentCaptionLayout.transformX=0.7f + templateRenderer.SPACING;
  contentCaptionLayout.renderer=new ContentCaptionRenderer(templateRenderer.heatMap);
  templateRenderer.addRenderer(contentCaptionLayout);
  row.appendElement(contentCaptionLayout);
  add(row);
  spacing=new RenderParameters();
  spacing.sizeY=0.16f;
  add(spacing);
}",0.9885696632684584
58344,"private void calulateReduction(){
  if (setsWithPerformedStatistics == null || setsWithPerformedStatistics.size() == 0)   return;
  reducedVA=new ContentVirtualArray();
  for (int contentIndex=0; contentIndex < setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).size(); contentIndex++) {
    boolean resultValid=true;
    for (    ISet set : setsWithPerformedStatistics) {
      for (      ISet foldChangeCompareSet : set.getStatisticsResult().getAllFoldChangeResults().keySet()) {
        Pair<double[],FoldChangeSettings> foldChangeResult=set.getStatisticsResult().getFoldChangeResult(foldChangeCompareSet);
        FoldChangeSettings foldChangeSettings=foldChangeResult.getSecond();
        if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.GREATER) {
          if (foldChangeResult.getFirst()[contentIndex] < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.LESS) {
          if (foldChangeResult.getFirst()[contentIndex] * -1 < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.SAME) {
          if (Math.abs(foldChangeResult.getFirst()[contentIndex]) < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
      }
      for (      ISet twoSidedCompareSet : set.getStatisticsResult().getAllTwoSidedTTestResults().keySet()) {
        ArrayList<Double> twoSidedTTestResult=set.getStatisticsResult().getTwoSidedTTestResult(twoSidedCompareSet);
        if (twoSidedTTestResult != null && twoSidedTTestResult.get(contentIndex) > pValueCutOff)         resultValid=false;
      }
      double[] tTestResult=set.getStatisticsResult().getOneSidedTTestResult();
      if (tTestResult != null && tTestResult[contentIndex] > pValueCutOff)       resultValid=false;
      if (!resultValid)       continue;
 else       System.out.println(""String_Node_Str"" + set + ""String_Node_Str""+ contentIndex);
    }
    if (resultValid)     reducedVA.appendUnique(setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).get(contentIndex));
  }
  if (reducedVA != null) {
    reducedNumberLabel.setText(""String_Node_Str"" + reducedVA.size());
    composite.layout();
  }
}","private void calulateReduction(){
  if (setsWithPerformedStatistics == null || setsWithPerformedStatistics.size() == 0)   return;
  reducedVA=new ContentVirtualArray();
  for (int contentIndex=0; contentIndex < setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).size(); contentIndex++) {
    boolean resultValid=true;
    for (    ISet set : setsWithPerformedStatistics) {
      for (      ISet foldChangeCompareSet : set.getStatisticsResult().getAllFoldChangeResults().keySet()) {
        Pair<double[],FoldChangeSettings> foldChangeResult=set.getStatisticsResult().getFoldChangeResult(foldChangeCompareSet);
        FoldChangeSettings foldChangeSettings=foldChangeResult.getSecond();
        if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.GREATER) {
          if (foldChangeResult.getFirst()[contentIndex] < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.LESS) {
          if (foldChangeResult.getFirst()[contentIndex] * -1 < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.SAME) {
          if (Math.abs(foldChangeResult.getFirst()[contentIndex]) < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
      }
      for (      ISet twoSidedCompareSet : set.getStatisticsResult().getAllTwoSidedTTestResults().keySet()) {
        ArrayList<Double> twoSidedTTestResult=set.getStatisticsResult().getTwoSidedTTestResult(twoSidedCompareSet);
        if (twoSidedTTestResult != null && twoSidedTTestResult.get(contentIndex) > pValueCutOff)         resultValid=false;
      }
      double[] tTestResult=set.getStatisticsResult().getOneSidedTTestResult();
      if (tTestResult != null && tTestResult[contentIndex] > pValueCutOff)       resultValid=false;
      if (!resultValid)       continue;
 else       System.out.println(""String_Node_Str"" + set + ""String_Node_Str""+ contentIndex);
    }
    if (resultValid)     reducedVA.appendUnique(contentIndex);
  }
  if (reducedVA != null) {
    reducedNumberLabel.setText(""String_Node_Str"" + reducedVA.size());
    composite.layout();
  }
}",0.9411269974768712
58345,"private void renderEntry(GL gl,SubMenu subMenu,int elementIndex,float xPosition,float yPosition){
  IContextMenuEntry entry=subMenu.contextMenuEntries.get(elementIndex);
  if (entry instanceof AContextMenuItem) {
    renderItem(gl,subMenu,entry,xPosition,yPosition);
  }
 else   if (entry instanceof Separator) {
    gl.glColor3f(1,1,1);
    gl.glLineStipple(2,(short)0xAAAA);
    gl.glEnable(GL.GL_LINE_STIPPLE);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(subMenu.xOrigin + 2 * SPACING,yPosition + ITEM_HEIGHT / 2,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + subMenu.width - 2 * SPACING,yPosition + ITEM_HEIGHT / 2,BUTTON_Z);
    gl.glEnd();
  }
 else   if (entry instanceof Heading) {
    Heading heading=(Heading)entry;
    textRenderer.begin3DRendering();
    textRenderer.setColor(1,1,1,1);
    gl.glDisable(GL.GL_DEPTH_TEST);
    textRenderer.draw3D(heading.getText(),xPosition,yPosition + SPACING,TEXT_Z,FONT_SCALING);
    textRenderer.end3DRendering();
  }
 else   if (entry instanceof ScrollButton) {
    ScrollButton button=(ScrollButton)entry;
    float top;
    float bottom;
    int iPickingID;
    Texture tempTexture;
    if (button.isUp()) {
      if (!subMenu.scrollButtonUpActive)       return;
      iPickingID=pickingManager.getPickingID(masterGLView.getID(),EPickingType.CONTEXT_MENU_SCROLL_UP,subMenu.contextMenuID);
      bottom=yPosition;
      top=yPosition + ICON_SIZE;
      if (subMenu.scrollButtonUpOver)       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON_OVER);
 else       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON);
    }
 else {
      if (!subMenu.scrollButtonDownActive)       return;
      iPickingID=pickingManager.getPickingID(masterGLView.getID(),EPickingType.CONTEXT_MENU_SCROLL_DOWN,subMenu.contextMenuID);
      top=yPosition;
      bottom=yPosition + ICON_SIZE;
      if (subMenu.scrollButtonDownOver)       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON_OVER);
 else       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON);
    }
    gl.glPushName(iPickingID);
    gl.glColor4f(1,1,1,0f);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(subMenu.xOrigin + 2 * SPACING,yPosition,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + subMenu.width - 2 * SPACING,yPosition,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + subMenu.width - 2 * SPACING,yPosition + ITEM_HEIGHT,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + 2 * SPACING,yPosition + ITEM_HEIGHT,BUTTON_Z);
    gl.glEnd();
    float center=subMenu.xOrigin + subMenu.width / 2;
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glColor4f(1,1,1,1f);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(center - ITEM_HEIGHT / 2,bottom,BUTTON_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(center + ITEM_HEIGHT / 2,bottom,BUTTON_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(center + ITEM_HEIGHT / 2,top,BUTTON_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(center - ITEM_HEIGHT / 2,top,BUTTON_Z);
    gl.glEnd();
    tempTexture.disable();
    gl.glPopName();
  }
}","private void renderEntry(GL gl,SubMenu subMenu,int elementIndex,float xPosition,float yPosition){
  IContextMenuEntry entry=subMenu.contextMenuEntries.get(elementIndex);
  if (entry instanceof AContextMenuItem) {
    renderItem(gl,subMenu,entry,xPosition,yPosition);
  }
 else   if (entry instanceof Separator) {
    gl.glPushAttrib(GL.GL_LINE_BIT);
    gl.glColor3f(1,1,1);
    gl.glLineStipple(2,(short)0xAAAA);
    gl.glEnable(GL.GL_LINE_STIPPLE);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(subMenu.xOrigin + 2 * SPACING,yPosition + ITEM_HEIGHT / 2,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + subMenu.width - 2 * SPACING,yPosition + ITEM_HEIGHT / 2,BUTTON_Z);
    gl.glEnd();
    gl.glPopAttrib();
  }
 else   if (entry instanceof Heading) {
    Heading heading=(Heading)entry;
    textRenderer.begin3DRendering();
    textRenderer.setColor(1,1,1,1);
    gl.glDisable(GL.GL_DEPTH_TEST);
    textRenderer.draw3D(heading.getText(),xPosition,yPosition + SPACING,TEXT_Z,FONT_SCALING);
    textRenderer.end3DRendering();
  }
 else   if (entry instanceof ScrollButton) {
    ScrollButton button=(ScrollButton)entry;
    float top;
    float bottom;
    int iPickingID;
    Texture tempTexture;
    if (button.isUp()) {
      if (!subMenu.scrollButtonUpActive)       return;
      iPickingID=pickingManager.getPickingID(masterGLView.getID(),EPickingType.CONTEXT_MENU_SCROLL_UP,subMenu.contextMenuID);
      bottom=yPosition;
      top=yPosition + ICON_SIZE;
      if (subMenu.scrollButtonUpOver)       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON_OVER);
 else       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON);
    }
 else {
      if (!subMenu.scrollButtonDownActive)       return;
      iPickingID=pickingManager.getPickingID(masterGLView.getID(),EPickingType.CONTEXT_MENU_SCROLL_DOWN,subMenu.contextMenuID);
      top=yPosition;
      bottom=yPosition + ICON_SIZE;
      if (subMenu.scrollButtonDownOver)       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON_OVER);
 else       tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SCROLL_BUTTON);
    }
    gl.glPushName(iPickingID);
    gl.glColor4f(1,1,1,0f);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(subMenu.xOrigin + 2 * SPACING,yPosition,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + subMenu.width - 2 * SPACING,yPosition,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + subMenu.width - 2 * SPACING,yPosition + ITEM_HEIGHT,BUTTON_Z);
    gl.glVertex3f(subMenu.xOrigin + 2 * SPACING,yPosition + ITEM_HEIGHT,BUTTON_Z);
    gl.glEnd();
    float center=subMenu.xOrigin + subMenu.width / 2;
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glColor4f(1,1,1,1f);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(center - ITEM_HEIGHT / 2,bottom,BUTTON_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(center + ITEM_HEIGHT / 2,bottom,BUTTON_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(center + ITEM_HEIGHT / 2,top,BUTTON_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(center - ITEM_HEIGHT / 2,top,BUTTON_Z);
    gl.glEnd();
    tempTexture.disable();
    gl.glPopName();
  }
}",0.9911077618688772
58346,"public void processEvents(){
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    if (heatMap != null) {
      heatMap.processEvents();
    }
  }
}","public void processEvents(){
  for (  GLHeatMap heatMap : hashHeatMaps.values()) {
    heatMap.processEvents();
  }
}",0.6646341463414634
58347,"public void setHeatMapActive(int groupIndex,boolean addToNewSelectionType){
  if (activeHeatMapID == groupIndex)   return;
  int previouslyActiveHeatMapID=activeHeatMapID;
  activeHeatMapID=groupIndex;
  if (previouslyActiveHeatMapID != -1) {
    GLHeatMap heatMap=hashHeatMaps.get(activeHeatMapID);
    ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
    for (    Integer elementID : heatMap.getContentVA()) {
      hmContentSelectionManager.removeFromType(ACompareViewState.ACTIVE_HEATMAP_SELECTION_TYPE,elementID);
    }
    SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
    selectionUpdateEvent.setSender(heatMap);
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
  GLHeatMap heatMap=hashHeatMaps.get(groupIndex);
  ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
  hmContentSelectionManager.addToType(ACompareViewState.ACTIVE_HEATMAP_SELECTION_TYPE,heatMap.getContentVA().getVirtualArray());
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
  selectionUpdateEvent.setSender(heatMap);
  eventPublisher.triggerEvent(selectionUpdateEvent);
  if (addToNewSelectionType) {
    SelectionType selectionType=new SelectionType();
    selectionType.setType(SELECTION_TYPE_NAME + selectionTypeNumber);
    selectionType.setPriority(0.8f + 0.0001f * selectionTypeNumber);
    selectionType.setColor(ColorUtil.getColor(selectionTypeNumber++));
    selectionType.setManaged(true);
    SelectionTypeEvent event=new SelectionTypeEvent();
    event.addSelectionType(selectionType);
    event.setSender(heatMap);
    eventPublisher.triggerEvent(event);
    hmContentSelectionManager.addToType(selectionType,heatMap.getContentVA().getVirtualArray());
    selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSender(heatMap);
    selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
}","public void setHeatMapActive(int groupIndex,boolean addToNewSelectionType){
  if (activeHeatMapID == groupIndex)   return;
  int previouslyActiveHeatMapID=activeHeatMapID;
  activeHeatMapID=groupIndex;
  if (previouslyActiveHeatMapID != -1) {
    GLHeatMap heatMap=hashHeatMaps.get(activeHeatMapID);
    for (    Integer elementID : heatMap.getContentVA()) {
      contentSelectionManager.removeFromType(ACompareViewState.ACTIVE_HEATMAP_SELECTION_TYPE,elementID);
    }
    SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSelectionDelta(contentSelectionManager.getDelta());
    selectionUpdateEvent.setSender(heatMap);
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
  GLHeatMap heatMap=hashHeatMaps.get(groupIndex);
  contentSelectionManager.addToType(ACompareViewState.ACTIVE_HEATMAP_SELECTION_TYPE,heatMap.getContentVA().getVirtualArray());
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSelectionDelta(contentSelectionManager.getDelta());
  selectionUpdateEvent.setSender(heatMap);
  eventPublisher.triggerEvent(selectionUpdateEvent);
  if (addToNewSelectionType) {
    SelectionType selectionType=new SelectionType();
    selectionType.setType(SELECTION_TYPE_NAME + selectionTypeNumber);
    selectionType.setPriority(0.8f + 0.0001f * selectionTypeNumber);
    selectionType.setColor(ColorUtil.getColor(selectionTypeNumber++));
    selectionType.setManaged(true);
    SelectionTypeEvent event=new SelectionTypeEvent();
    event.addSelectionType(selectionType);
    event.setSender(heatMap);
    eventPublisher.triggerEvent(event);
    contentSelectionManager.addToType(selectionType,heatMap.getContentVA().getVirtualArray());
    selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSender(heatMap);
    selectionUpdateEvent.setSelectionDelta(contentSelectionManager.getDelta());
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
}",0.9504569504569504
58348,"public void setHeatMapsInactive(){
  if (activeHeatMapID == -1)   return;
  GLHeatMap heatMap=hashHeatMaps.get(activeHeatMapID);
  ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
  for (  Integer elementID : heatMap.getContentVA()) {
    hmContentSelectionManager.removeFromType(ACompareViewState.ACTIVE_HEATMAP_SELECTION_TYPE,elementID);
  }
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
  eventPublisher.triggerEvent(selectionUpdateEvent);
  activeHeatMapID=-1;
}","public void setHeatMapsInactive(){
  for (  Integer elementID : contentVA) {
    contentSelectionManager.removeFromType(ACompareViewState.ACTIVE_HEATMAP_SELECTION_TYPE,elementID);
  }
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSelectionDelta(contentSelectionManager.getDelta());
  eventPublisher.triggerEvent(selectionUpdateEvent);
  activeHeatMapID=-1;
}",0.7561214495592556
58349,"@Override public void display(GL gl){
  doSlerpActions();
  if (layoutHotSpotInitSwitch == false) {
    layoutHotSpot.setLocation(canvasWidth / 2 + 1,canvasHeight / 2);
    layoutHotSpotInitSwitch=true;
  }
  defaultLayoutHotSpot.setLocation(canvasWidth / 2 + 1,canvasHeight / 2);
  remoteHyperbolicScalation.setLocation(viewSizeHyperbolic / 2,viewSizeHyperbolic / 2 / fAspectRatio);
  Transform transform=new Transform();
  transform.setTranslation(new Vec3f((float)layoutHotSpot.getX(),(float)layoutHotSpot.getY(),0));
  transform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot.getX()) / 8,(float)(canvasHeight - layoutHotSpot.getY()) / 8,1));
  remoteElementHeatMap.setTransform(transform);
  Transform transform2=new Transform();
  if (hyperbolicViewSquared=true) {
    if (canvasHeight > layoutHotSpot.getX()) {
      transform2.setScale(new Vec3f((float)(layoutHotSpot.getX()) / 8,(float)(layoutHotSpot.getX()) / canvasHeight,1));
      transform2.setTranslation(new Vec3f(0,(float)(canvasHeight - layoutHotSpot.getX()) / 2,0));
      eyeTrackerOffset.setLocation(0,canvasHeight - (layoutHotSpot.getX()) / 2);
    }
 else {
      transform2.setScale(new Vec3f((float)(canvasHeight) / 8,1,1));
      transform2.setTranslation(new Vec3f((float)(layoutHotSpot.getX() - canvasHeight) / 2,0,0));
      eyeTrackerOffset.setLocation((layoutHotSpot.getX() - canvasHeight) / 2,0);
    }
  }
 else {
    transform2.setScale(new Vec3f((float)(layoutHotSpot.getX()) / 8,1,1));
  }
  remoteElementHyperbolic.setTransform(transform2);
  Transform transform3=new Transform();
  transform3.setTranslation(new Vec3f((float)layoutHotSpot.getX(),(float)0,0));
  transform3.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot.getX()) / 8,(float)layoutHotSpot.getY() / 8,1));
  remoteElementParCoords.setTransform(transform3);
  renderRemoteLevelElement(gl,remoteElementHyperbolic);
  renderRemoteLevelElement(gl,remoteElementHeatMap);
  if (glMouseListener.wasRightMouseButtonPressed()) {
    this.focusViewEvent(2,0.75,true);
    testZoomViewEventSwitch=true;
  }
  if (glMouseListener.wasLeftMouseButtonPressed()) {
    System.out.println(""String_Node_Str"");
    this.focusViewEvent(2,0.5,false);
  }
  if (glMouseListener.wasLeftMouseButtonPressed()) {
    testZoomViewEventSwitch=false;
    if (glMouseListener.getPickedPoint() != null) {
      if (manualPickFlag == true) {
        mousePoint=glMouseListener.getPickedPoint();
        Point2D.Double mousePosition=new Point2D.Double();
        mousePosition.setLocation(mousePoint.getX(),mousePoint.getY());
        directHyperbolicView.setEyeTrackerAction(mousePosition,new Point2D.Double((double)remoteElementHyperbolic.getTransform().getTranslation().x(),(double)remoteElementHyperbolic.getTransform().getTranslation().y()),new Point2D.Double((double)remoteElementHyperbolic.getTransform().getScale().x(),(double)remoteElementHyperbolic.getTransform().getScale().y()));
      }
    }
  }
}","@Override public void display(GL gl){
  doSlerpActions();
  if (layoutHotSpotInitSwitch == false) {
    layoutHotSpot.setLocation(canvasWidth / 2 + 1,canvasHeight / 2);
    layoutHotSpotInitSwitch=true;
  }
  defaultLayoutHotSpot.setLocation(canvasWidth / 2 + 1,canvasHeight / 2);
  remoteHyperbolicScalation.setLocation(viewSizeHyperbolic / 2,viewSizeHyperbolic / 2 / fAspectRatio);
  Transform transform=new Transform();
  transform.setTranslation(new Vec3f((float)layoutHotSpot.getX(),(float)layoutHotSpot.getY(),0));
  transform.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot.getX()) / 8,(float)(canvasHeight - layoutHotSpot.getY()) / 8,1));
  remoteElementHeatMap.setTransform(transform);
  Transform transform2=new Transform();
  if (hyperbolicViewSquared=true) {
    if (canvasHeight > layoutHotSpot.getX()) {
      transform2.setScale(new Vec3f((float)(layoutHotSpot.getX()) / 8,(float)(layoutHotSpot.getX()) / canvasHeight,1));
      transform2.setTranslation(new Vec3f(0,(float)(canvasHeight - layoutHotSpot.getX()) / 2,0));
      eyeTrackerOffset.setLocation(0,canvasHeight - (layoutHotSpot.getX()) / 2);
    }
 else {
      transform2.setScale(new Vec3f((float)(canvasHeight) / 8,1,1));
      transform2.setTranslation(new Vec3f((float)(layoutHotSpot.getX() - canvasHeight) / 2,0,0));
      eyeTrackerOffset.setLocation((layoutHotSpot.getX() - canvasHeight) / 2,0);
    }
  }
 else {
    transform2.setScale(new Vec3f((float)(layoutHotSpot.getX()) / 8,1,1));
  }
  remoteElementHyperbolic.setTransform(transform2);
  Transform transform3=new Transform();
  transform3.setTranslation(new Vec3f((float)layoutHotSpot.getX(),(float)0,0));
  transform3.setScale(new Vec3f((float)(canvasWidth - layoutHotSpot.getX()) / 8,(float)layoutHotSpot.getY() / 8,1));
  remoteElementParCoords.setTransform(transform3);
  renderRemoteLevelElement(gl,remoteElementHyperbolic);
  renderRemoteLevelElement(gl,remoteElementHeatMap);
  renderRemoteLevelElement(gl,remoteElementParCoords);
  if (glMouseListener.wasLeftMouseButtonPressed()) {
    testZoomViewEventSwitch=false;
    if (glMouseListener.getPickedPoint() != null) {
      if (manualPickFlag == true) {
        mousePoint=glMouseListener.getPickedPoint();
        Point2D.Double mousePosition=new Point2D.Double();
        mousePosition.setLocation(mousePoint.getX(),mousePoint.getY());
        directHyperbolicView.setEyeTrackerAction(mousePosition,new Point2D.Double((double)remoteElementHyperbolic.getTransform().getTranslation().x(),(double)remoteElementHyperbolic.getTransform().getTranslation().y()),new Point2D.Double((double)remoteElementHyperbolic.getTransform().getScale().x(),(double)remoteElementHyperbolic.getTransform().getScale().y()));
      }
    }
  }
}",0.9395594713656388
58350,"@Override public void displayLocal(GL gl){
  processEvents();
  gl.glGetDoublev(GL.GL_PROJECTION_MATRIX,viewport,0);
  if (canvasWidth != (2 / (float)viewport[0])) {
    canvasWidth=2 / (float)viewport[0];
    layoutHotSpotInitSwitch=false;
  }
  if (canvasHeight != (2 / (float)viewport[5])) {
    canvasHeight=2 / (float)viewport[5];
    layoutHotSpotInitSwitch=false;
  }
  remoteElementHeatMap.getGLView().processEvents();
  remoteElementParCoords.getGLView().processEvents();
  remoteElementHyperbolic.getGLView().processEvents();
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}","@Override public void displayLocal(GL gl){
  processEvents();
  gl.glGetDoublev(GL.GL_PROJECTION_MATRIX,viewport,0);
  if (canvasWidth != (2 / (float)viewport[0])) {
    canvasWidth=2 / (float)viewport[0];
    layoutHotSpotInitSwitch=false;
  }
  if (canvasHeight != (2 / (float)viewport[5])) {
    canvasHeight=2 / (float)viewport[5];
    layoutHotSpotInitSwitch=false;
  }
  remoteElementHeatMap.getGLView().processEvents();
  remoteElementParCoords.getGLView().processEvents();
  remoteElementHyperbolic.getGLView().processEvents();
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  pickingManager.handlePicking(this,gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.9753753753753752
58351,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType;
switch (ePickingType) {
case DATAW_NODE:
switch (pickingMode) {
case CLICKED:
      arSlerpActions.add(new NodeSlerp(4,disk.getNodeByCompareableValue(iExternalID).getPosition(),new Point2D.Double(0,0)));
    slerpedNode=disk.getNodeByCompareableValue(iExternalID);
}
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType;
switch (ePickingType) {
case DATAW_NODE:
switch (pickingMode) {
case CLICKED:
    }
}
}",0.7686472819216182
58352,"@Override public void handleEvent(final AEvent event){
  try {
    if (event instanceof LoadPathwayEvent || event instanceof LoadPathwaysByGeneEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
    }
 else     if (event instanceof OpenMatchmakerViewEvent) {
      GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringAction startClusteringAction=new StartClusteringAction();
          startClusteringAction.setSets(((OpenMatchmakerViewEvent)event).getSetsToCompare());
          startClusteringAction.run();
        }
      }
);
      try {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
    }
 else     if (event instanceof OpenViewEvent)     PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
  }
 catch (  PartInitException e) {
    e.printStackTrace();
    GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"",e));
  }
}","@Override public void handleEvent(final AEvent event){
  try {
    if (event instanceof LoadPathwayEvent || event instanceof LoadPathwaysByGeneEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
    }
 else     if (event instanceof OpenMatchmakerViewEvent) {
      try {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
      CompareGroupsEvent compareGroupsEvent=new CompareGroupsEvent(((OpenMatchmakerViewEvent)event).getSetsToCompare());
      compareGroupsEvent.setSender(this);
      GeneralManager.get().getEventPublisher().triggerEvent(compareGroupsEvent);
      GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringAction startClusteringAction=new StartClusteringAction();
          startClusteringAction.setSets(((OpenMatchmakerViewEvent)event).getSetsToCompare());
          startClusteringAction.run();
        }
      }
);
    }
 else     if (event instanceof OpenViewEvent)     PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
  }
 catch (  PartInitException e) {
    e.printStackTrace();
    GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"",e));
  }
}",0.7613046701260193
58353,"/** 
 * Sorts the content of the virtual arrays of this heat map wrapper according to the occurences in the foreign VAs. The parameter specifies whether elements should be hidden or not. If all elements occur in the foreign VA the parameter has no effect but increased performance
 * @param foreignContentVAs
 * @param hideVisible
 */
private void sort(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  for (int groupIndex=groupList.size() - 1; groupIndex >= 0; groupIndex--) {
    Group group=groupList.get(groupIndex);
    if (!considerSelectedGroups || selectedGroups.containsKey(group)) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      int nrGenes=group.getContainedNrGenes();
      ContentVirtualArray contentVA=heatMap.getContentVA();
      if (useSorting) {
        for (        ContentVirtualArray foreignVA : foreignContentVAs) {
          Integer foreignContentLastOrdererIndex=0;
          for (int contentIndex=0; contentIndex < nrGenes; contentIndex++) {
            Integer contentID=contentVA.get(contentIndex);
            int foreignIndex=foreignVA.indexOf(contentID);
            if (foreignIndex != -1) {
              foreignVA.move(foreignIndex,foreignContentLastOrdererIndex++);
            }
          }
        }
        if (hideVisible) {
          SelectionDelta contentSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
          for (int contentIndex=nrGenes; contentIndex < contentVA.size(); contentIndex++) {
            SelectionDeltaItem item=new SelectionDeltaItem();
            item.setPrimaryID(contentVA.get(contentIndex));
            item.setSelectionType(GLHeatMap.SELECTION_HIDDEN);
            contentSelectionDelta.add(item);
          }
          SelectionUpdateEvent event=new SelectionUpdateEvent();
          event.setSender(this);
          event.setSelectionDelta(contentSelectionDelta);
          eventPublisher.triggerEvent(event);
        }
      }
    }
  }
}","/** 
 * Sorts the content of the virtual arrays of this heat map wrapper according to the occurences in the foreign VAs. The parameter specifies whether elements should be hidden or not. If all elements occur in the foreign VA the parameter has no effect but increased performance
 * @param foreignContentVAs
 * @param hideVisible
 */
public void sort(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  for (int groupIndex=groupList.size() - 1; groupIndex >= 0; groupIndex--) {
    Group group=groupList.get(groupIndex);
    if (!considerSelectedGroups || selectedGroups.containsKey(group)) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      int nrGenes=group.getContainedNrGenes();
      ContentVirtualArray contentVA=heatMap.getContentVA();
      if (useSorting) {
        for (        ContentVirtualArray foreignVA : foreignContentVAs) {
          Integer foreignContentLastOrdererIndex=0;
          for (int contentIndex=0; contentIndex < nrGenes; contentIndex++) {
            Integer contentID=contentVA.get(contentIndex);
            int foreignIndex=foreignVA.indexOf(contentID);
            if (foreignIndex != -1) {
              foreignVA.move(foreignIndex,foreignContentLastOrdererIndex++);
            }
          }
        }
        if (hideVisible) {
          SelectionDelta contentSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
          for (int contentIndex=nrGenes; contentIndex < contentVA.size(); contentIndex++) {
            SelectionDeltaItem item=new SelectionDeltaItem();
            item.setPrimaryID(contentVA.get(contentIndex));
            item.setSelectionType(GLHeatMap.SELECTION_HIDDEN);
            contentSelectionDelta.add(item);
          }
          SelectionUpdateEvent event=new SelectionUpdateEvent();
          event.setSender(this);
          event.setSelectionDelta(contentSelectionDelta);
          eventPublisher.triggerEvent(event);
        }
      }
    }
  }
}",0.9973229496227792
58354,"/** 
 * <p> This method chooses which groups (and therefore heat maps) are to be rendered at the passive side. It does so based on a virtualArray containing all elements to be rendered. </p> <p> This is called in the passive heat map. </p> <p> It also re-sorts the passive group's virtual arrays to minimize crossings and sets elements that are in a passive group but not in the supplied virtual array to   {@link GLHeatMap#SELECTION_HIDDEN} so that they can behidden on demand.
 */
public void choosePassiveHeatMaps(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  selectedGroups.clear();
  for (  ContentVirtualArray foreignVa : foreignContentVAs) {
    for (    Integer contentID : foreignVa) {
      int vaIndex=contentVA.indexOf(contentID);
      Group selectedGroup=groupList.getGroupOfVAIndex(vaIndex);
      if (!selectedGroups.containsKey(selectedGroup)) {
        selectedGroups.put(selectedGroup,null);
        selectedGroup.resetVisualGenesCounter();
      }
      GLHeatMap heatMap=hashHeatMaps.get(selectedGroup.getGroupIndex());
      ContentVirtualArray heatMapVA=heatMap.getContentVA();
      int index=heatMapVA.indexOf(contentID);
      if (useSorting && index >= 0)       heatMapVA.move(index,selectedGroup.getContainedNrGenes());
 else       System.out.println(""String_Node_Str"");
      selectedGroup.increaseContainedNumberOfGenesByOne();
    }
  }
  sort(foreignContentVAs,considerSelectedGroups,hideVisible);
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMap.recalculateLayout();
  }
}","/** 
 * <p> This method chooses which groups (and therefore heat maps) are to be rendered at the passive side. It does so based on a virtualArray containing all elements to be rendered. </p> <p> This is called in the passive heat map. </p> <p> It also re-sorts the passive group's virtual arrays to minimize crossings and sets elements that are in a passive group but not in the supplied virtual array to   {@link GLHeatMap#SELECTION_HIDDEN} so that they can behidden on demand.
 */
public void choosePassiveHeatMaps(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups,boolean selectGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  HashMap<Group,Boolean> tempGroups=new HashMap<Group,Boolean>();
  tempGroups.clear();
  for (  ContentVirtualArray foreignVa : foreignContentVAs) {
    for (    Integer contentID : foreignVa) {
      int vaIndex=contentVA.indexOf(contentID);
      Group selectedGroup=groupList.getGroupOfVAIndex(vaIndex);
      if (!tempGroups.containsKey(selectedGroup)) {
        tempGroups.put(selectedGroup,null);
        selectedGroup.resetVisualGenesCounter();
      }
      GLHeatMap heatMap=hashHeatMaps.get(selectedGroup.getGroupIndex());
      ContentVirtualArray heatMapVA=heatMap.getContentVA();
      int index=heatMapVA.indexOf(contentID);
      if (useSorting && index >= 0)       heatMapVA.move(index,selectedGroup.getContainedNrGenes());
 else       System.out.println(""String_Node_Str"");
      selectedGroup.increaseContainedNumberOfGenesByOne();
    }
  }
  if (selectGroups) {
    selectedGroups.clear();
    selectedGroups.putAll(tempGroups);
  }
  sort(foreignContentVAs,considerSelectedGroups,hideVisible);
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMap.recalculateLayout();
  }
}",0.9402985074626866
58355,"@Override public void handleDragging(GL gl,float mouseCoordinateX,float mouseCoordinateY){
switch (draggingSelection) {
case COMPARE_SELECTION_WINDOW_SELECTION:
    handleWindowDragging(gl,mouseCoordinateX,mouseCoordinateY);
  break;
case COMPARE_SELECTION_WINDOW_ARROW_LEFT_SELECTION:
handleArrowLeftDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
case COMPARE_SELECTION_WINDOW_ARROW_RIGHT_SELECTION:
handleArrowRightDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
}
if (dragged) {
renderWindow(gl,numSelectedItemsDragging,lowestItemIndexDragging,0.5f,false,-0.05f);
}
}","@Override public void handleDragging(GL gl,float mouseCoordinateX,float mouseCoordinateY){
switch (draggingSelection) {
case COMPARE_SELECTION_WINDOW_SELECTION:
    handleWindowDragging(gl,mouseCoordinateX,mouseCoordinateY);
  break;
case COMPARE_SELECTION_WINDOW_ARROW_LEFT_SELECTION:
handleArrowLeftDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
case COMPARE_SELECTION_WINDOW_ARROW_RIGHT_SELECTION:
handleArrowRightDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
}
if (dragged) {
renderWindow(gl,numSelectedItemsDragging,lowestItemIndexDragging,0.5f,false,-0.001f);
}
}",0.9974380871050385
58356,"public void render(GL gl){
  renderWindow(gl,numSelectedItems,lowestItemIndex,1,true,-0.1f);
}","public void render(GL gl){
  renderWindow(gl,numSelectedItems,lowestItemIndex,1,true,-0.002f);
}",0.9789473684210528
58357,"public void executeDrawingPreprocessing(GL gl,boolean isDisplayListDirty){
  handleDragging(gl);
  IViewFrustum viewFrustum=view.getViewFrustum();
  if (isDisplayListDirty)   setBar.setHeight(gl,SET_BAR_HEIGHT_PORTION * viewFrustum.getHeight());
  setupLayouts();
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (!heatMapWrapper.isInitialized()) {
      heatMapWrapper.init(gl,glMouseListener,null,dataDomain);
    }
    heatMapWrapper.processEvents();
    heatMapWrapper.calculateDrawingParameters();
    if (isDisplayListDirty) {
      heatMapWrapper.setDisplayListDirty();
    }
  }
  setsChanged=false;
}","public void executeDrawingPreprocessing(GL gl,boolean isDisplayListDirty){
  IViewFrustum viewFrustum=view.getViewFrustum();
  if (isDisplayListDirty)   setBar.setHeight(gl,SET_BAR_HEIGHT_PORTION * viewFrustum.getHeight());
  setupLayouts();
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (!heatMapWrapper.isInitialized()) {
      heatMapWrapper.init(gl,glMouseListener,null,dataDomain);
    }
    heatMapWrapper.processEvents();
    heatMapWrapper.calculateDrawingParameters();
    if (isDisplayListDirty) {
      heatMapWrapper.setDisplayListDirty();
    }
  }
  setsChanged=false;
}",0.9821428571428572
58358,"public void renderIndiviudalLineRelations(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  contentIDToLeftDetailPoints.clear();
  contentIDToRightDetailPoints.clear();
  ArrayList<Vec3f> points=new ArrayList<Vec3f>();
  ContentVirtualArray overview=leftHeatMapWrapper.getContentVA().clone();
  ContentVirtualArray overviewRight=rightHeatMapWrapper.getContentVA().clone();
  float overviewDistance=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentIndex(0)[0] - leftHeatMapWrapper.getLeftOverviewLinkPositionFromContentIndex(0)[0];
  firstLevelOffset=overviewDistance / 7;
  float leftElementHeight=leftHeatMapWrapper.getLayout().getOverviewHeatMapSampleHeight();
  float rightElementHeight=leftHeatMapWrapper.getLayout().getOverviewHeatMapSampleHeight();
  float leftElementHeightIncludingSpacing=leftElementHeight * 0.8f;
  float rightElementHeightIncludingSpacing=rightElementHeight * 0.8f;
  float groupPadding=0;
  float bundlingCorrectionOffsetX=overviewDistance / 18f;
  float top=leftHeatMapWrapper.getLayout().getOverviewHeatMapPosition().y() + leftHeatMapWrapper.getLayout().getOverviewHeight();
  rightHeatMapWrapper.choosePassiveHeatMaps(leftHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false);
  leftHeatMapWrapper.choosePassiveHeatMaps(rightHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false);
  for (  ContentVirtualArray groupVA : leftHeatMapWrapper.getContentVAsOfHeatMaps(false)) {
    float groupTopY=0;
    for (    Integer overviewContentID : overview) {
      if (groupVA.containsElement(overviewContentID) == 0)       continue;
      groupPadding=groupVA.size() * leftElementHeight * 0.1f;
      groupTopY=overview.indexOf(overviewContentID) * leftElementHeight + groupPadding;
      break;
    }
    float overviewX=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(groupVA.get(0))[0];
    for (    Integer contentID : groupVA) {
      points.clear();
      float overviewY=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID)[1];
      float sortedY=top - groupTopY - groupVA.indexOf(contentID) * leftElementHeightIncludingSpacing;
      setRelationColor(gl,leftHeatMapWrapper,contentID);
      float[] leftOverviewPos=new float[]{overviewX,overviewY,0};
      float[] leftDetailPos=new float[]{overviewX + firstLevelOffset,sortedY,0};
      contentIDToLeftDetailPoints.put(contentID,leftDetailPos);
      points.add(new Vec3f(leftOverviewPos[0],leftOverviewPos[1],leftOverviewPos[2]));
      points.add(new Vec3f(overviewX + bundlingCorrectionOffsetX,overviewY,0));
      points.add(new Vec3f(leftDetailPos[0] - bundlingCorrectionOffsetX,sortedY,0));
      points.add(new Vec3f(leftDetailPos[0],leftDetailPos[1],leftDetailPos[2]));
      ArrayList<ContentVirtualArray> rightContentVAs=rightHeatMapWrapper.getContentVAsOfHeatMaps(false);
      float overviewRightX=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID)[0];
      for (      ContentVirtualArray rightGroupVA : rightContentVAs) {
        if (rightGroupVA.containsElement(contentID) == 0)         continue;
        float rightGroupTopY=0;
        for (        Integer overviewRightContentID : overviewRight) {
          if (rightGroupVA.containsElement(overviewRightContentID) == 0)           continue;
          groupPadding=rightGroupVA.size() * rightElementHeight * 0.1f;
          rightGroupTopY=overviewRight.indexOf(overviewRightContentID) * rightElementHeight + groupPadding;
          break;
        }
        float overviewRightY=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID)[1];
        float sortedRightY=top - rightGroupTopY - rightGroupVA.indexOf(contentID) * rightElementHeightIncludingSpacing;
        float[] rightDetailPos=new float[]{overviewRightX - firstLevelOffset,sortedRightY,0};
        float[] rightOverviewPos=new float[]{overviewRightX,overviewRightY,0};
        contentIDToRightDetailPoints.put(contentID,rightDetailPos);
        float xOffset=-(rightDetailPos[0] - leftDetailPos[0]) / 1.5f;
        points.add(new Vec3f(rightDetailPos[0] + xOffset,leftDetailPos[1],0));
        points.add(new Vec3f(rightDetailPos[0] + xOffset / 3,rightDetailPos[1],0));
        points.add(new Vec3f(rightDetailPos[0],rightDetailPos[1],rightDetailPos[2]));
        points.add(new Vec3f(rightDetailPos[0] + bundlingCorrectionOffsetX,sortedRightY,0));
        points.add(new Vec3f(overviewRightX - bundlingCorrectionOffsetX,overviewRightY,0));
        points.add(new Vec3f(rightOverviewPos[0],rightOverviewPos[1],rightOverviewPos[2]));
      }
      if (!bandBundlingActive)       renderSingleCurve(gl,points,contentID);
    }
  }
}","public void renderIndiviudalLineRelations(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  contentIDToLeftDetailPoints.clear();
  contentIDToRightDetailPoints.clear();
  ArrayList<Vec3f> points=new ArrayList<Vec3f>();
  ContentVirtualArray overview=leftHeatMapWrapper.getContentVA().clone();
  ContentVirtualArray overviewRight=rightHeatMapWrapper.getContentVA().clone();
  float overviewDistance=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentIndex(0)[0] - leftHeatMapWrapper.getLeftOverviewLinkPositionFromContentIndex(0)[0];
  firstLevelOffset=overviewDistance / 7;
  float leftElementHeight=leftHeatMapWrapper.getLayout().getOverviewHeatMapSampleHeight();
  float rightElementHeight=leftHeatMapWrapper.getLayout().getOverviewHeatMapSampleHeight();
  float leftElementHeightIncludingSpacing=leftElementHeight * 0.8f;
  float rightElementHeightIncludingSpacing=rightElementHeight * 0.8f;
  float groupPadding=0;
  float bundlingCorrectionOffsetX=overviewDistance / 18f;
  float top=leftHeatMapWrapper.getLayout().getOverviewHeatMapPosition().y() + leftHeatMapWrapper.getLayout().getOverviewHeight();
  rightHeatMapWrapper.choosePassiveHeatMaps(leftHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false,false);
  leftHeatMapWrapper.choosePassiveHeatMaps(rightHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false,false);
  for (  ContentVirtualArray groupVA : leftHeatMapWrapper.getContentVAsOfHeatMaps(false)) {
    float groupTopY=0;
    for (    Integer overviewContentID : overview) {
      if (groupVA.containsElement(overviewContentID) == 0)       continue;
      groupPadding=groupVA.size() * leftElementHeight * 0.1f;
      groupTopY=overview.indexOf(overviewContentID) * leftElementHeight + groupPadding;
      break;
    }
    float overviewX=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(groupVA.get(0))[0];
    for (    Integer contentID : groupVA) {
      points.clear();
      float overviewY=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID)[1];
      float sortedY=top - groupTopY - groupVA.indexOf(contentID) * leftElementHeightIncludingSpacing;
      setRelationColor(gl,leftHeatMapWrapper,contentID);
      float[] leftOverviewPos=new float[]{overviewX,overviewY,0};
      float[] leftDetailPos=new float[]{overviewX + firstLevelOffset,sortedY,0};
      contentIDToLeftDetailPoints.put(contentID,leftDetailPos);
      points.add(new Vec3f(leftOverviewPos[0],leftOverviewPos[1],leftOverviewPos[2]));
      points.add(new Vec3f(overviewX + bundlingCorrectionOffsetX,overviewY,0));
      points.add(new Vec3f(leftDetailPos[0] - bundlingCorrectionOffsetX,sortedY,0));
      points.add(new Vec3f(leftDetailPos[0],leftDetailPos[1],leftDetailPos[2]));
      ArrayList<ContentVirtualArray> rightContentVAs=rightHeatMapWrapper.getContentVAsOfHeatMaps(false);
      float overviewRightX=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID)[0];
      for (      ContentVirtualArray rightGroupVA : rightContentVAs) {
        if (rightGroupVA.containsElement(contentID) == 0)         continue;
        float rightGroupTopY=0;
        for (        Integer overviewRightContentID : overviewRight) {
          if (rightGroupVA.containsElement(overviewRightContentID) == 0)           continue;
          groupPadding=rightGroupVA.size() * rightElementHeight * 0.1f;
          rightGroupTopY=overviewRight.indexOf(overviewRightContentID) * rightElementHeight + groupPadding;
          break;
        }
        float overviewRightY=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID)[1];
        float sortedRightY=top - rightGroupTopY - rightGroupVA.indexOf(contentID) * rightElementHeightIncludingSpacing;
        float[] rightDetailPos=new float[]{overviewRightX - firstLevelOffset,sortedRightY,0};
        float[] rightOverviewPos=new float[]{overviewRightX,overviewRightY,0};
        contentIDToRightDetailPoints.put(contentID,rightDetailPos);
        float xOffset=-(rightDetailPos[0] - leftDetailPos[0]) / 1.5f;
        points.add(new Vec3f(rightDetailPos[0] + xOffset,leftDetailPos[1],0));
        points.add(new Vec3f(rightDetailPos[0] + xOffset / 3,rightDetailPos[1],0));
        points.add(new Vec3f(rightDetailPos[0],rightDetailPos[1],rightDetailPos[2]));
        points.add(new Vec3f(rightDetailPos[0] + bundlingCorrectionOffsetX,sortedRightY,0));
        points.add(new Vec3f(overviewRightX - bundlingCorrectionOffsetX,overviewRightY,0));
        points.add(new Vec3f(rightOverviewPos[0],rightOverviewPos[1],rightOverviewPos[2]));
      }
      if (!bandBundlingActive)       renderSingleCurve(gl,points,contentID);
    }
  }
}",0.9987127225917184
58359,"public CompareViewStateController(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,ContextMenu contextMenu,EDataDomain dataDomain,IUseCase useCase){
  DragAndDropController dragAndDropController=new DragAndDropController(view);
  SetBar setBar=new SetBar(viewID,pickingManager,textRenderer,dragAndDropController,glMouseListener,view,contextMenu,textureManager);
  RenderCommandFactory renderCommandFactory=new RenderCommandFactory(viewID,pickingManager,textureManager,textRenderer);
  hashStates=new HashMap<ECompareViewStateType,ACompareViewState>();
  hashStates.put(ECompareViewStateType.DETAIL_VIEW,new DetailViewState(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  hashStates.put(ECompareViewStateType.OVERVIEW,new OverviewState(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  hashStates.put(ECompareViewStateType.OVERVIEW_TO_DETAIL_TRANSITION,new OverviewToDetailTransition(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  hashStates.put(ECompareViewStateType.DETAIL_TO_OVERVIEW_TRANSITION,new DetailToOverviewTransition(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  currentState=hashStates.get(ECompareViewStateType.OVERVIEW);
  setBar.setViewState(currentState);
}","public CompareViewStateController(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,ContextMenu contextMenu,EDataDomain dataDomain,IUseCase useCase){
  DragAndDropController dragAndDropController=new DragAndDropController(view);
  SetBar setBar=new SetBar(viewID,pickingManager,textRenderer,dragAndDropController,glMouseListener,view,contextMenu,textureManager);
  setBar.setPosition(new Vec3f(0.0f,0.0f,0.01f));
  RenderCommandFactory renderCommandFactory=new RenderCommandFactory(viewID,pickingManager,textureManager,textRenderer);
  hashStates=new HashMap<ECompareViewStateType,ACompareViewState>();
  hashStates.put(ECompareViewStateType.DETAIL_VIEW,new DetailViewState(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  hashStates.put(ECompareViewStateType.OVERVIEW,new OverviewState(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  hashStates.put(ECompareViewStateType.OVERVIEW_TO_DETAIL_TRANSITION,new OverviewToDetailTransition(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  hashStates.put(ECompareViewStateType.DETAIL_TO_OVERVIEW_TRANSITION,new DetailToOverviewTransition(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,this));
  currentState=hashStates.get(ECompareViewStateType.OVERVIEW);
  setBar.setViewState(currentState);
}",0.9853113983548766
58360,"@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(heatMapWrapper.getContentVAsOfHeatMaps(true),true,true);
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
}","@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(heatMapWrapper.getContentVAsOfHeatMaps(true),true,true,true);
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
}",0.9965729952021932
58361,"public DetailViewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  this.setBar.setPosition(new Vec3f(0.0f,0.0f,0.0f));
  numSetsInFocus=2;
  indexOfHeatMapWrapperWithDendrogram=-1;
}","public DetailViewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  numSetsInFocus=2;
  indexOfHeatMapWrapperWithDendrogram=-1;
}",0.9571428571428572
58362,"public OverviewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  this.setBar.setPosition(new Vec3f(0.0f,0.0f,0.0f));
  numSetsInFocus=4;
}","public OverviewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  numSetsInFocus=4;
}",0.953924914675768
58363,"/** 
 * Check whether the provided type is a default type.
 * @param selectionType a type to be checked whether it is default
 * @return true if selectionType is a default type, else false
 */
public static boolean isDefaultType(SelectionType selectionType){
  if (NORMAL.equals(selectionType) || MOUSE_OVER.equals(selectionType) || SELECTION.equals(selectionType)|| DESELECTED.equals(defaultTypes))   return true;
  return false;
}","/** 
 * Check whether the provided type is a default type.
 * @param selectionType a type to be checked whether it is default
 * @return true if selectionType is a default type, else false
 */
public static boolean isDefaultType(SelectionType selectionType){
  if (NORMAL.equals(selectionType) || MOUSE_OVER.equals(selectionType) || SELECTION.equals(selectionType)|| DESELECTED.equals(selectionType))   return true;
  return false;
}",0.9710982658959536
58364,"private void runContentClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.contentResult=new ContentData();
  result.contentResult.contentVA=new ContentVirtualArray(clusterState.getContentVAType(),tempResult.indices);
  result.contentResult.contentClusterSizes=tempResult.clusterSizes;
  result.contentResult.contentSampleElements=tempResult.sampleElements;
  result.contentResult.contentTree=tempResult.tree;
  result.contentResult.contentTree.setUseDefaultComparator(false);
}","private void runContentClustering(AClusterer clusterer,ClusterState clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(set,clusterState,progressBarOffset,progressBarMulti);
  result.contentResult=new ContentData();
  result.contentResult.contentVA=new ContentVirtualArray(clusterState.getContentVAType(),tempResult.indices);
  result.contentResult.contentClusterSizes=tempResult.clusterSizes;
  result.contentResult.contentSampleElements=tempResult.sampleElements;
  result.contentResult.contentTree=tempResult.tree;
}",0.949887808526552
58365,"void finish(){
  if (contentVA != null && contentClusterSizes != null && contentSampleElements != null) {
    ContentGroupList contentGroupList=new ContentGroupList();
    int cnt=0;
    contentTree=new Tree<ClusterNode>();
    contentTree.setUseDefaultComparator(false);
    int clusterNr=0;
    ClusterNode root=new ClusterNode(contentTree,""String_Node_Str"",clusterNr++,true,-1);
    contentTree.setRootNode(root);
    ClusterNode node;
    int from=0;
    int to=0;
    for (    Integer clusterSize : contentClusterSizes) {
      node=new ClusterNode(contentTree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
      Group temp=new Group(clusterSize,false,contentSampleElements.get(cnt),SelectionType.NORMAL,node);
      contentTree.addChild(root,node);
      contentGroupList.append(temp);
      cnt++;
      to+=clusterSize;
      ClusterNode leaf;
      for (int vaIndex=from; vaIndex < to; vaIndex++) {
        Integer contentID=contentVA.get(vaIndex);
        leaf=new ClusterNode(contentTree,""String_Node_Str"" + contentID,clusterNr++,true,contentID);
        contentTree.addChild(node,leaf);
      }
      from=to;
    }
    contentVA.setGroupList(contentGroupList);
  }
 else   if (contentVA != null && contentTree != null) {
    contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
  }
}","void finish(){
  if (contentVA != null && contentClusterSizes != null && contentSampleElements != null) {
    ContentGroupList contentGroupList=new ContentGroupList();
    int cnt=0;
    contentTree=new Tree<ClusterNode>();
    contentTree.setUseDefaultComparator(false);
    int clusterNr=0;
    ClusterNode root=new ClusterNode(contentTree,""String_Node_Str"",clusterNr++,true,-1);
    contentTree.setRootNode(root);
    ClusterNode node;
    int from=0;
    int to=0;
    for (    Integer clusterSize : contentClusterSizes) {
      node=new ClusterNode(contentTree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
      Group temp=new Group(clusterSize,false,contentSampleElements.get(cnt),SelectionType.NORMAL,node);
      contentTree.addChild(root,node);
      contentGroupList.append(temp);
      cnt++;
      to+=clusterSize;
      ClusterNode leaf;
      for (int vaIndex=from; vaIndex < to; vaIndex++) {
        Integer contentID=contentVA.get(vaIndex);
        leaf=new ClusterNode(contentTree,""String_Node_Str"" + contentID,clusterNr++,true,contentID);
        contentTree.addChild(node,leaf);
      }
      from=to;
    }
    contentVA.setGroupList(contentGroupList);
  }
 else   if (contentVA != null && contentTree != null) {
    contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
  }
  contentTree.setUseDefaultComparator(false);
}",0.9828101644245142
58366,"public static float[] getColor(int iColorNr){
  float fBrighness=0.9f;
  int iWhiteness=20;
  int color=(iColorNr + 7) % 10;
  float[] fArMappingColor=new float[]{0F,0F,0F,0F};
switch (color) {
case 1:
    fArMappingColor=new float[]{31,120,180,1};
  break;
case 2:
fArMappingColor=new float[]{178,223,138,1};
break;
case 3:
fArMappingColor=new float[]{51,160,44,1};
break;
case 4:
fArMappingColor=new float[]{251,154,153,1};
break;
case 5:
fArMappingColor=new float[]{227,26,28,1};
break;
case 6:
fArMappingColor=new float[]{166,206,227,1};
break;
case 7:
fArMappingColor=new float[]{253,191,111,1};
break;
case 8:
fArMappingColor=new float[]{255,127,0,1};
break;
case 9:
fArMappingColor=new float[]{202,178,214,1};
break;
case 0:
fArMappingColor=new float[]{106,61,154,1};
break;
default :
fArMappingColor=new float[]{0,0,0,1};
}
for (int i=0; i < 3; i++) {
fArMappingColor[i]=fBrighness * ((fArMappingColor[i] - iWhiteness) / 255f);
if (fArMappingColor[i] > 1) fArMappingColor[i]=1;
if (fArMappingColor[i] < 0) fArMappingColor[i]=0;
}
return fArMappingColor;
}","public static float[] getColor(int iColorNr){
  float fBrighness=0.9f;
  int iWhiteness=20;
  int color=(iColorNr) % 6;
  float[] fArMappingColor=new float[]{0F,0F,0F,0F};
switch (color) {
case 0:
    fArMappingColor=new float[]{228,26,28,1};
  break;
case 1:
fArMappingColor=new float[]{77,175,74,1};
break;
case 2:
fArMappingColor=new float[]{152,78,163,1};
break;
case 3:
fArMappingColor=new float[]{255,127,0,1};
break;
case 4:
fArMappingColor=new float[]{255,255,51,1};
break;
case 5:
fArMappingColor=new float[]{166,86,40,1};
break;
case 6:
fArMappingColor=new float[]{247,129,191,1};
break;
default :
fArMappingColor=new float[]{0,0,0,1};
}
for (int i=0; i < 3; i++) {
fArMappingColor[i]=fBrighness * ((fArMappingColor[i] - iWhiteness) / 255f);
if (fArMappingColor[i] > 1) fArMappingColor[i]=1;
if (fArMappingColor[i] < 0) fArMappingColor[i]=0;
}
return fArMappingColor;
}",0.5818743563336766
58367,"private void updateContentTree(){
  ArrayList<SelectionType> sTypes=contentSelectionManager.getSelectionTypes();
  Color color=null;
  contentTree.removeAll();
  for (  SelectionType tmpSelectionType : sTypes) {
    if (SelectionType.isDefaultType(tmpSelectionType) || tmpSelectionType == SelectionType.DESELECTED)     continue;
    TreeItem item=new TreeItem(contentTree,SWT.NONE);
    float[] fArColor=tmpSelectionType.getColor();
    color=new Color(parentComposite.getDisplay(),(int)(fArColor[0] * 255),(int)(fArColor[1] * 255),(int)(fArColor[2] * 255));
    item.setText(tmpSelectionType.toString() + ""String_Node_Str"" + contentSelectionManager.getNumberOfElements(tmpSelectionType)+ ""String_Node_Str"");
    item.setBackground(color);
    item.setData(tmpSelectionType);
    contentTree.setExpanded(true);
  }
}","private void updateContentTree(){
  ArrayList<SelectionType> sTypes=contentSelectionManager.getSelectionTypes();
  Color color=null;
  contentTree.removeAll();
  for (  SelectionType tmpSelectionType : sTypes) {
    if (SelectionType.isDefaultType(tmpSelectionType) || !tmpSelectionType.isManaged())     continue;
    TreeItem item=new TreeItem(contentTree,SWT.NONE);
    float[] fArColor=tmpSelectionType.getColor();
    color=new Color(parentComposite.getDisplay(),(int)(fArColor[0] * 255),(int)(fArColor[1] * 255),(int)(fArColor[2] * 255));
    item.setText(tmpSelectionType.toString() + ""String_Node_Str"" + contentSelectionManager.getNumberOfElements(tmpSelectionType)+ ""String_Node_Str"");
    item.setBackground(color);
    item.setData(tmpSelectionType);
    contentTree.setExpanded(true);
  }
}",0.9548546691403834
58368,"public void setHeatMapActive(int groupIndex,boolean addToNewSelectionType){
  if (activeHeatMapID == groupIndex)   return;
  int previouslyActiveHeatMapID=activeHeatMapID;
  activeHeatMapID=groupIndex;
  if (previouslyActiveHeatMapID != -1) {
    GLHeatMap heatMap=hashHeatMaps.get(activeHeatMapID);
    ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
    for (    Integer elementID : heatMap.getContentVA()) {
      hmContentSelectionManager.removeFromType(activeHeatMapSelectionType,elementID);
    }
    SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
  GLHeatMap heatMap=hashHeatMaps.get(groupIndex);
  ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
  hmContentSelectionManager.addToType(activeHeatMapSelectionType,heatMap.getContentVA().getVirtualArray());
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
  eventPublisher.triggerEvent(selectionUpdateEvent);
  if (addToNewSelectionType) {
    SelectionType selectionType=new SelectionType();
    selectionType.setType(SELECTION_TYPE_NAME + selectionTypeNumber++);
    selectionType.setPriority(0.8f + 0.0001f * selectionTypeNumber);
    selectionType.setColor(ColorUtil.getColor(selectionTypeNumber));
    SelectionTypeEvent event=new SelectionTypeEvent();
    event.addSelectionType(selectionType);
    eventPublisher.triggerEvent(event);
    hmContentSelectionManager.addToType(selectionType,heatMap.getContentVA().getVirtualArray());
    selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
}","public void setHeatMapActive(int groupIndex,boolean addToNewSelectionType){
  if (activeHeatMapID == groupIndex)   return;
  int previouslyActiveHeatMapID=activeHeatMapID;
  activeHeatMapID=groupIndex;
  if (previouslyActiveHeatMapID != -1) {
    GLHeatMap heatMap=hashHeatMaps.get(activeHeatMapID);
    ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
    for (    Integer elementID : heatMap.getContentVA()) {
      hmContentSelectionManager.removeFromType(activeHeatMapSelectionType,elementID);
    }
    SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
  GLHeatMap heatMap=hashHeatMaps.get(groupIndex);
  ContentSelectionManager hmContentSelectionManager=heatMap.getContentSelectionManager();
  hmContentSelectionManager.addToType(activeHeatMapSelectionType,heatMap.getContentVA().getVirtualArray());
  SelectionUpdateEvent selectionUpdateEvent=new SelectionUpdateEvent();
  selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
  eventPublisher.triggerEvent(selectionUpdateEvent);
  if (addToNewSelectionType) {
    SelectionType selectionType=new SelectionType();
    selectionType.setType(SELECTION_TYPE_NAME + selectionTypeNumber);
    selectionType.setPriority(0.8f + 0.0001f * selectionTypeNumber);
    selectionType.setColor(ColorUtil.getColor(selectionTypeNumber++));
    selectionType.setManaged(true);
    SelectionTypeEvent event=new SelectionTypeEvent();
    event.addSelectionType(selectionType);
    eventPublisher.triggerEvent(event);
    hmContentSelectionManager.addToType(selectionType,heatMap.getContentVA().getVirtualArray());
    selectionUpdateEvent=new SelectionUpdateEvent();
    selectionUpdateEvent.setSelectionDelta(hmContentSelectionManager.getDelta());
    eventPublisher.triggerEvent(selectionUpdateEvent);
  }
}",0.989247311827957
58369,"public void addSelectionType(){
  iCurrentSelectionNr++;
  if (iCurrentSelectionNr > iMaxSelections)   return;
  SelectionTypeEvent event=new SelectionTypeEvent();
  currentSelection=new SelectionType();
  currentSelection.setType(CUSTOM_SELECTION_NAME + ""String_Node_Str"" + iCurrentSelectionNr);
  currentSelection.setColor(ScatterPlotHelper.getSelectionColor(iCurrentSelectionNr));
  currentSelection.setPriority((float)iCurrentSelectionNr / 10000.0f);
  event.addSelectionType(currentSelection);
  eventPublisher.triggerEvent(event);
}","public void addSelectionType(){
  iCurrentSelectionNr++;
  if (iCurrentSelectionNr > iMaxSelections)   return;
  SelectionTypeEvent event=new SelectionTypeEvent();
  currentSelection=new SelectionType();
  currentSelection.setType(CUSTOM_SELECTION_NAME + ""String_Node_Str"" + iCurrentSelectionNr);
  currentSelection.setColor(ScatterPlotHelper.getSelectionColor(iCurrentSelectionNr));
  currentSelection.setPriority((float)iCurrentSelectionNr / 10000.0f);
  currentSelection.setManaged(true);
  event.addSelectionType(currentSelection);
  eventPublisher.triggerEvent(event);
}",0.9667565139263252
58370,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  compareGroupsEventListener=new CompareGroupsEventListener();
  compareGroupsEventListener.setHandler(this);
  eventPublisher.addListener(CompareGroupsEvent.class,compareGroupsEventListener);
  duplicateSetBarItemEventListener=new DuplicateSetBarItemEventListener();
  duplicateSetBarItemEventListener.setHandler(this);
  eventPublisher.addListener(DuplicateSetBarItemEvent.class,duplicateSetBarItemEventListener);
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  adjustPValueOfSetEventListener=new AdjustPValueOfSetEventListener();
  adjustPValueOfSetEventListener.setHandler(this);
  eventPublisher.addListener(AdjustPValueEvent.class,adjustPValueOfSetEventListener);
  selectionCommandListener=new SelectionCommandListener();
  selectionCommandListener.setHandler(this);
  eventPublisher.addListener(SelectionCommandEvent.class,selectionCommandListener);
  replaceContentVAListener=new ReplaceContentVAListener();
  replaceContentVAListener.setHandler(this);
  eventPublisher.addListener(ReplaceContentVAEvent.class,replaceContentVAListener);
  useSortingListener=new UseSortingListener();
  useSortingListener.setHandler(this);
  eventPublisher.addListener(UseSortingEvent.class,useSortingListener);
  useZoomListener=new UseZoomListener();
  useZoomListener.setHandler(this);
  eventPublisher.addListener(UseZoomEvent.class,useZoomListener);
  useBandBundlingListener=new UseBandBundlingListener();
  useBandBundlingListener.setHandler(this);
  eventPublisher.addListener(UseBandBundlingEvent.class,useBandBundlingListener);
  newContentGroupInfoEventListener=new NewContentGroupInfoEventListener();
  newContentGroupInfoEventListener.setHandler(this);
  eventPublisher.addListener(NewContentGroupInfoEvent.class,newContentGroupInfoEventListener);
  createSelectionTypesListener=new CreateSelectionTypesListener();
  createSelectionTypesListener.setHandler(this);
  eventPublisher.addListener(CreateSelectionTypesEvent.class,createSelectionTypesListener);
  clearSelectionsListener=new ClearSelectionsListener();
  clearSelectionsListener.setHandler(this);
  eventPublisher.addListener(ClearSelectionsEvent.class,clearSelectionsListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  compareGroupsEventListener=new CompareGroupsEventListener();
  compareGroupsEventListener.setHandler(this);
  eventPublisher.addListener(CompareGroupsEvent.class,compareGroupsEventListener);
  duplicateSetBarItemEventListener=new DuplicateSetBarItemEventListener();
  duplicateSetBarItemEventListener.setHandler(this);
  eventPublisher.addListener(DuplicateSetBarItemEvent.class,duplicateSetBarItemEventListener);
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  adjustPValueOfSetEventListener=new AdjustPValueOfSetEventListener();
  adjustPValueOfSetEventListener.setHandler(this);
  eventPublisher.addListener(AdjustPValueEvent.class,adjustPValueOfSetEventListener);
  selectionCommandListener=new SelectionCommandListener();
  selectionCommandListener.setHandler(this);
  eventPublisher.addListener(SelectionCommandEvent.class,selectionCommandListener);
  replaceContentVAListener=new ReplaceContentVAListener();
  replaceContentVAListener.setHandler(this);
  eventPublisher.addListener(ReplaceContentVAEvent.class,replaceContentVAListener);
  useSortingListener=new UseSortingListener();
  useSortingListener.setHandler(this);
  eventPublisher.addListener(UseSortingEvent.class,useSortingListener);
  useZoomListener=new UseZoomListener();
  useZoomListener.setHandler(this);
  eventPublisher.addListener(UseZoomEvent.class,useZoomListener);
  useBandBundlingListener=new UseBandBundlingListener();
  useBandBundlingListener.setHandler(this);
  eventPublisher.addListener(UseBandBundlingEvent.class,useBandBundlingListener);
  newContentGroupInfoEventListener=new NewContentGroupInfoEventListener();
  newContentGroupInfoEventListener.setHandler(this);
  eventPublisher.addListener(NewContentGroupInfoEvent.class,newContentGroupInfoEventListener);
  createSelectionTypesListener=new CreateSelectionTypesListener();
  createSelectionTypesListener.setHandler(this);
  eventPublisher.addListener(CreateSelectionTypesEvent.class,createSelectionTypesListener);
  clearSelectionsListener=new ClearSelectionsListener();
  clearSelectionsListener.setHandler(this);
  eventPublisher.addListener(ClearSelectionsEvent.class,clearSelectionsListener);
  hideHeatMapElementsEventListener=new HideHeatMapElementsEventListener();
  hideHeatMapElementsEventListener.setHandler(this);
  eventPublisher.addListener(HideHeatMapElementsEvent.class,hideHeatMapElementsEventListener);
}",0.9549585942233892
58371,"@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (compareGroupsEventListener != null) {
    eventPublisher.removeListener(compareGroupsEventListener);
    compareGroupsEventListener=null;
  }
  if (duplicateSetBarItemEventListener != null) {
    eventPublisher.removeListener(duplicateSetBarItemEventListener);
    duplicateSetBarItemEventListener=null;
  }
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (adjustPValueOfSetEventListener != null) {
    eventPublisher.removeListener(adjustPValueOfSetEventListener);
    adjustPValueOfSetEventListener=null;
  }
  if (selectionCommandListener != null) {
    eventPublisher.removeListener(selectionCommandListener);
    selectionCommandListener=null;
  }
  if (replaceContentVAListener != null) {
    eventPublisher.removeListener(replaceContentVAListener);
    replaceContentVAListener=null;
  }
  if (useSortingListener != null) {
    eventPublisher.removeListener(useSortingListener);
    useSortingListener=null;
  }
  if (useZoomListener != null) {
    eventPublisher.removeListener(useZoomListener);
    useZoomListener=null;
  }
  if (useBandBundlingListener != null) {
    eventPublisher.removeListener(useBandBundlingListener);
    useBandBundlingListener=null;
  }
  if (newContentGroupInfoEventListener != null) {
    eventPublisher.removeListener(newContentGroupInfoEventListener);
    newContentGroupInfoEventListener=null;
  }
  if (createSelectionTypesListener != null) {
    eventPublisher.removeListener(createSelectionTypesListener);
    createSelectionTypesListener=null;
  }
  if (clearSelectionsListener != null) {
    eventPublisher.removeListener(clearSelectionsListener);
    clearSelectionsListener=null;
  }
}","@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (compareGroupsEventListener != null) {
    eventPublisher.removeListener(compareGroupsEventListener);
    compareGroupsEventListener=null;
  }
  if (duplicateSetBarItemEventListener != null) {
    eventPublisher.removeListener(duplicateSetBarItemEventListener);
    duplicateSetBarItemEventListener=null;
  }
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (adjustPValueOfSetEventListener != null) {
    eventPublisher.removeListener(adjustPValueOfSetEventListener);
    adjustPValueOfSetEventListener=null;
  }
  if (selectionCommandListener != null) {
    eventPublisher.removeListener(selectionCommandListener);
    selectionCommandListener=null;
  }
  if (replaceContentVAListener != null) {
    eventPublisher.removeListener(replaceContentVAListener);
    replaceContentVAListener=null;
  }
  if (useSortingListener != null) {
    eventPublisher.removeListener(useSortingListener);
    useSortingListener=null;
  }
  if (useZoomListener != null) {
    eventPublisher.removeListener(useZoomListener);
    useZoomListener=null;
  }
  if (useBandBundlingListener != null) {
    eventPublisher.removeListener(useBandBundlingListener);
    useBandBundlingListener=null;
  }
  if (newContentGroupInfoEventListener != null) {
    eventPublisher.removeListener(newContentGroupInfoEventListener);
    newContentGroupInfoEventListener=null;
  }
  if (createSelectionTypesListener != null) {
    eventPublisher.removeListener(createSelectionTypesListener);
    createSelectionTypesListener=null;
  }
  if (clearSelectionsListener != null) {
    eventPublisher.removeListener(clearSelectionsListener);
    clearSelectionsListener=null;
  }
  if (hideHeatMapElementsEventListener != null) {
    eventPublisher.removeListener(hideHeatMapElementsEventListener);
    hideHeatMapElementsEventListener=null;
  }
}",0.95640756302521
58372,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType;
switch (ePickingType) {
case HEAT_MAP_LINE_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  setActive(true);
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (generalManager.getUseCase(dataDomain).getDataDomain() != EDataDomain.GENETIC_DATA) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ContentContextMenuItemContainer geneContextMenuItemContainer=new ContentContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
default :
return;
}
createContentSelection(selectionType,iExternalID);
break;
case HEAT_MAP_STORAGE_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(iExternalID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
createStorageSelection(selectionType,iExternalID);
break;
case HEAT_MAP_HIDE_HIDDEN_ELEMENTS:
if (pickingMode == EPickingMode.CLICKED) if (hideElements) hideElements=false;
 else hideElements=true;
setDisplayListDirty();
break;
case HEAT_MAP_SHOW_CAPTIONS:
if (pickingMode == EPickingMode.CLICKED) if (showCaptions) showCaptions=false;
 else {
showCaptions=true;
}
template.recalculateSpacings();
setDisplayListDirty();
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  SelectionType selectionType;
switch (ePickingType) {
case HEAT_MAP_LINE_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  setActive(true);
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (generalManager.getUseCase(dataDomain).getDataDomain() != EDataDomain.GENETIC_DATA) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ContentContextMenuItemContainer geneContextMenuItemContainer=new ContentContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
default :
return;
}
createContentSelection(selectionType,iExternalID);
break;
case HEAT_MAP_STORAGE_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(iExternalID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
createStorageSelection(selectionType,iExternalID);
break;
case HEAT_MAP_HIDE_HIDDEN_ELEMENTS:
if (pickingMode == EPickingMode.CLICKED) if (hideElements) hideElements=false;
 else hideElements=true;
HideHeatMapElementsEvent event=new HideHeatMapElementsEvent(hideElements);
event.setSender(this);
eventPublisher.triggerEvent(event);
setDisplayListDirty();
break;
case HEAT_MAP_SHOW_CAPTIONS:
if (pickingMode == EPickingMode.CLICKED) if (showCaptions) showCaptions=false;
 else {
showCaptions=true;
}
template.recalculateSpacings();
setDisplayListDirty();
break;
}
}",0.9701957295373664
58373,"private void calulateReduction(){
  if (setsWithPerformedStatistics == null || setsWithPerformedStatistics.size() == 0)   return;
  reducedVA=new ContentVirtualArray();
  for (int contentIndex=0; contentIndex < setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).size(); contentIndex++) {
    boolean resultValid=true;
    for (    ISet set : setsWithPerformedStatistics) {
      for (      ISet foldChangeCompareSet : set.getStatisticsResult().getAllFoldChangeResults().keySet()) {
        Pair<double[],FoldChangeSettings> foldChangeResult=set.getStatisticsResult().getFoldChangeResult(foldChangeCompareSet);
        FoldChangeSettings foldChangeSettings=foldChangeResult.getSecond();
        if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.GREATER) {
          if (foldChangeResult.getFirst()[contentIndex] < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.LESS) {
          if (foldChangeResult.getFirst()[contentIndex] > foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.SAME) {
          if (Math.abs(foldChangeResult.getFirst()[contentIndex]) < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
      }
      for (      ISet twoSidedCompareSet : set.getStatisticsResult().getAllTwoSidedTTestResults().keySet()) {
        ArrayList<Double> twoSidedTTestResult=set.getStatisticsResult().getTwoSidedTTestResult(twoSidedCompareSet);
        if (twoSidedTTestResult != null && twoSidedTTestResult.get(contentIndex) > pValueCutOff)         resultValid=false;
      }
      double[] tTestResult=set.getStatisticsResult().getOneSidedTTestResult();
      if (tTestResult != null && tTestResult[contentIndex] > pValueCutOff)       resultValid=false;
      if (!resultValid)       continue;
    }
    if (resultValid)     reducedVA.appendUnique(setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).get(contentIndex));
  }
}","private void calulateReduction(){
  if (setsWithPerformedStatistics == null || setsWithPerformedStatistics.size() == 0)   return;
  reducedVA=new ContentVirtualArray();
  for (int contentIndex=0; contentIndex < setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).size(); contentIndex++) {
    boolean resultValid=true;
    for (    ISet set : setsWithPerformedStatistics) {
      for (      ISet foldChangeCompareSet : set.getStatisticsResult().getAllFoldChangeResults().keySet()) {
        Pair<double[],FoldChangeSettings> foldChangeResult=set.getStatisticsResult().getFoldChangeResult(foldChangeCompareSet);
        FoldChangeSettings foldChangeSettings=foldChangeResult.getSecond();
        if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.GREATER) {
          if (foldChangeResult.getFirst()[contentIndex] < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.LESS) {
          if (foldChangeResult.getFirst()[contentIndex] > foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
 else         if (foldChangeSettings.getEvaluator() == FoldChangeEvaluator.SAME) {
          if (Math.abs(foldChangeResult.getFirst()[contentIndex]) < foldChangeSettings.getRatio()) {
            resultValid=false;
            continue;
          }
        }
      }
      for (      ISet twoSidedCompareSet : set.getStatisticsResult().getAllTwoSidedTTestResults().keySet()) {
        ArrayList<Double> twoSidedTTestResult=set.getStatisticsResult().getTwoSidedTTestResult(twoSidedCompareSet);
        if (twoSidedTTestResult != null && twoSidedTTestResult.get(contentIndex) > pValueCutOff)         resultValid=false;
      }
      double[] tTestResult=set.getStatisticsResult().getOneSidedTTestResult();
      if (tTestResult != null && tTestResult[contentIndex] > pValueCutOff)       resultValid=false;
      if (!resultValid)       continue;
    }
    if (resultValid)     reducedVA.appendUnique(setsWithPerformedStatistics.get(0).getContentVA(ContentVAType.CONTENT).get(contentIndex));
  }
  if (reducedVA != null) {
    reducedNumberLabel.setText(""String_Node_Str"" + reducedVA.size());
    composite.layout();
  }
}",0.972314507198228
58374,"private void createGUI(){
  composite.layout();
  final Slider pValueSlider=new Slider(composite,SWT.HORIZONTAL);
  final Label pValueLabel=new Label(composite,SWT.NULL);
  pValueLabel.setText(""String_Node_Str"" + pValueCutOff);
  reducedNumberLabel=new Label(composite,SWT.NULL);
  reducedNumberLabel.setText(""String_Node_Str"");
  pValueSlider.setMinimum(0);
  pValueSlider.setMaximum(110);
  pValueSlider.setIncrement(10);
  pValueSlider.setPageIncrement(10);
  pValueSlider.setSelection((int)(pValueCutOff * 1000));
  pValueSlider.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      pValueCutOff=pValueSlider.getSelection() / 1000f;
      pValueLabel.setText(""String_Node_Str"" + pValueCutOff);
      calulateReduction();
      if (reducedVA != null)       reducedNumberLabel.setText(""String_Node_Str"" + reducedVA.size());
      composite.layout();
    }
  }
);
  final Button button=new Button(composite,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      performReduction();
    }
  }
);
  final Button buttonClear=new Button(composite,SWT.PUSH);
  buttonClear.setText(""String_Node_Str"");
  buttonClear.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      clearStatisticsResults();
      calulateReduction();
    }
  }
);
}","private void createGUI(){
  composite.layout();
  final Slider pValueSlider=new Slider(composite,SWT.HORIZONTAL);
  final Label pValueLabel=new Label(composite,SWT.NULL);
  pValueLabel.setText(""String_Node_Str"" + pValueCutOff);
  reducedNumberLabel=new Label(composite,SWT.NULL);
  reducedNumberLabel.setText(""String_Node_Str"");
  pValueSlider.setMinimum(0);
  pValueSlider.setMaximum(110);
  pValueSlider.setIncrement(10);
  pValueSlider.setPageIncrement(10);
  pValueSlider.setSelection((int)(pValueCutOff * 1000));
  pValueSlider.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      pValueCutOff=pValueSlider.getSelection() / 1000f;
      pValueLabel.setText(""String_Node_Str"" + pValueCutOff);
      calulateReduction();
      composite.layout();
    }
  }
);
  final Button button=new Button(composite,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      performReduction();
    }
  }
);
  final Button buttonClear=new Button(composite,SWT.PUSH);
  buttonClear.setText(""String_Node_Str"");
  buttonClear.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      clearStatisticsResults();
      calulateReduction();
    }
  }
);
}",0.7570460221191581
58375,"public void resultFinished(ArrayList<ISet> sets){
  setsWithPerformedStatistics.addAll(sets);
  calulateReduction();
  if (reducedVA != null) {
    reducedNumberLabel.setText(""String_Node_Str"" + reducedVA.size());
    composite.layout();
  }
}","public void resultFinished(ArrayList<ISet> sets){
  setsWithPerformedStatistics.addAll(sets);
  calulateReduction();
}",0.6537396121883656
58376,"@Override public void mouseUp(MouseEvent e){
  pValueCutOff=pValueSlider.getSelection() / 1000f;
  pValueLabel.setText(""String_Node_Str"" + pValueCutOff);
  calulateReduction();
  if (reducedVA != null)   reducedNumberLabel.setText(""String_Node_Str"" + reducedVA.size());
  composite.layout();
}","@Override public void mouseUp(MouseEvent e){
  pValueCutOff=pValueSlider.getSelection() / 1000f;
  pValueLabel.setText(""String_Node_Str"" + pValueCutOff);
  calulateReduction();
  composite.layout();
}",0.7789046653144016
58377,"private void clearStatisticsResults(){
  for (  ISet set : setsWithPerformedStatistics) {
    set.getStatisticsResult().clearStatisticsResults();
  }
}","private void clearStatisticsResults(){
  for (  ISet set : setsWithPerformedStatistics) {
    set.getStatisticsResult().clearStatisticsResults();
  }
  calulateReduction();
}",0.9292307692307692
58378,"public int getElementNumberOfFoldChangeReduction(ISet compareSet){
  int numberOfElements=0;
  ContentVirtualArray origVA=compareSet.getContentVA(ContentVAType.CONTENT);
  double[] resultVector=setToFoldChangeResult.get(compareSet).getFirst();
  FoldChangeSettings settings=setToFoldChangeResult.get(compareSet).getSecond();
  double foldChangeRatio=settings.getRatio();
  FoldChangeEvaluator foldChangeEvaluator=settings.getEvaluator();
  for (Integer contentIndex=0; contentIndex < origVA.size(); contentIndex++) {
switch (foldChangeEvaluator) {
case LESS:
      if (resultVector[contentIndex] > -foldChangeRatio)       continue;
    break;
case GREATER:
  if (resultVector[contentIndex] < foldChangeRatio)   continue;
break;
case SAME:
if (Math.abs(resultVector[contentIndex]) > foldChangeRatio) continue;
break;
}
numberOfElements++;
}
return numberOfElements;
}","public int getElementNumberOfFoldChangeReduction(ISet compareSet){
  int numberOfElements=0;
  ContentVirtualArray origVA=compareSet.getContentVA(ContentVAType.CONTENT);
  double[] resultVector=setToFoldChangeResult.get(compareSet).getFirst();
  FoldChangeSettings settings=setToFoldChangeResult.get(compareSet).getSecond();
  double foldChangeRatio=settings.getRatio();
  FoldChangeEvaluator foldChangeEvaluator=settings.getEvaluator();
  for (Integer contentIndex=0; contentIndex < origVA.size(); contentIndex++) {
switch (foldChangeEvaluator) {
case LESS:
      if (resultVector[contentIndex] > foldChangeRatio)       continue;
    break;
case GREATER:
  if (resultVector[contentIndex] < foldChangeRatio)   continue;
break;
case SAME:
if (Math.abs(resultVector[contentIndex]) > foldChangeRatio) continue;
break;
}
numberOfElements++;
}
return numberOfElements;
}",0.9994222992489892
58379,"@Override public void handleEvent(AEvent event){
  StatisticsPValueReductionEvent pValueReductionEvent=null;
  if (event instanceof StatisticsPValueReductionEvent) {
    pValueReductionEvent=(StatisticsPValueReductionEvent)event;
    handler.twoSidedTTest(pValueReductionEvent.getSets());
  }
}","@Override public void handleEvent(AEvent event){
  StatisticsPValueReductionEvent pValueReductionEvent=null;
  if (event instanceof StatisticsPValueReductionEvent) {
    pValueReductionEvent=(StatisticsPValueReductionEvent)event;
    handler.oneSidedTTest(pValueReductionEvent.getSets());
  }
}",0.9897959183673468
58380,"public void reportOneShot(User user,User owner,AccessInformation accessInformation,int srcAppID){
  System.out.println(""String_Node_Str"" + user.getPointerID() + ""String_Node_Str""+ owner.getPointerID()+ ""String_Node_Str"");
  if (user.getCurrentRenderType() == VisualLinksRenderType.RenderTypeOneShot) {
    System.out.println(""String_Node_Str"");
    return;
  }
  user.setCurrentRenderType(VisualLinksRenderType.RenderTypeOneShot);
  String selectionID=owner.getPrevSelectionID();
  int[] targetApplicationIds=accessInformation.applicationIds;
  String pointerID=user.getPointerID();
  for (  int appId : targetApplicationIds) {
    Application app=applicationManager.getApplicationsById().get(appId);
    boolean isSource=false;
    if (appId == srcAppID) {
      System.out.println(app.getName() + ""String_Node_Str"");
      isSource=true;
    }
    this.selectionManager.addSelection(app,selectionID,pointerID,isSource);
  }
  TimeoutEvent event=new OneShotTimeoutEvent(user);
  TimeoutHandler timeoutHandler=new TimeoutHandler(event,this);
  Timer timer=new Timer();
  timer.schedule(timeoutHandler,OneShotTimeoutEvent.ONE_SHOT_DISPLAY_TIME);
  checkRender(pointerID);
}","public void reportOneShot(User user,User owner,AccessInformation accessInformation,int srcAppID){
  System.out.println(""String_Node_Str"" + user.getPointerID() + ""String_Node_Str""+ owner.getPointerID()+ ""String_Node_Str"");
  TimeoutEvent event=new OneShotTimeoutEvent(user);
  if (this.tmpTimeoutHandler != null) {
    this.tmpTimeoutHandler.cancel();
    this.tmpTimeoutHandler=null;
  }
  this.tmpTimeoutHandler=new TimeoutHandler(event,this);
  Timer timer=new Timer();
  timer.schedule(this.tmpTimeoutHandler,OneShotTimeoutEvent.ONE_SHOT_DISPLAY_TIME);
  if (user.getCurrentRenderType() == VisualLinksRenderType.RenderTypeOneShot) {
    System.out.println(""String_Node_Str"");
    return;
  }
  user.setCurrentRenderType(VisualLinksRenderType.RenderTypeOneShot);
  String selectionID=owner.getPrevSelectionID();
  int[] targetApplicationIds=accessInformation.applicationIds;
  String pointerID=user.getPointerID();
  for (  int appId : targetApplicationIds) {
    Application app=applicationManager.getApplicationsById().get(appId);
    boolean isSource=false;
    if (appId == srcAppID) {
      System.out.println(app.getName() + ""String_Node_Str"");
      isSource=true;
    }
    this.selectionManager.addSelection(app,selectionID,pointerID,isSource);
  }
  checkRender(pointerID);
}",0.3798291988613257
58381,"public VisLinkManager(){
}","public VisLinkManager(){
  this.tmpTimeoutHandler=null;
}",0.6265060240963856
58382,"private void renderWithIce(HashMap<Integer,BoundingBoxList> app2bbs,String pointerID){
  ArrayList<SelectionGroup> selectionGroupList=new ArrayList<SelectionGroup>();
  for (  Entry<Integer,BoundingBoxList> e : app2bbs.entrySet()) {
    SelectionGroup selectionGroup=new SelectionGroup();
    User user=this.userManager.getUser(pointerID);
    int srcAppID=-1;
    if (user.getPrevSrcApp() != null) {
      srcAppID=user.getPrevSrcApp().getId();
    }
    selectionGroup.selections=new Selection[e.getValue().getList().size()];
    ArrayList<Selection> selectionList=new ArrayList<Selection>();
    for (    BoundingBox bb : e.getValue().getList()) {
      if (e.getKey() == srcAppID) {
        bb.setSource(true);
      }
      Selection selection=new Selection(bb.getX(),bb.getY(),bb.getWidth(),bb.getHeight(),new Color4f(-1.0f,0,0,0),bb.isSource());
      selectionList.add(selection);
    }
    selectionGroup.selections=selectionList.toArray(selectionGroup.selections);
    selectionGroup.containerID=e.getKey();
    selectionGroupList.add(selectionGroup);
  }
  SelectionGroup[] groups=new SelectionGroup[selectionGroupList.size()];
  selectionGroupList.toArray(groups);
  SelectionReport report=new SelectionReport();
  report.pointerId=pointerID;
  report.renderType=VisualLinksRenderType.RenderTypeNormal;
  report.selectionGroups=groups;
  rendererPrx.renderAllLinks(report);
}","private void renderWithIce(HashMap<Integer,BoundingBoxList> app2bbs,String pointerID){
  ArrayList<SelectionGroup> selectionGroupList=new ArrayList<SelectionGroup>();
  User user=this.userManager.getUser(pointerID);
  for (  Entry<Integer,BoundingBoxList> e : app2bbs.entrySet()) {
    SelectionGroup selectionGroup=new SelectionGroup();
    selectionGroup.selections=new Selection[e.getValue().getList().size()];
    ArrayList<Selection> selectionList=new ArrayList<Selection>();
    for (    BoundingBox bb : e.getValue().getList()) {
      Selection selection=new Selection(bb.getX(),bb.getY(),bb.getWidth(),bb.getHeight(),new Color4f(-1.0f,0,0,0),bb.isSource());
      selectionList.add(selection);
    }
    selectionGroup.selections=selectionList.toArray(selectionGroup.selections);
    selectionGroup.containerID=e.getKey();
    selectionGroupList.add(selectionGroup);
  }
  SelectionGroup[] groups=new SelectionGroup[selectionGroupList.size()];
  selectionGroupList.toArray(groups);
  SelectionReport report=new SelectionReport();
  report.pointerId=pointerID;
  report.renderType=user.getCurrentRenderType();
  report.selectionGroups=groups;
  rendererPrx.renderAllLinks(report);
}",0.7256499805975941
58383,"public void reportSelection(String appName,String selectionId,String boundingBoxListXML){
  System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ selectionId+ ""String_Node_Str""+ boundingBoxListXML);
  Application app=applicationManager.getApplications().get(appName);
  if (boundingBoxListXML != null && boundingBoxListXML.isEmpty()) {
    boundingBoxListXML=null;
  }
  AccessInformation accessInformation=rendererPrx.getAccessInformation(app.getId());
  int[] targetApplicationIds=accessInformation.applicationIds;
  String pointerID=accessInformation.pointerId;
  this.selectionManager.addSelection(app,selectionId,pointerID);
  UserSelection selection=this.selectionManager.getSelection(app,pointerID);
  if (boundingBoxListXML != null) {
    BoundingBoxList bbl=createBoundingBoxList(boundingBoxListXML);
    selection.setBoundingBoxList(bbl);
  }
  selection.setReported();
  System.out.println(""String_Node_Str"" + pointerID);
  User user=this.userManager.getUser(pointerID);
  user.setNewSelection(selectionId,app);
  for (  int appId : targetApplicationIds) {
    Application currentApp=applicationManager.getApplicationsById().get(appId);
    if (currentApp.getId() != app.getId() || boundingBoxListXML == null) {
      this.selectionManager.addSelection(currentApp,selectionId,pointerID);
    }
  }
  checkRender(pointerID);
}","public void reportSelection(String appName,String selectionId,String boundingBoxListXML){
  System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ selectionId+ ""String_Node_Str""+ boundingBoxListXML);
  Application app=applicationManager.getApplications().get(appName);
  if (boundingBoxListXML != null && boundingBoxListXML.isEmpty()) {
    boundingBoxListXML=null;
  }
  AccessInformation accessInformation=rendererPrx.getAccessInformation(app.getId());
  int[] targetApplicationIds=accessInformation.applicationIds;
  String pointerID=accessInformation.pointerId;
  this.selectionManager.addSelection(app,selectionId,pointerID,true);
  UserSelection selection=this.selectionManager.getSelection(app,pointerID);
  if (boundingBoxListXML != null) {
    BoundingBoxList bbl=createBoundingBoxList(boundingBoxListXML);
    selection.setBoundingBoxList(bbl);
  }
  selection.setReported();
  System.out.println(""String_Node_Str"" + pointerID);
  User user=this.userManager.getUser(pointerID);
  user.setNewSelection(selectionId,app);
  for (  int appId : targetApplicationIds) {
    Application currentApp=applicationManager.getApplicationsById().get(appId);
    if (currentApp.getId() != app.getId() || boundingBoxListXML == null) {
      this.selectionManager.addSelection(currentApp,selectionId,pointerID,false);
    }
  }
  checkRender(pointerID);
}",0.9959424566580598
58384,"public void reportVisualLinks(String appName,String pointerID,String boundingBoxListXML){
  System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ pointerID+ ""String_Node_Str""+ boundingBoxListXML);
  Application app=applicationManager.getApplications().get(appName);
  if (app == null || pointerID == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  UserSelection selection=selectionManager.getSelection(app,pointerID);
  selection.setReported();
  if (selection == null) {
    System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ pointerID+ ""String_Node_Str"");
    return;
  }
  BoundingBoxList bbl=createBoundingBoxList(boundingBoxListXML);
  if (bbl.getList().size() > 0) {
    System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ pointerID);
    this.userManager.getUser(pointerID).addPrevTargetApp(app);
  }
  selection.setBoundingBoxList(bbl);
  checkRender(pointerID);
}","public void reportVisualLinks(String appName,String pointerID,String boundingBoxListXML){
  System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ pointerID+ ""String_Node_Str""+ boundingBoxListXML);
  Application app=applicationManager.getApplications().get(appName);
  if (app == null || pointerID == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  UserSelection selection=selectionManager.getSelection(app,pointerID);
  selection.setReported();
  if (selection == null) {
    System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ pointerID+ ""String_Node_Str"");
    return;
  }
  BoundingBoxList bbl=createBoundingBoxList(boundingBoxListXML);
  if (bbl.getList().size() > 0) {
    System.out.println(""String_Node_Str"" + appName + ""String_Node_Str""+ pointerID);
    this.userManager.getUser(pointerID).addPrevTargetApp(app);
    bbl.list.get(0).setSource(selection.isSource());
  }
  selection.setBoundingBoxList(bbl);
  checkRender(pointerID);
}",0.9725814795654424
58385,"public void reportWindowChange(String appName){
  System.out.println(""String_Node_Str"" + appName);
  Application app=applicationManager.getApplications().get(appName);
  AccessInformation accessInformation=rendererPrx.getAccessInformation(app.getId());
  int[] targetApplicationIds=accessInformation.applicationIds;
  String pointerID=accessInformation.pointerId;
  User user=this.userManager.getUser(pointerID);
  if (user.isActive()) {
    String selectionId=user.getPrevSelectionID();
    System.out.println(""String_Node_Str"" + pointerID + ""String_Node_Str""+ selectionId);
    user.setNewSelection(selectionId,app);
    this.selectionManager.addSelection(app,selectionId,pointerID);
    for (    int appId : targetApplicationIds) {
      Application currentApp=applicationManager.getApplicationsById().get(appId);
      this.selectionManager.addSelection(currentApp,selectionId,pointerID);
    }
    checkRender(pointerID);
  }
  List<User> userList=this.userManager.getAffectedUsers(app);
  System.out.println(userList.size() + ""String_Node_Str"");
  for (  User otherUser : userList) {
    if (user != otherUser) {
      pointerID=otherUser.getPointerID();
      String selectionId=otherUser.getPrevSelectionID();
      System.out.println(""String_Node_Str"" + otherUser.getPointerID() + ""String_Node_Str""+ selectionId);
      List<Application> appList=otherUser.getAllPrevApps();
      for (      Application userApp : appList) {
        this.selectionManager.addSelection(userApp,selectionId,pointerID);
      }
      checkRender(pointerID);
    }
  }
}","public void reportWindowChange(String appName){
  System.out.println(""String_Node_Str"" + appName);
  Application app=applicationManager.getApplications().get(appName);
  AccessInformation accessInformation=rendererPrx.getAccessInformation(app.getId());
  int[] targetApplicationIds=accessInformation.applicationIds;
  String pointerID=accessInformation.pointerId;
  User user=this.userManager.getUser(pointerID);
  if (user.isActive()) {
    String selectionId=user.getPrevSelectionID();
    System.out.println(""String_Node_Str"" + pointerID + ""String_Node_Str""+ selectionId);
    user.setNewSelection(selectionId,app);
    this.selectionManager.addSelection(app,selectionId,pointerID,true);
    for (    int appId : targetApplicationIds) {
      Application currentApp=applicationManager.getApplicationsById().get(appId);
      this.selectionManager.addSelection(currentApp,selectionId,pointerID,false);
    }
    checkRender(pointerID);
  }
  List<User> userList=this.userManager.getAffectedUsers(app);
  System.out.println(userList.size() + ""String_Node_Str"");
  for (  User otherUser : userList) {
    if (user != otherUser) {
      pointerID=otherUser.getPointerID();
      String selectionId=otherUser.getPrevSelectionID();
      System.out.println(""String_Node_Str"" + otherUser.getPointerID() + ""String_Node_Str""+ selectionId);
      List<Application> appList=otherUser.getAllPrevApps();
      for (      Application userApp : appList) {
        boolean isSource=false;
        if (userApp == otherUser.getPrevSrcApp()) {
          isSource=true;
        }
        this.selectionManager.addSelection(userApp,selectionId,pointerID,isSource);
      }
      checkRender(pointerID);
    }
  }
}",0.9572702121118968
58386,"public void releaseOneShot(User user){
  System.out.println(""String_Node_Str"" + user.getPointerID());
  if (user.getCurrentRenderType() != VisualLinksRenderType.RenderTypeOneShot) {
    System.out.println(""String_Node_Str"");
    return;
  }
  user.setCurrentRenderType(VisualLinksRenderType.RenderTypeNormal);
  String selectionID=user.getPrevSelectionID();
  String pointerID=user.getPointerID();
  System.out.println(""String_Node_Str"" + user.getPointerID() + ""String_Node_Str""+ selectionID);
  List<Application> appList=user.getAllPrevApps();
  for (  Application userApp : appList) {
    this.selectionManager.addSelection(userApp,selectionID,pointerID);
  }
  checkRender(pointerID);
}","public void releaseOneShot(User user){
  System.out.println(""String_Node_Str"" + user.getPointerID());
  if (user.getCurrentRenderType() != VisualLinksRenderType.RenderTypeOneShot) {
    System.out.println(""String_Node_Str"");
    return;
  }
  user.setCurrentRenderType(VisualLinksRenderType.RenderTypeNormal);
  String selectionID=user.getPrevSelectionID();
  String pointerID=user.getPointerID();
  System.out.println(""String_Node_Str"" + user.getPointerID() + ""String_Node_Str""+ selectionID);
  List<Application> appList=user.getAllPrevApps();
  for (  Application userApp : appList) {
    boolean isSource=false;
    if (userApp == user.getPrevSrcApp()) {
      isSource=true;
    }
    this.selectionManager.addSelection(userApp,selectionID,pointerID,isSource);
  }
  checkRender(pointerID);
}",0.927946127946128
58387,"@Override public void run(){
  super.run();
  StartClusteringDialog dialog=new StartClusteringDialog(new Shell());
  dialog.open();
  ClusterState clusterState=dialog.getClusterState();
  StartClusteringEvent event=null;
  if (sets == null || sets.size() == 0)   sets.add(GeneralManager.get().getMasterUseCase().getSet());
  for (  ISet tmpSet : sets) {
    event=new StartClusteringEvent(clusterState,tmpSet.getID());
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
}","@Override public void run(){
  super.run();
  StartClusteringDialog dialog=new StartClusteringDialog(new Shell());
  dialog.open();
  ClusterState clusterState=dialog.getClusterState();
  StartClusteringEvent event=null;
  if (sets == null || sets.size() == 0) {
    sets=new ArrayList<ISet>();
    sets.add(GeneralManager.get().getMasterUseCase().getSet());
  }
  for (  ISet tmpSet : sets) {
    event=new StartClusteringEvent(clusterState,tmpSet.getID());
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
}",0.9607843137254902
58388,"/** 
 * Sorts the content of the virtual arrays of this heat map wrapper according to the occurences in the foreign VAs. The parameter specifies whether elements should be hidden or not. If all elements occur in the foreign VA the parameter has no effect but increased performance
 * @param foreignContentVAs
 * @param hideVisible
 */
public void sort(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  for (int groupIndex=groupList.size() - 1; groupIndex >= 0; groupIndex--) {
    Group group=groupList.get(groupIndex);
    if (!considerSelectedGroups || selectedGroups.containsKey(group)) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      int nrGenes=group.getContainedNrGenes();
      ContentVirtualArray contentVA=heatMap.getContentVA();
      if (useSorting) {
        for (        ContentVirtualArray foreignVA : foreignContentVAs) {
          Integer foreignContentLastOrdererIndex=0;
          for (int contentIndex=0; contentIndex < nrGenes; contentIndex++) {
            Integer contentID=contentVA.get(contentIndex);
            int foreignIndex=foreignVA.indexOf(contentID);
            if (foreignIndex != -1) {
              foreignVA.move(foreignIndex,foreignContentLastOrdererIndex++);
            }
          }
        }
        if (hideVisible) {
          SelectionDelta contentSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
          for (int contentIndex=nrGenes; contentIndex < contentVA.size(); contentIndex++) {
            SelectionDeltaItem item=new SelectionDeltaItem();
            item.setPrimaryID(contentVA.get(contentIndex));
            item.setSelectionType(GLHeatMap.SELECTION_HIDDEN);
            contentSelectionDelta.add(item);
          }
          SelectionUpdateEvent event=new SelectionUpdateEvent();
          event.setSender(this);
          event.setSelectionDelta(contentSelectionDelta);
          eventPublisher.triggerEvent(event);
        }
      }
    }
  }
}","/** 
 * Sorts the content of the virtual arrays of this heat map wrapper according to the occurences in the foreign VAs. The parameter specifies whether elements should be hidden or not. If all elements occur in the foreign VA the parameter has no effect but increased performance
 * @param foreignContentVAs
 * @param hideVisible
 */
private void sort(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  for (int groupIndex=groupList.size() - 1; groupIndex >= 0; groupIndex--) {
    Group group=groupList.get(groupIndex);
    if (!considerSelectedGroups || selectedGroups.containsKey(group)) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      int nrGenes=group.getContainedNrGenes();
      ContentVirtualArray contentVA=heatMap.getContentVA();
      if (useSorting) {
        for (        ContentVirtualArray foreignVA : foreignContentVAs) {
          Integer foreignContentLastOrdererIndex=0;
          for (int contentIndex=0; contentIndex < nrGenes; contentIndex++) {
            Integer contentID=contentVA.get(contentIndex);
            int foreignIndex=foreignVA.indexOf(contentID);
            if (foreignIndex != -1) {
              foreignVA.move(foreignIndex,foreignContentLastOrdererIndex++);
            }
          }
        }
        if (hideVisible) {
          SelectionDelta contentSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
          for (int contentIndex=nrGenes; contentIndex < contentVA.size(); contentIndex++) {
            SelectionDeltaItem item=new SelectionDeltaItem();
            item.setPrimaryID(contentVA.get(contentIndex));
            item.setSelectionType(GLHeatMap.SELECTION_HIDDEN);
            contentSelectionDelta.add(item);
          }
          SelectionUpdateEvent event=new SelectionUpdateEvent();
          event.setSender(this);
          event.setSelectionDelta(contentSelectionDelta);
          eventPublisher.triggerEvent(event);
        }
      }
    }
  }
}",0.9973229496227792
58389,"/** 
 * <p> This method chooses which groups (and therefore heat maps) are to be rendered at the passive side. It does so based on a virtualArray containing all elements to be rendered. </p> <p> This is called in the passive heat map. </p> <p> It also re-sorts the passive group's virtual arrays to minimize crossings and sets elements that are in a passive group but not in the supplied virtual array to   {@link GLHeatMap#SELECTION_HIDDEN} so that they can behidden on demand.
 */
public void choosePassiveHeatMaps(ArrayList<ContentVirtualArray> foreignContentVAs){
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  selectedGroups.clear();
  for (  ContentVirtualArray foreignVa : foreignContentVAs) {
    for (    Integer contentID : foreignVa) {
      int vaIndex=contentVA.indexOf(contentID);
      Group selectedGroup=groupList.getGroupOfVAIndex(vaIndex);
      if (!selectedGroups.containsKey(selectedGroup)) {
        selectedGroups.put(selectedGroup,null);
        selectedGroup.resetVisualGenesCounter();
      }
      GLHeatMap heatMap=hashHeatMaps.get(selectedGroup.getGroupIndex());
      ContentVirtualArray heatMapVA=heatMap.getContentVA();
      int index=heatMapVA.indexOf(contentID);
      if (useSorting && index >= 0)       heatMapVA.move(index,selectedGroup.getContainedNrGenes());
 else       System.out.println(""String_Node_Str"");
      selectedGroup.increaseContainedNumberOfGenesByOne();
    }
  }
  sort(foreignContentVAs,true,true);
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMap.recalculateLayout();
  }
}","/** 
 * <p> This method chooses which groups (and therefore heat maps) are to be rendered at the passive side. It does so based on a virtualArray containing all elements to be rendered. </p> <p> This is called in the passive heat map. </p> <p> It also re-sorts the passive group's virtual arrays to minimize crossings and sets elements that are in a passive group but not in the supplied virtual array to   {@link GLHeatMap#SELECTION_HIDDEN} so that they can behidden on demand.
 */
public void choosePassiveHeatMaps(ArrayList<ContentVirtualArray> foreignContentVAs,boolean hideVisible,boolean considerSelectedGroups){
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  selectedGroups.clear();
  for (  ContentVirtualArray foreignVa : foreignContentVAs) {
    for (    Integer contentID : foreignVa) {
      int vaIndex=contentVA.indexOf(contentID);
      Group selectedGroup=groupList.getGroupOfVAIndex(vaIndex);
      if (!selectedGroups.containsKey(selectedGroup)) {
        selectedGroups.put(selectedGroup,null);
        selectedGroup.resetVisualGenesCounter();
      }
      GLHeatMap heatMap=hashHeatMaps.get(selectedGroup.getGroupIndex());
      ContentVirtualArray heatMapVA=heatMap.getContentVA();
      int index=heatMapVA.indexOf(contentID);
      if (useSorting && index >= 0)       heatMapVA.move(index,selectedGroup.getContainedNrGenes());
 else       System.out.println(""String_Node_Str"");
      selectedGroup.increaseContainedNumberOfGenesByOne();
    }
  }
  sort(foreignContentVAs,considerSelectedGroups,hideVisible);
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMap.recalculateLayout();
  }
}",0.973325429756965
58390,"@Override public Vec3f getDetailHeatMapPosition(int heatMapID){
  return hashHeatMapPositions.get(heatMapID);
}","@Override public Vec3f getDetailHeatMapPosition(int heatMapID){
  if (hashHeatMapPositions == null)   return new Vec3f(0,0,0);
  return hashHeatMapPositions.get(heatMapID);
}",0.7789473684210526
58391,"@Override public float getDetailHeatMapHeight(int heatMapID){
  return hashHeatMapHeights.get(heatMapID);
}","@Override public float getDetailHeatMapHeight(int heatMapID){
  if (hashHeatMapHeights == null)   return 0;
  return hashHeatMapHeights.get(heatMapID);
}",0.823076923076923
58392,"public void renderOverviewBundling(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  ArrayList<Vec3f> points=new ArrayList<Vec3f>();
  ContentVirtualArray overview=leftHeatMapWrapper.getContentVA().clone();
  ContentVirtualArray overviewRight=rightHeatMapWrapper.getContentVA().clone();
  float overviewDistance=rightHeatMapWrapper.getLeftOverviewLinkPositionFromIndex(0).x() - leftHeatMapWrapper.getLeftOverviewLinkPositionFromIndex(0).x();
  float firstLevelOffset=overviewDistance / 5;
  float sampleHeight=leftHeatMapWrapper.getLayout().getOverviewHeatMapSampleHeight();
  float sampleHeightIncludingSpacing=sampleHeight * 0.8f;
  float groupPadding=0;
  float bundlingCorrectionOffsetX=overviewDistance / 18f;
  float top=leftHeatMapWrapper.getLayout().getOverviewHeatMapPosition().y() + leftHeatMapWrapper.getLayout().getOverviewHeight();
  rightHeatMapWrapper.sort(leftHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false);
  leftHeatMapWrapper.sort(rightHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false);
  for (  ContentVirtualArray groupVA : leftHeatMapWrapper.getContentVAsOfHeatMaps(false)) {
    float groupTopY=0;
    for (    Integer overviewContentID : overview) {
      if (groupVA.containsElement(overviewContentID) == 0)       continue;
      groupPadding=groupVA.size() * sampleHeight * 0.1f;
      groupTopY=overview.indexOf(overviewContentID) * sampleHeight + groupPadding;
      break;
    }
    float overviewX=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(groupVA.get(0)).x();
    for (    Integer contentID : groupVA) {
      points.clear();
      float overviewY=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID).y();
      float sortedY=top - groupTopY - groupVA.indexOf(contentID) * sampleHeightIncludingSpacing;
      setRelationColor(gl,leftHeatMapWrapper,contentID);
      points.add(new Vec3f(overviewX,overviewY,0));
      points.add(new Vec3f(overviewX + bundlingCorrectionOffsetX,overviewY,0));
      points.add(new Vec3f(overviewX + firstLevelOffset - bundlingCorrectionOffsetX,sortedY,0));
      points.add(new Vec3f(overviewX + firstLevelOffset,sortedY,0));
      ArrayList<ContentVirtualArray> rightContentVAs=rightHeatMapWrapper.getContentVAsOfHeatMaps(false);
      float overviewRightX=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID).x();
      for (int rightClusterIndex=0; rightClusterIndex < rightContentVAs.size(); rightClusterIndex++) {
        ContentVirtualArray rightGroupVA=rightContentVAs.get(rightClusterIndex);
        if (rightGroupVA.containsElement(contentID) == 0)         continue;
        float rightGroupTopY=0;
        for (        Integer overviewRightContentID : overviewRight) {
          if (rightGroupVA.containsElement(overviewRightContentID) == 0)           continue;
          groupPadding=rightGroupVA.size() * sampleHeight * 0.1f;
          rightGroupTopY=overviewRight.indexOf(overviewRightContentID) * sampleHeight + groupPadding;
          break;
        }
        float overviewRightY=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID).y();
        float sortedRightY=top - rightGroupTopY - rightGroupVA.indexOf(contentID) * sampleHeightIncludingSpacing;
        points.add(new Vec3f(overviewRightX - firstLevelOffset,sortedRightY,0));
        points.add(new Vec3f(overviewRightX - firstLevelOffset + bundlingCorrectionOffsetX,sortedRightY,0));
        points.add(new Vec3f(overviewRightX - bundlingCorrectionOffsetX,overviewRightY,0));
        points.add(new Vec3f(overviewRightX,overviewRightY,0));
      }
      renderSingleCurve(gl,points,contentID);
    }
  }
}","public void renderOverviewBundling(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  ArrayList<Vec3f> points=new ArrayList<Vec3f>();
  ContentVirtualArray overview=leftHeatMapWrapper.getContentVA().clone();
  ContentVirtualArray overviewRight=rightHeatMapWrapper.getContentVA().clone();
  float overviewDistance=rightHeatMapWrapper.getLeftOverviewLinkPositionFromIndex(0).x() - leftHeatMapWrapper.getLeftOverviewLinkPositionFromIndex(0).x();
  float firstLevelOffset=overviewDistance / 5;
  float sampleHeight=leftHeatMapWrapper.getLayout().getOverviewHeatMapSampleHeight();
  float sampleHeightIncludingSpacing=sampleHeight * 0.8f;
  float groupPadding=0;
  float bundlingCorrectionOffsetX=overviewDistance / 18f;
  float top=leftHeatMapWrapper.getLayout().getOverviewHeatMapPosition().y() + leftHeatMapWrapper.getLayout().getOverviewHeight();
  rightHeatMapWrapper.choosePassiveHeatMaps(leftHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false);
  leftHeatMapWrapper.choosePassiveHeatMaps(rightHeatMapWrapper.getContentVAsOfHeatMaps(false),false,false);
  for (  ContentVirtualArray groupVA : leftHeatMapWrapper.getContentVAsOfHeatMaps(false)) {
    float groupTopY=0;
    for (    Integer overviewContentID : overview) {
      if (groupVA.containsElement(overviewContentID) == 0)       continue;
      groupPadding=groupVA.size() * sampleHeight * 0.1f;
      groupTopY=overview.indexOf(overviewContentID) * sampleHeight + groupPadding;
      break;
    }
    float overviewX=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(groupVA.get(0)).x();
    for (    Integer contentID : groupVA) {
      points.clear();
      float overviewY=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID).y();
      float sortedY=top - groupTopY - groupVA.indexOf(contentID) * sampleHeightIncludingSpacing;
      setRelationColor(gl,leftHeatMapWrapper,contentID);
      points.add(new Vec3f(overviewX,overviewY,0));
      points.add(new Vec3f(overviewX + bundlingCorrectionOffsetX,overviewY,0));
      points.add(new Vec3f(overviewX + firstLevelOffset - bundlingCorrectionOffsetX,sortedY,0));
      points.add(new Vec3f(overviewX + firstLevelOffset,sortedY,0));
      ArrayList<ContentVirtualArray> rightContentVAs=rightHeatMapWrapper.getContentVAsOfHeatMaps(false);
      float overviewRightX=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID).x();
      for (int rightClusterIndex=0; rightClusterIndex < rightContentVAs.size(); rightClusterIndex++) {
        ContentVirtualArray rightGroupVA=rightContentVAs.get(rightClusterIndex);
        if (rightGroupVA.containsElement(contentID) == 0)         continue;
        float rightGroupTopY=0;
        for (        Integer overviewRightContentID : overviewRight) {
          if (rightGroupVA.containsElement(overviewRightContentID) == 0)           continue;
          groupPadding=rightGroupVA.size() * sampleHeight * 0.1f;
          rightGroupTopY=overviewRight.indexOf(overviewRightContentID) * sampleHeight + groupPadding;
          break;
        }
        float overviewRightY=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID).y();
        float sortedRightY=top - rightGroupTopY - rightGroupVA.indexOf(contentID) * sampleHeightIncludingSpacing;
        points.add(new Vec3f(overviewRightX - firstLevelOffset,sortedRightY,0));
        points.add(new Vec3f(overviewRightX - firstLevelOffset + bundlingCorrectionOffsetX,sortedRightY,0));
        points.add(new Vec3f(overviewRightX - bundlingCorrectionOffsetX,overviewRightY,0));
        points.add(new Vec3f(overviewRightX,overviewRightY,0));
      }
      renderSingleCurve(gl,points,contentID);
    }
  }
}",0.9932157394843962
58393,"@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(heatMapWrapper.getContentVAsOfHeatMaps(true));
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
}","@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(heatMapWrapper.getContentVAsOfHeatMaps(true),true,true);
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
}",0.9930747922437672
58394,"public ArrayList<GLHeatMap> getHeatMaps(){
  ArrayList<GLHeatMap> heatMaps=new ArrayList<GLHeatMap>();
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMaps.add(heatMap);
  }
  return heatMaps;
}","public Collection<GLHeatMap> getHeatMaps(boolean considerSelections){
  if (considerSelections) {
    ArrayList<GLHeatMap> heatMaps=new ArrayList<GLHeatMap>();
    for (    Group group : selectedGroups.keySet()) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      heatMaps.add(heatMap);
    }
    return heatMaps;
  }
  return hashHeatMaps.values();
}",0.5414710485133021
58395,"protected void renderDetailBandRelations(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  detailBands=new ArrayList<DetailBand>();
  calculateDetailBands(leftHeatMapWrapper,rightHeatMapWrapper);
  for (  DetailBand detailBand : detailBands) {
    ArrayList<Integer> contentIDs=detailBand.getContentIDs();
    if (contentIDs.size() < 2)     continue;
    renderSingleDetailBand(gl,detailBand,false);
  }
  for (  DetailBand detailBand : detailBands) {
    ArrayList<Integer> contentIDs=detailBand.getContentIDs();
    if (contentIDs.size() == 1) {
      int contentID=contentIDs.get(0);
      Vec3f leftTopPos=contentIDToLeftDetailPoints.get(contentID);
      Vec3f rightTopPos=contentIDToRightDetailPoints.get(contentID);
      if (leftTopPos == null || rightTopPos == null)       return;
      float bundlingOffsetX=0.1f;
      rightTopPos.setX(rightTopPos.x() + bundlingOffsetX);
      leftTopPos.setX(leftTopPos.x() - bundlingOffsetX);
      renderSingleDetailRelation(gl,contentIDs.get(0),leftTopPos,rightTopPos);
    }
  }
}","protected void renderDetailBandRelations(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  detailBands=new ArrayList<DetailBand>();
  calculateDetailBands(leftHeatMapWrapper,rightHeatMapWrapper,true);
  for (  DetailBand detailBand : detailBands) {
    ArrayList<Integer> contentIDs=detailBand.getContentIDs();
    if (contentIDs.size() < 2)     continue;
    renderSingleDetailBand(gl,detailBand,false);
  }
  for (  DetailBand detailBand : detailBands) {
    ArrayList<Integer> contentIDs=detailBand.getContentIDs();
    if (contentIDs.size() == 1) {
      int contentID=contentIDs.get(0);
      Vec3f leftTopPos=contentIDToLeftDetailPoints.get(contentID);
      Vec3f rightTopPos=contentIDToRightDetailPoints.get(contentID);
      if (leftTopPos == null || rightTopPos == null)       return;
      float bundlingOffsetX=0.1f;
      rightTopPos.setX(rightTopPos.x() + bundlingOffsetX);
      leftTopPos.setX(leftTopPos.x() - bundlingOffsetX);
      renderSingleDetailRelation(gl,contentIDs.get(0),leftTopPos,rightTopPos);
    }
  }
}",0.9976448422044276
58396,"public ACompareViewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  this.view=view;
  this.viewID=viewID;
  this.textRenderer=textRenderer;
  this.textureManager=textureManager;
  this.pickingManager=pickingManager;
  this.glMouseListener=glMouseListener;
  this.setBar=setBar;
  this.renderCommandFactory=renderCommandFactory;
  this.dataDomain=dataDomain;
  this.useCase=useCase;
  this.dragAndDropController=dragAndDropController;
  this.compareViewStateController=compareViewStateController;
  heatMapWrappers=new ArrayList<HeatMapWrapper>();
  layouts=new ArrayList<AHeatMapLayout>();
  setsInFocus=new ArrayList<ISet>();
  setsChanged=false;
  eventPublisher=GeneralManager.get().getEventPublisher();
  compareConnectionRenderer=new CompareConnectionBandRenderer();
  contentIDToLeftDetailPoints=new HashMap<Integer,Vec3f>();
  contentIDToRightDetailPoints=new HashMap<Integer,Vec3f>();
}","public ACompareViewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  this.view=view;
  this.viewID=viewID;
  this.textRenderer=textRenderer;
  this.textureManager=textureManager;
  this.pickingManager=pickingManager;
  this.glMouseListener=glMouseListener;
  this.setBar=setBar;
  this.renderCommandFactory=renderCommandFactory;
  this.dataDomain=dataDomain;
  this.useCase=useCase;
  this.dragAndDropController=dragAndDropController;
  this.compareViewStateController=compareViewStateController;
  heatMapWrappers=new ArrayList<HeatMapWrapper>();
  layouts=new ArrayList<AHeatMapLayout>();
  setsInFocus=new ArrayList<ISet>();
  setsChanged=false;
  eventPublisher=GeneralManager.get().getEventPublisher();
  compareConnectionRenderer=new CompareConnectionBandRenderer();
  contentIDToLeftDetailPoints=new HashMap<Integer,Vec3f>();
  contentIDToRightDetailPoints=new HashMap<Integer,Vec3f>();
  SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(activeHeatMapSelectionType);
  eventPublisher.triggerEvent(selectionTypeEvent);
}",0.9434559114274416
58397,"protected void calculateDetailBands(HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  ArrayList<Integer> bandContentIDs=null;
  DetailBand detailBand=null;
  for (  GLHeatMap leftHeatMap : leftHeatMapWrapper.getHeatMaps()) {
    ContentVirtualArray leftContentVA=leftHeatMap.getContentVA();
    for (    GLHeatMap rightHeatMap : rightHeatMapWrapper.getHeatMaps()) {
      ContentVirtualArray rightContentVA=rightHeatMap.getContentVA();
      bandContentIDs=new ArrayList<Integer>();
      detailBand=new DetailBand();
      detailBand.setContentIDs(bandContentIDs);
      detailBand.setLeftHeatMap(leftHeatMap);
      detailBand.setRightHeatMap(rightHeatMap);
      detailBands.add(detailBand);
      for (int leftContentIndex=0; leftContentIndex < leftContentVA.size() - 1; leftContentIndex++) {
        int contentID=leftContentVA.get(leftContentIndex);
        int nextContentID=leftContentVA.get(leftContentIndex + 1);
        if (rightContentVA.containsElement(contentID) == 0)         continue;
        if ((rightContentVA.indexOf(contentID)) == (rightContentVA.indexOf(nextContentID) - 1)) {
          bandContentIDs.add(contentID);
          bandContentIDs.add(nextContentID);
        }
 else         bandContentIDs.add(contentID);
      }
    }
  }
  for (  Integer contentID : leftHeatMapWrapper.getContentVA()) {
    boolean isInBand=false;
    ArrayList<DetailBand> newBands=new ArrayList<DetailBand>();
    for (    DetailBand band : detailBands) {
      if (band.getContentIDs().contains(contentID)) {
        isInBand=true;
        continue;
      }
    }
    if (!isInBand) {
      bandContentIDs=new ArrayList<Integer>();
      bandContentIDs.add(contentID);
      detailBand=new DetailBand();
      detailBand.setContentIDs(bandContentIDs);
      detailBand.setLeftHeatMap(leftHeatMapWrapper.getHeatMapByContentID(contentID));
      detailBand.setRightHeatMap(rightHeatMapWrapper.getHeatMapByContentID(contentID));
      newBands.add(detailBand);
    }
    detailBands.addAll(newBands);
  }
}","protected void calculateDetailBands(HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper,boolean considerSelections){
  ArrayList<Integer> bandContentIDs=null;
  DetailBand detailBand=null;
  for (  GLHeatMap leftHeatMap : leftHeatMapWrapper.getHeatMaps(considerSelections)) {
    ContentVirtualArray leftContentVA=leftHeatMap.getContentVA();
    for (    GLHeatMap rightHeatMap : rightHeatMapWrapper.getHeatMaps(considerSelections)) {
      ContentVirtualArray rightContentVA=rightHeatMap.getContentVA();
      bandContentIDs=new ArrayList<Integer>();
      detailBand=new DetailBand();
      detailBand.setContentIDs(bandContentIDs);
      detailBand.setLeftHeatMap(leftHeatMap);
      detailBand.setRightHeatMap(rightHeatMap);
      detailBands.add(detailBand);
      for (int leftContentIndex=0; leftContentIndex < leftContentVA.size() - 1; leftContentIndex++) {
        int contentID=leftContentVA.get(leftContentIndex);
        int nextContentID=leftContentVA.get(leftContentIndex + 1);
        if (rightContentVA.containsElement(contentID) == 0)         continue;
        if ((rightContentVA.indexOf(contentID)) == (rightContentVA.indexOf(nextContentID) - 1)) {
          bandContentIDs.add(contentID);
          bandContentIDs.add(nextContentID);
        }
 else         bandContentIDs.add(contentID);
      }
    }
  }
  for (  Integer contentID : leftHeatMapWrapper.getContentVA()) {
    boolean isInBand=false;
    ArrayList<DetailBand> newBands=new ArrayList<DetailBand>();
    for (    DetailBand band : detailBands) {
      if (band.getContentIDs().contains(contentID)) {
        isInBand=true;
        continue;
      }
    }
    if (!isInBand) {
      bandContentIDs=new ArrayList<Integer>();
      bandContentIDs.add(contentID);
      detailBand=new DetailBand();
      detailBand.setContentIDs(bandContentIDs);
      detailBand.setLeftHeatMap(leftHeatMapWrapper.getHeatMapByContentID(contentID));
      detailBand.setRightHeatMap(rightHeatMapWrapper.getHeatMapByContentID(contentID));
      newBands.add(detailBand);
    }
    detailBands.addAll(newBands);
  }
}",0.9847420682974086
58398,"protected float setRelationColor(GL gl,HeatMapWrapper heatMapWrapper,int contentID){
  SelectionType type=heatMapWrapper.getContentSelectionManager().getSelectionTypes(contentID).get(0);
  float z=type.getPriority();
  float[] typeColor=type.getColor();
  float alpha=0;
  if (type == SelectionType.MOUSE_OVER) {
    gl.glLineWidth(2);
    alpha=1f;
    z=0.6f;
  }
 else   if (type == SelectionType.SELECTION) {
    gl.glLineWidth(2);
    alpha=1f;
    z=0.6f;
  }
 else {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.4f;
  }
  typeColor[3]=alpha;
  gl.glColor4fv(typeColor,0);
  return z;
}","protected float setRelationColor(GL gl,HeatMapWrapper heatMapWrapper,int contentID){
  SelectionType type=heatMapWrapper.getContentSelectionManager().getSelectionTypes(contentID).get(0);
  float z=type.getPriority();
  float[] typeColor=type.getColor();
  float alpha=0;
  if (type == activeHeatMapSelectionType) {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.4f;
  }
 else   if (type == SelectionType.MOUSE_OVER) {
    gl.glLineWidth(2);
    alpha=1f;
    z=0.6f;
  }
 else   if (type == SelectionType.SELECTION) {
    gl.glLineWidth(2);
    alpha=1f;
    z=0.6f;
  }
 else {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.4f;
  }
  typeColor[3]=alpha;
  gl.glColor4fv(typeColor,0);
  return z;
}",0.9187935034802784
58399,"@Override public void init(GL gl){
  isInitialized=true;
  ACompareViewState overviewState=compareViewStateController.getState(ECompareViewStateType.OVERVIEW);
  ACompareViewState detailViewState=compareViewStateController.getState(ECompareViewStateType.DETAIL_VIEW);
  setBar.setViewState(overviewState);
  setBar.adjustSelectionWindowSizeCentered(overviewState.getNumSetsInFocus());
  setBar.setMaxSelectedItems(overviewState.getMaxSetsInFocus());
  setBar.setMinSelectedItems(overviewState.getMinSetsInFocus());
  if (!overviewState.isInitialized()) {
    overviewState.init(gl);
  }
  overviewState.setSetsInFocus(setBar.getSetsInFocus());
  heatMapWrappers=overviewState.getHeatMapWrappers();
  ArrayList<HeatMapWrapper> sourceHeatMapWrappers=detailViewState.getHeatMapWrappers();
  int indexOffset=0;
  for (int i=0; i < heatMapWrappers.size(); i++) {
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    if (heatMapWrapper.getSet().getID() == sourceHeatMapWrappers.get(0).getSet().getID()) {
      indexOffset=i;
      break;
    }
  }
  layouts.clear();
  captionPositions.clear();
  captionTextDimensions.clear();
  captionTextSpacing.clear();
  heatMapDimensions.clear();
  heatMapPositions.clear();
  ArrayList<AHeatMapLayout> sourceLayouts=detailViewState.getLayouts();
  destinationLayouts=overviewState.getLayouts();
  ArrayList<AHeatMapLayout> focusLayouts=new ArrayList<AHeatMapLayout>();
  for (int i=0; i < sourceLayouts.size(); i++) {
    AHeatMapLayout srcLayout=sourceLayouts.get(i);
    AHeatMapLayout destLayout=destinationLayouts.get(indexOffset + i);
    HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
    transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
    transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
    focusLayouts.add(transitionLayout);
    createMovementValues(gl,indexOffset + i,srcLayout,destLayout);
    if (i == 0) {
      createOffsets(true,indexOffset + i);
    }
 else     if (i == sourceLayouts.size() - 1) {
      createOffsets(false,indexOffset + i);
    }
    srcLayout.useDendrogram(false);
  }
  for (int i=0; i < destinationLayouts.size(); i++) {
    AHeatMapLayout destLayout=destinationLayouts.get(i);
    if (i < indexOffset) {
      createMovementValuesSourceOffset(gl,i,destLayout,true);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      layouts.add(transitionLayout);
    }
 else     if (i > indexOffset + sourceLayouts.size() - 1) {
      createMovementValuesSourceOffset(gl,i,destLayout,false);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      layouts.add(transitionLayout);
    }
 else {
      layouts.add(focusLayouts.get(i - indexOffset));
    }
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    heatMapWrapper.setLayout(layouts.get(i));
    layouts.get(i).setHeatMapWrapper(heatMapWrapper);
    setsInFocus.add(heatMapWrapper.getSet());
  }
  view.setDisplayListDirty();
}","@Override public void init(GL gl){
  isInitialized=true;
  ACompareViewState overviewState=compareViewStateController.getState(ECompareViewStateType.OVERVIEW);
  ACompareViewState detailViewState=compareViewStateController.getState(ECompareViewStateType.DETAIL_VIEW);
  setBar.setViewState(overviewState);
  setBar.adjustSelectionWindowSizeCentered(overviewState.getNumSetsInFocus());
  setBar.setMaxSelectedItems(overviewState.getMaxSetsInFocus());
  setBar.setMinSelectedItems(overviewState.getMinSetsInFocus());
  if (!overviewState.isInitialized()) {
    overviewState.init(gl);
  }
  overviewState.setSetsInFocus(setBar.getSetsInFocus());
  heatMapWrappers=overviewState.getHeatMapWrappers();
  ArrayList<HeatMapWrapper> sourceHeatMapWrappers=detailViewState.getHeatMapWrappers();
  int indexOffset=0;
  for (int i=0; i < heatMapWrappers.size(); i++) {
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    if (heatMapWrapper.getSet().getID() == sourceHeatMapWrappers.get(0).getSet().getID()) {
      indexOffset=i;
      break;
    }
  }
  layouts.clear();
  captionPositions.clear();
  captionTextDimensions.clear();
  captionTextSpacing.clear();
  heatMapDimensions.clear();
  heatMapPositions.clear();
  ArrayList<AHeatMapLayout> sourceLayouts=detailViewState.getLayouts();
  destinationLayouts=overviewState.getLayouts();
  ArrayList<AHeatMapLayout> focusLayouts=new ArrayList<AHeatMapLayout>();
  for (int i=0; i < sourceLayouts.size(); i++) {
    AHeatMapLayout srcLayout=sourceLayouts.get(i);
    AHeatMapLayout destLayout=destinationLayouts.get(indexOffset + i);
    HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
    transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
    transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
    transitionLayout.setGroupPickingType(destLayout.getGroupPickingType());
    focusLayouts.add(transitionLayout);
    createMovementValues(gl,indexOffset + i,srcLayout,destLayout);
    if (i == 0) {
      createOffsets(true,indexOffset + i);
    }
 else     if (i == sourceLayouts.size() - 1) {
      createOffsets(false,indexOffset + i);
    }
    srcLayout.useDendrogram(false);
  }
  for (int i=0; i < destinationLayouts.size(); i++) {
    AHeatMapLayout destLayout=destinationLayouts.get(i);
    if (i < indexOffset) {
      createMovementValuesSourceOffset(gl,i,destLayout,true);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      transitionLayout.setGroupPickingType(destLayout.getGroupPickingType());
      layouts.add(transitionLayout);
    }
 else     if (i > indexOffset + sourceLayouts.size() - 1) {
      createMovementValuesSourceOffset(gl,i,destLayout,false);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      transitionLayout.setGroupPickingType(destLayout.getGroupPickingType());
      layouts.add(transitionLayout);
    }
 else {
      layouts.add(focusLayouts.get(i - indexOffset));
    }
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    heatMapWrapper.setLayout(layouts.get(i));
    layouts.get(i).setHeatMapWrapper(heatMapWrapper);
    setsInFocus.add(heatMapWrapper.getSet());
  }
  view.setDisplayListDirty();
}",0.9675977653631284
58400,"private void renderDetailRelations(GL gl){
  if (setsInFocus == null || setsInFocus.size() == 0)   return;
  detailBands=new ArrayList<DetailBand>();
  calculateDetailBands(heatMapWrappers.get(0),heatMapWrappers.get(1));
  determineActiveBand();
  for (  DetailBand detailBand : detailBands) {
    ArrayList<Integer> contentIDs=detailBand.getContentIDs();
    if (contentIDs.size() < 2 || detailBand == activeBand)     continue;
    renderSingleDetailBand(gl,detailBand,false);
  }
  if (activeBand != null)   renderSingleDetailBand(gl,activeBand,true);
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  for (  ContentVirtualArray contentVA : leftHeatMapWrapper.getContentVAsOfHeatMaps(true)) {
    for (    Integer contentID : contentVA) {
      if (activeBand != null && activeBand.getContentIDs().contains(contentID))       renderSingleDetailRelation(gl,contentID);
    }
  }
  for (  DetailBand detailBand : detailBands) {
    if (detailBand.getContentIDs().size() == 1) {
      renderSingleDetailRelation(gl,detailBand.getContentIDs().get(0));
      continue;
    }
  }
}","private void renderDetailRelations(GL gl){
  if (setsInFocus == null || setsInFocus.size() == 0)   return;
  detailBands=new ArrayList<DetailBand>();
  calculateDetailBands(heatMapWrappers.get(0),heatMapWrappers.get(1),true);
  determineActiveBand();
  for (  DetailBand detailBand : detailBands) {
    ArrayList<Integer> contentIDs=detailBand.getContentIDs();
    if (contentIDs.size() < 2 || detailBand == activeBand)     continue;
    renderSingleDetailBand(gl,detailBand,false);
  }
  if (activeBand != null)   renderSingleDetailBand(gl,activeBand,true);
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  for (  ContentVirtualArray contentVA : leftHeatMapWrapper.getContentVAsOfHeatMaps(true)) {
    for (    Integer contentID : contentVA) {
      if (activeBand != null && activeBand.getContentIDs().contains(contentID))       renderSingleDetailRelation(gl,contentID);
    }
  }
  for (  DetailBand detailBand : detailBands) {
    if (detailBand.getContentIDs().size() == 1) {
      renderSingleDetailRelation(gl,detailBand.getContentIDs().get(0));
      continue;
    }
  }
}",0.9977074736359468
58401,"private void renderOverviewToDetailRelations(GL gl,HeatMapWrapper heatMapWrapper){
  for (  GLHeatMap heatMap : heatMapWrapper.getHeatMaps()) {
    boolean highlight=false;
    ContentSelectionManager contentSelectionManager=heatMapWrapper.getContentSelectionManager();
    for (    Integer contentID : heatMap.getContentVA()) {
      SelectionType type=contentSelectionManager.getSelectionTypes(contentID).get(0);
      if (type == SelectionType.MOUSE_OVER) {
        highlight=true;
        break;
      }
    }
    renderOverviewToDetailBand(gl,heatMap,heatMapWrapper,highlight);
    if (highlight)     renderSingleOverviewToDetailRelation(gl,heatMap,heatMapWrapper);
  }
}","private void renderOverviewToDetailRelations(GL gl,HeatMapWrapper heatMapWrapper){
  for (  GLHeatMap heatMap : heatMapWrapper.getHeatMaps(true)) {
    boolean highlight=false;
    ContentSelectionManager contentSelectionManager=heatMapWrapper.getContentSelectionManager();
    for (    Integer contentID : heatMap.getContentVA()) {
      SelectionType type=contentSelectionManager.getSelectionTypes(contentID).get(0);
      if (type == SelectionType.MOUSE_OVER) {
        highlight=true;
        break;
      }
    }
    renderOverviewToDetailBand(gl,heatMap,heatMapWrapper,highlight);
    if (highlight)     renderSingleOverviewToDetailRelation(gl,heatMap,heatMapWrapper);
  }
}",0.9970501474926252
58402,"@Override public void init(GL gl){
  activeHeatMapSelectionType=new SelectionType(""String_Node_Str"",new float[]{0.0f,0.0f,0.0f,1.0f},true,false,1f);
  SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(activeHeatMapSelectionType);
  eventPublisher.triggerEvent(selectionTypeEvent);
  compareConnectionRenderer.init(gl);
  setsChanged=false;
}","@Override public void init(GL gl){
  compareConnectionRenderer.init(gl);
  setsChanged=false;
}",0.4250559284116331
58403,"@Override public void setSetsInFocus(ArrayList<ISet> setsInFocus){
  if (setsInFocus.size() >= getMinSetsInFocus() && setsInFocus.size() <= getMaxSetsInFocus()) {
    this.setsInFocus=setsInFocus;
    if (layouts.isEmpty() || setsInFocus.size() != layouts.size()) {
      layouts.clear();
      heatMapWrappers.clear();
      int heatMapWrapperID=0;
      for (      ISet set : setsInFocus) {
        AHeatMapLayout layout=null;
        if (heatMapWrapperID == 0) {
          layout=new HeatMapLayoutOverviewLeft(renderCommandFactory);
        }
 else         if (heatMapWrapperID == setsInFocus.size() - 1) {
          layout=new HeatMapLayoutOverviewRight(renderCommandFactory);
        }
 else {
          layout=new HeatMapLayoutOverviewMid(renderCommandFactory);
        }
        layouts.add(layout);
        HeatMapWrapper heatMapWrapper=new HeatMapWrapper(heatMapWrapperID,layout,view,null,useCase,view,dataDomain);
        heatMapWrappers.add(heatMapWrapper);
        heatMapWrapperID++;
      }
    }
    for (int i=0; i < heatMapWrappers.size(); i++) {
      HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
      heatMapWrapper.setSet(setsInFocus.get(i));
    }
    setsChanged=true;
    numSetsInFocus=setsInFocus.size();
    view.setDisplayListDirty();
  }
}","@Override public void setSetsInFocus(ArrayList<ISet> setsInFocus){
  if (setsInFocus.size() >= getMinSetsInFocus() && setsInFocus.size() <= getMaxSetsInFocus()) {
    this.setsInFocus=setsInFocus;
    if (layouts.isEmpty() || setsInFocus.size() != layouts.size()) {
      layouts.clear();
      heatMapWrappers.clear();
      int heatMapWrapperID=0;
      for (      ISet set : setsInFocus) {
        AHeatMapLayout layout=null;
        if (heatMapWrapperID == 0) {
          layout=new HeatMapLayoutOverviewLeft(renderCommandFactory);
        }
 else         if (heatMapWrapperID == setsInFocus.size() - 1) {
          layout=new HeatMapLayoutOverviewRight(renderCommandFactory);
        }
 else {
          layout=new HeatMapLayoutOverviewMid(renderCommandFactory);
        }
        layouts.add(layout);
        HeatMapWrapper heatMapWrapper=new HeatMapWrapper(heatMapWrapperID,layout,view,null,useCase,view,dataDomain);
        heatMapWrapper.setActiveHeatMapSelectionType(activeHeatMapSelectionType);
        heatMapWrappers.add(heatMapWrapper);
        heatMapWrapperID++;
      }
    }
    for (int i=0; i < heatMapWrappers.size(); i++) {
      HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
      heatMapWrapper.setSet(setsInFocus.get(i));
    }
    setsChanged=true;
    numSetsInFocus=setsInFocus.size();
    view.setDisplayListDirty();
  }
}",0.9688922610015176
58404,"public OverviewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  this.setBar.setPosition(new Vec3f(0.0f,0.0f,0.5f));
  numSetsInFocus=4;
}","public OverviewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  this.setBar.setPosition(new Vec3f(0.0f,0.0f,0.0f));
  numSetsInFocus=4;
}",0.99836867862969
58405,"private void renderDetailBand(GL gl,DetailBand detailBand,boolean highlight){
  ArrayList<Integer> contentIDs=detailBand.getContentIDs();
  int startContentID=contentIDs.get(0);
  int endContentID=contentIDs.get(contentIDs.size() - 1);
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  HeatMapWrapper rightHeatMapWrapper=heatMapWrappers.get(1);
  float leftTopHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  float leftBottomHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(endContentID) / 2f - 0.01f;
  float rightTopHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  float rightBottomHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(endContentID) / 2f - 0.01f;
  Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(startContentID);
  if (leftPos == null)   return;
  Vec2f rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(startContentID);
  if (rightPos == null)   return;
  xOffset=-(rightPos.x() - leftPos.x()) / 1.5f;
  ArrayList<Vec3f> inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() + leftTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() + leftTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() + rightTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() + rightTopHeatMapElementOffset,0));
  NURBSCurve curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> outputPoints=curve.getCurvePoints();
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < outputPoints.size(); i++)   gl.glVertex3f(outputPoints.get(i).x(),outputPoints.get(i).y(),0f);
  gl.glEnd();
  leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(endContentID);
  if (leftPos == null)   return;
  rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(endContentID);
  if (rightPos == null)   return;
  inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() - leftBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() - leftBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() - rightBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() - rightBottomHeatMapElementOffset,0));
  curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> points=curve.getCurvePoints();
  for (int i=points.size() - 1; i >= 0; i--) {
    outputPoints.add(points.get(i));
  }
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < points.size(); i++)   gl.glVertex3f(points.get(i).x(),points.get(i).y(),0f);
  gl.glEnd();
  if (highlight) {
    gl.glColor4f(0.3f,0.3f,0.3f,0.95f);
    for (    Vec3f point : outputPoints) {
      point.setZ(0.3f);
    }
  }
 else   gl.glColor4f(0f,0f,0f,0.4f);
  compareConnectionRenderer.render(gl,outputPoints);
}","private void renderDetailBand(GL gl,DetailBand detailBand,boolean highlight){
  ArrayList<Integer> contentIDs=detailBand.getContentIDs();
  int startContentID=contentIDs.get(0);
  int endContentID=contentIDs.get(contentIDs.size() - 1);
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  HeatMapWrapper rightHeatMapWrapper=heatMapWrappers.get(1);
  float leftTopHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  float leftBottomHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(endContentID) / 2f - 0.01f;
  float rightTopHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  float rightBottomHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(endContentID) / 2f - 0.01f;
  Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(startContentID);
  if (leftPos == null)   return;
  Vec2f rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(startContentID);
  if (rightPos == null)   return;
  xOffset=-(rightPos.x() - leftPos.x()) / 1.5f;
  ArrayList<Vec3f> inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() + leftTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() + leftTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() + rightTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() + rightTopHeatMapElementOffset,0));
  NURBSCurve curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> outputPoints=curve.getCurvePoints();
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < outputPoints.size(); i++)   gl.glVertex3f(outputPoints.get(i).x(),outputPoints.get(i).y(),0f);
  gl.glEnd();
  leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(endContentID);
  if (leftPos == null)   return;
  rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(endContentID);
  if (rightPos == null)   return;
  inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() - leftBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() - leftBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() - rightBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() - rightBottomHeatMapElementOffset,0));
  curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> points=curve.getCurvePoints();
  for (int i=points.size() - 1; i >= 0; i--) {
    outputPoints.add(points.get(i));
  }
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < points.size(); i++)   gl.glVertex3f(points.get(i).x(),points.get(i).y(),0f);
  gl.glEnd();
  if (highlight) {
    gl.glColor4f(0.3f,0.3f,0.3f,0.95f);
    for (    Vec3f point : outputPoints) {
      point.setZ(0.2f);
    }
  }
 else   gl.glColor4f(0f,0f,0f,0.4f);
  compareConnectionRenderer.render(gl,outputPoints);
}",0.9996831432192648
58406,"@Override public int indexOf(int iElement){
  if (isHashIDToIndexDirty)   buildIDMap();
  ArrayList<Integer> results=hashIDToIndex.get(iElement);
  if (results != null)   return results.get(0);
 else   return -1;
}","@Override public int indexOf(int iElement){
  if (isHashIDToIndexDirty)   buildIDMap();
  ArrayList<Integer> results=hashIDToIndex.get(iElement);
  if (results != null) {
    if (results.size() > 1)     System.out.println(""String_Node_Str"");
    return results.get(0);
  }
 else   return -1;
}",0.8441814595660749
58407,"/** 
 * Initializes a virtual array with all elements, according to the data filters, as defined in  {@link EDataFilterLevel}.
 */
@Override protected void initFullVA(){
  String sLevel=GeneralManager.get().getPreferenceStore().getString(PreferenceConstants.DATA_FILTER_LEVEL);
  if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.COMPLETE;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    if (GeneralManager.get().getPathwayManager().size() > 100) {
      dataFilterLevel=EDataFilterLevel.ONLY_CONTEXT;
    }
 else {
      dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
    }
  }
 else   dataFilterLevel=EDataFilterLevel.COMPLETE;
  ArrayList<Integer> alTempList=new ArrayList<Integer>(set.depth());
  for (int iCount=0; iCount < set.depth(); iCount++) {
    if (dataFilterLevel != EDataFilterLevel.COMPLETE && set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
      Integer iDavidID=null;
      Set<Integer> setDavidIDs=GeneralManager.get().getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,iCount);
      if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
        iDavidID=(Integer)setDavidIDs.toArray()[0];
      }
      if (iDavidID == null) {
        continue;
      }
      if (dataFilterLevel == EDataFilterLevel.ONLY_CONTEXT) {
        PathwayVertexGraphItem tmpPathwayVertexGraphItem=GeneralManager.get().getPathwayItemManager().getPathwayVertexGraphItemByDavidId(iDavidID);
        if (tmpPathwayVertexGraphItem == null) {
          continue;
        }
      }
    }
    alTempList.add(iCount);
  }
  set.setContentVA(ContentVAType.CONTENT,new ContentVirtualArray(ContentVAType.CONTENT,alTempList));
}","/** 
 * Initializes a virtual array with all elements, according to the data filters, as defined in  {@link EDataFilterLevel}.
 */
@Override protected void initFullVA(){
  String sLevel=GeneralManager.get().getPreferenceStore().getString(PreferenceConstants.DATA_FILTER_LEVEL);
  if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.COMPLETE;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
  }
 else   if (sLevel.equals(""String_Node_Str"")) {
    if (GeneralManager.get().getPathwayManager().size() > 100) {
      dataFilterLevel=EDataFilterLevel.ONLY_CONTEXT;
    }
 else {
      dataFilterLevel=EDataFilterLevel.ONLY_MAPPING;
    }
  }
 else   dataFilterLevel=EDataFilterLevel.COMPLETE;
  ArrayList<Integer> alTempList=new ArrayList<Integer>(set.depth());
  for (int iCount=0; iCount < set.depth(); iCount++) {
    if (dataFilterLevel != EDataFilterLevel.COMPLETE && set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
      Integer iDavidID=null;
      Set<Integer> setDavidIDs=GeneralManager.get().getIDMappingManager().getIDAsSet(EIDType.EXPRESSION_INDEX,EIDType.DAVID,iCount);
      if ((setDavidIDs != null && !setDavidIDs.isEmpty())) {
        iDavidID=(Integer)setDavidIDs.toArray()[0];
      }
      if (iDavidID == null) {
        continue;
      }
      if (dataFilterLevel == EDataFilterLevel.ONLY_CONTEXT) {
        PathwayVertexGraphItem tmpPathwayVertexGraphItem=GeneralManager.get().getPathwayItemManager().getPathwayVertexGraphItemByDavidId(iDavidID);
        if (tmpPathwayVertexGraphItem == null) {
          continue;
        }
      }
    }
    alTempList.add(iCount);
  }
  ContentVirtualArray contentVA=new ContentVirtualArray(ContentVAType.CONTENT,alTempList);
  set.setContentVA(ContentVAType.CONTENT,contentVA);
}",0.9702529886016124
58408,"protected void calculateDetailHeatMapHeights(){
  hashHeatMapHeights.clear();
  HeatMapWrapper heatMapWrapper=layout.getHeatMapWrapper();
  HashMap<Group,GroupInfo> selectedGroups=heatMapWrapper.getSelectedGroups();
  int totalNumberOfElements=0;
  int numberOfFocusElements=0;
  float requestedFocusSpacing=HeatMapRenderStyle.MIN_SELECTED_FIELD_HEIGHT;
  float totalHeatMapOverheadSize=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    totalNumberOfElements+=numElements;
    totalHeatMapOverheadSize+=heatMap.getRequiredOverheadSpacing();
    if (heatMap.isForceMinSpacing()) {
      numberOfFocusElements+=numElements;
      requestedFocusSpacing=heatMap.getMinSpacing();
    }
  }
  float gapSpace=getDetailHeight() * DETAIL_HEATMAP_SPACING_PORTION_DEFAULT * (selectedGroups.size() - 1);
  detailHeatMapSpacing=getDetailHeight() * DETAIL_HEATMAP_SPACING_PORTION_DEFAULT;
  float availableSpaceForHeatMaps=getDetailHeight() - gapSpace - totalHeatMapOverheadSize;
  float defaultSpacing=availableSpaceForHeatMaps / totalNumberOfElements;
  float hmMinSpacing=HeatMapRenderStyle.MIN_SELECTED_FIELD_HEIGHT * 1.5f;
  float resultingFocusSpacing=0;
  float resultingNormalSpacing=0;
  int minSizeGranted=0;
  int elementsInOverhead=0;
  int selectedElementsInOverhead=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    if (numElements * defaultSpacing < hmMinSpacing) {
      minSizeGranted++;
      elementsInOverhead+=numElements;
      if (heatMap.isForceMinSpacing())       selectedElementsInOverhead+=numElements;
    }
  }
  if (minSizeGranted > 0) {
    availableSpaceForHeatMaps-=hmMinSpacing * minSizeGranted;
    totalNumberOfElements-=elementsInOverhead;
    numberOfFocusElements-=selectedElementsInOverhead;
    defaultSpacing=availableSpaceForHeatMaps / (float)(totalNumberOfElements);
  }
  if (layout.isUseZoom() && numberOfFocusElements > 0) {
    if (defaultSpacing > requestedFocusSpacing) {
      resultingFocusSpacing=defaultSpacing;
      resultingNormalSpacing=defaultSpacing;
    }
 else     if ((availableSpaceForHeatMaps - (numberOfFocusElements * requestedFocusSpacing)) > availableSpaceForHeatMaps / 2) {
      resultingFocusSpacing=requestedFocusSpacing;
      resultingNormalSpacing=(availableSpaceForHeatMaps - resultingFocusSpacing * numberOfFocusElements) / (totalNumberOfElements - numberOfFocusElements);
    }
 else {
      resultingFocusSpacing=(availableSpaceForHeatMaps / 2) / numberOfFocusElements;
      resultingNormalSpacing=(availableSpaceForHeatMaps / 2) / (totalNumberOfElements - numberOfFocusElements);
    }
  }
 else {
    resultingNormalSpacing=defaultSpacing;
    resultingFocusSpacing=defaultSpacing;
  }
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    float currentHeatMapOverheadSize=heatMap.getRequiredOverheadSpacing();
    float size=0;
    if (layout.isUseZoom() && heatMap.isForceMinSpacing()) {
      size=(resultingFocusSpacing * numElements) + currentHeatMapOverheadSize;
    }
 else {
      size=(resultingNormalSpacing * numElements) + currentHeatMapOverheadSize;
    }
    if (size - currentHeatMapOverheadSize < hmMinSpacing)     size=hmMinSpacing + currentHeatMapOverheadSize;
    hashHeatMapHeights.put(group.getGroupIndex(),size);
  }
}","protected void calculateDetailHeatMapHeights(){
  hashHeatMapHeights.clear();
  HeatMapWrapper heatMapWrapper=layout.getHeatMapWrapper();
  HashMap<Group,GroupInfo> selectedGroups=heatMapWrapper.getSelectedGroups();
  int totalNumberOfElements=0;
  int numberOfFocusElements=0;
  float requestedFocusSpacing=HeatMapRenderStyle.MIN_SELECTED_FIELD_HEIGHT;
  float totalHeatMapOverheadSize=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    totalNumberOfElements+=numElements;
    totalHeatMapOverheadSize+=heatMap.getRequiredOverheadSpacing();
    if (heatMap.isForceMinSpacing()) {
      numberOfFocusElements+=numElements;
      requestedFocusSpacing=heatMap.getMinSpacing();
    }
  }
  float gapSpace=getDetailHeight() * DETAIL_HEATMAP_SPACING_PORTION_DEFAULT * (selectedGroups.size() - 1);
  detailHeatMapSpacing=getDetailHeight() * DETAIL_HEATMAP_SPACING_PORTION_DEFAULT;
  float availableSpaceForHeatMaps=getDetailHeight() - gapSpace - totalHeatMapOverheadSize;
  float defaultSpacing=availableSpaceForHeatMaps / totalNumberOfElements;
  float hmMinSpacing=HeatMapRenderStyle.MIN_SELECTED_FIELD_HEIGHT * 1.5f;
  float resultingFocusSpacing=0;
  float resultingNormalSpacing=0;
  int minSizeGranted=0;
  int elementsInOverhead=0;
  int selectedElementsInOverhead=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    if (numElements * defaultSpacing < hmMinSpacing) {
      minSizeGranted++;
      elementsInOverhead+=numElements;
      if (heatMap.isForceMinSpacing())       selectedElementsInOverhead+=numElements;
    }
  }
  if (minSizeGranted > 0) {
    availableSpaceForHeatMaps-=hmMinSpacing * minSizeGranted;
    totalNumberOfElements-=elementsInOverhead;
    numberOfFocusElements-=selectedElementsInOverhead;
    defaultSpacing=availableSpaceForHeatMaps / (float)(totalNumberOfElements);
  }
  if (layout.isUseZoom() && numberOfFocusElements > 0) {
    if (defaultSpacing > requestedFocusSpacing) {
      resultingFocusSpacing=defaultSpacing;
      resultingNormalSpacing=defaultSpacing;
    }
 else     if ((availableSpaceForHeatMaps - (numberOfFocusElements * requestedFocusSpacing)) > availableSpaceForHeatMaps / 2) {
      resultingFocusSpacing=requestedFocusSpacing;
      resultingNormalSpacing=(availableSpaceForHeatMaps - resultingFocusSpacing * numberOfFocusElements) / (totalNumberOfElements - numberOfFocusElements);
    }
 else {
      resultingFocusSpacing=(availableSpaceForHeatMaps / 3) / numberOfFocusElements;
      resultingNormalSpacing=(availableSpaceForHeatMaps / 3 * 2) / (totalNumberOfElements - numberOfFocusElements);
    }
  }
 else {
    resultingNormalSpacing=defaultSpacing;
    resultingFocusSpacing=defaultSpacing;
  }
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    float currentHeatMapOverheadSize=heatMap.getRequiredOverheadSpacing();
    float size=0;
    if (layout.isUseZoom() && heatMap.isForceMinSpacing()) {
      size=(resultingFocusSpacing * numElements) + currentHeatMapOverheadSize;
    }
 else {
      size=(resultingNormalSpacing * numElements) + currentHeatMapOverheadSize;
    }
    if (size - currentHeatMapOverheadSize < hmMinSpacing)     size=hmMinSpacing + currentHeatMapOverheadSize;
    hashHeatMapHeights.put(group.getGroupIndex(),size);
  }
}",0.9991701244813278
58409,"protected void renderOverviewRelations(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  if (setsInFocus == null || setsInFocus.size() == 0)   return;
  float alpha=0.6f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  ContentVirtualArray contentVALeft=leftHeatMapWrapper.getSet().getContentVA(ContentVAType.CONTENT);
  for (  Integer contentID : contentVALeft) {
    float positionZ=0.0f;
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      positionZ=type.getPriority();
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
        gl.glLineWidth(5);
        alpha=1f;
      }
 else {
        gl.glLineWidth(1);
        alpha=0.5f;
      }
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
    }
    Vec2f leftPos=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     continue;
    Vec2f rightPos=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (rightPos == null)     continue;
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),positionZ));
    Tree<ClusterNode> tree;
    int nodeID;
    ClusterNode node;
    ArrayList<ClusterNode> pathToRoot;
    tree=leftHeatMapWrapper.getSet().getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    tree=rightHeatMapWrapper.getSet().getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (int i=pathToRoot.size() - 1; i >= 0; i--) {
      ClusterNode pathNode=pathToRoot.get(i);
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    if (points.size() == 0)     continue;
    NURBSCurve curve=new NURBSCurve(points,80);
    points=curve.getCurvePoints();
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.POLYLINE_SELECTION,contentID));
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),positionZ);
    gl.glEnd();
    gl.glPopName();
  }
}","protected void renderOverviewRelations(GL gl,HeatMapWrapper leftHeatMapWrapper,HeatMapWrapper rightHeatMapWrapper){
  if (setsInFocus == null || setsInFocus.size() == 0)   return;
  ContentVirtualArray contentVALeft=leftHeatMapWrapper.getSet().getContentVA(ContentVAType.CONTENT);
  for (  Integer contentID : contentVALeft) {
    float positionZ=setRelationColor(gl,leftHeatMapWrapper,contentID);
    Vec2f leftPos=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     continue;
    Vec2f rightPos=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (rightPos == null)     continue;
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),positionZ));
    Tree<ClusterNode> tree;
    int nodeID;
    ClusterNode node;
    ArrayList<ClusterNode> pathToRoot;
    tree=leftHeatMapWrapper.getSet().getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    tree=rightHeatMapWrapper.getSet().getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (int i=pathToRoot.size() - 1; i >= 0; i--) {
      ClusterNode pathNode=pathToRoot.get(i);
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    if (points.size() == 0)     continue;
    NURBSCurve curve=new NURBSCurve(points,80);
    points=curve.getCurvePoints();
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.POLYLINE_SELECTION,contentID));
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),positionZ);
    gl.glEnd();
    gl.glPopName();
  }
}",0.8802357398442433
58410,"@Override public void buildDisplayList(GL gl){
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawLocalItems(gl,textureManager,pickingManager,glMouseListener,viewID);
  }
  IViewFrustum viewFrustum=view.getViewFrustum();
  setBar.setWidth(viewFrustum.getWidth());
  setBar.render(gl);
  renderOverviewToDetailRelations(gl);
  renderDetailRelations(gl);
  if (heatMapWrappers.get(0).getContentVAsOfHeatMaps().size() == 0) {
    renderTree(gl,heatMapWrappers.get(0),heatMapWrappers.get(1));
    renderOverviewRelations(gl,heatMapWrappers.get(0),heatMapWrappers.get(1));
  }
}","@Override public void buildDisplayList(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawLocalItems(gl,textureManager,pickingManager,glMouseListener,viewID);
  }
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  IViewFrustum viewFrustum=view.getViewFrustum();
  setBar.setWidth(viewFrustum.getWidth());
  setBar.render(gl);
  renderOverviewToDetailRelations(gl);
  renderDetailRelations(gl);
  if (heatMapWrappers.get(0).getContentVAsOfHeatMaps().size() == 0) {
    renderTree(gl,heatMapWrappers.get(0),heatMapWrappers.get(1));
    renderOverviewRelations(gl,heatMapWrappers.get(0),heatMapWrappers.get(1));
  }
}",0.7752161383285303
58411,"public void setGroupsToCompare(final ArrayList<ISet> sets){
  ClusterState clusterState=new ClusterState();
  clusterState.setClustererAlgo(EClustererAlgo.AFFINITY_PROPAGATION);
  clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
  clusterState.setAffinityPropClusterFactorGenes(8);
  clusterState.setDistanceMeasure(EDistanceMeasure.EUCLIDEAN_DISTANCE);
  for (  ISet set : sets) {
    set.cluster(clusterState);
  }
  compareViewStateController.setSetsToCompare(sets);
}","public void setGroupsToCompare(final ArrayList<ISet> sets){
  ClusterState clusterState=new ClusterState();
  clusterState.setClustererAlgo(EClustererAlgo.AFFINITY_PROPAGATION);
  clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
  clusterState.setAffinityPropClusterFactorGenes(5);
  clusterState.setDistanceMeasure(EDistanceMeasure.EUCLIDEAN_DISTANCE);
  for (  ISet set : sets) {
    set.cluster(clusterState);
  }
  compareViewStateController.setSetsToCompare(sets);
}",0.9979381443298968
58412,"private void renderDetailBand(GL gl,DetailBand detailBand){
  ArrayList<Integer> contentIDs=detailBand.getContentIDs();
  int startContentID=contentIDs.get(0);
  int endContentID=contentIDs.get(contentIDs.size() - 1);
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  HeatMapWrapper rightHeatMapWrapper=heatMapWrappers.get(1);
  float leftHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  float rightHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(startContentID);
  if (leftPos == null)   return;
  Vec2f rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(startContentID);
  if (rightPos == null)   return;
  xOffset=-(rightPos.x() - leftPos.x()) / 1.5f;
  ArrayList<Vec3f> inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() + leftHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() + leftHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() + rightHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() + rightHeatMapElementOffset,0));
  NURBSCurve curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> outputPoints=curve.getCurvePoints();
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < outputPoints.size(); i++)   gl.glVertex3f(outputPoints.get(i).x(),outputPoints.get(i).y(),0f);
  gl.glEnd();
  leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(endContentID);
  if (leftPos == null)   return;
  rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(endContentID);
  if (rightPos == null)   return;
  inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() - leftHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() - leftHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() - rightHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() - rightHeatMapElementOffset,0));
  curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> points=curve.getCurvePoints();
  for (int i=points.size() - 1; i >= 0; i--) {
    outputPoints.add(points.get(i));
  }
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < points.size(); i++)   gl.glVertex3f(points.get(i).x(),points.get(i).y(),0f);
  gl.glEnd();
  ContentSelectionManager contentSelectionManager=leftHeatMapWrapper.getContentSelectionManager();
  boolean activeBand=false;
  boolean activeGroup=false;
  for (  Integer contentID : detailBand.getContentIDs()) {
    SelectionType type=contentSelectionManager.getSelectionTypes(contentID).get(0);
    if (type == SelectionType.MOUSE_OVER) {
      activeBand=true;
      this.activeBand=detailBand;
      break;
    }
    if (rightHeatMapWrapper.getHeatMapByContentID(contentID).getContentVA().containsElement(contentID) > 0) {
      activeGroup=true;
    }
  }
  if (activeBand) {
    gl.glColor4f(0.3f,0.3f,0.3f,1f);
    for (    Vec3f point : outputPoints) {
      point.setZ(0.3f);
    }
  }
 else   if (activeGroup)   gl.glColor4f(0f,0f,0f,0.4f);
 else   gl.glColor4f(0f,0f,0f,0.2f);
  compareConnectionRenderer.render(gl,outputPoints);
}","private void renderDetailBand(GL gl,DetailBand detailBand){
  ArrayList<Integer> contentIDs=detailBand.getContentIDs();
  int startContentID=contentIDs.get(0);
  int endContentID=contentIDs.get(contentIDs.size() - 1);
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  HeatMapWrapper rightHeatMapWrapper=heatMapWrappers.get(1);
  float leftTopHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  float leftBottomHeatMapElementOffset=detailBand.getLeftHeatMap().getFieldHeight(endContentID) / 2f - 0.01f;
  float rightTopHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(startContentID) / 2f - 0.01f;
  ;
  float rightBottomHeatMapElementOffset=detailBand.getRightHeatMap().getFieldHeight(endContentID) / 2f - 0.01f;
  ;
  Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(startContentID);
  if (leftPos == null)   return;
  Vec2f rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(startContentID);
  if (rightPos == null)   return;
  xOffset=-(rightPos.x() - leftPos.x()) / 1.5f;
  ArrayList<Vec3f> inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() + leftTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() + leftTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() + rightTopHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() + rightTopHeatMapElementOffset,0));
  NURBSCurve curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> outputPoints=curve.getCurvePoints();
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < outputPoints.size(); i++)   gl.glVertex3f(outputPoints.get(i).x(),outputPoints.get(i).y(),0f);
  gl.glEnd();
  leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(endContentID);
  if (leftPos == null)   return;
  rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(endContentID);
  if (rightPos == null)   return;
  inputPoints=new ArrayList<Vec3f>();
  inputPoints.add(new Vec3f(leftPos.x(),leftPos.y() - leftBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset,leftPos.y() - leftBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x() + xOffset / 3f,rightPos.y() - rightBottomHeatMapElementOffset,0));
  inputPoints.add(new Vec3f(rightPos.x(),rightPos.y() - rightBottomHeatMapElementOffset,0));
  curve=new NURBSCurve(inputPoints,NUMBER_OF_SPLINE_POINTS);
  ArrayList<Vec3f> points=curve.getCurvePoints();
  for (int i=points.size() - 1; i >= 0; i--) {
    outputPoints.add(points.get(i));
  }
  gl.glLineWidth(2);
  gl.glColor4f(0,0,0,0.6f);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i < points.size(); i++)   gl.glVertex3f(points.get(i).x(),points.get(i).y(),0f);
  gl.glEnd();
  ContentSelectionManager contentSelectionManager=leftHeatMapWrapper.getContentSelectionManager();
  boolean activeBand=false;
  boolean activeGroup=false;
  for (  Integer contentID : detailBand.getContentIDs()) {
    SelectionType type=contentSelectionManager.getSelectionTypes(contentID).get(0);
    if (type == SelectionType.MOUSE_OVER) {
      activeBand=true;
      this.activeBand=detailBand;
      break;
    }
    if (rightHeatMapWrapper.getHeatMapByContentID(contentID).getContentVA().containsElement(contentID) > 0) {
      activeGroup=true;
    }
  }
  if (activeBand) {
    gl.glColor4f(0.3f,0.3f,0.3f,1f);
    for (    Vec3f point : outputPoints) {
      point.setZ(0.3f);
    }
  }
 else   if (activeGroup)   gl.glColor4f(0f,0f,0f,0.4f);
 else   gl.glColor4f(0f,0f,0f,0.2f);
  compareConnectionRenderer.render(gl,outputPoints);
}",0.9429280397022332
58413,"private void calculateDetailBands(){
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  HeatMapWrapper rightHeatMapWrapper=heatMapWrappers.get(1);
  ArrayList<Integer> bandContentIDs=null;
  DetailBand detailBand=null;
  for (  GLHeatMap leftHeatMap : leftHeatMapWrapper.getHeatMaps()) {
    ContentVirtualArray leftContentVA=leftHeatMap.getContentVA();
    for (    GLHeatMap rightHeatMap : rightHeatMapWrapper.getHeatMaps()) {
      ContentVirtualArray rightContentVA=rightHeatMap.getContentVA();
      if (bandContentIDs == null || bandContentIDs.size() > 0) {
        bandContentIDs=new ArrayList<Integer>();
        detailBand=new DetailBand();
        detailBand.setContentIDs(bandContentIDs);
        detailBand.setLeftHeatMap(leftHeatMap);
        detailBand.setRightHeatMap(rightHeatMap);
        detailBands.add(detailBand);
      }
      for (int leftContentIndex=0; leftContentIndex < leftContentVA.size() - 1; leftContentIndex++) {
        int contentID=leftContentVA.get(leftContentIndex);
        int nextContentID=leftContentVA.get(leftContentIndex + 1);
        if (rightContentVA.containsElement(contentID) == 0)         continue;
        if ((rightContentVA.indexOf(contentID)) == (rightContentVA.indexOf(nextContentID) - 1)) {
          bandContentIDs.add(contentID);
          bandContentIDs.add(nextContentID);
        }
      }
    }
  }
}","private void calculateDetailBands(){
  HeatMapWrapper leftHeatMapWrapper=heatMapWrappers.get(0);
  HeatMapWrapper rightHeatMapWrapper=heatMapWrappers.get(1);
  ArrayList<Integer> bandContentIDs=null;
  DetailBand detailBand=null;
  for (  GLHeatMap leftHeatMap : leftHeatMapWrapper.getHeatMaps()) {
    ContentVirtualArray leftContentVA=leftHeatMap.getContentVA();
    for (    GLHeatMap rightHeatMap : rightHeatMapWrapper.getHeatMaps()) {
      ContentVirtualArray rightContentVA=rightHeatMap.getContentVA();
      if (bandContentIDs == null || bandContentIDs.size() > 0) {
        bandContentIDs=new ArrayList<Integer>();
        detailBand=new DetailBand();
        detailBand.setContentIDs(bandContentIDs);
        detailBand.setLeftHeatMap(leftHeatMap);
        detailBand.setRightHeatMap(rightHeatMap);
        detailBands.add(detailBand);
      }
      for (int leftContentIndex=0; leftContentIndex < leftContentVA.size() - 1; leftContentIndex++) {
        int contentID=leftContentVA.get(leftContentIndex);
        int nextContentID=leftContentVA.get(leftContentIndex + 1);
        if (rightContentVA.containsElement(contentID) == 0)         continue;
        if ((rightContentVA.indexOf(contentID)) == (rightContentVA.indexOf(nextContentID) - 1)) {
          bandContentIDs.add(contentID);
          bandContentIDs.add(nextContentID);
        }
 else         bandContentIDs.add(contentID);
      }
    }
  }
  for (  Integer contentID : leftHeatMapWrapper.getContentVA()) {
    boolean isInBand=false;
    ArrayList<DetailBand> newBands=new ArrayList<DetailBand>();
    for (    DetailBand band : detailBands) {
      if (band.getContentIDs().contains(contentID)) {
        isInBand=true;
        continue;
      }
    }
    if (!isInBand) {
      bandContentIDs=new ArrayList<Integer>();
      bandContentIDs.add(contentID);
      detailBand=new DetailBand();
      detailBand.setContentIDs(bandContentIDs);
      detailBand.setLeftHeatMap(null);
      detailBand.setRightHeatMap(null);
      newBands.add(detailBand);
    }
    detailBands.addAll(newBands);
  }
}",0.7966347548592979
58414,"private float setRelationColor(GL gl,HeatMapWrapper heatMapWrapper,int contentID){
  SelectionType type=heatMapWrapper.getContentSelectionManager().getSelectionTypes(contentID).get(0);
  float z=type.getPriority();
  float[] typeColor=type.getColor();
  float alpha=0.2f;
  if (type == activeHeatMapSelectionType) {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.4f;
  }
 else   if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
    gl.glLineWidth(2);
    alpha=1f;
    z=0.5f;
  }
 else {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.4f;
  }
  typeColor[3]=alpha;
  gl.glColor4fv(typeColor,0);
  return z;
}","private float setRelationColor(GL gl,HeatMapWrapper heatMapWrapper,int contentID){
  SelectionType type=heatMapWrapper.getContentSelectionManager().getSelectionTypes(contentID).get(0);
  float z=type.getPriority();
  float[] typeColor=type.getColor();
  float alpha=0.2f;
  if (type == activeHeatMapSelectionType) {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.4f;
  }
 else   if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
    gl.glLineWidth(2);
    alpha=1f;
    z=0.5f;
  }
 else {
    gl.glLineWidth(1);
    alpha=0.4f;
    z=0.2f;
  }
  typeColor[3]=alpha;
  gl.glColor4fv(typeColor,0);
  return z;
}",0.9984251968503935
58415,"@Override public void display(GL gl){
  compareViewStateController.drawActiveElements(gl);
  if (bIsDisplayListDirtyLocal) {
    bIsDisplayListDirtyLocal=false;
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    iGLDisplayListToCall=iGLDisplayListIndexLocal;
  }
  gl.glCallList(iGLDisplayListToCall);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
  checkForHits(gl);
}","@Override public void display(GL gl){
  compareViewStateController.drawActiveElements(gl);
  if (bIsDisplayListDirtyLocal) {
    bIsDisplayListDirtyLocal=false;
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    iGLDisplayListToCall=iGLDisplayListIndexLocal;
  }
  gl.glCallList(iGLDisplayListToCall);
  compareViewStateController.handleDragging(gl);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
  checkForHits(gl);
}",0.9401709401709402
58416,"public SetBarItem(int id,int viewID,PickingManager pickingManager,TextRenderer textRenderer,SetBar setBar){
  this.id=id;
  this.viewID=viewID;
  this.pickingManager=pickingManager;
  this.textRenderer=textRenderer;
  this.setBar=setBar;
  hashSelectionColors=new HashMap<Integer,float[]>();
  hashSelectionColors.put(SELECTION_STATUS_NORMAL,new float[]{0.5f,0.5f,0.5f,1.0f});
  hashSelectionColors.put(SELECTION_STATUS_MOUSE_OVER,SelectionType.MOUSE_OVER.getColor());
  hashSelectionColors.put(SELECTION_STATUS_DRAGGED,SelectionType.MOUSE_OVER.getColor());
}","public SetBarItem(int id,int viewID,PickingManager pickingManager,TextRenderer textRenderer,SetBar setBar){
  this.id=id;
  this.viewID=viewID;
  this.pickingManager=pickingManager;
  this.textRenderer=textRenderer;
  this.setBar=setBar;
  hashSelectionColors=new HashMap<Integer,float[]>();
  hashSelectionColors.put(SELECTION_STATUS_NORMAL,new float[]{0.5f,0.5f,0.5f,1.0f});
  float[] mouseOverColor=SelectionType.MOUSE_OVER.getColor();
  hashSelectionColors.put(SELECTION_STATUS_MOUSE_OVER,mouseOverColor);
  hashSelectionColors.put(SELECTION_STATUS_DRAGGED,new float[]{mouseOverColor[0],mouseOverColor[1],mouseOverColor[2],0.5f});
}",0.7899581589958159
58417,"@Override public void handleDragging(GL gl,float mouseCoordinateX,float mouseCoordinateY){
  float draggedPositionX=mouseCoordinateX + draggingSpacingX;
  float draggedPositionY=mouseCoordinateY + draggingSpacingY;
  gl.glPushAttrib(GL.GL_COLOR_BUFFER_BIT);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  renderItemBody(gl,SELECTION_STATUS_DRAGGED,draggedPositionX,draggedPositionY,1.0f);
  gl.glEnd();
  gl.glPopAttrib();
}","@Override public void handleDragging(GL gl,float mouseCoordinateX,float mouseCoordinateY){
  float draggedPositionX=mouseCoordinateX + draggingSpacingX;
  float draggedPositionY=mouseCoordinateY + draggingSpacingY;
  gl.glPushAttrib(GL.GL_COLOR_BUFFER_BIT);
  renderItemBody(gl,SELECTION_STATUS_DRAGGED,draggedPositionX,draggedPositionY,1.0f);
  gl.glEnd();
  gl.glPopAttrib();
}",0.9255189255189256
58418,"private void renderArrow(GL gl,Vec3f position,float arrowWidth,float alpha,boolean isLeft){
  Vec3f lowerLeftCorner=new Vec3f(position.x(),positionY,position.z() + 0.1f);
  Vec3f lowerRightCorner=new Vec3f(position.x() + arrowWidth,positionY,position.z() + 0.1f);
  Vec3f upperRightCorner=new Vec3f(position.x() + arrowWidth,positionY + height,position.z() + 0.1f);
  Vec3f upperLeftCorner=new Vec3f(position.x(),positionY + height,position.z() + 0.1f);
  if (isLeft) {
    textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,lowerRightCorner,upperRightCorner,upperLeftCorner,lowerLeftCorner,1,1,1,alpha);
  }
 else {
    textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,upperLeftCorner,lowerLeftCorner,lowerRightCorner,upperRightCorner,1,1,1,alpha);
  }
}","private void renderArrow(GL gl,Vec3f position,float arrowWidth,float alpha,boolean isLeft,float zOffset){
  Vec3f lowerLeftCorner=new Vec3f(position.x(),positionY,position.z() + zOffset);
  Vec3f lowerRightCorner=new Vec3f(position.x() + arrowWidth,positionY,position.z() + zOffset);
  Vec3f upperRightCorner=new Vec3f(position.x() + arrowWidth,positionY + height,position.z() + zOffset);
  Vec3f upperLeftCorner=new Vec3f(position.x(),positionY + height,position.z() + zOffset);
  if (isLeft) {
    textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,lowerRightCorner,upperRightCorner,upperLeftCorner,lowerLeftCorner,1,1,1,alpha);
  }
 else {
    textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,upperLeftCorner,lowerLeftCorner,lowerRightCorner,upperRightCorner,1,1,1,alpha);
  }
}",0.9632911392405064
58419,"private void renderWindow(GL gl,int numSelectedItems,int lowestItemIndex,float alpha,boolean isPickable){
  if (numSelectedItems <= 0)   return;
  SetBarItem lowestItem=items.get(lowestItemIndex);
  SetBarItem highestItem=items.get(lowestItemIndex + numSelectedItems - 1);
  Vec3f lowestItemPosition=lowestItem.getPosition();
  Vec3f highestItemPosition=highestItem.getPosition();
  float arrowWidth=0.08f * lowestItem.getWidth();
  float rightArrowPositionX=highestItemPosition.x() + highestItem.getWidth() - arrowWidth;
  float width=highestItemPosition.x() + highestItem.getWidth() - lowestItemPosition.x() - 2.0f * arrowWidth;
  if (isPickable) {
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_SELECTION_WINDOW_ARROW_LEFT_SELECTION,id));
    renderArrow(gl,lowestItemPosition,arrowWidth,alpha,true);
    gl.glPopName();
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_SELECTION_WINDOW_ARROW_RIGHT_SELECTION,id));
    renderArrow(gl,new Vec3f(rightArrowPositionX,lowestItemPosition.y(),lowestItemPosition.z()),arrowWidth,alpha,false);
    gl.glPopName();
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_SELECTION_WINDOW_SELECTION,id));
    renderBody(gl,lowestItemPosition,arrowWidth,width,alpha);
    gl.glPopName();
  }
 else {
    renderArrow(gl,lowestItemPosition,arrowWidth,alpha,true);
    renderArrow(gl,new Vec3f(rightArrowPositionX,lowestItemPosition.y(),lowestItemPosition.z()),arrowWidth,alpha,false);
    renderBody(gl,lowestItemPosition,arrowWidth,width,alpha);
  }
}","private void renderWindow(GL gl,int numSelectedItems,int lowestItemIndex,float alpha,boolean isPickable,float zOffset){
  if (numSelectedItems <= 0)   return;
  SetBarItem lowestItem=items.get(lowestItemIndex);
  SetBarItem highestItem=items.get(lowestItemIndex + numSelectedItems - 1);
  Vec3f lowestItemPosition=lowestItem.getPosition();
  Vec3f highestItemPosition=highestItem.getPosition();
  float arrowWidth=0.08f * lowestItem.getWidth();
  float rightArrowPositionX=highestItemPosition.x() + highestItem.getWidth() - arrowWidth;
  float width=highestItemPosition.x() + highestItem.getWidth() - lowestItemPosition.x() - 2.0f * arrowWidth;
  if (isPickable) {
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_SELECTION_WINDOW_ARROW_LEFT_SELECTION,id));
    renderArrow(gl,lowestItemPosition,arrowWidth,alpha,true,zOffset);
    gl.glPopName();
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_SELECTION_WINDOW_ARROW_RIGHT_SELECTION,id));
    renderArrow(gl,new Vec3f(rightArrowPositionX,lowestItemPosition.y(),lowestItemPosition.z()),arrowWidth,alpha,false,zOffset);
    gl.glPopName();
    gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_SELECTION_WINDOW_SELECTION,id));
    renderBody(gl,lowestItemPosition,arrowWidth,width,alpha,zOffset);
    gl.glPopName();
  }
 else {
    renderArrow(gl,lowestItemPosition,arrowWidth,alpha,true,zOffset);
    renderArrow(gl,new Vec3f(rightArrowPositionX,lowestItemPosition.y(),lowestItemPosition.z()),arrowWidth,alpha,false,zOffset);
    renderBody(gl,lowestItemPosition,arrowWidth,width,alpha,zOffset);
  }
}",0.980539861895794
58420,"@Override public void handleDragging(GL gl,float mouseCoordinateX,float mouseCoordinateY){
switch (draggingSelection) {
case COMPARE_SELECTION_WINDOW_SELECTION:
    handleWindowDragging(gl,mouseCoordinateX,mouseCoordinateY);
  break;
case COMPARE_SELECTION_WINDOW_ARROW_LEFT_SELECTION:
handleArrowLeftDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
case COMPARE_SELECTION_WINDOW_ARROW_RIGHT_SELECTION:
handleArrowRightDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
}
if (dragged) {
renderWindow(gl,numSelectedItemsDragging,lowestItemIndexDragging,0.5f,false);
}
}","@Override public void handleDragging(GL gl,float mouseCoordinateX,float mouseCoordinateY){
switch (draggingSelection) {
case COMPARE_SELECTION_WINDOW_SELECTION:
    handleWindowDragging(gl,mouseCoordinateX,mouseCoordinateY);
  break;
case COMPARE_SELECTION_WINDOW_ARROW_LEFT_SELECTION:
handleArrowLeftDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
case COMPARE_SELECTION_WINDOW_ARROW_RIGHT_SELECTION:
handleArrowRightDragging(gl,mouseCoordinateX,mouseCoordinateY);
break;
}
if (dragged) {
renderWindow(gl,numSelectedItemsDragging,lowestItemIndexDragging,0.5f,false,-0.05f);
}
}",0.9939810834049873
58421,"public void render(GL gl){
  renderWindow(gl,numSelectedItems,lowestItemIndex,1,true);
}","public void render(GL gl){
  renderWindow(gl,numSelectedItems,lowestItemIndex,1,true,-0.1f);
}",0.967032967032967
58422,"private void renderBody(GL gl,Vec3f lowestItemPosition,float arrowWidth,float width,float alpha){
  gl.glPushAttrib(GL.GL_LINE_BIT | GL.GL_COLOR_BUFFER_BIT);
  float[] selectionColor=SelectionType.SELECTION.getColor();
  gl.glColor4f(selectionColor[0],selectionColor[1],selectionColor[2],alpha);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth,positionY,lowestItemPosition.z() - 1f);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth + width,positionY,lowestItemPosition.z() - 1f);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth + width,positionY + height,lowestItemPosition.z() - 1f);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth,positionY + height,lowestItemPosition.z() - 1f);
  gl.glEnd();
  gl.glPopAttrib();
}","private void renderBody(GL gl,Vec3f lowestItemPosition,float arrowWidth,float width,float alpha,float zOffset){
  gl.glPushAttrib(GL.GL_LINE_BIT | GL.GL_COLOR_BUFFER_BIT);
  float[] selectionColor=SelectionType.SELECTION.getColor();
  gl.glColor4f(selectionColor[0],selectionColor[1],selectionColor[2],alpha);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth,positionY,lowestItemPosition.z() + zOffset);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth + width,positionY,lowestItemPosition.z() + zOffset);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth + width,positionY + height,lowestItemPosition.z() + zOffset);
  gl.glVertex3f(lowestItemPosition.x() + arrowWidth,positionY + height,lowestItemPosition.z() + zOffset);
  gl.glEnd();
  gl.glPopAttrib();
}",0.957637997432606
58423,"public void handleDragging(GL gl){
  dragAndDropController.handleDragging(gl,glMouseListener);
}","/** 
 * Handles the dragging of the current state. Call this after all rendering of the state has finished.
 * @param gl GL context.
 */
public void handleDragging(GL gl){
  dragAndDropController.handleDragging(gl,glMouseListener);
}",0.5835866261398176
58424,"public void executeDrawingPreprocessing(GL gl,boolean isDisplayListDirty){
  handleDragging(gl);
  IViewFrustum viewFrustum=view.getViewFrustum();
  if (isDisplayListDirty)   setBar.setHeight(gl,SET_BAR_HEIGHT_PORTION * viewFrustum.getHeight());
  setupLayouts();
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (!heatMapWrapper.isInitialized()) {
      heatMapWrapper.init(gl,glMouseListener,null,dataDomain);
    }
    heatMapWrapper.processEvents();
    heatMapWrapper.calculateDrawingParameters();
    if (isDisplayListDirty) {
      heatMapWrapper.setDisplayListDirty();
    }
  }
  setsChanged=false;
}","public void executeDrawingPreprocessing(GL gl,boolean isDisplayListDirty){
  IViewFrustum viewFrustum=view.getViewFrustum();
  if (isDisplayListDirty)   setBar.setHeight(gl,SET_BAR_HEIGHT_PORTION * viewFrustum.getHeight());
  setupLayouts();
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (!heatMapWrapper.isInitialized()) {
      heatMapWrapper.init(gl,glMouseListener,null,dataDomain);
    }
    heatMapWrapper.processEvents();
    heatMapWrapper.calculateDrawingParameters();
    if (isDisplayListDirty) {
      heatMapWrapper.setDisplayListDirty();
    }
  }
  setsChanged=false;
}",0.9821428571428572
58425,"public OverviewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  this.setBar.setPosition(new Vec3f(0.0f,0.0f,0.0f));
  compareConnectionRenderer=new CompareConnectionBandRenderer();
  numSetsInFocus=4;
}","public OverviewState(GLCompare view,int viewID,TextRenderer textRenderer,TextureManager textureManager,PickingManager pickingManager,GLMouseListener glMouseListener,SetBar setBar,RenderCommandFactory renderCommandFactory,EDataDomain dataDomain,IUseCase useCase,DragAndDropController dragAndDropController,CompareViewStateController compareViewStateController){
  super(view,viewID,textRenderer,textureManager,pickingManager,glMouseListener,setBar,renderCommandFactory,dataDomain,useCase,dragAndDropController,compareViewStateController);
  this.setBar.setPosition(new Vec3f(0.0f,0.0f,0.5f));
  compareConnectionRenderer=new CompareConnectionBandRenderer();
  numSetsInFocus=4;
}",0.9985250737463128
58426,"@Override public void init(GL gl){
  isInitialized=true;
  ACompareViewState overviewState=compareViewStateController.getState(ECompareViewStateType.OVERVIEW);
  ACompareViewState detailViewState=compareViewStateController.getState(ECompareViewStateType.DETAIL_VIEW);
  setBar.setViewState(overviewState);
  setBar.adjustSelectionWindowSizeCentered(overviewState.getNumSetsInFocus());
  setBar.setMaxSelectedItems(overviewState.getMaxSetsInFocus());
  setBar.setMinSelectedItems(overviewState.getMinSetsInFocus());
  if (!overviewState.isInitialized()) {
    overviewState.init(gl);
  }
  overviewState.setSetsInFocus(setBar.getSetsInFocus());
  heatMapWrappers=overviewState.getHeatMapWrappers();
  ArrayList<HeatMapWrapper> sourceHeatMapWrappers=detailViewState.getHeatMapWrappers();
  int indexOffset=0;
  for (int i=0; i < heatMapWrappers.size(); i++) {
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    if (heatMapWrapper.getSet().getID() == sourceHeatMapWrappers.get(0).getSet().getID()) {
      indexOffset=i;
      break;
    }
  }
  layouts.clear();
  captionPositions.clear();
  captionTextDimensions.clear();
  captionTextSpacing.clear();
  heatMapDimensions.clear();
  heatMapPositions.clear();
  ArrayList<AHeatMapLayout> sourceLayouts=detailViewState.getLayouts();
  destinationLayouts=overviewState.getLayouts();
  ArrayList<AHeatMapLayout> focusLayouts=new ArrayList<AHeatMapLayout>();
  for (int i=0; i < sourceLayouts.size(); i++) {
    AHeatMapLayout srcLayout=sourceLayouts.get(i);
    AHeatMapLayout destLayout=destinationLayouts.get(indexOffset + i);
    HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
    transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
    transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
    focusLayouts.add(transitionLayout);
    createMovementValues(gl,indexOffset + i,srcLayout,destLayout);
    if (i == 0) {
      createOffsets(true,indexOffset + i);
    }
 else     if (i == sourceLayouts.size() - 1) {
      createOffsets(false,indexOffset + i);
    }
  }
  for (int i=0; i < destinationLayouts.size(); i++) {
    AHeatMapLayout destLayout=destinationLayouts.get(i);
    if (i < indexOffset) {
      createMovementValuesSourceOffset(gl,i,destLayout,true);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      layouts.add(transitionLayout);
    }
 else     if (i > indexOffset + sourceLayouts.size() - 1) {
      createMovementValuesSourceOffset(gl,i,destLayout,false);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      layouts.add(transitionLayout);
    }
 else {
      layouts.add(focusLayouts.get(i - indexOffset));
    }
    heatMapWrappers.get(i).setLayout(layouts.get(i));
    layouts.get(i).setHeatMapWrapper(heatMapWrappers.get(i));
  }
  view.setDisplayListDirty();
}","@Override public void init(GL gl){
  isInitialized=true;
  ACompareViewState overviewState=compareViewStateController.getState(ECompareViewStateType.OVERVIEW);
  ACompareViewState detailViewState=compareViewStateController.getState(ECompareViewStateType.DETAIL_VIEW);
  setBar.setViewState(overviewState);
  setBar.adjustSelectionWindowSizeCentered(overviewState.getNumSetsInFocus());
  setBar.setMaxSelectedItems(overviewState.getMaxSetsInFocus());
  setBar.setMinSelectedItems(overviewState.getMinSetsInFocus());
  if (!overviewState.isInitialized()) {
    overviewState.init(gl);
  }
  overviewState.setSetsInFocus(setBar.getSetsInFocus());
  heatMapWrappers=overviewState.getHeatMapWrappers();
  ArrayList<HeatMapWrapper> sourceHeatMapWrappers=detailViewState.getHeatMapWrappers();
  int indexOffset=0;
  for (int i=0; i < heatMapWrappers.size(); i++) {
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    if (heatMapWrapper.getSet().getID() == sourceHeatMapWrappers.get(0).getSet().getID()) {
      indexOffset=i;
      break;
    }
  }
  layouts.clear();
  captionPositions.clear();
  captionTextDimensions.clear();
  captionTextSpacing.clear();
  heatMapDimensions.clear();
  heatMapPositions.clear();
  ArrayList<AHeatMapLayout> sourceLayouts=detailViewState.getLayouts();
  destinationLayouts=overviewState.getLayouts();
  ArrayList<AHeatMapLayout> focusLayouts=new ArrayList<AHeatMapLayout>();
  for (int i=0; i < sourceLayouts.size(); i++) {
    AHeatMapLayout srcLayout=sourceLayouts.get(i);
    AHeatMapLayout destLayout=destinationLayouts.get(indexOffset + i);
    HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
    transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
    transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
    focusLayouts.add(transitionLayout);
    createMovementValues(gl,indexOffset + i,srcLayout,destLayout);
    if (i == 0) {
      createOffsets(true,indexOffset + i);
    }
 else     if (i == sourceLayouts.size() - 1) {
      createOffsets(false,indexOffset + i);
    }
    srcLayout.useDendrogram(false);
  }
  for (int i=0; i < destinationLayouts.size(); i++) {
    AHeatMapLayout destLayout=destinationLayouts.get(i);
    if (i < indexOffset) {
      createMovementValuesSourceOffset(gl,i,destLayout,true);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      layouts.add(transitionLayout);
    }
 else     if (i > indexOffset + sourceLayouts.size() - 1) {
      createMovementValuesSourceOffset(gl,i,destLayout,false);
      HeatMapLayoutConfigurable transitionLayout=new HeatMapLayoutConfigurable(renderCommandFactory);
      transitionLayout.setLocalRenderCommands(destLayout.getRenderCommandsOfLocalItems());
      transitionLayout.setRemoteRenderCommands(destLayout.getRenderCommandsOfRemoteItems());
      layouts.add(transitionLayout);
    }
 else {
      layouts.add(focusLayouts.get(i - indexOffset));
    }
    heatMapWrappers.get(i).setLayout(layouts.get(i));
    layouts.get(i).setHeatMapWrapper(heatMapWrappers.get(i));
  }
  view.setDisplayListDirty();
}",0.9946396664681358
58427,"protected void finish(){
  for (int i=0; i < heatMapWrappers.size(); i++) {
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    AHeatMapLayout layout=destinationLayouts.get(i);
    heatMapWrapper.setLayout(layout);
  }
  compareViewStateController.setCurrentState(ECompareViewStateType.OVERVIEW);
  view.setDisplayListDirty();
  animationStarted=false;
}","@Override protected void finish(){
  for (int i=0; i < heatMapWrappers.size(); i++) {
    HeatMapWrapper heatMapWrapper=heatMapWrappers.get(i);
    AHeatMapLayout layout=destinationLayouts.get(i);
    heatMapWrapper.setLayout(layout);
  }
  compareViewStateController.setCurrentState(ECompareViewStateType.OVERVIEW);
  view.setDisplayListDirty();
  animationStarted=false;
}",0.986449864498645
58428,"@Override public void handleMouseWheel(GL gl,int amount,Point wheelPoint){
  if (amount > 0) {
    DetailToOverviewTransition transition=(DetailToOverviewTransition)compareViewStateController.getState(ECompareViewStateType.DETAIL_TO_OVERVIEW_TRANSITION);
    if (indexOfHeatMapWrapperWithDendrogram != -1) {
      layouts.get(indexOfHeatMapWrapperWithDendrogram).useDendrogram(false);
      indexOfHeatMapWrapperWithDendrogram=-1;
    }
    compareViewStateController.setCurrentState(ECompareViewStateType.DETAIL_TO_OVERVIEW_TRANSITION);
    transition.init(gl);
    view.setDisplayListDirty();
  }
}","@Override public void handleMouseWheel(GL gl,int amount,Point wheelPoint){
  if (amount > 0) {
    DetailToOverviewTransition transition=(DetailToOverviewTransition)compareViewStateController.getState(ECompareViewStateType.DETAIL_TO_OVERVIEW_TRANSITION);
    indexOfHeatMapWrapperWithDendrogram=-1;
    compareViewStateController.setCurrentState(ECompareViewStateType.DETAIL_TO_OVERVIEW_TRANSITION);
    transition.init(gl);
    view.setDisplayListDirty();
  }
}",0.8700564971751412
58429,"protected void calculateDetailHeatMapHeights(){
  hashHeatMapHeights.clear();
  HeatMapWrapper heatMapWrapper=layout.getHeatMapWrapper();
  HashMap<Group,GroupInfo> selectedGroups=heatMapWrapper.getSelectedGroups();
  int totalNumberOfElements=0;
  int numberOfFocusElements=0;
  float requestedFocusSpacing=0;
  float totalHeatMapOverheadSize=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    totalNumberOfElements+=numElements;
    totalHeatMapOverheadSize+=heatMap.getRequiredOverheadSpacing();
    if (heatMap.isForceMinSpacing()) {
      numberOfFocusElements+=numElements;
      requestedFocusSpacing=heatMap.getMinSpacing();
    }
  }
  float availableSpaceForHeatMaps=getDetailHeight() - (getDetailHeight() * DETAIL_HEATMAP_GAP_PORTION * (selectedGroups.size() - 1)) - totalHeatMapOverheadSize;
  float defaultSpacing=availableSpaceForHeatMaps / (float)totalNumberOfElements;
  float minSpacing=defaultSpacing / 10.0f;
  float hmMinSpacing=HeatMapRenderStyle.MIN_SELECTED_FIELD_HEIGHT * 1.5f;
  float resultingFocusSpacing=0;
  float resultingNormalSpacing=0;
  int overheadsGranted=0;
  int elementsInOverhead=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    if (numElements * defaultSpacing < hmMinSpacing) {
      overheadsGranted++;
      elementsInOverhead+=numElements;
    }
  }
  availableSpaceForHeatMaps-=hmMinSpacing * overheadsGranted - (elementsInOverhead * defaultSpacing);
  defaultSpacing=availableSpaceForHeatMaps / (float)(totalNumberOfElements);
  minSpacing=defaultSpacing / 4;
  if (layout.isUseZoom() && numberOfFocusElements > 0) {
    if (defaultSpacing > requestedFocusSpacing) {
      resultingFocusSpacing=defaultSpacing;
      resultingNormalSpacing=defaultSpacing;
    }
 else     if ((availableSpaceForHeatMaps - (numberOfFocusElements * requestedFocusSpacing)) / (totalNumberOfElements - numberOfFocusElements) > minSpacing) {
      resultingFocusSpacing=requestedFocusSpacing;
      resultingNormalSpacing=(availableSpaceForHeatMaps - resultingFocusSpacing * numberOfFocusElements) / (totalNumberOfElements - numberOfFocusElements);
    }
 else {
      resultingNormalSpacing=minSpacing;
      resultingFocusSpacing=(availableSpaceForHeatMaps - (totalNumberOfElements - numberOfFocusElements) * resultingNormalSpacing) / numberOfFocusElements;
    }
  }
 else {
    resultingNormalSpacing=defaultSpacing;
  }
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    float currentHeatMapOverheadSize=heatMap.getRequiredOverheadSpacing();
    float size=0;
    if (layout.isUseZoom() && heatMap.isForceMinSpacing()) {
      size=(resultingFocusSpacing * numElements) + currentHeatMapOverheadSize;
    }
 else {
      size=(resultingNormalSpacing * numElements) + currentHeatMapOverheadSize;
    }
    if (size - currentHeatMapOverheadSize < hmMinSpacing)     size=hmMinSpacing + currentHeatMapOverheadSize;
    hashHeatMapHeights.put(group.getGroupIndex(),size);
  }
}","protected void calculateDetailHeatMapHeights(){
  hashHeatMapHeights.clear();
  HeatMapWrapper heatMapWrapper=layout.getHeatMapWrapper();
  HashMap<Group,GroupInfo> selectedGroups=heatMapWrapper.getSelectedGroups();
  int totalNumberOfElements=0;
  int numberOfFocusElements=0;
  float requestedFocusSpacing=0;
  float totalHeatMapOverheadSize=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    totalNumberOfElements+=numElements;
    totalHeatMapOverheadSize+=heatMap.getRequiredOverheadSpacing();
    if (heatMap.isForceMinSpacing()) {
      numberOfFocusElements+=numElements;
      requestedFocusSpacing=heatMap.getMinSpacing();
    }
  }
  float gapSpace=getDetailHeight() * DETAIL_HEATMAP_SPACING_PORTION_DEFAULT * (selectedGroups.size() - 1);
  detailHeatMapSpacing=getDetailHeight() * DETAIL_HEATMAP_SPACING_PORTION_DEFAULT;
  float availableSpaceForHeatMaps=getDetailHeight() - gapSpace - totalHeatMapOverheadSize;
  float defaultSpacing=availableSpaceForHeatMaps / (float)totalNumberOfElements;
  float minSpacing=defaultSpacing / 10.0f;
  float hmMinSpacing=HeatMapRenderStyle.MIN_SELECTED_FIELD_HEIGHT * 1.5f;
  float resultingFocusSpacing=0;
  float resultingNormalSpacing=0;
  int overheadsGranted=0;
  int elementsInOverhead=0;
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    if (numElements * defaultSpacing < hmMinSpacing) {
      overheadsGranted++;
      elementsInOverhead+=numElements;
    }
  }
  availableSpaceForHeatMaps-=hmMinSpacing * overheadsGranted - (elementsInOverhead * defaultSpacing);
  defaultSpacing=availableSpaceForHeatMaps / (float)(totalNumberOfElements);
  minSpacing=defaultSpacing / 4;
  if (layout.isUseZoom() && numberOfFocusElements > 0) {
    if (defaultSpacing > requestedFocusSpacing) {
      resultingFocusSpacing=defaultSpacing;
      resultingNormalSpacing=defaultSpacing;
    }
 else     if ((availableSpaceForHeatMaps - (numberOfFocusElements * requestedFocusSpacing)) / (totalNumberOfElements - numberOfFocusElements) > minSpacing) {
      resultingFocusSpacing=requestedFocusSpacing;
      resultingNormalSpacing=(availableSpaceForHeatMaps - resultingFocusSpacing * numberOfFocusElements) / (totalNumberOfElements - numberOfFocusElements);
    }
 else {
      resultingNormalSpacing=minSpacing;
      resultingFocusSpacing=(availableSpaceForHeatMaps - (totalNumberOfElements - numberOfFocusElements) * resultingNormalSpacing) / numberOfFocusElements;
    }
  }
 else {
    resultingNormalSpacing=defaultSpacing;
  }
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=heatMapWrapper.getHeatMap(group.getGroupIndex());
    int numElements=heatMap.getNumberOfVisibleElements();
    float currentHeatMapOverheadSize=heatMap.getRequiredOverheadSpacing();
    float size=0;
    if (layout.isUseZoom() && heatMap.isForceMinSpacing()) {
      size=(resultingFocusSpacing * numElements) + currentHeatMapOverheadSize;
    }
 else {
      size=(resultingNormalSpacing * numElements) + currentHeatMapOverheadSize;
    }
    if (size - currentHeatMapOverheadSize < hmMinSpacing)     size=hmMinSpacing + currentHeatMapOverheadSize;
    hashHeatMapHeights.put(group.getGroupIndex(),size);
  }
}",0.9605106888361044
58430,"public float getDetailHeatMapGapHeight(){
  return getDetailHeight() * DETAIL_HEATMAP_GAP_PORTION;
}","protected float getDetailHeatMapGapHeight(){
  return detailHeatMapSpacing;
}",0.6666666666666666
58431,"public void executeDrawingPreprocessing(GL gl,boolean isDisplayListDirty){
  IViewFrustum viewFrustum=view.getViewFrustum();
  if (isDisplayListDirty)   setBar.setHeight(gl,SET_BAR_HEIGHT_PORTION * viewFrustum.getHeight());
  setupLayouts();
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (!heatMapWrapper.isInitialized()) {
      heatMapWrapper.init(gl,glMouseListener,null,dataDomain);
    }
    heatMapWrapper.processEvents();
    heatMapWrapper.calculateDrawingParameters();
    if (isDisplayListDirty) {
      heatMapWrapper.setDisplayListDirty();
    }
  }
  setsChanged=false;
}","public void executeDrawingPreprocessing(GL gl,boolean isDisplayListDirty){
  handleDragging(gl);
  IViewFrustum viewFrustum=view.getViewFrustum();
  if (isDisplayListDirty)   setBar.setHeight(gl,SET_BAR_HEIGHT_PORTION * viewFrustum.getHeight());
  setupLayouts();
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (!heatMapWrapper.isInitialized()) {
      heatMapWrapper.init(gl,glMouseListener,null,dataDomain);
    }
    heatMapWrapper.processEvents();
    heatMapWrapper.calculateDrawingParameters();
    if (isDisplayListDirty) {
      heatMapWrapper.setDisplayListDirty();
    }
  }
  setsChanged=false;
}",0.9821428571428572
58432,"@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(relations.getMapping(heatMapWrapper.getSet()),heatMapWrapper.getContentVAsOfHeatMaps());
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(relations.getMapping(heatMapWrapper.getSet()),heatMapWrapper.getContentVAsOfHeatMaps());
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
}",0.9619771863117872
58433,"@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
}",0.8604651162790697
58434,"@Override public void handleSelectionUpdate(final ISelectionDelta selectionDelta,final boolean scrollToSelection,final String info){
  parentComposite.getDisplay().asyncExec(new Runnable(){
    public void run(){
      updateContentTree();
    }
  }
);
}","@Override public void handleSelectionUpdate(final ISelectionDelta selectionDelta,final boolean scrollToSelection,final String info){
  contentSelectionManager.setDelta(selectionDelta);
  parentComposite.getDisplay().asyncExec(new Runnable(){
    public void run(){
      updateContentTree();
    }
  }
);
}",0.9071428571428573
58435,"/** 
 * Renders an item in the context menu and recursively starts rendering its sub-menus if there are any
 * @param gl
 * @param subMenu
 * @param entry
 * @param xPosition
 * @param yPosition
 */
private void renderItem(GL gl,SubMenu subMenu,IContextMenuEntry entry,float xPosition,float yPosition){
  AContextMenuItem item=(AContextMenuItem)entry;
  Integer itemID=hashContextMenuItemToUniqueID.get(entry);
  if (itemID == mouseOverElement || isSubElementSelected(item))   renderHighlighting(gl,subMenu,yPosition);
  gl.glColor4f(1,1,1,0);
  int iPickingID=pickingManager.getPickingID(masterGLView.getID(),EPickingType.CONTEXT_MENU_SELECTION,itemID);
  gl.glPushName(iPickingID);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(xPosition,yPosition - SPACING / 2,BUTTON_Z);
  gl.glVertex3f(xPosition,yPosition + ITEM_HEIGHT - SPACING / 2,BUTTON_Z);
  gl.glVertex3f(xPosition + subMenu.width - 2 * SPACING,yPosition + ITEM_HEIGHT - SPACING,BUTTON_Z);
  gl.glVertex3f(xPosition + subMenu.width - 2 * SPACING,yPosition - SPACING / 2,BUTTON_Z);
  gl.glEnd();
  gl.glPopName();
  EIconTextures iconTexture=item.getIconTexture();
  if (iconTexture != null) {
    Texture tempTexture=iconManager.getIconTexture(gl,iconTexture);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glColor4f(1,1,1,1);
    gl.glPushName(iPickingID);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(xPosition,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition + ICON_SIZE,TEXT_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(xPosition,yPosition + ICON_SIZE,TEXT_Z);
    gl.glEnd();
    tempTexture.disable();
    gl.glPopName();
  }
  xPosition+=ICON_SIZE + SPACING;
  textRenderer.begin3DRendering();
  textRenderer.setColor(1,1,1,1);
  gl.glDisable(GL.GL_DEPTH_TEST);
  textRenderer.draw3D(item.getText(),xPosition,yPosition + SPACING / 2,TEXT_Z,FONT_SCALING);
  textRenderer.end3DRendering();
  xPosition+=subMenu.maxTextWidth;
  if (item.hasSubItems()) {
    Texture tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SELECTION_RIGHT_EXTENSIBLE_BLACK);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glColor4f(1,1,1,1);
    gl.glPushName(iPickingID);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(xPosition,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition + ICON_SIZE,TEXT_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(xPosition,yPosition + ICON_SIZE,TEXT_Z);
    gl.glEnd();
    tempTexture.disable();
    gl.glPopName();
    if (itemID == mouseOverElement || isSubElementSelected(item)) {
      SubMenu subSubMenu=item.getSubMenu();
      subSubMenu.xOrigin=subMenu.xOrigin + subMenu.width;
      subSubMenu.yOrigin=yPosition + ITEM_HEIGHT;
      float remainingXSpace=fRightBorder - (subMenu.xOrigin + getScaledSizeOf(gl,subMenu.width));
      float scaledWidth=getScaledSizeOf(gl,subSubMenu.width);
      if (remainingXSpace < scaledWidth)       subSubMenu.xOrigin=subMenu.xOrigin - subSubMenu.width;
      float scaledHeight=getScaledSizeOf(gl,subSubMenu.height);
      if (getScaledCoordinate(gl,subSubMenu.yOrigin,subMenu.yOrigin) - fBottomBorder < scaledHeight) {
        float distance=Math.abs(subMenu.yOrigin - fBottomBorder);
        float scaledDistance=getUnscaledSizeOf(gl,distance);
        subSubMenu.yOrigin=subMenu.yOrigin - scaledDistance + subSubMenu.height;
      }
      drawMenu(gl,item.getSubMenu(),false);
    }
  }
}","/** 
 * Renders an item in the context menu and recursively starts rendering its sub-menus if there are any
 * @param gl
 * @param subMenu
 * @param entry
 * @param xPosition
 * @param yPosition
 */
private void renderItem(GL gl,SubMenu subMenu,IContextMenuEntry entry,float xPosition,float yPosition){
  AContextMenuItem item=(AContextMenuItem)entry;
  Integer itemID=hashContextMenuItemToUniqueID.get(entry);
  if (itemID == mouseOverElement || isSubElementSelected(item))   renderHighlighting(gl,subMenu,yPosition);
  gl.glColor4f(0,0,0,0);
  int iPickingID=pickingManager.getPickingID(masterGLView.getID(),EPickingType.CONTEXT_MENU_SELECTION,itemID);
  gl.glPushName(iPickingID);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(xPosition,yPosition - SPACING / 2,BUTTON_Z * 2);
  gl.glVertex3f(xPosition,yPosition + ITEM_HEIGHT - SPACING / 2,BUTTON_Z * 2);
  gl.glVertex3f(xPosition + subMenu.width - 2 * SPACING,yPosition + ITEM_HEIGHT - SPACING,BUTTON_Z * 2);
  gl.glVertex3f(xPosition + subMenu.width - 2 * SPACING,yPosition - SPACING / 2,BUTTON_Z * 2);
  gl.glEnd();
  gl.glPopName();
  EIconTextures iconTexture=item.getIconTexture();
  if (iconTexture != null) {
    Texture tempTexture=iconManager.getIconTexture(gl,iconTexture);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glColor4f(1,1,1,1);
    gl.glPushName(iPickingID);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(xPosition,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition + ICON_SIZE,TEXT_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(xPosition,yPosition + ICON_SIZE,TEXT_Z);
    gl.glEnd();
    tempTexture.disable();
    gl.glPopName();
  }
  xPosition+=ICON_SIZE + SPACING;
  textRenderer.begin3DRendering();
  textRenderer.setColor(1,1,1,1);
  gl.glDisable(GL.GL_DEPTH_TEST);
  textRenderer.draw3D(item.getText(),xPosition,yPosition + SPACING / 2,TEXT_Z,FONT_SCALING);
  textRenderer.end3DRendering();
  xPosition+=subMenu.maxTextWidth;
  if (item.hasSubItems()) {
    Texture tempTexture=iconManager.getIconTexture(gl,EIconTextures.CM_SELECTION_RIGHT_EXTENSIBLE_BLACK);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    gl.glColor4f(1,1,1,1);
    gl.glPushName(iPickingID);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(xPosition,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition,TEXT_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(xPosition + ICON_SIZE,yPosition + ICON_SIZE,TEXT_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(xPosition,yPosition + ICON_SIZE,TEXT_Z);
    gl.glEnd();
    tempTexture.disable();
    gl.glPopName();
    if (itemID == mouseOverElement || isSubElementSelected(item)) {
      SubMenu subSubMenu=item.getSubMenu();
      subSubMenu.xOrigin=subMenu.xOrigin + subMenu.width;
      subSubMenu.yOrigin=yPosition + ITEM_HEIGHT;
      float remainingXSpace=fRightBorder - (subMenu.xOrigin + getScaledSizeOf(gl,subMenu.width));
      float scaledWidth=getScaledSizeOf(gl,subSubMenu.width);
      if (remainingXSpace < scaledWidth)       subSubMenu.xOrigin=subMenu.xOrigin - subSubMenu.width;
      float scaledHeight=getScaledSizeOf(gl,subSubMenu.height);
      if (getScaledCoordinate(gl,subSubMenu.yOrigin,subMenu.yOrigin) - fBottomBorder < scaledHeight) {
        float distance=Math.abs(subMenu.yOrigin - fBottomBorder);
        float scaledDistance=getUnscaledSizeOf(gl,distance);
        subSubMenu.yOrigin=subMenu.yOrigin - scaledDistance + subSubMenu.height;
      }
      drawMenu(gl,item.getSubMenu(),false);
    }
  }
}",0.9967813815300816
58436,"@Override public int getNumberOfElements(SelectionType selectionType){
  int size=0;
  Set<Integer> elements=super.getElements(selectionType);
  for (  Integer element : elements) {
    if (virtualArray.containsElement(element) != 0)     size++;
  }
  return size;
}","@Override public int getNumberOfElements(SelectionType selectionType){
  int size=0;
  Set<Integer> elements=super.getElements(selectionType);
  if (elements == null)   return 0;
  for (  Integer element : elements) {
    if (virtualArray.containsElement(element) != 0)     size++;
  }
  return size;
}",0.9366197183098592
58437,"/** 
 * <p> This method chooses which groups (and therefore heat maps) are to be rendered at the passive side. It does so based on a virtualArray containing all elements to be rendered. </p> <p> This is called in the passive heat map. </p> <p> It also re-sorts the passive group's virtual arrays to minimize crossings and sets elements that are in a passive group but not in the supplied virtual array to   {@link GLHeatMap#SELECTION_HIDDEN} so that they can behidden on demand.
 */
public void choosePassiveHeatMaps(HashMap<Integer,Integer> relationMap,ArrayList<ContentVirtualArray> foreignContentVAs){
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  selectedGroups.clear();
  for (  ContentVirtualArray foreignVa : foreignContentVAs) {
    for (    Integer contentID : foreignVa) {
      int vaIndex=contentVA.indexOf(contentID);
      Group selectedGroup=groupList.getGroupOfVAIndex(vaIndex);
      GroupInfo currentInfo;
      if (!selectedGroups.containsKey(selectedGroup)) {
        currentInfo=new GroupInfo();
        selectedGroups.put(selectedGroup,currentInfo);
      }
 else {
        currentInfo=selectedGroups.get(selectedGroup);
      }
      GLHeatMap heatMap=hashHeatMaps.get(selectedGroup.getGroupIndex());
      ContentVirtualArray heatMapVA=heatMap.getContentVA();
      int index=heatMapVA.indexOf(contentID);
      if (index >= 0)       heatMapVA.move(index,currentInfo.getContainedNrGenes());
 else       System.out.println(""String_Node_Str"");
      currentInfo.increaseContainedNumberOfGenesByOne();
    }
  }
  for (int groupIndex=groupList.size() - 1; groupIndex >= 0; groupIndex--) {
    Group group=groupList.get(groupIndex);
    if (selectedGroups.containsKey(group)) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      int nrGenes=selectedGroups.get(group).getContainedNrGenes();
      ContentVirtualArray contentVA=heatMap.getContentVA();
      for (      ContentVirtualArray foreignVA : foreignContentVAs) {
        Integer foreignContentLastOrdererIndex=0;
        for (int contentIndex=0; contentIndex < nrGenes; contentIndex++) {
          Integer contentID=contentVA.get(contentIndex);
          int foreignIndex=foreignVA.indexOf(contentID);
          if (foreignIndex != -1) {
            foreignVA.move(foreignIndex,foreignContentLastOrdererIndex++);
          }
        }
      }
      for (int foreignVAIndex=foreignContentVAs.size() - 1; foreignVAIndex >= 0; foreignVAIndex--) {
        int lastMovedIndex=0;
        ContentVirtualArray foreignVA=foreignContentVAs.get(foreignVAIndex);
        for (        int foreignID : foreignVA) {
          int contentIndex=contentVA.indexOf(foreignID);
          if (contentIndex != -1) {
            contentVA.move(contentIndex,lastMovedIndex++);
            if (contentIndex != lastMovedIndex - 1)             System.out.println(""String_Node_Str"");
          }
        }
      }
      SelectionDelta contentSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
      for (int contentIndex=nrGenes; contentIndex < contentVA.size(); contentIndex++) {
        SelectionDeltaItem item=new SelectionDeltaItem();
        item.setPrimaryID(contentVA.get(contentIndex));
        item.setSelectionType(GLHeatMap.SELECTION_HIDDEN);
        contentSelectionDelta.add(item);
      }
      SelectionUpdateEvent event=new SelectionUpdateEvent();
      event.setSender(this);
      event.setSelectionDelta(contentSelectionDelta);
      eventPublisher.triggerEvent(event);
    }
  }
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMap.recalculateLayout();
  }
}","/** 
 * <p> This method chooses which groups (and therefore heat maps) are to be rendered at the passive side. It does so based on a virtualArray containing all elements to be rendered. </p> <p> This is called in the passive heat map. </p> <p> It also re-sorts the passive group's virtual arrays to minimize crossings and sets elements that are in a passive group but not in the supplied virtual array to   {@link GLHeatMap#SELECTION_HIDDEN} so that they can behidden on demand.
 */
public void choosePassiveHeatMaps(HashMap<Integer,Integer> relationMap,ArrayList<ContentVirtualArray> foreignContentVAs){
  ContentGroupList groupList=contentVA.getGroupList();
  groupList.updateGroupInfo();
  selectedGroups.clear();
  for (  ContentVirtualArray foreignVa : foreignContentVAs) {
    for (    Integer contentID : foreignVa) {
      int vaIndex=contentVA.indexOf(contentID);
      Group selectedGroup=groupList.getGroupOfVAIndex(vaIndex);
      GroupInfo currentInfo;
      if (!selectedGroups.containsKey(selectedGroup)) {
        currentInfo=new GroupInfo();
        selectedGroups.put(selectedGroup,currentInfo);
      }
 else {
        currentInfo=selectedGroups.get(selectedGroup);
      }
      GLHeatMap heatMap=hashHeatMaps.get(selectedGroup.getGroupIndex());
      ContentVirtualArray heatMapVA=heatMap.getContentVA();
      int index=heatMapVA.indexOf(contentID);
      if (index >= 0)       heatMapVA.move(index,currentInfo.getContainedNrGenes());
 else       System.out.println(""String_Node_Str"");
      currentInfo.increaseContainedNumberOfGenesByOne();
    }
  }
  for (int groupIndex=groupList.size() - 1; groupIndex >= 0; groupIndex--) {
    Group group=groupList.get(groupIndex);
    if (selectedGroups.containsKey(group)) {
      GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
      int nrGenes=selectedGroups.get(group).getContainedNrGenes();
      ContentVirtualArray contentVA=heatMap.getContentVA();
      for (      ContentVirtualArray foreignVA : foreignContentVAs) {
        Integer foreignContentLastOrdererIndex=0;
        for (int contentIndex=0; contentIndex < nrGenes; contentIndex++) {
          Integer contentID=contentVA.get(contentIndex);
          int foreignIndex=foreignVA.indexOf(contentID);
          if (foreignIndex != -1) {
            foreignVA.move(foreignIndex,foreignContentLastOrdererIndex++);
          }
        }
      }
      for (int foreignVAIndex=foreignContentVAs.size() - 1; foreignVAIndex >= 0; foreignVAIndex--) {
        int lastMovedIndex=0;
        ContentVirtualArray foreignVA=foreignContentVAs.get(foreignVAIndex);
        for (        int foreignID : foreignVA) {
          int contentIndex=contentVA.indexOf(foreignID);
          if (contentIndex != -1) {
            contentVA.move(contentIndex,lastMovedIndex++);
          }
        }
      }
      SelectionDelta contentSelectionDelta=new SelectionDelta(EIDType.EXPRESSION_INDEX);
      for (int contentIndex=nrGenes; contentIndex < contentVA.size(); contentIndex++) {
        SelectionDeltaItem item=new SelectionDeltaItem();
        item.setPrimaryID(contentVA.get(contentIndex));
        item.setSelectionType(GLHeatMap.SELECTION_HIDDEN);
        contentSelectionDelta.add(item);
      }
      SelectionUpdateEvent event=new SelectionUpdateEvent();
      event.setSender(this);
      event.setSelectionDelta(contentSelectionDelta);
      eventPublisher.triggerEvent(event);
    }
  }
  for (  Group group : selectedGroups.keySet()) {
    GLHeatMap heatMap=hashHeatMaps.get(group.getGroupIndex());
    heatMap.recalculateLayout();
  }
}",0.98577151540268
58438,"public void render(GL gl){
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  gl.glColor3f(0.6f,0.6f,0.6f);
  gl.glLineWidth(2);
  if (!heatMap.isCaptionsImpossible()) {
    ContentVirtualArray contentVA=heatMap.getContentVA();
    for (    Integer iContentIndex : contentVA) {
      if (heatMap.getContentSelectionManager().checkStatus(SelectionType.SELECTION,iContentIndex) || heatMap.getContentSelectionManager().checkStatus(SelectionType.MOUSE_OVER,iContentIndex)) {
        fieldHeight=selectedFieldHeight;
      }
 else       if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,iContentIndex)) {
        continue;
      }
 else {
        fieldHeight=normalFieldHeight;
      }
      gl.glBegin(GL.GL_LINE_STRIP);
      gl.glVertex3f(xPosition,yPosition,0);
      gl.glVertex3f(xPosition + x,yPosition,0);
      gl.glEnd();
      yPosition-=fieldHeight;
    }
  }
  gl.glBegin(GL.GL_LINE_STRIP);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
}","public void render(GL gl){
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  gl.glColor3f(0.6f,0.6f,0.6f);
  gl.glLineWidth(2);
  if (!heatMap.isCaptionsImpossible()) {
    ContentVirtualArray contentVA=heatMap.getContentVA();
    for (    Integer iContentIndex : contentVA) {
      if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,iContentIndex)) {
        continue;
      }
 else       if (heatMap.getContentSelectionManager().checkStatus(SelectionType.SELECTION,iContentIndex) || heatMap.getContentSelectionManager().checkStatus(SelectionType.MOUSE_OVER,iContentIndex)) {
        fieldHeight=selectedFieldHeight;
      }
 else {
        fieldHeight=normalFieldHeight;
      }
      gl.glBegin(GL.GL_LINE_STRIP);
      gl.glVertex3f(xPosition,yPosition,0);
      gl.glVertex3f(xPosition + x,yPosition,0);
      gl.glEnd();
      yPosition-=fieldHeight;
    }
  }
  gl.glBegin(GL.GL_LINE_STRIP);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
}",0.7712177121771218
58439,"public void render(GL gl){
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  SelectionType currentType;
  float fColumnDegrees=0;
  float fLineDegrees=0;
  fColumnDegrees=90;
  fLineDegrees=0;
  boolean bRenderRefSeq=false;
  String sContent=null;
  String refSeq=null;
  ContentVirtualArray contentVA=heatMap.getContentVA();
  for (  Integer iContentIndex : contentVA) {
    boolean isSelected;
    if (heatMap.getContentSelectionManager().checkStatus(SelectionType.SELECTION,iContentIndex) || heatMap.getContentSelectionManager().checkStatus(SelectionType.MOUSE_OVER,iContentIndex)) {
      fieldHeight=selectedFieldHeight;
      currentType=SelectionType.SELECTION;
      isSelected=true;
    }
 else     if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,iContentIndex)) {
      continue;
    }
 else {
      fieldHeight=normalFieldHeight;
      currentType=SelectionType.NORMAL;
      isSelected=false;
      if (heatMap.isCaptionsImpossible()) {
        yPosition-=fieldHeight;
        continue;
      }
    }
    yPosition-=fieldHeight;
    sContent=getID(iContentIndex,false);
    if (sContent == null)     sContent=""String_Node_Str"";
    textRenderer.setColor(0,0,0,1);
    renderCaption(gl,sContent,0,yPosition,0,fFontScaling);
  }
}","public void render(GL gl){
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  SelectionType currentType;
  float fColumnDegrees=0;
  float fLineDegrees=0;
  fColumnDegrees=90;
  fLineDegrees=0;
  boolean bRenderRefSeq=false;
  String sContent=null;
  String refSeq=null;
  ContentVirtualArray contentVA=heatMap.getContentVA();
  for (  Integer iContentIndex : contentVA) {
    boolean isSelected;
    if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,iContentIndex)) {
      continue;
    }
 else     if (heatMap.getContentSelectionManager().checkStatus(SelectionType.SELECTION,iContentIndex) || heatMap.getContentSelectionManager().checkStatus(SelectionType.MOUSE_OVER,iContentIndex)) {
      fieldHeight=selectedFieldHeight;
      currentType=SelectionType.SELECTION;
      isSelected=true;
    }
 else {
      fieldHeight=normalFieldHeight;
      currentType=SelectionType.NORMAL;
      isSelected=false;
      if (heatMap.isCaptionsImpossible()) {
        yPosition-=fieldHeight;
        continue;
      }
    }
    yPosition-=fieldHeight;
    sContent=getID(iContentIndex,false);
    if (sContent == null)     sContent=""String_Node_Str"";
    textRenderer.setColor(0,0,0,1);
    renderCaption(gl,sContent,0,yPosition,0,fFontScaling);
  }
}",0.7661351556567958
58440,"public void renderSelection(final GL gl,SelectionType selectionType){
  Set<Integer> selectedSet=heatMap.getContentSelectionManager().getElements(selectionType);
  float width=x;
  float yPosition=y;
  float xPosition=0;
  if (selectionType == SelectionType.SELECTION) {
    gl.glColor4fv(SELECTED_COLOR,0);
    gl.glLineWidth(SELECTED_LINE_WIDTH);
  }
 else   if (selectionType == SelectionType.MOUSE_OVER) {
    gl.glColor4fv(MOUSE_OVER_COLOR,0);
    gl.glLineWidth(MOUSE_OVER_LINE_WIDTH);
  }
  int lineIndex=0;
  for (  int tempLine : heatMap.getContentVA()) {
    for (    Integer currentLine : selectedSet) {
      if (currentLine == tempLine) {
        yPosition=contentSpacing.yDistances.get(lineIndex);
        xPosition=0;
        gl.glPushName(heatMap.getPickingManager().getPickingID(heatMap.getID(),EPickingType.HEAT_MAP_LINE_SELECTION,currentLine));
        gl.glBegin(GL.GL_LINE_LOOP);
        gl.glVertex3f(xPosition,yPosition,SELECTION_Z);
        gl.glVertex3f(xPosition,yPosition + selectedFieldHeight,SELECTION_Z);
        gl.glVertex3f(xPosition + width,yPosition + selectedFieldHeight,SELECTION_Z);
        gl.glVertex3f(xPosition + width,yPosition,SELECTION_Z);
        gl.glEnd();
        gl.glPopName();
      }
    }
    lineIndex++;
  }
}","public void renderSelection(final GL gl,SelectionType selectionType){
  Set<Integer> selectedSet=heatMap.getContentSelectionManager().getElements(selectionType);
  float width=x;
  float yPosition=y;
  float xPosition=0;
  if (selectionType == SelectionType.SELECTION) {
    gl.glColor4fv(SELECTED_COLOR,0);
    gl.glLineWidth(SELECTED_LINE_WIDTH);
  }
 else   if (selectionType == SelectionType.MOUSE_OVER) {
    gl.glColor4fv(MOUSE_OVER_COLOR,0);
    gl.glLineWidth(MOUSE_OVER_LINE_WIDTH);
  }
  int lineIndex=0;
  for (  int tempLine : heatMap.getContentVA()) {
    if (heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,tempLine))     continue;
    for (    Integer currentLine : selectedSet) {
      if (currentLine == tempLine) {
        yPosition=contentSpacing.yDistances.get(lineIndex);
        xPosition=0;
        gl.glPushName(heatMap.getPickingManager().getPickingID(heatMap.getID(),EPickingType.HEAT_MAP_LINE_SELECTION,currentLine));
        gl.glBegin(GL.GL_LINE_LOOP);
        gl.glVertex3f(xPosition,yPosition,SELECTION_Z);
        gl.glVertex3f(xPosition,yPosition + selectedFieldHeight,SELECTION_Z);
        gl.glVertex3f(xPosition + width,yPosition + selectedFieldHeight,SELECTION_Z);
        gl.glVertex3f(xPosition + width,yPosition,SELECTION_Z);
        gl.glEnd();
        gl.glPopName();
      }
    }
    lineIndex++;
  }
}",0.9586964759378552
58441,"public void render(final GL gl){
  contentSpacing.yDistances.clear();
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  int iCount=0;
  for (  Integer iContentIndex : heatMap.getContentVA()) {
    iCount++;
    if (heatMap.getContentSelectionManager().checkStatus(SelectionType.SELECTION,iContentIndex) || heatMap.getContentSelectionManager().checkStatus(SelectionType.MOUSE_OVER,iContentIndex)) {
      fieldHeight=selectedFieldHeight;
    }
 else     if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,iContentIndex)) {
      contentSpacing.yDistances.add(yPosition);
      continue;
    }
 else {
      fieldHeight=normalFieldHeight;
    }
    yPosition-=fieldHeight;
    xPosition=0;
    for (    Integer iStorageIndex : heatMap.getStorageVA()) {
      renderElement(gl,iStorageIndex,iContentIndex,yPosition,xPosition,fieldHeight,fieldWidth);
      xPosition+=fieldWidth;
    }
    contentSpacing.yDistances.add(yPosition);
  }
}","public void render(final GL gl){
  contentSpacing.yDistances.clear();
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  int iCount=0;
  for (  Integer iContentIndex : heatMap.getContentVA()) {
    iCount++;
    if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,iContentIndex)) {
      contentSpacing.yDistances.add(yPosition);
      continue;
    }
 else     if (heatMap.getContentSelectionManager().checkStatus(SelectionType.SELECTION,iContentIndex) || heatMap.getContentSelectionManager().checkStatus(SelectionType.MOUSE_OVER,iContentIndex)) {
      fieldHeight=selectedFieldHeight;
    }
 else {
      fieldHeight=normalFieldHeight;
    }
    yPosition-=fieldHeight;
    xPosition=0;
    for (    Integer iStorageIndex : heatMap.getStorageVA()) {
      renderElement(gl,iStorageIndex,iContentIndex,yPosition,xPosition,fieldHeight,fieldWidth);
      xPosition+=fieldWidth;
    }
    contentSpacing.yDistances.add(yPosition);
  }
}",0.7954319761668321
58442,"@Override public void display(GL gl){
  compareViewStateController.drawActiveElements(gl);
  gl.glCallList(iGLDisplayListToCall);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
}","@Override public void display(GL gl){
  compareViewStateController.drawActiveElements(gl);
  if (bIsDisplayListDirtyLocal) {
    bIsDisplayListDirtyLocal=false;
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    iGLDisplayListToCall=iGLDisplayListIndexLocal;
  }
  gl.glCallList(iGLDisplayListToCall);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
  checkForHits(gl);
}",0.6585365853658537
58443,"@Override public void displayLocal(GL gl){
  processEvents();
  if (wasMouseWheeled) {
    wasMouseWheeled=false;
    compareViewStateController.handleMouseWheel(gl,wheelAmount,wheelPoint);
  }
  if (!isVisible())   return;
  pickingManager.handlePicking(this,gl);
  compareViewStateController.executeDrawingPreprocessing(gl,bIsDisplayListDirtyLocal);
  if (bIsDisplayListDirtyLocal) {
    bIsDisplayListDirtyLocal=false;
    buildDisplayList(gl,iGLDisplayListIndexLocal);
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
}","@Override public void displayLocal(GL gl){
  processEvents();
  if (wasMouseWheeled) {
    wasMouseWheeled=false;
    compareViewStateController.handleMouseWheel(gl,wheelAmount,wheelPoint);
  }
  if (!isVisible())   return;
  pickingManager.handlePicking(this,gl);
  compareViewStateController.executeDrawingPreprocessing(gl,bIsDisplayListDirtyLocal);
  display(gl);
}",0.7763440860215054
58444,"@Override public void displayRemote(GL gl){
  if (bIsDisplayListDirtyRemote) {
    bIsDisplayListDirtyRemote=false;
    buildDisplayList(gl,iGLDisplayListIndexRemote);
  }
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  display(gl);
  checkForHits(gl);
}","@Override public void displayRemote(GL gl){
  throw new IllegalStateException(""String_Node_Str"");
}",0.3585434173669468
58445,"private Float getDetailYCoordinateByContentID(int contentID){
  Group group=getGroupFromContentIndex(contentVA.indexOf(contentID));
  if (group == null)   return null;
  int groupIndex=group.getGroupIndex();
  GLHeatMap heatMap=hashHeatMaps.get(groupIndex);
  if (heatMap == null)   return null;
  int contentIndex=heatMap.getContentVA().indexOf(contentID);
  if (contentIndex == -1)   return null;
  Vec3f heatMapPosition=hashHeatMapPositions.get(groupIndex);
  int numTotalSamples=0;
  float totalHeatMapOverheadSpacing=0;
  for (  Group tempGroup : selectedGroups.keySet()) {
    GLHeatMap tempHeatMap=hashHeatMaps.get(tempGroup.getGroupIndex());
    numTotalSamples+=tempHeatMap.getNumberOfVisibleElements();
    totalHeatMapOverheadSpacing+=tempHeatMap.getRequiredOverheadSpacing();
  }
  float heatMapHeight=layout.getDetailHeatMapHeight(heatMap.getNumberOfVisibleElements(),numTotalSamples,selectedGroups.size(),heatMap.getRequiredOverheadSpacing(),totalHeatMapOverheadSpacing);
  Float elementInHMPosition=heatMap.getYCoordinateByContentIndex(contentIndex);
  if (elementInHMPosition == null)   return null;
 else   return heatMapPosition.y() + (heatMapHeight - elementInHMPosition);
}","private Float getDetailYCoordinateByContentID(int contentID){
  Group group=getGroupFromContentIndex(contentVA.indexOf(contentID));
  if (group == null)   return null;
  int groupIndex=group.getGroupIndex();
  GLHeatMap heatMap=hashHeatMaps.get(groupIndex);
  if (heatMap == null)   return null;
  int contentIndex=heatMap.getContentVA().indexOf(contentID);
  if (contentIndex == -1)   return null;
  Vec3f heatMapPosition=hashHeatMapPositions.get(groupIndex);
  int numTotalSamples=0;
  float totalHeatMapOverheadSpacing=0;
  for (  Group tempGroup : selectedGroups.keySet()) {
    GLHeatMap tempHeatMap=hashHeatMaps.get(tempGroup.getGroupIndex());
    numTotalSamples+=tempHeatMap.getNumberOfVisibleElements();
    totalHeatMapOverheadSpacing+=tempHeatMap.getRequiredOverheadSpacing();
  }
  float heatMapHeight=layout.getDetailHeatMapHeight(heatMap.getNumberOfVisibleElements(),numTotalSamples,selectedGroups.size(),heatMap.getRequiredOverheadSpacing(),totalHeatMapOverheadSpacing);
  Float elementInHMPosition=heatMap.getYCoordinateByContentIndex(contentIndex);
  if (elementInHMPosition == null)   return null;
 else {
    heatMap.getYCoordinateByContentIndex(contentIndex);
    return heatMapPosition.y() + (heatMapHeight - elementInHMPosition);
  }
}",0.9738775510204082
58446,"@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.selectGroupsFromContentVAList(relations.getMapping(heatMapWrapper.getSet()),heatMapWrapper.getContentVAsOfHeatMaps());
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void drawActiveElements(GL gl){
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.handleDragging(gl,glMouseListener)) {
      view.setDisplayListDirty();
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    if (heatMapWrapper.isNewSelection()) {
      for (      HeatMapWrapper wrapper : heatMapWrappers) {
        if (wrapper != heatMapWrapper) {
          wrapper.choosePassiveHeatMaps(relations.getMapping(heatMapWrapper.getSet()),heatMapWrapper.getContentVAsOfHeatMaps());
        }
      }
      view.setDisplayListDirty();
      break;
    }
  }
  for (  HeatMapWrapper heatMapWrapper : heatMapWrappers) {
    heatMapWrapper.drawRemoteItems(gl,glMouseListener,pickingManager);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}",0.970838396111786
58447,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  if (bRectangleSelection)   return;
  SelectionType selectionType;
switch (ePickingType) {
case SCATTER_POINT_SELECTION:
    if (bMainViewZoomDragged)     return;
  iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
  selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.DESELECTED;
break;
case DRAGGED:
selectionType=SelectionType.SELECTION;
break;
default :
return;
}
createContentSelection(selectionType,iExternalID);
break;
case SCATTER_MATRIX_SELECTION:
iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.DESELECTED;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
default :
return;
}
createStorageSelection(selectionType,iExternalID);
break;
case SCATTER_MAIN_ZOOM:
switch (pickingMode) {
case CLICKED:
if (!bMainViewZoomDragged) {
bMainViewZoomDragged=true;
iCurrentDragZoom=iExternalID;
opengl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
opengl.glEndList();
opengl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
opengl.glEndList();
opengl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
opengl.glEndList();
opengl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
opengl.glEndList();
}
break;
default :
return;
}
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  if (bRectangleSelection)   return;
  SelectionType selectionType;
switch (ePickingType) {
case SCATTER_POINT_SELECTION:
    if (bMainViewZoomDragged)     return;
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.DESELECTED;
break;
case DRAGGED:
selectionType=SelectionType.SELECTION;
break;
default :
return;
}
createContentSelection(selectionType,iExternalID);
break;
case SCATTER_MATRIX_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.DESELECTED;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
default :
return;
}
createStorageSelection(selectionType,iExternalID);
break;
case SCATTER_MAIN_ZOOM:
switch (pickingMode) {
case CLICKED:
if (!bMainViewZoomDragged) {
bMainViewZoomDragged=true;
iCurrentDragZoom=iExternalID;
bClearSomeDisplayLists=true;
}
break;
default :
return;
}
break;
}
}",0.8148407420371019
58448,"@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  detailLevel=EDetailLevel.HIGH;
  updateMaxAxis();
  renderStyle.setTextureNr(MAX_AXES,MAX_AXES);
  resetFullTextures();
  resetSelectionTextures();
  initTextures();
  initSelectionTextures();
  selectAxesfromExternal();
  clearAllSelections();
  opengl=gl;
}","@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  detailLevel=EDetailLevel.HIGH;
  updateMaxAxis();
  renderStyle.setTextureNr(MAX_AXES,MAX_AXES);
  resetFullTextures();
  resetSelectionTextures();
  initTextures();
  initSelectionTextures();
  selectAxesfromExternal();
  clearAllSelections();
}",0.9830065359477124
58449,"@Override public void initLocal(GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(6);
  iGLDisplayListIndexCoord=iGLDisplayListIndexLocal + 1;
  iGLDisplayListIndexMouseOver=iGLDisplayListIndexLocal + 2;
  iGLDisplayListIndexSelection=iGLDisplayListIndexLocal + 3;
  iGLDisplayListIndexMatrixFull=iGLDisplayListIndexLocal + 4;
  iGLDisplayListIndexMatrixSelection=iGLDisplayListIndexLocal + 5;
  GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
    public void run(){
      parentGLCanvas.getParentComposite().addKeyListener(glKeyListener);
    }
  }
);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
  bRenderMatrix=true;
  bOnlyRenderHalfMatrix=true;
  renderStyle.setIsEmbedded(true);
}","@Override public void initLocal(GL gl){
  GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
    public void run(){
      parentGLCanvas.getParentComposite().addKeyListener(glKeyListener);
    }
  }
);
  init(gl);
  iGLDisplayListIndexLocal=gl.glGenLists(7);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  iGLDisplayListIndexCoord=iGLDisplayListIndexLocal + 1;
  iGLDisplayListIndexMouseOver=iGLDisplayListIndexLocal + 2;
  iGLDisplayListIndexSelection=iGLDisplayListIndexLocal + 3;
  iGLDisplayListIndexMatrixFull=iGLDisplayListIndexLocal + 4;
  iGLDisplayListIndexMatrixSelection=iGLDisplayListIndexLocal + 5;
  gl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMatrixFull,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMatrixSelection,GL.GL_COMPILE);
  gl.glEndList();
  bRenderMatrix=true;
  bOnlyRenderHalfMatrix=true;
  renderStyle.setIsEmbedded(true);
}",0.5106604264170567
58450,"@Override public void displayLocal(GL gl){
  processEvents();
  if (!isVisible())   return;
  if (set == null)   return;
  if (detailLevel == EDetailLevel.HIGH) {
    GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
    if (bMainViewZoomDragged) {
      Point pCurrentMousePoint=glMouseListener.getPickedPoint();
      float[] fCurrentMousePoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pCurrentMousePoint.x,pCurrentMousePoint.y);
      float x=(fCurrentMousePoint[0] - XYAXISDISTANCE);
      float y=(fCurrentMousePoint[1] - XYAXISDISTANCE);
      if (bRenderMatrix) {
        x-=renderStyle.getCenterXOffset();
        y-=renderStyle.getCenterYOffset();
      }
      x=x / renderStyle.getAxisWidth();
      y=y / renderStyle.getAxisHeight();
      handleMainZoomAxes(x,y);
      if (glMouseListener.wasLeftMouseButtonPressed()) {
        bMainViewZoomDragged=false;
        iCurrentDragZoom=-1;
        setDisplayListDirty();
        bUpdateMainView=true;
      }
    }
    if (glMouseListener.wasMouseDragged() && (!bRender2Axis)) {
      bRectangleSelection=true;
      Point pDragEndPoint=glMouseListener.getPickedPoint();
      Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
      fRectangleDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
      fRectangleDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
      float[] fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      renderRectangularSelection(gl,fRectangleDragStartPoint[0],fRectangleDragStartPoint[1],ScatterPlotRenderStyle.SELECTION_RECTANGLE_Z,fRectangleDragEndPoint[0] - fRectangleDragStartPoint[0],fRectangleDragEndPoint[1] - fRectangleDragStartPoint[1],fArMappingColor);
    }
    if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
      bRectangleSelection=false;
      setDisplayListDirty();
      if (bRenderMatrix)       gl.glTranslatef(renderStyle.getCenterXOffset(),renderStyle.getCenterYOffset(),0);
      updateSelection();
      if (bRenderMatrix)       gl.glTranslatef(-renderStyle.getCenterXOffset(),-renderStyle.getCenterYOffset(),0);
      bUpdateSelection=true;
      bUpdateSelectionTexures=true;
    }
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}","@Override public void displayLocal(GL gl){
  processEvents();
  textRenderer.setColor(0,0,0,1);
  renderNumber(gl,""String_Node_Str"",0,0);
  if (!isVisible())   return;
  if (set == null)   return;
  if (detailLevel == EDetailLevel.HIGH) {
    GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
    if (bMainViewZoomDragged) {
      if (bClearSomeDisplayLists) {
        gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
        gl.glEndList();
        bClearSomeDisplayLists=false;
      }
      Point pCurrentMousePoint=glMouseListener.getPickedPoint();
      float[] fCurrentMousePoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pCurrentMousePoint.x,pCurrentMousePoint.y);
      float x=(fCurrentMousePoint[0] - XYAXISDISTANCE);
      float y=(fCurrentMousePoint[1] - XYAXISDISTANCE);
      if (bRenderMatrix) {
        x-=renderStyle.getCenterXOffset();
        y-=renderStyle.getCenterYOffset();
      }
      x=x / renderStyle.getAxisWidth();
      y=y / renderStyle.getAxisHeight();
      handleMainZoomAxes(x,y);
      if (glMouseListener.wasLeftMouseButtonPressed()) {
        bMainViewZoomDragged=false;
        iCurrentDragZoom=-1;
        setDisplayListDirty();
        bUpdateMainView=true;
      }
    }
    if (glMouseListener.wasMouseDragged() && (!bRender2Axis)) {
      bRectangleSelection=true;
      Point pDragEndPoint=glMouseListener.getPickedPoint();
      Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
      fRectangleDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
      fRectangleDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
      float[] fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      renderRectangularSelection(gl,fRectangleDragStartPoint[0],fRectangleDragStartPoint[1],ScatterPlotRenderStyle.SELECTION_RECTANGLE_Z,fRectangleDragEndPoint[0] - fRectangleDragStartPoint[0],fRectangleDragEndPoint[1] - fRectangleDragStartPoint[1],fArMappingColor);
    }
    if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
      bRectangleSelection=false;
      setDisplayListDirty();
      if (bRenderMatrix)       gl.glTranslatef(renderStyle.getCenterXOffset(),renderStyle.getCenterYOffset(),0);
      updateSelection();
      if (bRenderMatrix)       gl.glTranslatef(-renderStyle.getCenterXOffset(),-renderStyle.getCenterYOffset(),0);
      bUpdateSelection=true;
      bUpdateSelectionTexures=true;
    }
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.9112426035502958
58451,"@Override public void initLocal(GL gl){
  GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
    public void run(){
      parentGLCanvas.getParentComposite().addKeyListener(glKeyListener);
    }
  }
);
  init(gl);
  iGLDisplayListIndexLocal=gl.glGenLists(7);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  iGLDisplayListIndexCoord=iGLDisplayListIndexLocal + 1;
  iGLDisplayListIndexMouseOver=iGLDisplayListIndexLocal + 2;
  iGLDisplayListIndexSelection=iGLDisplayListIndexLocal + 3;
  iGLDisplayListIndexMatrixFull=iGLDisplayListIndexLocal + 4;
  iGLDisplayListIndexMatrixSelection=iGLDisplayListIndexLocal + 5;
  gl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMatrixFull,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMatrixSelection,GL.GL_COMPILE);
  gl.glEndList();
  bRenderMatrix=true;
  bOnlyRenderHalfMatrix=true;
  renderStyle.setIsEmbedded(true);
}","@Override public void initLocal(GL gl){
  GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
    public void run(){
      parentGLCanvas.getParentComposite().addKeyListener(glKeyListener);
    }
  }
);
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListIndexCoord=gl.glGenLists(1);
  iGLDisplayListIndexMouseOver=gl.glGenLists(1);
  iGLDisplayListIndexSelection=gl.glGenLists(1);
  iGLDisplayListIndexMatrixFull=gl.glGenLists(1);
  iGLDisplayListIndexMatrixSelection=gl.glGenLists(1);
  init(gl);
  gl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMatrixFull,GL.GL_COMPILE);
  gl.glEndList();
  gl.glNewList(iGLDisplayListIndexMatrixSelection,GL.GL_COMPILE);
  gl.glEndList();
  bRenderMatrix=true;
  bOnlyRenderHalfMatrix=true;
  renderStyle.setIsEmbedded(true);
}",0.7943884261288908
58452,"/** 
 * render the Mouseover_Label in the Mainview, called by renderMouseOver(GL gl)
 * @param gl
 * @param x
 * @param y
 * @param fArMappingColor
 * @param fOpacity
 * @param iContentIndex
 */
private void renderMouseOverLabel(GL gl,float x,float y,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  x=x + 0.1f;
  gl.glTranslatef(x,y,0);
  String sLabel=null;
  String genLabel=null;
  if (useCase.getDataDomain() == EDataDomain.GENETIC_DATA) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.GENE_SYMBOL,iContentIndex);
  }
 else   if (useCase.getDataDomain() == EDataDomain.UNSPECIFIED) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.UNSPECIFIED,iContentIndex);
  }
  if (genLabel == null || genLabel.equals(""String_Node_Str""))   genLabel=""String_Node_Str"";
  String tmpString=currentSelection.toString();
  if (contentSelectionManager.checkStatus(currentSelection,iContentIndex))   sLabel=tmpString + ""String_Node_Str"" + genLabel+ ""String_Node_Str""+ +set.get(storageVA.get(iSelectedAxisIndexX)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(iSelectedAxisIndexY)).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   if (contentSelectionManager.checkStatus(SelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(storageVA.get(iSelectedAxisIndexX)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(iSelectedAxisIndexY)).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(storageVA.get(iSelectedAxisIndexX)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(iSelectedAxisIndexY)).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,ScatterPlotRenderStyle.LABEL_Z);
  gl.glVertex3f(0.0f,boxHight,ScatterPlotRenderStyle.LABEL_Z);
  gl.glVertex3f(boxLengh,boxHight,ScatterPlotRenderStyle.LABEL_Z);
  gl.glVertex3f(boxLengh,-0.02f,ScatterPlotRenderStyle.LABEL_Z);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,0);
}","/** 
 * render the Mouseover_Label in the Mainview, called by renderMouseOver(GL gl)
 * @param gl
 * @param x
 * @param y
 * @param fArMappingColor
 * @param fOpacity
 * @param iContentIndex
 */
private void renderMouseOverLabel(GL gl,float x,float y,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.dispose();
  textRenderer=new CaleydoTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),false);
  textRenderer.setColor(0,0,0,1);
  x=x + 0.1f;
  gl.glTranslatef(x,y,0);
  String sLabel=null;
  String genLabel=null;
  if (useCase.getDataDomain() == EDataDomain.GENETIC_DATA) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.GENE_SYMBOL,iContentIndex);
  }
 else   if (useCase.getDataDomain() == EDataDomain.UNSPECIFIED) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.UNSPECIFIED,iContentIndex);
  }
  if (genLabel == null || genLabel.equals(""String_Node_Str""))   genLabel=""String_Node_Str"";
  String tmpString=currentSelection.toString();
  if (contentSelectionManager.checkStatus(currentSelection,iContentIndex))   sLabel=tmpString + ""String_Node_Str"" + genLabel+ ""String_Node_Str""+ +set.get(storageVA.get(iSelectedAxisIndexX)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(iSelectedAxisIndexY)).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   if (contentSelectionManager.checkStatus(SelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(storageVA.get(iSelectedAxisIndexX)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(iSelectedAxisIndexY)).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(storageVA.get(iSelectedAxisIndexX)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(iSelectedAxisIndexY)).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,ScatterPlotRenderStyle.LABEL_Z);
  gl.glVertex3f(0.0f,boxHight,ScatterPlotRenderStyle.LABEL_Z);
  gl.glVertex3f(boxLengh,boxHight,ScatterPlotRenderStyle.LABEL_Z);
  gl.glVertex3f(boxLengh,-0.02f,ScatterPlotRenderStyle.LABEL_Z);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,0);
}",0.9800312554262892
58453,"/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      float y=fCurrentHeight + XYAXISDISTANCE;
      y=transformOnYZoom(y,renderStyle.getAxisHeight(),XYAXISDISTANCE) - fHeightHalf;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,y);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float fRoationAngle=-45;
      float x=fCurrentWidth + XYAXISDISTANCE;
      x=transformOnXZoom(x,renderStyle.getAxisWidth(),XYAXISDISTANCE) - fWidthHalf;
      y=fYPosition + AXIS_MARKER_WIDTH - fHeight;
      gl.glTranslatef(x,y,0);
      gl.glRotatef(fRoationAngle,0,0,1);
      renderNumber(gl,Formatter.formatNumber(fNumber),0,0);
      gl.glRotatef(-fRoationAngle,0,0,1);
      gl.glTranslatef(-x,-y,0);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    float tmpx=fCurrentWidth + XYAXISDISTANCE;
    tmpx=transformOnXZoom(tmpx,renderStyle.getAxisWidth(),XYAXISDISTANCE);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(tmpx,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(tmpx,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    float tmpy=fCurrentHeight + XYAXISDISTANCE;
    tmpy=transformOnYZoom(tmpy,renderStyle.getAxisHeight(),XYAXISDISTANCE);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,tmpy,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,tmpy,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(bRender2Axis),renderStyle.getAxisHeight() + 1.3f * XYAXISDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexX)).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexX2)).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(bRender2Axis),-renderStyle.getAxisHeight() - 1.3f * XYAXISDISTANCE,0);
  gl.glTranslatef(renderStyle.getAxisWidth() + 1.7f * XYAXISDISTANCE,renderStyle.getLabelHeight(bRender2Axis),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexY)).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexY2)).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getAxisWidth() - 1.7f * XYAXISDISTANCE,-renderStyle.getLabelHeight(bRender2Axis),0);
}","/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.dispose();
  textRenderer=new CaleydoTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),false);
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      float y=fCurrentHeight + XYAXISDISTANCE;
      y=transformOnYZoom(y,renderStyle.getAxisHeight(),XYAXISDISTANCE) - fHeightHalf;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,y);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float fRoationAngle=-45;
      float x=fCurrentWidth + XYAXISDISTANCE;
      x=transformOnXZoom(x,renderStyle.getAxisWidth(),XYAXISDISTANCE) - fWidthHalf;
      y=fYPosition + AXIS_MARKER_WIDTH - fHeight;
      gl.glTranslatef(x,y,0);
      gl.glRotatef(fRoationAngle,0,0,1);
      renderNumber(gl,Formatter.formatNumber(fNumber),0,0);
      gl.glRotatef(-fRoationAngle,0,0,1);
      gl.glTranslatef(-x,-y,0);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    float tmpx=fCurrentWidth + XYAXISDISTANCE;
    tmpx=transformOnXZoom(tmpx,renderStyle.getAxisWidth(),XYAXISDISTANCE);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(tmpx,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(tmpx,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    float tmpy=fCurrentHeight + XYAXISDISTANCE;
    tmpy=transformOnYZoom(tmpy,renderStyle.getAxisHeight(),XYAXISDISTANCE);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,tmpy,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,tmpy,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(bRender2Axis),renderStyle.getAxisHeight() + 1.3f * XYAXISDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexX)).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexX2)).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(bRender2Axis),-renderStyle.getAxisHeight() - 1.3f * XYAXISDISTANCE,0);
  gl.glTranslatef(renderStyle.getAxisWidth() + 1.7f * XYAXISDISTANCE,renderStyle.getLabelHeight(bRender2Axis),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexY)).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(storageVA.get(iSelectedAxisIndexY2)).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getAxisWidth() - 1.7f * XYAXISDISTANCE,-renderStyle.getLabelHeight(bRender2Axis),0);
}",0.9875122163101314
58454,"@Override public void displayLocal(GL gl){
  processEvents();
  textRenderer.setColor(0,0,0,1);
  renderNumber(gl,""String_Node_Str"",0,0);
  if (!isVisible())   return;
  if (set == null)   return;
  if (detailLevel == EDetailLevel.HIGH) {
    GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
    if (bMainViewZoomDragged) {
      if (bClearSomeDisplayLists) {
        gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
        gl.glEndList();
        bClearSomeDisplayLists=false;
      }
      Point pCurrentMousePoint=glMouseListener.getPickedPoint();
      float[] fCurrentMousePoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pCurrentMousePoint.x,pCurrentMousePoint.y);
      float x=(fCurrentMousePoint[0] - XYAXISDISTANCE);
      float y=(fCurrentMousePoint[1] - XYAXISDISTANCE);
      if (bRenderMatrix) {
        x-=renderStyle.getCenterXOffset();
        y-=renderStyle.getCenterYOffset();
      }
      x=x / renderStyle.getAxisWidth();
      y=y / renderStyle.getAxisHeight();
      handleMainZoomAxes(x,y);
      if (glMouseListener.wasLeftMouseButtonPressed()) {
        bMainViewZoomDragged=false;
        iCurrentDragZoom=-1;
        setDisplayListDirty();
        bUpdateMainView=true;
      }
    }
    if (glMouseListener.wasMouseDragged() && (!bRender2Axis)) {
      bRectangleSelection=true;
      Point pDragEndPoint=glMouseListener.getPickedPoint();
      Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
      fRectangleDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
      fRectangleDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
      float[] fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      renderRectangularSelection(gl,fRectangleDragStartPoint[0],fRectangleDragStartPoint[1],ScatterPlotRenderStyle.SELECTION_RECTANGLE_Z,fRectangleDragEndPoint[0] - fRectangleDragStartPoint[0],fRectangleDragEndPoint[1] - fRectangleDragStartPoint[1],fArMappingColor);
    }
    if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
      bRectangleSelection=false;
      setDisplayListDirty();
      if (bRenderMatrix)       gl.glTranslatef(renderStyle.getCenterXOffset(),renderStyle.getCenterYOffset(),0);
      updateSelection();
      if (bRenderMatrix)       gl.glTranslatef(-renderStyle.getCenterXOffset(),-renderStyle.getCenterYOffset(),0);
      bUpdateSelection=true;
      bUpdateSelectionTexures=true;
    }
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}","@Override public void displayLocal(GL gl){
  processEvents();
  if (!isVisible())   return;
  if (set == null)   return;
  if (detailLevel == EDetailLevel.HIGH) {
    GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
    if (bMainViewZoomDragged) {
      if (bClearSomeDisplayLists) {
        gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexLocal,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexSelection,GL.GL_COMPILE);
        gl.glEndList();
        gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
        gl.glEndList();
        bClearSomeDisplayLists=false;
      }
      Point pCurrentMousePoint=glMouseListener.getPickedPoint();
      float[] fCurrentMousePoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pCurrentMousePoint.x,pCurrentMousePoint.y);
      float x=(fCurrentMousePoint[0] - XYAXISDISTANCE);
      float y=(fCurrentMousePoint[1] - XYAXISDISTANCE);
      if (bRenderMatrix) {
        x-=renderStyle.getCenterXOffset();
        y-=renderStyle.getCenterYOffset();
      }
      x=x / renderStyle.getAxisWidth();
      y=y / renderStyle.getAxisHeight();
      handleMainZoomAxes(x,y);
      if (glMouseListener.wasLeftMouseButtonPressed()) {
        bMainViewZoomDragged=false;
        iCurrentDragZoom=-1;
        setDisplayListDirty();
        bUpdateMainView=true;
      }
    }
    if (glMouseListener.wasMouseDragged() && (!bRender2Axis)) {
      bRectangleSelection=true;
      Point pDragEndPoint=glMouseListener.getPickedPoint();
      Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
      fRectangleDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
      fRectangleDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
      float[] fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      renderRectangularSelection(gl,fRectangleDragStartPoint[0],fRectangleDragStartPoint[1],ScatterPlotRenderStyle.SELECTION_RECTANGLE_Z,fRectangleDragEndPoint[0] - fRectangleDragStartPoint[0],fRectangleDragEndPoint[1] - fRectangleDragStartPoint[1],fArMappingColor);
    }
    if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
      bRectangleSelection=false;
      setDisplayListDirty();
      if (bRenderMatrix)       gl.glTranslatef(renderStyle.getCenterXOffset(),renderStyle.getCenterYOffset(),0);
      updateSelection();
      if (bRenderMatrix)       gl.glTranslatef(-renderStyle.getCenterXOffset(),-renderStyle.getCenterYOffset(),0);
      bUpdateSelection=true;
      bUpdateSelectionTexures=true;
    }
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.9877022653721684
58455,"/** 
 * Render the Histogram and the labels for the given Axis
 * @param gl
 * @param x
 * @param y
 * @param width
 * @param height
 * @param selected_Axis
 */
private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  renderRectangularSelection(gl,x,y,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z,width,height,fArMappingColor);
  String sLabel=set.get(storageVA.get(selected_Axis)).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  float fRotation=45;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  float tmpx=x + width + width / 4;
  float tmpy=y + height / 6;
  gl.glTranslatef(tmpx,tmpy,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.setColor(0,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-tmpx,-tmpy,0);
  gl.glPopAttrib();
  gl.glLineWidth(0.1f);
  tmpx=x + width + width / 6f;
  tmpy=y + (height / 6);
  if (selected_Axis > 0) {
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(x + width,tmpy,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glVertex3f(tmpx,tmpy,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glEnd();
  }
  if (selected_Axis < MAX_AXES - 1) {
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(x + width,y - (height / 10f),ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glVertex3f(tmpx,tmpy,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glEnd();
  }
}","/** 
 * Render the Histogram and the labels for the given Axis
 * @param gl
 * @param x
 * @param y
 * @param width
 * @param height
 * @param selected_Axis
 */
private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  renderRectangularSelection(gl,x,y,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z,width,height,fArMappingColor);
  String sLabel=set.get(storageVA.get(selected_Axis)).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  textRenderer.dispose();
  textRenderer=new CaleydoTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),false);
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float fRotation=45;
  float tmpx=x + width + width / 4;
  float tmpy=y + height / 6;
  gl.glTranslatef(tmpx,tmpy,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.setColor(0,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-tmpx,-tmpy,0);
  gl.glLineWidth(0.1f);
  tmpx=x + width + width / 6f;
  tmpy=y + (height / 6);
  if (selected_Axis > 0) {
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(x + width,tmpy,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glVertex3f(tmpx,tmpy,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glEnd();
  }
  if (selected_Axis < MAX_AXES - 1) {
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(x + width,y - (height / 10f),ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glVertex3f(tmpx,tmpy,ScatterPlotRenderStyle.MATRIX_HISTOGRAMM_Z);
    gl.glEnd();
  }
}",0.5097485165300932
58456,"@Override public void clearAllSelections(){
  contentSelectionManager.clearSelections();
  AlSelectionTypes.clear();
  AlSelectionTypes.add(SelectionType.SELECTION);
  addSelectionType();
  fRectangleDragStartPoint=new float[3];
  fRectangleDragEndPoint=new float[3];
  bUpdateSelection=true;
  bUpdateSelectionTexures=true;
  setDisplayListDirty();
}","@Override public void clearAllSelections(){
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  AlSelectionTypes.clear();
  AlSelectionTypes.add(SelectionType.SELECTION);
  addSelectionType();
  fRectangleDragStartPoint=new float[3];
  fRectangleDragEndPoint=new float[3];
  bUpdateSelection=true;
  bUpdateSelectionTexures=true;
  setDisplayListDirty();
}",0.9397590361445785
58457,"public DataWindowsDisk(){
  super();
  this.levelOfDetailLimits=new double[3];
  levelOfDetailLimits[0]=0.8;
  levelOfDetailLimits[1]=0.96;
  levelOfDetailLimits[2]=1;
  eyeTrackerBorder=0.8;
  eyeTrackerPrecision=0.1;
}","public DataWindowsDisk(){
  super();
  this.levelOfDetailLimits=new double[3];
  levelOfDetailLimits[0]=0.8;
  levelOfDetailLimits[1]=0.96;
  levelOfDetailLimits[2]=1;
  eyeTrackerBorder=0.8;
  eyeTrackerPrecision=0.1;
  lineFactor=40;
}",0.962800875273523
58458,"public void drawLine(PoincareNode node1,PoincareNode node2,int numberOfDetails,int mode){
  Point2D.Double startingPoint=node1.getPosition();
  double width=this.getMetric(startingPoint,lineWidth);
  gl.glLineWidth((float)width);
  gl.glBegin(GL.GL_LINE);
  gl.glColor3i(0,0,0);
  gl.glVertex3d(node1.getPosition().getX() * displayScaleFactor + (canvasWidth / 2),node1.getPosition().getY() * displayScaleFactor + canvasHeight / 2,0);
  gl.glVertex3d(node2.getPosition().getX() * displayScaleFactor + (canvasWidth / 2),node2.getPosition().getY() * displayScaleFactor + canvasHeight / 2,0);
  gl.glEnd();
}","public void drawLine(PoincareNode node1,PoincareNode node2,int numberOfDetails,int mode){
  Point2D.Double startingPoint=node1.getPosition();
  double width=this.getMetric(startingPoint,lineWidth) * lineFactor;
  gl.glLineWidth((float)width);
  gl.glBegin(GL.GL_LINE_STRIP);
  gl.glColor3i(0,0,0);
  gl.glVertex3d(node1.getPosition().getX() * displayScaleFactor + (canvasWidth / 2),node1.getPosition().getY() * displayScaleFactor + canvasHeight / 2,0);
  gl.glVertex3d(node2.getPosition().getX() * displayScaleFactor + (canvasWidth / 2),node2.getPosition().getY() * displayScaleFactor + canvasHeight / 2,0);
  gl.glEnd();
}",0.9845150774246128
58459,"/** 
 * Render the symbol of the view instead of the view
 * @param gl
 */
public void selectAxesfromExternal(){
  int iMouseOverSelections=storageSelectionManager.getNumberOfElements(SelectionType.MOUSE_OVER);
  int iSelectionSelections=storageSelectionManager.getNumberOfElements(SelectionType.SELECTION);
  if (iSelectionSelections > 0) {
    Set<Integer> axis=storageSelectionManager.getElements(SelectionType.SELECTION);
    int itmpAxis=SELECTED_X_AXIS;
    int index=0;
    for (    int i : axis) {
      SELECTED_X_AXIS=storageVA.indexOf(i);
      if (iSelectionSelections > 0)       SELECTED_X_AXIS=storageVA.indexOf(i);
      if (SELECTED_X_AXIS > SELECTED_Y_AXIS) {
        SELECTED_X_AXIS=itmpAxis;
        SELECTED_X_AXIS=SELECTED_Y_AXIS;
        SELECTED_Y_AXIS=itmpAxis;
      }
      if (SELECTED_X_AXIS == SELECTED_Y_AXIS)       SELECTED_X_AXIS=itmpAxis;
      bUpdateMainView=true;
      break;
    }
  }
  if (iMouseOverSelections == 0)   return;
  Set<Integer> axis=storageSelectionManager.getElements(SelectionType.MOUSE_OVER);
  for (  int i : axis) {
    MOUSEOVER_X_AXIS=storageVA.indexOf(i);
    bUpdateMainView=true;
    break;
  }
}","/** 
 * Render the symbol of the view instead of the view
 * @param gl
 */
public void selectAxesfromExternal(){
  int iMouseOverSelections=storageSelectionManager.getNumberOfElements(SelectionType.MOUSE_OVER);
  int iSelectionSelections=storageSelectionManager.getNumberOfElements(SelectionType.SELECTION);
  if (iSelectionSelections > 0) {
    Set<Integer> axisSet=storageSelectionManager.getElements(SelectionType.SELECTION);
    Iterator<Integer> axisIT=axisSet.iterator();
    int itmpAxis=SELECTED_X_AXIS;
    int i=axisIT.next();
    SELECTED_X_AXIS=storageVA.indexOf(i);
    if (axisIT.hasNext()) {
      i=axisIT.next();
      SELECTED_Y_AXIS=storageVA.indexOf(i);
    }
    if (SELECTED_X_AXIS > SELECTED_Y_AXIS) {
      itmpAxis=SELECTED_X_AXIS;
      SELECTED_X_AXIS=SELECTED_Y_AXIS;
      SELECTED_Y_AXIS=itmpAxis;
    }
    if (SELECTED_X_AXIS == SELECTED_Y_AXIS)     SELECTED_X_AXIS=itmpAxis;
    bUpdateMainView=true;
  }
  if (iMouseOverSelections == 0)   return;
  Set<Integer> axisSet=storageSelectionManager.getElements(SelectionType.MOUSE_OVER);
  Iterator<Integer> axisIT=axisSet.iterator();
  int itmpAxis=MOUSEOVER_X_AXIS;
  int i=axisIT.next();
  MOUSEOVER_X_AXIS=storageVA.indexOf(i);
  if (axisIT.hasNext()) {
    i=axisIT.next();
    MOUSEOVER_Y_AXIS=storageVA.indexOf(i);
  }
  if (MOUSEOVER_X_AXIS > MOUSEOVER_Y_AXIS) {
    itmpAxis=MOUSEOVER_X_AXIS;
    MOUSEOVER_X_AXIS=MOUSEOVER_Y_AXIS;
    MOUSEOVER_Y_AXIS=itmpAxis;
  }
  if (MOUSEOVER_X_AXIS == MOUSEOVER_Y_AXIS)   MOUSEOVER_X_AXIS=itmpAxis;
}",0.6525297619047619
58460,"public CompareGroupsItem(ArrayList<ISet> setsToCompare){
  super();
  setText(""String_Node_Str"");
  OpenViewEvent openViewEvent=new OpenViewEvent();
  openViewEvent.setViewType(""String_Node_Str"");
  openViewEvent.setSender(this);
  registerEvent(openViewEvent);
  CompareGroupsEvent event=new CompareGroupsEvent(setsToCompare);
  event.setSender(this);
  registerEvent(event);
}","public CompareGroupsItem(ArrayList<ISet> setsToCompare){
  super();
  setText(""String_Node_Str"");
  OpenCompareViewEvent openViewEvent=new OpenCompareViewEvent();
  openViewEvent.setViewType(""String_Node_Str"");
  openViewEvent.setSender(this);
  openViewEvent.setSetsToCompare(setsToCompare);
  registerEvent(openViewEvent);
}",0.7471590909090909
58461,"/** 
 * Registers the listeners for this view to the event system. To release the allocated resources unregisterEventListeners() has to be called.
 */
private void registerEventListeners(){
  activateViewListener=new ActivateViewListener();
  activateViewListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(LoadPathwayEvent.class,activateViewListener);
  GeneralManager.get().getEventPublisher().addListener(LoadPathwaysByGeneEvent.class,activateViewListener);
  GeneralManager.get().getEventPublisher().addListener(OpenViewEvent.class,activateViewListener);
}","/** 
 * Registers the listeners for this view to the event system. To release the allocated resources unregisterEventListeners() has to be called.
 */
private void registerEventListeners(){
  activateViewListener=new ActivateViewListener();
  activateViewListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(LoadPathwayEvent.class,activateViewListener);
  GeneralManager.get().getEventPublisher().addListener(LoadPathwaysByGeneEvent.class,activateViewListener);
  GeneralManager.get().getEventPublisher().addListener(OpenViewEvent.class,activateViewListener);
  GeneralManager.get().getEventPublisher().addListener(OpenCompareViewEvent.class,activateViewListener);
}",0.9182879377431906
58462,"@Override public void handleEvent(AEvent event){
  try {
    if (event instanceof LoadPathwayEvent || event instanceof LoadPathwaysByGeneEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
    }
 else     if (event instanceof OpenViewEvent)     PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
  }
 catch (  PartInitException e) {
    e.printStackTrace();
    GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"",e));
  }
}","@Override public void handleEvent(AEvent event){
  try {
    if (event instanceof LoadPathwayEvent || event instanceof LoadPathwaysByGeneEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
    }
 else     if (event instanceof OpenCompareViewEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
      CompareGroupsEvent compareGroupsEvent=new CompareGroupsEvent(((OpenCompareViewEvent)event).getSetsToCompare());
      compareGroupsEvent.setSender(this);
      GeneralManager.get().getEventPublisher().triggerEvent(compareGroupsEvent);
    }
 else     if (event instanceof OpenViewEvent)     PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
  }
 catch (  PartInitException e) {
    e.printStackTrace();
    GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"",e));
  }
}",0.7391037446286065
58463,"private void renderSplineRelation(GL gl,ContentVirtualArray va,HeatMapWrapper heatMapWrapper){
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  gl.glColor3f(0,0,0);
  for (  Integer contentID : va) {
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
        gl.glLineWidth(5);
        break;
      }
 else {
        gl.glLineWidth(1);
      }
    }
    Vec2f leftPos;
    if (heatMapWrapper == leftHeatMapWrapper)     leftPos=heatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
 else     leftPos=heatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     return;
    Vec2f rightPos;
    if (heatMapWrapper == leftHeatMapWrapper)     rightPos=heatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
 else     rightPos=heatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
    if (rightPos == null)     return;
    if (xOffset == 0) {
      for (      Pair<Float,Integer> cluseterToXOffset : sortedClustersXOffsetUp) {
        if (contentID.equals(cluseterToXOffset.getSecond())) {
          xOffset=(rightPos.x() - leftPos.x()) * -((float)sortedClustersXOffsetUp.indexOf(cluseterToXOffset) + 1) / (sortedClustersXOffsetUp.size() + 1);
          break;
        }
      }
      for (      Pair<Float,Integer> cluseterToXOffset : sortedClustersXOffsetDown) {
        if (contentID.equals(cluseterToXOffset.getSecond())) {
          xOffset=(rightPos.x() - leftPos.x()) * -((float)sortedClustersXOffsetDown.indexOf(cluseterToXOffset) + 1) / (sortedClustersXOffsetDown.size() + 1);
          break;
        }
      }
    }
    if (xOffset == 0)     continue;
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
    points.add(new Vec3f(rightPos.x() + xOffset,leftPos.y(),0));
    points.add(new Vec3f(rightPos.x() + xOffset,rightPos.y(),0));
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    NURBSCurve curve=new NURBSCurve(points,30);
    points=curve.getCurvePoints();
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),0.001f);
    gl.glEnd();
  }
}","private void renderSplineRelation(GL gl,ContentVirtualArray va,HeatMapWrapper heatMapWrapper){
  float alpha=0.6f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  for (  Integer contentID : va) {
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION || type == activeHeatMapSelectionType) {
        gl.glLineWidth(3);
        break;
      }
 else {
        gl.glLineWidth(1);
        break;
      }
    }
    Vec2f leftPos;
    if (heatMapWrapper == leftHeatMapWrapper)     leftPos=heatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
 else     leftPos=heatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     return;
    Vec2f rightPos;
    if (heatMapWrapper == leftHeatMapWrapper)     rightPos=heatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
 else     rightPos=heatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
    if (rightPos == null)     return;
    if (xOffset == 0) {
      for (      Pair<Float,Integer> cluseterToXOffset : sortedClustersXOffsetUp) {
        if (contentID.equals(cluseterToXOffset.getSecond())) {
          xOffset=(rightPos.x() - leftPos.x()) * -((float)sortedClustersXOffsetUp.indexOf(cluseterToXOffset) + 1) / (sortedClustersXOffsetUp.size() + 1);
          break;
        }
      }
      for (      Pair<Float,Integer> cluseterToXOffset : sortedClustersXOffsetDown) {
        if (contentID.equals(cluseterToXOffset.getSecond())) {
          xOffset=(rightPos.x() - leftPos.x()) * -((float)sortedClustersXOffsetDown.indexOf(cluseterToXOffset) + 1) / (sortedClustersXOffsetDown.size() + 1);
          break;
        }
      }
    }
    if (xOffset == 0)     continue;
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
    points.add(new Vec3f(rightPos.x() + xOffset,leftPos.y(),0));
    points.add(new Vec3f(rightPos.x() + xOffset / 1.5f,rightPos.y(),0));
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    NURBSCurve curve=new NURBSCurve(points,30);
    points=curve.getCurvePoints();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),0.001f);
    gl.glEnd();
    gl.glPopName();
  }
}",0.9588770264926848
58464,"private void renderDetailRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  gl.glColor3f(0,1,0);
  for (  ContentVirtualArray contentVA : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : contentVA) {
      for (      SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
        float[] typeColor=type.getColor();
        typeColor[3]=alpha;
        gl.glColor4fv(typeColor,0);
        if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
          gl.glLineWidth(5);
          break;
        }
 else {
          gl.glLineWidth(1);
        }
      }
      Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=null;
      for (      ContentVirtualArray rightVA : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
        rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
        if (rightPos != null)         break;
      }
      if (rightPos == null)       continue;
      gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
      points.add(new Vec3f(leftPos.x() + (rightPos.x() - leftPos.x()) / 2f,leftPos.y(),0));
      points.add(new Vec3f(leftPos.x() + (rightPos.x() - leftPos.x()) / 2f,rightPos.y(),0));
      points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
      gl.glPopName();
    }
  }
}","private void renderDetailRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.6f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  for (  ContentVirtualArray contentVA : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : contentVA) {
      for (      SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
        float[] typeColor=type.getColor();
        typeColor[3]=alpha;
        gl.glColor4fv(typeColor,0);
        if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION || type == activeHeatMapSelectionType) {
          gl.glLineWidth(3);
          break;
        }
 else {
          gl.glLineWidth(1);
        }
      }
      Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=null;
      for (      ContentVirtualArray rightVA : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
        rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
        if (rightPos != null)         break;
      }
      if (rightPos == null)       continue;
      gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
      points.add(new Vec3f(leftPos.x() + (rightPos.x() - leftPos.x()) / 2f,leftPos.y(),0));
      points.add(new Vec3f(leftPos.x() + (rightPos.x() - leftPos.x()) / 2f,rightPos.y(),0));
      points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
      gl.glPopName();
    }
  }
}",0.9833802096650474
58465,"private void renderOverviewToDetailRelations(GL gl){
  sortedClustersXOffsetUp=new ArrayList<Pair<Float,Integer>>();
  sortedClustersXOffsetDown=new ArrayList<Pair<Float,Integer>>();
  gl.glLineWidth(1);
  calculateClusterXOffset(leftHeatMapWrapper);
  for (  ContentVirtualArray va : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    xOffset=0;
    renderSplineRelation(gl,va,leftHeatMapWrapper);
  }
  calculateClusterXOffset(leftHeatMapWrapper);
  for (  ContentVirtualArray va : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
    xOffset=0;
    renderSplineRelation(gl,va,rightHeatMapWrapper);
  }
}","private void renderOverviewToDetailRelations(GL gl){
  sortedClustersXOffsetUp=new ArrayList<Pair<Float,Integer>>();
  sortedClustersXOffsetDown=new ArrayList<Pair<Float,Integer>>();
  calculateClusterXOffset(leftHeatMapWrapper);
  for (  ContentVirtualArray va : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    xOffset=0;
    renderSplineRelation(gl,va,leftHeatMapWrapper);
  }
  calculateClusterXOffset(rightHeatMapWrapper);
  for (  ContentVirtualArray va : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
    xOffset=0;
    renderSplineRelation(gl,va,rightHeatMapWrapper);
  }
}",0.9765494137353434
58466,"private void renderOverviewRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  ContentVirtualArray contentVALeft=setsToCompare.get(0).getContentVA(ContentVAType.CONTENT);
  for (  Integer contentID : contentVALeft) {
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
        gl.glLineWidth(5);
        break;
      }
 else {
        gl.glLineWidth(1);
      }
    }
    Vec2f leftPos=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     continue;
    Vec2f rightPos=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (rightPos == null)     continue;
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
    Tree<ClusterNode> tree;
    int nodeID;
    ClusterNode node;
    ArrayList<ClusterNode> pathToRoot;
    tree=setsToCompare.get(0).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    tree=setsToCompare.get(1).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
      break;
    }
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    NURBSCurve curve=new NURBSCurve(points,30);
    points=curve.getCurvePoints();
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
    gl.glEnd();
    gl.glPopName();
  }
}","private void renderOverviewRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.6f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  ContentVirtualArray contentVALeft=setsToCompare.get(0).getContentVA(ContentVAType.CONTENT);
  for (  Integer contentID : contentVALeft) {
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION || type == activeHeatMapSelectionType) {
        gl.glLineWidth(5);
        break;
      }
 else {
        gl.glLineWidth(1);
        break;
      }
    }
    Vec2f leftPos=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     continue;
    Vec2f rightPos=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (rightPos == null)     continue;
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
    Tree<ClusterNode> tree;
    int nodeID;
    ClusterNode node;
    ArrayList<ClusterNode> pathToRoot;
    tree=setsToCompare.get(0).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    tree=setsToCompare.get(1).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
      break;
    }
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    NURBSCurve curve=new NURBSCurve(points,30);
    points=curve.getCurvePoints();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
    gl.glEnd();
    gl.glPopName();
  }
}",0.5324103209565765
58467,"private void calculateClusterXOffset(HeatMapWrapper heatMapWrapper){
  sortedClustersXOffsetUp.clear();
  sortedClustersXOffsetDown.clear();
  for (  ContentVirtualArray va : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    int contentID=va.get(0);
    Vec2f leftPos;
    if (heatMapWrapper == leftHeatMapWrapper)     leftPos=heatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
 else     leftPos=heatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     return;
    Vec2f rightPos;
    if (heatMapWrapper == leftHeatMapWrapper)     rightPos=heatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
 else     rightPos=heatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
    if (rightPos == null)     return;
    Pair<Float,Integer> xDiffToContentID=new Pair<Float,Integer>();
    float yDiff=rightPos.y() - leftPos.y();
    xDiffToContentID.set(yDiff,contentID);
    if (yDiff > 0)     sortedClustersXOffsetUp.add(xDiffToContentID);
 else     sortedClustersXOffsetDown.add(xDiffToContentID);
  }
  Collections.sort(sortedClustersXOffsetUp);
  Collections.sort(sortedClustersXOffsetDown);
  Collections.reverse(sortedClustersXOffsetDown);
}","private void calculateClusterXOffset(HeatMapWrapper heatMapWrapper){
  sortedClustersXOffsetUp.clear();
  sortedClustersXOffsetDown.clear();
  for (  ContentVirtualArray va : heatMapWrapper.getContentVAsOfHeatMaps()) {
    int contentID=va.get(0);
    Vec2f leftPos;
    if (heatMapWrapper == leftHeatMapWrapper)     leftPos=heatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
 else     leftPos=heatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     return;
    Vec2f rightPos;
    if (heatMapWrapper == leftHeatMapWrapper)     rightPos=heatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
 else     rightPos=heatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
    if (rightPos == null)     return;
    Pair<Float,Integer> xDiffToContentID=new Pair<Float,Integer>();
    float yDiff=rightPos.y() - leftPos.y();
    xDiffToContentID.set(yDiff,contentID);
    if (yDiff > 0)     sortedClustersXOffsetUp.add(xDiffToContentID);
 else     sortedClustersXOffsetDown.add(xDiffToContentID);
  }
  Collections.sort(sortedClustersXOffsetUp);
  Collections.sort(sortedClustersXOffsetDown);
  Collections.reverse(sortedClustersXOffsetDown);
}",0.9975389663658736
58468,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  contentVAUpdateListener=new ContentVAUpdateListener();
  contentVAUpdateListener.setHandler(this);
  eventPublisher.addListener(VirtualArrayUpdateEvent.class,contentVAUpdateListener);
  storageVAUpdateListener=new StorageVAUpdateListener();
  storageVAUpdateListener.setHandler(this);
  eventPublisher.addListener(VirtualArrayUpdateEvent.class,storageVAUpdateListener);
  selectionCommandListener=new SelectionCommandListener();
  selectionCommandListener.setHandler(this);
  eventPublisher.addListener(SelectionCommandEvent.class,selectionCommandListener);
  redrawViewListener=new RedrawViewListener();
  redrawViewListener.setHandler(this);
  eventPublisher.addListener(RedrawViewEvent.class,redrawViewListener);
  clearSelectionsListener=new ClearSelectionsListener();
  clearSelectionsListener.setHandler(this);
  eventPublisher.addListener(ClearSelectionsEvent.class,clearSelectionsListener);
  replaceContentVAListener=new ReplaceContentVAListener();
  replaceContentVAListener.setHandler(this);
  eventPublisher.addListener(ReplaceContentVAEvent.class,replaceContentVAListener);
  replaceStorageVAListener=new ReplaceStorageVAListener();
  replaceStorageVAListener.setHandler(this);
  eventPublisher.addListener(ReplaceContentVAEvent.class,replaceStorageVAListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  contentVAUpdateListener=new ContentVAUpdateListener();
  contentVAUpdateListener.setHandler(this);
  eventPublisher.addListener(ContentVAUpdateEvent.class,contentVAUpdateListener);
  storageVAUpdateListener=new StorageVAUpdateListener();
  storageVAUpdateListener.setHandler(this);
  eventPublisher.addListener(StorageVAUpdateEvent.class,storageVAUpdateListener);
  selectionCommandListener=new SelectionCommandListener();
  selectionCommandListener.setHandler(this);
  eventPublisher.addListener(SelectionCommandEvent.class,selectionCommandListener);
  redrawViewListener=new RedrawViewListener();
  redrawViewListener.setHandler(this);
  eventPublisher.addListener(RedrawViewEvent.class,redrawViewListener);
  clearSelectionsListener=new ClearSelectionsListener();
  clearSelectionsListener.setHandler(this);
  eventPublisher.addListener(ClearSelectionsEvent.class,clearSelectionsListener);
  replaceContentVAListener=new ReplaceContentVAListener();
  replaceContentVAListener.setHandler(this);
  eventPublisher.addListener(ReplaceContentVAEvent.class,replaceContentVAListener);
  replaceStorageVAListener=new ReplaceStorageVAListener();
  replaceStorageVAListener.setHandler(this);
  eventPublisher.addListener(ReplaceContentVAEvent.class,replaceStorageVAListener);
}",0.9863636363636364
58469,"public final IVirtualArray getContentVA(){
  return contentVA;
}","public ContentVirtualArray getContentVA(){
  return contentVA;
}",0.90625
58470,"private void renderDetailRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  gl.glColor3f(0,1,0);
  for (  ContentVirtualArray contentVA : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : contentVA) {
      for (      SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
        float[] typeColor=type.getColor();
        typeColor[3]=alpha;
        gl.glColor4fv(typeColor,0);
        if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
          gl.glLineWidth(5);
          break;
        }
 else {
          gl.glLineWidth(1);
        }
      }
      Vec2f leftPos=leftHeatMapWrapper.getRightLinkPositionFromContentID(contentID,contentVA);
      if (leftPos == null)       continue;
      Vec2f rightPos=null;
      for (      ContentVirtualArray rightVA : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
        rightPos=rightHeatMapWrapper.getRightLinkPositionFromContentID(contentID,rightVA);
        if (rightPos != null)         break;
      }
      if (rightPos == null)       continue;
      gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),viewFrustum.getHeight() - leftPos.y(),0));
      points.add(new Vec3f(rightPos.x(),viewFrustum.getHeight() - rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
      gl.glPopName();
    }
  }
}","private void renderDetailRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  gl.glColor3f(0,1,0);
  for (  ContentVirtualArray contentVA : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : contentVA) {
      for (      SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
        float[] typeColor=type.getColor();
        typeColor[3]=alpha;
        gl.glColor4fv(typeColor,0);
        if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
          gl.glLineWidth(5);
          break;
        }
 else {
          gl.glLineWidth(1);
        }
      }
      Vec2f leftPos=leftHeatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=null;
      for (      ContentVirtualArray rightVA : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
        rightPos=rightHeatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
        if (rightPos != null)         break;
      }
      if (rightPos == null)       continue;
      gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
      points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
      gl.glPopName();
    }
  }
}",0.8781032078103208
58471,"private void renderOverviewToDetailRelations(GL gl){
  gl.glColor3f(0,0,0);
  gl.glLineWidth(1);
  for (  ContentVirtualArray va : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : va) {
      Vec2f leftPos=leftHeatMapWrapper.getLeftLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=leftHeatMapWrapper.getRightLinkPositionFromContentID(contentID,va);
      if (rightPos == null)       continue;
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(heatMapLayoutLeft.getOverviewHeatMapPosition().x() + heatMapLayoutLeft.getOverviewHeatmapWidth() + leftPos.x(),heatMapLayoutLeft.getOverviewHeight() - leftPos.y(),0));
      points.add(new Vec3f(rightPos.x(),heatMapLayoutLeft.getDetailHeight() - rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
    }
  }
  gl.glColor3f(0,0,0);
  gl.glLineWidth(1);
  for (  ContentVirtualArray va : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : va) {
      Vec2f leftPos=rightHeatMapWrapper.getLeftLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=rightHeatMapWrapper.getRightLinkPositionFromContentID(contentID,va);
      if (rightPos == null)       continue;
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),heatMapLayoutRight.getOverviewHeight() - leftPos.y(),0));
      points.add(new Vec3f(rightPos.x(),heatMapLayoutRight.getDetailHeight() - rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
    }
  }
}","private void renderOverviewToDetailRelations(GL gl){
  gl.glColor3f(0,0,0);
  gl.glLineWidth(1);
  for (  ContentVirtualArray va : leftHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : va) {
      Vec2f leftPos=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=leftHeatMapWrapper.getLeftDetailLinkPositionFromContentID(contentID);
      if (rightPos == null)       continue;
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
      points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
    }
  }
  gl.glColor3f(0,0,0);
  gl.glLineWidth(1);
  for (  ContentVirtualArray va : rightHeatMapWrapper.getContentVAsOfHeatMaps()) {
    for (    Integer contentID : va) {
      Vec2f leftPos=rightHeatMapWrapper.getRightDetailLinkPositionFromContentID(contentID);
      if (leftPos == null)       continue;
      Vec2f rightPos=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
      if (rightPos == null)       continue;
      ArrayList<Vec3f> points=new ArrayList<Vec3f>();
      points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
      points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
      NURBSCurve curve=new NURBSCurve(points,30);
      points=curve.getCurvePoints();
      gl.glBegin(GL.GL_LINE_STRIP);
      for (int i=0; i < points.size(); i++)       gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
      gl.glEnd();
    }
  }
}",0.9099075297225891
58472,"private void renderOverviewRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  ContentVirtualArray contentVALeft=setsToCompare.get(0).getContentVA(ContentVAType.CONTENT);
  for (  Integer contentID : contentVALeft) {
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
        gl.glLineWidth(5);
        break;
      }
 else {
        gl.glLineWidth(1);
      }
    }
    Vec2f leftPos=leftHeatMapWrapper.getLeftLinkPositionFromContentID(contentID);
    if (leftPos == null)     continue;
    Vec2f rightPos=rightHeatMapWrapper.getLeftLinkPositionFromContentID(contentID);
    if (rightPos == null)     continue;
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x() + heatMapLayoutLeft.getOverviewGroupWidth() + heatMapLayoutLeft.getOverviewHeatmapWidth()+ heatMapLayoutLeft.getOverviewSliderWidth(),viewFrustum.getHeight() - leftPos.y(),0));
    Tree<ClusterNode> tree;
    int nodeID;
    ClusterNode node;
    ArrayList<ClusterNode> pathToRoot;
    tree=setsToCompare.get(0).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    tree=setsToCompare.get(1).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
      break;
    }
    points.add(new Vec3f(rightPos.x(),viewFrustum.getHeight() - rightPos.y(),0));
    NURBSCurve curve=new NURBSCurve(points,30);
    points=curve.getCurvePoints();
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
    gl.glEnd();
    gl.glPopName();
  }
}","private void renderOverviewRelations(GL gl){
  if (setsToCompare == null || setsToCompare.size() == 0)   return;
  float alpha=0.3f;
  ContentSelectionManager contentSelectionManager=useCase.getContentSelectionManager();
  ContentVirtualArray contentVALeft=setsToCompare.get(0).getContentVA(ContentVAType.CONTENT);
  for (  Integer contentID : contentVALeft) {
    for (    SelectionType type : contentSelectionManager.getSelectionTypes(contentID)) {
      float[] typeColor=type.getColor();
      typeColor[3]=alpha;
      gl.glColor4fv(typeColor,0);
      if (type == SelectionType.MOUSE_OVER || type == SelectionType.SELECTION) {
        gl.glLineWidth(5);
        break;
      }
 else {
        gl.glLineWidth(1);
      }
    }
    Vec2f leftPos=leftHeatMapWrapper.getRightOverviewLinkPositionFromContentID(contentID);
    if (leftPos == null)     continue;
    Vec2f rightPos=rightHeatMapWrapper.getLeftOverviewLinkPositionFromContentID(contentID);
    if (rightPos == null)     continue;
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.POLYLINE_SELECTION,contentID));
    ArrayList<Vec3f> points=new ArrayList<Vec3f>();
    points.add(new Vec3f(leftPos.x(),leftPos.y(),0));
    Tree<ClusterNode> tree;
    int nodeID;
    ClusterNode node;
    ArrayList<ClusterNode> pathToRoot;
    tree=setsToCompare.get(0).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
    }
    tree=setsToCompare.get(1).getContentTree();
    nodeID=tree.getNodeIDsFromLeafID(contentID).get(0);
    node=tree.getNodeByNumber(nodeID);
    pathToRoot=node.getParentPath(tree.getRoot());
    pathToRoot.remove(pathToRoot.size() - 1);
    for (    ClusterNode pathNode : pathToRoot) {
      Vec3f nodePos=pathNode.getPos();
      points.add(nodePos);
      break;
    }
    points.add(new Vec3f(rightPos.x(),rightPos.y(),0));
    NURBSCurve curve=new NURBSCurve(points,30);
    points=curve.getCurvePoints();
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int i=0; i < points.size(); i++)     gl.glVertex3f(points.get(i).x(),points.get(i).y(),0);
    gl.glEnd();
    gl.glPopName();
  }
}",0.9076387466721276
58473,"private Pair<Integer,Integer> getBoundaryIndicesOfElementsInFocus(){
  float sliderHeight=slider.getSliderHeight();
  float sliderBottomPositionY=slider.getSliderPositionY();
  float sliderTopPositionY=sliderBottomPositionY + sliderHeight;
  float overviewHeight=layout.getOverviewHeight();
  float sampleHeight=overviewHeight / ((float)contentVA.size());
  int numSamplesInFocus=(int)Math.ceil(sliderHeight / sampleHeight);
  int sampleIndexTop=(int)Math.floor((overviewHeight - (sliderTopPositionY - layout.getOverviewPosition().y())) / sampleHeight);
  if (sampleIndexTop < 0)   sampleIndexTop=0;
  int sampleIndexBottom=sampleIndexTop + numSamplesInFocus;
  if (sampleIndexBottom >= contentVA.size()) {
    sampleIndexBottom=contentVA.size() - 1;
    if (sampleIndexTop - sampleIndexBottom < numSamplesInFocus)     sampleIndexTop=sampleIndexBottom - numSamplesInFocus;
  }
  if (sampleIndexTop < 0) {
    sampleIndexTop=0;
    if (sampleIndexTop - sampleIndexBottom < numSamplesInFocus)     sampleIndexBottom=sampleIndexBottom + numSamplesInFocus;
  }
  return new Pair<Integer,Integer>(sampleIndexTop,sampleIndexBottom);
}","private Pair<Integer,Integer> getBoundaryIndicesOfElementsInFocus(){
  float sliderBottomPositionY=slider.getSliderBottomPositionY();
  float sliderHeight=slider.getSliderHeight();
  float sliderTopPositionY=sliderBottomPositionY + sliderHeight;
  float overviewHeight=layout.getOverviewHeight();
  float sampleHeight=overviewHeight / ((float)contentVA.size());
  int numSamplesInFocus=(int)Math.ceil(sliderHeight / sampleHeight);
  int sampleIndexTop=(int)Math.floor((overviewHeight - (sliderTopPositionY - layout.getOverviewPosition().y())) / sampleHeight);
  if (sampleIndexTop < 0)   sampleIndexTop=0;
  int sampleIndexBottom=sampleIndexTop + numSamplesInFocus;
  if (sampleIndexBottom >= contentVA.size()) {
    sampleIndexBottom=contentVA.size() - 1;
    if (sampleIndexTop - sampleIndexBottom < numSamplesInFocus)     sampleIndexTop=sampleIndexBottom - numSamplesInFocus;
  }
  if (sampleIndexTop < 0) {
    sampleIndexTop=0;
    if (sampleIndexTop - sampleIndexBottom < numSamplesInFocus)     sampleIndexBottom=sampleIndexBottom + numSamplesInFocus;
  }
  return new Pair<Integer,Integer>(sampleIndexTop,sampleIndexBottom);
}",0.9451327433628318
58474,"private void handleBodyDragging(float pickedYCoordinate){
  float newSliderPositionY=pickedYCoordinate - draggingSpacing;
  setSliderPositionY(newSliderPositionY);
  setRelativeYPosition(getRelativeYCoordinate(sliderPositionY));
}","private void handleBodyDragging(float pickedYCoordinate){
  float newSliderBottomPositionY=pickedYCoordinate - draggingSpacing;
  float sliderHeight=sliderTopPositionY - sliderBottomPositionY;
  float newSliderTopPositionY=newSliderBottomPositionY + sliderHeight;
  if (newSliderBottomPositionY + sliderHeight > layout.getOverviewMaxSliderPositionY()) {
    newSliderBottomPositionY=layout.getOverviewMaxSliderPositionY() - sliderHeight;
    newSliderTopPositionY=layout.getOverviewMaxSliderPositionY();
  }
 else   if (newSliderBottomPositionY < layout.getOverviewMinSliderPositionY()) {
    newSliderBottomPositionY=layout.getOverviewMinSliderPositionY();
    newSliderTopPositionY=layout.getOverviewMinSliderPositionY() + sliderHeight;
  }
  setSliderBottomPositionY(newSliderBottomPositionY);
  relativeBottomPositionY=getRelativeYCoordinate(sliderBottomPositionY);
  setSliderTopPositionY(newSliderTopPositionY);
  relativeTopPositionY=getRelativeYCoordinate(sliderTopPositionY);
}",0.2763157894736842
58475,"public VerticalSlider(HeatMapLayout layout){
  relativeSliderHeight=0.25f;
  relativePositionY=0.75f;
  this.layout=layout;
}","public VerticalSlider(HeatMapLayout layout){
  relativeTopPositionY=1.0f;
  relativeBottomPositionY=0.75f;
  this.layout=layout;
}",0.8784313725490196
58476,"public boolean handleDragging(GL gl,GLMouseListener glMouseListener){
  if (!isArrowDownDragging && !isArrowUpDragging && !isBodyDragging)   return false;
  Point pickedPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
  float pickedYCoordinate=fArTargetWorldCoordinates[1];
  if (isDraggingFirstTime) {
    isDraggingFirstTime=false;
    if (isArrowUpDragging) {
      draggingSpacing=pickedYCoordinate - (sliderPositionY + sliderHeight);
    }
 else {
      draggingSpacing=pickedYCoordinate - sliderPositionY;
    }
  }
  if (isBodyDragging) {
    handleBodyDragging(pickedYCoordinate);
  }
 else   if (isArrowDownDragging) {
    handleArrowDownDragging(pickedYCoordinate);
  }
 else {
    handleArrowUpDragging(pickedYCoordinate);
  }
  if (glMouseListener.wasMouseReleased()) {
    isBodyDragging=false;
    isArrowUpDragging=false;
    isArrowDownDragging=false;
  }
  return true;
}","public boolean handleDragging(GL gl,GLMouseListener glMouseListener){
  if (!isArrowDownDragging && !isArrowUpDragging && !isBodyDragging)   return false;
  Point pickedPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
  float pickedYCoordinate=fArTargetWorldCoordinates[1];
  if (isDraggingFirstTime) {
    isDraggingFirstTime=false;
    if (isArrowUpDragging) {
      draggingSpacing=pickedYCoordinate - sliderTopPositionY;
    }
 else {
      draggingSpacing=pickedYCoordinate - sliderBottomPositionY;
    }
  }
  if (isBodyDragging) {
    handleBodyDragging(pickedYCoordinate);
  }
 else   if (isArrowDownDragging) {
    handleArrowDownDragging(pickedYCoordinate);
  }
 else {
    handleArrowUpDragging(pickedYCoordinate);
  }
  if (glMouseListener.wasMouseReleased()) {
    isBodyDragging=false;
    isArrowUpDragging=false;
    isArrowDownDragging=false;
  }
  return true;
}",0.981094527363184
58477,"public void draw(final GL gl,PickingManager pickingManager,TextureManager textureManager,int viewID,int pickingID){
  sliderHeight=relativeSliderHeight * layout.getOverviewHeight();
  sliderPositionY=layout.getOverviewMinSliderPositionY() + relativePositionY * layout.getOverviewHeight();
  float sliderWidth=layout.getOverviewSliderWidth();
  arrowHeight=(2.0f * sliderWidth <= sliderHeight) ? sliderWidth : sliderHeight / 2.0f;
  bodyHeight=sliderHeight - 2.0f * arrowHeight;
  float sliderPositionX=layout.getOverviewSliderPositionX();
  gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_OVERVIEW_SLIDER_ARROW_DOWN_SELECTION,pickingID));
  Vec3f upperLeftCorner=new Vec3f(sliderPositionX,sliderPositionY,0.0f);
  Vec3f upperRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderPositionY,0.0f);
  Vec3f lowerRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderPositionY + arrowHeight,0.0f);
  Vec3f lowerLeftCorner=new Vec3f(sliderPositionX,sliderPositionY + arrowHeight,0.0f);
  textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,1,1,1,1);
  gl.glPopName();
  gl.glColor4f(0.5f,0.5f,0.5f,1.0f);
  gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_OVERVIEW_SLIDER_BODY_SELECTION,pickingID));
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(lowerLeftCorner.x(),lowerLeftCorner.y(),0.0f);
  gl.glVertex3f(lowerRightCorner.x(),lowerRightCorner.y(),0.0f);
  gl.glVertex3f(lowerRightCorner.x(),lowerRightCorner.y() + bodyHeight,0.0f);
  gl.glVertex3f(lowerLeftCorner.x(),lowerLeftCorner.y() + bodyHeight,0.0f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_OVERVIEW_SLIDER_ARROW_UP_SELECTION,pickingID));
  lowerLeftCorner=new Vec3f(sliderPositionX,sliderPositionY + arrowHeight + bodyHeight,0.0f);
  lowerRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderPositionY + arrowHeight + bodyHeight,0.0f);
  upperRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderPositionY + 2.0f * arrowHeight + bodyHeight,0.0f);
  upperLeftCorner=new Vec3f(sliderPositionX,sliderPositionY + 2.0f * arrowHeight + bodyHeight,0.0f);
  textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,1,1,1,1);
  gl.glPopName();
}","public void draw(final GL gl,PickingManager pickingManager,TextureManager textureManager,int viewID,int pickingID){
  sliderBottomPositionY=layout.getOverviewMinSliderPositionY() + relativeBottomPositionY * layout.getOverviewHeight();
  sliderTopPositionY=layout.getOverviewMinSliderPositionY() + relativeTopPositionY * layout.getOverviewHeight();
  float sliderHeight=sliderTopPositionY - sliderBottomPositionY;
  float sliderWidth=layout.getOverviewSliderWidth();
  arrowHeight=(2.0f * sliderWidth <= sliderHeight) ? sliderWidth : sliderHeight / 2.0f;
  float bodyHeight=sliderHeight - 2.0f * arrowHeight;
  float sliderPositionX=layout.getOverviewSliderPositionX();
  gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_OVERVIEW_SLIDER_ARROW_DOWN_SELECTION,pickingID));
  Vec3f upperLeftCorner=new Vec3f(sliderPositionX,sliderBottomPositionY,0.0f);
  Vec3f upperRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderBottomPositionY,0.0f);
  Vec3f lowerRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderBottomPositionY + arrowHeight,0.0f);
  Vec3f lowerLeftCorner=new Vec3f(sliderPositionX,sliderBottomPositionY + arrowHeight,0.0f);
  textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,1,1,1,1);
  gl.glPopName();
  gl.glColor4f(0.5f,0.5f,0.5f,1.0f);
  gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_OVERVIEW_SLIDER_BODY_SELECTION,pickingID));
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(lowerLeftCorner.x(),lowerLeftCorner.y(),0.0f);
  gl.glVertex3f(lowerRightCorner.x(),lowerRightCorner.y(),0.0f);
  gl.glVertex3f(lowerRightCorner.x(),lowerRightCorner.y() + bodyHeight,0.0f);
  gl.glVertex3f(lowerLeftCorner.x(),lowerLeftCorner.y() + bodyHeight,0.0f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(viewID,EPickingType.COMPARE_OVERVIEW_SLIDER_ARROW_UP_SELECTION,pickingID));
  lowerLeftCorner=new Vec3f(sliderPositionX,sliderTopPositionY - arrowHeight,0.0f);
  lowerRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderTopPositionY - arrowHeight,0.0f);
  upperRightCorner=new Vec3f(sliderPositionX + sliderWidth,sliderTopPositionY,0.0f);
  upperLeftCorner=new Vec3f(sliderPositionX,sliderTopPositionY,0.0f);
  textureManager.renderTexture(gl,EIconTextures.HEAT_MAP_ARROW,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,1,1,1,1);
  gl.glPopName();
}",0.8501669449081803
58478,"public float getSliderHeight(){
  return sliderHeight;
}","public float getSliderHeight(){
  return sliderTopPositionY - sliderBottomPositionY;
}",0.7464788732394366
58479,"private void handleArrowUpDragging(float pickedYCoordinate){
  float newTopPositionY=pickedYCoordinate - draggingSpacing;
  setSliderHeight(newTopPositionY - sliderPositionY);
  setRelativeSliderHeight(getRelativeSize(sliderHeight));
}","private void handleArrowUpDragging(float pickedYCoordinate){
  float newSliderTopPositionY=pickedYCoordinate - draggingSpacing;
  setSliderTopPositionY(newSliderTopPositionY);
  relativeTopPositionY=getRelativeYCoordinate(sliderTopPositionY);
}",0.6931106471816284
58480,"private void handleArrowDownDragging(float pickedYCoordinate){
  float newSliderPositionY=pickedYCoordinate - draggingSpacing;
  float sliderTopPositionY=sliderPositionY + sliderHeight;
  if (newSliderPositionY > sliderTopPositionY - 2.0f * arrowHeight)   newSliderPositionY=sliderTopPositionY - 2.0f * arrowHeight;
  setSliderPositionY(newSliderPositionY);
  setSliderHeight(sliderTopPositionY - sliderPositionY);
  relativeSliderHeight=getRelativeSize(sliderHeight);
  setRelativeYPosition(getRelativeYCoordinate(sliderPositionY));
}","private void handleArrowDownDragging(float pickedYCoordinate){
  float newSliderBottomPositionY=pickedYCoordinate - draggingSpacing;
  setSliderBottomPositionY(newSliderBottomPositionY);
  relativeBottomPositionY=getRelativeYCoordinate(sliderBottomPositionY);
}",0.4346733668341708
58481,"private void UpdateSelection(){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=transformOnZoom(xnormalized) * XScale;
    y=ynormalized * YScale;
    if (IsInSelectionRectangle(x,y)) {
      elementSelectionManager.addToType(currentSelection,iContentIndex);
    }
  }
}","private void UpdateSelection(){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    float xnormalized=set.get(storageVA.get(SELECTED_X_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    float ynormalized=set.get(storageVA.get(SELECTED_Y_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=transformOnZoom(xnormalized) * XScale;
    y=ynormalized * YScale;
    if (IsInSelectionRectangle(x,y)) {
      elementSelectionManager.addToType(currentSelection,iContentIndex);
    }
  }
}",0.9791376912378305
58482,"private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  EScatterPointType tmpPointStyle=POINTSTYLE;
  float[] fArMappingColor={0.0f,0.0f,0.0f};
  if (detailLevel != EDetailLevel.HIGH) {
    bRender2Axis=false;
    POINTSTYLE=EScatterPointType.POINT;
  }
  Collection<Integer> selectionSet=contentVA.getIndexList();
  if (bRender2Axis)   if (elementSelectionManager.getNumberOfElements(SelectionType.SELECTION) > 0)   selectionSet=elementSelectionManager.getElements(SelectionType.SELECTION);
  for (  Integer iContentIndex : selectionSet) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=transformOnZoom(xnormalized) * XScale;
    y=ynormalized * YScale;
    if (bUseColor)     fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    EScatterPointType tmpPoint=POINTSTYLE;
    if (bRender2Axis) {
      fArMappingColor=new float[]{1.0f,0.0f,0.0f};
      POINTSTYLE=EScatterPointType.POINT;
    }
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(SELECTED_X_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(SELECTED_Y_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=transformOnZoom(xnormalized) * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
  POINTSTYLE=tmpPointStyle;
}","private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  EScatterPointType tmpPointStyle=POINTSTYLE;
  float[] fArMappingColor={0.0f,0.0f,0.0f};
  if (detailLevel != EDetailLevel.HIGH) {
    bRender2Axis=false;
    POINTSTYLE=EScatterPointType.POINT;
  }
  Collection<Integer> selectionSet=contentVA.getIndexList();
  if (bRender2Axis)   if (elementSelectionManager.getNumberOfElements(SelectionType.SELECTION) > 0)   selectionSet=elementSelectionManager.getElements(SelectionType.SELECTION);
  for (  Integer iContentIndex : selectionSet) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(storageVA.get(SELECTED_X_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(storageVA.get(SELECTED_Y_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=transformOnZoom(xnormalized) * XScale;
    y=ynormalized * YScale;
    if (bUseColor)     fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    EScatterPointType tmpPoint=POINTSTYLE;
    if (bRender2Axis) {
      fArMappingColor=new float[]{1.0f,0.0f,0.0f};
      POINTSTYLE=EScatterPointType.POINT;
    }
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(storageVA.get(SELECTED_X_AXIS_2)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(storageVA.get(SELECTED_Y_AXIS_2)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=transformOnZoom(xnormalized) * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
  POINTSTYLE=tmpPointStyle;
}",0.9861239592969472
58483,"@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  opengl=gl;
  InitAxisComboEvent initAxisComboEvent=new InitAxisComboEvent();
  initAxisComboEvent.setSender(this);
  initAxisComboEvent.setAxisNames(this.getAxisString());
  GeneralManager.get().getEventPublisher().triggerEvent(initAxisComboEvent);
  detailLevel=EDetailLevel.HIGH;
  if (MAX_AXES > storageVA.size())   MAX_AXES=storageVA.size();
  renderStyle.setTextureNr(100,100);
  resetFullTextures();
  resetSelectionTextures();
  initTextures();
  initSelectionTextures();
}","@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  InitAxisComboEvent initAxisComboEvent=new InitAxisComboEvent();
  initAxisComboEvent.setSender(this);
  initAxisComboEvent.setAxisNames(this.getAxisString());
  GeneralManager.get().getEventPublisher().triggerEvent(initAxisComboEvent);
  detailLevel=EDetailLevel.HIGH;
  if (MAX_AXES > storageVA.size())   MAX_AXES=storageVA.size();
  renderStyle.setTextureNr(100,100);
  resetFullTextures();
  resetSelectionTextures();
  initTextures();
  initSelectionTextures();
  opengl=gl;
}",0.978688524590164
58484,"/** 
 * Init textures, build array of textures used for holding the whole examples
 * @param gl
 */
private void initTextures(){
  int ix=0;
  int iy=0;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float fSelectionFaktor=1.0f;
  float[] fArRgbaWhite={1.0f,1.0f,1.0f,1f};
  float fBaseOpacity=0.5f;
  float fAddOpacity=0.05f;
  float[] fSelectionColor={1.0f,0.1f,0.5f};
  float[] fBlackColor={0.0f,0.0f,0.0f};
  Collection<Integer> selectionSet=contentVA.getIndexList();
  int StartindexX=0;
  int StartindexY=0;
  int EndindexX=StartindexX + NR_TEXTURESX - 1;
  int EndindexY=StartindexY + NR_TEXTURESY - 1;
  if (EndindexX >= MAX_AXES) {
    EndindexX=MAX_AXES - 1;
    renderStyle.setTextureNr(EndindexX - StartindexX + 1,NR_TEXTURESY);
  }
  if (EndindexY >= MAX_AXES) {
    EndindexY=MAX_AXES - 1;
    renderStyle.setTextureNr(NR_TEXTURESX,EndindexY - StartindexY + 1);
  }
  AlFullTextures.clear();
  float fGlobalTexturePointsX=iTextureSize / fSelectionFaktor;
  float fGlobalTexturePointsY=iTextureSize / fSelectionFaktor;
  int iTextureWidth=(int)(fGlobalTexturePointsX / (double)NR_TEXTURESX);
  int iTextureHeight=(int)(fGlobalTexturePointsY / (double)NR_TEXTURESY);
  int TextureSize=iTextureWidth * iTextureHeight;
  FloatBuffer FbTemp=BufferUtil.newFloatBuffer(TextureSize * 4);
  Texture tempTextur;
  for (Integer iAxisY=StartindexY; iAxisY <= EndindexY; iAxisY++) {
    for (Integer iAxisX=StartindexX; iAxisX <= EndindexX; iAxisX++) {
      for (Integer i=0; i < TextureSize; i++) {
        FbTemp.put(fArRgbaWhite);
      }
      if (true) {
        for (        Integer iContentIndex : selectionSet) {
          int current_SELECTED_X_AXIS=iAxisX;
          int current_SELECTED_Y_AXIS=iAxisY;
          xnormalized=set.get(current_SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
          ynormalized=set.get(current_SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
          ix=(int)Math.floor(xnormalized * (double)(iTextureWidth - 1));
          iy=ix * (iTextureWidth) * 4 + (int)Math.floor(ynormalized * (double)(iTextureHeight - 1)) * 4;
          float[] fArMappingColor=null;
          if (bUseColor)           fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
 else           fArMappingColor=fBlackColor;
          if (iy >= TextureSize * 4 - 4) {
            iy=0;
          }
          FbTemp.put(iy,fArMappingColor[0]);
          FbTemp.put(iy + 1,fArMappingColor[1]);
          FbTemp.put(iy + 2,fArMappingColor[2]);
          float fcurrentOpacity=FbTemp.get(iy + 3);
          if (fcurrentOpacity < fBaseOpacity)           fcurrentOpacity=fBaseOpacity;
 else           fcurrentOpacity+=fAddOpacity;
          if (fcurrentOpacity >= 1)           fcurrentOpacity=1;
          FbTemp.put(iy + 3,fcurrentOpacity);
        }
        FbTemp.rewind();
      }
      TextureData texData=new TextureData(GL.GL_RGBA,iTextureWidth,iTextureHeight,0,GL.GL_RGBA,GL.GL_FLOAT,false,false,true,FbTemp,null);
      tempTextur=TextureIO.newTexture(0);
      tempTextur.updateImage(texData);
      AlFullTextures.add(tempTextur);
    }
  }
}","/** 
 * Init textures, build array of textures used for holding the whole examples
 * @param gl
 */
private void initTextures(){
  int ix=0;
  int iy=0;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float fSelectionFaktor=1.0f;
  float[] fArRgbaWhite={1.0f,1.0f,1.0f,1f};
  float fBaseOpacity=0.5f;
  float fAddOpacity=0.05f;
  float[] fSelectionColor={1.0f,0.1f,0.5f};
  float[] fBlackColor={0.0f,0.0f,0.0f};
  Collection<Integer> selectionSet=contentVA.getIndexList();
  int StartindexX=0;
  int StartindexY=0;
  int EndindexX=StartindexX + NR_TEXTURESX - 1;
  int EndindexY=StartindexY + NR_TEXTURESY - 1;
  if (EndindexX >= MAX_AXES) {
    EndindexX=MAX_AXES - 1;
    renderStyle.setTextureNr(EndindexX - StartindexX + 1,NR_TEXTURESY);
  }
  if (EndindexY >= MAX_AXES) {
    EndindexY=MAX_AXES - 1;
    renderStyle.setTextureNr(NR_TEXTURESX,EndindexY - StartindexY + 1);
  }
  AlFullTextures.clear();
  float fGlobalTexturePointsX=iTextureSize / fSelectionFaktor;
  float fGlobalTexturePointsY=iTextureSize / fSelectionFaktor;
  int iTextureWidth=(int)(fGlobalTexturePointsX / (double)NR_TEXTURESX);
  int iTextureHeight=(int)(fGlobalTexturePointsY / (double)NR_TEXTURESY);
  int TextureSize=iTextureWidth * iTextureHeight;
  FloatBuffer FbTemp=BufferUtil.newFloatBuffer(TextureSize * 4);
  Texture tempTextur;
  for (Integer iAxisY=StartindexY; iAxisY <= EndindexY; iAxisY++) {
    for (Integer iAxisX=StartindexX; iAxisX <= EndindexX; iAxisX++) {
      for (Integer i=0; i < TextureSize; i++) {
        FbTemp.put(fArRgbaWhite);
      }
      if (true) {
        for (        Integer iContentIndex : selectionSet) {
          int current_SELECTED_X_AXIS=iAxisX;
          int current_SELECTED_Y_AXIS=iAxisY;
          xnormalized=set.get(storageVA.get(current_SELECTED_X_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
          ynormalized=set.get(storageVA.get(current_SELECTED_Y_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
          ix=(int)Math.floor(xnormalized * (double)(iTextureWidth - 1));
          iy=ix * (iTextureWidth) * 4 + (int)Math.floor(ynormalized * (double)(iTextureHeight - 1)) * 4;
          float[] fArMappingColor=null;
          if (bUseColor)           fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
 else           fArMappingColor=fBlackColor;
          if (iy >= TextureSize * 4 - 4) {
            iy=0;
          }
          FbTemp.put(iy,fArMappingColor[0]);
          FbTemp.put(iy + 1,fArMappingColor[1]);
          FbTemp.put(iy + 2,fArMappingColor[2]);
          float fcurrentOpacity=FbTemp.get(iy + 3);
          if (fcurrentOpacity < fBaseOpacity)           fcurrentOpacity=fBaseOpacity;
 else           fcurrentOpacity+=fAddOpacity;
          if (fcurrentOpacity >= 1)           fcurrentOpacity=1;
          FbTemp.put(iy + 3,fcurrentOpacity);
        }
        FbTemp.rewind();
      }
      TextureData texData=new TextureData(GL.GL_RGBA,iTextureWidth,iTextureHeight,0,GL.GL_RGBA,GL.GL_FLOAT,false,false,true,FbTemp,null);
      tempTextur=TextureIO.newTexture(0);
      tempTextur.updateImage(texData);
      AlFullTextures.add(tempTextur);
    }
  }
}",0.995241116751269
58485,"private void RenderMouseOver(GL gl){
  if (mouseoverSelectionManager.getNumberOfElements(SelectionType.MOUSE_OVER) == 0)   return;
  Set<Integer> mouseOver=mouseoverSelectionManager.getElements(SelectionType.MOUSE_OVER);
  int iContentIndex=0;
  for (  int i : mouseOver) {
    iContentIndex=i;
    break;
  }
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float x=transformOnZoom(xnormalized) * XScale;
  float y=ynormalized * YScale;
  float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
  if (elementSelectionManager.checkStatus(SelectionType.SELECTION,iContentIndex))   fArMappingColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
  float z=+1.5f;
  float fullPoint=POINTSIZE * 2f;
  gl.glColor3f(1.0f,1.0f,0.0f);
  float angle;
  float PI=(float)Math.PI;
  gl.glBegin(GL.GL_POLYGON);
  for (int i=0; i < 20; i++) {
    angle=(i * 2 * PI) / 10;
    gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
  }
  gl.glEnd();
  z=+2.0f;
  gl.glColor3f(0.0f,0.0f,0.0f);
  gl.glPointSize(POINTSIZE * 50.0f);
  gl.glBegin(GL.GL_POINTS);
  gl.glVertex3f(x,y,z);
  gl.glEnd();
  z=+2.5f;
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,2.0f);
  DrawMouseOverLabel(gl,x,y,z,fArMappingColor,1.0f,iContentIndex);
}","private void RenderMouseOver(GL gl){
  if (mouseoverSelectionManager.getNumberOfElements(SelectionType.MOUSE_OVER) == 0)   return;
  Set<Integer> mouseOver=mouseoverSelectionManager.getElements(SelectionType.MOUSE_OVER);
  int iContentIndex=0;
  for (  int i : mouseOver) {
    iContentIndex=i;
    break;
  }
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float xnormalized=set.get(storageVA.get(SELECTED_X_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float ynormalized=set.get(storageVA.get(SELECTED_Y_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float x=transformOnZoom(xnormalized) * XScale;
  float y=ynormalized * YScale;
  float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
  if (elementSelectionManager.checkStatus(SelectionType.SELECTION,iContentIndex))   fArMappingColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
  float z=+1.5f;
  float fullPoint=POINTSIZE * 2f;
  gl.glColor3f(1.0f,1.0f,0.0f);
  float angle;
  float PI=(float)Math.PI;
  gl.glBegin(GL.GL_POLYGON);
  for (int i=0; i < 20; i++) {
    angle=(i * 2 * PI) / 10;
    gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
  }
  gl.glEnd();
  z=+2.0f;
  gl.glColor3f(0.0f,0.0f,0.0f);
  gl.glPointSize(POINTSIZE * 50.0f);
  gl.glBegin(GL.GL_POINTS);
  gl.glVertex3f(x,y,z);
  gl.glEnd();
  z=+2.5f;
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,2.0f);
  DrawMouseOverLabel(gl,x,y,z,fArMappingColor,1.0f,iContentIndex);
}",0.9910394265232976
58486,"private void RenderSelection(GL gl){
  for (  SelectionType tmpSelectionType : AlSelectionTypes) {
    if (elementSelectionManager.getNumberOfElements(tmpSelectionType) == 0)     continue;
    float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
    float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
    Set<Integer> selectionSet=elementSelectionManager.getElements(tmpSelectionType);
    float x=0.0f;
    float y=0.0f;
    float z=1.0f;
    float[] fArMappingColor=tmpSelectionType.getColor();
    for (    int iContentIndex : selectionSet) {
      float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x=transformOnZoom(xnormalized) * XScale;
      y=ynormalized * YScale;
      DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,1.0f);
    }
  }
}","private void RenderSelection(GL gl){
  for (  SelectionType tmpSelectionType : AlSelectionTypes) {
    if (elementSelectionManager.getNumberOfElements(tmpSelectionType) == 0)     continue;
    float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
    float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
    Set<Integer> selectionSet=elementSelectionManager.getElements(tmpSelectionType);
    float x=0.0f;
    float y=0.0f;
    float z=1.0f;
    float[] fArMappingColor=tmpSelectionType.getColor();
    for (    int iContentIndex : selectionSet) {
      float xnormalized=set.get(storageVA.get(SELECTED_X_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      float ynormalized=set.get(storageVA.get(SELECTED_Y_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x=transformOnZoom(xnormalized) * XScale;
      y=ynormalized * YScale;
      DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,1.0f);
    }
  }
}",0.984472049689441
58487,"private void DrawMouseOverLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  String sLabel=""String_Node_Str"";
  String genLabel=""String_Node_Str"";
  if (useCase.getDataDomain() == EDataDomain.GENETIC_DATA) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.GENE_SYMBOL,iContentIndex);
    if (genLabel.equals(""String_Node_Str""))     genLabel=""String_Node_Str"";
  }
 else   if (useCase.getDataDomain() == EDataDomain.UNSPECIFIED) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.UNSPECIFIED,iContentIndex);
  }
  if (elementSelectionManager.checkStatus(SelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z + z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,-z);
}","private void DrawMouseOverLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  String sLabel=""String_Node_Str"";
  String genLabel=""String_Node_Str"";
  if (useCase.getDataDomain() == EDataDomain.GENETIC_DATA) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.GENE_SYMBOL,iContentIndex);
    if (genLabel.equals(""String_Node_Str""))     genLabel=""String_Node_Str"";
  }
 else   if (useCase.getDataDomain() == EDataDomain.UNSPECIFIED) {
    genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.UNSPECIFIED,iContentIndex);
  }
  if (elementSelectionManager.checkStatus(SelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(storageVA.get(SELECTED_X_AXIS)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(SELECTED_Y_AXIS)).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(storageVA.get(SELECTED_X_AXIS)).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(storageVA.get(SELECTED_Y_AXIS)).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z + z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,-z);
}",0.9856938483547926
58488,"/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float fRoationAngle=-45;
      float x=fCurrentWidth + XYAXISDISTANCE;
      x=transformOnZoom(x,renderStyle.getAxisWidth(),XYAXISDISTANCE) - fWidthHalf;
      float y=fYPosition + AXIS_MARKER_WIDTH - fHeight;
      gl.glTranslatef(x,y,0);
      gl.glRotatef(fRoationAngle,0,0,1);
      renderNumber(gl,Formatter.formatNumber(fNumber),0,0);
      gl.glRotatef(-fRoationAngle,0,0,1);
      gl.glTranslatef(-x,-y,0);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    float tmpx=fCurrentWidth + XYAXISDISTANCE;
    tmpx=transformOnZoom(tmpx,renderStyle.getAxisWidth(),XYAXISDISTANCE);
    gl.glVertex3f(tmpx,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(tmpx,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(bRender2Axis),renderStyle.getAxisHeight() + 1.3f * XYAXISDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(SELECTED_X_AXIS_2).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(bRender2Axis),-renderStyle.getAxisHeight() - 1.3f * XYAXISDISTANCE,0);
  gl.glTranslatef(renderStyle.getAxisWidth() + 1.7f * XYAXISDISTANCE,renderStyle.getLabelHeight(bRender2Axis),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(SELECTED_Y_AXIS_2).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getAxisWidth() - 1.7f * XYAXISDISTANCE,-renderStyle.getLabelHeight(bRender2Axis),0);
}","/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float fRoationAngle=-45;
      float x=fCurrentWidth + XYAXISDISTANCE;
      x=transformOnZoom(x,renderStyle.getAxisWidth(),XYAXISDISTANCE) - fWidthHalf;
      float y=fYPosition + AXIS_MARKER_WIDTH - fHeight;
      gl.glTranslatef(x,y,0);
      gl.glRotatef(fRoationAngle,0,0,1);
      renderNumber(gl,Formatter.formatNumber(fNumber),0,0);
      gl.glRotatef(-fRoationAngle,0,0,1);
      gl.glTranslatef(-x,-y,0);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    float tmpx=fCurrentWidth + XYAXISDISTANCE;
    tmpx=transformOnZoom(tmpx,renderStyle.getAxisWidth(),XYAXISDISTANCE);
    gl.glVertex3f(tmpx,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(tmpx,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(bRender2Axis),renderStyle.getAxisHeight() + 1.3f * XYAXISDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(storageVA.get(SELECTED_X_AXIS)).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(storageVA.get(SELECTED_X_AXIS_2)).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(bRender2Axis),-renderStyle.getAxisHeight() - 1.3f * XYAXISDISTANCE,0);
  gl.glTranslatef(renderStyle.getAxisWidth() + 1.7f * XYAXISDISTANCE,renderStyle.getLabelHeight(bRender2Axis),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(storageVA.get(SELECTED_Y_AXIS)).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(storageVA.get(SELECTED_Y_AXIS_2)).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getAxisWidth() - 1.7f * XYAXISDISTANCE,-renderStyle.getLabelHeight(bRender2Axis),0);
}",0.9931002759889604
58489,"private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  DrawRectangularSelection(gl,x,y,0.f,width,height,fArMappingColor);
  String sLabel=set.get(selected_Axis).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float fRotation=25;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  x=x + width * 1.2f;
  gl.glTranslatef(x,y,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-x,-y,0);
  gl.glPopAttrib();
}","private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  DrawRectangularSelection(gl,x,y,0.f,width,height,fArMappingColor);
  String sLabel=set.get(storageVA.get(selected_Axis)).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float fRotation=25;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  x=x + width * 1.2f;
  gl.glTranslatef(x,y,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-x,-y,0);
  gl.glPopAttrib();
}",0.9804336329984136
58490,"/** 
 * Init Selection textures, build array of textures used for holding the whole examples
 * @param gl
 */
private void initSelectionTextures(){
  int ix=0;
  int iy=0;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float fSelectionFaktor=1.0f;
  float[] fArRgbaWhite={1.0f,1.0f,1.0f,1f};
  float fBaseOpacity=0.5f;
  float fAddOpacity=0.05f;
  float[] fBlackColor={0.0f,0.0f,0.0f};
  fSelectionFaktor=2.0f;
  fArRgbaWhite=new float[]{1.0f,1.0f,1.0f,0f};
  int StartindexX=0;
  int StartindexY=0;
  int EndindexX=StartindexX + NR_TEXTURESX - 1;
  int EndindexY=StartindexY + NR_TEXTURESY - 1;
  if (EndindexX >= MAX_AXES) {
    EndindexX=MAX_AXES - 1;
    renderStyle.setTextureNr(EndindexX - StartindexX + 1,NR_TEXTURESY);
  }
  if (EndindexY >= MAX_AXES) {
    EndindexY=MAX_AXES - 1;
    renderStyle.setTextureNr(NR_TEXTURESX,EndindexY - StartindexY + 1);
  }
  AlSelectionTextures.clear();
  float fGlobalTexturePointsX=iTextureSize / fSelectionFaktor;
  float fGlobalTexturePointsY=iTextureSize / fSelectionFaktor;
  int iTextureWidth=(int)(fGlobalTexturePointsX / (double)NR_TEXTURESX);
  int iTextureHeight=(int)(fGlobalTexturePointsY / (double)NR_TEXTURESY);
  int TextureSize=iTextureWidth * iTextureHeight;
  FloatBuffer FbTemp=BufferUtil.newFloatBuffer(TextureSize * 4);
  Texture tempTextur;
  for (Integer iAxisY=StartindexY; iAxisY <= EndindexY; iAxisY++) {
    for (Integer iAxisX=StartindexX; iAxisX <= EndindexX; iAxisX++) {
      for (Integer i=0; i < TextureSize; i++) {
        FbTemp.put(fArRgbaWhite);
      }
      if (true) {
        for (        SelectionType tmpSelectionType : AlSelectionTypes) {
          Collection<Integer> selectionSet=elementSelectionManager.getElements(tmpSelectionType);
          for (          Integer iContentIndex : selectionSet) {
            int current_SELECTED_X_AXIS=iAxisX;
            int current_SELECTED_Y_AXIS=iAxisY;
            xnormalized=set.get(current_SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
            ynormalized=set.get(current_SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
            ix=(int)Math.floor(xnormalized * (double)(iTextureWidth - 1));
            iy=ix * (iTextureWidth) * 4 + (int)Math.floor(ynormalized * (double)(iTextureHeight - 1)) * 4;
            float[] fArMappingColor=tmpSelectionType.getColor();
            if (iy >= TextureSize * 4 - 4) {
              iy=0;
            }
            FbTemp.put(iy,fArMappingColor[0]);
            FbTemp.put(iy + 1,fArMappingColor[1]);
            FbTemp.put(iy + 2,fArMappingColor[2]);
            float fcurrentOpacity=FbTemp.get(iy + 3);
            if (fcurrentOpacity < fBaseOpacity)             fcurrentOpacity=fBaseOpacity;
 else             fcurrentOpacity+=fAddOpacity;
            if (fcurrentOpacity >= 1)             fcurrentOpacity=1;
            FbTemp.put(iy + 3,fcurrentOpacity);
          }
        }
        FbTemp.rewind();
      }
      TextureData texData=new TextureData(GL.GL_RGBA,iTextureWidth,iTextureHeight,0,GL.GL_RGBA,GL.GL_FLOAT,false,false,true,FbTemp,null);
      tempTextur=TextureIO.newTexture(0);
      tempTextur.updateImage(texData);
      AlSelectionTextures.add(tempTextur);
    }
  }
}","/** 
 * Init Selection textures, build array of textures used for holding the whole examples
 * @param gl
 */
private void initSelectionTextures(){
  int ix=0;
  int iy=0;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float fSelectionFaktor=1.0f;
  float[] fArRgbaWhite={1.0f,1.0f,1.0f,1f};
  float fBaseOpacity=0.5f;
  float fAddOpacity=0.05f;
  float[] fBlackColor={0.0f,0.0f,0.0f};
  fSelectionFaktor=2.0f;
  fArRgbaWhite=new float[]{1.0f,1.0f,1.0f,0f};
  int StartindexX=0;
  int StartindexY=0;
  int EndindexX=StartindexX + NR_TEXTURESX - 1;
  int EndindexY=StartindexY + NR_TEXTURESY - 1;
  if (EndindexX >= MAX_AXES) {
    EndindexX=MAX_AXES - 1;
    renderStyle.setTextureNr(EndindexX - StartindexX + 1,NR_TEXTURESY);
  }
  if (EndindexY >= MAX_AXES) {
    EndindexY=MAX_AXES - 1;
    renderStyle.setTextureNr(NR_TEXTURESX,EndindexY - StartindexY + 1);
  }
  AlSelectionTextures.clear();
  float fGlobalTexturePointsX=iTextureSize / fSelectionFaktor;
  float fGlobalTexturePointsY=iTextureSize / fSelectionFaktor;
  int iTextureWidth=(int)(fGlobalTexturePointsX / (double)NR_TEXTURESX);
  int iTextureHeight=(int)(fGlobalTexturePointsY / (double)NR_TEXTURESY);
  int TextureSize=iTextureWidth * iTextureHeight;
  FloatBuffer FbTemp=BufferUtil.newFloatBuffer(TextureSize * 4);
  Texture tempTextur;
  for (Integer iAxisY=StartindexY; iAxisY <= EndindexY; iAxisY++) {
    for (Integer iAxisX=StartindexX; iAxisX <= EndindexX; iAxisX++) {
      for (Integer i=0; i < TextureSize; i++) {
        FbTemp.put(fArRgbaWhite);
      }
      if (true) {
        for (        SelectionType tmpSelectionType : AlSelectionTypes) {
          Collection<Integer> selectionSet=elementSelectionManager.getElements(tmpSelectionType);
          for (          Integer iContentIndex : selectionSet) {
            int current_SELECTED_X_AXIS=iAxisX;
            int current_SELECTED_Y_AXIS=iAxisY;
            xnormalized=set.get(storageVA.get(current_SELECTED_X_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
            ynormalized=set.get(storageVA.get(current_SELECTED_Y_AXIS)).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
            ix=(int)Math.floor(xnormalized * (double)(iTextureWidth - 1));
            iy=ix * (iTextureWidth) * 4 + (int)Math.floor(ynormalized * (double)(iTextureHeight - 1)) * 4;
            float[] fArMappingColor=tmpSelectionType.getColor();
            if (iy >= TextureSize * 4 - 4) {
              iy=0;
            }
            FbTemp.put(iy,fArMappingColor[0]);
            FbTemp.put(iy + 1,fArMappingColor[1]);
            FbTemp.put(iy + 2,fArMappingColor[2]);
            float fcurrentOpacity=FbTemp.get(iy + 3);
            if (fcurrentOpacity < fBaseOpacity)             fcurrentOpacity=fBaseOpacity;
 else             fcurrentOpacity+=fAddOpacity;
            if (fcurrentOpacity >= 1)             fcurrentOpacity=1;
            FbTemp.put(iy + 3,fcurrentOpacity);
          }
        }
        FbTemp.rewind();
      }
      TextureData texData=new TextureData(GL.GL_RGBA,iTextureWidth,iTextureHeight,0,GL.GL_RGBA,GL.GL_FLOAT,false,false,true,FbTemp,null);
      tempTextur=TextureIO.newTexture(0);
      tempTextur.updateImage(texData);
      AlSelectionTextures.add(tempTextur);
    }
  }
}",0.9953789279112756
58491,"ArrayList<Integer> calculateLeaveIDs(){
  leaveIDs=new ArrayList<Integer>();
  ArrayList<Node> children=tree.getChildren(node);
  if (children == null) {
    leaveIDs.add(leafID);
    return leaveIDs;
  }
 else {
    for (    Node child : children) {
      leaveIDs.addAll(child.getLeaveIds());
    }
    return leaveIDs;
  }
}","ArrayList<Integer> calculateLeaveIDs(){
  leaveIDs=new ArrayList<Integer>();
  ArrayList<Node> children=tree.getChildren(node);
  if (children == null) {
    leaveIDs.add(leafID);
    return leaveIDs;
  }
 else {
    for (    Node child : children) {
      leaveIDs.addAll(child.calculateLeaveIDs());
    }
    return leaveIDs;
  }
}",0.9606060606060606
58492,"public InputSource getInputSource(String sFileName) throws FileNotFoundException {
  InputSource inputSource;
  if (this.getClass().getClassLoader().getResourceAsStream(sFileName) != null) {
    inputSource=new InputSource(loadResourceAsInputStream(sFileName));
  }
 else {
    inputSource=new InputSource(new FileReader(new File(sFileName)));
  }
  return inputSource;
}","public InputSource getInputSource(String sFileName) throws FileNotFoundException {
  InputSource inputSource;
  if (this.getClass().getClassLoader().getResourceAsStream(sFileName) != null) {
    inputSource=new InputSource(loadResourceAsInputStream(sFileName));
  }
 else {
    inputSource=new InputSource(new BufferedInputStream(new FileInputStream(sFileName)));
  }
  return inputSource;
}",0.926509186351706
58493,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  togglePointTypeListener=new TogglePointTypeListener();
  togglePointTypeListener.setHandler(this);
  eventPublisher.addListener(TogglePointTypeEvent.class,togglePointTypeListener);
  resetSelectionListener=new ToggleMatrixViewListener();
  resetSelectionListener.setHandler(this);
  eventPublisher.addListener(SwitchMatrixViewEvent.class,resetSelectionListener);
  setPointSizeListener=new SetPointSizeListener();
  setPointSizeListener.setHandler(this);
  eventPublisher.addListener(SetPointSizeEvent.class,setPointSizeListener);
  xAxisSelectorListener=new XAxisSelectorListener();
  xAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(XAxisSelectorEvent.class,xAxisSelectorListener);
  yAxisSelectorListener=new YAxisSelectorListener();
  yAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(YAxisSelectorEvent.class,yAxisSelectorListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  togglePointTypeListener=new TogglePointTypeListener();
  togglePointTypeListener.setHandler(this);
  eventPublisher.addListener(TogglePointTypeEvent.class,togglePointTypeListener);
  toggleMatrixViewListener=new ToggleMatrixViewListener();
  toggleMatrixViewListener.setHandler(this);
  eventPublisher.addListener(SwitchMatrixViewEvent.class,toggleMatrixViewListener);
  toggle2AxisModeListener=new Toggle2AxisModeListener();
  toggle2AxisModeListener.setHandler(this);
  eventPublisher.addListener(Toggle2AxisEvent.class,toggle2AxisModeListener);
  toggleColorModeListener=new ToggleColorModeListener();
  toggleColorModeListener.setHandler(this);
  eventPublisher.addListener(ToggleColorModeEvent.class,toggleColorModeListener);
  toggleMatrixZoomListener=new ToggleMatrixZoomListener();
  toggleMatrixZoomListener.setHandler(this);
  eventPublisher.addListener(ToggleMatrixZoomEvent.class,toggleMatrixZoomListener);
  setPointSizeListener=new SetPointSizeListener();
  setPointSizeListener.setHandler(this);
  eventPublisher.addListener(SetPointSizeEvent.class,setPointSizeListener);
  xAxisSelectorListener=new XAxisSelectorListener();
  xAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(XAxisSelectorEvent.class,xAxisSelectorListener);
  yAxisSelectorListener=new YAxisSelectorListener();
  yAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(YAxisSelectorEvent.class,yAxisSelectorListener);
}",0.7419354838709677
58494,"@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (togglePointTypeListener != null) {
    eventPublisher.removeListener(togglePointTypeListener);
    togglePointTypeListener=null;
  }
  if (resetSelectionListener != null) {
    eventPublisher.removeListener(resetSelectionListener);
    resetSelectionListener=null;
  }
  if (setPointSizeListener != null) {
    eventPublisher.removeListener(setPointSizeListener);
    setPointSizeListener=null;
  }
  if (xAxisSelectorListener != null) {
    eventPublisher.removeListener(xAxisSelectorListener);
    xAxisSelectorListener=null;
  }
  if (yAxisSelectorListener != null) {
    eventPublisher.removeListener(yAxisSelectorListener);
    yAxisSelectorListener=null;
  }
}","@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (togglePointTypeListener != null) {
    eventPublisher.removeListener(togglePointTypeListener);
    togglePointTypeListener=null;
  }
  if (toggleMatrixViewListener != null) {
    eventPublisher.removeListener(toggleMatrixViewListener);
    toggleMatrixViewListener=null;
  }
  if (toggleMatrixZoomListener != null) {
    eventPublisher.removeListener(toggleMatrixZoomListener);
    toggleMatrixZoomListener=null;
  }
  if (toggle2AxisModeListener != null) {
    eventPublisher.removeListener(toggle2AxisModeListener);
    toggle2AxisModeListener=null;
  }
  if (toggleColorModeListener != null) {
    eventPublisher.removeListener(toggleColorModeListener);
    toggleColorModeListener=null;
  }
  if (setPointSizeListener != null) {
    eventPublisher.removeListener(setPointSizeListener);
    setPointSizeListener=null;
  }
  if (xAxisSelectorListener != null) {
    eventPublisher.removeListener(xAxisSelectorListener);
    xAxisSelectorListener=null;
  }
  if (yAxisSelectorListener != null) {
    eventPublisher.removeListener(yAxisSelectorListener);
    yAxisSelectorListener=null;
  }
}",0.721936148300721
58495,"@Override public void handleEvent(AEvent event){
  if (event instanceof ToggleColorModeEvent) {
    handler.toggleSpecialAxisMode();
  }
}","@Override public void handleEvent(AEvent event){
  if (event instanceof Toggle2AxisEvent) {
    handler.toggleSpecialAxisMode();
  }
}",0.9485294117647058
58496,"@Override public void handleEvent(AEvent event){
  if (event instanceof ToggleColorModeEvent) {
    handler.toggleMatrixZoom();
  }
}","@Override public void handleEvent(AEvent event){
  if (event instanceof ToggleMatrixZoomEvent) {
    handler.toggleMatrixZoom();
  }
}",0.9438202247191012
58497,"/** 
 * Recursive function which determines the number of elements in each node of the tree.
 * @param tree
 * @param node current node
 * @return number of elements in the current node
 */
private static int determineNrElementsRec(Tree<ClusterNode> tree,ClusterNode node){
  if (tree.hasChildren(node)) {
    int temp=0;
    for (    ClusterNode current : tree.getChildren(node)) {
      temp+=determineNrElementsRec(tree,current);
    }
    node.setNrElements(temp);
  }
  return node.getNrElements();
}","/** 
 * Recursive function which determines the number of elements in each node of the tree.
 * @param tree
 * @param node current node
 * @return number of elements in the current node
 */
private static int determineNrElementsRec(Tree<ClusterNode> tree,ClusterNode node){
  if (tree.hasChildren(node)) {
    int temp=0;
    for (    ClusterNode current : tree.getChildren(node)) {
      temp+=determineNrElementsRec(tree,current);
    }
    node.setNrElements(temp);
  }
 else {
    node.setNrElements(1);
  }
  return node.getNrElements();
}",0.9628217349857008
58498,"/** 
 * The palcluster routine performs clustering using single linking on the given distance matrix.
 * @param eClustererType
 * @return virtual array with ordered indexes
 */
private IVirtualArray pslcluster(EClustererType eClustererType){
  int nnodes=iNrSamples - 1;
  int[] vector=new int[nnodes];
  float[] temp=new float[nnodes];
  int[] index=new int[iNrSamples];
  Node[] result=null;
  float[][] distmatrix;
  try {
    result=new Node[iNrSamples];
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  for (int i=0; i < iNrSamples; i++) {
    result[i]=new Node();
    result[i].setCorrelation(Float.MAX_VALUE);
    for (int j=0; j < i; j++)     temp[j]=distmatrix[i][j];
    for (int j=0; j < i; j++) {
      int k=vector[j];
      if (result[j].getCorrelation() >= temp[j]) {
        if (result[j].getCorrelation() < temp[k])         temp[k]=result[j].getCorrelation();
        result[j].setCorrelation(temp[j]);
        vector[j]=i;
      }
 else       if (temp[j] < temp[k])       temp[k]=temp[j];
    }
    for (int j=0; j < i; j++) {
      if (result[j].getCorrelation() >= result[vector[j]].getCorrelation())       vector[j]=i;
    }
  }
  for (int i=0; i < nnodes; i++)   result[i].setLeft(i);
  for (int i=0; i < iNrSamples; i++)   index[i]=i;
  for (int i=0; i < nnodes; i++) {
    int j=result[i].getLeft();
    int k=vector[j];
    result[i].setLeft(index[j]);
    result[i].setRight(index[k]);
    index[k]=-i - 1;
  }
  Node[] result2=new Node[nnodes];
  for (int i=0; i < nnodes; i++)   result2[i]=result[i];
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true,-1);
  tree.setRootNode(node);
  treeStructureToTree(node,result2,result2.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  ArrayList<Integer> alIndices=new ArrayList<Integer>();
  alIndices=ClusterHelper.getGeneIdsOfNode(tree,tree.getRoot());
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdContent).getVAType(),set.depth(),alIndices);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdStorage).getVAType(),set.size(),alIndices);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}","/** 
 * The palcluster routine performs clustering using single linking on the given distance matrix.
 * @param eClustererType
 * @return virtual array with ordered indexes
 */
private IVirtualArray pslcluster(EClustererType eClustererType){
  int nnodes=iNrSamples - 1;
  int[] vector=new int[nnodes];
  float[] temp=new float[nnodes];
  int[] index=new int[iNrSamples];
  Node[] result=null;
  float[][] distmatrix;
  try {
    result=new Node[iNrSamples];
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  for (int i=0; i < iNrSamples; i++) {
    result[i]=new Node();
    result[i].setCorrelation(Float.MAX_VALUE);
    for (int j=0; j < i; j++)     temp[j]=distmatrix[i][j];
    for (int j=0; j < i; j++) {
      int k=vector[j];
      if (result[j].getCorrelation() >= temp[j]) {
        if (result[j].getCorrelation() < temp[k])         temp[k]=result[j].getCorrelation();
        result[j].setCorrelation(temp[j]);
        vector[j]=i;
      }
 else       if (temp[j] < temp[k])       temp[k]=temp[j];
    }
    for (int j=0; j < i; j++) {
      if (result[j].getCorrelation() >= result[vector[j]].getCorrelation())       vector[j]=i;
    }
  }
  for (int i=0; i < nnodes; i++)   result[i].setLeft(i);
  for (int i=0; i < iNrSamples; i++)   index[i]=i;
  for (int i=0; i < nnodes; i++) {
    int j=result[i].getLeft();
    int k=vector[j];
    result[i].setLeft(index[j]);
    result[i].setRight(index[k]);
    index[k]=-i - 1;
  }
  Node[] result2=new Node[nnodes];
  for (int i=0; i < nnodes; i++)   result2[i]=result[i];
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true,-1);
  tree.setRootNode(node);
  treeStructureToTree(node,result2,result2.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  ClusterHelper.determineExpressionValue(tree,eClustererType,set);
  ArrayList<Integer> alIndices=new ArrayList<Integer>();
  alIndices=ClusterHelper.getGeneIdsOfNode(tree,tree.getRoot());
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdContent).getVAType(),set.depth(),alIndices);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdStorage).getVAType(),set.size(),alIndices);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.9958143767060964
58499,"/** 
 * The pmlcluster routine performs clustering using pairwise maximum- (complete-) linking on the given distance matrix.
 * @param eClustererType
 * @return virtual array with ordered indexes
 */
private IVirtualArray pmlcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++)   clusterid[j]=j;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  int j;
  ClosestPair pair=null;
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      int is=1;
      int js=0;
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      for (j=0; j < js; j++)       distmatrix[js][j]=Math.max(distmatrix[is][j],distmatrix[js][j]);
      for (j=js + 1; j < is; j++)       distmatrix[j][js]=Math.max(distmatrix[is][j],distmatrix[j][js]);
      for (j=is + 1; j < n; j++)       distmatrix[j][js]=Math.max(distmatrix[j][is],distmatrix[j][js]);
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true,-1);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  AlIndexes=ClusterHelper.getGeneIdsOfNode(tree,tree.getRoot());
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdContent).getVAType(),set.depth(),AlIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdStorage).getVAType(),set.size(),AlIndexes);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}","/** 
 * The pmlcluster routine performs clustering using pairwise maximum- (complete-) linking on the given distance matrix.
 * @param eClustererType
 * @return virtual array with ordered indexes
 */
private IVirtualArray pmlcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++)   clusterid[j]=j;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  int j;
  ClosestPair pair=null;
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      int is=1;
      int js=0;
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      for (j=0; j < js; j++)       distmatrix[js][j]=Math.max(distmatrix[is][j],distmatrix[js][j]);
      for (j=js + 1; j < is; j++)       distmatrix[j][js]=Math.max(distmatrix[is][j],distmatrix[j][js]);
      for (j=is + 1; j < n; j++)       distmatrix[j][js]=Math.max(distmatrix[j][is],distmatrix[j][js]);
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true,-1);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  ClusterHelper.determineExpressionValue(tree,eClustererType,set);
  AlIndexes=ClusterHelper.getGeneIdsOfNode(tree,tree.getRoot());
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdContent).getVAType(),set.depth(),AlIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdStorage).getVAType(),set.size(),AlIndexes);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.996609169983783
58500,"/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param eClustererType
 * @return virtual array with ordered indexes
 */
private IVirtualArray palcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> alIndices=new ArrayList<Integer>();
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int sum;
      int is=1;
      int js=0;
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      sum=number[is] + number[js];
      for (j=0; j < js; j++) {
        distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
        distmatrix[js][j]/=sum;
      }
      for (j=js + 1; j < is; j++) {
        distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=is + 1; j < n; j++) {
        distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      number[js]=sum;
      number[is]=number[n - 1];
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true,-1);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  alIndices=ClusterHelper.getGeneIdsOfNode(tree,tree.getRoot());
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdContent).getVAType(),set.depth(),alIndices);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdStorage).getVAType(),set.size(),alIndices);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}","/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param eClustererType
 * @return virtual array with ordered indexes
 */
private IVirtualArray palcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> alIndices=new ArrayList<Integer>();
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int sum;
      int is=1;
      int js=0;
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      sum=number[is] + number[js];
      for (j=0; j < js; j++) {
        distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
        distmatrix[js][j]/=sum;
      }
      for (j=js + 1; j < is; j++) {
        distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=is + 1; j < n; j++) {
        distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      number[js]=sum;
      number[is]=number[n - 1];
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true,-1);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  ClusterHelper.determineExpressionValue(tree,eClustererType,set);
  alIndices=ClusterHelper.getGeneIdsOfNode(tree,tree.getRoot());
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdContent).getVAType(),set.depth(),alIndices);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(set.getVA(iVAIdStorage).getVAType(),set.size(),alIndices);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.9969164767395092
58501,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  togglePointTypeListener=new TogglePointTypeListener();
  togglePointTypeListener.setHandler(this);
  eventPublisher.addListener(TogglePointTypeEvent.class,togglePointTypeListener);
  resetSelectionListener=new ResetSelectionListener();
  resetSelectionListener.setHandler(this);
  eventPublisher.addListener(ResetScatterSelectionEvent.class,resetSelectionListener);
  setPointSizeListener=new SetPointSizeListener();
  setPointSizeListener.setHandler(this);
  eventPublisher.addListener(SetPointSizeEvent.class,setPointSizeListener);
  xAxisSelectorListener=new XAxisSelectorListener();
  xAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(XAxisSelectorEvent.class,xAxisSelectorListener);
  yAxisSelectorListener=new YAxisSelectorListener();
  yAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(YAxisSelectorEvent.class,yAxisSelectorListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  togglePointTypeListener=new TogglePointTypeListener();
  togglePointTypeListener.setHandler(this);
  eventPublisher.addListener(TogglePointTypeEvent.class,togglePointTypeListener);
  resetSelectionListener=new ToggleMatrixViewListener();
  resetSelectionListener.setHandler(this);
  eventPublisher.addListener(SwitchMatrixViewEvent.class,resetSelectionListener);
  setPointSizeListener=new SetPointSizeListener();
  setPointSizeListener.setHandler(this);
  eventPublisher.addListener(SetPointSizeEvent.class,setPointSizeListener);
  xAxisSelectorListener=new XAxisSelectorListener();
  xAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(XAxisSelectorEvent.class,xAxisSelectorListener);
  yAxisSelectorListener=new YAxisSelectorListener();
  yAxisSelectorListener.setHandler(this);
  eventPublisher.addListener(YAxisSelectorEvent.class,yAxisSelectorListener);
}",0.9652309289050336
58502,"/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float x=fCurrentWidth - fWidthHalf + XYAXISDISTANCE;
      float y=fYPosition - AXIS_MARKER_WIDTH - fHeight;
      renderNumber(gl,Formatter.formatNumber(fNumber),x,y);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  if (bRenderMatrix)   gl.glTranslatef(renderStyle.getLAbelWidth(),-2 * XLABELDISTANCE,0);
 else   gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  if (bRenderMatrix)   gl.glTranslatef(-renderStyle.getLAbelWidth(),+2 * XLABELDISTANCE,0);
 else   gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  if (bRenderMatrix)   gl.glTranslatef(-YLABELDISTANCE,renderStyle.getLabelHeight(),0);
 else   gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  if (bRenderMatrix)   gl.glTranslatef(YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
 else   gl.glTranslatef(-YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
}","/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float fRoationAngle=-45;
      float x=fCurrentWidth - fWidthHalf + XYAXISDISTANCE;
      float y=fYPosition + AXIS_MARKER_WIDTH - fHeight;
      gl.glTranslatef(x,y,0);
      gl.glRotatef(fRoationAngle,0,0,1);
      renderNumber(gl,Formatter.formatNumber(fNumber),0,0);
      gl.glRotatef(-fRoationAngle,0,0,1);
      gl.glTranslatef(-x,-y,0);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(bRender2Axis),renderStyle.getAxisHeight() + 1.3f * XYAXISDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(SELECTED_X_AXIS_2).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(bRender2Axis),-renderStyle.getAxisHeight() - 1.3f * XYAXISDISTANCE,0);
  gl.glTranslatef(renderStyle.getAxisWidth() + 1.7f * XYAXISDISTANCE,renderStyle.getLabelHeight(bRender2Axis),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  if (bRender2Axis)   sAxisLabel+=""String_Node_Str"" + set.get(SELECTED_Y_AXIS_2).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getAxisWidth() - 1.7f * XYAXISDISTANCE,-renderStyle.getLabelHeight(bRender2Axis),0);
}",0.8344532681734881
58503,"@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (glRemoteRenderingView != null || this.getViewType().equals(""String_Node_Str"") || this.getViewType().equals(""String_Node_Str"") || this.getViewType().equals(""String_Node_Str"")) {
    viewFrustum.considerAspectRatio(true);
  }
 else {
    Rectangle frame=parentGLCanvas.getBounds();
    viewFrustum.setLeft(0);
    viewFrustum.setBottom(0);
    float value=(float)frame.height / (float)frame.width * 8.0f;
    if (this.getViewType().equals(""String_Node_Str""))     viewFrustum.setTop(5.51f);
 else     viewFrustum.setTop(value);
    viewFrustum.setRight(8);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
    bHasFrustumChanged=true;
  }
  GL gl=drawable.getGL();
  fAspectRatio=(float)height / (float)width;
  gl.glViewport(x,y,width,height);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glLoadIdentity();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
}","@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (glRemoteRenderingView != null || this.getViewType().equals(""String_Node_Str"") || this.getViewType().equals(""String_Node_Str"") || this.getViewType().equals(""String_Node_Str"")) {
    viewFrustum.considerAspectRatio(true);
  }
 else {
    Rectangle frame=parentGLCanvas.getBounds();
    viewFrustum.setLeft(0);
    viewFrustum.setBottom(0);
    float value=(float)frame.height / (float)frame.width * 8.0f;
    viewFrustum.setTop(value);
    viewFrustum.setRight(8);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
    bHasFrustumChanged=true;
  }
  GL gl=drawable.getGL();
  fAspectRatio=(float)height / (float)width;
  gl.glViewport(x,y,width,height);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glLoadIdentity();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
}",0.9508904479222882
58504,"@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta delta,String info){
  SelectionManager selectionManager;
  if (delta.getIDType() == EIDType.EXPERIMENT_INDEX) {
    storageSelectionManager.setVADelta(delta);
    for (    VADeltaItem deltaItem : delta.getAllItems()) {
      final int iVAIndex=deltaItem.getIndex();
switch (deltaItem.getType()) {
case REMOVE:
        composite.getDisplay().asyncExec(new Runnable(){
          public void run(){
            contentTable.getColumn(iVAIndex + 3).dispose();
          }
        }
);
      break;
case ADD:
    addColumn(deltaItem.getIndex() + COLUMN_OFFSET,deltaItem.getPrimaryID());
  break;
case COPY:
addColumn(deltaItem.getIndex() + 1 + COLUMN_OFFSET,storageVA.get(deltaItem.getIndex()));
break;
case MOVE:
int[] orig=contentTable.getColumnOrder();
System.out.println(Arrays.toString(orig));
ArrayList<Integer> ordered=new ArrayList<Integer>(orig.length);
for (int index : orig) {
ordered.add(index);
}
Integer item=ordered.remove(deltaItem.getIndex() + COLUMN_OFFSET);
System.out.println(ordered);
ordered.add(deltaItem.getTargetIndex() + COLUMN_OFFSET,item);
System.out.println(ordered);
for (int count=0; count < ordered.size(); count++) {
orig[count]=ordered.get(count);
}
System.out.println(Arrays.toString(orig));
contentTable.setColumnOrder(orig);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}
}
 else if (delta.getIDType() == EIDType.REFSEQ_MRNA_INT) {
delta=DeltaConverter.convertDelta(EIDType.EXPRESSION_INDEX,delta);
selectionManager=contentSelectionManager;
selectionManager.setVADelta(delta);
}
 else if (delta.getIDType() == EIDType.EXPRESSION_INDEX) {
selectionManager=contentSelectionManager;
selectionManager.setVADelta(delta);
}
 else return;
}","@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta delta,String info){
  SelectionManager selectionManager;
  if (delta.getIDType() == EIDType.EXPERIMENT_INDEX) {
    storageSelectionManager.setVADelta(delta);
    for (    VADeltaItem deltaItem : delta.getAllItems()) {
      final int iVAIndex=deltaItem.getIndex();
switch (deltaItem.getType()) {
case REMOVE:
        composite.getDisplay().asyncExec(new Runnable(){
          public void run(){
            contentTable.getColumn(iVAIndex + 3).dispose();
          }
        }
);
      break;
case ADD:
    addColumn(deltaItem.getIndex() + COLUMN_OFFSET,deltaItem.getPrimaryID());
  break;
case COPY:
addColumn(deltaItem.getIndex() + 1 + COLUMN_OFFSET,storageVA.get(deltaItem.getIndex()));
break;
case MOVE:
int[] orig=contentTable.getColumnOrder();
ArrayList<Integer> ordered=new ArrayList<Integer>(orig.length);
for (int index : orig) {
ordered.add(index);
}
Integer item=ordered.remove(deltaItem.getIndex() + COLUMN_OFFSET);
ordered.add(deltaItem.getTargetIndex() + COLUMN_OFFSET,item);
for (int count=0; count < ordered.size(); count++) {
orig[count]=ordered.get(count);
}
contentTable.setColumnOrder(orig);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}
}
 else if (delta.getIDType() == EIDType.REFSEQ_MRNA_INT) {
delta=DeltaConverter.convertDelta(EIDType.EXPRESSION_INDEX,delta);
selectionManager=contentSelectionManager;
selectionManager.setVADelta(delta);
}
 else if (delta.getIDType() == EIDType.EXPRESSION_INDEX) {
selectionManager=contentSelectionManager;
selectionManager.setVADelta(delta);
}
 else return;
}",0.9572700296735904
58505,"private void renderMatrixSelection(GL gl){
  float fHeight;
  float fWidth;
  fHeight=viewFrustum.getHeight();
  fWidth=viewFrustum.getWidth();
  if (fWidth > fHeight)   fWidth=fHeight;
  int iAddTextures=1;
  if (bAllowMatrixZoom)   if (MOUSEOVER_X_AXIS >= 0 && MOUSEOVER_Y_AXIS > 0)   iAddTextures=5;
  float fStepY=fHeight / (float)(NR_TEXTURESY + iAddTextures);
  float fStepX=fWidth / (float)(NR_TEXTURESX + iAddTextures);
  float fSpacerX=fStepX / (float)(NR_TEXTURESY + iAddTextures);
  float fSpacerY=fStepY / (float)(NR_TEXTURESX + iAddTextures);
  float fyOffset=fHeight;
  float fxOffset=fSpacerX;
  int iZoomfactor=1;
  float iMOVERZOOMX=0;
  float iMOVERZOOMY=0;
  if ((MOUSEOVER_X_AXIS >= 0 && MOUSEOVER_Y_AXIS >= 0) && (bAllowMatrixZoom)) {
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS + 1))     iMOVERZOOMX=0.5f;
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS + 1))     iMOVERZOOMY=0.5f;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS))     iMOVERZOOMX=2.0f;
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS))     iMOVERZOOMY=2.0f;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS - 1))     iMOVERZOOMX=3.5f;
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS - 1))     iMOVERZOOMY=3.5f;
    if ((MOUSEOVER_X_AXIS < SELECTED_X_AXIS - 1))     iMOVERZOOMX=4;
    if ((MOUSEOVER_Y_AXIS < SELECTED_Y_AXIS - 1))     iMOVERZOOMY=4;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS) && (MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS + 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=1.5f;
      iMOVERZOOMY=1;
    }
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS) && (MOUSEOVER_X_AXIS == SELECTED_X_AXIS + 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=0f;
      iMOVERZOOMY=2.5f;
    }
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS) && (MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS - 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=1.5f;
      iMOVERZOOMY=4;
    }
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS) && (MOUSEOVER_X_AXIS == SELECTED_X_AXIS - 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=3f;
      iMOVERZOOMY=2.5f;
    }
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS) && (MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS)) {
      iMOVERZOOMX=1;
      iMOVERZOOMY=3;
      if (MOUSEOVER_X_AXIS == 0)       iMOVERZOOMX=0;
      iZoomfactor=3;
    }
  }
  fyOffset-=(fStepY + fSpacerY) * (float)(SELECTED_Y_AXIS + 1 + iMOVERZOOMY);
  fxOffset+=(fStepX + fSpacerX) * (float)(SELECTED_X_AXIS + iMOVERZOOMX);
  float fEdge=0.01f;
  float z=1f;
  float[] fArMappingColor=GeneralRenderStyle.SELECTED_COLOR;
  DrawRectangularSelection(gl,fxOffset - fEdge,fyOffset - fEdge,z,fStepX * iZoomfactor + 2 * fEdge,fStepY * iZoomfactor + 2 * fEdge,fArMappingColor);
  if ((MOUSEOVER_X_AXIS < 0 && MOUSEOVER_Y_AXIS < 0))   return;
  fyOffset=fHeight;
  fxOffset=fSpacerX;
  if (bAllowMatrixZoom) {
    iMOVERZOOMX=1;
    iMOVERZOOMY=3;
    if (MOUSEOVER_X_AXIS == 0)     iMOVERZOOMX=0;
    iZoomfactor=3;
  }
  fyOffset-=(fStepY + fSpacerY) * (float)(MOUSEOVER_Y_AXIS + 1 + iMOVERZOOMY);
  fxOffset+=(fStepX + fSpacerX) * (float)(MOUSEOVER_X_AXIS + iMOVERZOOMX);
  fArMappingColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
  DrawRectangularSelection(gl,fxOffset - fEdge,fyOffset - fEdge,z,fStepX * iZoomfactor + 2 * fEdge,fStepY * iZoomfactor + 2 * fEdge,fArMappingColor);
}","private void renderMatrixSelection(GL gl){
  float fHeight;
  float fWidth;
  fHeight=viewFrustum.getHeight();
  fWidth=viewFrustum.getWidth();
  if (fWidth > fHeight)   fWidth=fHeight;
  int iAddTextures=1;
  if (bAllowMatrixZoom)   if (MOUSEOVER_X_AXIS >= 0 && MOUSEOVER_Y_AXIS > 0)   iAddTextures=5;
  float fStepY=fHeight / (float)(NR_TEXTURESY + iAddTextures);
  float fStepX=fWidth / (float)(NR_TEXTURESX + iAddTextures);
  float fSpacerX=fStepX / (float)(NR_TEXTURESY + iAddTextures);
  float fSpacerY=fStepY / (float)(NR_TEXTURESX + iAddTextures);
  float fyOffset=fHeight;
  float fxOffset=fSpacerX;
  int iZoomfactor=1;
  float iMOVERZOOMX=0;
  float iMOVERZOOMY=0;
  if ((MOUSEOVER_X_AXIS >= 0 && MOUSEOVER_Y_AXIS >= 0) && (bAllowMatrixZoom)) {
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS + 1))     iMOVERZOOMX=0.5f;
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS + 1))     iMOVERZOOMY=0.5f;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS))     iMOVERZOOMX=2.0f;
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS))     iMOVERZOOMY=2.0f;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS - 1))     iMOVERZOOMX=3.5f;
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS - 1))     iMOVERZOOMY=3.5f;
    if ((MOUSEOVER_X_AXIS < SELECTED_X_AXIS - 1))     iMOVERZOOMX=4;
    if ((MOUSEOVER_Y_AXIS < SELECTED_Y_AXIS - 1))     iMOVERZOOMY=4;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS) && (MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS + 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=1.5f;
      iMOVERZOOMY=1;
    }
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS) && (MOUSEOVER_X_AXIS == SELECTED_X_AXIS + 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=0f;
      iMOVERZOOMY=2.5f;
    }
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS) && (MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS - 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=1.5f;
      iMOVERZOOMY=4;
    }
    if ((MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS) && (MOUSEOVER_X_AXIS == SELECTED_X_AXIS - 1)) {
      iZoomfactor=2;
      iMOVERZOOMX=3f;
      iMOVERZOOMY=2.5f;
    }
    if (MOUSEOVER_X_AXIS == 0)     iMOVERZOOMX-=1;
    if ((MOUSEOVER_X_AXIS == SELECTED_X_AXIS) && (MOUSEOVER_Y_AXIS == SELECTED_Y_AXIS)) {
      iMOVERZOOMX=1;
      iMOVERZOOMY=3;
      if (MOUSEOVER_X_AXIS == 0)       iMOVERZOOMX=0;
      iZoomfactor=3;
    }
  }
  fyOffset-=(fStepY + fSpacerY) * (float)(SELECTED_Y_AXIS + 1 + iMOVERZOOMY);
  fxOffset+=(fStepX + fSpacerX) * (float)(SELECTED_X_AXIS + iMOVERZOOMX);
  float fEdge=0.01f;
  float z=1f;
  float[] fArMappingColor=GeneralRenderStyle.SELECTED_COLOR;
  DrawRectangularSelection(gl,fxOffset - fEdge,fyOffset - fEdge,z,fStepX * iZoomfactor + 2 * fEdge,fStepY * iZoomfactor + 2 * fEdge,fArMappingColor);
  if ((MOUSEOVER_X_AXIS < 0 && MOUSEOVER_Y_AXIS < 0))   return;
  fyOffset=fHeight;
  fxOffset=fSpacerX;
  if (bAllowMatrixZoom) {
    iMOVERZOOMX=1;
    iMOVERZOOMY=3;
    if (MOUSEOVER_X_AXIS == 0)     iMOVERZOOMX=0;
    iZoomfactor=3;
  }
  fyOffset-=(fStepY + fSpacerY) * (float)(MOUSEOVER_Y_AXIS + 1 + iMOVERZOOMY);
  fxOffset+=(fStepX + fSpacerX) * (float)(MOUSEOVER_X_AXIS + iMOVERZOOMX);
  fArMappingColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
  DrawRectangularSelection(gl,fxOffset - fEdge,fyOffset - fEdge,z,fStepX * iZoomfactor + 2 * fEdge,fStepY * iZoomfactor + 2 * fEdge,fArMappingColor);
}",0.9921113689095128
58506,"private void renderHistogram(GL gl,float x,float y,float lenght,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  DrawRectangularSelection(gl,x,y,0.f,lenght,height,fArMappingColor);
  String sLabel=set.get(selected_Axis).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,x,y + (1 * height / 3),ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.draw3D(gl,""String_Node_Str"",x,y + (2 * height / 3),ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
}","private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  DrawRectangularSelection(gl,x,y,0.f,width,height,fArMappingColor);
  String sLabel=set.get(selected_Axis).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float fRotation=45;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glTranslatef(x,y,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0 + width,0 + (1 * height / 3),ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-x,-y,0);
  gl.glPopAttrib();
}",0.8111520252498685
58507,"/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      renderNumber(gl,Formatter.formatNumber(fNumber),fCurrentWidth - fWidthHalf + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH - fHeight);
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
}","/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,Formatter.formatNumber(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,Formatter.formatNumber(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
      float x=fCurrentWidth - fWidthHalf + XYAXISDISTANCE;
      float y=fYPosition - AXIS_MARKER_WIDTH - fHeight;
      renderNumber(gl,Formatter.formatNumber(fNumber),x,y);
      gl.glPopAttrib();
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  if (bRenderMatrix)   gl.glTranslatef(renderStyle.getLAbelWidth(),-2 * XLABELDISTANCE,0);
 else   gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  if (bRenderMatrix)   gl.glTranslatef(-renderStyle.getLAbelWidth(),+2 * XLABELDISTANCE,0);
 else   gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  if (bRenderMatrix)   gl.glTranslatef(-YLABELDISTANCE,renderStyle.getLabelHeight(),0);
 else   gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  if (bRenderMatrix)   gl.glTranslatef(YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
 else   gl.glTranslatef(-YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
}",0.7707667731629393
58508,"private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  DrawRectangularSelection(gl,x,y,0.f,width,height,fArMappingColor);
  String sLabel=set.get(selected_Axis).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float fRotation=45;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glTranslatef(x,y,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0 + width,0 + (1 * height / 3),ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-x,-y,0);
  gl.glPopAttrib();
}","private void renderHistogram(GL gl,float x,float y,float width,float height,int selected_Axis){
  float[] fArMappingColor=new float[]{0.0f,0.0f,0.0f};
  DrawRectangularSelection(gl,x,y,0.f,width,height,fArMappingColor);
  String sLabel=set.get(selected_Axis).getLabel();
  float fScaling=renderStyle.getSmallFontScalingFactor() * 0.7f;
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float fRotation=25;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  x=x + width * 1.2f;
  gl.glTranslatef(x,y,0);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-x,-y,0);
  gl.glPopAttrib();
}",0.9707602339181286
58509,"@Override public int getNumberOfSelections(ESelectionType eSelectionType){
  return 0;
}","@Override public int getNumberOfSelections(SelectionType SelectionType){
  return 0;
}",0.9885057471264368
58510,"/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveProjectData(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA);
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  byte[] data=SetUtils.loadSetFile(parameters);
  String setFileName=dirName + SET_DATA_FILE_NAME;
  File setFile=new File(setFileName);
  SetUtils.saveFile(data,setFile);
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveProjectData(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA);
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  FileOperations.writeInputStreamToFile(dirName + SET_DATA_FILE_NAME,GeneralManager.get().getResourceLoader().getInputSource(parameters.getFileName()).getByteStream());
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.9341660161332292
58511,"public static void startCaleydoCore(){
  caleydoCoreBootloader.setXmlFileName(sCaleydoXMLfile);
  caleydoCoreBootloader.start();
  Shell shell=new Shell();
  if (applicationMode == EApplicationMode.COLLABORATION_CLIENT || applicationMode == EApplicationMode.PLEX_CLIENT) {
    AUseCase useCase=initData.getUseCase();
    LoadDataParameters loadDataParameters=useCase.getLoadDataParameters();
    SetUtils.saveSetFile(loadDataParameters,initData.getSetFileContent());
    if (initData.getGeneClusterTree() != null) {
      SetUtils.saveGeneTreeFile(loadDataParameters,initData.getGeneClusterTree());
    }
    if (initData.getGeneClusterTree() != null) {
      SetUtils.saveExperimentsTreeFile(loadDataParameters,initData.getGeneClusterTree());
    }
    GeneralManager.get().addUseCase(useCase);
    if (useCase instanceof GeneticUseCase)     triggerPathwayLoading();
    SetUtils.createStorages(loadDataParameters);
    SetUtils.createData(useCase);
    HashMap<EVAType,VirtualArray> virtualArrayMap=initData.getVirtualArrayMap();
    for (    Entry<EVAType,VirtualArray> entry : virtualArrayMap.entrySet()) {
      useCase.setVirtualArray(entry.getKey(),entry.getValue());
    }
    Application.initData=null;
  }
 else   if (applicationMode == EApplicationMode.LOAD_PROJECT) {
    AUseCase useCase=initData.getUseCase();
    GeneralManager.get().addUseCase(useCase);
    LoadDataParameters loadDataParameters=useCase.getLoadDataParameters();
    SetUtils.createStorages(loadDataParameters);
    SetUtils.createData(useCase);
    HashMap<EVAType,VirtualArray> virtualArrayMap=initData.getVirtualArrayMap();
    for (    Entry<EVAType,VirtualArray> entry : virtualArrayMap.entrySet()) {
      useCase.setVirtualArray(entry.getKey(),entry.getValue());
    }
    if (useCase instanceof GeneticUseCase)     triggerPathwayLoading();
    Application.initData=null;
  }
 else   if (applicationMode == EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA) {
    triggerPathwayLoading();
    WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell,REAL_DATA_SAMPLE_FILE));
    if (Window.CANCEL == dataImportWizard.open()) {
      shutdown();
      System.exit(0);
    }
  }
 else   if ((applicationMode == EApplicationMode.GENE_EXPRESSION_NEW_DATA || applicationMode == EApplicationMode.UNSPECIFIED_NEW_DATA) && (sCaleydoXMLfile.equals(BOOTSTRAP_FILE_GENE_EXPRESSION_MODE) || sCaleydoXMLfile.equals(""String_Node_Str""))) {
    WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell));
    if (Window.CANCEL == dataImportWizard.open()) {
      shutdown();
      System.exit(0);
    }
  }
  if (isStartedFromXML) {
    for (    IUseCase useCase : GeneralManager.get().getAllUseCases()) {
      useCase.updateSetInViews();
    }
  }
  initializeColorMapping();
  if (initializedStartViews == null) {
    initializeDefaultStartViews(applicationMode.getDataDomain());
  }
}","public static void startCaleydoCore(){
  caleydoCoreBootloader.setXmlFileName(sCaleydoXMLfile);
  caleydoCoreBootloader.start();
  Shell shell=new Shell();
  if (applicationMode == EApplicationMode.COLLABORATION_CLIENT || applicationMode == EApplicationMode.PLEX_CLIENT) {
    AUseCase useCase=initData.getUseCase();
    LoadDataParameters loadDataParameters=useCase.getLoadDataParameters();
    SetUtils.saveSetFile(loadDataParameters,initData.getSetFileContent());
    if (initData.getGeneClusterTree() != null) {
      SetUtils.saveGeneTreeFile(loadDataParameters,initData.getGeneClusterTree());
    }
    if (initData.getGeneClusterTree() != null) {
      SetUtils.saveExperimentsTreeFile(loadDataParameters,initData.getGeneClusterTree());
    }
    GeneralManager.get().addUseCase(useCase);
    if (useCase instanceof GeneticUseCase)     triggerPathwayLoading();
    SetUtils.createStorages(loadDataParameters);
    SetUtils.createData(useCase);
    HashMap<EVAType,VirtualArray> virtualArrayMap=initData.getVirtualArrayMap();
    for (    Entry<EVAType,VirtualArray> entry : virtualArrayMap.entrySet()) {
      useCase.setVirtualArray(entry.getKey(),entry.getValue());
    }
    Application.initData=null;
  }
 else   if (applicationMode == EApplicationMode.LOAD_PROJECT || applicationMode == EApplicationMode.SAMPLE_PROJECT) {
    AUseCase useCase=initData.getUseCase();
    GeneralManager.get().addUseCase(useCase);
    LoadDataParameters loadDataParameters=useCase.getLoadDataParameters();
    SetUtils.createStorages(loadDataParameters);
    SetUtils.createData(useCase);
    HashMap<EVAType,VirtualArray> virtualArrayMap=initData.getVirtualArrayMap();
    for (    Entry<EVAType,VirtualArray> entry : virtualArrayMap.entrySet()) {
      useCase.setVirtualArray(entry.getKey(),entry.getValue());
    }
    if (useCase instanceof GeneticUseCase)     triggerPathwayLoading();
    Application.initData=null;
  }
 else   if (applicationMode == EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA) {
    triggerPathwayLoading();
    WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell,REAL_DATA_SAMPLE_FILE));
    if (Window.CANCEL == dataImportWizard.open()) {
      shutdown();
      System.exit(0);
    }
  }
 else   if ((applicationMode == EApplicationMode.GENE_EXPRESSION_NEW_DATA || applicationMode == EApplicationMode.UNSPECIFIED_NEW_DATA) && (sCaleydoXMLfile.equals(BOOTSTRAP_FILE_GENE_EXPRESSION_MODE) || sCaleydoXMLfile.equals(""String_Node_Str""))) {
    WizardDialog dataImportWizard=new WizardDialog(shell,new DataImportWizard(shell));
    if (Window.CANCEL == dataImportWizard.open()) {
      shutdown();
      System.exit(0);
    }
  }
  if (isStartedFromXML) {
    for (    IUseCase useCase : GeneralManager.get().getAllUseCases()) {
      useCase.updateSetInViews();
    }
  }
  initializeColorMapping();
  if (initializedStartViews == null) {
    initializeDefaultStartViews(applicationMode.getDataDomain());
  }
}",0.99078183680437
58512,"@Override @SuppressWarnings(""String_Node_Str"") public Object start(IApplicationContext context) throws Exception {
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    bIsWindowsOS=true;
  }
  startViews=new ArrayList<String>();
  Map<String,Object> map=context.getArguments();
  rcpGuiBridge=new RCPBridge();
  caleydoCoreBootloader=new CaleydoBootloader(rcpGuiBridge);
  parseApplicationArguments(map);
  prefStore=GeneralManager.get().getPreferenceStore();
  Display display=PlatformUI.createDisplay();
  Shell shell=new Shell(display);
  GeneralManager.get().getViewGLCanvasManager().init();
  if (prefStore.getBoolean(PreferenceConstants.FIRST_START) && !isInternetConnectionOK()) {
    WizardDialog internetConfigurationWizard=new WizardDialog(shell,new InternetConfigurationWizard());
    internetConfigurationWizard.open();
  }
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    if (Application.applicationMode == EApplicationMode.PLEX_CLIENT) {
      Application.initData=GroupwareUtils.startPlexClient(serverAddress);
      GeneralManager.get().addUseCase(Application.initData.getUseCase());
    }
 else {
      WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
      projectWizardDialog.open();
      if (bDoExit) {
        shutdown();
        System.exit(0);
      }
    }
    if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
switch (applicationMode) {
case GENE_EXPRESSION_SAMPLE_DATA:
case GENE_EXPRESSION_NEW_DATA:
        sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
      GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA).setBootstrapFileName(sCaleydoXMLfile);
    break;
case UNSPECIFIED_NEW_DATA:
  sCaleydoXMLfile=""String_Node_Str"";
break;
case LOAD_PROJECT:
case COLLABORATION_CLIENT:
case PLEX_CLIENT:
sCaleydoXMLfile=GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA).getBootstrapFileName();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + applicationMode);
}
}
}
 else {
isStartedFromXML=true;
}
if (bDeleteRestoredWorkbenchState) {
removeStoredWorkbenchState();
}
try {
applicationWorkbenchAdvisor=new ApplicationWorkbenchAdvisor();
int returnCode=PlatformUI.createAndRunWorkbench(display,applicationWorkbenchAdvisor);
GeneralManager.get().getPreferenceStore().setValue(""String_Node_Str"",false);
if (returnCode == PlatformUI.RETURN_RESTART) {
return IApplication.EXIT_RESTART;
}
 else {
return IApplication.EXIT_OK;
}
}
  finally {
if (!bDoExit) {
shutdown();
}
}
}","@Override @SuppressWarnings(""String_Node_Str"") public Object start(IApplicationContext context) throws Exception {
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    bIsWindowsOS=true;
  }
  startViews=new ArrayList<String>();
  Map<String,Object> map=context.getArguments();
  rcpGuiBridge=new RCPBridge();
  caleydoCoreBootloader=new CaleydoBootloader(rcpGuiBridge);
  parseApplicationArguments(map);
  prefStore=GeneralManager.get().getPreferenceStore();
  Display display=PlatformUI.createDisplay();
  Shell shell=new Shell(display);
  GeneralManager.get().getViewGLCanvasManager().init();
  if (prefStore.getBoolean(PreferenceConstants.FIRST_START) && !isInternetConnectionOK()) {
    WizardDialog internetConfigurationWizard=new WizardDialog(shell,new InternetConfigurationWizard());
    internetConfigurationWizard.open();
  }
  if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
    if (Application.applicationMode == EApplicationMode.PLEX_CLIENT) {
      Application.initData=GroupwareUtils.startPlexClient(serverAddress);
      GeneralManager.get().addUseCase(Application.initData.getUseCase());
    }
 else {
      WizardDialog projectWizardDialog=new WizardDialog(shell,new CaleydoProjectWizard(shell));
      projectWizardDialog.open();
      if (bDoExit) {
        shutdown();
        System.exit(0);
      }
    }
    if (sCaleydoXMLfile.equals(""String_Node_Str"")) {
switch (applicationMode) {
case GENE_EXPRESSION_SAMPLE_DATA:
case GENE_EXPRESSION_NEW_DATA:
        sCaleydoXMLfile=BOOTSTRAP_FILE_GENE_EXPRESSION_MODE;
      GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA).setBootstrapFileName(sCaleydoXMLfile);
    break;
case UNSPECIFIED_NEW_DATA:
  sCaleydoXMLfile=""String_Node_Str"";
break;
case SAMPLE_PROJECT:
case LOAD_PROJECT:
case COLLABORATION_CLIENT:
case PLEX_CLIENT:
sCaleydoXMLfile=GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA).getBootstrapFileName();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + applicationMode);
}
}
}
 else {
isStartedFromXML=true;
}
if (bDeleteRestoredWorkbenchState) {
removeStoredWorkbenchState();
}
try {
applicationWorkbenchAdvisor=new ApplicationWorkbenchAdvisor();
int returnCode=PlatformUI.createAndRunWorkbench(display,applicationWorkbenchAdvisor);
GeneralManager.get().getPreferenceStore().setValue(""String_Node_Str"",false);
if (returnCode == PlatformUI.RETURN_RESTART) {
return IApplication.EXIT_RESTART;
}
 else {
return IApplication.EXIT_OK;
}
}
  finally {
if (!bDoExit) {
shutdown();
}
}
}",0.9958242195267448
58513,"@Override public boolean performFinish(){
  if (((ChooseProjectTypePage)getPage(ChooseProjectTypePage.PAGE_NAME)).isPageComplete()) {
    ChooseProjectTypePage page=(ChooseProjectTypePage)getPage(ChooseProjectTypePage.PAGE_NAME);
    PreferenceStore prefStore=GeneralManager.get().getPreferenceStore();
    EApplicationMode previousApplicationMode=EApplicationMode.valueOf(prefStore.getString(PreferenceConstants.LAST_CHOSEN_APPLICATION_MODE));
    if (page.getApplicationMode() != previousApplicationMode)     Application.bDeleteRestoredWorkbenchState=true;
    prefStore.setValue(PreferenceConstants.LAST_CHOSEN_ORGANISM,page.getOrganism().name());
    IUseCase useCase;
    EApplicationMode appMode=page.getApplicationMode();
    if (appMode == EApplicationMode.SAMPLE_PROJECT) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,""String_Node_Str""));
      ProjectLoader loader=new ProjectLoader();
      Application.initData=loader.load(SAMPLE_PROJECT_LOCATION);
      useCase=Application.initData.getUseCase();
      Application.startViews.clear();
      Application.initializedStartViews=Application.initData.getViewIDs();
      Application.applicationMode=EApplicationMode.LOAD_PROJECT;
      Application.bDeleteRestoredWorkbenchState=true;
    }
 else     if (page.getApplicationMode() == EApplicationMode.GENE_EXPRESSION_NEW_DATA || page.getApplicationMode() == EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA) {
      Application.dataDomain=EDataDomain.GENETIC_DATA;
      useCase=new GeneticUseCase();
      ((GeneticUseCase)useCase).setOrganism(page.getOrganism());
      Application.applicationMode=page.getApplicationMode();
      String sNewPathwayDataSources=""String_Node_Str"";
      if (page.isKEGGPathwayDataLoadingRequested())       sNewPathwayDataSources+=EPathwayDatabaseType.KEGG.name() + ""String_Node_Str"";
      if (page.isBioCartaPathwayLoadingRequested())       sNewPathwayDataSources+=EPathwayDatabaseType.BIOCARTA.name() + ""String_Node_Str"";
      if (sNewPathwayDataSources != prefStore.getString(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES))       Application.bDeleteRestoredWorkbenchState=true;
      prefStore.setValue(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,sNewPathwayDataSources);
    }
 else     if (page.getApplicationMode() == EApplicationMode.UNSPECIFIED_NEW_DATA) {
      useCase=new UnspecifiedUseCase();
      Application.dataDomain=EDataDomain.UNSPECIFIED;
      Application.applicationMode=EApplicationMode.UNSPECIFIED_NEW_DATA;
    }
 else     if (page.getApplicationMode() == EApplicationMode.LOAD_PROJECT) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,""String_Node_Str""));
      ProjectLoader loader=new ProjectLoader();
      if (page.getProjectLoadType() == ChooseProjectTypePage.EProjectLoadType.RECENT) {
        Application.initData=loader.loadRecent();
      }
 else       if (page.getProjectLoadType() == ChooseProjectTypePage.EProjectLoadType.SPECIFIED) {
        Application.initData=loader.load(page.getProjectFileName());
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      useCase=Application.initData.getUseCase();
      Application.startViews.clear();
      Application.initializedStartViews=Application.initData.getViewIDs();
      Application.applicationMode=EApplicationMode.LOAD_PROJECT;
      Application.bDeleteRestoredWorkbenchState=true;
    }
 else     if (page.getApplicationMode() == EApplicationMode.COLLABORATION_CLIENT) {
      StandardGroupwareManager groupwareManager=new StandardGroupwareManager();
      groupwareManager.setNetworkName(page.getNetworkName());
      groupwareManager.setServerAddress(page.getNetworkAddress());
      groupwareManager.startClient();
      Application.initData=groupwareManager.getInitData();
      useCase=Application.initData.getUseCase();
      Application.applicationMode=EApplicationMode.COLLABORATION_CLIENT;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    prefStore.setValue(PreferenceConstants.LAST_CHOSEN_APPLICATION_MODE,Application.applicationMode.name());
    try {
      prefStore.save();
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    GeneralManager.get().addUseCase(useCase);
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  if (((ChooseProjectTypePage)getPage(ChooseProjectTypePage.PAGE_NAME)).isPageComplete()) {
    ChooseProjectTypePage page=(ChooseProjectTypePage)getPage(ChooseProjectTypePage.PAGE_NAME);
    PreferenceStore prefStore=GeneralManager.get().getPreferenceStore();
    EApplicationMode previousApplicationMode=EApplicationMode.valueOf(prefStore.getString(PreferenceConstants.LAST_CHOSEN_APPLICATION_MODE));
    if (page.getApplicationMode() != previousApplicationMode)     Application.bDeleteRestoredWorkbenchState=true;
    prefStore.setValue(PreferenceConstants.LAST_CHOSEN_ORGANISM,page.getOrganism().name());
    IUseCase useCase;
    EApplicationMode appMode=page.getApplicationMode();
    if (appMode == EApplicationMode.SAMPLE_PROJECT) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,""String_Node_Str""));
      ProjectLoader loader=new ProjectLoader();
      Application.initData=loader.load(SAMPLE_PROJECT_LOCATION);
      useCase=Application.initData.getUseCase();
      Application.startViews.clear();
      Application.initializedStartViews=Application.initData.getViewIDs();
      Application.applicationMode=EApplicationMode.SAMPLE_PROJECT;
      Application.bDeleteRestoredWorkbenchState=true;
    }
 else     if (appMode == EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA) {
      Application.dataDomain=EDataDomain.GENETIC_DATA;
      useCase=new GeneticUseCase();
      ((GeneticUseCase)useCase).setOrganism(EOrganism.HOMO_SAPIENS);
      Application.applicationMode=appMode;
      String sNewPathwayDataSources=EPathwayDatabaseType.KEGG.name() + ""String_Node_Str"" + EPathwayDatabaseType.BIOCARTA.name()+ ""String_Node_Str"";
      if (sNewPathwayDataSources != prefStore.getString(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES))       Application.bDeleteRestoredWorkbenchState=true;
      prefStore.setValue(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,sNewPathwayDataSources);
    }
 else     if (appMode == EApplicationMode.GENE_EXPRESSION_NEW_DATA) {
      Application.dataDomain=EDataDomain.GENETIC_DATA;
      useCase=new GeneticUseCase();
      ((GeneticUseCase)useCase).setOrganism(page.getOrganism());
      Application.applicationMode=appMode;
      String sNewPathwayDataSources=""String_Node_Str"";
      if (page.isKEGGPathwayDataLoadingRequested())       sNewPathwayDataSources+=EPathwayDatabaseType.KEGG.name() + ""String_Node_Str"";
      if (page.isBioCartaPathwayLoadingRequested())       sNewPathwayDataSources+=EPathwayDatabaseType.BIOCARTA.name() + ""String_Node_Str"";
      if (sNewPathwayDataSources != prefStore.getString(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES))       Application.bDeleteRestoredWorkbenchState=true;
      prefStore.setValue(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,sNewPathwayDataSources);
    }
 else     if (appMode == EApplicationMode.UNSPECIFIED_NEW_DATA) {
      useCase=new UnspecifiedUseCase();
      Application.dataDomain=EDataDomain.UNSPECIFIED;
      Application.applicationMode=EApplicationMode.UNSPECIFIED_NEW_DATA;
    }
 else     if (appMode == EApplicationMode.LOAD_PROJECT) {
      GeneralManager.get().getLogger().log(new Status(IStatus.INFO,Activator.PLUGIN_ID,""String_Node_Str""));
      ProjectLoader loader=new ProjectLoader();
      if (page.getProjectLoadType() == ChooseProjectTypePage.EProjectLoadType.RECENT) {
        Application.initData=loader.loadRecent();
      }
 else       if (page.getProjectLoadType() == ChooseProjectTypePage.EProjectLoadType.SPECIFIED) {
        Application.initData=loader.load(page.getProjectFileName());
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      useCase=Application.initData.getUseCase();
      Application.startViews.clear();
      Application.initializedStartViews=Application.initData.getViewIDs();
      Application.applicationMode=EApplicationMode.LOAD_PROJECT;
      Application.bDeleteRestoredWorkbenchState=true;
    }
 else     if (appMode == EApplicationMode.COLLABORATION_CLIENT) {
      StandardGroupwareManager groupwareManager=new StandardGroupwareManager();
      groupwareManager.setNetworkName(page.getNetworkName());
      groupwareManager.setServerAddress(page.getNetworkAddress());
      groupwareManager.startClient();
      Application.initData=groupwareManager.getInitData();
      useCase=Application.initData.getUseCase();
      Application.applicationMode=EApplicationMode.COLLABORATION_CLIENT;
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
    prefStore.setValue(PreferenceConstants.LAST_CHOSEN_APPLICATION_MODE,Application.applicationMode.name());
    try {
      prefStore.save();
    }
 catch (    IOException e) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    GeneralManager.get().addUseCase(useCase);
    return true;
  }
  return false;
}",0.8016395210872613
58514,"/** 
 * This tab lets you choose between a sample project, which has e.g. cluster data included and a sample dataset, which is basically just a set csv file.
 * @param tabFolder
 */
private void createSampleTab(TabFolder tabFolder){
  sampleTab=new TabItem(tabFolder,SWT.NONE);
  sampleTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  sampleTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  Button sampleProject=new Button(composite,SWT.RADIO);
  sampleProject.setText(""String_Node_Str"");
  sampleProject.setSelection(true);
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gd.horizontalSpan=1;
  sampleProject.setLayoutData(gd);
  sampleProject.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectMode=EApplicationMode.SAMPLE_PROJECT;
      setPageComplete(true);
    }
  }
);
  Text sampleProjectDescription=new Text(composite,SWT.MULTI | SWT.WRAP);
  sampleProjectDescription.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  sampleProjectDescription.setBackground(composite.getBackground());
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=400;
  sampleProjectDescription.setLayoutData(gd);
  Button buttonSampleDataMode=new Button(composite,SWT.RADIO);
  buttonSampleDataMode.setText(""String_Node_Str"");
  buttonSampleDataMode.setSelection(false);
  buttonSampleDataMode.setLayoutData(new GridData(GridData.FILL_BOTH));
  Text sampleDataDescription=new Text(composite,SWT.MULTI | SWT.WRAP);
  sampleDataDescription.setText(""String_Node_Str"");
  sampleDataDescription.setBackground(composite.getBackground());
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=400;
  sampleDataDescription.setLayoutData(gd);
  Link link=new Link(composite,SWT.NULL);
  link.setText(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK + ""String_Node_Str"");
  link.setLayoutData(new GridData(GridData.FILL_BOTH));
  link.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      String osName=System.getProperty(""String_Node_Str"");
      try {
        if (osName.startsWith(""String_Node_Str"")) {
          Class fileMgr=Class.forName(""String_Node_Str"");
          Method openURL=fileMgr.getDeclaredMethod(""String_Node_Str"",new Class[]{String.class});
          openURL.invoke(null,new Object[]{HCC_SAMPLE_DATASET_PAPER_LINK});
        }
 else         if (osName.startsWith(""String_Node_Str"")) {
          Runtime.getRuntime().exec(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK);
        }
 else {
          String[] browsers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          String browser=null;
          for (int count=0; count < browsers.length && browser == null; count++)           if (Runtime.getRuntime().exec(new String[]{""String_Node_Str"",browsers[count]}).waitFor() == 0) {
            browser=browsers[count];
          }
          if (browser == null)           throw new Exception(""String_Node_Str"");
 else {
            Runtime.getRuntime().exec(new String[]{browser,HCC_SAMPLE_DATASET_PAPER_LINK});
          }
        }
      }
 catch (      Exception exception) {
      }
    }
  }
);
  buttonSampleDataMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectMode=EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA;
      setPageComplete(true);
    }
  }
);
  composite.pack();
}","/** 
 * This tab lets you choose between a sample project, which has e.g. cluster data included and a sample dataset, which is basically just a set csv file.
 * @param tabFolder
 */
private void createSampleTab(TabFolder tabFolder){
  sampleTab=new TabItem(tabFolder,SWT.NONE);
  sampleTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  sampleTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  btnSampleProject=new Button(composite,SWT.RADIO);
  btnSampleProject.setText(""String_Node_Str"");
  if (projectMode != EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA)   btnSampleProject.setSelection(true);
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gd.horizontalSpan=1;
  btnSampleProject.setLayoutData(gd);
  btnSampleProject.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectMode=EApplicationMode.SAMPLE_PROJECT;
      setPageComplete(true);
    }
  }
);
  Text sampleProjectDescription=new Text(composite,SWT.MULTI | SWT.WRAP);
  sampleProjectDescription.setText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  sampleProjectDescription.setBackground(composite.getBackground());
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=400;
  sampleProjectDescription.setLayoutData(gd);
  Button btnSampleData=new Button(composite,SWT.RADIO);
  btnSampleData.setText(""String_Node_Str"");
  if (projectMode == EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA)   btnSampleData.setSelection(true);
 else   btnSampleData.setSelection(false);
  btnSampleData.setLayoutData(new GridData(GridData.FILL_BOTH));
  Text sampleDataDescription=new Text(composite,SWT.MULTI | SWT.WRAP);
  sampleDataDescription.setText(""String_Node_Str"");
  sampleDataDescription.setBackground(composite.getBackground());
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=400;
  sampleDataDescription.setLayoutData(gd);
  Link link=new Link(composite,SWT.NULL);
  link.setText(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK + ""String_Node_Str"");
  link.setLayoutData(new GridData(GridData.FILL_BOTH));
  link.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      String osName=System.getProperty(""String_Node_Str"");
      try {
        if (osName.startsWith(""String_Node_Str"")) {
          Class fileMgr=Class.forName(""String_Node_Str"");
          Method openURL=fileMgr.getDeclaredMethod(""String_Node_Str"",new Class[]{String.class});
          openURL.invoke(null,new Object[]{HCC_SAMPLE_DATASET_PAPER_LINK});
        }
 else         if (osName.startsWith(""String_Node_Str"")) {
          Runtime.getRuntime().exec(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK);
        }
 else {
          String[] browsers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          String browser=null;
          for (int count=0; count < browsers.length && browser == null; count++)           if (Runtime.getRuntime().exec(new String[]{""String_Node_Str"",browsers[count]}).waitFor() == 0) {
            browser=browsers[count];
          }
          if (browser == null)           throw new Exception(""String_Node_Str"");
 else {
            Runtime.getRuntime().exec(new String[]{browser,HCC_SAMPLE_DATASET_PAPER_LINK});
          }
        }
      }
 catch (      Exception exception) {
      }
    }
  }
);
  btnSampleData.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectMode=EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA;
      setPageComplete(true);
    }
  }
);
  composite.pack();
}",0.9438018778065044
58515,"public void createControl(Composite parent){
  parentWizard=(Wizard)this.getWizard();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new FillLayout(SWT.VERTICAL));
  final TabFolder tabFolder=new TabFolder(composite,SWT.BORDER);
  createSampleTab(tabFolder);
  createGeneticUseCaseTab(tabFolder);
  createGeneralDataUseCaseTab(tabFolder);
  createLoadProjectTab(tabFolder);
  if (!GeneralManager.IS_IN_RELEASE_MODE)   createCollaborationClientTab(tabFolder);
  EApplicationMode previousApplicationMode=EApplicationMode.valueOf(GeneralManager.get().getPreferenceStore().getString(PreferenceConstants.LAST_CHOSEN_APPLICATION_MODE));
  if (previousApplicationMode == null || previousApplicationMode.equals(EApplicationMode.SAMPLE_PROJECT)) {
    tabFolder.setSelection(0);
    projectMode=EApplicationMode.SAMPLE_PROJECT;
  }
 else   if (previousApplicationMode.equals(EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA)) {
    tabFolder.setSelection(0);
    projectMode=EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA;
  }
 else   if (previousApplicationMode.equals(EApplicationMode.GENE_EXPRESSION_NEW_DATA)) {
    tabFolder.setSelection(1);
    projectMode=EApplicationMode.GENE_EXPRESSION_NEW_DATA;
  }
 else   if (previousApplicationMode.equals(EApplicationMode.UNSPECIFIED_NEW_DATA)) {
    tabFolder.setSelection(2);
    projectMode=EApplicationMode.UNSPECIFIED_NEW_DATA;
  }
 else   if (previousApplicationMode.equals(EApplicationMode.LOAD_PROJECT)) {
    projectMode=EApplicationMode.LOAD_PROJECT;
    tabFolder.setSelection(3);
  }
 else   if (previousApplicationMode.equals(EApplicationMode.COLLABORATION_CLIENT)) {
    if (GeneralManager.IS_IN_RELEASE_MODE) {
      tabFolder.setSelection(0);
      projectMode=EApplicationMode.SAMPLE_PROJECT;
    }
 else {
      projectMode=EApplicationMode.COLLABORATION_CLIENT;
      tabFolder.setSelection(4);
    }
  }
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (((TabItem)e.item) == generalDataUseCaseTab) {
        projectMode=EApplicationMode.UNSPECIFIED_NEW_DATA;
      }
 else       if (((TabItem)e.item) == sampleTab) {
        projectMode=EApplicationMode.SAMPLE_PROJECT;
      }
 else       if (((TabItem)e.item) == geneticDataUseCaseTab) {
        projectMode=EApplicationMode.GENE_EXPRESSION_NEW_DATA;
      }
 else       if (((TabItem)e.item) == loadProjectTab) {
        projectMode=EApplicationMode.LOAD_PROJECT;
      }
 else       if (((TabItem)e.item) == collaborationClientTab) {
        projectMode=EApplicationMode.COLLABORATION_CLIENT;
      }
 else       throw new IllegalStateException(""String_Node_Str"");
    }
  }
);
  tabFolder.pack();
  setControl(composite);
  composite.pack();
}","public void createControl(Composite parent){
  parentWizard=(Wizard)this.getWizard();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new FillLayout(SWT.VERTICAL));
  final TabFolder tabFolder=new TabFolder(composite,SWT.BORDER);
  projectMode=EApplicationMode.valueOf(GeneralManager.get().getPreferenceStore().getString(PreferenceConstants.LAST_CHOSEN_APPLICATION_MODE));
  createSampleTab(tabFolder);
  createGeneticUseCaseTab(tabFolder);
  createGeneralDataUseCaseTab(tabFolder);
  createLoadProjectTab(tabFolder);
  if (!GeneralManager.IS_IN_RELEASE_MODE)   createCollaborationClientTab(tabFolder);
  if (projectMode == null || projectMode.equals(EApplicationMode.SAMPLE_PROJECT)) {
    tabFolder.setSelection(0);
  }
 else   if (projectMode.equals(EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA)) {
    tabFolder.setSelection(0);
  }
 else   if (projectMode.equals(EApplicationMode.GENE_EXPRESSION_NEW_DATA)) {
    tabFolder.setSelection(1);
  }
 else   if (projectMode.equals(EApplicationMode.UNSPECIFIED_NEW_DATA)) {
    tabFolder.setSelection(2);
  }
 else   if (projectMode.equals(EApplicationMode.LOAD_PROJECT)) {
    tabFolder.setSelection(3);
  }
 else   if (projectMode.equals(EApplicationMode.COLLABORATION_CLIENT)) {
    if (GeneralManager.IS_IN_RELEASE_MODE) {
      tabFolder.setSelection(0);
      projectMode=EApplicationMode.SAMPLE_PROJECT;
    }
 else {
      tabFolder.setSelection(4);
    }
  }
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (((TabItem)e.item) == generalDataUseCaseTab) {
        projectMode=EApplicationMode.UNSPECIFIED_NEW_DATA;
      }
 else       if (((TabItem)e.item) == sampleTab) {
        if (btnSampleProject.getSelection())         projectMode=EApplicationMode.SAMPLE_PROJECT;
 else         projectMode=EApplicationMode.GENE_EXPRESSION_SAMPLE_DATA;
      }
 else       if (((TabItem)e.item) == geneticDataUseCaseTab) {
        projectMode=EApplicationMode.GENE_EXPRESSION_NEW_DATA;
      }
 else       if (((TabItem)e.item) == loadProjectTab) {
        projectMode=EApplicationMode.LOAD_PROJECT;
      }
 else       if (((TabItem)e.item) == collaborationClientTab) {
        projectMode=EApplicationMode.COLLABORATION_CLIENT;
      }
 else       throw new IllegalStateException(""String_Node_Str"");
    }
  }
);
  tabFolder.pack();
  setControl(composite);
  composite.pack();
}",0.3544352511064075
58516,"private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  EScatterPointType tmpPointStyle=POINTSTYLE;
  if (detailLevel != EDetailLevel.HIGH) {
    bRender2Axis=false;
    POINTSTYLE=EScatterPointType.POINT;
  }
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=xnormalized * XScale;
    y=ynormalized * YScale;
    float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    EScatterPointType tmpPoint=POINTSTYLE;
    if (bRender2Axis) {
      fArMappingColor=new float[]{1.0f,0.0f,0.0f};
      POINTSTYLE=EScatterPointType.POINT;
    }
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(SELECTED_X_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(SELECTED_Y_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=xnormalized * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
  POINTSTYLE=tmpPointStyle;
}","private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  EScatterPointType tmpPointStyle=POINTSTYLE;
  float[] fArMappingColor={0.0f,0.0f,0.0f};
  if (detailLevel != EDetailLevel.HIGH) {
    bRender2Axis=false;
    POINTSTYLE=EScatterPointType.POINT;
  }
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=xnormalized * XScale;
    y=ynormalized * YScale;
    if (bUseColor)     fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    EScatterPointType tmpPoint=POINTSTYLE;
    if (bRender2Axis) {
      fArMappingColor=new float[]{1.0f,0.0f,0.0f};
      POINTSTYLE=EScatterPointType.POINT;
    }
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(SELECTED_X_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(SELECTED_Y_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=xnormalized * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
  POINTSTYLE=tmpPointStyle;
}",0.9811423886307734
58517,"/** 
 * Init textures, build array of textures used for holding the whole examples
 * @param gl
 */
private void initTextures(boolean bIsSelection){
  int ix=0;
  int iy=0;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float fSelectionFaktor=1.0f;
  int debugsize1=AlSelectionTextures.size();
  int debugsize2=AlFullTextures.size();
  float[] fArRgbaWhite={1.0f,1.0f,1.0f,1f};
  float fOpacity=1f;
  float[] fSelectionColor={1.0f,0.1f,0.5f};
  float[] fBlackColor={0.0f,0.0f,0.0f};
  int debugsize=0;
  Set<Integer> selectionSet=elementSelectionManager.getAllElements();
  debugsize=selectionSet.size();
  if (bIsSelection) {
    fSelectionFaktor=2.0f;
    fArRgbaWhite=new float[]{1.0f,1.0f,1.0f,0f};
    selectionSet.clear();
    selectionSet=elementSelectionManager.getElements(ESelectionType.SELECTION);
    debugsize=selectionSet.size();
  }
  int StartindexX=0;
  int StartindexY=0;
  int EndindexX=StartindexX + NR_TEXTURESX - 1;
  int EndindexY=StartindexY + NR_TEXTURESY - 1;
  if (EndindexX >= storageVA.size()) {
    EndindexX=storageVA.size() - 1;
    ScatterPlotRenderStyle.setTextureNr(EndindexX - StartindexX + 1,NR_TEXTURESY);
  }
  if (EndindexY >= storageVA.size()) {
    EndindexY=storageVA.size() - 1;
    ScatterPlotRenderStyle.setTextureNr(NR_TEXTURESX,EndindexY - StartindexY + 1);
  }
  if (bIsSelection)   AlSelectionTextures.clear();
 else   AlFullTextures.clear();
  debugsize1=AlSelectionTextures.size();
  debugsize2=AlFullTextures.size();
  float fGlobalTexturePointsX=1000.0f / fSelectionFaktor;
  float fGlobalTexturePointsY=1000.0f / fSelectionFaktor;
  int iTextureWidth=(int)(fGlobalTexturePointsX / (double)NR_TEXTURESX);
  int iTextureHeight=(int)(fGlobalTexturePointsY / (double)NR_TEXTURESY);
  int TextureSize=iTextureWidth * iTextureHeight;
  FloatBuffer FbTemp=BufferUtil.newFloatBuffer(TextureSize * 4);
  Texture tempTextur;
  for (Integer iAxisY=StartindexY; iAxisY <= EndindexY; iAxisY++) {
    for (Integer iAxisX=StartindexX; iAxisX <= EndindexX; iAxisX++) {
      for (Integer i=0; i < TextureSize; i++) {
        FbTemp.put(fArRgbaWhite);
      }
      for (      Integer iContentIndex : selectionSet) {
        int current_SELECTED_X_AXIS=iAxisX;
        int current_SELECTED_Y_AXIS=iAxisY;
        xnormalized=set.get(current_SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
        ynormalized=set.get(current_SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
        ix=(int)Math.floor(xnormalized * (double)(iTextureWidth - 1));
        iy=ix * (iTextureWidth) * 4 + (int)Math.floor(ynormalized * (double)(iTextureHeight - 1)) * 4;
        float[] fArMappingColor=null;
        if (bIsSelection)         fArMappingColor=fSelectionColor;
 else         if (bUseColorOnMatrix)         fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
 else         fArMappingColor=fBlackColor;
        if (iy >= TextureSize * 4 - 4) {
          iy=0;
        }
        FbTemp.put(iy,fArMappingColor[0]);
        FbTemp.put(iy + 1,fArMappingColor[1]);
        FbTemp.put(iy + 2,fArMappingColor[2]);
        FbTemp.put(iy + 3,fOpacity);
      }
      FbTemp.rewind();
      TextureData texData=new TextureData(GL.GL_RGBA,iTextureWidth,iTextureHeight,0,GL.GL_RGBA,GL.GL_FLOAT,false,false,true,FbTemp,null);
      tempTextur=TextureIO.newTexture(0);
      tempTextur.updateImage(texData);
      if (bIsSelection)       AlSelectionTextures.add(tempTextur);
 else       AlFullTextures.add(tempTextur);
    }
  }
  debugsize1=AlSelectionTextures.size();
  debugsize2=AlFullTextures.size();
}","/** 
 * Init textures, build array of textures used for holding the whole examples
 * @param gl
 */
private void initTextures(boolean bIsSelection){
  int ix=0;
  int iy=0;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float fSelectionFaktor=1.0f;
  int debugsize1=AlSelectionTextures.size();
  int debugsize2=AlFullTextures.size();
  float[] fArRgbaWhite={1.0f,1.0f,1.0f,1f};
  float fOpacity=1f;
  float[] fSelectionColor={1.0f,0.1f,0.5f};
  float[] fBlackColor={0.0f,0.0f,0.0f};
  int debugsize=0;
  Set<Integer> selectionSet=elementSelectionManager.getAllElements();
  debugsize=selectionSet.size();
  if (bIsSelection) {
    fSelectionFaktor=2.0f;
    fArRgbaWhite=new float[]{1.0f,1.0f,1.0f,0f};
    selectionSet.clear();
    selectionSet=elementSelectionManager.getElements(ESelectionType.SELECTION);
    debugsize=selectionSet.size();
  }
  int StartindexX=0;
  int StartindexY=0;
  int EndindexX=StartindexX + NR_TEXTURESX - 1;
  int EndindexY=StartindexY + NR_TEXTURESY - 1;
  if (EndindexX >= storageVA.size()) {
    EndindexX=storageVA.size() - 1;
    ScatterPlotRenderStyle.setTextureNr(EndindexX - StartindexX + 1,NR_TEXTURESY);
  }
  if (EndindexY >= storageVA.size()) {
    EndindexY=storageVA.size() - 1;
    ScatterPlotRenderStyle.setTextureNr(NR_TEXTURESX,EndindexY - StartindexY + 1);
  }
  if (bIsSelection)   AlSelectionTextures.clear();
 else   AlFullTextures.clear();
  debugsize1=AlSelectionTextures.size();
  debugsize2=AlFullTextures.size();
  float fGlobalTexturePointsX=1000.0f / fSelectionFaktor;
  float fGlobalTexturePointsY=1000.0f / fSelectionFaktor;
  int iTextureWidth=(int)(fGlobalTexturePointsX / (double)NR_TEXTURESX);
  int iTextureHeight=(int)(fGlobalTexturePointsY / (double)NR_TEXTURESY);
  int TextureSize=iTextureWidth * iTextureHeight;
  FloatBuffer FbTemp=BufferUtil.newFloatBuffer(TextureSize * 4);
  Texture tempTextur;
  for (Integer iAxisY=StartindexY; iAxisY <= EndindexY; iAxisY++) {
    for (Integer iAxisX=StartindexX; iAxisX <= EndindexX; iAxisX++) {
      for (Integer i=0; i < TextureSize; i++) {
        FbTemp.put(fArRgbaWhite);
      }
      for (      Integer iContentIndex : selectionSet) {
        int current_SELECTED_X_AXIS=iAxisX;
        int current_SELECTED_Y_AXIS=iAxisY;
        xnormalized=set.get(current_SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
        ynormalized=set.get(current_SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
        ix=(int)Math.floor(xnormalized * (double)(iTextureWidth - 1));
        iy=ix * (iTextureWidth) * 4 + (int)Math.floor(ynormalized * (double)(iTextureHeight - 1)) * 4;
        float[] fArMappingColor=null;
        if (bIsSelection)         fArMappingColor=fSelectionColor;
 else         if (bUseColor)         fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
 else         fArMappingColor=fBlackColor;
        if (iy >= TextureSize * 4 - 4) {
          iy=0;
        }
        FbTemp.put(iy,fArMappingColor[0]);
        FbTemp.put(iy + 1,fArMappingColor[1]);
        FbTemp.put(iy + 2,fArMappingColor[2]);
        FbTemp.put(iy + 3,fOpacity);
      }
      FbTemp.rewind();
      TextureData texData=new TextureData(GL.GL_RGBA,iTextureWidth,iTextureHeight,0,GL.GL_RGBA,GL.GL_FLOAT,false,false,true,FbTemp,null);
      tempTextur=TextureIO.newTexture(0);
      tempTextur.updateImage(texData);
      if (bIsSelection)       AlSelectionTextures.add(tempTextur);
 else       AlFullTextures.add(tempTextur);
    }
  }
  debugsize1=AlSelectionTextures.size();
  debugsize2=AlFullTextures.size();
}",0.9988870339454646
58518,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
    bUpdateMainView=true;
  }
  if ((bUpdateMainView || bUpdateSelection)) {
    if (bRenderMainView)     buildDisplayListSelection(gl,iGLDisplayListIndexSelection);
    if (bUpdateSelection)     initTextures(true);
    bUpdateSelection=false;
  }
  if (bUpdateMainView && bRenderMainView) {
    if (detailLevel == EDetailLevel.HIGH) {
      gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
      renderCoordinateSystem(gl);
      gl.glEndList();
    }
    gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderScatterPoints(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
    bUpdateMainView=false;
  }
  gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
  gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
  RenderMouseOver(gl);
  gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
    bUpdateMainView=true;
  }
  if ((bUpdateMainView || bUpdateSelection)) {
    if (bRenderMainView)     buildDisplayListSelection(gl,iGLDisplayListIndexSelection);
    if (bUpdateSelection)     initTextures(true);
    bUpdateSelection=false;
  }
  if (bUpdateFullTexures) {
    bUpdateFullTexures=false;
    initTextures(false);
  }
  if (bUpdateMainView && bRenderMainView) {
    if (detailLevel == EDetailLevel.HIGH) {
      gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
      renderCoordinateSystem(gl);
      gl.glEndList();
    }
    gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderScatterPoints(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
    bUpdateMainView=false;
  }
  gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
  gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
  RenderMouseOver(gl);
  gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
  gl.glEndList();
}",0.9596662030598052
58519,"@Override protected void handleKeyPressedEvent(KeyEvent event){
  if (event.character == 'b') {
    glScatterplot.toggleSpecialAxisMode();
    return;
  }
  if (event.character == 'p') {
    glScatterplot.togglePointType();
    return;
  }
  if (event.character == 'd') {
    glScatterplot.toggleDetailLevel();
    return;
  }
  if (event.character == 'm') {
    glScatterplot.toggleMatrixMode();
    return;
  }
switch (event.keyCode) {
case SWT.ARROW_UP:
    glScatterplot.upDownSelect(false);
  break;
case SWT.ARROW_DOWN:
glScatterplot.upDownSelect(true);
break;
case SWT.ARROW_LEFT:
glScatterplot.leftRightSelect(false);
break;
case SWT.ARROW_RIGHT:
glScatterplot.leftRightSelect(true);
break;
case SWT.HOME:
glScatterplot.ResetSelection();
break;
}
}","@Override protected void handleKeyPressedEvent(KeyEvent event){
  if (event.character == 'b') {
    glScatterplot.toggleSpecialAxisMode();
    return;
  }
  if (event.character == 'p') {
    glScatterplot.togglePointType();
    return;
  }
  if (event.character == 'd') {
    glScatterplot.toggleDetailLevel();
    return;
  }
  if (event.character == 'm') {
    glScatterplot.toggleMatrixMode();
    return;
  }
  if (event.character == 'c') {
    glScatterplot.toggleColorMode();
    return;
  }
switch (event.keyCode) {
case SWT.ARROW_UP:
    glScatterplot.upDownSelect(false);
  break;
case SWT.ARROW_DOWN:
glScatterplot.upDownSelect(true);
break;
case SWT.ARROW_LEFT:
glScatterplot.leftRightSelect(false);
break;
case SWT.ARROW_RIGHT:
glScatterplot.leftRightSelect(true);
break;
case SWT.HOME:
glScatterplot.ResetSelection();
break;
}
}",0.9467752035065748
58520,"public float getAxisHeight(){
  return viewFrustum.getHeight() - 2 * XYAXISDISTANCE;
}","public float getAxisHeight(){
  return getRenderHeight() - 2 * XYAXISDISTANCE;
}",0.891566265060241
58521,"public ScatterPlotRenderStyle(GLScatterplot scatterPlot,IViewFrustum viewFrustum){
  super(viewFrustum);
  float fDelta=(fSelectedFieldWidth - fNormalFieldWidth) / (iLevels + 1);
  hashLevelToWidth=new HashMap<Integer,Float>();
  hashLevelToWidth.put(iNotSelectedLevel,fNormalFieldWidth);
  float fCurrentWidth=fNormalFieldWidth;
  for (int iCount=-iLevels; iCount <= iLevels; iCount++) {
    if (iCount < 0) {
      fCurrentWidth+=fDelta;
    }
 else     if (iCount == 0) {
      fCurrentWidth=fSelectedFieldWidth;
    }
 else {
      fCurrentWidth-=fDelta;
    }
    hashLevelToWidth.put(iCount,fCurrentWidth);
  }
}","public ScatterPlotRenderStyle(GLScatterplot scatterPlot,IViewFrustum viewFrustum){
  super(viewFrustum);
  fRenderHeight=viewFrustum.getHeight();
  fRenderWith=viewFrustum.getWidth();
}",0.3636363636363636
58522,"public float getAxisWidth(){
  return viewFrustum.getWidth() - 2 * XYAXISDISTANCE;
}","public float getAxisWidth(){
  return getRenderWidth() - 2 * XYAXISDISTANCE;
}",0.8888888888888888
58523,"public float getLAbelWidth(){
  return viewFrustum.getWidth() / 2;
}","public float getLAbelWidth(){
  return getRenderWidth() / 2;
}",0.8615384615384616
58524,"public float getLabelHeight(){
  return viewFrustum.getHeight() / 2;
}","public float getLabelHeight(){
  return getRenderHeight() / 2;
}",0.8656716417910447
58525,"/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveProjectData(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA);
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  FileOperations.writeInputStreamToFile(dirName + SET_DATA_FILE_NAME,GeneralManager.get().getResourceLoader().getInputSource(parameters.getFileName()).getByteStream());
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveProjectData(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA);
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  FileOperations.writeInputStreamToFile(dirName + SET_DATA_FILE_NAME,GeneralManager.get().getResourceLoader().getResource(parameters.getFileName()));
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.9934572101544098
58526,"public static void writeInputStreamToFile(String fileName,InputStream inputStream){
  try {
    File f=new File(fileName);
    OutputStream out=new FileOutputStream(f);
    byte buf[]=new byte[1024];
    int len;
    while ((len=inputStream.read(buf)) > 0)     out.write(buf,0,len);
    out.close();
    inputStream.close();
  }
 catch (  IOException e) {
  }
}","public static void writeInputStreamToFile(String fileName,BufferedReader bufferedReader){
  try {
    FileWriter fstream=new FileWriter(fileName);
    BufferedWriter out=new BufferedWriter(fstream);
    char buf[]=new char[1024];
    int len;
    while ((len=bufferedReader.read(buf)) > 0)     out.write(buf,0,len);
    out.close();
    bufferedReader.close();
  }
 catch (  IOException e) {
  }
}",0.7097625329815304
58527,"private static void triggerPathwayLoading(){
  if (GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA) != null) {
    new PathwayLoadingProgressIndicatorAction().run(null);
  }
}","private static void triggerPathwayLoading(){
  new PathwayLoadingProgressIndicatorAction().run(null);
}",0.7177700348432056
58528,"private boolean IsInSelectionRectangle(float x,float y){
  float XMin=Math.min(fDragStartPoint[0],fDragEndPoint[0]);
  float XMax=Math.max(fDragStartPoint[0],fDragEndPoint[0]);
  float YMin=Math.min(fDragStartPoint[1],fDragEndPoint[1]);
  float YMax=Math.max(fDragStartPoint[1],fDragEndPoint[1]);
  x=x + XYAXISDISTANCE;
  y=y + XYAXISDISTANCE;
  if (x >= XMin && x <= XMax)   if (y >= YMin && y <= YMax)   return true;
  return false;
}","private boolean IsInSelectionRectangle(float x,float y){
  float XMin=Math.min(fRectangleDragStartPoint[0],fRectangleDragEndPoint[0]);
  float XMax=Math.max(fRectangleDragStartPoint[0],fRectangleDragEndPoint[0]);
  float YMin=Math.min(fRectangleDragStartPoint[1],fRectangleDragEndPoint[1]);
  float YMax=Math.max(fRectangleDragStartPoint[1],fRectangleDragEndPoint[1]);
  x=x + XYAXISDISTANCE;
  y=y + XYAXISDISTANCE;
  if (x >= XMin && x <= XMax)   if (y >= YMin && y <= YMax)   return true;
  return false;
}",0.9238900634249472
58529,"public void ResetSelection(){
  elementSelectionManager.clearSelections();
  fDragStartPoint=new float[3];
  fDragEndPoint=new float[3];
  bUpdateAll=true;
  setDisplayListDirty();
}","public void ResetSelection(){
  elementSelectionManager.clearSelections();
  fRectangleDragStartPoint=new float[3];
  fRectangleDragEndPoint=new float[3];
  bUpdateAll=true;
  setDisplayListDirty();
}",0.9528795811518324
58530,"@Override public String getDetailedInfo(){
  StringBuffer sInfoText=new StringBuffer();
  sInfoText.append(""String_Node_Str"");
  if (bRenderStorageHorizontally) {
    sInfoText.append(contentVA.size() + ""String_Node_Str"" + useCase.getContentLabel(false,true)+ ""String_Node_Str""+ storageVA.size()+ ""String_Node_Str"");
  }
 else {
    sInfoText.append(contentVA.size() + ""String_Node_Str"" + useCase.getContentLabel(true,true)+ ""String_Node_Str""+ storageVA.size()+ ""String_Node_Str"");
  }
  if (bRenderOnlyContext) {
    sInfoText.append(""String_Node_Str"" + ""String_Node_Str"" + useCase.getContentLabel(false,true) + ""String_Node_Str"");
  }
 else {
    if (bUseRandomSampling) {
      sInfoText.append(""String_Node_Str"" + iNumberOfRandomElements + ""String_Node_Str"");
    }
 else {
      sInfoText.append(""String_Node_Str"");
    }
    if (dataFilterLevel == EDataFilterLevel.COMPLETE) {
      sInfoText.append(""String_Node_Str"");
    }
 else     if (dataFilterLevel == EDataFilterLevel.ONLY_MAPPING) {
      sInfoText.append(""String_Node_Str"");
    }
 else     if (dataFilterLevel == EDataFilterLevel.ONLY_CONTEXT) {
      sInfoText.append(""String_Node_Str"");
    }
  }
  return sInfoText.toString();
}","@Override public String getDetailedInfo(){
  StringBuffer sInfoText=new StringBuffer();
  sInfoText.append(""String_Node_Str"");
  if (bRenderStorageHorizontally) {
    sInfoText.append(contentVA.size() + ""String_Node_Str"" + useCase.getContentLabel(false,true)+ ""String_Node_Str""+ storageVA.size()+ ""String_Node_Str"");
  }
 else {
    sInfoText.append(contentVA.size() + ""String_Node_Str"" + useCase.getContentLabel(true,true)+ ""String_Node_Str""+ storageVA.size()+ ""String_Node_Str"");
  }
  if (bRenderOnlyContext) {
    sInfoText.append(""String_Node_Str"" + ""String_Node_Str"" + useCase.getContentLabel(false,true) + ""String_Node_Str"");
  }
 else {
    if (bUseRandomSampling) {
      sInfoText.append(""String_Node_Str"" + iNumberOfRandomElements + ""String_Node_Str"");
    }
 else {
      sInfoText.append(""String_Node_Str"");
    }
    if (dataFilterLevel == EDataFilterLevel.COMPLETE) {
      sInfoText.append(""String_Node_Str"");
    }
 else     if (dataFilterLevel == EDataFilterLevel.ONLY_MAPPING) {
      sInfoText.append(""String_Node_Str"");
    }
 else     if (dataFilterLevel == EDataFilterLevel.ONLY_CONTEXT) {
      sInfoText.append(""String_Node_Str"");
    }
  }
  return ""String_Node_Str"";
}",0.9845382365231926
58531,"private void RenderMouseOver(GL gl){
  if (mouseoverSelectionManager.getNumberOfElements(ESelectionType.MOUSE_OVER) == 0)   return;
  Set<Integer> mouseOver=mouseoverSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  int iContentIndex=0;
  for (  int i : mouseOver) {
    iContentIndex=i;
    break;
  }
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float x=xnormalized * XScale;
  float y=ynormalized * YScale;
  float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex))   fArMappingColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
  float z=+1.5f;
  float fullPoint=POINTSIZE * 2f;
  gl.glColor3f(1.0f,1.0f,0.0f);
  float angle;
  float PI=(float)Math.PI;
  gl.glBegin(GL.GL_POLYGON);
  for (int i=0; i < 20; i++) {
    angle=(i * 2 * PI) / 10;
    gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
  }
  gl.glEnd();
  z=+2.0f;
  gl.glColor3f(0.0f,0.0f,0.0f);
  gl.glPointSize(POINTSIZE * 50.0f);
  gl.glBegin(GL.GL_POINTS);
  gl.glVertex3f(x,y,z);
  gl.glEnd();
  z=+2.5f;
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,2.0f);
  DrawMouseOverLabel(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex);
}","private void RenderMouseOver(GL gl){
  if (mouseoverSelectionManager.getNumberOfElements(ESelectionType.MOUSE_OVER) == 0)   return;
  Set<Integer> mouseOver=mouseoverSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  int iContentIndex=0;
  for (  int i : mouseOver) {
    iContentIndex=i;
    break;
  }
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float x=xnormalized * XScale;
  float y=ynormalized * YScale;
  float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex))   fArMappingColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
  float z=+1.5f;
  float fullPoint=POINTSIZE * 2f;
  gl.glColor3f(1.0f,1.0f,0.0f);
  float angle;
  float PI=(float)Math.PI;
  gl.glBegin(GL.GL_POLYGON);
  for (int i=0; i < 20; i++) {
    angle=(i * 2 * PI) / 10;
    gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
  }
  gl.glEnd();
  z=+2.0f;
  gl.glColor3f(0.0f,0.0f,0.0f);
  gl.glPointSize(POINTSIZE * 50.0f);
  gl.glBegin(GL.GL_POINTS);
  gl.glVertex3f(x,y,z);
  gl.glEnd();
  z=+2.5f;
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,2.0f);
  DrawMouseOverLabel(gl,x,y,z,fArMappingColor,1.0f,iContentIndex);
}",0.9984816276951108
58532,"private void DrawMouseOverLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  z=z + 3.0f;
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  String sLabel=""String_Node_Str"";
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,-z);
}","private void DrawMouseOverLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  String sLabel=""String_Node_Str"";
  String genLabel=idMappingManager.getID(EIDType.EXPRESSION_INDEX,EIDType.GENE_SYMBOL,iContentIndex);
  if (genLabel.equals(""String_Node_Str""))   genLabel=""String_Node_Str"";
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + genLabel + ""String_Node_Str""+ +set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex)+ ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,-z);
}",0.9252669039145908
58533,"private void DrawRectangularSelection(GL gl){
  float length=fDragEndPoint[0] - fDragStartPoint[0];
  float hight=fDragEndPoint[1] - fDragStartPoint[1];
  float x=fDragStartPoint[0];
  float y=fDragStartPoint[1];
  float z=3.5f;
  gl.glColor3f(0.0f,1.0f,0.0f);
  gl.glLineWidth(2.0f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(x,y,z);
  gl.glVertex3f(x,y + hight,z);
  gl.glVertex3f(x + length,y + hight,z);
  gl.glVertex3f(x + length,y,z);
  gl.glEnd();
}","private void DrawRectangularSelection(GL gl){
  float length=fRectangleDragEndPoint[0] - fRectangleDragStartPoint[0];
  float hight=fRectangleDragEndPoint[1] - fRectangleDragStartPoint[1];
  float x=fRectangleDragStartPoint[0];
  float y=fRectangleDragStartPoint[1];
  float z=3.5f;
  gl.glColor3f(0.0f,1.0f,0.0f);
  gl.glLineWidth(2.0f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(x,y,z);
  gl.glVertex3f(x,y + hight,z);
  gl.glVertex3f(x + length,y + hight,z);
  gl.glVertex3f(x + length,y,z);
  gl.glEnd();
}",0.944672131147541
58534,"@Override public void displayLocal(GL gl){
  if (set == null)   return;
  if (detailLevel == EDetailLevel.HIGH) {
    GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
    if (glMouseListener.wasMouseDragged()) {
      bRectangleSelection=true;
      Point pDragEndPoint=glMouseListener.getPickedPoint();
      Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
      fDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
      fDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
      gl.glNewList(iGLDisplayListIndexBrush,GL.GL_COMPILE);
      DrawRectangularSelection(gl);
      gl.glEndList();
    }
    if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
      bRectangleSelection=false;
      setDisplayListDirty();
      UpdateSelection();
      gl.glDeleteLists(iGLDisplayListIndexBrush,1);
      bUpdateSelection=true;
    }
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}","@Override public void displayLocal(GL gl){
  if (set == null)   return;
  if (detailLevel == EDetailLevel.HIGH) {
    GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
    if (glMouseListener.wasMouseDragged()) {
      bRectangleSelection=true;
      Point pDragEndPoint=glMouseListener.getPickedPoint();
      Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
      fRectangleDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
      fRectangleDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
      gl.glNewList(iGLDisplayListIndexBrush,GL.GL_COMPILE);
      DrawRectangularSelection(gl);
      gl.glEndList();
    }
    if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
      bRectangleSelection=false;
      setDisplayListDirty();
      UpdateSelection();
      gl.glDeleteLists(iGLDisplayListIndexBrush,1);
      bUpdateSelection=true;
    }
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.9932885906040269
58535,"@Override public AGLView createGLView(String viewID,GLCaleydoCanvas glCanvas,final String label,final IViewFrustum viewFrustum){
  GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + viewID + ""String_Node_Str""+ label+ ""String_Node_Str""));
  AGLView glView=null;
  for (  IViewCreator glViewCreator : glViewCreators) {
    if (glViewCreator instanceof AGLViewCreator && glViewCreator.getViewType().equals(viewID)) {
      glView=((AGLViewCreator)glViewCreator).createGLView(glCanvas,label,viewFrustum);
      break;
    }
  }
  if (glView == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  registerGLEventListenerByGLCanvas(glCanvas,glView);
  return glView;
}","@Override public AGLView createGLView(String viewID,GLCaleydoCanvas glCanvas,final String label,final IViewFrustum viewFrustum){
  GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + viewID + ""String_Node_Str""+ label+ ""String_Node_Str""));
  AGLView glView=null;
  if (Platform.getBundle(viewID).getState() != Bundle.INSTALLED) {
    try {
      Platform.getBundle(viewID).start();
    }
 catch (    BundleException e) {
      e.printStackTrace();
    }
  }
  for (  IViewCreator glViewCreator : glViewCreators) {
    if (glViewCreator instanceof AGLViewCreator && glViewCreator.getViewType().equals(viewID)) {
      glView=((AGLViewCreator)glViewCreator).createGLView(glCanvas,label,viewFrustum);
      break;
    }
  }
  if (glView == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  registerGLEventListenerByGLCanvas(glCanvas,glView);
  return glView;
}",0.8823174411587206
58536,"/** 
 * Parses throw the list of start-views to initialize them by creating default serialized representations of them.
 */
public static void initializeDefaultStartViews(EDataDomain dataDomain){
  if (startViews.isEmpty()) {
    addDefaultStartViews(dataDomain);
  }
 else {
    IUseCase useCase=GeneralManager.get().getUseCase(dataDomain);
    if (dataDomain == EDataDomain.GENETIC_DATA && ((GeneticUseCase)useCase).isPathwayViewerMode()) {
      applyPathwayViewerViewFilter();
    }
  }
  initializedStartViews=new ArrayList<String>();
  for (  String viewID : startViews) {
    ASerializedView view=GeneralManager.get().getViewGLCanvasManager().getViewCreator(viewID).createSerializedView();
    view.setDataDomain(dataDomain);
    initializedStartViews.add(viewID);
  }
  startViews=null;
}","/** 
 * Parses throw the list of start-views to initialize them by creating default serialized representations of them.
 */
public static void initializeDefaultStartViews(EDataDomain dataDomain){
  if (startViews.isEmpty()) {
    addDefaultStartViews(dataDomain);
  }
 else {
    IUseCase useCase=GeneralManager.get().getUseCase(dataDomain);
    if (dataDomain == EDataDomain.GENETIC_DATA && ((GeneticUseCase)useCase).isPathwayViewerMode()) {
      applyPathwayViewerViewFilter();
    }
  }
  initializedStartViews=new ArrayList<String>();
  for (  String viewID : startViews) {
    try {
      if (viewID.contains(""String_Node_Str""))       Platform.getBundle(viewID.replace(""String_Node_Str"",""String_Node_Str"")).start();
 else       Platform.getBundle(viewID).start();
    }
 catch (    BundleException e) {
      e.printStackTrace();
    }
    ASerializedView view=GeneralManager.get().getViewGLCanvasManager().getViewCreator(viewID).createSerializedView();
    view.setDataDomain(dataDomain);
    initializedStartViews.add(viewID);
  }
  startViews=null;
}",0.8582210242587601
58537,"/** 
 * Renders the heading for the category and the items.
 * @param gl
 */
void render(GL gl){
  float yOrigin=dimensions.getYOrigin();
  dimensions.setHeight(0);
  dimensions.increaseHeight(BookmarkRenderStyle.CONTAINER_HEADING_SIZE);
  yOrigin-=BookmarkRenderStyle.CONTAINER_HEADING_SIZE;
  RenderingHelpers.renderText(gl,textRenderer,categoryName,dimensions.getXOrigin() + BookmarkRenderStyle.SIDE_SPACING,yOrigin,GeneralRenderStyle.SMALL_FONT_SCALING_FACTOR);
  for (  ABookmark item : bookmarkItems) {
    item.getDimensions().setOrigins(BookmarkRenderStyle.SIDE_SPACING,yOrigin);
    item.getDimensions().setWidth(dimensions.getWidth() - 2 * BookmarkRenderStyle.SIDE_SPACING);
    yOrigin-=item.getDimensions().getHeight();
    float[] highlightColor=null;
    if (selectionManager.checkStatus(ESelectionType.MOUSE_OVER,item.getID())) {
      highlightColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
    }
 else     if (selectionManager.checkStatus(ESelectionType.SELECTION,item.getID())) {
      highlightColor=GeneralRenderStyle.SELECTED_COLOR;
    }
    int pickingID=pickingIDManager.getPickingID(this,item.getID());
    gl.glPushName(pickingID);
    item.render(gl);
    if (highlightColor != null) {
      float xOrigin=item.getDimensions().getXOrigin();
      float width=item.getDimensions().getWidth();
      float height=item.getDimensions().getHeight() - BookmarkRenderStyle.FRAME_SPACING;
      gl.glColor3fv(highlightColor,0);
      gl.glBegin(GL.GL_LINE_LOOP);
      gl.glVertex3f(xOrigin,yOrigin,0);
      gl.glVertex3f(xOrigin + width,yOrigin,0);
      gl.glVertex3f(xOrigin + width,yOrigin + height,0);
      gl.glVertex3f(xOrigin,yOrigin + height,0);
      gl.glEnd();
    }
    gl.glPopName();
    dimensions.increaseHeight(item.getDimensions().getHeight());
  }
}","/** 
 * Renders the heading for the category and the items.
 * @param gl
 */
void render(GL gl){
  float yOrigin=dimensions.getYOrigin();
  dimensions.setHeight(0);
  dimensions.increaseHeight(BookmarkRenderStyle.CONTAINER_HEADING_SIZE);
  yOrigin-=BookmarkRenderStyle.CONTAINER_HEADING_SIZE;
  RenderingHelpers.renderText(gl,textRenderer,categoryName,dimensions.getXOrigin() + BookmarkRenderStyle.SIDE_SPACING,yOrigin,GeneralRenderStyle.SMALL_FONT_SCALING_FACTOR);
  for (  ABookmark item : bookmarkItems) {
    item.getDimensions().setOrigins(BookmarkRenderStyle.SIDE_SPACING,yOrigin);
    item.getDimensions().setWidth(dimensions.getWidth() - 2 * BookmarkRenderStyle.SIDE_SPACING);
    yOrigin-=item.getDimensions().getHeight();
    float[] highlightColor=null;
    if (selectionManager.checkStatus(ESelectionType.MOUSE_OVER,item.getID())) {
      highlightColor=GeneralRenderStyle.MOUSE_OVER_COLOR;
    }
 else     if (selectionManager.checkStatus(ESelectionType.SELECTION,item.getID())) {
      highlightColor=GeneralRenderStyle.SELECTED_COLOR;
    }
    int pickingID=pickingIDManager.getPickingID(this,item.getID());
    gl.glPushName(pickingID);
    item.render(gl);
    if (highlightColor != null) {
      float xOrigin=item.getDimensions().getXOrigin();
      float width=item.getDimensions().getWidth();
      float height=item.getDimensions().getHeight() - BookmarkRenderStyle.FRAME_SPACING;
      gl.glColor3fv(highlightColor,0);
      gl.glBegin(GL.GL_LINE_LOOP);
      gl.glVertex3f(xOrigin,yOrigin,0);
      gl.glVertex3f(xOrigin + width,yOrigin,0);
      gl.glVertex3f(xOrigin + width,yOrigin + height,0);
      gl.glVertex3f(xOrigin,yOrigin + height,0);
      gl.glEnd();
    }
    gl.glPopName();
    dimensions.increaseHeight(item.getDimensions().getHeight());
  }
  GLHelperFunctions.drawPointAt(gl,0,dimensions.getHeight(),0);
}",0.9823982398239824
58538,"/** 
 * Returns the general method as a singleton object. When first called the general manager is created (lazy).
 * @return singleton GeneralManager instance
 */
public static IGeneralManager get(){
  if (generalManager == null) {
    generalManager=new GeneralManager();
  }
  return generalManager;
}","/** 
 * Returns the general method as a singleton object. When first called the general manager is created (lazy).
 * @return singleton GeneralManager instance
 */
public static IGeneralManager get(){
  if (generalManager == null) {
    generalManager=new GeneralManager();
    generalManager.init();
  }
  return generalManager;
}",0.95748031496063
58539,"/** 
 * Constructor.
 */
public ViewManager(){
  pickingManager=new PickingManager();
  selectionManager=new ConnectedElementRepresentationManager();
  infoAreaManager=new GLInfoAreaManager();
  hashGLCanvasID2GLCanvas=new HashMap<Integer,GLCaleydoCanvas>();
  hashGLCanvas2GLEventListeners=new HashMap<GLCaleydoCanvas,ArrayList<AGLView>>();
  hashGLEventListenerID2GLEventListener=new HashMap<Integer,AGLView>();
  fpsAnimator=new FPSAnimator(null,60);
  busyRequests=new HashSet<Object>();
  registerEventListeners();
  displayLoopExecution=DisplayLoopExecution.get();
  fpsAnimator.add(displayLoopExecution.getDisplayLoopCanvas());
  displayLoopExecution.executeMultiple(selectionManager);
  glViewCreators=new ArrayList<IViewCreator>();
}","/** 
 * Constructor.
 */
public ViewManager(){
  pickingManager=new PickingManager();
  selectionManager=new ConnectedElementRepresentationManager();
  infoAreaManager=new GLInfoAreaManager();
  hashGLCanvasID2GLCanvas=new HashMap<Integer,GLCaleydoCanvas>();
  hashGLCanvas2GLEventListeners=new HashMap<GLCaleydoCanvas,ArrayList<AGLView>>();
  hashGLEventListenerID2GLEventListener=new HashMap<Integer,AGLView>();
  busyRequests=new HashSet<Object>();
  registerEventListeners();
  glViewCreators=new ArrayList<IViewCreator>();
}",0.8324154209284028
58540,"private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=xnormalized * XScale;
    y=ynormalized * YScale;
    float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
  }
}","private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=xnormalized * XScale;
    y=ynormalized * YScale;
    float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    if (bRender2Axis)     fArMappingColor=new float[]{1.0f,0.0f,0.0f};
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(SELECTED_X_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(SELECTED_Y_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=xnormalized * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      EScatterPointType tmpPoint=POINTSTYLE;
      POINTSTYLE=POINTSTYLE.CIRCLE;
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
}",0.6203071672354948
58541,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
    gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
    renderCoordinateSystem(gl);
    gl.glEndList();
    gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderScatterPoints(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
  }
 else {
    gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderMouseOver(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
  }
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
    gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
    renderCoordinateSystem(gl);
    gl.glEndList();
    bRender2Axis=true;
    SELECTED_X_AXIS=0;
    SELECTED_Y_AXIS=1;
    SELECTED_X_AXIS_2=0;
    SELECTED_Y_AXIS_2=2;
    gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderScatterPoints(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
  }
 else {
    gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderMouseOver(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
  }
}",0.9197572488199596
58542,"/** 
 * Renders the scene with polygonal connection lines (visual links)
 * @param gl The GL-object
 */
protected void callRenderPolygonLine(final GL gl){
  float width=0.0f;
  float color[]=new float[4];
  boolean roundedStart=false;
  boolean roundedEnd=false;
  if ((style == EVisLinkStyleType.SHADOW_VISLINK) || (style == EVisLinkStyleType.HALO_VISLINK)) {
    gl.glClear(GL.GL_STENCIL_BUFFER_BIT);
    int hlAAQuality=1;
    boolean halo=false;
    if (style == EVisLinkStyleType.SHADOW_VISLINK) {
      width=ConnectionLineRenderStyle.CONNECTION_LINE_WIDTH * ConnectionLineRenderStyle.CONNECTION_LINE_SHADOW_WIDTH_FACTOR;
      color=ConnectionLineRenderStyle.CONNECTION_LINE_SHADOW_COLOR;
    }
    if (style == EVisLinkStyleType.HALO_VISLINK) {
      width=ConnectionLineRenderStyle.CONNECTION_LINE_WIDTH * ConnectionLineRenderStyle.CONNECTION_LINE_HALO_WIDTH_FACTOR;
      color[0]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[0];
      color[1]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[1];
      color[2]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[2];
      color[3]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[3] / 2.5f;
      hlAAQuality=5;
      halo=true;
    }
    for (int i=0; i < connectionLinesAllViews.size(); i++) {
      ArrayList<ArrayList<Vec3f>> currentStage=connectionLinesAllViews.get(i);
      if (style == EVisLinkStyleType.HALO_VISLINK)       if (i == 0)       roundedStart=true;
      if (i == (connectionLinesAllViews.size() - 1))       roundedEnd=true;
      for (      ArrayList<Vec3f> currentLine : currentStage) {
        if (currentLine.size() >= 2) {
          VisLink visLink=new VisLink(currentLine,0,SEGMENT_LENGTH);
          enableStencilBuffer(gl);
          if (i < 2)           visLink.drawPolygonLine(gl,width,color,hlAAQuality,roundedStart,roundedEnd,halo);
 else           visLink.drawPolygonLine(gl,width,color,hlAAQuality,roundedEnd,roundedStart,halo);
          disableStencilBuffer(gl);
        }
      }
      roundedStart=false;
      roundedEnd=false;
    }
  }
  gl.glClear(GL.GL_STENCIL_BUFFER_BIT);
  width=ConnectionLineRenderStyle.CONNECTION_LINE_WIDTH;
  color=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR;
  for (  ArrayList<ArrayList<Vec3f>> currentView : connectionLinesAllViews)   for (  ArrayList<Vec3f> currentLine : currentView) {
    if (currentLine.size() >= 2) {
      VisLink visLink=new VisLink(currentLine,0,SEGMENT_LENGTH);
      visLink.drawPolygonLine(gl,width,color,antiAliasingQuality,roundedStart,roundedEnd,false);
    }
  }
}","/** 
 * Renders the scene with polygonal connection lines (visual links)
 * @param gl The GL-object
 */
protected void callRenderPolygonLine(final GL gl){
  float width=0.0f;
  float color[]=new float[4];
  boolean roundedStart=false;
  boolean roundedEnd=false;
  if ((style == EVisLinkStyleType.SHADOW_VISLINK) || (style == EVisLinkStyleType.HALO_VISLINK)) {
    gl.glClear(GL.GL_STENCIL_BUFFER_BIT);
    int hlAAQuality=1;
    boolean halo=false;
    if (style == EVisLinkStyleType.SHADOW_VISLINK) {
      width=ConnectionLineRenderStyle.CONNECTION_LINE_WIDTH * ConnectionLineRenderStyle.CONNECTION_LINE_SHADOW_WIDTH_FACTOR;
      color=ConnectionLineRenderStyle.CONNECTION_LINE_SHADOW_COLOR;
    }
    if (style == EVisLinkStyleType.HALO_VISLINK) {
      width=ConnectionLineRenderStyle.CONNECTION_LINE_WIDTH * ConnectionLineRenderStyle.CONNECTION_LINE_HALO_WIDTH_FACTOR;
      color[0]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[0];
      color[1]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[1];
      color[2]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[2];
      color[3]=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR[3] / 2.5f;
      hlAAQuality=5;
      halo=true;
    }
    for (int i=0; i < connectionLinesAllViews.size(); i++) {
      ArrayList<ArrayList<Vec3f>> currentStage=connectionLinesAllViews.get(i);
      if (style == EVisLinkStyleType.HALO_VISLINK && i == 0)       roundedStart=true;
      if (style == EVisLinkStyleType.HALO_VISLINK && i == (connectionLinesAllViews.size() - 1))       roundedEnd=true;
      for (      ArrayList<Vec3f> currentLine : currentStage) {
        if (currentLine.size() >= 2) {
          VisLink visLink=new VisLink(currentLine,0,SEGMENT_LENGTH);
          enableStencilBuffer(gl);
          if (i < 2)           visLink.drawPolygonLine(gl,width,color,hlAAQuality,roundedStart,roundedEnd,halo);
 else           visLink.drawPolygonLine(gl,width,color,hlAAQuality,roundedEnd,roundedStart,halo);
          disableStencilBuffer(gl);
        }
      }
      roundedStart=false;
      roundedEnd=false;
    }
  }
  gl.glClear(GL.GL_STENCIL_BUFFER_BIT);
  width=ConnectionLineRenderStyle.CONNECTION_LINE_WIDTH;
  color=ConnectionLineRenderStyle.CONNECTION_LINE_COLOR;
  for (  ArrayList<ArrayList<Vec3f>> currentView : connectionLinesAllViews)   for (  ArrayList<Vec3f> currentLine : currentView) {
    if (currentLine.size() >= 2) {
      VisLink visLink=new VisLink(currentLine,0,SEGMENT_LENGTH);
      visLink.drawPolygonLine(gl,width,color,antiAliasingQuality,roundedStart,roundedEnd,false);
    }
  }
}",0.9884200196270854
58543,"/** 
 * Create embedded dendrogram
 * @param
 */
private void createDendrogram(){
  CmdCreateView cmdView=(CmdCreateView)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_VIEW);
  cmdView.setViewID(""String_Node_Str"");
  float fHeatMapHeight=viewFrustum.getHeight();
  float fHeatMapWidth=viewFrustum.getWidth();
  cmdView.setAttributes(dataDomain,EProjectionMode.ORTHOGRAPHIC,0,fHeatMapHeight,0,fHeatMapWidth,-20,20,-1);
  cmdView.doCommand();
  glGeneDendrogramView=(GLDendrogram)cmdView.getCreatedObject();
  glGeneDendrogramView.setDataDomain(dataDomain);
  glGeneDendrogramView.setUseCase(useCase);
  glGeneDendrogramView.setRemoteRenderingGLView(this);
  cmdView=(CmdCreateView)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_VIEW);
  cmdView.setViewID(""String_Node_Str"");
  cmdView.setAttributes(dataDomain,EProjectionMode.ORTHOGRAPHIC,0,fHeatMapHeight,0,fHeatMapWidth,-20,20,-1);
  cmdView.doCommand();
  glExperimentDendrogramView=(GLDendrogram)cmdView.getCreatedObject();
  glExperimentDendrogramView.setDataDomain(dataDomain);
  glExperimentDendrogramView.setUseCase(useCase);
  glExperimentDendrogramView.setRemoteRenderingGLView(this);
  glGeneDendrogramView.setSet(set);
  glGeneDendrogramView.setContentVAType(EVAType.CONTENT);
  glGeneDendrogramView.initData();
  glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
  glExperimentDendrogramView.setSet(set);
  glExperimentDendrogramView.setContentVAType(EVAType.CONTENT);
  glExperimentDendrogramView.initData();
  glExperimentDendrogramView.setRenderUntilCut(bExperimentDendrogramRenderCut);
}","/** 
 * Create embedded dendrogram
 * @param
 */
private void createDendrogram(){
  CmdCreateView cmdView=(CmdCreateView)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_VIEW);
  cmdView.setViewID(GLDendrogram.VIEW_ID + ""String_Node_Str"");
  float fHeatMapHeight=viewFrustum.getHeight();
  float fHeatMapWidth=viewFrustum.getWidth();
  cmdView.setAttributes(dataDomain,EProjectionMode.ORTHOGRAPHIC,0,fHeatMapHeight,0,fHeatMapWidth,-20,20,-1);
  cmdView.doCommand();
  glGeneDendrogramView=(GLDendrogram)cmdView.getCreatedObject();
  glGeneDendrogramView.setDataDomain(dataDomain);
  glGeneDendrogramView.setUseCase(useCase);
  glGeneDendrogramView.setRemoteRenderingGLView(this);
  cmdView=(CmdCreateView)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_VIEW);
  cmdView.setViewID(GLDendrogram.VIEW_ID + ""String_Node_Str"");
  cmdView.setAttributes(dataDomain,EProjectionMode.ORTHOGRAPHIC,0,fHeatMapHeight,0,fHeatMapWidth,-20,20,-1);
  cmdView.doCommand();
  glExperimentDendrogramView=(GLDendrogram)cmdView.getCreatedObject();
  glExperimentDendrogramView.setDataDomain(dataDomain);
  glExperimentDendrogramView.setUseCase(useCase);
  glExperimentDendrogramView.setRemoteRenderingGLView(this);
  glGeneDendrogramView.setSet(set);
  glGeneDendrogramView.setContentVAType(EVAType.CONTENT);
  glGeneDendrogramView.initData();
  glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
  glExperimentDendrogramView.setSet(set);
  glExperimentDendrogramView.setContentVAType(EVAType.CONTENT);
  glExperimentDendrogramView.initData();
  glExperimentDendrogramView.setRenderUntilCut(bExperimentDendrogramRenderCut);
}",0.9860943168077388
58544,"@Override public ASerializedView createSerializedView(){
  return new SerializedHeatMapView();
}","@Override public ASerializedView createSerializedView(){
  return new SerializedDendogramHorizontalView();
}",0.8921568627450981
58545,"@Override public AGLView createGLView(GLCaleydoCanvas glCanvas,String label,IViewFrustum viewFrustum){
  return new GLHeatMap(glCanvas,label,viewFrustum);
}","@Override public AGLView createGLView(GLCaleydoCanvas glCanvas,String label,IViewFrustum viewFrustum){
  return new GLDendrogram(glCanvas,label,viewFrustum,true);
}",0.94375
58546,"public void setYAxis(int iAxisIndex){
  if (SELECTED_Y_AXIS != iAxisIndex) {
    SELECTED_Y_AXIS=iAxisIndex;
    setDisplayListDirty();
  }
}","public void setYAxis(int iAxisIndex){
  if (SELECTED_Y_AXIS != iAxisIndex) {
    SELECTED_Y_AXIS=iAxisIndex;
    bUpdateAll=true;
    setDisplayListDirty();
  }
}",0.9306930693069309
58547,"public void setXAxis(int iAxisIndex){
  if (SELECTED_X_AXIS != iAxisIndex) {
    SELECTED_X_AXIS=iAxisIndex;
    setDisplayListDirty();
  }
}","public void setXAxis(int iAxisIndex){
  if (SELECTED_X_AXIS != iAxisIndex) {
    SELECTED_X_AXIS=iAxisIndex;
    bUpdateAll=true;
    setDisplayListDirty();
  }
}",0.9306930693069309
58548,"private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=xnormalized * XScale;
    y=ynormalized * YScale;
    float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    if (bRender2Axis)     fArMappingColor=new float[]{1.0f,0.0f,0.0f};
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(SELECTED_X_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(SELECTED_Y_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=xnormalized * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      EScatterPointType tmpPoint=POINTSTYLE;
      POINTSTYLE=POINTSTYLE.CIRCLE;
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
}","private void RenderScatterPoints(GL gl){
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float x=0.0f;
  float y=0.0f;
  float xnormalized=0.0f;
  float ynormalized=0.0f;
  float x_2=0.0f;
  float y_2=0.0f;
  for (  Integer iContentIndex : contentVA) {
    if (iContentIndex == -1) {
      continue;
    }
    xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
    x=xnormalized * XScale;
    y=ynormalized * YScale;
    float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
    EScatterPointType tmpPoint=POINTSTYLE;
    if (bRender2Axis) {
      fArMappingColor=new float[]{1.0f,0.0f,0.0f};
      POINTSTYLE=POINTSTYLE.POINT;
    }
    DrawPointPrimitive(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
    if (bRender2Axis) {
      xnormalized=set.get(SELECTED_X_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      ynormalized=set.get(SELECTED_Y_AXIS_2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
      x_2=xnormalized * XScale;
      y_2=ynormalized * YScale;
      fArMappingColor=new float[]{0.0f,1.0f,0.0f};
      DrawPointPrimitive(gl,x_2,y_2,0.0f,fArMappingColor,1.0f,iContentIndex,1.0f);
      POINTSTYLE=tmpPoint;
      gl.glColor3f(0.0f,0.0f,1.0f);
      gl.glLineWidth(0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,y,1.0f);
      gl.glVertex3f(x_2,y_2,1.0f);
      gl.glEnd();
    }
  }
}",0.8995334370139969
58549,"public void togglePointType(){
switch (POINTSTYLE) {
case POINT:
    POINTSTYLE=EScatterPointType.BOX;
  break;
case BOX:
POINTSTYLE=EScatterPointType.CIRCLE;
break;
case CIRCLE:
POINTSTYLE=EScatterPointType.DISK;
break;
case DISK:
POINTSTYLE=EScatterPointType.CROSS;
break;
case CROSS:
POINTSTYLE=EScatterPointType.POINT;
break;
default :
}
setDisplayListDirty();
}","public void togglePointType(){
switch (POINTSTYLE) {
case POINT:
    POINTSTYLE=EScatterPointType.BOX;
  break;
case BOX:
POINTSTYLE=EScatterPointType.CIRCLE;
break;
case CIRCLE:
POINTSTYLE=EScatterPointType.DISK;
break;
case DISK:
POINTSTYLE=EScatterPointType.CROSS;
break;
case CROSS:
POINTSTYLE=EScatterPointType.POINT;
break;
default :
}
bUpdateAll=true;
setDisplayListDirty();
}",0.9773030707610146
58550,"@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  InitAxisComboEvent initAxisComboEvent=new InitAxisComboEvent();
  initAxisComboEvent.setSender(this);
  initAxisComboEvent.setAxisNames(this.getAxisString());
  GeneralManager.get().getEventPublisher().triggerEvent(initAxisComboEvent);
  POINTSIZE=POINTSIZE / 1.0f;
  POINTSTYLE=EScatterPointType.CROSS;
}","@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  InitAxisComboEvent initAxisComboEvent=new InitAxisComboEvent();
  initAxisComboEvent.setSender(this);
  initAxisComboEvent.setAxisNames(this.getAxisString());
  GeneralManager.get().getEventPublisher().triggerEvent(initAxisComboEvent);
}",0.9152119700748128
58551,"public void ResetSelection(){
  elementSelectionManager.clearSelections();
  fDragStartPoint=new float[3];
  fDragEndPoint=new float[3];
  setDisplayListDirty();
}","public void ResetSelection(){
  elementSelectionManager.clearSelections();
  fDragStartPoint=new float[3];
  fDragEndPoint=new float[3];
  bUpdateAll=true;
  setDisplayListDirty();
}",0.944927536231884
58552,"@Override public void initLocal(GL gl){
  bRenderStorageHorizontally=false;
  iGLDisplayListIndexLocal=gl.glGenLists(5);
  iGLDisplayListIndexBrush=2;
  iGLDisplayListIndexCoord=3;
  iGLDisplayListIndexMouseOver=4;
  iGLDisplayListIndexSelection=5;
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}","@Override public void initLocal(GL gl){
  bRenderStorageHorizontally=false;
  iGLDisplayListIndexLocal=gl.glGenLists(5);
  iGLDisplayListIndexBrush=2;
  iGLDisplayListIndexCoord=3;
  iGLDisplayListIndexMouseOver=4;
  iGLDisplayListIndexSelection=5;
  GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
    public void run(){
      parentGLCanvas.getParentComposite().addKeyListener(glKeyListener);
    }
  }
);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}",0.7698019801980198
58553,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLScatterplot(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HEAT_MAP;
  viewID=GLScatterplot.VIEW_ID;
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  fAlXDistances=new ArrayList<Float>();
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLScatterplot(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HEAT_MAP;
  viewID=GLScatterplot.VIEW_ID;
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  fAlXDistances=new ArrayList<Float>();
  glKeyListener=new GLScatterPlotKeyListener(this);
}",0.9427312775330396
58554,"public void upDownSelect(boolean bUpIsTrue){
  if (bUpIsTrue)   SELECTED_X_AXIS++;
 else   SELECTED_X_AXIS--;
  if (SELECTED_X_AXIS < 0)   SELECTED_X_AXIS=0;
}","public void upDownSelect(boolean bDownIsTrue){
  int tmpAxis=SELECTED_Y_AXIS;
  if (bDownIsTrue)   tmpAxis++;
 else   tmpAxis--;
  if (tmpAxis < 0)   tmpAxis=0;
  if ((tmpAxis + 1) >= storageVA.size())   tmpAxis=SELECTED_Y_AXIS;
  SELECTED_Y_AXIS=tmpAxis;
  bUpdateAll=true;
  setDisplayListDirty();
}",0.3956521739130434
58555,"@Override protected void reactOnExternalSelection(boolean scrollToSelection){
  bUpdateSelection=true;
}","@Override protected void reactOnExternalSelection(boolean scrollToSelection){
  bUpdateSelection=true;
  setDisplayListDirty();
}",0.8927038626609443
58556,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
    gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
    renderCoordinateSystem(gl);
    gl.glEndList();
    bRender2Axis=false;
    SELECTED_X_AXIS=0;
    SELECTED_Y_AXIS=1;
    SELECTED_X_AXIS_2=0;
    SELECTED_Y_AXIS_2=2;
    gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderScatterPoints(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
  }
 else {
    gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderMouseOver(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
  }
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
    bUpdateAll=true;
  }
  if (bUpdateSelection || bUpdateAll) {
    bUpdateSelection=false;
    buildDisplayListSelection(gl,iGLDisplayListIndexSelection);
  }
  if (bUpdateAll) {
    gl.glNewList(iGLDisplayListIndexCoord,GL.GL_COMPILE);
    renderCoordinateSystem(gl);
    gl.glEndList();
    gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
    gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
    RenderScatterPoints(gl);
    gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
    gl.glEndList();
    bUpdateAll=false;
  }
  gl.glNewList(iGLDisplayListIndexMouseOver,GL.GL_COMPILE);
  gl.glTranslatef(XYAXISDISTANCE,XYAXISDISTANCE,0);
  RenderMouseOver(gl);
  gl.glTranslatef(-XYAXISDISTANCE,-XYAXISDISTANCE,0);
  gl.glEndList();
}",0.7735735735735736
58557,"public void setPointSize(int pointSize){
  if (renderStyle.getPointSize() != pointSize) {
    renderStyle.setPointSize(pointSize);
    setDisplayListDirty();
  }
}","public void setPointSize(int pointSize){
  if (renderStyle.getPointSize() != pointSize) {
    renderStyle.setPointSize(pointSize);
    bUpdateAll=true;
    setDisplayListDirty();
  }
}",0.9394812680115274
58558,"public void leftRightSelect(boolean bLeftIsTrue){
  if (bLeftIsTrue)   SELECTED_Y_AXIS++;
 else   SELECTED_Y_AXIS--;
  if (SELECTED_Y_AXIS < 0)   SELECTED_Y_AXIS=0;
}","public void leftRightSelect(boolean bRightIsTrue){
  int tmpAxis=SELECTED_X_AXIS;
  if (bRightIsTrue)   tmpAxis++;
 else   tmpAxis--;
  if (tmpAxis < 0)   tmpAxis=0;
  if ((tmpAxis + 1) >= storageVA.size())   tmpAxis=SELECTED_X_AXIS;
  SELECTED_X_AXIS=tmpAxis;
  bUpdateAll=true;
  setDisplayListDirty();
}",0.3898305084745763
58559,"@Override public void displayLocal(GL gl){
  GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
  if (glMouseListener.wasMouseDragged()) {
    bRectangleSelection=true;
    Point pDragEndPoint=glMouseListener.getPickedPoint();
    Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
    fDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
    fDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
    gl.glNewList(iGLDisplayListIndexBrush,GL.GL_COMPILE);
    DrawRectangularSelection(gl);
    gl.glEndList();
  }
  if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
    bRectangleSelection=false;
    setDisplayListDirty();
    UpdateSelection();
    gl.glDeleteLists(iGLDisplayListIndexBrush,1);
    bUpdateSelection=true;
  }
  pickingManager.handlePicking(this,gl);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  if (bUpdateSelection) {
    bUpdateSelection=false;
    buildDisplayListSelection(gl,iGLDisplayListIndexSelection);
  }
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}","@Override public void displayLocal(GL gl){
  GLMouseListener glMouseListener=getParentGLCanvas().getGLMouseListener();
  if (glMouseListener.wasMouseDragged()) {
    bRectangleSelection=true;
    Point pDragEndPoint=glMouseListener.getPickedPoint();
    Point pDragStartPoint=glMouseListener.getPickedPointDragStart();
    fDragStartPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragStartPoint.x,pDragStartPoint.y);
    fDragEndPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pDragEndPoint.x,pDragEndPoint.y);
    gl.glNewList(iGLDisplayListIndexBrush,GL.GL_COMPILE);
    DrawRectangularSelection(gl);
    gl.glEndList();
  }
  if (glMouseListener.wasMouseReleased() && bRectangleSelection) {
    bRectangleSelection=false;
    setDisplayListDirty();
    UpdateSelection();
    gl.glDeleteLists(iGLDisplayListIndexBrush,1);
    bUpdateSelection=true;
  }
  pickingManager.handlePicking(this,gl);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.95234375
58560,"public void toggleSpecialAxisMode(){
  if (bRender2Axis)   bRender2Axis=false;
 else   bRender2Axis=true;
}","public void toggleSpecialAxisMode(){
  if (bRender2Axis)   bRender2Axis=false;
 else   bRender2Axis=true;
  bUpdateAll=true;
  setDisplayListDirty();
}",0.8294573643410853
58561,"@Override protected void handleKeyPressedEvent(KeyEvent event){
  if (event.character == 'b') {
    glScatterplot.toggleSpecialAxisMode();
    return;
  }
switch (event.keyCode) {
case SWT.ARROW_UP:
    glScatterplot.upDownSelect(true);
  break;
case SWT.ARROW_DOWN:
glScatterplot.upDownSelect(false);
break;
case SWT.ARROW_LEFT:
glScatterplot.leftRightSelect(true);
break;
case SWT.ARROW_RIGHT:
glScatterplot.leftRightSelect(false);
break;
case SWT.HOME:
glScatterplot.clearAllSelections();
break;
case SWT.ABORT:
glScatterplot.clearAllSelections();
break;
}
}","@Override protected void handleKeyPressedEvent(KeyEvent event){
  if (event.character == 'b') {
    glScatterplot.toggleSpecialAxisMode();
    return;
  }
  if (event.character == 'p') {
    glScatterplot.togglePointType();
    return;
  }
switch (event.keyCode) {
case SWT.ARROW_UP:
    glScatterplot.upDownSelect(false);
  break;
case SWT.ARROW_DOWN:
glScatterplot.upDownSelect(true);
break;
case SWT.ARROW_LEFT:
glScatterplot.leftRightSelect(false);
break;
case SWT.ARROW_RIGHT:
glScatterplot.leftRightSelect(true);
break;
case SWT.HOME:
glScatterplot.ResetSelection();
break;
}
}",0.8216783216783217
58562,"@Override public AGLView createGLEventListener(ECommandType type,GLCaleydoCanvas glCanvas,final String label,final IViewFrustum viewFrustum){
  GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + type + ""String_Node_Str""+ label+ ""String_Node_Str""));
  AGLView glView=null;
  for (  IGLViewCreator glViewCreator : glViewCreators) {
    if (type.name().equals(ECommandType.CREATE_GL_SCATTERPLOT) && glViewCreator.getViewType().equals(""String_Node_Str"")) {
      glView=glViewCreator.createGLEventListener(type,glCanvas,label,viewFrustum);
      break;
    }
  }
  if (glView == null) {
switch (type) {
case CREATE_GL_HEAT_MAP_3D:
      glView=new GLHeatMap(glCanvas,label,viewFrustum);
    break;
case CREATE_GL_PROPAGATION_HEAT_MAP_3D:
  glView=new GLBookmarkManager(glCanvas,label,viewFrustum);
break;
case CREATE_GL_TEXTURE_HEAT_MAP_3D:
glView=new GLHierarchicalHeatMap(glCanvas,label,viewFrustum);
break;
case CREATE_GL_PATHWAY_3D:
glView=new GLPathway(glCanvas,label,viewFrustum);
break;
case CREATE_GL_PARALLEL_COORDINATES:
glView=new GLParallelCoordinates(glCanvas,label,viewFrustum);
break;
case CREATE_GL_GLYPH:
glView=new GLGlyph(glCanvas,label,viewFrustum);
break;
case CREATE_GL_GLYPH_SLIDER:
glView=new GLGlyphSliderView(glCanvas,label,viewFrustum);
break;
case CREATE_GL_TISSUE:
glView=new GLTissue(glCanvas,label,viewFrustum);
break;
case CREATE_GL_BUCKET_3D:
glView=new GLRemoteRendering(glCanvas,label,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET);
break;
case CREATE_GL_JUKEBOX_3D:
glView=new GLRemoteRendering(glCanvas,label,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX);
break;
case CREATE_GL_DATA_FLIPPER:
glView=new GLDataFlipper(glCanvas,label,viewFrustum);
break;
case CREATE_GL_TISSUE_VIEW_BROWSER:
glView=new GLTissueViewBrowser(glCanvas,label,viewFrustum);
break;
case CREATE_GL_PATHWAY_VIEW_BROWSER:
glView=new GLPathwayViewBrowser(glCanvas,label,viewFrustum);
break;
case CREATE_GL_RADIAL_HIERARCHY:
glView=new GLRadialHierarchy(glCanvas,label,viewFrustum);
break;
case CREATE_GL_HISTOGRAM:
glView=new GLHistogram(glCanvas,label,viewFrustum);
break;
case CREATE_GL_GROUPER:
glView=new GLGrouper(glCanvas,label,viewFrustum);
break;
case CREATE_GL_DENDROGRAM_HORIZONTAL:
glView=new GLDendrogram(glCanvas,label,viewFrustum,true);
break;
case CREATE_GL_DENDROGRAM_VERTICAL:
glView=new GLDendrogram(glCanvas,label,viewFrustum,false);
break;
default :
throw new RuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str"");
}
}
if (glView == null) {
throw new RuntimeException(""String_Node_Str"");
}
registerGLEventListenerByGLCanvas(glCanvas,glView);
return glView;
}","@Override public AGLView createGLEventListener(ECommandType type,GLCaleydoCanvas glCanvas,final String label,final IViewFrustum viewFrustum){
  GeneralManager.get().getLogger().log(new Status(IStatus.INFO,IGeneralManager.PLUGIN_ID,""String_Node_Str"" + type + ""String_Node_Str""+ label+ ""String_Node_Str""));
  AGLView glView=null;
  for (  IGLViewCreator glViewCreator : glViewCreators) {
    if (glViewCreator.getViewType().equals(""String_Node_Str"")) {
      glView=glViewCreator.createGLEventListener(type,glCanvas,label,viewFrustum);
      break;
    }
  }
  if (glView == null) {
switch (type) {
case CREATE_GL_HEAT_MAP_3D:
      glView=new GLHeatMap(glCanvas,label,viewFrustum);
    break;
case CREATE_GL_PROPAGATION_HEAT_MAP_3D:
  glView=new GLBookmarkManager(glCanvas,label,viewFrustum);
break;
case CREATE_GL_TEXTURE_HEAT_MAP_3D:
glView=new GLHierarchicalHeatMap(glCanvas,label,viewFrustum);
break;
case CREATE_GL_PATHWAY_3D:
glView=new GLPathway(glCanvas,label,viewFrustum);
break;
case CREATE_GL_PARALLEL_COORDINATES:
glView=new GLParallelCoordinates(glCanvas,label,viewFrustum);
break;
case CREATE_GL_GLYPH:
glView=new GLGlyph(glCanvas,label,viewFrustum);
break;
case CREATE_GL_GLYPH_SLIDER:
glView=new GLGlyphSliderView(glCanvas,label,viewFrustum);
break;
case CREATE_GL_TISSUE:
glView=new GLTissue(glCanvas,label,viewFrustum);
break;
case CREATE_GL_BUCKET_3D:
glView=new GLRemoteRendering(glCanvas,label,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET);
break;
case CREATE_GL_JUKEBOX_3D:
glView=new GLRemoteRendering(glCanvas,label,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX);
break;
case CREATE_GL_DATA_FLIPPER:
glView=new GLDataFlipper(glCanvas,label,viewFrustum);
break;
case CREATE_GL_TISSUE_VIEW_BROWSER:
glView=new GLTissueViewBrowser(glCanvas,label,viewFrustum);
break;
case CREATE_GL_PATHWAY_VIEW_BROWSER:
glView=new GLPathwayViewBrowser(glCanvas,label,viewFrustum);
break;
case CREATE_GL_RADIAL_HIERARCHY:
glView=new GLRadialHierarchy(glCanvas,label,viewFrustum);
break;
case CREATE_GL_HISTOGRAM:
glView=new GLHistogram(glCanvas,label,viewFrustum);
break;
case CREATE_GL_GROUPER:
glView=new GLGrouper(glCanvas,label,viewFrustum);
break;
case CREATE_GL_DENDROGRAM_HORIZONTAL:
glView=new GLDendrogram(glCanvas,label,viewFrustum,true);
break;
case CREATE_GL_DENDROGRAM_VERTICAL:
glView=new GLDendrogram(glCanvas,label,viewFrustum,false);
break;
default :
throw new RuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str"");
}
}
if (glView == null) {
throw new RuntimeException(""String_Node_Str"");
}
registerGLEventListenerByGLCanvas(glCanvas,glView);
return glView;
}",0.9890813253012049
58563,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  if (bRectangleSelection)   return;
  ESelectionType eSelectionType;
switch (ePickingType) {
case SCATTER_POINT_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
elementSelectionManager.clearSelection(eSelectionType);
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.DESELECTED;
break;
case DRAGGED:
eSelectionType=ESelectionType.SELECTION;
default :
return;
}
createContentSelection(eSelectionType,iExternalID);
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  if (bRectangleSelection)   return;
  ESelectionType eSelectionType;
switch (ePickingType) {
case SCATTER_POINT_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.DESELECTED;
break;
case DRAGGED:
eSelectionType=ESelectionType.SELECTION;
default :
return;
}
createContentSelection(eSelectionType,iExternalID);
break;
}
}",0.962314939434724
58564,"private void createContentSelection(ESelectionType selectionType,int contentID){
  if (elementSelectionManager.checkStatus(selectionType,contentID))   return;
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,contentID) && selectionType == ESelectionType.DESELECTED) {
    elementSelectionManager.removeFromType(ESelectionType.SELECTION,contentID);
    setDisplayListDirty();
    bUpdateSelection=true;
    return;
  }
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,contentID)) {
    bUpdateSelection=true;
  }
  if (!elementSelectionManager.checkStatus(contentID))   elementSelectionManager.add(contentID);
  elementSelectionManager.addToType(selectionType,contentID);
  setDisplayListDirty();
}","private void createContentSelection(ESelectionType selectionType,int contentID){
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,contentID)) {
    if (selectionType == ESelectionType.DESELECTED) {
      elementSelectionManager.removeFromType(ESelectionType.SELECTION,contentID);
      setDisplayListDirty();
      bUpdateSelection=true;
      return;
    }
  }
  if (selectionType == ESelectionType.SELECTION) {
    if (!elementSelectionManager.checkStatus(contentID))     elementSelectionManager.add(contentID);
    elementSelectionManager.addToType(selectionType,contentID);
    bUpdateSelection=true;
  }
  if ((selectionType == ESelectionType.MOUSE_OVER)) {
    mouseoverSelectionManager.resetSelectionManager();
    mouseoverSelectionManager.add(contentID);
    mouseoverSelectionManager.addToType(selectionType,contentID);
  }
  setDisplayListDirty();
}",0.7026691495965239
58565,"private void RenderMouseOver(GL gl){
  if (elementSelectionManager.getNumberOfElements(ESelectionType.MOUSE_OVER) == 0)   return;
  Set<Integer> mouseOver=elementSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  int iContentIndex=0;
  for (  int i : mouseOver) {
    iContentIndex=i;
    break;
  }
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float x=xnormalized * XScale;
  float y=ynormalized * YScale;
  float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
  float z=+1.5f;
  float fullPoint=POINTSIZE * 2f;
  gl.glColor3f(1.0f,1.0f,0.0f);
  float angle;
  float PI=(float)Math.PI;
  gl.glBegin(GL.GL_POLYGON);
  for (int i=0; i < 20; i++) {
    angle=(i * 2 * PI) / 10;
    gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
  }
  gl.glEnd();
  z=+2.0f;
  gl.glColor3f(0.0f,0.0f,0.0f);
  gl.glPointSize(POINTSIZE * 50.0f);
  gl.glBegin(GL.GL_POINTS);
  gl.glVertex3f(x,y,z);
  gl.glEnd();
  z=+2.5f;
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,2.0f);
  DrawMouseOverLabel(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex);
}","private void RenderMouseOver(GL gl){
  if (mouseoverSelectionManager.getNumberOfElements(ESelectionType.MOUSE_OVER) == 0)   return;
  Set<Integer> mouseOver=mouseoverSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  int iContentIndex=0;
  for (  int i : mouseOver) {
    iContentIndex=i;
    break;
  }
  float XScale=renderStyle.getRenderWidth() - XYAXISDISTANCE * 2.0f;
  float YScale=renderStyle.getRenderHeight() - XYAXISDISTANCE * 2.0f;
  float xnormalized=set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float ynormalized=set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float x=xnormalized * XScale;
  float y=ynormalized * YScale;
  float[] fArMappingColor=colorMapper.getColor(Math.max(xnormalized,ynormalized));
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex))   fArMappingColor=new float[]{1.0f,0.1f,0.5f};
  float z=+1.5f;
  float fullPoint=POINTSIZE * 2f;
  gl.glColor3f(1.0f,1.0f,0.0f);
  float angle;
  float PI=(float)Math.PI;
  gl.glBegin(GL.GL_POLYGON);
  for (int i=0; i < 20; i++) {
    angle=(i * 2 * PI) / 10;
    gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
  }
  gl.glEnd();
  z=+2.0f;
  gl.glColor3f(0.0f,0.0f,0.0f);
  gl.glPointSize(POINTSIZE * 50.0f);
  gl.glBegin(GL.GL_POINTS);
  gl.glVertex3f(x,y,z);
  gl.glEnd();
  z=+2.5f;
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  DrawPointPrimitive(gl,x,y,z,fArMappingColor,1.0f,iContentIndex,2.0f);
  DrawMouseOverLabel(gl,x,y,0.0f,fArMappingColor,1.0f,iContentIndex);
}",0.9497774952320408
58566,"@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  InitAxisComboEvent initAxisComboEvent=new InitAxisComboEvent();
  initAxisComboEvent.setSender(this);
  initAxisComboEvent.setAxisNames(this.getAxisString());
  GeneralManager.get().getEventPublisher().triggerEvent(initAxisComboEvent);
}","@Override public void init(GL gl){
  renderStyle=new ScatterPlotRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  InitAxisComboEvent initAxisComboEvent=new InitAxisComboEvent();
  initAxisComboEvent.setSender(this);
  initAxisComboEvent.setAxisNames(this.getAxisString());
  GeneralManager.get().getEventPublisher().triggerEvent(initAxisComboEvent);
  POINTSIZE=POINTSIZE / 1.0f;
  POINTSTYLE=EScatterPointType.CROSS;
}",0.9152119700748128
58567,"private void DrawMouseOverLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  z=z + 3.0f;
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  String sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,-z);
}","private void DrawMouseOverLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  textRenderer.setColor(0,0,0,1);
  z=z + 3.0f;
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  String sLabel=""String_Node_Str"";
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex))   sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
 else   sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  Rectangle2D bounds=textRenderer.getScaledBounds(gl,sLabel,fScaling,ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
  float boxLengh=(float)bounds.getWidth() + 0.2f;
  float boxHight=(float)bounds.getHeight();
  gl.glColor3f(1.0f,1.0f,0.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(gl,sLabel,0,0,ScatterPlotRenderStyle.TEXT_ON_LABEL_Z,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glPopAttrib();
  gl.glTranslatef(-x,-y,-z);
}",0.8893587033121917
58568,"/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,getDecimalFormat().format(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,getDecimalFormat().format(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      renderNumber(gl,getDecimalFormat().format(fNumber),fCurrentWidth - fWidthHalf + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH - fHeight);
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
}","/** 
 * Render the coordinate system of the Scatterplot
 * @param gl the gl context
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,getDecimalFormat().format(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,getDecimalFormat().format(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      renderNumber(gl,getDecimalFormat().format(fNumber),fCurrentWidth - fWidthHalf + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH - fHeight);
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-YLABELDISTANCE,-renderStyle.getLabelHeight(),0);
}",0.6922428330522765
58569,"@Override protected void initLists(){
  if (contentVAType != EVAType.CONTENT_EMBEDDED_HM) {
    if (bRenderOnlyContext)     contentVAType=EVAType.CONTENT_CONTEXT;
 else     contentVAType=EVAType.CONTENT;
  }
  contentVA=useCase.getVA(contentVAType);
  storageVA=useCase.getVA(storageVAType);
  elementSelectionManager=storageSelectionManager;
}","@Override protected void initLists(){
  if (contentVAType != EVAType.CONTENT_EMBEDDED_HM) {
    if (bRenderOnlyContext)     contentVAType=EVAType.CONTENT_CONTEXT;
 else     contentVAType=EVAType.CONTENT;
  }
  contentVA=useCase.getVA(contentVAType);
  storageVA=useCase.getVA(storageVAType);
  mouseoverSelectionManager=new SelectionManager.Builder(EIDType.UNSPECIFIED).build();
  elementSelectionManager=contentSelectionManager;
}",0.8541935483870968
58570,"private void DrawPointPrimitive(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex,float scale){
  EScatterPointType type=POINTSTYLE;
  float fullPoint=POINTSIZE * scale;
  float halfPoint=(fullPoint / 2.0f);
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.SCATTER_POINT_SELECTION,iContentIndex);
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex)) {
    z=+1.0f;
    gl.glColor3f(1.0f,0.1f,0.5f);
  }
  gl.glPushName(iPickingID);
switch (type) {
case BOX:
{
      gl.glBegin(GL.GL_POLYGON);
      gl.glVertex3f(x - halfPoint,y - halfPoint,z);
      gl.glVertex3f(x - halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y - halfPoint,z);
      gl.glEnd();
      break;
    }
case POINT:
{
    gl.glPointSize(fullPoint * 50.0f);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    break;
  }
case CROSS:
{
  gl.glLineWidth(1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(x - halfPoint,y - halfPoint,z);
  gl.glVertex3f(x + halfPoint,y + halfPoint,z);
  gl.glVertex3f(x - halfPoint,y + halfPoint,z);
  gl.glVertex3f(x + halfPoint,y - halfPoint,z);
  gl.glEnd();
}
break;
case CIRCLE:
{
float angle;
float PI=(float)Math.PI;
gl.glLineWidth(1.0f);
gl.glBegin(GL.GL_LINE_LOOP);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
case DISK:
{
float angle;
float PI=(float)Math.PI;
gl.glBegin(GL.GL_POLYGON);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
default :
}
gl.glPopName();
}","private void DrawPointPrimitive(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex,float scale){
  EScatterPointType type=POINTSTYLE;
  float fullPoint=POINTSIZE * scale;
  float halfPoint=(fullPoint / 2.0f);
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.SCATTER_POINT_SELECTION,iContentIndex);
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  gl.glPushName(iPickingID);
switch (type) {
case BOX:
{
      gl.glBegin(GL.GL_POLYGON);
      gl.glVertex3f(x - halfPoint,y - halfPoint,z);
      gl.glVertex3f(x - halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y - halfPoint,z);
      gl.glEnd();
      break;
    }
case POINT:
{
    gl.glPointSize(fullPoint * 50.0f);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    break;
  }
case CROSS:
{
  gl.glLineWidth(1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(x - halfPoint,y - halfPoint,z);
  gl.glVertex3f(x + halfPoint,y + halfPoint,z);
  gl.glVertex3f(x - halfPoint,y + halfPoint,z);
  gl.glVertex3f(x + halfPoint,y - halfPoint,z);
  gl.glEnd();
}
break;
case CIRCLE:
{
float angle;
float PI=(float)Math.PI;
gl.glLineWidth(1.0f);
gl.glBegin(GL.GL_LINE_LOOP);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
case DISK:
{
float angle;
float PI=(float)Math.PI;
gl.glBegin(GL.GL_POLYGON);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
default :
}
gl.glPopName();
}",0.962534435261708
58571,"@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case SCATTER_POINT_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
elementSelectionManager.clearSelection(eSelectionType);
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
default :
return;
}
createContentSelection(eSelectionType,iExternalID);
break;
}
}","@Override protected void handlePickingEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case SCATTER_POINT_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
elementSelectionManager.clearSelection(eSelectionType);
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.DESELECTED;
break;
default :
return;
}
createContentSelection(eSelectionType,iExternalID);
break;
}
}",0.9807407407407408
58572,"private void createContentSelection(ESelectionType selectionType,int contentID){
  if (elementSelectionManager.checkStatus(selectionType,contentID))   return;
  if (selectionType == ESelectionType.MOUSE_OVER && elementSelectionManager.checkStatus(ESelectionType.SELECTION,contentID) && elementSelectionManager.getElements(ESelectionType.MOUSE_OVER).size() == 0)   return;
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,contentID) && selectionType == ESelectionType.SELECTION)   elementSelectionManager.removeFromType(selectionType,contentID);
  int test=elementSelectionManager.getNumberOfElements();
  elementSelectionManager.add(contentID);
  elementSelectionManager.addToType(selectionType,contentID);
  test=elementSelectionManager.getNumberOfElements();
  setDisplayListDirty();
}","private void createContentSelection(ESelectionType selectionType,int contentID){
  if (elementSelectionManager.checkStatus(selectionType,contentID))   return;
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,contentID) && selectionType == ESelectionType.DESELECTED) {
    elementSelectionManager.removeFromType(ESelectionType.SELECTION,contentID);
    setDisplayListDirty();
    return;
  }
  if (!elementSelectionManager.checkStatus(contentID))   elementSelectionManager.add(contentID);
  elementSelectionManager.addToType(selectionType,contentID);
  setDisplayListDirty();
}",0.6086956521739131
58573,"private void DrawLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  z=z + 2.1f;
  gl.glTranslatef(x,y,z);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  textRenderer.draw3D(gl,sLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glTranslatef(-x,-y,-z);
}","private void DrawLabel(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  z=z + 3.0f;
  x=x + 0.1f;
  gl.glTranslatef(x,y,z);
  float boxLengh=0.8f;
  float boxHight=0.1f;
  gl.glColor3f(1.0f,1.0f,1.0f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(0.0f,-0.02f,-0.1f);
  gl.glVertex3f(0.0f,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,boxHight,-0.1f);
  gl.glVertex3f(boxLengh,-0.02f,-0.1f);
  gl.glEnd();
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str""+ set.get(SELECTED_Y_AXIS).getFloat(EDataRepresentation.RAW,iContentIndex);
  textRenderer.draw3D(gl,sLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glTranslatef(-x,-y,-z);
}",0.7864746399499061
58574,"/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,getDecimalFormat().format(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,getDecimalFormat().format(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      renderNumber(gl,getDecimalFormat().format(fNumber),fCurrentWidth - fWidthHalf + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH - fHeight);
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-YLABELDISTANCE,renderStyle.getLabelHeight(),0);
}","/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL gl){
  textRenderer.setColor(0,0,0,1);
  float fXPosition=XYAXISDISTANCE;
  float fYPosition=XYAXISDISTANCE;
  float fMarkerSpacingY=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
  float fMarkerSpacingX=renderStyle.getAxisWidth() / (NUMBER_AXIS_MARKERS + 1);
  for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS + 1; iInnerCount++) {
    float fCurrentHeight=fMarkerSpacingY * iInnerCount;
    float fCurrentWidth=fMarkerSpacingX * iInnerCount;
    if (set.isSetHomogeneous()) {
      float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
      float max=(float)set.getMax();
      float min=(float)set.getMin();
      Rectangle2D bounds=textRenderer.getScaledBounds(gl,getDecimalFormat().format(fNumber),renderStyle.getSmallFontScalingFactor(),ScatterPlotRenderStyle.MIN_NUMBER_TEXT_SIZE);
      float fWidth=(float)bounds.getWidth();
      float fHeight=(float)bounds.getHeight();
      float fHeightHalf=fHeight / 2.0f;
      float fWidthHalf=fWidth / 2.0f;
      renderNumber(gl,getDecimalFormat().format(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf + XYAXISDISTANCE);
      renderNumber(gl,getDecimalFormat().format(fNumber),fCurrentWidth - fWidthHalf + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH - fHeight);
    }
    gl.glColor4fv(X_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition - AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glVertex3f(fCurrentWidth + XYAXISDISTANCE,fYPosition + AXIS_MARKER_WIDTH,AXIS_Z);
    gl.glEnd();
    gl.glColor4fv(Y_AXIS_COLOR,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight + XYAXISDISTANCE,AXIS_Z);
    gl.glEnd();
  }
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,0.0f);
  gl.glVertex3f((renderStyle.getRenderWidth() - XYAXISDISTANCE),XYAXISDISTANCE,0.0f);
  gl.glEnd();
  gl.glColor4fv(Y_AXIS_COLOR,0);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(XYAXISDISTANCE,XYAXISDISTANCE,AXIS_Z);
  gl.glVertex3f(XYAXISDISTANCE,renderStyle.getRenderHeight() - XYAXISDISTANCE,AXIS_Z);
  gl.glEnd();
  gl.glTranslatef(renderStyle.getLAbelWidth(),XLABELDISTANCE,0);
  gl.glRotatef(XLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  String sAxisLabel=""String_Node_Str"" + set.get(SELECTED_X_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-XLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-renderStyle.getLAbelWidth(),-XLABELDISTANCE,0);
  gl.glTranslatef(YLABELDISTANCE,renderStyle.getLabelHeight(),0);
  gl.glRotatef(YLABELROTATIONNAGLE,0,0,1);
  textRenderer.begin3DRendering();
  fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  sAxisLabel=""String_Node_Str"" + set.get(SELECTED_Y_AXIS).getLabel();
  textRenderer.draw3D(gl,sAxisLabel,0,0,0,fScaling,ScatterPlotRenderStyle.MIN_AXIS_LABEL_TEXT_SIZE);
  textRenderer.end3DRendering();
  gl.glRotatef(-YLABELROTATIONNAGLE,0,0,1);
  gl.glTranslatef(-YLABELDISTANCE,renderStyle.getLabelHeight(),0);
}",0.9898267803134452
58575,"private void DrawPointPrimitive(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  EScatterPointType type=POINTSTYLE;
  float halfPoint=POINTSIZE / 2.0f;
  float fullPoint=POINTSIZE;
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.SCATTER_POINT_SELECTION,iContentIndex);
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  int test=elementSelectionManager.getNumberOfElements(ESelectionType.SELECTION);
  int test2=elementSelectionManager.getNumberOfElements(ESelectionType.MOUSE_OVER);
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex)) {
    z=+1.0f;
    gl.glColor3f(1.0f,0.1f,0.5f);
  }
  if (elementSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iContentIndex)) {
    z=+2.0f;
    fullPoint=0.03f;
    gl.glColor3f(1.0f,1.0f,0.0f);
    type=EScatterPointType.DISK;
  }
  gl.glPushName(iPickingID);
switch (type) {
case BOX:
{
      gl.glBegin(GL.GL_POLYGON);
      gl.glVertex3f(x - halfPoint,y - halfPoint,z);
      gl.glVertex3f(x - halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y - halfPoint,z);
      gl.glEnd();
      break;
    }
case POINT:
{
    gl.glPointSize(POINTSIZE * 20.0f);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    break;
  }
case CROSS:
{
  gl.glLineWidth(1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(x - halfPoint,y - halfPoint,z);
  gl.glVertex3f(x + halfPoint,y + halfPoint,z);
  gl.glVertex3f(x - halfPoint,y + halfPoint,z);
  gl.glVertex3f(x + halfPoint,y - halfPoint,z);
  gl.glEnd();
}
break;
case CIRCLE:
{
float angle;
float PI=(float)Math.PI;
gl.glLineWidth(1.0f);
gl.glBegin(GL.GL_LINE_LOOP);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
case DISK:
{
float angle;
float PI=(float)Math.PI;
gl.glBegin(GL.GL_POLYGON);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
default :
}
gl.glPopName();
}","private void DrawPointPrimitive(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity,int iContentIndex){
  EScatterPointType type=POINTSTYLE;
  float halfPoint=POINTSIZE / 2.0f;
  float fullPoint=POINTSIZE;
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.SCATTER_POINT_SELECTION,iContentIndex);
  gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
  if (elementSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex)) {
    z=+1.0f;
    gl.glColor3f(1.0f,0.1f,0.5f);
  }
  if (elementSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iContentIndex)) {
    z=+1.5f;
    fullPoint=POINTSIZE * 2f;
    gl.glColor3f(1.0f,1.0f,0.0f);
    float angle;
    float PI=(float)Math.PI;
    gl.glBegin(GL.GL_POLYGON);
    for (int i=0; i < 20; i++) {
      angle=(i * 2 * PI) / 10;
      gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
    }
    gl.glEnd();
    z=+2.0f;
    gl.glColor3f(0.0f,0.0f,0.0f);
    gl.glPointSize(POINTSIZE * 50.0f);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    z=+2.5f;
    gl.glColor3f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2]);
    halfPoint=POINTSIZE * 0.75f;
    fullPoint=POINTSIZE * 1.5f;
  }
  gl.glPushName(iPickingID);
switch (type) {
case BOX:
{
      gl.glBegin(GL.GL_POLYGON);
      gl.glVertex3f(x - halfPoint,y - halfPoint,z);
      gl.glVertex3f(x - halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y - halfPoint,z);
      gl.glEnd();
      break;
    }
case POINT:
{
    gl.glPointSize(fullPoint * 50.0f);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    break;
  }
case CROSS:
{
  gl.glLineWidth(1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(x - halfPoint,y - halfPoint,z);
  gl.glVertex3f(x + halfPoint,y + halfPoint,z);
  gl.glVertex3f(x - halfPoint,y + halfPoint,z);
  gl.glVertex3f(x + halfPoint,y - halfPoint,z);
  gl.glEnd();
}
break;
case CIRCLE:
{
float angle;
float PI=(float)Math.PI;
gl.glLineWidth(1.0f);
gl.glBegin(GL.GL_LINE_LOOP);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
case DISK:
{
float angle;
float PI=(float)Math.PI;
gl.glBegin(GL.GL_POLYGON);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * fullPoint),y + (float)(Math.sin(angle) * fullPoint),z);
}
gl.glEnd();
}
break;
default :
}
gl.glPopName();
}",0.7536772322353429
58576,"public void setPointSize(int value){
  POINTSIZE=value / 200.0f;
  iPointSize=value;
}","public void setPointSize(int value){
  POINTSIZE=value / 100.0f;
  iPointSize=value;
}",0.9883720930232558
58577,"@Override protected Control createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout(1,false);
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=0;
  composite.setLayout(layout);
  slider=new Slider(composite,SWT.HORIZONTAL);
  slider.setValues(iSelection,2,20,1,1,1);
  slider.setLayoutData(new GridData(130,20));
  listener=new Listener(){
    public void handleEvent(    Event event){
      SetPointSizeEvent setPointSizeEvent=new SetPointSizeEvent();
      setPointSizeEvent.setSender(this);
      setPointSizeEvent.setPointSize(slider.getSelection());
      GeneralManager.get().getEventPublisher().triggerEvent(setPointSizeEvent);
    }
  }
;
  iSelection=slider.getSelection();
  slider.addListener(SWT.Selection,listener);
  return composite;
}","@Override protected Control createControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout(1,false);
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=0;
  composite.setLayout(layout);
  iSelection=5;
  slider=new Slider(composite,SWT.HORIZONTAL);
  slider.setValues(iSelection,1,10,1,1,1);
  slider.setLayoutData(new GridData(130,20));
  listener=new Listener(){
    public void handleEvent(    Event event){
      SetPointSizeEvent setPointSizeEvent=new SetPointSizeEvent();
      setPointSizeEvent.setSender(this);
      setPointSizeEvent.setPointSize(slider.getSelection());
      GeneralManager.get().getEventPublisher().triggerEvent(setPointSizeEvent);
    }
  }
;
  iSelection=slider.getSelection();
  slider.addListener(SWT.Selection,listener);
  return composite;
}",0.9869203329369798
58578,"public void setPointSize(int pointSize){
  if (renderStyle.getPointSize() == pointSize) {
    renderStyle.setPointSize(pointSize);
    setDisplayListDirty();
  }
}","public void setPointSize(int pointSize){
  if (renderStyle.getPointSize() != pointSize) {
    renderStyle.setPointSize(pointSize);
    setDisplayListDirty();
  }
}",0.9938650306748468
58579,"private void DrawPointPrimitive(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity){
switch (POINTSTYLE) {
case BOX:
{
      gl.glBegin(GL.GL_POLYGON);
      gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
      gl.glVertex3f(x,y,z);
      gl.glVertex3f(x,y + POINTSIZE,z);
      gl.glVertex3f(x + POINTSIZE,y + POINTSIZE,z);
      gl.glVertex3f(x + POINTSIZE,y,z);
      gl.glEnd();
      break;
    }
case POINT:
{
    gl.glPointSize(POINTSIZE * 10.0f);
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    break;
  }
case CROSS:
{
  gl.glLineWidth(1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  gl.glVertex3f(x,y,z);
  gl.glVertex3f(x + POINTSIZE,y + POINTSIZE,z);
  gl.glVertex3f(x,y + POINTSIZE,z);
  gl.glVertex3f(x + POINTSIZE,y,z);
  gl.glEnd();
}
break;
case CIRCLE:
{
float angle;
float PI=(float)Math.PI;
gl.glLineWidth(1.0f);
gl.glBegin(GL.GL_LINE_LOOP);
gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * POINTSIZE),y + (float)(Math.sin(angle) * POINTSIZE),z);
}
gl.glEnd();
}
break;
default :
}
}","private void DrawPointPrimitive(GL gl,float x,float y,float z,float[] fArMappingColor,float fOpacity){
  float halfPoint=POINTSIZE / 2.0f;
switch (POINTSTYLE) {
case BOX:
{
      gl.glBegin(GL.GL_POLYGON);
      gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
      gl.glVertex3f(x - halfPoint,y - halfPoint,z);
      gl.glVertex3f(x - halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y + halfPoint,z);
      gl.glVertex3f(x + halfPoint,y - halfPoint,z);
      gl.glEnd();
      break;
    }
case POINT:
{
    gl.glPointSize(POINTSIZE * 10.0f);
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
    gl.glBegin(GL.GL_POINTS);
    gl.glVertex3f(x,y,z);
    gl.glEnd();
    break;
  }
case CROSS:
{
  gl.glLineWidth(1.0f);
  gl.glBegin(GL.GL_LINES);
  gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  gl.glVertex3f(x - halfPoint,y - halfPoint,z);
  gl.glVertex3f(x + halfPoint,y + halfPoint,z);
  gl.glVertex3f(x - halfPoint,y + halfPoint,z);
  gl.glVertex3f(x + halfPoint,y - halfPoint,z);
  gl.glEnd();
}
break;
case CIRCLE:
{
float angle;
float PI=(float)Math.PI;
gl.glLineWidth(1.0f);
gl.glBegin(GL.GL_LINE_LOOP);
gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
for (int i=0; i < 10; i++) {
angle=(i * 2 * PI) / 10;
gl.glVertex3f(x + (float)(Math.cos(angle) * POINTSIZE),y + (float)(Math.sin(angle) * POINTSIZE),z);
}
gl.glEnd();
}
break;
default :
}
}",0.2641114982578397
58580,"public void setPointSize(int value){
  POINTSIZE=value / 50;
  iPointSize=value;
}","public void setPointSize(int value){
  POINTSIZE=value / 50.0f;
  iPointSize=value;
}",0.9820359281437124
58581,"@Override protected List<ToolBarContainer> getToolBarContent(){
  ActionToolBarContainer container=new ActionToolBarContainer();
  container.setImagePath(IMAGE_PATH);
  container.setTitle(VIEW_TITLE);
  List<IToolBarItem> actionList=new ArrayList<IToolBarItem>();
  container.setToolBarItems(actionList);
  int targetViewID=getTargetViewData().getViewID();
  IToolBarItem testAction=new ScatterplotTestAction(targetViewID);
  actionList.add(testAction);
  if (testSlider == null) {
    testSlider=new DepthSlider(""String_Node_Str"",0);
  }
  actionList.add(testSlider);
  ArrayList<ToolBarContainer> list=new ArrayList<ToolBarContainer>();
  list.add(container);
  return list;
}","@Override protected List<ToolBarContainer> getToolBarContent(){
  ActionToolBarContainer container=new ActionToolBarContainer();
  container.setImagePath(IMAGE_PATH);
  container.setTitle(VIEW_TITLE);
  List<IToolBarItem> actionList=new ArrayList<IToolBarItem>();
  container.setToolBarItems(actionList);
  int targetViewID=getTargetViewData().getViewID();
  IToolBarItem testAction=new ScatterplotTestAction(targetViewID);
  actionList.add(testAction);
  if (testSlider == null) {
    testSlider=new PointSizeSlider(""String_Node_Str"",0);
  }
  actionList.add(testSlider);
  ArrayList<ToolBarContainer> list=new ArrayList<ToolBarContainer>();
  list.add(container);
  return list;
}",0.9897058823529412
58582,"@SuppressWarnings(""String_Node_Str"") @Override public <K,V>Set<V> getIDAsSet(EIDType source,EIDType destination,K sourceID){
  Set<V> setResult=new HashSet<V>();
  if (source.equals(destination)) {
    setResult.add((V)sourceID);
    return setResult;
  }
  List<MappingEdge> path=DijkstraShortestPath.findPathBetween(mappingGraph,source,destination);
  Object currentID=sourceID;
  if (path == null)   return null;
  Set<Object> keys=null;
  Collection<Object> values=new ArrayList<Object>();
  for (  MappingEdge edge : path) {
    Map<?,?> currentMap=hashType2Mapping.get(edge.getMappingType());
    if (keys != null) {
      for (      Object key : keys) {
        if (edge.getMappingType().isMultiMap()) {
          Set<Object> temp=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(key);
          if (temp != null)           values.addAll(temp);
        }
 else {
          Object value=currentMap.get(key);
          if (value != null)           values.add(value);
        }
      }
      if (values.isEmpty())       return null;
      keys=new HashSet<Object>();
      for (      Object value : values) {
        keys.add(value);
      }
      values.clear();
    }
 else {
      if (edge.getMappingType().isMultiMap()) {
        keys=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(currentID);
        if ((keys == null) || (keys.isEmpty()))         return null;
      }
 else {
        currentID=currentMap.get(currentID);
        if (currentID == null)         return null;
      }
    }
  }
  if (keys != null)   return (Set<V>)keys;
  setResult.add((V)currentID);
  return setResult;
}","@SuppressWarnings(""String_Node_Str"") @Override public <K,V>Set<V> getIDAsSet(EIDType source,EIDType destination,K sourceID){
  Set<V> setResult=new HashSet<V>();
  if (source.equals(destination)) {
    setResult.add((V)sourceID);
    return setResult;
  }
  List<MappingEdge> path;
  try {
    path=DijkstraShortestPath.findPathBetween(mappingGraph,source,destination);
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
  Object currentID=sourceID;
  if (path == null)   return null;
  Set<Object> keys=null;
  Collection<Object> values=new ArrayList<Object>();
  for (  MappingEdge edge : path) {
    Map<?,?> currentMap=hashType2Mapping.get(edge.getMappingType());
    if (keys != null) {
      for (      Object key : keys) {
        if (edge.getMappingType().isMultiMap()) {
          Set<Object> temp=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(key);
          if (temp != null)           values.addAll(temp);
        }
 else {
          Object value=currentMap.get(key);
          if (value != null)           values.add(value);
        }
      }
      if (values.isEmpty())       return null;
      keys=new HashSet<Object>();
      for (      Object value : values) {
        keys.add(value);
      }
      values.clear();
    }
 else {
      if (edge.getMappingType().isMultiMap()) {
        keys=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(currentID);
        if ((keys == null) || (keys.isEmpty()))         return null;
      }
 else {
        currentID=currentMap.get(currentID);
        if (currentID == null)         return null;
      }
    }
  }
  if (keys != null)   return (Set<V>)keys;
  setResult.add((V)currentID);
  return setResult;
}",0.9748561042108452
58583,"@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType().getCategory() == EIDCategory.GENE) {
    contentSelectionManager.setDelta(selectionDelta);
    ISelectionDelta internalDelta=contentSelectionManager.getCompleteDelta();
    initForAddedElements();
    handleConnectedElementRep(internalDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX) {
    storageSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(storageSelectionManager.getCompleteDelta());
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
}","@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType().getCategory() == EIDCategory.GENE && dataDomain == EDataDomain.GENETIC_DATA) {
    contentSelectionManager.setDelta(selectionDelta);
    ISelectionDelta internalDelta=contentSelectionManager.getCompleteDelta();
    initForAddedElements();
    handleConnectedElementRep(internalDelta);
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX && (dataDomain == EDataDomain.GENETIC_DATA)) {
    storageSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(storageSelectionManager.getCompleteDelta());
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType() == EIDType.EXPERIMENT_INDEX && dataDomain == EDataDomain.CLINICAL_DATA) {
    contentSelectionManager.setDelta(selectionDelta);
    handleConnectedElementRep(storageSelectionManager.getCompleteDelta());
    reactOnExternalSelection(scrollToSelection);
    setDisplayListDirty();
  }
}",0.7863874345549738
58584,"@Override protected void handlePickingEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=iExternalID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (dataDomain != EDataDomain.GENETIC_DATA) break;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=polylineSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(iExternalID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
axisSelectionManager.remove(iExternalID,false);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
axisVA.copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=0;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
AGate gate;
if (set.isSetHomogeneous()) {
gate=new Gate(iGateID,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
}
 else {
gate=new NominalGate(iGateID,0,0.5f,set,renderStyle);
}
hashGates.put(iGateID,gate);
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
Gate gate=new Gate(++iNumberOfMasterGates,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
hashMasterGates.put(iNumberOfMasterGates,gate);
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}","@Override protected void handlePickingEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=iExternalID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (dataDomain != EDataDomain.GENETIC_DATA) break;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (!bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=polylineSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(iExternalID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
axisSelectionManager.remove(iExternalID,false);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
axisVA.copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=0;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
AGate gate;
if (set.isSetHomogeneous()) {
gate=new Gate(iGateID,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
}
 else {
gate=new NominalGate(iGateID,0,0.5f,set,renderStyle);
}
hashGates.put(iGateID,gate);
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
Gate gate=new Gate(++iNumberOfMasterGates,(float)set.getRawForNormalized(0),(float)set.getRawForNormalized(0.5f),set,renderStyle);
hashMasterGates.put(iNumberOfMasterGates,gate);
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}",0.9968688095085948
58585,"@Override public void initData(){
  super.initData();
  if (glSelectionHeatMap != null)   glSelectionHeatMap.setSet(set);
  initGates();
  resetAxisSpacing();
}","@Override public void initData(){
  super.initData();
  if (glBookmarks != null)   glBookmarks.setSet(set);
  initGates();
  resetAxisSpacing();
}",0.8627450980392157
58586,"private void createSelectionHeatMap(GL gl){
  CmdCreateGLEventListener cmdCreateGLView=(CmdCreateGLEventListener)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_PROPAGATION_HEAT_MAP_3D);
  cmdCreateGLView.setAttributes(dataDomain,EProjectionMode.ORTHOGRAPHIC,0,0.8f,viewFrustum.getBottom(),viewFrustum.getTop(),-20,20,-1);
  cmdCreateGLView.doCommand();
  glSelectionHeatMap=(GLBookmarkManager)cmdCreateGLView.getCreatedObject();
  glSelectionHeatMap.setRemoteRenderingGLView(this);
  glSelectionHeatMap.setUseCase(useCase);
  glSelectionHeatMap.setSet(set);
  glSelectionHeatMap.initData();
  glSelectionHeatMap.initRemote(gl,this,glMouseListener,null);
}","private void createSelectionHeatMap(GL gl){
  CmdCreateGLEventListener cmdCreateGLView=(CmdCreateGLEventListener)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_PROPAGATION_HEAT_MAP_3D);
  cmdCreateGLView.setAttributes(dataDomain,EProjectionMode.ORTHOGRAPHIC,0,0.8f,viewFrustum.getBottom(),viewFrustum.getTop(),-20,20,-1);
  cmdCreateGLView.doCommand();
  glBookmarks=(GLBookmarkManager)cmdCreateGLView.getCreatedObject();
  glBookmarks.setRemoteRenderingGLView(this);
  glBookmarks.setUseCase(useCase);
  glBookmarks.setSet(set);
  glBookmarks.initData();
  glBookmarks.initRemote(gl,this,glMouseListener,null);
}",0.7097744360902256
58587,"/** 
 * Constructor.
 */
public GLParallelCoordinates(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_PARALLEL_COORDINATES;
  renderStyle=new ParCoordsRenderStyle(this,viewFrustum);
  super.renderStyle=this.renderStyle;
  contentSelectionManager=new SelectionManager.Builder(EIDType.EXPRESSION_INDEX).build();
  storageSelectionManager=new SelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  alIsAngleBlocking=new ArrayList<ArrayList<Integer>>();
  alIsAngleBlocking.add(new ArrayList<Integer>());
  alAxisSpacing=new ArrayList<Float>();
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(PreferenceConstants.PC_NUM_RANDOM_SAMPLING_POINT);
}","/** 
 * Constructor.
 */
public GLParallelCoordinates(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_PARALLEL_COORDINATES;
  renderStyle=new ParCoordsRenderStyle(this,viewFrustum);
  super.renderStyle=this.renderStyle;
  alIsAngleBlocking=new ArrayList<ArrayList<Integer>>();
  alIsAngleBlocking.add(new ArrayList<Integer>());
  alAxisSpacing=new ArrayList<Float>();
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(PreferenceConstants.PC_NUM_RANDOM_SAMPLING_POINT);
}",0.8676470588235294
58588,"@Override public void display(final GL gl){
  processEvents();
  if (bShowSelectionHeatMap) {
    gl.glTranslatef(viewFrustum.getRight() - glSelectionHeatMap.getViewFrustum().getWidth(),0,0.002f);
    IViewFrustum sHMFrustum=glSelectionHeatMap.getViewFrustum();
    sHMFrustum.setTop(viewFrustum.getTop());
    sHMFrustum.setBottom(viewFrustum.getBottom());
    gl.glColor4fv(GeneralRenderStyle.PANEL_BACKGROUN_COLOR,0);
    gl.glLineWidth(1);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(glSelectionHeatMap.getViewFrustum().getWidth(),0,0);
    gl.glVertex3f(glSelectionHeatMap.getViewFrustum().getWidth(),glSelectionHeatMap.getViewFrustum().getHeight(),0);
    gl.glVertex3f(0,glSelectionHeatMap.getViewFrustum().getHeight(),0);
    gl.glEnd();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.PCS_VIEW_SELECTION,glSelectionHeatMap.getID());
    gl.glPushName(iPickingID);
    glSelectionHeatMap.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(-viewFrustum.getRight() + glSelectionHeatMap.getViewFrustum().getWidth(),0,-0.002f);
  }
  if (generalManager.getTrackDataProvider().isTrackModeActive())   handleTrackInput(gl);
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (glMouseListener.wasMouseReleased()) {
      bWasAxisMoved=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
}","@Override public void display(final GL gl){
  processEvents();
  if (bShowSelectionHeatMap) {
    gl.glTranslatef(viewFrustum.getRight() - glBookmarks.getViewFrustum().getWidth(),0,0.002f);
    IViewFrustum sHMFrustum=glBookmarks.getViewFrustum();
    sHMFrustum.setTop(viewFrustum.getTop());
    sHMFrustum.setBottom(viewFrustum.getBottom());
    gl.glColor4fv(GeneralRenderStyle.PANEL_BACKGROUN_COLOR,0);
    gl.glLineWidth(1);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(glBookmarks.getViewFrustum().getWidth(),0,0);
    gl.glVertex3f(glBookmarks.getViewFrustum().getWidth(),glBookmarks.getViewFrustum().getHeight(),0);
    gl.glVertex3f(0,glBookmarks.getViewFrustum().getHeight(),0);
    gl.glEnd();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.PCS_VIEW_SELECTION,glBookmarks.getID());
    gl.glPushName(iPickingID);
    glBookmarks.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(-viewFrustum.getRight() + glBookmarks.getViewFrustum().getWidth(),0,-0.002f);
  }
  if (generalManager.getTrackDataProvider().isTrackModeActive())   handleTrackInput(gl);
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (glMouseListener.wasMouseReleased()) {
      bWasAxisMoved=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  if (!isRenderedRemote())   contextMenu.render(gl,this);
}",0.9343449080828712
58589,"/** 
 * Reset all selections and deselections
 */
@Override public void clearAllSelections(){
  initGates();
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  bIsAngularBrushingActive=false;
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    alCurrent.clear();
  }
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    alCurrent.clear();
  }
  setDisplayListDirty();
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  if (glSelectionHeatMap != null) {
    glSelectionHeatMap.clearAllSelections();
  }
}","/** 
 * Reset all selections and deselections
 */
@Override public void clearAllSelections(){
  initGates();
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  bIsAngularBrushingActive=false;
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    alCurrent.clear();
  }
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    alCurrent.clear();
  }
  setDisplayListDirty();
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  if (glBookmarks != null) {
    glBookmarks.clearAllSelections();
  }
}",0.9580536912751678
58590,"public float getWidthOfCoordinateSystem(){
  float numberOfSpacings=2;
  if (pcs.getSet().isSetHomogeneous())   numberOfSpacings=2.5f;
  if (pcs.bShowSelectionHeatMap)   return viewFrustum.getWidth() - COORDINATE_SIDE_SPACING * numberOfSpacings * getScaling() - pcs.glSelectionHeatMap.getViewFrustum().getWidth();
 else   return viewFrustum.getWidth() - COORDINATE_SIDE_SPACING * numberOfSpacings * getScaling();
}","public float getWidthOfCoordinateSystem(){
  float numberOfSpacings=2;
  if (pcs.getSet().isSetHomogeneous())   numberOfSpacings=2.5f;
  if (pcs.bShowSelectionHeatMap)   return viewFrustum.getWidth() - COORDINATE_SIDE_SPACING * numberOfSpacings * getScaling() - pcs.glBookmarks.getViewFrustum().getWidth();
 else   return viewFrustum.getWidth() - COORDINATE_SIDE_SPACING * numberOfSpacings * getScaling();
}",0.969549330085262
58591,"/** 
 * Function responsible for handling SelectionDelta for embedded heatmap
 */
private void setEmbeddedHeatMapData(){
  int iCount=iFirstSampleLevel1 + iFirstSampleLevel2;
  if (iCount < 0) {
    System.out.println(""String_Node_Str"" + iFirstSampleLevel1);
    System.out.println(""String_Node_Str"" + iFirstSampleLevel2);
    throw new IllegalStateException();
  }
  glHeatMapView.resetView();
  IVirtualArrayDelta delta=new VirtualArrayDelta(EVAType.CONTENT_EMBEDDED_HM,eFieldDataType);
  ISelectionDelta selectionDelta=new SelectionDelta(eFieldDataType);
  IVirtualArray currentVirtualArray=contentVA;
  int iIndex=0;
  int iContentIndex=0;
  int iStorageIndex=0;
  Set<Integer> setMouseOverElements=contentSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  Set<Integer> setSelectedElements=contentSelectionManager.getElements(ESelectionType.SELECTION);
  Set<Integer> setDeselectedElements=contentSelectionManager.getElements(ESelectionType.DESELECTED);
  connectedElementRepresentationManager.clearByView(glHeatMapView.getID());
  for (int index=0; index < iSamplesPerHeatmap; index++) {
    iIndex=iCount + index;
    if (iIndex < currentVirtualArray.size()) {
      iContentIndex=currentVirtualArray.get(iIndex);
    }
    delta.add(VADeltaItem.append(iContentIndex));
    for (    Integer iSelectedID : setMouseOverElements) {
      if (iSelectedID == iContentIndex) {
        selectionDelta.addSelection(iContentIndex,ESelectionType.MOUSE_OVER);
        Collection<Integer> conenctionIDs=contentSelectionManager.getConnectionForElementID(iContentIndex);
        selectionDelta.addConnectionIDs(iSelectedID,conenctionIDs);
      }
    }
    for (    Integer iSelectedID : setSelectedElements) {
      if (iSelectedID == iContentIndex) {
        selectionDelta.addSelection(iContentIndex,ESelectionType.SELECTION);
        Collection<Integer> conenctionIDs=contentSelectionManager.getConnectionForElementID(iContentIndex);
        selectionDelta.addConnectionIDs(iSelectedID,conenctionIDs);
      }
    }
    for (    Integer iSelectedID : setDeselectedElements) {
      if (iSelectedID == iContentIndex)       selectionDelta.addSelection(iContentIndex,ESelectionType.DESELECTED);
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(delta,getShortInfo());
  if (selectionDelta.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDelta,true,null);
  }
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.RESET);
  glHeatMapView.handleStorageTriggerSelectionCommand(eExperimentDataType.getCategory(),command);
  IVirtualArrayDelta deltaExp=new VirtualArrayDelta(storageVAType,eExperimentDataType);
  ISelectionDelta selectionDeltaEx=new SelectionDelta(eExperimentDataType);
  IVirtualArray currentVirtualArrayEx=storageVA;
  setMouseOverElements=storageSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  setSelectedElements=storageSelectionManager.getElements(ESelectionType.SELECTION);
  for (int index=0; index < currentVirtualArrayEx.size(); index++) {
    iStorageIndex=currentVirtualArrayEx.get(index);
    deltaExp.add(VADeltaItem.append(iStorageIndex));
    for (    Integer iSelectedID : setMouseOverElements) {
      if (iSelectedID == iStorageIndex)       selectionDeltaEx.addSelection(iStorageIndex,ESelectionType.MOUSE_OVER);
    }
    for (    Integer iSelectedID : setSelectedElements) {
      if (iSelectedID == iStorageIndex)       selectionDeltaEx.addSelection(iStorageIndex,ESelectionType.SELECTION);
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(deltaExp,getShortInfo());
  if (selectionDeltaEx.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDeltaEx,true,null);
  }
}","/** 
 * Function responsible for handling SelectionDelta for embedded heatmap
 */
private void setEmbeddedHeatMapData(){
  int iCount=iFirstSampleLevel1 + iFirstSampleLevel2;
  if (iCount < 0) {
    System.out.println(""String_Node_Str"" + iFirstSampleLevel1);
    System.out.println(""String_Node_Str"" + iFirstSampleLevel2);
    throw new IllegalStateException();
  }
  glHeatMapView.resetView();
  IVirtualArrayDelta delta=new VirtualArrayDelta(EVAType.CONTENT_EMBEDDED_HM,eFieldDataType);
  ISelectionDelta selectionDelta=new SelectionDelta(eFieldDataType);
  IVirtualArray currentVirtualArray=contentVA;
  int iIndex=0;
  int iContentIndex=0;
  int iStorageIndex=0;
  Set<Integer> setMouseOverElements=contentSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  Set<Integer> setSelectedElements=contentSelectionManager.getElements(ESelectionType.SELECTION);
  Set<Integer> setDeselectedElements=contentSelectionManager.getElements(ESelectionType.DESELECTED);
  connectedElementRepresentationManager.clearByView(glHeatMapView.getID());
  connectedElementRepresentationManager.clearByView(this.getID());
  for (int index=0; index < iSamplesPerHeatmap; index++) {
    iIndex=iCount + index;
    if (iIndex < currentVirtualArray.size()) {
      iContentIndex=currentVirtualArray.get(iIndex);
    }
    delta.add(VADeltaItem.append(iContentIndex));
    for (    Integer iSelectedID : setMouseOverElements) {
      if (iSelectedID == iContentIndex) {
        selectionDelta.addSelection(iContentIndex,ESelectionType.MOUSE_OVER);
        Collection<Integer> conenctionIDs=contentSelectionManager.getConnectionForElementID(iContentIndex);
        selectionDelta.addConnectionIDs(iSelectedID,conenctionIDs);
      }
    }
    for (    Integer iSelectedID : setSelectedElements) {
      if (iSelectedID == iContentIndex) {
        selectionDelta.addSelection(iContentIndex,ESelectionType.SELECTION);
        Collection<Integer> conenctionIDs=contentSelectionManager.getConnectionForElementID(iContentIndex);
        selectionDelta.addConnectionIDs(iSelectedID,conenctionIDs);
      }
    }
    for (    Integer iSelectedID : setDeselectedElements) {
      if (iSelectedID == iContentIndex)       selectionDelta.addSelection(iContentIndex,ESelectionType.DESELECTED);
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(delta,getShortInfo());
  if (selectionDelta.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDelta,true,null);
  }
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.RESET);
  glHeatMapView.handleStorageTriggerSelectionCommand(eExperimentDataType.getCategory(),command);
  IVirtualArrayDelta deltaExp=new VirtualArrayDelta(storageVAType,eExperimentDataType);
  ISelectionDelta selectionDeltaEx=new SelectionDelta(eExperimentDataType);
  IVirtualArray currentVirtualArrayEx=storageVA;
  setMouseOverElements=storageSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  setSelectedElements=storageSelectionManager.getElements(ESelectionType.SELECTION);
  for (int index=0; index < currentVirtualArrayEx.size(); index++) {
    iStorageIndex=currentVirtualArrayEx.get(index);
    deltaExp.add(VADeltaItem.append(iStorageIndex));
    for (    Integer iSelectedID : setMouseOverElements) {
      if (iSelectedID == iStorageIndex)       selectionDeltaEx.addSelection(iStorageIndex,ESelectionType.MOUSE_OVER);
    }
    for (    Integer iSelectedID : setSelectedElements) {
      if (iSelectedID == iStorageIndex)       selectionDeltaEx.addSelection(iStorageIndex,ESelectionType.SELECTION);
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(deltaExp,getShortInfo());
  if (selectionDeltaEx.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDeltaEx,true,null);
  }
}",0.990920178886028
58592,"private IUseCase createUseCase(EDataDomain dataDomain){
switch (dataDomain) {
case CLINICAL_DATA:
    return new ClinicalUseCase();
case GENETIC_DATA:
  return new GeneticUseCase();
case GENERAL_DATA:
return new UnspecifiedUseCase();
default :
throw new IllegalStateException(""String_Node_Str"" + dataDomain);
}
}","private IUseCase createUseCase(EDataDomain dataDomain){
switch (dataDomain) {
case CLINICAL_DATA:
    return new ClinicalUseCase();
case GENETIC_DATA:
  return new GeneticUseCase();
case TISSUE_DATA:
return new TissueUseCase();
case PATHWAY_DATA:
return new PathwayUseCase();
case GENERAL_DATA:
return new UnspecifiedUseCase();
default :
throw new IllegalStateException(""String_Node_Str"" + dataDomain);
}
}",0.8690807799442897
58593,"/** 
 * Load data from file using a token pattern.
 * @see org.caleydo.core.parser.ascii.microarray.MicroArrayLoader1Storage#loadData()
 * @see org.caleydo.core.command.ICommand#doCommand()
 */
public void doCommand(){
  LookupTableLoader loader=null;
  if (sFileName.contains(""String_Node_Str"")) {
    EOrganism eOrganism=((GeneticUseCase)GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA)).getOrganism();
    this.sFileName=sFileName.replace(""String_Node_Str"",eOrganism.toString());
  }
  IIDMappingManager genomeIdManager=generalManager.getIDMappingManager();
  EMappingType mappingType=EMappingType.valueOf(sLookupTableType);
  int iIndex=0;
  if (sFileName.equals(""String_Node_Str"")) {
    genomeIdManager.createMap(EMappingType.REFSEQ_MRNA_2_REFSEQ_MRNA_INT);
    Map hashTmp=genomeIdManager.getMap(EMappingType.REFSEQ_MRNA_2_REFSEQ_MRNA_INT);
    for (    Object sRefSeqID : genomeIdManager.getMap(EMappingType.DAVID_2_REFSEQ_MRNA).values()) {
      hashTmp.put(sRefSeqID,iIndex++);
    }
  }
 else   if (!sFileName.equals(""String_Node_Str"")) {
    loader=new LookupTableLoader(sFileName,mappingType);
    loader.setTokenSeperator(sLookupTableDelimiter);
    loader.setStartParsingStopParsingAtLine(iStartPareseFileAtLine,iStopParseFileAtLine);
    loader.loadData();
  }
  if (bResolveCodeMappingUsingCodeToId_LUT) {
    genomeIdManager.createCodeResolvedMap(mappingType,EMappingType.valueOf(sCodeResolvingLUTMappingType));
  }
  if (bCreateReverseMap) {
    if (sCodeResolvingLUTMappingType != null) {
      mappingType=EMappingType.valueOf(sCodeResolvingLUTMappingType);
    }
    EMappingType reverseMappingType=EMappingType.valueOf(mappingType.getTypeTarget().toString() + ""String_Node_Str"" + mappingType.getTypeOrigin().toString());
    genomeIdManager.createReverseMap(mappingType,reverseMappingType);
  }
  commandManager.runDoCommand(this);
}","/** 
 * Load data from file using a token pattern.
 * @see org.caleydo.core.command.ICommand#doCommand()
 */
public void doCommand(){
  LookupTableLoader loader=null;
  if (sFileName.contains(""String_Node_Str"")) {
    EOrganism eOrganism=((GeneticUseCase)GeneralManager.get().getUseCase(EDataDomain.GENETIC_DATA)).getOrganism();
    this.sFileName=sFileName.replace(""String_Node_Str"",eOrganism.toString());
  }
  IIDMappingManager genomeIdManager=generalManager.getIDMappingManager();
  EMappingType mappingType=EMappingType.valueOf(sLookupTableType);
  int iIndex=0;
  if (sFileName.equals(""String_Node_Str"")) {
    genomeIdManager.createMap(EMappingType.REFSEQ_MRNA_2_REFSEQ_MRNA_INT);
    Map hashTmp=genomeIdManager.getMap(EMappingType.REFSEQ_MRNA_2_REFSEQ_MRNA_INT);
    for (    Object sRefSeqID : genomeIdManager.getMap(EMappingType.DAVID_2_REFSEQ_MRNA).values()) {
      hashTmp.put(sRefSeqID,iIndex++);
    }
  }
 else   if (!sFileName.equals(""String_Node_Str"")) {
    loader=new LookupTableLoader(sFileName,mappingType);
    loader.setTokenSeperator(sLookupTableDelimiter);
    loader.setStartParsingStopParsingAtLine(iStartPareseFileAtLine,iStopParseFileAtLine);
    loader.loadData();
  }
  if (bResolveCodeMappingUsingCodeToId_LUT) {
    genomeIdManager.createCodeResolvedMap(mappingType,EMappingType.valueOf(sCodeResolvingLUTMappingType));
  }
  if (bCreateReverseMap) {
    if (sCodeResolvingLUTMappingType != null) {
      mappingType=EMappingType.valueOf(sCodeResolvingLUTMappingType);
    }
    EMappingType reverseMappingType=EMappingType.valueOf(mappingType.getTypeTarget().toString() + ""String_Node_Str"" + mappingType.getTypeOrigin().toString());
    genomeIdManager.createReverseMap(mappingType,reverseMappingType);
  }
  commandManager.runDoCommand(this);
}",0.9766803840877916
58594,"/** 
 * Gets the interval to wait between 2 auto-saves in miliseconds.
 * @return auto save interval
 */
public long getInterval(){
  return interval;
}","/** 
 * Gets the interval to wait between 2 auto-saves in milliseconds.
 * @return auto save interval
 */
public long getInterval(){
  return interval;
}",0.99672131147541
58595,"/** 
 * Sets the interval to wait between 2 auto-saves in miliseconds.
 * @param interval new auto save interval to set
 */
public void setInterval(long interval){
  this.interval=interval;
}","/** 
 * Sets the interval to wait between 2 auto-saves in milliseconds.
 * @param interval new auto save interval to set
 */
public void setInterval(long interval){
  this.interval=interval;
}",0.9973890339425588
58596,"/** 
 * Gets the timestamp when the most recent auto save operation has been performered. If no auto save operation has been performed yet, the initialization time of this instance is returned.
 * @return timestamp of most recent recent auto save operation.
 */
public Date getLastSaveTimeStamp(){
  return lastSaveTimeStamp;
}","/** 
 * Gets the timestamp when the most recent auto save operation has been performed. If no auto save operation has been performed yet, the initialization time of this instance is returned.
 * @return timestamp of most recent recent auto save operation.
 */
public Date getLastSaveTimeStamp(){
  return lastSaveTimeStamp;
}",0.9969325153374232
58597,"@Override public void handleUpdateView(){
  bRedrawTextures=true;
  bFirstStartExperimentDendrogram=true;
  bFirstStartGeneDendrogram=true;
  initData();
  setDisplayListDirty();
}","@Override public void handleUpdateView(){
  bRedrawTextures=true;
  bFirstStartExperimentDendrogram=true;
  bFirstStartGeneDendrogram=true;
  setDisplayListDirty();
}",0.9595375722543352
58598,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHyperbolic(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HYPERBOLIC;
  colorMappingManager=ColorMappingManager.get();
  renderStyle=new HyperbolicRenderStyle(viewFrustum);
  tree=buildTestTree(HyperbolicRenderStyle.MAX_DEPTH,7);
  System.out.println(tree.getGraph().toString());
  layouter=new LTLayouter(viewFrustum,pickingManager,iUniqueID);
  layouter.setTree(tree);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHyperbolic(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HYPERBOLIC;
  colorMappingManager=ColorMappingManager.get();
  renderStyle=new HyperbolicRenderStyle(viewFrustum);
  tree=buildTestTree(HyperbolicRenderStyle.MAX_DEPTH,7);
  System.out.println(tree.getGraph().toString());
  layouter=new HTLayouter(viewFrustum,pickingManager,iUniqueID);
  layouter.setTree(tree);
}",0.9982486865148862
58599,"public float calculateRecursiveLayout(IDrawAbleNode node,float fRadius,float fParentAngle,int fLayer,float fNodeSize,float fXCoordOfParent,float fYCoordOfParent){
  if (fLayer <= fDepth) {
    float fRadiusUpdate=0;
    if (tree.hasChildren(node)) {
      ArrayList<IDrawAbleNode> childsOfCurrentNode=new ArrayList<IDrawAbleNode>();
      childsOfCurrentNode=tree.getChildren(node);
      float fDeltaRadius=fRadius;
      float fNumberOfChildsOfNode=childsOfCurrentNode.size();
      float fChildSpace=(fDeltaRadius * (float)Math.PI) / (fNumberOfChildsOfNode + 1);
      float fChildCount=0.0f;
      float fChildAngle=0.0f;
      for (      IDrawAbleNode tmpChild : childsOfCurrentNode) {
        fChildCount++;
        fChildAngle=(calculateChildAngle(fParentAngle,fChildSpace,fDeltaRadius,fLayer - 1)) / (fLayer - 1);
        float fRealChildAngle=fParentAngle - ((fChildAngle * (fNumberOfChildsOfNode - 1)) / 2) + fChildAngle * (fChildCount - 1);
        calcualteChildPosition(fDeltaRadius,fRealChildAngle,fChildCount,fXCoordOfParent,fYCoordOfParent);
        float fXCoord1=fXCoord;
        float fYCoord2=fYCoord;
{
          fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer + 1);
          tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
          placeNode(tmpChild,fXCoord1,fYCoord2,0.0f,fNodeSize,fNodeSize);
          placeConnection(node,tmpChild);
          calculateRecursiveLayout(tmpChild,fDeltaRadius,fRealChildAngle,fLayer + 1,fNodeSize,fXCoord,fYCoord);
        }
      }
    }
 else {
      fRadiusUpdate=fRadius * (float)Math.PI * (tree.getNumberOfElementsInLayer(fLayer) / 2) / tree.getChildren(tree.getParent(node)).size();
    }
  }
  return fLayer;
}","public float calculateRecursiveLayout(IDrawAbleNode node,float fRadius,float fParentAngle,int fLayer,float fNodeSize,float fXCoordOfParent,float fYCoordOfParent){
  float fRadiusUpdate=0;
  if (tree.hasChildren(node) && fLayer <= HyperbolicRenderStyle.MAX_DEPTH && fLayer <= fDepth) {
    ArrayList<IDrawAbleNode> childsOfCurrentNode=new ArrayList<IDrawAbleNode>();
    childsOfCurrentNode=tree.getChildren(node);
    float fDeltaRadius=fRadius;
    float fNumberOfChildsOfNode=childsOfCurrentNode.size();
    float fChildSpace=(fDeltaRadius * (float)Math.PI) / (fNumberOfChildsOfNode + 1);
    float fChildCount=0.0f;
    float fChildAngle=0.0f;
    for (    IDrawAbleNode tmpChild : childsOfCurrentNode) {
      fChildCount++;
      fChildAngle=(calculateChildAngle(fParentAngle,fChildSpace,fDeltaRadius,fLayer - 1)) / (fLayer - 1);
      float fRealChildAngle=fParentAngle - ((fChildAngle * (fNumberOfChildsOfNode - 1)) / 2) + fChildAngle * (fChildCount - 1);
      calcualteChildPosition(fDeltaRadius,fRealChildAngle,fChildCount,fXCoordOfParent,fYCoordOfParent);
      float fXCoord1=fXCoord;
      float fYCoord2=fYCoord;
{
        fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer + 1);
        tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
        placeNode(tmpChild,fXCoord1,fYCoord2,0.0f,fNodeSize,fNodeSize);
        placeConnection(node,tmpChild);
        calculateRecursiveLayout(tmpChild,fDeltaRadius,fRealChildAngle,fLayer + 1,fNodeSize,fXCoord,fYCoord);
      }
    }
  }
 else {
    fRadiusUpdate=fRadius * (float)Math.PI * (tree.getNumberOfElementsInLayer(fLayer) / 2) / tree.getChildren(tree.getParent(node)).size();
  }
  return fLayer;
}",0.9250645994832042
58600,"@Override public void renderTreeLayout(){
  fRadius=treeProjector.getProtectedLineFromCenterToBorder() / HyperbolicRenderStyle.MAX_DEPTH;
  updateSizeInfo();
  mNodeSpaceRec=new HashMap<IDrawAbleNode,Integer>();
  fDepth=tree.getDepth();
  setFCenterX(fWidth / 2);
  setFCenterY(fHeight / 2);
  setFCenterZ(0.0f);
  if (tree == null)   return;
  float fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE;
  IDrawAbleNode rootNode=tree.getRoot();
  rootNode.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
  placeNode(rootNode,fCenterX,fCenterY,fCenterZ,fNodeSize,fNodeSize);
  int fLayer=2;
  float fNumberOfNodesInLayer=tree.getNumberOfElementsInLayer((int)fLayer);
  float fCurrentNodeCount=0.0f;
  int overall=0;
  if (tree.hasChildren(rootNode))   overall=updateNodespace(tree.getChildren(rootNode),2);
  mNodeSpaceRec.put(rootNode,overall);
  if (tree.hasChildren(rootNode)) {
    ArrayList<IDrawAbleNode> childs=new ArrayList<IDrawAbleNode>();
    childs=tree.getChildren(rootNode);
    for (    IDrawAbleNode tmpChild : childs) {
      fCurrentNodeCount++;
      float fFirstLayerAngle=calculateCircle(fRadius,fCurrentNodeCount,fNumberOfNodesInLayer);
      fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer);
      tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
      placeNode(tmpChild,fXCoord,fYCoord,0.0f,fNodeSize,fNodeSize);
      placeConnection(rootNode,tmpChild);
      calculateRecursiveLayout(tmpChild,fRadius,fFirstLayerAngle * fCurrentNodeCount,fLayer + 1,fNodeSize,fXCoord,fYCoord);
    }
  }
  return;
}","@Override public void renderTreeLayout(){
  updateSizeInfo();
  fDepth=tree.getDepth();
  fViewAbleSpaceRadius=treeProjector.getProtectedLineFromCenterToBorder();
  fRadius=fViewAbleSpaceRadius / (HyperbolicRenderStyle.MAX_DEPTH - 1);
  mNodeSpaceRec=new HashMap<IDrawAbleNode,Integer>();
  setFCenterX(fWidth / 2);
  setFCenterY(fHeight / 2);
  setFCenterZ(0.0f);
  if (tree == null)   return;
  float fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE;
  IDrawAbleNode rootNode=tree.getRoot();
  rootNode.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
  placeNode(rootNode,fCenterX,fCenterY,fCenterZ,fNodeSize,fNodeSize);
  int fLayer=2;
  float fNumberOfNodesInLayer=tree.getNumberOfElementsInLayer((int)fLayer);
  float fCurrentNodeCount=0.0f;
  if (tree.hasChildren(rootNode)) {
    ArrayList<IDrawAbleNode> childs=new ArrayList<IDrawAbleNode>();
    childs=tree.getChildren(rootNode);
    for (    IDrawAbleNode tmpChild : childs) {
      fCurrentNodeCount++;
      float fFirstLayerAngle=calculateCircle(fRadius,fCurrentNodeCount,fNumberOfNodesInLayer);
      fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer);
      tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
      placeNode(tmpChild,fXCoord,fYCoord,0.0f,fNodeSize,fNodeSize);
      placeConnection(rootNode,tmpChild);
      calculateRecursiveLayout(tmpChild,fRadius,fFirstLayerAngle * fCurrentNodeCount,fLayer + 1,fNodeSize,fXCoord,fYCoord);
    }
  }
  return;
}",0.9060272197018796
58601,"public float getProtectedLineFromCenterToBorder(){
  return radius * (float)Math.toRadians(90);
}","public float getProtectedLineFromCenterToBorder(){
  float fLine=radius * ((float)Math.PI / 2);
  return fLine;
}",0.7523809523809524
58602,"/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleDragging(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fWidth=viewFrustum.getWidth() - 0.1f;
  float fHeight=viewFrustum.getHeight();
  if (bRenderGeneTree) {
    if (fArTargetWorldCoordinates[0] > -0.1f && fArTargetWorldCoordinates[0] < fWidth)     fPosCut=fArTargetWorldCoordinates[0] - fLevelWidth;
  }
 else {
    if (fArTargetWorldCoordinates[1] > -0.1f && fArTargetWorldCoordinates[1] < fHeight)     fPosCut=fArTargetWorldCoordinates[1] + fLevelHeight;
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActive=false;
    determineSelectedNodes();
  }
}","/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleDragging(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fWidth=viewFrustum.getWidth();
  float fHeight=viewFrustum.getHeight();
  if (bRenderGeneTree) {
    if (fArTargetWorldCoordinates[0] > 0.1f && fArTargetWorldCoordinates[0] < fWidth)     fPosCut=fArTargetWorldCoordinates[0] - fLevelWidth;
  }
 else {
    if (fArTargetWorldCoordinates[1] > -0.1f && fArTargetWorldCoordinates[1] < fHeight)     fPosCut=fArTargetWorldCoordinates[1] + fLevelHeight;
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActive=false;
    determineSelectedNodes();
  }
}",0.7400442477876106
58603,"public float calculateRecursiveLayout(IDrawAbleNode node,float fRadius,float fParentAngle,float fLayer,float fNodeSize,float fXCoordOfParent,float fYCoordOfParent){
  if (fLayer <= fDepth) {
    float fNumberOfNodesInNewLayer=tree.getNumberOfElementsInLayer((int)fLayer);
    if (tree.hasChildren(node)) {
      ArrayList<IDrawAbleNode> childsOfCurrentNode=new ArrayList<IDrawAbleNode>();
      childsOfCurrentNode=tree.getChildren(node);
      float fDeltaRadius=fRadius;
      float fChildSpace=(fDeltaRadius * (float)Math.PI) / (childsOfCurrentNode.size() + 1);
      float fNumberOfChildsOfNode=childsOfCurrentNode.size();
      float fChildCount=0.0f;
      float fChildAngle=0.0f;
      for (      IDrawAbleNode tmpChild : childsOfCurrentNode) {
        fChildCount++;
        fChildAngle=calculateChildAngle(fParentAngle,fChildSpace,fDeltaRadius,fChildCount);
        float fRealChildAngle=fParentAngle - ((fChildAngle * (fNumberOfChildsOfNode - 1)) / 2) + fChildAngle * (fChildCount - 1);
        calcualteChildPosition(fDeltaRadius,fRealChildAngle,fChildCount,fXCoordOfParent,fYCoordOfParent);
        float fXCoord=getFXCoord();
        float fYCoord=getFYCoord();
        float fLayerOfBranch=calculateRecursiveLayout(tmpChild,fDeltaRadius,fRealChildAngle,fLayer + 1,fNodeSize,fXCoord,fYCoord);
        drawLine(fXCoordOfParent,fYCoordOfParent,fXCoord,fYCoord);
        tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
        placeNode(tmpChild,fXCoord,fYCoord,0,fNodeSize,0.2f);
      }
    }
  }
  return fLayer;
}","public float calculateRecursiveLayout(IDrawAbleNode node,float fRadius,float fParentAngle,float fLayer,float fNodeSize,float fXCoordOfParent,float fYCoordOfParent){
  if (fLayer <= fDepth) {
    float fNumberOfNodesInNewLayer=tree.getNumberOfElementsInLayer((int)fLayer);
    if (tree.hasChildren(node)) {
      ArrayList<IDrawAbleNode> childsOfCurrentNode=new ArrayList<IDrawAbleNode>();
      childsOfCurrentNode=tree.getChildren(node);
      float fDeltaRadius=fRadius;
      float fChildSpace=(fDeltaRadius * (float)Math.PI) / (childsOfCurrentNode.size() + 1);
      float fNumberOfChildsOfNode=childsOfCurrentNode.size();
      float fChildCount=0.0f;
      float fChildAngle=0.0f;
      for (      IDrawAbleNode tmpChild : childsOfCurrentNode) {
        fChildCount++;
        fChildAngle=calculateChildAngle(fParentAngle,fChildSpace,fDeltaRadius,fChildCount);
        float fRealChildAngle=fParentAngle - ((fChildAngle * (fNumberOfChildsOfNode - 1)) / 2) + fChildAngle * (fChildCount - 1);
        calcualteChildPosition(fDeltaRadius,fRealChildAngle,fChildCount,fXCoordOfParent,fYCoordOfParent);
        float fXCoord=getFXCoord();
        float fYCoord=getFYCoord();
{
          float fLayerOfBranch=calculateRecursiveLayout(tmpChild,fDeltaRadius,fRealChildAngle,fLayer + 1,fNodeSize,fXCoord,fYCoord);
          drawLine(fXCoordOfParent,fYCoordOfParent,fXCoord,fYCoord);
          fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer);
          tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
          placeNode(tmpChild,fXCoord,fYCoord,0,fNodeSize,fNodeSize);
        }
      }
    }
  }
  return fLayer;
}",0.9481527475939148
58604,"@Override public void renderTreeLayout(){
  updateSizeInfo();
  if (tree == null)   return;
  fDepth=tree.getDepth();
  setFCenterX(fWidth / 2);
  setFCenterY(fHeight / 2);
  float fNodeSize=0.05f;
  IDrawAbleNode rootNode=tree.getRoot();
  rootNode.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
  placeNode(rootNode,fCenterX,fCenterY,0,fNodeSize,0.2f);
  float fLayer=1.0f;
  float fRadius=0.5f;
  float fNumberOfNodesInLayer=tree.getNumberOfElementsInLayer((int)fLayer);
  float fCurrentNodeCount=0;
  if (tree.hasChildren(rootNode)) {
    ArrayList<IDrawAbleNode> childs=new ArrayList<IDrawAbleNode>();
    childs=tree.getChildren(rootNode);
    for (    IDrawAbleNode tmpChild : childs) {
      fCurrentNodeCount++;
      float fFirstLayerAngle=calculateCircle((fRadius),fCurrentNodeCount,fNumberOfNodesInLayer);
      tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
      placeNode(tmpChild,getFXCoord(),getFYCoord(),0,fNodeSize,0.2f);
      drawLine(fCenterX,fCenterY,getFXCoord(),getFYCoord());
      calculateRecursiveLayout(tmpChild,fRadius - 0.05f,fFirstLayerAngle * fCurrentNodeCount,fLayer + 1,fNodeSize,getFXCoord(),getFYCoord());
    }
  }
  return;
}","@Override public void renderTreeLayout(){
  updateSizeInfo();
  if (tree == null)   return;
  fDepth=tree.getDepth();
  setFCenterX(fWidth / 2);
  setFCenterY(fHeight / 2);
  float fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE;
  IDrawAbleNode rootNode=tree.getRoot();
  rootNode.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
  placeNode(rootNode,fCenterX,fCenterY,0,fNodeSize,fNodeSize);
  float fLayer=2.0f;
  float fRadius=0.5f;
  float fNumberOfNodesInLayer=tree.getNumberOfElementsInLayer((int)fLayer);
  float fCurrentNodeCount=0;
  if (tree.hasChildren(rootNode)) {
    ArrayList<IDrawAbleNode> childs=new ArrayList<IDrawAbleNode>();
    childs=tree.getChildren(rootNode);
    for (    IDrawAbleNode tmpChild : childs) {
      fCurrentNodeCount++;
      float fFirstLayerAngle=calculateCircle((fRadius),fCurrentNodeCount,fNumberOfNodesInLayer);
      fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer);
      tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
      placeNode(tmpChild,getFXCoord(),getFYCoord(),0,fNodeSize,fNodeSize);
      float fFirstChildX=getFXCoord();
      float fFirstChildY=getFYCoord();
      drawLine(fCenterX,fCenterY,fFirstChildX,fFirstChildY);
      calculateRecursiveLayout(tmpChild,fRadius - 0.05f,fFirstLayerAngle * fCurrentNodeCount,fLayer + 1,fNodeSize,getFXCoord(),getFYCoord());
    }
  }
  return;
}",0.8546017014694509
58605,"@Override public Integer remove(int iIndex){
  if (groupList != null) {
    groupList.removeElementOfVA(iIndex);
  }
  return virtualArray.remove(iIndex);
}","@Override public Integer remove(int iIndex){
  return virtualArray.remove(iIndex);
}",0.7
58606,"@Override public void removeByElement(int iElement){
  if (groupList != null) {
    groupList.removeElementOfVA(virtualArray.indexOf(iElement));
  }
  Iterator<Integer> iter=virtualArray.iterator();
  while (iter.hasNext()) {
    if (iter.next() == iElement) {
      iter.remove();
    }
  }
}","@Override public void removeByElement(int iElement){
  Iterator<Integer> iter=virtualArray.iterator();
  while (iter.hasNext()) {
    if (iter.next() == iElement) {
      iter.remove();
    }
  }
}",0.8040816326530612
58607,"@Override public String toString(){
  return ""String_Node_Str"" + getLabel() + ""String_Node_Str""+ alStorages.size()+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + getLabel() + ""String_Node_Str""+ setType+ ""String_Node_Str""+ alStorages.size()+ ""String_Node_Str"";
}",0.9066666666666666
58608,"/** 
 * Sets the set, calls   {@link #initData()} and sets display lists dirty
 */
@Override public final void setSet(ISet set){
  this.set=set;
  initData();
}","/** 
 * Sets the set, calls   {@link #initData()} and sets display lists dirty
 */
@Override public void setSet(ISet set){
  this.set=set;
  initData();
}",0.9808917197452228
58609,"@Override public void replaceVirtualArray(EVAType vaType,IVirtualArray virtualArray){
  set.replaceVA(mapVAIDs.get(vaType),virtualArray.clone());
  Tree<ClusterNode> tree=null;
  if (vaType == EVAType.CONTENT)   tree=set.getClusteredTreeGenes();
 else   if (vaType == EVAType.STORAGE)   tree=set.getClusteredTreeExps();
  if (tree != null) {
    GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
      public void run(){
        Shell shell=new Shell();
        MessageBox messageBox=new MessageBox(shell,SWT.CANCEL);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
      }
    }
);
    if (vaType == EVAType.CONTENT)     set.setClusteredTreeGenes(null);
 else     if (vaType == EVAType.STORAGE)     set.setClusteredTreeExps(null);
  }
  eventPublisher.triggerEvent(new ReplaceVirtualArrayEvent(vaType));
}","@Override public void replaceVirtualArray(EVAType vaType,IVirtualArray virtualArray){
  set.replaceVA(mapVAIDs.get(vaType),virtualArray.clone());
  Tree<ClusterNode> tree=null;
  if (vaType == EVAType.CONTENT)   tree=set.getClusteredTreeGenes();
 else   if (vaType == EVAType.STORAGE)   tree=set.getClusteredTreeExps();
  if (tree != null) {
    GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
      public void run(){
        Shell shell=new Shell();
        MessageBox messageBox=new MessageBox(shell,SWT.CANCEL);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
      }
    }
);
    if (vaType == EVAType.CONTENT)     set.setClusteredTreeGenes(null);
 else     if (vaType == EVAType.STORAGE)     set.setClusteredTreeExps(null);
  }
  virtualArray.setGroupList(null);
  eventPublisher.triggerEvent(new ReplaceVirtualArrayEvent(vaType));
}",0.9810708491076258
58610,"@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta delta,String info){
  if (delta.getVAType() != contentVAType && delta.getVAType() != storageVAType)   return;
  SelectionManager selectionManager;
  if (delta.getIDType() == EIDType.EXPERIMENT_INDEX) {
    selectionManager=storageSelectionManager;
  }
 else   if (delta.getIDType() == EIDType.REFSEQ_MRNA_INT) {
    delta=DeltaConverter.convertDelta(EIDType.EXPRESSION_INDEX,delta);
    selectionManager=contentSelectionManager;
  }
 else   if (delta.getIDType() == EIDType.EXPRESSION_INDEX) {
    selectionManager=contentSelectionManager;
  }
 else   return;
  reactOnVAChanges(delta);
  selectionManager.setVADelta(delta);
  setDisplayListDirty();
}","@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta delta,String info){
  if (delta.getVAType() != contentVAType && delta.getVAType() != storageVAType)   return;
  if (delta.getVAType() == contentVAType) {
    contentVA.setGroupList(null);
  }
  if (delta.getVAType() == storageVAType) {
    storageVA.setGroupList(null);
  }
  SelectionManager selectionManager;
  if (delta.getIDType() == EIDType.EXPERIMENT_INDEX) {
    selectionManager=storageSelectionManager;
  }
 else   if (delta.getIDType() == EIDType.REFSEQ_MRNA_INT) {
    delta=DeltaConverter.convertDelta(EIDType.EXPRESSION_INDEX,delta);
    selectionManager=contentSelectionManager;
  }
 else   if (delta.getIDType() == EIDType.EXPRESSION_INDEX) {
    selectionManager=contentSelectionManager;
  }
 else   return;
  reactOnVAChanges(delta);
  selectionManager.setVADelta(delta);
  setDisplayListDirty();
}",0.8973717146433041
58611,"/** 
 * Function enables redraw of dendrogram, needed in case of viewfrustum changed and view is rendered remote.
 */
public void setRedrawDendrogram(){
  this.bRedrawDendrogram=true;
}","/** 
 * Function enables redraw of dendrogram, needed in case of viewfrustum changed and view is rendered remote.
 */
public void setRedrawDendrogram(){
  this.bRedrawDendrogram=true;
  setDisplayListDirty();
}",0.9367088607594936
58612,"/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
private void buildNewGroupList(){
  if (iAlClusterNodes.size() < 1) {
    groupList=new GroupList(iAlClusterNodes.size());
    Group temp=new Group(tree.getRoot().getNrElements(),false,0,ESelectionType.NORMAL,tree.getRoot());
    groupList.append(temp);
    if (bRenderGeneTree) {
      NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
      newGroupInfoEvent.setSender(this);
      newGroupInfoEvent.setEVAType(EVAType.CONTENT);
      newGroupInfoEvent.setGroupList(groupList);
      newGroupInfoEvent.setDeleteTree(false);
      eventPublisher.triggerEvent(newGroupInfoEvent);
    }
 else {
      NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
      newGroupInfoEvent.setSender(this);
      newGroupInfoEvent.setEVAType(EVAType.STORAGE);
      newGroupInfoEvent.setGroupList(groupList);
      newGroupInfoEvent.setDeleteTree(false);
      eventPublisher.triggerEvent(newGroupInfoEvent);
    }
    return;
  }
  groupList=new GroupList(iAlClusterNodes.size());
  bEnableDepthCheck=true;
  int cnt=0;
  int iExample=0;
  IVirtualArray currentVA=null;
  if (bRenderGeneTree) {
    currentVA=contentVA;
  }
 else {
    currentVA=storageVA;
  }
  for (  ClusterNode iter : iAlClusterNodes) {
    Group temp=new Group(iter.getNrElements(),false,currentVA.get(iExample),ESelectionType.NORMAL,iter);
    groupList.append(temp);
    cnt++;
    iExample+=iter.getNrElements();
  }
  if (bRenderGeneTree) {
    NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
    newGroupInfoEvent.setSender(this);
    newGroupInfoEvent.setEVAType(EVAType.CONTENT);
    newGroupInfoEvent.setGroupList(groupList);
    newGroupInfoEvent.setDeleteTree(false);
    eventPublisher.triggerEvent(newGroupInfoEvent);
  }
 else {
    NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
    newGroupInfoEvent.setSender(this);
    newGroupInfoEvent.setEVAType(EVAType.STORAGE);
    newGroupInfoEvent.setGroupList(groupList);
    newGroupInfoEvent.setDeleteTree(false);
    eventPublisher.triggerEvent(newGroupInfoEvent);
  }
}","/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
private void buildNewGroupList(){
  if (iAlClusterNodes.size() < 1) {
    groupList=new GroupList(iAlClusterNodes.size());
    Group temp=new Group(tree.getRoot().getNrElements(),false,0,ESelectionType.NORMAL,tree.getRoot());
    groupList.append(temp);
    if (bRenderGeneTree) {
      NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
      newGroupInfoEvent.setSender(this);
      newGroupInfoEvent.setEVAType(EVAType.CONTENT);
      newGroupInfoEvent.setGroupList(groupList);
      newGroupInfoEvent.setDeleteTree(false);
      eventPublisher.triggerEvent(newGroupInfoEvent);
    }
 else {
      NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
      newGroupInfoEvent.setSender(this);
      newGroupInfoEvent.setEVAType(EVAType.STORAGE);
      newGroupInfoEvent.setGroupList(groupList);
      newGroupInfoEvent.setDeleteTree(false);
      eventPublisher.triggerEvent(newGroupInfoEvent);
    }
    return;
  }
  groupList=new GroupList(iAlClusterNodes.size());
  bEnableDepthCheck=true;
  int cnt=0;
  int iExample=0;
  IVirtualArray currentVA=null;
  if (bRenderGeneTree) {
    currentVA=contentVA;
  }
 else {
    currentVA=storageVA;
  }
  for (  ClusterNode iter : iAlClusterNodes) {
    Group temp=new Group(iter.getNrElements(),false,currentVA.indexOf(iExample),ESelectionType.NORMAL,iter);
    groupList.append(temp);
    cnt++;
    iExample+=iter.getNrElements();
  }
  if (bRenderGeneTree) {
    NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
    newGroupInfoEvent.setSender(this);
    newGroupInfoEvent.setEVAType(EVAType.CONTENT);
    newGroupInfoEvent.setGroupList(groupList);
    newGroupInfoEvent.setDeleteTree(false);
    eventPublisher.triggerEvent(newGroupInfoEvent);
  }
 else {
    NewGroupInfoEvent newGroupInfoEvent=new NewGroupInfoEvent();
    newGroupInfoEvent.setSender(this);
    newGroupInfoEvent.setEVAType(EVAType.STORAGE);
    newGroupInfoEvent.setGroupList(groupList);
    newGroupInfoEvent.setDeleteTree(false);
    eventPublisher.triggerEvent(newGroupInfoEvent);
  }
}",0.9977406235878896
58613,"@Override public void append(Integer iNewElement){
  if (iNewElement < length) {
    virtualArray.add(iNewElement);
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}","@Override public void append(Integer iNewElement){
  if (iNewElement < length) {
    virtualArray.add(iNewElement);
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + iNewElement + ""String_Node_Str""+ ""String_Node_Str""+ length+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.8126232741617357
58614,"@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta vaDelta,String info){
  EIDCategory targetCategory=vaDelta.getIDType().getCategory();
  if (!(targetCategory == EIDCategory.EXPERIMENT || targetCategory == EIDCategory.GENE))   return;
  Integer vaID=mapVAIDs.get(vaDelta.getVAType());
  IVirtualArray va=set.getVA(vaID);
  va.setDelta(vaDelta);
}","@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta vaDelta,String info){
  EIDCategory targetCategory=vaDelta.getIDType().getCategory();
  if (!(targetCategory == EIDCategory.EXPERIMENT || targetCategory == EIDCategory.GENE))   return;
  Integer vaID=mapVAIDs.get(vaDelta.getVAType());
  if (targetCategory == EIDCategory.GENE && vaDelta.getIDType() != EIDType.EXPRESSION_INDEX)   vaDelta=DeltaConverter.convertDelta(EIDType.EXPRESSION_INDEX,vaDelta);
  IVirtualArray va=set.getVA(vaID);
  va.setDelta(vaDelta);
}",0.8134831460674158
58615,"@Override public void setSet(ISet set){
  if ((set.getSetType() == ESetType.GENE_EXPRESSION_DATA && useCaseMode == EDataDomain.GENETIC_DATA) || (set.getSetType() == ESetType.CLINICAL_DATA && useCaseMode == EDataDomain.CLINICAL_DATA) || (set.getSetType() == ESetType.UNSPECIFIED && useCaseMode == EDataDomain.GENERAL_DATA)) {
    oldSet=this.set;
    this.set=set;
    if (oldSet != null) {
      oldSet.destroy();
      oldSet=null;
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + set + ""String_Node_Str""+ this);
  }
}","@Override public void setSet(ISet set){
  assert(set != null);
  if ((set.getSetType() == ESetType.GENE_EXPRESSION_DATA && useCaseMode == EDataDomain.GENETIC_DATA) || (set.getSetType() == ESetType.CLINICAL_DATA && useCaseMode == EDataDomain.CLINICAL_DATA) || (set.getSetType() == ESetType.UNSPECIFIED && useCaseMode == EDataDomain.GENERAL_DATA)) {
    oldSet=this.set;
    this.set=set;
    if (oldSet != null) {
      oldSet.destroy();
      oldSet=null;
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + set + ""String_Node_Str""+ this);
  }
}",0.9792979297929792
58616,"@Override public void replaceVirtualArray(EIDCategory idCategory,EVAType vaType,IVirtualArray virtualArray){
  if (!possibleIDCategories.containsKey(idCategory))   return;
  Tree<ClusterNode> tree=null;
  if (vaType == EVAType.CONTENT)   tree=set.getClusteredTreeGenes();
 else   if (vaType == EVAType.STORAGE)   tree=set.getClusteredTreeExps();
  if (tree != null) {
    GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
      public void run(){
        Shell shell=new Shell();
        MessageBox messageBox=new MessageBox(shell,SWT.CANCEL);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
      }
    }
);
    if (vaType == EVAType.CONTENT)     set.setClusteredTreeGenes(null);
 else     if (vaType == EVAType.STORAGE)     set.setClusteredTreeExps(null);
  }
  virtualArray.setGroupList(null);
  eventPublisher.triggerEvent(new ReplaceVirtualArrayEvent(idCategory,vaType));
}","@Override public void replaceVirtualArray(EIDCategory idCategory,EVAType vaType,IVirtualArray virtualArray){
  if (!possibleIDCategories.containsKey(idCategory))   return;
  set.replaceVA(mapVAIDs.get(vaType),virtualArray.clone());
  Tree<ClusterNode> tree=null;
  if (vaType == EVAType.CONTENT)   tree=set.getClusteredTreeGenes();
 else   if (vaType == EVAType.STORAGE)   tree=set.getClusteredTreeExps();
  if (tree != null) {
    GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
      public void run(){
        Shell shell=new Shell();
        MessageBox messageBox=new MessageBox(shell,SWT.CANCEL);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
      }
    }
);
    if (vaType == EVAType.CONTENT)     set.setClusteredTreeGenes(null);
 else     if (vaType == EVAType.STORAGE)     set.setClusteredTreeExps(null);
  }
  virtualArray.setGroupList(null);
  eventPublisher.triggerEvent(new ReplaceVirtualArrayEvent(idCategory,vaType));
}",0.9702675916749256
58617,"@Override public void draw(GL gl,boolean bHighlight){
  if (bHighlight) {
    gl.glColor4fv(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_COLORSHEME_HL,0);
    gl.glLineWidth(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_THICKNESS_HL);
  }
 else {
    gl.glColor4fv(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_COLORSHEME,0);
    gl.glLineWidth(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_THICKNESS);
  }
  Vec3f[] endPoints=findClosestCorrespondendingPoints();
  Vec3f pStartP=endPoints[0];
  Vec3f pEndP=endPoints[1];
  Vec2f v2Start=new Vec2f(pStartP.x(),pStartP.y());
  Vec2f v2End=new Vec2f(pEndP.x(),pEndP.y());
  float alpha=(float)Math.acos((v2Start.x() * v2End.x() + v2Start.y() * v2End.y()) / (v2Start.length() * v2End.length()));
  if (v2Start.x() > fvHTCenterpoint.x())   if (v2Start.y() > v2End.y())   alpha=alpha * -1.0f;
 else   ;
 else   if (v2Start.y() < v2End.y())   alpha=alpha * -1.0f;
 else   ;
  Vec3f vSE=new Vec3f(pEndP.x() - pStartP.x(),pEndP.y() - pStartP.y(),pEndP.z() - pStartP.z());
  Vec3f pSpP1=new Vec3f(pStartP.x() + vSE.x() / 2.0f,pStartP.y() + vSE.y() / 2.0f,pStartP.z() + vSE.z() / 2.0f);
  Vec3f pSpP2=new Vec3f((float)(pSpP1.x() + Math.sin(alpha)),(float)(pSpP1.y() + Math.sin(alpha)),pSpP1.z());
  FloatBuffer fBuff;
  fBuff=FloatBuffer.allocate(3 * 3);
  if (Math.abs(alpha) < 2 * Math.PI / 180.0f) {
    float[] fA={pStartP.x(),pStartP.y(),pStartP.z(),pSpP1.x(),pSpP1.y(),pSpP1.z(),pEndP.x(),pEndP.y(),pEndP.z()};
    fBuff.put(fA);
  }
 else {
    float[] fA={pStartP.x(),pStartP.y(),pStartP.z(),pSpP2.x(),pSpP2.y(),pSpP2.z(),pEndP.x(),pEndP.y(),pEndP.z()};
    fBuff.put(fA);
  }
  fBuff.rewind();
  gl.glEnable(GL.GL_MAP1_VERTEX_3);
  gl.glMap1f(GL.GL_MAP1_VERTEX_3,0.0f,1.0f,3,3,fBuff);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i <= HyperbolicRenderStyle.DA_SPLINE_CONNECTION_NR_CTRLPOINTS; i++)   gl.glEvalCoord1f((float)i / (float)HyperbolicRenderStyle.DA_SPLINE_CONNECTION_NR_CTRLPOINTS);
  gl.glEnd();
}","@Override public void draw(GL gl,boolean bHighlight){
  if (bHighlight) {
    gl.glColor4fv(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_COLORSHEME_HL,0);
    gl.glLineWidth(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_THICKNESS_HL);
  }
 else {
    gl.glColor4fv(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_COLORSHEME,0);
    gl.glLineWidth(HyperbolicRenderStyle.DA_HB_GEOM_CONNECTION_THICKNESS);
  }
  Vec3f[] endPoints=findClosestCorrespondendingPoints();
  Vec3f pStartP=endPoints[0];
  Vec3f pEndP=endPoints[1];
  Vec3f vSE=new Vec3f(pEndP.x() - pStartP.x(),pEndP.y() - pStartP.y(),pEndP.z() - pStartP.z());
  Vec3f pSpP1=new Vec3f(pStartP.x() + vSE.x() / 2.0f,pStartP.y() + vSE.y() / 2.0f,pStartP.z() + vSE.z() / 2.0f);
  Vec2f v2Start=new Vec2f(pStartP.x(),pStartP.y());
  Vec2f v2End=new Vec2f(pEndP.x(),pEndP.y());
  FloatBuffer fBuff;
  fBuff=FloatBuffer.allocate(3 * 3);
  float[] fA={pStartP.x(),pStartP.y(),pStartP.z(),pSpP1.x(),pSpP1.y(),pSpP1.z(),pEndP.x(),pEndP.y(),pEndP.z()};
  fBuff.put(fA);
  fBuff.rewind();
  gl.glEnable(GL.GL_MAP1_VERTEX_3);
  gl.glMap1f(GL.GL_MAP1_VERTEX_3,0.0f,1.0f,3,3,fBuff);
  gl.glBegin(GL.GL_LINE_STRIP);
  for (int i=0; i <= HyperbolicRenderStyle.DA_SPLINE_CONNECTION_NR_CTRLPOINTS; i++)   gl.glEvalCoord1f((float)i / (float)HyperbolicRenderStyle.DA_SPLINE_CONNECTION_NR_CTRLPOINTS);
  gl.glEnd();
}",0.6329190663837526
58618,"public float calculateRecursiveLayout(IDrawAbleNode node,float fRadius,float fParentAngle,float fLayer,float fNodeSize,float fXCoordOfParent,float fYCoordOfParent){
  if (fLayer <= fDepth) {
    float fNumberOfNodesInNewLayer=tree.getNumberOfElementsInLayer((int)fLayer);
    if (tree.hasChildren(node)) {
      ArrayList<IDrawAbleNode> childsOfCurrentNode=new ArrayList<IDrawAbleNode>();
      childsOfCurrentNode=tree.getChildren(node);
      float fDeltaRadius=fRadius;
      float fChildSpace=(fDeltaRadius * (float)Math.PI) / (childsOfCurrentNode.size() + 1);
      float fNumberOfChildsOfNode=childsOfCurrentNode.size();
      float fChildCount=0.0f;
      float fChildAngle=0.0f;
      for (      IDrawAbleNode tmpChild : childsOfCurrentNode) {
        fChildCount++;
        fChildAngle=calculateChildAngle(fParentAngle,fChildSpace,fDeltaRadius,fChildCount);
        float fRealChildAngle=fParentAngle - ((fChildAngle * (fNumberOfChildsOfNode - 1)) / 2) + fChildAngle * (fChildCount - 1);
        calcualteChildPosition(fDeltaRadius,fRealChildAngle,fChildCount,fXCoordOfParent,fYCoordOfParent);
        float fXCoord=getFXCoord();
        float fYCoord=getFYCoord();
{
          float fLayerOfBranch=calculateRecursiveLayout(tmpChild,fDeltaRadius,fRealChildAngle,fLayer + 1,fNodeSize,fXCoord,fYCoord);
          fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer);
          tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
          DrawAbleHyperbolicGeometryGlobeProjection p=new DrawAbleHyperbolicGeometryGlobeProjection(node,tmpChild,fvViewCenterPoint,fHeight / 2);
          if (bHyperbolicFlag) {
            Vec3f tmpLinPointCoord=new Vec3f();
            Vec3f projectedPointCoord=new Vec3f();
            tmpLinPointCoord.set(fXCoord,fYCoord,0.0f);
            projectedPointCoord=treeProjector.projectCoordinates(tmpLinPointCoord);
            placeNode(tmpChild,projectedPointCoord.x(),projectedPointCoord.y(),projectedPointCoord.z(),fNodeSize,fNodeSize);
          }
 else           placeNode(tmpChild,fXCoord,fYCoord,0.0f,fNodeSize,fNodeSize);
          placeConnection(new DrawAbleHyperbolicGeometryConnection(node,tmpChild,fvViewCenterPoint,fViewRadius));
        }
      }
    }
  }
  return fLayer;
}","public float calculateRecursiveLayout(IDrawAbleNode node,float fRadius,float fParentAngle,float fLayer,float fNodeSize,float fXCoordOfParent,float fYCoordOfParent){
  if (fLayer <= fDepth) {
    float fNumberOfNodesInNewLayer=tree.getNumberOfElementsInLayer((int)fLayer);
    if (tree.hasChildren(node)) {
      ArrayList<IDrawAbleNode> childsOfCurrentNode=new ArrayList<IDrawAbleNode>();
      childsOfCurrentNode=tree.getChildren(node);
      float fDeltaRadius=fRadius;
      float fChildSpace=(fDeltaRadius * (float)Math.PI) / (childsOfCurrentNode.size() + 1);
      float fNumberOfChildsOfNode=childsOfCurrentNode.size();
      float fChildCount=0.0f;
      float fChildAngle=0.0f;
      for (      IDrawAbleNode tmpChild : childsOfCurrentNode) {
        fChildCount++;
        fChildAngle=calculateChildAngle(fParentAngle,fChildSpace,fDeltaRadius,fChildCount);
        float fRealChildAngle=fParentAngle - ((fChildAngle * (fNumberOfChildsOfNode - 1)) / 2) + fChildAngle * (fChildCount - 1);
        calcualteChildPosition(fDeltaRadius,fRealChildAngle,fChildCount,fXCoordOfParent,fYCoordOfParent);
        float fXCoord=getFXCoord();
        float fYCoord=getFYCoord();
{
          float fLayerOfBranch=calculateRecursiveLayout(tmpChild,fDeltaRadius,fRealChildAngle,fLayer + 1,fNodeSize,fXCoord,fYCoord);
          fNodeSize=HyperbolicRenderStyle.MAX_NODE_SIZE * (float)Math.pow(HyperbolicRenderStyle.NODE_SCALING_PER_LAYER,fLayer);
          tmpChild.setDetailLevel(EDrawAbleNodeDetailLevel.Low);
          ITreeProjection p=new HyperbolicGlobeProjection(1,fHeight,fWidth,1.0f,fViewSpaceX,fViewSpaceXAbs,fViewSpaceY,fViewSpaceYAbs);
          if (bHyperbolicFlag) {
            Vec3f tmpLinPointCoord=new Vec3f();
            Vec3f projectedPointCoord=new Vec3f();
            tmpLinPointCoord.set(fXCoord,fYCoord,0.0f);
            projectedPointCoord=treeProjector.projectCoordinates(tmpLinPointCoord);
            placeNode(tmpChild,projectedPointCoord.x(),projectedPointCoord.y(),projectedPointCoord.z(),fNodeSize,fNodeSize);
          }
 else           placeNode(tmpChild,fXCoord,fYCoord,0.0f,fNodeSize,fNodeSize);
          placeConnection(new DrawAbleHyperbolicGeometryConnection(node,tmpChild,fvViewCenterPoint,fViewRadius));
        }
      }
    }
  }
  return fLayer;
}",0.9580969009166302
58619,"@Override protected void initLists(){
  if (contentVAType != EVAType.CONTENT_EMBEDDED_HM) {
    if (bRenderOnlyContext)     contentVAType=EVAType.CONTENT_CONTEXT;
 else     contentVAType=EVAType.CONTENT;
  }
  contentVA=useCase.getVA(contentVAType);
  storageVA=useCase.getVA(storageVAType);
  contentSelectionManager.setVA(contentVA);
  storageSelectionManager.setVA(storageVA);
  int iNumberOfColumns=contentVA.size();
  int iNumberOfRows=storageVA.size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(storageVA.get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(contentVA.get(iColumnCount));
  }
  renderStyle=new HeatMapRenderStyle(this,viewFrustum);
  if (getRemoteRenderingGLCanvas() == null)   renderStyle.disableFishEye();
  vecTranslation=new Vec3f(0,renderStyle.getYCenter() * 2,0);
}","@Override protected void initLists(){
  if (contentVAType != EVAType.CONTENT_EMBEDDED_HM) {
    if (bRenderOnlyContext)     contentVAType=EVAType.CONTENT_CONTEXT;
 else     contentVAType=EVAType.CONTENT;
  }
  contentVA=useCase.getVA(contentVAType);
  storageVA=useCase.getVA(storageVAType);
  contentSelectionManager.setVA(contentVA);
  storageSelectionManager.setVA(storageVA);
  int iNumberOfColumns=contentVA.size();
  int iNumberOfRows=storageVA.size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(storageVA.get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(contentVA.get(iColumnCount));
  }
  renderStyle=new HeatMapRenderStyle(this,viewFrustum);
  if (getRemoteRenderingGLCanvas() instanceof GLHierarchicalHeatMap)   renderStyle.disableFishEye();
  vecTranslation=new Vec3f(0,renderStyle.getYCenter() * 2,0);
}",0.9795490298898794
58620,"@Override protected void reactOnVAChanges(IVirtualArrayDelta delta){
  glHeatMapView.handleVirtualArrayUpdate(delta,getShortInfo());
  bRedrawTextures=true;
  setDisplayListDirty();
}","@Override protected void reactOnVAChanges(IVirtualArrayDelta delta){
  if (delta.getVAType() == contentVAType)   contentVA.setGroupList(null);
  if (delta.getVAType() == storageVAType)   storageVA.setGroupList(null);
  glHeatMapView.handleVirtualArrayUpdate(delta,getShortInfo());
  bRedrawTextures=true;
  setDisplayListDirty();
}",0.7120622568093385
58621,"public void saveSelection(){
  polylineSelectionManager.removeElements(ESelectionType.DESELECTED);
  clearAllSelections();
  setDisplayListDirty();
  ReplaceVirtualArrayInUseCaseEvent event=new ReplaceVirtualArrayInUseCaseEvent(ePolylineDataType.getCategory(),polylineVAType,(VirtualArray)polylineVA);
  event.setSender(this);
  eventPublisher.triggerEvent(event);
}","public void saveSelection(){
  polylineSelectionManager.removeElements(ESelectionType.DESELECTED);
  clearAllSelections();
  setDisplayListDirty();
  polylineVA.setGroupList(null);
  ReplaceVirtualArrayInUseCaseEvent event=new ReplaceVirtualArrayInUseCaseEvent(ePolylineDataType.getCategory(),polylineVAType,(VirtualArray)polylineVA);
  event.setSender(this);
  eventPublisher.triggerEvent(event);
}",0.9568627450980391
58622,"private void valueChangedFloat(Text text,boolean bGeneFactor){
  if (!text.isFocusControl())   return;
  float temp=0;
  try {
    temp=Float.parseFloat(text.getText());
    if (temp >= 1f && temp < 10) {
      if (bGeneFactor == true)       fclusterFactorGenes=temp;
 else       fclusterFactorExperiments=temp;
    }
 else {
      Shell shell=new Shell();
      MessageBox messageBox=new MessageBox(shell,SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"");
      messageBox.open();
    }
  }
 catch (  NumberFormatException e) {
    System.out.println(""String_Node_Str"");
  }
}","private void valueChangedFloat(Text text,boolean bGeneFactor){
  if (!text.isFocusControl())   return;
  float temp=0;
  try {
    temp=Float.parseFloat(text.getText());
    if (temp >= 1f && temp <= 10) {
      if (bGeneFactor == true)       fclusterFactorGenes=temp;
 else       fclusterFactorExperiments=temp;
    }
 else {
      Shell shell=new Shell();
      MessageBox messageBox=new MessageBox(shell,SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"");
      messageBox.open();
    }
  }
 catch (  NumberFormatException e) {
    System.out.println(""String_Node_Str"");
  }
}",0.9992044550517104
58623,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHyperbolic(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HYPERBOLIC;
  colorMappingManager=ColorMappingManager.get();
  renderStyle=new HyperbolicRenderStyle(viewFrustum);
  tree=buildTestTree(HyperbolicRenderStyle.MAX_DEPTH,20);
  System.out.println(tree.getGraph().toString());
  layouter=new HTLayouter(viewFrustum,pickingManager,iUniqueID);
  layouter.setTree(tree);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHyperbolic(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HYPERBOLIC;
  colorMappingManager=ColorMappingManager.get();
  renderStyle=new HyperbolicRenderStyle(viewFrustum);
  tree=buildTestTree(7,6);
  System.out.println(tree.getGraph().toString());
  layouter=new HTLayouter(viewFrustum,pickingManager,iUniqueID);
  layouter.setTree(tree);
}",0.9667565139263252
58624,"/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleDragging(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fWidth=viewFrustum.getWidth() - 0.1f;
  float fHeight=viewFrustum.getHeight();
  if (bRenderGeneTree) {
    if (fArTargetWorldCoordinates[0] > -0.1f && fArTargetWorldCoordinates[0] < fWidth)     fPosCut=fArTargetWorldCoordinates[0] - 0.0f;
  }
 else {
    if (fArTargetWorldCoordinates[1] > -0.1f && fArTargetWorldCoordinates[1] < fHeight)     fPosCut=fArTargetWorldCoordinates[1] + 0.0f;
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActive=false;
    determineSelectedNodes();
  }
}","/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleDragging(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fWidth=viewFrustum.getWidth() - 0.1f;
  float fHeight=viewFrustum.getHeight();
  if (bRenderGeneTree) {
    if (fArTargetWorldCoordinates[0] > -0.1f && fArTargetWorldCoordinates[0] < fWidth)     fPosCut=fArTargetWorldCoordinates[0] - fLevelWidth;
  }
 else {
    if (fArTargetWorldCoordinates[1] > -0.1f && fArTargetWorldCoordinates[1] < fHeight)     fPosCut=fArTargetWorldCoordinates[1] + fLevelHeight;
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActive=false;
    determineSelectedNodes();
  }
}",0.9827873403664632
58625,"/** 
 * Render the handles for the ""cut off value""
 * @param gl
 */
private void renderCut(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fWidth=viewFrustum.getWidth();
  float fWidthCutOf=renderStyle.getWidthCutOff();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.DENDROGRAM_CUT_SELECTION,1));
  if (bRenderGeneTree) {
    gl.glColor4fv(CUT_OFF_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(fPosCut,0,CUT_OFF_Z);
    gl.glVertex3f(fPosCut,fHeight,CUT_OFF_Z);
    gl.glVertex3f(fPosCut + fWidthCutOf,fHeight,CUT_OFF_Z);
    gl.glVertex3f(fPosCut + fWidthCutOf,0,CUT_OFF_Z);
    gl.glEnd();
    Vec3f lowerLeftCorner=new Vec3f();
    Vec3f lowerRightCorner=new Vec3f();
    Vec3f upperRightCorner=new Vec3f();
    Vec3f upperLeftCorner=new Vec3f();
    Vec3f scalingPivot=new Vec3f();
    lowerLeftCorner.set(fWidthCutOf / 2 + fPosCut - 0.05f,-0.16f,AXIS_Z);
    lowerRightCorner.set(fWidthCutOf / 2 + fPosCut + 0.05f,-0.16f,AXIS_Z);
    upperRightCorner.set(fWidthCutOf / 2 + fPosCut + 0.05f,0.04f,AXIS_Z);
    upperLeftCorner.set(fWidthCutOf / 2 + fPosCut - 0.05f,0.04f,AXIS_Z);
    scalingPivot.set(fWidthCutOf / 2 + fPosCut,-0.06f,AXIS_Z + 0.005f);
    textureManager.renderGUITexture(gl,EIconTextures.SMALL_DROP,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
  }
 else {
    gl.glColor4fv(CUT_OFF_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,fPosCut,CUT_OFF_Z);
    gl.glVertex3f(fWidth,fPosCut,CUT_OFF_Z);
    gl.glVertex3f(fWidth,fPosCut + fWidthCutOf,CUT_OFF_Z);
    gl.glVertex3f(0,fPosCut + fWidthCutOf,CUT_OFF_Z);
    gl.glEnd();
    Vec3f lowerLeftCorner=new Vec3f();
    Vec3f lowerRightCorner=new Vec3f();
    Vec3f upperRightCorner=new Vec3f();
    Vec3f upperLeftCorner=new Vec3f();
    Vec3f scalingPivot=new Vec3f();
    lowerLeftCorner.set(-0.16f,fWidthCutOf / 2 + fPosCut + 0.05f,AXIS_Z);
    lowerRightCorner.set(0.04f,fWidthCutOf / 2 + fPosCut + 0.05f,AXIS_Z);
    upperRightCorner.set(0.04f,fWidthCutOf / 2 + fPosCut - 0.05f,AXIS_Z);
    upperLeftCorner.set(-0.16f,fWidthCutOf / 2 + fPosCut - 0.05f,AXIS_Z);
    scalingPivot.set(-0.06f,fWidthCutOf / 2 + fPosCut,AXIS_Z + 0.005f);
    textureManager.renderGUITexture(gl,EIconTextures.SMALL_DROP_ROTATED,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
  }
  gl.glPopName();
}","/** 
 * Render the handles for the ""cut off value""
 * @param gl
 */
private void renderCut(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fWidth=viewFrustum.getWidth();
  float fWidthCutOf=renderStyle.getWidthCutOff();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.DENDROGRAM_CUT_SELECTION,1));
  if (bRenderGeneTree) {
    gl.glTranslatef(+fLevelWidth,0,0);
    gl.glColor4fv(CUT_OFF_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(fPosCut,0,CUT_OFF_Z);
    gl.glVertex3f(fPosCut,fHeight,CUT_OFF_Z);
    gl.glVertex3f(fPosCut + fWidthCutOf,fHeight,CUT_OFF_Z);
    gl.glVertex3f(fPosCut + fWidthCutOf,0,CUT_OFF_Z);
    gl.glEnd();
    Vec3f lowerLeftCorner=new Vec3f();
    Vec3f lowerRightCorner=new Vec3f();
    Vec3f upperRightCorner=new Vec3f();
    Vec3f upperLeftCorner=new Vec3f();
    Vec3f scalingPivot=new Vec3f();
    lowerLeftCorner.set(fWidthCutOf / 2 + fPosCut - 0.05f,-0.16f,AXIS_Z);
    lowerRightCorner.set(fWidthCutOf / 2 + fPosCut + 0.05f,-0.16f,AXIS_Z);
    upperRightCorner.set(fWidthCutOf / 2 + fPosCut + 0.05f,0.04f,AXIS_Z);
    upperLeftCorner.set(fWidthCutOf / 2 + fPosCut - 0.05f,0.04f,AXIS_Z);
    scalingPivot.set(fWidthCutOf / 2 + fPosCut,-0.06f,AXIS_Z + 0.005f);
    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
    textureManager.renderGUITexture(gl,EIconTextures.SMALL_DROP,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
    gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
    gl.glTranslatef(-fLevelWidth,0,0);
  }
 else {
    gl.glTranslatef(0,-fLevelHeight,0);
    gl.glColor4fv(CUT_OFF_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(0,fPosCut,CUT_OFF_Z);
    gl.glVertex3f(fWidth,fPosCut,CUT_OFF_Z);
    gl.glVertex3f(fWidth,fPosCut + fWidthCutOf,CUT_OFF_Z);
    gl.glVertex3f(0,fPosCut + fWidthCutOf,CUT_OFF_Z);
    gl.glEnd();
    Vec3f lowerLeftCorner=new Vec3f();
    Vec3f lowerRightCorner=new Vec3f();
    Vec3f upperRightCorner=new Vec3f();
    Vec3f upperLeftCorner=new Vec3f();
    Vec3f scalingPivot=new Vec3f();
    lowerLeftCorner.set(-0.16f,fWidthCutOf / 2 + fPosCut + 0.05f,AXIS_Z);
    lowerRightCorner.set(0.04f,fWidthCutOf / 2 + fPosCut + 0.05f,AXIS_Z);
    upperRightCorner.set(0.04f,fWidthCutOf / 2 + fPosCut - 0.05f,AXIS_Z);
    upperLeftCorner.set(-0.16f,fWidthCutOf / 2 + fPosCut - 0.05f,AXIS_Z);
    scalingPivot.set(-0.06f,fWidthCutOf / 2 + fPosCut,AXIS_Z + 0.005f);
    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
    textureManager.renderGUITexture(gl,EIconTextures.SMALL_DROP_ROTATED,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,80);
    gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
    gl.glTranslatef(0,+fLevelHeight,0);
  }
  gl.glPopName();
}",0.9233140655105972
58626,"/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
private void buildNewGroupList(){
  if (iAlClusterNodes.size() < 2) {
    groupList=null;
    if (bRenderGeneTree) {
      useCase.getSet().setGroupListGenes(groupList);
      useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
    }
 else {
      useCase.getSet().setGroupListExperiments(groupList);
      useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
    }
    bRedrawDendrogram=true;
    bEnableDepthCheck=false;
    setDisplayListDirty();
    return;
  }
  groupList=new GroupList(iAlClusterNodes.size());
  bEnableDepthCheck=true;
  int cnt=0;
  int iExample=0;
  IVirtualArray currentVA=null;
  if (bRenderGeneTree) {
    currentVA=contentVA;
  }
 else {
    currentVA=storageVA;
  }
  for (  ClusterNode iter : iAlClusterNodes) {
    Group temp=new Group(iter.getNrElements(),false,currentVA.get(iExample),ESelectionType.NORMAL,iter);
    groupList.append(temp);
    cnt++;
    iExample+=iter.getNrElements();
  }
  if (bRenderGeneTree) {
    useCase.getSet().setGroupListGenes(groupList);
    useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
  }
 else {
    useCase.getSet().setGroupListExperiments(groupList);
    useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
  }
}","/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
private void buildNewGroupList(){
  if (iAlClusterNodes.size() < 1) {
    groupList=new GroupList(iAlClusterNodes.size());
    Group temp=new Group(tree.getRoot().getNrElements(),false,0,ESelectionType.NORMAL,tree.getRoot());
    groupList.append(temp);
    if (bRenderGeneTree) {
      useCase.getSet().setGroupListGenes(groupList);
      useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
    }
 else {
      useCase.getSet().setGroupListExperiments(groupList);
      useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
    }
    return;
  }
  groupList=new GroupList(iAlClusterNodes.size());
  bEnableDepthCheck=true;
  int cnt=0;
  int iExample=0;
  IVirtualArray currentVA=null;
  if (bRenderGeneTree) {
    currentVA=contentVA;
  }
 else {
    currentVA=storageVA;
  }
  for (  ClusterNode iter : iAlClusterNodes) {
    Group temp=new Group(iter.getNrElements(),false,currentVA.get(iExample),ESelectionType.NORMAL,iter);
    groupList.append(temp);
    cnt++;
    iExample+=iter.getNrElements();
  }
  if (bRenderGeneTree) {
    useCase.getSet().setGroupListGenes(groupList);
    useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
  }
 else {
    useCase.getSet().setGroupListExperiments(groupList);
    useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
  }
}",0.9097956307258632
58627,"/** 
 * Function calculates for each node (gene or entity) in the dendrogram recursive the corresponding position inside the view frustum
 * @param currentNode current node for calculation
 * @return Vec3f position of the current node
 */
private Vec3f determinePosRecGenes(ClusterNode currentNode){
  Vec3f pos=new Vec3f();
  if (tree.hasChildren(currentNode)) {
    ArrayList<ClusterNode> alChilds=tree.getChildren(currentNode);
    int iNrChildsNode=alChilds.size();
    Vec3f[] positions=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode node=(ClusterNode)alChilds.get(i);
      positions[i]=determinePosRecGenes(node);
    }
    float fXmin=Float.MAX_VALUE;
    float fYmax=Float.MIN_VALUE;
    float fYmin=Float.MAX_VALUE;
    for (    Vec3f vec : positions) {
      fXmin=Math.min(fXmin,vec.x());
      fYmax=Math.max(fYmax,vec.y());
      fYmin=Math.min(fYmin,vec.y());
    }
    pos.setX(fXmin - fLevelWidth);
    pos.setY(fYmin + (fYmax - fYmin) / 2);
    pos.setZ(DENDROGRAM_Z);
  }
 else {
    pos.setY(yPosInit);
    yPosInit-=fSampleHeight;
    pos.setX(xGlobalMax - fLevelWidth);
    pos.setZ(DENDROGRAM_Z);
  }
  currentNode.setPos(pos);
  return pos;
}","/** 
 * Function calculates for each node (gene or entity) in the dendrogram recursive the corresponding position inside the view frustum
 * @param currentNode current node for calculation
 * @return Vec3f position of the current node
 */
private Vec3f determinePosRecGenes(ClusterNode currentNode){
  Vec3f pos=new Vec3f();
  if (tree.hasChildren(currentNode)) {
    ArrayList<ClusterNode> alChilds=tree.getChildren(currentNode);
    int iNrChildsNode=alChilds.size();
    Vec3f[] positions=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode node=(ClusterNode)alChilds.get(i);
      positions[i]=determinePosRecGenes(node);
    }
    float fXmin=Float.MAX_VALUE;
    float fYmax=Float.MIN_VALUE;
    float fYmin=Float.MAX_VALUE;
    for (    Vec3f vec : positions) {
      fXmin=Math.min(fXmin,vec.x());
      fYmax=Math.max(fYmax,vec.y());
      fYmin=Math.min(fYmin,vec.y());
    }
    float fCoeff=currentNode.getCoefficient();
    pos.setX(fXmin - fLevelWidth * (1 - fCoeff));
    pos.setY(fYmin + (fYmax - fYmin) / 2);
    pos.setZ(DENDROGRAM_Z);
  }
 else {
    float fCoeff=currentNode.getCoefficient();
    pos.setY(yPosInit);
    yPosInit-=fSampleHeight;
    pos.setX(xGlobalMax - fLevelWidth * (1 - fCoeff));
    pos.setZ(DENDROGRAM_Z);
  }
  currentNode.setPos(pos);
  return pos;
}",0.951142631993696
58628,"/** 
 * Function calculates for each node (experiment) in the dendrogram recursive the corresponding position inside the view frustum
 * @param currentNode current node for calculation
 * @return Vec3f position of the current node
 */
private Vec3f determinePosRecExperiments(ClusterNode currentNode){
  Vec3f pos=new Vec3f();
  if (tree.hasChildren(currentNode)) {
    ArrayList<ClusterNode> alChilds=tree.getChildren(currentNode);
    int iNrChildsNode=alChilds.size();
    Vec3f[] positions=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode node=(ClusterNode)alChilds.get(i);
      positions[i]=determinePosRecExperiments(node);
    }
    float fXmax=Float.MIN_VALUE;
    float fXmin=Float.MAX_VALUE;
    float fYmax=Float.MIN_VALUE;
    float fYmin=Float.MAX_VALUE;
    for (    Vec3f vec : positions) {
      fXmax=Math.max(fXmax,vec.x());
      fXmin=Math.min(fXmin,vec.x());
      fYmax=Math.max(fYmax,vec.y());
      fYmin=Math.min(fYmin,vec.y());
    }
    pos.setX(fXmin + (fXmax - fXmin) / 2);
    pos.setY(fYmax + fLevelHeight);
    pos.setZ(DENDROGRAM_Z);
  }
 else {
    pos.setX(xPosInit);
    xPosInit+=fSampleWidth;
    pos.setY(yGlobalMin + fLevelHeight);
    pos.setZ(DENDROGRAM_Z);
  }
  currentNode.setPos(pos);
  return pos;
}","/** 
 * Function calculates for each node (experiment) in the dendrogram recursive the corresponding position inside the view frustum
 * @param currentNode current node for calculation
 * @return Vec3f position of the current node
 */
private Vec3f determinePosRecExperiments(ClusterNode currentNode){
  Vec3f pos=new Vec3f();
  if (tree.hasChildren(currentNode)) {
    ArrayList<ClusterNode> alChilds=tree.getChildren(currentNode);
    int iNrChildsNode=alChilds.size();
    Vec3f[] positions=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode node=(ClusterNode)alChilds.get(i);
      positions[i]=determinePosRecExperiments(node);
    }
    float fXmax=Float.MIN_VALUE;
    float fXmin=Float.MAX_VALUE;
    float fYmax=Float.MIN_VALUE;
    float fYmin=Float.MAX_VALUE;
    for (    Vec3f vec : positions) {
      fXmax=Math.max(fXmax,vec.x());
      fXmin=Math.min(fXmin,vec.x());
      fYmax=Math.max(fYmax,vec.y());
      fYmin=Math.min(fYmin,vec.y());
    }
    float fCoeff=currentNode.getCoefficient();
    pos.setX(fXmin + (fXmax - fXmin) / 2);
    pos.setY(fYmax + fLevelHeight * (1 - fCoeff));
    pos.setZ(DENDROGRAM_Z);
  }
 else {
    float fCoeff=currentNode.getCoefficient();
    pos.setX(xPosInit);
    xPosInit+=fSampleWidth;
    pos.setY(yGlobalMin + fLevelHeight * (1 - fCoeff));
    pos.setZ(DENDROGRAM_Z);
  }
  currentNode.setPos(pos);
  return pos;
}",0.9540059347181008
58629,"@Override public void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursorLevel1();
  if (bSkipLevel2 == false) {
    initPosCursorLevel2();
  }
  glHeatMapView.setSet(set);
  glHeatMapView.setContentVAType(EVAType.CONTENT_EMBEDDED_HM);
  glHeatMapView.initData();
  if (set.getClusteredTreeGenes() != null) {
    bGeneDendrogramActive=true;
  }
  if (set.getClusteredTreeExps() != null) {
    bExperimentDendrogramActive=true;
  }
  glGeneDendrogramView.setSet(set);
  glGeneDendrogramView.setContentVAType(EVAType.CONTENT);
  glGeneDendrogramView.initData();
  glGeneDendrogramView.setRenderUntilCut(false);
  glExperimentDendrogramView.setSet(set);
  glExperimentDendrogramView.setContentVAType(EVAType.CONTENT);
  glExperimentDendrogramView.initData();
  glExperimentDendrogramView.setRenderUntilCut(false);
  if (bSkipLevel2 == false)   bRedrawTextures=true;
}","@Override public void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursorLevel1();
  if (bSkipLevel2 == false) {
    initPosCursorLevel2();
  }
  glHeatMapView.setSet(set);
  glHeatMapView.setContentVAType(EVAType.CONTENT_EMBEDDED_HM);
  glHeatMapView.initData();
  if (set.getClusteredTreeGenes() == null) {
    bGeneDendrogramActive=false;
    bGeneDendrogramRenderCut=false;
  }
  if (set.getClusteredTreeExps() == null) {
    bExperimentDendrogramActive=false;
    bExperimentDendrogramRenderCut=false;
  }
  glGeneDendrogramView.setSet(set);
  glGeneDendrogramView.setContentVAType(EVAType.CONTENT);
  glGeneDendrogramView.initData();
  glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
  glExperimentDendrogramView.setSet(set);
  glExperimentDendrogramView.setContentVAType(EVAType.CONTENT);
  glExperimentDendrogramView.initData();
  glExperimentDendrogramView.setRenderUntilCut(bExperimentDendrogramRenderCut);
  if (bSkipLevel2 == false)   bRedrawTextures=true;
}",0.91701244813278
58630,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    glGeneDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4fv(BACKGROUND_COLOR,0);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.1f,0.4f,0);
  setEmbeddedHeatMapData();
  if (bSkipLevel1 == false && bSkipLevel2 == false) {
    renderViewsLevel_1_2_3_Active(gl);
  }
 else   if (bSkipLevel1 == true && bSkipLevel2 == false) {
    renderViewsLevel_2_3_Active(gl);
  }
 else   if (bSkipLevel1 == true && bSkipLevel2 == true) {
    renderViewsLevel_3_Active(gl);
  }
 else {
    throw new IllegalStateException();
  }
  gl.glTranslatef(-0.1f,-0.4f,0);
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    glGeneDendrogramView.setRedrawDendrogram();
    glGeneDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.setRedrawDendrogram();
    glExperimentDendrogramView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4fv(BACKGROUND_COLOR,0);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.1f,0.4f,0);
  setEmbeddedHeatMapData();
  if (bSkipLevel1 == false && bSkipLevel2 == false) {
    renderViewsLevel_1_2_3_Active(gl);
  }
 else   if (bSkipLevel1 == true && bSkipLevel2 == false) {
    renderViewsLevel_2_3_Active(gl);
  }
 else   if (bSkipLevel1 == true && bSkipLevel2 == true) {
    renderViewsLevel_3_Active(gl);
  }
 else {
    throw new IllegalStateException();
  }
  gl.glTranslatef(-0.1f,-0.4f,0);
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glEndList();
}",0.9649243466299864
58631,"/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
private void buildNewGroupList(){
  if (iAlClusterNodes.size() < 2) {
    groupList=null;
    if (bRenderGeneTree) {
      useCase.getSet().setGroupListGenes(groupList);
    }
 else {
      useCase.getSet().setGroupListExperiments(groupList);
    }
    eventPublisher.triggerEvent(new ReplaceVirtualArrayEvent(EVAType.CONTENT));
    bRedrawDendrogram=true;
    bEnableDepthCheck=false;
    setDisplayListDirty();
    return;
  }
  groupList=new GroupList(iAlClusterNodes.size());
  bEnableDepthCheck=true;
  int cnt=0;
  int iExample=0;
  IVirtualArray currentVA=null;
  if (bRenderGeneTree) {
    currentVA=contentVA;
  }
 else {
    currentVA=storageVA;
  }
  for (  ClusterNode iter : iAlClusterNodes) {
    Group temp=new Group(iter.getNrElements(),false,currentVA.get(iExample),ESelectionType.NORMAL,iter);
    groupList.append(temp);
    cnt++;
    iExample+=iter.getNrElements();
  }
  if (bRenderGeneTree) {
    contentVA.setGroupList(groupList);
    useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
  }
 else {
    storageVA.setGroupList(groupList);
    useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
  }
}","/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
private void buildNewGroupList(){
  if (iAlClusterNodes.size() < 2) {
    groupList=null;
    if (bRenderGeneTree) {
      useCase.getSet().setGroupListGenes(groupList);
      useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
    }
 else {
      useCase.getSet().setGroupListExperiments(groupList);
      useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
    }
    bRedrawDendrogram=true;
    bEnableDepthCheck=false;
    setDisplayListDirty();
    return;
  }
  groupList=new GroupList(iAlClusterNodes.size());
  bEnableDepthCheck=true;
  int cnt=0;
  int iExample=0;
  IVirtualArray currentVA=null;
  if (bRenderGeneTree) {
    currentVA=contentVA;
  }
 else {
    currentVA=storageVA;
  }
  for (  ClusterNode iter : iAlClusterNodes) {
    Group temp=new Group(iter.getNrElements(),false,currentVA.get(iExample),ESelectionType.NORMAL,iter);
    groupList.append(temp);
    cnt++;
    iExample+=iter.getNrElements();
  }
  if (bRenderGeneTree) {
    useCase.getSet().setGroupListGenes(groupList);
    useCase.replaceVirtualArray(EVAType.CONTENT,contentVA);
  }
 else {
    useCase.getSet().setGroupListExperiments(groupList);
    useCase.replaceVirtualArray(EVAType.STORAGE,storageVA);
  }
}",0.8502235469448585
58632,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      contentVA.getGroupList().get(iExternalID).toggleSelectionType();
    deactivateAllDraggingCursor();
  bActivateDraggingGenes=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingGenes == false) return;
if (bDragDropGeneGroup == false) {
bDragDropGeneGroup=true;
bDragDropExpGroup=false;
iGeneGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
if (set.getClusteredTreeGenes() != null) break;
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=contentVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(true,bEnableMerge,bEnableInterchange);
groupContextMenuItemContainer.setGenes(EIDType.EXPRESSION_INDEX,contentVA.getGeneIdsOfGroup(iExternalID));
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
storageVA.getGroupList().get(iExternalID).toggleSelectionType();
deactivateAllDraggingCursor();
bActivateDraggingExperiments=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingExperiments == false) return;
if (bDragDropExpGroup == false) {
bDragDropExpGroup=true;
bDragDropGeneGroup=false;
iExpGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
if (set.getClusteredTreeGenes() != null) break;
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=storageVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(false,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
bGeneDendrogramActive=false;
glHeatMapView.setDisplayListDirty();
glExperimentDendrogramView.setRedrawDendrogram();
glExperimentDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_VERTICAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bExperimentDendrogramActive=bExperimentDendrogramActive == true ? false : true;
glHeatMapView.setDisplayListDirty();
glGeneDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_HORIZONTAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bGeneDendrogramActive=bGeneDendrogramActive == true ? false : true;
if (bGeneDendrogramActive == false) {
float temp=glGeneDendrogramView.getPositionOfCut();
renderStyle.setWidthGeneDendrogram(temp);
bGeneDendrogramRenderCut=true;
}
 else {
float temp=glGeneDendrogramView.getViewFrustum().getWidth();
if (temp > 0.5 && temp <= 1.7f) renderStyle.setWidthGeneDendrogram(temp - 0.1f);
bGeneDendrogramRenderCut=false;
}
bIsHeatmapInFocus=false;
glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
glGeneDendrogramView.setDisplayListDirty();
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingActiveLevel1=true;
bDisableBlockDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingWholeBlockLevel1=true;
bDisableCursorDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingActiveLevel2=true;
bDisableBlockDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingWholeBlockLevel2=true;
bDisableCursorDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel1=pick.getPickedPoint();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel2=pick.getPickedPoint();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
setDisplayListDirty();
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      contentVA.getGroupList().get(iExternalID).toggleSelectionType();
    deactivateAllDraggingCursor();
  bActivateDraggingGenes=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingGenes == false) return;
if (bDragDropGeneGroup == false) {
bDragDropGeneGroup=true;
bDragDropExpGroup=false;
iGeneGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
if (set.getClusteredTreeGenes() != null) break;
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=contentVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(true,bEnableMerge,bEnableInterchange);
groupContextMenuItemContainer.setGenes(EIDType.EXPRESSION_INDEX,contentVA.getGeneIdsOfGroup(iExternalID));
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
storageVA.getGroupList().get(iExternalID).toggleSelectionType();
deactivateAllDraggingCursor();
bActivateDraggingExperiments=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingExperiments == false) return;
if (bDragDropExpGroup == false) {
bDragDropExpGroup=true;
bDragDropGeneGroup=false;
iExpGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
if (set.getClusteredTreeExps() != null) break;
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=storageVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(false,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
bGeneDendrogramActive=false;
glHeatMapView.setDisplayListDirty();
glExperimentDendrogramView.setRedrawDendrogram();
glExperimentDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_VERTICAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bExperimentDendrogramActive=bExperimentDendrogramActive == true ? false : true;
glHeatMapView.setDisplayListDirty();
glGeneDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_HORIZONTAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bGeneDendrogramActive=bGeneDendrogramActive == true ? false : true;
if (bGeneDendrogramActive == false) {
float temp=glGeneDendrogramView.getPositionOfCut();
renderStyle.setWidthGeneDendrogram(temp);
bGeneDendrogramRenderCut=true;
}
 else {
float temp=glGeneDendrogramView.getViewFrustum().getWidth();
if (temp > 0.5 && temp <= 1.7f) renderStyle.setWidthGeneDendrogram(temp - 0.1f);
bGeneDendrogramRenderCut=false;
}
bIsHeatmapInFocus=false;
glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
glGeneDendrogramView.setDisplayListDirty();
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingActiveLevel1=true;
bDisableBlockDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingWholeBlockLevel1=true;
bDisableCursorDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingActiveLevel2=true;
bDisableBlockDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingWholeBlockLevel2=true;
bDisableCursorDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel1=pick.getPickedPoint();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel2=pick.getPickedPoint();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
setDisplayListDirty();
}",0.9995275059061762
58633,"/** 
 * Depending on which group info should be handeld a bollean has to be set. True for genes, false for experiments
 * @param bGeneGroup if true gene groups will be handled, if false experiment groups
 */
public void setGeneExperimentFlag(boolean bGeneGroup){
  InterchangeGroupsEvent interchangeGroupsEvent=new InterchangeGroupsEvent();
  interchangeGroupsEvent.setSender(this);
  interchangeGroupsEvent.setGeneExperimentFlag(bGeneGroup);
  registerEvent(interchangeGroupsEvent);
}","/** 
 * Depending on which group info should be handled a boolean has to be set. True for genes, false for experiments
 * @param bGeneGroup if true gene groups will be handled, if false experiment groups
 */
public void setGeneExperimentFlag(boolean bGeneGroup){
  InterchangeGroupsEvent interchangeGroupsEvent=new InterchangeGroupsEvent();
  interchangeGroupsEvent.setSender(this);
  interchangeGroupsEvent.setGeneExperimentFlag(bGeneGroup);
  registerEvent(interchangeGroupsEvent);
}",0.981443298969072
58634,"/** 
 * Depending on which group info should be handeld a bollean has to be set. True for genes, false for experiments
 * @param bGeneGroup if true gene groups will be handled, if false experiment groups
 */
public void setGeneExperimentFlag(boolean bGeneGroup){
  MergeGroupsEvent mergeGroupEvent=new MergeGroupsEvent();
  mergeGroupEvent.setSender(this);
  mergeGroupEvent.setGeneExperimentFlag(bGeneGroup);
  registerEvent(mergeGroupEvent);
}","/** 
 * Depending on which group info should be handled a boolean has to be set. True for genes, false for experiments
 * @param bGeneGroup if true gene groups will be handled, if false experiment groups
 */
public void setGeneExperimentFlag(boolean bGeneGroup){
  MergeGroupsEvent mergeGroupEvent=new MergeGroupsEvent();
  mergeGroupEvent.setSender(this);
  mergeGroupEvent.setGeneExperimentFlag(bGeneGroup);
  registerEvent(mergeGroupEvent);
}",0.9797752808988764
58635,"@Override public void replaceVirtualArray(EVAType vaType){
  if (vaType == storageVAType) {
    storageVA=useCase.getVA(vaType);
    storageSelectionManager.setVA(storageVA);
  }
 else   if (vaType == contentVAType) {
    contentVA=useCase.getVA(vaType);
    contentSelectionManager.setVA(contentVA);
  }
 else   return;
}","@Override public void replaceVirtualArray(EVAType vaType){
  if (vaType == storageVAType) {
    storageVA=useCase.getVA(vaType);
  }
 else   if (vaType == contentVAType) {
    contentVA=useCase.getVA(vaType);
  }
 else   return;
  initData();
}",0.5229681978798587
58636,"@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta delta,String info){
  super.handleVirtualArrayUpdate(delta,info);
  if (delta.getVAType() == EVAType.CONTENT_CONTEXT && contentVAType == EVAType.CONTENT_CONTEXT) {
    long original=System.currentTimeMillis();
    System.out.println(""String_Node_Str"");
    AffinityClusterer clusterer=new AffinityClusterer(contentVA.size());
    ClusterState state=new ClusterState(EClustererAlgo.AFFINITY_PROPAGATION,EClustererType.GENE_CLUSTERING,EDistanceMeasure.EUCLIDEAN_DISTANCE);
    int contentVAID=contentVA.getID();
    state.setContentVaId(contentVA.getID());
    state.setStorageVaId(storageVA.getID());
    state.setAffinityPropClusterFactorGenes(4.0f);
    IVirtualArray tempVA2=set.getVA(contentVAID);
    IVirtualArray tempVA=clusterer.getSortedVA(set,state,0,2);
    contentVA=tempVA;
    contentSelectionManager.setVA(contentVA);
    contentVA.setID(contentVAID);
    long result=System.currentTimeMillis() - original;
    System.out.println(""String_Node_Str"" + result);
  }
}","@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta delta,String info){
  super.handleVirtualArrayUpdate(delta,info);
  if (delta.getVAType() == EVAType.CONTENT_CONTEXT && contentVAType == EVAType.CONTENT_CONTEXT) {
    AffinityClusterer clusterer=new AffinityClusterer(contentVA.size());
    ClusterState state=new ClusterState(EClustererAlgo.AFFINITY_PROPAGATION,EClustererType.GENE_CLUSTERING,EDistanceMeasure.EUCLIDEAN_DISTANCE);
    int contentVAID=contentVA.getID();
    state.setContentVaId(contentVA.getID());
    state.setStorageVaId(storageVA.getID());
    state.setAffinityPropClusterFactorGenes(4.0f);
    IVirtualArray tempVA=clusterer.getSortedVA(set,state,0,2);
    contentVA=tempVA;
    contentSelectionManager.setVA(contentVA);
    contentVA.setID(contentVAID);
  }
}",0.8664495114006515
58637,"/** 
 * Constructor.
 */
protected AGLEventListener(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum,final boolean bRegisterToParentCanvasNow){
  super(glCanvas != null ? glCanvas.getID() : -1,sLabel,GeneralManager.get().getIDManager().createID(EManagedObjectType.GL_EVENT_LISTENER));
  parentGLCanvas=glCanvas;
  if (bRegisterToParentCanvasNow && parentGLCanvas != null) {
    glMouseListener=parentGLCanvas.getGLMouseListener();
  }
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(iUniqueID);
  pickingManager=generalManager.getViewGLCanvasManager().getPickingManager();
  idMappingManager=generalManager.getIDMappingManager();
  textureManager=new TextureManager();
  contextMenu=ContextMenu.get();
  queue=new LinkedBlockingQueue<Pair<AEventListener<? extends IListenerOwner>,AEvent>>();
}","/** 
 * Constructor.
 */
protected AGLEventListener(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum,final boolean bRegisterToParentCanvasNow){
  super(glCanvas != null ? glCanvas.getID() : -1,sLabel,GeneralManager.get().getIDManager().createID(EManagedObjectType.GL_EVENT_LISTENER));
  parentGLCanvas=glCanvas;
  if (bRegisterToParentCanvasNow && parentGLCanvas != null) {
    glMouseListener=parentGLCanvas.getGLMouseListener();
  }
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(iUniqueID);
  pickingManager=generalManager.getViewGLCanvasManager().getPickingManager();
  idMappingManager=generalManager.getIDMappingManager();
  textureManager=new TextureManager();
  contextMenu=ContextMenu.get();
  queue=new LinkedBlockingQueue<Pair<AEventListener<? extends IListenerOwner>,AEvent>>();
  bShowMagnifyingGlass=false;
}",0.982373678025852
58638,"@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  if (!bAnimationStarted) {
    initAnimation(fXCenter,fYCenter,pdCurrentSelectedElement);
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  dsFixedColor.setFillColor(mvCurrentRootColorR.getMovementValue(),mvCurrentRootColorG.getMovementValue(),mvCurrentRootColorB.getMovementValue(),1);
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvCurrentWidth.getMovementValue(),fTargetDepth,mvCurrentRootStartAngle.getMovementValue(),mvCurrentRootAngle.getMovementValue(),mvCurrentRootInnerRadius.getMovementValue());
  if (haveMovementValuesReachedTargets()) {
    bAnimationStarted=false;
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_FULL_HIERARCHY);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    radialHierarchy.setCurrentRootElement(pdCurrentSelectedElement);
    navigationHistory.addNewHistoryEntry(dsNext,pdCurrentSelectedElement,pdCurrentSelectedElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentSelectedElement,pdCurrentSelectedElement);
    radialHierarchy.setDisplayListDirty();
  }
}","@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  if (!bAnimationStarted) {
    initAnimation(fXCenter,fYCenter,pdCurrentSelectedElement);
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  dsFixedColor.setFillColor(mvCurrentRootColorR.getMovementValue(),mvCurrentRootColorG.getMovementValue(),mvCurrentRootColorB.getMovementValue(),1);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvCurrentWidth.getMovementValue(),fTargetDepth,mvCurrentRootStartAngle.getMovementValue(),mvCurrentRootAngle.getMovementValue(),mvCurrentRootInnerRadius.getMovementValue());
  if (haveMovementValuesReachedTargets()) {
    bAnimationStarted=false;
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_FULL_HIERARCHY);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    radialHierarchy.setCurrentRootElement(pdCurrentSelectedElement);
    navigationHistory.addNewHistoryEntry(dsNext,pdCurrentSelectedElement,pdCurrentSelectedElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentSelectedElement,pdCurrentSelectedElement);
    radialHierarchy.setDisplayListDirty();
  }
  gl.glPopMatrix();
}",0.986499835363846
58639,"@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  if (!bAnimationStarted) {
    initAnimation(fXCenter,fYCenter,pdCurrentSelectedElement);
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  dsFixedColor.setFillColor(mvCurrentSelectedColorR.getMovementValue(),mvCurrentSelectedColorG.getMovementValue(),mvCurrentSelectedColorB.getMovementValue(),1);
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvCurrentWidth.getMovementValue(),iTargetDepth,mvCurrentStartAngle.getMovementValue(),mvCurrentAngle.getMovementValue(),mvCurrentInnerRadius.getMovementValue());
  if (haveMovementValuesReachedTargets()) {
    bAnimationStarted=false;
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_FULL_HIERARCHY);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    PartialDisc pdNewRootElement=pdCurrentSelectedElement.getParent();
    radialHierarchy.setCurrentRootElement(pdNewRootElement);
    radialHierarchy.setCurrentSelectedElement(pdNewRootElement);
    navigationHistory.addNewHistoryEntry(dsNext,pdNewRootElement,pdNewRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdNewRootElement,pdNewRootElement);
    radialHierarchy.setDisplayListDirty();
  }
}","@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  if (!bAnimationStarted) {
    initAnimation(fXCenter,fYCenter,pdCurrentSelectedElement);
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  dsFixedColor.setFillColor(mvCurrentSelectedColorR.getMovementValue(),mvCurrentSelectedColorG.getMovementValue(),mvCurrentSelectedColorB.getMovementValue(),1);
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvCurrentWidth.getMovementValue(),iTargetDepth,mvCurrentStartAngle.getMovementValue(),mvCurrentAngle.getMovementValue(),mvCurrentInnerRadius.getMovementValue());
  if (haveMovementValuesReachedTargets()) {
    bAnimationStarted=false;
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_FULL_HIERARCHY);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    PartialDisc pdNewRootElement=pdCurrentSelectedElement.getParent();
    radialHierarchy.setCurrentRootElement(pdNewRootElement);
    radialHierarchy.setCurrentSelectedElement(pdNewRootElement);
    navigationHistory.addNewHistoryEntry(dsNext,pdNewRootElement,pdNewRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdNewRootElement,pdNewRootElement);
    radialHierarchy.setDisplayListDirty();
  }
  gl.glPopMatrix();
}",0.9873025704552492
58640,"@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  PartialDisc pdCurrentRootElement=radialHierarchy.getCurrentRootElement();
  if (!bAnimationStarted) {
    initAnimationFirstPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    iAnimationPart=1;
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  pdCurrentRootElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDrawingStrategy(EPDDrawingStrategyType.INVISIBLE),iDisplayedDetailViewDepth);
  pdCurrentRootElement.drawHierarchyFull(gl,glu,mvOverviewWidth.getMovementValue(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedDetailViewDepth);
  if (iAnimationPart == 1) {
    pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvDetailViewWidth.getMovementValue(),iDisplayedDetailViewDepth,pdCurrentSelectedElement.getCurrentStartAngle(),pdCurrentSelectedElement.getCurrentAngle(),mvDetailViewInnerRadius.getMovementValue());
  }
 else {
    pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvDetailViewWidth.getMovementValue(),iDisplayedDetailViewDepth,mvDetailViewStartAngle.getMovementValue(),mvDetailViewAngle.getMovementValue(),mvDetailViewInnerRadius.getMovementValue());
  }
  if (haveMovementValuesReachedTargets()) {
    iAnimationPart++;
    if (iAnimationPart == 2) {
      initAnimationSecondPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    }
    if (iAnimationPart > 2) {
      bAnimationStarted=false;
    }
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_DETAIL_OUTSIDE);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    navigationHistory.addNewHistoryEntry(dsNext,pdCurrentRootElement,pdCurrentSelectedElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentSelectedElement,pdCurrentRootElement);
    radialHierarchy.setDisplayListDirty();
  }
}","@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  PartialDisc pdCurrentRootElement=radialHierarchy.getCurrentRootElement();
  if (!bAnimationStarted) {
    initAnimationFirstPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    iAnimationPart=1;
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  pdCurrentRootElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDrawingStrategy(EPDDrawingStrategyType.INVISIBLE),iDisplayedDetailViewDepth);
  pdCurrentRootElement.drawHierarchyFull(gl,glu,mvOverviewWidth.getMovementValue(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedDetailViewDepth);
  if (iAnimationPart == 1) {
    pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvDetailViewWidth.getMovementValue(),iDisplayedDetailViewDepth,pdCurrentSelectedElement.getCurrentStartAngle(),pdCurrentSelectedElement.getCurrentAngle(),mvDetailViewInnerRadius.getMovementValue());
  }
 else {
    pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvDetailViewWidth.getMovementValue(),iDisplayedDetailViewDepth,mvDetailViewStartAngle.getMovementValue(),mvDetailViewAngle.getMovementValue(),mvDetailViewInnerRadius.getMovementValue());
  }
  if (haveMovementValuesReachedTargets()) {
    iAnimationPart++;
    if (iAnimationPart == 2) {
      initAnimationSecondPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    }
    if (iAnimationPart > 2) {
      bAnimationStarted=false;
    }
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_DETAIL_OUTSIDE);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    navigationHistory.addNewHistoryEntry(dsNext,pdCurrentRootElement,pdCurrentSelectedElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentSelectedElement,pdCurrentRootElement);
    radialHierarchy.setDisplayListDirty();
  }
  gl.glPopMatrix();
}",0.9917355371900828
58641,"@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  PartialDisc pdCurrentRootElement=radialHierarchy.getCurrentRootElement();
  if (!bAnimationStarted) {
    initAnimationFirstPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    iAnimationPart=1;
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  pdCurrentRootElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDrawingStrategy(EPDDrawingStrategyType.INVISIBLE),iDisplayedDetailViewDepth);
  pdCurrentRootElement.drawHierarchyFull(gl,glu,mvOverviewWidth.getMovementValue(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedDetailViewDepth);
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvDetailViewWidth.getMovementValue(),iDisplayedDetailViewDepth,mvDetailViewStartAngle.getMovementValue(),mvDetailViewAngle.getMovementValue(),mvDetailViewInnerRadius.getMovementValue());
  if (haveMovementValuesReachedTargets()) {
    iAnimationPart++;
    if (iAnimationPart == 2) {
      initAnimationSecondPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    }
    if (iAnimationPart > 2) {
      bAnimationStarted=false;
    }
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_FULL_HIERARCHY);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    radialHierarchy.setCurrentSelectedElement(pdCurrentRootElement);
    navigationHistory.addNewHistoryEntry(dsNext,pdCurrentRootElement,pdCurrentRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentRootElement,pdCurrentRootElement);
    radialHierarchy.setDisplayListDirty();
  }
}","@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu,double dTimePassed){
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  PartialDisc pdCurrentRootElement=radialHierarchy.getCurrentRootElement();
  if (!bAnimationStarted) {
    initAnimationFirstPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    iAnimationPart=1;
    bAnimationStarted=true;
    radialHierarchy.setAnimationActive(true);
  }
  moveValues(dTimePassed);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  pdCurrentRootElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDrawingStrategy(EPDDrawingStrategyType.INVISIBLE),iDisplayedDetailViewDepth);
  pdCurrentRootElement.drawHierarchyFull(gl,glu,mvOverviewWidth.getMovementValue(),iDisplayedOverviewDepth);
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(DrawingStrategyManager.get().getDefaultDrawingStrategy(),iDisplayedDetailViewDepth);
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,mvDetailViewWidth.getMovementValue(),iDisplayedDetailViewDepth,mvDetailViewStartAngle.getMovementValue(),mvDetailViewAngle.getMovementValue(),mvDetailViewInnerRadius.getMovementValue());
  if (haveMovementValuesReachedTargets()) {
    iAnimationPart++;
    if (iAnimationPart == 2) {
      initAnimationSecondPart(fXCenter,fYCenter,pdCurrentSelectedElement,pdCurrentRootElement);
    }
    if (iAnimationPart > 2) {
      bAnimationStarted=false;
    }
  }
  if (!bAnimationStarted) {
    ADrawingState dsNext=drawingController.getDrawingState(EDrawingStateType.DRAWING_STATE_FULL_HIERARCHY);
    drawingController.setDrawingState(dsNext);
    radialHierarchy.setAnimationActive(false);
    radialHierarchy.setCurrentSelectedElement(pdCurrentRootElement);
    navigationHistory.addNewHistoryEntry(dsNext,pdCurrentRootElement,pdCurrentRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentRootElement,pdCurrentRootElement);
    radialHierarchy.setDisplayListDirty();
  }
  gl.glPopMatrix();
}",0.9908420817511726
58642,"@Override public void registerEventListeners(){
  redrawViewListener=new RedrawViewListener();
  redrawViewListener.setHandler(this);
  eventPublisher.addListener(RedrawViewEvent.class,redrawViewListener);
  clusterNodeMouseOverListener=new ClusterNodeSelectionListener();
  clusterNodeMouseOverListener.setHandler(this);
  eventPublisher.addListener(ClusterNodeSelectionEvent.class,clusterNodeMouseOverListener);
  goBackInHistoryListener=new GoBackInHistoryListener();
  goBackInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoBackInHistoryEvent.class,goBackInHistoryListener);
  goForthInHistoryListener=new GoForthInHistoryListener();
  goForthInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoForthInHistoryEvent.class,goForthInHistoryListener);
  changeColorModeListener=new ChangeColorModeListener();
  changeColorModeListener.setHandler(this);
  eventPublisher.addListener(ChangeColorModeEvent.class,changeColorModeListener);
  setMaxDisplayedHierarchyDepthListener=new SetMaxDisplayedHierarchyDepthListener();
  setMaxDisplayedHierarchyDepthListener.setHandler(this);
  eventPublisher.addListener(SetMaxDisplayedHierarchyDepthEvent.class,setMaxDisplayedHierarchyDepthListener);
  detailOutsideListener=new DetailOutsideListener();
  detailOutsideListener.setHandler(this);
  eventPublisher.addListener(DetailOutsideEvent.class,detailOutsideListener);
  updateViewListener=new UpdateViewListener();
  updateViewListener.setHandler(this);
  eventPublisher.addListener(UpdateViewEvent.class,updateViewListener);
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  clearSelectionsListener=new ClearSelectionsListener();
  clearSelectionsListener.setHandler(this);
  eventPublisher.addListener(ClearSelectionsEvent.class,clearSelectionsListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  redrawViewListener=new RedrawViewListener();
  redrawViewListener.setHandler(this);
  eventPublisher.addListener(RedrawViewEvent.class,redrawViewListener);
  clusterNodeMouseOverListener=new ClusterNodeSelectionListener();
  clusterNodeMouseOverListener.setHandler(this);
  eventPublisher.addListener(ClusterNodeSelectionEvent.class,clusterNodeMouseOverListener);
  goBackInHistoryListener=new GoBackInHistoryListener();
  goBackInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoBackInHistoryEvent.class,goBackInHistoryListener);
  goForthInHistoryListener=new GoForthInHistoryListener();
  goForthInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoForthInHistoryEvent.class,goForthInHistoryListener);
  changeColorModeListener=new ChangeColorModeListener();
  changeColorModeListener.setHandler(this);
  eventPublisher.addListener(ChangeColorModeEvent.class,changeColorModeListener);
  setMaxDisplayedHierarchyDepthListener=new SetMaxDisplayedHierarchyDepthListener();
  setMaxDisplayedHierarchyDepthListener.setHandler(this);
  eventPublisher.addListener(SetMaxDisplayedHierarchyDepthEvent.class,setMaxDisplayedHierarchyDepthListener);
  detailOutsideListener=new DetailOutsideListener();
  detailOutsideListener.setHandler(this);
  eventPublisher.addListener(DetailOutsideEvent.class,detailOutsideListener);
  updateViewListener=new UpdateViewListener();
  updateViewListener.setHandler(this);
  eventPublisher.addListener(UpdateViewEvent.class,updateViewListener);
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  clearSelectionsListener=new ClearSelectionsListener();
  clearSelectionsListener.setHandler(this);
  eventPublisher.addListener(ClearSelectionsEvent.class,clearSelectionsListener);
}",0.9912190082644629
58643,"@Override public void unregisterEventListeners(){
  if (redrawViewListener != null) {
    eventPublisher.removeListener(redrawViewListener);
    redrawViewListener=null;
  }
  if (clusterNodeMouseOverListener != null) {
    eventPublisher.removeListener(clusterNodeMouseOverListener);
    clusterNodeMouseOverListener=null;
  }
  if (goBackInHistoryListener != null) {
    eventPublisher.removeListener(goBackInHistoryListener);
    goBackInHistoryListener=null;
  }
  if (goForthInHistoryListener != null) {
    eventPublisher.removeListener(goForthInHistoryListener);
    goForthInHistoryListener=null;
  }
  if (changeColorModeListener != null) {
    eventPublisher.removeListener(changeColorModeListener);
    changeColorModeListener=null;
  }
  if (setMaxDisplayedHierarchyDepthListener != null) {
    eventPublisher.removeListener(setMaxDisplayedHierarchyDepthListener);
    setMaxDisplayedHierarchyDepthListener=null;
  }
  if (detailOutsideListener != null) {
    eventPublisher.removeListener(detailOutsideListener);
    detailOutsideListener=null;
  }
  if (updateViewListener != null) {
    eventPublisher.removeListener(updateViewListener);
    updateViewListener=null;
  }
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (clearSelectionsListener != null) {
    eventPublisher.removeListener(clearSelectionsListener);
    clearSelectionsListener=null;
  }
}","@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (redrawViewListener != null) {
    eventPublisher.removeListener(redrawViewListener);
    redrawViewListener=null;
  }
  if (clusterNodeMouseOverListener != null) {
    eventPublisher.removeListener(clusterNodeMouseOverListener);
    clusterNodeMouseOverListener=null;
  }
  if (goBackInHistoryListener != null) {
    eventPublisher.removeListener(goBackInHistoryListener);
    goBackInHistoryListener=null;
  }
  if (goForthInHistoryListener != null) {
    eventPublisher.removeListener(goForthInHistoryListener);
    goForthInHistoryListener=null;
  }
  if (changeColorModeListener != null) {
    eventPublisher.removeListener(changeColorModeListener);
    changeColorModeListener=null;
  }
  if (setMaxDisplayedHierarchyDepthListener != null) {
    eventPublisher.removeListener(setMaxDisplayedHierarchyDepthListener);
    setMaxDisplayedHierarchyDepthListener=null;
  }
  if (detailOutsideListener != null) {
    eventPublisher.removeListener(detailOutsideListener);
    detailOutsideListener=null;
  }
  if (updateViewListener != null) {
    eventPublisher.removeListener(updateViewListener);
    updateViewListener=null;
  }
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (clearSelectionsListener != null) {
    eventPublisher.removeListener(clearSelectionsListener);
    clearSelectionsListener=null;
  }
}",0.987862440997977
58644,"private void renderRemoteViewsLevel_2_3_Active(GL gl){
  float fright=0.0f;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0.09f + GAP_BETWEEN_LEVELS + renderStyle.getWidthLevel2() * fAnimationScale;
  if (bIsHeatmapInFocus) {
    fright+=viewFrustum.getWidth() - 0.725f;
  }
 else {
    fright+=viewFrustum.getWidth() - 2;
  }
  if (contentVA.getGroupList() != null)   fleftOffset+=renderStyle.getWidthClusterVisualization();
  if (bGeneDendrogramActive) {
    fleftOffset+=renderStyle.getWidthGeneDendrogram();
    fright-=0.3f;
  }
  gl.glTranslatef(fleftOffset,-0.2f,0);
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - renderStyle.getHeightExperimentDendrogram());
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  if (contentVA.getGroupList() != null)   glHeatMapView.setClusterVisualizationActiveFlag(true);
 else   glHeatMapView.setClusterVisualizationActiveFlag(false);
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  renderStyle.setWidthLevel3(glHeatMapView.getViewFrustum().getWidth() - 0.95f);
  if (bExperimentDendrogramActive) {
    gl.glTranslatef(0f,3.6f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(ftop - 3.6f);
    glExperimentDendrogramView.getViewFrustum().setRight(renderStyle.getWidthLevel3());
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-3.6f,0f);
  }
  gl.glTranslatef(-fleftOffset,+0.2f,0);
  if (bGeneDendrogramActive) {
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
}","private void renderRemoteViewsLevel_2_3_Active(GL gl){
  float fright=0.0f;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0.09f + GAP_BETWEEN_LEVELS + renderStyle.getWidthLevel2() * fAnimationScale;
  if (bIsHeatmapInFocus) {
    fright+=viewFrustum.getWidth() - 0.725f;
  }
 else {
    fright+=viewFrustum.getWidth() - 2;
  }
  if (contentVA.getGroupList() != null)   fleftOffset+=renderStyle.getWidthClusterVisualization();
  if (bGeneDendrogramActive) {
    fleftOffset+=renderStyle.getWidthGeneDendrogram();
    fright-=0.3f;
  }
  gl.glTranslatef(fleftOffset,-0.2f,0);
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - renderStyle.getHeightExperimentDendrogram());
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  if (contentVA.getGroupList() != null)   glHeatMapView.setClusterVisualizationActiveFlag(true);
 else   glHeatMapView.setClusterVisualizationActiveFlag(false);
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  renderStyle.setWidthLevel3(glHeatMapView.getViewFrustum().getWidth() - 0.95f);
  if (bExperimentDendrogramActive) {
    float fOffsetx=ftop - renderStyle.getHeightExperimentDendrogram();
    if (storageVA.getGroupList() != null)     fOffsetx+=renderStyle.getWidthClusterVisualization();
    gl.glTranslatef(0f,fOffsetx,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(renderStyle.getHeightExperimentDendrogram());
    glExperimentDendrogramView.getViewFrustum().setRight(renderStyle.getWidthLevel3());
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-fOffsetx,0f);
  }
  gl.glTranslatef(-fleftOffset,+0.2f,0);
  if (bGeneDendrogramActive) {
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
}",0.9463939720129172
58645,"private void renderRemoteViewsLevel_1_2_3_Active(GL gl){
  float fright=0.0f;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0.1f + GAP_BETWEEN_LEVELS + renderStyle.getWidthLevel2() * fAnimationScale;
  if (bIsHeatmapInFocus) {
    fright=viewFrustum.getWidth() - 1.7f;
    fleftOffset+=0.8f;
  }
 else   if (bGeneDendrogramActive || bGeneDendrogramRenderCut) {
    fleftOffset+=renderStyle.getWidthGeneDendrogram() + 0.8;
    fright=viewFrustum.getWidth() - 3.2f;
  }
 else {
    fright=viewFrustum.getWidth() - 2.95f;
    fleftOffset+=0.78f;
  }
  if (contentVA.getGroupList() != null)   fleftOffset+=2 * renderStyle.getWidthClusterVisualization();
  gl.glTranslatef(fleftOffset,-0.2f,0);
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - renderStyle.getHeightExperimentDendrogram());
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  if (contentVA.getGroupList() != null)   glHeatMapView.setClusterVisualizationActiveFlag(true);
 else   glHeatMapView.setClusterVisualizationActiveFlag(false);
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  renderStyle.setWidthLevel3(glHeatMapView.getViewFrustum().getWidth() - 0.95f);
  if (bExperimentDendrogramActive) {
    gl.glTranslatef(0f,3.6f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(ftop - 3.6f);
    glExperimentDendrogramView.getViewFrustum().setRight(renderStyle.getWidthLevel3());
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-3.6f,0f);
  }
  gl.glTranslatef(-fleftOffset,+0.2f,0);
  glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
  if (bGeneDendrogramActive || bGeneDendrogramRenderCut) {
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
}","private void renderRemoteViewsLevel_1_2_3_Active(GL gl){
  float fright=0.0f;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0.1f + GAP_BETWEEN_LEVELS + renderStyle.getWidthLevel2() * fAnimationScale;
  if (bIsHeatmapInFocus) {
    fright=viewFrustum.getWidth() - 1.7f;
    fleftOffset+=0.8f;
  }
 else   if (bGeneDendrogramActive || bGeneDendrogramRenderCut) {
    fleftOffset+=renderStyle.getWidthGeneDendrogram() + 0.8;
    fright=viewFrustum.getWidth() - 3.2f;
  }
 else {
    fright=viewFrustum.getWidth() - 2.95f;
    fleftOffset+=0.78f;
  }
  if (contentVA.getGroupList() != null)   fleftOffset+=2 * renderStyle.getWidthClusterVisualization();
  gl.glTranslatef(fleftOffset,-0.2f,0);
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - renderStyle.getHeightExperimentDendrogram());
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  if (contentVA.getGroupList() != null)   glHeatMapView.setClusterVisualizationActiveFlag(true);
 else   glHeatMapView.setClusterVisualizationActiveFlag(false);
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  renderStyle.setWidthLevel3(glHeatMapView.getViewFrustum().getWidth() - 0.95f);
  if (bExperimentDendrogramActive) {
    float fOffsetx=ftop - renderStyle.getHeightExperimentDendrogram();
    if (storageVA.getGroupList() != null)     fOffsetx+=renderStyle.getWidthClusterVisualization();
    gl.glTranslatef(0f,fOffsetx,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(renderStyle.getHeightExperimentDendrogram());
    glExperimentDendrogramView.getViewFrustum().setRight(renderStyle.getWidthLevel3());
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-fOffsetx,0f);
  }
  gl.glTranslatef(-fleftOffset,+0.2f,0);
  glGeneDendrogramView.setRenderUntilCut(bGeneDendrogramRenderCut);
  if (bGeneDendrogramActive || bGeneDendrogramRenderCut) {
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
}",0.9508778851844544
58646,"private void renderRemoteViewsLevel_3_Active(GL gl){
  float fright=0;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0.1f;
  if (bGeneDendrogramActive) {
    fright=viewFrustum.getWidth() - 1.4f;
    fleftOffset+=renderStyle.getWidthGeneDendrogram();
  }
 else {
    fright=viewFrustum.getWidth();
  }
  gl.glTranslatef(fleftOffset,-0.2f,0);
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - renderStyle.getHeightExperimentDendrogram());
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  if (contentVA.getGroupList() != null)   glHeatMapView.setClusterVisualizationActiveFlag(true);
 else   glHeatMapView.setClusterVisualizationActiveFlag(false);
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  renderStyle.setWidthLevel3(glHeatMapView.getViewFrustum().getWidth() - 0.95f);
  if (bExperimentDendrogramActive) {
    gl.glTranslatef(0f,3.6f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(ftop - 3.6f);
    glExperimentDendrogramView.getViewFrustum().setRight(renderStyle.getWidthLevel3());
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-3.6f,0f);
  }
  gl.glTranslatef(-fleftOffset,+0.2f,0);
  if (bGeneDendrogramActive) {
    if (bExperimentDendrogramActive)     ftop-=renderStyle.getHeightExperimentDendrogram();
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
}","private void renderRemoteViewsLevel_3_Active(GL gl){
  float fright=0;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0.1f;
  if (bGeneDendrogramActive) {
    fright=viewFrustum.getWidth() - 1.4f;
    fleftOffset+=renderStyle.getWidthGeneDendrogram();
  }
 else {
    fright=viewFrustum.getWidth();
  }
  gl.glTranslatef(fleftOffset,-0.2f,0);
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - renderStyle.getHeightExperimentDendrogram());
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  if (contentVA.getGroupList() != null)   glHeatMapView.setClusterVisualizationActiveFlag(true);
 else   glHeatMapView.setClusterVisualizationActiveFlag(false);
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  renderStyle.setWidthLevel3(glHeatMapView.getViewFrustum().getWidth() - 0.95f);
  if (bExperimentDendrogramActive) {
    float fOffsetx=ftop - renderStyle.getHeightExperimentDendrogram();
    if (storageVA.getGroupList() != null)     fOffsetx+=renderStyle.getWidthClusterVisualization();
    gl.glTranslatef(0f,fOffsetx,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(renderStyle.getHeightExperimentDendrogram());
    glExperimentDendrogramView.getViewFrustum().setRight(renderStyle.getWidthLevel3());
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-fOffsetx,0f);
  }
  gl.glTranslatef(-fleftOffset,+0.2f,0);
  if (bGeneDendrogramActive) {
    if (bExperimentDendrogramActive)     ftop-=renderStyle.getHeightExperimentDendrogram();
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
}",0.9429553264604812
58647,"@Override protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + this.getFileName());
  String sLine;
  String sTmpToken;
  int iColumnIndex=0;
  float fProgressBarFactor=100f / iStopParsingAtLine;
  int max=iStopParsingAtLine - iStartParsingAtLine + 1;
  while ((sLine=brFile.readLine()) != null && iLineInFile <= iStopParsingAtLine) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    sLine=sLine.replace(sTokenSeperator + sTokenSeperator,sTokenSeperator + ""String_Node_Str"" + sTokenSeperator);
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    for (    EStorageType columnDataType : alColumnDataTypes) {
      if (strTokenLine.hasMoreTokens()) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
        iColumnIndex++;
      break;
case FLOAT:
    Float fValue;
  sTmpToken=strTokenLine.nextToken();
try {
  fValue=Float.valueOf(sTmpToken).floatValue();
}
 catch (NumberFormatException nfe) {
  String sErrorMessage=""String_Node_Str"" + sTmpToken + ""String_Node_Str"";
  MessageDialog.openError(new Shell(),""String_Node_Str"",sErrorMessage);
  GeneralManager.get().getLogger().log(new Status(Status.ERROR,GeneralManager.PLUGIN_ID,sErrorMessage));
  throw nfe;
}
if (bUseExperimentClusterInfo) {
if (iLineInFile < max - 1) alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
 else if (iLineInFile == max - 1) alGroupInfo.get(2)[iColumnIndex]=Integer.valueOf(sTmpToken).intValue();
 else if (iLineInFile == max) alGroupInfo.get(3)[iColumnIndex]=Integer.valueOf(sTmpToken).intValue();
}
 else alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
strTokenLine.nextToken();
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
case GROUP_NUMBER:
alGroupInfo.get(0)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
case GROUP_REPRESENTATIVE:
alGroupInfo.get(1)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDataType.toString());
}
if (iColumnIndex == alColumnDataTypes.size()) {
continue;
}
}
}
iLineInFile++;
if (iLineInFile % 1000 == 0) {
swtGuiManager.setProgressBarPercentage((int)(fProgressBarFactor * iLineInFile));
}
}
}","@Override protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + this.getFileName());
  String sLine;
  String sTmpToken;
  int iColumnIndex=0;
  float fProgressBarFactor=100f / iStopParsingAtLine;
  int max=iStopParsingAtLine - iStartParsingAtLine + 1;
  while ((sLine=brFile.readLine()) != null && iLineInFile <= iStopParsingAtLine) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    sLine=sLine.replace(sTokenSeperator + sTokenSeperator,sTokenSeperator + ""String_Node_Str"" + sTokenSeperator);
    if (sLine.substring(0,1).equals(sTokenSeperator))     sLine=""String_Node_Str"" + sLine;
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    for (    EStorageType columnDataType : alColumnDataTypes) {
      if (strTokenLine.hasMoreTokens()) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
        iColumnIndex++;
      break;
case FLOAT:
    Float fValue;
  sTmpToken=strTokenLine.nextToken();
try {
  fValue=Float.valueOf(sTmpToken).floatValue();
}
 catch (NumberFormatException nfe) {
  String sErrorMessage=""String_Node_Str"" + sTmpToken + ""String_Node_Str"";
  MessageDialog.openError(new Shell(),""String_Node_Str"",sErrorMessage);
  GeneralManager.get().getLogger().log(new Status(Status.ERROR,GeneralManager.PLUGIN_ID,sErrorMessage));
  throw nfe;
}
if (bUseExperimentClusterInfo) {
if (iLineInFile < max - 1) alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
 else if (iLineInFile == max - 1) alGroupInfo.get(2)[iColumnIndex]=Integer.valueOf(sTmpToken).intValue();
 else if (iLineInFile == max) alGroupInfo.get(3)[iColumnIndex]=Integer.valueOf(sTmpToken).intValue();
}
 else alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
strTokenLine.nextToken();
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
case GROUP_NUMBER:
alGroupInfo.get(0)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
case GROUP_REPRESENTATIVE:
alGroupInfo.get(1)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDataType.toString());
}
if (iColumnIndex == alColumnDataTypes.size()) {
continue;
}
}
}
iLineInFile++;
if (iLineInFile % 1000 == 0) {
swtGuiManager.setProgressBarPercentage((int)(fProgressBarFactor * iLineInFile));
}
}
}",0.9836946783730516
58648,"private float calculateCircle(float radius,float current_step,float numberOfElements){
  float phi=(float)((float)2 * Math.PI / numberOfElements);
  setFXCoord((float)(fCenterX + radius * Math.cos(phi * current_step)));
  setFYCoord((float)(fCenterY + radius * Math.sin(phi * current_step)));
  return phi;
}","private float calculateCircle(float radius,float current_step,float numberOfElements){
  float phi=(float)((float)2 * Math.PI / numberOfElements);
  setFXCoord((float)(fCenterX + radius * Math.cos(phi * current_step)));
  setFYCoord((float)(fCenterY + radius * Math.sin(phi * current_step)));
  return phi * current_step;
}",0.9762282091917592
58649,"public float calculateRecursiveLayout(GL gl,ADrawAbleNode node,Tree<ADrawAbleNode> tree,float radius,float angle,float layer,float fNodeSize){
  float fNumberOfNodesInLayer=5.0f + layer;
  for (float fCurrentNode=1; fCurrentNode <= fNumberOfNodesInLayer; fCurrentNode++) {
    float childRadius=radius + 0.5f;
    float alpha=calculateCircle((radius),fCurrentNode,fNumberOfNodesInLayer);
    float space=calculateChildSpace(childRadius,fNumberOfNodesInLayer);
    if (tree.hasChildren(node)) {
      float childs=5.0f;
      int childCount=0;
      for (float numChilds=1; numChilds < childs; numChilds++) {
        childCount++;
        childAngle=calculateChildAngle(alpha * fCurrentNode,space / childs,childRadius) * childCount + (alpha / 2);
        calculateRecursiveLayout(gl,node,tree,childRadius,childAngle,layer + 1,fNodeSize);
      }
    }
    node.drawAtPostion(gl,getFXCoord(),getFYCoord(),0,fNodeSize,0.2f,EDrawAbleNodeDetailLevel.Low);
    childAngle=0.0f;
  }
  return angle;
}","public float calculateRecursiveLayout(GL gl,ADrawAbleNode node,Tree<ADrawAbleNode> tree,float radius,float angle,float layer,float currentStep,float fNumberOfNodesInLayer,float fNodeSize){
  float fNumberOfNodesInNewLayer=fNumberOfNodesInLayer;
  float space=calculateChildSpace(radius,fNumberOfNodesInNewLayer);
  if (layer < fDepth) {
    float childs=4.0f;
    int childCount=0;
    float childAngle=0.0f;
    for (float numChilds=1; numChilds < childs; numChilds++) {
      childCount++;
      float parentAngle=(angle) - (angle / currentStep);
      float alphaHalfOffset=(angle / currentStep / 2);
      childAngle=calculateChildAngle(parentAngle,space / childs,radius,numChilds) + alphaHalfOffset;
      calcualteChildPosition(radius,childAngle,numChilds);
      node.drawAtPostion(gl,getFXCoord(),getFYCoord(),0,fNodeSize,0.2f,EDrawAbleNodeDetailLevel.Low);
      calculateRecursiveLayout(gl,node,tree,radius + 0.7f,childAngle,layer + 1,numChilds,fNumberOfNodesInNewLayer * childs,fNodeSize);
    }
    gl.glFlush();
  }
  return angle;
}",0.2099068170671898
58650,"@Override public void renderTreeLayout(GL gl,Tree<ADrawAbleNode> tree){
  updateSizeInfo();
  if (tree == null)   return;
  setFCenterX(fViewSpaceXAbs / 2);
  setFCenterY(fViewSpaceYAbs / 2);
  ADrawAbleNode rootNode=tree.getRoot();
  float fNumberOfNodesInLayer=5.0f;
  float fNodeSize=0.2f;
  float layer=1.0f;
  float firstRadius=0.5f;
  fNodeSize=fNodeSize * HyperbolicRenderStyle.LIN_TREE_Y_SCALING_PER_LAYER;
  Vec3f p1=new Vec3f(3.0f,3.0f,0);
  Vec3f p2=new Vec3f(1.1f,2.8f,0);
  Vec3f p3=new Vec3f(1.0f,1.0f,0);
  vec.add(p1);
  vec.add(p2);
  vec.add(p3);
  return;
}","@Override public void renderTreeLayout(GL gl,Tree<ADrawAbleNode> tree){
  updateSizeInfo();
  if (tree == null)   return;
  setFCenterX(fViewSpaceXAbs / 2);
  setFCenterY(fViewSpaceYAbs / 2);
  ADrawAbleNode rootNode=tree.getRoot();
  float fNodeSize=0.2f;
  float layer=1.0f;
  float firstRadius=0.5f;
  float fNumberOfNodesInLayer=3.0f;
  for (float fCurrentNode=1; fCurrentNode <= fNumberOfNodesInLayer; fCurrentNode++) {
    float childRadius=firstRadius + 0.5f;
    float alpha=calculateCircle((firstRadius),fCurrentNode,fNumberOfNodesInLayer);
    float space=calculateChildSpace(childRadius,fNumberOfNodesInLayer);
    rootNode.drawAtPostion(gl,getFXCoord(),getFYCoord(),0,fNodeSize,0.2f,EDrawAbleNodeDetailLevel.Low);
    calculateRecursiveLayout(gl,rootNode,tree,firstRadius,alpha,layer,fCurrentNode,fNumberOfNodesInLayer,fNodeSize);
  }
  fNodeSize=fNodeSize * HyperbolicRenderStyle.LIN_TREE_Y_SCALING_PER_LAYER;
  Vec3f p1=new Vec3f(3.0f,3.0f,0);
  Vec3f p2=new Vec3f(1.1f,2.8f,0);
  Vec3f p3=new Vec3f(1.0f,1.0f,0);
  vec.add(p1);
  vec.add(p2);
  vec.add(p3);
  return;
}",0.6168674698795181
58651,"private float calculateChildAngle(float parentAngle,float space,float radius){
  float angle=parentAngle - space / radius;
  return angle;
}","private float calculateChildAngle(float parentAngle,float space,float radius,float currentStep){
  float angle=parentAngle + ((space / radius) * currentStep);
  return angle;
}",0.879746835443038
58652,"private void renderGlobalBrush(GL gl){
  if (detailLevel != EDetailLevel.HIGH)   return;
  gl.glColor4f(0,0,0,1f);
  gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_LINE_WIDTH);
  float fXOrigin=-0.25f;
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(fXOrigin,0,AXIS_Z);
  gl.glVertex3f(fXOrigin,renderStyle.getAxisHeight(),AXIS_Z);
  gl.glVertex3f(fXOrigin - AXIS_MARKER_WIDTH,0,AXIS_Z);
  gl.glVertex3f(fXOrigin + AXIS_MARKER_WIDTH,0,AXIS_Z);
  gl.glVertex3f(fXOrigin - AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
  gl.glVertex3f(fXOrigin + AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
  gl.glEnd();
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  float fYGateAddOrigin=renderStyle.getAxisHeight();
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.ADD_MASTER_GATE,1);
  Texture tempTexture=textureManager.getIconTexture(gl,EIconTextures.ADD_GATE);
  tempTexture.enable();
  tempTexture.bind();
  TextureCoords texCoords=tempTexture.getImageTexCoords();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glColor4f(1,1,1,1);
  gl.glPushName(iPickingID);
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(fXOrigin - 0.05f,fYGateAddOrigin,AXIS_Z);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(fXOrigin + 0.05f,fYGateAddOrigin,AXIS_Z);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(fXOrigin + 0.05f,fYGateAddOrigin + 0.2f,AXIS_Z);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(fXOrigin - 0.05f,fYGateAddOrigin + 0.2f,AXIS_Z);
  gl.glEnd();
  gl.glPopName();
  gl.glPopAttrib();
  tempTexture.disable();
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  for (  Integer iGateID : hashMasterGates.keySet()) {
    Gate gate=hashMasterGates.get(iGateID);
    Float fBottom=gate.getCurrentBottom();
    Float fTop=gate.getCurrentTop();
    gl.glColor4fv(ParCoordsRenderStyle.GATE_BODY_COLOR,0);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(fXOrigin,fBottom,0);
    gl.glVertex3f(viewFrustum.getWidth(),fBottom,0);
    gl.glVertex3f(viewFrustum.getWidth(),fTop,0);
    gl.glVertex3f(fXOrigin - 0.05f,fTop,0);
    gl.glEnd();
    gate.setCurrentPosition(fXOrigin);
    gate.draw(gl,pickingManager,textureManager,textRenderer,iUniqueID);
  }
}","private void renderGlobalBrush(GL gl){
  if (detailLevel != EDetailLevel.HIGH)   return;
  gl.glColor4f(0,0,0,1f);
  gl.glLineWidth(ParCoordsRenderStyle.Y_AXIS_LINE_WIDTH);
  float fXOrigin=-0.25f;
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(fXOrigin,0,AXIS_Z);
  gl.glVertex3f(fXOrigin,renderStyle.getAxisHeight(),AXIS_Z);
  gl.glVertex3f(fXOrigin - AXIS_MARKER_WIDTH,0,AXIS_Z);
  gl.glVertex3f(fXOrigin + AXIS_MARKER_WIDTH,0,AXIS_Z);
  gl.glVertex3f(fXOrigin - AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
  gl.glVertex3f(fXOrigin + AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
  gl.glEnd();
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  float fYGateAddOrigin=renderStyle.getAxisHeight();
  int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.ADD_MASTER_GATE,1);
  gl.glPushName(iPickingID);
  Vec3f lowerLeftCorner=new Vec3f(fXOrigin - 0.05f,fYGateAddOrigin,AXIS_Z);
  Vec3f lowerRightCorner=new Vec3f(fXOrigin + 0.05f,fYGateAddOrigin,AXIS_Z);
  Vec3f upperRightCorner=new Vec3f(fXOrigin + 0.05f,fYGateAddOrigin + 0.2f,AXIS_Z);
  Vec3f upperLeftCorner=new Vec3f(fXOrigin - 0.05f,fYGateAddOrigin + 0.2f,AXIS_Z);
  Vec3f scalingPivot=new Vec3f(fXOrigin,fYGateAddOrigin,AXIS_Z);
  textureManager.renderGUITexture(gl,EIconTextures.ADD_GATE,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,scalingPivot,1,1,1,1,100);
  gl.glPopName();
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  for (  Integer iGateID : hashMasterGates.keySet()) {
    Gate gate=hashMasterGates.get(iGateID);
    Float fBottom=gate.getBottom();
    Float fTop=gate.getTop();
    gl.glColor4fv(ParCoordsRenderStyle.GATE_BODY_COLOR,0);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(fXOrigin,fBottom,0);
    gl.glVertex3f(viewFrustum.getWidth(),fBottom,0);
    gl.glVertex3f(viewFrustum.getWidth(),fTop,0);
    gl.glVertex3f(fXOrigin - 0.05f,fTop,0);
    gl.glEnd();
    gate.setCurrentPosition(fXOrigin);
    gate.draw(gl,pickingManager,textureManager,textRenderer,iUniqueID);
  }
}",0.5341300850379224
58653,"private IVirtualArray cluster(ISet set,ClusterState clusterState){
  ArrayList<Integer> indices=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Integer> temp=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  HashMap<Double,Integer> hashClusters=new HashMap<Double,Integer>();
  for (int i=0; i < clusters.size(); i++) {
    hashClusters.put(clusters.get(i),i);
    temp.add(0);
    alExamples.add(0);
  }
  for (  double cluster : clusters) {
    for (int i=0; i < data.numInstances(); i++) {
      if (clusterAssignments[i] == cluster) {
        indices.add(i);
        temp.set(hashClusters.get(cluster),temp.get(hashClusters.get(cluster)) + 1);
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  IVirtualArray virtualArray=null;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),indices);
 else   if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),indices);
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(""String_Node_Str"",0,0f,0,true);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,clusterState.getClustererType());
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return virtualArray;
}","private IVirtualArray cluster(ISet set,ClusterState clusterState){
  ArrayList<Integer> indices=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  Arrays.sort(clusterAssignments);
  for (int i=0; i < data.numInstances(); i++) {
    int temp=0;
    for (    double cluster : clusters) {
      if (clusterAssignments[i] == cluster) {
        indices.add(temp);
        break;
      }
      temp++;
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  IVirtualArray virtualArray=null;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),indices);
 else   if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),indices);
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(""String_Node_Str"",0,0f,0,true);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,clusterState.getClustererType());
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.9083132436425848
58654,"/** 
 * Function called any time a update is triggered external
 * @param
 */
@Override protected void reactOnExternalSelection(boolean scrollToSelection){
  if (bRenderGeneTree == true) {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<Integer> setMouseOverElements=contentSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=contentSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
      setDisplayListDirty();
    }
  }
 else {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<Integer> setMouseOverElements=storageSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=storageSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
      setDisplayListDirty();
    }
  }
}","/** 
 * Function called any time a update is triggered external
 * @param
 */
@Override protected void reactOnExternalSelection(boolean scrollToSelection){
  if (bRenderGeneTree == true) {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<Integer> setMouseOverElements=contentSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=contentSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
    }
  }
 else {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<Integer> setMouseOverElements=storageSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=storageSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
    }
  }
}",0.9832466782206816
58655,"@Override public void clearAllSelections(){
  fPosCut=0;
  iMaxDepth=Integer.MAX_VALUE;
  iAlClusterNodes.clear();
  buildNewGroupList();
  resetAllTreeSelections();
  bRedrawDendrogram=true;
  bEnableDepthCheck=false;
}","@Override public void clearAllSelections(){
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
}",0.5126760563380282
58656,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType=ESelectionType.NORMAL;
switch (ePickingType) {
case DENDROGRAM_CUT_SELECTION:
switch (pickingMode) {
case CLICKED:
      break;
case DRAGGED:
    bIsDraggingActive=true;
  setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case DENDROGRAM_GENE_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
if (contentSelectionManager.checkStatus(iExternalID) == false && storageSelectionManager.checkStatus(iExternalID) == false) break;
if (generalManager.getUseCase().getUseCaseMode() != EUseCaseMode.GENETIC_DATA) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
break;
}
if (eSelectionType != ESelectionType.NORMAL) {
ISelectionDelta selectionDelta=null;
SelectionManager selectionManager=null;
selectionManager=contentSelectionManager;
selectionManager.clearSelection(eSelectionType);
selectionManager.addToType(eSelectionType,iExternalID);
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
break;
case DENDROGRAM_GENE_NODE_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
}
if (eSelectionType != ESelectionType.NORMAL && tree.getNodeByNumber(iExternalID) != null) {
ClusterNodeSelectionEvent clusterNodeEvent=new ClusterNodeSelectionEvent();
SelectionDelta selectionDeltaClusterNode=new SelectionDelta(EIDType.CLUSTER_NUMBER);
selectionDeltaClusterNode.addSelection(iExternalID,eSelectionType);
clusterNodeEvent.setSelectionDelta(selectionDeltaClusterNode);
eventPublisher.triggerEvent(clusterNodeEvent);
}
break;
case DENDROGRAM_EXPERIMENT_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
if (contentSelectionManager.checkStatus(iExternalID) == false && storageSelectionManager.checkStatus(iExternalID) == false) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(iExternalID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
break;
}
if (eSelectionType != ESelectionType.NORMAL) {
ISelectionDelta selectionDelta=null;
SelectionManager selectionManager=null;
selectionManager=storageSelectionManager;
selectionManager.clearSelection(eSelectionType);
selectionManager.addToType(eSelectionType,iExternalID);
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType=ESelectionType.NORMAL;
switch (ePickingType) {
case DENDROGRAM_CUT_SELECTION:
switch (pickingMode) {
case CLICKED:
      break;
case DRAGGED:
    bIsDraggingActive=true;
  setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case DENDROGRAM_GENE_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
if (contentSelectionManager.checkStatus(iExternalID) == false && storageSelectionManager.checkStatus(iExternalID) == false) break;
if (generalManager.getUseCase().getUseCaseMode() != EUseCaseMode.GENETIC_DATA) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setID(EIDType.EXPRESSION_INDEX,iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
break;
}
if (eSelectionType != ESelectionType.NORMAL) {
resetAllTreeSelections();
if (tree.getNodeByNumber(iExternalID) != null) tree.getNodeByNumber(iExternalID).setSelectionType(eSelectionType);
ISelectionDelta selectionDelta=null;
SelectionManager selectionManager=null;
selectionManager=contentSelectionManager;
selectionManager.clearSelection(eSelectionType);
selectionManager.addToType(eSelectionType,iExternalID);
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
case DENDROGRAM_GENE_NODE_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
}
if (eSelectionType != ESelectionType.NORMAL && tree.getNodeByNumber(iExternalID) != null) {
resetAllTreeSelections();
tree.getNodeByNumber(iExternalID).setSelectionType(eSelectionType);
ClusterNodeSelectionEvent clusterNodeEvent=new ClusterNodeSelectionEvent();
SelectionDelta selectionDeltaClusterNode=new SelectionDelta(EIDType.CLUSTER_NUMBER);
selectionDeltaClusterNode.addSelection(iExternalID,eSelectionType);
clusterNodeEvent.setSelectionDelta(selectionDeltaClusterNode);
eventPublisher.triggerEvent(clusterNodeEvent);
}
break;
case DENDROGRAM_EXPERIMENT_LEAF_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case DRAGGED:
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
if (contentSelectionManager.checkStatus(iExternalID) == false && storageSelectionManager.checkStatus(iExternalID) == false) break;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
ExperimentContextMenuItemContainer experimentContextMenuItemContainer=new ExperimentContextMenuItemContainer();
experimentContextMenuItemContainer.setID(iExternalID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
break;
}
if (eSelectionType != ESelectionType.NORMAL) {
resetAllTreeSelections();
if (tree.getNodeByNumber(iExternalID) != null) tree.getNodeByNumber(iExternalID).setSelectionType(eSelectionType);
ISelectionDelta selectionDelta=null;
SelectionManager selectionManager=null;
selectionManager=storageSelectionManager;
selectionManager.clearSelection(eSelectionType);
selectionManager.addToType(eSelectionType,iExternalID);
selectionDelta=selectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
setDisplayListDirty();
}
break;
}
}",0.9177130318176276
58657,"/** 
 * Handels keyboard events for controlling level 2
 * @param bArrowUp true for arrow up, false for arrow down
 */
public void handleArrowAndAltPressed(boolean bArrowUp){
  int iNrElementsToShift=(int)Math.floor(Math.sqrt(iSamplesLevel2));
  if (bArrowUp) {
    if (iFirstSampleLevel2 > iNrElementsToShift + 1) {
      iLastSampleLevel2-=iNrElementsToShift;
      iFirstSampleLevel2-=iNrElementsToShift;
      setEmbeddedHeatMapData();
      setDisplayListDirty();
    }
 else     if (iFirstSampleLevel2 > 0) {
      iLastSampleLevel2--;
      iFirstSampleLevel2--;
      setEmbeddedHeatMapData();
      setDisplayListDirty();
    }
  }
 else {
    if (iLastSampleLevel2 < iSamplesLevel2 - 1 - iNrElementsToShift) {
      iLastSampleLevel2+=iNrElementsToShift;
      iFirstSampleLevel2+=iNrElementsToShift;
      setEmbeddedHeatMapData();
      setDisplayListDirty();
    }
 else     if (iLastSampleLevel2 < iSamplesLevel2 - 1) {
      iLastSampleLevel2++;
      iFirstSampleLevel2++;
      setEmbeddedHeatMapData();
      setDisplayListDirty();
    }
  }
}","/** 
 * Handels keyboard events for controlling level 2
 * @param bArrowUp true for arrow up, false for arrow down
 */
public void handleArrowAndAltPressed(boolean bArrowUp){
  int iNrElementsToShift=(int)Math.floor(Math.sqrt(iSamplesLevel2));
  if (bArrowUp) {
    if (iFirstSampleLevel2 > iNrElementsToShift + 1) {
      iLastSampleLevel2-=iNrElementsToShift;
      iFirstSampleLevel2-=iNrElementsToShift;
      setDisplayListDirty();
    }
 else     if (iFirstSampleLevel2 > 0) {
      iLastSampleLevel2--;
      iFirstSampleLevel2--;
      setDisplayListDirty();
    }
  }
 else {
    if (iLastSampleLevel2 < iSamplesLevel2 - 1 - iNrElementsToShift) {
      iLastSampleLevel2+=iNrElementsToShift;
      iFirstSampleLevel2+=iNrElementsToShift;
      setDisplayListDirty();
    }
 else     if (iLastSampleLevel2 < iSamplesLevel2 - 1) {
      iLastSampleLevel2++;
      iFirstSampleLevel2++;
      setDisplayListDirty();
    }
  }
}",0.9247743229689068
58658,"@Override public void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursorLevel1();
  if (bSkipLevel2 == false) {
    initPosCursorLevel2();
  }
  glHeatMapView.setSet(set);
  glHeatMapView.setContentVAType(EVAType.CONTENT_EMBEDDED_HM);
  glHeatMapView.initData();
  glGeneDendrogramView.setSet(set);
  glGeneDendrogramView.setContentVAType(EVAType.CONTENT);
  glGeneDendrogramView.initData();
  glExperimentDendrogramView.setSet(set);
  glExperimentDendrogramView.setContentVAType(EVAType.STORAGE);
  glExperimentDendrogramView.initData();
  if (bSkipLevel2 == false)   bRedrawTextures=true;
}","@Override public void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursorLevel1();
  if (bSkipLevel2 == false) {
    initPosCursorLevel2();
  }
  glHeatMapView.setSet(set);
  glHeatMapView.setContentVAType(EVAType.CONTENT_EMBEDDED_HM);
  glHeatMapView.initData();
  glGeneDendrogramView.setSet(set);
  glGeneDendrogramView.setContentVAType(EVAType.CONTENT);
  glGeneDendrogramView.initData();
  glExperimentDendrogramView.setSet(set);
  glExperimentDendrogramView.setContentVAType(EVAType.CONTENT);
  glExperimentDendrogramView.initData();
  if (bSkipLevel2 == false)   bRedrawTextures=true;
}",0.9904912836767036
58659,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      contentVA.getGroupList().get(iExternalID).toggleSelectionType();
    deactivateAllDraggingCursor();
  bActivateDraggingGenes=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingGenes == false) return;
if (bDragDropGeneGroup == false) {
bDragDropGeneGroup=true;
bDragDropExpGroup=false;
iGeneGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=contentVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(true,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
storageVA.getGroupList().get(iExternalID).toggleSelectionType();
deactivateAllDraggingCursor();
bActivateDraggingExperiments=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingExperiments == false) return;
if (bDragDropExpGroup == false) {
bDragDropExpGroup=true;
bDragDropGeneGroup=false;
iExpGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=storageVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(false,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
bGeneDendrogramActive=false;
glHeatMapView.setDisplayListDirty();
glExperimentDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_VERTICAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bExperimentDendrogramActive=bExperimentDendrogramActive == true ? false : true;
glHeatMapView.setDisplayListDirty();
glGeneDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_HORIZONTAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bGeneDendrogramActive=bGeneDendrogramActive == true ? false : true;
bIsHeatmapInFocus=false;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingActiveLevel1=true;
bDisableBlockDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingWholeBlockLevel1=true;
bDisableCursorDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingActiveLevel2=true;
bDisableBlockDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingWholeBlockLevel2=true;
bDisableCursorDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel1=pick.getPickedPoint();
setEmbeddedHeatMapData();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel2=pick.getPickedPoint();
setEmbeddedHeatMapData();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      contentVA.getGroupList().get(iExternalID).toggleSelectionType();
    deactivateAllDraggingCursor();
  bActivateDraggingGenes=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingGenes == false) return;
if (bDragDropGeneGroup == false) {
bDragDropGeneGroup=true;
bDragDropExpGroup=false;
iGeneGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=contentVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(true,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
storageVA.getGroupList().get(iExternalID).toggleSelectionType();
deactivateAllDraggingCursor();
bActivateDraggingExperiments=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingExperiments == false) return;
if (bDragDropExpGroup == false) {
bDragDropExpGroup=true;
bDragDropGeneGroup=false;
iExpGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=storageVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(false,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
bGeneDendrogramActive=false;
glHeatMapView.setDisplayListDirty();
glExperimentDendrogramView.setRedrawDendrogram();
glExperimentDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_VERTICAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bExperimentDendrogramActive=bExperimentDendrogramActive == true ? false : true;
glHeatMapView.setDisplayListDirty();
glGeneDendrogramView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_ACTIVATE_HORIZONTAL_DENDROGRAM:
switch (pickingMode) {
case CLICKED:
bGeneDendrogramActive=bGeneDendrogramActive == true ? false : true;
bIsHeatmapInFocus=false;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingActiveLevel1=true;
bDisableBlockDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingWholeBlockLevel1=true;
bDisableCursorDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingActiveLevel2=true;
bDisableBlockDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingWholeBlockLevel2=true;
bDisableCursorDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel1=pick.getPickedPoint();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel2=pick.getPickedPoint();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
}",0.9924152290303392
58660,"/** 
 * Determine selected element in stage 1 (overview bar)
 * @param gl
 */
private void handleTexturePickingLevel1(GL gl){
  int iNumberSample=iNumberOfElements;
  float fOffsety;
  float fHeightSample=viewFrustum.getHeight() / iNumberSample;
  float[] fArPickingCoords=new float[3];
  if (pickingPointLevel1 != null) {
    fArPickingCoords=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickingPointLevel1.x,pickingPointLevel1.y);
    fOffsety=viewFrustum.getHeight() - fArPickingCoords[1] + 0.4f;
    iPickedSampleLevel1=(int)Math.ceil(fOffsety / fHeightSample);
    pickingPointLevel1=null;
    if (iSamplesLevel2 % 2 == 0) {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.floor(iSamplesLevel2 / 2) + 1;
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
 else {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.ceil(iSamplesLevel2 / 2);
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
    if (iPickedSampleLevel1 < iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.floor(iSamplesLevel2 / 2);
      iFirstSampleLevel1=0;
      iLastSampleLevel1=iSamplesLevel2 - 1;
    }
 else     if (iPickedSampleLevel1 > iNumberSample - 1 - iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.ceil(iNumberSample - iSamplesLevel2 / 2);
      iLastSampleLevel1=iNumberSample - 1;
      iFirstSampleLevel1=iNumberSample - iSamplesLevel2;
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
}","/** 
 * Determine selected element in stage 1 (overview bar)
 * @param gl
 */
private void handleTexturePickingLevel1(GL gl){
  int iNumberSample=iNumberOfElements;
  float fOffsety;
  float fHeightSample=viewFrustum.getHeight() / iNumberSample;
  float[] fArPickingCoords=new float[3];
  if (pickingPointLevel1 != null) {
    fArPickingCoords=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickingPointLevel1.x,pickingPointLevel1.y);
    fOffsety=viewFrustum.getHeight() - fArPickingCoords[1] + 0.4f;
    iPickedSampleLevel1=(int)Math.ceil(fOffsety / fHeightSample);
    pickingPointLevel1=null;
    if (iSamplesLevel2 % 2 == 0) {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.floor(iSamplesLevel2 / 2) + 1;
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
 else {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.ceil(iSamplesLevel2 / 2);
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
    if (iPickedSampleLevel1 < iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.floor(iSamplesLevel2 / 2);
      iFirstSampleLevel1=0;
      iLastSampleLevel1=iSamplesLevel2 - 1;
    }
 else     if (iPickedSampleLevel1 > iNumberSample - 1 - iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.ceil(iNumberSample - iSamplesLevel2 / 2);
      iLastSampleLevel1=iNumberSample - 1;
      iFirstSampleLevel1=iNumberSample - iSamplesLevel2;
    }
  }
  setDisplayListDirty();
}",0.9906976744186048
58661,"/** 
 * Determine selected element in stage 2 (texture)
 * @param gl
 */
private void handleTexturePickingLevel2(GL gl){
  int iNumberSample=iSamplesLevel2;
  float fOffsety;
  float fHeightSample=viewFrustum.getHeight() / iNumberSample;
  float[] fArPickingCoords=new float[3];
  if (pickingPointLevel2 != null) {
    fArPickingCoords=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickingPointLevel2.x,pickingPointLevel2.y);
    fOffsety=viewFrustum.getHeight() - fArPickingCoords[1] + 0.4f;
    iPickedSampleLevel2=(int)Math.ceil(fOffsety / fHeightSample);
    pickingPointLevel2=null;
    if (iSamplesLevel2 % 2 == 0) {
      iFirstSampleLevel2=iPickedSampleLevel2 - (int)Math.floor(iSamplesPerHeatmap / 2) + 1;
      iLastSampleLevel2=iPickedSampleLevel2 + (int)Math.floor(iSamplesPerHeatmap / 2);
    }
 else {
      iFirstSampleLevel2=iPickedSampleLevel2 - (int)Math.ceil(iSamplesPerHeatmap / 2);
      iLastSampleLevel2=iPickedSampleLevel2 + (int)Math.floor(iSamplesPerHeatmap / 2) - 1;
    }
    if (iPickedSampleLevel2 < iSamplesPerHeatmap / 2) {
      iPickedSampleLevel2=(int)Math.floor(iSamplesPerHeatmap / 2);
      iFirstSampleLevel2=0;
      iLastSampleLevel2=iSamplesPerHeatmap - 1;
    }
 else     if (iPickedSampleLevel2 > iNumberSample - 1 - iSamplesPerHeatmap / 2) {
      iPickedSampleLevel2=(int)Math.ceil(iNumberSample - iSamplesPerHeatmap / 2);
      iLastSampleLevel2=iNumberSample - 1;
      iFirstSampleLevel2=iNumberSample - iSamplesPerHeatmap;
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
}","/** 
 * Determine selected element in stage 2 (texture)
 * @param gl
 */
private void handleTexturePickingLevel2(GL gl){
  int iNumberSample=iSamplesLevel2;
  float fOffsety;
  float fHeightSample=viewFrustum.getHeight() / iNumberSample;
  float[] fArPickingCoords=new float[3];
  if (pickingPointLevel2 != null) {
    fArPickingCoords=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickingPointLevel2.x,pickingPointLevel2.y);
    fOffsety=viewFrustum.getHeight() - fArPickingCoords[1] + 0.4f;
    iPickedSampleLevel2=(int)Math.ceil(fOffsety / fHeightSample);
    pickingPointLevel2=null;
    if (iSamplesLevel2 % 2 == 0) {
      iFirstSampleLevel2=iPickedSampleLevel2 - (int)Math.floor(iSamplesPerHeatmap / 2) + 1;
      iLastSampleLevel2=iPickedSampleLevel2 + (int)Math.floor(iSamplesPerHeatmap / 2);
    }
 else {
      iFirstSampleLevel2=iPickedSampleLevel2 - (int)Math.ceil(iSamplesPerHeatmap / 2);
      iLastSampleLevel2=iPickedSampleLevel2 + (int)Math.floor(iSamplesPerHeatmap / 2) - 1;
    }
    if (iPickedSampleLevel2 < iSamplesPerHeatmap / 2) {
      iPickedSampleLevel2=(int)Math.floor(iSamplesPerHeatmap / 2);
      iFirstSampleLevel2=0;
      iLastSampleLevel2=iSamplesPerHeatmap - 1;
    }
 else     if (iPickedSampleLevel2 > iNumberSample - 1 - iSamplesPerHeatmap / 2) {
      iPickedSampleLevel2=(int)Math.ceil(iNumberSample - iSamplesPerHeatmap / 2);
      iLastSampleLevel2=iNumberSample - 1;
      iFirstSampleLevel2=iNumberSample - iSamplesPerHeatmap;
    }
  }
  setDisplayListDirty();
}",0.990914990266061
58662,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    glGeneDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4f(0,0,0,0.15f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.1f,0.4f,0);
  if (bGeneDendrogramActive)   gl.glTranslatef(1.58f,0,0);
  renderDendrogramButton(gl);
  if (contentVA.getGroupList() != null && bSkipLevel1 == false)   renderClassAssignmentsGenesLevel1(gl);
  if (bSkipLevel1 == false) {
    handleTexturePickingLevel1(gl);
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    renderCursorLevel1(gl);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    float fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iLastSampleLevel1 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      try {
        lastIndexOfSubTree=contentVA.get(iLastSampleLevel1);
      }
 catch (      IndexOutOfBoundsException e1) {
        lastIndexOfSubTree=contentVA.get(iLastSampleLevel1 - 1);
      }
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1),lastIndexOfSubTree,iSamplesLevel2,GAP_LEVEL1_2 / 2,fHeightSubTree);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    gl.glColor4f(1f,1f,1f,1f);
  }
 else {
    gl.glColor4f(1f,1f,1f,1f);
  }
  if (bIsHeatmapInFocus || bGeneDendrogramActive) {
    fAnimationScale=0.2f;
  }
 else {
    fAnimationScale=1.0f;
  }
  if (bSkipLevel2 == false) {
    handleTexturePickingLevel2(gl);
    renderTextureHeatMap(gl);
    renderMarkerTexture(gl);
    renderSelectedElementsTexture(gl);
    if (contentVA.getGroupList() != null)     renderClassAssignmentsGenesLevel2(gl);
    if (storageVA.getGroupList() != null)     renderClassAssignmentsExperimentsLevel2(gl);
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2,0,0);
    float fHeightSubTree=0;
    if (bExperimentDendrogramActive)     fHeightSubTree=viewFrustum.getHeight() - 1.45f;
 else     fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2);
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1 + iFirstSampleLevel2),lastIndexOfSubTree,iSamplesPerHeatmap,GAP_LEVEL2_3 / 2,fHeightSubTree);
    gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2),0,0);
  }
  setEmbeddedHeatMapData();
  if (bSkipLevel2 == false) {
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale,0,0);
    renderCursorLevel2(gl);
  }
  if (contentVA.getGroupList() != null)   renderClassAssignmentsGenesLevel3(gl);
  if (bSkipLevel2 == false)   gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale),0,0);
  if (storageVA.getGroupList() != null) {
    renderClassAssignmentsExperimentsLevel3(gl);
  }
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
  }
  if (bGeneDendrogramActive)   gl.glTranslatef(-1.58f,0,0);
  gl.glTranslatef(-0.1f,-0.4f,0);
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    glGeneDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4f(0,0,0,0.15f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.1f,0.4f,0);
  if (bGeneDendrogramActive)   gl.glTranslatef(1.58f,0,0);
  renderDendrogramButton(gl);
  if (contentVA.getGroupList() != null && bSkipLevel1 == false)   renderClassAssignmentsGenesLevel1(gl);
  if (bSkipLevel1 == false) {
    handleTexturePickingLevel1(gl);
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    renderCursorLevel1(gl);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    float fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iLastSampleLevel1 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      try {
        lastIndexOfSubTree=contentVA.get(iLastSampleLevel1);
      }
 catch (      IndexOutOfBoundsException e1) {
        lastIndexOfSubTree=contentVA.get(iLastSampleLevel1 - 1);
      }
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1),lastIndexOfSubTree,iSamplesLevel2,GAP_LEVEL1_2 / 2,fHeightSubTree);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    gl.glColor4f(1f,1f,1f,1f);
  }
 else {
    gl.glColor4f(1f,1f,1f,1f);
  }
  if (bIsHeatmapInFocus || bGeneDendrogramActive) {
    fAnimationScale=0.2f;
  }
 else {
    fAnimationScale=1.0f;
  }
  if (bSkipLevel2 == false) {
    handleTexturePickingLevel2(gl);
    renderTextureHeatMap(gl);
    renderMarkerTexture(gl);
    renderSelectedElementsTexture(gl);
    if (contentVA.getGroupList() != null)     renderClassAssignmentsGenesLevel2(gl);
    if (storageVA.getGroupList() != null)     renderClassAssignmentsExperimentsLevel2(gl);
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2,0,0);
    float fHeightSubTree=0;
    if (bExperimentDendrogramActive)     fHeightSubTree=viewFrustum.getHeight() - 1.45f;
 else     fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      try {
        lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2);
      }
 catch (      IndexOutOfBoundsException e1) {
        lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2 - 1);
      }
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1 + iFirstSampleLevel2),lastIndexOfSubTree,iSamplesPerHeatmap,GAP_LEVEL2_3 / 2,fHeightSubTree);
    gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2),0,0);
  }
  setEmbeddedHeatMapData();
  if (bSkipLevel2 == false) {
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale,0,0);
    renderCursorLevel2(gl);
  }
  if (contentVA.getGroupList() != null)   renderClassAssignmentsGenesLevel3(gl);
  if (bSkipLevel2 == false)   gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale),0,0);
  if (storageVA.getGroupList() != null) {
    renderClassAssignmentsExperimentsLevel3(gl);
  }
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
  }
  if (bGeneDendrogramActive)   gl.glTranslatef(-1.58f,0,0);
  gl.glTranslatef(-0.1f,-0.4f,0);
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glEndList();
}",0.9800835997049422
58663,"@Override public void display(GL gl){
  processEvents();
  if (generalManager.isWiiModeActive()) {
    handleWiiInput();
  }
  if (generalManager.getTrackDataProvider().isTrackModeActive()) {
    handleTrackInput(gl);
  }
  if (bIsDraggingActiveLevel2) {
    handleCursorDraggingLevel2(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingActiveLevel2=false;
    }
  }
  if (bIsDraggingWholeBlockLevel2) {
    handleBlockDraggingLevel2(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingWholeBlockLevel2=false;
    }
  }
  if (bIsDraggingActiveLevel1) {
    handleCursorDraggingLevel1(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingActiveLevel1=false;
    }
  }
  if (bIsDraggingWholeBlockLevel1) {
    handleBlockDraggingLevel1(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingWholeBlockLevel1=false;
    }
  }
  if (bDragDropExpGroup) {
    handleDragDropGroupExperiments(gl);
    if (glMouseListener.wasMouseReleased()) {
      bDragDropExpGroup=false;
    }
  }
  if (bDragDropGeneGroup) {
    handleDragDropGroupGenes(gl);
    if (glMouseListener.wasMouseReleased()) {
      bDragDropGeneGroup=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  float fright=0.0f;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0;
  if (bSkipLevel1 == false) {
    gl.glTranslatef(GAP_LEVEL2_3,0,0);
  }
  if (bSkipLevel2 == false) {
    if (bIsHeatmapInFocus) {
      fright=viewFrustum.getWidth() - 1.2f;
      fleftOffset=0.095f + GAP_LEVEL1_2 + viewFrustum.getWidth() / 4f * 0.2f;
    }
 else {
      fright=viewFrustum.getWidth() - 2.75f;
      fleftOffset=0.075f + GAP_LEVEL1_2 + viewFrustum.getWidth() / 4f;
    }
    if (glHeatMapView.isInDefaultOrientation()) {
      gl.glTranslatef(fleftOffset,+0.4f,0);
    }
 else {
      gl.glTranslatef(fleftOffset,-0.2f,0);
    }
  }
 else {
    ftop=viewFrustum.getTop();
    if (bGeneDendrogramActive) {
      fright=viewFrustum.getWidth() - 1.4f;
      gl.glTranslatef(1.7f,-0.2f,0);
    }
 else {
      fright=viewFrustum.getWidth();
      gl.glTranslatef(0.1f,-0.2f,0);
    }
  }
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - 1.45f);
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  fWidthEHM=glHeatMapView.getViewFrustum().getWidth() - 0.95f;
  if (bExperimentDendrogramActive) {
    gl.glTranslatef(0f,3.6f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(ftop - 3.6f);
    glExperimentDendrogramView.getViewFrustum().setRight(fWidthEHM);
    glExperimentDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-3.6f,0f);
  }
  if (bSkipLevel2 == false) {
    if (glHeatMapView.isInDefaultOrientation()) {
      gl.glTranslatef(-fleftOffset,-0.4f,0);
    }
 else {
      gl.glTranslatef(-fleftOffset,+0.2f,0);
    }
  }
 else {
    if (bGeneDendrogramActive) {
      gl.glTranslatef(-1.7f,+0.2f,0);
    }
 else {
      gl.glTranslatef(-0.1f,+0.2f,0);
    }
  }
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL2_3,0,0);
  }
  if (bGeneDendrogramActive) {
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.setDisplayListDirty();
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
  contextMenu.render(gl,this);
}","@Override public void display(GL gl){
  processEvents();
  if (generalManager.isWiiModeActive()) {
    handleWiiInput();
  }
  if (generalManager.getTrackDataProvider().isTrackModeActive()) {
    handleTrackInput(gl);
  }
  if (bIsDraggingActiveLevel2) {
    handleCursorDraggingLevel2(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingActiveLevel2=false;
    }
  }
  if (bIsDraggingWholeBlockLevel2) {
    handleBlockDraggingLevel2(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingWholeBlockLevel2=false;
    }
  }
  if (bIsDraggingActiveLevel1) {
    handleCursorDraggingLevel1(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingActiveLevel1=false;
    }
  }
  if (bIsDraggingWholeBlockLevel1) {
    handleBlockDraggingLevel1(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingWholeBlockLevel1=false;
    }
  }
  if (bDragDropExpGroup) {
    handleDragDropGroupExperiments(gl);
    if (glMouseListener.wasMouseReleased()) {
      bDragDropExpGroup=false;
    }
  }
  if (bDragDropGeneGroup) {
    handleDragDropGroupGenes(gl);
    if (glMouseListener.wasMouseReleased()) {
      bDragDropGeneGroup=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  float fright=0.0f;
  float ftop=viewFrustum.getTop();
  float fleftOffset=0;
  if (bSkipLevel1 == false) {
    gl.glTranslatef(GAP_LEVEL2_3,0,0);
  }
  if (bSkipLevel2 == false) {
    if (bIsHeatmapInFocus) {
      fright=viewFrustum.getWidth() - 1.2f;
      fleftOffset=0.095f + GAP_LEVEL1_2 + viewFrustum.getWidth() / 4f * 0.2f;
    }
 else {
      fright=viewFrustum.getWidth() - 2.75f;
      fleftOffset=0.075f + GAP_LEVEL1_2 + viewFrustum.getWidth() / 4f;
    }
    if (glHeatMapView.isInDefaultOrientation()) {
      gl.glTranslatef(fleftOffset,+0.4f,0);
    }
 else {
      gl.glTranslatef(fleftOffset,-0.2f,0);
    }
  }
 else {
    ftop=viewFrustum.getTop();
    if (bGeneDendrogramActive) {
      fright=viewFrustum.getWidth() - 1.4f;
      gl.glTranslatef(1.7f,-0.2f,0);
    }
 else {
      fright=viewFrustum.getWidth();
      gl.glTranslatef(0.1f,-0.2f,0);
    }
  }
  if (bExperimentDendrogramActive) {
    glHeatMapView.getViewFrustum().setTop(ftop - 1.45f);
  }
 else {
    glHeatMapView.getViewFrustum().setTop(ftop);
  }
  glHeatMapView.getViewFrustum().setRight(fright);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EMBEDDED_HEATMAP_SELECTION,glHeatMapView.getID()));
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  fWidthEHM=glHeatMapView.getViewFrustum().getWidth() - 0.95f;
  if (bExperimentDendrogramActive) {
    gl.glTranslatef(0f,3.6f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_EXPERIMENT_DENDROGRAM_SELECTION,glExperimentDendrogramView.getID()));
    glExperimentDendrogramView.getViewFrustum().setTop(ftop - 3.6f);
    glExperimentDendrogramView.getViewFrustum().setRight(fWidthEHM);
    glExperimentDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-3.6f,0f);
  }
  if (bSkipLevel2 == false) {
    if (glHeatMapView.isInDefaultOrientation()) {
      gl.glTranslatef(-fleftOffset,-0.4f,0);
    }
 else {
      gl.glTranslatef(-fleftOffset,+0.2f,0);
    }
  }
 else {
    if (bGeneDendrogramActive) {
      gl.glTranslatef(-1.7f,+0.2f,0);
    }
 else {
      gl.glTranslatef(-0.1f,+0.2f,0);
    }
  }
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL2_3,0,0);
  }
  if (bGeneDendrogramActive) {
    gl.glTranslatef(0f,0.4f,0f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENE_DENDROGRAM_SELECTION,glGeneDendrogramView.getID()));
    glGeneDendrogramView.getViewFrustum().setTop(ftop - 0.6f);
    glGeneDendrogramView.getViewFrustum().setRight(1.7f);
    glGeneDendrogramView.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(0f,-0.4f,0f);
  }
  contextMenu.render(gl,this);
}",0.9871114480667172
58664,"/** 
 * Function used for updating position of block (block of elements rendered in level 2) in case of dragging
 * @param gl
 */
private void handleBlockDraggingLevel1(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iNumberOfElements;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
  if (iSamplesLevel2 % 2 == 0) {
    if ((iselElement - (int)Math.floor(iSamplesLevel2 / 2) + 1) >= 0 && (iselElement + (int)Math.floor(iSamplesLevel2 / 2)) < iNumberOfElements) {
      iFirstSampleLevel1=iselElement - (int)Math.floor(iSamplesLevel2 / 2) + 1;
      fPosCursorFirstElementLevel1=fTextureHeight - (iFirstSampleLevel1 * fStep);
      iLastSampleLevel1=iselElement + (int)Math.floor(iSamplesLevel2 / 2);
      fPosCursorLastElementLevel1=fTextureHeight - ((iLastSampleLevel1 + 1) * fStep);
    }
  }
 else {
    if ((iselElement - (int)Math.ceil(iSamplesLevel2 / 2)) >= 0 && (iselElement + (int)Math.floor(iSamplesLevel2 / 2)) < iNumberOfElements) {
      iFirstSampleLevel1=iselElement - (int)Math.ceil(iSamplesLevel2 / 2);
      fPosCursorFirstElementLevel1=fTextureHeight - (iFirstSampleLevel1 * fStep);
      iLastSampleLevel1=iselElement + (int)Math.floor(iSamplesLevel2 / 2);
      fPosCursorLastElementLevel1=fTextureHeight - ((iLastSampleLevel1 + 1) * fStep);
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingWholeBlockLevel1=false;
    bDisableCursorDraggingLevel1=false;
    bActivateDraggingLevel1=false;
  }
}","/** 
 * Function used for updating position of block (block of elements rendered in level 2) in case of dragging
 * @param gl
 */
private void handleBlockDraggingLevel1(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iNumberOfElements;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
  if (iSamplesLevel2 % 2 == 0) {
    if ((iselElement - (int)Math.floor(iSamplesLevel2 / 2) + 1) >= 0 && (iselElement + (int)Math.floor(iSamplesLevel2 / 2)) < iNumberOfElements) {
      iFirstSampleLevel1=iselElement - (int)Math.floor(iSamplesLevel2 / 2) + 1;
      fPosCursorFirstElementLevel1=fTextureHeight - (iFirstSampleLevel1 * fStep);
      iLastSampleLevel1=iselElement + (int)Math.floor(iSamplesLevel2 / 2);
      fPosCursorLastElementLevel1=fTextureHeight - ((iLastSampleLevel1 + 1) * fStep);
    }
  }
 else {
    if ((iselElement - (int)Math.ceil(iSamplesLevel2 / 2)) >= 0 && (iselElement + (int)Math.floor(iSamplesLevel2 / 2)) < iNumberOfElements) {
      iFirstSampleLevel1=iselElement - (int)Math.ceil(iSamplesLevel2 / 2);
      fPosCursorFirstElementLevel1=fTextureHeight - (iFirstSampleLevel1 * fStep);
      iLastSampleLevel1=iselElement + (int)Math.floor(iSamplesLevel2 / 2);
      fPosCursorLastElementLevel1=fTextureHeight - ((iLastSampleLevel1 + 1) * fStep);
    }
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingWholeBlockLevel1=false;
    bDisableCursorDraggingLevel1=false;
    bActivateDraggingLevel1=false;
  }
}",0.9924528301886792
58665,"/** 
 * Function used for updating position of block (block of elements rendered in level 3) in case of dragging
 * @param gl
 */
private void handleBlockDraggingLevel2(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iSamplesLevel2;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
  if (iSamplesPerHeatmap % 2 == 0) {
    if ((iselElement - (int)Math.floor(iSamplesPerHeatmap / 2) + 1) >= 0 && (iselElement + (int)Math.floor(iSamplesPerHeatmap / 2)) < iSamplesLevel2) {
      iFirstSampleLevel2=iselElement - (int)Math.floor(iSamplesPerHeatmap / 2) + 1;
      fPosCursorFirstElementLevel2=fTextureHeight - (iFirstSampleLevel2 * fStep);
      iLastSampleLevel2=iselElement + (int)Math.floor(iSamplesPerHeatmap / 2);
      fPosCursorLastElementLevel2=fTextureHeight - ((iLastSampleLevel2 + 1) * fStep);
    }
  }
 else {
    if ((iselElement - (int)Math.ceil(iSamplesPerHeatmap / 2)) >= 0 && (iselElement + (int)Math.floor(iSamplesPerHeatmap / 2)) < iSamplesLevel2) {
      iFirstSampleLevel2=iselElement - (int)Math.ceil(iSamplesPerHeatmap / 2);
      fPosCursorFirstElementLevel2=fTextureHeight - (iFirstSampleLevel2 * fStep);
      iLastSampleLevel2=iselElement + (int)Math.floor(iSamplesPerHeatmap / 2);
      fPosCursorLastElementLevel2=fTextureHeight - ((iLastSampleLevel2 + 1) * fStep);
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingWholeBlockLevel2=false;
    bDisableCursorDraggingLevel2=false;
    bActivateDraggingLevel2=false;
  }
}","/** 
 * Function used for updating position of block (block of elements rendered in level 3) in case of dragging
 * @param gl
 */
private void handleBlockDraggingLevel2(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iSamplesLevel2;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
  if (iSamplesPerHeatmap % 2 == 0) {
    if ((iselElement - (int)Math.floor(iSamplesPerHeatmap / 2) + 1) >= 0 && (iselElement + (int)Math.floor(iSamplesPerHeatmap / 2)) < iSamplesLevel2) {
      iFirstSampleLevel2=iselElement - (int)Math.floor(iSamplesPerHeatmap / 2) + 1;
      fPosCursorFirstElementLevel2=fTextureHeight - (iFirstSampleLevel2 * fStep);
      iLastSampleLevel2=iselElement + (int)Math.floor(iSamplesPerHeatmap / 2);
      fPosCursorLastElementLevel2=fTextureHeight - ((iLastSampleLevel2 + 1) * fStep);
    }
  }
 else {
    if ((iselElement - (int)Math.ceil(iSamplesPerHeatmap / 2)) >= 0 && (iselElement + (int)Math.floor(iSamplesPerHeatmap / 2)) < iSamplesLevel2) {
      iFirstSampleLevel2=iselElement - (int)Math.ceil(iSamplesPerHeatmap / 2);
      fPosCursorFirstElementLevel2=fTextureHeight - (iFirstSampleLevel2 * fStep);
      iLastSampleLevel2=iselElement + (int)Math.floor(iSamplesPerHeatmap / 2);
      fPosCursorLastElementLevel2=fTextureHeight - ((iLastSampleLevel2 + 1) * fStep);
    }
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingWholeBlockLevel2=false;
    bDisableCursorDraggingLevel2=false;
    bActivateDraggingLevel2=false;
  }
}",0.9925611052072264
58666,"@Override public void clearAllSelections(){
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  if (bSkipLevel1 == false)   initPosCursorLevel1();
  bRedrawTextures=true;
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  glHeatMapView.setDisplayListDirty();
  glGeneDendrogramView.setDisplayListDirty();
  glExperimentDendrogramView.setDisplayListDirty();
  if (storageVA.getGroupList() != null) {
    IGroupList groupList=storageVA.getGroupList();
    for (    Group group : groupList)     group.setSelectionType(ESelectionType.NORMAL);
  }
  if (contentVA.getGroupList() != null) {
    IGroupList groupList=contentVA.getGroupList();
    for (    Group group : groupList)     group.setSelectionType(ESelectionType.NORMAL);
  }
}","@Override public void clearAllSelections(){
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  if (bSkipLevel1 == false)   initPosCursorLevel1();
  bRedrawTextures=true;
  setDisplayListDirty();
  glHeatMapView.setDisplayListDirty();
  glGeneDendrogramView.setDisplayListDirty();
  glExperimentDendrogramView.setDisplayListDirty();
  if (storageVA.getGroupList() != null) {
    IGroupList groupList=storageVA.getGroupList();
    for (    Group group : groupList)     group.setSelectionType(ESelectionType.NORMAL);
  }
  if (contentVA.getGroupList() != null) {
    IGroupList groupList=contentVA.getGroupList();
    for (    Group group : groupList)     group.setSelectionType(ESelectionType.NORMAL);
  }
}",0.9815789473684212
58667,"/** 
 * Function used for updating cursor position of level 2 in case of dragging
 * @param gl
 */
private void handleCursorDraggingLevel2(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iSamplesLevel2;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel2 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel2 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel2 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorFirstElementLevel2=fYPosMouse;
        iFirstSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
      }
    }
  }
  if (iDraggedCursorLevel2 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel2 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel2 + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorLastElementLevel2=fYPosMouse;
        iLastSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
      }
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel2=false;
    bDisableBlockDraggingLevel2=false;
    bActivateDraggingLevel2=false;
  }
}","/** 
 * Function used for updating cursor position of level 2 in case of dragging
 * @param gl
 */
private void handleCursorDraggingLevel2(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iSamplesLevel2;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel2 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel2 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel2 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorFirstElementLevel2=fYPosMouse;
        iFirstSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
      }
    }
  }
  if (iDraggedCursorLevel2 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel2 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel2 + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorLastElementLevel2=fYPosMouse;
        iLastSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
      }
    }
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel2=false;
    bDisableBlockDraggingLevel2=false;
    bActivateDraggingLevel2=false;
  }
}",0.9922737306843268
58668,"/** 
 * Function used for updating cursor position of level 1 in case of dragging
 * @param gl
 */
private void handleCursorDraggingLevel1(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iNumberOfElements;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel1 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel1 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel1 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_LEVEL_2 && iNrSamples < MAX_SAMPLES_LEVEL_2) {
        fPosCursorFirstElementLevel1=fYPosMouse;
        iFirstSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  if (iDraggedCursorLevel1 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel1 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel1 + 1;
      if (iNrSamples >= MIN_SAMPLES_LEVEL_2 && iNrSamples < MAX_SAMPLES_LEVEL_2) {
        fPosCursorLastElementLevel1=fYPosMouse;
        iLastSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel1=false;
    bDisableBlockDraggingLevel1=false;
    bActivateDraggingLevel1=false;
  }
}","/** 
 * Function used for updating cursor position of level 1 in case of dragging
 * @param gl
 */
private void handleCursorDraggingLevel1(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iNumberOfElements;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel1 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel1 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel1 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_LEVEL_2 && iNrSamples < MAX_SAMPLES_LEVEL_2) {
        fPosCursorFirstElementLevel1=fYPosMouse;
        iFirstSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  if (iDraggedCursorLevel1 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel1 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel1 + 1;
      if (iNrSamples >= MIN_SAMPLES_LEVEL_2 && iNrSamples < MAX_SAMPLES_LEVEL_2) {
        fPosCursorLastElementLevel1=fYPosMouse;
        iLastSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  setDisplayListDirty();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel1=false;
    bDisableBlockDraggingLevel1=false;
    bActivateDraggingLevel1=false;
  }
}",0.9921831379117813
58669,"/** 
 * Function calculates for each node (gene or entity) in the sub dendrogram recursive the corresponding position inside the view frustum
 * @param currentNode
 * @return position of node in sub dendrogram
 */
private Vec3f determinePosRecSubTree(ClusterNode currentNode){
  Vec3f pos=new Vec3f();
  int temp=0;
  if (currentNode.isPartOfSubTree() == true) {
    temp=currentNode.getDepth();
    iMaxDepthSubTree=Math.max(iMaxDepthSubTree,temp);
  }
  if (tree.hasChildren(currentNode)) {
    ArrayList<ClusterNode> alChilds=tree.getChildren(currentNode);
    int iNrChildsNode=alChilds.size();
    Vec3f[] positions=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode node=(ClusterNode)alChilds.get(i);
      positions[i]=determinePosRecSubTree(node);
    }
    float fXmin=Float.MAX_VALUE;
    float fYmax=Float.MIN_VALUE;
    float fYmin=Float.MAX_VALUE;
    for (    Vec3f vec : positions) {
      fXmin=Math.min(fXmin,vec.x());
      fYmax=Math.max(fYmax,vec.y());
      fYmin=Math.min(fYmin,vec.y());
    }
    pos.setX(fXmin - fLevelWidthSubTree);
    pos.setY(fYmin + (fYmax - fYmin) / 2);
    pos.setZ(0f);
  }
 else {
    if (currentNode.isPartOfSubTree()) {
      pos.setY(yPosInitSubTree);
      yPosInitSubTree-=fSampleHeightSubTree;
      pos.setX(xGlobalMaxSubTree - fLevelWidthSubTree);
      pos.setZ(0f);
    }
  }
  currentNode.setPosSubTree(pos);
  return pos;
}","/** 
 * Function calculates for each node (gene or entity) in the sub dendrogram recursive the corresponding position inside the view frustum
 * @param currentNode
 * @return position of node in sub dendrogram
 */
private Vec3f determinePosRecSubTree(ClusterNode currentNode){
  Vec3f pos=new Vec3f();
  if (tree.hasChildren(currentNode)) {
    ArrayList<ClusterNode> alChilds=tree.getChildren(currentNode);
    int iNrChildsNode=alChilds.size();
    Vec3f[] positions=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode node=(ClusterNode)alChilds.get(i);
      positions[i]=determinePosRecSubTree(node);
    }
    float fXmin=Float.MAX_VALUE;
    float fYmax=Float.MIN_VALUE;
    float fYmin=Float.MAX_VALUE;
    for (    Vec3f vec : positions) {
      fXmin=Math.min(fXmin,vec.x());
      fYmax=Math.max(fYmax,vec.y());
      fYmin=Math.min(fYmin,vec.y());
    }
    pos.setX(fXmin - fLevelWidthSubTree);
    pos.setY(fYmin + (fYmax - fYmin) / 2);
    pos.setZ(0f);
  }
 else {
    if (currentNode.isPartOfSubTree()) {
      pos.setY(yPosInitSubTree);
      yPosInitSubTree-=fSampleHeightSubTree;
      pos.setX(xGlobalMaxSubTree - fLevelWidthSubTree);
      pos.setZ(0f);
    }
  }
  currentNode.setPosSubTree(pos);
  return pos;
}",0.9435364041604756
58670,"/** 
 * Functions renders a sub part of the dendrogram determined by two indexes (first and last element).
 * @param gl
 * @param fromIndex index of the first element in sub dendrogram
 * @param toIndex index (+1) of the last element in sub dendrogram
 * @param iNrLeafs number of leaf nodes in sub dendrogram
 * @param fWidth width of area for sub dendrogram
 * @param fHeight height of area for sub dendrogram
 */
public void renderSubTreeFromIndexToIndex(GL gl,int fromIndex,int toIndex,int iNrLeafs,float fWidth,float fHeight){
  if (tree == null)   return;
  determineNodesToRender(currentRootNode,fromIndex,toIndex,false);
  removeWronglySelectedNodes(currentRootNode);
  iMaxDepthSubTree=0;
  yPosInitSubTree=fHeight;
  xGlobalMaxSubTree=fWidth;
  determinePosRecSubTree(currentRootNode);
  fLevelWidthSubTree=fWidth / (iMaxDepthSubTree + 1);
  fSampleHeightSubTree=fHeight / iNrLeafs;
  gl.glTranslatef(0,-fSampleHeightSubTree / 2,0);
  renderSubTreeRec(gl,currentRootNode);
  gl.glTranslatef(0,+fSampleHeightSubTree / 2,0);
}","/** 
 * Functions renders a sub part of the dendrogram determined by two indexes (first and last element).
 * @param gl
 * @param fromIndex index of the first element in sub dendrogram
 * @param toIndex index (+1) of the last element in sub dendrogram
 * @param iNrLeafs number of leaf nodes in sub dendrogram
 * @param fWidth width of area for sub dendrogram
 * @param fHeight height of area for sub dendrogram
 */
public void renderSubTreeFromIndexToIndex(GL gl,int fromIndex,int toIndex,int iNrLeafs,float fWidth,float fHeight){
  if (tree == null)   return;
  determineNodesToRender(currentRootNode,fromIndex,toIndex,false);
  removeWronglySelectedNodes(currentRootNode);
  iMaxDepthSubTree=0;
  yPosInitSubTree=fHeight;
  xGlobalMaxSubTree=fWidth;
  determineMaxDepthSubTree(currentRootNode);
  fLevelWidthSubTree=fWidth / (iMaxDepthSubTree + 1);
  fSampleHeightSubTree=fHeight / iNrLeafs;
  determinePosRecSubTree(currentRootNode);
  gl.glTranslatef(0,-fSampleHeightSubTree / 2,0);
  gl.glLineWidth(1f);
  renderSubTreeRec(gl,currentRootNode);
  gl.glTranslatef(0,+fSampleHeightSubTree / 2,0);
}",0.760655737704918
58671,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    glGeneDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4f(0,0,0,0.15f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.1f,0.4f,0);
  if (bGeneDendrogramActive)   gl.glTranslatef(1.58f,0,0);
  renderDendrogramButton(gl);
  if (contentVA.getGroupList() != null && bSkipLevel1 == false)   renderClassAssignmentsGenesLevel1(gl);
  if (bSkipLevel1 == false) {
    handleTexturePickingLevel1(gl);
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    renderCursorLevel1(gl);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    gl.glColor4f(1f,1f,1f,1f);
  }
 else {
    gl.glColor4f(1f,1f,1f,1f);
  }
  if (bIsHeatmapInFocus || bGeneDendrogramActive) {
    fAnimationScale=0.2f;
  }
 else {
    fAnimationScale=1.0f;
  }
  if (bSkipLevel2 == false) {
    handleTexturePickingLevel2(gl);
    renderTextureHeatMap(gl);
    renderMarkerTexture(gl);
    renderSelectedElementsTexture(gl);
    if (contentVA.getGroupList() != null)     renderClassAssignmentsGenesLevel2(gl);
    if (storageVA.getGroupList() != null)     renderClassAssignmentsExperimentsLevel2(gl);
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2,0,0);
    float fHeightSubTree=0;
    if (bExperimentDendrogramActive)     fHeightSubTree=viewFrustum.getHeight() - 1.4f;
 else     fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2);
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1 + iFirstSampleLevel2),lastIndexOfSubTree,iSamplesPerHeatmap,GAP_LEVEL2_3 / 2,fHeightSubTree);
    gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2),0,0);
  }
  setEmbeddedHeatMapData();
  if (bSkipLevel2 == false) {
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale,0,0);
    renderCursorLevel2(gl);
  }
  if (contentVA.getGroupList() != null)   renderClassAssignmentsGenesLevel3(gl);
  if (bSkipLevel2 == false)   gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale),0,0);
  if (storageVA.getGroupList() != null) {
    renderClassAssignmentsExperimentsLevel3(gl);
  }
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
  }
  if (bGeneDendrogramActive)   gl.glTranslatef(-1.58f,0,0);
  gl.glTranslatef(-0.1f,-0.4f,0);
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    glGeneDendrogramView.setDisplayListDirty();
    glExperimentDendrogramView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4f(0,0,0,0.15f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.1f,0.4f,0);
  if (bGeneDendrogramActive)   gl.glTranslatef(1.58f,0,0);
  renderDendrogramButton(gl);
  if (contentVA.getGroupList() != null && bSkipLevel1 == false)   renderClassAssignmentsGenesLevel1(gl);
  if (bSkipLevel1 == false) {
    handleTexturePickingLevel1(gl);
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    renderCursorLevel1(gl);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    float fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iLastSampleLevel1 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      lastIndexOfSubTree=contentVA.get(iLastSampleLevel1);
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1),lastIndexOfSubTree,iSamplesLevel2,GAP_LEVEL1_2 / 2,fHeightSubTree);
    gl.glTranslatef(GAP_LEVEL1_2 / 2,0,0);
    gl.glColor4f(1f,1f,1f,1f);
  }
 else {
    gl.glColor4f(1f,1f,1f,1f);
  }
  if (bIsHeatmapInFocus || bGeneDendrogramActive) {
    fAnimationScale=0.2f;
  }
 else {
    fAnimationScale=1.0f;
  }
  if (bSkipLevel2 == false) {
    handleTexturePickingLevel2(gl);
    renderTextureHeatMap(gl);
    renderMarkerTexture(gl);
    renderSelectedElementsTexture(gl);
    if (contentVA.getGroupList() != null)     renderClassAssignmentsGenesLevel2(gl);
    if (storageVA.getGroupList() != null)     renderClassAssignmentsExperimentsLevel2(gl);
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2,0,0);
    float fHeightSubTree=0;
    if (bExperimentDendrogramActive)     fHeightSubTree=viewFrustum.getHeight() - 1.45f;
 else     fHeightSubTree=viewFrustum.getHeight();
    int lastIndexOfSubTree=0;
    try {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2 + 1);
    }
 catch (    IndexOutOfBoundsException e) {
      lastIndexOfSubTree=contentVA.get(iFirstSampleLevel1 + iLastSampleLevel2);
    }
    glGeneDendrogramView.renderSubTreeFromIndexToIndex(gl,contentVA.get(iFirstSampleLevel1 + iFirstSampleLevel2),lastIndexOfSubTree,iSamplesPerHeatmap,GAP_LEVEL2_3 / 2,fHeightSubTree);
    gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale + GAP_LEVEL2_3 / 2),0,0);
  }
  setEmbeddedHeatMapData();
  if (bSkipLevel2 == false) {
    gl.glTranslatef(viewFrustum.getWidth() / 4.0f * fAnimationScale,0,0);
    renderCursorLevel2(gl);
  }
  if (contentVA.getGroupList() != null)   renderClassAssignmentsGenesLevel3(gl);
  if (bSkipLevel2 == false)   gl.glTranslatef(-(viewFrustum.getWidth() / 4.0f * fAnimationScale),0,0);
  if (storageVA.getGroupList() != null) {
    renderClassAssignmentsExperimentsLevel3(gl);
  }
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
  }
  if (bGeneDendrogramActive)   gl.glTranslatef(-1.58f,0,0);
  gl.glTranslatef(-0.1f,-0.4f,0);
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glEndList();
}",0.7678325530156982
58672,"/** 
 * Depending on the cluster state the corresponding clusterer will be called. Virtual arrays for content and storage will be returned.
 * @param clusterState All information needed ba cluster algorithm
 * @return array list of {@link IVirtualArray}s including VAs for content and storage.
 */
public ArrayList<IVirtualArray> cluster(ClusterState clusterState){
  ArrayList<IVirtualArray> iAlVAs=new ArrayList<IVirtualArray>();
  iAlVAs.add(set.getVA(clusterState.getContentVaId()));
  iAlVAs.add(set.getVA(clusterState.getStorageVaId()));
  IVirtualArray tempVA=null;
  AClusterer clusterer=null;
switch (clusterState.getClustererAlgo()) {
case TREE_CLUSTERER:
    clusterer=new TreeClusterer(0);
  try {
    if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
      clusterer=new TreeClusterer(set.getVA(clusterState.getContentVaId()).size());
      tempVA=clusterer.getSortedVA(set,clusterState,0,2);
      if (tempVA != null)       iAlVAs.set(0,tempVA);
    }
 else     if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
      clusterer=new TreeClusterer(set.getVA(clusterState.getStorageVaId()).size());
      tempVA=clusterer.getSortedVA(set,clusterState,0,2);
      if (tempVA != null)       iAlVAs.set(1,tempVA);
    }
 else     if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
      clusterer=new TreeClusterer(set.getVA(clusterState.getStorageVaId()).size());
      clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
      tempVA=clusterer.getSortedVA(set,clusterState,0,1);
      if (tempVA != null) {
        iAlVAs.set(1,tempVA);
        clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
        clusterer=new TreeClusterer(set.getVA(clusterState.getContentVaId()).size());
        tempVA=clusterer.getSortedVA(set,clusterState,50,1);
        if (tempVA != null)         iAlVAs.set(0,tempVA);
      }
    }
  }
 catch (  OutOfMemoryError e) {
  }
break;
case COBWEB_CLUSTERER:
clusterer=new HierarchicalClusterer(0);
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) iAlVAs.set(0,tempVA);
}
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) iAlVAs.set(1,tempVA);
}
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,0,1);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,50,1);
if (tempVA != null) iAlVAs.set(0,tempVA);
}
}
break;
case AFFINITY_PROPAGATION:
clusterer=new AffinityClusterer(0);
try {
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
clusterer=new AffinityClusterer(set.getVA(clusterState.getContentVaId()).size());
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
}
}
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
clusterer=new AffinityClusterer(set.getVA(clusterState.getStorageVaId()).size());
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
}
}
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
clusterer=new AffinityClusterer(set.getVA(clusterState.getStorageVaId()).size());
clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,0,1);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
clusterer=new AffinityClusterer(set.getVA(clusterState.getContentVaId()).size());
tempVA=clusterer.getSortedVA(set,clusterState,50,1);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
}
}
}
}
 catch (OutOfMemoryError e) {
clusterer.destroy();
}
break;
case KMEANS_CLUSTERER:
clusterer=new KMeansClusterer(0);
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
}
}
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
}
}
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,0,1);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,50,1);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
}
}
}
break;
}
clusterer.destroy();
if (tempVA == null) {
GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
public void run(){
Shell shell=new Shell();
MessageBox messageBox=new MessageBox(shell,SWT.ERROR);
messageBox.setText(""String_Node_Str"");
messageBox.setMessage(""String_Node_Str"");
messageBox.open();
}
}
);
}
return iAlVAs;
}","/** 
 * Depending on the cluster state the corresponding clusterer will be called. Virtual arrays for content and storage will be returned.
 * @param clusterState All information needed ba cluster algorithm
 * @return array list of {@link IVirtualArray}s including VAs for content and storage.
 */
public ArrayList<IVirtualArray> cluster(ClusterState clusterState){
  ArrayList<IVirtualArray> iAlVAs=new ArrayList<IVirtualArray>();
  iAlVAs.add(set.getVA(clusterState.getContentVaId()));
  iAlVAs.add(set.getVA(clusterState.getStorageVaId()));
  IVirtualArray tempVA=null;
  AClusterer clusterer=null;
switch (clusterState.getClustererAlgo()) {
case TREE_CLUSTERER:
    clusterer=new TreeClusterer(0);
  try {
    if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
      clusterer=new TreeClusterer(set.getVA(clusterState.getContentVaId()).size());
      tempVA=clusterer.getSortedVA(set,clusterState,0,2);
      if (tempVA != null)       iAlVAs.set(0,tempVA);
    }
 else     if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
      clusterer=new TreeClusterer(set.getVA(clusterState.getStorageVaId()).size());
      tempVA=clusterer.getSortedVA(set,clusterState,0,2);
      if (tempVA != null)       iAlVAs.set(1,tempVA);
    }
 else     if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
      clusterer=new TreeClusterer(set.getVA(clusterState.getStorageVaId()).size());
      clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
      tempVA=clusterer.getSortedVA(set,clusterState,0,1);
      if (tempVA != null) {
        iAlVAs.set(1,tempVA);
        clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
        clusterer=new TreeClusterer(set.getVA(clusterState.getContentVaId()).size());
        tempVA=clusterer.getSortedVA(set,clusterState,50,1);
        if (tempVA != null)         iAlVAs.set(0,tempVA);
      }
    }
  }
 catch (  OutOfMemoryError e) {
  }
break;
case COBWEB_CLUSTERER:
clusterer=new HierarchicalClusterer(0);
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) iAlVAs.set(0,tempVA);
}
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) iAlVAs.set(1,tempVA);
}
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,0,1);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,50,1);
if (tempVA != null) iAlVAs.set(0,tempVA);
}
}
break;
case AFFINITY_PROPAGATION:
clusterer=new AffinityClusterer(0);
try {
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
clusterer=new AffinityClusterer(set.getVA(clusterState.getContentVaId()).size());
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeGenes(null);
}
}
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
clusterer=new AffinityClusterer(set.getVA(clusterState.getStorageVaId()).size());
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeExps(null);
}
}
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
clusterer=new AffinityClusterer(set.getVA(clusterState.getStorageVaId()).size());
clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,0,1);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeExps(null);
clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
clusterer=new AffinityClusterer(set.getVA(clusterState.getContentVaId()).size());
tempVA=clusterer.getSortedVA(set,clusterState,50,1);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeGenes(null);
}
}
}
}
 catch (OutOfMemoryError e) {
clusterer.destroy();
}
break;
case KMEANS_CLUSTERER:
clusterer=new KMeansClusterer(0);
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeGenes(null);
}
}
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
tempVA=clusterer.getSortedVA(set,clusterState,0,2);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeExps(null);
}
}
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,0,1);
if (tempVA != null) {
iAlVAs.set(1,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeExps(null);
clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
tempVA=clusterer.getSortedVA(set,clusterState,50,1);
if (tempVA != null) {
iAlVAs.set(0,tempVA);
setGroupList(tempVA,clusterState);
set.setClusteredTreeGenes(null);
}
}
}
break;
}
clusterer.destroy();
GeneralManager.get().getEventPublisher().triggerEvent(new UpdateViewEvent());
if (tempVA == null) {
GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
public void run(){
Shell shell=new Shell();
MessageBox messageBox=new MessageBox(shell,SWT.ERROR);
messageBox.setText(""String_Node_Str"");
messageBox.setMessage(""String_Node_Str"");
messageBox.open();
}
}
);
}
return iAlVAs;
}",0.970104369361401
58673,"/** 
 * This function calls a recursive function which is responsible for the calculation of the position inside the viewfrustum of the nodes in the dendrogram
 */
private void determinePositions(){
  if (bRenderGeneTree)   determinePosRecGenes(currentRootNode);
 else   determinePosRecExperiments(tree.getRoot());
}","/** 
 * This function calls a recursive function which is responsible for the calculation of the position inside the view frustum of the nodes in the dendrogram
 */
private void determinePositions(){
  if (bRenderGeneTree) {
    determinePosRecGenes(currentRootNode);
  }
 else   determinePosRecExperiments(tree.getRoot());
}",0.9859594383775352
58674,"@Override public void initRemote(final GL gl,final AGLEventListener glParentView,final GLMouseListener glMouseListener,final IGLCanvasRemoteRendering remoteRenderingGLCanvas,GLInfoAreaManager infoAreaManager){
  this.remoteRenderingGLView=remoteRenderingGLCanvas;
  this.glMouseListener=glMouseListener;
  iGLDisplayListIndexRemote=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  init(gl);
}","@Override public void initRemote(final GL gl,final AGLEventListener glParentView,final GLMouseListener glMouseListener,final IGLCanvasRemoteRendering remoteRenderingGLCanvas,GLInfoAreaManager infoAreaManager){
  this.remoteRenderingGLView=remoteRenderingGLCanvas;
  this.glMouseListener=glMouseListener;
  iGLDisplayListIndexRemote=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  iGLDisplayListCutOffValue=gl.glGenLists(1);
  init(gl);
}",0.9357798165137616
58675,"/** 
 * Function called any time a update is triggered external
 * @param
 */
@Override protected void reactOnExternalSelection(boolean scrollToSelection){
  if (bRenderGeneTree == true) {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<ClusterNode> nodeSet=tree.getGraph().vertexSet();
      for (      ClusterNode node : nodeSet) {
        node.setSelectionType(ESelectionType.NORMAL);
      }
      Set<Integer> setMouseOverElements=contentSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=contentSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=contentVA.indexOf(iSelectedID);
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
      setDisplayListDirty();
    }
  }
 else {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<ClusterNode> nodeSet=tree.getGraph().vertexSet();
      for (      ClusterNode node : nodeSet) {
        node.setSelectionType(ESelectionType.NORMAL);
      }
      Set<Integer> setMouseOverElements=storageSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=storageSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=storageVA.indexOf(iSelectedID);
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
      setDisplayListDirty();
    }
  }
}","/** 
 * Function called any time a update is triggered external
 * @param
 */
@Override protected void reactOnExternalSelection(boolean scrollToSelection){
  if (bRenderGeneTree == true) {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<ClusterNode> nodeSet=tree.getGraph().vertexSet();
      for (      ClusterNode node : nodeSet) {
        node.setSelectionType(ESelectionType.NORMAL);
      }
      Set<Integer> setMouseOverElements=contentSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=contentSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
      setDisplayListDirty();
    }
  }
 else {
    if (tree != null) {
      int iIndex;
      resetAllTreeSelections();
      Set<ClusterNode> nodeSet=tree.getGraph().vertexSet();
      for (      ClusterNode node : nodeSet) {
        node.setSelectionType(ESelectionType.NORMAL);
      }
      Set<Integer> setMouseOverElements=storageSelectionManager.getElements(ESelectionType.MOUSE_OVER);
      for (      Integer iSelectedID : setMouseOverElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.MOUSE_OVER);
      }
      Set<Integer> setSelectionElements=storageSelectionManager.getElements(ESelectionType.SELECTION);
      for (      Integer iSelectedID : setSelectionElements) {
        iIndex=iSelectedID;
        if (tree.getNodeByNumber(iIndex) != null)         tree.getNodeByNumber(iIndex).setSelectionType(ESelectionType.SELECTION);
      }
      setDisplayListDirty();
    }
  }
}",0.9910250354274918
58676,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    iAlClusterNodes.clear();
    if (bRenderGeneTree == true) {
      if (set.getClusteredTreeGenes() != null) {
        tree=set.getClusteredTreeGenes();
        groupList=new GroupList(1);
        currentRootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getClusteredTreeExps() != null) {
        tree=set.getClusteredTreeExps();
        groupList=new GroupList(1);
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bHasFrustumChanged || bRedrawDendrogram) {
      if (bRenderGeneTree) {
        xGlobalMax=viewFrustum.getWidth() - 0.2f;
        fSampleHeight=(viewFrustum.getHeight() - 1f) / tree.getRoot().getNrElements();
        fLevelWidth=(viewFrustum.getWidth() - 2f) / tree.getRoot().getDepth();
        yPosInit=viewFrustum.getHeight() - 0.4f;
      }
 else {
        yGlobalMin=0.1f;
        fSampleWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getNrElements();
        fLevelHeight=(viewFrustum.getHeight() - 2f) / tree.getRoot().getDepth();
        xPosInit=0.4f;
      }
      determinePositions();
      bRedrawDendrogram=false;
      bHasFrustumChanged=false;
    }
    gl.glLineWidth(0.1f);
    if (bRenderGeneTree) {
      gl.glTranslatef(0.1f,0,0);
      renderDendrogramGenes(gl,currentRootNode,1);
    }
 else {
      gl.glTranslatef(0,0.1f,0);
      renderDendrogramExperiments(gl,tree.getRoot(),1);
    }
    if (bIsRenderedRemote == false) {
      renderSelections(gl,tree.getRoot());
      renderCut(gl);
    }
    if (bRenderGeneTree)     gl.glTranslatef(-0.1f,0,0);
 else     gl.glTranslatef(0,-0.1f,0);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    iAlClusterNodes.clear();
    if (bRenderGeneTree == true) {
      if (set.getClusteredTreeGenes() != null) {
        tree=set.getClusteredTreeGenes();
        groupList=new GroupList(1);
        currentRootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getClusteredTreeExps() != null) {
        tree=set.getClusteredTreeExps();
        groupList=new GroupList(1);
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bHasFrustumChanged || bRedrawDendrogram) {
      if (bRenderGeneTree) {
        xGlobalMax=viewFrustum.getWidth() - 0.2f;
        fSampleHeight=(viewFrustum.getHeight() - 1f) / tree.getRoot().getNrElements();
        fLevelWidth=(viewFrustum.getWidth() - 2f) / tree.getRoot().getDepth();
        yPosInit=viewFrustum.getHeight() - 0.4f;
      }
 else {
        yGlobalMin=0.1f;
        fSampleWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getNrElements();
        fLevelHeight=(viewFrustum.getHeight() - 2f) / tree.getRoot().getDepth();
        xPosInit=0.4f;
      }
      determinePositions();
      bRedrawDendrogram=false;
      bHasFrustumChanged=false;
    }
    gl.glLineWidth(0.1f);
    if (bRenderGeneTree) {
      gl.glTranslatef(0.1f,0,0);
      renderDendrogramGenes(gl,currentRootNode,1);
    }
 else {
      gl.glTranslatef(0,0.1f,0);
      renderDendrogramExperiments(gl,tree.getRoot(),1);
    }
    if (bIsRenderedRemote == false) {
      renderSelections(gl,tree.getRoot());
    }
    if (bRenderGeneTree)     gl.glTranslatef(-0.1f,0,0);
 else     gl.glTranslatef(0,-0.1f,0);
  }
  gl.glEndList();
  gl.glNewList(iGLDisplayListCutOffValue,GL.GL_COMPILE);
  if (tree != null)   renderCut(gl);
  gl.glEndList();
}",0.9633911368015414
58677,"@Override public void display(GL gl){
  processEvents();
  if (bIsDraggingActive) {
    handleDragging(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingActive=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
}","@Override public void display(GL gl){
  processEvents();
  if (bIsDraggingActive) {
    handleDragging(gl);
    if (glMouseListener.wasMouseReleased()) {
      bIsDraggingActive=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  gl.glCallList(iGLDisplayListCutOffValue);
}",0.914396887159533
58678,"@Override public void initLocal(GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}","@Override public void initLocal(GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  iGLDisplayListCutOffValue=gl.glGenLists(1);
  init(gl);
}",0.8647058823529412
58679,"/** 
 * Returns the connection ID of the element.
 * @return the connection ID
 */
public Collection<Integer> getConnectionIDs(){
  return connectionIDs;
}","/** 
 * Returns the connection ID of the element.
 * @return the connection ID
 */
public ArrayList<Integer> getConnectionIDs(){
  return connectionIDs;
}",0.9449838187702264
58680,"/** 
 * Returns the connection ID of the element.
 * @return the connection ID
 */
public ArrayList<Integer> getConnectionIDs(){
  return connectionIDs;
}","/** 
 * Returns the connection ID of the element.
 * @return the connection ID
 */
@XmlElementWrapper public ArrayList<Integer> getConnectionIDs(){
  return connectionIDs;
}",0.9418960244648318
58681,"/** 
 * Loads the project from a directory
 * @param dirName name of the directory to load the project from
 * @return initialization data for the application from which it can restore itself
 */
public ApplicationInitData loadDirectory(String dirName){
  ApplicationInitData initData;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Unmarshaller unmarshaller=projectContext.createUnmarshaller();
    File useCaseFile=new File(dirName + ProjectSaver.USECASE_FILE_NAME);
    AUseCase useCase=(AUseCase)unmarshaller.unmarshal(useCaseFile);
    String setFileName=dirName + ProjectSaver.SET_DATA_FILE_NAME;
    useCase.getLoadDataParameters().setFileName(setFileName);
    HashMap<EVAType,VirtualArray> virtualArrayMap=new HashMap<EVAType,VirtualArray>();
    virtualArrayMap.put(EVAType.CONTENT,loadVirtualArray(unmarshaller,dirName,EVAType.CONTENT));
    virtualArrayMap.put(EVAType.CONTENT_CONTEXT,loadVirtualArray(unmarshaller,dirName,EVAType.CONTENT_CONTEXT));
    virtualArrayMap.put(EVAType.CONTENT_EMBEDDED_HM,loadVirtualArray(unmarshaller,dirName,EVAType.CONTENT_EMBEDDED_HM));
    virtualArrayMap.put(EVAType.STORAGE,loadVirtualArray(unmarshaller,dirName,EVAType.STORAGE));
    File viewFile=new File(dirName + ProjectSaver.VIEWS_FILE_NAME);
    ViewList loadViews=(ViewList)unmarshaller.unmarshal(viewFile);
    initData=new ApplicationInitData();
    initData.setUseCase(useCase);
    initData.setVirtualArrayMap(virtualArrayMap);
    initData.setViews(loadViews.getViews());
    File geneClusterFile=new File(dirName + ProjectSaver.GENE_TREE_FILE_NAME);
    if (geneClusterFile.exists()) {
      useCase.getLoadDataParameters().setGeneTreeFileName(geneClusterFile.getAbsolutePath());
    }
    File expClusterFile=new File(dirName + ProjectSaver.EXP_TREE_FILE_NAME);
    if (expClusterFile.exists()) {
      useCase.getLoadDataParameters().setGeneTreeFileName(expClusterFile.getAbsolutePath());
    }
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  return initData;
}","/** 
 * Loads the project from a directory
 * @param dirName name of the directory to load the project from
 * @return initialization data for the application from which it can restore itself
 */
public ApplicationInitData loadDirectory(String dirName){
  ApplicationInitData initData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Unmarshaller unmarshaller=projectContext.createUnmarshaller();
    File useCaseFile=new File(dirName + ProjectSaver.USECASE_FILE_NAME);
    AUseCase useCase=(AUseCase)unmarshaller.unmarshal(useCaseFile);
    String setFileName=dirName + ProjectSaver.SET_DATA_FILE_NAME;
    useCase.getLoadDataParameters().setFileName(setFileName);
    HashMap<EVAType,VirtualArray> virtualArrayMap=new HashMap<EVAType,VirtualArray>();
    virtualArrayMap.put(EVAType.CONTENT,loadVirtualArray(unmarshaller,dirName,EVAType.CONTENT));
    virtualArrayMap.put(EVAType.CONTENT_CONTEXT,loadVirtualArray(unmarshaller,dirName,EVAType.CONTENT_CONTEXT));
    virtualArrayMap.put(EVAType.CONTENT_EMBEDDED_HM,loadVirtualArray(unmarshaller,dirName,EVAType.CONTENT_EMBEDDED_HM));
    virtualArrayMap.put(EVAType.STORAGE,loadVirtualArray(unmarshaller,dirName,EVAType.STORAGE));
    File viewFile=new File(dirName + ProjectSaver.VIEWS_FILE_NAME);
    ViewList loadViews=(ViewList)unmarshaller.unmarshal(viewFile);
    initData=new ApplicationInitData();
    initData.setUseCase(useCase);
    initData.setVirtualArrayMap(virtualArrayMap);
    initData.setViews(loadViews.getViews());
    File geneClusterFile=new File(dirName + ProjectSaver.GENE_TREE_FILE_NAME);
    if (geneClusterFile.exists()) {
      useCase.getLoadDataParameters().setGeneTreeFileName(geneClusterFile.getAbsolutePath());
    }
    File expClusterFile=new File(dirName + ProjectSaver.EXP_TREE_FILE_NAME);
    if (expClusterFile.exists()) {
      useCase.getLoadDataParameters().setExperimentsFileName(expClusterFile.getAbsolutePath());
    }
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  return initData;
}",0.9944289693593314
58682,"/** 
 * Loads a   {@link VirtualArray} from the file system. the filename is created by the type of  {@link VirtualArray}.
 * @param unmarshaller JAXB-unmarshaller to convert the xml-file to a {@link VirtualArray}-instance
 * @param dir directory-name in the file system to load the {@link VirtualArray} from 
 * @param type type of VirtualArray in the {@link UseCase}
 * @return loaded {@link VirtualArray}
 * @throws JAXBException in case of a {@link JAXBException} while unmarshalling the xml file
 */
private VirtualArray loadVirtualArray(Unmarshaller unmarshaller,String dir,EVAType type) throws JAXBException {
  String fileName=dir + ""String_Node_Str"" + type.toString()+ ""String_Node_Str"";
  VirtualArray va=(VirtualArray)unmarshaller.unmarshal(new File(fileName));
  return va;
}","/** 
 * Loads a   {@link VirtualArray} from the file system. the filename is created by the type of{@link VirtualArray}.
 * @param unmarshaller JAXB-unmarshaller to convert the xml-file to a  {@link VirtualArray}-instance
 * @param dir directory-name in the file system to load the  {@link VirtualArray} from
 * @param type type of VirtualArray in the  {@link UseCase}
 * @return loaded {@link VirtualArray}
 * @throws JAXBException in case of a  {@link JAXBException} while unmarshalling the xml file
 */
private VirtualArray loadVirtualArray(Unmarshaller unmarshaller,String dir,EVAType type) throws JAXBException {
  String fileName=dir + ""String_Node_Str"" + type.toString()+ ""String_Node_Str"";
  VirtualArray va=(VirtualArray)unmarshaller.unmarshal(new File(fileName));
  return va;
}",0.940952380952381
58683,"/** 
 * Saves the project to the directory for the recent project 
 */
public void saveRecentProject(){
  ZipUtils zipUtils=new ZipUtils();
  if (!GeneralManager.get().getUseCase().getLoadDataParameters().getFileName().startsWith(RECENT_PROJECT_DIR_NAME)) {
    zipUtils.deleteDirectory(RECENT_PROJECT_DIR_NAME);
  }
  saveToDirectory(RECENT_PROJECT_DIR_NAME);
}","/** 
 * Saves the project to the directory for the recent project
 */
public void saveRecentProject(){
  ZipUtils zipUtils=new ZipUtils();
  if (!GeneralManager.get().getUseCase().getLoadDataParameters().getFileName().startsWith(RECENT_PROJECT_DIR_NAME)) {
    zipUtils.deleteDirectory(RECENT_PROJECT_DIR_NAME);
  }
  saveToDirectory(RECENT_PROJECT_DIR_NAME);
}",0.9986168741355465
58684,"/** 
 * Saves the   {@link VirtualArray} of the given type. The filename is createdfrom the type.
 * @param dir directory to save the {@link VirtualArray} in.
 * @param useCase {@link IUseCase} to retrieve the {@link VirtualArray} from.
 * @param type type of the virtual array within the given {@link IUseCase}.
 */
private void saveVirtualArray(Marshaller marshaller,String dir,IUseCase useCase,EVAType type) throws JAXBException {
  String fileName=dir + ""String_Node_Str"" + type.toString()+ ""String_Node_Str"";
  VirtualArray va=(VirtualArray)useCase.getVA(type);
  marshaller.marshal(va,new File(fileName));
}","/** 
 * Saves the   {@link VirtualArray} of the given type. The filename is created from the type.
 * @param dir directory to save the  {@link VirtualArray} in.
 * @param useCase {@link IUseCase} to retrieve the {@link VirtualArray} from.
 * @param type type of the virtual array within the given  {@link IUseCase}.
 */
private void saveVirtualArray(Marshaller marshaller,String dir,IUseCase useCase,EVAType type) throws JAXBException {
  String fileName=dir + ""String_Node_Str"" + type.toString()+ ""String_Node_Str"";
  VirtualArray va=(VirtualArray)useCase.getVA(type);
  marshaller.marshal(va,new File(fileName));
}",0.997558991049634
58685,"/** 
 * Creates a   {@link ViewList} of all views registered in the central {@link IViewManager}.
 * @return {@link ViewList} to storing the view's state. 
 */
private ViewList createStoreViewList(){
  ArrayList<ASerializedView> storeViews=new ArrayList<ASerializedView>();
  IViewManager viewManager=GeneralManager.get().getViewGLCanvasManager();
  Collection<AGLEventListener> glViews=viewManager.getAllGLEventListeners();
  for (  AGLEventListener glView : glViews) {
    if (!glView.isRenderedRemote()) {
      ASerializedView serView=glView.getSerializableRepresentation();
      if (!(serView instanceof SerializedDummyView)) {
        storeViews.add(serView);
      }
    }
  }
  Collection<IView> swtViews=viewManager.getAllItems();
  for (  IView swtView : swtViews) {
    ASerializedView serView=swtView.getSerializableRepresentation();
    if (!(serView instanceof SerializedDummyView)) {
      storeViews.add(serView);
    }
  }
  ViewList viewList=new ViewList();
  viewList.setViews(storeViews);
  return viewList;
}","/** 
 * Creates a   {@link ViewList} of all views registered in the central {@link IViewManager}.
 * @return {@link ViewList} to storing the view's state.
 */
private ViewList createStoreViewList(){
  ArrayList<ASerializedView> storeViews=new ArrayList<ASerializedView>();
  IViewManager viewManager=GeneralManager.get().getViewGLCanvasManager();
  Collection<AGLEventListener> glViews=viewManager.getAllGLEventListeners();
  for (  AGLEventListener glView : glViews) {
    if (!glView.isRenderedRemote()) {
      ASerializedView serView=glView.getSerializableRepresentation();
      if (!(serView instanceof SerializedDummyView)) {
        storeViews.add(serView);
      }
    }
  }
  Collection<IView> swtViews=viewManager.getAllItems();
  for (  IView swtView : swtViews) {
    ASerializedView serView=swtView.getSerializableRepresentation();
    if (!(serView instanceof SerializedDummyView)) {
      storeViews.add(serView);
    }
  }
  ViewList viewList=new ViewList();
  viewList.setViews(storeViews);
  return viewList;
}",0.9995143273433704
58686,"/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveToDirectory(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase();
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  byte[] data=SetUtils.loadSetFile(parameters);
  String setFileName=dirName + SET_DATA_FILE_NAME;
  File setFile=new File(setFileName);
  SetUtils.saveSetFile(parameters,data,setFile);
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    ViewList storeViews=createStoreViewList();
    File viewFile=new File(dirName + VIEWS_FILE_NAME);
    marshaller.marshal(storeViews,viewFile);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      if (treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree) == false) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      if (treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree) == false) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveToDirectory(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase();
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  byte[] data=SetUtils.loadSetFile(parameters);
  String setFileName=dirName + SET_DATA_FILE_NAME;
  File setFile=new File(setFileName);
  SetUtils.saveSetFile(parameters,data,setFile);
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    ViewList storeViews=createStoreViewList();
    File viewFile=new File(dirName + VIEWS_FILE_NAME);
    marshaller.marshal(storeViews,viewFile);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      if (treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree) == false) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      if (treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree) == false) {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.9924982950670608
58687,"/** 
 * Saves the set-data contained in the useCase in the given file. The   {@link LoadDataParameters} of the useCase are set according to the created set-file  
 * @param useCase useCase to get the set-data from 
 */
public static void saveSetFile(LoadDataParameters parameters,byte[] data,File setFile){
  FileOutputStream os=null;
  try {
    os=new FileOutputStream(setFile);
    os.write(data);
  }
 catch (  FileNotFoundException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}","/** 
 * Saves the set-data contained in the useCase in a new created temp-file. The   {@link LoadDataParameters} of the useCase are set according to the created set-file  
 * @param parameters set-load parameters to store the filename;
 * @param data set-data to save
 */
public static void saveSetFile(LoadDataParameters parameters,byte[] data){
  File homeDir=new File(IGeneralManager.CALEYDO_HOME_PATH);
  File setFile;
  try {
    setFile=File.createTempFile(DATA_FILE_PREFIX,""String_Node_Str"",homeDir);
    parameters.setFileName(setFile.getCanonicalPath());
  }
 catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  saveFile(data,setFile);
}",0.5219266714593818
58688,"/** 
 * Collects the data to initialize a new connected client and sends it to the client
 * @param outputStream {@link OutputStream} of the socket for sending to client 
 */
private void sendServerInitializationData(OutputStream outputStream){
  ApplicationInitData initData=new ApplicationInitData();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase();
  initData.setUseCase((AUseCase)GeneralManager.get().getUseCase());
  initData.setSetFileContent(SetUtils.loadSetFile(useCase.getLoadDataParameters()));
  HashMap<EVAType,VirtualArray> virtualArrayMap=new HashMap<EVAType,VirtualArray>();
  virtualArrayMap.put(EVAType.CONTENT,(VirtualArray)useCase.getVA(EVAType.CONTENT));
  virtualArrayMap.put(EVAType.CONTENT_CONTEXT,(VirtualArray)useCase.getVA(EVAType.CONTENT_CONTEXT));
  virtualArrayMap.put(EVAType.CONTENT_EMBEDDED_HM,(VirtualArray)useCase.getVA(EVAType.CONTENT_EMBEDDED_HM));
  virtualArrayMap.put(EVAType.STORAGE,(VirtualArray)useCase.getVA(EVAType.STORAGE));
  initData.setVirtualArrayMap(virtualArrayMap);
  NetworkUtils utils=networkManager.getNetworkUtils();
  utils.writeHandshake(initData,outputStream);
}","/** 
 * Collects the data to initialize a new connected client and sends it to the client
 * @param outputStream {@link OutputStream} of the socket for sending to client 
 */
private void sendServerInitializationData(OutputStream outputStream){
  ApplicationInitData initData=new ApplicationInitData();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase();
  ISet set=useCase.getSet();
  initData.setUseCase((AUseCase)GeneralManager.get().getUseCase());
  initData.setSetFileContent(SetUtils.loadSetFile(useCase.getLoadDataParameters()));
  initData.setGeneClusterTree(SetUtils.getGeneClusterXml(set));
  initData.setExperimentClusterTree(SetUtils.getExperimentClusterXml(set));
  HashMap<EVAType,VirtualArray> virtualArrayMap=new HashMap<EVAType,VirtualArray>();
  virtualArrayMap.put(EVAType.CONTENT,(VirtualArray)useCase.getVA(EVAType.CONTENT));
  virtualArrayMap.put(EVAType.CONTENT_CONTEXT,(VirtualArray)useCase.getVA(EVAType.CONTENT_CONTEXT));
  virtualArrayMap.put(EVAType.CONTENT_EMBEDDED_HM,(VirtualArray)useCase.getVA(EVAType.CONTENT_EMBEDDED_HM));
  virtualArrayMap.put(EVAType.STORAGE,(VirtualArray)useCase.getVA(EVAType.STORAGE));
  initData.setVirtualArrayMap(virtualArrayMap);
  NetworkUtils utils=networkManager.getNetworkUtils();
  utils.writeHandshake(initData,outputStream);
}",0.9307660794756248
58689,"/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveToDirectory(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase();
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  byte[] data=SetUtils.loadSetFile(parameters);
  String setFileName=dirName + SET_DATA_FILE_NAME;
  File setFile=new File(setFileName);
  SetUtils.saveSetFile(parameters,data,setFile);
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    ViewList storeViews=createStoreViewList();
    File viewFile=new File(dirName + VIEWS_FILE_NAME);
    marshaller.marshal(storeViews,viewFile);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveToDirectory(String dirName){
  if (dirName.charAt(dirName.length() - 1) != File.separatorChar) {
    dirName+=File.separator;
  }
  File tempDirFile=new File(dirName);
  tempDirFile.mkdir();
  AUseCase useCase=(AUseCase)GeneralManager.get().getUseCase();
  LoadDataParameters parameters=useCase.getLoadDataParameters();
  byte[] data=SetUtils.loadSetFile(parameters);
  String setFileName=dirName + SET_DATA_FILE_NAME;
  File setFile=new File(setFileName);
  SetUtils.saveFile(data,setFile);
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Marshaller marshaller=projectContext.createMarshaller();
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_CONTEXT);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.CONTENT_EMBEDDED_HM);
    saveVirtualArray(marshaller,dirName,useCase,EVAType.STORAGE);
    ViewList storeViews=createStoreViewList();
    File viewFile=new File(dirName + VIEWS_FILE_NAME);
    marshaller.marshal(storeViews,viewFile);
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> geneTree=useCase.getSet().getClusteredTreeGenes();
    if (geneTree != null) {
      treePorter.exportTree(dirName + GENE_TREE_FILE_NAME,geneTree);
    }
    treePorter=new TreePorter();
    Tree<ClusterNode> expTree=useCase.getSet().getClusteredTreeExps();
    if (expTree != null) {
      treePorter.exportTree(dirName + EXP_TREE_FILE_NAME,expTree);
    }
    File useCaseFile=new File(dirName + USECASE_FILE_NAME);
    marshaller.marshal(useCase,useCaseFile);
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.9941548952752072
58690,"public void handleArrowDownAltPressed(){
  if (iLastSampleLevel2 < iSamplesLevel2 - 1) {
    iLastSampleLevel2++;
    iFirstSampleLevel2++;
    setEmbeddedHeatMapData();
    setDisplayListDirty();
  }
}","public void handleArrowDownAltPressed(){
  if (iLastSampleLevel2 < iSamplesLevel2 - 1) {
    iLastSampleLevel2++;
    iFirstSampleLevel2++;
    setEmbeddedHeatMapData();
    setDisplayListDirty();
    glHeatMapView.upDownSelect(false);
  }
}",0.91196388261851
58691,"/** 
 * Render marker in OverviewBar for visualization of the currently (in stage 2) rendered part
 * @param gl
 */
private void renderMarkerOverviewBar(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fFieldWith=0.1f;
  Vec3f startpoint1, endpoint1, startpoint2, endpoint2;
  float fHeightElem=fHeight / iNumberOfElements;
  int iStartElem=0;
  int iLastElem=0;
  boolean colorToggle=true;
  gl.glLineWidth(2f);
  if (bIsDraggingActiveLevel1 == false && bIsDraggingWholeBlockLevel1 == false) {
    fPosCursorFirstElementLevel1=viewFrustum.getHeight() - iFirstSampleLevel1 * fHeightElem;
    fPosCursorLastElementLevel1=viewFrustum.getHeight() - (iLastSampleLevel1 + 1) * fHeightElem;
  }
  for (int currentGroup=0; currentGroup < iNrTextures; currentGroup++) {
    iStartElem=iLastElem;
    iLastElem+=iAlNumberSamples.get(currentGroup);
    if (colorToggle)     gl.glColor4f(0f,0f,0f,1f);
 else     gl.glColor4f(1f,1f,1f,1f);
    colorToggle=(colorToggle == true) ? false : true;
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,fHeight - fHeightElem * iStartElem,0);
    gl.glVertex3f(fFieldWith,fHeight - fHeightElem * iStartElem,0);
    gl.glVertex3f(fFieldWith,(fHeight - fHeightElem * iLastElem) + 0.01f,0);
    gl.glVertex3f(0,(fHeight - fHeightElem * iLastElem) + 0.01f,0);
    gl.glEnd();
  }
  startpoint1=new Vec3f(fFieldWith,fPosCursorFirstElementLevel1,0);
  endpoint1=new Vec3f(GAP_LEVEL1_2,fHeight,0);
  startpoint2=new Vec3f(fFieldWith,fPosCursorLastElementLevel1,0);
  endpoint2=new Vec3f(GAP_LEVEL1_2,0,0);
  renderSelectedDomain(gl,startpoint1,endpoint1,startpoint2,endpoint2);
  gl.glColor4fv(MOUSE_OVER_COLOR,0);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,fPosCursorFirstElementLevel1,0);
  gl.glVertex3f(fFieldWith,fPosCursorFirstElementLevel1,0);
  gl.glVertex3f(fFieldWith,fPosCursorLastElementLevel1,0);
  gl.glVertex3f(0,fPosCursorLastElementLevel1,0);
  gl.glEnd();
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,viewFrustum.getHeight() - (iFirstSampleLevel1 + iFirstSampleLevel2) * fHeightElem,0);
  gl.glVertex3f(fFieldWith + 0.1f,viewFrustum.getHeight() - (iFirstSampleLevel1 + iFirstSampleLevel2) * fHeightElem,0);
  gl.glVertex3f(fFieldWith + 0.1f,viewFrustum.getHeight() - ((iFirstSampleLevel1 + iLastSampleLevel2) + 1) * fHeightElem,0);
  gl.glVertex3f(0,viewFrustum.getHeight() - ((iFirstSampleLevel1 + iLastSampleLevel2) + 1) * fHeightElem,0);
  gl.glEnd();
  if (bRenderCaption == true) {
    renderCaption(gl,""String_Node_Str"" + iSamplesLevel2,0.0f,viewFrustum.getHeight() - iPickedSampleLevel1 * fHeightElem,0.004f);
  }
  gl.glColor4f(1f,1f,1f,1f);
}","/** 
 * Render marker in OverviewBar for visualization of the currently (in stage 2) rendered part
 * @param gl
 */
private void renderMarkerOverviewBar(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fFieldWith=0.1f;
  Vec3f startpoint1, endpoint1, startpoint2, endpoint2;
  float fHeightElem=fHeight / iNumberOfElements;
  if (bIsDraggingActiveLevel1 == false && bIsDraggingWholeBlockLevel1 == false) {
    fPosCursorFirstElementLevel1=viewFrustum.getHeight() - iFirstSampleLevel1 * fHeightElem;
    fPosCursorLastElementLevel1=viewFrustum.getHeight() - (iLastSampleLevel1 + 1) * fHeightElem;
  }
  startpoint1=new Vec3f(fFieldWith,fPosCursorFirstElementLevel1,0);
  endpoint1=new Vec3f(GAP_LEVEL1_2,fHeight,0);
  startpoint2=new Vec3f(fFieldWith,fPosCursorLastElementLevel1,0);
  endpoint2=new Vec3f(GAP_LEVEL1_2,0,0);
  renderSelectedDomain(gl,startpoint1,endpoint1,startpoint2,endpoint2);
  gl.glColor4fv(MOUSE_OVER_COLOR,0);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,fPosCursorFirstElementLevel1,0);
  gl.glVertex3f(fFieldWith,fPosCursorFirstElementLevel1,0);
  gl.glVertex3f(fFieldWith,fPosCursorLastElementLevel1,0);
  gl.glVertex3f(0,fPosCursorLastElementLevel1,0);
  gl.glEnd();
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,viewFrustum.getHeight() - (iFirstSampleLevel1 + iFirstSampleLevel2) * fHeightElem,0);
  gl.glVertex3f(fFieldWith + 0.1f,viewFrustum.getHeight() - (iFirstSampleLevel1 + iFirstSampleLevel2) * fHeightElem,0);
  gl.glVertex3f(fFieldWith + 0.1f,viewFrustum.getHeight() - ((iFirstSampleLevel1 + iLastSampleLevel2) + 1) * fHeightElem,0);
  gl.glVertex3f(0,viewFrustum.getHeight() - ((iFirstSampleLevel1 + iLastSampleLevel2) + 1) * fHeightElem,0);
  gl.glEnd();
  if (bRenderCaption == true) {
    renderCaption(gl,""String_Node_Str"" + iSamplesLevel2,0.0f,viewFrustum.getHeight() - iPickedSampleLevel1 * fHeightElem,0.004f);
  }
  gl.glColor4f(1f,1f,1f,1f);
}",0.843825933289154
58692,"/** 
 * Determine selected element in stage 1 (overview bar)
 * @param gl
 */
private void handleTexturePickingLevel1(GL gl){
  int iNumberSample=iNumberOfElements;
  float fOffsety;
  float fHeightSample=(viewFrustum.getHeight() - 0.4f) / iNumberSample;
  float[] fArPickingCoords=new float[3];
  if (pickingPointLevel1 != null) {
    fArPickingCoords=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickingPointLevel1.x,pickingPointLevel1.y);
    fOffsety=viewFrustum.getHeight() - fArPickingCoords[1] + 0.4f;
    iPickedSampleLevel1=(int)Math.ceil(fOffsety / fHeightSample);
    pickingPointLevel1=null;
    if (iSamplesLevel2 % 2 == 0) {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.floor(iSamplesLevel2 / 2) + 1;
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
 else {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.ceil(iSamplesLevel2 / 2);
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
    if (iPickedSampleLevel1 < iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.floor(iSamplesLevel2 / 2);
      iFirstSampleLevel1=0;
      iLastSampleLevel1=iSamplesLevel2 - 1;
    }
 else     if (iPickedSampleLevel1 > iNumberSample - 1 - iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.ceil(iNumberSample - iSamplesLevel2 / 2);
      iLastSampleLevel1=iNumberSample - 1;
      iFirstSampleLevel1=iNumberSample - iSamplesLevel2;
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
}","/** 
 * Determine selected element in stage 1 (overview bar)
 * @param gl
 */
private void handleTexturePickingLevel1(GL gl){
  int iNumberSample=iNumberOfElements;
  float fOffsety;
  float fHeightSample=viewFrustum.getHeight() / iNumberSample;
  float[] fArPickingCoords=new float[3];
  if (pickingPointLevel1 != null) {
    fArPickingCoords=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickingPointLevel1.x,pickingPointLevel1.y);
    fOffsety=viewFrustum.getHeight() - fArPickingCoords[1] + 0.4f;
    iPickedSampleLevel1=(int)Math.ceil(fOffsety / fHeightSample);
    pickingPointLevel1=null;
    if (iSamplesLevel2 % 2 == 0) {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.floor(iSamplesLevel2 / 2) + 1;
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
 else {
      iFirstSampleLevel1=iPickedSampleLevel1 - (int)Math.ceil(iSamplesLevel2 / 2);
      iLastSampleLevel1=iPickedSampleLevel1 + (int)Math.floor(iSamplesLevel2 / 2);
    }
    if (iPickedSampleLevel1 < iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.floor(iSamplesLevel2 / 2);
      iFirstSampleLevel1=0;
      iLastSampleLevel1=iSamplesLevel2 - 1;
    }
 else     if (iPickedSampleLevel1 > iNumberSample - 1 - iSamplesLevel2 / 2) {
      iPickedSampleLevel1=(int)Math.ceil(iNumberSample - iSamplesLevel2 / 2);
      iLastSampleLevel1=iNumberSample - 1;
      iFirstSampleLevel1=iNumberSample - iSamplesLevel2;
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
}",0.2507384312438464
58693,"public void handleArrowUpCtrlPressed(){
  if (iFirstSampleLevel1 > 0) {
    iFirstSampleLevel1--;
    iLastSampleLevel1--;
    setDisplayListDirty();
  }
}","public void handleArrowUpCtrlPressed(){
  if (iFirstSampleLevel1 > 0) {
    iFirstSampleLevel1--;
    iLastSampleLevel1--;
    setDisplayListDirty();
    glHeatMapView.upDownSelect(true);
  }
}",0.8908045977011494
58694,"public void handleArrowDownCtrlPressed(){
  if (iLastSampleLevel1 < iNumberOfElements - 1) {
    iFirstSampleLevel1++;
    iLastSampleLevel1++;
    setDisplayListDirty();
  }
}","public void handleArrowDownCtrlPressed(){
  if (iLastSampleLevel1 < iNumberOfElements - 1) {
    iFirstSampleLevel1++;
    iLastSampleLevel1++;
    setDisplayListDirty();
    glHeatMapView.upDownSelect(false);
  }
}",0.9002557544757033
58695,"public void handleArrowUpAltPressed(){
  if (iFirstSampleLevel2 > 0) {
    iFirstSampleLevel2--;
    iLastSampleLevel2--;
    setEmbeddedHeatMapData();
    setDisplayListDirty();
  }
}","public void handleArrowUpAltPressed(){
  if (iFirstSampleLevel2 > 0) {
    iFirstSampleLevel2--;
    iLastSampleLevel2--;
    setEmbeddedHeatMapData();
    setDisplayListDirty();
    glHeatMapView.upDownSelect(true);
  }
}",0.9064039408866996
58696,"private ArrayList<Integer> getAl(ArrayList<Integer> alExamples,ArrayList<Integer> count,ArrayList<Integer> idxExamples,int[] idx,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int counter=0;
  int idxCnt=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    for (    Integer example : alExamples) {
      for (      Integer icontent : contentVA) {
        if (idx[contentVA.get(icontent)] == example) {
          indexes.add(icontent);
          count.set(counter,count.get(counter) + 1);
        }
        if (example == contentVA.get(icontent)) {
          idxExamples.add(contentVA.get(example));
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
 else {
    for (    Integer example : alExamples) {
      for (      Integer icontent : storageVA) {
        if (idx[storageVA.get(icontent)] == example) {
          indexes.add(icontent);
          count.set(counter,count.get(counter) + 1);
        }
        if (example == storageVA.get(icontent)) {
          idxExamples.add(storageVA.get(example));
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
  return indexes;
}","/** 
 * Function returns an array list with ordered indexes out of the VA after clustering. Additionally the indexes of the examples (cluster representatives) will be determined.
 * @param alExamples array list containing the indexes of the examples (cluster representatives) determined by the cluster algorithm
 * @param alClusterSizes array list which will be filled with the sizes of each cluster
 * @param idxExamples array list containing indexes of examples in the VA
 * @param idx cluster result determined by affinity propagation
 * @param eClustererType the cluster type
 * @return An array list with indexes in the VA
 */
private ArrayList<Integer> getAl(ArrayList<Integer> alExamples,ArrayList<Integer> alClusterSizes,ArrayList<Integer> idxExamples,int[] idx,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int counter=0;
  int idxCnt=0;
  ArrayList<Integer> alIndexListContent=contentVA.getIndexList();
  ArrayList<Integer> alIndexListStorage=storageVA.getIndexList();
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    for (    Integer example : alExamples) {
      for (int index=0; index < alIndexListContent.size(); index++) {
        if (idx[index] == example) {
          indexes.add(alIndexListContent.get(index));
          alClusterSizes.set(counter,alClusterSizes.get(counter) + 1);
        }
        if (example == index) {
          idxExamples.add(contentVA.get(example));
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
 else {
    for (    Integer example : alExamples) {
      for (int index=0; index < alIndexListStorage.size(); index++) {
        if (idx[index] == example) {
          indexes.add(alIndexListStorage.get(index));
          alClusterSizes.set(counter,alClusterSizes.get(counter) + 1);
        }
        if (example == index) {
          idxExamples.add(storageVA.get(example));
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
  return indexes;
}",0.6189498386623643
58697,"/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
private IVirtualArray affinityPropagation(EClustererType eClustererType){
  ArrayList<Integer> alIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  while (bIterate) {
    iNrIterations++;
    int tempPercentage=(int)((float)iNrIterations / iMaxIterations * 100);
    if (iPercentage == tempPercentage) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
      iPercentage++;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
    processEvents();
    if (bClusteringCanceled) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  if (bConverged == false) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  alIndexes=getAl(alExamples,count,idxExamples,idx,eClustererType);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),alIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),alIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return virtualArray;
}","/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
private IVirtualArray affinityPropagation(EClustererType eClustererType){
  ArrayList<Integer> alIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> alClusterSizes=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  while (bIterate) {
    iNrIterations++;
    int tempPercentage=(int)((float)iNrIterations / iMaxIterations * 100);
    if (iPercentage == tempPercentage) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
      iPercentage++;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
    processEvents();
    if (bClusteringCanceled) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  if (bConverged == false) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    alClusterSizes.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  alIndexes=getAl(alExamples,alClusterSizes,idxExamples,idx,eClustererType);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),alIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),alIndexes);
  set.setAlClusterSizes(alClusterSizes);
  set.setAlExamples(idxExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.9945197577156044
58698,"@Override public float getMeasure(float[] vector1,float[] vector2){
  float correlation=0;
  float sum_sq_x=0;
  float sum_sq_y=0;
  float sum_coproduct=0;
  float mean_x=ClusterHelper.arithmeticMean(vector1);
  float mean_y=ClusterHelper.arithmeticMean(vector2);
  if (vector1.length != vector2.length) {
    System.out.println(""String_Node_Str"");
    return 0;
  }
  for (int i=0; i < vector1.length; i++) {
    float delta_x=0, delta_y=0;
    if (Float.isNaN(vector1[i]) == false)     delta_x=vector1[i] - mean_x;
    if (Float.isNaN(vector2[i]) == false)     delta_y=vector2[i] - mean_y;
    sum_sq_x+=delta_x * delta_x;
    sum_sq_y+=delta_y * delta_y;
    sum_coproduct+=delta_x * delta_y;
  }
  float pop_sd_x=(float)Math.sqrt(sum_sq_x / vector1.length);
  float pop_sd_y=(float)Math.sqrt(sum_sq_y / vector1.length);
  float cov_x_y=sum_coproduct / vector1.length;
  correlation=cov_x_y / (pop_sd_x * pop_sd_y);
  return correlation;
}","@Override public float getMeasure(float[] vector1,float[] vector2){
  float correlation=0;
  float sum_sq_x=0;
  float sum_sq_y=0;
  float sum_coproduct=0;
  float mean_x=ClusterHelper.arithmeticMean(vector1);
  float mean_y=ClusterHelper.arithmeticMean(vector2);
  if (vector1.length != vector2.length) {
    System.out.println(""String_Node_Str"");
    return 0;
  }
  for (int i=0; i < vector1.length; i++) {
    float delta_x=0, delta_y=0;
    if (Float.isNaN(vector1[i]) == false)     delta_x=vector1[i] - mean_x;
    if (Float.isNaN(vector2[i]) == false)     delta_y=vector2[i] - mean_y;
    sum_sq_x+=delta_x * delta_x;
    sum_sq_y+=delta_y * delta_y;
    sum_coproduct+=delta_x * delta_y;
  }
  float pop_sd_x=(float)Math.sqrt(sum_sq_x / vector1.length);
  float pop_sd_y=(float)Math.sqrt(sum_sq_y / vector1.length);
  float cov_x_y=sum_coproduct / vector1.length;
  correlation=cov_x_y / (pop_sd_x * pop_sd_y);
  return Math.abs(correlation);
}",0.9831045406546992
58699,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    iAlCutOffClusters.clear();
    iAlClusterNodes.clear();
    if (bRenderGeneTree == true) {
      if (set.getClusteredTreeGenes() != null) {
        tree=set.getClusteredTreeGenes();
        groupList=new GroupList(1);
        currentRootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getClusteredTreeExps() != null) {
        tree=set.getClusteredTreeExps();
        groupList=new GroupList(1);
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bHasFrustumChanged || bRedrawDendrogram) {
      if (bRenderGeneTree) {
        xGlobalMax=viewFrustum.getWidth() - 0.2f;
        fSampleHeight=(viewFrustum.getHeight() - 1f) / tree.getRoot().getNrElements();
        fLevelWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getDepth();
        yPosInit=viewFrustum.getHeight() - 0.4f;
      }
 else {
        yGlobalMin=0.1f;
        fSampleWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getNrElements();
        fLevelHeight=(viewFrustum.getHeight() - 1f) / tree.getRoot().getDepth();
        xPosInit=0.4f;
      }
      determinePositions();
      bRedrawDendrogram=false;
      bHasFrustumChanged=false;
    }
    gl.glLineWidth(0.1f);
    if (bRenderGeneTree) {
      gl.glTranslatef(0.1f,0,0);
      renderDendrogramGenes(gl,currentRootNode,1);
    }
 else {
      gl.glTranslatef(0,0.1f,0);
      renderDendrogramExperiments(gl,tree.getRoot(),1);
    }
    if (bIsRenderedRemote == false) {
      renderSelections(gl,tree.getRoot());
      renderCut(gl);
    }
    if (bRenderGeneTree)     gl.glTranslatef(-0.1f,0,0);
 else     gl.glTranslatef(0,-0.1f,0);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    iAlCutOffClusters.clear();
    iAlClusterNodes.clear();
    if (bRenderGeneTree == true) {
      if (set.getClusteredTreeGenes() != null) {
        tree=set.getClusteredTreeGenes();
        groupList=new GroupList(1);
        currentRootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getClusteredTreeExps() != null) {
        tree=set.getClusteredTreeExps();
        groupList=new GroupList(1);
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bHasFrustumChanged || bRedrawDendrogram) {
      if (bRenderGeneTree) {
        xGlobalMax=viewFrustum.getWidth() - 0.2f;
        fSampleHeight=(viewFrustum.getHeight() - 1f) / tree.getRoot().getNrElements();
        fLevelWidth=(viewFrustum.getWidth() - 2f) / tree.getRoot().getDepth();
        yPosInit=viewFrustum.getHeight() - 0.4f;
      }
 else {
        yGlobalMin=0.1f;
        fSampleWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getNrElements();
        fLevelHeight=(viewFrustum.getHeight() - 2f) / tree.getRoot().getDepth();
        xPosInit=0.4f;
      }
      determinePositions();
      bRedrawDendrogram=false;
      bHasFrustumChanged=false;
    }
    gl.glLineWidth(0.1f);
    if (bRenderGeneTree) {
      gl.glTranslatef(0.1f,0,0);
      renderDendrogramGenes(gl,currentRootNode,1);
    }
 else {
      gl.glTranslatef(0,0.1f,0);
      renderDendrogramExperiments(gl,tree.getRoot(),1);
    }
    if (bIsRenderedRemote == false) {
      renderSelections(gl,tree.getRoot());
      renderCut(gl);
    }
    if (bRenderGeneTree)     gl.glTranslatef(-0.1f,0,0);
 else     gl.glTranslatef(0,-0.1f,0);
  }
  gl.glEndList();
}",0.9988901220865704
58700,"@Override public IVirtualArray getSortedVA(ISet set,ClusterState clusterState,int iProgressBarOffsetValue,int iProgressBarMultiplier){
  IVirtualArray virtualArray=null;
  eDistanceMeasure=clusterState.getDistanceMeasure();
  this.iProgressBarMultiplier=iProgressBarMultiplier;
  this.iProgressBarOffsetValue=iProgressBarOffsetValue;
  this.iVAIdContent=clusterState.getContentVaId();
  this.iVAIdStorage=clusterState.getStorageVaId();
  int iReturnValue=0;
  iReturnValue=determineSimilarities(set,clusterState.getClustererType());
  if (iReturnValue == -1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
 else   if (iReturnValue == -2) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  this.set=set;
  virtualArray=pmlcluster(clusterState.getClustererType());
  return virtualArray;
}","@Override public IVirtualArray getSortedVA(ISet set,ClusterState clusterState,int iProgressBarOffsetValue,int iProgressBarMultiplier){
  IVirtualArray virtualArray=null;
  eDistanceMeasure=clusterState.getDistanceMeasure();
  this.iProgressBarMultiplier=iProgressBarMultiplier;
  this.iProgressBarOffsetValue=iProgressBarOffsetValue;
  this.iVAIdContent=clusterState.getContentVaId();
  this.iVAIdStorage=clusterState.getStorageVaId();
  int iReturnValue=0;
  iReturnValue=determineSimilarities(set,clusterState.getClustererType());
  if (iReturnValue == -1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
 else   if (iReturnValue == -2) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  this.set=set;
  if (clusterState.isUseMaximumLinkage())   virtualArray=pmlcluster(clusterState.getClustererType());
 else   virtualArray=palcluster(clusterState.getClustererType());
  return virtualArray;
}",0.9378185524974516
58701,"/** 
 * Function responsible for initialization of hierarchy levels. Depending on the amount of samples in the data set 2 or 3 levels are used.
 */
private void initHierarchy(){
  if (set == null)   return;
  iNumberOfElements=contentVA.size();
  if (iNumberOfElements < MIN_SAMPLES_SKIP_LEVEL_2) {
    bSkipLevel1=true;
    bSkipLevel2=true;
    iSamplesPerHeatmap=iNumberOfElements;
    iAlNumberSamples.clear();
    iAlNumberSamples.add(iNumberOfElements);
  }
 else   if (iNumberOfElements < MIN_SAMPLES_SKIP_LEVEL_1) {
    bSkipLevel1=true;
    bSkipLevel2=false;
    iSamplesPerTexture=iNumberOfElements;
    iSamplesLevel2=iNumberOfElements;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
 else {
    bSkipLevel1=false;
    bSkipLevel2=false;
    iSamplesPerTexture=(int)Math.floor(iNumberOfElements / 5);
    if (iSamplesPerTexture > MAX_SAMPLES_PER_TEXTURE)     iSamplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
    iSamplesLevel2=200;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesLevel2 / 3);
  }
  if (iSamplesPerHeatmap > MAX_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MAX_SAMPLES_PER_HEATMAP;
  if (iSamplesPerHeatmap < MIN_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MIN_SAMPLES_PER_HEATMAP;
}","/** 
 * Function responsible for initialization of hierarchy levels. Depending on the amount of samples in the data set 2 or 3 levels are used.
 */
private void initHierarchy(){
  if (set == null)   return;
  iNumberOfElements=contentVA.size();
  if (iNumberOfElements < MIN_SAMPLES_SKIP_LEVEL_2) {
    bSkipLevel1=true;
    bSkipLevel2=true;
    iSamplesPerHeatmap=iNumberOfElements;
    iAlNumberSamples.clear();
    iAlNumberSamples.add(iNumberOfElements);
  }
 else   if (iNumberOfElements < MIN_SAMPLES_SKIP_LEVEL_1) {
    bSkipLevel1=true;
    bSkipLevel2=false;
    iSamplesPerTexture=iNumberOfElements;
    iSamplesLevel2=iNumberOfElements;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
 else {
    bSkipLevel1=false;
    bSkipLevel2=false;
    iSamplesPerTexture=(int)Math.floor(iNumberOfElements / 5);
    if (iSamplesPerTexture > MAX_SAMPLES_PER_TEXTURE)     iSamplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
    if (iSamplesPerTexture < MIN_SAMPLES_PER_TEXTURE && iNumberOfElements > MIN_SAMPLES_PER_TEXTURE)     iSamplesPerTexture=MIN_SAMPLES_PER_TEXTURE;
    iSamplesLevel2=200;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesLevel2 / 3);
  }
  if (iSamplesPerHeatmap > MAX_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MAX_SAMPLES_PER_HEATMAP;
  if (iSamplesPerHeatmap < MIN_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MIN_SAMPLES_PER_HEATMAP;
}",0.9424932458510228
58702,"/** 
 * Handles drag&drop of groups in experiment dimension
 * @param gl
 */
private void handleDragDropGroupExperiments(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iTargetIdx=0;
  int iNrSamples=storageVA.size();
  float fgaps=0;
  if (bSkipLevel1)   fgaps=GAP_LEVEL2_3 + 0.2f;
 else   fgaps=GAP_LEVEL1_2 + GAP_LEVEL2_3;
  float fleftOffset=0.075f + fgaps + viewFrustum.getWidth() / 4f * fAnimationScale;
  float fWidthSample=fWidthEHM / iNrSamples;
  int currentElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  IGroupList groupList=storageVA.getGroupList();
  int iNrElementsInGroup=groupList.get(iExpGroupToDrag).getNrElements();
  float currentWidth=fWidthSample * iNrElementsInGroup;
  float fHeight=viewFrustum.getHeight();
  if (fArTargetWorldCoordinates[0] > fleftOffset && fArTargetWorldCoordinates[0] < fleftOffset + fWidthEHM) {
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(fArTargetWorldCoordinates[0],fHeight,0);
    gl.glVertex3f(fArTargetWorldCoordinates[0],fHeight - 0.1f,0);
    gl.glVertex3f(fArTargetWorldCoordinates[0] + currentWidth,fHeight - 0.1f,0);
    gl.glVertex3f(fArTargetWorldCoordinates[0] + currentWidth,fHeight,0);
    gl.glEnd();
  }
  float fXPosRelease=fArTargetWorldCoordinates[0] - fleftOffset;
  currentElement=(int)Math.ceil(fXPosRelease / fWidthSample);
  int iElemOffset=0;
  int cnt=0;
  if (groupList == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Group currentGroup : groupList) {
    if (currentElement < (iElemOffset + currentGroup.getNrElements())) {
      iTargetIdx=cnt;
      break;
    }
    cnt++;
    iElemOffset+=currentGroup.getNrElements();
  }
  float fPosDropMarker=fleftOffset + fWidthSample * iElemOffset;
  gl.glLineWidth(6f);
  gl.glColor3f(1,0,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(fPosDropMarker,fHeight,0);
  gl.glVertex3f(fPosDropMarker,fHeight - 0.2f,0);
  gl.glEnd();
  if (glMouseListener.wasMouseReleased()) {
    if (groupList.move(storageVA,iExpGroupToDrag,iTargetIdx) == false)     System.out.println(""String_Node_Str"");
    bDragDropExpGroup=false;
    bActivateDraggingExperiments=false;
    bRedrawTextures=true;
    setDisplayListDirty();
  }
}","/** 
 * Handles drag&drop of groups in experiment dimension
 * @param gl
 */
private void handleDragDropGroupExperiments(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iTargetIdx=0;
  int iNrSamples=storageVA.size();
  float fgaps=0;
  if (bSkipLevel1)   fgaps=GAP_LEVEL2_3 + 0.2f;
 else   fgaps=GAP_LEVEL1_2 + GAP_LEVEL2_3;
  float fleftOffset=0.075f + fgaps + viewFrustum.getWidth() / 4f * fAnimationScale;
  float fWidthSample=fWidthEHM / iNrSamples;
  int currentElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  IGroupList groupList=storageVA.getGroupList();
  int iNrElementsInGroup=groupList.get(iExpGroupToDrag).getNrElements();
  float currentWidth=fWidthSample * iNrElementsInGroup;
  float fHeight=viewFrustum.getHeight();
  if (fArTargetWorldCoordinates[0] > fleftOffset && fArTargetWorldCoordinates[0] < fleftOffset + fWidthEHM) {
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(fArTargetWorldCoordinates[0],fHeight,0);
    gl.glVertex3f(fArTargetWorldCoordinates[0],fHeight - 0.1f,0);
    gl.glVertex3f(fArTargetWorldCoordinates[0] + currentWidth,fHeight - 0.1f,0);
    gl.glVertex3f(fArTargetWorldCoordinates[0] + currentWidth,fHeight,0);
    gl.glEnd();
  }
  float fXPosRelease=fArTargetWorldCoordinates[0] - fleftOffset;
  currentElement=(int)Math.ceil(fXPosRelease / fWidthSample);
  int iElemOffset=0;
  int cnt=0;
  if (groupList == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Group currentGroup : groupList) {
    if (currentElement < (iElemOffset + currentGroup.getNrElements())) {
      iTargetIdx=cnt;
      if (iExpGroupToDrag < iTargetIdx)       iElemOffset+=currentGroup.getNrElements();
      break;
    }
    cnt++;
    iElemOffset+=currentGroup.getNrElements();
  }
  float fPosDropMarker=fleftOffset + fWidthSample * iElemOffset;
  gl.glLineWidth(6f);
  gl.glColor3f(1,0,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(fPosDropMarker,fHeight,0);
  gl.glVertex3f(fPosDropMarker,fHeight - 0.2f,0);
  gl.glEnd();
  if (glMouseListener.wasMouseReleased()) {
    if (groupList.move(storageVA,iExpGroupToDrag,iTargetIdx) == false)     System.out.println(""String_Node_Str"");
    bDragDropExpGroup=false;
    bActivateDraggingExperiments=false;
    bRedrawTextures=true;
    setDisplayListDirty();
  }
}",0.9812671016628078
58703,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      contentVA.getGroupList().get(iExternalID).toggleSelectionType();
    bActivateDraggingGenes=true;
  setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingGenes == false) return;
if (bDragDropGeneGroup == false) {
bDragDropGeneGroup=true;
bDragDropExpGroup=false;
iGeneGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=contentVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(true,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
storageVA.getGroupList().get(iExternalID).toggleSelectionType();
deactivateAllDraggingCursor();
bActivateDraggingExperiments=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingExperiments == false) return;
if (bDragDropExpGroup == false) {
bDragDropExpGroup=true;
bDragDropGeneGroup=false;
iExpGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=storageVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(false,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingActiveLevel1=true;
bDisableBlockDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingWholeBlockLevel1=true;
bDisableCursorDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingActiveLevel2=true;
bDisableBlockDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingWholeBlockLevel2=true;
bDisableCursorDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel1=pick.getPickedPoint();
setEmbeddedHeatMapData();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel2=pick.getPickedPoint();
setEmbeddedHeatMapData();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      contentVA.getGroupList().get(iExternalID).toggleSelectionType();
    deactivateAllDraggingCursor();
  bActivateDraggingGenes=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingGenes == false) return;
if (bDragDropGeneGroup == false) {
bDragDropGeneGroup=true;
bDragDropExpGroup=false;
iGeneGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=contentVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(true,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
storageVA.getGroupList().get(iExternalID).toggleSelectionType();
deactivateAllDraggingCursor();
bActivateDraggingExperiments=true;
setDisplayListDirty();
break;
case DRAGGED:
if (bActivateDraggingExperiments == false) return;
if (bDragDropExpGroup == false) {
bDragDropExpGroup=true;
bDragDropGeneGroup=false;
iExpGroupToDrag=iExternalID;
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
boolean bEnableInterchange=false;
boolean bEnableMerge=false;
int iNrSelectedGroups=0;
IGroupList tempGroupList=storageVA.getGroupList();
for (Group group : tempGroupList) {
if (group.getSelectionType() == ESelectionType.SELECTION) iNrSelectedGroups++;
}
if (iNrSelectedGroups >= 2) {
bEnableMerge=true;
if (iNrSelectedGroups == 2) bEnableInterchange=true;
GroupContextMenuItemContainer groupContextMenuItemContainer=new GroupContextMenuItemContainer();
groupContextMenuItemContainer.setContextMenuFlags(false,bEnableMerge,bEnableInterchange);
contextMenu.addItemContanier(groupContextMenuItemContainer);
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingActiveLevel1=true;
bDisableBlockDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL1:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel1=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel1) return;
if (bActivateDraggingLevel1 == false) return;
bIsDraggingWholeBlockLevel1=true;
bDisableCursorDraggingLevel1=true;
iDraggedCursorLevel1=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableCursorDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingActiveLevel2=true;
bDisableBlockDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR_LEVEL2:
switch (pickingMode) {
case CLICKED:
deactivateAllDraggingCursor();
bActivateDraggingLevel2=true;
break;
case DRAGGED:
if (bDisableBlockDraggingLevel2) return;
if (bActivateDraggingLevel2 == false) return;
bIsDraggingWholeBlockLevel2=true;
bDisableCursorDraggingLevel2=true;
iDraggedCursorLevel2=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel1=pick.getPickedPoint();
setEmbeddedHeatMapData();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
pickingPointLevel2=pick.getPickedPoint();
setEmbeddedHeatMapData();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
}",0.9914881676176224
58704,"/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleCursorDraggingLevel2(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iSamplesLevel2;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel2 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel2 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel2 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorFirstElementLevel2=fYPosMouse;
        iFirstSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
        generalManager.getPreferenceStore().setValue(PreferenceConstants.HM_NUM_SAMPLES_PER_HEATMAP,iSamplesPerHeatmap);
      }
    }
  }
  if (iDraggedCursorLevel2 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel2 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel2 + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorLastElementLevel2=fYPosMouse;
        iLastSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
        generalManager.getPreferenceStore().setValue(PreferenceConstants.HM_NUM_SAMPLES_PER_HEATMAP,iSamplesPerHeatmap);
      }
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel2=false;
    bDisableBlockDraggingLevel2=false;
    bActivateDraggingLevel2=false;
  }
}","/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleCursorDraggingLevel2(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iSamplesLevel2;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel2 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel2 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel2 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorFirstElementLevel2=fYPosMouse;
        iFirstSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
      }
    }
  }
  if (iDraggedCursorLevel2 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel2 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel2 + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_HEATMAP && iNrSamples < MAX_SAMPLES_PER_HEATMAP) {
        fPosCursorLastElementLevel2=fYPosMouse;
        iLastSampleLevel2=iselElement;
        iSamplesPerHeatmap=iLastSampleLevel2 - iFirstSampleLevel2 + 1;
      }
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel2=false;
    bDisableBlockDraggingLevel2=false;
    bActivateDraggingLevel2=false;
  }
}",0.7360537190082644
58705,"private void handleCursorDraggingLevel1(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iNumberOfElements;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel1 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel1 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel1 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_TEXTURE && iNrSamples < MAX_SAMPLES_PER_TEXTURE) {
        fPosCursorFirstElementLevel1=fYPosMouse;
        iFirstSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  if (iDraggedCursorLevel1 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel1 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel1 + 1;
      if (iNrSamples >= MIN_SAMPLES_PER_TEXTURE && iNrSamples < MAX_SAMPLES_PER_TEXTURE) {
        fPosCursorLastElementLevel1=fYPosMouse;
        iLastSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel1=false;
    bDisableBlockDraggingLevel1=false;
    bActivateDraggingLevel1=false;
  }
}","private void handleCursorDraggingLevel1(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iselElement;
  int iNrSamples;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fTextureHeight=viewFrustum.getHeight() - 0.6f;
  float fStep=fTextureHeight / iNumberOfElements;
  float fYPosMouse=fArTargetWorldCoordinates[1] - 0.4f;
  if (iDraggedCursorLevel1 == 1) {
    if (fYPosMouse > fPosCursorLastElementLevel1 && fYPosMouse <= viewFrustum.getHeight() - 0.6f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iLastSampleLevel1 - iselElement + 1;
      if (iNrSamples >= MIN_SAMPLES_LEVEL_2 && iNrSamples < MAX_SAMPLES_LEVEL_2) {
        fPosCursorFirstElementLevel1=fYPosMouse;
        iFirstSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  if (iDraggedCursorLevel1 == 2) {
    if (fYPosMouse < fPosCursorFirstElementLevel1 && fYPosMouse >= 0.0f) {
      iselElement=(int)Math.floor((fTextureHeight - fYPosMouse) / fStep);
      iNrSamples=iselElement - iFirstSampleLevel1 + 1;
      if (iNrSamples >= MIN_SAMPLES_LEVEL_2 && iNrSamples < MAX_SAMPLES_LEVEL_2) {
        fPosCursorLastElementLevel1=fYPosMouse;
        iLastSampleLevel1=iselElement;
        iSamplesLevel2=iLastSampleLevel1 - iFirstSampleLevel1 + 1;
      }
    }
  }
  setDisplayListDirty();
  setEmbeddedHeatMapData();
  if (glMouseListener.wasMouseReleased()) {
    bIsDraggingActiveLevel1=false;
    bDisableBlockDraggingLevel1=false;
    bActivateDraggingLevel1=false;
  }
}",0.9813302217036172
58706,"/** 
 * Handles drag&drop of groups in gene dimension
 * @param gl
 */
private void handleDragDropGroupGenes(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iTargetIdx=0;
  int iNumberSample=iNumberOfElements;
  float fOffsety;
  int currentElement;
  float fHeight=viewFrustum.getHeight() - 0.2f;
  float fHeightSample=(fHeight - 0.4f) / iNumberSample;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  IGroupList groupList=contentVA.getGroupList();
  int iNrElementsInGroup=groupList.get(iGeneGroupToDrag).getNrElements();
  float currentHeight=fHeightSample * iNrElementsInGroup;
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0f,fArTargetWorldCoordinates[1],0);
  gl.glVertex3f(0f,fArTargetWorldCoordinates[1] + currentHeight,0);
  gl.glVertex3f(0.1f,fArTargetWorldCoordinates[1] + currentHeight,0);
  gl.glVertex3f(0.1f,fArTargetWorldCoordinates[1],0);
  gl.glEnd();
  fOffsety=viewFrustum.getHeight() - fArTargetWorldCoordinates[1] - 0.4f;
  currentElement=(int)Math.ceil(fOffsety / fHeightSample);
  int iElemOffset=0;
  int cnt=0;
  if (groupList == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Group currentGroup : groupList) {
    if (currentElement < (iElemOffset + currentGroup.getNrElements())) {
      iTargetIdx=cnt;
      break;
    }
    cnt++;
    iElemOffset+=currentGroup.getNrElements();
  }
  float fPosDropMarker=fHeight - (fHeightSample * iElemOffset);
  gl.glLineWidth(6f);
  gl.glColor3f(1,0,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(0,fPosDropMarker,0);
  gl.glVertex3f(0.2f,fPosDropMarker,0);
  gl.glEnd();
  if (glMouseListener.wasMouseReleased()) {
    if (groupList.move(contentVA,iGeneGroupToDrag,iTargetIdx) == false)     System.out.println(""String_Node_Str"");
    bDragDropGeneGroup=false;
    bActivateDraggingGenes=false;
    bRedrawTextures=true;
    setDisplayListDirty();
  }
}","/** 
 * Handles drag&drop of groups in gene dimension
 * @param gl
 */
private void handleDragDropGroupGenes(final GL gl){
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  int iTargetIdx=0;
  int iNumberSample=iNumberOfElements;
  float fOffsety;
  int currentElement;
  float fHeight=viewFrustum.getHeight() - 0.2f;
  float fHeightSample=(fHeight - 0.4f) / iNumberSample;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  IGroupList groupList=contentVA.getGroupList();
  int iNrElementsInGroup=groupList.get(iGeneGroupToDrag).getNrElements();
  float currentHeight=fHeightSample * iNrElementsInGroup;
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0f,fArTargetWorldCoordinates[1],0);
  gl.glVertex3f(0f,fArTargetWorldCoordinates[1] + currentHeight,0);
  gl.glVertex3f(0.1f,fArTargetWorldCoordinates[1] + currentHeight,0);
  gl.glVertex3f(0.1f,fArTargetWorldCoordinates[1],0);
  gl.glEnd();
  fOffsety=viewFrustum.getHeight() - fArTargetWorldCoordinates[1] - 0.4f;
  currentElement=(int)Math.ceil(fOffsety / fHeightSample);
  int iElemOffset=0;
  int cnt=0;
  if (groupList == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Group currentGroup : groupList) {
    if (currentElement < (iElemOffset + currentGroup.getNrElements())) {
      iTargetIdx=cnt;
      if (iGeneGroupToDrag < iTargetIdx)       iElemOffset+=currentGroup.getNrElements();
      break;
    }
    cnt++;
    iElemOffset+=currentGroup.getNrElements();
  }
  float fPosDropMarker=fHeight - (fHeightSample * iElemOffset);
  gl.glLineWidth(6f);
  gl.glColor3f(1,0,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(0,fPosDropMarker,0);
  gl.glVertex3f(0.2f,fPosDropMarker,0);
  gl.glEnd();
  if (glMouseListener.wasMouseReleased()) {
    if (groupList.move(contentVA,iGeneGroupToDrag,iTargetIdx) == false)     System.out.println(""String_Node_Str"");
    bDragDropGeneGroup=false;
    bActivateDraggingGenes=false;
    bRedrawTextures=true;
    setDisplayListDirty();
  }
}",0.9780058651026392
58707,"private void createTreeClusteringTab(TabFolder tabFolder){
  treeClusteringTab=new TabItem(tabFolder,SWT.NONE);
  treeClusteringTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  treeClusteringTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  final Combo clusterTypeCombo=new Combo(composite,SWT.DROP_DOWN);
  clusterTypeCombo.setItems(sArTypeOptions);
  clusterTypeCombo.select(0);
  clusterType=sArTypeOptions[0];
  clusterTypeCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      clusterType=clusterTypeCombo.getText();
    }
  }
);
  final Combo distMeasureCombo=new Combo(composite,SWT.DROP_DOWN);
  distMeasureCombo.setItems(sArDistOptions);
  distMeasureCombo.setEnabled(true);
  distMeasureCombo.select(0);
  distmeasure=sArDistOptions[0];
  distMeasureCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      distmeasure=distMeasureCombo.getText();
    }
  }
);
}","private void createTreeClusteringTab(TabFolder tabFolder){
  treeClusteringTab=new TabItem(tabFolder,SWT.NONE);
  treeClusteringTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  treeClusteringTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  Composite clusterComposite=new Composite(composite,SWT.NONE);
  clusterComposite.setLayout(new RowLayout());
  final Combo clusterTypeCombo=new Combo(clusterComposite,SWT.DROP_DOWN);
  clusterTypeCombo.setItems(sArTypeOptions);
  clusterTypeCombo.select(0);
  clusterType=sArTypeOptions[0];
  clusterTypeCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      clusterType=clusterTypeCombo.getText();
    }
  }
);
  final Combo treeClustererCombo=new Combo(clusterComposite,SWT.DROP_DOWN);
  treeClustererCombo.setItems(sArTreeClusterer);
  treeClustererCombo.select(0);
  bUseMaximumLinkage=true;
  treeClustererCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (treeClustererCombo.getText() == sArTreeClusterer[0])       bUseMaximumLinkage=true;
 else       bUseMaximumLinkage=false;
    }
  }
);
  final Combo distMeasureCombo=new Combo(composite,SWT.DROP_DOWN);
  distMeasureCombo.setItems(sArDistOptions);
  distMeasureCombo.setEnabled(true);
  distMeasureCombo.select(0);
  distmeasure=sArDistOptions[0];
  distMeasureCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      distmeasure=distMeasureCombo.getText();
    }
  }
);
}",0.6838424733161576
58708,"public void execute(boolean cancelPressed){
  if (cancelPressed) {
    clusterState=null;
    return;
  }
  if (clusterType.equals(sArTypeOptions[0]))   clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
 else   if (clusterType.equals(sArTypeOptions[1]))   clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
 else   if (clusterType.equals(sArTypeOptions[2]))   clusterState.setClustererType(EClustererType.BI_CLUSTERING);
  if (distmeasure.equals(sArDistOptions[0]))   clusterState.setDistanceMeasure(EDistanceMeasure.EUCLIDEAN_DISTANCE);
 else   if (distmeasure.equals(sArDistOptions[1]))   clusterState.setDistanceMeasure(EDistanceMeasure.PEARSON_CORRELATION);
 else   if (distmeasure.equals(sArDistOptionsWeka[1]))   clusterState.setDistanceMeasure(EDistanceMeasure.MANHATTAHN_DISTANCE);
  clusterState.setAffinityPropClusterFactorGenes(fclusterFactorGenes);
  clusterState.setAffinityPropClusterFactorExperiments(fclusterFactorExperiments);
  clusterState.setKMeansClusterCntGenes(iClusterCntGenes);
  clusterState.setKMeansClusterCntExperiments(iClusterCntExperiments);
  ClusteringProgressBar progressBar=new ClusteringProgressBar(clusterState.getClustererAlgo(),clusterState.getClustererType());
  progressBar.run();
}","public void execute(boolean cancelPressed){
  if (cancelPressed) {
    clusterState=null;
    return;
  }
  if (clusterType.equals(sArTypeOptions[0]))   clusterState.setClustererType(EClustererType.GENE_CLUSTERING);
 else   if (clusterType.equals(sArTypeOptions[1]))   clusterState.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
 else   if (clusterType.equals(sArTypeOptions[2]))   clusterState.setClustererType(EClustererType.BI_CLUSTERING);
  if (distmeasure.equals(sArDistOptions[0]))   clusterState.setDistanceMeasure(EDistanceMeasure.EUCLIDEAN_DISTANCE);
 else   if (distmeasure.equals(sArDistOptions[1]))   clusterState.setDistanceMeasure(EDistanceMeasure.PEARSON_CORRELATION);
 else   if (distmeasure.equals(sArDistOptionsWeka[1]))   clusterState.setDistanceMeasure(EDistanceMeasure.MANHATTAHN_DISTANCE);
  clusterState.setAffinityPropClusterFactorGenes(fclusterFactorGenes);
  clusterState.setAffinityPropClusterFactorExperiments(fclusterFactorExperiments);
  clusterState.setKMeansClusterCntGenes(iClusterCntGenes);
  clusterState.setKMeansClusterCntExperiments(iClusterCntExperiments);
  clusterState.setUseMaximumLinkage(bUseMaximumLinkage);
  ClusteringProgressBar progressBar=new ClusteringProgressBar(clusterState.getClustererAlgo(),clusterState.getClustererType());
  progressBar.run();
}",0.9778123783573376
58709,"@Override public void doCommand(){
  generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + loadDataParameters.getFileName() + ""String_Node_Str""+ loadDataParameters.getInputPattern()+ ""String_Node_Str""+ iAlStorageIDs.toString()));
  TabularAsciiDataReader loader=new TabularAsciiDataReader(loadDataParameters.getFileName());
  loader.setTokenPattern(loadDataParameters.getInputPattern());
  loader.setTargetStorages(iAlStorageIDs);
  if (loadDataParameters.isUseExperimentClusterInfo())   loader.enableExperimentClusterInfo();
  loader.setStartParsingStopParsingAtLine(loadDataParameters.getStartParseFileAtLine(),loadDataParameters.getStopParseFileAtLine());
  if (loadDataParameters.getDelimiter() != null && loadDataParameters.getDelimiter().isEmpty()) {
    loader.setTokenSeperator(loadDataParameters.getDelimiter());
  }
  bParsingOK=loader.loadData();
  generalManager.getGUIBridge().setFileNameCurrentDataSet(loadDataParameters.getFileName());
  String geneTreeFileName=loadDataParameters.getGeneTreeFileName();
  if (geneTreeFileName != null) {
    if (geneTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + geneTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importTree(geneTreeFileName);
        ISet set=generalManager.getUseCase().getSet();
        set.setClusteredTreeGenes(tree);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      JAXBException e) {
        e.printStackTrace();
      }
    }
  }
  String experimentsTreeFileName=loadDataParameters.getExperimentsFileName();
  if (experimentsTreeFileName != null) {
    if (experimentsTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + experimentsTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importTree(experimentsTreeFileName);
        ISet set=generalManager.getUseCase().getSet();
        set.setClusteredTreeExps(tree);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      JAXBException e) {
        e.printStackTrace();
      }
    }
  }
  commandManager.runDoCommand(this);
}","@Override public void doCommand(){
  generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + loadDataParameters.getFileName() + ""String_Node_Str""+ loadDataParameters.getInputPattern()+ ""String_Node_Str""+ iAlStorageIDs.toString()));
  TabularAsciiDataReader loader=new TabularAsciiDataReader(loadDataParameters.getFileName());
  loader.setTokenPattern(loadDataParameters.getInputPattern());
  loader.setTargetStorages(iAlStorageIDs);
  if (loadDataParameters.isUseExperimentClusterInfo())   loader.enableExperimentClusterInfo();
  loader.setStartParsingStopParsingAtLine(loadDataParameters.getStartParseFileAtLine(),loadDataParameters.getStopParseFileAtLine());
  if (loadDataParameters.getDelimiter() != null && !loadDataParameters.getDelimiter().isEmpty()) {
    loader.setTokenSeperator(loadDataParameters.getDelimiter());
  }
  bParsingOK=loader.loadData();
  generalManager.getGUIBridge().setFileNameCurrentDataSet(loadDataParameters.getFileName());
  String geneTreeFileName=loadDataParameters.getGeneTreeFileName();
  if (geneTreeFileName != null) {
    if (geneTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + geneTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importTree(geneTreeFileName);
        ISet set=generalManager.getUseCase().getSet();
        set.setClusteredTreeGenes(tree);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      JAXBException e) {
        e.printStackTrace();
      }
    }
  }
  String experimentsTreeFileName=loadDataParameters.getExperimentsFileName();
  if (experimentsTreeFileName != null) {
    if (experimentsTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + experimentsTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree;
      try {
        tree=treePorter.importTree(experimentsTreeFileName);
        ISet set=generalManager.getUseCase().getSet();
        set.setClusteredTreeExps(tree);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      JAXBException e) {
        e.printStackTrace();
      }
    }
  }
  GeneralManager.get().getUseCase().setLoadDataParameters(loadDataParameters);
  commandManager.runDoCommand(this);
}",0.9839807769323188
58710,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHyperbolic(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HYPERBOLIC;
  colorMappingManager=ColorMappingManager.get();
  renderStyle=new HyperbolicRenderStyle(viewFrustum);
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  tree=new Tree<ADrawAbleNode>();
  ADrawAbleNode test=new TestNode(""String_Node_Str"",1);
  tree.setRootNode(test);
  layouter=new LinearTreeLayouter(viewFrustum);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHyperbolic(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HYPERBOLIC;
  colorMappingManager=ColorMappingManager.get();
  renderStyle=new HyperbolicRenderStyle(viewFrustum);
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  tree=new Tree<ADrawAbleNode>();
  ADrawAbleNode test=new TestNode(""String_Node_Str"",0);
  tree.setRootNode(test);
  for (int i=1; i <= 21; ++i) {
    ADrawAbleNode test2=new TestNode(""String_Node_Str"",i);
    tree.addChild(test,test2);
    test=test2;
  }
  layouter=new LinearTreeLayouter(viewFrustum);
}",0.8860911270983214
58711,"public int getDepth(){
  if (isDepthFlagDirty()) {
    resetDepthFlag();
    return determineDepth(rootNode);
  }
  return iDepth;
}","public int getDepth(){
  if (isDepthFlagDirty()) {
    resetDepthFlag();
    iDepth=determineDepth(rootNode);
  }
  return iDepth;
}",0.9621212121212122
58712,"private int determineDepth(NodeType node){
  NodeInfo info=mNodeMap.get(node);
  if (hasChildren(node)) {
    int tmpDepth=info.getLayer();
    for (    NodeType currentNode : getChildren(node)) {
      int iChildDepth=determineDepth(currentNode);
      if (tmpDepth <= iChildDepth)       tmpDepth=iChildDepth;
    }
    iDepth=tmpDepth;
  }
  return info.getLayer();
}","private int determineDepth(NodeType node){
  NodeInfo info=mNodeMap.get(node);
  if (hasChildren(node)) {
    int tmpDepth=0;
    for (    NodeType currentNode : getChildren(node)) {
      int iChildDepth=determineDepth(currentNode);
      if (tmpDepth <= iChildDepth)       tmpDepth=iChildDepth;
    }
    return tmpDepth;
  }
 else   return info.getLayer();
}",0.3863013698630137
58713,"@Override public void renderTreeLayout(GL gl,Tree<ADrawAbleNode> tree){
  updateSizeInfo();
  if (tree == null)   return;
  int deph=30;
  int iNumNodesInLayer=1;
  IDrawAbleNode rootNode=tree.getRoot();
  float f=0;
  for (int i=0; i <= deph; i++)   f=f + (float)Math.pow((double)HyperbolicRenderStyle.LIN_TREE_X_SCALING_PER_LAYER,i);
  float fLayerSpacing=fViewSpaceYAbs / f;
  float fYOff=fViewSpaceY[1] - fLayerSpacing;
  for (int i=1; i <= deph; ++i) {
    float fYCoord=fYOff + fLayerSpacing / 2f;
    float fNodeSpacing=fViewSpaceXAbs / (i + 1);
    for (int j=1; j <= i; j++) {
      float fXCoord=fViewSpaceX[0] + j * fNodeSpacing;
      float fZCoord=0;
      rootNode.drawAtPostion(gl,fXCoord,fYCoord,fZCoord,fLayerSpacing * 0.8f,fNodeSpacing,EDrawAbleNodeDetailLevel.VeryHigh);
    }
    fLayerSpacing=fLayerSpacing * (float)Math.pow((double)HyperbolicRenderStyle.LIN_TREE_X_SCALING_PER_LAYER,i);
    fYOff=fYOff - fLayerSpacing;
  }
  gl.glEnd();
  gl.glFlush();
  return;
}","@Override public void renderTreeLayout(GL gl,Tree<ADrawAbleNode> tree){
  updateSizeInfo();
  if (tree == null)   return;
  int deph=tree.getDepth();
  IDrawAbleNode rootNode=tree.getRoot();
  float f=0;
  for (int i=0; i < deph; i++)   f=f + (float)Math.pow((double)HyperbolicRenderStyle.LIN_TREE_Y_SCALING_PER_LAYER,i);
  float fLayerSpacing=fViewSpaceYAbs / f;
  float fYOff=fViewSpaceY[1] - fLayerSpacing;
  for (int i=1; i <= deph; ++i) {
    float fYCoord=fYOff + fLayerSpacing / 2f;
    float fNodeSpacing=fViewSpaceXAbs / (i + 1);
    for (int j=1; j <= i; j++) {
      float fXCoord=fViewSpaceX[0] + j * fNodeSpacing;
      float fZCoord=0;
      rootNode.drawAtPostion(gl,fXCoord,fYCoord,fZCoord,fLayerSpacing * 0.8f,fNodeSpacing,EDrawAbleNodeDetailLevel.Low);
    }
    fLayerSpacing=fLayerSpacing * HyperbolicRenderStyle.LIN_TREE_Y_SCALING_PER_LAYER;
    fYOff=fYOff - fLayerSpacing;
  }
  gl.glEnd();
  gl.glFlush();
  return;
}",0.9553941908713692
58714,"/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
private IVirtualArray palcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> alIndices=new ArrayList<Integer>();
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int sum;
      int is=1;
      int js=0;
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      sum=number[is] + number[js];
      for (j=0; j < js; j++) {
        distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
        distmatrix[js][j]/=sum;
      }
      for (j=js + 1; j < is; j++) {
        distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=is + 1; j < n; j++) {
        distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      number[js]=sum;
      number[is]=number[n - 1];
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  for (int i=0; i < result.length; i++) {
    if (result[i].getLeft() >= 0)     alIndices.add(result[i].getLeft());
    if (result[i].getRight() >= 0)     alIndices.add(result[i].getRight());
  }
  tree=new Tree<ClusterNode>();
  int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
  ClusterNode node=new ClusterNode(""String_Node_Str"",random,0f,0,true);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  alIndices=getAl();
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),alIndices);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),alIndices);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}","/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
private IVirtualArray palcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> alIndices=new ArrayList<Integer>();
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return null;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int sum;
      int is=1;
      int js=0;
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      sum=number[is] + number[js];
      for (j=0; j < js; j++) {
        distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
        distmatrix[js][j]/=sum;
      }
      for (j=js + 1; j < is; j++) {
        distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=is + 1; j < n; j++) {
        distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      number[js]=sum;
      number[is]=number[n - 1];
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return null;
    }
  }
  for (int i=0; i < result.length; i++) {
    if (result[i].getLeft() >= 0)     alIndices.add(result[i].getLeft());
    if (result[i].getRight() >= 0)     alIndices.add(result[i].getRight());
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",getNodeCounter(),0f,0,true);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  alIndices=getAl();
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  IVirtualArray virtualArray=null;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),alIndices);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),alIndices);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.989163076119598
58715,"private ArrayList<Integer> getAl(ArrayList<Integer> alExamples,ArrayList<Integer> count,ArrayList<Integer> idxExamples,int[] idx,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int counter=0;
  int idxCnt=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    for (    Integer example : alExamples) {
      for (      Integer icontent : contentVA) {
        if (idx[contentVA.indexOf(icontent)] == example) {
          indexes.add(icontent);
          count.set(counter,count.get(counter) + 1);
        }
        if (example == contentVA.indexOf(icontent)) {
          idxExamples.add(idxCnt);
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
 else {
    for (    Integer example : alExamples) {
      for (      Integer icontent : storageVA) {
        if (idx[storageVA.indexOf(icontent)] == example) {
          indexes.add(icontent);
          count.set(counter,count.get(counter) + 1);
        }
        if (example == storageVA.indexOf(icontent)) {
          idxExamples.add(idxCnt);
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
  return indexes;
}","private ArrayList<Integer> getAl(ArrayList<Integer> alExamples,ArrayList<Integer> count,ArrayList<Integer> idxExamples,int[] idx,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int counter=0;
  int idxCnt=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    for (    Integer example : alExamples) {
      for (      Integer icontent : contentVA) {
        if (idx[contentVA.get(icontent)] == example) {
          indexes.add(icontent);
          count.set(counter,count.get(counter) + 1);
        }
        if (example == contentVA.get(icontent)) {
          idxExamples.add(contentVA.get(example));
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
 else {
    for (    Integer example : alExamples) {
      for (      Integer icontent : storageVA) {
        if (idx[storageVA.get(icontent)] == example) {
          indexes.add(icontent);
          count.set(counter,count.get(counter) + 1);
        }
        if (example == storageVA.get(icontent)) {
          idxExamples.add(storageVA.get(example));
          idxCnt=0;
        }
        idxCnt++;
      }
      counter++;
    }
  }
  return indexes;
}",0.7076205287713841
58716,"private IVirtualArray cluster(ISet set,ClusterState clusterState){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  DistanceFunction distFunc=null;
  if (clusterState.getDistanceMeasure() == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distFunc=new EuclideanDistance();
 else   if (clusterState.getDistanceMeasure() == EDistanceMeasure.MANHATTAHN_DISTANCE)   distFunc=new ManhattanDistance();
  try {
    clusterer.setNumClusters(iNrCluster);
    clusterer.setMaxIterations(1000);
    if (distFunc != null)     clusterer.setDistanceFunction(distFunc);
  }
 catch (  Exception e2) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=contentVA.size();
    if (iNrCluster >= iNrElements)     return null;
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=storageVA.size();
    if (iNrCluster >= iNrElements)     return null;
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] ClusterAssignments=eval.getClusterAssignments();
  for (int i=0; i < iNrCluster; i++) {
    count.add(0);
  }
  for (int j=0; j < iNrCluster; j++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == j) {
        alExamples.add(i);
        break;
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,clusterState.getClustererType());
  IVirtualArray virualArray;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   virualArray=set.getVA(iVAIdContent);
 else   virualArray=set.getVA(iVAIdStorage);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        indexes.add(virualArray.get(i));
        count.set(cluster,count.get(cluster) + 1);
      }
    }
  }
  IVirtualArray virtualArray=null;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),indexes);
 else   if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),indexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return virtualArray;
}","private IVirtualArray cluster(ISet set,ClusterState clusterState){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  DistanceFunction distFunc=null;
  if (clusterState.getDistanceMeasure() == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distFunc=new EuclideanDistance();
 else   if (clusterState.getDistanceMeasure() == EDistanceMeasure.MANHATTAHN_DISTANCE)   distFunc=new ManhattanDistance();
  try {
    clusterer.setNumClusters(iNrCluster);
    clusterer.setMaxIterations(1000);
    if (distFunc != null)     clusterer.setDistanceFunction(distFunc);
  }
 catch (  Exception e2) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=contentVA.size();
    if (iNrCluster >= iNrElements)     return null;
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=storageVA.size();
    if (iNrCluster >= iNrElements)     return null;
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return null;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] ClusterAssignments=eval.getClusterAssignments();
  for (int i=0; i < iNrCluster; i++) {
    count.add(0);
  }
  IVirtualArray currentVA=null;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   currentVA=set.getVA(iVAIdContent);
 else   currentVA=set.getVA(iVAIdStorage);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        alExamples.add(currentVA.get(i));
        break;
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return null;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  IVirtualArray virualArray;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   virualArray=set.getVA(iVAIdContent);
 else   virualArray=set.getVA(iVAIdStorage);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        indexes.add(virualArray.get(i));
        count.set(cluster,count.get(cluster) + 1);
      }
    }
  }
  IVirtualArray virtualArray=null;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   virtualArray=new VirtualArray(EVAType.CONTENT,set.depth(),indexes);
 else   if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING)   virtualArray=new VirtualArray(EVAType.STORAGE,set.size(),indexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return virtualArray;
}",0.9184948423652476
58717,"private void renderClassAssignmentsGenesLevel2(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fHeightSamples=fHeight / iSamplesLevel2;
  float fFieldWith=viewFrustum.getWidth() / 4.0f * fAnimationScale;
  int iIdxCluster=0;
  int iCounter=iFirstSampleLevel1;
  Group group=contentVA.getGroupList().get(iIdxCluster);
  while (group.getNrElements() < iCounter) {
    iIdxCluster++;
    iCounter-=group.getNrElements();
    group=contentVA.getGroupList().get(iIdxCluster);
  }
  int iCnt=0;
  for (int i=0; i < iSamplesLevel2; i++) {
    if (iCounter == contentVA.getGroupList().get(iIdxCluster).getNrElements()) {
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)       gl.glColor4f(0f,0f,1f,0.5f);
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)       gl.glColor4f(0f,1f,0f,0.5f);
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(-0.1f,fHeight,0);
      gl.glVertex3f(0,fHeight,0);
      gl.glVertex3f(0,fHeight - fHeightSamples * iCnt,0);
      gl.glVertex3f(-0.1f,fHeight - fHeightSamples * iCnt,0);
      gl.glEnd();
      gl.glColor4f(0f,0f,1f,1);
      gl.glLineWidth(1f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(-0.1f,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glVertex3f(fFieldWith,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glEnd();
      fHeight-=fHeightSamples * iCnt;
      iIdxCluster++;
      iCounter=0;
      iCnt=0;
    }
    iCnt++;
    iCounter++;
  }
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)   gl.glColor4f(0f,0f,1f,0.5f);
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)   gl.glColor4f(0f,1f,0f,0.5f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(-0.1f,fHeight,0);
  gl.glVertex3f(0,fHeight,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(-0.1f,0,0);
  gl.glEnd();
}","private void renderClassAssignmentsGenesLevel2(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fHeightSamples=fHeight / iSamplesLevel2;
  float fFieldWith=viewFrustum.getWidth() / 4.0f * fAnimationScale;
  int iIdxCluster=0;
  int iCounter=iFirstSampleLevel1;
  Group group=contentVA.getGroupList().get(iIdxCluster);
  while (group.getNrElements() < iCounter) {
    iIdxCluster++;
    iCounter-=group.getNrElements();
    group=contentVA.getGroupList().get(iIdxCluster);
  }
  int iCnt=0;
  for (int i=0; i < iSamplesLevel2; i++) {
    if (iCounter == contentVA.getGroupList().get(iIdxCluster).getNrElements()) {
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)       gl.glColor4f(0f,0f,1f,0.5f);
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)       gl.glColor4f(0f,1f,0f,0.5f);
      gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENES_GROUP,iIdxCluster));
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(-0.1f,fHeight,0);
      gl.glVertex3f(0,fHeight,0);
      gl.glVertex3f(0,fHeight - fHeightSamples * iCnt,0);
      gl.glVertex3f(-0.1f,fHeight - fHeightSamples * iCnt,0);
      gl.glEnd();
      gl.glPopName();
      gl.glColor4f(0f,0f,1f,1);
      gl.glLineWidth(1f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(-0.1f,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glVertex3f(fFieldWith,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glEnd();
      fHeight-=fHeightSamples * iCnt;
      iIdxCluster++;
      iCounter=0;
      iCnt=0;
    }
    iCnt++;
    iCounter++;
  }
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)   gl.glColor4f(0f,0f,1f,0.5f);
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)   gl.glColor4f(0f,1f,0f,0.5f);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENES_GROUP,iIdxCluster));
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(-0.1f,fHeight,0);
  gl.glVertex3f(0,fHeight,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(-0.1f,0,0);
  gl.glEnd();
  gl.glPopName();
}",0.9364613880742912
58718,"private void renderClassAssignmentsGenesLevel3(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fHeightSamples=fHeight / iSamplesPerHeatmap;
  float fOffsetX=0;
  if (bSkipLevel2 == false)   fOffsetX=GAP_LEVEL2_3;
  int iIdxCluster=0;
  int iCounter=iFirstSampleLevel1 + iFirstSampleLevel2;
  Group group=contentVA.getGroupList().get(iIdxCluster);
  while (group.getNrElements() < iCounter) {
    iIdxCluster++;
    iCounter-=group.getNrElements();
    group=contentVA.getGroupList().get(iIdxCluster);
  }
  int iCnt=0;
  for (int i=0; i < iSamplesPerHeatmap; i++) {
    if (iCounter == contentVA.getGroupList().get(iIdxCluster).getNrElements()) {
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)       gl.glColor4f(0f,0f,1f,0.5f);
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)       gl.glColor4f(0f,1f,0f,0.5f);
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(fOffsetX - 0.1f,fHeight,0);
      gl.glVertex3f(fOffsetX,fHeight,0);
      gl.glVertex3f(fOffsetX,fHeight - fHeightSamples * iCnt,0);
      gl.glVertex3f(fOffsetX - 0.1f,fHeight - fHeightSamples * iCnt,0);
      gl.glEnd();
      gl.glColor4f(0f,0f,1f,1);
      gl.glLineWidth(1f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(fOffsetX - 0.1f,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glVertex3f(fOffsetX + fWidthEHM,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glEnd();
      fHeight-=fHeightSamples * iCnt;
      iIdxCluster++;
      iCounter=0;
      iCnt=0;
    }
    iCnt++;
    iCounter++;
  }
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)   gl.glColor4f(0f,0f,1f,0.5f);
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)   gl.glColor4f(0f,1f,0f,0.5f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(fOffsetX - 0.1f,fHeight,0);
  gl.glVertex3f(fOffsetX,fHeight,0);
  gl.glVertex3f(fOffsetX,0,0);
  gl.glVertex3f(fOffsetX - 0.1f,0,0);
  gl.glEnd();
}","private void renderClassAssignmentsGenesLevel3(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fHeightSamples=fHeight / iSamplesPerHeatmap;
  float fOffsetX=0;
  if (bSkipLevel2 == false)   fOffsetX=GAP_LEVEL2_3;
  int iIdxCluster=0;
  int iCounter=iFirstSampleLevel1 + iFirstSampleLevel2;
  Group group=contentVA.getGroupList().get(iIdxCluster);
  while (group.getNrElements() < iCounter) {
    iIdxCluster++;
    iCounter-=group.getNrElements();
    group=contentVA.getGroupList().get(iIdxCluster);
  }
  int iCnt=0;
  for (int i=0; i < iSamplesPerHeatmap; i++) {
    if (iCounter == contentVA.getGroupList().get(iIdxCluster).getNrElements()) {
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)       gl.glColor4f(0f,0f,1f,0.5f);
      if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)       gl.glColor4f(0f,1f,0f,0.5f);
      gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENES_GROUP,iIdxCluster));
      gl.glBegin(GL.GL_QUADS);
      gl.glVertex3f(fOffsetX - 0.1f,fHeight,0);
      gl.glVertex3f(fOffsetX,fHeight,0);
      gl.glVertex3f(fOffsetX,fHeight - fHeightSamples * iCnt,0);
      gl.glVertex3f(fOffsetX - 0.1f,fHeight - fHeightSamples * iCnt,0);
      gl.glEnd();
      gl.glPopName();
      gl.glColor4f(0f,0f,1f,1);
      gl.glLineWidth(1f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(fOffsetX - 0.1f,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glVertex3f(fOffsetX + fWidthEHM,fHeight - fHeightSamples * iCnt,0.1f);
      gl.glEnd();
      fHeight-=fHeightSamples * iCnt;
      iIdxCluster++;
      iCounter=0;
      iCnt=0;
    }
    iCnt++;
    iCounter++;
  }
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.NORMAL)   gl.glColor4f(0f,0f,1f,0.5f);
  if (contentVA.getGroupList().get(iIdxCluster).getSelectionType() == ESelectionType.SELECTION)   gl.glColor4f(0f,1f,0f,0.5f);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_GENES_GROUP,iIdxCluster));
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(fOffsetX - 0.1f,fHeight,0);
  gl.glVertex3f(fOffsetX,fHeight,0);
  gl.glVertex3f(fOffsetX,0,0);
  gl.glVertex3f(fOffsetX - 0.1f,0,0);
  gl.glEnd();
  gl.glPopName();
}",0.9400369003690036
58719,"@Override public ECommandType getCreationCommandType(){
  return ECommandType.CMD_ID;
}","@Override public ECommandType getCreationCommandType(){
  return ECommandType.CREATE_GL_TEXTURE_HEAT_MAP_3D;
}",0.8629441624365483
58720,"/** 
 * The handling of the picking. This has to be called when an element of the type  {@link EPickingType#CONTEXT_MENU_SELECTION} is picked.
 * @param ePickingMode the mode of the picking, eg. mouse-over or clicked. Only mouse-over and clicked are handled.
 * @param iExternalID the id which has to match one of the ids specified in  {@link #display}
 */
public void handleEvents(EPickingMode ePickingMode,int iExternalID){
switch (ePickingMode) {
case MOUSE_OVER:
    mouseOverElement=iExternalID;
  isDisplayListDirty=true;
break;
case CLICKED:
hashUniqueIDToContextMenuItem.get(iExternalID).triggerEvent();
isDisplayListDirty=true;
flush();
break;
}
}","/** 
 * The handling of the picking. This has to be called when an element of the type  {@link EPickingType#CONTEXT_MENU_SELECTION} is picked.
 * @param ePickingMode the mode of the picking, eg. mouse-over or clicked. Only mouse-over and clicked are handled.
 * @param iExternalID the id which has to match one of the ids specified in  {@link #display}
 */
public void handleEvents(EPickingMode ePickingMode,int iExternalID){
  if (iExternalID == Integer.MAX_VALUE)   return;
switch (ePickingMode) {
case MOUSE_OVER:
    mouseOverElement=iExternalID;
  isDisplayListDirty=true;
break;
case CLICKED:
hashUniqueIDToContextMenuItem.get(iExternalID).triggerEvent();
isDisplayListDirty=true;
flush();
break;
}
}",0.9632892804698971
58721,"public ISelectionDelta getSelectionDelta(){
  return selectionDelta;
}","public SelectionDelta getSelectionDelta(){
  return selectionDelta;
}",0.9928057553956836
58722,"public void setSelectionDelta(ISelectionDelta selectionDelta){
  this.selectionDelta=selectionDelta;
}","public void setSelectionDelta(SelectionDelta selectionDelta){
  this.selectionDelta=selectionDelta;
}",0.9950738916256158
58723,"/** 
 * FIXME: should be moved to a bucket-mediator registers the event-listeners to the event framework
 */
@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (addPathwayListener != null) {
    eventPublisher.removeListener(addPathwayListener);
    addPathwayListener=null;
  }
  if (loadPathwaysByGeneListener != null) {
    eventPublisher.removeListener(loadPathwaysByGeneListener);
    loadPathwaysByGeneListener=null;
  }
  if (enableTexturesListener != null) {
    eventPublisher.removeListener(enableTexturesListener);
    enableTexturesListener=null;
  }
  if (disableTexturesListener != null) {
    eventPublisher.removeListener(disableTexturesListener);
    disableTexturesListener=null;
  }
  if (enableGeneMappingListener != null) {
    eventPublisher.removeListener(enableGeneMappingListener);
    enableGeneMappingListener=null;
  }
  if (disableGeneMappingListener != null) {
    eventPublisher.removeListener(disableGeneMappingListener);
    disableGeneMappingListener=null;
  }
  if (enableNeighborhoodListener != null) {
    eventPublisher.removeListener(enableNeighborhoodListener);
    enableNeighborhoodListener=null;
  }
  if (disableNeighborhoodListener != null) {
    eventPublisher.removeListener(disableNeighborhoodListener);
    disableNeighborhoodListener=null;
  }
  if (resetViewListener != null) {
    eventPublisher.removeListener(resetViewListener);
    resetViewListener=null;
  }
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (toggleZoomListener != null) {
    eventPublisher.removeListener(toggleZoomListener);
    toggleZoomListener=null;
  }
}","/** 
 * FIXME: should be moved to a bucket-mediator registers the event-listeners to the event framework
 */
@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (addPathwayListener != null) {
    eventPublisher.removeListener(addPathwayListener);
    addPathwayListener=null;
  }
  if (loadPathwaysByGeneListener != null) {
    eventPublisher.removeListener(loadPathwaysByGeneListener);
    loadPathwaysByGeneListener=null;
  }
  if (enableTexturesListener != null) {
    eventPublisher.removeListener(enableTexturesListener);
    enableTexturesListener=null;
  }
  if (disableTexturesListener != null) {
    eventPublisher.removeListener(disableTexturesListener);
    disableTexturesListener=null;
  }
  if (enableGeneMappingListener != null) {
    eventPublisher.removeListener(enableGeneMappingListener);
    enableGeneMappingListener=null;
  }
  if (disableGeneMappingListener != null) {
    eventPublisher.removeListener(disableGeneMappingListener);
    disableGeneMappingListener=null;
  }
  if (enableNeighborhoodListener != null) {
    eventPublisher.removeListener(enableNeighborhoodListener);
    enableNeighborhoodListener=null;
  }
  if (disableNeighborhoodListener != null) {
    eventPublisher.removeListener(disableNeighborhoodListener);
    disableNeighborhoodListener=null;
  }
  if (enableConnectionLinesListener != null) {
    eventPublisher.removeListener(enableConnectionLinesListener);
    enableConnectionLinesListener=null;
  }
  if (disableConnectionLinesListener != null) {
    eventPublisher.removeListener(disableConnectionLinesListener);
    disableConnectionLinesListener=null;
  }
  if (resetViewListener != null) {
    eventPublisher.removeListener(resetViewListener);
    resetViewListener=null;
  }
  if (selectionUpdateListener != null) {
    eventPublisher.removeListener(selectionUpdateListener);
    selectionUpdateListener=null;
  }
  if (toggleZoomListener != null) {
    eventPublisher.removeListener(toggleZoomListener);
    toggleZoomListener=null;
  }
}",0.9155792276964048
58724,"private void createContentSelection(ESelectionType selectionType,int contentID){
  if (contentSelectionManager.checkStatus(selectionType,contentID))   return;
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  contentSelectionManager.clearSelection(selectionType);
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,selectionType);
  sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
  Integer iMappingID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
  contentSelectionManager.addToType(selectionType,contentID);
  contentSelectionManager.addConnectionID(iMappingID,contentID);
  if (eFieldDataType == EIDType.EXPRESSION_INDEX) {
    ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
    handleConnectedElementRep(selectionDelta);
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setSelectionDelta(selectionDelta);
    event.setInfo(getShortInfo());
    eventPublisher.triggerEvent(event);
  }
  setDisplayListDirty();
}","private void createContentSelection(ESelectionType selectionType,int contentID){
  if (contentSelectionManager.checkStatus(selectionType,contentID))   return;
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  contentSelectionManager.clearSelection(selectionType);
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,selectionType);
  sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
  Integer iMappingID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
  contentSelectionManager.addToType(selectionType,contentID);
  contentSelectionManager.addConnectionID(iMappingID,contentID);
  if (eFieldDataType == EIDType.EXPRESSION_INDEX) {
    SelectionDelta selectionDelta=contentSelectionManager.getDelta();
    handleConnectedElementRep(selectionDelta);
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setSelectionDelta(selectionDelta);
    event.setInfo(getShortInfo());
    eventPublisher.triggerEvent(event);
  }
  setDisplayListDirty();
}",0.9995320542817032
58725,"private void createStorageSelection(ESelectionType selectionType,int storageID){
  if (storageSelectionManager.checkStatus(selectionType,storageID)) {
    return;
  }
  storageSelectionManager.clearSelection(selectionType);
  storageSelectionManager.addToType(selectionType,storageID);
  if (eStorageDataType == EIDType.EXPERIMENT_INDEX) {
    ISelectionDelta selectionDelta=storageSelectionManager.getDelta();
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setSelectionDelta(selectionDelta);
    eventPublisher.triggerEvent(event);
  }
  setDisplayListDirty();
}","private void createStorageSelection(ESelectionType selectionType,int storageID){
  if (storageSelectionManager.checkStatus(selectionType,storageID)) {
    return;
  }
  storageSelectionManager.clearSelection(selectionType);
  storageSelectionManager.addToType(selectionType,storageID);
  if (eStorageDataType == EIDType.EXPERIMENT_INDEX) {
    SelectionDelta selectionDelta=storageSelectionManager.getDelta();
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setSelectionDelta(selectionDelta);
    eventPublisher.triggerEvent(event);
  }
  setDisplayListDirty();
}",0.999182338511856
58726,"/** 
 * Renders the toolbar with the related content to the given views
 * @param viewIDs list of viewIDs to render a toolbar for
 */
public void renderToolBar(List<Integer> viewIDs){
  ToolBarContentFactory contentFactory=ToolBarContentFactory.get();
  boolean isIgnored=contentFactory.isIgnored(viewIDs);
  if (!isIgnored) {
    List<AToolBarContent> toolBarContents=contentFactory.getToolBarContent(viewIDs);
    IToolBarRenderer renderer=toolBarView.getToolBarRenderer();
    Runnable job=renderer.createRenderJob(toolBarView,toolBarContents);
    Display display=toolBarView.getParentComposite().getDisplay();
    display.asyncExec(job);
  }
}","/** 
 * Renders the toolbar with the related content to the given views
 * @param viewIDs list of viewIDs to render a toolbar for
 */
public void renderToolBar(List<Integer> viewIDs){
  ToolBarContentFactory contentFactory=ToolBarContentFactory.get();
  boolean isIgnored=contentFactory.isIgnored(viewIDs);
  if (!isIgnored) {
    if (currentToolBarContents != null) {
      for (      AToolBarContent toolBarContent : currentToolBarContents) {
        toolBarContent.dispose();
      }
      currentToolBarContents=null;
    }
    currentToolBarContents=contentFactory.getToolBarContent(viewIDs);
    IToolBarRenderer renderer=toolBarView.getToolBarRenderer();
    Runnable job=renderer.createRenderJob(toolBarView,currentToolBarContents);
    Display display=toolBarView.getParentComposite().getDisplay();
    display.asyncExec(job);
  }
}",0.8582941571524513
58727,"/** 
 * Creates and returns icons for bucket related toolbar box
 * @return bucket related toolbar box
 */
private ToolBarContainer createBucketContainer(){
  RemoteRenderingToolBarMediator mediator=new RemoteRenderingToolBarMediator();
  SerializedRemoteRenderingView serializedView=(SerializedRemoteRenderingView)getTargetViewData();
  ActionToolBarContainer container=new ActionToolBarContainer();
  container.setImagePath(BUCKET_IMAGE_PATH);
  container.setTitle(BUCKET_VIEW_TITLE);
  List<IToolBarItem> actionList=new ArrayList<IToolBarItem>();
  container.setToolBarItems(actionList);
  IToolBarItem closeOrResetContainedViews=new CloseOrResetContainedViews(mediator);
  actionList.add(closeOrResetContainedViews);
  ToggleConnectionLinesAction toggleConnectionLinesAction=new ToggleConnectionLinesAction(mediator);
  toggleConnectionLinesAction.setConnectionLinesEnabled(serializedView.isConnectionLinesEnabled());
  actionList.add(toggleConnectionLinesAction);
  NavigationModeAction navigationModeAction=new NavigationModeAction(mediator);
  actionList.add(navigationModeAction);
  ToggleZoomAction toggleZoomAction=new ToggleZoomAction(mediator);
  actionList.add(toggleZoomAction);
  return container;
}","/** 
 * Creates and returns icons for bucket related toolbar box
 * @return bucket related toolbar box
 */
private ToolBarContainer createBucketContainer(){
  mediator=new RemoteRenderingToolBarMediator();
  mediator.setToolBarContent(this);
  SerializedRemoteRenderingView serializedView=(SerializedRemoteRenderingView)getTargetViewData();
  ActionToolBarContainer container=new ActionToolBarContainer();
  container.setImagePath(BUCKET_IMAGE_PATH);
  container.setTitle(BUCKET_VIEW_TITLE);
  List<IToolBarItem> actionList=new ArrayList<IToolBarItem>();
  container.setToolBarItems(actionList);
  IToolBarItem closeOrResetContainedViews=new CloseOrResetContainedViews(mediator);
  actionList.add(closeOrResetContainedViews);
  toggleConnectionLinesAction=new ToggleConnectionLinesAction(mediator);
  toggleConnectionLinesAction.setConnectionLinesEnabled(serializedView.isConnectionLinesEnabled());
  actionList.add(toggleConnectionLinesAction);
  NavigationModeAction navigationModeAction=new NavigationModeAction(mediator);
  actionList.add(navigationModeAction);
  ToggleZoomAction toggleZoomAction=new ToggleZoomAction(mediator);
  actionList.add(toggleZoomAction);
  return container;
}",0.9546777546777548
58728,"public RemoteRenderingToolBarMediator(){
  eventPublisher=GeneralManager.get().getEventPublisher();
}","public RemoteRenderingToolBarMediator(){
  System.out.println(""String_Node_Str"");
  eventPublisher=GeneralManager.get().getEventPublisher();
  registerEventListeners();
}",0.7453874538745388
58729,"@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta selectionDelta,String info){
  Integer vaID=mapVAIDs.get(selectionDelta.getVAType());
  IVirtualArray va=set.getVA(vaID);
  va.setDelta(selectionDelta);
}","@Override public void handleVirtualArrayUpdate(IVirtualArrayDelta vaDelta,String info){
  Integer vaID=mapVAIDs.get(vaDelta.getVAType());
  IVirtualArray va=set.getVA(vaID);
  va.setDelta(vaDelta);
}",0.9212410501193318
58730,"/** 
 * Build mapping between polyline/axis and storage/content for virtual arrays and selection managers
 */
private void initContentVariables(){
  if (bRenderStorageHorizontally) {
    axisVA=contentVA;
    axisVAType=contentVAType;
    polylineVA=storageVA;
    polylineVAType=storageVAType;
    polylineSelectionManager=storageSelectionManager;
    axisSelectionManager=contentSelectionManager;
  }
 else {
    polylineVA=contentVA;
    polylineVAType=contentVAType;
    axisVA=storageVA;
    axisVAType=storageVAType;
    polylineSelectionManager=contentSelectionManager;
    axisSelectionManager=storageSelectionManager;
  }
}","/** 
 * Build mapping between polyline/axis and storage/content for virtual arrays and selection managers
 */
private void initContentVariables(){
  if (bRenderStorageHorizontally) {
    eAxisDataType=EIDType.EXPRESSION_INDEX;
    ePolylineDataType=EIDType.EXPERIMENT_INDEX;
    axisVA=contentVA;
    axisVAType=contentVAType;
    polylineVA=storageVA;
    polylineVAType=storageVAType;
    polylineSelectionManager=storageSelectionManager;
    axisSelectionManager=contentSelectionManager;
  }
 else {
    eAxisDataType=EIDType.EXPERIMENT_INDEX;
    ePolylineDataType=EIDType.EXPRESSION_INDEX;
    polylineVA=contentVA;
    polylineVAType=contentVAType;
    axisVA=storageVA;
    axisVAType=storageVAType;
    polylineSelectionManager=contentSelectionManager;
    axisSelectionManager=storageSelectionManager;
  }
}",0.4723756906077348
58731,"@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=iExternalID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (generalManager.getUseCase().getUseCaseMode() != EUseCaseMode.GENETIC_DATA) break;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setStorageIndex(iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=polylineSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
axisVA.copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}","@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=iExternalID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (generalManager.getUseCase().getUseCaseMode() != EUseCaseMode.GENETIC_DATA) break;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setStorageIndex(iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=polylineSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
axisSelectionManager.remove(iExternalID,false);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
axisVA.copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(axisVAType,EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}",0.996618289418064
58732,"@Override public void changeOrientation(boolean defaultOrientation){
  renderStorageAsPolyline(defaultOrientation);
}","/** 
 * Changes the role of axes and polylines. 
 * @param defaultOrientation the default orientation is for content to be polylines and for storages to be the axes
 */
@Override public void changeOrientation(boolean defaultOrientation){
  if (defaultOrientation != this.bRenderStorageHorizontally) {
    if (defaultOrientation && contentVA.size() > 100) {
      getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          MessageDialog.openError(getParentGLCanvas().getParentComposite().getShell(),""String_Node_Str"",""String_Node_Str"");
          return;
        }
      }
);
      return;
    }
  }
  this.bRenderStorageHorizontally=defaultOrientation;
  connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
  initContentVariables();
  resetAxisSpacing();
  initGates();
  setDisplayListDirty();
}",0.152
58733,"private void resetAllTreeSelections(){
  resetAllTreeSelectionsRec(tree.getRoot());
}","private void resetAllTreeSelections(){
  if (tree != null)   resetAllTreeSelectionsRec(tree.getRoot());
}",0.8947368421052632
58734,"/** 
 * Render marker in OverviewBar for visualization of the currently (in stage 2) rendered part
 * @param gl
 */
private void renderMarkerOverviewBar(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fFieldWith=0.1f;
  Vec3f startpoint1, endpoint1, startpoint2, endpoint2;
  float fHeightElem=fHeight / contentVA.size();
  int iStartElem=0;
  int iLastElem=0;
  boolean colorToggle=true;
  gl.glLineWidth(2f);
  for (int currentGroup=0; currentGroup < iNrSelBar; currentGroup++) {
    iStartElem=iLastElem;
    iLastElem+=iAlNumberSamples.get(currentGroup);
    if (colorToggle)     gl.glColor4f(0f,0f,0f,1f);
 else     gl.glColor4f(1f,1f,1f,1f);
    colorToggle=(colorToggle == true) ? false : true;
    if (currentGroup == iSelectorBar - 1) {
      startpoint1=new Vec3f(fFieldWith,fHeight - fHeightElem * iStartElem,0);
      endpoint1=new Vec3f(GAP_LEVEL1_2,fHeight,0);
      startpoint2=new Vec3f(fFieldWith,fHeight - fHeightElem * iLastElem,0);
      endpoint2=new Vec3f(GAP_LEVEL1_2,0,0);
      renderSelectedDomain(gl,startpoint1,endpoint1,startpoint2,endpoint2);
      gl.glColor4fv(MOUSE_OVER_COLOR,0);
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,fHeight - fHeightElem * iStartElem,0);
    gl.glVertex3f(fFieldWith,fHeight - fHeightElem * iStartElem,0);
    gl.glVertex3f(fFieldWith,(fHeight - fHeightElem * iLastElem) + 0.01f,0);
    gl.glVertex3f(0,(fHeight - fHeightElem * iLastElem) + 0.01f,0);
    gl.glEnd();
  }
  gl.glColor4f(1f,1f,1f,1f);
}","/** 
 * Render marker in OverviewBar for visualization of the currently (in stage 2) rendered part
 * @param gl
 */
private void renderMarkerOverviewBar(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fFieldWith=0.1f;
  Vec3f startpoint1, endpoint1, startpoint2, endpoint2;
  float fHeightElem=fHeight / iNumberOfElements;
  int iStartElem=0;
  int iLastElem=0;
  boolean colorToggle=true;
  gl.glLineWidth(2f);
  for (int currentGroup=0; currentGroup < iNrSelBar; currentGroup++) {
    iStartElem=iLastElem;
    iLastElem+=iAlNumberSamples.get(currentGroup);
    if (colorToggle)     gl.glColor4f(0f,0f,0f,1f);
 else     gl.glColor4f(1f,1f,1f,1f);
    colorToggle=(colorToggle == true) ? false : true;
    if (currentGroup == iSelectorBar - 1) {
      startpoint1=new Vec3f(fFieldWith,fHeight - fHeightElem * iStartElem,0);
      endpoint1=new Vec3f(GAP_LEVEL1_2,fHeight,0);
      startpoint2=new Vec3f(fFieldWith,fHeight - fHeightElem * iLastElem,0);
      endpoint2=new Vec3f(GAP_LEVEL1_2,0,0);
      renderSelectedDomain(gl,startpoint1,endpoint1,startpoint2,endpoint2);
      gl.glColor4fv(MOUSE_OVER_COLOR,0);
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,fHeight - fHeightElem * iStartElem,0);
    gl.glVertex3f(fFieldWith,fHeight - fHeightElem * iStartElem,0);
    gl.glVertex3f(fFieldWith,(fHeight - fHeightElem * iLastElem) + 0.01f,0);
    gl.glVertex3f(0,(fHeight - fHeightElem * iLastElem) + 0.01f,0);
    gl.glEnd();
  }
  gl.glColor4f(1f,1f,1f,1f);
}",0.988929889298893
58735,"/** 
 * Render the first stage of the hierarchy (OverviewBar)
 * @param gl
 */
private void renderOverviewBar(GL gl){
  float fHeight;
  float fWidth;
  float fyOffset=0.0f;
  fHeight=viewFrustum.getHeight();
  fWidth=0.1f;
  float fHeightElem=fHeight / contentVA.size();
  float fStep=0;
  gl.glColor4f(1f,1f,0f,1f);
  for (int i=0; i < iNrSelBar; i++) {
    fStep=fHeightElem * iAlNumberSamples.get(iNrSelBar - i - 1);
    AlTextures.get(iNrSelBar - i - 1).enable();
    AlTextures.get(iNrSelBar - i - 1).bind();
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_WRAP_S,GL.GL_CLAMP);
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_WRAP_T,GL.GL_CLAMP);
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MAG_FILTER,GL.GL_NEAREST);
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MIN_FILTER,GL.GL_NEAREST);
    TextureCoords texCoords=AlTextures.get(iNrSelBar - i - 1).getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_TEXTURE_SELECTION,iNrSelBar - i));
    gl.glBegin(GL.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,fyOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fyOffset,0);
    gl.glEnd();
    gl.glPopName();
    fyOffset+=fStep;
    AlTextures.get(iNrSelBar - i - 1).disable();
  }
}","/** 
 * Render the first stage of the hierarchy (OverviewBar)
 * @param gl
 */
private void renderOverviewBar(GL gl){
  float fHeight;
  float fWidth;
  float fyOffset=0.0f;
  fHeight=viewFrustum.getHeight();
  fWidth=0.1f;
  float fHeightElem=fHeight / iNumberOfElements;
  float fStep=0;
  gl.glColor4f(1f,1f,0f,1f);
  for (int i=0; i < iNrSelBar; i++) {
    fStep=fHeightElem * iAlNumberSamples.get(iNrSelBar - i - 1);
    AlTextures.get(iNrSelBar - i - 1).enable();
    AlTextures.get(iNrSelBar - i - 1).bind();
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_WRAP_S,GL.GL_CLAMP);
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_WRAP_T,GL.GL_CLAMP);
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MAG_FILTER,GL.GL_NEAREST);
    gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MIN_FILTER,GL.GL_NEAREST);
    TextureCoords texCoords=AlTextures.get(iNrSelBar - i - 1).getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_TEXTURE_SELECTION,iNrSelBar - i));
    gl.glBegin(GL.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,fyOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fyOffset,0);
    gl.glEnd();
    gl.glPopName();
    fyOffset+=fStep;
    AlTextures.get(iNrSelBar - i - 1).disable();
  }
}",0.9906722418784176
58736,"private void render(GL gl){
  layouter.setGL(gl);
  layouter.drawLayout();
}","private void render(GL gl){
  layouter.drawLayout(gl);
}",0.8181818181818182
58737,"@Override public final ArrayList<Vec3f> drawAtPostion(GL gl,float fXCoord,float fYCoord,float fZCoord,float fHeight,float fWidth,EDrawAbleNodeDetailLevel eDetailLevel){
  this.fXCoord=fXCoord;
  this.fYCoord=fYCoord;
  this.fZCoord=fZCoord;
  this.fHeight=fHeight;
  this.fWidth=fWidth;
  this.gl=gl;
  return mRepresantations.get(eDetailLevel).drawObjectAtPosition(gl,fXCoord,fYCoord,fZCoord,fHeight,fWidth);
}","@Override public final ArrayList<Vec3f> drawAtPostion(GL gl,float fXCoord,float fYCoord,float fZCoord,float fHeight,float fWidth,EDrawAbleNodeDetailLevel eDetailLevel){
  this.fXCoord=fXCoord;
  this.fYCoord=fYCoord;
  this.fZCoord=fZCoord;
  this.fHeight=fHeight;
  this.fWidth=fWidth;
  return mRepresantations.get(eDetailLevel).drawObjectAtPosition(gl,fXCoord,fYCoord,fZCoord,fHeight,fWidth);
}",0.9826732673267328
58738,"public static ADrawAbleObject getDrawAbleObject(String str){
  if (str == ""String_Node_Str"")   return new DrawAbleObjectSquare();
  return null;
}","public static ADrawAbleObject getDrawAbleObject(String str){
  if (str == ""String_Node_Str"")   return new DrawAbleObjectFallback();
 else   if (str == ""String_Node_Str"")   return new DrawAbleObjectSquare();
  return null;
}",0.7913279132791328
58739,"public TestNode(String nodeName,int iComparableValue){
  super(nodeName,iComparableValue);
}","public TestNode(String nodeName,int iComparableValue){
  super(nodeName,iComparableValue);
  this.mRepresantations.put(EDrawAbleNodeDetailLevel.VeryHigh,DrawAbleObjectsFactory.getDrawAbleObject(""String_Node_Str""));
  this.mRepresantations.put(EDrawAbleNodeDetailLevel.High,DrawAbleObjectsFactory.getDrawAbleObject(""String_Node_Str""));
}",0.4299065420560747
58740,@Override public abstract void drawLayout();,@Override public abstract void drawLayout(GL gl);,0.946236559139785
58741,"@Override public void drawLayout(){
}","@Override public void drawLayout(GL gl){
}",0.9367088607594936
58742,"/** 
 * Draw the tree layout. TODO: specify params and maybe naming (espacially GLLists and Animation)
 * @return
 */
public void drawLayout();","/** 
 * Draw the tree layout. TODO: specify params and maybe naming (espacially GLLists and Animation)
 * @return
 */
public void drawLayout(GL gl);",0.9828178694158076
58743,"@Override public void drawLayout(){
  tree.getRoot().drawAtPostion(this.gl,fHigh / 2f,fWidth / 2f,0.0f,0.2f,0.2f,EDrawAbleNodeDetailLevel.VeryHigh);
  tree.getRoot().drawAtPostion(this.gl,fHigh / 4f,fWidth / 4f,0.0f,0.2f,0.2f,EDrawAbleNodeDetailLevel.High);
  return;
}","@Override public void drawLayout(GL gl){
  tree.getRoot().drawAtPostion(gl,fHigh / 2f,fWidth / 2f,0.0f,0.2f,0.2f,EDrawAbleNodeDetailLevel.VeryHigh);
  tree.getRoot().drawAtPostion(gl,fHigh / 4f,fWidth / 4f,0.0f,0.2f,0.2f,EDrawAbleNodeDetailLevel.High);
  return;
}",0.5891181988742964
58744,"@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu){
  PartialDisc pdCurrentRootElement=radialHierarchy.getCurrentRootElement();
  PartialDisc pdCurrentMouseOverElement=radialHierarchy.getCurrentMouseOverElement();
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  PartialDisc pdHighlightedChildIndicator=null;
  calculateDrawingParameters(pdCurrentRootElement,pdCurrentSelectedElement,fXCenter,fYCenter);
  if (iDisplayedDetailViewDepth < MIN_DISPLAYED_DETAIL_DEPTH) {
    radialHierarchy.setCurrentSelectedElement(pdCurrentRootElement);
    radialHierarchy.setCurrentRootElement(pdCurrentRootElement);
    radialHierarchy.setCurrentMouseOverElement(pdCurrentRootElement);
    drawingController.setDrawingState(DrawingController.DRAWING_STATE_FULL_HIERARCHY);
    radialHierarchy.setDisplayListDirty();
    navigationHistory.replaceCurrentHistoryEntry(drawingController.getCurrentDrawingState(),pdCurrentRootElement,pdCurrentRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    drawingController.draw(fXCenter,fYCenter,gl,glu);
    bInitialDraw=true;
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentRootElement.getElementID());
    return;
  }
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  PDDrawingStrategy dsDefault=DrawingStrategyManager.get().getDefaultDrawingStrategy();
  PDDrawingStrategy dsSelected=DrawingStrategyManager.get().getDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_SELECTED);
  PDDrawingStrategy dsTransparent=DrawingStrategyManager.get().getDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_TRANSPARENT);
  pdCurrentRootElement.setPDDrawingStrategyChildren(dsDefault,iDisplayedOverviewDepth);
  boolean bMouseOverElementInDetailOutside=false;
  boolean bIsMouseOverElementDisplayed=true;
  boolean bIsMouseOverElementParentOfCurrentRoot=false;
  boolean bIsNewSelection=radialHierarchy.isNewSelection();
  if (pdCurrentMouseOverElement != null) {
    bMouseOverElementInDetailOutside=pdCurrentMouseOverElement.hasParent(pdCurrentSelectedElement,iDisplayedDetailViewDepth - 1);
    if (!bMouseOverElementInDetailOutside)     bMouseOverElementInDetailOutside=pdCurrentMouseOverElement == pdCurrentSelectedElement;
    if (bIsNewSelection) {
      int iParentPathLength=pdCurrentMouseOverElement.getParentPathLength(pdCurrentRootElement);
      if ((iParentPathLength >= iDisplayedOverviewDepth) || (iParentPathLength == -1)) {
        PartialDisc pdParent=pdCurrentMouseOverElement.getParent();
        if (pdParent == null) {
          pdCurrentRootElement=pdCurrentMouseOverElement;
        }
 else {
          pdCurrentRootElement=pdParent;
        }
        radialHierarchy.setCurrentRootElement(pdCurrentRootElement);
        radialHierarchy.setCurrentSelectedElement(pdCurrentRootElement);
        drawingController.setDrawingState(DrawingController.DRAWING_STATE_FULL_HIERARCHY);
        navigationHistory.addNewHistoryEntry(drawingController.getCurrentDrawingState(),pdCurrentRootElement,pdCurrentRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
        drawingController.draw(fXCenter,fYCenter,gl,glu);
        bInitialDraw=true;
        radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentRootElement.getElementID());
        return;
      }
    }
 else {
      if (pdCurrentMouseOverElement != pdCurrentRootElement) {
        ArrayList<PartialDisc> alParentPath=pdCurrentMouseOverElement.getParentPath(pdCurrentRootElement);
        if (alParentPath != null) {
          if (alParentPath.size() >= iDisplayedOverviewDepth) {
            DrawingStrategyManager drawingStategyManager=DrawingStrategyManager.get();
            PDDrawingStrategyChildIndicator dsDefaultHighlightedChildIndicator=(PDDrawingStrategyChildIndicator)drawingStategyManager.createDrawingStrategy(drawingStategyManager.getDefaultStrategyType());
            dsDefaultHighlightedChildIndicator.setChildIndicatorColor(RadialHierarchyRenderStyle.MOUSE_OVER_COLOR);
            pdHighlightedChildIndicator=alParentPath.get(alParentPath.size() - iDisplayedOverviewDepth);
            pdHighlightedChildIndicator.setPDDrawingStrategy(dsDefaultHighlightedChildIndicator);
            bIsMouseOverElementDisplayed=false;
          }
        }
 else {
          bIsMouseOverElementParentOfCurrentRoot=true;
          bIsMouseOverElementDisplayed=false;
        }
      }
    }
  }
  if (bIsMouseOverElementDisplayed) {
    PDDrawingStrategyDecorator dsLabelDecorator=new PDDrawingStrategyLabelDecorator();
    dsLabelDecorator.setDrawingStrategy(dsDefault);
    if (bMouseOverElementInDetailOutside) {
      pdCurrentMouseOverElement.setPDDrawingStrategyChildren(dsLabelDecorator,Math.min(iDisplayedDetailViewDepth,RadialHierarchyRenderStyle.MAX_LABELING_DEPTH));
    }
 else     if (pdCurrentMouseOverElement != null) {
      pdCurrentMouseOverElement.setPDDrawingStrategy(dsLabelDecorator);
    }
  }
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,fDetailViewDiscWidth,iDisplayedDetailViewDepth,fDetailViewStartAngle,360,fDetailViewInnerRadius);
  if (bMouseOverElementInDetailOutside) {
    if (bIsNewSelection) {
      PDDrawingStrategySelected dsExternalSelected=(PDDrawingStrategySelected)DrawingStrategyManager.get().createDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_SELECTED);
      dsExternalSelected.setBorderColor(RadialHierarchyRenderStyle.SELECTED_COLOR);
      dsSelected=dsExternalSelected;
    }
    dsSelected.drawPartialDisc(gl,glu,pdCurrentMouseOverElement);
  }
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(dsTransparent,iDisplayedDetailViewDepth);
  if ((pdHighlightedChildIndicator != null) && (pdHighlightedChildIndicator.hasParent(pdCurrentSelectedElement,iDisplayedDetailViewDepth))) {
    PDDrawingStrategyTransparent dsTransparentHighlightedChildIndicator=(PDDrawingStrategyTransparent)DrawingStrategyManager.get().createDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_TRANSPARENT);
    dsTransparentHighlightedChildIndicator.setChildIndicatorColor(RadialHierarchyRenderStyle.MOUSE_OVER_COLOR);
    pdHighlightedChildIndicator.setPDDrawingStrategy(dsTransparentHighlightedChildIndicator);
  }
  pdCurrentRootElement.drawHierarchyFull(gl,glu,fOverviewDiscWidth,iDisplayedOverviewDepth);
  gl.glPushAttrib(GL.GL_COLOR_BUFFER_BIT);
  gl.glColor3f(0,1,1);
  GLPrimitives.renderPartialDiscBorder(gl,glu,pdCurrentSelectedElement.getCurrentInnerRadius(),pdCurrentSelectedElement.getCurrentInnerRadius() + fOverviewDiscWidth * iDisplayedDetailViewDepth,pdCurrentSelectedElement.getCurrentStartAngle(),pdCurrentSelectedElement.getCurrentAngle(),100,2);
  gl.glPopAttrib();
  if ((pdCurrentMouseOverElement != null) && (bIsMouseOverElementDisplayed)) {
    if (bIsNewSelection) {
      PDDrawingStrategySelected dsExternalSelected=(PDDrawingStrategySelected)DrawingStrategyManager.get().createDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_SELECTED);
      dsExternalSelected.setBorderColor(RadialHierarchyRenderStyle.SELECTED_COLOR);
      dsSelected=dsExternalSelected;
    }
    dsSelected.drawPartialDisc(gl,glu,pdCurrentMouseOverElement);
  }
  if (bIsMouseOverElementParentOfCurrentRoot) {
    gl.glPushClientAttrib(GL.GL_COLOR_BUFFER_BIT);
    gl.glColor3fv(RadialHierarchyRenderStyle.MOUSE_OVER_COLOR,0);
    GLPrimitives.renderCircle(gl,glu,fOverviewDiscWidth / 2.0f,100);
    GLPrimitives.renderCircleBorder(gl,glu,fOverviewDiscWidth / 2.0f,100,2);
    gl.glPopAttrib();
  }
  float fHierarchyOuterRadius=Math.min(fXCenter * 0.9f,fYCenter * 0.9f);
  LabelManager.get().drawAllLabels(gl,glu,fXCenter * 2.0f,fYCenter * 2.0f,fHierarchyOuterRadius);
  LabelManager.get().clearLabels();
  bInitialDraw=false;
}","@Override public void draw(float fXCenter,float fYCenter,GL gl,GLU glu){
  PartialDisc pdCurrentRootElement=radialHierarchy.getCurrentRootElement();
  PartialDisc pdCurrentMouseOverElement=radialHierarchy.getCurrentMouseOverElement();
  PartialDisc pdCurrentSelectedElement=radialHierarchy.getCurrentSelectedElement();
  PartialDisc pdHighlightedChildIndicator=null;
  calculateDrawingParameters(pdCurrentRootElement,pdCurrentSelectedElement,fXCenter,fYCenter);
  if (iDisplayedDetailViewDepth < MIN_DISPLAYED_DETAIL_DEPTH) {
    radialHierarchy.setCurrentSelectedElement(pdCurrentRootElement);
    radialHierarchy.setCurrentRootElement(pdCurrentRootElement);
    radialHierarchy.setCurrentMouseOverElement(pdCurrentRootElement);
    drawingController.setDrawingState(DrawingController.DRAWING_STATE_FULL_HIERARCHY);
    radialHierarchy.setDisplayListDirty();
    navigationHistory.replaceCurrentHistoryEntry(drawingController.getCurrentDrawingState(),pdCurrentRootElement,pdCurrentRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
    drawingController.draw(fXCenter,fYCenter,gl,glu);
    bInitialDraw=true;
    radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentRootElement.getElementID());
    return;
  }
  gl.glLoadIdentity();
  gl.glTranslatef(fXCenter,fYCenter,0);
  APDDrawingStrategy dsDefault=DrawingStrategyManager.get().getDefaultDrawingStrategy();
  APDDrawingStrategy dsSelected=DrawingStrategyManager.get().getDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_SELECTED);
  APDDrawingStrategy dsTransparent=DrawingStrategyManager.get().getDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_TRANSPARENT);
  pdCurrentRootElement.setPDDrawingStrategyChildren(dsDefault,iDisplayedOverviewDepth);
  boolean bMouseOverElementInDetailOutside=false;
  boolean bIsMouseOverElementDisplayed=true;
  boolean bIsMouseOverElementParentOfCurrentRoot=false;
  boolean bIsNewSelection=radialHierarchy.isNewSelection();
  if (pdCurrentMouseOverElement != null) {
    bMouseOverElementInDetailOutside=pdCurrentMouseOverElement.hasParent(pdCurrentSelectedElement,iDisplayedDetailViewDepth - 1);
    if (!bMouseOverElementInDetailOutside)     bMouseOverElementInDetailOutside=pdCurrentMouseOverElement == pdCurrentSelectedElement;
    if (bIsNewSelection) {
      int iParentPathLength=pdCurrentMouseOverElement.getParentPathLength(pdCurrentRootElement);
      if ((iParentPathLength >= iDisplayedOverviewDepth) || (iParentPathLength == -1)) {
        PartialDisc pdParent=pdCurrentMouseOverElement.getParent();
        if (pdParent == null) {
          pdCurrentRootElement=pdCurrentMouseOverElement;
        }
 else {
          pdCurrentRootElement=pdParent;
        }
        radialHierarchy.setCurrentRootElement(pdCurrentRootElement);
        radialHierarchy.setCurrentSelectedElement(pdCurrentRootElement);
        drawingController.setDrawingState(DrawingController.DRAWING_STATE_FULL_HIERARCHY);
        navigationHistory.addNewHistoryEntry(drawingController.getCurrentDrawingState(),pdCurrentRootElement,pdCurrentRootElement,radialHierarchy.getMaxDisplayedHierarchyDepth());
        drawingController.draw(fXCenter,fYCenter,gl,glu);
        bInitialDraw=true;
        radialHierarchy.setNewSelection(ESelectionType.SELECTION,pdCurrentRootElement.getElementID());
        return;
      }
    }
 else {
      if (pdCurrentMouseOverElement != pdCurrentRootElement) {
        ArrayList<PartialDisc> alParentPath=pdCurrentMouseOverElement.getParentPath(pdCurrentRootElement);
        if (alParentPath != null) {
          if (alParentPath.size() >= iDisplayedOverviewDepth) {
            DrawingStrategyManager drawingStategyManager=DrawingStrategyManager.get();
            APDDrawingStrategyChildIndicator dsDefaultHighlightedChildIndicator=(APDDrawingStrategyChildIndicator)drawingStategyManager.createDrawingStrategy(drawingStategyManager.getDefaultStrategyType());
            dsDefaultHighlightedChildIndicator.setChildIndicatorColor(RadialHierarchyRenderStyle.MOUSE_OVER_COLOR);
            pdHighlightedChildIndicator=alParentPath.get(alParentPath.size() - iDisplayedOverviewDepth);
            pdHighlightedChildIndicator.setPDDrawingStrategy(dsDefaultHighlightedChildIndicator);
            bIsMouseOverElementDisplayed=false;
          }
        }
 else {
          bIsMouseOverElementParentOfCurrentRoot=true;
          bIsMouseOverElementDisplayed=false;
        }
      }
    }
  }
  if (bIsMouseOverElementDisplayed) {
    APDDrawingStrategyDecorator dsLabelDecorator=new PDDrawingStrategyLabelDecorator();
    dsLabelDecorator.setDrawingStrategy(dsDefault);
    if (bMouseOverElementInDetailOutside) {
      pdCurrentMouseOverElement.setPDDrawingStrategyChildren(dsLabelDecorator,Math.min(iDisplayedDetailViewDepth,RadialHierarchyRenderStyle.MAX_LABELING_DEPTH));
    }
 else     if (pdCurrentMouseOverElement != null) {
      pdCurrentMouseOverElement.setPDDrawingStrategy(dsLabelDecorator);
    }
  }
  pdCurrentSelectedElement.drawHierarchyAngular(gl,glu,fDetailViewDiscWidth,iDisplayedDetailViewDepth,fDetailViewStartAngle,360,fDetailViewInnerRadius);
  if (bMouseOverElementInDetailOutside) {
    if (bIsNewSelection) {
      PDDrawingStrategySelected dsExternalSelected=(PDDrawingStrategySelected)DrawingStrategyManager.get().createDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_SELECTED);
      dsExternalSelected.setBorderColor(RadialHierarchyRenderStyle.SELECTED_COLOR);
      dsSelected=dsExternalSelected;
    }
    dsSelected.drawPartialDisc(gl,glu,pdCurrentMouseOverElement);
  }
  pdCurrentSelectedElement.setPDDrawingStrategyChildren(dsTransparent,iDisplayedDetailViewDepth);
  if ((pdHighlightedChildIndicator != null) && (pdHighlightedChildIndicator.hasParent(pdCurrentSelectedElement,iDisplayedDetailViewDepth))) {
    PDDrawingStrategyTransparent dsTransparentHighlightedChildIndicator=(PDDrawingStrategyTransparent)DrawingStrategyManager.get().createDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_TRANSPARENT);
    dsTransparentHighlightedChildIndicator.setChildIndicatorColor(RadialHierarchyRenderStyle.MOUSE_OVER_COLOR);
    pdHighlightedChildIndicator.setPDDrawingStrategy(dsTransparentHighlightedChildIndicator);
  }
  pdCurrentRootElement.drawHierarchyFull(gl,glu,fOverviewDiscWidth,iDisplayedOverviewDepth);
  gl.glPushAttrib(GL.GL_COLOR_BUFFER_BIT);
  gl.glColor3f(0,1,1);
  GLPrimitives.renderPartialDiscBorder(gl,glu,pdCurrentSelectedElement.getCurrentInnerRadius(),pdCurrentSelectedElement.getCurrentInnerRadius() + fOverviewDiscWidth * iDisplayedDetailViewDepth,pdCurrentSelectedElement.getCurrentStartAngle(),pdCurrentSelectedElement.getCurrentAngle(),100,2);
  gl.glPopAttrib();
  if ((pdCurrentMouseOverElement != null) && (bIsMouseOverElementDisplayed)) {
    if (bIsNewSelection) {
      PDDrawingStrategySelected dsExternalSelected=(PDDrawingStrategySelected)DrawingStrategyManager.get().createDrawingStrategy(DrawingStrategyManager.PD_DRAWING_STRATEGY_SELECTED);
      dsExternalSelected.setBorderColor(RadialHierarchyRenderStyle.SELECTED_COLOR);
      dsSelected=dsExternalSelected;
    }
    dsSelected.drawPartialDisc(gl,glu,pdCurrentMouseOverElement);
  }
  if (bIsMouseOverElementParentOfCurrentRoot) {
    gl.glPushClientAttrib(GL.GL_COLOR_BUFFER_BIT);
    gl.glColor3fv(RadialHierarchyRenderStyle.MOUSE_OVER_COLOR,0);
    GLPrimitives.renderCircle(gl,glu,fOverviewDiscWidth / 2.0f,100);
    GLPrimitives.renderCircleBorder(gl,glu,fOverviewDiscWidth / 2.0f,100,2);
    gl.glPopAttrib();
  }
  float fHierarchyOuterRadius=Math.min(fXCenter * 0.9f,fYCenter * 0.9f);
  LabelManager.get().drawAllLabels(gl,glu,fXCenter * 2.0f,fYCenter * 2.0f,fHierarchyOuterRadius);
  LabelManager.get().clearLabels();
  bInitialDraw=false;
}",0.9996126033057852
58745,"@Override public boolean performOk(){
  boolean bReturn=super.performOk();
  PreferenceStore store=GeneralManager.get().getPreferenceStore();
  store.setValue(PreferenceConstants.COLOR_MAPPING_USED,iCurrentlyUsedMapping);
  int iCount=1;
  for (  String color : sAlTargetColors) {
    store.setValue(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.COLOR_MARKER_POINT_COLOR + iCount,color);
    iCount++;
  }
  ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION).initiFromPreferenceStore();
  IEventPublisher eventPublisher=GeneralManager.get().getEventPublisher();
  RedrawViewEvent event=new RedrawViewEvent();
  event.setSender(this);
  eventPublisher.triggerEvent(event);
  return bReturn;
}","@Override public boolean performOk(){
  boolean bReturn=super.performOk();
  PreferenceStore store=GeneralManager.get().getPreferenceStore();
  store.setValue(PreferenceConstants.COLOR_MAPPING_USED,iCurrentlyUsedMapping);
  int iCount=1;
  for (  String color : sAlTargetColors) {
    store.setValue(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.COLOR_MARKER_POINT_COLOR + iCount,color);
    iCount++;
  }
  ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION).initiFromPreferenceStore();
  IEventPublisher eventPublisher=GeneralManager.get().getEventPublisher();
  UpdateViewEvent event=new UpdateViewEvent();
  event.setSender(this);
  eventPublisher.triggerEvent(event);
  return bReturn;
}",0.9347826086956522
58746,"@Override public void registerEventListeners(){
  redrawViewListener=new RedrawViewListener();
  redrawViewListener.setHandler(this);
  eventPublisher.addListener(RedrawViewEvent.class,redrawViewListener);
  clusterNodeMouseOverListener=new ClusterNodeSelectionListener();
  clusterNodeMouseOverListener.setHandler(this);
  eventPublisher.addListener(ClusterNodeSelectionEvent.class,clusterNodeMouseOverListener);
  goBackInHistoryListener=new GoBackInHistoryListener();
  goBackInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoBackInHistoryEvent.class,goBackInHistoryListener);
  goForthInHistoryListener=new GoForthInHistoryListener();
  goForthInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoForthInHistoryEvent.class,goForthInHistoryListener);
  changeColorModeListener=new ChangeColorModeListener();
  changeColorModeListener.setHandler(this);
  eventPublisher.addListener(ChangeColorModeEvent.class,changeColorModeListener);
  setMaxDisplayedHierarchyDepthListener=new SetMaxDisplayedHierarchyDepthListener();
  setMaxDisplayedHierarchyDepthListener.setHandler(this);
  eventPublisher.addListener(SetMaxDisplayedHierarchyDepthEvent.class,setMaxDisplayedHierarchyDepthListener);
}","@Override public void registerEventListeners(){
  redrawViewListener=new RedrawViewListener();
  redrawViewListener.setHandler(this);
  eventPublisher.addListener(RedrawViewEvent.class,redrawViewListener);
  clusterNodeMouseOverListener=new ClusterNodeSelectionListener();
  clusterNodeMouseOverListener.setHandler(this);
  eventPublisher.addListener(ClusterNodeSelectionEvent.class,clusterNodeMouseOverListener);
  goBackInHistoryListener=new GoBackInHistoryListener();
  goBackInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoBackInHistoryEvent.class,goBackInHistoryListener);
  goForthInHistoryListener=new GoForthInHistoryListener();
  goForthInHistoryListener.setHandler(this);
  eventPublisher.addListener(GoForthInHistoryEvent.class,goForthInHistoryListener);
  changeColorModeListener=new ChangeColorModeListener();
  changeColorModeListener.setHandler(this);
  eventPublisher.addListener(ChangeColorModeEvent.class,changeColorModeListener);
  setMaxDisplayedHierarchyDepthListener=new SetMaxDisplayedHierarchyDepthListener();
  setMaxDisplayedHierarchyDepthListener.setHandler(this);
  eventPublisher.addListener(SetMaxDisplayedHierarchyDepthEvent.class,setMaxDisplayedHierarchyDepthListener);
  updateViewListener=new UpdateViewListener();
  updateViewListener.setHandler(this);
  eventPublisher.addListener(UpdateViewEvent.class,updateViewListener);
}",0.9392774788624136
58747,"@Override public void unregisterEventListeners(){
  if (redrawViewListener != null) {
    eventPublisher.removeListener(redrawViewListener);
    redrawViewListener=null;
  }
  if (clusterNodeMouseOverListener != null) {
    eventPublisher.removeListener(clusterNodeMouseOverListener);
    clusterNodeMouseOverListener=null;
  }
  if (goBackInHistoryListener != null) {
    eventPublisher.removeListener(goBackInHistoryListener);
    goBackInHistoryListener=null;
  }
  if (goForthInHistoryListener != null) {
    eventPublisher.removeListener(goForthInHistoryListener);
    goForthInHistoryListener=null;
  }
  if (changeColorModeListener != null) {
    eventPublisher.removeListener(changeColorModeListener);
    changeColorModeListener=null;
  }
  if (setMaxDisplayedHierarchyDepthListener != null) {
    eventPublisher.removeListener(setMaxDisplayedHierarchyDepthListener);
    setMaxDisplayedHierarchyDepthListener=null;
  }
}","@Override public void unregisterEventListeners(){
  if (redrawViewListener != null) {
    eventPublisher.removeListener(redrawViewListener);
    redrawViewListener=null;
  }
  if (clusterNodeMouseOverListener != null) {
    eventPublisher.removeListener(clusterNodeMouseOverListener);
    clusterNodeMouseOverListener=null;
  }
  if (goBackInHistoryListener != null) {
    eventPublisher.removeListener(goBackInHistoryListener);
    goBackInHistoryListener=null;
  }
  if (goForthInHistoryListener != null) {
    eventPublisher.removeListener(goForthInHistoryListener);
    goForthInHistoryListener=null;
  }
  if (changeColorModeListener != null) {
    eventPublisher.removeListener(changeColorModeListener);
    changeColorModeListener=null;
  }
  if (setMaxDisplayedHierarchyDepthListener != null) {
    eventPublisher.removeListener(setMaxDisplayedHierarchyDepthListener);
    setMaxDisplayedHierarchyDepthListener=null;
  }
  if (updateViewListener != null) {
    eventPublisher.removeListener(updateViewListener);
    updateViewListener=null;
  }
}",0.9375
58748,"@Override public void handleUpdateView(){
  setDisplayListDirty();
}","@Override public void handleUpdateView(){
  Tree<ClusterNode> tree=set.getClusteredTreeGenes();
  if (tree != null) {
    initHierarchy(tree);
  }
  setDisplayListDirty();
}",0.5643153526970954
58749,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    if (bRenderGeneTree == true) {
      if (set.getClusteredTreeGenes() != null) {
        tree=set.getClusteredTreeGenes();
        currentRootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getClusteredTreeExps() != null) {
        tree=set.getClusteredTreeExps();
      }
 else       renderSymbol(gl);
    }
  }
 else {
    if (tree != null) {
      if (bRenderGeneTree) {
        xmax=viewFrustum.getWidth() - 0.2f;
        fSampleHeight=(viewFrustum.getHeight() - 0.7f) / tree.getRoot().getNrElements();
        fLevelWidth=(viewFrustum.getWidth() - 3f) / tree.getRoot().getDepth();
        yPosInit=viewFrustum.getHeight() - 0.4f;
      }
 else {
        ymin=0.1f;
        fSampleWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getNrElements();
        fLevelHeight=(viewFrustum.getHeight() - 0.7f) / tree.getRoot().getDepth();
        xPosInit=0.4f;
      }
      determinePositions();
    }
    gl.glLineWidth(0.1f);
    if (bRenderGeneTree) {
      gl.glTranslatef(0.1f,0,0);
{
        renderDendrogramGenes(gl,currentRootNode);
      }
    }
 else {
      gl.glTranslatef(0,0.1f,0);
      renderDendrogramExperiments(gl,tree.getRoot());
    }
    renderSelections(gl,tree.getRoot());
    renderCut(gl);
    if (bRenderGeneTree)     gl.glTranslatef(-0.1f,0,0);
 else     gl.glTranslatef(0,-0.1f,0);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    if (bRenderGeneTree == true) {
      if (set.getClusteredTreeGenes() != null) {
        tree=set.getClusteredTreeGenes();
        currentRootNode=tree.getRoot();
      }
 else       renderSymbol(gl);
    }
 else {
      if (set.getClusteredTreeExps() != null) {
        tree=set.getClusteredTreeExps();
      }
 else       renderSymbol(gl);
    }
  }
  if (tree != null) {
    if (bRenderGeneTree) {
      xmax=viewFrustum.getWidth() - 0.2f;
      fSampleHeight=(viewFrustum.getHeight() - 0.7f) / tree.getRoot().getNrElements();
      fLevelWidth=(viewFrustum.getWidth() - 3f) / tree.getRoot().getDepth();
      yPosInit=viewFrustum.getHeight() - 0.4f;
    }
 else {
      ymin=0.1f;
      fSampleWidth=(viewFrustum.getWidth() - 1f) / tree.getRoot().getNrElements();
      fLevelHeight=(viewFrustum.getHeight() - 0.7f) / tree.getRoot().getDepth();
      xPosInit=0.4f;
    }
    determinePositions();
    gl.glLineWidth(0.1f);
    if (bRenderGeneTree) {
      gl.glTranslatef(0.1f,0,0);
{
        renderDendrogramGenes(gl,currentRootNode);
      }
    }
 else {
      gl.glTranslatef(0,0.1f,0);
      renderDendrogramExperiments(gl,tree.getRoot());
    }
    renderSelections(gl,tree.getRoot());
    renderCut(gl);
    if (bRenderGeneTree)     gl.glTranslatef(-0.1f,0,0);
 else     gl.glTranslatef(0,-0.1f,0);
  }
  gl.glEndList();
}",0.9746328437917224
58750,"@Override public void handleUpdateView(){
  setDisplayListDirty();
}","@Override public void handleUpdateView(){
  tree=null;
  setDisplayListDirty();
}",0.912751677852349
58751,"private void close(){
  if (clusterProgressListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(clusterProgressListener);
    clusterProgressListener=null;
  }
  if (!shell.isDisposed())   shell.close();
  if (algorithmType == EClustererAlgo.TREE_CLUSTERER || algorithmType == EClustererAlgo.COBWEB_CLUSTERER) {
    GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
      public void run(){
        try {
          shell=new Shell();
          shell.setText(algorithmType.getName());
          shell.setImage(GeneralManager.get().getResourceLoader().getImage(shell.getDisplay(),""String_Node_Str""));
          Monitor primary=shell.getDisplay().getPrimaryMonitor();
          Rectangle bounds=primary.getBounds();
          Rectangle rect=shell.getBounds();
          int x=bounds.x + (bounds.width - rect.width) / 2;
          int y=bounds.y + (bounds.height - rect.height) / 2;
          shell.setLocation(x,y);
          Composite composite=new Composite(shell,SWT.NONE);
          composite.setLayout(new GridLayout(1,false));
          Label label=new Label(composite,SWT.NULL);
          label.setText(""String_Node_Str"");
          GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
          gridData.widthHint=310;
          label.setLayoutData(gridData);
          Composite viewComposite=new Composite(composite,SWT.SHADOW_ETCHED_IN);
          viewComposite.setLayout(new RowLayout());
          Composite selectedViewsComposite=new Composite(viewComposite,SWT.SHADOW_ETCHED_IN);
          selectedViewsComposite.setLayout(new GridLayout());
          final Button[] buttonViews=new Button[2];
          buttonViews[0]=new Button(selectedViewsComposite,SWT.CHECK);
          buttonViews[0].setSelection(true);
          buttonViews[0].setText(""String_Node_Str"");
          buttonViews[0].setBounds(10,5,75,30);
          buttonViews[1]=new Button(selectedViewsComposite,SWT.CHECK);
          buttonViews[1].setSelection(true);
          buttonViews[1].setText(""String_Node_Str"");
          buttonViews[1].setBounds(10,5,75,30);
          buttonViews[0].addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              bOpenDendrogram=(bOpenDendrogram == true) ? false : true;
            }
          }
);
          buttonViews[1].addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              bOpenRadialHierarchy=(bOpenRadialHierarchy == true) ? false : true;
            }
          }
);
          Composite buttonComposite=new Composite(viewComposite,SWT.SHADOW_ETCHED_IN);
          buttonComposite.setLayout(new RowLayout());
          Button okButton=new Button(buttonComposite,SWT.PUSH);
          okButton.setText(""String_Node_Str"");
          okButton.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              try {
                if (clusterType == EClustererType.GENE_CLUSTERING) {
                  if (bOpenRadialHierarchy)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLRadialHierarchyView.ID);
                  if (bOpenDendrogram)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramHorizontalView.ID);
                }
 else                 if (clusterType == EClustererType.EXPERIMENTS_CLUSTERING) {
                  if (bOpenDendrogram)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramVerticalView.ID);
                }
 else                 if (clusterType == EClustererType.BI_CLUSTERING) {
                  if (bOpenRadialHierarchy)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLRadialHierarchyView.ID);
                  if (bOpenDendrogram) {
                    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramHorizontalView.ID);
                    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramVerticalView.ID);
                  }
                }
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
              shell.close();
            }
          }
);
          Button cancelButton=new Button(buttonComposite,SWT.PUSH);
          cancelButton.setText(""String_Node_Str"");
          cancelButton.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              shell.close();
            }
          }
);
          composite.pack();
          shell.pack();
          shell.open();
        }
 catch (        Exception e) {
        }
      }
    }
);
  }
}","private void close(){
  if (clusterProgressListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(clusterProgressListener);
    clusterProgressListener=null;
  }
  if (!shell.isDisposed())   shell.close();
  if (algorithmType == EClustererAlgo.TREE_CLUSTERER || algorithmType == EClustererAlgo.COBWEB_CLUSTERER) {
    GeneralManager.get().getGUIBridge().getDisplay().asyncExec(new Runnable(){
      public void run(){
        try {
          shell=new Shell();
          shell.setText(algorithmType.getName());
          shell.setImage(GeneralManager.get().getResourceLoader().getImage(shell.getDisplay(),""String_Node_Str""));
          Monitor primary=shell.getDisplay().getPrimaryMonitor();
          Rectangle bounds=primary.getBounds();
          Rectangle rect=shell.getBounds();
          int x=bounds.x + (bounds.width - rect.width) / 2;
          int y=bounds.y + (bounds.height - rect.height) / 2;
          shell.setLocation(x,y);
          Composite composite=new Composite(shell,SWT.NONE);
          composite.setLayout(new GridLayout(1,false));
          Label label=new Label(composite,SWT.NULL);
          label.setText(""String_Node_Str"");
          GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
          gridData.widthHint=310;
          label.setLayoutData(gridData);
          Composite viewComposite=new Composite(composite,SWT.SHADOW_ETCHED_IN);
          viewComposite.setLayout(new RowLayout());
          Composite selectedViewsComposite=new Composite(viewComposite,SWT.SHADOW_ETCHED_IN);
          selectedViewsComposite.setLayout(new GridLayout());
          final Button[] buttonViews=new Button[2];
          buttonViews[0]=new Button(selectedViewsComposite,SWT.CHECK);
          buttonViews[0].setSelection(true);
          buttonViews[0].setText(""String_Node_Str"");
          buttonViews[0].setBounds(10,5,75,30);
          buttonViews[1]=new Button(selectedViewsComposite,SWT.CHECK);
          buttonViews[1].setSelection(true);
          buttonViews[1].setText(""String_Node_Str"");
          buttonViews[1].setBounds(10,5,75,30);
          buttonViews[0].addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              bOpenDendrogram=(bOpenDendrogram == true) ? false : true;
            }
          }
);
          buttonViews[1].addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              bOpenRadialHierarchy=(bOpenRadialHierarchy == true) ? false : true;
            }
          }
);
          Composite buttonComposite=new Composite(viewComposite,SWT.SHADOW_ETCHED_IN);
          buttonComposite.setLayout(new RowLayout());
          Button okButton=new Button(buttonComposite,SWT.PUSH);
          okButton.setText(""String_Node_Str"");
          okButton.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              try {
                if (clusterType == EClustererType.GENE_CLUSTERING) {
                  if (bOpenRadialHierarchy)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLRadialHierarchyView.ID);
                  if (bOpenDendrogram)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramHorizontalView.ID);
                }
 else                 if (clusterType == EClustererType.EXPERIMENTS_CLUSTERING) {
                  if (bOpenDendrogram)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramVerticalView.ID);
                }
 else                 if (clusterType == EClustererType.BI_CLUSTERING) {
                  if (bOpenRadialHierarchy)                   PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLRadialHierarchyView.ID);
                  if (bOpenDendrogram) {
                    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramHorizontalView.ID);
                    PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(GLDendrogramVerticalView.ID);
                  }
                }
                UpdateViewEvent event=new UpdateViewEvent();
                event.setSender(this);
                GeneralManager.get().getEventPublisher().triggerEvent(event);
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
              shell.close();
            }
          }
);
          Button cancelButton=new Button(buttonComposite,SWT.PUSH);
          cancelButton.setText(""String_Node_Str"");
          cancelButton.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              shell.close();
            }
          }
);
          composite.pack();
          shell.pack();
          shell.open();
        }
 catch (        Exception e) {
        }
      }
    }
);
  }
}",0.9822885572139304
58752,"/** 
 * Returns name of the node. Therefore we need an index of the gene/experiment
 * @param eClustererType either gene or expression clustering
 * @param index index of the current node in the VA
 * @return name of the current node
 */
private String getNodeName(EClustererType eClustererType,int index){
  String nodeName=null;
  IVirtualArray contentVA=set.getVA(idContent);
  IVirtualArray storageVA=set.getVA(idStorage);
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    if (set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
      nodeName=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(contentVA.get(index));
      nodeName+=""String_Node_Str"";
      nodeName+=GeneticIDMappingHelper.get().getRefSeqStringFromStorageIndex(contentVA.get(index));
    }
 else     if (set.getSetType() == ESetType.UNSPECIFIED) {
      nodeName=""String_Node_Str"" + contentVA.get(index) + ""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + set.getSetType() + ""String_Node_Str"");
    }
  }
 else {
    nodeName=set.get(storageVA.get(index)).getLabel();
  }
  if (hashedNodeNames.containsKey(nodeName)) {
    int iNr=1;
    if (duplicatedNodes.containsKey(nodeName)) {
      iNr=duplicatedNodes.get(nodeName);
      duplicatedNodes.put(nodeName,iNr + 1);
    }
 else     duplicatedNodes.put(nodeName,iNr);
    nodeName=nodeName + ""String_Node_Str"" + iNr;
  }
 else   hashedNodeNames.put(nodeName,1);
  return nodeName;
}","/** 
 * Returns name of the node. Therefore we need an index of the gene/experiment
 * @param eClustererType either gene or expression clustering
 * @param index index of the current node in the VA
 * @return name of the current node
 */
private String getNodeName(EClustererType eClustererType,int index){
  String nodeName=null;
  IVirtualArray contentVA=set.getVA(idContent);
  IVirtualArray storageVA=set.getVA(idStorage);
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    if (set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
      nodeName=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(contentVA.get(index));
      nodeName+=""String_Node_Str"";
      nodeName+=GeneticIDMappingHelper.get().getRefSeqStringFromStorageIndex(contentVA.get(index));
    }
 else     if (set.getSetType() == ESetType.UNSPECIFIED) {
      nodeName=""String_Node_Str"" + contentVA.get(index) + ""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + set.getSetType() + ""String_Node_Str"");
    }
  }
 else {
    nodeName=set.get(storageVA.get(index)).getLabel();
  }
  if (hashedNodeNames.containsKey(nodeName)) {
    int iNr=1;
    if (duplicatedNodes.containsKey(nodeName)) {
      iNr=duplicatedNodes.get(nodeName);
      duplicatedNodes.put(nodeName,++iNr);
    }
 else     duplicatedNodes.put(nodeName,iNr);
    nodeName=nodeName + ""String_Node_Str"" + iNr;
  }
 else   hashedNodeNames.put(nodeName,1);
  return nodeName;
}",0.9965986394557824
58753,"@Override public void handleMergeGroups(boolean bGeneGroup){
  int iVAId=0;
  if (bGeneGroup)   iVAId=iContentVAID;
 else   iVAId=iStorageVAID;
  IGroupList groupList=set.getVA(iVAId).getGroupList();
  ArrayList<Integer> selGroups=new ArrayList<Integer>();
  if (groupList == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Group iter : groupList) {
    if (iter.getSelectionType() == ESelectionType.SELECTION)     selGroups.add(groupList.indexOf(iter));
  }
  while (selGroups.size() >= 2) {
    int iLastSelected=selGroups.size() - 1;
    if (groupList.merge(set.getVA(iVAId),selGroups.get(iLastSelected - 1),selGroups.get(iLastSelected)) == false) {
      System.out.println(""String_Node_Str"");
      return;
    }
    selGroups.remove(iLastSelected);
  }
  bRedrawTextures=true;
  setDisplayListDirty();
}","@Override public void handleMergeGroups(boolean bGeneGroup){
  int iVAId=0;
  if (bGeneGroup)   iVAId=iContentVAID;
 else   iVAId=iStorageVAID;
  IGroupList groupList=set.getVA(iVAId).getGroupList();
  ArrayList<Integer> selGroups=new ArrayList<Integer>();
  if (groupList == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  for (  Group iter : groupList) {
    if (iter.getSelectionType() == ESelectionType.SELECTION)     selGroups.add(groupList.indexOf(iter));
  }
  while (selGroups.size() >= 2) {
    int iLastSelected=selGroups.size() - 1;
    if (groupList.merge(set.getVA(iVAId),selGroups.get(iLastSelected - 1),selGroups.get(iLastSelected)) == false) {
      System.out.println(""String_Node_Str"");
      return;
    }
    selGroups.remove(iLastSelected);
  }
  if (bGeneGroup)   iSelectorBar=selGroups.get(0) + 1;
  bRedrawTextures=true;
  setDisplayListDirty();
}",0.9681897050318105
58754,"/** 
 * Calculates the similarity matrix for a given set and VA�s
 * @param set
 * @param iVAIdContent
 * @param iVAIdStorage
 * @return
 */
public int determineSimilarities(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  this.iVAIdContent=iVAIdContent;
  this.iVAIdStorage=iVAIdStorage;
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  IDistanceMeasure distanceMeasure;
  if (eDistanceMeasure == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distanceMeasure=new EuclideanDistance();
 else   distanceMeasure=new PearsonCorrelation();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    float[] dArInstance1=new float[storageVA.size()];
    float[] dArInstance2=new float[storageVA.size()];
    int icnt1=0, icnt2=0, isto=0;
    int count=0;
    for (    Integer iContentIndex1 : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt1 / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        isto=0;
        for (        Integer iStorageIndex1 : storageVA) {
          dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
          isto++;
        }
        icnt2=0;
        for (        Integer iContentIndex2 : contentVA) {
          isto=0;
          for (          Integer iStorageIndex2 : storageVA) {
            dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
            isto++;
          }
          if (icnt1 != icnt2) {
            s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
            i[count]=icnt1;
            k[count]=icnt2;
            count++;
          }
          icnt2++;
        }
        icnt1++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
        return -1;
      }
    }
    float median=ClusterHelper.median(s);
    int cnt=0;
    for (    Integer iContentIndex1 : contentVA) {
      s[count]=median * fClusterFactor;
      i[count]=cnt;
      k[count]=cnt;
      count++;
      cnt++;
    }
  }
 else {
    float[] dArInstance1=new float[contentVA.size()];
    float[] dArInstance2=new float[contentVA.size()];
    int isto1=0, isto2=0, icnt=0;
    int count=0;
    for (    Integer iStorageIndex1 : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto1 / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        icnt=0;
        for (        Integer iContentIndex1 : contentVA) {
          dArInstance1[icnt]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
          icnt++;
        }
        isto2=0;
        for (        Integer iStorageIndex2 : storageVA) {
          icnt=0;
          for (          Integer iContentIndex2 : contentVA) {
            dArInstance2[icnt]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
            icnt++;
          }
          if (isto1 != isto2) {
            s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
            i[count]=isto1;
            k[count]=isto2;
            count++;
          }
          isto2++;
        }
        isto1++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
        return -1;
      }
    }
    float median=ClusterHelper.median(s);
    int sto=0;
    for (    Integer iStorageIndex1 : storageVA) {
      s[count]=median * fClusterFactor;
      i[count]=sto;
      k[count]=sto;
      count++;
      sto++;
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
  return 0;
}","/** 
 * Calculates the similarity matrix for a given set and VA�s
 * @param set
 * @param iVAIdContent
 * @param iVAIdStorage
 * @return
 */
public int determineSimilarities(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  this.iVAIdContent=iVAIdContent;
  this.iVAIdStorage=iVAIdStorage;
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  IDistanceMeasure distanceMeasure;
  if (eDistanceMeasure == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distanceMeasure=new EuclideanDistance();
 else   distanceMeasure=new PearsonCorrelation();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    float[] dArInstance1=new float[storageVA.size()];
    float[] dArInstance2=new float[storageVA.size()];
    int icnt1=0, icnt2=0, isto=0;
    int count=0;
    for (    Integer iContentIndex1 : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt1 / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        isto=0;
        for (        Integer iStorageIndex1 : storageVA) {
          dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
          isto++;
        }
        icnt2=0;
        for (        Integer iContentIndex2 : contentVA) {
          isto=0;
          for (          Integer iStorageIndex2 : storageVA) {
            dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
            isto++;
          }
          if (icnt1 != icnt2) {
            s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
            i[count]=contentVA.indexOf(iContentIndex1);
            k[count]=contentVA.indexOf(iContentIndex2);
            count++;
          }
          icnt2++;
        }
        icnt1++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
        return -1;
      }
    }
    float median=ClusterHelper.median(s);
    int cnt=0;
    for (    Integer iContentIndex : contentVA) {
      s[count]=median * fClusterFactor;
      i[count]=contentVA.indexOf(iContentIndex);
      k[count]=contentVA.indexOf(iContentIndex);
      count++;
      cnt++;
    }
  }
 else {
    float[] dArInstance1=new float[contentVA.size()];
    float[] dArInstance2=new float[contentVA.size()];
    int isto1=0, isto2=0, icnt=0;
    int count=0;
    for (    Integer iStorageIndex1 : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto1 / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        icnt=0;
        for (        Integer iContentIndex1 : contentVA) {
          dArInstance1[icnt]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
          icnt++;
        }
        isto2=0;
        for (        Integer iStorageIndex2 : storageVA) {
          icnt=0;
          for (          Integer iContentIndex2 : contentVA) {
            dArInstance2[icnt]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
            icnt++;
          }
          if (isto1 != isto2) {
            s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
            i[count]=storageVA.indexOf(iStorageIndex1);
            k[count]=storageVA.indexOf(iStorageIndex2);
            count++;
          }
          isto2++;
        }
        isto1++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
        return -1;
      }
    }
    float median=ClusterHelper.median(s);
    int sto=0;
    for (    Integer iStorageIndex : storageVA) {
      s[count]=median * fClusterFactor;
      i[count]=storageVA.indexOf(iStorageIndex);
      k[count]=storageVA.indexOf(iStorageIndex);
      count++;
      sto++;
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
  return 0;
}",0.9683766690091355
58755,"/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
public Integer affinityPropagation(ISet set,EClustererType eClustererType){
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  int iPercentage=1;
  while (bIterate) {
    iNrIterations++;
    int tempPercentage=(int)((float)iNrIterations / iMaxIterations * 100);
    if (iPercentage == tempPercentage) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
      iPercentage++;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
    processEvents();
    if (bClusteringCanceled) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
      return -1;
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
    return -1;
  }
  if (bConverged == false) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
    return -1;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  int counter=0;
  int idxCnt=0;
  for (  Integer example : alExamples) {
    for (int sampleNr=0; sampleNr < iNrSamples; sampleNr++) {
      if (idx[sampleNr] == example) {
        AlIndexes.add(sampleNr);
        count.set(counter,count.get(counter) + 1);
      }
      if (example == sampleNr) {
        idxExamples.add(idxCnt);
        idxCnt=0;
      }
      idxCnt++;
    }
    counter++;
  }
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
  return clusteredVAId;
}","/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
public Integer affinityPropagation(EClustererType eClustererType){
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  int iPercentage=1;
  while (bIterate) {
    iNrIterations++;
    int tempPercentage=(int)((float)iNrIterations / iMaxIterations * 100);
    if (iPercentage == tempPercentage) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
      iPercentage++;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
    processEvents();
    if (bClusteringCanceled) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
      return -1;
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
    return -1;
  }
  if (bConverged == false) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
    return -1;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  AlIndexes=getAl(alExamples,count,idxExamples,idx,eClustererType);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
  return clusteredVAId;
}",0.9692827522653972
58756,"@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   fClusterFactor=clusterState.getAffinityPropClusterFactorGenes();
 else   fClusterFactor=clusterState.getAffinityPropClusterFactorExperiments();
  eDistanceMeasure=clusterState.getDistanceMeasure();
  if (determineSimilarities(set,idContent,idStorage,clusterState.getClustererType()) == -1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
    return -1;
  }
  VAId=affinityPropagation(set,clusterState.getClustererType());
  return VAId;
}","@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   fClusterFactor=clusterState.getAffinityPropClusterFactorGenes();
 else   fClusterFactor=clusterState.getAffinityPropClusterFactorExperiments();
  eDistanceMeasure=clusterState.getDistanceMeasure();
  if (determineSimilarities(set,idContent,idStorage,clusterState.getClustererType()) == -1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
    return -1;
  }
  this.set=set;
  VAId=affinityPropagation(clusterState.getClustererType());
  return VAId;
}",0.9856938483547926
58757,"public Integer cluster(ISet set,Integer iVAIdOriginal,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdOriginal);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else       return -1;
    }
  }
 else {
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else       return -1;
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Integer> temp=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  HashMap<Double,Integer> hashClusters=new HashMap<Double,Integer>();
  for (int i=0; i < clusters.size(); i++) {
    hashClusters.put(clusters.get(i),i);
    temp.add(0);
    alExamples.add(0);
  }
  for (  double cluster : clusters) {
    for (int i=0; i < data.numInstances(); i++) {
      if (clusterAssignments[i] == cluster) {
        indexes.add(i);
        temp.set(hashClusters.get(cluster),temp.get(hashClusters.get(cluster)) + 1);
      }
    }
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  Integer clusteredVAId=set.createStorageVA(indexes);
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(""String_Node_Str"",1,0f,0,true);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  set.setAlClusterSizes(temp);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
  return clusteredVAId;
}","public Integer cluster(Integer iVAIdOriginal,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdOriginal);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else       return -1;
    }
  }
 else {
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else       return -1;
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Integer> temp=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  HashMap<Double,Integer> hashClusters=new HashMap<Double,Integer>();
  for (int i=0; i < clusters.size(); i++) {
    hashClusters.put(clusters.get(i),i);
    temp.add(0);
    alExamples.add(0);
  }
  for (  double cluster : clusters) {
    for (int i=0; i < data.numInstances(); i++) {
      if (clusterAssignments[i] == cluster) {
        indexes.add(i);
        temp.set(hashClusters.get(cluster),temp.get(hashClusters.get(cluster)) + 1);
      }
    }
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  Integer clusteredVAId=set.createStorageVA(indexes);
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(""String_Node_Str"",1,0f,0,true);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  set.setAlClusterSizes(temp);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
  return clusteredVAId;
}",0.9975057160673456
58758,"private void CNodeToTree(ClusterNode clusterNode,CNode node){
  if (node.getChilds() != null) {
    int iNrChildsNode=node.getChilds().size();
    for (int i=0; i < iNrChildsNode; i++) {
      CNode currentNode=(CNode)node.getChilds().elementAt(i);
      ClusterNode currentGraph=new ClusterNode(""String_Node_Str"" + currentNode.getClusterNum(),currentNode.getClusterNum(),0f,0,false);
      currentGraph.setNrElements(1);
      tree.addChild(clusterNode,currentGraph);
      CNodeToTree(currentGraph,currentNode);
    }
  }
}","private void CNodeToTree(ClusterNode clusterNode,CNode node,EClustererType eClustererType){
  if (node.getChilds() != null) {
    int iNrChildsNode=node.getChilds().size();
    for (int i=0; i < iNrChildsNode; i++) {
      CNode currentNode=(CNode)node.getChilds().elementAt(i);
      int clusterNr=0;
      clusterNr=currentNode.getClusterNum();
      ClusterNode currentGraph=new ClusterNode(""String_Node_Str"" + clusterNr,clusterNr,0f,0,false);
      currentGraph.setNrElements(1);
      tree.addChild(clusterNode,currentGraph);
      CNodeToTree(currentGraph,currentNode,eClustererType);
    }
  }
}",0.8358473824312334
58759,"@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  VAId=cluster(set,idContent,idStorage,clusterState.getClustererType());
  return VAId;
}","@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  this.set=set;
  this.iVAIdContent=idContent;
  this.iVAIdStorage=idStorage;
  VAId=cluster(idContent,idStorage,clusterState.getClustererType());
  return VAId;
}",0.83984375
58760,"public Integer cluster(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  try {
    clusterer.setNumClusters(iNrCluster);
    clusterer.setMaxIterations(1000);
  }
 catch (  Exception e2) {
    return -1;
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    int iNrElements=contentVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else       return -1;
    }
  }
 else {
    int iNrElements=storageVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else       return -1;
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] ClusterAssignments=eval.getClusterAssignments();
  for (int i=0; i < iNrCluster; i++) {
    count.add(0);
  }
  for (int j=0; j < iNrCluster; j++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == j) {
        alExamples.add(i);
        break;
      }
    }
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        indexes.add(i);
        count.set(cluster,count.get(cluster) + 1);
      }
    }
  }
  Integer clusteredVAId=set.createStorageVA(indexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
  return clusteredVAId;
}","public Integer cluster(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  try {
    clusterer.setNumClusters(iNrCluster);
    clusterer.setMaxIterations(1000);
  }
 catch (  Exception e2) {
    return -1;
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    int iNrElements=contentVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else       return -1;
    }
  }
 else {
    int iNrElements=storageVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,true));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else       return -1;
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    return -1;
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] ClusterAssignments=eval.getClusterAssignments();
  for (int i=0; i < iNrCluster; i++) {
    count.add(0);
  }
  for (int j=0; j < iNrCluster; j++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == j) {
        alExamples.add(i);
        break;
      }
    }
  }
  processEvents();
  if (bClusteringCanceled)   return -1;
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  IVirtualArray virualArray;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virualArray=set.getVA(iVAIdContent);
 else   virualArray=set.getVA(iVAIdStorage);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        indexes.add(virualArray.get(i));
        count.set(cluster,count.get(cluster) + 1);
      }
    }
  }
  Integer clusteredVAId=set.createStorageVA(indexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,false));
  return clusteredVAId;
}",0.9793995178610564
58761,"/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
private Integer affinityPropagation(EClustererType eClustererType){
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  while (bIterate) {
    iNrIterations++;
    int tempPercentage=(int)((float)iNrIterations / iMaxIterations * 100);
    if (iPercentage == tempPercentage) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
      iPercentage++;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
    processEvents();
    if (bClusteringCanceled) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return -2;
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  if (bConverged == false) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  AlIndexes=getAl(alExamples,count,idxExamples,idx,eClustererType);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return clusteredVAId;
}","/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
private Integer affinityPropagation(EClustererType eClustererType){
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  while (bIterate) {
    iNrIterations++;
    int tempPercentage=(int)((float)iNrIterations / iMaxIterations * 100);
    if (iPercentage == tempPercentage) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
      iPercentage++;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
    processEvents();
    if (bClusteringCanceled) {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return -2;
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  if (bConverged == false) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  AlIndexes=getAl(alExamples,count,idxExamples,idx,eClustererType);
  Integer clusteredVAId=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   clusteredVAId=set.createStorageVA(AlIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   clusteredVAId=set.createSetVA(AlIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return clusteredVAId;
}",0.9860781990521328
58762,"private Integer cluster(Integer iVAIdOriginal,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdOriginal);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Integer> temp=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  HashMap<Double,Integer> hashClusters=new HashMap<Double,Integer>();
  for (int i=0; i < clusters.size(); i++) {
    hashClusters.put(clusters.get(i),i);
    temp.add(0);
    alExamples.add(0);
  }
  for (  double cluster : clusters) {
    for (int i=0; i < data.numInstances(); i++) {
      if (clusterAssignments[i] == cluster) {
        indexes.add(i);
        temp.set(hashClusters.get(cluster),temp.get(hashClusters.get(cluster)) + 1);
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  Integer clusteredVAId=set.createStorageVA(indexes);
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(""String_Node_Str"",1,0f,0,true);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  set.setAlClusterSizes(temp);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return clusteredVAId;
}","private Integer cluster(Integer iVAIdOriginal,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdOriginal);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / storageVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.RAW,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  data.setClassIndex(-1);
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] clusterAssignments=eval.getClusterAssignments();
  ArrayList<Integer> temp=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Double> clusters=new ArrayList<Double>();
  for (int i=0; i < clusterAssignments.length; i++) {
    if (clusters.contains(clusterAssignments[i]) == false)     clusters.add(clusterAssignments[i]);
  }
  HashMap<Double,Integer> hashClusters=new HashMap<Double,Integer>();
  for (int i=0; i < clusters.size(); i++) {
    hashClusters.put(clusters.get(i),i);
    temp.add(0);
    alExamples.add(0);
  }
  for (  double cluster : clusters) {
    for (int i=0; i < data.numInstances(); i++) {
      if (clusterAssignments[i] == cluster) {
        indexes.add(i);
        temp.set(hashClusters.get(cluster),temp.get(hashClusters.get(cluster)) + 1);
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  Integer clusteredVAId=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   clusteredVAId=set.createStorageVA(indexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   clusteredVAId=set.createSetVA(indexes);
  CNode node=clusterer.m_cobwebTree;
  ClusterNode clusterNode=new ClusterNode(""String_Node_Str"",1,0f,0,true);
  tree.setRootNode(clusterNode);
  CNodeToTree(clusterNode,node,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(90,false));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  set.setAlClusterSizes(temp);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return clusteredVAId;
}",0.9829953198127924
58763,"private Integer cluster(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  DistanceFunction distFunc=null;
  if (eDistanceMeasure == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distFunc=new EuclideanDistance();
 else   if (eDistanceMeasure == EDistanceMeasure.MANHATTAHN_DISTANCE)   distFunc=new ManhattanDistance();
  try {
    clusterer.setNumClusters(iNrCluster);
    clusterer.setMaxIterations(1000);
    if (distFunc != null)     clusterer.setDistanceFunction(distFunc);
  }
 catch (  Exception e2) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=contentVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=storageVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] ClusterAssignments=eval.getClusterAssignments();
  for (int i=0; i < iNrCluster; i++) {
    count.add(0);
  }
  for (int j=0; j < iNrCluster; j++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == j) {
        alExamples.add(i);
        break;
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  IVirtualArray virualArray;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virualArray=set.getVA(iVAIdContent);
 else   virualArray=set.getVA(iVAIdStorage);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        indexes.add(virualArray.get(i));
        count.set(cluster,count.get(cluster) + 1);
      }
    }
  }
  Integer clusteredVAId=set.createStorageVA(indexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return clusteredVAId;
}","private Integer cluster(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  ArrayList<Integer> indexes=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  DistanceFunction distFunc=null;
  if (eDistanceMeasure == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distFunc=new EuclideanDistance();
 else   if (eDistanceMeasure == EDistanceMeasure.MANHATTAHN_DISTANCE)   distFunc=new ManhattanDistance();
  try {
    clusterer.setNumClusters(iNrCluster);
    clusterer.setMaxIterations(1000);
    if (distFunc != null)     clusterer.setDistanceFunction(distFunc);
  }
 catch (  Exception e2) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"");
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=contentVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < storageVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int icnt=0;
    for (    Integer iContentIndex : contentVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)icnt / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iStorageIndex : storageVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        icnt++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
 else {
    GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
    int iNrElements=storageVA.size();
    if (iNrCluster >= iNrElements)     return -1;
    for (int nr=0; nr < contentVA.size(); nr++) {
      buffer.append(""String_Node_Str"" + nr + ""String_Node_Str"");
    }
    buffer.append(""String_Node_Str"");
    int isto=0;
    for (    Integer iStorageIndex : storageVA) {
      if (bClusteringCanceled == false) {
        int tempPercentage=(int)((float)isto / contentVA.size() * 100);
        if (iPercentage == tempPercentage) {
          GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
          iPercentage++;
        }
        for (        Integer iContentIndex : contentVA) {
          buffer.append(set.get(iStorageIndex).getFloat(EDataRepresentation.NORMALIZED,iContentIndex) + ""String_Node_Str"");
        }
        buffer.append(""String_Node_Str"");
        isto++;
        processEvents();
      }
 else {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
        return -2;
      }
    }
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(25 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  Instances data=null;
  try {
    data=new Instances(new StringReader(buffer.toString()));
  }
 catch (  IOException e1) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(10,false));
  try {
    clusterer.buildClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(45,false));
  ClusterEvaluation eval=new ClusterEvaluation();
  eval.setClusterer(clusterer);
  try {
    eval.evaluateClusterer(data);
  }
 catch (  Exception e) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -1;
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(60,false));
  double[] ClusterAssignments=eval.getClusterAssignments();
  for (int i=0; i < iNrCluster; i++) {
    count.add(0);
  }
  for (int j=0; j < iNrCluster; j++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == j) {
        alExamples.add(i);
        break;
      }
    }
  }
  processEvents();
  if (bClusteringCanceled) {
    GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
    return -2;
  }
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(80,false));
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  IVirtualArray virualArray;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   virualArray=set.getVA(iVAIdContent);
 else   virualArray=set.getVA(iVAIdStorage);
  for (int cluster=0; cluster < iNrCluster; cluster++) {
    for (int i=0; i < data.numInstances(); i++) {
      if (ClusterAssignments[i] == cluster) {
        indexes.add(virualArray.get(i));
        count.set(cluster,count.get(cluster) + 1);
      }
    }
  }
  Integer clusteredVAId=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   clusteredVAId=set.createStorageVA(indexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   clusteredVAId=set.createSetVA(indexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(alExamples);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(50 * iProgressBarMultiplier + iProgressBarOffsetValue,true));
  return clusteredVAId;
}",0.9485810192249008
58764,"/** 
 * The pmlcluster routine performs clustering using pairwise maximum- (complete-) linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
private Integer pmlcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++)   clusterid[j]=j;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  int j;
  ClosestPair pair=null;
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return -1;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      int is=1;
      int js=0;
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      for (j=0; j < js; j++)       distmatrix[js][j]=Math.max(distmatrix[is][j],distmatrix[js][j]);
      for (j=js + 1; j < is; j++)       distmatrix[j][js]=Math.max(distmatrix[is][j],distmatrix[j][js]);
      for (j=is + 1; j < n; j++)       distmatrix[j][js]=Math.max(distmatrix[j][is],distmatrix[j][js]);
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return -2;
    }
  }
  tree=new Tree<ClusterNode>();
  int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
  ClusterNode node=new ClusterNode(""String_Node_Str"",random,0f,0,true);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  AlIndexes=getAl();
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return clusteredVAId;
}","/** 
 * The pmlcluster routine performs clustering using pairwise maximum- (complete-) linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
private Integer pmlcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++)   clusterid[j]=j;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  int j;
  ClosestPair pair=null;
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return -1;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      int is=1;
      int js=0;
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      for (j=0; j < js; j++)       distmatrix[js][j]=Math.max(distmatrix[is][j],distmatrix[js][j]);
      for (j=js + 1; j < is; j++)       distmatrix[j][js]=Math.max(distmatrix[is][j],distmatrix[j][js]);
      for (j=is + 1; j < n; j++)       distmatrix[j][js]=Math.max(distmatrix[j][is],distmatrix[j][js]);
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return -2;
    }
  }
  tree=new Tree<ClusterNode>();
  int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
  ClusterNode node=new ClusterNode(""String_Node_Str"",random,0f,0,true);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  AlIndexes=getAl();
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  Integer clusteredVAId=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   clusteredVAId=set.createStorageVA(AlIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   clusteredVAId=set.createSetVA(AlIndexes);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return clusteredVAId;
}",0.96897752453308
58765,"/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
private Integer palcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return -1;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int sum;
      int is=1;
      int js=0;
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      sum=number[is] + number[js];
      for (j=0; j < js; j++) {
        distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
        distmatrix[js][j]/=sum;
      }
      for (j=js + 1; j < is; j++) {
        distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=is + 1; j < n; j++) {
        distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      number[js]=sum;
      number[is]=number[n - 1];
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return -2;
    }
  }
  for (int i=0; i < result.length; i++) {
    if (result[i].getLeft() >= 0)     AlIndexes.add(result[i].getLeft());
    if (result[i].getRight() >= 0)     AlIndexes.add(result[i].getRight());
  }
  tree=new Tree<ClusterNode>();
  int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
  ClusterNode node=new ClusterNode(""String_Node_Str"",random,0f,0,true);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  AlIndexes=getAl();
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return clusteredVAId;
}","/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
private Integer palcluster(EClustererType eClustererType){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  float[][] distmatrix;
  try {
    distmatrix=new float[iNrSamples][iNrSamples];
  }
 catch (  OutOfMemoryError e) {
    return -1;
  }
  distmatrix=similarities.clone();
  int iPercentage=1;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
 else   GeneralManager.get().getEventPublisher().triggerEvent(new RenameProgressBarEvent(""String_Node_Str""));
  for (int n=iNrSamples; n > 1; n--) {
    if (bClusteringCanceled == false) {
      int sum;
      int is=1;
      int js=0;
      int tempPercentage=(int)((float)(iNrSamples - n) / iNrSamples * 100);
      if (iPercentage == tempPercentage) {
        GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iPercentage,false));
        iPercentage++;
      }
      pair=find_closest_pair(n,distmatrix);
      if (pair.update) {
        is=pair.x;
        js=pair.y;
      }
      Node node=new Node();
      node.setCorrelation(pair.correlation);
      node.setLeft(clusterid[is]);
      node.setRight(clusterid[js]);
      result[iNrSamples - n]=node;
      sum=number[is] + number[js];
      for (j=0; j < js; j++) {
        distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
        distmatrix[js][j]/=sum;
      }
      for (j=js + 1; j < is; j++) {
        distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=is + 1; j < n; j++) {
        distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
        distmatrix[j][js]/=sum;
      }
      for (j=0; j < is; j++)       distmatrix[is][j]=distmatrix[n - 1][j];
      for (j=is + 1; j < n - 1; j++)       distmatrix[j][is]=distmatrix[n - 1][j];
      number[js]=sum;
      number[is]=number[n - 1];
      clusterid[js]=n - iNrSamples - 1;
      clusterid[is]=clusterid[n - 1];
      processEvents();
    }
 else {
      GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(100,true));
      return -2;
    }
  }
  for (int i=0; i < result.length; i++) {
    if (result[i].getLeft() >= 0)     AlIndexes.add(result[i].getLeft());
    if (result[i].getRight() >= 0)     AlIndexes.add(result[i].getRight());
  }
  tree=new Tree<ClusterNode>();
  int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
  ClusterNode node=new ClusterNode(""String_Node_Str"",random,0f,0,true);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1,eClustererType);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  determineExpressionValue(eClustererType);
  AlIndexes=getAl();
  if (eClustererType == EClustererType.GENE_CLUSTERING)   set.setClusteredTreeGenes(tree);
 else   set.setClusteredTreeExps(tree);
  Integer clusteredVAId=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING)   clusteredVAId=set.createStorageVA(AlIndexes);
 else   if (eClustererType == EClustererType.EXPERIMENTS_CLUSTERING)   clusteredVAId=set.createSetVA(AlIndexes);
  GeneralManager.get().getEventPublisher().triggerEvent(new ClusterProgressEvent(iProgressBarMultiplier * 50 + iProgressBarOffsetValue,true));
  return clusteredVAId;
}",0.9734633089629028
58766,"private Set<Integer> convertExternalToInternal(Integer iSelectionID){
  if (externalToInternalMapping.isMultiMap())   return GeneralManager.get().getIDMappingManager().getMultiID(externalToInternalMapping,iSelectionID);
  Set<Integer> iSetID=new HashSet<Integer>();
  iSetID.add((Integer)GeneralManager.get().getIDMappingManager().getID(externalToInternalMapping,iSelectionID));
  return iSetID;
}","private Set<Integer> convertExternalToInternal(Integer iSelectionID){
  if (externalToInternalMapping == null)   throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str"");
  if (externalToInternalMapping.isMultiMap())   return GeneralManager.get().getIDMappingManager().getMultiID(externalToInternalMapping,iSelectionID);
  Set<Integer> iSetID=new HashSet<Integer>();
  iSetID.add((Integer)GeneralManager.get().getIDMappingManager().getID(externalToInternalMapping,iSelectionID));
  return iSetID;
}",0.8668122270742358
58767,"/** 
 * Constructor.
 */
public TabularDataViewRep(final int iParentContainerId,final String sLabel){
  super(iParentContainerId,sLabel,GeneralManager.get().getIDManager().createID(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER));
  mapVAIDs=new EnumMap<EStorageBasedVAType,Integer>(EStorageBasedVAType.class);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).externalIDType(EIDType.REFSEQ_MRNA_INT).mappingType(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  idMappingManager=generalManager.getIDMappingManager();
}","/** 
 * Constructor.
 */
public TabularDataViewRep(final int iParentContainerId,final String sLabel){
  super(iParentContainerId,sLabel,GeneralManager.get().getIDManager().createID(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER));
  mapVAIDs=new EnumMap<EStorageBasedVAType,Integer>(EStorageBasedVAType.class);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  idMappingManager=generalManager.getIDMappingManager();
}",0.692247454972592
58768,"@Override public AGLEventListener createGLEventListener(ECommandType type,GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + type + ""String_Node_Str""+ sLabel+ ""String_Node_Str""));
  AGLEventListener glEventListener=null;
switch (type) {
case CREATE_GL_HEAT_MAP_3D:
    glEventListener=new GLHeatMap(glCanvas,sLabel,viewFrustum);
  break;
case CREATE_GL_PROPAGATION_HEAT_MAP_3D:
glEventListener=new GLPropagationHeatMap(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_TEXTURE_HEAT_MAP_3D:
glEventListener=new GLHierarchicalHeatMap(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_PATHWAY_3D:
glEventListener=new GLPathway(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_PARALLEL_COORDINATES:
glEventListener=new GLParallelCoordinates(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_GLYPH:
glEventListener=new GLGlyph(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_GLYPH_SLIDER:
glEventListener=new GLGlyphSliderView(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_CELL:
glEventListener=new GLCell(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_BUCKET_3D:
glEventListener=new GLRemoteRendering(glCanvas,sLabel,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET);
break;
case CREATE_GL_JUKEBOX_3D:
glEventListener=new GLRemoteRendering(glCanvas,sLabel,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX);
break;
case CREATE_GL_REMOTE_GLYPH:
glEventListener=new GLRemoteGlyph(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_RADIAL_HIERARCHY:
glEventListener=new GLRadialHierarchy(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_HYPERBOLIC:
glEventListener=new GLHyperbolic(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_HISTOGRAM:
glEventListener=new GLHistogram(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_DENDROGRAM_HORIZONTAL:
glEventListener=new GLDendrogramHorizontal(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_DENDROGRAM_VERTICAL:
glEventListener=new GLDendrogramVertical(glCanvas,sLabel,viewFrustum);
break;
default :
throw new RuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str"");
}
registerGLEventListenerByGLCanvas(glCanvas,glEventListener);
return glEventListener;
}","@Override public AGLEventListener createGLEventListener(ECommandType type,GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + type + ""String_Node_Str""+ sLabel+ ""String_Node_Str""));
  AGLEventListener glEventListener=null;
switch (type) {
case CREATE_GL_HEAT_MAP_3D:
    glEventListener=new GLHeatMap(glCanvas,sLabel,viewFrustum);
  break;
case CREATE_GL_PROPAGATION_HEAT_MAP_3D:
glEventListener=new GLPropagationHeatMap(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_TEXTURE_HEAT_MAP_3D:
glEventListener=new GLHierarchicalHeatMap(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_PATHWAY_3D:
glEventListener=new GLPathway(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_PARALLEL_COORDINATES:
glEventListener=new GLParallelCoordinates(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_GLYPH:
glEventListener=new GLGlyph(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_GLYPH_SLIDER:
glEventListener=new GLGlyphSliderView(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_CELL:
glEventListener=new GLCell(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_BUCKET_3D:
glEventListener=new GLRemoteRendering(glCanvas,sLabel,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET);
break;
case CREATE_GL_JUKEBOX_3D:
glEventListener=new GLRemoteRendering(glCanvas,sLabel,viewFrustum,ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX);
break;
case CREATE_GL_REMOTE_GLYPH:
glEventListener=new GLRemoteGlyph(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_RADIAL_HIERARCHY:
glEventListener=new GLRadialHierarchy(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_HYPERBOLIC:
glEventListener=new GLHyperbolic(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_HISTOGRAM:
glEventListener=new GLHistogram(glCanvas,sLabel,viewFrustum);
break;
case CREATE_GL_DENDROGRAM_HORIZONTAL:
glEventListener=new GLDendrogram(glCanvas,sLabel,viewFrustum,true);
break;
case CREATE_GL_DENDROGRAM_VERTICAL:
glEventListener=new GLDendrogram(glCanvas,sLabel,viewFrustum,false);
break;
default :
throw new RuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str"");
}
registerGLEventListenerByGLCanvas(glCanvas,glEventListener);
return glEventListener;
}",0.9936970223864378
58769,"private static int determineHierarchyDepthRec(Tree<ClusterNode> tree,ClusterNode node){
  if (tree.hasChildren(node)) {
    int temp=node.getDepth();
    for (    ClusterNode current : tree.getChildren(node)) {
      if (temp < determineHierarchyDepthRec(tree,current))       temp=determineHierarchyDepthRec(tree,current) + 1;
    }
    node.setDepth(temp);
  }
 else   node.setDepth(1);
  return node.getDepth();
}","private static int determineHierarchyDepthRec(Tree<ClusterNode> tree,ClusterNode node){
  if (tree.hasChildren(node)) {
    int temp=node.getDepth();
    for (    ClusterNode current : tree.getChildren(node)) {
      if (temp <= determineHierarchyDepthRec(tree,current))       temp=determineHierarchyDepthRec(tree,current) + 1;
    }
    node.setDepth(temp);
  }
 else   node.setDepth(1);
  return node.getDepth();
}",0.9987966305655837
58770,"/** 
 * Returns name of the node. Therefore we need an index of the gene/experiment
 * @param eClustererType either gene or expression clustering
 * @param index index of the current node in the VA
 * @return name of the current node
 */
private String getNodeName(EClustererType eClustererType,int index){
  String nodeName=null;
  IVirtualArray contentVA=set.getVA(idContent);
  IVirtualArray storageVA=set.getVA(idStorage);
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    if (set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
      nodeName=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(contentVA.get(index));
      nodeName+=""String_Node_Str"";
      nodeName+=GeneticIDMappingHelper.get().getRefSeqStringFromStorageIndex(contentVA.get(index));
    }
 else     if (set.getSetType() == ESetType.UNSPECIFIED) {
      nodeName=""String_Node_Str"" + contentVA.get(index) + ""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + set.getSetType() + ""String_Node_Str"");
    }
  }
 else {
    nodeName=set.get(storageVA.get(index)).getLabel();
  }
  return nodeName;
}","/** 
 * Returns name of the node. Therefore we need an index of the gene/experiment
 * @param eClustererType either gene or expression clustering
 * @param index index of the current node in the VA
 * @return name of the current node
 */
private String getNodeName(EClustererType eClustererType,int index){
  String nodeName=null;
  IVirtualArray contentVA=set.getVA(idContent);
  IVirtualArray storageVA=set.getVA(idStorage);
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    if (set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
      nodeName=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(contentVA.get(index));
      nodeName+=""String_Node_Str"";
      nodeName+=GeneticIDMappingHelper.get().getRefSeqStringFromStorageIndex(contentVA.get(index));
    }
 else     if (set.getSetType() == ESetType.UNSPECIFIED) {
      nodeName=""String_Node_Str"" + contentVA.get(index) + ""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + set.getSetType() + ""String_Node_Str"");
    }
  }
 else {
    nodeName=set.get(storageVA.get(index)).getLabel();
  }
  if (hashedNodeNames.containsKey(nodeName)) {
    int iNr=1;
    if (duplicatedNodes.containsKey(nodeName)) {
      iNr=duplicatedNodes.get(nodeName);
      duplicatedNodes.put(nodeName,iNr + 1);
    }
 else     duplicatedNodes.put(nodeName,iNr);
    nodeName=nodeName + ""String_Node_Str"" + iNr;
  }
 else   hashedNodeNames.put(nodeName,1);
  return nodeName;
}",0.8553846153846154
58771,"public DendrogramRenderStyle(AGLDendrogram dendrogram,IViewFrustum viewFrustum){
  super(viewFrustum);
}","public DendrogramRenderStyle(GLDendrogram dendrogram,IViewFrustum viewFrustum){
  super(viewFrustum);
}",0.9951690821256038
58772,"/** 
 * Calculates the similarity matrix for a given set and VA�s
 * @param set
 * @param iVAIdContent
 * @param iVAIdStorage
 * @return
 */
public void determineSimilarities(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  this.iVAIdContent=iVAIdContent;
  this.iVAIdStorage=iVAIdStorage;
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  IDistanceMeasure distanceMeasure;
  if (eDistanceMeasure == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distanceMeasure=new EuclideanDistance();
 else   distanceMeasure=new PearsonCorrelation();
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    if (contentVA.get(0) == 0)     bStart0=true;
 else     bStart0=false;
    int iNrElements=contentVA.size();
    pbSimilarity.setMinimum(0);
    pbSimilarity.setMaximum(iNrElements);
    float[] dArInstance1=new float[storageVA.size()];
    float[] dArInstance2=new float[storageVA.size()];
    int icnt1=0, icnt2=0, isto=0;
    int count=0;
    for (    Integer iContentIndex1 : contentVA) {
      pbSimilarity.setSelection(icnt1);
      shell.update();
      isto=0;
      for (      Integer iStorageIndex1 : storageVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iContentIndex2 : contentVA) {
        isto=0;
        for (        Integer iStorageIndex2 : storageVA) {
          dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
          isto++;
        }
        if (icnt1 != icnt2) {
          s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
          if (bStart0 == true) {
            i[count]=iContentIndex1;
            k[count]=iContentIndex2;
          }
 else {
            i[count]=iContentIndex1 - 1;
            k[count]=iContentIndex2 - 1;
          }
          count++;
        }
        icnt2++;
      }
      icnt1++;
    }
    float median=ClusterHelper.median(s);
    for (    Integer iContentIndex1 : contentVA) {
      s[count]=median * fClusterFactor;
      if (bStart0 == true) {
        i[count]=iContentIndex1;
        k[count]=iContentIndex1;
      }
 else {
        i[count]=iContentIndex1 - 1;
        k[count]=iContentIndex1 - 1;
      }
      count++;
    }
  }
 else {
    if (storageVA.get(0) == 0)     bStart0=true;
 else     bStart0=false;
    int iNrElements=storageVA.size();
    pbSimilarity.setMinimum(0);
    pbSimilarity.setMaximum(iNrElements);
    float[] dArInstance1=new float[contentVA.size()];
    float[] dArInstance2=new float[contentVA.size()];
    int icnt1=0, icnt2=0, isto=0;
    int count=0;
    for (    Integer iStorageIndex1 : storageVA) {
      pbSimilarity.setSelection(icnt1);
      shell.update();
      isto=0;
      for (      Integer iContentIndex1 : contentVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iStorageIndex2 : storageVA) {
        isto=0;
        for (        Integer iContentIndex2 : contentVA) {
          dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
          isto++;
        }
        if (icnt1 != icnt2) {
          s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
          if (bStart0 == true) {
            i[count]=iStorageIndex1;
            k[count]=iStorageIndex2;
          }
 else {
            i[count]=iStorageIndex1 - 1;
            k[count]=iStorageIndex2 - 1;
          }
          count++;
        }
        icnt2++;
      }
      icnt1++;
    }
    float median=ClusterHelper.median(s);
    for (    Integer iStorageIndex1 : storageVA) {
      s[count]=median * fClusterFactor;
      if (bStart0 == true) {
        i[count]=iStorageIndex1;
        k[count]=iStorageIndex1;
      }
 else {
        i[count]=iStorageIndex1 - 1;
        k[count]=iStorageIndex1 - 1;
      }
      count++;
    }
  }
}","/** 
 * Calculates the similarity matrix for a given set and VA�s
 * @param set
 * @param iVAIdContent
 * @param iVAIdStorage
 * @return
 */
public void determineSimilarities(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  this.iVAIdContent=iVAIdContent;
  this.iVAIdStorage=iVAIdStorage;
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  IDistanceMeasure distanceMeasure;
  if (eDistanceMeasure == EDistanceMeasure.EUCLIDEAN_DISTANCE)   distanceMeasure=new EuclideanDistance();
 else   distanceMeasure=new PearsonCorrelation();
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    int iNrElements=contentVA.size();
    pbSimilarity.setMinimum(0);
    pbSimilarity.setMaximum(iNrElements);
    float[] dArInstance1=new float[storageVA.size()];
    float[] dArInstance2=new float[storageVA.size()];
    int icnt1=0, icnt2=0, isto=0;
    int count=0;
    for (    Integer iContentIndex1 : contentVA) {
      pbSimilarity.setSelection(icnt1);
      shell.update();
      isto=0;
      for (      Integer iStorageIndex1 : storageVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iContentIndex2 : contentVA) {
        isto=0;
        for (        Integer iStorageIndex2 : storageVA) {
          dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
          isto++;
        }
        if (icnt1 != icnt2) {
          s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
          i[count]=icnt1;
          k[count]=icnt2;
          count++;
        }
        icnt2++;
      }
      icnt1++;
    }
    float median=ClusterHelper.median(s);
    int cnt=0;
    for (    Integer iContentIndex1 : contentVA) {
      s[count]=median * fClusterFactor;
      i[count]=cnt;
      k[count]=cnt;
      count++;
      cnt++;
    }
  }
 else {
    int iNrElements=storageVA.size();
    pbSimilarity.setMinimum(0);
    pbSimilarity.setMaximum(iNrElements);
    float[] dArInstance1=new float[contentVA.size()];
    float[] dArInstance2=new float[contentVA.size()];
    int isto1=0, isto2=0, icnt=0;
    int count=0;
    for (    Integer iStorageIndex1 : storageVA) {
      pbSimilarity.setSelection(isto1);
      shell.update();
      icnt=0;
      for (      Integer iContentIndex1 : contentVA) {
        dArInstance1[icnt]=set.get(iStorageIndex1).getFloat(EDataRepresentation.NORMALIZED,iContentIndex1);
        icnt++;
      }
      isto2=0;
      for (      Integer iStorageIndex2 : storageVA) {
        icnt=0;
        for (        Integer iContentIndex2 : contentVA) {
          dArInstance2[icnt]=set.get(iStorageIndex2).getFloat(EDataRepresentation.NORMALIZED,iContentIndex2);
          icnt++;
        }
        if (isto1 != isto2) {
          s[count]=-distanceMeasure.getMeasure(dArInstance1,dArInstance2);
          i[count]=isto1;
          k[count]=isto2;
          count++;
        }
        isto2++;
      }
      isto1++;
    }
    float median=ClusterHelper.median(s);
    int sto=0;
    for (    Integer iStorageIndex1 : storageVA) {
      s[count]=median * fClusterFactor;
      i[count]=sto;
      k[count]=sto;
      count++;
      sto++;
    }
  }
}",0.865389803075263
58773,"/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
public Integer affinityPropagation(ISet set,EClustererType eClustererType){
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  pbAffiProp.setMinimum(0);
  pbAffiProp.setMaximum(iMaxIterations);
  while (bIterate) {
    iNrIterations++;
    pbAffiProp.setSelection(iNrIterations);
    shell.update();
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    return -1;
  }
  if (bConverged == false) {
    return -1;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  int counter=0;
  int idxCnt=0;
  for (  Integer example : alExamples) {
    for (int sampleNr=0; sampleNr < iNrSamples; sampleNr++) {
      if (idx[sampleNr] == example) {
        if (bStart0 == true)         AlIndexes.add(sampleNr);
 else         AlIndexes.add(sampleNr + 1);
        count.set(counter,count.get(counter) + 1);
      }
      if (example == sampleNr) {
        idxExamples.add(idxCnt);
        idxCnt=0;
      }
      idxCnt++;
    }
    counter++;
  }
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  return clusteredVAId;
}","/** 
 * Java-implementation of the affinity propagation clustering algorithm. See BJ Frey and D Dueck, Science 315, 972-976, Feb 16, 2007, for a description of the algorithm. Copyright 2007, BJ Frey and Delbert Dueck. This software may be freely used and distributed for non-commercial purposes.
 * @param set
 * @return Integer
 */
public Integer affinityPropagation(ISet set,EClustererType eClustererType){
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  ArrayList<Integer> alExamples=new ArrayList<Integer>();
  ArrayList<Integer> count=new ArrayList<Integer>();
  int iNrIterations=0, decit=iConvIterations;
  boolean bIterate=true;
  boolean bConverged=false;
  float[] mx1=new float[iNrSamples];
  float[] mx2=new float[iNrSamples];
  float[] srp=new float[iNrSamples];
  float[] decsum=new float[iNrSamples];
  int[] idx=new int[iNrSamples];
  int[][] dec=new int[iConvIterations][iNrSamples];
  float tmp=0;
  int j=0;
  float[] dArResposibilities=new float[iNrSimilarities];
  float[] dArAvailabilities=new float[iNrSimilarities];
  pbAffiProp.setMinimum(0);
  pbAffiProp.setMaximum(iMaxIterations);
  while (bIterate) {
    iNrIterations++;
    pbAffiProp.setSelection(iNrIterations);
    shell.update();
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
      mx2[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx2[i[j]]=mx1[i[j]];
        mx1[i[j]]=tmp;
      }
 else       if (tmp > mx2[i[j]]) {
        mx2[i[j]]=tmp;
      }
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp == mx1[i[j]]) {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx2[i[j]]);
      }
 else {
        dArResposibilities[j]=dLambda * dArResposibilities[j] + (1 - dLambda) * (s[j] - mx1[i[j]]);
      }
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++)     if (dArResposibilities[j] > 0.0) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      srp[k[j]]=srp[k[j]] + dArResposibilities[j];
    }
    for (j=0; j < iNrSimilarities - iNrSamples; j++) {
      if (dArResposibilities[j] > 0.0) {
        tmp=srp[k[j]] - dArResposibilities[j];
      }
 else {
        tmp=srp[k[j]];
      }
      if (tmp < 0.0) {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * tmp;
      }
 else {
        dArAvailabilities[j]=dLambda * dArAvailabilities[j];
      }
    }
    for (j=iNrSimilarities - iNrSamples; j < iNrSimilarities; j++) {
      dArAvailabilities[j]=dLambda * dArAvailabilities[j] + (1 - dLambda) * (srp[k[j]] - dArResposibilities[j]);
    }
    decit++;
    if (decit >= iConvIterations) {
      decit=0;
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] - dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++)     if (dArAvailabilities[iNrSimilarities - iNrSamples + j] + dArResposibilities[iNrSimilarities - iNrSamples + j] > 0.0) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    iNrClusters=0;
    for (j=0; j < iNrSamples; j++) {
      iNrClusters=iNrClusters + dec[decit][j];
    }
    for (j=0; j < iNrSamples; j++) {
      decsum[j]=decsum[j] + dec[decit][j];
    }
    if ((iNrIterations >= iConvIterations) || (iNrIterations >= iMaxIterations)) {
      bConverged=true;
      for (j=0; j < iNrSamples; j++)       if ((decsum[j] != 0) && (decsum[j] != iConvIterations)) {
        bConverged=false;
      }
      if ((bConverged && (iNrClusters > 0)) || (iNrIterations == iMaxIterations)) {
        bIterate=false;
      }
    }
  }
  if (iNrClusters > 0) {
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
    }
    for (j=0; j < iNrSamples; j++) {
      srp[j]=0.0f;
    }
    for (j=0; j < iNrSimilarities; j++)     if (idx[i[j]] == idx[k[j]]) {
      srp[k[j]]=srp[k[j]] + s[j];
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] > mx1[idx[j]]) {
      mx1[idx[j]]=srp[j];
    }
    for (j=0; j < iNrSamples; j++)     if (srp[j] == mx1[idx[j]]) {
      dec[decit][j]=1;
    }
 else {
      dec[decit][j]=0;
    }
    for (j=0; j < iNrSimilarities; j++)     if (dec[decit][k[j]] == 1) {
      dArAvailabilities[j]=0.0f;
    }
 else {
      dArAvailabilities[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSamples; j++) {
      mx1[j]=-Float.MAX_VALUE;
    }
    for (j=0; j < iNrSimilarities; j++) {
      tmp=dArAvailabilities[j] + s[j];
      if (tmp > mx1[i[j]]) {
        mx1[i[j]]=tmp;
        idx[i[j]]=k[j];
      }
    }
    for (j=0; j < iNrSamples; j++)     if (dec[decit][j] == 1) {
      idx[j]=j;
      alExamples.add(j);
    }
  }
 else {
    return -1;
  }
  if (bConverged == false) {
    return -1;
  }
  ArrayList<Integer> idxExamples=new ArrayList<Integer>();
  for (int i=0; i < alExamples.size(); i++) {
    count.add(0);
  }
  ClusterHelper.sortClusters(set,iVAIdContent,iVAIdStorage,alExamples,eClustererType);
  int counter=0;
  int idxCnt=0;
  for (  Integer example : alExamples) {
    for (int sampleNr=0; sampleNr < iNrSamples; sampleNr++) {
      if (idx[sampleNr] == example) {
        AlIndexes.add(sampleNr);
        count.set(counter,count.get(counter) + 1);
      }
      if (example == sampleNr) {
        idxExamples.add(idxCnt);
        idxCnt=0;
      }
      idxCnt++;
    }
    counter++;
  }
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  set.setAlClusterSizes(count);
  set.setAlExamples(idxExamples);
  return clusteredVAId;
}",0.9941186080705768
58774,"/** 
 * Function responsible for initialization of hierarchy levels. Depending on the amount of samples in the data set 2 or 3 levels are used.
 */
private void initHierarchy(){
  if (set == null)   return;
  createDendrogram();
  iNumberOfElements=set.getVA(iContentVAID).size();
  if (iNumberOfElements < MIN_SAMPLES_PER_HEATMAP) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (iNumberOfElements < 100) {
    bSkipLevel1=true;
    iSelectorBar=1;
    iSamplesPerTexture=iNumberOfElements;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
 else {
    bSkipLevel1=false;
    iSelectorBar=1;
    iSamplesPerTexture=(int)Math.floor(iNumberOfElements / 5);
    if (iSamplesPerTexture > 250)     iSamplesPerTexture=250;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
  if (iSamplesPerHeatmap > MAX_SAMPLES_PER_HEATMAP)   iSamplesPerTexture=100;
  if (iSamplesPerHeatmap < MIN_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MIN_SAMPLES_PER_HEATMAP;
}","/** 
 * Function responsible for initialization of hierarchy levels. Depending on the amount of samples in the data set 2 or 3 levels are used.
 */
private void initHierarchy(){
  if (set == null)   return;
  createDendrogram();
  iNumberOfElements=set.getVA(iContentVAID).size();
  if (iNumberOfElements < MIN_SAMPLES_PER_HEATMAP) {
    System.out.println(""String_Node_Str"");
  }
  if (iNumberOfElements < 100) {
    bSkipLevel1=true;
    iSelectorBar=1;
    iSamplesPerTexture=iNumberOfElements;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
 else {
    bSkipLevel1=false;
    iSelectorBar=1;
    iSamplesPerTexture=(int)Math.floor(iNumberOfElements / 5);
    if (iSamplesPerTexture > 250)     iSamplesPerTexture=250;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
  if (iSamplesPerHeatmap > MAX_SAMPLES_PER_HEATMAP)   iSamplesPerTexture=100;
  if (iSamplesPerHeatmap < MIN_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MIN_SAMPLES_PER_HEATMAP;
}",0.9763462506290892
58775,"@Override protected void initLists(){
  if (bRenderOnlyContext) {
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
  }
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION)) {
      initCompleteList();
    }
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  if (set.isClusterInfo())   set.getVA(iContentVAID).setGroupList(set.getGroupList());
  if (bUseClusteredVA) {
    int iContentVAIDtemp=0, iStorageVAIDtemp=0;
    if (bRenderOnlyContext) {
      iContentVAIDtemp=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
    }
 else {
      if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION)) {
        initCompleteList();
      }
      iContentVAIDtemp=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
    }
    iStorageVAIDtemp=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
    if (clusterstate.getClustererType() == EClustererType.GENE_CLUSTERING) {
      int iVAid=set.cluster(iContentVAIDtemp,iStorageVAIDtemp,clusterstate);
      if (iVAid == -1)       iContentVAID=iContentVAIDtemp;
 else       iContentVAID=iVAid;
      iStorageVAID=iStorageVAIDtemp;
    }
 else     if (clusterstate.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
      int iVAid=set.cluster(iContentVAIDtemp,iStorageVAIDtemp,clusterstate);
      if (iVAid == -1)       iStorageVAID=iStorageVAIDtemp;
 else       iStorageVAID=iVAid;
      iContentVAID=iContentVAIDtemp;
    }
 else {
      clusterstate.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
      int iVAid=set.cluster(iContentVAIDtemp,iStorageVAIDtemp,clusterstate);
      if (iVAid == -1)       iStorageVAID=iStorageVAIDtemp;
 else       iStorageVAID=iVAid;
      clusterstate.setClustererType(EClustererType.GENE_CLUSTERING);
      iVAid=set.cluster(iContentVAIDtemp,iStorageVAID,clusterstate);
      if (iVAid == -1)       iContentVAID=iContentVAIDtemp;
 else       iContentVAID=iVAid;
    }
  }
  contentSelectionManager.resetSelectionManager();
  storageSelectionManager.resetSelectionManager();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  storageSelectionManager.setVA(set.getVA(iStorageVAID));
  int iNumberOfColumns=set.getVA(iContentVAID).size();
  int iNumberOfRows=set.getVA(iStorageVAID).size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(set.getVA(iStorageVAID).get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(set.getVA(iContentVAID).get(iColumnCount));
  }
}","@Override protected void initLists(){
  if (bRenderOnlyContext) {
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
  }
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION)) {
      initCompleteList();
    }
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  if (set.isClusterInfo())   set.getVA(iContentVAID).setGroupList(set.getGroupList());
  if (bUseClusteredVA) {
    int iContentVAIDtemp=0, iStorageVAIDtemp=0;
    if (bRenderOnlyContext) {
      iContentVAIDtemp=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
    }
 else {
      if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION)) {
        initCompleteList();
      }
      iContentVAIDtemp=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
    }
    iStorageVAIDtemp=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
    if (clusterstate.getClustererType() == EClustererType.GENE_CLUSTERING) {
      int iVAid=set.cluster(iContentVAIDtemp,iStorageVAIDtemp,clusterstate);
      if (iVAid == -1)       iContentVAID=iContentVAIDtemp;
 else       iContentVAID=iVAid;
      iStorageVAID=iStorageVAIDtemp;
    }
 else     if (clusterstate.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) {
      int iVAid=set.cluster(iContentVAIDtemp,iStorageVAIDtemp,clusterstate);
      if (iVAid == -1)       iStorageVAID=iStorageVAIDtemp;
 else       iStorageVAID=iVAid;
      iContentVAID=iContentVAIDtemp;
    }
 else {
      clusterstate.setClustererType(EClustererType.EXPERIMENTS_CLUSTERING);
      int iVAid=set.cluster(iContentVAIDtemp,iStorageVAIDtemp,clusterstate);
      if (iVAid == -1)       iStorageVAID=iStorageVAIDtemp;
 else       iStorageVAID=iVAid;
      clusterstate.setClustererType(EClustererType.GENE_CLUSTERING);
      iVAid=set.cluster(iContentVAIDtemp,iStorageVAID,clusterstate);
      if (iVAid == -1)       iContentVAID=iContentVAIDtemp;
 else       iContentVAID=iVAid;
    }
    AlSelection.clear();
  }
  contentSelectionManager.resetSelectionManager();
  storageSelectionManager.resetSelectionManager();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  storageSelectionManager.setVA(set.getVA(iStorageVAID));
  int iNumberOfColumns=set.getVA(iContentVAID).size();
  int iNumberOfRows=set.getVA(iStorageVAID).size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(set.getVA(iStorageVAID).get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(set.getVA(iContentVAID).get(iColumnCount));
  }
}",0.9953419042295508
58776,"@Override public void doCommand(){
  generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sFileName + ""String_Node_Str""+ sTokenPattern+ ""String_Node_Str""+ iAlStorageIDs.toString()));
  TabularAsciiDataReader loader=new TabularAsciiDataReader(sFileName);
  loader.setTokenPattern(sTokenPattern);
  loader.setTargetStorages(iAlStorageIDs);
  loader.setStartParsingStopParsingAtLine(iStartParseFileAtLine,iStopParseFileAtLine);
  if (!sTokenSeparator.isEmpty()) {
    loader.setTokenSeperator(sTokenSeparator);
  }
  loader.loadData();
  generalManager.getGUIBridge().setFileNameCurrentDataSet(sFileName);
  if (sGenesTreeFileName != null) {
    if (sGenesTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sGenesTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree=treePorter.importTree(sGenesTreeFileName);
      ISet set=generalManager.getUseCase().getSet();
      set.setClusteredTreeGenes(tree);
    }
  }
  if (sExperimentsTreeFileName != null) {
    if (sExperimentsTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sExperimentsTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree=treePorter.importTree(sExperimentsTreeFileName);
      ISet set=generalManager.getUseCase().getSet();
      set.setClusteredTreeExps(tree);
    }
  }
  commandManager.runDoCommand(this);
}","@Override public void doCommand(){
  generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sFileName + ""String_Node_Str""+ sTokenPattern+ ""String_Node_Str""+ iAlStorageIDs.toString()));
  TabularAsciiDataReader loader=new TabularAsciiDataReader(sFileName);
  loader.setTokenPattern(sTokenPattern);
  loader.setTargetStorages(iAlStorageIDs);
  loader.setStartParsingStopParsingAtLine(iStartParseFileAtLine,iStopParseFileAtLine);
  if (!sTokenSeparator.isEmpty()) {
    loader.setTokenSeperator(sTokenSeparator);
  }
  bParsingOK=loader.loadData();
  generalManager.getGUIBridge().setFileNameCurrentDataSet(sFileName);
  if (sGenesTreeFileName != null) {
    if (sGenesTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sGenesTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree=treePorter.importTree(sGenesTreeFileName);
      ISet set=generalManager.getUseCase().getSet();
      set.setClusteredTreeGenes(tree);
    }
  }
  if (sExperimentsTreeFileName != null) {
    if (sExperimentsTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sExperimentsTreeFileName));
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree=treePorter.importTree(sExperimentsTreeFileName);
      ISet set=generalManager.getUseCase().getSet();
      set.setClusteredTreeExps(tree);
    }
  }
  commandManager.runDoCommand(this);
}",0.9965870307167236
58777,"public boolean loadData(){
  BufferedReader brFile=GeneralManager.get().getResourceLoader().getResource(sFileName);
  GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sFileName + ""String_Node_Str""));
  try {
    this.loadDataParseFile(brFile,computeNumberOfLinesInFile(sFileName));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (brFile != null) {
    try {
      brFile.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  GeneralManager.get().getLogger().log(new Status(Status.WARNING,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sFileName + ""String_Node_Str""));
  setArraysToStorages();
  return true;
}","public boolean loadData(){
  BufferedReader brFile=GeneralManager.get().getResourceLoader().getResource(sFileName);
  GeneralManager.get().getLogger().log(new Status(Status.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sFileName + ""String_Node_Str""));
  try {
    this.loadDataParseFile(brFile,computeNumberOfLinesInFile(sFileName));
    if (brFile != null) {
      brFile.close();
    }
  }
 catch (  IOException ioe) {
    return false;
  }
catch (  NumberFormatException nfe) {
    return false;
  }
  GeneralManager.get().getLogger().log(new Status(Status.WARNING,GeneralManager.PLUGIN_ID,""String_Node_Str"" + sFileName + ""String_Node_Str""));
  setArraysToStorages();
  return true;
}",0.8508208422555318
58778,"@Override protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + this.getFileName());
  String sLine;
  int iColumnIndex=0;
  float fProgressBarFactor=100f / iStopParsingAtLine;
  while ((sLine=brFile.readLine()) != null && iLineInFile <= iStopParsingAtLine) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    for (    EStorageType columnDataType : alColumnDataTypes) {
      if (strTokenLine.hasMoreTokens()) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
        iColumnIndex++;
      break;
case FLOAT:
    Float fValue;
  try {
    fValue=Float.valueOf(strTokenLine.nextToken()).floatValue();
  }
 catch (  NumberFormatException nfe) {
    fValue=Float.NaN;
  }
alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
strTokenLine.nextToken();
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
case GROUP_NUMBER:
alGroupInfo.get(0)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
case GROUP_REPRESENTATIVE:
alGroupInfo.get(1)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDataType.toString());
}
if (iColumnIndex == alColumnDataTypes.size()) {
continue;
}
}
}
iLineInFile++;
if (iLineInFile % 1000 == 0) {
swtGuiManager.setProgressBarPercentage((int)(fProgressBarFactor * iLineInFile));
}
}
}","@Override protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + this.getFileName());
  String sLine;
  String sTmpToken;
  int iColumnIndex=0;
  float fProgressBarFactor=100f / iStopParsingAtLine;
  while ((sLine=brFile.readLine()) != null && iLineInFile <= iStopParsingAtLine) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    for (    EStorageType columnDataType : alColumnDataTypes) {
      if (strTokenLine.hasMoreTokens()) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
        iColumnIndex++;
      break;
case FLOAT:
    Float fValue;
  sTmpToken=strTokenLine.nextToken();
try {
  fValue=Float.valueOf(sTmpToken).floatValue();
}
 catch (NumberFormatException nfe) {
  String sErrorMessage=""String_Node_Str"" + sTmpToken + ""String_Node_Str"";
  MessageDialog.openError(new Shell(),""String_Node_Str"",sErrorMessage);
  GeneralManager.get().getLogger().log(new Status(Status.ERROR,GeneralManager.PLUGIN_ID,sErrorMessage));
  throw nfe;
}
alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
strTokenLine.nextToken();
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
case GROUP_NUMBER:
alGroupInfo.get(0)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
case GROUP_REPRESENTATIVE:
alGroupInfo.get(1)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDataType.toString());
}
if (iColumnIndex == alColumnDataTypes.size()) {
continue;
}
}
}
iLineInFile++;
if (iLineInFile % 1000 == 0) {
swtGuiManager.setProgressBarPercentage((int)(fProgressBarFactor * iLineInFile));
}
}
}",0.9115320067130184
58779,"private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=""String_Node_Str"" + ""String_Node_Str"";
  for (int iColIndex=2; iColIndex < previewTable.getColumnCount(); iColIndex++) {
    if (!arSkipColumn.get(iColIndex - 2).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
 else {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
    }
    CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
    cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
    cmdCreateStorage.doCommand();
    INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
    String labelText=previewTable.getColumn(iColIndex).getText();
    storage.setLabel(labelText);
    iAlStorageId.add(storage.getID());
    if (!sStorageIDs.equals(""String_Node_Str"")) {
      sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
    }
    sStorageIDs=sStorageIDs + storage.getID();
  }
  if (bUseClusterInfo) {
    sInputPattern+=""String_Node_Str"";
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  IUseCase useCase=GeneralManager.get().getUseCase();
  if (useCase.getUseCaseMode() == EUseCaseMode.GENETIC_DATA) {
    cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  }
 else   if (useCase.getUseCaseMode() == EUseCaseMode.UNSPECIFIED_DATA) {
    cmdCreateSet.setAttributes(iAlStorageId,ESetType.UNSPECIFIED);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  cmdCreateSet.doCommand();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sGeneTreeFileName,sExperimentsFileName,sInputPattern,sDelimiter,iStartParseFileAtLine,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  if (useCase.getUseCaseMode() == EUseCaseMode.GENETIC_DATA) {
    cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  }
 else   if (useCase.getUseCaseMode() == EUseCaseMode.UNSPECIFIED_DATA) {
    cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  cmdLoadLookupTableFile.doCommand();
  ISet set=useCase.getSet();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sMathFilterMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sMathFilterMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sMathFilterMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  useCase.updateSetInViews();
}","private boolean createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=""String_Node_Str"" + ""String_Node_Str"";
  for (int iColIndex=2; iColIndex < previewTable.getColumnCount(); iColIndex++) {
    if (!arSkipColumn.get(iColIndex - 2).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
 else {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
    }
    CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
    cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
    cmdCreateStorage.doCommand();
    INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
    String labelText=previewTable.getColumn(iColIndex).getText();
    storage.setLabel(labelText);
    iAlStorageId.add(storage.getID());
    if (!sStorageIDs.equals(""String_Node_Str"")) {
      sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
    }
    sStorageIDs=sStorageIDs + storage.getID();
  }
  if (bUseClusterInfo) {
    sInputPattern+=""String_Node_Str"";
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  IUseCase useCase=GeneralManager.get().getUseCase();
  if (useCase.getUseCaseMode() == EUseCaseMode.GENETIC_DATA) {
    cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  }
 else   if (useCase.getUseCaseMode() == EUseCaseMode.UNSPECIFIED_DATA) {
    cmdCreateSet.setAttributes(iAlStorageId,ESetType.UNSPECIFIED);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  cmdCreateSet.doCommand();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sGeneTreeFileName,sExperimentsFileName,sInputPattern,sDelimiter,iStartParseFileAtLine,-1);
  cmdLoadCsv.doCommand();
  if (!cmdLoadCsv.isParsingOK()) {
    return false;
  }
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  if (useCase.getUseCaseMode() == EUseCaseMode.GENETIC_DATA) {
    cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  }
 else   if (useCase.getUseCaseMode() == EUseCaseMode.UNSPECIFIED_DATA) {
    cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  cmdLoadLookupTableFile.doCommand();
  ISet set=useCase.getSet();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sMathFilterMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sMathFilterMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sMathFilterMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  useCase.updateSetInViews();
  return true;
}",0.9885941304626426
58780,"public void execute(){
  createData();
}","public boolean execute(){
  return createData();
}",0.8222222222222222
58781,"@Override protected void okPressed(){
  fileLoadDataAction.execute();
  super.okPressed();
}","@Override protected void okPressed(){
  if (fileLoadDataAction.execute())   super.okPressed();
}",0.9574468085106383
58782,"@Override public boolean performFinish(){
  if (((NewProjectImportDataPage)getPage(NewProjectImportDataPage.PAGE_NAME)).isPageComplete()) {
    ((NewProjectImportDataPage)getPage(NewProjectImportDataPage.PAGE_NAME)).getFileLoadDataAction().execute();
    Application.applicationMode=EApplicationMode.STANDARD;
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  if (((NewProjectImportDataPage)getPage(NewProjectImportDataPage.PAGE_NAME)).isPageComplete()) {
    if (!((NewProjectImportDataPage)getPage(NewProjectImportDataPage.PAGE_NAME)).getFileLoadDataAction().execute()) {
      return false;
    }
    Application.applicationMode=EApplicationMode.STANDARD;
    return true;
  }
  return false;
}",0.9547325102880658
58783,"public Integer cluster(Integer iVAIdContent,Integer iVAIdStorage,ClusterState clusterState){
  Integer VAId=0;
  if (bIsNumerical == true && bIsSetHomogeneous == true) {
    IClusterer clusterer;
    Shell shell=new Shell();
    MessageBox messageBox=new MessageBox(shell,SWT.OK | SWT.CANCEL);
    messageBox.setText(""String_Node_Str"");
    messageBox.setMessage(""String_Node_Str"");
    int iNrElem=0;
    if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)     iNrElem=getVA(iVAIdContent).size();
 else     iNrElem=getVA(iVAIdStorage).size();
    if (iNrElem > 1000) {
      if (messageBox.open() == SWT.CANCEL)       return -1;
      shell.close();
    }
switch (clusterState.getClustererAlgo()) {
case TREE_CLUSTERER:
      if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)       clusterer=new TreeClusterer(getVA(iVAIdContent).size());
 else       if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING)       clusterer=new TreeClusterer(getVA(iVAIdStorage).size());
 else       if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
        System.out.println(""String_Node_Str"");
        clusterer=new TreeClusterer(getVA(iVAIdContent).size());
      }
 else       return -1;
    VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
  break;
case COBWEB_CLUSTERER:
clusterer=new HierarchicalClusterer(0);
VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
break;
case AFFINITY_PROPAGATION:
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) clusterer=new AffinityClusterer(getVA(iVAIdContent).size());
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) clusterer=new AffinityClusterer(getVA(iVAIdStorage).size());
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
System.out.println(""String_Node_Str"");
clusterer=new AffinityClusterer(getVA(iVAIdContent).size());
}
 else return -1;
VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
break;
case KMEANS_CLUSTERER:
clusterer=new KMeansClusterer(0);
VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
break;
}
if (VAId == -1) {
messageBox=new MessageBox(new Shell(),SWT.OK);
messageBox.setText(""String_Node_Str"");
messageBox.setMessage(""String_Node_Str"");
messageBox.open();
return -1;
}
IVirtualArray virtualArray=getVA(VAId);
if (clusterState.getClustererAlgo() == EClustererAlgo.AFFINITY_PROPAGATION || clusterState.getClustererAlgo() == EClustererAlgo.KMEANS_CLUSTERER) {
IGroupList groupList=new GroupList(virtualArray.size());
ArrayList<Integer> examples=getAlExamples();
int cnt=0;
for (Integer iter : getAlClusterSizes()) {
Group temp=new Group(iter,false,examples.get(cnt),ESelectionType.NORMAL);
groupList.append(temp);
cnt++;
}
virtualArray.setGroupList(groupList);
}
hashSetVAs.put(virtualArray.getID(),virtualArray);
return VAId;
}
 else {
System.out.println(""String_Node_Str"");
return -1;
}
}","public Integer cluster(Integer iVAIdContent,Integer iVAIdStorage,ClusterState clusterState){
  Integer VAId=0;
  if (bIsNumerical == true && bIsSetHomogeneous == true) {
    IClusterer clusterer;
switch (clusterState.getClustererAlgo()) {
case TREE_CLUSTERER:
      if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)       clusterer=new TreeClusterer(getVA(iVAIdContent).size());
 else       if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING)       clusterer=new TreeClusterer(getVA(iVAIdStorage).size());
 else       if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
        System.out.println(""String_Node_Str"");
        clusterer=new TreeClusterer(getVA(iVAIdContent).size());
      }
 else       return -1;
    VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
  break;
case COBWEB_CLUSTERER:
clusterer=new HierarchicalClusterer(0);
VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
break;
case AFFINITY_PROPAGATION:
if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING) clusterer=new AffinityClusterer(getVA(iVAIdContent).size());
 else if (clusterState.getClustererType() == EClustererType.EXPERIMENTS_CLUSTERING) clusterer=new AffinityClusterer(getVA(iVAIdStorage).size());
 else if (clusterState.getClustererType() == EClustererType.BI_CLUSTERING) {
System.out.println(""String_Node_Str"");
clusterer=new AffinityClusterer(getVA(iVAIdContent).size());
}
 else return -1;
VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
break;
case KMEANS_CLUSTERER:
clusterer=new KMeansClusterer(0);
VAId=clusterer.getSortedVAId(this,iVAIdContent,iVAIdStorage,clusterState);
break;
}
if (VAId == -1) {
return -1;
}
IVirtualArray virtualArray=getVA(VAId);
if (clusterState.getClustererAlgo() == EClustererAlgo.AFFINITY_PROPAGATION || clusterState.getClustererAlgo() == EClustererAlgo.KMEANS_CLUSTERER) {
IGroupList groupList=new GroupList(virtualArray.size());
ArrayList<Integer> examples=getAlExamples();
int cnt=0;
for (Integer iter : getAlClusterSizes()) {
Group temp=new Group(iter,false,examples.get(cnt),ESelectionType.NORMAL);
groupList.append(temp);
cnt++;
}
virtualArray.setGroupList(groupList);
}
hashSetVAs.put(virtualArray.getID(),virtualArray);
return VAId;
}
 else {
System.out.println(""String_Node_Str"");
return -1;
}
}",0.8837812789620019
58784,"@Override public void triggerEvent(AEvent event){
  if (!event.checkIntegrity()) {
    throw new IllegalStateException(""String_Node_Str"" + event + ""String_Node_Str"");
  }
  Collection<AEventListener<?>> listeners=listenerMap.get(event.getClass());
  if (listeners != null) {
    for (    AEventListener<?> receiver : listeners) {
      receiver.queueEvent(event);
    }
  }
}","@Override public synchronized void triggerEvent(AEvent event){
  if (!event.checkIntegrity()) {
    throw new IllegalStateException(""String_Node_Str"" + event + ""String_Node_Str"");
  }
  Collection<AEventListener<?>> listeners=listenerMap.get(event.getClass());
  if (listeners != null) {
    for (    AEventListener<?> receiver : listeners) {
      receiver.queueEvent(event);
    }
  }
}",0.982961992136304
58785,"@Override public void removeListener(AEventListener<?> listener){
  for (  Collection<AEventListener<?>> listeners : listenerMap.values()) {
    listeners.remove(listener);
  }
}","@Override public synchronized void removeListener(AEventListener<?> listener){
  for (  Collection<AEventListener<?>> listeners : listenerMap.values()) {
    listeners.remove(listener);
  }
}",0.964769647696477
58786,"@Override public void addListener(Class<? extends AEvent> eventClass,AEventListener<?> listener){
  listener.checkIntegrity();
  Collection<AEventListener<?>> listeners=listenerMap.get(eventClass);
  if (listeners == null) {
    listeners=new ArrayList<AEventListener<?>>();
    listenerMap.put(eventClass,listeners);
  }
  listeners.add(listener);
}","@Override public synchronized void addListener(Class<? extends AEvent> eventClass,AEventListener<?> listener){
  listener.checkIntegrity();
  Collection<AEventListener<?>> listeners=listenerMap.get(eventClass);
  if (listeners == null) {
    listeners=new ArrayList<AEventListener<?>>();
    listenerMap.put(eventClass,listeners);
  }
  listeners.add(listener);
}",0.9817671809256662
58787,"@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   fClusterFactor=clusterState.getAffinityPropClusterFactorGenes();
 else   fClusterFactor=clusterState.getAffinityPropClusterFactorExperiments();
  eDistanceMeasure=clusterState.getDistanceMeasure();
  buildProgressBar();
  determineSimilarities(set,idContent,idStorage,clusterState.getClustererType());
  VAId=affinityPropagation(set,clusterState.getClustererType());
  shell.close();
  return VAId;
}","@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  if (clusterState.getClustererType() == EClustererType.GENE_CLUSTERING)   fClusterFactor=clusterState.getAffinityPropClusterFactorGenes();
 else   fClusterFactor=clusterState.getAffinityPropClusterFactorExperiments();
  eDistanceMeasure=clusterState.getDistanceMeasure();
  determineSimilarities(set,idContent,idStorage,clusterState.getClustererType());
  VAId=affinityPropagation(set,clusterState.getClustererType());
  shell.close();
  return VAId;
}",0.9814814814814816
58788,"@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  buildProgressBar();
  VAId=cluster(set,idContent,idStorage,clusterState.getClustererType());
  shell.close();
  return VAId;
}","@Override public Integer getSortedVAId(ISet set,Integer idContent,Integer idStorage,ClusterState clusterState){
  Integer VAId=0;
  VAId=cluster(set,idContent,idStorage,clusterState.getClustererType());
  shell.close();
  return VAId;
}",0.9554655870445344
58789,"/** 
 * Constructor.
 */
public AView(final int iParentContainerId,final String sLabel,final int iViewID){
  super(iViewID);
  generalManager=GeneralManager.get();
  eventPublisher=generalManager.getEventPublisher();
  this.iParentContainerId=iParentContainerId;
  this.sLabel=sLabel;
}","/** 
 * Constructor.
 */
public AView(final int iParentContainerId,final String sLabel,final int iViewID){
  super(iViewID);
  generalManager=GeneralManager.get();
  eventPublisher=generalManager.getEventPublisher();
  this.iParentContainerId=iParentContainerId;
  this.sLabel=sLabel;
  registerEventListeners();
}",0.9533333333333334
58790,"/** 
 * Registers the listeners for this view to the event system. To release the allocated resources unregisterEventListeners() has to be called. This method is intended to be overridden, but it's super() should be called to be registered to the listeners defined by other classes in the hierarchy.
 */
public void registerEventListeners(){
  newSetListener=new NewSetListener();
  newSetListener.setHandler(this);
  eventPublisher.addListener(NewSetEvent.class,newSetListener);
}","/** 
 * <p> Registers the listeners for this view to the event system. To release the allocated resources unregisterEventListeners() has to be called. This method is intended to be overridden, but it's super() should be called to be registered to the listeners defined by other classes in the hierarchy. </p> <p> This method is called by the Constructor of   {@link AView}, therefore there is no need to call it yourself. </p>
 */
public void registerEventListeners(){
  newSetListener=new NewSetListener();
  newSetListener.setHandler(this);
  eventPublisher.addListener(NewSetEvent.class,newSetListener);
}",0.8833792470156107
58791,"/** 
 * Registers the listeners for this view to the event system. To release the allocated resources unregisterEventListeners() has to be called. If inherited classes override this method, they should usually call it via super.
 */
@Override public void registerEventListeners(){
  super.registerEventListeners();
  IEventPublisher eventPublisher=generalManager.getEventPublisher();
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  triggerSelectionCommandListener=new TriggerSelectionCommandListener();
  triggerSelectionCommandListener.setHandler(this);
  eventPublisher.addListener(TriggerSelectionCommandEvent.class,triggerSelectionCommandListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  IEventPublisher eventPublisher=generalManager.getEventPublisher();
  selectionUpdateListener=new SelectionUpdateListener();
  selectionUpdateListener.setHandler(this);
  eventPublisher.addListener(SelectionUpdateEvent.class,selectionUpdateListener);
  triggerSelectionCommandListener=new TriggerSelectionCommandListener();
  triggerSelectionCommandListener.setHandler(this);
  eventPublisher.addListener(TriggerSelectionCommandEvent.class,triggerSelectionCommandListener);
}",0.8272794662713121
58792,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHistogram(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HISTOGRAM;
  colorMapping=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  renderStyle=new HistogramRenderStyle(this,viewFrustum);
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.PLAIN,18),true,true);
  registerEventListeners();
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHistogram(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_HISTOGRAM;
  colorMapping=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  renderStyle=new HistogramRenderStyle(this,viewFrustum);
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.PLAIN,18),true,true);
}",0.9730250481695568
58793,"/** 
 * Creates and initializes a new view based on its serialized form. The view is already added to the list of event receivers and senders.
 * @param gl
 * @param serView serialized form of the view to create
 * @return the created view ready to be used within the application
 */
private AGLEventListener createView(GL gl,ASerializedView serView){
  ICommandManager cm=generalManager.getCommandManager();
  ECommandType cmdType=serView.getCreationCommandType();
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)cm.createCommandByType(cmdType);
  cmdView.setAttributesFromSerializedForm(serView);
  cmdView.setSet(set);
  cmdView.doCommand();
  AGLEventListener glView=cmdView.getCreatedObject();
  glView.registerEventListeners();
  useCase.addView(glView);
  glView.setUseCase(useCase);
  glView.setRenderedRemote(true);
  glView.initData();
  if (glView instanceof GLPathway) {
    initializePathwayView((GLPathway)glView);
  }
  triggerMostRecentDelta();
  return glView;
}","/** 
 * Creates and initializes a new view based on its serialized form. The view is already added to the list of event receivers and senders.
 * @param gl
 * @param serView serialized form of the view to create
 * @return the created view ready to be used within the application
 */
private AGLEventListener createView(GL gl,ASerializedView serView){
  ICommandManager cm=generalManager.getCommandManager();
  ECommandType cmdType=serView.getCreationCommandType();
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)cm.createCommandByType(cmdType);
  cmdView.setAttributesFromSerializedForm(serView);
  cmdView.setSet(set);
  cmdView.doCommand();
  AGLEventListener glView=cmdView.getCreatedObject();
  useCase.addView(glView);
  glView.setUseCase(useCase);
  glView.setRenderedRemote(true);
  glView.initData();
  if (glView instanceof GLPathway) {
    initializePathwayView((GLPathway)glView);
  }
  triggerMostRecentDelta();
  return glView;
}",0.9820420728578758
58794,"/** 
 * Constructor.
 */
public GLRemoteRendering(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum,final ARemoteViewLayoutRenderStyle.LayoutMode layoutMode){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_REMOTE_RENDERING;
  this.layoutMode=layoutMode;
  if (generalManager.isWiiModeActive()) {
    glOffScreenRenderer=new GLOffScreenTextureRenderer();
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    layoutRenderStyle=new BucketLayoutRenderStyle(viewFrustum);
    super.renderStyle=layoutRenderStyle;
    bucketMouseWheelListener=new BucketMouseWheelListener(this,(BucketLayoutRenderStyle)layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(glMouseListener);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    layoutRenderStyle=new JukeboxLayoutRenderStyle(viewFrustum);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.LIST)) {
    layoutRenderStyle=new ListLayoutRenderStyle(viewFrustum);
  }
  focusLevel=layoutRenderStyle.initFocusLevel(bucketMouseWheelListener.isZoomedIn());
  if (GeneralManager.get().isWiiModeActive() && layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    stackLevel=((BucketLayoutRenderStyle)layoutRenderStyle).initStackLevelWii();
  }
 else {
    stackLevel=layoutRenderStyle.initStackLevel(bucketMouseWheelListener.isZoomedIn());
  }
  poolLevel=layoutRenderStyle.initPoolLevel(bucketMouseWheelListener.isZoomedIn(),-1);
  externalSelectionLevel=layoutRenderStyle.initMemoLevel();
  transitionLevel=layoutRenderStyle.initTransitionLevel();
  spawnLevel=layoutRenderStyle.initSpawnLevel();
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    glConnectionLineRenderer=new GLConnectionLineRendererBucket(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    glConnectionLineRenderer=new GLConnectionLineRendererJukebox(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.LIST)) {
    glConnectionLineRenderer=null;
  }
  glMouseListener.addGLCanvas(this);
  arSlerpActions=new ArrayList<SlerpAction>();
  newViews=new ArrayList<ASerializedView>();
  dragAndDrop=new GLDragAndDrop();
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),false);
  registerEventListeners();
  iPoolLevelCommonID=generalManager.getIDManager().createID(EManagedObjectType.REMOTE_LEVEL_ELEMENT);
}","/** 
 * Constructor.
 */
public GLRemoteRendering(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum,final ARemoteViewLayoutRenderStyle.LayoutMode layoutMode){
  super(glCanvas,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_REMOTE_RENDERING;
  this.layoutMode=layoutMode;
  if (generalManager.isWiiModeActive()) {
    glOffScreenRenderer=new GLOffScreenTextureRenderer();
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    layoutRenderStyle=new BucketLayoutRenderStyle(viewFrustum);
    super.renderStyle=layoutRenderStyle;
    bucketMouseWheelListener=new BucketMouseWheelListener(this,(BucketLayoutRenderStyle)layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(glMouseListener);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    layoutRenderStyle=new JukeboxLayoutRenderStyle(viewFrustum);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.LIST)) {
    layoutRenderStyle=new ListLayoutRenderStyle(viewFrustum);
  }
  focusLevel=layoutRenderStyle.initFocusLevel(bucketMouseWheelListener.isZoomedIn());
  if (GeneralManager.get().isWiiModeActive() && layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    stackLevel=((BucketLayoutRenderStyle)layoutRenderStyle).initStackLevelWii();
  }
 else {
    stackLevel=layoutRenderStyle.initStackLevel(bucketMouseWheelListener.isZoomedIn());
  }
  poolLevel=layoutRenderStyle.initPoolLevel(bucketMouseWheelListener.isZoomedIn(),-1);
  externalSelectionLevel=layoutRenderStyle.initMemoLevel();
  transitionLevel=layoutRenderStyle.initTransitionLevel();
  spawnLevel=layoutRenderStyle.initSpawnLevel();
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    glConnectionLineRenderer=new GLConnectionLineRendererBucket(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    glConnectionLineRenderer=new GLConnectionLineRendererJukebox(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.LIST)) {
    glConnectionLineRenderer=null;
  }
  glMouseListener.addGLCanvas(this);
  arSlerpActions=new ArrayList<SlerpAction>();
  newViews=new ArrayList<ASerializedView>();
  dragAndDrop=new GLDragAndDrop();
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.PLAIN,24),false);
  iPoolLevelCommonID=generalManager.getIDManager().createID(EManagedObjectType.REMOTE_LEVEL_ELEMENT);
}",0.9946503630110812
58795,"/** 
 * Constructor.
 */
public HTMLBrowserViewRep(final int iParentContainerId,final String sLabel,int iViewID){
  super(iParentContainerId,sLabel,iViewID);
  init();
  registerEventListeners();
}","/** 
 * Constructor.
 */
public HTMLBrowserViewRep(final int iParentContainerId,final String sLabel,int iViewID){
  super(iParentContainerId,sLabel,iViewID);
  init();
}",0.9234972677595628
58796,"@Override public void createPartControl(Composite parent){
  browserView=(HTMLBrowserViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_BROWSER_GENOME,-1,""String_Node_Str"");
  browserView.registerEventListeners();
  browserView.initViewRCP(parent);
  browserView.drawView();
  iViewID=browserView.getID();
}","@Override public void createPartControl(Composite parent){
  browserView=(HTMLBrowserViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_BROWSER_GENOME,-1,""String_Node_Str"");
  browserView.initViewRCP(parent);
  browserView.drawView();
  iViewID=browserView.getID();
}",0.939209726443769
58797,"@Override public void createPartControl(Composite parent){
  tabularDataView=(TabularDataViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER,-1,""String_Node_Str"");
  tabularDataView.registerEventListeners();
  IUseCase useCase=GeneralManager.get().getUseCase();
  tabularDataView.setSet(useCase.getSet());
  tabularDataView.initViewRCP(parent);
  tabularDataView.drawView();
  useCase.addView(tabularDataView);
  parentComposite=parent;
  GeneralManager.get().getViewGLCanvasManager().registerItem(tabularDataView);
  iViewID=tabularDataView.getID();
}","@Override public void createPartControl(Composite parent){
  tabularDataView=(TabularDataViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER,-1,""String_Node_Str"");
  IUseCase useCase=GeneralManager.get().getUseCase();
  tabularDataView.setSet(useCase.getSet());
  tabularDataView.initViewRCP(parent);
  tabularDataView.drawView();
  useCase.addView(tabularDataView);
  parentComposite=parent;
  GeneralManager.get().getViewGLCanvasManager().registerItem(tabularDataView);
  iViewID=tabularDataView.getID();
}",0.9627749576988156
58798,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case HEAT_MAP_LINE_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case DOUBLE_CLICKED:
    LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
  loadPathwaysByGeneEvent.setSender(this);
loadPathwaysByGeneEvent.setGeneID(iExternalID);
loadPathwaysByGeneEvent.setIdType(EIDType.EXPRESSION_INDEX);
eventPublisher.triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setStorageIndex(iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
default :
return;
}
createContentSelection(eSelectionType,iExternalID);
break;
case HEAT_MAP_STORAGE_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
if (storageSelectionManager.checkStatus(ESelectionType.SELECTION,iExternalID)) {
storageSelectionManager.clearSelection(eSelectionType);
setDisplayListDirty();
return;
}
createStorageSelection(eSelectionType,iExternalID);
break;
default :
return;
}
break;
case LIST_HEAT_MAP_CLEAR_ALL:
switch (pickingMode) {
case CLICKED:
contentSelectionManager.resetSelectionManager();
setDisplayListDirty();
SelectionCommand command=new SelectionCommand(ESelectionCommandType.RESET);
ArrayList<SelectionCommand> commands=new ArrayList<SelectionCommand>();
commands.add(command);
TriggerPropagationCommandEvent event=new TriggerPropagationCommandEvent();
event.setType(EIDType.EXPRESSION_INDEX);
event.setSelectionCommands(commands);
event.setSender(this);
eventPublisher.triggerEvent(event);
break;
}
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case HEAT_MAP_LINE_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case DOUBLE_CLICKED:
    LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
  loadPathwaysByGeneEvent.setSender(this);
loadPathwaysByGeneEvent.setGeneID(iExternalID);
loadPathwaysByGeneEvent.setIdType(EIDType.EXPRESSION_INDEX);
eventPublisher.triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setStorageIndex(iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
default :
return;
}
createContentSelection(eSelectionType,iExternalID);
break;
case HEAT_MAP_STORAGE_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
if (storageSelectionManager.checkStatus(ESelectionType.SELECTION,iExternalID)) {
storageSelectionManager.clearSelection(eSelectionType);
setDisplayListDirty();
return;
}
break;
default :
return;
}
createStorageSelection(eSelectionType,iExternalID);
break;
case LIST_HEAT_MAP_CLEAR_ALL:
switch (pickingMode) {
case CLICKED:
contentSelectionManager.resetSelectionManager();
setDisplayListDirty();
SelectionCommand command=new SelectionCommand(ESelectionCommandType.RESET);
ArrayList<SelectionCommand> commands=new ArrayList<SelectionCommand>();
commands.add(command);
TriggerPropagationCommandEvent event=new TriggerPropagationCommandEvent();
event.setType(EIDType.EXPRESSION_INDEX);
event.setSelectionCommands(commands);
event.setSender(this);
eventPublisher.triggerEvent(event);
break;
}
break;
}
}",0.9881161971830986
58799,"private void renderHeatMap(final GL gl){
  fAlXDistances.clear();
  renderStyle.updateFieldSizes();
  float fXPosition=0;
  float fYPosition=0;
  float fFieldWidth=0;
  float fFieldHeight=0;
  int iCount=0;
  ESelectionType currentType;
  for (  Integer iContentIndex : set.getVA(iContentVAID)) {
    iCount++;
    if (contentSelectionManager.checkStatus(ESelectionType.NORMAL,iContentIndex) || contentSelectionManager.checkStatus(ESelectionType.DESELECTED,iContentIndex)) {
      fFieldWidth=renderStyle.getNormalFieldWidth();
      fFieldHeight=renderStyle.getFieldHeight();
      currentType=ESelectionType.NORMAL;
    }
 else     if (contentSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex) || contentSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iContentIndex)) {
      fFieldWidth=renderStyle.getSelectedFieldWidth();
      fFieldHeight=renderStyle.getFieldHeight();
      currentType=ESelectionType.SELECTION;
    }
 else {
      continue;
    }
    if (listModeEnabled) {
      fYPosition=HeatMapRenderStyle.LIST_SPACING;
    }
 else {
      fYPosition=0;
    }
    for (    Integer iStorageIndex : set.getVA(iStorageVAID)) {
      if (listModeEnabled) {
        if (currentType == ESelectionType.SELECTION) {
          if (iCurrentMouseOverElement == iContentIndex) {
            renderElement(gl,iStorageIndex,iContentIndex,fXPosition + fFieldWidth / 3,fYPosition,fFieldWidth / 2,fFieldHeight);
          }
 else {
            renderElement(gl,iStorageIndex,iContentIndex,fXPosition + fFieldWidth / 2f,fYPosition,fFieldWidth / 2.5f,fFieldHeight);
          }
        }
 else {
          renderElement(gl,iStorageIndex,iContentIndex,fXPosition + fFieldWidth / 2,fYPosition,fFieldWidth / 2,fFieldHeight);
        }
      }
 else {
        renderElement(gl,iStorageIndex,iContentIndex,fXPosition,fYPosition,fFieldWidth,fFieldHeight);
      }
      fYPosition+=fFieldHeight;
    }
    float fFontScaling=0;
    float fColumnDegrees=0;
    float fLineDegrees=0;
    if (bRenderStorageHorizontally) {
      fColumnDegrees=0;
      fLineDegrees=25;
    }
 else {
      fColumnDegrees=60;
      fLineDegrees=90;
    }
    if (fFieldWidth > 0.1f) {
      boolean bRenderRefSeq=false;
      fFontScaling=renderStyle.getSmallFontScalingFactor();
      if (detailLevel == EDetailLevel.HIGH) {
        bRenderRefSeq=true;
        String sContent;
        if (set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
          sContent=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(iContentIndex);
          if (bRenderRefSeq) {
            sContent+=""String_Node_Str"";
            sContent+=GeneticIDMappingHelper.get().getRefSeqStringFromStorageIndex(iContentIndex);
          }
        }
 else         if (set.getSetType() == ESetType.UNSPECIFIED) {
          sContent=generalManager.getIDMappingManager().getID(EMappingType.EXPRESSION_INDEX_2_UNSPECIFIED,iContentIndex);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + set.getSetType() + ""String_Node_Str"");
        }
        if (sContent == null)         sContent=""String_Node_Str"";
        if (listModeEnabled) {
          if (currentType == ESelectionType.SELECTION) {
            if (iCurrentMouseOverElement == iContentIndex) {
              iCurrentMouseOverElement=-1;
              float fTextScalingFactor=0.0035f;
              float fTextSpacing=0.1f;
              float fYSelectionOrigin=-2 * fTextSpacing - (float)textRenderer.getBounds(sContent).getWidth() * fTextScalingFactor;
              float fSlectionFieldHeight=-fYSelectionOrigin + renderStyle.getRenderHeight();
              gl.glColor3f(0.25f,0.25f,0.25f);
              gl.glBegin(GL.GL_POLYGON);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glEnd();
              textRenderer.setColor(1,1,1,1);
              gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
              gl.glTranslatef(fXPosition + fFieldWidth / 1.5f,fYSelectionOrigin + fTextSpacing,0);
              gl.glRotatef(+fLineDegrees,0,0,1);
              textRenderer.begin3DRendering();
              textRenderer.draw3D(sContent,0,0,0.016f,fTextScalingFactor);
              textRenderer.end3DRendering();
              gl.glRotatef(-fLineDegrees,0,0,1);
              gl.glTranslatef(-fXPosition - fFieldWidth / 1.5f,-fYSelectionOrigin - fTextSpacing,0);
              gl.glPopAttrib();
            }
 else {
              float fYSelectionOrigin=0;
              float fSlectionFieldHeight=-fYSelectionOrigin + renderStyle.getRenderHeight();
              gl.glColor3f(0.25f,0.25f,0.25f);
              gl.glBegin(GL.GL_POLYGON);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glEnd();
              textRenderer.setColor(1,1,1,1);
              renderCaption(gl,sContent,fXPosition + fFieldWidth / 2.2f - 0.01f,0 + 0.01f + HeatMapRenderStyle.LIST_SPACING,0.02f,fLineDegrees,fFontScaling);
              gl.glPopAttrib();
            }
          }
 else {
            textRenderer.setColor(0,0,0,1);
            renderCaption(gl,sContent,fXPosition + fFieldWidth / 2 - 0.01f,0 + 0.01f + HeatMapRenderStyle.LIST_SPACING,0,fLineDegrees,fFontScaling);
          }
        }
 else {
          textRenderer.setColor(0,0,0,1);
          renderCaption(gl,sContent,fXPosition + fFieldWidth / 6 * 4.5f,fYPosition + 0.1f,0,fLineDegrees,fFontScaling);
        }
      }
    }
    fAlXDistances.add(fXPosition);
    fXPosition+=fFieldWidth;
    if (detailLevel == EDetailLevel.HIGH && !listModeEnabled) {
      if (iCount == set.getVA(iContentVAID).size()) {
        fYPosition=0;
        for (        Integer iStorageIndex : set.getVA(iStorageVAID)) {
          textRenderer.setColor(0,0,0,1);
          renderCaption(gl,set.get(iStorageIndex).getLabel(),fXPosition + 0.1f,fYPosition + fFieldHeight / 2,0,fColumnDegrees,renderStyle.getSmallFontScalingFactor());
          fYPosition+=fFieldHeight;
        }
      }
    }
  }
}","private void renderHeatMap(final GL gl){
  fAlXDistances.clear();
  renderStyle.updateFieldSizes();
  float fXPosition=0;
  float fYPosition=0;
  float fFieldWidth=0;
  float fFieldHeight=0;
  int iCount=0;
  ESelectionType currentType;
  for (  Integer iContentIndex : set.getVA(iContentVAID)) {
    iCount++;
    if (contentSelectionManager.checkStatus(ESelectionType.NORMAL,iContentIndex) || contentSelectionManager.checkStatus(ESelectionType.DESELECTED,iContentIndex)) {
      fFieldWidth=renderStyle.getNormalFieldWidth();
      fFieldHeight=renderStyle.getFieldHeight();
      currentType=ESelectionType.NORMAL;
    }
 else     if (contentSelectionManager.checkStatus(ESelectionType.SELECTION,iContentIndex) || contentSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iContentIndex)) {
      fFieldWidth=renderStyle.getSelectedFieldWidth();
      fFieldHeight=renderStyle.getFieldHeight();
      currentType=ESelectionType.SELECTION;
    }
 else {
      continue;
    }
    if (listModeEnabled) {
      fYPosition=HeatMapRenderStyle.LIST_SPACING;
    }
 else {
      fYPosition=0;
    }
    for (    Integer iStorageIndex : set.getVA(iStorageVAID)) {
      if (listModeEnabled) {
        if (currentType == ESelectionType.SELECTION) {
          if (iCurrentMouseOverElement == iContentIndex) {
            renderElement(gl,iStorageIndex,iContentIndex,fXPosition + fFieldWidth / 3,fYPosition,fFieldWidth / 2,fFieldHeight);
          }
 else {
            renderElement(gl,iStorageIndex,iContentIndex,fXPosition + fFieldWidth / 2f,fYPosition,fFieldWidth / 2.5f,fFieldHeight);
          }
        }
 else {
          renderElement(gl,iStorageIndex,iContentIndex,fXPosition + fFieldWidth / 2,fYPosition,fFieldWidth / 2,fFieldHeight);
        }
      }
 else {
        renderElement(gl,iStorageIndex,iContentIndex,fXPosition,fYPosition,fFieldWidth,fFieldHeight);
      }
      fYPosition+=fFieldHeight;
    }
    float fFontScaling=0;
    float fColumnDegrees=0;
    float fLineDegrees=0;
    if (bRenderStorageHorizontally) {
      fColumnDegrees=0;
      fLineDegrees=25;
    }
 else {
      fColumnDegrees=60;
      fLineDegrees=90;
    }
    if (fFieldWidth > 0.055f) {
      boolean bRenderRefSeq=false;
      fFontScaling=renderStyle.getSmallFontScalingFactor();
      if (detailLevel == EDetailLevel.HIGH) {
        String sContent;
        String refSeq=null;
        if (set.getSetType() == ESetType.GENE_EXPRESSION_DATA) {
          sContent=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(iContentIndex);
          refSeq=GeneticIDMappingHelper.get().getRefSeqStringFromStorageIndex(iContentIndex);
          if (bRenderRefSeq) {
            sContent+=""String_Node_Str"";
            sContent+=refSeq;
          }
        }
 else         if (set.getSetType() == ESetType.UNSPECIFIED) {
          sContent=generalManager.getIDMappingManager().getID(EMappingType.EXPRESSION_INDEX_2_UNSPECIFIED,iContentIndex);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"" + set.getSetType() + ""String_Node_Str"");
        }
        if (sContent == null)         sContent=""String_Node_Str"";
        if (listModeEnabled) {
          if (currentType == ESelectionType.SELECTION) {
            if (iCurrentMouseOverElement == iContentIndex) {
              iCurrentMouseOverElement=-1;
              float fTextScalingFactor=0.0035f;
              float fTextSpacing=0.1f;
              float fYSelectionOrigin=-2 * fTextSpacing - (float)textRenderer.getBounds(sContent).getWidth() * fTextScalingFactor;
              float fSlectionFieldHeight=-fYSelectionOrigin + renderStyle.getRenderHeight();
              gl.glColor3f(0.25f,0.25f,0.25f);
              gl.glBegin(GL.GL_POLYGON);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glEnd();
              textRenderer.setColor(1,1,1,1);
              gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
              gl.glTranslatef(fXPosition + fFieldWidth / 1.5f,fYSelectionOrigin + fTextSpacing,0);
              gl.glRotatef(+fLineDegrees,0,0,1);
              textRenderer.begin3DRendering();
              textRenderer.draw3D(sContent,0,0,0.016f,fTextScalingFactor);
              textRenderer.end3DRendering();
              gl.glRotatef(-fLineDegrees,0,0,1);
              gl.glTranslatef(-fXPosition - fFieldWidth / 1.5f,-fYSelectionOrigin - fTextSpacing,0);
              gl.glPopAttrib();
            }
 else {
              float fYSelectionOrigin=0;
              float fSlectionFieldHeight=-fYSelectionOrigin + renderStyle.getRenderHeight();
              gl.glColor3f(0.25f,0.25f,0.25f);
              gl.glBegin(GL.GL_POLYGON);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin,0.0005f);
              gl.glVertex3f(fXPosition + fFieldWidth,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glVertex3f(fXPosition + 0.03f,fYSelectionOrigin + fSlectionFieldHeight,0.0005f);
              gl.glEnd();
              textRenderer.setColor(1,1,1,1);
              renderCaption(gl,sContent,fXPosition + fFieldWidth / 2.2f - 0.01f,0 + 0.01f + HeatMapRenderStyle.LIST_SPACING,0.02f,fLineDegrees,fFontScaling);
              gl.glPopAttrib();
            }
          }
 else {
            textRenderer.setColor(0,0,0,1);
            renderCaption(gl,sContent,fXPosition + fFieldWidth / 2 - 0.01f,0 + 0.01f + HeatMapRenderStyle.LIST_SPACING,0,fLineDegrees,fFontScaling);
          }
        }
 else {
          textRenderer.setColor(0,0,0,1);
          if (currentType == ESelectionType.SELECTION || currentType == ESelectionType.MOUSE_OVER) {
            renderCaption(gl,sContent,fXPosition + fFieldWidth / 6 * 2.5f,fYPosition + 0.1f,0,fLineDegrees,fFontScaling);
            if (refSeq != null)             renderCaption(gl,refSeq,fXPosition + fFieldWidth / 6 * 4.5f,fYPosition + 0.1f,0,fLineDegrees,fFontScaling);
          }
 else {
            renderCaption(gl,sContent,fXPosition + fFieldWidth / 6 * 4.5f,fYPosition + 0.1f,0,fLineDegrees,fFontScaling);
          }
        }
      }
    }
    fAlXDistances.add(fXPosition);
    fXPosition+=fFieldWidth;
    if (detailLevel == EDetailLevel.HIGH && !listModeEnabled) {
      if (iCount == set.getVA(iContentVAID).size()) {
        fYPosition=0;
        for (        Integer iStorageIndex : set.getVA(iStorageVAID)) {
          textRenderer.setColor(0,0,0,1);
          renderCaption(gl,set.get(iStorageIndex).getLabel(),fXPosition + 0.1f,fYPosition + fFieldHeight / 2,0,fColumnDegrees,renderStyle.getSmallFontScalingFactor());
          fYPosition+=fFieldHeight;
        }
      }
    }
  }
}",0.9518179130948862
58800,"private void renderCaption(GL gl,String sLabel,float fXOrigin,float fYOrigin,float fZOrigin,float fRotation,float fFontScaling){
  if (sLabel.length() > GeneralRenderStyle.NUM_CHAR_LIMIT + 1) {
    sLabel=sLabel.substring(0,GeneralRenderStyle.NUM_CHAR_LIMIT - 2);
    sLabel=sLabel + ""String_Node_Str"";
  }
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glTranslatef(fXOrigin,fYOrigin,fZOrigin);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(sLabel,0,0,0,fFontScaling);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-fXOrigin,-fYOrigin,-fZOrigin);
  gl.glPopAttrib();
}","private void renderCaption(GL gl,String sLabel,float fXOrigin,float fYOrigin,float fZOrigin,float fRotation,float fFontScaling){
  if (isRenderedRemote() && remoteRenderingGLView instanceof GLRemoteRendering)   fFontScaling*=1.5;
  if (sLabel.length() > GeneralRenderStyle.NUM_CHAR_LIMIT + 1) {
    sLabel=sLabel.substring(0,GeneralRenderStyle.NUM_CHAR_LIMIT - 2);
    sLabel=sLabel + ""String_Node_Str"";
  }
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glTranslatef(fXOrigin,fYOrigin,fZOrigin);
  gl.glRotatef(fRotation,0,0,1);
  textRenderer.begin3DRendering();
  textRenderer.draw3D(sLabel,0,0,0,fFontScaling);
  textRenderer.end3DRendering();
  gl.glRotatef(-fRotation,0,0,1);
  gl.glTranslatef(-fXOrigin,-fYOrigin,-fZOrigin);
  gl.glPopAttrib();
}",0.9294199860237596
58801,"private void handleUnselection(){
  handleGateUnselection();
  handleNANUnselection();
  handleMasterGateUnselection();
  polylineSelectionManager.clearSelection(ESelectionType.DESELECTED);
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    polylineSelectionManager.addToType(ESelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    polylineSelectionManager.addToType(ESelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : hashIsNANBlocking.values()) {
    polylineSelectionManager.addToType(ESelectionType.DESELECTED,alCurrent);
  }
}","private void handleUnselection(){
  handleGateUnselection();
  handleNANUnselection();
  handleMasterGateUnselection();
  polylineSelectionManager.clearSelection(ESelectionType.DESELECTED);
  for (  ArrayList<Integer> alCurrent : hashIsGateBlocking.values()) {
    polylineSelectionManager.addToType(ESelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : alIsAngleBlocking) {
    polylineSelectionManager.addToType(ESelectionType.DESELECTED,alCurrent);
  }
  for (  ArrayList<Integer> alCurrent : hashIsNANBlocking.values()) {
    polylineSelectionManager.addToType(ESelectionType.DESELECTED,alCurrent);
  }
  if (bIsDraggingActive || bIsAngularBrushingActive) {
    triggerSelectionUpdate();
  }
}",0.93460690668626
58802,"@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=iExternalID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (generalManager.getUseCase().getUseCaseMode() != EUseCaseMode.GENETIC_DATA) break;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setStorageIndex(iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
IVirtualArray axisVA=set.getVA(iAxisVAID);
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}","@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case CLICKED:
    eSelectionType=ESelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=iExternalID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (generalManager.getUseCase().getUseCaseMode() != EUseCaseMode.GENETIC_DATA) break;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer();
geneContextMenuItemContainer.setStorageIndex(iExternalID);
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=polylineSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
IVirtualArray axisVA=set.getVA(iAxisVAID);
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
}
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}",0.9745925556899864
58803,"/** 
 * Render the captions on the axis
 * @param gl
 * @param fXOrigin
 * @param fYOrigin
 * @param renderMode
 */
private void renderBoxedYValues(GL gl,float fXOrigin,float fYOrigin,String sRawValue,ESelectionType renderMode){
  if (fYOrigin < 0)   return;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glColor4fv(Y_AXIS_COLOR,0);
  Rectangle2D tempRectangle=textRenderer.getBounds(sRawValue);
  float fSmallSpacing=renderStyle.getVerySmallSpacing();
  float fBackPlaneWidth=(float)tempRectangle.getWidth() * renderStyle.getSmallFontScalingFactor();
  float fBackPlaneHeight=(float)tempRectangle.getHeight() * renderStyle.getSmallFontScalingFactor();
  float fXTextOrigin=fXOrigin + 2 * AXIS_MARKER_WIDTH;
  float fYTextOrigin=fYOrigin;
  gl.glColor4f(1f,1f,1f,0.8f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(fXTextOrigin - fSmallSpacing,fYTextOrigin - fSmallSpacing,LABEL_Z);
  gl.glVertex3f(fXTextOrigin + fBackPlaneWidth,fYTextOrigin - fSmallSpacing,LABEL_Z);
  gl.glVertex3f(fXTextOrigin + fBackPlaneWidth,fYTextOrigin + fBackPlaneHeight,LABEL_Z);
  gl.glVertex3f(fXTextOrigin - fSmallSpacing,fYTextOrigin + fBackPlaneHeight,LABEL_Z);
  gl.glEnd();
  renderNumber(sRawValue,fXTextOrigin,fYTextOrigin);
  gl.glPopAttrib();
}","/** 
 * Render the captions on the axis
 * @param gl
 * @param fXOrigin
 * @param fYOrigin
 * @param renderMode
 */
private void renderBoxedYValues(GL gl,float fXOrigin,float fYOrigin,String sRawValue,ESelectionType renderMode){
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  if (fYOrigin < 0)   return;
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glLineWidth(Y_AXIS_LINE_WIDTH);
  gl.glColor4fv(Y_AXIS_COLOR,0);
  Rectangle2D tempRectangle=textRenderer.getBounds(sRawValue);
  float fSmallSpacing=renderStyle.getVerySmallSpacing();
  float fBackPlaneWidth=(float)tempRectangle.getWidth() * fScaling;
  float fBackPlaneHeight=(float)tempRectangle.getHeight() * fScaling;
  float fXTextOrigin=fXOrigin + 2 * AXIS_MARKER_WIDTH;
  float fYTextOrigin=fYOrigin;
  gl.glColor4f(1f,1f,1f,0.8f);
  gl.glBegin(GL.GL_POLYGON);
  gl.glVertex3f(fXTextOrigin - fSmallSpacing,fYTextOrigin - fSmallSpacing,LABEL_Z);
  gl.glVertex3f(fXTextOrigin + fBackPlaneWidth,fYTextOrigin - fSmallSpacing,LABEL_Z);
  gl.glVertex3f(fXTextOrigin + fBackPlaneWidth,fYTextOrigin + fBackPlaneHeight,LABEL_Z);
  gl.glVertex3f(fXTextOrigin - fSmallSpacing,fYTextOrigin + fBackPlaneHeight,LABEL_Z);
  gl.glEnd();
  renderNumber(sRawValue,fXTextOrigin,fYTextOrigin);
  gl.glPopAttrib();
}",0.9248466257668712
58804,"private void renderNumber(String sRawValue,float fXOrigin,float fYOrigin){
  textRenderer.begin3DRendering();
  textRenderer.draw3D(sRawValue,fXOrigin,fYOrigin,ParCoordsRenderStyle.TEXT_ON_LABEL_Z,renderStyle.getSmallFontScalingFactor());
  textRenderer.end3DRendering();
}","private void renderNumber(String sRawValue,float fXOrigin,float fYOrigin){
  textRenderer.begin3DRendering();
  float fScaling=renderStyle.getSmallFontScalingFactor();
  if (isRenderedRemote())   fScaling*=1.5f;
  textRenderer.draw3D(sRawValue,fXOrigin,fYOrigin,ParCoordsRenderStyle.TEXT_ON_LABEL_Z,fScaling);
  textRenderer.end3DRendering();
}",0.7585089141004863
58805,"/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL gl){
  IVirtualArray axisVA=set.getVA(iAxisVAID);
  textRenderer.setColor(0,0,0,1);
  int iNumberAxis=set.getVA(iAxisVAID).size();
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(renderStyle.getXAxisStart(),0.0f,0.0f);
  gl.glVertex3f(renderStyle.getXAxisEnd(),0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=axisSelectionManager.getElements(ESelectionType.SELECTION);
  Set<Integer> mouseOverSet=axisSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  int iCount=0;
  while (iCount < iNumberAxis) {
    float fXPosition=alAxisSpacing.get(iCount);
    if (selectedSet.contains(axisVA.get(iCount))) {
      gl.glColor4fv(Y_AXIS_SELECTED_COLOR,0);
      gl.glLineWidth(Y_AXIS_SELECTED_LINE_WIDTH);
      gl.glEnable(GL.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else     if (mouseOverSet.contains(axisVA.get(iCount))) {
      gl.glColor4fv(Y_AXIS_MOUSE_OVER_COLOR,0);
      gl.glLineWidth(Y_AXIS_MOUSE_OVER_LINE_WIDTH);
      gl.glEnable(GL.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else {
      gl.glColor4fv(Y_AXIS_COLOR,0);
      gl.glLineWidth(Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.Y_AXIS_SELECTION,axisVA.get(iCount)));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition,Y_AXIS_LOW,AXIS_Z);
    gl.glVertex3f(fXPosition,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glEnd();
    gl.glDisable(GL.GL_LINE_STIPPLE);
    if (detailLevel != EDetailLevel.HIGH || !renderStyle.isEnoughSpaceForText(iNumberAxis)) {
      gl.glPopName();
    }
    float fXButtonOrigin=alAxisSpacing.get(iCount);
    Texture tempTexture=textureManager.getIconTexture(gl,EIconTextures.NAN);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.REMOVE_NAN,axisVA.get(iCount));
    gl.glColor4f(1,1,1,1f);
    gl.glPushName(iPickingID);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(fXButtonOrigin - 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET - 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fXButtonOrigin + 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET - 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(fXButtonOrigin + 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET + 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(fXButtonOrigin - 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET + 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glEnd();
    gl.glPopName();
    tempTexture.disable();
    if (detailLevel == EDetailLevel.HIGH) {
      float fMarkerSpacing=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
      for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS; iInnerCount++) {
        float fCurrentHeight=fMarkerSpacing * iInnerCount;
        if (iCount == 0) {
          if (set.isSetHomogeneous()) {
            float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
            Rectangle2D bounds=textRenderer.getBounds(getDecimalFormat().format(fNumber));
            float fWidth=(float)bounds.getWidth() * renderStyle.getSmallFontScalingFactor();
            float fHeightHalf=(float)bounds.getHeight() * renderStyle.getSmallFontScalingFactor() / 3;
            renderNumber(getDecimalFormat().format(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf);
          }
 else {
          }
        }
        gl.glColor3fv(Y_AXIS_COLOR,0);
        gl.glBegin(GL.GL_LINES);
        gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glEnd();
      }
      String sAxisLabel=null;
switch (eAxisDataType) {
case EXPRESSION_INDEX:
        sAxisLabel=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(set.getVA(iAxisVAID).get(iCount));
      if (sAxisLabel == null)       sAxisLabel=""String_Node_Str"";
    break;
case EXPERIMENT:
default :
  if (bRenderStorageHorizontally) {
    sAxisLabel=""String_Node_Str"";
  }
 else   sAxisLabel=set.getStorageFromVA(iStorageVAID,iCount).getLabel();
break;
}
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glTranslatef(fXPosition,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
gl.glRotatef(25,0,0,1);
textRenderer.begin3DRendering();
textRenderer.draw3D(sAxisLabel,0,0,0,renderStyle.getSmallFontScalingFactor());
textRenderer.end3DRendering();
gl.glRotatef(-25,0,0,1);
gl.glTranslatef(-fXPosition,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
if (set.isSetHomogeneous()) {
}
 else {
}
gl.glPopAttrib();
iPickingID=-1;
float fYDropOrigin=-ParCoordsRenderStyle.AXIS_BUTTONS_Y_OFFSET;
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
float fYGateAddOrigin=renderStyle.getAxisHeight();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.ADD_GATE,axisVA.get(iCount));
tempTexture=textureManager.getIconTexture(gl,EIconTextures.ADD_GATE);
tempTexture.enable();
tempTexture.bind();
texCoords=tempTexture.getImageTexCoords();
gl.glColor4f(1,1,1,1f);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_POLYGON);
gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin - 0.03f,fYGateAddOrigin,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin + 0.03f,fYGateAddOrigin,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.top());
gl.glVertex3f(fXButtonOrigin + 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
gl.glTexCoord2f(texCoords.left(),texCoords.top());
gl.glVertex3f(fXButtonOrigin - 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
gl.glEnd();
gl.glPopName();
tempTexture.disable();
if (selectedSet.contains(axisVA.get(iCount)) || mouseOverSet.contains(axisVA.get(iCount))) {
if (iChangeDropOnAxisNumber == iCount) {
tempTexture=textureManager.getIconTexture(gl,dropTexture);
if (!bWasAxisMoved) {
  dropTexture=EIconTextures.DROP_NORMAL;
}
}
 else {
tempTexture=textureManager.getIconTexture(gl,EIconTextures.DROP_NORMAL);
}
tempTexture.enable();
tempTexture.bind();
texCoords=tempTexture.getImageTexCoords();
gl.glColor4f(1,1,1,1);
gl.glBegin(GL.GL_POLYGON);
gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin - 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin + 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
gl.glTexCoord2f(texCoords.right(),texCoords.top());
gl.glVertex3f(fXButtonOrigin + 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
gl.glTexCoord2f(texCoords.left(),texCoords.top());
gl.glVertex3f(fXButtonOrigin - 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
gl.glEnd();
tempTexture.disable();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.MOVE_AXIS,iCount);
gl.glColor4f(0,0,0,0f);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_TRIANGLES);
gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
gl.glEnd();
gl.glPopName();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DUPLICATE_AXIS,iCount);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_TRIANGLES);
gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin - 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glEnd();
gl.glPopName();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.REMOVE_AXIS,iCount);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_TRIANGLES);
gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin + 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glEnd();
gl.glPopName();
}
 else {
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.MOVE_AXIS,iCount);
tempTexture=textureManager.getIconTexture(gl,EIconTextures.SMALL_DROP);
tempTexture.enable();
tempTexture.bind();
texCoords=tempTexture.getImageTexCoords();
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glColor4f(1,1,1,1);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_POLYGON);
gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin - 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin + 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.top());
gl.glVertex3f(fXButtonOrigin + 0.05f,fYDropOrigin,AXIS_Z);
gl.glTexCoord2f(texCoords.left(),texCoords.top());
gl.glVertex3f(fXButtonOrigin - 0.05f,fYDropOrigin,AXIS_Z);
gl.glEnd();
gl.glPopName();
gl.glPopAttrib();
tempTexture.disable();
}
gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
gl.glPopName();
}
iCount++;
}
}","/** 
 * Render the coordinate system of the parallel coordinates, including the axis captions and axis-specific buttons
 * @param gl the gl context
 * @param iNumberAxis
 */
private void renderCoordinateSystem(GL gl){
  IVirtualArray axisVA=set.getVA(iAxisVAID);
  textRenderer.setColor(0,0,0,1);
  int iNumberAxis=set.getVA(iAxisVAID).size();
  gl.glColor4fv(X_AXIS_COLOR,0);
  gl.glLineWidth(X_AXIS_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.X_AXIS_SELECTION,1));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(renderStyle.getXAxisStart(),0.0f,0.0f);
  gl.glVertex3f(renderStyle.getXAxisEnd(),0.0f,0.0f);
  gl.glEnd();
  gl.glPopName();
  Set<Integer> selectedSet=axisSelectionManager.getElements(ESelectionType.SELECTION);
  Set<Integer> mouseOverSet=axisSelectionManager.getElements(ESelectionType.MOUSE_OVER);
  int iCount=0;
  while (iCount < iNumberAxis) {
    float fXPosition=alAxisSpacing.get(iCount);
    if (selectedSet.contains(axisVA.get(iCount))) {
      gl.glColor4fv(Y_AXIS_SELECTED_COLOR,0);
      gl.glLineWidth(Y_AXIS_SELECTED_LINE_WIDTH);
      gl.glEnable(GL.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else     if (mouseOverSet.contains(axisVA.get(iCount))) {
      gl.glColor4fv(Y_AXIS_MOUSE_OVER_COLOR,0);
      gl.glLineWidth(Y_AXIS_MOUSE_OVER_LINE_WIDTH);
      gl.glEnable(GL.GL_LINE_STIPPLE);
      gl.glLineStipple(2,(short)0xAAAA);
    }
 else {
      gl.glColor4fv(Y_AXIS_COLOR,0);
      gl.glLineWidth(Y_AXIS_LINE_WIDTH);
    }
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.Y_AXIS_SELECTION,axisVA.get(iCount)));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(fXPosition,Y_AXIS_LOW,AXIS_Z);
    gl.glVertex3f(fXPosition,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,renderStyle.getAxisHeight(),AXIS_Z);
    gl.glEnd();
    gl.glDisable(GL.GL_LINE_STIPPLE);
    if (detailLevel != EDetailLevel.HIGH || !renderStyle.isEnoughSpaceForText(iNumberAxis)) {
      gl.glPopName();
    }
    float fXButtonOrigin=alAxisSpacing.get(iCount);
    Texture tempTexture=textureManager.getIconTexture(gl,EIconTextures.NAN);
    tempTexture.enable();
    tempTexture.bind();
    TextureCoords texCoords=tempTexture.getImageTexCoords();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.REMOVE_NAN,axisVA.get(iCount));
    gl.glColor4f(1,1,1,1f);
    gl.glPushName(iPickingID);
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(fXButtonOrigin - 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET - 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fXButtonOrigin + 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET - 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(fXButtonOrigin + 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET + 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(fXButtonOrigin - 0.03f,ParCoordsRenderStyle.NAN_Y_OFFSET + 0.03f,ParCoordsRenderStyle.NAN_Z);
    gl.glEnd();
    gl.glPopName();
    tempTexture.disable();
    if (detailLevel == EDetailLevel.HIGH) {
      float fMarkerSpacing=renderStyle.getAxisHeight() / (NUMBER_AXIS_MARKERS + 1);
      for (int iInnerCount=1; iInnerCount <= NUMBER_AXIS_MARKERS; iInnerCount++) {
        float fCurrentHeight=fMarkerSpacing * iInnerCount;
        if (iCount == 0) {
          if (set.isSetHomogeneous()) {
            float fNumber=(float)set.getRawForNormalized(fCurrentHeight / renderStyle.getAxisHeight());
            Rectangle2D bounds=textRenderer.getBounds(getDecimalFormat().format(fNumber));
            float fWidth=(float)bounds.getWidth() * renderStyle.getSmallFontScalingFactor();
            float fHeightHalf=(float)bounds.getHeight() * renderStyle.getSmallFontScalingFactor() / 3;
            renderNumber(getDecimalFormat().format(fNumber),fXPosition - fWidth - AXIS_MARKER_WIDTH,fCurrentHeight - fHeightHalf);
          }
 else {
          }
        }
        gl.glColor3fv(Y_AXIS_COLOR,0);
        gl.glBegin(GL.GL_LINES);
        gl.glVertex3f(fXPosition - AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glVertex3f(fXPosition + AXIS_MARKER_WIDTH,fCurrentHeight,AXIS_Z);
        gl.glEnd();
      }
      String sAxisLabel=null;
switch (eAxisDataType) {
case EXPRESSION_INDEX:
        sAxisLabel=GeneticIDMappingHelper.get().getShortNameFromExpressionIndex(set.getVA(iAxisVAID).get(iCount));
      if (sAxisLabel == null)       sAxisLabel=""String_Node_Str"";
    break;
case EXPERIMENT:
default :
  if (bRenderStorageHorizontally) {
    sAxisLabel=""String_Node_Str"";
  }
 else   sAxisLabel=set.getStorageFromVA(iStorageVAID,iCount).getLabel();
break;
}
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glTranslatef(fXPosition,renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing(),0);
gl.glRotatef(25,0,0,1);
textRenderer.begin3DRendering();
float fScaling=renderStyle.getSmallFontScalingFactor();
if (isRenderedRemote()) fScaling*=1.5f;
textRenderer.draw3D(sAxisLabel,0,0,0,fScaling);
textRenderer.end3DRendering();
gl.glRotatef(-25,0,0,1);
gl.glTranslatef(-fXPosition,-(renderStyle.getAxisHeight() + renderStyle.getAxisCaptionSpacing()),0);
if (set.isSetHomogeneous()) {
}
 else {
}
gl.glPopAttrib();
iPickingID=-1;
float fYDropOrigin=-ParCoordsRenderStyle.AXIS_BUTTONS_Y_OFFSET;
gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
float fYGateAddOrigin=renderStyle.getAxisHeight();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.ADD_GATE,axisVA.get(iCount));
tempTexture=textureManager.getIconTexture(gl,EIconTextures.ADD_GATE);
tempTexture.enable();
tempTexture.bind();
texCoords=tempTexture.getImageTexCoords();
gl.glColor4f(1,1,1,1f);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_POLYGON);
gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin - 0.03f,fYGateAddOrigin,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin + 0.03f,fYGateAddOrigin,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.top());
gl.glVertex3f(fXButtonOrigin + 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
gl.glTexCoord2f(texCoords.left(),texCoords.top());
gl.glVertex3f(fXButtonOrigin - 0.03f,fYGateAddOrigin + 0.12f,AXIS_Z);
gl.glEnd();
gl.glPopName();
tempTexture.disable();
if (selectedSet.contains(axisVA.get(iCount)) || mouseOverSet.contains(axisVA.get(iCount))) {
if (iChangeDropOnAxisNumber == iCount) {
tempTexture=textureManager.getIconTexture(gl,dropTexture);
if (!bWasAxisMoved) {
  dropTexture=EIconTextures.DROP_NORMAL;
}
}
 else {
tempTexture=textureManager.getIconTexture(gl,EIconTextures.DROP_NORMAL);
}
tempTexture.enable();
tempTexture.bind();
texCoords=tempTexture.getImageTexCoords();
gl.glColor4f(1,1,1,1);
gl.glBegin(GL.GL_POLYGON);
gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin - 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin + 0.15f,fYDropOrigin - 0.3f,AXIS_Z + 0.005f);
gl.glTexCoord2f(texCoords.right(),texCoords.top());
gl.glVertex3f(fXButtonOrigin + 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
gl.glTexCoord2f(texCoords.left(),texCoords.top());
gl.glVertex3f(fXButtonOrigin - 0.15f,fYDropOrigin,AXIS_Z + 0.005f);
gl.glEnd();
tempTexture.disable();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.MOVE_AXIS,iCount);
gl.glColor4f(0,0,0,0f);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_TRIANGLES);
gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.3f,AXIS_Z + 0.01f);
gl.glEnd();
gl.glPopName();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.DUPLICATE_AXIS,iCount);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_TRIANGLES);
gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin - 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin - 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glEnd();
gl.glPopName();
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.REMOVE_AXIS,iCount);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_TRIANGLES);
gl.glVertex3f(fXButtonOrigin,fYDropOrigin,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin + 0.08f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glVertex3f(fXButtonOrigin + 0.23f,fYDropOrigin - 0.21f,AXIS_Z + 0.01f);
gl.glEnd();
gl.glPopName();
}
 else {
iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.MOVE_AXIS,iCount);
tempTexture=textureManager.getIconTexture(gl,EIconTextures.SMALL_DROP);
tempTexture.enable();
tempTexture.bind();
texCoords=tempTexture.getImageTexCoords();
gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
gl.glColor4f(1,1,1,1);
gl.glPushName(iPickingID);
gl.glBegin(GL.GL_POLYGON);
gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin - 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
gl.glVertex3f(fXButtonOrigin + 0.05f,fYDropOrigin - 0.2f,AXIS_Z);
gl.glTexCoord2f(texCoords.right(),texCoords.top());
gl.glVertex3f(fXButtonOrigin + 0.05f,fYDropOrigin,AXIS_Z);
gl.glTexCoord2f(texCoords.left(),texCoords.top());
gl.glVertex3f(fXButtonOrigin - 0.05f,fYDropOrigin,AXIS_Z);
gl.glEnd();
gl.glPopName();
gl.glPopAttrib();
tempTexture.disable();
}
gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
gl.glPopName();
}
iCount++;
}
}",0.9933011372487928
58806,"/** 
 * <p> Initializes a sub menu and recursively initializes the sub menus of the items in contextMenuEntries. Sets unique IDs for every element and creates the ContextMenuMetaData objects for sub menus. </p> <p> Sets the width and height of a sub menu. The origin in X and Y have to be set at another place before calling this method. </p>
 * @param contextMenuEntries the list of context menu items for the current sub menu
 * @param metaData The metaData information for the current sub menu. height and widht are set, origin hast to be set before.
 * @throws IllegalStateException if xOrigin and yOrigin in metaData have not been initialized.
 */
private void initializeSubMenus(ArrayList<IContextMenuEntry> contextMenuItems,ContextMenuMetaData metaData){
  metaData.maxTextWidth=0;
  for (  IContextMenuEntry entry : contextMenuItems) {
    if (entry instanceof AContextMenuItem) {
      AContextMenuItem item=(AContextMenuItem)entry;
      hashUniqueIDToContextMenuItem.put(iPickingIDCounter,item);
      hashContextMenuItemToUniqueID.put(item,iPickingIDCounter++);
      float textWidth=(float)textRenderer.getBounds(item.getText()).getWidth() * FONT_SCALING;
      if (textWidth > metaData.maxTextWidth)       metaData.maxTextWidth=textWidth;
      if (item.hasSubItems()) {
        ContextMenuMetaData newMetaData=new ContextMenuMetaData();
        hashContextMenuItemToMetaData.put(item,newMetaData);
        initializeSubMenus(item.getSubItems(),newMetaData);
      }
    }
  }
  metaData.width=metaData.maxTextWidth + WIDHT_OVERHEAD;
  metaData.height=contextMenuItems.size() * ITEM_HEIGHT + HEIGHT_OVERHEAD;
}","/** 
 * <p> Initializes a sub menu and recursively initializes the sub menus of the items in contextMenuEntries. Sets unique IDs for every element and creates the ContextMenuMetaData objects for sub menus. </p> <p> Sets the width and height of a sub menu. The origin in X and Y have to be set at another place before calling this method. </p>
 * @param contextMenuEntries the list of context menu items for the current sub menu
 * @param metaData The metaData information for the current sub menu. height and widht are set, origin hast to be set before.
 * @throws IllegalStateException if xOrigin and yOrigin in metaData have not been initialized.
 */
private void initializeSubMenus(ArrayList<IContextMenuEntry> contextMenuItems,ContextMenuMetaData metaData){
  metaData.maxTextWidth=0;
  for (  IContextMenuEntry entry : contextMenuItems) {
    if (entry instanceof AContextMenuItem) {
      AContextMenuItem item=(AContextMenuItem)entry;
      hashUniqueIDToContextMenuItem.put(iPickingIDCounter,item);
      hashContextMenuItemToUniqueID.put(item,iPickingIDCounter++);
      float textWidth=(float)textRenderer.getBounds(item.getText()).getWidth() * FONT_SCALING;
      if (textWidth > metaData.maxTextWidth)       metaData.maxTextWidth=textWidth;
      if (item.hasSubItems()) {
        ContextMenuMetaData newMetaData=new ContextMenuMetaData();
        hashContextMenuItemToMetaData.put(item,newMetaData);
        initializeSubMenus(item.getSubItems(),newMetaData);
      }
    }
 else     if (entry instanceof Heading) {
      Heading heading=(Heading)entry;
      float textWidth=(float)textRenderer.getBounds(heading.getText()).getWidth() * FONT_SCALING;
      textWidth-=ICON_SIZE - SPACING;
      if (textWidth > metaData.maxTextWidth)       metaData.maxTextWidth=textWidth;
    }
  }
  metaData.width=metaData.maxTextWidth + WIDHT_OVERHEAD;
  metaData.height=contextMenuItems.size() * ITEM_HEIGHT + HEIGHT_OVERHEAD;
}",0.9138998311761396
58807,"private void createMenuContent(PathwayGraph pathway){
  addContextMenuItem(new LoadPathwaysByPathwayIDItem(pathway.getID()));
}","private void createMenuContent(PathwayGraph pathway){
  addHeading(""String_Node_Str"");
  addContextMenuItem(new LoadPathwaysByPathwayIDItem(pathway.getID()));
}",0.8850174216027874
58808,"/** 
 * The 2D screen coordinates of the position of the mouse at the time the pick occured
 * @return
 */
public Point getPickedPoint(){
  return pickedPoint;
}","/** 
 * The 2D screen coordinates of the mouse position at the time the pick occurred.
 */
public Point getPickedPoint(){
  return pickedPoint;
}",0.8954248366013072
58809,"public synchronized void clearAll(){
  if (containedViewIDs == null)   return;
  enableBusyMode(false);
  pickingManager.enablePicking(true);
  ArrayList<ASerializedView> removeNewViews=new ArrayList<ASerializedView>();
  for (  ASerializedView view : newViews) {
    if (!(view instanceof SerializedParallelCoordinatesView || view instanceof SerializedHeatMapView)) {
      removeNewViews.add(view);
    }
  }
  newViews.removeAll(removeNewViews);
  ArrayList<Integer> removeViewIDs=new ArrayList<Integer>();
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  for (  int viewID : containedViewIDs) {
    AGLEventListener view=viewManager.getGLEventListener(viewID);
    if (!(view instanceof GLParallelCoordinates || view instanceof GLHeatMap)) {
      removeViewIDs.add(viewID);
    }
  }
  containedViewIDs.removeAll(removeViewIDs);
  generalManager.getPathwayManager().resetPathwayVisiblityState();
  arSlerpActions.clear();
  clearRemoteLevel(focusLevel);
  clearRemoteLevel(stackLevel);
  clearRemoteLevel(poolLevel);
  generalManager.getViewGLCanvasManager().getConnectedElementRepresentationManager().clearAll();
}","public synchronized void clearAll(){
  if (containedViewIDs == null)   return;
  enableBusyMode(false);
  pickingManager.enablePicking(true);
  ArrayList<ASerializedView> removeNewViews=new ArrayList<ASerializedView>();
  for (  ASerializedView view : newViews) {
    if (!(view instanceof SerializedParallelCoordinatesView || view instanceof SerializedHeatMapView)) {
      removeNewViews.add(view);
    }
  }
  newViews.removeAll(removeNewViews);
  ArrayList<Integer> removeViewIDs=new ArrayList<Integer>();
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  for (  int viewID : containedViewIDs) {
    AGLEventListener view=viewManager.getGLEventListener(viewID);
    if (!(view instanceof GLParallelCoordinates || view instanceof GLHeatMap)) {
      removeViewIDs.add(viewID);
    }
  }
  containedViewIDs.removeAll(removeViewIDs);
  generalManager.getPathwayManager().resetPathwayVisiblityState();
  for (  SlerpAction slerpAction : arSlerpActions) {
    viewManager.getGLEventListener(slerpAction.getElementId()).broadcastElements(EVAOperation.REMOVE_ELEMENT);
  }
  arSlerpActions.clear();
  clearRemoteLevel(focusLevel);
  clearRemoteLevel(stackLevel);
  clearRemoteLevel(poolLevel);
  clearRemoteLevel(transitionLevel);
  for (  int viewID : containedViewIDs) {
    AGLEventListener view=viewManager.getGLEventListener(viewID);
    if (view instanceof GLParallelCoordinates) {
      stackLevel.getElementByPositionIndex(0).setContainedElementID(viewID);
    }
 else     if (view instanceof GLHeatMap) {
      focusLevel.getElementByPositionIndex(0).setContainedElementID(viewID);
    }
  }
  generalManager.getViewGLCanvasManager().getConnectedElementRepresentationManager().clearAll();
}",0.7553377668883444
58810,"private void clearRemoteLevel(RemoteLevel remoteLevel){
  int iViewID;
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  AGLEventListener glEventListener=null;
  for (  RemoteLevelElement element : remoteLevel.getAllElements()) {
    iViewID=element.getContainedElementID();
    if (iViewID == -1) {
      continue;
    }
    glEventListener=viewManager.getGLEventListener(iViewID);
    if (glEventListener instanceof GLHeatMap || glEventListener instanceof GLParallelCoordinates) {
      ((AStorageBasedView)glEventListener).resetView();
      if (!glEventListener.isRenderedRemote()) {
        glEventListener.enableBusyMode(false);
      }
    }
 else {
      removeView(glEventListener);
      element.setContainedElementID(-1);
    }
  }
}","private void clearRemoteLevel(RemoteLevel remoteLevel){
  int iViewID;
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  AGLEventListener glEventListener=null;
  for (  RemoteLevelElement element : remoteLevel.getAllElements()) {
    iViewID=element.getContainedElementID();
    if (iViewID == -1) {
      continue;
    }
    glEventListener=viewManager.getGLEventListener(iViewID);
    if (glEventListener instanceof GLHeatMap || glEventListener instanceof GLParallelCoordinates) {
      ((AStorageBasedView)glEventListener).resetView();
      if (!glEventListener.isRenderedRemote()) {
        glEventListener.enableBusyMode(false);
      }
    }
 else {
      removeView(glEventListener);
      glEventListener.broadcastElements(EVAOperation.REMOVE_ELEMENT);
    }
    element.setContainedElementID(-1);
  }
}",0.949874686716792
58811,"private void renderRemoteLevelElement(final GL gl,RemoteLevelElement element,RemoteLevel level){
  if (element.getContainedElementID() == -1)   return;
  int iViewID=element.getContainedElementID();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.REMOTE_LEVEL_ELEMENT,element.getID()));
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID));
  AGLEventListener glEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iViewID);
  if (glEventListener == null)   throw new IllegalStateException(""String_Node_Str"");
  gl.glPushMatrix();
  Transform transform=element.getTransform();
  Vec3f translation=transform.getTranslation();
  Rotf rot=transform.getRotation();
  Vec3f scale=transform.getScale();
  Vec3f axis=new Vec3f();
  float fAngle=rot.get(axis);
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  gl.glScalef(scale.x(),scale.y(),scale.z());
  if (level == poolLevel) {
    String sRenderText=glEventListener.getShortInfo();
    int iMaxChars;
    if (layoutRenderStyle instanceof ListLayoutRenderStyle) {
      iMaxChars=80;
    }
 else {
      iMaxChars=20;
    }
    if (sRenderText.length() > iMaxChars && scale.x() < 0.03f) {
      sRenderText=sRenderText.subSequence(0,iMaxChars - 3) + ""String_Node_Str"";
    }
    float fTextScalingFactor=0.09f;
    float fTextXPosition=0f;
    if (element.getID() == iMouseOverObjectID) {
      renderPoolSelection(gl,translation.x() - 0.4f / fAspectRatio,translation.y() * scale.y() + 5.2f,(float)textRenderer.getBounds(sRenderText).getWidth() * 0.06f + 23,6f,element);
      gl.glTranslatef(0.8f,1.3f,0);
      fTextScalingFactor=0.075f;
      fTextXPosition=12f;
    }
 else {
      Texture tempTexture=iconTextureManager.getIconTexture(gl,EIconTextures.POOL_VIEW_BACKGROUND);
      tempTexture.enable();
      tempTexture.bind();
      float fFrameWidth=9.5f;
      TextureCoords texCoords=tempTexture.getImageTexCoords();
      gl.glColor4f(1,1,1,0.75f);
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(-0.7f,-0.6f + fFrameWidth,-0.01f);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(-0.7f + fFrameWidth,-0.6f + fFrameWidth,-0.01f);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(-0.7f + fFrameWidth,-0.6f,-0.01f);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(-0.7f,-0.6f,-0.01f);
      gl.glEnd();
      tempTexture.disable();
      fTextXPosition=9.5f;
    }
    int iNumberOfGenesSelected=glEventListener.getNumberOfSelections(ESelectionType.SELECTION);
    int iNumberOfGenesMouseOver=glEventListener.getNumberOfSelections(ESelectionType.MOUSE_OVER);
    textRenderer.begin3DRendering();
    if (element.getID() == iMouseOverObjectID) {
      textRenderer.setColor(1,1,1,1);
    }
 else {
      textRenderer.setColor(0,0,0,1);
    }
    if (iNumberOfGenesMouseOver == 0 && iNumberOfGenesSelected == 0) {
      textRenderer.draw3D(sRenderText,fTextXPosition,3f,0,fTextScalingFactor);
    }
 else {
      textRenderer.draw3D(sRenderText,fTextXPosition,4.5f,0,fTextScalingFactor);
    }
    textRenderer.end3DRendering();
    gl.glLineWidth(4);
    if (element.getID() == iMouseOverObjectID) {
      gl.glTranslatef(2.2f,0.5f,0);
    }
    if (iNumberOfGenesMouseOver > 0) {
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(-2.5f,0,0);
      }
      textRenderer.begin3DRendering();
      textRenderer.draw3D(Integer.toString(iNumberOfGenesMouseOver),fTextXPosition + 9,2.4f,0,fTextScalingFactor);
      textRenderer.end3DRendering();
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(2.5f,0,0);
      }
      gl.glColor4fv(GeneralRenderStyle.MOUSE_OVER_COLOR,0);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(10,2.7f,0f);
      gl.glVertex3f(18,2.7f,0f);
      gl.glVertex3f(20,2.7f,0f);
      gl.glVertex3f(29,2.7f,0f);
      gl.glEnd();
    }
    if (iNumberOfGenesSelected > 0) {
      if (iNumberOfGenesMouseOver > 0) {
        gl.glTranslatef(0,-1.8f,0);
      }
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(-2.5f,0,0);
      }
      textRenderer.begin3DRendering();
      textRenderer.draw3D(Integer.toString(iNumberOfGenesSelected),fTextXPosition + 9,2.5f,0,fTextScalingFactor);
      textRenderer.end3DRendering();
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(2.5f,0,0);
      }
      gl.glColor4fv(GeneralRenderStyle.SELECTED_COLOR,0);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(10,2.9f,0f);
      gl.glVertex3f(18,2.9f,0f);
      gl.glVertex3f(20,2.9f,0f);
      gl.glVertex3f(29,2.9f,0f);
      gl.glEnd();
      if (iNumberOfGenesMouseOver > 0) {
        gl.glTranslatef(0,1.8f,0);
      }
    }
    if (element.getID() == iMouseOverObjectID) {
      gl.glTranslatef(-2.2f,-0.5f,0);
    }
  }
  if (level != externalSelectionLevel && level != poolLevel) {
    if (level.equals(focusLevel)) {
      renderBucketWall(gl,false,element);
    }
 else {
      renderBucketWall(gl,true,element);
    }
  }
  if (!bEnableNavigationOverlay || !level.equals(stackLevel)) {
    glEventListener.displayRemote(gl);
  }
 else {
    renderNavigationOverlay(gl,element.getID());
  }
  gl.glPopMatrix();
  gl.glPopName();
  gl.glPopName();
}","private void renderRemoteLevelElement(final GL gl,RemoteLevelElement element,RemoteLevel level){
  if (element.getContainedElementID() == -1)   return;
  int iViewID=element.getContainedElementID();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.REMOTE_LEVEL_ELEMENT,element.getID()));
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.VIEW_SELECTION,iViewID));
  AGLEventListener glEventListener=generalManager.getViewGLCanvasManager().getGLEventListener(iViewID);
  if (glEventListener == null) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"");
    return;
  }
  gl.glPushMatrix();
  Transform transform=element.getTransform();
  Vec3f translation=transform.getTranslation();
  Rotf rot=transform.getRotation();
  Vec3f scale=transform.getScale();
  Vec3f axis=new Vec3f();
  float fAngle=rot.get(axis);
  gl.glTranslatef(translation.x(),translation.y(),translation.z());
  gl.glRotatef(Vec3f.convertRadiant2Grad(fAngle),axis.x(),axis.y(),axis.z());
  gl.glScalef(scale.x(),scale.y(),scale.z());
  if (level == poolLevel) {
    String sRenderText=glEventListener.getShortInfo();
    int iMaxChars;
    if (layoutRenderStyle instanceof ListLayoutRenderStyle) {
      iMaxChars=80;
    }
 else {
      iMaxChars=20;
    }
    if (sRenderText.length() > iMaxChars && scale.x() < 0.03f) {
      sRenderText=sRenderText.subSequence(0,iMaxChars - 3) + ""String_Node_Str"";
    }
    float fTextScalingFactor=0.09f;
    float fTextXPosition=0f;
    if (element.getID() == iMouseOverObjectID) {
      renderPoolSelection(gl,translation.x() - 0.4f / fAspectRatio,translation.y() * scale.y() + 5.2f,(float)textRenderer.getBounds(sRenderText).getWidth() * 0.06f + 23,6f,element);
      gl.glTranslatef(0.8f,1.3f,0);
      fTextScalingFactor=0.075f;
      fTextXPosition=12f;
    }
 else {
      Texture tempTexture=iconTextureManager.getIconTexture(gl,EIconTextures.POOL_VIEW_BACKGROUND);
      tempTexture.enable();
      tempTexture.bind();
      float fFrameWidth=9.5f;
      TextureCoords texCoords=tempTexture.getImageTexCoords();
      gl.glColor4f(1,1,1,0.75f);
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(-0.7f,-0.6f + fFrameWidth,-0.01f);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(-0.7f + fFrameWidth,-0.6f + fFrameWidth,-0.01f);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(-0.7f + fFrameWidth,-0.6f,-0.01f);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(-0.7f,-0.6f,-0.01f);
      gl.glEnd();
      tempTexture.disable();
      fTextXPosition=9.5f;
    }
    int iNumberOfGenesSelected=glEventListener.getNumberOfSelections(ESelectionType.SELECTION);
    int iNumberOfGenesMouseOver=glEventListener.getNumberOfSelections(ESelectionType.MOUSE_OVER);
    textRenderer.begin3DRendering();
    if (element.getID() == iMouseOverObjectID) {
      textRenderer.setColor(1,1,1,1);
    }
 else {
      textRenderer.setColor(0,0,0,1);
    }
    if (iNumberOfGenesMouseOver == 0 && iNumberOfGenesSelected == 0) {
      textRenderer.draw3D(sRenderText,fTextXPosition,3f,0,fTextScalingFactor);
    }
 else {
      textRenderer.draw3D(sRenderText,fTextXPosition,4.5f,0,fTextScalingFactor);
    }
    textRenderer.end3DRendering();
    gl.glLineWidth(4);
    if (element.getID() == iMouseOverObjectID) {
      gl.glTranslatef(2.2f,0.5f,0);
    }
    if (iNumberOfGenesMouseOver > 0) {
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(-2.5f,0,0);
      }
      textRenderer.begin3DRendering();
      textRenderer.draw3D(Integer.toString(iNumberOfGenesMouseOver),fTextXPosition + 9,2.4f,0,fTextScalingFactor);
      textRenderer.end3DRendering();
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(2.5f,0,0);
      }
      gl.glColor4fv(GeneralRenderStyle.MOUSE_OVER_COLOR,0);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(10,2.7f,0f);
      gl.glVertex3f(18,2.7f,0f);
      gl.glVertex3f(20,2.7f,0f);
      gl.glVertex3f(29,2.7f,0f);
      gl.glEnd();
    }
    if (iNumberOfGenesSelected > 0) {
      if (iNumberOfGenesMouseOver > 0) {
        gl.glTranslatef(0,-1.8f,0);
      }
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(-2.5f,0,0);
      }
      textRenderer.begin3DRendering();
      textRenderer.draw3D(Integer.toString(iNumberOfGenesSelected),fTextXPosition + 9,2.5f,0,fTextScalingFactor);
      textRenderer.end3DRendering();
      if (element.getID() == iMouseOverObjectID) {
        gl.glTranslatef(2.5f,0,0);
      }
      gl.glColor4fv(GeneralRenderStyle.SELECTED_COLOR,0);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(10,2.9f,0f);
      gl.glVertex3f(18,2.9f,0f);
      gl.glVertex3f(20,2.9f,0f);
      gl.glVertex3f(29,2.9f,0f);
      gl.glEnd();
      if (iNumberOfGenesMouseOver > 0) {
        gl.glTranslatef(0,1.8f,0);
      }
    }
    if (element.getID() == iMouseOverObjectID) {
      gl.glTranslatef(-2.2f,-0.5f,0);
    }
  }
  if (level != externalSelectionLevel && level != poolLevel) {
    if (level.equals(focusLevel)) {
      renderBucketWall(gl,false,element);
    }
 else {
      renderBucketWall(gl,true,element);
    }
  }
  if (!bEnableNavigationOverlay || !level.equals(stackLevel)) {
    glEventListener.displayRemote(gl);
  }
 else {
    renderNavigationOverlay(gl,element.getID());
  }
  gl.glPopMatrix();
  gl.glPopName();
  gl.glPopName();
}",0.9909498125971296
58812,"@Override public void run(){
  super.run();
  ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(ApplicationConstants.CORE_SPRING_CONFIG_FILE);
  final Dispatcher dispatcher=(Dispatcher)context.getBean(""String_Node_Str"");
  DownloadJobFilter downloadFilter=new DownloadJobFilter();
  downloadFilter.setAllowedHostNames(new String[]{""String_Node_Str""});
  downloadFilter.setMaxRecursionDepth(2);
  downloadFilter.setSaveToDisk(new String[]{""String_Node_Str""});
  dispatcher.addJobFilter(downloadFilter);
  RegExpJobFilter regExpFilter=new RegExpJobFilter();
  RegExpFilterRule regExpFilterRule=new RegExpJobFilter.RegExpFilterRule(""String_Node_Str"" + ""String_Node_Str"");
  RegExpFilterAction regExpFilterAction=new RegExpJobFilter.RegExpFilterAction();
  regExpFilterAction.setAccept(false);
  regExpFilterRule.setMatchAction(regExpFilterAction);
  regExpFilter.addFilterRule(regExpFilterRule);
  dispatcher.addJobFilter(regExpFilter);
  DownloadJobFactory jobFactory=(DownloadJobFactory)context.getBean(""String_Node_Str"");
  String sOutputFileName=IGeneralManager.CALEYDO_HOME_PATH;
  UrlDownloadJob job=jobFactory.createDownloadJob();
  try {
    job.setUrl(new URL(""String_Node_Str""));
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  job.setSavePath(new File(sOutputFileName));
  job.setIgnoreFilter(true);
  dispatcher.addJob(job);
  processJobs(dispatcher);
  triggerPathwayListGeneration();
  if (triggeringCommand != null) {
    triggeringCommand.setFinishedKeggImageCacher();
  }
}","@Override public void run(){
  super.run();
  ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(ApplicationConstants.CORE_SPRING_CONFIG_FILE);
  final Dispatcher dispatcher=(Dispatcher)context.getBean(""String_Node_Str"");
  DownloadJobFilter downloadFilter=new DownloadJobFilter();
  downloadFilter.setAllowedHostNames(new String[]{""String_Node_Str"",""String_Node_Str""});
  downloadFilter.setMaxRecursionDepth(2);
  downloadFilter.setSaveToDisk(new String[]{""String_Node_Str""});
  dispatcher.addJobFilter(downloadFilter);
  RegExpJobFilter regExpFilter=new RegExpJobFilter();
  RegExpFilterRule regExpFilterRule=new RegExpJobFilter.RegExpFilterRule(""String_Node_Str"" + ""String_Node_Str"");
  RegExpFilterAction regExpFilterAction=new RegExpJobFilter.RegExpFilterAction();
  regExpFilterAction.setAccept(false);
  regExpFilterRule.setMatchAction(regExpFilterAction);
  regExpFilter.addFilterRule(regExpFilterRule);
  dispatcher.addJobFilter(regExpFilter);
  DownloadJobFactory jobFactory=(DownloadJobFactory)context.getBean(""String_Node_Str"");
  String sOutputFileName=IGeneralManager.CALEYDO_HOME_PATH;
  UrlDownloadJob job=jobFactory.createDownloadJob();
  try {
    job.setUrl(new URL(""String_Node_Str""));
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  job.setSavePath(new File(sOutputFileName));
  job.setIgnoreFilter(true);
  dispatcher.addJob(job);
  processJobs(dispatcher);
  triggerPathwayListGeneration();
  if (triggeringCommand != null) {
    triggeringCommand.setFinishedKeggImageCacher();
  }
}",0.9941709844559584
58813,"@Override public synchronized void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursor();
  bRedrawTextures=true;
}","@Override public synchronized void initData(){
  super.initData();
  initHierarchy();
  calculateTextures();
  initPosCursor();
  glHeatMapView.setSet(set);
  glHeatMapView.initData();
  bRedrawTextures=true;
}",0.8429752066115702
58814,"/** 
 * Function responsible for initialization of hierarchy levels. Depending on the amount of samples in the data set 2 or 3 levels are used.
 */
private void initHierarchy(){
  if (set == null)   return;
  createHeatMap();
  iNumberOfElements=set.getVA(iContentVAID).size();
  if (iNumberOfElements < MIN_SAMPLES_PER_HEATMAP) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (iNumberOfElements < 100) {
    bSkipLevel1=true;
    iSelectorBar=1;
    iSamplesPerTexture=iNumberOfElements;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
 else {
    bSkipLevel1=false;
    iSelectorBar=1;
    iSamplesPerTexture=(int)Math.floor(iNumberOfElements / 5);
    if (iSamplesPerTexture > 250)     iSamplesPerTexture=250;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
  if (iSamplesPerHeatmap > MAX_SAMPLES_PER_HEATMAP)   iSamplesPerTexture=100;
  if (iSamplesPerHeatmap < MIN_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MIN_SAMPLES_PER_HEATMAP;
}","/** 
 * Function responsible for initialization of hierarchy levels. Depending on the amount of samples in the data set 2 or 3 levels are used.
 */
private void initHierarchy(){
  if (set == null)   return;
  iNumberOfElements=set.getVA(iContentVAID).size();
  if (iNumberOfElements < MIN_SAMPLES_PER_HEATMAP) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (iNumberOfElements < 100) {
    bSkipLevel1=true;
    iSelectorBar=1;
    iSamplesPerTexture=iNumberOfElements;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
 else {
    bSkipLevel1=false;
    iSelectorBar=1;
    iSamplesPerTexture=(int)Math.floor(iNumberOfElements / 5);
    if (iSamplesPerTexture > 250)     iSamplesPerTexture=250;
    iSamplesPerHeatmap=(int)Math.floor(iSamplesPerTexture / 3);
  }
  if (iSamplesPerHeatmap > MAX_SAMPLES_PER_HEATMAP)   iSamplesPerTexture=100;
  if (iSamplesPerHeatmap < MIN_SAMPLES_PER_HEATMAP)   iSamplesPerHeatmap=MIN_SAMPLES_PER_HEATMAP;
}",0.990379746835443
58815,"/** 
 * Create embedded heatmap, register heatmap as a sender and receiver
 * @param
 */
private void createHeatMap(){
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_HEAT_MAP_3D);
  float fHeatMapHeight=viewFrustum.getHeight();
  float fHeatMapWidth=viewFrustum.getWidth();
  cmdView.setAttributes(EProjectionMode.ORTHOGRAPHIC,0,fHeatMapHeight,0,fHeatMapWidth,-20,20,set,-1);
  cmdView.doCommand();
  glHeatMapView=(GLHeatMap)cmdView.getCreatedObject();
  GeneralManager.get().getUseCase().addView(glHeatMapView);
  glHeatMapView.setUseCase(useCase);
  glHeatMapView.setRenderedRemote(true);
  glHeatMapView.initData();
}","/** 
 * Create embedded heatmap, register heatmap as a sender and receiver
 * @param
 */
private void createHeatMap(){
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_HEAT_MAP_3D);
  float fHeatMapHeight=viewFrustum.getHeight();
  float fHeatMapWidth=viewFrustum.getWidth();
  cmdView.setAttributes(EProjectionMode.ORTHOGRAPHIC,0,fHeatMapHeight,0,fHeatMapWidth,-20,20,set,-1);
  cmdView.doCommand();
  glHeatMapView=(GLHeatMap)cmdView.getCreatedObject();
  GeneralManager.get().getUseCase().addView(glHeatMapView);
  glHeatMapView.setUseCase(useCase);
  glHeatMapView.setRenderedRemote(true);
}",0.9799713876967096
58816,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHierarchicalHeatMap(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HIER_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  fAlXDistances=new ArrayList<Float>();
  bUseClusteredVA=false;
  glKeyListener=new GLHierarchicalHeatMapKeyListener(this);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHierarchicalHeatMap(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HIER_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  fAlXDistances=new ArrayList<Float>();
  bUseClusteredVA=false;
  glKeyListener=new GLHierarchicalHeatMapKeyListener(this);
  createHeatMap();
}",0.989713048186248
58817,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  if (Application.applicationMode != EApplicationMode.PATHWAY_VIEWER) {
    try {
      GeneralManager.get().getIDManager().getInternalFromExternalID(453010);
      AGLEventListener glyph1=createGLEventListener(ECommandType.CREATE_GL_GLYPH,-1,true);
      iAlContainedViewIDs.add(glyph1.getID());
      AGLEventListener glyph2=createGLEventListener(ECommandType.CREATE_GL_GLYPH,-1,true);
      iAlContainedViewIDs.add(glyph2.getID());
    }
 catch (    IllegalArgumentException e) {
      GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"");
    }
  }
  GLRemoteRendering bucket=(GLRemoteRendering)createGLRemoteEventListener(ECommandType.CREATE_GL_BUCKET_3D,glCanvas.getID(),true,iAlContainedViewIDs);
  SerializedHeatMapView heatMap=new SerializedHeatMapView();
  bucket.addInitialRemoteView(heatMap);
  SerializedParallelCoordinatesView parCoords=new SerializedParallelCoordinatesView();
  bucket.addInitialRemoteView(parCoords);
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  if (Application.applicationMode != EApplicationMode.PATHWAY_VIEWER) {
    try {
      GeneralManager.get().getIDManager().getInternalFromExternalID(453010);
      AGLEventListener glyph1=createGLEventListener(ECommandType.CREATE_GL_GLYPH,-1,true);
      iAlContainedViewIDs.add(glyph1.getID());
      AGLEventListener glyph2=createGLEventListener(ECommandType.CREATE_GL_GLYPH,-1,true);
      iAlContainedViewIDs.add(glyph2.getID());
    }
 catch (    IllegalArgumentException e) {
      GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"");
    }
  }
  GLRemoteRendering bucket=(GLRemoteRendering)createGLRemoteEventListener(ECommandType.CREATE_GL_BUCKET_3D,glCanvas.getID(),true,iAlContainedViewIDs);
  if (Application.applicationMode != EApplicationMode.PATHWAY_VIEWER) {
    SerializedHeatMapView heatMap=new SerializedHeatMapView();
    bucket.addInitialRemoteView(heatMap);
    SerializedParallelCoordinatesView parCoords=new SerializedParallelCoordinatesView();
    bucket.addInitialRemoteView(parCoords);
  }
}",0.9620938628158844
58818,"@Override public IWizardPage getNextPage(IWizardPage page){
  if (page instanceof NewOrExistingProjectPage) {
    if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.NEW_PROJECT) {
      NewProjectImportDataPage nextPage=(NewProjectImportDataPage)getPage(NewProjectImportDataPage.PAGE_NAME);
      nextPage.setPageComplete(true);
      return nextPage;
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.EXISTING_PROJECT) {
      FileOpenProjectAction fileOpenProjectAction=new FileOpenProjectAction(this.getShell());
      fileOpenProjectAction.run();
      this.performFinish();
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.SAMPLE_DATA_RANDOM) {
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.SAMPLE_DATA_REAL) {
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.PATHWAY_VIEWER_MODE) {
      for (      AGLEventListener glEventListener : GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners()) {
        if (glEventListener instanceof GLHeatMap || glEventListener instanceof GLParallelCoordinates) {
          GeneralManager.get().getViewGLCanvasManager().unregisterGLEventListener(glEventListener);
        }
      }
      this.performFinish();
    }
  }
  return page;
}","@Override public IWizardPage getNextPage(IWizardPage page){
  if (page instanceof NewOrExistingProjectPage) {
    if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.NEW_PROJECT) {
      NewProjectImportDataPage nextPage=(NewProjectImportDataPage)getPage(NewProjectImportDataPage.PAGE_NAME);
      nextPage.setPageComplete(true);
      return nextPage;
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.EXISTING_PROJECT) {
      FileOpenProjectAction fileOpenProjectAction=new FileOpenProjectAction(this.getShell());
      fileOpenProjectAction.run();
      this.performFinish();
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.SAMPLE_DATA_RANDOM) {
    }
 else     if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).getProjectType() == EProjectType.SAMPLE_DATA_REAL) {
    }
  }
  return page;
}",0.7856037151702786
58819,"@Override public boolean performFinish(){
  if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).isPageComplete()) {
    NewOrExistingProjectPage page=(NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME);
    IUseCase useCase;
    if (page.getUseCaseMode() == EUseCaseMode.GENETIC_DATA) {
      useCase=new GeneticUseCase();
      if (page.getProjectType() == EProjectType.PATHWAY_VIEWER_MODE) {
        Application.applicationMode=EApplicationMode.PATHWAY_VIEWER;
      }
 else       if (page.getProjectType() == EProjectType.SAMPLE_DATA_RANDOM) {
        Application.applicationMode=EApplicationMode.SAMPLE_DATA_RANDOM;
      }
 else       if (page.getProjectType() == EProjectType.SAMPLE_DATA_REAL) {
        Application.applicationMode=EApplicationMode.SAMPLE_DATA_REAL;
      }
 else       if (page.getProjectType() == EProjectType.NEW_PROJECT) {
        Application.applicationMode=EApplicationMode.STANDARD;
      }
    }
 else     if (page.getUseCaseMode() == EUseCaseMode.UNSPECIFIED_DATA) {
      useCase=new UnspecifiedUseCase();
    }
 else     throw new IllegalStateException(""String_Node_Str"");
    GeneralManager.get().setUseCase(useCase);
    return true;
  }
  return false;
}","@Override public boolean performFinish(){
  if (((NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME)).isPageComplete()) {
    NewOrExistingProjectPage page=(NewOrExistingProjectPage)getPage(NewOrExistingProjectPage.PAGE_NAME);
    IUseCase useCase;
    if (page.getUseCaseMode() == EUseCaseMode.GENETIC_DATA) {
      useCase=new GeneticUseCase();
      if (page.getProjectType() == EProjectType.SAMPLE_DATA_RANDOM) {
        Application.applicationMode=EApplicationMode.SAMPLE_DATA_RANDOM;
      }
 else       if (page.getProjectType() == EProjectType.SAMPLE_DATA_REAL) {
        Application.applicationMode=EApplicationMode.SAMPLE_DATA_REAL;
      }
 else       if (page.getProjectType() == EProjectType.NEW_PROJECT) {
        Application.applicationMode=EApplicationMode.STANDARD;
      }
    }
 else     if (page.getUseCaseMode() == EUseCaseMode.UNSPECIFIED_DATA) {
      useCase=new UnspecifiedUseCase();
    }
 else     throw new IllegalStateException(""String_Node_Str"");
    GeneralManager.get().setUseCase(useCase);
    return true;
  }
  return false;
}",0.9333910034602076
58820,"private void createGeneticUseCaseTab(TabFolder tabFolder){
  geneticDataUseCaseTab=new TabItem(tabFolder,SWT.NONE);
  geneticDataUseCaseTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  geneticDataUseCaseTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  Button buttonSampleDataMode=new Button(composite,SWT.RADIO);
  buttonSampleDataMode.setText(""String_Node_Str"");
  buttonSampleDataMode.setSelection(true);
  buttonSampleDataMode.setLayoutData(new GridData(GridData.FILL_BOTH));
  Link link=new Link(composite,SWT.NULL);
  link.setText(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK + ""String_Node_Str"");
  link.setLayoutData(new GridData(GridData.FILL_BOTH));
  link.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      String osName=System.getProperty(""String_Node_Str"");
      try {
        if (osName.startsWith(""String_Node_Str"")) {
          Class fileMgr=Class.forName(""String_Node_Str"");
          Method openURL=fileMgr.getDeclaredMethod(""String_Node_Str"",new Class[]{String.class});
          openURL.invoke(null,new Object[]{HCC_SAMPLE_DATASET_PAPER_LINK});
        }
 else         if (osName.startsWith(""String_Node_Str"")) {
          Runtime.getRuntime().exec(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK);
        }
 else {
          String[] browsers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          String browser=null;
          for (int count=0; count < browsers.length && browser == null; count++)           if (Runtime.getRuntime().exec(new String[]{""String_Node_Str"",browsers[count]}).waitFor() == 0) {
            browser=browsers[count];
          }
          if (browser == null)           throw new Exception(""String_Node_Str"");
 else {
            Runtime.getRuntime().exec(new String[]{browser,HCC_SAMPLE_DATASET_PAPER_LINK});
          }
        }
      }
 catch (      Exception exception) {
      }
    }
  }
);
  Button buttonRandomSampleDataMode=new Button(composite,SWT.RADIO);
  buttonRandomSampleDataMode.setText(""String_Node_Str"");
  buttonRandomSampleDataMode.setLayoutData(new GridData(GridData.FILL_BOTH));
  Button buttonNewProject=new Button(composite,SWT.RADIO);
  buttonNewProject.setText(""String_Node_Str"");
  buttonNewProject.setLayoutData(new GridData(GridData.FILL_BOTH));
  setPageComplete(true);
  Button buttonPathwayViewerMode=new Button(composite,SWT.RADIO);
  buttonPathwayViewerMode.setText(""String_Node_Str"");
  buttonPathwayViewerMode.setLayoutData(new GridData(GridData.FILL_BOTH));
  Button buttonExistingProject=new Button(composite,SWT.RADIO);
  buttonExistingProject.setText(""String_Node_Str"");
  buttonExistingProject.setEnabled(false);
  buttonExistingProject.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Button btnLoadPathwayData=new Button(composite,SWT.CHECK);
  btnLoadPathwayData.setText(""String_Node_Str"");
  btnLoadPathwayData.setSelection(true);
  btnLoadPathwayData.setEnabled(true);
  btnLoadPathwayData.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (Application.caleydoCore.getGeneralManager().getPreferenceStore().getBoolean(PreferenceConstants.FIRST_START) && !Application.isInternetConnectionOK()) {
    btnLoadPathwayData.setEnabled(false);
  }
  btnLoadPathwayData.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean bLoadPathwayData=((Button)e.widget).getSelection();
      if (projectType == EProjectType.PATHWAY_VIEWER_MODE && !bLoadPathwayData) {
        MessageBox messageBox=new MessageBox(new Shell(),SWT.OK);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
        ((Button)e.widget).setSelection(true);
        return;
      }
      Application.bLoadPathwayData=bLoadPathwayData;
    }
  }
);
  buttonNewProject.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.NEW_PROJECT;
      setPageComplete(true);
    }
  }
);
  buttonExistingProject.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.EXISTING_PROJECT;
      setPageComplete(true);
    }
  }
);
  buttonPathwayViewerMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.PATHWAY_VIEWER_MODE;
      btnLoadPathwayData.setSelection(true);
      setPageComplete(true);
    }
  }
);
  buttonRandomSampleDataMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.SAMPLE_DATA_RANDOM;
      setPageComplete(true);
    }
  }
);
  buttonSampleDataMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.SAMPLE_DATA_REAL;
      setPageComplete(true);
    }
  }
);
}","private void createGeneticUseCaseTab(TabFolder tabFolder){
  geneticDataUseCaseTab=new TabItem(tabFolder,SWT.NONE);
  geneticDataUseCaseTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  geneticDataUseCaseTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  Button buttonSampleDataMode=new Button(composite,SWT.RADIO);
  buttonSampleDataMode.setText(""String_Node_Str"");
  buttonSampleDataMode.setSelection(true);
  buttonSampleDataMode.setLayoutData(new GridData(GridData.FILL_BOTH));
  Link link=new Link(composite,SWT.NULL);
  link.setText(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK + ""String_Node_Str"");
  link.setLayoutData(new GridData(GridData.FILL_BOTH));
  link.addSelectionListener(new SelectionAdapter(){
    @SuppressWarnings(""String_Node_Str"") @Override public void widgetSelected(    SelectionEvent e){
      String osName=System.getProperty(""String_Node_Str"");
      try {
        if (osName.startsWith(""String_Node_Str"")) {
          Class fileMgr=Class.forName(""String_Node_Str"");
          Method openURL=fileMgr.getDeclaredMethod(""String_Node_Str"",new Class[]{String.class});
          openURL.invoke(null,new Object[]{HCC_SAMPLE_DATASET_PAPER_LINK});
        }
 else         if (osName.startsWith(""String_Node_Str"")) {
          Runtime.getRuntime().exec(""String_Node_Str"" + HCC_SAMPLE_DATASET_PAPER_LINK);
        }
 else {
          String[] browsers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          String browser=null;
          for (int count=0; count < browsers.length && browser == null; count++)           if (Runtime.getRuntime().exec(new String[]{""String_Node_Str"",browsers[count]}).waitFor() == 0) {
            browser=browsers[count];
          }
          if (browser == null)           throw new Exception(""String_Node_Str"");
 else {
            Runtime.getRuntime().exec(new String[]{browser,HCC_SAMPLE_DATASET_PAPER_LINK});
          }
        }
      }
 catch (      Exception exception) {
      }
    }
  }
);
  Button buttonRandomSampleDataMode=new Button(composite,SWT.RADIO);
  buttonRandomSampleDataMode.setText(""String_Node_Str"");
  buttonRandomSampleDataMode.setLayoutData(new GridData(GridData.FILL_BOTH));
  Button buttonNewProject=new Button(composite,SWT.RADIO);
  buttonNewProject.setText(""String_Node_Str"");
  buttonNewProject.setLayoutData(new GridData(GridData.FILL_BOTH));
  setPageComplete(true);
  Button buttonExistingProject=new Button(composite,SWT.RADIO);
  buttonExistingProject.setText(""String_Node_Str"");
  buttonExistingProject.setEnabled(false);
  buttonExistingProject.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Button btnLoadPathwayData=new Button(composite,SWT.CHECK);
  btnLoadPathwayData.setText(""String_Node_Str"");
  btnLoadPathwayData.setSelection(true);
  btnLoadPathwayData.setEnabled(true);
  btnLoadPathwayData.setLayoutData(new GridData(GridData.FILL_BOTH));
  if (Application.caleydoCore.getGeneralManager().getPreferenceStore().getBoolean(PreferenceConstants.FIRST_START) && !Application.isInternetConnectionOK()) {
    btnLoadPathwayData.setEnabled(false);
  }
  btnLoadPathwayData.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      boolean bLoadPathwayData=((Button)e.widget).getSelection();
      Application.bLoadPathwayData=bLoadPathwayData;
    }
  }
);
  buttonNewProject.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.NEW_PROJECT;
      setPageComplete(true);
    }
  }
);
  buttonExistingProject.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.EXISTING_PROJECT;
      setPageComplete(true);
    }
  }
);
  buttonRandomSampleDataMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.SAMPLE_DATA_RANDOM;
      setPageComplete(true);
    }
  }
);
  buttonSampleDataMode.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      projectType=EProjectType.SAMPLE_DATA_REAL;
      setPageComplete(true);
    }
  }
);
}",0.9083648591845314
58821,"public <KeyType,ValueType>ValueType getID(EMappingType type,KeyType key);","/** 
 * Returns the mapped ID of type ValueType or null if no such mapping exists.
 * @param < KeyType > the type of the key used in the mapping
 * @param < ValueType > the type of the value used in the mapping
 * @param type the mapping type, specifying the actual relationship between key and value
 * @param key the key for which the mapping is requested
 * @return the value, or null if no such mapping exists
 */
public <KeyType,ValueType>ValueType getID(EMappingType type,KeyType key);",0.2588652482269503
58822,"public int getRefSeqFromStorageIndex(int index){
  Integer iRefSeqID=idMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,index);
  if (iRefSeqID == null)   return -1;
  return iRefSeqID;
}","/** 
 * Converts a storage index to a refSeq int. Returns -1 if no mapping can be found.
 * @param index The index in the storage which should be converted to a refseq
 * @return the int representation of a refseq, or -1 if no mapping was found
 */
public int getRefSeqFromStorageIndex(int index){
  Integer iRefSeqID=idMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,index);
  if (iRefSeqID == null)   return -1;
  return iRefSeqID;
}",0.6244343891402715
58823,"public PathwayVertexGraphItem convertGeneIDToPathwayVertex(EIDType idType,int geneID){
  int iGraphItemID=0;
  Integer iDavidID=-1;
  if (idType == EIDType.REFSEQ_MRNA_INT) {
    iDavidID=GeneralManager.get().getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,geneID);
  }
 else   if (idType == EIDType.DAVID) {
    iDavidID=geneID;
  }
 else   return null;
  if (iDavidID == null || iDavidID == -1)   throw new IllegalStateException(""String_Node_Str"");
  iGraphItemID=GeneralManager.get().getPathwayItemManager().getPathwayVertexGraphItemIdByDavidId(iDavidID);
  if (iGraphItemID == -1) {
    return null;
  }
  return (PathwayVertexGraphItem)GeneralManager.get().getPathwayItemManager().getItem(iGraphItemID);
}","/** 
 * TODO: Marc document
 * @param idType
 * @param geneID
 * @return the PathwayVertexGraphItem corresponding to the mapping or null if no such mapping exists
 */
public PathwayVertexGraphItem convertGeneIDToPathwayVertex(EIDType idType,int geneID){
  int iGraphItemID=0;
  Integer iDavidID=-1;
  if (idType == EIDType.REFSEQ_MRNA_INT) {
    iDavidID=GeneralManager.get().getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,geneID);
  }
 else   if (idType == EIDType.DAVID) {
    iDavidID=geneID;
  }
 else   return null;
  if (iDavidID == null || iDavidID == -1)   throw new IllegalStateException(""String_Node_Str"");
  iGraphItemID=GeneralManager.get().getPathwayItemManager().getPathwayVertexGraphItemIdByDavidId(iDavidID);
  if (iGraphItemID == -1) {
    return null;
  }
  return (PathwayVertexGraphItem)GeneralManager.get().getPathwayItemManager().getItem(iGraphItemID);
}",0.8969771745835904
58824,"public String getRefSeqStringFromStorageIndex(int iIndex){
  int iRefSeqID=getRefSeqFromStorageIndex(iIndex);
  return idMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefSeqID);
}","/** 
 * Returns the refSeq String mapped to a storage index, or null if no string was found
 * @param index the storage index for which the mapping is requested
 * @return the String containing the refSeq, or null if no such mapping existed.
 */
public String getRefSeqStringFromStorageIndex(int index){
  int iRefSeqID=getRefSeqFromStorageIndex(index);
  return idMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefSeqID);
}",0.6125
58825,"public Set<PathwayGraph> getPathwayGraphsByGeneID(EIDType idType,int geneID){
  Set<PathwayGraph> newPathways=new HashSet<PathwayGraph>();
  PathwayVertexGraphItem pathwayVertexGraphItem=convertGeneIDToPathwayVertex(idType,geneID);
  List<IGraphItem> pathwayItems=pathwayVertexGraphItem.getAllItemsByProp(EGraphItemProperty.ALIAS_CHILD);
  for (  IGraphItem pathwayItem : pathwayItems) {
    PathwayGraph pathwayGraph=(PathwayGraph)pathwayItem.getAllGraphByType(EGraphItemHierarchy.GRAPH_PARENT).get(0);
    newPathways.add(pathwayGraph);
  }
  return newPathways;
}","/** 
 * TODO
 * @param idType
 * @param geneID
 * @return a Set of PathwayGraphs or null if no such mapping exists
 */
public Set<PathwayGraph> getPathwayGraphsByGeneID(EIDType idType,int geneID){
  Set<PathwayGraph> newPathways=new HashSet<PathwayGraph>();
  PathwayVertexGraphItem pathwayVertexGraphItem=convertGeneIDToPathwayVertex(idType,geneID);
  if (pathwayVertexGraphItem == null)   return null;
  List<IGraphItem> pathwayItems=pathwayVertexGraphItem.getAllItemsByProp(EGraphItemProperty.ALIAS_CHILD);
  for (  IGraphItem pathwayItem : pathwayItems) {
    PathwayGraph pathwayGraph=(PathwayGraph)pathwayItem.getAllGraphByType(EGraphItemHierarchy.GRAPH_PARENT).get(0);
    newPathways.add(pathwayGraph);
  }
  return newPathways;
}",0.8680981595092024
58826,"public int getDavidIDFromStorageIndex(int index){
  int refSeq=getRefSeqFromStorageIndex(index);
  Integer david=idMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,refSeq);
  if (david == null)   return -1;
  return david;
}","/** 
 * Converts a storage index to a david ID. Returns the david ID or -1 if no mapping was found.
 * @param index The index in the storage which should be converted to a refSeq
 * @return the int representation of a david ID, or -1 if no mapping was found
 */
public int getDavidIDFromStorageIndex(int index){
  int refSeq=getRefSeqFromStorageIndex(index);
  Integer david=idMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,refSeq);
  if (david == null)   return -1;
  return david;
}",0.6401098901098901
58827,"@Override public void handleEvent(AEvent event){
  if (event instanceof LoadPathwaysByGeneEvent) {
    LoadPathwaysByGeneEvent loadEvent=(LoadPathwaysByGeneEvent)event;
    if (loadEvent.getIdType() == EIDType.DAVID || loadEvent.getIdType() == EIDType.REFSEQ_MRNA_INT) {
      handler.loadDependentPathways(GeneticIDMappingHelper.get().getPathwayGraphsByGeneID(loadEvent.getIdType(),loadEvent.getGeneID()));
    }
 else     throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void handleEvent(AEvent event){
  if (event instanceof LoadPathwaysByGeneEvent) {
    LoadPathwaysByGeneEvent loadEvent=(LoadPathwaysByGeneEvent)event;
    if (loadEvent.getIdType() == EIDType.DAVID || loadEvent.getIdType() == EIDType.REFSEQ_MRNA_INT) {
      Set<PathwayGraph> pathwayGraphs=GeneticIDMappingHelper.get().getPathwayGraphsByGeneID(loadEvent.getIdType(),loadEvent.getGeneID());
      if (pathwayGraphs == null) {
        GeneralManager.get().getLogger().log(Level.WARNING,""String_Node_Str"");
        return;
      }
      handler.loadDependentPathways(pathwayGraphs);
    }
 else     throw new IllegalStateException(""String_Node_Str"");
  }
}",0.7944492627927147
58828,"/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHeatMap(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  fAlXDistances=new ArrayList<Float>();
  glKeyListener=new GLHeatMapKeyListener(this);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param sLabel
 * @param viewFrustum
 */
public GLHeatMap(GLCaleydoCanvas glCanvas,final String sLabel,final IViewFrustum viewFrustum){
  super(glCanvas,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HEAT_MAP;
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  fAlXDistances=new ArrayList<Float>();
  glKeyListener=new GLHeatMapKeyListener(this);
}",0.8487282463186078
58829,"/** 
 * Method takes a map that contains identifier codes and creates a new resolved codes. Resolving means mapping from code to internal ID.
 */
@Override @SuppressWarnings(""String_Node_Str"") public <KeyType,ValueType>void createCodeResolvedMap(EMappingType mappingType,EMappingType destMappingType){
  Map codeResolvedMap=null;
  int iMappingErrors=0;
  EIDType originKeyType=mappingType.getTypeOrigin();
  EIDType originValueType=mappingType.getTypeTarget();
  EIDType destKeyType=destMappingType.getTypeOrigin();
  EIDType destValueType=destMappingType.getTypeTarget();
  Map<KeyType,ValueType> srcMap=(Map<KeyType,ValueType>)hashType2Mapping.get(mappingType);
  if (mappingType != EMappingType.REFSEQ_MRNA_2_DAVID) {
    hashType2Mapping.remove(mappingType);
  }
  if (originKeyType == destKeyType) {
    if (originValueType != destValueType) {
      if (originKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.INT) {
        codeResolvedMap=new HashMap<Integer,Integer>();
        EMappingType conversionType=EMappingType.valueOf(originValueType + ""String_Node_Str"" + destValueType);
        if (!mappingType.isMultiMap()) {
          codeResolvedMap=new HashMap<Integer,Integer>();
          for (          KeyType key : srcMap.keySet()) {
            codeResolvedMap.put(key,generalManager.getIDMappingManager().getID(conversionType,srcMap.get(key)));
          }
        }
 else {
          codeResolvedMap=new MultiHashMap<Integer,Integer>();
          MultiHashMap<Integer,String> srcMultiMap=(MultiHashMap<Integer,String>)srcMap;
          Integer iID=0;
          for (          KeyType key : srcMap.keySet()) {
            for (            String sID : srcMultiMap.getAll(key)) {
              iID=generalManager.getIDMappingManager().getID(conversionType,sID);
              if (iID == null || iID == -1) {
                continue;
              }
              codeResolvedMap.put(key,iID);
            }
          }
        }
      }
 else       if (originKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<Integer,String>();
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (originKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<String,String>();
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (originKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.INT) {
        EMappingType conversionType=EMappingType.valueOf(originValueType + ""String_Node_Str"" + destValueType);
        if (!mappingType.isMultiMap()) {
          codeResolvedMap=new HashMap<String,Integer>();
          for (          KeyType key : srcMap.keySet()) {
            codeResolvedMap.put(key,generalManager.getIDMappingManager().getID(conversionType,srcMap.get(key)));
          }
        }
 else {
          codeResolvedMap=new MultiHashMap<String,Integer>();
          MultiHashMap<String,String> srcMultiMap=(MultiHashMap<String,String>)srcMap;
          Integer iID=0;
          for (          KeyType key : srcMap.keySet()) {
            for (            String sID : srcMultiMap.getAll(key)) {
              iID=generalManager.getIDMappingManager().getID(conversionType,sID);
              if (iID == null || iID == -1) {
                continue;
              }
              codeResolvedMap.put(key,iID);
            }
          }
        }
      }
    }
  }
 else {
    if (originValueType == destValueType) {
      if (destKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.INT) {
        codeResolvedMap=new HashMap<Integer,Integer>();
        EMappingType conversionType=EMappingType.valueOf(originKeyType + ""String_Node_Str"" + destKeyType);
        if (!mappingType.isMultiMap()) {
          codeResolvedMap=new HashMap<Integer,Integer>();
          for (          KeyType key : srcMap.keySet()) {
            codeResolvedMap.put(generalManager.getIDMappingManager().getID(conversionType,key),srcMap.get(key));
          }
        }
 else {
          codeResolvedMap=new MultiHashMap<Integer,Integer>();
          MultiHashMap<String,Integer> srcMultiMap=(MultiHashMap<String,Integer>)srcMap;
          Integer iResolvedID=0;
          for (          KeyType key : srcMap.keySet()) {
            iResolvedID=generalManager.getIDMappingManager().getID(conversionType,key);
            if (iResolvedID == null) {
              generalManager.getLogger().log(new Status(Status.WARNING,GeneralManager.PLUGIN_ID,iMappingErrors++ + ""String_Node_Str"" + key));
              continue;
            }
            for (            Integer iID : srcMultiMap.getAll(key)) {
              if (iID == null) {
                continue;
              }
              codeResolvedMap.put(iResolvedID,iID);
            }
          }
        }
      }
 else       if (destKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<Integer,String>();
        EMappingType conversionType=EMappingType.valueOf(originKeyType + ""String_Node_Str"" + destKeyType);
        for (        KeyType key : srcMap.keySet()) {
          codeResolvedMap.put(generalManager.getIDMappingManager().getID(conversionType,key),srcMap.get(key));
        }
      }
 else       if (destKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<String,String>();
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (destKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.INT) {
        codeResolvedMap=new HashMap<String,Integer>();
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  hashType2Mapping.put(destMappingType,codeResolvedMap);
}","/** 
 * Method takes a map that contains identifier codes and creates a new resolved codes. Resolving means mapping from code to internal ID.
 */
@Override @SuppressWarnings(""String_Node_Str"") public <KeyType,ValueType>void createCodeResolvedMap(EMappingType mappingType,EMappingType destMappingType){
  Map codeResolvedMap=null;
  EIDType originKeyType=mappingType.getTypeOrigin();
  EIDType originValueType=mappingType.getTypeTarget();
  EIDType destKeyType=destMappingType.getTypeOrigin();
  EIDType destValueType=destMappingType.getTypeTarget();
  Map<KeyType,ValueType> srcMap=(Map<KeyType,ValueType>)hashType2Mapping.get(mappingType);
  if (mappingType != EMappingType.REFSEQ_MRNA_2_DAVID) {
    hashType2Mapping.remove(mappingType);
  }
  if (originKeyType == destKeyType) {
    if (originValueType != destValueType) {
      if (originKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.INT) {
        codeResolvedMap=new HashMap<Integer,Integer>();
        EMappingType conversionType=EMappingType.valueOf(originValueType + ""String_Node_Str"" + destValueType);
        if (!mappingType.isMultiMap()) {
          codeResolvedMap=new HashMap<Integer,Integer>();
          for (          KeyType key : srcMap.keySet()) {
            codeResolvedMap.put(key,generalManager.getIDMappingManager().getID(conversionType,srcMap.get(key)));
          }
        }
 else {
          codeResolvedMap=new MultiHashMap<Integer,Integer>();
          MultiHashMap<Integer,String> srcMultiMap=(MultiHashMap<Integer,String>)srcMap;
          Integer iID=0;
          for (          KeyType key : srcMap.keySet()) {
            for (            String sID : srcMultiMap.getAll(key)) {
              iID=generalManager.getIDMappingManager().getID(conversionType,sID);
              if (iID == null || iID == -1) {
                continue;
              }
              codeResolvedMap.put(key,iID);
            }
          }
        }
      }
 else       if (originKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<Integer,String>();
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (originKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<String,String>();
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (originKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.INT) {
        EMappingType conversionType=EMappingType.valueOf(originValueType + ""String_Node_Str"" + destValueType);
        if (!mappingType.isMultiMap()) {
          codeResolvedMap=new HashMap<String,Integer>();
          for (          KeyType key : srcMap.keySet()) {
            codeResolvedMap.put(key,generalManager.getIDMappingManager().getID(conversionType,srcMap.get(key)));
          }
        }
 else {
          codeResolvedMap=new MultiHashMap<String,Integer>();
          MultiHashMap<String,String> srcMultiMap=(MultiHashMap<String,String>)srcMap;
          Integer iID=0;
          for (          KeyType key : srcMap.keySet()) {
            for (            String sID : srcMultiMap.getAll(key)) {
              iID=generalManager.getIDMappingManager().getID(conversionType,sID);
              if (iID == null || iID == -1) {
                continue;
              }
              codeResolvedMap.put(key,iID);
            }
          }
        }
      }
    }
  }
 else {
    if (originValueType == destValueType) {
      if (destKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.INT) {
        codeResolvedMap=new HashMap<Integer,Integer>();
        EMappingType conversionType=EMappingType.valueOf(originKeyType + ""String_Node_Str"" + destKeyType);
        if (!mappingType.isMultiMap()) {
          codeResolvedMap=new HashMap<Integer,Integer>();
          for (          KeyType key : srcMap.keySet()) {
            codeResolvedMap.put(generalManager.getIDMappingManager().getID(conversionType,key),srcMap.get(key));
          }
        }
 else {
          codeResolvedMap=new MultiHashMap<Integer,Integer>();
          MultiHashMap<String,Integer> srcMultiMap=(MultiHashMap<String,Integer>)srcMap;
          Integer iResolvedID=0;
          for (          KeyType key : srcMap.keySet()) {
            iResolvedID=generalManager.getIDMappingManager().getID(conversionType,key);
            if (iResolvedID == null) {
              continue;
            }
            for (            Integer iID : srcMultiMap.getAll(key)) {
              if (iID == null) {
                continue;
              }
              codeResolvedMap.put(iResolvedID,iID);
            }
          }
        }
      }
 else       if (destKeyType.getStorageType() == EStorageType.INT && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<Integer,String>();
        EMappingType conversionType=EMappingType.valueOf(originKeyType + ""String_Node_Str"" + destKeyType);
        for (        KeyType key : srcMap.keySet()) {
          codeResolvedMap.put(generalManager.getIDMappingManager().getID(conversionType,key),srcMap.get(key));
        }
      }
 else       if (destKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.STRING) {
        codeResolvedMap=new HashMap<String,String>();
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (destKeyType.getStorageType() == EStorageType.STRING && destValueType.getStorageType() == EStorageType.INT) {
        codeResolvedMap=new HashMap<String,Integer>();
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  hashType2Mapping.put(destMappingType,codeResolvedMap);
}",0.8427852348993289
58830,"private float[] determineNodeColor(PathwayVertexGraphItemRep vertexRep){
  int iDavidID=generalManager.getPathwayItemManager().getDavidIdByPathwayVertexGraphItemId(vertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0).getId());
  if (iDavidID == -1 || iDavidID == 0) {
    generalManager.getLogger().log(new Status(Status.WARNING,GeneralManager.PLUGIN_ID,""String_Node_Str""));
  }
 else {
    Set<Integer> iSetRefSeq=idMappingManager.getMultiID(EMappingType.DAVID_2_REFSEQ_MRNA_INT,iDavidID);
    if (iSetRefSeq == null) {
      generalManager.getLogger().log(new Status(Status.ERROR,GeneralManager.PLUGIN_ID,""String_Node_Str"" + iDavidID));
    }
 else {
      if (iSetRefSeq.size() > 1)       return new float[]{0,1,1};
      for (      Object iRefSeqID : iSetRefSeq) {
        if (idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,((Integer)iRefSeqID)) == null) {
          break;
        }
        for (        Object iExpressionIndex : idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,((Integer)iRefSeqID))) {
          return colorMapper.getColor(glPathwayView.getSet().get(glPathwayView.iCurrentStorageIndex).getFloat(EDataRepresentation.NORMALIZED,((Integer)iExpressionIndex).intValue()));
        }
      }
    }
  }
  return null;
}","private float[] determineNodeColor(PathwayVertexGraphItemRep vertexRep){
  int iDavidID=generalManager.getPathwayItemManager().getDavidIdByPathwayVertexGraphItemId(vertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0).getId());
  if (iDavidID == -1 || iDavidID == 0) {
    generalManager.getLogger().log(new Status(Status.WARNING,GeneralManager.PLUGIN_ID,""String_Node_Str""));
  }
 else {
    Set<Integer> iSetRefSeq=idMappingManager.getMultiID(EMappingType.DAVID_2_REFSEQ_MRNA_INT,iDavidID);
    if (iSetRefSeq == null) {
    }
 else {
      if (iSetRefSeq.size() > 1)       return new float[]{0,1,1};
      for (      Object iRefSeqID : iSetRefSeq) {
        if (idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,((Integer)iRefSeqID)) == null) {
          break;
        }
        for (        Object iExpressionIndex : idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,((Integer)iRefSeqID))) {
          return colorMapper.getColor(glPathwayView.getSet().get(glPathwayView.iCurrentStorageIndex).getFloat(EDataRepresentation.NORMALIZED,((Integer)iExpressionIndex).intValue()));
        }
      }
    }
  }
  return null;
}",0.9527243589743588
58831,"public void handleSelectionUpdate(final ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() != EIDType.EXPRESSION_INDEX)   return;
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!checkInternetConnection())       return;
      int iItemsToLoad=0;
      for (      SelectionDeltaItem selectionDeltaItem : selectionDelta) {
        if (selectionDeltaItem.getSelectionType() == ESelectionType.MOUSE_OVER || selectionDeltaItem.getSelectionType() == ESelectionType.SELECTION) {
          Integer iRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,selectionDeltaItem.getPrimaryID());
          String sRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefSeqID);
          Integer iDavidID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,selectionDeltaItem.getPrimaryID());
          if (iItemsToLoad == 0) {
            String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
            browser.setUrl(sURL);
            browser.update();
            textURL.setText(sURL);
            iAlDavidID.clear();
          }
          String sOutput=""String_Node_Str"";
          sOutput=sOutput + generalManager.getIDMappingManager().getID(EMappingType.DAVID_2_GENE_SYMBOL,iDavidID);
          sOutput=sOutput + ""String_Node_Str"";
          sOutput=sOutput + sRefSeqID;
          if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
            continue;
          }
          iAlDavidID.add(iDavidID);
          iItemsToLoad++;
        }
      }
    }
  }
);
}","public void handleSelectionUpdate(final ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (selectionDelta.getIDType() != EIDType.EXPRESSION_INDEX)   return;
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      if (!checkInternetConnection())       return;
      int iItemsToLoad=0;
      for (      SelectionDeltaItem selectionDeltaItem : selectionDelta) {
        if (selectionDeltaItem.getSelectionType() == ESelectionType.MOUSE_OVER || selectionDeltaItem.getSelectionType() == ESelectionType.SELECTION) {
          Integer iRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,selectionDeltaItem.getPrimaryID());
          String sRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefSeqID);
          Integer iDavidID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,iRefSeqID);
          if (iDavidID == null)           continue;
          if (iItemsToLoad == 0) {
            String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
            browser.setUrl(sURL);
            browser.update();
            textURL.setText(sURL);
            iAlDavidID.clear();
          }
          String sOutput=""String_Node_Str"";
          sOutput=sOutput + generalManager.getIDMappingManager().getID(EMappingType.DAVID_2_GENE_SYMBOL,iDavidID);
          sOutput=sOutput + ""String_Node_Str"";
          sOutput=sOutput + sRefSeqID;
          if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
            continue;
          }
          iAlDavidID.add(iDavidID);
          iItemsToLoad++;
        }
      }
    }
  }
);
}",0.9716814159292037
58832,"public void run(){
  if (!checkInternetConnection())   return;
  int iItemsToLoad=0;
  for (  SelectionDeltaItem selectionDeltaItem : selectionDelta) {
    if (selectionDeltaItem.getSelectionType() == ESelectionType.MOUSE_OVER || selectionDeltaItem.getSelectionType() == ESelectionType.SELECTION) {
      Integer iRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,selectionDeltaItem.getPrimaryID());
      String sRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefSeqID);
      Integer iDavidID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,selectionDeltaItem.getPrimaryID());
      if (iItemsToLoad == 0) {
        String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
        browser.setUrl(sURL);
        browser.update();
        textURL.setText(sURL);
        iAlDavidID.clear();
      }
      String sOutput=""String_Node_Str"";
      sOutput=sOutput + generalManager.getIDMappingManager().getID(EMappingType.DAVID_2_GENE_SYMBOL,iDavidID);
      sOutput=sOutput + ""String_Node_Str"";
      sOutput=sOutput + sRefSeqID;
      if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
        continue;
      }
      iAlDavidID.add(iDavidID);
      iItemsToLoad++;
    }
  }
}","public void run(){
  if (!checkInternetConnection())   return;
  int iItemsToLoad=0;
  for (  SelectionDeltaItem selectionDeltaItem : selectionDelta) {
    if (selectionDeltaItem.getSelectionType() == ESelectionType.MOUSE_OVER || selectionDeltaItem.getSelectionType() == ESelectionType.SELECTION) {
      Integer iRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,selectionDeltaItem.getPrimaryID());
      String sRefSeqID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefSeqID);
      Integer iDavidID=generalManager.getIDMappingManager().getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,iRefSeqID);
      if (iDavidID == null)       continue;
      if (iItemsToLoad == 0) {
        String sURL=urlGenerator.createURL(eBrowserQueryType,iDavidID);
        browser.setUrl(sURL);
        browser.update();
        textURL.setText(sURL);
        iAlDavidID.clear();
      }
      String sOutput=""String_Node_Str"";
      sOutput=sOutput + generalManager.getIDMappingManager().getID(EMappingType.DAVID_2_GENE_SYMBOL,iDavidID);
      sOutput=sOutput + ""String_Node_Str"";
      sOutput=sOutput + sRefSeqID;
      if (iAlDavidID.contains(selectionDeltaItem.getPrimaryID())) {
        continue;
      }
      iAlDavidID.add(iDavidID);
      iItemsToLoad++;
    }
  }
}",0.967016491754123
58833,"private boolean triggerSearchResult(int iDavidID){
  Set<Integer> iSetRefSeq=generalManager.getIDMappingManager().getMultiID(EMappingType.DAVID_2_REFSEQ_MRNA_INT,iDavidID);
  if (iSetRefSeq == null) {
    generalManager.getLogger().log(new Status(Status.ERROR,GeneralManager.PLUGIN_ID,""String_Node_Str"" + iDavidID));
    return false;
  }
  ISelectionDelta selectionDelta=new SelectionDelta(EIDType.REFSEQ_MRNA_INT);
  for (  Object iRefSeqID : iSetRefSeq) {
    selectionDelta.add(new SelectionDeltaItem((Integer)iRefSeqID,ESelectionType.SELECTION));
  }
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,ESelectionType.SELECTION);
  sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
  SelectionUpdateEvent event=new SelectionUpdateEvent();
  event.setSender(this);
  event.setSelectionDelta(selectionDelta);
  eventPublisher.triggerEvent(event);
  return true;
}","private boolean triggerSearchResult(int iDavidID){
  Set<Integer> iSetRefSeq=generalManager.getIDMappingManager().getMultiID(EMappingType.DAVID_2_REFSEQ_MRNA_INT,iDavidID);
  if (iSetRefSeq == null) {
    return false;
  }
  ISelectionDelta selectionDelta=new SelectionDelta(EIDType.REFSEQ_MRNA_INT);
  for (  Object iRefSeqID : iSetRefSeq) {
    selectionDelta.add(new SelectionDeltaItem((Integer)iRefSeqID,ESelectionType.SELECTION));
  }
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,ESelectionType.SELECTION);
  sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
  SelectionUpdateEvent event=new SelectionUpdateEvent();
  event.setSender(this);
  event.setSelectionDelta(selectionDelta);
  eventPublisher.triggerEvent(event);
  return true;
}",0.9311981020166074
58834,"/** 
 * Returns the external ID (the id with which you initialized getPickingID()) when you provide the picking ID and the id of the view.
 * @param viewID the id of the view which has to be the same which was used when the picking id was created
 * @param pickingID the picking ID of which the external id mapping is desired
 * @return the external ID, null if no entry for that pickingID
 */
private Integer getExternalIDFromPickingID(int viewID,int pickingID){
  return hashViewIDToViewSpecificPickingIDContainer.get(viewID).getExternalID(pickingID);
}","/** 
 * Returns the external ID (the id with which you initialized getPickingID()) when you provide the picking ID and the id of the view.
 * @param viewID the id of the view which has to be the same which was used when the picking id was created
 * @param pickingID the picking ID of which the external id mapping is desired
 * @return the external ID, null if no entry for that pickingID
 */
private Integer getExternalIDFromPickingID(int viewID,EPickingType pickingType,int pickingID){
  return hashViewIDToViewSpecificPickingIDContainer.get(viewID).getExternalID(pickingType,pickingID);
}",0.967741935483871
58835,"/** 
 * Returns the external ID associated with the provided pickingID
 * @param pickingID
 * @return the externalID
 */
public Integer getExternalID(Integer pickingID){
  return hashPickingIDToExternalID.get(pickingID);
}","/** 
 * Returns the external ID associated with the provided pickingID and pickingType or null if no such mapping exists
 * @param pickingID
 * @param pickingType
 * @return the externalID or null
 */
public Integer getExternalID(EPickingType pickingType,Integer pickingID){
  HashMap<Integer,Integer> hashMap=hashTypeToPickingIDToExternalID.get(pickingType);
  if (hashMap == null)   return null;
  return hashMap.get(pickingID);
}",0.6391437308868502
58836,"/** 
 * Add a new pickingID and its corresponding externalID
 * @param pickingID
 * @param externalID
 */
public void put(Integer pickingID,Integer externalID){
  hashPickingIDToExternalID.put(pickingID,externalID);
  hashExternaldIDToPickingID.put(externalID,pickingID);
}","/** 
 * Add a new pickingID and its corresponding externalID
 * @param pickingID
 * @param externalID
 */
public void put(EPickingType pickingType,Integer pickingID,Integer externalID){
  HashMap<Integer,Integer> hashPickingIDToExternalID=hashTypeToPickingIDToExternalID.get(pickingType);
  if (hashPickingIDToExternalID == null) {
    hashPickingIDToExternalID=new HashMap<Integer,Integer>();
    hashTypeToPickingIDToExternalID.put(pickingType,hashPickingIDToExternalID);
  }
  hashPickingIDToExternalID.put(pickingID,externalID);
  HashMap<Integer,Integer> hashExternaldIDToPickingID=hashTypeToExternaldIDToPickingID.get(pickingType);
  if (hashExternaldIDToPickingID == null) {
    hashExternaldIDToPickingID=new HashMap<Integer,Integer>();
    hashTypeToExternaldIDToPickingID.put(pickingType,hashExternaldIDToPickingID);
  }
  hashExternaldIDToPickingID.put(externalID,pickingID);
}",0.3514211886304909
58837,"/** 
 * Returns a unique picking ID which can be used for the glPushName() commands. The returned id is mapped to the provided externalID which is intended to be used by the caller internally. external id
 * @param iViewID the ID of the calling view
 * @param ePickingType the type of the pick
 * @param iExternalID an arbitrary integer which helps the client of the manager to determine which element was picked
 * @return the picking id, use {@link #getExternalIDFromPickingID(int,int)} to retrieve the correspondingexternal id
 */
public int getPickingID(int iViewID,EPickingType ePickingType,int iExternalID){
  ViewSpecificPickingIDContainer pickingIDContainer=hashViewIDToViewSpecificPickingIDContainer.get(iViewID);
  if (pickingIDContainer == null) {
    pickingIDContainer=new ViewSpecificPickingIDContainer();
    hashViewIDToViewSpecificPickingIDContainer.put(iViewID,pickingIDContainer);
  }
  Integer pickingID=pickingIDContainer.getPickingID(iExternalID);
  if (pickingID == null)   pickingID=calculateID();
  pickingIDContainer.put(pickingID,iExternalID);
  hashPickingIDToViewID.put(pickingID,new Pair<Integer,EPickingType>(iViewID,ePickingType));
  return pickingID;
}","/** 
 * Returns a unique picking ID which can be used for the glPushName() commands. The returned id is mapped to the provided externalID which is intended to be used by the caller internally. external id
 * @param iViewID the ID of the calling view
 * @param ePickingType the type of the pick
 * @param iExternalID an arbitrary integer which helps the client of the manager to determine which element was picked
 * @return the picking id, use {@link #getExternalIDFromPickingID(int,int)} to retrieve the correspondingexternal id
 */
public int getPickingID(int iViewID,EPickingType ePickingType,int iExternalID){
  ViewSpecificPickingIDContainer pickingIDContainer=hashViewIDToViewSpecificPickingIDContainer.get(iViewID);
  if (pickingIDContainer == null) {
    pickingIDContainer=new ViewSpecificPickingIDContainer();
    hashViewIDToViewSpecificPickingIDContainer.put(iViewID,pickingIDContainer);
  }
  Integer pickingID=pickingIDContainer.getPickingID(ePickingType,iExternalID);
  if (pickingID == null)   pickingID=calculateID();
  pickingIDContainer.put(ePickingType,pickingID,iExternalID);
  hashPickingIDToViewID.put(pickingID,new Pair<Integer,EPickingType>(iViewID,ePickingType));
  return pickingID;
}",0.9891485809682804
58838,"/** 
 * Returns all pickingIDs stored in the container
 * @return all picking IDs
 */
public Set<Integer> getAllPickingIDs(){
  return hashPickingIDToExternalID.keySet();
}","/** 
 * Returns all pickingIDs stored in the container
 * @return all picking IDs
 */
public Set<Integer> getAllPickingIDs(){
  Set<Integer> set=new HashSet<Integer>();
  for (  EPickingType type : hashTypeToPickingIDToExternalID.keySet()) {
    set.addAll(hashTypeToPickingIDToExternalID.get(type).keySet());
  }
  return set;
}",0.6427145708582834
58839,"public ViewSpecificPickingIDContainer(){
  hashPickingIDToExternalID=new HashMap<Integer,Integer>();
  hashExternaldIDToPickingID=new HashMap<Integer,Integer>();
}","public ViewSpecificPickingIDContainer(){
  hashTypeToPickingIDToExternalID=new EnumMap<EPickingType,HashMap<Integer,Integer>>(EPickingType.class);
  hashTypeToExternaldIDToPickingID=new EnumMap<EPickingType,HashMap<Integer,Integer>>(EPickingType.class);
}",0.7799043062200957
58840,"/** 
 * Given the list of picking IDs which where hit it maps the picking ID to the view and stores it in the hit list
 * @param alPickingIDs
 * @param myMode
 * @param pickedPoint
 * @param dragStartPoint
 */
private void processPicks(ArrayList<Integer> alPickingIDs,EPickingMode myMode,Point pickedPoint,Point dragStartPoint){
  for (  int pickingID : alPickingIDs) {
    Pair<Integer,EPickingType> pickAssociatedValues=hashPickingIDToViewID.get(pickingID);
    EPickingType eType=pickAssociatedValues.getSecond();
    int viewIDToUse=pickAssociatedValues.getFirst();
    Pick pick=new Pick(getExternalIDFromPickingID(viewIDToUse,pickingID),myMode,pickedPoint,dragStartPoint,fMinimumZValue);
    ViewSpecificHitListContainer hitContainer=hashViewIDToViewSpecificHitListContainer.get(viewIDToUse);
    if (hitContainer == null) {
      hitContainer=new ViewSpecificHitListContainer();
      hashViewIDToViewSpecificHitListContainer.put(viewIDToUse,hitContainer);
    }
    hitContainer.addPicksForPickingType(eType,pick);
  }
}","/** 
 * Given the list of picking IDs which where hit it maps the picking ID to the view and stores it in the hit list
 * @param alPickingIDs
 * @param myMode
 * @param pickedPoint
 * @param dragStartPoint
 */
private void processPicks(ArrayList<Integer> alPickingIDs,EPickingMode myMode,Point pickedPoint,Point dragStartPoint){
  for (  int pickingID : alPickingIDs) {
    Pair<Integer,EPickingType> pickAssociatedValues=hashPickingIDToViewID.get(pickingID);
    EPickingType eType=pickAssociatedValues.getSecond();
    int viewIDToUse=pickAssociatedValues.getFirst();
    Pick pick=new Pick(getExternalIDFromPickingID(viewIDToUse,eType,pickingID),myMode,pickedPoint,dragStartPoint,fMinimumZValue);
    ViewSpecificHitListContainer hitContainer=hashViewIDToViewSpecificHitListContainer.get(viewIDToUse);
    if (hitContainer == null) {
      hitContainer=new ViewSpecificHitListContainer();
      hashViewIDToViewSpecificHitListContainer.put(viewIDToUse,hitContainer);
    }
    hitContainer.addPicksForPickingType(eType,pick);
  }
}",0.997090203685742
58841,"/** 
 * Removes all elements and sets the element counter to 0 Removes all elements in selectionDelta. Sets virtual array to null
 */
public void resetSelectionManager(){
  hashSelectionTypes.clear();
  for (  ESelectionType eType : alSelectionTypes) {
    hashSelectionTypes.put(eType,new HashMap<Integer,Integer>());
  }
  if (virtualArray != null) {
    virtualArray=null;
  }
  selectionDelta=new SelectionDelta(internalIDType);
}","/** 
 * Removes all elements and sets the element counter to 0 Removes all elements in selectionDelta. Sets virtual array to null
 */
public void resetSelectionManager(){
  hashSelectionTypes.clear();
  for (  ESelectionType eType : alSelectionTypes) {
    hashSelectionTypes.put(eType,new HashMap<Integer,Integer>());
  }
  if (virtualArray != null) {
    virtualArray.clear();
  }
  selectionDelta=new SelectionDelta(internalIDType);
}",0.9850746268656716
58842,"@Override protected void initLists(){
  if (bRenderOnlyContext) {
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
  }
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION)) {
      initCompleteList();
    }
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  contentSelectionManager.resetSelectionManager();
  storageSelectionManager.resetSelectionManager();
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  storageSelectionManager.setVA(set.getVA(iStorageVAID));
  int iNumberOfColumns=set.getVA(iContentVAID).size();
  int iNumberOfRows=set.getVA(iStorageVAID).size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(set.getVA(iStorageVAID).get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(set.getVA(iContentVAID).get(iColumnCount));
  }
  renderStyle=new HeatMapRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  vecTranslation=new Vec3f(0,renderStyle.getYCenter() * 2,0);
}","@Override protected void initLists(){
  if (bRenderOnlyContext) {
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.EXTERNAL_SELECTION);
  }
 else {
    if (!mapVAIDs.containsKey(EStorageBasedVAType.COMPLETE_SELECTION)) {
      initCompleteList();
    }
    iContentVAID=mapVAIDs.get(EStorageBasedVAType.COMPLETE_SELECTION);
  }
  iStorageVAID=mapVAIDs.get(EStorageBasedVAType.STORAGE_SELECTION);
  contentSelectionManager.setVA(set.getVA(iContentVAID));
  storageSelectionManager.setVA(set.getVA(iStorageVAID));
  int iNumberOfColumns=set.getVA(iContentVAID).size();
  int iNumberOfRows=set.getVA(iStorageVAID).size();
  for (int iRowCount=0; iRowCount < iNumberOfRows; iRowCount++) {
    storageSelectionManager.initialAdd(set.getVA(iStorageVAID).get(iRowCount));
  }
  for (int iColumnCount=0; iColumnCount < iNumberOfColumns; iColumnCount++) {
    contentSelectionManager.initialAdd(set.getVA(iContentVAID).get(iColumnCount));
  }
  renderStyle=new HeatMapRenderStyle(this,viewFrustum);
  super.renderStyle=renderStyle;
  vecTranslation=new Vec3f(0,renderStyle.getYCenter() * 2,0);
}",0.9551845342706504
58843,"/** 
 * Function responsible for handling SelectionDelta for embedded heatmap
 */
private void triggerSelectionBlock(){
  int iCount=iFirstSample;
  for (int i=0; i < iSelectorBar - 1; i++)   iCount+=iAlNumberSamples.get(i);
  List<SelectionCommand> commands=new ArrayList<SelectionCommand>();
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.RESET);
  commands.add(command);
  glHeatMapView.handleContentTriggerSelectionCommand(eFieldDataType,commands);
  IVirtualArrayDelta delta=new VirtualArrayDelta(eFieldDataType);
  ISelectionDelta selectionDelta=new SelectionDelta(eFieldDataType);
  IVirtualArray currentVirtualArray=set.getVA(iContentVAID);
  int iIndex=0;
  int iContentIndex=0;
  for (int index=0; index < iSamplesPerHeatmap; index++) {
    iIndex=iCount + index;
    if (iIndex < currentVirtualArray.size()) {
      iContentIndex=currentVirtualArray.get(iIndex);
    }
    delta.add(VADeltaItem.append(iContentIndex));
    for (    HeatMapSelection selection : AlSelection) {
      if (selection.getContentIndex() == iContentIndex) {
        selectionDelta.addSelection(iContentIndex,selection.getSelectionType());
      }
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(delta,getShortInfo());
  if (selectionDelta.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDelta,true,null);
  }
  commands=new ArrayList<SelectionCommand>();
  command=new SelectionCommand(ESelectionCommandType.RESET);
  commands.add(command);
  glHeatMapView.handleStorageTriggerSelectionCommand(eExperimentDataType,commands);
  IVirtualArrayDelta deltaExp=new VirtualArrayDelta(eExperimentDataType);
  ISelectionDelta selectionDeltaEx=new SelectionDelta(eExperimentDataType);
  IVirtualArray currentVirtualArrayEx=set.getVA(iStorageVAID);
  for (int index=0; index < currentVirtualArrayEx.size(); index++) {
    iContentIndex=currentVirtualArrayEx.get(index);
    deltaExp.add(VADeltaItem.append(iContentIndex));
    for (    Integer selection : AlExpMouseOver) {
      if (selection == iContentIndex) {
        selectionDeltaEx.addSelection(iContentIndex,ESelectionType.MOUSE_OVER);
      }
    }
    for (    Integer selection : AlExpSelected) {
      if (selection == iContentIndex) {
        selectionDeltaEx.addSelection(iContentIndex,ESelectionType.SELECTION);
      }
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(deltaExp,getShortInfo());
  if (selectionDeltaEx.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDeltaEx,true,null);
  }
}","/** 
 * Function responsible for handling SelectionDelta for embedded heatmap
 */
private void triggerSelectionBlock(){
  int iCount=iFirstSample;
  for (int i=0; i < iSelectorBar - 1; i++)   iCount+=iAlNumberSamples.get(i);
  List<SelectionCommand> commands=new ArrayList<SelectionCommand>();
  glHeatMapView.handleContentTriggerSelectionCommand(eFieldDataType,commands);
  glHeatMapView.resetView();
  IVirtualArrayDelta delta=new VirtualArrayDelta(eFieldDataType);
  ISelectionDelta selectionDelta=new SelectionDelta(eFieldDataType);
  IVirtualArray currentVirtualArray=set.getVA(iContentVAID);
  int iIndex=0;
  int iContentIndex=0;
  for (int index=0; index < iSamplesPerHeatmap; index++) {
    iIndex=iCount + index;
    if (iIndex < currentVirtualArray.size()) {
      iContentIndex=currentVirtualArray.get(iIndex);
    }
    delta.add(VADeltaItem.append(iContentIndex));
    for (    HeatMapSelection selection : AlSelection) {
      if (selection.getContentIndex() == iContentIndex) {
        selectionDelta.addSelection(iContentIndex,selection.getSelectionType());
      }
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(delta,getShortInfo());
  if (selectionDelta.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDelta,true,null);
  }
  commands=new ArrayList<SelectionCommand>();
  SelectionCommand command=new SelectionCommand(ESelectionCommandType.RESET);
  commands.add(command);
  glHeatMapView.handleStorageTriggerSelectionCommand(eExperimentDataType,commands);
  IVirtualArrayDelta deltaExp=new VirtualArrayDelta(eExperimentDataType);
  ISelectionDelta selectionDeltaEx=new SelectionDelta(eExperimentDataType);
  IVirtualArray currentVirtualArrayEx=set.getVA(iStorageVAID);
  for (int index=0; index < currentVirtualArrayEx.size(); index++) {
    iContentIndex=currentVirtualArrayEx.get(index);
    deltaExp.add(VADeltaItem.append(iContentIndex));
    for (    Integer selection : AlExpMouseOver) {
      if (selection == iContentIndex) {
        selectionDeltaEx.addSelection(iContentIndex,ESelectionType.MOUSE_OVER);
      }
    }
    for (    Integer selection : AlExpSelected) {
      if (selection == iContentIndex) {
        selectionDeltaEx.addSelection(iContentIndex,ESelectionType.SELECTION);
      }
    }
  }
  glHeatMapView.handleVirtualArrayUpdate(deltaExp,getShortInfo());
  if (selectionDeltaEx.size() > 0) {
    glHeatMapView.handleSelectionUpdate(selectionDeltaEx,true,null);
  }
}",0.949014828356693
58844,"@Override public boolean performCancel(){
  super.performCancel();
  MessageBox messageBox=new MessageBox(this.getShell(),SWT.OK);
  messageBox.setText(""String_Node_Str"");
  messageBox.setMessage(""String_Node_Str"" + ""String_Node_Str"");
  messageBox.open();
  return true;
}","@Override public boolean performCancel(){
  super.performCancel();
  PreferenceStore store=GeneralManager.get().getPreferenceStore();
  if (store.getBoolean(PreferenceConstants.PATHWAY_DATA_OK))   return true;
  MessageBox messageBox=new MessageBox(this.getShell(),SWT.OK);
  messageBox.setText(""String_Node_Str"");
  messageBox.setMessage(""String_Node_Str"" + ""String_Node_Str"");
  messageBox.open();
  return true;
}",0.7924528301886793
58845,"private void updateColorLabel(){
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  int iNumberOfMarkerPoints=store.getInt(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.NUMBER_OF_COLOR_MARKER_POINTS);
  Color[] alColor=new Color[iNumberOfMarkerPoints];
  int[] iArColorMarkerPoints=new int[iNumberOfMarkerPoints - 1];
  for (int iCount=1; iCount <= iNumberOfMarkerPoints; iCount++) {
    float normalizedValue=store.getFloat(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.COLOR_MARKER_POINT_VALUE + iCount);
    double correspondingValue=GeneralManager.get().getSetManager().getAllItems().iterator().next().getRawForNormalized(normalizedValue);
    labels.get(iCount - 1).setText(decimalFormat.format(correspondingValue));
    int iColorMarkerPoint=(int)(100 * normalizedValue);
    if (iColorMarkerPoint != 0) {
      iArColorMarkerPoints[iCount - 2]=iColorMarkerPoint;
    }
    String color=store.getString(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.COLOR_MARKER_POINT_COLOR + iCount);
    int[] iArColor=ConversionTools.getIntColorFromString(color);
    alColor[iCount - 1]=new Color(PlatformUI.getWorkbench().getDisplay(),iArColor[0],iArColor[1],iArColor[2]);
  }
  colorMappingPreviewLabel.setBackground(alColor,iArColorMarkerPoints);
  colorMappingPreviewLabel.update();
}","private void updateColorLabel(){
  DecimalFormat decimalFormat;
  int iNumberOfMarkerPoints=store.getInt(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.NUMBER_OF_COLOR_MARKER_POINTS);
  Color[] alColor=new Color[iNumberOfMarkerPoints];
  int[] iArColorMarkerPoints=new int[iNumberOfMarkerPoints - 1];
  for (int iCount=1; iCount <= iNumberOfMarkerPoints; iCount++) {
    float normalizedValue=store.getFloat(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.COLOR_MARKER_POINT_VALUE + iCount);
    double correspondingValue=GeneralManager.get().getUseCase().getSet().getRawForNormalized(normalizedValue);
    if (Math.abs(correspondingValue) > 10000)     decimalFormat=new DecimalFormat(""String_Node_Str"");
 else     if (Math.abs(correspondingValue) > 100)     decimalFormat=new DecimalFormat(""String_Node_Str"");
 else     if (Math.abs(correspondingValue) > 10)     decimalFormat=new DecimalFormat(""String_Node_Str"");
 else     decimalFormat=new DecimalFormat(""String_Node_Str"");
    labels.get(iCount - 1).setText(decimalFormat.format(correspondingValue));
    int iColorMarkerPoint=(int)(100 * normalizedValue);
    if (iColorMarkerPoint != 0) {
      iArColorMarkerPoints[iCount - 2]=iColorMarkerPoint;
    }
    String color=store.getString(PreferenceConstants.GENE_EXPRESSION_PREFIX + PreferenceConstants.COLOR_MARKER_POINT_COLOR + iCount);
    int[] iArColor=ConversionTools.getIntColorFromString(color);
    alColor[iCount - 1]=new Color(PlatformUI.getWorkbench().getDisplay(),iArColor[0],iArColor[1],iArColor[2]);
  }
  colorMappingPreviewLabel.setBackground(alColor,iArColorMarkerPoints);
  colorMappingPreviewLabel.update();
}",0.845340383344349
58846,"/** 
 * This class creates the GL event listener contained in a RCP view for a RCP view.
 * @param glViewType The type of view. See  {@link ECommandType}
 * @param iParentCanvasID the id of canvas where you want to render
 * @param bRegisterToOverallMediator true if you want this to listen and send to main mediator
 * @return the ID of the view
 */
protected AGLEventListener createGLEventListener(ECommandType glViewType,int iParentCanvasID,boolean bRegisterToOverallMediator){
  IGeneralManager generalManager=GeneralManager.get();
  ISet set=generalManager.getUseCase().getSet();
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)generalManager.getCommandManager().createCommandByType(glViewType);
  if (glViewType == ECommandType.CREATE_GL_BUCKET_3D) {
    cmdView.setAttributes(EProjectionMode.PERSPECTIVE,-1.5f,1.5f,-1.5f,1.5f,2.87f,100,set,iParentCanvasID,0,0,-8,0,0,0,0);
  }
 else   if (glViewType == ECommandType.CREATE_GL_GLYPH) {
    cmdView.setAttributes(EProjectionMode.PERSPECTIVE,-1f,1f,-1f,1f,2.9f,100,set,iParentCanvasID,0,0,-8,0,0,0,0);
  }
 else {
    cmdView.setAttributes(EProjectionMode.ORTHOGRAPHIC,0,8,0,8,-20,20,set,iParentCanvasID);
  }
  cmdView.doCommand();
  AGLEventListener glView=cmdView.getCreatedObject();
  if (iAlContainedViewIDs != null && glViewType == ECommandType.CREATE_GL_BUCKET_3D) {
    ((GLRemoteRendering)glView).setInitialContainedViews(iAlContainedViewIDs);
  }
  setGLData(glCanvas,glView);
  createPartControlGL();
  IUseCase useCase=GeneralManager.get().getUseCase();
  glView.setUseCase(useCase);
  useCase.addView(glView);
  return glView;
}","/** 
 * This class creates the GL event listener contained in a RCP view for a RCP view.
 * @param glViewType The type of view. See  {@link ECommandType}
 * @param iParentCanvasID the id of canvas where you want to render
 * @param bRegisterToOverallMediator true if you want this to listen and send to main mediator
 * @return the ID of the view
 */
protected AGLEventListener createGLEventListener(ECommandType glViewType,int iParentCanvasID,boolean bRegisterToOverallMediator){
  IGeneralManager generalManager=GeneralManager.get();
  ISet set=generalManager.getUseCase().getSet();
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)generalManager.getCommandManager().createCommandByType(glViewType);
  if (glViewType == ECommandType.CREATE_GL_BUCKET_3D) {
    cmdView.setAttributes(EProjectionMode.PERSPECTIVE,-0.5f,0.5f,-0.5f,0.5f,0.95f,100,set,iParentCanvasID,0,0,-8,0,0,0,0);
  }
 else   if (glViewType == ECommandType.CREATE_GL_GLYPH) {
    cmdView.setAttributes(EProjectionMode.PERSPECTIVE,-1f,1f,-1f,1f,2.9f,100,set,iParentCanvasID,0,0,-8,0,0,0,0);
  }
 else {
    cmdView.setAttributes(EProjectionMode.ORTHOGRAPHIC,0,8,0,8,-20,20,set,iParentCanvasID);
  }
  cmdView.doCommand();
  AGLEventListener glView=cmdView.getCreatedObject();
  if (iAlContainedViewIDs != null && glViewType == ECommandType.CREATE_GL_BUCKET_3D) {
    ((GLRemoteRendering)glView).setInitialContainedViews(iAlContainedViewIDs);
  }
  setGLData(glCanvas,glView);
  createPartControlGL();
  IUseCase useCase=GeneralManager.get().getUseCase();
  glView.setUseCase(useCase);
  useCase.addView(glView);
  return glView;
}",0.9950248756218906
58847,"@Override public void createPartControl(Composite parent){
  tabularDataView=(TabularDataViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER,-1,""String_Node_Str"");
  tabularDataView.registerEventListeners();
  IUseCase useCase=GeneralManager.get().getUseCase();
  tabularDataView.setSet(useCase.getSet());
  tabularDataView.initViewRCP(parent);
  tabularDataView.drawView();
  useCase.addView(tabularDataView);
  swtComposite=parent;
  GeneralManager.get().getViewGLCanvasManager().registerItem(tabularDataView);
}","@Override public void createPartControl(Composite parent){
  tabularDataView=(TabularDataViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER,-1,""String_Node_Str"");
  tabularDataView.registerEventListeners();
  IUseCase useCase=GeneralManager.get().getUseCase();
  tabularDataView.setSet(useCase.getSet());
  tabularDataView.initViewRCP(parent);
  tabularDataView.drawView();
  useCase.addView(tabularDataView);
  swtComposite=parent;
  GeneralManager.get().getViewGLCanvasManager().registerItem(tabularDataView);
  iViewID=tabularDataView.getID();
}",0.9704641350210972
58848,"public void createControl(Composite parent){
  parentWizard=(Wizard)this.getWizard();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new FillLayout(SWT.VERTICAL));
  final TabFolder tabFolder=new TabFolder(composite,SWT.BORDER);
  createGeneticUseCaseTab(tabFolder);
  createGeneralDataUseCaseTab(tabFolder);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (((TabItem)e.item) == generalDataUseCaseTab) {
        useCaseMode=EUseCaseMode.UNSPECIFIED_DATA;
        Application.bLoadPathwayData=false;
      }
 else       if (((TabItem)e.item) == generalDataUseCaseTab)       useCaseMode=EUseCaseMode.GENETIC_DATA;
 else       throw new IllegalStateException(""String_Node_Str"");
    }
  }
);
  tabFolder.pack();
  setControl(composite);
  composite.pack();
}","public void createControl(Composite parent){
  parentWizard=(Wizard)this.getWizard();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new FillLayout(SWT.VERTICAL));
  final TabFolder tabFolder=new TabFolder(composite,SWT.BORDER);
  createGeneticUseCaseTab(tabFolder);
  createGeneralDataUseCaseTab(tabFolder);
  tabFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (((TabItem)e.item) == generalDataUseCaseTab) {
        useCaseMode=EUseCaseMode.UNSPECIFIED_DATA;
        Application.bLoadPathwayData=false;
      }
 else       if (((TabItem)e.item) == geneticDataUseCaseTab)       useCaseMode=EUseCaseMode.GENETIC_DATA;
 else       throw new IllegalStateException(""String_Node_Str"");
    }
  }
);
  tabFolder.pack();
  setControl(composite);
  composite.pack();
}",0.9965357967667436
58849,"/** 
 * This method has to be called in every display step. It is responsible for the ray tracing which does the actual picking. It needs the ID of the calling view and a gl context. It calls the display() method of the calling view, therefore only elements rendered in the display() can be picked.
 * @param canvasUser a reference to the calling view
 * @param gl the GL context
 */
public void handlePicking(final AGLEventListener canvasUser,final GL gl){
  if (bEnablePicking == false)   return;
  PickingMouseListener pickingTriggerMouseAdapter=canvasUser.getParentGLCanvas().getJoglMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasMouseDoubleClicked()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DOUBLE_CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasLeftMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasRightMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.RIGHT_CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(canvasUser.getID(),true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(canvasUser.getID()) != null && hashViewIDToIsMouseOverPickingEvent.get(canvasUser.getID()) == true) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null)   return;
  hashViewIDToIsMouseOverPickingEvent.put(canvasUser.getID(),false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=canvasUser.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  canvasUser.display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,ePickingMode,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}","/** 
 * This method has to be called in every display step. It is responsible for the ray tracing which does the actual picking. It needs the ID of the calling view and a gl context. It calls the display() method of the calling view, therefore only elements rendered in the display() can be picked.
 * @param glView a reference to the calling view
 * @param gl the GL context
 */
public void handlePicking(final AGLEventListener glView,final GL gl){
  if (bEnablePicking == false)   return;
  PickingMouseListener pickingTriggerMouseAdapter=glView.getParentGLCanvas().getJoglMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasMouseDoubleClicked()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DOUBLE_CLICKED;
    ContextMenu.get().flush();
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
    ContextMenu.get().flush();
  }
 else   if (pickingTriggerMouseAdapter.wasLeftMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
    ContextMenu.get().flush();
  }
 else   if (pickingTriggerMouseAdapter.wasRightMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.RIGHT_CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) != null && hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) == true) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null)   return;
  hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=glView.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  glView.display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,ePickingMode,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}",0.9194297613326926
58850,"@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (remoteRenderingGLCanvas != null || this instanceof GLRemoteRendering || this instanceof GLGlyph) {
    viewFrustum.considerAspectRatio(true);
  }
 else {
    Rectangle frame=parentGLCanvas.getBounds();
    viewFrustum.setLeft(0);
    viewFrustum.setRight(8);
    viewFrustum.setBottom(0);
    float value=(float)frame.height / (float)frame.width * 8.0f;
    viewFrustum.setTop(value);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
    bHasFrustumChanged=true;
  }
  GL gl=drawable.getGL();
  fAspectRatio=(float)height / (float)width;
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glLoadIdentity();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
}","@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (remoteRenderingGLCanvas != null || this instanceof GLRemoteRendering || this instanceof GLGlyph) {
    viewFrustum.considerAspectRatio(true);
  }
 else {
    Rectangle frame=parentGLCanvas.getBounds();
    viewFrustum.setLeft(0);
    viewFrustum.setRight(8);
    viewFrustum.setBottom(0);
    float value=(float)frame.height / (float)frame.width * 8.0f;
    viewFrustum.setTop(value);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
    bHasFrustumChanged=true;
  }
  GL gl=drawable.getGL();
  fAspectRatio=(float)height / (float)width;
  gl.glViewport(x,y,width,height);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glLoadIdentity();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
}",0.9777211966900065
58851,"public void render(final GL gl){
  if (connectedElementRepManager.getOccuringIDTypes().size() == 0 || bEnableRendering == false)   return;
  renderConnectionLines(gl);
}","public void render(final GL gl){
  if (connectedElementRepManager.getOccuringIDTypes().size() == 0 || bEnableRendering == false)   return;
  gl.glDisable(GL.GL_DEPTH_TEST);
  renderConnectionLines(gl);
  gl.glEnable(GL.GL_DEPTH_TEST);
}",0.8345679012345679
58852,"@Override public synchronized void display(final GL gl){
  time.update();
  layoutRenderStyle.initPoolLevel(false,iMouseOverObjectID);
  layoutRenderStyle.initFocusLevel();
  if (GeneralManager.get().isWiiModeActive() && layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    ((BucketLayoutRenderStyle)layoutRenderStyle).initFocusLevelWii();
    ((BucketLayoutRenderStyle)layoutRenderStyle).initStackLevelWii();
  }
  doSlerpActions(gl);
  initNewView(gl);
  if (!generalManager.isWiiModeActive()) {
    renderRemoteLevel(gl,focusLevel);
    renderRemoteLevel(gl,stackLevel);
  }
 else {
    if (bUpdateOffScreenTextures) {
      updateOffScreenTextures(gl);
    }
    renderRemoteLevel(gl,focusLevel);
    glOffScreenRenderer.renderRubberBucket(gl,stackLevel,(BucketLayoutRenderStyle)layoutRenderStyle,this);
  }
  if (bucketMouseWheelListener == null || !bucketMouseWheelListener.isZoomedIn()) {
    renderPoolAndMemoLayerBackground(gl);
    renderRemoteLevel(gl,transitionLevel);
    renderRemoteLevel(gl,spawnLevel);
    renderRemoteLevel(gl,poolLevel);
    renderRemoteLevel(gl,externalSelectionLevel);
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    bucketMouseWheelListener.render();
  }
  renderHandles(gl);
  gl.glDisable(GL.GL_DEPTH_TEST);
  if (glConnectionLineRenderer != null && connectionLinesEnabled) {
    glConnectionLineRenderer.render(gl);
  }
  gl.glEnable(GL.GL_DEPTH_TEST);
  float fZTranslation=0;
  if (!bucketMouseWheelListener.isZoomedIn())   fZTranslation=4f;
  gl.glTranslatef(0,0,fZTranslation);
  contextMenu.render(gl,iUniqueID);
  gl.glTranslatef(0,0,-fZTranslation);
}","@Override public synchronized void display(final GL gl){
  time.update();
  layoutRenderStyle.initPoolLevel(false,iMouseOverObjectID);
  layoutRenderStyle.initFocusLevel();
  if (GeneralManager.get().isWiiModeActive() && layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    ((BucketLayoutRenderStyle)layoutRenderStyle).initFocusLevelWii();
    ((BucketLayoutRenderStyle)layoutRenderStyle).initStackLevelWii();
  }
  doSlerpActions(gl);
  initNewView(gl);
  if (!generalManager.isWiiModeActive()) {
    renderRemoteLevel(gl,focusLevel);
    renderRemoteLevel(gl,stackLevel);
  }
 else {
    if (bUpdateOffScreenTextures) {
      updateOffScreenTextures(gl);
    }
    renderRemoteLevel(gl,focusLevel);
    glOffScreenRenderer.renderRubberBucket(gl,stackLevel,(BucketLayoutRenderStyle)layoutRenderStyle,this);
  }
  if (bucketMouseWheelListener == null || !bucketMouseWheelListener.isZoomedIn()) {
    renderPoolAndMemoLayerBackground(gl);
    renderRemoteLevel(gl,transitionLevel);
    renderRemoteLevel(gl,spawnLevel);
    renderRemoteLevel(gl,poolLevel);
    renderRemoteLevel(gl,externalSelectionLevel);
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    bucketMouseWheelListener.render();
  }
  renderHandles(gl);
  if (glConnectionLineRenderer != null && connectionLinesEnabled) {
    glConnectionLineRenderer.render(gl);
  }
  float fZTranslation=0;
  if (!bucketMouseWheelListener.isZoomedIn())   fZTranslation=4f;
  gl.glTranslatef(0,0,fZTranslation);
  contextMenu.render(gl,iUniqueID);
  gl.glTranslatef(0,0,-fZTranslation);
}",0.9793273680962666
58853,"@Override protected void renderConnectionLines(final GL gl){
  Vec3f vecTranslation;
  Vec3f vecScale;
  Rotf rotation;
  Mat4f matSrc=new Mat4f();
  Mat4f matDest=new Mat4f();
  matSrc.makeIdent();
  matDest.makeIdent();
  RemoteLevel activeLevel=null;
  RemoteLevelElement remoteLevelElement=null;
  IViewManager viewGLCanvasManager=GeneralManager.get().getViewGLCanvasManager();
  for (  EIDType idType : connectedElementRepManager.getOccuringIDTypes()) {
    ArrayList<ArrayList<Vec3f>> alPointLists=null;
    for (    int iSelectedElementID : connectedElementRepManager.getIDList(idType)) {
      for (      SelectedElementRep selectedElementRep : connectedElementRepManager.getSelectedElementRepsByElementID(idType,iSelectedElementID)) {
        remoteLevelElement=viewGLCanvasManager.getGLEventListener(selectedElementRep.getContainingViewID()).getRemoteLevelElement();
        if (remoteLevelElement == null) {
          continue;
        }
        activeLevel=remoteLevelElement.getRemoteLevel();
        if (activeLevel == stackLevel || activeLevel == focusLevel) {
          vecTranslation=remoteLevelElement.getTransform().getTranslation();
          vecScale=remoteLevelElement.getTransform().getScale();
          rotation=remoteLevelElement.getTransform().getRotation();
          ArrayList<Vec3f> alPoints=selectedElementRep.getPoints();
          ArrayList<Vec3f> alPointsTransformed=new ArrayList<Vec3f>();
          for (          Vec3f vecCurrentPoint : alPoints) {
            alPointsTransformed.add(transform(vecCurrentPoint,vecTranslation,vecScale,rotation,remoteLevelElement));
          }
          int iKey=selectedElementRep.getContainingViewID();
          alPointLists=hashViewToPointLists.get(iKey);
          if (alPointLists == null) {
            alPointLists=new ArrayList<ArrayList<Vec3f>>();
            hashViewToPointLists.put(iKey,alPointLists);
          }
          alPointLists.add(alPointsTransformed);
        }
      }
      if (hashViewToPointLists.size() > 1) {
        renderLineBundling(gl,new float[]{0,0,0});
        hashViewToPointLists.clear();
      }
    }
  }
}","@Override protected void renderConnectionLines(final GL gl){
  Vec3f vecTranslation;
  Vec3f vecScale;
  Rotf rotation;
  Mat4f matSrc=new Mat4f();
  Mat4f matDest=new Mat4f();
  matSrc.makeIdent();
  matDest.makeIdent();
  RemoteLevel activeLevel=null;
  RemoteLevelElement remoteLevelElement=null;
  IViewManager viewGLCanvasManager=GeneralManager.get().getViewGLCanvasManager();
  for (  EIDType idType : connectedElementRepManager.getOccuringIDTypes()) {
    ArrayList<ArrayList<Vec3f>> alPointLists=null;
    for (    int iSelectedElementID : connectedElementRepManager.getIDList(idType)) {
      for (      SelectedElementRep selectedElementRep : connectedElementRepManager.getSelectedElementRepsByElementID(idType,iSelectedElementID)) {
        AGLEventListener glView=viewGLCanvasManager.getGLEventListener(selectedElementRep.getContainingViewID());
        if (glView == null) {
          continue;
        }
        remoteLevelElement=glView.getRemoteLevelElement();
        if (remoteLevelElement == null) {
          continue;
        }
        activeLevel=remoteLevelElement.getRemoteLevel();
        if (activeLevel == stackLevel || activeLevel == focusLevel) {
          vecTranslation=remoteLevelElement.getTransform().getTranslation();
          vecScale=remoteLevelElement.getTransform().getScale();
          rotation=remoteLevelElement.getTransform().getRotation();
          ArrayList<Vec3f> alPoints=selectedElementRep.getPoints();
          ArrayList<Vec3f> alPointsTransformed=new ArrayList<Vec3f>();
          for (          Vec3f vecCurrentPoint : alPoints) {
            alPointsTransformed.add(transform(vecCurrentPoint,vecTranslation,vecScale,rotation,remoteLevelElement));
          }
          int iKey=selectedElementRep.getContainingViewID();
          alPointLists=hashViewToPointLists.get(iKey);
          if (alPointLists == null) {
            alPointLists=new ArrayList<ArrayList<Vec3f>>();
            hashViewToPointLists.put(iKey,alPointLists);
          }
          alPointLists.add(alPointsTransformed);
        }
      }
      if (hashViewToPointLists.size() > 1) {
        renderLineBundling(gl,new float[]{0,0,0});
        hashViewToPointLists.clear();
      }
    }
  }
}",0.9686346863468634
58854,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (contentSelectionManager.getNumberOfElements() == 0 && !listModeEnabled) {
    renderSymbol(gl);
  }
 else {
    float fSpacing=0;
    if (!bRenderStorageHorizontally) {
      if (listModeEnabled) {
        fSpacing=HeatMapRenderStyle.LIST_SPACING;
      }
      gl.glTranslatef(vecTranslation.x(),viewFrustum.getHeight() - fSpacing,vecTranslation.z());
      gl.glRotatef(vecRotation.x(),vecRotation.y(),vecRotation.z(),vecRotation.w());
    }
    gl.glTranslatef(fAnimationTranslation,0.0f,0.0f);
    renderHeatMap(gl);
    renderSelection(gl,ESelectionType.MOUSE_OVER);
    renderSelection(gl,ESelectionType.SELECTION);
    gl.glTranslatef(-fAnimationTranslation,0.0f,0.0f);
    if (!bRenderStorageHorizontally) {
      gl.glRotatef(-vecRotation.x(),vecRotation.y(),vecRotation.z(),vecRotation.w());
      gl.glTranslatef(-vecTranslation.x(),-viewFrustum.getHeight() + fSpacing,-vecTranslation.z());
    }
    gl.glDisable(GL.GL_STENCIL_TEST);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (contentSelectionManager.getNumberOfElements() == 0 && !listModeEnabled) {
    renderSymbol(gl);
  }
 else {
    float fSpacing=0;
    if (!bRenderStorageHorizontally) {
      if (listModeEnabled) {
        fSpacing=HeatMapRenderStyle.LIST_SPACING;
      }
      gl.glTranslatef(vecTranslation.x(),viewFrustum.getHeight() - fSpacing,vecTranslation.z());
      gl.glRotatef(vecRotation.x(),vecRotation.y(),vecRotation.z(),vecRotation.w());
    }
    gl.glTranslatef(fAnimationTranslation,0.0f,0.0f);
    renderHeatMap(gl);
    renderSelection(gl,ESelectionType.MOUSE_OVER);
    renderSelection(gl,ESelectionType.SELECTION);
    gl.glTranslatef(-fAnimationTranslation,0.0f,0.0f);
    if (!bRenderStorageHorizontally) {
      gl.glRotatef(-vecRotation.x(),vecRotation.y(),vecRotation.z(),vecRotation.w());
      gl.glTranslatef(-vecTranslation.x(),-viewFrustum.getHeight() + fSpacing,-vecTranslation.z());
    }
  }
  gl.glEndList();
}",0.9665787159190852
58855,"@Override public synchronized void display(GL gl){
  gl.glCallList(iGLDisplayListToCall);
}","@Override public synchronized void display(GL gl){
  gl.glCallList(iGLDisplayListToCall);
  if (!isRenderedRemote())   contextMenu.render(gl,iUniqueID);
}",0.7428571428571429
58856,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case HEAT_MAP_LINE_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case DOUBLE_CLICKED:
    LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
  loadPathwaysByGeneEvent.setGeneID(iExternalID);
loadPathwaysByGeneEvent.setIdType(EIDType.EXPRESSION_INDEX);
generalManager.getEventPublisher().triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
if (contentSelectionManager.checkStatus(ESelectionType.SELECTION,iExternalID)) {
contentSelectionManager.clearSelection(eSelectionType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
setDisplayListDirty();
return;
}
break;
default :
return;
}
if (contentSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
contentSelectionManager.clearSelection(eSelectionType);
Integer iMappingID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
contentSelectionManager.addToType(eSelectionType,iExternalID);
contentSelectionManager.addConnectionID(iMappingID,iExternalID);
if (eFieldDataType == EIDType.EXPRESSION_INDEX) {
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.REFSEQ_MRNA_INT,command);
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case HEAT_MAP_STORAGE_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
if (storageSelectionManager.checkStatus(ESelectionType.SELECTION,iExternalID)) {
storageSelectionManager.clearSelection(eSelectionType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPERIMENT_INDEX,command);
setDisplayListDirty();
return;
}
break;
default :
return;
}
if (storageSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
storageSelectionManager.clearSelection(eSelectionType);
storageSelectionManager.addToType(eSelectionType,iExternalID);
if (eStorageDataType == EIDType.EXPERIMENT_INDEX) {
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPERIMENT_INDEX,command);
ISelectionDelta selectionDelta=storageSelectionManager.getDelta();
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case HEAT_MAP_LINE_SELECTION:
    iCurrentMouseOverElement=iExternalID;
switch (pickingMode) {
case DOUBLE_CLICKED:
    LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
  loadPathwaysByGeneEvent.setGeneID(iExternalID);
loadPathwaysByGeneEvent.setIdType(EIDType.EXPRESSION_INDEX);
generalManager.getEventPublisher().triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
if (contentSelectionManager.checkStatus(ESelectionType.SELECTION,iExternalID)) {
contentSelectionManager.clearSelection(eSelectionType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
setDisplayListDirty();
return;
}
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterViewID(iUniqueID);
}
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer(IDMappingHelper.get().getRefSeqFromStorageIndex(iExternalID));
contextMenu.addItemContanier(geneContextMenuItemContainer);
default :
return;
}
if (contentSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
contentSelectionManager.clearSelection(eSelectionType);
Integer iMappingID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
contentSelectionManager.addToType(eSelectionType,iExternalID);
contentSelectionManager.addConnectionID(iMappingID,iExternalID);
if (eFieldDataType == EIDType.EXPRESSION_INDEX) {
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.REFSEQ_MRNA_INT,command);
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case HEAT_MAP_STORAGE_SELECTION:
switch (pickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
if (storageSelectionManager.checkStatus(ESelectionType.SELECTION,iExternalID)) {
storageSelectionManager.clearSelection(eSelectionType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPERIMENT_INDEX,command);
setDisplayListDirty();
return;
}
break;
default :
return;
}
if (storageSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
storageSelectionManager.clearSelection(eSelectionType);
storageSelectionManager.addToType(eSelectionType,iExternalID);
if (eStorageDataType == EIDType.EXPERIMENT_INDEX) {
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPERIMENT_INDEX,command);
ISelectionDelta selectionDelta=storageSelectionManager.getDelta();
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
}
}",0.9333137915872785
58857,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4f(0,0,0,0.15f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.0f,0.4f,0);
  if (set.getVA(iContentVAID).getGroupList() != null)   renderClassAssignmentsGenes(gl);
  gl.glTranslatef(0.1f,0.0f,0);
  handleTexturePicking(gl);
  if (bSkipLevel1 == false) {
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    gl.glTranslatef(GAP_LEVEL1_2,0,0);
  }
 else {
    gl.glColor4f(1f,1f,0f,1f);
    gl.glTranslatef(0.2f,0.0f,0);
  }
  if (bIsHeatmapInFocus) {
    fAnimationScale=0.2f;
  }
 else {
    fAnimationScale=1.0f;
  }
  gl.glColor4f(1f,1f,1f,1f);
  renderTextureHeatMap(gl);
  renderMarkerTexture(gl);
  renderSelectedElementsTexture(gl);
  renderCursor(gl);
  if (set.getVA(iStorageVAID).getGroupList() != null) {
    renderClassAssignmentsExperimentsLevel2(gl);
    renderClassAssignmentsExperimentsLevel3(gl);
  }
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glTranslatef(-0.1f,-0.4f,0);
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
  }
 else {
    gl.glTranslatef(-0.2f,0.0f,0);
  }
  gl.glDisable(GL.GL_STENCIL_TEST);
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bRedrawTextures) {
    initTextures(gl);
    bRedrawTextures=false;
  }
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glColor4f(0,0,0,0.15f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(0,0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),0,-0.1f);
  gl.glVertex3f(viewFrustum.getRight(),viewFrustum.getHeight(),-0.1f);
  gl.glVertex3f(0,viewFrustum.getHeight(),-0.1f);
  gl.glEnd();
  viewFrustum.setTop(viewFrustum.getTop() - 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() + 0.1f);
  gl.glTranslatef(0.0f,0.4f,0);
  if (set.getVA(iContentVAID).getGroupList() != null)   renderClassAssignmentsGenes(gl);
  gl.glTranslatef(0.1f,0.0f,0);
  handleTexturePicking(gl);
  if (bSkipLevel1 == false) {
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    gl.glTranslatef(GAP_LEVEL1_2,0,0);
  }
 else {
    gl.glColor4f(1f,1f,0f,1f);
    gl.glTranslatef(0.2f,0.0f,0);
  }
  if (bIsHeatmapInFocus) {
    fAnimationScale=0.2f;
  }
 else {
    fAnimationScale=1.0f;
  }
  gl.glColor4f(1f,1f,1f,1f);
  renderTextureHeatMap(gl);
  renderMarkerTexture(gl);
  renderSelectedElementsTexture(gl);
  renderCursor(gl);
  if (set.getVA(iStorageVAID).getGroupList() != null) {
    renderClassAssignmentsExperimentsLevel2(gl);
    renderClassAssignmentsExperimentsLevel3(gl);
  }
  viewFrustum.setTop(viewFrustum.getTop() + 0.6f);
  viewFrustum.setLeft(viewFrustum.getLeft() - 0.1f);
  gl.glTranslatef(-0.1f,-0.4f,0);
  if (bSkipLevel1 == false) {
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
  }
 else {
    gl.glTranslatef(-0.2f,0.0f,0);
  }
  gl.glEndList();
}",0.9902964959568732
58858,"@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  contextMenu.disable();
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case DOUBLE_CLICKED:
    LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
  loadPathwaysByGeneEvent.setGeneID(iExternalID);
loadPathwaysByGeneEvent.setIdType(EIDType.EXPRESSION_INDEX);
generalManager.getEventPublisher().triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterViewID(iUniqueID);
}
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer(IDMappingHelper.get().getRefSeqFromStorageIndex(iExternalID));
contextMenu.addItemContanier(geneContextMenuItemContainer);
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
IVirtualArray axisVA=set.getVA(iAxisVAID);
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}","@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case DOUBLE_CLICKED:
    LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
  loadPathwaysByGeneEvent.setGeneID(iExternalID);
loadPathwaysByGeneEvent.setIdType(EIDType.EXPRESSION_INDEX);
generalManager.getEventPublisher().triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
eSelectionType=ESelectionType.SELECTION;
GeneContextMenuItemContainer geneContextMenuItemContainer=new GeneContextMenuItemContainer(IDMappingHelper.get().getRefSeqFromStorageIndex(iExternalID));
contextMenu.addItemContanier(geneContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterViewID(iUniqueID);
}
break;
default :
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(EIDType.EXPRESSION_INDEX,command);
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
event.setInfo(getShortInfo());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
SelectionCommand command=new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType);
sendSelectionCommandEvent(eAxisDataType,command);
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSelectionDelta(selectionDelta);
eventPublisher.triggerEvent(event);
rePosition(iExternalID);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
IVirtualArray axisVA=set.getVA(iAxisVAID);
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
sendVirtualArrayUpdateEvent(vaDelta);
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
break;
}
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
break;
}
}",0.9689236468409138
58859,"@Override public synchronized void display(final GL gl){
  if (bShowSelectionHeatMap) {
    gl.glTranslatef(viewFrustum.getRight() - glSelectionHeatMap.getViewFrustum().getWidth(),0,0.002f);
    IViewFrustum sHMFrustum=glSelectionHeatMap.getViewFrustum();
    sHMFrustum.setTop(viewFrustum.getTop());
    sHMFrustum.setBottom(viewFrustum.getBottom());
    gl.glColor4fv(GeneralRenderStyle.PANEL_BACKGROUN_COLOR,0);
    gl.glLineWidth(1);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(glSelectionHeatMap.getViewFrustum().getWidth(),0,0);
    gl.glVertex3f(glSelectionHeatMap.getViewFrustum().getWidth(),glSelectionHeatMap.getViewFrustum().getHeight(),0);
    gl.glVertex3f(0,glSelectionHeatMap.getViewFrustum().getHeight(),0);
    gl.glEnd();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.PCS_VIEW_SELECTION,glSelectionHeatMap.getID());
    gl.glPushName(iPickingID);
    glSelectionHeatMap.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(-viewFrustum.getRight() + glSelectionHeatMap.getViewFrustum().getWidth(),0,-0.002f);
  }
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased()) {
      bWasAxisMoved=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
  if (!isRenderedRemote())   contextMenu.render(gl,iUniqueID);
}","@Override public synchronized void display(final GL gl){
  if (bShowSelectionHeatMap) {
    gl.glTranslatef(viewFrustum.getRight() - glSelectionHeatMap.getViewFrustum().getWidth(),0,0.002f);
    IViewFrustum sHMFrustum=glSelectionHeatMap.getViewFrustum();
    sHMFrustum.setTop(viewFrustum.getTop());
    sHMFrustum.setBottom(viewFrustum.getBottom());
    gl.glColor4fv(GeneralRenderStyle.PANEL_BACKGROUN_COLOR,0);
    gl.glLineWidth(1);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(glSelectionHeatMap.getViewFrustum().getWidth(),0,0);
    gl.glVertex3f(glSelectionHeatMap.getViewFrustum().getWidth(),glSelectionHeatMap.getViewFrustum().getHeight(),0);
    gl.glVertex3f(0,glSelectionHeatMap.getViewFrustum().getHeight(),0);
    gl.glEnd();
    int iPickingID=pickingManager.getPickingID(iUniqueID,EPickingType.PCS_VIEW_SELECTION,glSelectionHeatMap.getID());
    gl.glPushName(iPickingID);
    glSelectionHeatMap.displayRemote(gl);
    gl.glPopName();
    gl.glTranslatef(-viewFrustum.getRight() + glSelectionHeatMap.getViewFrustum().getWidth(),0,-0.002f);
  }
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased()) {
      bWasAxisMoved=false;
    }
  }
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  if (!isRenderedRemote())   contextMenu.render(gl,iUniqueID);
}",0.9893111638954868
58860,"/** 
 * Convenience version of   {@link #convertWindowCoordinatesToWorldCoordinates(GL,int,int,float)} whichassumes z to be 0.3, which is accurate for the bottom of the bucket
 * @param gl
 * @param iWindowCoordinatePositionX
 * @param iWindowCoordinatePositionY
 * @return
 */
public static float[] convertWindowCoordinatesToWorldCoordinates(final GL gl,final int iWindowCoordinatePositionX,final int iWindowCoordinatePositionY){
  return convertWindowCoordinatesToWorldCoordinates(gl,iWindowCoordinatePositionX,iWindowCoordinatePositionY,0.3f);
}","/** 
 * Convenience version of   {@link #convertWindowCoordinatesToWorldCoordinates(GL,int,int,float)} whichassumes z to be 0.3, which is accurate for the bottom of the bucket
 * @param gl
 * @param iWindowCoordinatePositionX
 * @param iWindowCoordinatePositionY
 * @return
 */
public static float[] convertWindowCoordinatesToWorldCoordinates(final GL gl,final int iWindowCoordinatePositionX,final int iWindowCoordinatePositionY){
  return convertWindowCoordinatesToWorldCoordinates(gl,iWindowCoordinatePositionX,iWindowCoordinatePositionY,0.055f);
}",0.9963570127504554
58861,"public void setAttributes(final ArrayList<Integer> iAlStorageId,final String sFileName,final String sTokenPattern,final String sTokenSeparator,final int iStartParseFileAtLine,final int iStopParseFileAtLine){
  this.iAlStorageIDs=iAlStorageId;
  this.sFileName=sFileName;
  this.sTokenPattern=sTokenPattern;
  this.iStartParseFileAtLine=iStartParseFileAtLine;
  this.iStopParseFileAtLine=iStopParseFileAtLine;
  this.sTokenSeparator=sTokenSeparator;
}","public void setAttributes(final ArrayList<Integer> iAlStorageId,final String sFileName,final String sTreeFileName,final String sTokenPattern,final String sTokenSeparator,final int iStartParseFileAtLine,final int iStopParseFileAtLine){
  this.iAlStorageIDs=iAlStorageId;
  this.sFileName=sFileName;
  this.sTreeFileName=sTreeFileName;
  this.sTokenPattern=sTokenPattern;
  this.iStartParseFileAtLine=iStartParseFileAtLine;
  this.iStopParseFileAtLine=iStopParseFileAtLine;
  this.sTokenSeparator=sTokenSeparator;
}",0.9345794392523364
58862,"@Override public void doCommand(){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + sFileName + ""String_Node_Str""+ sTokenPattern+ ""String_Node_Str""+ iAlStorageIDs.toString());
  TabularAsciiDataReader loader=new TabularAsciiDataReader(sFileName);
  loader.setTokenPattern(sTokenPattern);
  loader.setTargetStorages(iAlStorageIDs);
  loader.setStartParsingStopParsingAtLine(iStartParseFileAtLine,iStopParseFileAtLine);
  if (!sTokenSeparator.isEmpty()) {
    loader.setTokenSeperator(sTokenSeparator);
  }
  loader.loadData();
  generalManager.getGUIBridge().setFileNameCurrentDataSet(sFileName);
  commandManager.runDoCommand(this);
}","@Override public void doCommand(){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + sFileName + ""String_Node_Str""+ sTokenPattern+ ""String_Node_Str""+ iAlStorageIDs.toString());
  TabularAsciiDataReader loader=new TabularAsciiDataReader(sFileName);
  loader.setTokenPattern(sTokenPattern);
  loader.setTargetStorages(iAlStorageIDs);
  loader.setStartParsingStopParsingAtLine(iStartParseFileAtLine,iStopParseFileAtLine);
  if (!sTokenSeparator.isEmpty()) {
    loader.setTokenSeperator(sTokenSeparator);
  }
  loader.loadData();
  generalManager.getGUIBridge().setFileNameCurrentDataSet(sFileName);
  if (sTreeFileName != null) {
    if (sTreeFileName.equals(""String_Node_Str"") == false) {
      generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + sTreeFileName);
      TreePorter treePorter=new TreePorter();
      Tree<ClusterNode> tree=treePorter.importTree(sTreeFileName);
      ISet set=generalManager.getUseCase().getSet();
      set.setClusteredTreeGenes(tree);
    }
  }
  commandManager.runDoCommand(this);
}",0.768957345971564
58863,"public void export(ISet set,String sFileName,boolean bExportBucketInternal){
  IVirtualArray contentVA=null;
  IVirtualArray storageVA=null;
  Collection<AGLEventListener> views=GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners();
  for (  AGLEventListener view : views) {
    if (view instanceof GLParallelCoordinates && view.isRenderedRemote() && bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
 else     if (!view.isRenderedRemote() && (view instanceof GLParallelCoordinates || view instanceof GLHierarchicalHeatMap) && !bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    if (contentVA.getGroupList() != null)     out.print(""String_Node_Str"");
    out.println();
    int cnt=0;
    int cluster=0;
    int index=0;
    int offset=0;
    for (    Integer iContentIndex : contentVA) {
      IIDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
      Integer iRefseqMrnaInt=iDMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iContentIndex);
      if (iRefseqMrnaInt == null) {
        continue;
      }
      String sRefseqMrna=iDMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefseqMrnaInt);
      out.print(sRefseqMrna + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      if (contentVA.getGroupList() != null) {
        if (cnt == contentVA.getGroupList().get(cluster).getNrElements() - 0) {
          offset=offset + contentVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        if (cluster < contentVA.getGroupList().size()) {
          if (index == offset + contentVA.getGroupList().get(cluster).getIdxExample())           out.print(cluster + ""String_Node_Str"" + 1+ ""String_Node_Str"");
 else           out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        }
 else         out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        index++;
      }
      out.println();
    }
    out.close();
    Tree<ClusterNode> tree=set.getClusteredTreeGenes();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      if (treePorter.exportTree(sFileName + ""String_Node_Str"",tree) == false)       System.out.println(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
  }
catch (  JAXBException e) {
    e.printStackTrace();
  }
}","public void export(ISet set,String sFileName,boolean bExportBucketInternal){
  IVirtualArray contentVA=null;
  IVirtualArray storageVA=null;
  Collection<AGLEventListener> views=GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners();
  for (  AGLEventListener view : views) {
    if (view instanceof GLParallelCoordinates && view.isRenderedRemote() && bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
 else     if (!view.isRenderedRemote() && (view instanceof GLParallelCoordinates || view instanceof GLHierarchicalHeatMap) && !bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    if (contentVA.getGroupList() != null)     out.print(""String_Node_Str"");
    out.println();
    int cnt=-1;
    int cluster=0;
    int index=0;
    int offset=0;
    for (    Integer iContentIndex : contentVA) {
      IIDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
      Integer iRefseqMrnaInt=iDMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iContentIndex);
      if (iRefseqMrnaInt == null) {
        continue;
      }
      String sRefseqMrna=iDMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefseqMrnaInt);
      out.print(sRefseqMrna + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      if (contentVA.getGroupList() != null) {
        if (cnt == contentVA.getGroupList().get(cluster).getNrElements() - 1) {
          offset=offset + contentVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        if (cnt == 0)         out.print(cluster + ""String_Node_Str"" + 1+ ""String_Node_Str"");
 else         out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        index++;
      }
      out.println();
    }
    out.close();
    Tree<ClusterNode> tree=set.getClusteredTreeGenes();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      if (treePorter.exportTree(sFileName + ""String_Node_Str"",tree) == false)       System.out.println(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
  }
catch (  JAXBException e) {
    e.printStackTrace();
  }
}",0.9610129956681106
58864,"@Override public void setGroupNrInfo(int[] arGroupInfo){
  int cluster=0, cnt=0;
  groupList.clear();
  for (int i=0; i < arGroupInfo.length; i++) {
    Group group=null;
    if (cluster != arGroupInfo[i]) {
      group=new Group(cnt,false,0,ESelectionType.NORMAL);
      groupList.append(group);
      cluster++;
      cnt=0;
    }
    cnt++;
  }
  bClusterInfo=true;
}","@Override public void setGroupNrInfo(int[] arGroupInfo){
  int cluster=0, cnt=0;
  groupList.clear();
  for (int i=0; i < arGroupInfo.length; i++) {
    Group group=null;
    if (cluster != arGroupInfo[i]) {
      group=new Group(cnt,false,0,ESelectionType.NORMAL);
      groupList.append(group);
      cluster++;
      cnt=0;
    }
    cnt++;
    if (i == arGroupInfo.length - 1) {
      group=new Group(cnt,false,0,ESelectionType.NORMAL);
      groupList.append(group);
    }
  }
  bClusterInfo=true;
}",0.8466819221967964
58865,"public Tree<ClusterNode> importTree(String fileName){
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  ClusterNode rootNode=null;
  DirectedGraph<ClusterNode,DefaultEdge> graph=new DefaultDirectedGraph<ClusterNode,DefaultEdge>(DefaultEdge.class);
  JAXBContext jaxbContext=null;
  TreePorter treePorter=null;
  Unmarshaller unmarshaller;
  HashMap<String,ClusterNode> hashClusterNodes=new HashMap<String,ClusterNode>();
  try {
    jaxbContext=JAXBContext.newInstance(TreePorter.class);
    unmarshaller=jaxbContext.createUnmarshaller();
    treePorter=(TreePorter)unmarshaller.unmarshal(new FileReader(fileName));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  JAXBException e) {
    e.printStackTrace();
  }
  for (  ClusterNode node : treePorter.nodeSet) {
    graph.addVertex(node);
    hashClusterNodes.put(node.toString(),node);
    if (node.isRootNode())     rootNode=node;
  }
  for (  String[] edge : treePorter.edges) {
    graph.addEdge(hashClusterNodes.get(edge[0]),hashClusterNodes.get(edge[1]));
  }
  tree.setRootNode(rootNode);
  tree.setGraph(graph);
  return tree;
}","public Tree<ClusterNode> importTree(String fileName){
  Tree<ClusterNode> tree=new Tree<ClusterNode>();
  ClusterNode rootNode=null;
  DirectedGraph<ClusterNode,DefaultEdge> graph=new DefaultDirectedGraph<ClusterNode,DefaultEdge>(DefaultEdge.class);
  JAXBContext jaxbContext=null;
  TreePorter treePorter=null;
  Unmarshaller unmarshaller;
  HashMap<Integer,ClusterNode> hashClusterNr=new HashMap<Integer,ClusterNode>();
  HashMap<String,ClusterNode> hashClusterNodes=new HashMap<String,ClusterNode>();
  try {
    jaxbContext=JAXBContext.newInstance(TreePorter.class);
    unmarshaller=jaxbContext.createUnmarshaller();
    treePorter=(TreePorter)unmarshaller.unmarshal(new FileReader(fileName));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  JAXBException e) {
    e.printStackTrace();
  }
  for (  ClusterNode node : treePorter.nodeSet) {
    graph.addVertex(node);
    hashClusterNodes.put(node.toString(),node);
    hashClusterNr.put(node.getClusterNr(),node);
    if (node.isRootNode())     rootNode=node;
  }
  for (  String[] edge : treePorter.edges) {
    graph.addEdge(hashClusterNodes.get(edge[0]),hashClusterNodes.get(edge[1]));
  }
  tree.setHashMap(hashClusterNr);
  tree.setRootNode(rootNode);
  tree.setGraph(graph);
  return tree;
}",0.9317235636969192
58866,"@Override public void handleMouseOver(String clusterNodeName){
}","public void handleMouseOver(int clusterNr){
  if (tree.getNodeByNumber(clusterNr) != null)   tree.getNodeByNumber(clusterNr).setSelectionType(ESelectionType.MOUSE_OVER);
  setDisplayListDirty();
}",0.3615384615384615
58867,"/** 
 * Render a node of the dendrogram (recursive)
 * @param gl
 * @param currentNode
 */
private void renderDendrogram(final GL gl,ClusterNode currentNode){
  if (currentNode.getSelectionType() == ESelectionType.MOUSE_OVER) {
    gl.glColor4fv(MOUSE_OVER_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glEnd();
  }
 else   if (currentNode.getSelectionType() == ESelectionType.SELECTION) {
    gl.glColor4fv(SELECTED_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glEnd();
  }
 else {
    float fLookupValue=currentNode.getAverageExpressionValue();
    float[] fArMappingColor=colorMapper.getColor(fLookupValue);
    float fOpacity=1;
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  }
  float fDiff=0;
  float fTemp=currentNode.getPos().x();
  List<ClusterNode> listGraph=null;
  if (tree.hasChildren(currentNode)) {
    listGraph=tree.getChildren(currentNode);
    int iNrChildsNode=listGraph.size();
    float xmin=Float.MAX_VALUE;
    float ymax=Float.MIN_VALUE;
    float ymin=Float.MAX_VALUE;
    Vec3f[] temp=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode current=(ClusterNode)listGraph.get(i);
      temp[i]=new Vec3f();
      temp[i].setX(current.getPos().x());
      temp[i].setY(current.getPos().y());
      temp[i].setZ(current.getPos().z());
      xmin=Math.min(xmin,current.getPos().x());
      ymax=Math.max(ymax,current.getPos().y());
      ymin=Math.min(ymin,current.getPos().y());
      renderDendrogram(gl,current);
    }
    fDiff=fTemp - xmin;
    float fLookupValue=currentNode.getAverageExpressionValue();
    float[] fArMappingColor=colorMapper.getColor(fLookupValue);
    float fOpacity=1;
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.DENDROGRAM_SELECTION,currentNode.getClusterNr()));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(xmin - 0.1f,ymin,currentNode.getPos().z());
    gl.glVertex3f(xmin - 0.1f,ymax,currentNode.getPos().z());
    gl.glEnd();
    gl.glColor4f(0,0,0,1);
    for (int i=0; i < iNrChildsNode; i++) {
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(xmin - 0.1f,temp[i].y(),temp[i].z());
      gl.glVertex3f(temp[i].x() - 0.1f,temp[i].y(),temp[i].z());
      gl.glEnd();
    }
    gl.glPopName();
  }
 else {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.DENDROGRAM_SELECTION,currentNode.getClusterNr()));
    float fLookupValue=currentNode.getAverageExpressionValue();
    float[] fArMappingColor=colorMapper.getColor(fLookupValue);
    float fOpacity=1;
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(currentNode.getPos().x(),currentNode.getPos().y(),currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() - 0.1f,currentNode.getPos().y(),currentNode.getPos().z());
    gl.glEnd();
    gl.glPopName();
  }
  float fLookupValue=currentNode.getAverageExpressionValue();
  float[] fArMappingColor=colorMapper.getColor(fLookupValue);
  float fOpacity=1;
  gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(currentNode.getPos().x() - fDiff - 0.1f,currentNode.getPos().y(),currentNode.getPos().z());
  gl.glVertex3f(currentNode.getPos().x() - 0.1f,currentNode.getPos().y(),currentNode.getPos().z());
  gl.glEnd();
}","/** 
 * Render a node of the dendrogram (recursive)
 * @param gl
 * @param currentNode
 */
private void renderDendrogram(final GL gl,ClusterNode currentNode){
  if (currentNode.getSelectionType() == ESelectionType.MOUSE_OVER) {
    gl.glColor4fv(MOUSE_OVER_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glEnd();
  }
 else   if (currentNode.getSelectionType() == ESelectionType.SELECTION) {
    gl.glColor4fv(SELECTED_COLOR,0);
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() - 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() + 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() - 0.05f,currentNode.getPos().y() + 0.05f,currentNode.getPos().z());
    gl.glEnd();
  }
 else {
    float fLookupValue=currentNode.getAverageExpressionValue();
    float[] fArMappingColor=colorMapper.getColor(fLookupValue);
    float fOpacity=1;
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  }
  float fDiff=0;
  float fTemp=currentNode.getPos().x();
  List<ClusterNode> listGraph=null;
  if (tree.hasChildren(currentNode)) {
    listGraph=tree.getChildren(currentNode);
    int iNrChildsNode=listGraph.size();
    float xmin=Float.MAX_VALUE;
    float ymax=Float.MIN_VALUE;
    float ymin=Float.MAX_VALUE;
    Vec3f[] temp=new Vec3f[iNrChildsNode];
    for (int i=0; i < iNrChildsNode; i++) {
      ClusterNode current=(ClusterNode)listGraph.get(i);
      temp[i]=new Vec3f();
      temp[i].setX(current.getPos().x());
      temp[i].setY(current.getPos().y());
      temp[i].setZ(current.getPos().z());
      xmin=Math.min(xmin,current.getPos().x());
      ymax=Math.max(ymax,current.getPos().y());
      ymin=Math.min(ymin,current.getPos().y());
      if (current.getDepth() > iMaxDepth)       renderDendrogram(gl,current);
    }
    fDiff=fTemp - xmin;
    float fLookupValue=currentNode.getAverageExpressionValue();
    float[] fArMappingColor=colorMapper.getColor(fLookupValue);
    float fOpacity=1;
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.DENDROGRAM_SELECTION,currentNode.getClusterNr()));
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(xmin - 0.1f,ymin,currentNode.getPos().z());
    gl.glVertex3f(xmin - 0.1f,ymax,currentNode.getPos().z());
    gl.glEnd();
    gl.glColor4f(0,0,0,1);
    for (int i=0; i < iNrChildsNode; i++) {
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(xmin - 0.1f,temp[i].y(),temp[i].z());
      gl.glVertex3f(temp[i].x() - 0.1f,temp[i].y(),temp[i].z());
      gl.glEnd();
    }
    gl.glPopName();
  }
 else {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.DENDROGRAM_SELECTION,currentNode.getClusterNr()));
    float fLookupValue=currentNode.getAverageExpressionValue();
    float[] fArMappingColor=colorMapper.getColor(fLookupValue);
    float fOpacity=1;
    gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(currentNode.getPos().x(),currentNode.getPos().y(),currentNode.getPos().z());
    gl.glVertex3f(currentNode.getPos().x() - 0.1f,currentNode.getPos().y(),currentNode.getPos().z());
    gl.glEnd();
    gl.glPopName();
  }
  float fLookupValue=currentNode.getAverageExpressionValue();
  float[] fArMappingColor=colorMapper.getColor(fLookupValue);
  float fOpacity=1;
  gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(currentNode.getPos().x() - fDiff - 0.1f,currentNode.getPos().y(),currentNode.getPos().z());
  gl.glVertex3f(currentNode.getPos().x() - 0.1f,currentNode.getPos().y(),currentNode.getPos().z());
  gl.glEnd();
}",0.9951779563719862
58868,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      set.getVA(iContentVAID).getGroupList().get(iExternalID).toggleSelectionType();
    setDisplayListDirty();
  break;
case DRAGGED:
if (bSplitGroupGene == false) {
  bSplitGroupGene=true;
  iGroupToSplit=iExternalID;
  DraggingPoint=pick.getPickedPoint();
}
setDisplayListDirty();
break;
case MOUSE_OVER:
System.out.print(""String_Node_Str"" + iExternalID);
System.out.print(""String_Node_Str"");
System.out.println(set.getVA(iContentVAID).getGroupList().get(iExternalID).getNrElements());
setDisplayListDirty();
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
set.getVA(iStorageVAID).getGroupList().get(iExternalID).toggleSelectionType();
setDisplayListDirty();
break;
case DRAGGED:
if (bSplitGroupExp == false) {
bSplitGroupExp=true;
iGroupToSplit=iExternalID;
DraggingPoint=pick.getPickedPoint();
}
setDisplayListDirty();
break;
case MOUSE_OVER:
System.out.print(""String_Node_Str"" + iExternalID);
System.out.print(""String_Node_Str"");
System.out.println(set.getVA(iStorageVAID).getGroupList().get(iExternalID).getNrElements());
setDisplayListDirty();
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_CURSOR:
switch (pickingMode) {
case CLICKED:
if (bSkipLevel1 == false) {
if (iExternalID == 1) {
iSelectorBar--;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
}
if (iExternalID == 2) {
iSelectorBar++;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
}
setDisplayListDirty();
}
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
bIsDraggingActive=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
bIsDraggingWholeBlock=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
if (bSkipLevel1 == false) {
iSelectorBar=iExternalID;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
}
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
break;
case CLICKED:
break;
case RIGHT_CLICKED:
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
break;
}
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_GENES_GROUP:
switch (pickingMode) {
case CLICKED:
      set.getVA(iContentVAID).getGroupList().get(iExternalID).toggleSelectionType();
    setDisplayListDirty();
  break;
case DRAGGED:
if (bSplitGroupGene == false) {
  bSplitGroupGene=true;
  iGroupToSplit=iExternalID;
  DraggingPoint=pick.getPickedPoint();
}
setDisplayListDirty();
break;
case RIGHT_CLICKED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_EXPERIMENTS_GROUP:
switch (pickingMode) {
case CLICKED:
set.getVA(iStorageVAID).getGroupList().get(iExternalID).toggleSelectionType();
setDisplayListDirty();
break;
case DRAGGED:
if (bSplitGroupExp == false) {
bSplitGroupExp=true;
iGroupToSplit=iExternalID;
DraggingPoint=pick.getPickedPoint();
}
setDisplayListDirty();
break;
case MOUSE_OVER:
System.out.print(""String_Node_Str"" + iExternalID);
System.out.print(""String_Node_Str"");
System.out.println(set.getVA(iStorageVAID).getGroupList().get(iExternalID).getNrElements());
setDisplayListDirty();
break;
}
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=bIsHeatmapInFocus == true ? false : true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_CURSOR:
switch (pickingMode) {
case CLICKED:
if (bSkipLevel1 == false) {
if (iExternalID == 1) {
iSelectorBar--;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
}
if (iExternalID == 2) {
iSelectorBar++;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
}
setDisplayListDirty();
}
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_CURSOR:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
bIsDraggingActive=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_BLOCK_CURSOR:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
bIsDraggingWholeBlock=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
if (bSkipLevel1 == false) {
iSelectorBar=iExternalID;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
}
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
case RIGHT_CLICKED:
break;
}
break;
}
}",0.7688483844241922
58869,"@Override protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case BUCKET_DRAG_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
      if (!dragAndDrop.isDragActionRunning()) {
        dragAndDrop.startDragAction(iExternalID);
      }
    iMouseOverObjectID=iExternalID;
  compactPoolLevel();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_DRAG_ICON_SELECTION);
pickingManager.flushHits(iUniqueID,EPickingType.REMOTE_LEVEL_ELEMENT);
break;
case BUCKET_REMOVE_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
AGLEventListener glEventListener=(AGLEventListener)generalManager.getViewGLCanvasManager().getGLEventListener(element.getContainedElementID());
removeView(glEventListener);
element.setContainedElementID(-1);
containedViewIDs.remove(new Integer(glEventListener.getID()));
if (element.getRemoteLevel() == poolLevel) {
compactPoolLevel();
}
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_REMOVE_ICON_SELECTION);
break;
case BUCKET_LOCK_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
element.lock(!element.isLocked());
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_LOCK_ICON_SELECTION);
break;
case REMOTE_LEVEL_ELEMENT:
switch (pickingMode) {
case MOUSE_OVER:
case DRAGGED:
iMouseOverObjectID=iExternalID;
break;
case CLICKED:
if (dragAndDrop.isDragActionRunning()) {
break;
}
for (RemoteLevelElement element : poolLevel.getAllElements()) {
if (element.getID() == iExternalID) {
loadViewToFocusLevel(iExternalID);
break;
}
}
break;
}
pickingManager.flushHits(iUniqueID,pickingType);
break;
case VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
if (iActiveViewID == iExternalID) {
break;
}
iActiveViewID=iExternalID;
setDisplayListDirty();
break;
case CLICKED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.VIEW_SELECTION);
break;
case BUCKET_MOVE_IN_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
loadViewToFocusLevel(iExternalID);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=iExternalID;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_IN_ICON_SELECTION);
break;
case BUCKET_MOVE_OUT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) {
break;
}
arSlerpActions.clear();
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
SlerpAction slerpActionTransition=new SlerpAction(element,poolLevel.getNextFree());
arSlerpActions.add(slerpActionTransition);
bEnableNavigationOverlay=false;
generalManager.getViewGLCanvasManager().getGLEventListener(element.getContainedElementID()).broadcastElements(EVAOperation.REMOVE_ELEMENT);
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=iExternalID;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION);
break;
case BUCKET_MOVE_LEFT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) {
break;
}
arSlerpActions.clear();
RemoteLevelElement selectedElement=RemoteElementManager.get().getItem(iExternalID);
int iDestinationPosIndex=stackLevel.getPositionIndexByElementID(selectedElement);
if (iDestinationPosIndex == 3) {
iDestinationPosIndex=0;
}
 else {
iDestinationPosIndex++;
}
if (stackLevel.getElementByPositionIndex(iDestinationPosIndex).getContainedElementID() == -1) {
SlerpAction slerpAction=new SlerpAction(selectedElement,stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(selectedElement,transitionLevel.getElementByPositionIndex(0));
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLevel.getElementByPositionIndex(iDestinationPosIndex),selectedElement);
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(selectedElement.getContainedElementID(),transitionLevel.getElementByPositionIndex(0),stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=iExternalID;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION);
break;
case BUCKET_MOVE_RIGHT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) {
break;
}
arSlerpActions.clear();
RemoteLevelElement selectedElement=RemoteElementManager.get().getItem(iExternalID);
int iDestinationPosIndex=stackLevel.getPositionIndexByElementID(selectedElement);
if (iDestinationPosIndex == 0) {
iDestinationPosIndex=3;
}
 else {
iDestinationPosIndex--;
}
if (stackLevel.getElementByPositionIndex(iDestinationPosIndex).getContainedElementID() == -1) {
SlerpAction slerpAction=new SlerpAction(selectedElement,stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(selectedElement,transitionLevel.getElementByPositionIndex(0));
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLevel.getElementByPositionIndex(iDestinationPosIndex),selectedElement);
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(selectedElement.getContainedElementID(),transitionLevel.getElementByPositionIndex(0),stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=iExternalID;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION);
break;
}
}","@Override protected void handleEvents(EPickingType pickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
switch (pickingType) {
case BUCKET_DRAG_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
      if (!dragAndDrop.isDragActionRunning()) {
        dragAndDrop.startDragAction(iExternalID);
      }
    iMouseOverObjectID=iExternalID;
  compactPoolLevel();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_DRAG_ICON_SELECTION);
pickingManager.flushHits(iUniqueID,EPickingType.REMOTE_LEVEL_ELEMENT);
break;
case BUCKET_REMOVE_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
AGLEventListener glEventListener=(AGLEventListener)generalManager.getViewGLCanvasManager().getGLEventListener(element.getContainedElementID());
removeView(glEventListener);
element.setContainedElementID(-1);
containedViewIDs.remove(new Integer(glEventListener.getID()));
if (element.getRemoteLevel() == poolLevel) {
compactPoolLevel();
}
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_REMOVE_ICON_SELECTION);
break;
case BUCKET_LOCK_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
element.lock(!element.isLocked());
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_LOCK_ICON_SELECTION);
break;
case REMOTE_LEVEL_ELEMENT:
switch (pickingMode) {
case MOUSE_OVER:
case DRAGGED:
iMouseOverObjectID=iExternalID;
break;
case CLICKED:
if (dragAndDrop.isDragActionRunning()) {
break;
}
for (RemoteLevelElement element : poolLevel.getAllElements()) {
if (element.getID() == iExternalID) {
loadViewToFocusLevel(iExternalID);
break;
}
}
break;
}
pickingManager.flushHits(iUniqueID,pickingType);
break;
case VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
if (iActiveViewID == iExternalID) {
break;
}
iActiveViewID=iExternalID;
setDisplayListDirty();
break;
case CLICKED:
break;
}
infoAreaManager.setData(iExternalID,EIDType.EXPRESSION_INDEX,pick.getPickedPoint(),0.3f);
pickingManager.flushHits(iUniqueID,EPickingType.VIEW_SELECTION);
break;
case BUCKET_MOVE_IN_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
loadViewToFocusLevel(iExternalID);
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=iExternalID;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_IN_ICON_SELECTION);
break;
case BUCKET_MOVE_OUT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) {
break;
}
arSlerpActions.clear();
RemoteLevelElement element=RemoteElementManager.get().getItem(iExternalID);
SlerpAction slerpActionTransition=new SlerpAction(element,poolLevel.getNextFree());
arSlerpActions.add(slerpActionTransition);
bEnableNavigationOverlay=false;
generalManager.getViewGLCanvasManager().getGLEventListener(element.getContainedElementID()).broadcastElements(EVAOperation.REMOVE_ELEMENT);
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=iExternalID;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_OUT_ICON_SELECTION);
break;
case BUCKET_MOVE_LEFT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) {
break;
}
arSlerpActions.clear();
RemoteLevelElement selectedElement=RemoteElementManager.get().getItem(iExternalID);
int iDestinationPosIndex=stackLevel.getPositionIndexByElementID(selectedElement);
if (iDestinationPosIndex == 3) {
iDestinationPosIndex=0;
}
 else {
iDestinationPosIndex++;
}
if (stackLevel.getElementByPositionIndex(iDestinationPosIndex).getContainedElementID() == -1) {
SlerpAction slerpAction=new SlerpAction(selectedElement,stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(selectedElement,transitionLevel.getElementByPositionIndex(0));
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLevel.getElementByPositionIndex(iDestinationPosIndex),selectedElement);
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(selectedElement.getContainedElementID(),transitionLevel.getElementByPositionIndex(0),stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=iExternalID;
iNavigationMouseOverViewID_right=-1;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_LEFT_ICON_SELECTION);
break;
case BUCKET_MOVE_RIGHT_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
if (iSlerpFactor > 0 && iSlerpFactor < SLERP_RANGE) {
break;
}
arSlerpActions.clear();
RemoteLevelElement selectedElement=RemoteElementManager.get().getItem(iExternalID);
int iDestinationPosIndex=stackLevel.getPositionIndexByElementID(selectedElement);
if (iDestinationPosIndex == 0) {
iDestinationPosIndex=3;
}
 else {
iDestinationPosIndex--;
}
if (stackLevel.getElementByPositionIndex(iDestinationPosIndex).getContainedElementID() == -1) {
SlerpAction slerpAction=new SlerpAction(selectedElement,stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpAction);
}
 else {
SlerpAction slerpActionTransition=new SlerpAction(selectedElement,transitionLevel.getElementByPositionIndex(0));
arSlerpActions.add(slerpActionTransition);
SlerpAction slerpAction=new SlerpAction(stackLevel.getElementByPositionIndex(iDestinationPosIndex),selectedElement);
arSlerpActions.add(slerpAction);
SlerpAction slerpActionTransitionReverse=new SlerpAction(selectedElement.getContainedElementID(),transitionLevel.getElementByPositionIndex(0),stackLevel.getElementByPositionIndex(iDestinationPosIndex));
arSlerpActions.add(slerpActionTransitionReverse);
}
bEnableNavigationOverlay=false;
break;
case MOUSE_OVER:
iNavigationMouseOverViewID_left=-1;
iNavigationMouseOverViewID_right=iExternalID;
iNavigationMouseOverViewID_out=-1;
iNavigationMouseOverViewID_in=-1;
iNavigationMouseOverViewID_lock=-1;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.BUCKET_MOVE_RIGHT_ICON_SELECTION);
break;
}
}",0.9931255728689276
58870,"@Override public synchronized void display(final GL gl){
  time.update();
  layoutRenderStyle.initPoolLevel(false,iMouseOverObjectID);
  layoutRenderStyle.initFocusLevel();
  if (GeneralManager.get().isWiiModeActive() && layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    ((BucketLayoutRenderStyle)layoutRenderStyle).initFocusLevelWii();
    ((BucketLayoutRenderStyle)layoutRenderStyle).initStackLevelWii();
  }
  doSlerpActions(gl);
  initNewView(gl);
  if (!generalManager.isWiiModeActive()) {
    renderRemoteLevel(gl,focusLevel);
    renderRemoteLevel(gl,stackLevel);
  }
 else {
    if (bUpdateOffScreenTextures) {
      updateOffScreenTextures(gl);
    }
    renderRemoteLevel(gl,focusLevel);
    glOffScreenRenderer.renderRubberBucket(gl,stackLevel,(BucketLayoutRenderStyle)layoutRenderStyle,this);
  }
  if (bucketMouseWheelListener == null || !bucketMouseWheelListener.isZoomedIn()) {
    renderPoolAndMemoLayerBackground(gl);
    renderRemoteLevel(gl,transitionLevel);
    renderRemoteLevel(gl,spawnLevel);
    renderRemoteLevel(gl,poolLevel);
    renderRemoteLevel(gl,externalSelectionLevel);
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    bucketMouseWheelListener.render();
  }
  renderHandles(gl);
  gl.glDisable(GL.GL_DEPTH_TEST);
  if (glConnectionLineRenderer != null && connectionLinesEnabled) {
    glConnectionLineRenderer.render(gl);
  }
  gl.glEnable(GL.GL_DEPTH_TEST);
}","@Override public synchronized void display(final GL gl){
  time.update();
  layoutRenderStyle.initPoolLevel(false,iMouseOverObjectID);
  layoutRenderStyle.initFocusLevel();
  if (GeneralManager.get().isWiiModeActive() && layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    ((BucketLayoutRenderStyle)layoutRenderStyle).initFocusLevelWii();
    ((BucketLayoutRenderStyle)layoutRenderStyle).initStackLevelWii();
  }
  doSlerpActions(gl);
  initNewView(gl);
  if (!generalManager.isWiiModeActive()) {
    renderRemoteLevel(gl,focusLevel);
    renderRemoteLevel(gl,stackLevel);
  }
 else {
    if (bUpdateOffScreenTextures) {
      updateOffScreenTextures(gl);
    }
    renderRemoteLevel(gl,focusLevel);
    glOffScreenRenderer.renderRubberBucket(gl,stackLevel,(BucketLayoutRenderStyle)layoutRenderStyle,this);
  }
  if (bucketMouseWheelListener == null || !bucketMouseWheelListener.isZoomedIn()) {
    renderPoolAndMemoLayerBackground(gl);
    renderRemoteLevel(gl,transitionLevel);
    renderRemoteLevel(gl,spawnLevel);
    renderRemoteLevel(gl,poolLevel);
    renderRemoteLevel(gl,externalSelectionLevel);
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    bucketMouseWheelListener.render();
  }
  renderHandles(gl);
  gl.glDisable(GL.GL_DEPTH_TEST);
  if (glConnectionLineRenderer != null && connectionLinesEnabled) {
    glConnectionLineRenderer.render(gl);
  }
  gl.glEnable(GL.GL_DEPTH_TEST);
  Dimension size=getParentGLCanvas().getSize();
  infoAreaManager.renderRemoteInPlaceInfo(gl,100,100,viewFrustum);
}",0.9618573797678276
58871,"@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    pickingManager.flushHits(iUniqueID,EPickingType.PCS_VIEW_SELECTION);
  break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case DOUBLE_CLICKED:
  LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
loadPathwaysByGeneEvent.setGeneID(IDMappingHelper.get().getRefSeqFromStorageIndex(iExternalID));
loadPathwaysByGeneEvent.setIdType(EIDType.REFSEQ_MRNA_INT);
generalManager.getEventPublisher().triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
infoAreaManager.setData(iExternalID,EIDType.EXPRESSION_INDEX,pick.getPickedPoint(),pick.getDepth());
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX) {
Integer iRefSeqID=idMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iExternalID);
if (iRefSeqID == null) {
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
for (Object iExpressionIndex : idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,iRefSeqID)) {
polylineSelectionManager.addToType(eSelectionType,(Integer)iExpressionIndex);
polylineSelectionManager.addConnectionID(iConnectionID,(Integer)iExpressionIndex);
}
}
 else {
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
}
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(EIDType.REFSEQ_MRNA_INT,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
}
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(eAxisDataType,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
rePosition(iExternalID);
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
IVirtualArray axisVA=set.getVA(iAxisVAID);
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.MOVE_AXIS);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
pickingManager.flushHits(iUniqueID,EPickingType.DUPLICATE_AXIS);
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.ADD_GATE);
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.ADD_MASTER_GATE);
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_GATE);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueID,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueID,EPickingType.ANGULAR_LOWER);
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_NAN);
break;
}
}","@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case PCS_VIEW_SELECTION:
    pickingManager.flushHits(iUniqueID,EPickingType.PCS_VIEW_SELECTION);
  break;
case POLYLINE_SELECTION:
switch (ePickingMode) {
case DOUBLE_CLICKED:
  LoadPathwaysByGeneEvent loadPathwaysByGeneEvent=new LoadPathwaysByGeneEvent();
loadPathwaysByGeneEvent.setGeneID(IDMappingHelper.get().getRefSeqFromStorageIndex(iExternalID));
loadPathwaysByGeneEvent.setIdType(EIDType.REFSEQ_MRNA_INT);
generalManager.getEventPublisher().triggerEvent(loadPathwaysByGeneEvent);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
if (polylineSelectionManager.checkStatus(eSelectionType,iExternalID)) {
break;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX) {
Integer iRefSeqID=idMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iExternalID);
if (iRefSeqID == null) {
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
for (Object iExpressionIndex : idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,iRefSeqID)) {
polylineSelectionManager.addToType(eSelectionType,(Integer)iExpressionIndex);
polylineSelectionManager.addConnectionID(iConnectionID,(Integer)iExpressionIndex);
}
}
 else {
polylineSelectionManager.addToType(eSelectionType,iExternalID);
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
}
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(EIDType.REFSEQ_MRNA_INT,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
}
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(eAxisDataType,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
rePosition(iExternalID);
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
IVirtualArray axisVA=set.getVA(iAxisVAID);
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) {
hashGates.remove(axisVA.get(iExternalID));
}
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS:
switch (ePickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.MOVE_AXIS);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=iExternalID;
break;
case CLICKED:
if (iExternalID >= 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
pickingManager.flushHits(iUniqueID,EPickingType.DUPLICATE_AXIS);
break;
case ADD_GATE:
switch (ePickingMode) {
case CLICKED:
Integer iGateCount=hashNumberOfGatesPerAxisID.get(iExternalID);
if (iGateCount == null) {
iGateCount=1;
}
 else {
iGateCount++;
}
hashNumberOfGatesPerAxisID.put(iExternalID,iGateCount);
int iGateID=iExternalID * 1000 + iGateCount;
hashGates.put(iGateID,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iGateID,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.ADD_GATE);
break;
case ADD_MASTER_GATE:
switch (ePickingMode) {
case CLICKED:
hashMasterGates.put(++iNumberOfMasterGates,new Pair<Float,Float>(0f,renderStyle.getAxisHeight() / 2f));
hashIsGateBlocking.put(iNumberOfMasterGates,new ArrayList<Integer>());
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.ADD_MASTER_GATE);
break;
case REMOVE_GATE:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 999) {
hashGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
 else {
hashMasterGates.remove(iExternalID);
hashIsGateBlocking.remove(iExternalID);
setDisplayListDirty();
}
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_GATE);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueID,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueID,EPickingType.ANGULAR_LOWER);
break;
case REMOVE_NAN:
switch (ePickingMode) {
case CLICKED:
if (hashExcludeNAN.containsKey(iExternalID)) {
hashExcludeNAN.remove(iExternalID);
}
 else {
hashExcludeNAN.put(iExternalID,null);
}
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_NAN);
break;
}
}",0.9942966853012593
58872,"public IGraphItem createVertexRep(final IGraph parentPathway,final IGraphItem parentVertex,final String sName,final String sShapeType,final String sCoords);","public IGraphItem createVertexRep(final IGraph parentPathway,ArrayList<IGraphItem> alVertexGraphItem,final String sName,final String sShapeType,final String sCoords);",0.906832298136646
58873,"public IGraphItem createVertexGene(final String sName,final String sType,final String sExternalLink,final String sReactionId,final int iDavidId);","public ArrayList<IGraphItem> createVertexGene(final String sName,final String sType,final String sExternalLink,final String sReactionId,final Set<Integer> iSetDavidId);",0.9201277955271564
58874,"public IGraphItem createVertexRep(final IGraph parentPathway,final IGraphItem parentVertex,final String sName,final String sShapeType,final String sCoords){
  ICaleydoGraphItem pathwayVertexRep=new PathwayVertexGraphItemRep(sName,sShapeType,sCoords);
  registerItem(pathwayVertexRep);
  parentPathway.addItem(pathwayVertexRep);
  pathwayVertexRep.addGraph(parentPathway,EGraphItemHierarchy.GRAPH_PARENT);
  pathwayVertexRep.addItem(parentVertex,EGraphItemProperty.ALIAS_PARENT);
  parentVertex.addItem(pathwayVertexRep,EGraphItemProperty.ALIAS_CHILD);
  hashIDToPathwayVertexGraphItemRep.put(pathwayVertexRep.getId(),(PathwayVertexGraphItemRep)pathwayVertexRep);
  return pathwayVertexRep;
}","public IGraphItem createVertexRep(final IGraph parentPathway,final ArrayList<IGraphItem> alVertexGraphItem,final String sName,final String sShapeType,final String sCoords){
  ICaleydoGraphItem pathwayVertexRep=new PathwayVertexGraphItemRep(sName,sShapeType,sCoords);
  registerItem(pathwayVertexRep);
  parentPathway.addItem(pathwayVertexRep);
  pathwayVertexRep.addGraph(parentPathway,EGraphItemHierarchy.GRAPH_PARENT);
  for (  IGraphItem parentVertex : alVertexGraphItem) {
    pathwayVertexRep.addItem(parentVertex,EGraphItemProperty.ALIAS_PARENT);
    parentVertex.addItem(pathwayVertexRep,EGraphItemProperty.ALIAS_CHILD);
  }
  hashIDToPathwayVertexGraphItemRep.put(pathwayVertexRep.getId(),(PathwayVertexGraphItemRep)pathwayVertexRep);
  return pathwayVertexRep;
}",0.9138166894664844
58875,"public IGraphItem createVertexGene(final String sName,final String sType,final String sExternalLink,final String sReactionId,final int iDavidId){
  if (hashDavidIdToPathwayVertexGraphItemId.containsKey(iDavidId))   return hashItems.get(hashDavidIdToPathwayVertexGraphItemId.get(iDavidId));
  IGraphItem tmpGraphItem=createVertex(sName,sType,sExternalLink,sReactionId);
  hashDavidIdToPathwayVertexGraphItemId.put(iDavidId,tmpGraphItem.getId());
  hashPathwayVertexGraphItemIdToDavidId.put(tmpGraphItem.getId(),iDavidId);
  return tmpGraphItem;
}","public ArrayList<IGraphItem> createVertexGene(final String sName,final String sType,final String sExternalLink,final String sReactionId,final Set<Integer> iSetDavidId){
  ArrayList<IGraphItem> alGraphItems=new ArrayList<IGraphItem>();
  for (  int iDavidId : iSetDavidId) {
    if (hashDavidIdToPathwayVertexGraphItemId.containsKey(iDavidId)) {
      alGraphItems.add(hashItems.get(hashDavidIdToPathwayVertexGraphItemId.get(iDavidId)));
    }
 else {
      IGraphItem tmpGraphItem=createVertex(sName,sType,sExternalLink,sReactionId);
      hashDavidIdToPathwayVertexGraphItemId.put(iDavidId,tmpGraphItem.getId());
      hashPathwayVertexGraphItemIdToDavidId.put(tmpGraphItem.getId(),iDavidId);
    }
  }
  return alGraphItems;
}",0.7996857816182247
58876,"private void handleAreaTag(){
  String sName=""String_Node_Str"";
  String sCoords=""String_Node_Str"";
  String sShape=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sShape=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sCoords=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
      if (sExternalLink.contains(""String_Node_Str"")) {
        sName=sExternalLink.substring(sExternalLink.lastIndexOf(""String_Node_Str"") + 5,sExternalLink.length());
      }
    }
  }
  IIDMappingManager genomeIdManager=generalManager.getIDMappingManager();
  Set<Integer> iSetDavidID=(Set<Integer>)genomeIdManager.<String,Integer>getMultiID(EMappingType.BIOCARTA_GENE_ID_2_DAVID,sName);
  if (iSetDavidID == null)   return;
  for (  Integer iDavidId : iSetDavidID) {
    if (iDavidId == null || iDavidId == -1 || iDavidId == 0) {
      generalManager.getLogger().log(Level.FINE,""String_Node_Str"" + sName + ""String_Node_Str"");
      return;
    }
    IGraphItem vertex=pathwayItemManager.createVertexGene(sName,""String_Node_Str"",BIOCARTA_EXTERNAL_URL_VERTEX + sExternalLink,""String_Node_Str"",iDavidId);
    generalManager.getPathwayItemManager().createVertexRep(currentPathway,vertex,sName,sShape,sCoords);
  }
}","private void handleAreaTag(){
  String sName=""String_Node_Str"";
  String sCoords=""String_Node_Str"";
  String sShape=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sShape=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sCoords=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
      if (sExternalLink.contains(""String_Node_Str"")) {
        sName=sExternalLink.substring(sExternalLink.lastIndexOf(""String_Node_Str"") + 5,sExternalLink.length());
      }
    }
  }
  IIDMappingManager genomeIdManager=generalManager.getIDMappingManager();
  Set<Integer> iSetDavidID=(Set<Integer>)genomeIdManager.<String,Integer>getMultiID(EMappingType.BIOCARTA_GENE_ID_2_DAVID,sName);
  if (iSetDavidID == null)   return;
  ArrayList<IGraphItem> alVertex=pathwayItemManager.createVertexGene(sName,""String_Node_Str"",BIOCARTA_EXTERNAL_URL_VERTEX + sExternalLink,""String_Node_Str"",iSetDavidID);
  generalManager.getPathwayItemManager().createVertexRep(currentPathway,alVertex,sName,sShape,sCoords);
}",0.918546365914787
58877,"@Override public void startElement(String namespaceURI,String sSimpleName,String sQualifiedName,Attributes attributes) throws SAXException {
  String sElementName=sSimpleName;
  this.attributes=attributes;
  if (""String_Node_Str"".equals(sElementName)) {
    sElementName=sQualifiedName;
  }
  if (attributes != null) {
    if (sElementName.equals(""String_Node_Str"")) {
      handlePathwayTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleEntryTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleGraphicsTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleRelationTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleReactionTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleReactionProductTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleReactionSubstrateTag();
    }
  }
}","@Override public void startElement(String namespaceURI,String sSimpleName,String sQualifiedName,Attributes attributes) throws SAXException {
  String sElementName=sSimpleName;
  this.attributes=attributes;
  if (""String_Node_Str"".equals(sElementName)) {
    sElementName=sQualifiedName;
  }
  if (attributes != null) {
    if (sElementName.equals(""String_Node_Str"")) {
      handlePathwayTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleEntryTag();
    }
 else     if (sElementName.equals(""String_Node_Str"")) {
      handleGraphicsTag();
    }
  }
}",0.757496740547588
58878,"/** 
 * Reacts on the elements of the entry tag. An example entry tag looks like this: <entry id=""1"" name=""ec:1.8.4.1"" type=""enzyme"" reaction=""rn:R01292"" link=""http://www.genome.jp/dbget-bin/www_bget?enzyme+1.8.4.1"">
 */
protected void handleEntryTag(){
  int iEntryId=0;
  String sName=""String_Node_Str"";
  String sType=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  String sReactionId=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      iEntryId=Integer.valueOf(attributes.getValue(iAttributeIndex)).intValue();
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionId=attributes.getValue(iAttributeIndex);
    }
  }
  iCurrentEntryId=iEntryId;
  alCurrentVertex.clear();
  if (sType.equals(""String_Node_Str"")) {
    StringTokenizer sTokenText=new StringTokenizer(sName,""String_Node_Str"");
    Integer iDavidId=-1;
    String sTmpVertexName=""String_Node_Str"";
    while (sTokenText.hasMoreTokens()) {
      sTmpVertexName=sTokenText.nextToken();
      if (sTmpVertexName.substring(4).equals(""String_Node_Str"")) {
        continue;
      }
      iDavidId=generalManager.getIDMappingManager().getID(EMappingType.ENTREZ_GENE_ID_2_DAVID,Integer.valueOf(sTmpVertexName.substring(4)));
      if (iDavidId == null) {
        continue;
      }
      currentVertex=pathwayItemManager.createVertexGene(sTmpVertexName,sType,sExternalLink,sReactionId,iDavidId);
      alCurrentVertex.add(currentVertex);
    }
  }
 else {
    currentVertex=pathwayItemManager.createVertex(sName,sType,sExternalLink,sReactionId);
    alCurrentVertex.add(currentVertex);
  }
}","/** 
 * Reacts on the elements of the entry tag. An example entry tag looks like this: <entry id=""1"" name=""ec:1.8.4.1"" type=""enzyme"" reaction=""rn:R01292"" link=""http://www.genome.jp/dbget-bin/www_bget?enzyme+1.8.4.1"">
 */
protected void handleEntryTag(){
  int iEntryId=0;
  String sName=""String_Node_Str"";
  String sType=""String_Node_Str"";
  String sExternalLink=""String_Node_Str"";
  String sReactionId=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      iEntryId=Integer.valueOf(attributes.getValue(iAttributeIndex)).intValue();
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sExternalLink=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionId=attributes.getValue(iAttributeIndex);
    }
  }
  iCurrentEntryId=iEntryId;
  alCurrentVertex.clear();
  if (sType.equals(""String_Node_Str"")) {
    StringTokenizer sTokenText=new StringTokenizer(sName,""String_Node_Str"");
    Integer iDavidId=-1;
    String sTmpVertexName=""String_Node_Str"";
    Set<Integer> iSetDavidID=new HashSet<Integer>();
    while (sTokenText.hasMoreTokens()) {
      sTmpVertexName=sTokenText.nextToken();
      if (sTmpVertexName.substring(4).equals(""String_Node_Str"")) {
        continue;
      }
      iDavidId=generalManager.getIDMappingManager().getID(EMappingType.ENTREZ_GENE_ID_2_DAVID,Integer.valueOf(sTmpVertexName.substring(4)));
      if (iDavidId == null) {
        continue;
      }
      iSetDavidID.add(iDavidId);
    }
    alCurrentVertex.addAll(pathwayItemManager.createVertexGene(sTmpVertexName,sType,sExternalLink,sReactionId,iSetDavidID));
  }
 else {
    currentVertex=pathwayItemManager.createVertex(sName,sType,sExternalLink,sReactionId);
    alCurrentVertex.add(currentVertex);
  }
}",0.9644041565332744
58879,"private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=""String_Node_Str"" + ""String_Node_Str"";
  for (int iColIndex=2; iColIndex < previewTable.getColumnCount(); iColIndex++) {
    if (!arSkipColumn.get(iColIndex - 2).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
 else {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
    }
    CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
    cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
    cmdCreateStorage.doCommand();
    INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
    String labelText=previewTable.getColumn(iColIndex).getText();
    storage.setLabel(labelText);
    iAlStorageId.add(storage.getID());
    if (!sStorageIDs.equals(""String_Node_Str"")) {
      sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
    }
    sStorageIDs=sStorageIDs + storage.getID();
  }
  if (bUseClusterInfo) {
    sInputPattern+=""String_Node_Str"";
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  cmdCreateSet.doCommand();
  ISet set=cmdCreateSet.getCreatedObject();
  iCreatedSetID=set.getID();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sInputPattern,sDelimiter,iStartParseFileAtLine + 2 - 1,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  cmdLoadLookupTableFile.doCommand();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=""String_Node_Str"" + ""String_Node_Str"";
  for (int iColIndex=2; iColIndex < previewTable.getColumnCount(); iColIndex++) {
    if (!arSkipColumn.get(iColIndex - 2).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
 else {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
    }
    CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
    cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
    cmdCreateStorage.doCommand();
    INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
    String labelText=previewTable.getColumn(iColIndex).getText();
    storage.setLabel(labelText);
    iAlStorageId.add(storage.getID());
    if (!sStorageIDs.equals(""String_Node_Str"")) {
      sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
    }
    sStorageIDs=sStorageIDs + storage.getID();
  }
  if (bUseClusterInfo) {
    sInputPattern+=""String_Node_Str"";
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  cmdCreateSet.doCommand();
  ISet set=cmdCreateSet.getCreatedObject();
  iCreatedSetID=set.getID();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sInputPattern,sDelimiter,iStartParseFileAtLine + 2 - 1,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine + 2,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  cmdLoadLookupTableFile.doCommand();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}",0.9993676889029404
58880,"private void triggerToolBarUpdate(){
  log.info(""String_Node_Str"");
  ViewActivationEvent viewActivationEvent=new ViewActivationEvent();
  List<Integer> viewIDs=this.getAllViewIDs();
  viewActivationEvent.setViewIDs(viewIDs);
  IEventPublisher eventPublisher=GeneralManager.get().getEventPublisher();
  eventPublisher.triggerEvent(viewActivationEvent);
}","/** 
 * Triggers a toolbar update by sending an event similar to the view activation
 */
private void triggerToolBarUpdate(){
  log.info(""String_Node_Str"");
  ViewActivationEvent viewActivationEvent=new ViewActivationEvent();
  List<Integer> viewIDs=this.getAllViewIDs();
  viewActivationEvent.setViewIDs(viewIDs);
  IEventPublisher eventPublisher=GeneralManager.get().getEventPublisher();
  eventPublisher.triggerEvent(viewActivationEvent);
}",0.8883312421580929
58881,"@Override public void partHidden(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof AGLViewPart))   return;
  AGLViewPart glViewPart=(AGLViewPart)activePart;
  GeneralManager.get().getViewGLCanvasManager().unregisterGLCanvasFromAnimator(glViewPart.getGLCanvas().getID());
}","@Override public void partHidden(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  viewPart.setAttached(isViewAttached(viewPart));
  if (!(activePart instanceof AGLViewPart)) {
    return;
  }
  AGLViewPart glViewPart=(AGLViewPart)activePart;
  GeneralManager.get().getViewGLCanvasManager().unregisterGLCanvasFromAnimator(glViewPart.getGLCanvas().getID());
}",0.7897196261682243
58882,"@Override public void partVisible(IWorkbenchPartReference partRef){
  log.info(""String_Node_Str"");
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  if (viewPart instanceof AGLViewPart) {
    GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(((AGLViewPart)viewPart).getGLCanvas().getID());
  }
  if (!activePart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    if (viewPart instanceof CaleydoViewPart) {
      drawInlineToolBar(viewPart);
      removeViewSpecificToolBarItems();
    }
  }
 else {
    if (viewPart instanceof AGLViewPart) {
      removeInlineToolBar((AGLViewPart)viewPart);
      sendViewActivationEvent(viewPart);
    }
  }
}","@Override public void partVisible(IWorkbenchPartReference partRef){
  log.info(""String_Node_Str"");
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  viewPart.setAttached(isViewAttached(viewPart));
  if (viewPart instanceof AGLViewPart) {
    GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(((AGLViewPart)viewPart).getGLCanvas().getID());
  }
  if (!activePart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    if (viewPart instanceof CaleydoViewPart) {
      drawInlineToolBar(viewPart);
      removeViewSpecificToolBarItems();
    }
  }
 else {
    if (viewPart instanceof AGLViewPart) {
      removeInlineToolBar((AGLViewPart)viewPart);
      sendViewActivationEvent(viewPart);
    }
  }
}",0.9699157641395908
58883,"public static boolean isViewAttached(IViewPart viewPart){
  if (viewPart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","public boolean isViewAttached(IViewPart viewPart){
  if (viewPart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}",0.9807162534435262
58884,"/** 
 * Initializes an instance of this class.  Must be called before the first usage.  
 */
public void init(){
  contentMap=new HashMap<String,Class<?>>();
  AToolBarContent toolBarContent;
  toolBarContent=new HeatMapToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),HeatMapToolBarContent.class);
  toolBarContent=new HierarchicalHeatMapToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),HierarchicalHeatMapToolBarContent.class);
  toolBarContent=new ParCoordsToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),ParCoordsToolBarContent.class);
  toolBarContent=new RemoteRenderingToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),RemoteRenderingToolBarContent.class);
  toolBarContent=new ClinicalParCoordsToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),ClinicalParCoordsToolBarContent.class);
  toolBarContent=new GlyphToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),GlyphToolBarContent.class);
  toolBarContent=new HTMLBrowserToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),HTMLBrowserToolBarContent.class);
}","/** 
 * Initializes an instance of this class.  Must be called before the first usage.  
 */
public void init(){
  contentMap=new HashMap<String,Class<?>>();
  relatedRcpViews=new HashMap<Class<? extends IView>,String>();
  AToolBarContent toolBarContent;
  toolBarContent=new HeatMapToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),HeatMapToolBarContent.class);
  relatedRcpViews.put(GLRemoteRendering.class,GLRemoteRenderingView.ID);
  toolBarContent=new HierarchicalHeatMapToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),HierarchicalHeatMapToolBarContent.class);
  relatedRcpViews.put(GLHierarchicalHeatMap.class,GLHierarchicalHeatMapView.ID);
  toolBarContent=new ParCoordsToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),ParCoordsToolBarContent.class);
  relatedRcpViews.put(GLParallelCoordinates.class,GLParCoordsView.ID);
  toolBarContent=new RemoteRenderingToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),RemoteRenderingToolBarContent.class);
  relatedRcpViews.put(GLRemoteRendering.class,GLRemoteRenderingView.ID);
  toolBarContent=new ClinicalParCoordsToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),ClinicalParCoordsToolBarContent.class);
  toolBarContent=new GlyphToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),GlyphToolBarContent.class);
  relatedRcpViews.put(GLGlyph.class,GLGlyphView.ID);
  toolBarContent=new HTMLBrowserToolBarContent();
  contentMap.put(toolBarContent.getViewClass().getName(),HTMLBrowserToolBarContent.class);
  relatedRcpViews.put(GenomeHTMLBrowserViewRep.class,HTMLBrowserView.ID);
}",0.5527323355377654
58885,"/** 
 * determines if a view is attached to the caleydo's main window or not
 * @param viewID id of the view as used by {@link IViewManager}
 * @return true if the view is attached, false otherwise
 */
private boolean isViewAttached(int viewID){
  if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() == null) {
    return true;
  }
  IWorkbenchPage workbenchPage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IView view=retrieveView(viewID);
  boolean isAttached=true;
  IViewPart relatedView=null;
  if (view instanceof GLRemoteRendering) {
    relatedView=workbenchPage.findView(GLRemoteRenderingView.ID);
  }
 else   if (view instanceof GLParallelCoordinates) {
    relatedView=workbenchPage.findView(GLParCoordsView.ID);
  }
  if (relatedView != null) {
    isAttached=PartListener.isViewAttached(relatedView);
  }
  return isAttached;
}","/** 
 * determines if a view is attached to the caleydo's main window or not
 * @param viewID id of the view as used by {@link IViewManager}
 * @return true if the view is attached, false otherwise
 */
private boolean isViewAttached(int viewID){
  IView view=retrieveView(viewID);
  if (view instanceof CaleydoViewPart) {
    return ((CaleydoViewPart)view).isAttached();
  }
 else   if (view instanceof AView) {
    CaleydoViewPart relatedView=getRelatedViewPart(view);
    if (relatedView != null) {
      return relatedView.isAttached();
    }
  }
  log.warning(""String_Node_Str"" + viewID + ""String_Node_Str"");
  return false;
}",0.4167776298268975
58886,"/** 
 * Constructor.
 * @param iViewID
 * @param iGLCanvasID
 * @param sLabel
 * @param viewFrustum
 */
public GLDendrogram(ESetType setType,final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(iGLCanvasID,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_DENDOGRAM;
  renderStyle=new DendrogramRenderStyle(this,viewFrustum);
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
}","/** 
 * Constructor.
 * @param iViewID
 * @param iGLCanvasID
 * @param sLabel
 * @param viewFrustum
 */
public GLDendrogram(ESetType setType,final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(setType,iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_DENDOGRAM;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).externalIDType(EIDType.REFSEQ_MRNA_INT).mappingType(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  renderStyle=new DendrogramRenderStyle(this,viewFrustum);
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
}",0.6088709677419355
58887,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    if (bRenderGeneTree)     tree=set.getClusteredTreeGenes();
 else     tree=set.getClusteredTreeExps();
    renderSymbol(gl);
  }
 else {
    if (tree != null && bRenderGeneTree) {
      xmax=viewFrustum.getWidth() - 0.2f;
      fSampleHeight=(viewFrustum.getHeight() - 0.7f) / tree.getRoot().getNrElements();
      fLevelHeight=(viewFrustum.getWidth() - 3f) / tree.getRoot().getDepth();
      yPosInit=viewFrustum.getHeight() - 0.4f;
      determinePositions();
    }
    gl.glTranslatef(0.1f,0,0);
    gl.glLineWidth(0.1f);
    renderDendrogram(gl,tree.getRoot());
    renderCut(gl);
    gl.glTranslatef(-0.1f,0,0);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (tree == null) {
    if (bRenderGeneTree)     tree=set.getClusteredTreeGenes();
 else     tree=set.getClusteredTreeExps();
    initData();
    renderSymbol(gl);
  }
 else {
    if (tree != null && bRenderGeneTree) {
      xmax=viewFrustum.getWidth() - 0.2f;
      fSampleHeight=(viewFrustum.getHeight() - 0.7f) / tree.getRoot().getNrElements();
      fLevelHeight=(viewFrustum.getWidth() - 3f) / tree.getRoot().getDepth();
      yPosInit=viewFrustum.getHeight() - 0.4f;
      determinePositions();
    }
    gl.glTranslatef(0.1f,0,0);
    gl.glLineWidth(0.1f);
    renderDendrogram(gl,tree.getRoot());
    renderCut(gl);
    gl.glTranslatef(-0.1f,0,0);
  }
  gl.glEndList();
}",0.98989898989899
58888,"@Override public void initLocal(GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}","@Override public void initLocal(GL gl){
  generalManager.getEventPublisher().addSender(EMediatorType.SELECTION_MEDIATOR,this);
  generalManager.getEventPublisher().addReceiver(EMediatorType.SELECTION_MEDIATOR,this);
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}",0.625531914893617
58889,"@Override public void broadcastElements(EVAOperation type){
}","@Override public void broadcastElements(){
}",0.8380952380952381
58890,"public void export(ISet set,String sFileName,boolean bExportBucketInternal){
  IVirtualArray contentVA=null;
  IVirtualArray storageVA=null;
  Collection<AGLEventListener> views=GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners();
  for (  AGLEventListener view : views) {
    if (view instanceof GLParallelCoordinates && view.isRenderedRemote() && bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
 else     if (!view.isRenderedRemote() && (view instanceof GLParallelCoordinates || view instanceof GLHierarchicalHeatMap) && !bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    if (contentVA.getGroupList() != null)     out.print(""String_Node_Str"");
    out.println();
    int cnt=0;
    int cluster=0;
    int index=0;
    int offset=0;
    for (    Integer iContentIndex : contentVA) {
      IIDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
      Integer iRefseqMrnaInt=iDMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iContentIndex);
      if (iRefseqMrnaInt == null) {
        continue;
      }
      String sRefseqMrna=iDMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefseqMrnaInt);
      out.print(sRefseqMrna + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      if (contentVA.getGroupList() != null) {
        if (cnt == contentVA.getGroupList().get(cluster).getNrElements() - 0) {
          offset=offset + contentVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        if (cluster < contentVA.getGroupList().size()) {
          if (index == offset + contentVA.getGroupList().get(cluster).getIdxExample())           out.print(cluster + ""String_Node_Str"" + 1+ ""String_Node_Str"");
 else           out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        }
 else         out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        index++;
      }
      out.println();
    }
    out.close();
    Tree<ClusterNode> tree=set.getClusteredTree();
    if (tree != null) {
      if (tree.exportTree(sFileName + ""String_Node_Str"") == false)       System.out.println(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
  }
catch (  JAXBException e) {
    e.printStackTrace();
  }
}","public void export(ISet set,String sFileName,boolean bExportBucketInternal){
  IVirtualArray contentVA=null;
  IVirtualArray storageVA=null;
  Collection<AGLEventListener> views=GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners();
  for (  AGLEventListener view : views) {
    if (view instanceof GLParallelCoordinates && view.isRenderedRemote() && bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
 else     if (!view.isRenderedRemote() && (view instanceof GLParallelCoordinates || view instanceof GLHierarchicalHeatMap) && !bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    if (contentVA.getGroupList() != null)     out.print(""String_Node_Str"");
    out.println();
    int cnt=0;
    int cluster=0;
    int index=0;
    int offset=0;
    for (    Integer iContentIndex : contentVA) {
      IIDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
      Integer iRefseqMrnaInt=iDMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iContentIndex);
      if (iRefseqMrnaInt == null) {
        continue;
      }
      String sRefseqMrna=iDMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefseqMrnaInt);
      out.print(sRefseqMrna + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      if (contentVA.getGroupList() != null) {
        if (cnt == contentVA.getGroupList().get(cluster).getNrElements() - 0) {
          offset=offset + contentVA.getGroupList().get(cluster).getNrElements();
          cluster++;
          cnt=0;
        }
 else {
          cnt++;
        }
        if (cluster < contentVA.getGroupList().size()) {
          if (index == offset + contentVA.getGroupList().get(cluster).getIdxExample())           out.print(cluster + ""String_Node_Str"" + 1+ ""String_Node_Str"");
 else           out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        }
 else         out.print(cluster + ""String_Node_Str"" + 0+ ""String_Node_Str"");
        index++;
      }
      out.println();
    }
    out.close();
    Tree<ClusterNode> tree=set.getClusteredTree();
    if (tree != null) {
      TreePorter treePorter=new TreePorter();
      if (treePorter.exportTree(sFileName + ""String_Node_Str"",tree) == false)       System.out.println(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
  }
catch (  JAXBException e) {
    e.printStackTrace();
  }
}",0.9881242882707012
58891,"/** 
 * Add a list of children to the specified parent node. Uses   {@link #addChildren(ANode,List)} internally
 * @param parentNode the node to which the children are added
 * @param children the list of children
 */
public void addChildren(NodeType parentNode,List<NodeType> children){
  for (  NodeType child : children) {
    addChild(parentNode,child);
  }
}","/** 
 * Add a list of children to the specified parent node. Uses   {@link #addChildren(ANode,List)} internally
 * @param parentNode the node to which the children are added
 * @param children the list of children
 */
public void addChildren(NodeType parentNode,List<NodeType> children){
  for (  NodeType child : children) {
    addChild(parentNode,child);
    if (child instanceof ClusterNode)     hashNodes.put(((ClusterNode)child).getClusterNr(),child);
  }
}",0.8789346246973365
58892,"public Tree(){
  graph=new DefaultDirectedGraph<NodeType,DefaultEdge>(DefaultEdge.class);
  hashClusterNames=new HashMap<Integer,String>();
}","public Tree(){
  graph=new DefaultDirectedGraph<NodeType,DefaultEdge>(DefaultEdge.class);
  hashNodes=new HashMap<Integer,NodeType>();
}",0.9097472924187726
58893,"/** 
 * Adds a child to the specified parent node. The order of the children is specified by their compare method
 * @param parentNode the parent where the child will be added
 * @param childNode the child to be added
 */
public void addChild(NodeType parentNode,NodeType childNode){
  graph.addVertex(childNode);
  graph.addEdge(parentNode,childNode);
  hashClusterNames.put(((ClusterNode)childNode).getClusterNr(),((ClusterNode)childNode).getNodeName());
}","/** 
 * Adds a child to the specified parent node. The order of the children is specified by their compare method
 * @param parentNode the parent where the child will be added
 * @param childNode the child to be added
 */
public void addChild(NodeType parentNode,NodeType childNode){
  graph.addVertex(childNode);
  graph.addEdge(parentNode,childNode);
  if (childNode instanceof ClusterNode)   hashNodes.put(((ClusterNode)childNode).getClusterNr(),childNode);
}",0.9
58894,"public boolean exportTree(String fileName,DirectedGraph<ClusterNode,DefaultEdge> graph,ClusterNode root) throws JAXBException, IOException {
  Set<DefaultEdge> edgeSet=(Set<DefaultEdge>)graph.edgeSet();
  for (  DefaultEdge edge : edgeSet) {
    edges.add(edge.toString());
  }
  nodeSet=graph.vertexSet();
  JAXBContext jaxbContext=JAXBContext.newInstance(TreePorter.class,DefaultEdge.class);
  Marshaller marshaller=jaxbContext.createMarshaller();
  Writer w=null;
  try {
    w=new FileWriter(fileName);
    marshaller.marshal(this,w);
  }
  finally {
    try {
      w.close();
    }
 catch (    Exception e) {
      return false;
    }
  }
  return true;
}","public boolean exportTree(String fileName,Tree<ClusterNode> tree) throws JAXBException, IOException {
  Set<DefaultEdge> edgeSet=(Set<DefaultEdge>)tree.graph.edgeSet();
  for (  DefaultEdge edge : edgeSet) {
    edges.add(edge.toString());
  }
  nodeSet=tree.graph.vertexSet();
  JAXBContext jaxbContext=JAXBContext.newInstance(TreePorter.class,DefaultEdge.class);
  Marshaller marshaller=jaxbContext.createMarshaller();
  Writer w=null;
  try {
    w=new FileWriter(fileName);
    marshaller.marshal(this,w);
  }
  finally {
    try {
      w.close();
    }
 catch (    Exception e) {
      return false;
    }
  }
  return true;
}",0.9497293116782676
58895,"private void treeStructureToTree(ClusterNode node,Node[] treeStructure,int index){
  ClusterNode left=null;
  ClusterNode right=null;
  if (treeStructure[index].getLeft() >= 0) {
    String NodeName=IDMappingHelper.get().getRefSeqStringFromStorageIndex(treeStructure[index].getLeft());
    left=new ClusterNode(NodeName,treeStructure[index].getLeft(),0,0);
    left.setNrElements(1);
    tree.addChild(node,left);
  }
 else {
    left=new ClusterNode(""String_Node_Str"" + (-(treeStructure[index].getLeft()) - 1),-(treeStructure[index].getLeft()) - 1,treeStructure[index].getCorrelation(),0);
    tree.addChild(node,left);
    treeStructureToTree(left,treeStructure,-(treeStructure[index].getLeft()) - 1);
  }
  if (treeStructure[index].getRight() >= 0) {
    String NodeName=IDMappingHelper.get().getRefSeqStringFromStorageIndex(treeStructure[index].getRight());
    right=new ClusterNode(NodeName,treeStructure[index].getRight(),0,0);
    right.setNrElements(1);
    tree.addChild(node,right);
  }
 else {
    right=new ClusterNode(""String_Node_Str"" + (-(treeStructure[index].getRight()) - 1),-(treeStructure[index].getRight()) - 1,treeStructure[index].getCorrelation(),0);
    tree.addChild(node,right);
    treeStructureToTree(right,treeStructure,-(treeStructure[index].getRight()) - 1);
  }
}","private void treeStructureToTree(ClusterNode node,Node[] treeStructure,int index){
  ClusterNode left=null;
  ClusterNode right=null;
  if (treeStructure[index].getLeft() >= 0) {
    String NodeName;
    NodeName=IDMappingHelper.get().getShortNameFromDavid(treeStructure[index].getLeft() + 1);
    if (NodeName == null) {
      NodeName=""String_Node_Str"";
    }
    NodeName+=""String_Node_Str"";
    NodeName+=IDMappingHelper.get().getRefSeqStringFromStorageIndex(treeStructure[index].getLeft() + 1);
    left=new ClusterNode(NodeName,treeStructure[index].getLeft(),treeStructure[index].getCorrelation(),0);
    left.setNrElements(1);
    tree.addChild(node,left);
  }
 else {
    int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
    left=new ClusterNode(""String_Node_Str"" + (-(treeStructure[index].getLeft()) - 1),random,treeStructure[index].getCorrelation(),0);
    tree.addChild(node,left);
    treeStructureToTree(left,treeStructure,-(treeStructure[index].getLeft()) - 1);
  }
  if (treeStructure[index].getRight() >= 0) {
    String NodeName;
    NodeName=IDMappingHelper.get().getShortNameFromDavid(treeStructure[index].getRight() + 1);
    if (NodeName == null) {
      NodeName=""String_Node_Str"";
    }
    NodeName+=""String_Node_Str"";
    NodeName+=IDMappingHelper.get().getRefSeqStringFromStorageIndex(treeStructure[index].getRight() + 1);
    right=new ClusterNode(NodeName,treeStructure[index].getRight(),treeStructure[index].getCorrelation(),0);
    right.setNrElements(1);
    tree.addChild(node,right);
  }
 else {
    int random=(int)((Math.random() * Integer.MAX_VALUE) + 1);
    right=new ClusterNode(""String_Node_Str"" + (-(treeStructure[index].getRight()) - 1),random,treeStructure[index].getCorrelation(),0);
    tree.addChild(node,right);
    treeStructureToTree(right,treeStructure,-(treeStructure[index].getRight()) - 1);
  }
}",0.3975903614457831
58896,"private ArrayList<Integer> traverse(ArrayList<Integer> indexes,ClusterNode node){
  if (tree.hasChildren(node) == false)   indexes.add(node.getClusterNr());
 else {
    for (    ClusterNode current : tree.getChildren(node)) {
      traverse(indexes,current);
    }
  }
  return indexes;
}","private ArrayList<Integer> traverse(ArrayList<Integer> indexes,ClusterNode node){
  if (tree.hasChildren(node) == false) {
    indexes.add(node.getClusterNr() + 1);
  }
 else {
    for (    ClusterNode current : tree.getChildren(node)) {
      traverse(indexes,current);
    }
  }
  return indexes;
}",0.979591836734694
58897,"/** 
 * Calculates the similarity matrix for a given set and VA�s
 * @param set
 * @param iVAIdContent
 * @param iVAIdStorage
 * @return
 */
public void determineSimilarities(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  IDistanceMeasure distanceMeasure=new EuclideanDistance();
  int icnt1=0, icnt2=0, isto=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    float[] dArInstance1=new float[storageVA.size()];
    float[] dArInstance2=new float[storageVA.size()];
    for (    Integer iContentIndex1 : contentVA) {
      isto=0;
      for (      Integer iStorageIndex1 : storageVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.RAW,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iContentIndex2 : contentVA) {
        isto=0;
        if (icnt2 < icnt1) {
          for (          Integer iStorageIndex2 : storageVA) {
            dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.RAW,iContentIndex2);
            isto++;
          }
          similarities[icnt1][icnt2]=distanceMeasure.getMeasure(dArInstance1,dArInstance2);
        }
        icnt2++;
      }
      icnt1++;
    }
  }
 else {
    float[] dArInstance1=new float[contentVA.size()];
    float[] dArInstance2=new float[contentVA.size()];
    for (    Integer iStorageIndex1 : storageVA) {
      isto=0;
      for (      Integer iContentIndex1 : contentVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.RAW,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iStorageIndex2 : storageVA) {
        isto=0;
        if (icnt2 < icnt1) {
          for (          Integer iContentIndex2 : contentVA) {
            dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.RAW,iContentIndex2);
            isto++;
          }
          similarities[icnt1][icnt2]=distanceMeasure.getMeasure(dArInstance1,dArInstance2);
        }
        icnt2++;
      }
      icnt1++;
    }
  }
}","/** 
 * Calculates the similarity matrix for a given set and VA�s
 * @param set
 * @param iVAIdContent
 * @param iVAIdStorage
 * @return
 */
public void determineSimilarities(ISet set,Integer iVAIdContent,Integer iVAIdStorage,EClustererType eClustererType){
  IVirtualArray contentVA=set.getVA(iVAIdContent);
  IVirtualArray storageVA=set.getVA(iVAIdStorage);
  IDistanceMeasure distanceMeasure=new EuclideanDistance();
  int icnt1=0, icnt2=0, isto=0;
  if (eClustererType == EClustererType.GENE_CLUSTERING) {
    bStart0=true;
    float[] dArInstance1=new float[storageVA.size()];
    float[] dArInstance2=new float[storageVA.size()];
    for (    Integer iContentIndex1 : contentVA) {
      isto=0;
      for (      Integer iStorageIndex1 : storageVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.RAW,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iContentIndex2 : contentVA) {
        isto=0;
        if (icnt2 < icnt1) {
          for (          Integer iStorageIndex2 : storageVA) {
            dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.RAW,iContentIndex2);
            isto++;
          }
          similarities[icnt1][icnt2]=distanceMeasure.getMeasure(dArInstance1,dArInstance2);
        }
        icnt2++;
      }
      icnt1++;
    }
  }
 else {
    bStart0=false;
    float[] dArInstance1=new float[contentVA.size()];
    float[] dArInstance2=new float[contentVA.size()];
    for (    Integer iStorageIndex1 : storageVA) {
      isto=0;
      for (      Integer iContentIndex1 : contentVA) {
        dArInstance1[isto]=set.get(iStorageIndex1).getFloat(EDataRepresentation.RAW,iContentIndex1);
        isto++;
      }
      icnt2=0;
      for (      Integer iStorageIndex2 : storageVA) {
        isto=0;
        if (icnt2 < icnt1) {
          for (          Integer iContentIndex2 : contentVA) {
            dArInstance2[isto]=set.get(iStorageIndex2).getFloat(EDataRepresentation.RAW,iContentIndex2);
            isto++;
          }
          similarities[icnt1][icnt2]=distanceMeasure.getMeasure(dArInstance1,dArInstance2);
        }
        icnt2++;
      }
      icnt1++;
    }
  }
  normalizeSimilarities();
}",0.9853947968963944
58898,"/** 
 * The pmlcluster routine performs clustering using pairwise maximum- (complete-) linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
public Integer pmlcluster(){
  int[] clusterid=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++)   clusterid[j]=j;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  int j;
  ClosestPair pair=null;
  float[][] distmatrix=new float[iNrSamples][iNrSamples];
  distmatrix=similarities.clone();
  for (int n=iNrSamples; n > 1; n--) {
    int is=1;
    int js=0;
    pair=find_closest_pair(n,distmatrix);
    if (pair.update) {
      is=pair.x;
      js=pair.y;
    }
    for (j=0; j < js; j++)     distmatrix[js][j]=Math.max(distmatrix[is][j],distmatrix[js][j]);
    for (j=js + 1; j < is; j++)     distmatrix[j][js]=Math.max(distmatrix[is][j],distmatrix[j][js]);
    for (j=is + 1; j < n; j++)     distmatrix[j][js]=Math.max(distmatrix[j][is],distmatrix[j][js]);
    for (j=0; j < is; j++)     distmatrix[is][j]=distmatrix[n - 1][j];
    for (j=is + 1; j < n - 1; j++)     distmatrix[j][is]=distmatrix[n - 1][j];
    Node node=new Node();
    node.setCorrelation(pair.correlation);
    node.setLeft(clusterid[is]);
    node.setRight(clusterid[js]);
    result[iNrSamples - n]=node;
    clusterid[js]=n - iNrSamples - 1;
    clusterid[is]=clusterid[n - 1];
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",1,0f,0);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  AlIndexes=getAl();
  set.setClusteredTree(tree);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  return clusteredVAId;
}","/** 
 * The pmlcluster routine performs clustering using pairwise maximum- (complete-) linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
public Integer pmlcluster(){
  int[] clusterid=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++)   clusterid[j]=j;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  int j;
  ClosestPair pair=null;
  float[][] distmatrix=new float[iNrSamples][iNrSamples];
  distmatrix=similarities.clone();
  for (int n=iNrSamples; n > 1; n--) {
    int is=1;
    int js=0;
    pair=find_closest_pair(n,distmatrix);
    if (pair.update) {
      is=pair.x;
      js=pair.y;
    }
    for (j=0; j < js; j++)     distmatrix[js][j]=Math.max(distmatrix[is][j],distmatrix[js][j]);
    for (j=js + 1; j < is; j++)     distmatrix[j][js]=Math.max(distmatrix[is][j],distmatrix[j][js]);
    for (j=is + 1; j < n; j++)     distmatrix[j][js]=Math.max(distmatrix[j][is],distmatrix[j][js]);
    for (j=0; j < is; j++)     distmatrix[is][j]=distmatrix[n - 1][j];
    for (j=is + 1; j < n - 1; j++)     distmatrix[j][is]=distmatrix[n - 1][j];
    Node node=new Node();
    node.setCorrelation(pair.correlation);
    node.setLeft(clusterid[is]);
    node.setRight(clusterid[js]);
    result[iNrSamples - n]=node;
    clusterid[js]=n - iNrSamples - 1;
    clusterid[is]=clusterid[n - 1];
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",0,0f,0);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  AlIndexes=getAl();
  set.setClusteredTree(tree);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  return clusteredVAId;
}",0.9994407158836688
58899,"/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
public Integer palcluster(ISet set){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  float[][] distmatrix=new float[iNrSamples][iNrSamples];
  distmatrix=similarities.clone();
  for (int n=iNrSamples; n > 1; n--) {
    int sum;
    int is=1;
    int js=0;
    pair=find_closest_pair(n,distmatrix);
    if (pair.update) {
      is=pair.x;
      js=pair.y;
    }
    Node node=new Node();
    node.setCorrelation(pair.correlation);
    node.setLeft(clusterid[is]);
    node.setRight(clusterid[js]);
    result[iNrSamples - n]=node;
    sum=number[is] + number[js];
    for (j=0; j < js; j++) {
      distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
      distmatrix[js][j]/=sum;
    }
    for (j=js + 1; j < is; j++) {
      distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
      distmatrix[j][js]/=sum;
    }
    for (j=is + 1; j < n; j++) {
      distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
      distmatrix[j][js]/=sum;
    }
    for (j=0; j < is; j++)     distmatrix[is][j]=distmatrix[n - 1][j];
    for (j=is + 1; j < n - 1; j++)     distmatrix[j][is]=distmatrix[n - 1][j];
    number[js]=sum;
    number[is]=number[n - 1];
    clusterid[js]=n - iNrSamples - 1;
    clusterid[is]=clusterid[n - 1];
  }
  for (int i=0; i < result.length; i++) {
    if (result[i].getLeft() >= 0)     AlIndexes.add(result[i].getLeft());
    if (result[i].getRight() >= 0)     AlIndexes.add(result[i].getRight());
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",1,0f,0);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1);
  AlIndexes=getAl();
  set.setClusteredTree(tree);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  return clusteredVAId;
}","/** 
 * The palcluster routine performs clustering using pairwise average linking on the given distance matrix.
 * @param set
 * @return index of virtual array
 */
public Integer palcluster(){
  int[] clusterid=new int[iNrSamples];
  int[] number=new int[iNrSamples];
  Node[] result=new Node[iNrSamples - 1];
  for (int j=0; j < iNrSamples; j++) {
    number[j]=1;
    clusterid[j]=j;
  }
  int j;
  ClosestPair pair=null;
  ArrayList<Integer> AlIndexes=new ArrayList<Integer>();
  float[][] distmatrix=new float[iNrSamples][iNrSamples];
  distmatrix=similarities.clone();
  for (int n=iNrSamples; n > 1; n--) {
    int sum;
    int is=1;
    int js=0;
    pair=find_closest_pair(n,distmatrix);
    if (pair.update) {
      is=pair.x;
      js=pair.y;
    }
    Node node=new Node();
    node.setCorrelation(pair.correlation);
    node.setLeft(clusterid[is]);
    node.setRight(clusterid[js]);
    result[iNrSamples - n]=node;
    sum=number[is] + number[js];
    for (j=0; j < js; j++) {
      distmatrix[js][j]=distmatrix[is][j] * number[is] + distmatrix[js][j] * number[js];
      distmatrix[js][j]/=sum;
    }
    for (j=js + 1; j < is; j++) {
      distmatrix[j][js]=distmatrix[is][j] * number[is] + distmatrix[j][js] * number[js];
      distmatrix[j][js]/=sum;
    }
    for (j=is + 1; j < n; j++) {
      distmatrix[j][js]=distmatrix[j][is] * number[is] + distmatrix[j][js] * number[js];
      distmatrix[j][js]/=sum;
    }
    for (j=0; j < is; j++)     distmatrix[is][j]=distmatrix[n - 1][j];
    for (j=is + 1; j < n - 1; j++)     distmatrix[j][is]=distmatrix[n - 1][j];
    number[js]=sum;
    number[is]=number[n - 1];
    clusterid[js]=n - iNrSamples - 1;
    clusterid[is]=clusterid[n - 1];
  }
  for (int i=0; i < result.length; i++) {
    if (result[i].getLeft() >= 0)     AlIndexes.add(result[i].getLeft());
    if (result[i].getRight() >= 0)     AlIndexes.add(result[i].getRight());
  }
  tree=new Tree<ClusterNode>();
  ClusterNode node=new ClusterNode(""String_Node_Str"",0,0f,0);
  tree.setRootNode(node);
  treeStructureToTree(node,result,result.length - 1);
  ClusterHelper.determineNrElements(tree);
  ClusterHelper.determineHierarchyDepth(tree);
  AlIndexes=getAl();
  set.setClusteredTree(tree);
  Integer clusteredVAId=set.createStorageVA(AlIndexes);
  return clusteredVAId;
}",0.9778858911985848
58900,"public ArrayList<IGraphItem> createVertexGene(final String sName,final String sType,final String sExternalLink,final String sReactionId,final Set<Integer> iSetDavidId){
  ArrayList<IGraphItem> alGraphItems=new ArrayList<IGraphItem>();
  for (  int iDavidId : iSetDavidId) {
    if (hashDavidIdToPathwayVertexGraphItemId.containsKey(iDavidId)) {
      alGraphItems.add(hashItems.get(hashDavidIdToPathwayVertexGraphItemId.get(iDavidId)));
    }
 else {
      IGraphItem tmpGraphItem=createVertex(sName,sType,sExternalLink,sReactionId);
      hashDavidIdToPathwayVertexGraphItemId.put(iDavidId,tmpGraphItem.getId());
      hashPathwayVertexGraphItemIdToDavidId.put(tmpGraphItem.getId(),iDavidId);
    }
  }
  return alGraphItems;
}","public ArrayList<IGraphItem> createVertexGene(final String sName,final String sType,final String sExternalLink,final String sReactionId,final Set<Integer> iSetDavidId){
  ArrayList<IGraphItem> alGraphItems=new ArrayList<IGraphItem>();
  for (  int iDavidId : iSetDavidId) {
    if (hashDavidIdToPathwayVertexGraphItemId.containsKey(iDavidId)) {
      alGraphItems.add(hashItems.get(hashDavidIdToPathwayVertexGraphItemId.get(iDavidId)));
    }
 else {
      IGraphItem tmpGraphItem=createVertex(sName,sType,sExternalLink,sReactionId);
      hashDavidIdToPathwayVertexGraphItemId.put(iDavidId,tmpGraphItem.getId());
      hashPathwayVertexGraphItemIdToDavidId.put(tmpGraphItem.getId(),iDavidId);
      alGraphItems.add(tmpGraphItem);
    }
  }
  return alGraphItems;
}",0.9745649263721552
58901,"/** 
 * Reacts on the elements of the reaction substrate tag. An example reaction substrate tag looks like this: <substrate name=""cpd:C01118""/>
 */
protected void handleReactionSubstrateTag(){
  String sReactionSubstrateName=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionSubstrateName=attributes.getValue(iAttributeIndex);
    }
  }
  IGraphItem graphItemIn=hashKgmlNameToVertexRepId.get(sReactionSubstrateName);
  IGraphItem graphItemOut=hashKgmlReactionIdToVertexRepId.get(((PathwayReactionEdgeGraphItem)currentReactionSubstrateEdgeRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0)).getReactionId());
  if (graphItemIn == null || graphItemOut == null)   return;
  currentReactionSubstrateEdgeRep.addItemDoubleLinked(graphItemIn,EGraphItemProperty.INCOMING);
  currentReactionSubstrateEdgeRep.addItemDoubleLinked(graphItemOut,EGraphItemProperty.OUTGOING);
  IGraphItem tmpReactionEdge=(PathwayReactionEdgeGraphItem)currentReactionSubstrateEdgeRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0);
  if (tmpReactionEdge == null)   return;
  if (graphItemIn.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).size() == 0)   return;
  tmpReactionEdge.addItemDoubleLinked(graphItemIn.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0),EGraphItemProperty.INCOMING);
  if (graphItemOut.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).size() == 0)   return;
  tmpReactionEdge.addItemDoubleLinked((IGraphItem)graphItemOut.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0),EGraphItemProperty.OUTGOING);
}","/** 
 * Reacts on the elements of the reaction substrate tag. An example reaction substrate tag looks like this: <substrate name=""cpd:C01118""/>
 */
protected void handleReactionSubstrateTag(){
}",0.1901960784313725
58902,"/** 
 * Constructor.
 */
public KgmlSaxHandler(){
  super();
  hashKgmlEntryIdToVertexRepId=new HashMap<Integer,IGraphItem>();
  hashKgmlNameToVertexRepId=new HashMap<String,IGraphItem>();
  hashKgmlReactionIdToVertexRepId=new HashMap<String,IGraphItem>();
  pathwayItemManager=generalManager.getPathwayItemManager();
  pathwayManager=generalManager.getPathwayManager();
  alCurrentVertex=new ArrayList<IGraphItem>();
  setXmlActivationTag(""String_Node_Str"");
}","/** 
 * Constructor.
 */
public KgmlSaxHandler(){
  super();
  pathwayItemManager=generalManager.getPathwayItemManager();
  pathwayManager=generalManager.getPathwayManager();
  alCurrentVertex=new ArrayList<IGraphItem>();
  setXmlActivationTag(""String_Node_Str"");
}",0.7300275482093664
58903,"/** 
 * @see org.caleydo.core.parser.handler.IXmlParserHandler#destroyHandler()
 * @see org.caleydo.core.parser.handler.AXmlParserHandler#destroyHandler()
 */
@Override public void destroyHandler(){
  super.destroyHandler();
  hashKgmlEntryIdToVertexRepId.clear();
  hashKgmlNameToVertexRepId.clear();
  hashKgmlReactionIdToVertexRepId.clear();
}","/** 
 * @see org.caleydo.core.parser.handler.IXmlParserHandler#destroyHandler()
 * @see org.caleydo.core.parser.handler.AXmlParserHandler#destroyHandler()
 */
@Override public void destroyHandler(){
  super.destroyHandler();
}",0.7902097902097902
58904,"/** 
 * Reacts on the elements of the graphics tag. An example graphics tag looks like this: <graphics name=""1.8.4.1"" fgcolor=""#000000"" bgcolor=""#FFFFFF"" type=""rectangle"" x=""142"" y=""304"" width=""45"" height=""17""/>
 */
protected void handleGraphicsTag(){
  String sName=""String_Node_Str"";
  String sShapeType=""String_Node_Str"";
  short shHeight=0;
  short shWidth=0;
  short shXPosition=0;
  short shYPosition=0;
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shHeight=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shWidth=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shXPosition=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shYPosition=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sShapeType=attributes.getValue(iAttributeIndex);
    }
  }
  if (alCurrentVertex.isEmpty())   return;
  IGraphItem vertexRep=pathwayItemManager.createVertexRep(currentPathway,alCurrentVertex,sName,sShapeType,shXPosition,shYPosition,shWidth,shHeight);
  hashKgmlEntryIdToVertexRepId.put(iCurrentEntryId,vertexRep);
  hashKgmlNameToVertexRepId.put(((PathwayVertexGraphItem)currentVertex).getName(),vertexRep);
  hashKgmlReactionIdToVertexRepId.put(((PathwayVertexGraphItem)currentVertex).getReactionId(),vertexRep);
}","/** 
 * Reacts on the elements of the graphics tag. An example graphics tag looks like this: <graphics name=""1.8.4.1"" fgcolor=""#000000"" bgcolor=""#FFFFFF"" type=""rectangle"" x=""142"" y=""304"" width=""45"" height=""17""/>
 */
protected void handleGraphicsTag(){
  String sName=""String_Node_Str"";
  String sShapeType=""String_Node_Str"";
  short shHeight=0;
  short shWidth=0;
  short shXPosition=0;
  short shYPosition=0;
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sName=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shHeight=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shWidth=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shXPosition=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      shYPosition=new Short(attributes.getValue(iAttributeIndex));
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      sShapeType=attributes.getValue(iAttributeIndex);
    }
  }
  if (alCurrentVertex.isEmpty())   return;
  IGraphItem vertexRep=pathwayItemManager.createVertexRep(currentPathway,alCurrentVertex,sName,sShapeType,shXPosition,shYPosition,shWidth,shHeight);
}",0.9250071285999428
58905,"/** 
 * Reacts on the elements of the reaction product tag. An example reaction product tag looks like this: <product name=""cpd:C02291""/>
 */
protected void handleReactionProductTag(){
  String sReactionProductName=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sReactionProductName=attributes.getValue(iAttributeIndex);
    }
  }
  IGraphItem graphItemOut=hashKgmlNameToVertexRepId.get(sReactionProductName);
  IGraphItem graphItemIn=hashKgmlReactionIdToVertexRepId.get(((PathwayReactionEdgeGraphItem)currentReactionProductEdgeRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0)).getReactionId());
  if (graphItemIn == null || graphItemOut == null)   return;
  currentReactionProductEdgeRep.addItemDoubleLinked(graphItemIn,EGraphItemProperty.INCOMING);
  currentReactionProductEdgeRep.addItemDoubleLinked(graphItemOut,EGraphItemProperty.OUTGOING);
  IGraphItem tmpReactionEdge=(PathwayReactionEdgeGraphItem)currentReactionProductEdgeRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0);
  if (tmpReactionEdge == null)   return;
  if (graphItemIn.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).size() == 0)   return;
  tmpReactionEdge.addItemDoubleLinked((IGraphItem)graphItemIn.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0),EGraphItemProperty.INCOMING);
  if (graphItemOut.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).size() == 0)   return;
  tmpReactionEdge.addItemDoubleLinked((IGraphItem)graphItemOut.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).get(0),EGraphItemProperty.OUTGOING);
}","/** 
 * Reacts on the elements of the reaction product tag. An example reaction product tag looks like this: <product name=""cpd:C02291""/>
 */
protected void handleReactionProductTag(){
}",0.1839762611275964
58906,"/** 
 * Reacts on the elements of the relation tag. An example relation tag looks like this: <relation entry1=""28"" entry2=""32"" type=""ECrel"">
 */
protected void handleRelationTag(){
  int iSourceVertexId=0;
  int iTargetVertexId=0;
  String sType=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      iSourceVertexId=Integer.valueOf(attributes.getValue(iAttributeIndex)).intValue();
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      iTargetVertexId=Integer.valueOf(attributes.getValue(iAttributeIndex)).intValue();
    }
  }
  IGraphItem graphItemIn=hashKgmlEntryIdToVertexRepId.get(iSourceVertexId);
  IGraphItem graphItemOut=hashKgmlEntryIdToVertexRepId.get(iTargetVertexId);
  IGraphItem relationEdge=pathwayItemManager.createRelationEdge(((PathwayVertexGraphItemRep)graphItemIn).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT),((PathwayVertexGraphItemRep)graphItemOut).getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT),sType);
  pathwayItemManager.createRelationEdgeRep(currentPathway,relationEdge,graphItemIn,graphItemOut);
}","/** 
 * Reacts on the elements of the relation tag. An example relation tag looks like this: <relation entry1=""28"" entry2=""32"" type=""ECrel"">
 */
protected void handleRelationTag(){
  int iSourceVertexId=0;
  int iTargetVertexId=0;
  String sType=""String_Node_Str"";
  for (int iAttributeIndex=0; iAttributeIndex < attributes.getLength(); iAttributeIndex++) {
    sAttributeName=attributes.getLocalName(iAttributeIndex);
    if (""String_Node_Str"".equals(sAttributeName)) {
      sAttributeName=attributes.getQName(iAttributeIndex);
    }
    if (sAttributeName.equals(""String_Node_Str"")) {
      sType=attributes.getValue(iAttributeIndex);
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      iSourceVertexId=Integer.valueOf(attributes.getValue(iAttributeIndex)).intValue();
    }
 else     if (sAttributeName.equals(""String_Node_Str"")) {
      iTargetVertexId=Integer.valueOf(attributes.getValue(iAttributeIndex)).intValue();
    }
  }
}",0.7895608947804474
58907,"/** 
 * draws the toolbar items within the views default toolbar (inline)
 * @param viewPart view to add the toolbar items
 */
private void drawInlineToolBar(CaleydoViewPart viewPart){
  List<Integer> viewIDs=getAllViewIDs(viewPart);
  ToolBarContentFactory contentFactory=ToolBarContentFactory.get();
  List<AToolBarContent> toolBarContents=contentFactory.getToolBarContent(viewIDs);
  final IToolBarManager toolBarManager=viewPart.getViewSite().getActionBars().getToolBarManager();
  for (  AToolBarContent toolBarContent : toolBarContents) {
    for (    ToolBarContainer container : toolBarContent.getInlineToolBar()) {
      for (      IToolBarItem item : container.getToolBarItems()) {
        if (item instanceof IAction) {
          toolBarManager.add((IAction)item);
        }
 else         if (item instanceof ControlContribution) {
          toolBarManager.add((ControlContribution)item);
        }
      }
      toolBarManager.add(new Separator());
    }
  }
  toolBarManager.update(true);
}","/** 
 * draws the toolbar items within the views default toolbar (inline)
 * @param viewPart view to add the toolbar items
 */
private void drawInlineToolBar(CaleydoViewPart viewPart){
  List<Integer> viewIDs=getAllViewIDs(viewPart);
  ToolBarContentFactory contentFactory=ToolBarContentFactory.get();
  List<AToolBarContent> toolBarContents=contentFactory.getToolBarContent(viewIDs);
  final IToolBarManager toolBarManager=viewPart.getViewSite().getActionBars().getToolBarManager();
  toolBarManager.removeAll();
  for (  AToolBarContent toolBarContent : toolBarContents) {
    for (    ToolBarContainer container : toolBarContent.getInlineToolBar()) {
      for (      IToolBarItem item : container.getToolBarItems()) {
        if (item instanceof IAction) {
          toolBarManager.add((IAction)item);
        }
 else         if (item instanceof ControlContribution) {
          toolBarManager.add((ControlContribution)item);
        }
      }
      toolBarManager.add(new Separator());
    }
  }
  toolBarManager.update(true);
}",0.9852652259332024
58908,"/** 
 * Adds the content of the given toolbar content to the toolbar in the default drawing style of toolbars.
 * @param toolBarContent toolbar content to add to the toolbar
 */
private void addToolBarContent(AToolBarContent toolBarContent){
  List<Group> viewSpecificGroups=toolBarView.getViewSpecificGroups();
  Composite parentComposite=toolBarView.getParentComposite();
  for (  ToolBarContainer toolBarContainer : toolBarContent.getDefaultToolBar()) {
    Group group=new Group(parentComposite,SWT.NULL);
    GridLayout layout=new GridLayout(1,false);
    layout.marginBottom=layout.marginTop=layout.marginLeft=layout.marginRight=layout.horizontalSpacing=layout.verticalSpacing=0;
    layout.marginHeight=layout.marginWidth=0;
    group.setLayout(layout);
    group.setLayoutData(toolBarRenderer.createStandardGridData());
    viewSpecificGroups.add(group);
    addToolBarItems(group,toolBarContainer);
    ResourceLoader resourceLoader=GeneralManager.get().getResourceLoader();
    Display display=PlatformUI.getWorkbench().getDisplay();
    String path=toolBarContainer.getImagePath();
    resourceLoader.getImage(display,path);
    if (!GenomePerspective.bIsWideScreen) {
      Label spacer=new Label(group,SWT.NULL);
      spacer.setLayoutData(new GridData(GridData.FILL_BOTH));
    }
    Label label=new Label(group,SWT.CENTER);
    label.setText(toolBarContainer.getTitle());
    label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    label.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
    group.setData(""String_Node_Str"",toolBarContent.getViewClass().getName());
    group.setData(""String_Node_Str"",toolBarContent.getTargetViewID());
    group.layout();
    parentComposite.layout();
  }
}","/** 
 * Adds the content of the given toolbar content to the toolbar in the default drawing style of toolbars.
 * @param toolBarContent toolbar content to add to the toolbar
 */
private void addToolBarContent(AToolBarContent toolBarContent){
  List<Group> viewSpecificGroups=toolBarView.getViewSpecificGroups();
  Composite parentComposite=toolBarView.getParentComposite();
  for (  ToolBarContainer toolBarContainer : toolBarContent.getDefaultToolBar()) {
    Group group=new Group(parentComposite,SWT.NULL);
    GridLayout layout=new GridLayout(1,false);
    layout.marginBottom=layout.marginTop=layout.marginLeft=layout.marginRight=layout.horizontalSpacing=layout.verticalSpacing=0;
    layout.marginHeight=layout.marginWidth=0;
    group.setLayout(layout);
    group.setLayoutData(toolBarRenderer.createStandardGridData());
    viewSpecificGroups.add(group);
    addToolBarItems(group,toolBarContainer);
    ResourceLoader resourceLoader=GeneralManager.get().getResourceLoader();
    Display display=PlatformUI.getWorkbench().getDisplay();
    String path=toolBarContainer.getImagePath();
    resourceLoader.getImage(display,path);
    if (!GenomePerspective.bIsWideScreen) {
      Label spacer=new Label(group,SWT.NULL);
      spacer.setLayoutData(new GridData(GridData.FILL_BOTH));
    }
    Label label=new Label(group,SWT.CENTER);
    label.setText(toolBarContainer.getTitle());
    label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    label.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
    label.setData(group);
    group.setData(""String_Node_Str"",toolBarContent.getViewClass().getName());
    group.setData(""String_Node_Str"",toolBarContent.getTargetViewID());
    group.layout();
    parentComposite.layout();
  }
}",0.9925586720091586
58909,"public void run(){
  for (  Group group : viewSpecificGroups) {
    for (    Control subControl : group.getChildren()) {
      if (subControl instanceof Label) {
        if (group.getData(""String_Node_Str"") != null && ((Integer)group.getData(""String_Node_Str"")).intValue() == iViewID || eventTrigger instanceof GLPathway && group.getData(""String_Node_Str"") == GLPathwayView.ID) {
          ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY));
        }
 else {
          ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
        }
      }
    }
  }
}","public void run(){
  for (  Group group : viewSpecificGroups) {
    for (    Control subControl : group.getChildren()) {
      if (subControl instanceof Label && subControl.getData() == group) {
        if (group.getData(""String_Node_Str"") != null && ((Integer)group.getData(""String_Node_Str"")).intValue() == iViewID || eventTrigger instanceof GLPathway && group.getData(""String_Node_Str"") == GLPathwayView.ID) {
          ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY));
        }
 else {
          ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GREEN));
        }
      }
    }
  }
}",0.9705426356589149
58910,"@Override public void handleExternalEvent(final IMediatorSender eventTrigger,IEventContainer eventContainer,EMediatorType eMediatorType){
  if (eventTrigger instanceof AGLEventListener) {
    final int iViewID=((AGLEventListener)eventTrigger).getID();
    parentComposite.getDisplay().asyncExec(new Runnable(){
      public void run(){
        for (        Group group : viewSpecificGroups) {
          for (          Control subControl : group.getChildren()) {
            if (subControl instanceof Label) {
              if (group.getData(""String_Node_Str"") != null && ((Integer)group.getData(""String_Node_Str"")).intValue() == iViewID || eventTrigger instanceof GLPathway && group.getData(""String_Node_Str"") == GLPathwayView.ID) {
                ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY));
              }
 else {
                ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));
              }
            }
          }
        }
      }
    }
);
  }
}","@Override public void handleExternalEvent(final IMediatorSender eventTrigger,IEventContainer eventContainer,EMediatorType eMediatorType){
  if (eventTrigger instanceof AGLEventListener) {
    final int iViewID=((AGLEventListener)eventTrigger).getID();
    parentComposite.getDisplay().asyncExec(new Runnable(){
      public void run(){
        for (        Group group : viewSpecificGroups) {
          for (          Control subControl : group.getChildren()) {
            if (subControl instanceof Label && subControl.getData() == group) {
              if (group.getData(""String_Node_Str"") != null && ((Integer)group.getData(""String_Node_Str"")).intValue() == iViewID || eventTrigger instanceof GLPathway && group.getData(""String_Node_Str"") == GLPathwayView.ID) {
                ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY));
              }
 else {
                ((Label)subControl).setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_GREEN));
              }
            }
          }
        }
      }
    }
);
  }
}",0.9820923656927428
58911,"/** 
 * Creates and initializes a new view based on its serialized form. The view is already added to the list of event receivers and senders.
 * @param gl
 * @param serView serialized form of the view to create
 * @return the created view ready to be used within the application
 */
private AGLEventListener createView(GL gl,ASerializedView serView){
  ArrayList<Integer> iAlSetIDs=new ArrayList<Integer>();
  for (  ISet tmpSet : alSets) {
    if (tmpSet.getSetType() != ESetType.GENE_EXPRESSION_DATA)     continue;
    iAlSetIDs.add(tmpSet.getID());
  }
  ICommandManager cm=generalManager.getCommandManager();
  ECommandType cmdType=serView.getCreationCommandType();
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)cm.createCommandByType(cmdType);
  cmdView.setAttributesFromSerializedForm(serView);
  cmdView.setSetIDs(iAlSetIDs);
  cmdView.doCommand();
  AGLEventListener glView=cmdView.getCreatedObject();
  IEventPublisher eventPublisher=generalManager.getEventPublisher();
  eventPublisher.addSender(EMediatorType.SELECTION_MEDIATOR,(IMediatorSender)glView);
  eventPublisher.addReceiver(EMediatorType.SELECTION_MEDIATOR,(IMediatorReceiver)glView);
  triggerMostRecentDelta();
  return glView;
}","/** 
 * Creates and initializes a new view based on its serialized form. The view is already added to the list of event receivers and senders.
 * @param gl
 * @param serView serialized form of the view to create
 * @return the created view ready to be used within the application
 */
private AGLEventListener createView(GL gl,ASerializedView serView){
  ArrayList<Integer> iAlSetIDs=new ArrayList<Integer>();
  for (  ISet tmpSet : alSets) {
    if (tmpSet.getSetType() != ESetType.GENE_EXPRESSION_DATA)     continue;
    iAlSetIDs.add(tmpSet.getID());
  }
  ICommandManager cm=generalManager.getCommandManager();
  ECommandType cmdType=serView.getCreationCommandType();
  CmdCreateGLEventListener cmdView=(CmdCreateGLEventListener)cm.createCommandByType(cmdType);
  cmdView.setAttributesFromSerializedForm(serView);
  cmdView.setSetIDs(iAlSetIDs);
  cmdView.doCommand();
  AGLEventListener glView=cmdView.getCreatedObject();
  if (glView instanceof GLPathway) {
    initializePathwayView((GLPathway)glView);
  }
  IEventPublisher eventPublisher=generalManager.getEventPublisher();
  eventPublisher.addSender(EMediatorType.SELECTION_MEDIATOR,(IMediatorSender)glView);
  eventPublisher.addReceiver(EMediatorType.SELECTION_MEDIATOR,(IMediatorReceiver)glView);
  triggerMostRecentDelta();
  return glView;
}",0.9654898849662832
58912,"/** 
 * removes all inline toolbar items
 * @param viewPart view to remove the toolbar items from
 */
private void removeInlineToolBar(AGLViewPart viewPart){
  final IToolBarManager toolBarManager=viewPart.getViewSite().getActionBars().getToolBarManager();
  toolBarManager.removeAll();
  toolBarManager.update(true);
}","/** 
 * removes all inline toolbar items
 * @param viewPart view to remove the toolbar items from
 */
private void removeInlineToolBar(CaleydoViewPart viewPart){
  final IToolBarManager toolBarManager=viewPart.getViewSite().getActionBars().getToolBarManager();
  toolBarManager.removeAll();
  toolBarManager.update(true);
}",0.9844236760124612
58913,"@Override public void partVisible(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  viewPart.setAttached(isViewAttached(viewPart));
  log.info(""String_Node_Str"" + viewPart);
  if (viewPart instanceof AGLViewPart) {
    GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(((AGLViewPart)viewPart).getGLCanvas().getID());
  }
  if (!activePart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    if (viewPart instanceof CaleydoViewPart) {
      drawInlineToolBar(viewPart);
      removeViewSpecificToolBarItems();
    }
  }
 else {
    if (viewPart instanceof AGLViewPart) {
      removeInlineToolBar((AGLViewPart)viewPart);
      sendViewActivationEvent(viewPart);
    }
  }
}","@Override public void partVisible(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  viewPart.setAttached(isViewAttached(viewPart));
  log.info(""String_Node_Str"" + viewPart);
  if (viewPart instanceof AGLViewPart) {
    GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(((AGLViewPart)viewPart).getGLCanvas().getID());
  }
  if (!activePart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    drawInlineToolBar(viewPart);
    removeViewSpecificToolBarItems();
  }
 else {
    removeInlineToolBar((CaleydoViewPart)viewPart);
    sendViewActivationEvent(viewPart);
  }
}",0.8132678132678133
58914,"/** 
 * Reads the file and counts the numbers of lines to be read.
 */
protected final int computeNumberOfLinesInFile(String sFileName) throws IOException {
  int iCountLinesToBeRead=0;
  int iCountLines=0;
  try {
    BufferedReader brFile=GeneralManager.get().getResourceLoader().getResource(sFileName);
    while (brFile.readLine() != null && iCountLines <= iStopParsingAtLine) {
      if (iCountLines > this.iStartParsingAtLine) {
        iCountLinesToBeRead++;
      }
      iCountLines++;
    }
    brFile.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException();
  }
  iLinesInFileToBeRead=iCountLinesToBeRead;
  if (iStopParsingAtLine == Integer.MAX_VALUE) {
    iStopParsingAtLine=iLinesInFileToBeRead;
  }
  return iCountLinesToBeRead;
}","/** 
 * Reads the file and counts the numbers of lines to be read.
 */
protected final int computeNumberOfLinesInFile(String sFileName) throws IOException {
  int iCountLinesToBeRead=0;
  int iCountLines=0;
  try {
    BufferedReader brFile=GeneralManager.get().getResourceLoader().getResource(sFileName);
    while (brFile.readLine() != null && iCountLines <= iStopParsingAtLine) {
      if (iCountLines > this.iStartParsingAtLine) {
        iCountLinesToBeRead++;
      }
      iCountLines++;
    }
    brFile.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException();
  }
  iLinesInFileToBeRead=iCountLinesToBeRead + iStartParsingAtLine;
  if (iStopParsingAtLine == Integer.MAX_VALUE) {
    iStopParsingAtLine=iLinesInFileToBeRead;
  }
  return iLinesInFileToBeRead;
}",0.9723116548615582
58915,"@Override protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + this.getFileName());
  String sLine;
  int iColumnIndex=0;
  float fProgressBarFactor=100f / iStopParsingAtLine;
  while ((sLine=brFile.readLine()) != null && iLineInFile < iStopParsingAtLine) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    for (    EStorageType columnDataType : alColumnDataTypes) {
      if (strTokenLine.hasMoreTokens()) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
        iColumnIndex++;
      break;
case FLOAT:
    Float fValue;
  try {
    fValue=Float.valueOf(strTokenLine.nextToken()).floatValue();
  }
 catch (  NumberFormatException nfe) {
    fValue=Float.NaN;
  }
alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
strTokenLine.nextToken();
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
case GROUP_NUMBER:
alGroupInfo.get(0)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
case GROUP_REPRESENTATIVE:
alGroupInfo.get(1)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDataType.toString());
}
if (iColumnIndex == alColumnDataTypes.size()) {
continue;
}
}
}
iLineInFile++;
if (iLineInFile % 1000 == 0) {
swtGuiManager.setProgressBarPercentage((int)(fProgressBarFactor * iLineInFile));
}
}
}","@Override protected void loadDataParseFile(BufferedReader brFile,final int iNumberOfLinesInFile) throws IOException {
  allocateStorageBufferForTokenPattern();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + this.getFileName());
  String sLine;
  int iColumnIndex=0;
  float fProgressBarFactor=100f / iStopParsingAtLine;
  while ((sLine=brFile.readLine()) != null && iLineInFile <= iStopParsingAtLine) {
    if (iLineInFile < this.iStartParsingAtLine) {
      iLineInFile++;
      continue;
    }
    StringTokenizer strTokenLine=new StringTokenizer(sLine,sTokenSeperator);
    iColumnIndex=0;
    for (    EStorageType columnDataType : alColumnDataTypes) {
      if (strTokenLine.hasMoreTokens()) {
switch (columnDataType) {
case INT:
          alIntBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
        iColumnIndex++;
      break;
case FLOAT:
    Float fValue;
  try {
    fValue=Float.valueOf(strTokenLine.nextToken()).floatValue();
  }
 catch (  NumberFormatException nfe) {
    fValue=Float.NaN;
  }
alFloatBuffers.get(iColumnIndex)[iLineInFile - iStartParsingAtLine]=fValue;
iColumnIndex++;
break;
case STRING:
alStringBuffers.get(iColumnIndex).add(strTokenLine.nextToken());
iColumnIndex++;
break;
case SKIP:
strTokenLine.nextToken();
break;
case ABORT:
iColumnIndex=alColumnDataTypes.size();
break;
case GROUP_NUMBER:
alGroupInfo.get(0)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
case GROUP_REPRESENTATIVE:
alGroupInfo.get(1)[iLineInFile - iStartParsingAtLine]=Integer.valueOf(strTokenLine.nextToken()).intValue();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDataType.toString());
}
if (iColumnIndex == alColumnDataTypes.size()) {
continue;
}
}
}
iLineInFile++;
if (iLineInFile % 1000 == 0) {
swtGuiManager.setProgressBarPercentage((int)(fProgressBarFactor * iLineInFile));
}
}
}",0.9997432605905008
58916,"public void handleEvent(Event e){
  String string=e.text;
  char[] chars=new char[string.length()];
  string.getChars(0,chars.length,chars,0);
  for (  char c : chars) {
  }
}","public void handleEvent(Event e){
  String string=e.text;
  char[] chars=new char[string.length()];
  string.getChars(0,chars.length,chars,0);
}",0.90282131661442
58917,"private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
  Combo tmpComboDataType;
  for (int iColIndex=0; iColIndex < arComboDataType.size(); iColIndex++) {
    tmpComboDataType=arComboDataType.get(iColIndex);
    if (!arSkipColumn.get(iColIndex).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"") || tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
      cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
      cmdCreateStorage.doCommand();
      INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
      String labelText=previewTable.getColumn(iColIndex).getText();
      storage.setLabel(labelText);
      iAlStorageId.add(storage.getID());
      if (!sStorageIDs.equals(""String_Node_Str"")) {
        sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
      }
      sStorageIDs=sStorageIDs + storage.getID();
    }
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  cmdCreateSet.doCommand();
  ISet set=cmdCreateSet.getCreatedObject();
  iCreatedSetID=set.getID();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sInputPattern,sDelimiter,iStartParseFileAtLine - 1,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  cmdLoadLookupTableFile.doCommand();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
  Combo tmpComboDataType;
  for (int iColIndex=2; iColIndex < arComboDataType.size(); iColIndex++) {
    tmpComboDataType=arComboDataType.get(iColIndex);
    if (!arSkipColumn.get(iColIndex).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"") || tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
      cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
      cmdCreateStorage.doCommand();
      INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
      String labelText=previewTable.getColumn(iColIndex).getText();
      storage.setLabel(labelText);
      iAlStorageId.add(storage.getID());
      if (!sStorageIDs.equals(""String_Node_Str"")) {
        sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
      }
      sStorageIDs=sStorageIDs + storage.getID();
    }
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  cmdCreateSet.doCommand();
  ISet set=cmdCreateSet.getCreatedObject();
  iCreatedSetID=set.getID();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sInputPattern,sDelimiter,iStartParseFileAtLine - 1,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  cmdLoadLookupTableFile.doCommand();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}",0.9997293640054128
58918,"private void createGUI(){
  composite=new Composite(parentComposite,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  composite.setLayout(layout);
  Button buttonFileChooser=new Button(composite,SWT.PUSH);
  buttonFileChooser.setText(""String_Node_Str"");
  txtFileName=new Text(composite,SWT.BORDER);
  txtFileName.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false));
  buttonFileChooser.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      FileDialog fileDialog=new FileDialog(parentComposite.getShell());
      fileDialog.setText(""String_Node_Str"");
      fileDialog.setFilterPath(sFilePath);
      String[] filterExt={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      fileDialog.setFilterExtensions(filterExt);
      sFileName=fileDialog.open();
      txtFileName.setText(sFileName);
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  Label lblStartParseAtLine=new Label(composite,SWT.NONE);
  lblStartParseAtLine.setText(""String_Node_Str"");
  lblStartParseAtLine.setLayoutData(new GridData(GridData.END,GridData.CENTER,false,false));
  txtStartParseAtLine=new Text(composite,SWT.BORDER);
  txtStartParseAtLine.setLayoutData(new GridData(50,15));
  txtStartParseAtLine.setText(""String_Node_Str"");
  txtStartParseAtLine.setTextLimit(2);
  txtStartParseAtLine.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      iStartParseFileAtLine=Integer.valueOf(txtStartParseAtLine.getText()).intValue();
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  Label lblDelimiter=new Label(composite,SWT.NONE);
  lblDelimiter.setText(""String_Node_Str"");
  lblDelimiter.setLayoutData(new GridData(GridData.END,GridData.CENTER,false,false));
  Group delimiterGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  delimiterGroup.setLayout(new RowLayout());
  final Button[] buttonDelimiter=new Button[6];
  buttonDelimiter[0]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[0].setSelection(true);
  buttonDelimiter[0].setText(""String_Node_Str"");
  buttonDelimiter[0].setBounds(10,5,75,30);
  buttonDelimiter[1]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[1].setText(""String_Node_Str"");
  buttonDelimiter[1].setBounds(10,30,75,30);
  buttonDelimiter[2]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[2].setText(""String_Node_Str"");
  buttonDelimiter[2].setBounds(10,55,75,30);
  buttonDelimiter[3]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[3].setText(""String_Node_Str"");
  buttonDelimiter[3].setBounds(10,55,75,30);
  buttonDelimiter[4]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[4].setText(""String_Node_Str"");
  buttonDelimiter[4].setBounds(10,55,75,30);
  buttonDelimiter[5]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[5].setText(""String_Node_Str"");
  buttonDelimiter[5].setBounds(10,55,75,30);
  final Text txtCustomizedDelimiter=new Text(delimiterGroup,SWT.BORDER);
  txtCustomizedDelimiter.setBounds(0,0,75,30);
  txtCustomizedDelimiter.setTextLimit(1);
  txtCustomizedDelimiter.setEnabled(false);
  txtCustomizedDelimiter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      createDataPreviewTable(txtCustomizedDelimiter.getText());
      composite.pack();
    }
  }
);
  buttonDelimiter[0].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[1].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[2].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[3].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[4].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[5].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      txtCustomizedDelimiter.setEnabled(true);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  Label lblMathFilter=new Label(composite,SWT.NONE);
  lblMathFilter.setText(""String_Node_Str"");
  lblMathFilter.setLayoutData(new GridData(GridData.END,GridData.CENTER,false,false));
  Group mathFiltergGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  mathFiltergGroup.setLayout(new RowLayout());
  final Combo dataRepCombo=new Combo(mathFiltergGroup,SWT.DROP_DOWN);
  String[] sArOptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  dataRepCombo.setItems(sArOptions);
  dataRepCombo.setEnabled(true);
  dataRepCombo.select(0);
  dataRepCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      sDataRepMode=dataRepCombo.getText();
    }
  }
);
  final Button buttonMin=new Button(mathFiltergGroup,SWT.CHECK);
  buttonMin.setText(""String_Node_Str"");
  buttonMin.setEnabled(true);
  buttonMin.setSelection(false);
  buttonMin.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      txtMin.setEnabled(buttonMin.getSelection());
    }
  }
);
  txtMin=new Text(mathFiltergGroup,SWT.BORDER);
  txtMin.setEnabled(false);
  txtMin.addListener(SWT.Verify,new Listener(){
    public void handleEvent(    Event e){
      String string=e.text;
      char[] chars=new char[string.length()];
      string.getChars(0,chars.length,chars,0);
      for (      char c : chars) {
      }
    }
  }
);
  final Button buttonMax=new Button(mathFiltergGroup,SWT.CHECK);
  buttonMax.setText(""String_Node_Str"");
  buttonMax.setEnabled(true);
  buttonMax.setSelection(false);
  buttonMax.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      txtMax.setEnabled(buttonMax.getSelection());
    }
  }
);
  txtMax=new Text(mathFiltergGroup,SWT.BORDER);
  txtMax.setEnabled(false);
  txtMax.addListener(SWT.Verify,new Listener(){
    public void handleEvent(    Event e){
      String string=e.text;
      char[] chars=new char[string.length()];
      string.getChars(0,chars.length,chars,0);
      for (      char c : chars) {
      }
    }
  }
);
  Label lblPreview=new Label(composite,SWT.NONE);
  lblPreview.setText(""String_Node_Str"");
  lblPreview.setLayoutData(new GridData(GridData.END,GridData.BEGINNING,false,false));
  previewTable=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  previewTable.setLinesVisible(true);
  previewTable.setHeaderVisible(true);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=300;
  data.widthHint=700;
  previewTable.setLayoutData(data);
  if (!sInputFile.isEmpty()) {
    txtFileName.setText(sInputFile);
    sFileName=sInputFile;
    sDataRepMode=""String_Node_Str"";
    dataRepCombo.select(1);
    createDataPreviewTable(""String_Node_Str"");
  }
}","private void createGUI(){
  composite=new Composite(parentComposite,SWT.NONE);
  GridLayout layout=new GridLayout(2,false);
  composite.setLayout(layout);
  Button buttonFileChooser=new Button(composite,SWT.PUSH);
  buttonFileChooser.setText(""String_Node_Str"");
  txtFileName=new Text(composite,SWT.BORDER);
  txtFileName.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false));
  buttonFileChooser.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      FileDialog fileDialog=new FileDialog(parentComposite.getShell());
      fileDialog.setText(""String_Node_Str"");
      fileDialog.setFilterPath(sFilePath);
      String[] filterExt={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      fileDialog.setFilterExtensions(filterExt);
      sFileName=fileDialog.open();
      txtFileName.setText(sFileName);
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  Label lblStartParseAtLine=new Label(composite,SWT.NONE);
  lblStartParseAtLine.setText(""String_Node_Str"");
  lblStartParseAtLine.setLayoutData(new GridData(GridData.END,GridData.CENTER,false,false));
  txtStartParseAtLine=new Text(composite,SWT.BORDER);
  txtStartParseAtLine.setLayoutData(new GridData(50,15));
  txtStartParseAtLine.setText(""String_Node_Str"");
  txtStartParseAtLine.setTextLimit(2);
  txtStartParseAtLine.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      iStartParseFileAtLine=Integer.valueOf(txtStartParseAtLine.getText()).intValue();
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  Label lblDelimiter=new Label(composite,SWT.NONE);
  lblDelimiter.setText(""String_Node_Str"");
  lblDelimiter.setLayoutData(new GridData(GridData.END,GridData.CENTER,false,false));
  Group delimiterGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  delimiterGroup.setLayout(new RowLayout());
  final Button[] buttonDelimiter=new Button[6];
  buttonDelimiter[0]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[0].setSelection(true);
  buttonDelimiter[0].setText(""String_Node_Str"");
  buttonDelimiter[0].setBounds(10,5,75,30);
  buttonDelimiter[1]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[1].setText(""String_Node_Str"");
  buttonDelimiter[1].setBounds(10,30,75,30);
  buttonDelimiter[2]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[2].setText(""String_Node_Str"");
  buttonDelimiter[2].setBounds(10,55,75,30);
  buttonDelimiter[3]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[3].setText(""String_Node_Str"");
  buttonDelimiter[3].setBounds(10,55,75,30);
  buttonDelimiter[4]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[4].setText(""String_Node_Str"");
  buttonDelimiter[4].setBounds(10,55,75,30);
  buttonDelimiter[5]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[5].setText(""String_Node_Str"");
  buttonDelimiter[5].setBounds(10,55,75,30);
  final Text txtCustomizedDelimiter=new Text(delimiterGroup,SWT.BORDER);
  txtCustomizedDelimiter.setBounds(0,0,75,30);
  txtCustomizedDelimiter.setTextLimit(1);
  txtCustomizedDelimiter.setEnabled(false);
  txtCustomizedDelimiter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      createDataPreviewTable(txtCustomizedDelimiter.getText());
      composite.pack();
    }
  }
);
  buttonDelimiter[0].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[1].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[2].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[3].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[4].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  buttonDelimiter[5].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      txtCustomizedDelimiter.setEnabled(true);
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      if (sFileName.isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  Label lblMathFilter=new Label(composite,SWT.NONE);
  lblMathFilter.setText(""String_Node_Str"");
  lblMathFilter.setLayoutData(new GridData(GridData.END,GridData.CENTER,false,false));
  Group mathFiltergGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  mathFiltergGroup.setLayout(new RowLayout());
  final Combo dataRepCombo=new Combo(mathFiltergGroup,SWT.DROP_DOWN);
  String[] sArOptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  dataRepCombo.setItems(sArOptions);
  dataRepCombo.setEnabled(true);
  dataRepCombo.select(0);
  dataRepCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      sDataRepMode=dataRepCombo.getText();
    }
  }
);
  final Button buttonMin=new Button(mathFiltergGroup,SWT.CHECK);
  buttonMin.setText(""String_Node_Str"");
  buttonMin.setEnabled(true);
  buttonMin.setSelection(false);
  buttonMin.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      txtMin.setEnabled(buttonMin.getSelection());
    }
  }
);
  txtMin=new Text(mathFiltergGroup,SWT.BORDER);
  txtMin.setEnabled(false);
  txtMin.addListener(SWT.Verify,new Listener(){
    public void handleEvent(    Event e){
      String string=e.text;
      char[] chars=new char[string.length()];
      string.getChars(0,chars.length,chars,0);
    }
  }
);
  final Button buttonMax=new Button(mathFiltergGroup,SWT.CHECK);
  buttonMax.setText(""String_Node_Str"");
  buttonMax.setEnabled(true);
  buttonMax.setSelection(false);
  buttonMax.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      txtMax.setEnabled(buttonMax.getSelection());
    }
  }
);
  txtMax=new Text(mathFiltergGroup,SWT.BORDER);
  txtMax.setEnabled(false);
  txtMax.addListener(SWT.Verify,new Listener(){
    public void handleEvent(    Event e){
      String string=e.text;
      char[] chars=new char[string.length()];
      string.getChars(0,chars.length,chars,0);
    }
  }
);
  Label lblPreview=new Label(composite,SWT.NONE);
  lblPreview.setText(""String_Node_Str"");
  lblPreview.setLayoutData(new GridData(GridData.END,GridData.BEGINNING,false,false));
  previewTable=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  previewTable.setLinesVisible(true);
  previewTable.setHeaderVisible(true);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.heightHint=300;
  data.widthHint=700;
  previewTable.setLayoutData(data);
  if (!sInputFile.isEmpty()) {
    txtFileName.setText(sInputFile);
    sFileName=sInputFile;
    sDataRepMode=""String_Node_Str"";
    dataRepCombo.select(1);
    createDataPreviewTable(""String_Node_Str"");
  }
}",0.9956477732793524
58919,"private void createDataPreviewTable(final String sDelimiter){
  this.sDelimiter=sDelimiter;
  boolean clusterInfo=false;
  previewTable.removeAll();
  for (  TableColumn tmpColumn : previewTable.getColumns()) {
    tmpColumn.dispose();
  }
  final TableEditor editor=new TableEditor(previewTable);
  editor.horizontalAlignment=SWT.LEFT;
  editor.grabHorizontal=true;
  BufferedReader brFile;
  try {
    brFile=GeneralManager.get().getResourceLoader().getResource(sFileName);
    String sLine=""String_Node_Str"";
    for (int iIgnoreLineIndex=2; iIgnoreLineIndex < iStartParseFileAtLine; iIgnoreLineIndex++) {
      brFile.readLine();
    }
    String sTmpNextToken=""String_Node_Str"";
    StringTokenizer tokenizer;
    TableColumn column;
    TableItem item;
    int iColIndex=0;
    if ((sLine=brFile.readLine()) != null) {
      tokenizer=new StringTokenizer(sLine,sDelimiter,false);
      column=new TableColumn(previewTable,SWT.NONE);
      column.setWidth(100);
      column.setText(""String_Node_Str"");
      while (tokenizer.hasMoreTokens()) {
        sTmpNextToken=tokenizer.nextToken();
        final TableColumn dataColumn=new TableColumn(previewTable,SWT.NONE);
        dataColumn.setWidth(100);
        dataColumn.setText(sTmpNextToken);
        dataColumn.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            LabelEditorDialog dialog=new LabelEditorDialog(new Shell());
            String sLabel=dialog.open(dataColumn.getText());
            if (sLabel != null && !sLabel.isEmpty()) {
              dataColumn.setText(sLabel);
            }
          }
        }
);
        iColIndex++;
      }
    }
    int iRowCount=0;
    boolean bCellFilled=false;
    while ((sLine=brFile.readLine()) != null && iRowCount < MAX_PREVIEW_TABLE_ROWS) {
      tokenizer=new StringTokenizer(sLine,sDelimiter,true);
      item=new TableItem(previewTable,SWT.NONE);
      iColIndex=0;
      while (tokenizer.hasMoreTokens()) {
        sTmpNextToken=tokenizer.nextToken();
        if (sTmpNextToken.equals(sDelimiter) && !bCellFilled) {
          item.setText(iColIndex + 1,""String_Node_Str"");
          iColIndex++;
        }
 else         if (sTmpNextToken.equals(sDelimiter) && bCellFilled) {
          bCellFilled=false;
        }
 else {
          bCellFilled=true;
          item.setText(iColIndex + 1,sTmpNextToken);
          iColIndex++;
        }
      }
      bCellFilled=false;
      iRowCount++;
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  createDataClassBar();
  createDataTypeBar();
  TableItem[] arTmpLabelColumnItem=previewTable.getItems();
  arTmpLabelColumnItem[0].setText(0,""String_Node_Str"");
  arTmpLabelColumnItem[1].setText(0,""String_Node_Str"");
  for (int iItemIndex=2; iItemIndex < arTmpLabelColumnItem.length; iItemIndex++) {
    arTmpLabelColumnItem[iItemIndex].setText(0,""String_Node_Str"" + (iItemIndex - 1));
  }
}","private void createDataPreviewTable(final String sDelimiter){
  this.sDelimiter=sDelimiter;
  previewTable.removeAll();
  for (  TableColumn tmpColumn : previewTable.getColumns()) {
    tmpColumn.dispose();
  }
  final TableEditor editor=new TableEditor(previewTable);
  editor.horizontalAlignment=SWT.LEFT;
  editor.grabHorizontal=true;
  BufferedReader brFile;
  try {
    brFile=GeneralManager.get().getResourceLoader().getResource(sFileName);
    String sLine=""String_Node_Str"";
    for (int iIgnoreLineIndex=2; iIgnoreLineIndex < iStartParseFileAtLine; iIgnoreLineIndex++) {
      brFile.readLine();
    }
    String sTmpNextToken=""String_Node_Str"";
    StringTokenizer tokenizer;
    TableColumn column;
    TableItem item;
    int iColIndex=0;
    if ((sLine=brFile.readLine()) != null) {
      tokenizer=new StringTokenizer(sLine,sDelimiter,false);
      column=new TableColumn(previewTable,SWT.NONE);
      column.setWidth(100);
      column.setText(""String_Node_Str"");
      while (tokenizer.hasMoreTokens()) {
        sTmpNextToken=tokenizer.nextToken();
        final TableColumn dataColumn=new TableColumn(previewTable,SWT.NONE);
        dataColumn.setWidth(100);
        dataColumn.setText(sTmpNextToken);
        dataColumn.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            LabelEditorDialog dialog=new LabelEditorDialog(new Shell());
            String sLabel=dialog.open(dataColumn.getText());
            if (sLabel != null && !sLabel.isEmpty()) {
              dataColumn.setText(sLabel);
            }
          }
        }
);
        iColIndex++;
      }
    }
    int iRowCount=0;
    boolean bCellFilled=false;
    while ((sLine=brFile.readLine()) != null && iRowCount < MAX_PREVIEW_TABLE_ROWS) {
      tokenizer=new StringTokenizer(sLine,sDelimiter,true);
      item=new TableItem(previewTable,SWT.NONE);
      iColIndex=0;
      while (tokenizer.hasMoreTokens()) {
        sTmpNextToken=tokenizer.nextToken();
        if (sTmpNextToken.equals(sDelimiter) && !bCellFilled) {
          item.setText(iColIndex + 1,""String_Node_Str"");
          iColIndex++;
        }
 else         if (sTmpNextToken.equals(sDelimiter) && bCellFilled) {
          bCellFilled=false;
        }
 else {
          bCellFilled=true;
          item.setText(iColIndex + 1,sTmpNextToken);
          iColIndex++;
        }
      }
      bCellFilled=false;
      iRowCount++;
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  createDataClassBar();
  createDataTypeBar();
  TableItem[] arTmpLabelColumnItem=previewTable.getItems();
  arTmpLabelColumnItem[0].setText(0,""String_Node_Str"");
  arTmpLabelColumnItem[1].setText(0,""String_Node_Str"");
  for (int iItemIndex=2; iItemIndex < arTmpLabelColumnItem.length; iItemIndex++) {
    arTmpLabelColumnItem[iItemIndex].setText(0,""String_Node_Str"" + (iItemIndex - 1));
  }
}",0.9952560117781776
58920,"@Override public int createSetVA(ArrayList<Integer> iAlSelections){
  VirtualArray virtualArray=new VirtualArray(depth(),iAlSelections);
  int iUniqueID=virtualArray.getID();
  hashSetVAs.put(iUniqueID,virtualArray);
  return iUniqueID;
}","@Override public int createSetVA(ArrayList<Integer> iAlSelections){
  VirtualArray virtualArray=new VirtualArray(size(),iAlSelections);
  int iUniqueID=virtualArray.getID();
  hashSetVAs.put(iUniqueID,virtualArray);
  return iUniqueID;
}",0.9810526315789474
58921,"private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
  Combo tmpComboDataType;
  for (int iColIndex=2; iColIndex < arComboDataType.size(); iColIndex++) {
    tmpComboDataType=arComboDataType.get(iColIndex);
    if (!arSkipColumn.get(iColIndex).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"") || tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
      cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
      cmdCreateStorage.doCommand();
      INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
      String labelText=previewTable.getColumn(iColIndex).getText();
      storage.setLabel(labelText);
      iAlStorageId.add(storage.getID());
      if (!sStorageIDs.equals(""String_Node_Str"")) {
        sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
      }
      sStorageIDs=sStorageIDs + storage.getID();
    }
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  cmdCreateSet.doCommand();
  ISet set=cmdCreateSet.getCreatedObject();
  iCreatedSetID=set.getID();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sInputPattern,sDelimiter,iStartParseFileAtLine - 1,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  cmdLoadLookupTableFile.doCommand();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","private void createData(){
  ArrayList<Integer> iAlStorageId=new ArrayList<Integer>();
  String sStorageIDs=""String_Node_Str"";
  sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
  Combo tmpComboDataType;
  for (int iColIndex=0; iColIndex < arComboDataType.size(); iColIndex++) {
    tmpComboDataType=arComboDataType.get(iColIndex);
    if (!arSkipColumn.get(iColIndex).getSelection()) {
      sInputPattern=sInputPattern + ""String_Node_Str"" + ""String_Node_Str"";
      continue;
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"") || tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      sInputPattern=sInputPattern + tmpComboDataType.getText() + ""String_Node_Str"";
    }
    if (tmpComboDataType.getText().equals(""String_Node_Str"")) {
      CmdDataCreateStorage cmdCreateStorage=(CmdDataCreateStorage)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_STORAGE);
      cmdCreateStorage.setAttributes(EManagedObjectType.STORAGE_NUMERICAL);
      cmdCreateStorage.doCommand();
      INumericalStorage storage=(INumericalStorage)cmdCreateStorage.getCreatedObject();
      String labelText=previewTable.getColumn(iColIndex + 2).getText();
      storage.setLabel(labelText);
      iAlStorageId.add(storage.getID());
      if (!sStorageIDs.equals(""String_Node_Str"")) {
        sStorageIDs+=IGeneralManager.sDelimiter_Parser_DataItems;
      }
      sStorageIDs=sStorageIDs + storage.getID();
    }
  }
  sInputPattern+=""String_Node_Str"";
  sFileName=txtFileName.getText();
  if (sFileName.equals(""String_Node_Str"")) {
    MessageDialog.openError(parentComposite.getShell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  CmdDataCreateSet cmdCreateSet=(CmdDataCreateSet)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.CREATE_SET_DATA);
  cmdCreateSet.setAttributes(iAlStorageId,ESetType.GENE_EXPRESSION_DATA);
  cmdCreateSet.doCommand();
  ISet set=cmdCreateSet.getCreatedObject();
  iCreatedSetID=set.getID();
  CmdLoadFileNStorages cmdLoadCsv=(CmdLoadFileNStorages)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_DATA_FILE);
  cmdLoadCsv.setAttributes(iAlStorageId,sFileName,sInputPattern,sDelimiter,iStartParseFileAtLine - 1,-1);
  cmdLoadCsv.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(ECommandType.LOAD_LOOKUP_TABLE_FILE);
  cmdLoadLookupTableFile.setAttributes(sFileName,iStartParseFileAtLine,-1,""String_Node_Str"",sDelimiter,""String_Node_Str"");
  cmdLoadLookupTableFile.doCommand();
  if (!txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      set.setMin(fMin);
    }
  }
  if (!txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      set.setMax(fMax);
    }
  }
  if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.NORMAL,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG10,true);
  }
 else   if (sDataRepMode.equals(""String_Node_Str"")) {
    set.setExternalDataRepresentation(EExternalDataRepresentation.LOG2,true);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}",0.9991885312415472
58922,"@Override public void partVisible(IWorkbenchPartReference partRef){
  log.info(""String_Node_Str"");
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  if (viewPart instanceof AGLViewPart) {
    GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(((AGLViewPart)viewPart).getGLCanvas().getID());
  }
  if (!activePart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    if (viewPart instanceof AGLViewPart) {
      drawInlineToolBar((AGLViewPart)viewPart);
    }
  }
}","@Override public void partVisible(IWorkbenchPartReference partRef){
  log.info(""String_Node_Str"");
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoViewPart)) {
    return;
  }
  CaleydoViewPart viewPart=(CaleydoViewPart)activePart;
  if (viewPart instanceof AGLViewPart) {
    GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(((AGLViewPart)viewPart).getGLCanvas().getID());
  }
  if (!activePart.getSite().getShell().getText().equals(""String_Node_Str"")) {
    if (viewPart instanceof AGLViewPart) {
      drawInlineToolBar((AGLViewPart)viewPart);
    }
  }
 else {
    if (viewPart instanceof AGLViewPart) {
      removeInlineToolBar((AGLViewPart)viewPart);
    }
  }
}",0.918201915991157
58923,"private void drawInlineToolBar(AGLViewPart viewPart){
  AGLViewPart glViewPart=(AGLViewPart)viewPart;
  AGLEventListener glView=glViewPart.getGLEventListener();
  List<Integer> viewIDs=glView.getAllViewIDs();
  ToolBarContentFactory contentFactory=ToolBarContentFactory.get();
  List<AToolBarContent> toolBarContents=contentFactory.getToolBarContent(viewIDs);
  final IToolBarManager toolBarManager=viewPart.getViewSite().getActionBars().getToolBarManager();
  toolBarManager.removeAll();
  for (  AToolBarContent toolBarContent : toolBarContents) {
    for (    ToolBarContainer container : toolBarContent.getDefaultToolBar()) {
      for (      IToolBarItem item : container.getToolBarItems()) {
        if (item instanceof IAction) {
          toolBarManager.add((IAction)item);
        }
 else         if (item instanceof ControlContribution) {
          toolBarManager.add((ControlContribution)item);
        }
      }
      toolBarManager.add(new Separator());
    }
  }
  toolBarManager.update(true);
}","/** 
 * draws the toolbar items within the views default toolbar (inline)
 * @param viewPart view to add the toolbar items
 */
private void drawInlineToolBar(AGLViewPart viewPart){
  AGLViewPart glViewPart=(AGLViewPart)viewPart;
  AGLEventListener glView=glViewPart.getGLEventListener();
  List<Integer> viewIDs=glView.getAllViewIDs();
  ToolBarContentFactory contentFactory=ToolBarContentFactory.get();
  List<AToolBarContent> toolBarContents=contentFactory.getToolBarContent(viewIDs);
  final IToolBarManager toolBarManager=viewPart.getViewSite().getActionBars().getToolBarManager();
  for (  AToolBarContent toolBarContent : toolBarContents) {
    for (    ToolBarContainer container : toolBarContent.getDefaultToolBar()) {
      for (      IToolBarItem item : container.getToolBarItems()) {
        if (item instanceof IAction) {
          toolBarManager.add((IAction)item);
        }
 else         if (item instanceof ControlContribution) {
          toolBarManager.add((ControlContribution)item);
        }
      }
      toolBarManager.add(new Separator());
    }
  }
  toolBarManager.update(true);
}",0.9257683215130024
58924,"public synchronized void loadDependentPathways(final List<ICaleydoGraphItem> alVertex){
  Iterator<ICaleydoGraphItem> iterPathwayGraphItem=alVertex.iterator();
  Iterator<IGraphItem> iterIdenticalPathwayGraphItemRep=null;
  IGraphItem pathwayGraphItem;
  int iPathwayID=0;
  while (iterPathwayGraphItem.hasNext()) {
    pathwayGraphItem=iterPathwayGraphItem.next();
    if (pathwayGraphItem == null) {
      continue;
    }
    iterIdenticalPathwayGraphItemRep=pathwayGraphItem.getAllItemsByProp(EGraphItemProperty.ALIAS_CHILD).iterator();
    while (iterIdenticalPathwayGraphItemRep.hasNext()) {
      iPathwayID=((PathwayGraph)iterIdenticalPathwayGraphItemRep.next().getAllGraphByType(EGraphItemHierarchy.GRAPH_PARENT).toArray()[0]).getId();
      if (!generalManager.getPathwayManager().isPathwayVisible(iPathwayID)) {
        SerializedPathwayView serPathway=new SerializedPathwayView();
        serPathway.setPathwayID(iPathwayID);
        newViews.add(serPathway);
      }
    }
  }
  if (newViews.isEmpty()) {
    return;
  }
  pickingManager.enablePicking(false);
  if (bucketMouseWheelListener.isZoomedIn()) {
    bucketMouseWheelListener.triggerZoom(false);
  }
  for (  AGLEventListener tmpGLEventListener : GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners()) {
    if (!tmpGLEventListener.isRenderedRemote()) {
      tmpGLEventListener.enableBusyMode(true);
    }
  }
}","public synchronized void loadDependentPathways(final List<ICaleydoGraphItem> alVertex){
  Iterator<ICaleydoGraphItem> iterPathwayGraphItem=alVertex.iterator();
  Iterator<IGraphItem> iterIdenticalPathwayGraphItemRep=null;
  while (iterPathwayGraphItem.hasNext()) {
    IGraphItem pathwayGraphItem=iterPathwayGraphItem.next();
    if (pathwayGraphItem == null) {
      continue;
    }
    iterIdenticalPathwayGraphItemRep=pathwayGraphItem.getAllItemsByProp(EGraphItemProperty.ALIAS_CHILD).iterator();
    Set<Integer> newPathwayIDs=new HashSet<Integer>();
    while (iterIdenticalPathwayGraphItemRep.hasNext()) {
      int pathwayID=((PathwayGraph)iterIdenticalPathwayGraphItemRep.next().getAllGraphByType(EGraphItemHierarchy.GRAPH_PARENT).toArray()[0]).getId();
      newPathwayIDs.add(pathwayID);
    }
    for (    int pathwayID : newPathwayIDs) {
      addPathwayView(pathwayID);
    }
  }
  if (newViews.isEmpty()) {
    return;
  }
  pickingManager.enablePicking(false);
  if (bucketMouseWheelListener.isZoomedIn()) {
    bucketMouseWheelListener.triggerZoom(false);
  }
  for (  AGLEventListener tmpGLEventListener : GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners()) {
    if (!tmpGLEventListener.isRenderedRemote()) {
      tmpGLEventListener.enableBusyMode(true);
    }
  }
}",0.8433111603843311
58925,"/** 
 * Add pathway view. Also used when serialized pathways are loaded.
 * @param iPathwayIDToLoad
 */
public synchronized void addPathwayView(final int iPathwayIDToLoad){
  SerializedPathwayView serPathway=new SerializedPathwayView();
  serPathway.setPathwayID(iPathwayIDToLoad);
  newViews.add(serPathway);
}","/** 
 * Add pathway view. Also used when serialized pathways are loaded.
 * @param iPathwayIDToLoad
 */
public synchronized void addPathwayView(final int iPathwayIDToLoad){
  if (!generalManager.getPathwayManager().isPathwayVisible(iPathwayIDToLoad)) {
    SerializedPathwayView serPathway=new SerializedPathwayView();
    serPathway.setPathwayID(iPathwayIDToLoad);
    newViews.add(serPathway);
  }
}",0.6544943820224719
58926,"public void export(ISet set,String sFileName,boolean bExportBucketInternal){
  IVirtualArray contentVA=null;
  IVirtualArray storageVA=null;
  Collection<AGLEventListener> views=GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners();
  for (  AGLEventListener view : views) {
    if (view instanceof GLParallelCoordinates && view.isRenderedRemote() && bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
    if ((view instanceof GLParallelCoordinates || view instanceof GLHierarchicalHeatMap) && !bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    out.println();
    for (    Integer iContentIndex : contentVA) {
      IIDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
      Integer iRefseqMrnaInt=iDMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iContentIndex);
      if (iRefseqMrnaInt == null) {
        continue;
      }
      String sRefseqMrna=iDMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefseqMrnaInt);
      out.print(sRefseqMrna + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      out.println();
    }
    out.close();
  }
 catch (  IOException e) {
  }
}","public void export(ISet set,String sFileName,boolean bExportBucketInternal){
  IVirtualArray contentVA=null;
  IVirtualArray storageVA=null;
  Collection<AGLEventListener> views=GeneralManager.get().getViewGLCanvasManager().getAllGLEventListeners();
  for (  AGLEventListener view : views) {
    if (view instanceof GLParallelCoordinates && view.isRenderedRemote() && bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
 else     if (!view.isRenderedRemote() && (view instanceof GLParallelCoordinates || view instanceof GLHierarchicalHeatMap) && !bExportBucketInternal) {
      contentVA=set.getVA(view.getContentVAID());
      storageVA=set.getVA(view.getStorageVAID());
      break;
    }
  }
  if (contentVA == null || storageVA == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(sFileName)));
    out.print(""String_Node_Str"");
    for (    Integer iStorageIndex : storageVA) {
      out.print(set.get(iStorageIndex).getLabel());
      out.print(""String_Node_Str"");
    }
    out.println();
    for (    Integer iContentIndex : contentVA) {
      IIDMappingManager iDMappingManager=GeneralManager.get().getIDMappingManager();
      Integer iRefseqMrnaInt=iDMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iContentIndex);
      if (iRefseqMrnaInt == null) {
        continue;
      }
      String sRefseqMrna=iDMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_REFSEQ_MRNA,iRefseqMrnaInt);
      out.print(sRefseqMrna + ""String_Node_Str"");
      for (      Integer iStorageIndex : storageVA) {
        IStorage storage=set.get(iStorageIndex);
        out.print(storage.getFloat(EDataRepresentation.RAW,iContentIndex));
        out.print(""String_Node_Str"");
      }
      out.println();
    }
    out.close();
  }
 catch (  IOException e) {
  }
}",0.9912144702842376
58927,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glColor4f(1,1,1,1);
  float fXCenter=viewFrustum.getWidth() / 2;
  float fYCenter=viewFrustum.getHeight() / 2;
  gl.glTranslatef(fXCenter,fYCenter,0);
  int iDisplayedHierarchyDepth=Math.min(iMaxDisplayedHierarchyDepth,pdCurrentRootElement.getHierarchyDepth());
  float fDiscWidth=Math.min(fXCenter - (fXCenter / 10),fYCenter - (fYCenter / 10)) / iDisplayedHierarchyDepth;
  pdCurrentRootElement.drawHierarchyRoot(gl,glu,fDiscWidth,iDisplayedHierarchyDepth);
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  gl.glColor4f(1,1,1,1);
  float fXCenter=viewFrustum.getWidth() / 2;
  float fYCenter=viewFrustum.getHeight() / 2;
  gl.glTranslatef(fXCenter,fYCenter,0);
  int iDisplayedHierarchyDepth=Math.min(iMaxDisplayedHierarchyDepth,pdCurrentRootElement.getHierarchyDepth());
  float fDiscWidth=Math.min(fXCenter - (fXCenter / 10),fYCenter - (fYCenter / 10)) / iDisplayedHierarchyDepth;
  pdCurrentRootElement.drawHierarchyRoot(gl,glu,fDiscWidth,iDisplayedHierarchyDepth);
  gl.glTranslatef(-fXCenter,-fYCenter,0);
  gl.glEndList();
}",0.9662921348314608
58928,"/** 
 * Adds new remote-rendered-views that have been queued for displaying to this view. Only one view is taken from the list and added for remote rendering per call to this method.
 * @param GL   
 */
private synchronized void initNewView(GL gl){
  if (arSlerpActions.isEmpty()) {
    if (!newViews.isEmpty()) {
      ISerializedView serView=newViews.remove(0);
      AGLEventListener view=createView(gl,serView);
      addSlerpActionForView(gl,view);
      if (newViews.isEmpty()) {
        enableUserInteraction();
      }
    }
  }
}","/** 
 * Adds new remote-rendered-views that have been queued for displaying to this view. Only one view is taken from the list and added for remote rendering per call to this method.
 * @param GL   
 */
private synchronized void initNewView(GL gl){
  if (arSlerpActions.isEmpty()) {
    if (!newViews.isEmpty()) {
      ISerializedView serView=newViews.remove(0);
      AGLEventListener view=createView(gl,serView);
      addSlerpActionForView(gl,view);
      if (newViews.isEmpty()) {
        enableUserInteraction();
      }
      iAlContainedViewIDs.add(view.getID());
    }
  }
}",0.95985727029438
58929,"@Override public void run(){
  super.run();
  for (  AGLEventListener tmpGLEventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
    if (!tmpGLEventListener.isRenderedRemote()) {
      tmpGLEventListener.enableBusyMode(true);
    }
  }
  Iterator<PathwayDatabase> iterPathwayDatabase=pathwayDatabases.iterator();
  while (iterPathwayDatabase.hasNext()) {
    loadAllPathwaysByType(generalManager,iterPathwayDatabase.next());
  }
  for (  AGLEventListener tmpGLEventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
    if (!tmpGLEventListener.isRenderedRemote()) {
      tmpGLEventListener.enableBusyMode(false);
    }
  }
  generalManager.getPathwayManager().notifyPathwayLoadingFinished(true);
}","@Override public void run(){
  super.run();
  IViewManager viewManager=generalManager.getViewGLCanvasManager();
  viewManager.requestBusyMode(this);
  Iterator<PathwayDatabase> iterPathwayDatabase=pathwayDatabases.iterator();
  while (iterPathwayDatabase.hasNext()) {
    loadAllPathwaysByType(generalManager,iterPathwayDatabase.next());
  }
  viewManager.releaseBusyMode(this);
  generalManager.getPathwayManager().notifyPathwayLoadingFinished(true);
}",0.4863523573200992
58930,"/** 
 * Constructor.
 */
public ViewManager(){
  pickingManager=new PickingManager();
  selectionManager=new ConnectedElementRepresentationManager();
  infoAreaManager=new GLInfoAreaManager();
  hashGLCanvasID2GLCanvas=new HashMap<Integer,GLCaleydoCanvas>();
  hashGLCanvasID2GLEventListeners=new HashMap<Integer,ArrayList<AGLEventListener>>();
  hashGLEventListenerID2GLEventListener=new HashMap<Integer,AGLEventListener>();
  arWorkspaceJFrame=new ArrayList<JFrame>();
  fpsAnimator=new FPSAnimator(null,60);
}","/** 
 * Constructor.
 */
public ViewManager(){
  pickingManager=new PickingManager();
  selectionManager=new ConnectedElementRepresentationManager();
  infoAreaManager=new GLInfoAreaManager();
  hashGLCanvasID2GLCanvas=new HashMap<Integer,GLCaleydoCanvas>();
  hashGLCanvasID2GLEventListeners=new HashMap<Integer,ArrayList<AGLEventListener>>();
  hashGLEventListenerID2GLEventListener=new HashMap<Integer,AGLEventListener>();
  arWorkspaceJFrame=new ArrayList<JFrame>();
  fpsAnimator=new FPSAnimator(null,60);
  busyRequests=new HashSet<Object>();
}",0.9642184557438794
58931,"public void enableBusyMode(final boolean bBusyMode){
  if (!bBusyMode && eBusyModeState == EBusyModeState.ON) {
    eBusyModeState=EBusyModeState.SWITCH_OFF;
    pickingManager.enablePicking(true);
  }
 else   if (bBusyMode) {
    pickingManager.enablePicking(false);
    eBusyModeState=EBusyModeState.ON;
  }
}","public void enableBusyMode(final boolean bBusyMode){
  if (!bBusyMode && eBusyModeState == EBusyModeState.ON) {
    eBusyModeState=EBusyModeState.SWITCH_OFF;
    pickingManager.enablePicking(true);
  }
 else   if (bBusyMode) {
    eBusyModeState=EBusyModeState.ON;
  }
}",0.9294320137693632
58932,"public void enableBusyMode(final boolean bBusyMode){
  if (!bBusyMode && eBusyModeState == EBusyModeState.ON) {
    eBusyModeState=EBusyModeState.SWITCH_OFF;
    pickingManager.enablePicking(true);
  }
 else   if (bBusyMode) {
    eBusyModeState=EBusyModeState.ON;
  }
}","public void enableBusyMode(final boolean bBusyMode){
  if (!bBusyMode && eBusyModeState == EBusyModeState.ON) {
    eBusyModeState=EBusyModeState.SWITCH_OFF;
    pickingManager.enablePicking(true);
  }
 else   if (bBusyMode) {
    pickingManager.enablePicking(false);
    eBusyModeState=EBusyModeState.ON;
  }
}",0.9294320137693632
58933,"@Override public final void initViewRCP(Composite parentComposite){
  this.parentComposite=parentComposite;
  initViewSWTComposite(parentComposite);
}","@Override public final void initViewRCP(final Composite parentComposite){
  this.parentComposite=parentComposite;
  initViewSWTComposite(parentComposite);
}",0.9803921568627452
58934,"@Override public void initViewSWTComposite(Composite parentComposite){
  Composite composite=new Composite(parentComposite,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));
  Composite browserBarComposite=new Composite(composite,SWT.NONE);
  browserBarComposite.setLayout(new GridLayout(2,false));
  ToolBar toolbar=new ToolBar(browserBarComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  ResourceLoader resourceLoader=GeneralManager.get().getResourceLoader();
  goButton=new ToolItem(toolbar,SWT.PUSH);
  goButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_REFRESH_IMAGE.getFileName()));
  backButton=new ToolItem(toolbar,SWT.PUSH);
  backButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_BACK_IMAGE.getFileName()));
  stopButton=new ToolItem(toolbar,SWT.PUSH);
  stopButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_STOP_IMAGE.getFileName()));
  homeButton=new ToolItem(toolbar,SWT.PUSH);
  homeButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_HOME_IMAGE.getFileName()));
  textURL=new Text(browserBarComposite,SWT.BORDER);
  if (checkInternetConnection())   textURL.setText(sUrl);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=15;
  textURL.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.heightHint=45;
  browserBarComposite.setLayoutData(data);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      if (!checkInternetConnection())       return;
      ToolItem item=(ToolItem)event.widget;
      if (item.equals(backButton)) {
        browser.back();
      }
 else       if (item.equals(stopButton)) {
        browser.stop();
      }
 else       if (item.equals(goButton)) {
        sUrl=textURL.getText();
      }
 else       if (item.equals(homeButton)) {
        sUrl=""String_Node_Str"";
        textURL.setText(CALEYDO_HOME);
        browser.setUrl(sUrl);
      }
    }
  }
;
  goButton.addListener(SWT.Selection,listener);
  backButton.addListener(SWT.Selection,listener);
  stopButton.addListener(SWT.Selection,listener);
  homeButton.addListener(SWT.Selection,listener);
  textURL.addListener(SWT.DefaultSelection,new Listener(){
    public void handleEvent(    Event e){
      sUrl=textURL.getText();
      drawView();
    }
  }
);
  parentComposite.getDisplay().addFilter(SWT.FocusIn,new Listener(){
    public void handleEvent(    Event event){
      if (!event.widget.getClass().equals(this.getClass()))       return;
    }
  }
);
  browser=new Browser(composite,SWT.BORDER);
  idExtractionLocationListener=new IDExtractionLocationListener(browser,iUniqueID,-1);
  browser.addLocationListener(idExtractionLocationListener);
  data=new GridData();
  browser.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));
}","@Override public void initViewSWTComposite(Composite parentComposite){
  Composite composite=new Composite(parentComposite,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));
  Composite browserBarComposite=new Composite(composite,SWT.NONE);
  browserBarComposite.setLayout(new GridLayout(2,false));
  ToolBar toolbar=new ToolBar(browserBarComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  ResourceLoader resourceLoader=GeneralManager.get().getResourceLoader();
  goButton=new ToolItem(toolbar,SWT.PUSH);
  goButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_REFRESH_IMAGE.getFileName()));
  backButton=new ToolItem(toolbar,SWT.PUSH);
  backButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_BACK_IMAGE.getFileName()));
  stopButton=new ToolItem(toolbar,SWT.PUSH);
  stopButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_STOP_IMAGE.getFileName()));
  homeButton=new ToolItem(toolbar,SWT.PUSH);
  homeButton.setImage(resourceLoader.getImage(parentComposite.getDisplay(),EIconTextures.BROWSER_HOME_IMAGE.getFileName()));
  textURL=new Text(browserBarComposite,SWT.BORDER);
  if (checkInternetConnection())   textURL.setText(sUrl);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=15;
  textURL.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.heightHint=45;
  browserBarComposite.setLayoutData(data);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      if (!checkInternetConnection())       return;
      ToolItem item=(ToolItem)event.widget;
      if (item.equals(backButton)) {
        browser.back();
      }
 else       if (item.equals(stopButton)) {
        browser.stop();
      }
 else       if (item.equals(goButton)) {
        sUrl=textURL.getText();
      }
 else       if (item.equals(homeButton)) {
        sUrl=""String_Node_Str"";
        textURL.setText(CALEYDO_HOME);
        browser.setUrl(sUrl);
      }
    }
  }
;
  goButton.addListener(SWT.Selection,listener);
  backButton.addListener(SWT.Selection,listener);
  stopButton.addListener(SWT.Selection,listener);
  homeButton.addListener(SWT.Selection,listener);
  textURL.addListener(SWT.DefaultSelection,new Listener(){
    public void handleEvent(    Event e){
      sUrl=textURL.getText();
      drawView();
    }
  }
);
  parentComposite.getDisplay().addFilter(SWT.FocusIn,new Listener(){
    public void handleEvent(    Event event){
      if (!event.widget.getClass().equals(this.getClass()))       return;
    }
  }
);
  browser=new Browser(composite,SWT.BORDER);
  browser.addProgressListener(new ProgressListener(){
    @Override public void completed(    ProgressEvent event){
      GeneralManager.get().getViewGLCanvasManager().getActiveSWTView().setFocus();
    }
    @Override public void changed(    ProgressEvent event){
      GeneralManager.get().getViewGLCanvasManager().getActiveSWTView().setFocus();
    }
  }
);
  idExtractionLocationListener=new IDExtractionLocationListener(browser,iUniqueID,-1);
  browser.addLocationListener(idExtractionLocationListener);
  data=new GridData();
  browser.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true));
}",0.9447420786774836
58935,"@Override public void partActivated(IWorkbenchPartReference partRef){
}","@Override public void partActivated(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (activePart instanceof CaleydoViewPart && !(activePart instanceof HTMLBrowserView))   GeneralManager.get().getViewGLCanvasManager().setActiveSWTView(((CaleydoViewPart)activePart).getSWTComposite());
}",0.3567839195979899
58936,"@Override public void createPartControl(Composite parent){
  tabularDataView=(TabularDataViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER,-1,""String_Node_Str"");
  for (  ISet set : GeneralManager.get().getSetManager().getAllItems()) {
    tabularDataView.addSet(set);
  }
  tabularDataView.initViewRCP(parent);
  tabularDataView.drawView();
  GeneralManager.get().getViewGLCanvasManager().registerItem(tabularDataView);
}","@Override public void createPartControl(Composite parent){
  tabularDataView=(TabularDataViewRep)GeneralManager.get().getViewGLCanvasManager().createView(EManagedObjectType.VIEW_SWT_TABULAR_DATA_VIEWER,-1,""String_Node_Str"");
  for (  ISet set : GeneralManager.get().getSetManager().getAllItems()) {
    tabularDataView.addSet(set);
  }
  tabularDataView.initViewRCP(parent);
  tabularDataView.drawView();
  swtComposite=parent;
  GeneralManager.get().getViewGLCanvasManager().registerItem(tabularDataView);
}",0.9768378650553876
58937,"@Override public synchronized void clearAllSelections(){
  AlSelection.clear();
  AlExpMouseOver.clear();
  AlExpSelected.clear();
  iSelectorBar=1;
  initPosCursor();
  setDisplayListDirty();
  triggerSelectionBlock();
  glHeatMapView.setDisplayListDirty();
}","@Override public synchronized void clearAllSelections(){
  contentSelectionManager.clearSelections();
  storageSelectionManager.clearSelections();
  AlSelection.clear();
  AlExpMouseOver.clear();
  AlExpSelected.clear();
  iSelectorBar=1;
  initPosCursor();
  setDisplayListDirty();
  triggerSelectionBlock();
  glHeatMapView.setDisplayListDirty();
}",0.8524590163934426
58938,"private void setTexture(){
  boolean bSetCurrentTexture=true;
  if (AlSelection.size() > 0) {
    for (    HeatMapSelection selection : AlSelection) {
      if (selection.getTexture() == iSelectorBar + 0 || selection.getTexture() == iSelectorBar - 1) {
        bSetCurrentTexture=false;
        break;
      }
    }
    if (bSetCurrentTexture) {
      iSelectorBar=AlSelection.get(0).getTexture() + 1;
      if (iSelectorBar == iNrSelBar)       iSelectorBar--;
      initPosCursor();
    }
  }
}","private void setTexture(){
  boolean bSetCurrentTexture=true;
  if (AlSelection.size() > 0) {
    for (    HeatMapSelection selection : AlSelection) {
      if ((selection.getTexture() == iSelectorBar && selection.getPos() >= iFirstSample && selection.getPos() <= iLastSample) || (selection.getTexture() == iSelectorBar - 1 && selection.getPos() >= iFirstSample && selection.getPos() <= iLastSample)) {
        bSetCurrentTexture=false;
        break;
      }
    }
    if (bSetCurrentTexture) {
      iSelectorBar=AlSelection.get(0).getTexture() + 1;
      if (iSelectorBar == iNrSelBar)       iSelectorBar--;
      initPosCursor();
    }
  }
}",0.8631578947368421
58939,"private ISelectionDelta createExternalSelectionDelta(ISelectionDelta selectionDelta){
  ISelectionDelta newSelectionDelta=new SelectionDelta(EIDType.REFSEQ_MRNA_INT);
  IIDMappingManager idMappingManager=generalManager.getIDMappingManager();
  for (  SelectionDeltaItem item : selectionDelta) {
    for (    int iDavidID : getDavidFromPathwayVertexGraphItemRep(item.getPrimaryID())) {
      Set<Integer> iSetRefSeq=idMappingManager.getMultiID(EMappingType.DAVID_2_REFSEQ_MRNA_INT,iDavidID);
      if (iSetRefSeq == null) {
        generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"" + iDavidID);
        continue;
      }
      for (      Object iRefSeqID : iSetRefSeq) {
        newSelectionDelta.addSelection((Integer)iRefSeqID,item.getSelectionType(),item.getPrimaryID());
        for (        Integer iConnectionID : item.getConnectionID()) {
          newSelectionDelta.addConnectionID((Integer)iRefSeqID,iConnectionID);
        }
      }
    }
  }
  return newSelectionDelta;
}","private ISelectionDelta createExternalSelectionDelta(ISelectionDelta selectionDelta){
  ISelectionDelta newSelectionDelta=new SelectionDelta(EIDType.REFSEQ_MRNA_INT);
  for (  SelectionDeltaItem item : selectionDelta) {
    for (    int iRefSeqID : getRefSeqIDsFromPathwayVertexGraphItemRep(item.getPrimaryID())) {
      newSelectionDelta.addSelection((Integer)iRefSeqID,item.getSelectionType(),item.getPrimaryID());
      for (      Integer iConnectionID : item.getConnectionID()) {
        newSelectionDelta.addConnectionID((Integer)iRefSeqID,iConnectionID);
      }
    }
  }
  return newSelectionDelta;
}",0.5409119300437226
58940,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case PATHWAY_ELEMENT_SELECTION:
    ESelectionType eSelectionType;
  PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)generalManager.getPathwayItemManager().getItem(iExternalID);
setDisplayListDirty();
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_1);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_2);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_3);
switch (pickingMode) {
case DOUBLE_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
int iPathwayID=generalManager.getPathwayManager().searchPathwayIdByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG);
if (iPathwayID != -1) {
IDListEventContainer<Integer> idListEventContainer=new IDListEventContainer<Integer>(EEventType.LOAD_PATHWAY_BY_PATHWAY_ID,EIDType.PATHWAY);
idListEventContainer.addID(iPathwayID);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,idListEventContainer);
}
}
 else {
IDListEventContainer<Integer> idListEventContainer=new IDListEventContainer<Integer>(EEventType.LOAD_PATHWAY_BY_GENE,EIDType.DAVID);
ArrayList<Integer> alDavids=getDavidFromPathwayVertexGraphItemRep(tmpVertexGraphItemRep.getID());
idListEventContainer.setIDs(alDavids);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,idListEventContainer);
}
break;
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
selectionManager.clearSelection(eSelectionType);
selectionManager.addToType(eSelectionType,tmpVertexGraphItemRep.getId());
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
selectionManager.addConnectionID(iConnectionID,tmpVertexGraphItemRep.getId());
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
gLPathwayContentCreator.performIdenticalNodeHighlighting(eSelectionType);
createConnectionLines(eSelectionType,iConnectionID);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(EIDType.DAVID,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=createExternalSelectionDelta(selectionManager.getDelta());
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
pickingManager.flushHits(iUniqueID,EPickingType.PATHWAY_ELEMENT_SELECTION);
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case PATHWAY_ELEMENT_SELECTION:
    ESelectionType eSelectionType;
  PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)generalManager.getPathwayItemManager().getItem(iExternalID);
setDisplayListDirty();
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_1);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_2);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_3);
switch (pickingMode) {
case DOUBLE_CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
int iPathwayID=generalManager.getPathwayManager().searchPathwayIdByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG);
if (iPathwayID != -1) {
IDListEventContainer<Integer> idListEventContainer=new IDListEventContainer<Integer>(EEventType.LOAD_PATHWAY_BY_PATHWAY_ID,EIDType.PATHWAY);
idListEventContainer.addID(iPathwayID);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,idListEventContainer);
}
}
 else {
IDListEventContainer<Integer> idListEventContainer=new IDListEventContainer<Integer>(EEventType.LOAD_PATHWAY_BY_GENE,EIDType.REFSEQ_MRNA_INT);
ArrayList<Integer> alRefSeqID=getRefSeqIDsFromPathwayVertexGraphItemRep(tmpVertexGraphItemRep.getID());
idListEventContainer.setIDs(alRefSeqID);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,idListEventContainer);
}
break;
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
selectionManager.clearSelection(eSelectionType);
selectionManager.addToType(eSelectionType,tmpVertexGraphItemRep.getId());
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
selectionManager.addConnectionID(iConnectionID,tmpVertexGraphItemRep.getId());
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
gLPathwayContentCreator.performIdenticalNodeHighlighting(eSelectionType);
createConnectionLines(eSelectionType,iConnectionID);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(EIDType.DAVID,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=createExternalSelectionDelta(selectionManager.getDelta());
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
pickingManager.flushHits(iUniqueID,EPickingType.PATHWAY_ELEMENT_SELECTION);
break;
}
}",0.9890230515916576
58941,"@SuppressWarnings(""String_Node_Str"") @Override public void handleExternalEvent(IUniqueObject eventTrigger,IEventContainer eventContainer){
switch (eventContainer.getEventType()) {
case LOAD_PATHWAY_BY_GENE:
    IDListEventContainer<Integer> idContainer=(IDListEventContainer<Integer>)eventContainer;
  if (idContainer.getIDType() == EIDType.DAVID) {
    int iGraphItemID=0;
    ArrayList<ICaleydoGraphItem> alPathwayVertexGraphItem=new ArrayList<ICaleydoGraphItem>();
    for (    Integer iDavidID : idContainer.getIDs()) {
      iGraphItemID=generalManager.getPathwayItemManager().getPathwayVertexGraphItemIdByDavidId(iDavidID);
      if (iGraphItemID == -1)       continue;
      PathwayVertexGraphItem tmpPathwayVertexGraphItem=((PathwayVertexGraphItem)generalManager.getPathwayItemManager().getItem(iGraphItemID));
      if (tmpPathwayVertexGraphItem == null)       continue;
      alPathwayVertexGraphItem.add(tmpPathwayVertexGraphItem);
    }
    if (!alPathwayVertexGraphItem.isEmpty()) {
      loadDependentPathways(alPathwayVertexGraphItem);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
break;
case LOAD_PATHWAY_BY_PATHWAY_ID:
IDListEventContainer<Integer> pathwayIDContainer=(IDListEventContainer<Integer>)eventContainer;
for (Integer iPathwayID : pathwayIDContainer.getIDs()) {
addPathwayView(iPathwayID);
}
break;
case SELECTION_UPDATE:
lastSelectionDelta=((DeltaEventContainer<ISelectionDelta>)eventContainer).getSelectionDelta();
}
bUpdateOffScreenTextures=true;
}","@SuppressWarnings(""String_Node_Str"") @Override public void handleExternalEvent(IUniqueObject eventTrigger,IEventContainer eventContainer){
switch (eventContainer.getEventType()) {
case LOAD_PATHWAY_BY_GENE:
    IDListEventContainer<Integer> idContainer=(IDListEventContainer<Integer>)eventContainer;
  if (idContainer.getIDType() == EIDType.REFSEQ_MRNA_INT) {
    int iGraphItemID=0;
    Integer iDavidID=-1;
    ArrayList<ICaleydoGraphItem> alPathwayVertexGraphItem=new ArrayList<ICaleydoGraphItem>();
    for (    Integer iRefSeqID : idContainer.getIDs()) {
      iDavidID=idMappingManager.getID(EMappingType.REFSEQ_MRNA_INT_2_DAVID,iRefSeqID);
      if (iDavidID == null || iDavidID == -1)       throw new IllegalStateException(""String_Node_Str"");
      iGraphItemID=generalManager.getPathwayItemManager().getPathwayVertexGraphItemIdByDavidId(iDavidID);
      if (iGraphItemID == -1)       continue;
      PathwayVertexGraphItem tmpPathwayVertexGraphItem=((PathwayVertexGraphItem)generalManager.getPathwayItemManager().getItem(iGraphItemID));
      if (tmpPathwayVertexGraphItem == null)       continue;
      alPathwayVertexGraphItem.add(tmpPathwayVertexGraphItem);
    }
    if (!alPathwayVertexGraphItem.isEmpty()) {
      loadDependentPathways(alPathwayVertexGraphItem);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
break;
case LOAD_PATHWAY_BY_PATHWAY_ID:
IDListEventContainer<Integer> pathwayIDContainer=(IDListEventContainer<Integer>)eventContainer;
for (Integer iPathwayID : pathwayIDContainer.getIDs()) {
addPathwayView(iPathwayID);
}
break;
case SELECTION_UPDATE:
lastSelectionDelta=((DeltaEventContainer<ISelectionDelta>)eventContainer).getSelectionDelta();
}
bUpdateOffScreenTextures=true;
}",0.8217913204062789
58942,"@Override public void init(GLAutoDrawable drawable){
  GeneralManager.get().getLogger().log(Level.INFO,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str""+ ""String_Node_Str""+ drawable.getChosenGLCapabilities());
  GL gl=drawable.getGL();
  gl.setSwapInterval(0);
  fpsCounter=new FPSCounter(drawable,16);
  fpsCounter.setColor(0.5f,0.5f,0.5f,1);
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClearDepth(1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT | GL.GL_STENCIL_BUFFER_BIT);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
}","@Override public void init(GLAutoDrawable drawable){
  GeneralManager.get().getLogger().log(Level.INFO,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str""+ ""String_Node_Str""+ drawable.getChosenGLCapabilities());
  GL gl=drawable.getGL();
  gl.setSwapInterval(0);
  fpsCounter=new FPSCounter(drawable,16);
  fpsCounter.setColor(0.5f,0.5f,0.5f,1);
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClearDepth(1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT | GL.GL_STENCIL_BUFFER_BIT);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_POLYGON_SMOOTH);
  gl.glHint(GL.GL_POLYGON_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
}",0.9533678756476685
58943,"@Override public synchronized void initLocal(GL gl){
  bIsLocal=true;
  float fInitZoom=-10f;
  Rotf t=new Rotf();
  t.set(new Vec3f(-1,0,0),(float)(Math.PI / 4.0 - 2.0 * Math.PI * (-(fInitZoom + 3)) / 360.0));
  this.getViewCamera().setCameraRotation(t);
  this.getViewCamera().addCameraPosition(new Vec3f(0,0,fInitZoom));
  init(gl);
{
    MouseListener[] ml=parentGLCanvas.getMouseListeners();
    for (    MouseListener l : ml) {
      if (l instanceof JoglMouseListener)       ((JoglMouseListener)l).setNavigationModes(false,false,false);
    }
  }
  if (mouseListener_ != null) {
    parentGLCanvas.addMouseListener(mouseListener_);
    mouseListener_.setNavigationModes(true,false,true);
  }
  if (iViewRole != 2 && mouseListener_ != null) {
    parentGLCanvas.addMouseMotionListener(mouseListener_);
    parentGLCanvas.addMouseWheelListener(mouseListener_);
    parentGLCanvas.addKeyListener(keyListener_);
  }
  grid_.setGlyphPositions(EIconIDs.DISPLAY_RECTANGLE);
  if (this.iViewRole == 2)   grid_.setGlyphPositions(EIconIDs.DISPLAY_CIRCLE);
}","@Override public synchronized void initLocal(GL gl){
  generalManager.getEventPublisher().addSender(EMediatorType.SELECTION_MEDIATOR,this);
  generalManager.getEventPublisher().addReceiver(EMediatorType.SELECTION_MEDIATOR,this);
  bIsLocal=true;
  float fInitZoom=-10f;
  Rotf t=new Rotf();
  t.set(new Vec3f(-1,0,0),(float)(Math.PI / 4.0 - 2.0 * Math.PI * (-(fInitZoom + 3)) / 360.0));
  this.getViewCamera().setCameraRotation(t);
  this.getViewCamera().addCameraPosition(new Vec3f(0,0,fInitZoom));
  init(gl);
{
    MouseListener[] ml=parentGLCanvas.getMouseListeners();
    for (    MouseListener l : ml) {
      if (l instanceof JoglMouseListener)       ((JoglMouseListener)l).setNavigationModes(false,false,false);
    }
  }
  if (mouseListener_ != null) {
    parentGLCanvas.addMouseListener(mouseListener_);
    mouseListener_.setNavigationModes(true,false,true);
  }
  if (iViewRole != 2 && mouseListener_ != null) {
    parentGLCanvas.addMouseMotionListener(mouseListener_);
    parentGLCanvas.addMouseWheelListener(mouseListener_);
    parentGLCanvas.addKeyListener(keyListener_);
  }
  grid_.setGlyphPositions(EIconIDs.DISPLAY_RECTANGLE);
  if (this.iViewRole == 2)   grid_.setGlyphPositions(EIconIDs.DISPLAY_CIRCLE);
}",0.9229422066549912
58944,"/** 
 * Render a curved (nice looking) connection line from given start point to given end point
 * @param gl
 * @param startpoint
 * @param endpoint
 */
private void renderSelectedDomain(GL gl,Vec3f startpoint1,Vec3f endpoint1,Vec3f startpoint2,Vec3f endpoint2){
  float fthickness=(endpoint1.x() - startpoint1.x()) / 4;
  float fScalFactor1, fScalFactor2;
  if (endpoint1.y() - startpoint1.y() < 0.2f)   fScalFactor1=(endpoint1.y() - startpoint1.y()) * 5f;
 else   fScalFactor1=1;
  if (startpoint2.y() - endpoint2.y() < 0.2f)   fScalFactor2=(startpoint2.y() - endpoint2.y()) * 5f;
 else   fScalFactor2=1;
  gl.glColor4f(0f,0f,0f,0.45f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(startpoint1.x(),startpoint1.y(),startpoint1.z());
  gl.glVertex3f(startpoint1.x() + 2 * fthickness,startpoint1.y(),startpoint1.z());
  gl.glVertex3f(startpoint2.x() + 2 * fthickness,startpoint2.y(),startpoint2.z());
  gl.glVertex3f(startpoint2.x(),startpoint2.y(),startpoint2.z());
  gl.glEnd();
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(endpoint1.x(),endpoint1.y(),endpoint1.z());
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y(),endpoint1.z());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y(),endpoint2.z());
  gl.glVertex3f(endpoint2.x(),endpoint2.y(),endpoint2.z());
  gl.glEnd();
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glVertex3f(endpoint1.x() - 2 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glVertex3f(endpoint2.x() - 2 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glColor4f(1,1,1,0.45f);
  Texture TextureMask=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_MASK_CURVE);
  TextureMask.enable();
  TextureMask.bind();
  TextureCoords texCoordsMask=TextureMask.getImageTexCoords();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.top());
  gl.glVertex3f(startpoint1.x() + 2 * fthickness,startpoint1.y(),startpoint1.z());
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint1.x() + 1 * fthickness,startpoint1.y(),startpoint1.z());
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint1.x() + 1 * fthickness,startpoint1.y() + 0.1f * fScalFactor1,startpoint1.z());
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.top());
  gl.glVertex3f(startpoint1.x() + 2 * fthickness,startpoint1.y() + 0.1f * fScalFactor1,startpoint1.z());
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.top());
  gl.glVertex3f(startpoint2.x() + 2 * fthickness,startpoint2.y(),startpoint2.z());
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint2.x() + 1 * fthickness,startpoint2.y(),startpoint2.z());
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint2.x() + 1 * fthickness,startpoint2.y() - 0.1f * fScalFactor2,startpoint2.z());
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.top());
  gl.glVertex3f(startpoint2.x() + 2 * fthickness,startpoint2.y() - 0.1f * fScalFactor2,startpoint2.z());
  gl.glEnd();
  TextureMask.disable();
  Texture TextureMaskNeg=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_MASK_CURVE_NEG);
  TextureMaskNeg.enable();
  TextureMaskNeg.bind();
  TextureCoords texCoordsMaskNeg=TextureMaskNeg.getImageTexCoords();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint1.x() - 2 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y(),endpoint1.z());
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint1.x() - 2 * fthickness,endpoint1.y(),endpoint1.z());
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint2.x() - 2 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y(),endpoint2.z());
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint2.x() - 2 * fthickness,endpoint2.y(),endpoint2.z());
  gl.glEnd();
  TextureMaskNeg.disable();
  gl.glPopAttrib();
}","/** 
 * Render a curved (nice looking) connection line from given start point to given end point
 * @param gl
 * @param startpoint
 * @param endpoint
 */
private void renderSelectedDomain(GL gl,Vec3f startpoint1,Vec3f endpoint1,Vec3f startpoint2,Vec3f endpoint2){
  float fthickness=(endpoint1.x() - startpoint1.x()) / 4;
  float fScalFactor1, fScalFactor2;
  if (endpoint1.y() - startpoint1.y() < 0.2f)   fScalFactor1=(endpoint1.y() - startpoint1.y()) * 5f;
 else   fScalFactor1=1;
  if (startpoint2.y() - endpoint2.y() < 0.2f)   fScalFactor2=(startpoint2.y() - endpoint2.y()) * 5f;
 else   fScalFactor2=1;
  gl.glColor4f(0.5f,0.5f,0.5f,1f);
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(startpoint1.x(),startpoint1.y(),startpoint1.z());
  gl.glVertex3f(startpoint1.x() + 2 * fthickness,startpoint1.y(),startpoint1.z());
  gl.glVertex3f(startpoint2.x() + 2 * fthickness,startpoint2.y(),startpoint2.z());
  gl.glVertex3f(startpoint2.x(),startpoint2.y(),startpoint2.z());
  gl.glEnd();
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(endpoint1.x(),endpoint1.y(),endpoint1.z());
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y(),endpoint1.z());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y(),endpoint2.z());
  gl.glVertex3f(endpoint2.x(),endpoint2.y(),endpoint2.z());
  gl.glEnd();
  gl.glBegin(GL.GL_QUADS);
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glVertex3f(endpoint1.x() - 2 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glVertex3f(endpoint2.x() - 2 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glEnd();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glColor4f(1,1,1,1);
  Texture TextureMask=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_MASK_CURVE);
  TextureMask.enable();
  TextureMask.bind();
  TextureCoords texCoordsMask=TextureMask.getImageTexCoords();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.top());
  gl.glVertex3f(startpoint1.x() + 2 * fthickness,startpoint1.y(),startpoint1.z());
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.top());
  gl.glVertex3f(startpoint1.x() + 1 * fthickness,startpoint1.y(),startpoint1.z());
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint1.x() + 1 * fthickness,startpoint1.y() + 0.1f * fScalFactor1,startpoint1.z());
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint1.x() + 2 * fthickness,startpoint1.y() + 0.1f * fScalFactor1,startpoint1.z());
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.top());
  gl.glVertex3f(startpoint2.x() + 2 * fthickness,startpoint2.y(),startpoint2.z());
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.top());
  gl.glVertex3f(startpoint2.x() + 1 * fthickness,startpoint2.y(),startpoint2.z());
  gl.glTexCoord2f(texCoordsMask.left(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint2.x() + 1 * fthickness,startpoint2.y() - 0.1f * fScalFactor2,startpoint2.z());
  gl.glTexCoord2f(texCoordsMask.right(),texCoordsMask.bottom());
  gl.glVertex3f(startpoint2.x() + 2 * fthickness,startpoint2.y() - 0.1f * fScalFactor2,startpoint2.z());
  gl.glEnd();
  TextureMask.disable();
  Texture TextureMaskNeg=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_MASK_CURVE_NEG);
  TextureMaskNeg.enable();
  TextureMaskNeg.bind();
  TextureCoords texCoordsMaskNeg=TextureMaskNeg.getImageTexCoords();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint1.x() - 2 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y() - 0.1f * fScalFactor1,endpoint1.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint1.x() - 1 * fthickness,endpoint1.y(),endpoint1.z());
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint1.x() - 2 * fthickness,endpoint1.y(),endpoint1.z());
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint2.x() - 2 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.bottom());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y() + 0.1f * fScalFactor2,endpoint2.z());
  gl.glTexCoord2f(texCoordsMaskNeg.right(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint2.x() - 1 * fthickness,endpoint2.y(),endpoint2.z());
  gl.glTexCoord2f(texCoordsMaskNeg.left(),texCoordsMaskNeg.top());
  gl.glVertex3f(endpoint2.x() - 2 * fthickness,endpoint2.y(),endpoint2.z());
  gl.glEnd();
  TextureMaskNeg.disable();
  gl.glPopAttrib();
}",0.9301488957729588
58945,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_TEXTURE_CURSOR:
switch (pickingMode) {
case CLICKED:
      if (iExternalID == 1) {
        iSelectorBar--;
        initPosCursor();
        triggerSelectionBlock();
        setDisplayListDirty();
      }
    if (iExternalID == 2) {
      iSelectorBar++;
      initPosCursor();
      triggerSelectionBlock();
      setDisplayListDirty();
    }
  setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_CURSOR:
switch (pickingMode) {
case CLICKED:
bRenderCaption=true;
setDisplayListDirty();
break;
case DRAGGED:
bRenderCaption=true;
bIsDraggingActive=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
bRenderCaption=true;
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
iSelectorBar=iExternalID;
if (iSelectorBar == iNrSelBar) iSelectorBar--;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
iSelectorBar=iExternalID;
if (iSelectorBar == iNrSelBar) iSelectorBar--;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=false;
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
break;
case CLICKED:
bIsHeatmapInFocus=true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.HIER_HEAT_MAP_VIEW_SELECTION);
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_TEXTURE_CURSOR:
switch (pickingMode) {
case CLICKED:
      if (iExternalID == 1) {
        iSelectorBar--;
        initPosCursor();
        triggerSelectionBlock();
        setDisplayListDirty();
      }
    if (iExternalID == 2) {
      iSelectorBar++;
      initPosCursor();
      triggerSelectionBlock();
      setDisplayListDirty();
    }
  setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_CURSOR:
switch (pickingMode) {
case CLICKED:
setDisplayListDirty();
break;
case DRAGGED:
bIsDraggingActive=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
iSelectorBar=iExternalID;
if (iSelectorBar == iNrSelBar) iSelectorBar--;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
iSelectorBar=iExternalID;
if (iSelectorBar == iNrSelBar) iSelectorBar--;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=false;
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
break;
case CLICKED:
bIsHeatmapInFocus=true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.HIER_HEAT_MAP_VIEW_SELECTION);
break;
}
}",0.9855405095249024
58946,"@Override public RemoteLevel initFocusLevel(){
  Transform transform=new Transform();
  transform.setTranslation(new Vec3f(-2,-2,4 * fZoomFactor));
  transform.setScale(new Vec3f(fScalingFactorFocusLevel,fScalingFactorFocusLevel,fScalingFactorFocusLevel));
  focusLevel.getElementByPositionIndex(0).setTransform(transform);
  return focusLevel;
}","@Override public RemoteLevel initFocusLevel(){
  Transform transform=new Transform();
  transform.setTranslation(new Vec3f(-2 + fInputDeviceXCorrection,-2,4 * fZoomFactor));
  transform.setScale(new Vec3f(fScalingFactorFocusLevel,fScalingFactorFocusLevel,fScalingFactorFocusLevel));
  focusLevel.getElementByPositionIndex(0).setTransform(transform);
  return focusLevel;
}",0.9637883008356546
58947,"@Override public RemoteLevel initStackLevel(boolean bIsZoomedIn){
  Transform transform;
  if (!bIsZoomedIn) {
    float fTiltAngleRad_Horizontal;
    float fTiltAngleRad_Vertical;
    fTiltAngleRad_Horizontal=(float)Math.acos(((4 * 1 / fAspectRatio - 4 - 2 * fPoolLayerWidth) / 2) / ((float)Math.sqrt(Math.pow(4 * (1 - fZoomFactor),2) + Math.pow(((4 * 1 / fAspectRatio - 4 - 2 * fPoolLayerWidth) / 2),2))));
    fTiltAngleRad_Vertical=Vec3f.convertGrad2Radiant(90);
    float fScalingCorrection=((float)Math.sqrt(Math.pow(4 * (1 - fZoomFactor),2) + Math.pow(((4 * 1 / fAspectRatio - 4 - 2 * fPoolLayerWidth) / 2),2))) / 4f;
    transform=new Transform();
    transform.setTranslation(new Vec3f(-2,2 - 4f * (float)Math.cos(fTiltAngleRad_Vertical) * fScalingCorrection,4 - 4 * (float)Math.sin(fTiltAngleRad_Vertical) * (1 - fZoomFactor)));
    transform.setScale(new Vec3f(fScalingFactorStackLevel,fScalingFactorStackLevel * (1 - fZoomFactor),fScalingFactorStackLevel * (1 - fZoomFactor)));
    transform.setRotation(new Rotf(new Vec3f(1,0,0),fTiltAngleRad_Vertical));
    stackLevel.getElementByPositionIndex(0).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(fPoolLayerWidth - 2 * 1 / fAspectRatio,-2,4));
    transform.setScale(new Vec3f(fScalingFactorStackLevel * fScalingCorrection,fScalingFactorStackLevel,fScalingFactorStackLevel * fScalingCorrection));
    transform.setRotation(new Rotf(new Vec3f(0,1,0),fTiltAngleRad_Horizontal));
    stackLevel.getElementByPositionIndex(1).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(-2,-2,4));
    transform.setScale(new Vec3f(fScalingFactorStackLevel,fScalingFactorStackLevel * (1 - fZoomFactor),fScalingFactorStackLevel * (1 - fZoomFactor)));
    transform.setRotation(new Rotf(new Vec3f(-1,0,0),fTiltAngleRad_Vertical));
    stackLevel.getElementByPositionIndex(2).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(-fPoolLayerWidth + 2 * 1 / fAspectRatio - 4f * (float)Math.cos(fTiltAngleRad_Horizontal) * fScalingCorrection,-2,4 - 4 * (float)Math.sin(fTiltAngleRad_Horizontal) * fScalingCorrection));
    transform.setScale(new Vec3f(fScalingFactorStackLevel * fScalingCorrection,fScalingFactorStackLevel,fScalingFactorStackLevel * fScalingCorrection));
    transform.setRotation(new Rotf(new Vec3f(0,-1f,0),fTiltAngleRad_Horizontal));
    stackLevel.getElementByPositionIndex(3).setTransform(transform);
  }
 else {
    float fScalingFactorZoomedIn=0.4f;
    transform=new Transform();
    transform.setTranslation(new Vec3f(-7.25f,0.8f,-4f));
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(0).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(4.05f,0.8f,-4f));
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(1).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(-7.25f,-4,-4f));
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(2).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(4.05f,-4,-4f));
    ;
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(3).setTransform(transform);
  }
  return stackLevel;
}","@Override public RemoteLevel initStackLevel(boolean bIsZoomedIn){
  Transform transform;
  if (!bIsZoomedIn) {
    float fTiltAngleRad_Horizontal;
    float fTiltAngleRad_Vertical;
    fTiltAngleRad_Horizontal=(float)Math.acos(((4 * 1 / fAspectRatio - 4 - 2 * fPoolLayerWidth) / 2) / ((float)Math.sqrt(Math.pow(4 * (1 - fZoomFactor),2) + Math.pow(((4 * 1 / fAspectRatio - 4 - 2 * fPoolLayerWidth) / 2),2))));
    fTiltAngleRad_Vertical=Vec3f.convertGrad2Radiant(90);
    float fScalingCorrection=((float)Math.sqrt(Math.pow(4 * (1 - fZoomFactor),2) + Math.pow(((4 * 1 / fAspectRatio - 4 - 2 * fPoolLayerWidth) / 2),2))) / 4f;
    fInputDeviceXCorrection=0;
    transform=new Transform();
    transform.setTranslation(new Vec3f(-2 + fInputDeviceXCorrection,2 - 4f * (float)Math.cos(fTiltAngleRad_Vertical) * fScalingCorrection,4 - 4 * (float)Math.sin(fTiltAngleRad_Vertical) * (1 - fZoomFactor)));
    transform.setScale(new Vec3f(fScalingFactorStackLevel,fScalingFactorStackLevel * (1 - fZoomFactor),fScalingFactorStackLevel * (1 - fZoomFactor)));
    transform.setRotation(new Rotf(new Vec3f(1,0,0),fTiltAngleRad_Vertical));
    stackLevel.getElementByPositionIndex(0).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(fPoolLayerWidth - 2 * 1 / fAspectRatio,-2,4));
    transform.setScale(new Vec3f(fScalingFactorStackLevel * fScalingCorrection,fScalingFactorStackLevel,fScalingFactorStackLevel * fScalingCorrection));
    transform.setRotation(new Rotf(new Vec3f(0,1,0),fTiltAngleRad_Horizontal));
    stackLevel.getElementByPositionIndex(1).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(-2 + fInputDeviceXCorrection,-2,4));
    transform.setScale(new Vec3f(fScalingFactorStackLevel,fScalingFactorStackLevel * (1 - fZoomFactor),fScalingFactorStackLevel * (1 - fZoomFactor)));
    transform.setRotation(new Rotf(new Vec3f(-1,0,0),fTiltAngleRad_Vertical));
    stackLevel.getElementByPositionIndex(2).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(-fPoolLayerWidth + 2 * 1 / fAspectRatio - 4f * (float)Math.cos(fTiltAngleRad_Horizontal) * fScalingCorrection,-2,4 - 4 * (float)Math.sin(fTiltAngleRad_Horizontal) * fScalingCorrection));
    transform.setScale(new Vec3f(fScalingFactorStackLevel * fScalingCorrection,fScalingFactorStackLevel,fScalingFactorStackLevel * fScalingCorrection));
    transform.setRotation(new Rotf(new Vec3f(0,-1f,0),fTiltAngleRad_Horizontal));
    stackLevel.getElementByPositionIndex(3).setTransform(transform);
  }
 else {
    float fScalingFactorZoomedIn=0.4f;
    transform=new Transform();
    transform.setTranslation(new Vec3f(-7.25f,0.8f,-4f));
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(0).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(4.05f,0.8f,-4f));
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(1).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(-7.25f,-4,-4f));
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(2).setTransform(transform);
    transform=new Transform();
    transform.setTranslation(new Vec3f(4.05f,-4,-4f));
    ;
    transform.setScale(new Vec3f(fScalingFactorZoomedIn,fScalingFactorZoomedIn,fScalingFactorZoomedIn));
    transform.setRotation(new Rotf(new Vec3f(0,0,0),0));
    stackLevel.getElementByPositionIndex(3).setTransform(transform);
  }
  return stackLevel;
}",0.989346682069054
58948,"/** 
 * This method has to be called in every display step. It is responsible for the picking. It needs the ID of the calling view and a gl context.
 * @param iViewID the id of the calling view
 * @param gl the GL context
 * @param bIsMaster TODO remove after some testing - not needed at themoment. remove deprecated when done
 */
@Deprecated public void handlePicking(final int iViewID,final GL gl,final boolean bIsMaster){
  if (bEnablePicking == false)   return;
  AGLEventListener canvasUser=(GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iViewID));
  PickingJoglMouseListener pickingTriggerMouseAdapter=canvasUser.getParentGLCanvas().getJoglMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasMouseDoubleClicked()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DOUBLE_CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasLeftMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    hashViewIDToIsMouseOverPickingEvent.put(iViewID,true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(iViewID) != null && hashViewIDToLastMouseMovedTimeStamp.get(iViewID) != null && hashViewIDToIsMouseOverPickingEvent.get(iViewID) == true && System.nanoTime() - hashViewIDToLastMouseMovedTimeStamp.get(iViewID) >= 0) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    hashViewIDToLastMouseMovedTimeStamp.put(iViewID,System.nanoTime());
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null) {
    return;
  }
  hashViewIDToIsMouseOverPickingEvent.put(iViewID,false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=canvasUser.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  canvasUser.display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,iViewID,ePickingMode,bIsMaster,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}","/** 
 * This method has to be called in every display step. It is responsible for the picking. It needs the ID of the calling view and a gl context.
 * @param iViewID the id of the calling view
 * @param gl the GL context
 * @param bIsMaster TODO remove after some testing - not needed at themoment. remove deprecated when done
 */
@Deprecated public void handlePicking(final int iViewID,final GL gl,final boolean bIsMaster){
  if (bEnablePicking == false)   return;
  AGLEventListener canvasUser=(GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iViewID));
  PickingJoglMouseListener pickingTriggerMouseAdapter=canvasUser.getParentGLCanvas().getJoglMouseListener();
  Point pickPoint=null;
  EPickingMode ePickingMode=EPickingMode.CLICKED;
  if (pickingTriggerMouseAdapter.wasMouseDoubleClicked()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DOUBLE_CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasLeftMouseButtonPressed()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.CLICKED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseDragged()) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.DRAGGED;
  }
 else   if (pickingTriggerMouseAdapter.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(iViewID,true);
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(iViewID) != null && hashViewIDToIsMouseOverPickingEvent.get(iViewID) == true) {
    pickPoint=pickingTriggerMouseAdapter.getPickedPoint();
    ePickingMode=EPickingMode.MOUSE_OVER;
  }
  if (pickPoint == null) {
    return;
  }
  hashViewIDToIsMouseOverPickingEvent.put(iViewID,false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=BufferUtil.newIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  IViewFrustum viewFrustum=canvasUser.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  gl.glMatrixMode(GL.GL_MODELVIEW);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  canvasUser.display(gl);
  gl.glMatrixMode(GL.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,iViewID,ePickingMode,bIsMaster,tmpPickPoint,pickingTriggerMouseAdapter.getPickedPointDragStart());
  }
}",0.9281294621608758
58949,"/** 
 * Constructor
 */
public PickingManager(){
  hashSignatureToHitList=new HashMap<Integer,ArrayList<Pick>>();
  hashSignatureToPickingIDHashMap=new HashMap<Integer,HashMap<Integer,Integer>>();
  hashSignatureToExternalIDHashMap=new HashMap<Integer,HashMap<Integer,Integer>>();
  hashViewIDToLastMouseMovedTimeStamp=new HashMap<Integer,Long>();
  hashViewIDToIsMouseOverPickingEvent=new HashMap<Integer,Boolean>();
}","/** 
 * Constructor
 */
public PickingManager(){
  hashSignatureToHitList=new HashMap<Integer,ArrayList<Pick>>();
  hashSignatureToPickingIDHashMap=new HashMap<Integer,HashMap<Integer,Integer>>();
  hashSignatureToExternalIDHashMap=new HashMap<Integer,HashMap<Integer,Integer>>();
  hashViewIDToIsMouseOverPickingEvent=new HashMap<Integer,Boolean>();
}",0.913099870298314
58950,"@Override public void initLocal(final GL gl){
  init(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public void initLocal(final GL gl){
  init(gl);
}",0.7283950617283951
58951,"@Override public synchronized void displayLocal(final GL gl){
  pickingManager.handlePicking(iUniqueID,gl,false);
  if (bIsDisplayListDirtyLocal) {
    bIsDisplayListDirtyLocal=false;
  }
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(final GL gl){
  pickingManager.handlePicking(iUniqueID,gl,false);
  if (bIsDisplayListDirtyLocal) {
    bIsDisplayListDirtyLocal=false;
  }
  display(gl);
}",0.9026548672566372
58952,"@Override public synchronized void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  checkForHits(gl);
}",0.8666666666666667
58953,"@Override public void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  checkForHits(gl);
}",0.8552631578947368
58954,"@Override public void initLocal(final GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public void initLocal(final GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}",0.8742857142857143
58955,"@Override public synchronized void displayLocal(final GL gl){
  pickingManager.handlePicking(iUniqueID,gl,false);
  if (bIsDisplayListDirtyLocal) {
    rebuildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(final GL gl){
  pickingManager.handlePicking(iUniqueID,gl,false);
  if (bIsDisplayListDirtyLocal) {
    rebuildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
}",0.9329268292682928
58956,"@Override public void initLocal(final GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public void initLocal(final GL gl){
  iGLDisplayListIndexLocal=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  init(gl);
}",0.8742857142857143
58957,"@Override public synchronized void displayLocal(final GL gl){
  if (!generalManager.getPathwayManager().hasItem(iPathwayID))   return;
  pickingManager.handlePicking(iUniqueID,gl,false);
  if (bIsDisplayListDirtyLocal) {
    rebuildPathwayDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(final GL gl){
  if (!generalManager.getPathwayManager().hasItem(iPathwayID))   return;
  pickingManager.handlePicking(iUniqueID,gl,false);
  if (bIsDisplayListDirtyLocal) {
    rebuildPathwayDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
}",0.946078431372549
58958,"@Override public void enableBusyMode(boolean busyMode){
  super.enableBusyMode(busyMode);
  if (eBusyModeState == EBusyModeState.ON) {
    parentGLCanvas.removeMouseWheelListener(bucketMouseWheelListener);
  }
 else {
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
  }
}","@Override public void enableBusyMode(boolean busyMode){
  super.enableBusyMode(busyMode);
  if (eBusyModeState == EBusyModeState.ON) {
    parentGLCanvas.removeMouseListener(bucketMouseWheelListener);
    parentGLCanvas.removeMouseWheelListener(bucketMouseWheelListener);
  }
 else {
    parentGLCanvas.addMouseListener(bucketMouseWheelListener);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
  }
}",0.7623066104078763
58959,"public synchronized void toggleLayoutMode(){
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET))   layoutMode=ARemoteViewLayoutRenderStyle.LayoutMode.LIST;
 else   layoutMode=ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET;
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    layoutRenderStyle=new BucketLayoutRenderStyle(viewFrustum,layoutRenderStyle);
    bucketMouseWheelListener=new BucketMouseWheelListener(this,(BucketLayoutRenderStyle)layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(pickingTriggerMouseAdapter);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
    glConnectionLineRenderer=new GLConnectionLineRendererBucket(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    layoutRenderStyle=new JukeboxLayoutRenderStyle(viewFrustum,layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(bucketMouseWheelListener);
    parentGLCanvas.addMouseWheelListener(pickingTriggerMouseAdapter);
    glConnectionLineRenderer=new GLConnectionLineRendererJukebox(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.LIST)) {
    layoutRenderStyle=new ListLayoutRenderStyle(viewFrustum,layoutRenderStyle);
    glConnectionLineRenderer=null;
  }
  focusLevel=layoutRenderStyle.initFocusLevel();
  stackLevel=layoutRenderStyle.initStackLevel(bucketMouseWheelListener.isZoomedIn());
  poolLevel=layoutRenderStyle.initPoolLevel(bucketMouseWheelListener.isZoomedIn(),-1);
  selectionLevel=layoutRenderStyle.initMemoLevel();
  transitionLevel=layoutRenderStyle.initTransitionLevel();
  spawnLevel=layoutRenderStyle.initSpawnLevel();
  viewFrustum.setProjectionMode(layoutRenderStyle.getProjectionMode());
  parentGLCanvas.setSize(parentGLCanvas.getWidth(),parentGLCanvas.getHeight());
}","public synchronized void toggleLayoutMode(){
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET))   layoutMode=ARemoteViewLayoutRenderStyle.LayoutMode.LIST;
 else   layoutMode=ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET;
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    layoutRenderStyle=new BucketLayoutRenderStyle(viewFrustum,layoutRenderStyle);
    bucketMouseWheelListener=new BucketMouseWheelListener(this,(BucketLayoutRenderStyle)layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(pickingTriggerMouseAdapter);
    parentGLCanvas.removeMouseListener(pickingTriggerMouseAdapter);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
    parentGLCanvas.addMouseListener(bucketMouseWheelListener);
    glConnectionLineRenderer=new GLConnectionLineRendererBucket(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    layoutRenderStyle=new JukeboxLayoutRenderStyle(viewFrustum,layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(bucketMouseWheelListener);
    parentGLCanvas.addMouseWheelListener(pickingTriggerMouseAdapter);
    glConnectionLineRenderer=new GLConnectionLineRendererJukebox(focusLevel,stackLevel,poolLevel);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.LIST)) {
    layoutRenderStyle=new ListLayoutRenderStyle(viewFrustum,layoutRenderStyle);
    glConnectionLineRenderer=null;
  }
  focusLevel=layoutRenderStyle.initFocusLevel();
  stackLevel=layoutRenderStyle.initStackLevel(bucketMouseWheelListener.isZoomedIn());
  poolLevel=layoutRenderStyle.initPoolLevel(bucketMouseWheelListener.isZoomedIn(),-1);
  selectionLevel=layoutRenderStyle.initMemoLevel();
  transitionLevel=layoutRenderStyle.initTransitionLevel();
  spawnLevel=layoutRenderStyle.initSpawnLevel();
  viewFrustum.setProjectionMode(layoutRenderStyle.getProjectionMode());
  parentGLCanvas.setSize(parentGLCanvas.getWidth(),parentGLCanvas.getHeight());
}",0.9665731053840264
58960,"@Override public synchronized void displayLocal(final GL gl){
  if ((pickingTriggerMouseAdapter.wasRightMouseButtonPressed() && !bucketMouseWheelListener.isZoomedIn()) && !(layoutRenderStyle instanceof ListLayoutRenderStyle)) {
    bEnableNavigationOverlay=!bEnableNavigationOverlay;
    if (glConnectionLineRenderer != null)     glConnectionLineRenderer.enableRendering(!bEnableNavigationOverlay);
  }
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
  if (pickingTriggerMouseAdapter.getPickedPoint() != null)   dragAndDrop.setCurrentMousePos(gl,pickingTriggerMouseAdapter.getPickedPoint());
  if (dragAndDrop.isDragActionRunning()) {
    dragAndDrop.renderDragThumbnailTexture(gl);
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased() && dragAndDrop.isDragActionRunning()) {
    int iDraggedObjectId=dragAndDrop.getDraggedObjectedId();
    if (!RemoteElementManager.get().hasItem(iMouseOverObjectID) || !selectionLevel.containsElement(RemoteElementManager.get().getItem(iMouseOverObjectID))) {
      RemoteLevelElement mouseOverElement=null;
      if (iMouseOverObjectID == iPoolLevelCommonID) {
        mouseOverElement=poolLevel.getNextFree();
      }
 else       if (mouseOverElement == null && iMouseOverObjectID != iDraggedObjectId) {
        mouseOverElement=RemoteElementManager.get().getItem(iMouseOverObjectID);
      }
      if (mouseOverElement != null) {
        RemoteLevelElement originElement=RemoteElementManager.get().getItem(iDraggedObjectId);
        int iMouseOverElementID=mouseOverElement.getContainedElementID();
        int iOriginElementID=originElement.getContainedElementID();
        mouseOverElement.setContainedElementID(iOriginElementID);
        originElement.setContainedElementID(iMouseOverElementID);
        IViewManager viewGLCanvasManager=generalManager.getViewGLCanvasManager();
        AGLEventListener originView=viewGLCanvasManager.getGLEventListener(iOriginElementID);
        if (originView != null)         originView.setRemoteLevelElement(mouseOverElement);
        AGLEventListener mouseOverView=viewGLCanvasManager.getGLEventListener(iMouseOverElementID);
        if (mouseOverView != null)         mouseOverView.setRemoteLevelElement(originElement);
        updateViewDetailLevels(originElement);
        updateViewDetailLevels(mouseOverElement);
        if (mouseOverElement.getContainedElementID() != -1) {
          if (poolLevel.containsElement(originElement) && (stackLevel.containsElement(mouseOverElement) || focusLevel.containsElement(mouseOverElement))) {
            generalManager.getViewGLCanvasManager().getGLEventListener(mouseOverElement.getContainedElementID()).broadcastElements(EVAOperation.APPEND_UNIQUE);
          }
          if (poolLevel.containsElement(mouseOverElement) && (stackLevel.containsElement(originElement) || focusLevel.containsElement(originElement))) {
            generalManager.getViewGLCanvasManager().getGLEventListener(mouseOverElement.getContainedElementID()).broadcastElements(EVAOperation.REMOVE_ELEMENT);
          }
        }
      }
    }
    dragAndDrop.stopDragAction();
    bUpdateOffScreenTextures=true;
  }
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(final GL gl){
  if ((pickingTriggerMouseAdapter.wasRightMouseButtonPressed() && !bucketMouseWheelListener.isZoomedIn()) && !(layoutRenderStyle instanceof ListLayoutRenderStyle)) {
    bEnableNavigationOverlay=!bEnableNavigationOverlay;
    if (glConnectionLineRenderer != null)     glConnectionLineRenderer.enableRendering(!bEnableNavigationOverlay);
  }
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
  if (pickingTriggerMouseAdapter.getPickedPoint() != null)   dragAndDrop.setCurrentMousePos(gl,pickingTriggerMouseAdapter.getPickedPoint());
  if (dragAndDrop.isDragActionRunning()) {
    dragAndDrop.renderDragThumbnailTexture(gl);
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased() && dragAndDrop.isDragActionRunning()) {
    int iDraggedObjectId=dragAndDrop.getDraggedObjectedId();
    if (!RemoteElementManager.get().hasItem(iMouseOverObjectID) || !selectionLevel.containsElement(RemoteElementManager.get().getItem(iMouseOverObjectID))) {
      RemoteLevelElement mouseOverElement=null;
      if (iMouseOverObjectID == iPoolLevelCommonID) {
        mouseOverElement=poolLevel.getNextFree();
      }
 else       if (mouseOverElement == null && iMouseOverObjectID != iDraggedObjectId) {
        mouseOverElement=RemoteElementManager.get().getItem(iMouseOverObjectID);
      }
      if (mouseOverElement != null) {
        RemoteLevelElement originElement=RemoteElementManager.get().getItem(iDraggedObjectId);
        int iMouseOverElementID=mouseOverElement.getContainedElementID();
        int iOriginElementID=originElement.getContainedElementID();
        mouseOverElement.setContainedElementID(iOriginElementID);
        originElement.setContainedElementID(iMouseOverElementID);
        IViewManager viewGLCanvasManager=generalManager.getViewGLCanvasManager();
        AGLEventListener originView=viewGLCanvasManager.getGLEventListener(iOriginElementID);
        if (originView != null)         originView.setRemoteLevelElement(mouseOverElement);
        AGLEventListener mouseOverView=viewGLCanvasManager.getGLEventListener(iMouseOverElementID);
        if (mouseOverView != null)         mouseOverView.setRemoteLevelElement(originElement);
        updateViewDetailLevels(originElement);
        updateViewDetailLevels(mouseOverElement);
        if (mouseOverElement.getContainedElementID() != -1) {
          if (poolLevel.containsElement(originElement) && (stackLevel.containsElement(mouseOverElement) || focusLevel.containsElement(mouseOverElement))) {
            generalManager.getViewGLCanvasManager().getGLEventListener(mouseOverElement.getContainedElementID()).broadcastElements(EVAOperation.APPEND_UNIQUE);
          }
          if (poolLevel.containsElement(mouseOverElement) && (stackLevel.containsElement(originElement) || focusLevel.containsElement(originElement))) {
            generalManager.getViewGLCanvasManager().getGLEventListener(mouseOverElement.getContainedElementID()).broadcastElements(EVAOperation.REMOVE_ELEMENT);
          }
        }
      }
    }
    dragAndDrop.stopDragAction();
    bUpdateOffScreenTextures=true;
  }
  checkForHits(gl);
}",0.99320987654321
58961,"@Override public void mouseEntered(MouseEvent e){
  if (bucketGLEventListener == null)   return;
  bucketGLEventListener.getParentGLCanvas().getParentComposite().getDisplay().asyncExec(new Runnable(){
    public void run(){
      bucketGLEventListener.getParentGLCanvas().getParentComposite().setFocus();
      bucketGLEventListener.getParentGLCanvas().getParentComposite().forceFocus();
      bucketGLEventListener.getParentGLCanvas().getParentComposite().isFocusControl();
      bucketGLEventListener.getParentGLCanvas().getParentComposite().redraw();
    }
  }
);
  bucketGLEventListener.getParentGLCanvas().setVisible(true);
  bucketGLEventListener.getParentGLCanvas().setFocusable(true);
  bucketGLEventListener.getParentGLCanvas().requestFocusInWindow();
  bucketGLEventListener.getParentGLCanvas().requestFocus();
  bucketGLEventListener.getParentGLCanvas().getParent().setFocusable(true);
  bucketGLEventListener.getParentGLCanvas().getParent().requestFocus();
  bucketGLEventListener.getParentGLCanvas().getParent().requestFocusInWindow();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      bucketGLEventListener.getParentGLCanvas().requestFocusInWindow();
      bucketGLEventListener.getParentGLCanvas().requestFocus();
    }
  }
);
}","@Override public void mouseEntered(MouseEvent e){
  grabFocus();
}",0.0967982129560685
58962,"public void render(){
  if (!bZoomActionRunning)   return;
  if (iAnimationZoomCounter == 0 || iCurrentBucketZoom % (int)fBuketZoomMax != 0) {
    if (bZoomIn) {
      iCurrentBucketZoom+=BUCKET_ZOOM_STEP;
      iAnimationZoomCounter+=BUCKET_ZOOM_STEP;
      bucketGLEventListener.getViewCamera().addCameraScale(new Vec3f(0,0,BUCKET_ZOOM_STEP / 100f));
    }
 else {
      iCurrentBucketZoom-=BUCKET_ZOOM_STEP;
      iAnimationZoomCounter-=BUCKET_ZOOM_STEP;
      bucketGLEventListener.getViewCamera().addCameraScale(new Vec3f(0,0,-BUCKET_ZOOM_STEP / 100f));
    }
    if (iCurrentBucketZoom >= fBuketZoomMax) {
      bBucketBottomReached=true;
      int iGLEventListenerID=bucketGLEventListener.getFocusLevel().getElementByPositionIndex(0).getContainedElementID();
      if (iGLEventListenerID != -1) {
        GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iGLEventListenerID).setDetailLevel(EDetailLevel.HIGH);
      }
    }
 else     if (iCurrentBucketZoom == 0) {
      bBucketBottomReached=false;
      int iGLEventListenerID=bucketGLEventListener.getFocusLevel().getElementByPositionIndex(0).getContainedElementID();
      if (iGLEventListenerID != -1) {
        GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iGLEventListenerID).setDetailLevel(EDetailLevel.MEDIUM);
      }
    }
  }
 else {
    iAnimationZoomCounter=0;
    bZoomActionRunning=false;
    GeneralManager.get().getViewGLCanvasManager().getPickingManager().enablePicking(true);
  }
}","public void render(){
  grabFocus();
  if (!bZoomActionRunning)   return;
  if (iAnimationZoomCounter == 0 || iCurrentBucketZoom % (int)fBuketZoomMax != 0) {
    if (bZoomIn) {
      iCurrentBucketZoom+=BUCKET_ZOOM_STEP;
      iAnimationZoomCounter+=BUCKET_ZOOM_STEP;
      bucketGLEventListener.getViewCamera().addCameraScale(new Vec3f(0,0,BUCKET_ZOOM_STEP / 100f));
    }
 else {
      iCurrentBucketZoom-=BUCKET_ZOOM_STEP;
      iAnimationZoomCounter-=BUCKET_ZOOM_STEP;
      bucketGLEventListener.getViewCamera().addCameraScale(new Vec3f(0,0,-BUCKET_ZOOM_STEP / 100f));
    }
    if (iCurrentBucketZoom >= fBuketZoomMax) {
      bBucketBottomReached=true;
      int iGLEventListenerID=bucketGLEventListener.getFocusLevel().getElementByPositionIndex(0).getContainedElementID();
      if (iGLEventListenerID != -1) {
        GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iGLEventListenerID).setDetailLevel(EDetailLevel.HIGH);
      }
    }
 else     if (iCurrentBucketZoom == 0) {
      bBucketBottomReached=false;
      int iGLEventListenerID=bucketGLEventListener.getFocusLevel().getElementByPositionIndex(0).getContainedElementID();
      if (iGLEventListenerID != -1) {
        GeneralManager.get().getViewGLCanvasManager().getGLEventListener(iGLEventListenerID).setDetailLevel(EDetailLevel.MEDIUM);
      }
    }
  }
 else {
    iAnimationZoomCounter=0;
    bZoomActionRunning=false;
    GeneralManager.get().getViewGLCanvasManager().getPickingManager().enablePicking(true);
  }
}",0.994994994994995
58963,"@Override public void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public void displayLocal(GL gl){
  pickingManager.handlePicking(iUniqueID,gl,true);
  display(gl);
  checkForHits(gl);
}",0.8552631578947368
58964,"@Override public synchronized void displayLocal(GL gl){
  if (set == null)   return;
  if (bIsTranslationAnimationActive) {
    doTranslation();
  }
  pickingManager.handlePicking(iUniqueID,gl,true);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(GL gl){
  if (set == null)   return;
  if (bIsTranslationAnimationActive) {
    doTranslation();
  }
  pickingManager.handlePicking(iUniqueID,gl,true);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.9558232931726908
58965,"@Override public synchronized void displayLocal(GL gl){
  if (set == null)   return;
  pickingManager.handlePicking(iUniqueID,gl,true);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(GL gl){
  if (set == null)   return;
  pickingManager.handlePicking(iUniqueID,gl,true);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  checkForHits(gl);
}",0.9402173913043478
58966,"@Override public synchronized void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bWasAxisMoved=false;
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
}","@Override public synchronized void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
  }
  if (bWasAxisMoved) {
    adjustAxisSpacing(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bWasAxisMoved=false;
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
}",0.936267071320182
58967,"/** 
 * Renders the gates and updates their values
 * @param gl
 */
private void handleGateDragging(GL gl){
  Point currentPoint=pickingTriggerMouseAdapter.getPickedPoint();
  float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float height=fArTargetWorldCoordinates[1];
  Pair<Float,Float> gate=hashGates.get(iDraggedGateNumber).get(0);
  float fTop=gate.getSecond();
  float fBottom=gate.getFirst();
  if (bIsGateDraggingFirstTime) {
    fGateTopSpacing=fTop - height;
    fGateBottomSpacing=height - fBottom;
    bIsGateDraggingFirstTime=false;
  }
  float fTipUpperLimit=renderStyle.getAxisHeight();
  float fTipLowerLimit=fBottom + 2 * renderStyle.getGateTipHeight();
  float fBottomLowerLimit=renderStyle.getGateMinimumValue() - renderStyle.getGateTipHeight();
  float fBottomUpperLimit=fTop - 2 * renderStyle.getGateTipHeight();
  if (draggedObject == EPickingType.LOWER_GATE_TIP_SELECTION) {
    gate.setSecond(height);
  }
 else   if (draggedObject == EPickingType.LOWER_GATE_BOTTOM_SELECTION) {
    gate.setFirst(height);
  }
 else   if (draggedObject == EPickingType.LOWER_GATE_BODY_SELECTION) {
    gate.setSecond(height + fGateTopSpacing);
    gate.setFirst(height - fGateBottomSpacing);
  }
  if (fTop > fTipUpperLimit)   gate.setSecond(fTipUpperLimit);
  if (fTop < fTipLowerLimit)   gate.setSecond(fTipLowerLimit);
  if (fBottom > fBottomUpperLimit)   gate.setFirst(fBottomUpperLimit);
  if (fBottom < fBottomLowerLimit)   gate.setFirst(fBottomLowerLimit);
  bIsDisplayListDirtyLocal=true;
  bIsDisplayListDirtyRemote=true;
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsDraggingActive=false;
  }
}","/** 
 * Renders the gates and updates their values
 * @param gl
 */
private void handleGateDragging(GL gl){
  Point currentPoint=pickingTriggerMouseAdapter.getPickedPoint();
  float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float height=fArTargetWorldCoordinates[1];
  Pair<Float,Float> gate=hashGates.get(iDraggedGateNumber).get(0);
  float fTop=gate.getSecond();
  float fBottom=gate.getFirst();
  if (bIsGateDraggingFirstTime) {
    fGateTopSpacing=fTop - height;
    fGateBottomSpacing=height - fBottom;
    bIsGateDraggingFirstTime=false;
  }
  float fTipUpperLimit=renderStyle.getAxisHeight();
  float fTipLowerLimit=fBottom + 2 * renderStyle.getGateTipHeight();
  float fBottomLowerLimit=renderStyle.getGateMinimumValue() - renderStyle.getGateTipHeight();
  float fBottomUpperLimit=fTop - 2 * renderStyle.getGateTipHeight();
  if (draggedObject == EPickingType.LOWER_GATE_TIP_SELECTION) {
    gate.setSecond(height);
  }
 else   if (draggedObject == EPickingType.LOWER_GATE_BOTTOM_SELECTION) {
    gate.setFirst(height);
  }
 else   if (draggedObject == EPickingType.LOWER_GATE_BODY_SELECTION) {
    gate.setSecond(height + fGateTopSpacing);
    gate.setFirst(height - fGateBottomSpacing);
  }
  if (fTop > fTipUpperLimit)   gate.setSecond(fTipUpperLimit);
  if (fTop < fTipLowerLimit)   gate.setSecond(fTipLowerLimit);
  if (fBottom > fBottomUpperLimit)   gate.setFirst(fBottomUpperLimit);
  if (fBottom < fBottomLowerLimit)   gate.setFirst(fBottomLowerLimit);
  bIsDisplayListDirtyLocal=true;
  bIsDisplayListDirtyRemote=true;
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsDraggingActive=false;
    System.out.println(""String_Node_Str"");
  }
}",0.9875758451314648
58968,"private void handleAngularBrushing(final GL gl){
  if (bIsAngularBrushingFirstTime) {
    fCurrentAngle=fDefaultAngle;
    Point currentPoint=linePick.getPickedPoint();
    float[] fArPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
    vecAngularBrushingPoint=new Vec3f(fArPoint[0],fArPoint[1],0.01f);
    bIsAngularBrushingFirstTime=false;
  }
  alIsAngleBlocking.get(0).clear();
  int iPosition=0;
  for (int iCount=0; iCount < alAxisSpacing.size() - 1; iCount++) {
    if (vecAngularBrushingPoint.x() > alAxisSpacing.get(iCount) && vecAngularBrushingPoint.x() < alAxisSpacing.get(iCount + 1))     iPosition=iCount;
  }
  int iAxisLeftIndex;
  int iAxisRightIndex;
  iAxisLeftIndex=set.getVA(iAxisVAID).get(iPosition);
  iAxisRightIndex=set.getVA(iAxisVAID).get(iPosition + 1);
  Vec3f vecLeftPoint=new Vec3f(0,0,0);
  Vec3f vecRightPoint=new Vec3f(0,0,0);
  if (bRenderStorageHorizontally) {
    vecLeftPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
  }
 else {
    vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
  }
  vecLeftPoint.setX(alAxisSpacing.get(iPosition));
  vecRightPoint.setX(alAxisSpacing.get(iPosition + 1));
  Vec3f vecDirectional=vecRightPoint.minus(vecLeftPoint);
  float fLength=vecDirectional.length();
  vecDirectional.normalize();
  Vec3f vecTriangleOrigin=vecLeftPoint.addScaled(fLength / 4,vecDirectional);
  Vec3f vecTriangleLimit=vecLeftPoint.addScaled(fLength / 4 * 3,vecDirectional);
  Rotf rotf=new Rotf();
  Vec3f vecCenterLine=vecTriangleLimit.minus(vecTriangleOrigin);
  float fLegLength=vecCenterLine.length();
  if (bIsAngularDraggingActive) {
    Point pickedPoint=pickingTriggerMouseAdapter.getPickedPoint();
    float fArPoint[]=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
    Vec3f vecPickedPoint=new Vec3f(fArPoint[0],fArPoint[1],0.01f);
    Vec3f vecTempLine=vecPickedPoint.minus(vecTriangleOrigin);
    fCurrentAngle=getAngle(vecTempLine,vecCenterLine);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
  }
  rotf.set(new Vec3f(0,0,1),fCurrentAngle);
  Vec3f vecUpperPoint=rotf.rotateVector(vecCenterLine);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle);
  Vec3f vecLowerPoint=rotf.rotateVector(vecCenterLine);
  vecUpperPoint.add(vecTriangleOrigin);
  vecLowerPoint.add(vecTriangleOrigin);
  gl.glColor4fv(ANGULAR_COLOR,0);
  gl.glLineWidth(ANGLUAR_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecUpperPoint.x(),vecUpperPoint.y(),vecUpperPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecLowerPoint.x(),vecLowerPoint.y(),vecLowerPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glColor4fv(ANGULAR_POLYGON_COLOR,0);
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle / 10);
  Vec3f tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),fCurrentAngle / 10);
  tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  for (  Integer iCurrent : set.getVA(iPolylineVAID)) {
    if (bRenderStorageHorizontally) {
      vecLeftPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
    }
 else {
      vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
    }
    vecLeftPoint.setX(alAxisSpacing.get(iPosition));
    vecRightPoint.setX(alAxisSpacing.get(iPosition + 1));
    Vec3f vecCompareLine=vecRightPoint.minus(vecLeftPoint);
    float fCompareAngle=getAngle(vecCompareLine,vecCenterLine);
    if (fCompareAngle > fCurrentAngle || fCompareAngle < -fCurrentAngle) {
      alIsAngleBlocking.get(0).add(iCurrent);
    }
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsAngularDraggingActive=false;
  }
}","private void handleAngularBrushing(final GL gl){
  if (bIsAngularBrushingFirstTime) {
    fCurrentAngle=fDefaultAngle;
    Point currentPoint=linePick.getPickedPoint();
    float[] fArPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
    vecAngularBrushingPoint=new Vec3f(fArPoint[0],fArPoint[1],0.01f);
    bIsAngularBrushingFirstTime=false;
  }
  alIsAngleBlocking.get(0).clear();
  int iPosition=0;
  for (int iCount=0; iCount < alAxisSpacing.size() - 1; iCount++) {
    if (vecAngularBrushingPoint.x() > alAxisSpacing.get(iCount) && vecAngularBrushingPoint.x() < alAxisSpacing.get(iCount + 1))     iPosition=iCount;
  }
  int iAxisLeftIndex;
  int iAxisRightIndex;
  iAxisLeftIndex=set.getVA(iAxisVAID).get(iPosition);
  iAxisRightIndex=set.getVA(iAxisVAID).get(iPosition + 1);
  Vec3f vecLeftPoint=new Vec3f(0,0,0);
  Vec3f vecRightPoint=new Vec3f(0,0,0);
  if (bRenderStorageHorizontally) {
    vecLeftPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
  }
 else {
    vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
  }
  vecLeftPoint.setX(alAxisSpacing.get(iPosition));
  vecRightPoint.setX(alAxisSpacing.get(iPosition + 1));
  Vec3f vecDirectional=vecRightPoint.minus(vecLeftPoint);
  float fLength=vecDirectional.length();
  vecDirectional.normalize();
  Vec3f vecTriangleOrigin=vecLeftPoint.addScaled(fLength / 4,vecDirectional);
  Vec3f vecTriangleLimit=vecLeftPoint.addScaled(fLength / 4 * 3,vecDirectional);
  Rotf rotf=new Rotf();
  Vec3f vecCenterLine=vecTriangleLimit.minus(vecTriangleOrigin);
  float fLegLength=vecCenterLine.length();
  if (bIsAngularDraggingActive) {
    Point pickedPoint=pickingTriggerMouseAdapter.getPickedPoint();
    float fArPoint[]=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
    Vec3f vecPickedPoint=new Vec3f(fArPoint[0],fArPoint[1],0.01f);
    Vec3f vecTempLine=vecPickedPoint.minus(vecTriangleOrigin);
    fCurrentAngle=getAngle(vecTempLine,vecCenterLine);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
  }
  rotf.set(new Vec3f(0,0,1),fCurrentAngle);
  Vec3f vecUpperPoint=rotf.rotateVector(vecCenterLine);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle);
  Vec3f vecLowerPoint=rotf.rotateVector(vecCenterLine);
  vecUpperPoint.add(vecTriangleOrigin);
  vecLowerPoint.add(vecTriangleOrigin);
  gl.glColor4fv(ANGULAR_COLOR,0);
  gl.glLineWidth(ANGLUAR_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecUpperPoint.x(),vecUpperPoint.y(),vecUpperPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecLowerPoint.x(),vecLowerPoint.y(),vecLowerPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glColor4fv(ANGULAR_POLYGON_COLOR,0);
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle / 10);
  Vec3f tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),fCurrentAngle / 10);
  tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  for (  Integer iCurrent : set.getVA(iPolylineVAID)) {
    if (bRenderStorageHorizontally) {
      vecLeftPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
    }
 else {
      vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
    }
    vecLeftPoint.setX(alAxisSpacing.get(iPosition));
    vecRightPoint.setX(alAxisSpacing.get(iPosition + 1));
    Vec3f vecCompareLine=vecRightPoint.minus(vecLeftPoint);
    float fCompareAngle=getAngle(vecCompareLine,vecCenterLine);
    if (fCompareAngle > fCurrentAngle || fCompareAngle < -fCurrentAngle) {
      alIsAngleBlocking.get(0).add(iCurrent);
    }
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsAngularDraggingActive=false;
    System.out.println(""String_Node_Str"");
  }
}",0.9962850971922246
58969,"@Override public synchronized void displayLocal(final GL gl){
  if (set == null)   return;
  if (hashGates == null) {
    initGates();
  }
  if (bIsTranslationActive) {
    doTranslation();
  }
  pickingManager.handlePicking(iUniqueID,gl,true);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  checkForHits(gl);
  display(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
  pickingTriggerMouseAdapter.resetEvents();
}","@Override public synchronized void displayLocal(final GL gl){
  if (set == null)   return;
  if (hashGates == null) {
    initGates();
  }
  if (bIsTranslationActive) {
    doTranslation();
  }
  pickingManager.handlePicking(iUniqueID,gl,true);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  checkForHits(gl);
  display(gl);
  if (eBusyModeState != EBusyModeState.OFF)   renderBusyMode(gl);
}",0.9594843462246776
58970,"@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case DOUBLE_CLICKED:
      IDListEventContainer<Integer> idListEventContainer=new IDListEventContainer<Integer>(EEventType.LOAD_PATHWAY_BY_GENE,EIDType.REFSEQ_MRNA_INT);
    idListEventContainer.addID(getRefSeqFromStorageIndex(iExternalID));
  triggerEvent(EMediatorType.SELECTION_MEDIATOR,idListEventContainer);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX) {
Integer iRefSeqID=idMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iExternalID);
for (Object iExpressionIndex : idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,iRefSeqID)) {
contentSelectionManager.addToType(eSelectionType,(Integer)iExpressionIndex);
}
}
 else {
polylineSelectionManager.addToType(eSelectionType,iExternalID);
}
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(EIDType.REFSEQ_MRNA_INT,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
}
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(eAxisDataType,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
rePosition(iExternalID);
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
bIsGateMouseOver=true;
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
bIsGateMouseOver=true;
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case LOWER_GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
bIsGateMouseOver=true;
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.LOWER_GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.LOWER_GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
IVirtualArray axisVA=set.getVA(iAxisVAID);
switch (ePickingMode) {
case CLICKED:
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) hashGates.remove(axisVA.get(iExternalID));
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 0) {
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
}
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
resetAxisSpacing();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
pickingManager.flushHits(iUniqueID,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueID,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}","@Override protected void handleEvents(final EPickingType ePickingType,final EPickingMode ePickingMode,final int iExternalID,final Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
  ESelectionType eSelectionType;
switch (ePickingType) {
case POLYLINE_SELECTION:
switch (ePickingMode) {
case DOUBLE_CLICKED:
      IDListEventContainer<Integer> idListEventContainer=new IDListEventContainer<Integer>(EEventType.LOAD_PATHWAY_BY_GENE,EIDType.REFSEQ_MRNA_INT);
    idListEventContainer.addID(getRefSeqFromStorageIndex(iExternalID));
  triggerEvent(EMediatorType.SELECTION_MEDIATOR,idListEventContainer);
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
if (bAngularBrushingSelectPolyline) {
bAngularBrushingSelectPolyline=false;
bIsAngularBrushingActive=true;
iSelectedLineID=iExternalID;
linePick=pick;
bIsAngularBrushingFirstTime=true;
}
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
connectedElementRepresentationManager.clear(ePolylineDataType);
polylineSelectionManager.clearSelection(eSelectionType);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX) {
Integer iRefSeqID=idMappingManager.getID(EMappingType.EXPRESSION_INDEX_2_REFSEQ_MRNA_INT,iExternalID);
for (Object iExpressionIndex : idMappingManager.getMultiID(EMappingType.REFSEQ_MRNA_INT_2_EXPRESSION_INDEX,iRefSeqID)) {
contentSelectionManager.addToType(eSelectionType,(Integer)iExpressionIndex);
}
}
 else {
polylineSelectionManager.addToType(eSelectionType,iExternalID);
}
polylineSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
if (ePolylineDataType == EIDType.EXPRESSION_INDEX && !bAngularBrushingSelectPolyline) {
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(EIDType.REFSEQ_MRNA_INT,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=contentSelectionManager.getDelta();
handleConnectedElementRep(selectionDelta);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
}
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case X_AXIS_SELECTION:
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case Y_AXIS_SELECTION:
switch (ePickingMode) {
case CLICKED:
eSelectionType=ESelectionType.SELECTION;
break;
case MOUSE_OVER:
eSelectionType=ESelectionType.MOUSE_OVER;
break;
default :
pickingManager.flushHits(iUniqueID,ePickingType);
return;
}
axisSelectionManager.clearSelection(eSelectionType);
axisSelectionManager.addToType(eSelectionType,iExternalID);
axisSelectionManager.addConnectionID(generalManager.getIDManager().createID(EManagedObjectType.CONNECTION),iExternalID);
connectedElementRepresentationManager.clear(eAxisDataType);
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new SelectionCommandEventContainer(eAxisDataType,new SelectionCommand(ESelectionCommandType.CLEAR,eSelectionType)));
ISelectionDelta selectionDelta=axisSelectionManager.getDelta();
if (eAxisDataType == EIDType.EXPRESSION_INDEX) {
handleConnectedElementRep(selectionDelta);
}
triggerEvent(EMediatorType.SELECTION_MEDIATOR,new DeltaEventContainer<ISelectionDelta>(selectionDelta));
rePosition(iExternalID);
setDisplayListDirty();
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case LOWER_GATE_TIP_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
bIsGateMouseOver=true;
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_TIP_SELECTION;
iDraggedGateNumber=iExternalID;
System.out.println(""String_Node_Str"");
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case LOWER_GATE_BOTTOM_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
bIsGateMouseOver=true;
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
setDisplayListDirty();
System.out.println(""String_Node_Str"");
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=EPickingType.LOWER_GATE_BOTTOM_SELECTION;
iDraggedGateNumber=iExternalID;
System.out.println(""String_Node_Str"");
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case LOWER_GATE_BODY_SELECTION:
switch (ePickingMode) {
case MOUSE_OVER:
bIsGateMouseOver=true;
iDraggedGateNumber=iExternalID;
draggedObject=EPickingType.LOWER_GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=EPickingType.LOWER_GATE_BODY_SELECTION;
iDraggedGateNumber=iExternalID;
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case PC_ICON_SELECTION:
switch (ePickingMode) {
case CLICKED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.PC_ICON_SELECTION);
break;
case REMOVE_AXIS:
IVirtualArray axisVA=set.getVA(iAxisVAID);
switch (ePickingMode) {
case CLICKED:
if (axisVA.containsElement(axisVA.get(iExternalID)) == 1) hashGates.remove(axisVA.get(iExternalID));
axisVA.remove(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.remove(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.REMOVE_AXIS);
break;
case MOVE_AXIS_LEFT:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 0) {
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=iExternalID;
setDisplayListDirty();
}
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.MOVE_AXIS_LEFT);
break;
case MOVE_AXIS_RIGHT:
switch (ePickingMode) {
case CLICKED:
resetAxisSpacing();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.MOVE_AXIS_RIGHT);
break;
case DUPLICATE_AXIS:
switch (ePickingMode) {
case CLICKED:
if (iExternalID > 0) {
set.getVA(iAxisVAID).copy(iExternalID);
IVirtualArrayDelta vaDelta=new VirtualArrayDelta(EIDType.EXPERIMENT_INDEX);
vaDelta.add(VADeltaItem.copy(iExternalID));
generalManager.getEventPublisher().triggerEvent(EMediatorType.SELECTION_MEDIATOR,this,new DeltaEventContainer<IVirtualArrayDelta>(vaDelta));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
pickingManager.flushHits(iUniqueID,EPickingType.DUPLICATE_AXIS);
break;
case ANGULAR_UPPER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
pickingManager.flushHits(iUniqueID,EPickingType.ANGULAR_UPPER);
break;
case ANGULAR_LOWER:
switch (ePickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
}
}",0.991472924713942
58971,"/** 
 * Initialization for gl called by a managing view Has to call init internally!
 * @param gl
 */
public abstract void initRemote(final GL gl,final int iRemoteViewID,final RemoteLevel level,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas);","/** 
 * Initialization for gl called by a managing view Has to call init internally!
 * @param gl
 */
public abstract void initRemote(final GL gl,final int iRemoteViewID,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas);",0.9594594594594594
58972,"@Override public void initRemote(GL gl,int remoteViewID,RemoteLevel level,PickingJoglMouseListener pickingTriggerMouseAdapter,IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}","@Override public void initRemote(GL gl,int remoteViewID,PickingJoglMouseListener pickingTriggerMouseAdapter,IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.9698996655518396
58973,"@Override public synchronized void initRemote(final GL gl,final int iRemoteViewID,final RemoteLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  bIsLocal=false;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  Collection<GLCaleydoCanvas> cc=generalManager.getViewGLCanvasManager().getAllGLCanvasUsers();
  for (  GLCaleydoCanvas c : cc) {
    c.addKeyListener(keyListener_);
  }
  init(gl);
  grid_.setGridSize(30,60);
  grid_.setGlyphPositions(EIconIDs.DISPLAY_RECTANGLE);
}","@Override public synchronized void initRemote(final GL gl,final int iRemoteViewID,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  bIsLocal=false;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  Collection<GLCaleydoCanvas> cc=generalManager.getViewGLCanvasManager().getAllGLCanvasUsers();
  for (  GLCaleydoCanvas c : cc) {
    c.addKeyListener(keyListener_);
  }
  init(gl);
  grid_.setGridSize(30,60);
  grid_.setGlyphPositions(EIconIDs.DISPLAY_RECTANGLE);
}",0.9781818181818182
58974,"@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  iMaxCols=5;
  init(gl);
}","@Override public void initRemote(final GL gl,final int iRemoteViewID,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  iMaxCols=5;
  init(gl);
}",0.9648093841642228
58975,"@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  iGLDisplayListIndexRemote=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}","@Override public void initRemote(final GL gl,final int iRemoteViewID,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  iGLDisplayListIndexRemote=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  init(gl);
}",0.9716312056737588
58976,"@Override public void initRemote(final GL gl,final int iRemoteViewID,final RemoteLevel layer,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  iGLDisplayListIndexRemote=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  init(gl);
}","@Override public void initRemote(final GL gl,final int iRemoteViewID,final PickingJoglMouseListener pickingTriggerMouseAdapter,final IGLCanvasRemoteRendering remoteRenderingGLCanvas){
  this.remoteRenderingGLCanvas=remoteRenderingGLCanvas;
  this.pickingTriggerMouseAdapter=pickingTriggerMouseAdapter;
  iGLDisplayListIndexRemote=gl.glGenLists(1);
  iGLDisplayListToCall=iGLDisplayListIndexRemote;
  init(gl);
}",0.9716312056737588
58977,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case PATHWAY_ELEMENT_SELECTION:
    PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)generalManager.getPathwayItemManager().getItem(iExternalID);
  if (selectionManager.checkStatus(ESelectionType.MOUSE_OVER,tmpVertexGraphItemRep.getId()) && !pickingMode.equals(EPickingMode.CLICKED) && !pickingMode.equals(EPickingMode.DOUBLE_CLICKED)) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
setDisplayListDirty();
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_1);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_2);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_3);
if (pickingMode == EPickingMode.DOUBLE_CLICKED) {
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
int iPathwayID=generalManager.getPathwayManager().searchPathwayIdByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG);
if (iPathwayID != -1) {
ISelectionDelta selectionDelta=new SelectionDelta(EIDType.PATHWAY);
selectionDelta.addSelection(iPathwayID,ESelectionType.SELECTION);
triggerUpdate(EMediatorType.SELECTION_MEDIATOR,selectionDelta,null);
}
}
selectionManager.clearSelection(ESelectionType.SELECTION);
selectionManager.addToType(ESelectionType.SELECTION,tmpVertexGraphItemRep.getId());
}
 else if (pickingMode == EPickingMode.MOUSE_OVER || pickingMode == EPickingMode.CLICKED) {
selectionManager.clearSelection(ESelectionType.MOUSE_OVER);
selectionManager.addToType(ESelectionType.MOUSE_OVER,tmpVertexGraphItemRep.getId());
}
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
selectionManager.addConnectionID(iConnectionID,tmpVertexGraphItemRep.getId());
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
gLPathwayContentCreator.performIdenticalNodeHighlighting();
createConnectionLines(tmpVertexGraphItemRep,iConnectionID);
Collection<SelectionCommand> colSelectionCommand=new ArrayList<SelectionCommand>();
colSelectionCommand.add(new SelectionCommand(ESelectionCommandType.CLEAR,ESelectionType.MOUSE_OVER));
ISelectionDelta delta=selectionManager.getDelta();
triggerUpdate(EMediatorType.SELECTION_MEDIATOR,createExternalSelectionDelta(delta),colSelectionCommand);
pickingManager.flushHits(iUniqueID,ePickingType);
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case PATHWAY_ELEMENT_SELECTION:
    PathwayVertexGraphItemRep tmpVertexGraphItemRep=(PathwayVertexGraphItemRep)generalManager.getPathwayItemManager().getItem(iExternalID);
  if (selectionManager.checkStatus(ESelectionType.MOUSE_OVER,tmpVertexGraphItemRep.getId()) && !pickingMode.equals(EPickingMode.CLICKED) && !pickingMode.equals(EPickingMode.DOUBLE_CLICKED)) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
setDisplayListDirty();
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_1);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_2);
selectionManager.clearSelection(ESelectionType.NEIGHBORHOOD_3);
if (pickingMode == EPickingMode.DOUBLE_CLICKED) {
if (tmpVertexGraphItemRep.getType() == EPathwayVertexType.map) {
int iPathwayID=generalManager.getPathwayManager().searchPathwayIdByName(tmpVertexGraphItemRep.getName(),EPathwayDatabaseType.KEGG);
if (iPathwayID != -1) {
ISelectionDelta selectionDelta=new SelectionDelta(EIDType.PATHWAY);
selectionDelta.addSelection(iPathwayID,ESelectionType.SELECTION);
triggerUpdate(EMediatorType.SELECTION_MEDIATOR,selectionDelta,null);
}
}
selectionManager.clearSelection(ESelectionType.SELECTION);
selectionManager.addToType(ESelectionType.SELECTION,tmpVertexGraphItemRep.getId());
}
 else if (pickingMode == EPickingMode.MOUSE_OVER || pickingMode == EPickingMode.CLICKED) {
selectionManager.clearSelection(ESelectionType.MOUSE_OVER);
selectionManager.addToType(ESelectionType.MOUSE_OVER,tmpVertexGraphItemRep.getId());
}
int iConnectionID=generalManager.getIDManager().createID(EManagedObjectType.CONNECTION);
selectionManager.addConnectionID(iConnectionID,tmpVertexGraphItemRep.getId());
connectedElementRepresentationManager.clear(EIDType.EXPRESSION_INDEX);
gLPathwayContentCreator.performIdenticalNodeHighlighting();
createConnectionLines(tmpVertexGraphItemRep,iConnectionID);
Collection<SelectionCommand> colSelectionCommand=new ArrayList<SelectionCommand>();
colSelectionCommand.add(new SelectionCommand(ESelectionCommandType.CLEAR,ESelectionType.MOUSE_OVER));
ISelectionDelta delta=selectionManager.getDelta();
triggerUpdate(EMediatorType.SELECTION_MEDIATOR,createExternalSelectionDelta(delta),colSelectionCommand);
pickingManager.flushHits(iUniqueID,EPickingType.PATHWAY_ELEMENT_SELECTION);
break;
}
}",0.9944903581267218
58978,"private void createVertex(final GL gl,final IUniqueObject containingView,PathwayVertexGraphItemRep vertexRep,PathwayGraph containingPathway){
  float[] tmpNodeColor=null;
  gl.glPushName(generalManager.getViewGLCanvasManager().getPickingManager().getPickingID(containingView.getID(),EPickingType.PATHWAY_ELEMENT_SELECTION,vertexRep.getId()));
  EPathwayVertexShape shape=vertexRep.getShapeType();
  if (vertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).toArray().length == 0) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + vertexRep.getName() + ""String_Node_Str"");
    return;
  }
  EPathwayVertexType vertexType=vertexRep.getType();
  if (vertexType.equals(EPathwayVertexType.map)) {
    if (vertexRep.getName().contains(""String_Node_Str""))     return;
    float fCanvasXPos=(vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X);
    float fCanvasYPos=(vertexRep.getYOrigin() * PathwayRenderStyle.SCALING_FACTOR_Y);
    float fNodeWidth=vertexRep.getWidth() / 2.0f * PathwayRenderStyle.SCALING_FACTOR_X;
    float fNodeHeight=vertexRep.getHeight() / 2.0f * PathwayRenderStyle.SCALING_FACTOR_Y;
    gl.glTranslatef(fCanvasXPos,-fCanvasYPos,0);
    tmpNodeColor=new float[]{0,0,0,0};
    gl.glColor4fv(tmpNodeColor,0);
    fillNodeDisplayList(gl,fNodeWidth,fNodeHeight);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      fillNodeDisplayListFrame(gl,fNodeWidth,fNodeHeight);
    }
 else     if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      fillNodeDisplayListFrame(gl,fNodeWidth,fNodeHeight);
    }
    gl.glTranslatef(-fCanvasXPos,fCanvasYPos,0);
  }
 else   if (vertexType.equals(EPathwayVertexType.compound)) {
    float fCanvasXPos=(vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X);
    float fCanvasYPos=(vertexRep.getYOrigin() * PathwayRenderStyle.SCALING_FACTOR_Y);
    gl.glTranslatef(fCanvasXPos,-fCanvasYPos,0);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
 else     if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
    tmpNodeColor=PathwayRenderStyle.COMPOUND_NODE_COLOR;
    gl.glColor4fv(tmpNodeColor,0);
    gl.glCallList(iCompoundNodeDisplayListId);
    gl.glTranslatef(-fCanvasXPos,fCanvasYPos,0);
  }
 else   if (shape.equals(EPathwayVertexShape.poly)) {
    gl.glColor4f(0,0,0,0);
    short[][] shArCoords=vertexRep.getCoords();
    gl.glBegin(GL.GL_POLYGON);
    for (int iPointIndex=0; iPointIndex < shArCoords.length; iPointIndex++) {
      gl.glVertex3f(shArCoords[iPointIndex][0] * PathwayRenderStyle.SCALING_FACTOR_X,-shArCoords[iPointIndex][1] * PathwayRenderStyle.SCALING_FACTOR_Y,Z_OFFSET);
    }
    gl.glEnd();
    tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
    gl.glColor4fv(tmpNodeColor,0);
    gl.glLineWidth(3);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glLineWidth(5);
    }
 else     if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glLineWidth(5);
    }
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int iPointIndex=0; iPointIndex < shArCoords.length; iPointIndex++) {
      gl.glVertex3f(shArCoords[iPointIndex][0] * PathwayRenderStyle.SCALING_FACTOR_X,-shArCoords[iPointIndex][1] * PathwayRenderStyle.SCALING_FACTOR_Y,Z_OFFSET);
    }
    gl.glEnd();
  }
 else   if (vertexType.equals(EPathwayVertexType.gene) || vertexType.equals(EPathwayVertexType.enzyme) || vertexType.equals(EPathwayVertexType.other)) {
    float fCanvasXPos=(vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X);
    float fCanvasYPos=(vertexRep.getYOrigin() * PathwayRenderStyle.SCALING_FACTOR_Y);
    gl.glTranslatef(fCanvasXPos,-fCanvasYPos,0);
    int iVertexRepID=vertexRep.getId();
    gl.glColor4f(0,0,0,0);
    gl.glCallList(iEnzymeNodeDisplayListId);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iVertexRepID) || internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_1,iVertexRepID) || internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_2,iVertexRepID)|| internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_3,iVertexRepID)|| internalSelectionManager.checkStatus(ESelectionType.SELECTION,iVertexRepID)) {
      if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iVertexRepID)) {
        tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,iVertexRepID)) {
        tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_1,iVertexRepID)) {
        gl.glEnable(GL.GL_LINE_STIPPLE);
        gl.glLineStipple(4,(short)0xAAAA);
        tmpNodeColor=renderStyle.getNeighborhoodNodeColorByDepth(1);
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_2,iVertexRepID)) {
        gl.glEnable(GL.GL_LINE_STIPPLE);
        gl.glLineStipple(2,(short)0xAAAA);
        tmpNodeColor=renderStyle.getNeighborhoodNodeColorByDepth(2);
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_3,iVertexRepID)) {
        gl.glEnable(GL.GL_LINE_STIPPLE);
        gl.glLineStipple(1,(short)0xAAAA);
        tmpNodeColor=renderStyle.getNeighborhoodNodeColorByDepth(3);
      }
      gl.glColor4fv(tmpNodeColor,0);
      gl.glCallList(iHighlightedEnzymeNodeDisplayListId);
      gl.glDisable(GL.GL_LINE_STIPPLE);
    }
    gl.glTranslatef(-fCanvasXPos,fCanvasYPos,0);
  }
  gl.glPopName();
}","private void createVertex(final GL gl,final IUniqueObject containingView,PathwayVertexGraphItemRep vertexRep,PathwayGraph containingPathway){
  float[] tmpNodeColor=null;
  gl.glPushName(generalManager.getViewGLCanvasManager().getPickingManager().getPickingID(containingView.getID(),EPickingType.PATHWAY_ELEMENT_SELECTION,vertexRep.getId()));
  EPathwayVertexShape shape=vertexRep.getShapeType();
  if (vertexRep.getAllItemsByProp(EGraphItemProperty.ALIAS_PARENT).toArray().length == 0) {
    generalManager.getLogger().log(Level.WARNING,""String_Node_Str"" + vertexRep.getName() + ""String_Node_Str"");
    return;
  }
  EPathwayVertexType vertexType=vertexRep.getType();
  if (vertexType.equals(EPathwayVertexType.map)) {
    if (vertexRep.getName().contains(""String_Node_Str"")) {
      gl.glPopName();
      return;
    }
    float fCanvasXPos=(vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X);
    float fCanvasYPos=(vertexRep.getYOrigin() * PathwayRenderStyle.SCALING_FACTOR_Y);
    float fNodeWidth=vertexRep.getWidth() / 2.0f * PathwayRenderStyle.SCALING_FACTOR_X;
    float fNodeHeight=vertexRep.getHeight() / 2.0f * PathwayRenderStyle.SCALING_FACTOR_Y;
    gl.glTranslatef(fCanvasXPos,-fCanvasYPos,0);
    tmpNodeColor=new float[]{0,0,0,0};
    gl.glColor4fv(tmpNodeColor,0);
    fillNodeDisplayList(gl,fNodeWidth,fNodeHeight);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      fillNodeDisplayListFrame(gl,fNodeWidth,fNodeHeight);
    }
 else     if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      fillNodeDisplayListFrame(gl,fNodeWidth,fNodeHeight);
    }
    gl.glTranslatef(-fCanvasXPos,fCanvasYPos,0);
  }
 else   if (vertexType.equals(EPathwayVertexType.compound)) {
    float fCanvasXPos=(vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X);
    float fCanvasYPos=(vertexRep.getYOrigin() * PathwayRenderStyle.SCALING_FACTOR_Y);
    gl.glTranslatef(fCanvasXPos,-fCanvasYPos,0);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
 else     if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glCallList(iHighlightedCompoundNodeDisplayListId);
    }
    tmpNodeColor=PathwayRenderStyle.COMPOUND_NODE_COLOR;
    gl.glColor4fv(tmpNodeColor,0);
    gl.glCallList(iCompoundNodeDisplayListId);
    gl.glTranslatef(-fCanvasXPos,fCanvasYPos,0);
  }
 else   if (shape.equals(EPathwayVertexShape.poly)) {
    gl.glColor4f(0,0,0,0);
    short[][] shArCoords=vertexRep.getCoords();
    gl.glBegin(GL.GL_POLYGON);
    for (int iPointIndex=0; iPointIndex < shArCoords.length; iPointIndex++) {
      gl.glVertex3f(shArCoords[iPointIndex][0] * PathwayRenderStyle.SCALING_FACTOR_X,-shArCoords[iPointIndex][1] * PathwayRenderStyle.SCALING_FACTOR_Y,Z_OFFSET);
    }
    gl.glEnd();
    tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
    gl.glColor4fv(tmpNodeColor,0);
    gl.glLineWidth(3);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glLineWidth(5);
    }
 else     if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,vertexRep.getId())) {
      tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      gl.glColor4fv(tmpNodeColor,0);
      gl.glLineWidth(5);
    }
    gl.glBegin(GL.GL_LINE_STRIP);
    for (int iPointIndex=0; iPointIndex < shArCoords.length; iPointIndex++) {
      gl.glVertex3f(shArCoords[iPointIndex][0] * PathwayRenderStyle.SCALING_FACTOR_X,-shArCoords[iPointIndex][1] * PathwayRenderStyle.SCALING_FACTOR_Y,Z_OFFSET);
    }
    gl.glEnd();
  }
 else   if (vertexType.equals(EPathwayVertexType.gene) || vertexType.equals(EPathwayVertexType.enzyme) || vertexType.equals(EPathwayVertexType.other)) {
    float fCanvasXPos=(vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X);
    float fCanvasYPos=(vertexRep.getYOrigin() * PathwayRenderStyle.SCALING_FACTOR_Y);
    gl.glTranslatef(fCanvasXPos,-fCanvasYPos,0);
    int iVertexRepID=vertexRep.getId();
    gl.glColor4f(0,0,0,0);
    gl.glCallList(iEnzymeNodeDisplayListId);
    if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iVertexRepID) || internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_1,iVertexRepID) || internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_2,iVertexRepID)|| internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_3,iVertexRepID)|| internalSelectionManager.checkStatus(ESelectionType.SELECTION,iVertexRepID)) {
      if (internalSelectionManager.checkStatus(ESelectionType.MOUSE_OVER,iVertexRepID)) {
        tmpNodeColor=PathwayRenderStyle.MOUSE_OVER_COLOR;
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.SELECTION,iVertexRepID)) {
        tmpNodeColor=PathwayRenderStyle.SELECTED_COLOR;
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_1,iVertexRepID)) {
        gl.glEnable(GL.GL_LINE_STIPPLE);
        gl.glLineStipple(4,(short)0xAAAA);
        tmpNodeColor=renderStyle.getNeighborhoodNodeColorByDepth(1);
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_2,iVertexRepID)) {
        gl.glEnable(GL.GL_LINE_STIPPLE);
        gl.glLineStipple(2,(short)0xAAAA);
        tmpNodeColor=renderStyle.getNeighborhoodNodeColorByDepth(2);
      }
 else       if (internalSelectionManager.checkStatus(ESelectionType.NEIGHBORHOOD_3,iVertexRepID)) {
        gl.glEnable(GL.GL_LINE_STIPPLE);
        gl.glLineStipple(1,(short)0xAAAA);
        tmpNodeColor=renderStyle.getNeighborhoodNodeColorByDepth(3);
      }
      gl.glColor4fv(tmpNodeColor,0);
      gl.glCallList(iHighlightedEnzymeNodeDisplayListId);
      gl.glDisable(GL.GL_LINE_STIPPLE);
    }
    gl.glTranslatef(-fCanvasXPos,fCanvasYPos,0);
  }
  gl.glPopName();
}",0.9974826935179358
58979,"/** 
 * @see org.caleydo.core.view.opengl.canvas.pathway.PathwayRenderStyle#neighborhoodNodeColorArraysize
 * @see org.caleydo.core.view.opengl.canvas.pathway.PathwayRenderStyle#highlightedNodeColor
 * @param depth [0..1.. (neighborhoodNodeColorArraysize-1) ] ; if depth ==0highlightedNodeColor is returened
 * @return
 */
public float[] getNeighborhoodNodeColorByDepth(final int depth){
  if (depth >= neighborhoodNodeColorArraysize) {
    throw new IllegalStateException(""String_Node_Str"" + depth + ""String_Node_Str"");
  }
  return this.neighborhoodNodeColorArray[depth];
}","/** 
 * @see org.caleydo.core.view.opengl.canvas.pathway.PathwayRenderStyle#neighborhoodNodeColorArraysize
 * @see org.caleydo.core.view.opengl.canvas.pathway.PathwayRenderStyle#highlightedNodeColor
 * @param depth [0..1.. (neighborhoodNodeColorArraysize-1) ] ; if depth ==0highlightedNodeColor is returned
 * @return
 */
public float[] getNeighborhoodNodeColorByDepth(final int depth){
  if (depth >= neighborhoodNodeColorArraysize) {
    throw new IllegalStateException(""String_Node_Str"" + depth + ""String_Node_Str"");
  }
  return this.neighborhoodNodeColorArray[depth];
}",0.999129677980853
58980,"/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleCursorDragging(final GL gl){
  Point currentPoint=pickingTriggerMouseAdapter.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  float fselElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fHeight=viewFrustum.getHeight() - 0.2f;
  float fStep=fHeight / iAlNumberSamples.get(0);
  if (iDraggedCursor == 1) {
    fPosCursorFirstElement=fArTargetWorldCoordinates[1] - 0.1f;
    if (fPosCursorFirstElement > fPosCursorLastElement && iFirstSample >= 0) {
      fselElement=(viewFrustum.getHeight() - 0.1f - fArTargetWorldCoordinates[1]) / fStep;
      if ((int)Math.floor(fselElement) >= 0) {
        iFirstSample=(int)Math.floor(fselElement);
        iSamplesPerHeatmap=iLastSample - iFirstSample + 1;
      }
    }
  }
  if (iDraggedCursor == 2) {
    fPosCursorLastElement=fArTargetWorldCoordinates[1] - 0.1f;
    if (fPosCursorFirstElement > fPosCursorLastElement && iLastSample <= iAlNumberSamples.get(0))     ;
{
      fselElement=(viewFrustum.getHeight() - 0.1f - fArTargetWorldCoordinates[1]) / fStep;
      if ((int)Math.ceil(fselElement) < iAlNumberSamples.get(0))       ;
{
        iLastSample=(int)Math.ceil(fselElement);
        iSamplesPerHeatmap=iLastSample - iFirstSample + 1;
      }
    }
  }
  setDisplayListDirty();
  triggerSelectionBlock();
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsDraggingActive=false;
  }
}","/** 
 * Function used for updating cursor position in case of dragging
 * @param gl
 */
private void handleCursorDragging(final GL gl){
  Point currentPoint=pickingTriggerMouseAdapter.getPickedPoint();
  float[] fArTargetWorldCoordinates=new float[3];
  float fselElement;
  fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  float fHeight=viewFrustum.getHeight() - 0.2f;
  float fStep=fHeight / iAlNumberSamples.get(0);
  float fPosCursor;
  if (iDraggedCursor == 1) {
    fPosCursor=fArTargetWorldCoordinates[1] - 0.1f;
    if (fPosCursor > fPosCursorLastElement && iFirstSample >= 0) {
      fPosCursorFirstElement=fPosCursor;
      fselElement=(viewFrustum.getHeight() - 0.1f - fArTargetWorldCoordinates[1]) / fStep;
      if ((int)Math.floor(fselElement) >= 0) {
        iFirstSample=(int)Math.floor(fselElement);
        iSamplesPerHeatmap=iLastSample - iFirstSample + 1;
      }
    }
  }
  if (iDraggedCursor == 2) {
    fPosCursor=fArTargetWorldCoordinates[1] - 0.1f;
    if (fPosCursorFirstElement > fPosCursor && iLastSample <= iAlNumberSamples.get(0))     ;
{
      fPosCursorLastElement=fPosCursor;
      fselElement=(viewFrustum.getHeight() - 0.1f - fArTargetWorldCoordinates[1]) / fStep;
      if ((int)Math.ceil(fselElement) < iAlNumberSamples.get(0))       ;
{
        iLastSample=(int)Math.ceil(fselElement);
        iSamplesPerHeatmap=iLastSample - iFirstSample + 1;
      }
    }
  }
  generalManager.getPreferenceStore().setValue(PreferenceConstants.HM_NUM_SAMPLES_PER_HEATMAP,iSamplesPerHeatmap);
  setDisplayListDirty();
  triggerSelectionBlock();
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsDraggingActive=false;
  }
}",0.920509708737864
58981,"@Override public void init(GL gl){
  bRenderOnlyContext=false;
  createHeatMap();
  glHeatMapView.initRemote(gl,getID(),pickingTriggerMouseAdapter,null);
  iconTextureManager=new GLIconTextureManager();
  initData();
  colorMappingBar.setHeight(renderStyle.getColorMappingBarHeight());
  colorMappingBar.setWidth(renderStyle.getColorMappingBarWidth());
  if (set == null)   return;
  initTextures(gl);
  initPosCursor();
}","@Override public void init(GL gl){
  bRenderOnlyContext=false;
  createHeatMap();
  glHeatMapView.initRemote(gl,getID(),pickingTriggerMouseAdapter,null);
  iconTextureManager=new GLIconTextureManager();
  initData();
  if (set == null)   return;
  initTextures(gl);
  initPosCursor();
}",0.6497175141242938
58982,"private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (contentSelectionManager.getNumberOfElements() == 0) {
    renderSymbol(gl);
  }
 else {
    handleTexturePicking(gl);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    viewFrustum.setTop(viewFrustum.getTop() - 0.2f);
    gl.glTranslatef(0,0.1f,0);
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    gl.glTranslatef(GAP_LEVEL1_2,0,0);
    if (bIsHeatmapInFocus) {
      fAnimationScale=0.2f;
    }
 else {
      fAnimationScale=1.0f;
    }
    gl.glScalef(fAnimationScale,1,1);
    renderTextureHeatMap(gl);
    renderMarkerTexture(gl);
    renderSelectedElementsTexture(gl);
    renderCursor(gl);
    viewFrustum.setTop(viewFrustum.getTop() + 0.2f);
    gl.glTranslatef(0,-0.1f,0);
    gl.glScalef(1 / fAnimationScale,1,1);
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
    gl.glDisable(GL.GL_STENCIL_TEST);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL gl,int iGLDisplayListIndex){
  if (bHasFrustumChanged) {
    glHeatMapView.setDisplayListDirty();
    bHasFrustumChanged=false;
  }
  gl.glNewList(iGLDisplayListIndex,GL.GL_COMPILE);
  if (contentSelectionManager.getNumberOfElements() == 0) {
    renderSymbol(gl);
  }
 else {
    handleTexturePicking(gl);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    viewFrustum.setTop(viewFrustum.getTop() - 0.2f);
    gl.glTranslatef(0,0.1f,0);
    renderOverviewBar(gl);
    renderMarkerOverviewBar(gl);
    renderSelectedElementsOverviewBar(gl);
    gl.glTranslatef(GAP_LEVEL1_2,0,0);
    if (bIsHeatmapInFocus) {
      fAnimationScale=0.2f;
    }
 else {
      fAnimationScale=1.0f;
    }
    gl.glScalef(fAnimationScale,1,1);
    renderTextureHeatMap(gl);
    renderMarkerTexture(gl);
    renderSelectedElementsTexture(gl);
    gl.glScalef(1 / fAnimationScale,1,1);
    renderCursor(gl);
    viewFrustum.setTop(viewFrustum.getTop() + 0.2f);
    gl.glTranslatef(0,-0.1f,0);
    gl.glTranslatef(-GAP_LEVEL1_2,0,0);
    gl.glDisable(GL.GL_STENCIL_TEST);
  }
  gl.glEndList();
}",0.9434644957033016
58983,"/** 
 * Constructor.
 * @param setType
 * @param iGLCanvasID
 * @param sLabel
 * @param viewFrustum
 */
public GLHierarchicalHeatMap(ESetType setType,final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(setType,iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HIER_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).externalIDType(EIDType.DAVID).mappingType(EMappingType.EXPRESSION_INDEX_2_DAVID,EMappingType.DAVID_2_EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  colorMappingBar=new GLColorMappingBarMiniView(viewFrustum);
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
  iSamplesPerTexture=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
  iSamplesPerHeatmap=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
  fAlXDistances=new ArrayList<Float>();
  generalManager.getEventPublisher().addSender(EMediatorType.HIERACHICAL_HEAT_MAP,this);
  generalManager.getEventPublisher().addReceiver(EMediatorType.HIERACHICAL_HEAT_MAP,this);
}","/** 
 * Constructor.
 * @param setType
 * @param iGLCanvasID
 * @param sLabel
 * @param viewFrustum
 */
public GLHierarchicalHeatMap(ESetType setType,final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum){
  super(setType,iGLCanvasID,sLabel,viewFrustum);
  viewType=EManagedObjectType.GL_HIER_HEAT_MAP;
  ArrayList<ESelectionType> alSelectionTypes=new ArrayList<ESelectionType>();
  alSelectionTypes.add(ESelectionType.NORMAL);
  alSelectionTypes.add(ESelectionType.MOUSE_OVER);
  alSelectionTypes.add(ESelectionType.SELECTION);
  contentSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPRESSION_INDEX).externalIDType(EIDType.DAVID).mappingType(EMappingType.EXPRESSION_INDEX_2_DAVID,EMappingType.DAVID_2_EXPRESSION_INDEX).build();
  storageSelectionManager=new GenericSelectionManager.Builder(EIDType.EXPERIMENT_INDEX).build();
  colorMapper=ColorMappingManager.get().getColorMapping(EColorMappingType.GENE_EXPRESSION);
  iNumberOfRandomElements=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
  iSamplesPerTexture=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
  iSamplesPerHeatmap=generalManager.getPreferenceStore().getInt(""String_Node_Str"");
  fAlXDistances=new ArrayList<Float>();
  generalManager.getEventPublisher().addSender(EMediatorType.HIERACHICAL_HEAT_MAP,this);
  generalManager.getEventPublisher().addReceiver(EMediatorType.HIERACHICAL_HEAT_MAP,this);
}",0.978796169630643
58984,"@Override public synchronized void display(GL gl){
  if (bIsDraggingActive) {
    handleCursorDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  gl.glCallList(iGLDisplayListToCall);
  float fright=0.0f;
  float ftop=viewFrustum.getHeight() - 0.2f;
  float fleftOffset=0;
  if (bIsHeatmapInFocus) {
    fright=viewFrustum.getWidth() - 1.3f;
    fleftOffset=0.1f + GAP_LEVEL1_2 + (viewFrustum.getWidth() / 4f) * 0.2f + GAP_LEVEL2_3;
    gl.glTranslatef(fleftOffset,0,0);
  }
 else {
    fright=viewFrustum.getWidth() - 3.0f;
    fleftOffset=0.1f + GAP_LEVEL1_2 + viewFrustum.getWidth() / 4f + GAP_LEVEL2_3;
    gl.glTranslatef(fleftOffset,0,0);
  }
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_VIEW_SELECTION,glHeatMapView.getID()));
  glHeatMapView.getViewFrustum().setTop(ftop);
  glHeatMapView.getViewFrustum().setRight(fright);
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  if (bIsHeatmapInFocus) {
    gl.glTranslatef(-1.0f,0,0);
  }
 else {
    gl.glTranslatef(-3.0f,0,0);
  }
}","@Override public synchronized void display(GL gl){
  if (bIsDraggingActive) {
    handleCursorDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  gl.glCallList(iGLDisplayListToCall);
  float fright=0.0f;
  float ftop=viewFrustum.getTop() - 0.2f;
  float fleftOffset=0;
  if (bIsHeatmapInFocus) {
    fright=viewFrustum.getWidth() - 1.3f;
    fleftOffset=0.1f + GAP_LEVEL1_2 + (viewFrustum.getWidth() / 4f) * 0.2f + GAP_LEVEL2_3;
    gl.glTranslatef(fleftOffset,0,0);
  }
 else {
    fright=viewFrustum.getWidth() - 3.0f;
    fleftOffset=0.1f + GAP_LEVEL1_2 + viewFrustum.getWidth() / 4f + GAP_LEVEL2_3;
    gl.glTranslatef(fleftOffset,0,0);
  }
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_VIEW_SELECTION,glHeatMapView.getID()));
  glHeatMapView.getViewFrustum().setTop(ftop);
  glHeatMapView.getViewFrustum().setRight(fright);
  glHeatMapView.displayRemote(gl);
  gl.glPopName();
  if (bIsHeatmapInFocus) {
    gl.glTranslatef(-1.0f,0,0);
  }
 else {
    gl.glTranslatef(-3.0f,0,0);
  }
}",0.995827538247566
58985,"/** 
 * Render cursor used for controlling hierarchical heatmap (e.g. next Texture, previous Texture, set heatmap in focus)
 * @param gl
 */
private void renderCursor(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fWidth=viewFrustum.getWidth() / 4.0f;
  Texture tempTexture=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_NEXT_BIG);
  tempTexture.enable();
  tempTexture.bind();
  TextureCoords texCoords=tempTexture.getImageTexCoords();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glColor4f(1f,1,1,1f);
  if (iSelectorBar != 1) {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_TEXTURE_CURSOR,1));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0.0f,fHeight,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fHeight,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fHeight + 0.1f,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(0.0f,fHeight + 0.1f,0);
    gl.glEnd();
    gl.glPopName();
  }
  if (iSelectorBar != iNrSelBar) {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_TEXTURE_CURSOR,2));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0.0f,0.0f,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,0.0f,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,-0.1f,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(0.0f,-0.1f,0);
    gl.glEnd();
    gl.glPopName();
  }
  if (set.getVA(iStorageVAID).size() > MAX_NUM_SAMPLES && bIsHeatmapInFocus == false) {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_INFOCUS_SELECTION,1));
    gl.glBegin(GL.GL_QUADS);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(fWidth,fPosCursorFirstElement,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(fWidth + 0.2f,fPosCursorFirstElement,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth + 0.2f,fPosCursorLastElement,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fPosCursorLastElement,0);
    gl.glEnd();
    gl.glPopName();
  }
  tempTexture=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_NEXT_SMALL);
  tempTexture.enable();
  tempTexture.bind();
  texCoords=tempTexture.getImageTexCoords();
  if (bIsHeatmapInFocus == false) {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_CURSOR,1));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(0.0f,fPosCursorFirstElement,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorFirstElement,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorFirstElement + 0.1f,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0.0f,fPosCursorFirstElement + 0.1f,0);
    gl.glEnd();
    gl.glPopName();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_CURSOR,2));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(0.0f,fPosCursorLastElement,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorLastElement,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorLastElement - 0.1f,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0.0f,fPosCursorLastElement - 0.1f,0);
    gl.glEnd();
    gl.glPopName();
  }
  gl.glPopAttrib();
  tempTexture.disable();
}","/** 
 * Render cursor used for controlling hierarchical heatmap (e.g. next Texture, previous Texture, set heatmap in focus)
 * @param gl
 */
private void renderCursor(final GL gl){
  float fHeight=viewFrustum.getHeight();
  float fWidth=viewFrustum.getWidth() / 4.0f;
  Texture tempTexture=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_NEXT_BIG_SIDE);
  tempTexture.enable();
  tempTexture.bind();
  TextureCoords texCoords=tempTexture.getImageTexCoords();
  gl.glPushAttrib(GL.GL_CURRENT_BIT | GL.GL_LINE_BIT);
  gl.glColor4f(1f,1,1,1f);
  if (iSelectorBar != 1) {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_TEXTURE_CURSOR,1));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0.0f,fHeight,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(0.1f,fHeight,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(0.1f,fHeight + 0.1f,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(0.0f,fHeight + 0.1f,0);
    gl.glEnd();
    if (bIsHeatmapInFocus) {
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(fWidth / 5 - 0.1f,fHeight,0);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(fWidth / 5,fHeight,0);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(fWidth / 5,fHeight + 0.1f,0);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fWidth / 5 - 0.1f,fHeight + 0.1f,0);
      gl.glEnd();
    }
 else {
      gl.glBegin(GL.GL_POLYGON);
      gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
      gl.glVertex3f(fWidth - 0.1f,fHeight,0);
      gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
      gl.glVertex3f(fWidth,fHeight,0);
      gl.glTexCoord2f(texCoords.left(),texCoords.top());
      gl.glVertex3f(fWidth,fHeight + 0.1f,0);
      gl.glTexCoord2f(texCoords.right(),texCoords.top());
      gl.glVertex3f(fWidth - 0.1f,fHeight + 0.1f,0);
      gl.glEnd();
    }
    gl.glPopName();
  }
  if (iSelectorBar != iNrSelBar) {
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_TEXTURE_CURSOR,2));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0.0f,0.0f,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,0.0f,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,-0.1f,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(0.0f,-0.1f,0);
    gl.glEnd();
    gl.glPopName();
  }
  tempTexture=iconTextureManager.getIconTexture(gl,EIconTextures.NAVIGATION_NEXT_SMALL);
  tempTexture.enable();
  tempTexture.bind();
  texCoords=tempTexture.getImageTexCoords();
  if (bIsHeatmapInFocus == false) {
    gl.glColor4f(0f,0f,0f,0.7f);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_CURSOR,1));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(0.0f,fPosCursorFirstElement,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorFirstElement,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorFirstElement + 0.1f,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(0.0f,fPosCursorFirstElement + 0.1f,0);
    gl.glEnd();
    gl.glPopName();
    gl.glBegin(GL.GL_QUADS);
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorLastElement,0);
    gl.glVertex3f(0.0f,fPosCursorLastElement,0);
    gl.glVertex3f(0.0f,fPosCursorFirstElement,0);
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorFirstElement,0);
    gl.glEnd();
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.HIER_HEAT_MAP_CURSOR,2));
    gl.glBegin(GL.GL_POLYGON);
    gl.glTexCoord2f(texCoords.right(),texCoords.top());
    gl.glVertex3f(0.0f,fPosCursorLastElement,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.top());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorLastElement,0);
    gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(-GAP_LEVEL1_2 / 4,fPosCursorLastElement - 0.1f,0);
    gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(0.0f,fPosCursorLastElement - 0.1f,0);
    gl.glEnd();
    gl.glPopName();
  }
  gl.glPopAttrib();
  tempTexture.disable();
}",0.5232873481900719
58986,"@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_TEXTURE_CURSOR:
switch (pickingMode) {
case CLICKED:
      if (iExternalID == 1) {
        if (iSelectorBar != 1) {
          iSelectorBar--;
          initPosCursor();
          triggerSelectionBlock();
          setDisplayListDirty();
        }
      }
    if (iExternalID == 2) {
      if (iSelectorBar != iNrSelBar) {
        iSelectorBar++;
        initPosCursor();
        triggerSelectionBlock();
        setDisplayListDirty();
      }
    }
  setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_CURSOR:
switch (pickingMode) {
case CLICKED:
bRenderCaption=true;
setDisplayListDirty();
break;
case DRAGGED:
bRenderCaption=true;
bIsDraggingActive=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
bRenderCaption=true;
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_INFOCUS_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case MOUSE_OVER:
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
iSelectorBar=iExternalID;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
iSelectorBar=iExternalID;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=false;
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
break;
case CLICKED:
bIsHeatmapInFocus=true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.HIER_HEAT_MAP_VIEW_SELECTION);
break;
}
}","@Override protected void handleEvents(EPickingType ePickingType,EPickingMode pickingMode,int iExternalID,Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    pickingManager.flushHits(iUniqueID,ePickingType);
    return;
  }
switch (ePickingType) {
case HIER_HEAT_MAP_TEXTURE_CURSOR:
switch (pickingMode) {
case CLICKED:
      if (iExternalID == 1) {
        if (iSelectorBar != 1) {
          iSelectorBar--;
          initPosCursor();
          triggerSelectionBlock();
          setDisplayListDirty();
        }
      }
    if (iExternalID == 2) {
      if (iSelectorBar != iNrSelBar) {
        iSelectorBar++;
        initPosCursor();
        triggerSelectionBlock();
        setDisplayListDirty();
      }
    }
  setDisplayListDirty();
break;
case DRAGGED:
break;
case MOUSE_OVER:
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_CURSOR:
switch (pickingMode) {
case CLICKED:
bRenderCaption=true;
setDisplayListDirty();
break;
case DRAGGED:
bRenderCaption=true;
bIsDraggingActive=true;
iDraggedCursor=iExternalID;
setDisplayListDirty();
break;
case MOUSE_OVER:
bRenderCaption=true;
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_TEXTURE_SELECTION:
switch (pickingMode) {
case CLICKED:
iSelectorBar=iExternalID;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
iSelectorBar=iExternalID;
initPosCursor();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_FIELD_SELECTION:
switch (pickingMode) {
case CLICKED:
bIsHeatmapInFocus=false;
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
case MOUSE_OVER:
PickingPoint=pick.getPickedPoint();
triggerSelectionBlock();
setDisplayListDirty();
break;
}
pickingManager.flushHits(iUniqueID,ePickingType);
break;
case HIER_HEAT_MAP_VIEW_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
break;
case CLICKED:
bIsHeatmapInFocus=true;
glHeatMapView.setDisplayListDirty();
setDisplayListDirty();
break;
case DRAGGED:
break;
}
pickingManager.flushHits(iUniqueID,EPickingType.HIER_HEAT_MAP_VIEW_SELECTION);
break;
}
}",0.8378435968463669
58987,"@Override public void doCommand(){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + sFileName + ""String_Node_Str""+ sTokenPattern+ ""String_Node_Str""+ iAlStorageIDs.toString());
  TabularAsciiDataReader loader=null;
  try {
    loader=new TabularAsciiDataReader(sFileName);
    loader.setTokenPattern(sTokenPattern);
    loader.setTargetStorages(iAlStorageIDs);
    loader.setStartParsingStopParsingAtLine(iStartParseFileAtLine,iStopParseFileAtLine);
    loader.loadData();
    commandManager.runDoCommand(this);
  }
 catch (  Exception e) {
    generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"" + sFileName);
    e.printStackTrace();
  }
}","@Override public void doCommand(){
  generalManager.getLogger().log(Level.INFO,""String_Node_Str"" + sFileName + ""String_Node_Str""+ sTokenPattern+ ""String_Node_Str""+ iAlStorageIDs.toString());
  TabularAsciiDataReader loader=null;
  try {
    loader=new TabularAsciiDataReader(sFileName);
    loader.setTokenPattern(sTokenPattern);
    loader.setTargetStorages(iAlStorageIDs);
    loader.setStartParsingStopParsingAtLine(iStartParseFileAtLine,iStopParseFileAtLine);
    if (!sTokenSeparator.isEmpty())     loader.setTokenSeperator(sTokenSeparator);
    loader.loadData();
    commandManager.runDoCommand(this);
  }
 catch (  Exception e) {
    generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"" + sFileName);
    e.printStackTrace();
  }
}",0.9412597310686482
58988,"private void handleAngularBrushing(final GL gl){
  if (bIsAngularBrushingFirstTime) {
    fCurrentAngle=fDefaultAngle;
    Point currentPoint=linePick.getPickedPoint();
    float[] fArPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
    vecAngularBrusingPoint=new Vec3f(fArPoint[0],fArPoint[1],fArPoint[2]);
    bIsAngularBrushingFirstTime=false;
  }
  alIsAngleBlocking.get(0).clear();
  int iPosition=(int)(vecAngularBrusingPoint.x() / fAxisSpacing);
  int iAxisLeftIndex;
  int iAxisRightIndex;
  iAxisLeftIndex=set.getVA(iAxisVAID).get(iPosition);
  iAxisRightIndex=set.getVA(iAxisVAID).get(iPosition + 1);
  Vec3f vecLeftPoint=new Vec3f(0,0,0);
  Vec3f vecRightPoint=new Vec3f(0,0,0);
  if (bRenderStorageHorizontally) {
    vecLeftPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
  }
 else {
    vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
  }
  vecLeftPoint.setX(iPosition * fAxisSpacing);
  vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
  Vec3f vecDirectional=vecRightPoint.minus(vecLeftPoint);
  float fLength=vecDirectional.length();
  vecDirectional.normalize();
  Vec3f vecTriangleOrigin=vecLeftPoint.addScaled(fLength / 4,vecDirectional);
  Vec3f vecTriangleLimit=vecLeftPoint.addScaled(fLength / 4 * 3,vecDirectional);
  Rotf rotf=new Rotf();
  Vec3f vecCenterLine=vecTriangleLimit.minus(vecTriangleOrigin);
  float fLegLength=vecCenterLine.length();
  if (bIsAngularDraggingActive) {
    Point pickedPoint=pickingTriggerMouseAdapter.getPickedPoint();
    float fArPoint[]=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
    Vec3f vecPickedPoint=new Vec3f(fArPoint[0],fArPoint[1],fArPoint[2]);
    Vec3f vecTempLine=vecPickedPoint.minus(vecTriangleOrigin);
    fCurrentAngle=getAngle(vecTempLine,vecCenterLine);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
  }
  rotf.set(new Vec3f(0,0,1),fCurrentAngle);
  Vec3f vecUpperPoint=rotf.rotateVector(vecCenterLine);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle);
  Vec3f vecLowerPoint=rotf.rotateVector(vecCenterLine);
  vecUpperPoint.add(vecTriangleOrigin);
  vecLowerPoint.add(vecTriangleOrigin);
  gl.glColor4fv(ANGULAR_COLOR,0);
  gl.glLineWidth(ANGLUAR_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecUpperPoint.x(),vecUpperPoint.y(),vecUpperPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecLowerPoint.x(),vecLowerPoint.y(),vecLowerPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glColor4fv(ANGULAR_POLYGON_COLOR,0);
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle / 10);
  Vec3f tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),fCurrentAngle / 10);
  tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  for (  Integer iCurrent : set.getVA(iPolylineVAID)) {
    if (bRenderStorageHorizontally) {
      vecLeftPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
    }
 else {
      vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
    }
    vecLeftPoint.setX(iPosition * fAxisSpacing);
    vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
    Vec3f vecCompareLine=vecRightPoint.minus(vecLeftPoint);
    float fCompareAngle=getAngle(vecCompareLine,vecCenterLine);
    if (fCompareAngle > fCurrentAngle || fCompareAngle < -fCurrentAngle) {
      alIsAngleBlocking.get(0).add(iCurrent);
    }
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsAngularDraggingActive=false;
  }
}","private void handleAngularBrushing(final GL gl){
  if (bIsAngularBrushingFirstTime) {
    fCurrentAngle=fDefaultAngle;
    Point currentPoint=linePick.getPickedPoint();
    float[] fArPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
    vecAngularBrusingPoint=new Vec3f(fArPoint[0],fArPoint[1],0);
    bIsAngularBrushingFirstTime=false;
  }
  alIsAngleBlocking.get(0).clear();
  int iPosition=(int)(vecAngularBrusingPoint.x() / fAxisSpacing);
  int iAxisLeftIndex;
  int iAxisRightIndex;
  iAxisLeftIndex=set.getVA(iAxisVAID).get(iPosition);
  iAxisRightIndex=set.getVA(iAxisVAID).get(iPosition + 1);
  Vec3f vecLeftPoint=new Vec3f(0,0,0);
  Vec3f vecRightPoint=new Vec3f(0,0,0);
  if (bRenderStorageHorizontally) {
    vecLeftPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
  }
 else {
    vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
  }
  vecLeftPoint.setX(iPosition * fAxisSpacing);
  vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
  Vec3f vecDirectional=vecRightPoint.minus(vecLeftPoint);
  float fLength=vecDirectional.length();
  vecDirectional.normalize();
  Vec3f vecTriangleOrigin=vecLeftPoint.addScaled(fLength / 4,vecDirectional);
  Vec3f vecTriangleLimit=vecLeftPoint.addScaled(fLength / 4 * 3,vecDirectional);
  Rotf rotf=new Rotf();
  Vec3f vecCenterLine=vecTriangleLimit.minus(vecTriangleOrigin);
  float fLegLength=vecCenterLine.length();
  if (bIsAngularDraggingActive) {
    Point pickedPoint=pickingTriggerMouseAdapter.getPickedPoint();
    float fArPoint[]=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
    Vec3f vecPickedPoint=new Vec3f(fArPoint[0],fArPoint[1],0);
    Vec3f vecTempLine=vecPickedPoint.minus(vecTriangleOrigin);
    fCurrentAngle=getAngle(vecTempLine,vecCenterLine);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
  }
  rotf.set(new Vec3f(0,0,1),fCurrentAngle);
  Vec3f vecUpperPoint=rotf.rotateVector(vecCenterLine);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle);
  Vec3f vecLowerPoint=rotf.rotateVector(vecCenterLine);
  vecUpperPoint.add(vecTriangleOrigin);
  vecLowerPoint.add(vecTriangleOrigin);
  gl.glColor4fv(ANGULAR_COLOR,0);
  gl.glLineWidth(ANGLUAR_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecUpperPoint.x(),vecUpperPoint.y(),vecUpperPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecLowerPoint.x(),vecLowerPoint.y(),vecLowerPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glColor4fv(ANGULAR_POLYGON_COLOR,0);
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle / 10);
  Vec3f tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),fCurrentAngle / 10);
  tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  for (  Integer iCurrent : set.getVA(iPolylineVAID)) {
    if (bRenderStorageHorizontally) {
      vecLeftPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
    }
 else {
      vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
    }
    vecLeftPoint.setX(iPosition * fAxisSpacing);
    vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
    Vec3f vecCompareLine=vecRightPoint.minus(vecLeftPoint);
    float fCompareAngle=getAngle(vecCompareLine,vecCenterLine);
    if (fCompareAngle > fCurrentAngle || fCompareAngle < -fCurrentAngle) {
      alIsAngleBlocking.get(0).add(iCurrent);
    }
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsAngularDraggingActive=false;
  }
}",0.9978494623655914
58989,"/** 
 * Constructor.
 */
public FileLoadDataAction(final IWorkbenchWindow window){
  this((Composite)null);
  parentComposite=null;
  this.window=window;
}","/** 
 * Constructor.
 */
public FileLoadDataAction(final IWorkbenchWindow window){
  parentComposite=null;
  this.window=window;
}",0.912280701754386
58990,"public Object execute(ExecutionEvent event) throws ExecutionException {
  FileLoadDataDialog loadDataFileDialog=new FileLoadDataDialog(HandlerUtil.getActiveShell(event));
  loadDataFileDialog.open();
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  FileLoadDataDialog loadDataFileDialog=new FileLoadDataDialog(new Shell());
  loadDataFileDialog.open();
  return null;
}",0.9365853658536586
58991,"@Override public void display(GL gl){
  if (grid_ == null)   return;
  if (bRedrawDisplayList_)   initDisplayLists(gl);
  organizeGlyphsForViewRole();
  gl.glPushMatrix();
  gl.glRotatef(45f,0,0,1);
  float scale=iViewScale;
  if (iViewRole == 2)   scale=1;
  gl.glScalef(scale,scale,scale);
  gl.glTranslatef(iCornerOffset,0,0f);
  if (mouseListener_ != null)   handleMouseListenerRubberband(gl,scale);
  if (displayList_ < 0 || bRedrawDisplayList_)   redrawView(gl);
  if (displayList_ >= 0)   gl.glCallList(displayList_);
  gl.glTranslatef(-7.0f,0.0f,0f);
  gl.glRotatef(-45f,0,0,1);
  gl.glPopMatrix();
  if (mouseListener_ != null)   mouseListener_.render(gl);
}","@Override public void display(GL gl){
  if (grid_ == null)   return;
  if (bRedrawDisplayList_)   initDisplayLists(gl);
  organizeGlyphsForViewRole();
  gl.glPushMatrix();
  gl.glRotatef(45f,0,0,1);
  float scale=iViewScale;
  if (iViewRole == 2)   scale=1;
  gl.glScalef(scale,scale,scale);
  gl.glTranslatef(iCornerOffset,0,0f);
  if (mouseListener_ != null)   handleMouseListenerRubberband(gl,scale);
  if (displayList_ < 0 || bRedrawDisplayList_)   redrawView(gl);
  int displayListGrid=grid_.getGridLayout(bIsLocal);
  if (displayListGrid >= 0)   gl.glCallList(displayListGrid);
  if (displayList_ >= 0)   gl.glCallList(displayList_);
  gl.glTranslatef(-7.0f,0.0f,0f);
  gl.glRotatef(-45f,0,0,1);
  gl.glPopMatrix();
  if (mouseListener_ != null)   mouseListener_.render(gl);
}",0.9206349206349206
58992,"public void buildGrids(GL gl){
  for (  GlyphGridPositionModel model : positionModels.values())   model.buildGrid(glyphMap_,gl);
  Vec4f gridColor_=renderStyle.getGridColor();
  if (GLGridList_ >= 0)   gl.glDeleteLists(GLGridList_,1);
  GLGridList_=gl.glGenLists(1);
  gl.glNewList(GLGridList_,GL.GL_COMPILE);
  gl.glLineWidth(1);
  gl.glTranslatef(0f,-100f,0f);
  for (int i=0; i < 200; ++i) {
    gl.glTranslatef(0f,1f,0f);
    gl.glBegin(GL.GL_LINES);
    gl.glColor4f(gridColor_.get(0),gridColor_.get(1),gridColor_.get(2),gridColor_.get(3));
    gl.glVertex3f(-100,0,0);
    gl.glVertex3f(100,0,0);
    gl.glEnd();
  }
  gl.glTranslatef(-100f,-100f,0f);
  for (int i=0; i < 200; ++i) {
    gl.glTranslatef(1f,0f,0f);
    gl.glBegin(GL.GL_LINES);
    gl.glColor4f(gridColor_.get(0),gridColor_.get(1),gridColor_.get(2),gridColor_.get(3));
    gl.glVertex3f(0,-100,0);
    gl.glVertex3f(0,100,0);
    gl.glEnd();
  }
  gl.glTranslatef(-100f,0f,0f);
  gl.glEndList();
}","public void buildGrids(GL gl){
  for (  GlyphGridPositionModel model : positionModels.values())   model.buildGrid(glyphMap_,gl);
}",0.2365787079162875
58993,"private synchronized void initializeNewPathways(final GL gl){
  if (!iAlUninitializedPathwayIDs.isEmpty() && arSlerpActions.isEmpty()) {
    int iTmpPathwayID=iAlUninitializedPathwayIDs.get(0);
    if (!generalManager.getPathwayManager().isPathwayVisible(iTmpPathwayID)) {
      ArrayList<Integer> iAlSetIDs=new ArrayList<Integer>();
      for (      ISet tmpSet : alSets) {
        iAlSetIDs.add(tmpSet.getID());
      }
      CmdCreateGLPathway cmdPathway=(CmdCreateGLPathway)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_PATHWAY_3D);
      cmdPathway.setAttributes(iTmpPathwayID,iAlSetIDs,EProjectionMode.ORTHOGRAPHIC,-4,4,4,-4,-20,20);
      cmdPathway.doCommand();
      GLPathway pathway=(GLPathway)cmdPathway.getCreatedObject();
      int iGeneratedViewID=pathway.getID();
      ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
      arMediatorIDs.add(iGeneratedViewID);
      generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,EMediatorType.SELECTION_MEDIATOR,EMediatorUpdateType.MEDIATOR_DEFAULT);
      if (underInteractionLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,underInteractionLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.MEDIUM);
        pathway.broadcastElements(ESelectionType.ADD);
      }
 else       if (stackLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,stackLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.LOW);
        pathway.broadcastElements(ESelectionType.ADD);
      }
 else       if (poolLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,poolLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.VERY_LOW);
      }
 else {
        generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
        iAlUninitializedPathwayIDs.remove(0);
        for (        AGLEventListener eventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
          if (!eventListener.isRenderedRemote())           eventListener.enableBusyMode(false);
        }
        return;
      }
      spawnLayer.addElement(iGeneratedViewID);
    }
    iAlUninitializedPathwayIDs.remove(0);
    if (iAlUninitializedPathwayIDs.isEmpty()) {
      for (      AGLEventListener eventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
        if (!eventListener.isRenderedRemote())         eventListener.enableBusyMode(false);
      }
    }
 else {
      for (      AGLEventListener eventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners())       if (!eventListener.isRenderedRemote())       eventListener.enableBusyMode(true);
    }
  }
}","private synchronized void initializeNewPathways(final GL gl){
  if (!iAlUninitializedPathwayIDs.isEmpty() && arSlerpActions.isEmpty()) {
    int iTmpPathwayID=iAlUninitializedPathwayIDs.get(0);
    if (!generalManager.getPathwayManager().isPathwayVisible(iTmpPathwayID)) {
      ArrayList<Integer> iAlSetIDs=new ArrayList<Integer>();
      for (      ISet tmpSet : alSets) {
        if (tmpSet.getSetType() != ESetType.GENE_EXPRESSION_DATA)         continue;
        iAlSetIDs.add(tmpSet.getID());
      }
      CmdCreateGLPathway cmdPathway=(CmdCreateGLPathway)generalManager.getCommandManager().createCommandByType(ECommandType.CREATE_GL_PATHWAY_3D);
      cmdPathway.setAttributes(iTmpPathwayID,iAlSetIDs,EProjectionMode.ORTHOGRAPHIC,-4,4,4,-4,-20,20);
      cmdPathway.doCommand();
      GLPathway pathway=(GLPathway)cmdPathway.getCreatedObject();
      int iGeneratedViewID=pathway.getID();
      ArrayList<Integer> arMediatorIDs=new ArrayList<Integer>();
      arMediatorIDs.add(iGeneratedViewID);
      generalManager.getEventPublisher().addSendersAndReceiversToMediator(generalManager.getEventPublisher().getItem(iMediatorID),arMediatorIDs,arMediatorIDs,EMediatorType.SELECTION_MEDIATOR,EMediatorUpdateType.MEDIATOR_DEFAULT);
      if (underInteractionLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,underInteractionLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,underInteractionLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.MEDIUM);
        pathway.broadcastElements(ESelectionType.ADD);
      }
 else       if (stackLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,stackLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,stackLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.LOW);
        pathway.broadcastElements(ESelectionType.ADD);
      }
 else       if (poolLayer.containsElement(-1)) {
        SlerpAction slerpActionTransition=new SlerpAction(iGeneratedViewID,spawnLayer,poolLayer);
        arSlerpActions.add(slerpActionTransition);
        pathway.initRemote(gl,iUniqueID,poolLayer,pickingTriggerMouseAdapter,this);
        pathway.setDetailLevel(EDetailLevel.VERY_LOW);
      }
 else {
        generalManager.getLogger().log(Level.SEVERE,""String_Node_Str"");
        iAlUninitializedPathwayIDs.remove(0);
        for (        AGLEventListener eventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
          if (!eventListener.isRenderedRemote())           eventListener.enableBusyMode(false);
        }
        return;
      }
      spawnLayer.addElement(iGeneratedViewID);
    }
    iAlUninitializedPathwayIDs.remove(0);
    if (iAlUninitializedPathwayIDs.isEmpty()) {
      for (      AGLEventListener eventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners()) {
        if (!eventListener.isRenderedRemote())         eventListener.enableBusyMode(false);
      }
    }
 else {
      for (      AGLEventListener eventListener : generalManager.getViewGLCanvasManager().getAllGLEventListeners())       if (!eventListener.isRenderedRemote())       eventListener.enableBusyMode(true);
    }
  }
}",0.9873873873873874
58994,"@Override public synchronized void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
  if (bBusyModeChanged || bBusyMode)   updateBusyMode(gl);
}","@Override public synchronized void display(final GL gl){
  clipToFrustum(gl);
  gl.glTranslatef(fXDefaultTranslation + fXTranslation,fYTranslation,0.0f);
  if (bIsDraggingActive) {
    handleGateDragging(gl);
    if (pickingTriggerMouseAdapter.wasMouseReleased())     bIsDraggingActive=false;
  }
  checkUnselection();
  gl.glCallList(iGLDisplayListToCall);
  if (bIsAngularBrushingActive && iSelectedLineID != -1) {
    handleAngularBrushing(gl);
  }
  gl.glTranslatef(-fXDefaultTranslation - fXTranslation,-fYTranslation,0.0f);
  gl.glDisable(GL.GL_STENCIL_TEST);
  if (bBusyModeChanged || bBusyMode)   updateBusyMode(gl);
}",0.902555910543131
58995,"private void handleAngularBrushing(final GL gl){
  if (bIsAngularBrushingFirstTime) {
    fCurrentAngle=fDefaultAngle;
    Point currentPoint=linePick.getPickedPoint();
    float[] fArPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
    vecAngularBrusingPoint=new Vec3f(fArPoint[0],fArPoint[1],0);
    bIsAngularBrushingFirstTime=false;
  }
  alIsAngleBlocking.get(0).clear();
  int iPosition=(int)(vecAngularBrusingPoint.x() / fAxisSpacing);
  int iAxisLeftIndex;
  int iAxisRightIndex;
  iAxisLeftIndex=set.getVA(iAxisVAID).get(iPosition);
  iAxisRightIndex=set.getVA(iAxisVAID).get(iPosition + 1);
  Vec3f vecLeftPoint=new Vec3f(0,0,0);
  Vec3f vecRightPoint=new Vec3f(0,0,0);
  if (bRenderStorageHorizontally) {
    vecLeftPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
  }
 else {
    vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
  }
  vecLeftPoint.setX(iPosition * fAxisSpacing);
  vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
  Vec3f vecDirectional=vecRightPoint.minus(vecLeftPoint);
  float fLength=vecDirectional.length();
  vecDirectional.normalize();
  Vec3f vecTriangleOrigin=vecLeftPoint.addScaled(fLength / 4,vecDirectional);
  Vec3f vecTriangleLimit=vecLeftPoint.addScaled(fLength / 4 * 3,vecDirectional);
  Rotf rotf=new Rotf();
  Vec3f vecCenterLine=vecTriangleLimit.minus(vecTriangleOrigin);
  float fLegLength=vecCenterLine.length();
  if (bIsAngularDraggingActive) {
    Point pickedPoint=pickingTriggerMouseAdapter.getPickedPoint();
    float fArPoint[]=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
    Vec3f vecPickedPoint=new Vec3f(fArPoint[0],fArPoint[1],0);
    Vec3f vecTempLine=vecPickedPoint.minus(vecTriangleOrigin);
    fCurrentAngle=getAngle(vecTempLine,vecCenterLine);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
  }
  rotf.set(new Vec3f(0,0,1),fCurrentAngle);
  Vec3f vecUpperPoint=rotf.rotateVector(vecCenterLine);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle);
  Vec3f vecLowerPoint=rotf.rotateVector(vecCenterLine);
  vecUpperPoint.add(vecTriangleOrigin);
  vecLowerPoint.add(vecTriangleOrigin);
  gl.glColor4fv(ANGULAR_COLOR,0);
  gl.glLineWidth(ANGLUAR_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecUpperPoint.x(),vecUpperPoint.y(),vecUpperPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecLowerPoint.x(),vecLowerPoint.y(),vecLowerPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glColor4fv(ANGULAR_POLYGON_COLOR,0);
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle / 10);
  Vec3f tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),fCurrentAngle / 10);
  tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  for (  Integer iCurrent : set.getVA(iPolylineVAID)) {
    if (bRenderStorageHorizontally) {
      vecLeftPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
    }
 else {
      vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
    }
    vecLeftPoint.setX(iPosition * fAxisSpacing);
    vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
    Vec3f vecCompareLine=vecRightPoint.minus(vecLeftPoint);
    float fCompareAngle=getAngle(vecCompareLine,vecCenterLine);
    if (fCompareAngle > fCurrentAngle || fCompareAngle < -fCurrentAngle) {
      alIsAngleBlocking.get(0).add(iCurrent);
    }
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsAngularDraggingActive=false;
  }
}","private void handleAngularBrushing(final GL gl){
  if (bIsAngularBrushingFirstTime) {
    fCurrentAngle=fDefaultAngle;
    Point currentPoint=linePick.getPickedPoint();
    float[] fArPoint=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
    vecAngularBrusingPoint=new Vec3f(fArPoint[0],fArPoint[1],0.01f);
    bIsAngularBrushingFirstTime=false;
  }
  alIsAngleBlocking.get(0).clear();
  int iPosition=(int)(vecAngularBrusingPoint.x() / fAxisSpacing);
  int iAxisLeftIndex;
  int iAxisRightIndex;
  iAxisLeftIndex=set.getVA(iAxisVAID).get(iPosition);
  iAxisRightIndex=set.getVA(iAxisVAID).get(iPosition + 1);
  Vec3f vecLeftPoint=new Vec3f(0,0,0);
  Vec3f vecRightPoint=new Vec3f(0,0,0);
  if (bRenderStorageHorizontally) {
    vecLeftPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iSelectedLineID).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
  }
 else {
    vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
    vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iSelectedLineID) * renderStyle.getAxisHeight());
  }
  vecLeftPoint.setX(iPosition * fAxisSpacing);
  vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
  Vec3f vecDirectional=vecRightPoint.minus(vecLeftPoint);
  float fLength=vecDirectional.length();
  vecDirectional.normalize();
  Vec3f vecTriangleOrigin=vecLeftPoint.addScaled(fLength / 4,vecDirectional);
  Vec3f vecTriangleLimit=vecLeftPoint.addScaled(fLength / 4 * 3,vecDirectional);
  Rotf rotf=new Rotf();
  Vec3f vecCenterLine=vecTriangleLimit.minus(vecTriangleOrigin);
  float fLegLength=vecCenterLine.length();
  if (bIsAngularDraggingActive) {
    Point pickedPoint=pickingTriggerMouseAdapter.getPickedPoint();
    float fArPoint[]=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,pickedPoint.x,pickedPoint.y);
    Vec3f vecPickedPoint=new Vec3f(fArPoint[0],fArPoint[1],0.01f);
    Vec3f vecTempLine=vecPickedPoint.minus(vecTriangleOrigin);
    fCurrentAngle=getAngle(vecTempLine,vecCenterLine);
    bIsDisplayListDirtyLocal=true;
    bIsDisplayListDirtyRemote=true;
  }
  rotf.set(new Vec3f(0,0,1),fCurrentAngle);
  Vec3f vecUpperPoint=rotf.rotateVector(vecCenterLine);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle);
  Vec3f vecLowerPoint=rotf.rotateVector(vecCenterLine);
  vecUpperPoint.add(vecTriangleOrigin);
  vecLowerPoint.add(vecTriangleOrigin);
  gl.glColor4fv(ANGULAR_COLOR,0);
  gl.glLineWidth(ANGLUAR_LINE_WIDTH);
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecUpperPoint.x(),vecUpperPoint.y(),vecUpperPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.ANGULAR_UPPER,iPosition));
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  gl.glVertex3f(vecLowerPoint.x(),vecLowerPoint.y(),vecLowerPoint.z() + 0.02f);
  gl.glEnd();
  gl.glPopName();
  gl.glColor4fv(ANGULAR_POLYGON_COLOR,0);
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),-fCurrentAngle / 10);
  Vec3f tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  gl.glBegin(GL.GL_POLYGON);
  rotf.set(new Vec3f(0,0,1),fCurrentAngle / 10);
  tempVector=vecCenterLine.copy();
  gl.glVertex3f(vecTriangleOrigin.x(),vecTriangleOrigin.y(),vecTriangleOrigin.z() + 0.02f);
  for (int iCount=0; iCount <= 10; iCount++) {
    Vec3f vecPoint=tempVector.copy();
    vecPoint.normalize();
    vecPoint.scale(fLegLength);
    gl.glVertex3f(vecTriangleOrigin.x() + vecPoint.x(),vecTriangleOrigin.y() + vecPoint.y(),vecTriangleOrigin.z() + vecPoint.z() + 0.02f);
    tempVector=rotf.rotateVector(tempVector);
  }
  gl.glEnd();
  for (  Integer iCurrent : set.getVA(iPolylineVAID)) {
    if (bRenderStorageHorizontally) {
      vecLeftPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisLeftIndex) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iCurrent).getFloat(EDataRepresentation.NORMALIZED,iAxisRightIndex) * renderStyle.getAxisHeight());
    }
 else {
      vecLeftPoint.setY(set.get(iAxisLeftIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
      vecRightPoint.setY(set.get(iAxisRightIndex).getFloat(EDataRepresentation.NORMALIZED,iCurrent) * renderStyle.getAxisHeight());
    }
    vecLeftPoint.setX(iPosition * fAxisSpacing);
    vecRightPoint.setX((iPosition + 1) * fAxisSpacing);
    Vec3f vecCompareLine=vecRightPoint.minus(vecLeftPoint);
    float fCompareAngle=getAngle(vecCompareLine,vecCenterLine);
    if (fCompareAngle > fCurrentAngle || fCompareAngle < -fCurrentAngle) {
      alIsAngleBlocking.get(0).add(iCurrent);
    }
  }
  if (pickingTriggerMouseAdapter.wasMouseReleased()) {
    bIsAngularDraggingActive=false;
  }
}",0.9992823824901328
58996,"protected void updateBusyMode(final GL gl){
  if (bBusyMode) {
    pickingManager.enablePicking(false);
    gl.glClearColor(0.4f,0.4f,0.4f,1f);
  }
 else {
    pickingManager.enablePicking(true);
    gl.glClearColor(0.7f,0.7f,0.7f,1f);
  }
  bBusyModeChanged=false;
}","protected void updateBusyMode(final GL gl){
  if (bBusyMode) {
    pickingManager.enablePicking(false);
    gl.glColor4f(1,1,1,0.3f);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3f(-9,-9,4.2f);
    gl.glVertex3f(-9,9,4.2f);
    gl.glVertex3f(9,9,4.2f);
    gl.glVertex3f(9,-9,4.2f);
    gl.glEnd();
    if (renderStyle == null || this instanceof GLRemoteRendering) {
      gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
      gl.glBegin(GL.GL_POLYGON);
      gl.glVertex3f(0 - GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,0 - GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glVertex3f(0 - GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,0 + GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glVertex3f(0 + GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,0 + GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glVertex3f(0 + GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,0 - GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glEnd();
      TextRenderer textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.BOLD,128),false);
      textRenderer.setColor(1,1,1,1);
      textRenderer.begin3DRendering();
      textRenderer.draw3D(""String_Node_Str"",0 - GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,0 - GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.22f,0.001f);
      textRenderer.end3DRendering();
    }
 else {
      gl.glColor4f(0.5f,0.5f,0.5f,0.8f);
      gl.glBegin(GL.GL_POLYGON);
      gl.glVertex3f(renderStyle.getXCenter() - GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,renderStyle.getYCenter() - GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glVertex3f(renderStyle.getXCenter() - GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,renderStyle.getYCenter() + GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glVertex3f(renderStyle.getXCenter() + GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,renderStyle.getYCenter() + GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glVertex3f(renderStyle.getXCenter() + GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,renderStyle.getYCenter() - GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.21f);
      gl.glEnd();
      TextRenderer textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.BOLD,128),false);
      textRenderer.setColor(1,1,1,1);
      textRenderer.begin3DRendering();
      textRenderer.draw3D(""String_Node_Str"",renderStyle.getXCenter() - GeneralRenderStyle.LOADING_BOX_HALF_WIDTH,renderStyle.getYCenter() - GeneralRenderStyle.LOADING_BOX_HALF_HEIGHT,4.22f,0.001f);
      textRenderer.end3DRendering();
    }
  }
 else {
    pickingManager.enablePicking(true);
  }
}",0.1338053097345132
58997,"public void init(GLAutoDrawable drawable){
  GeneralManager.get().getLogger().log(Level.INFO,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str""+ ""String_Node_Str""+ drawable.getChosenGLCapabilities());
  GL gl=drawable.getGL();
  gl.setSwapInterval(0);
  fpsCounter=new FPSCounter(drawable,16);
  fpsCounter.setColor(0.5f,0.5f,0.5f,1);
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClearDepth(1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT | GL.GL_STENCIL_BUFFER_BIT);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_POINT_SMOOTH);
  gl.glHint(GL.GL_POINT_SMOOTH_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
}","@Override public void init(GLAutoDrawable drawable){
  GeneralManager.get().getLogger().log(Level.INFO,""String_Node_Str"" + iGLCanvasID + ""String_Node_Str""+ ""String_Node_Str""+ drawable.getChosenGLCapabilities());
  GL gl=drawable.getGL();
  gl.setSwapInterval(0);
  fpsCounter=new FPSCounter(drawable,16);
  fpsCounter.setColor(0.5f,0.5f,0.5f,1);
  gl.glShadeModel(GL.GL_SMOOTH);
  gl.glClearColor(1.0f,1.0f,1.0f,1.0f);
  gl.glClearDepth(1.0f);
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT | GL.GL_STENCIL_BUFFER_BIT);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glDepthFunc(GL.GL_LEQUAL);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_POINT_SMOOTH);
  gl.glHint(GL.GL_POINT_SMOOTH_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glHint(GL.GL_LINE_SMOOTH_HINT,GL.GL_NICEST);
  gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT,GL.GL_NICEST);
  gl.glEnable(GL.GL_COLOR_MATERIAL);
  gl.glColorMaterial(GL.GL_FRONT,GL.GL_DIFFUSE);
}",0.995004995004995
58998,"@Override public synchronized void display(final GL gl){
  time.update();
  layoutRenderStyle.initPoolLayer(iMouseOverViewID);
  doSlerpActions(gl);
  initializeNewPathways(gl);
  renderLayer(gl,underInteractionLayer);
  if (bucketMouseWheelListener == null || !bucketMouseWheelListener.isZoomedIn()) {
    renderPoolAndMemoLayerBackground(gl);
    renderLayer(gl,poolLayer);
    renderLayer(gl,transitionLayer);
    renderLayer(gl,stackLayer);
    renderLayer(gl,spawnLayer);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.MEMO_PAD_SELECTION,MEMO_PAD_PICKING_ID));
    renderLayer(gl,memoLayer);
    gl.glPopName();
    glConnectionLineRenderer.render(gl);
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    bucketMouseWheelListener.render();
  }
  colorMappingBarMiniView.render(gl,layoutRenderStyle.getColorBarXPos(),layoutRenderStyle.getColorBarYPos(),4);
  if (bBusyModeChanged)   updateBusyMode(gl);
}","@Override public synchronized void display(final GL gl){
  time.update();
  layoutRenderStyle.initPoolLayer(iMouseOverViewID);
  doSlerpActions(gl);
  initializeNewPathways(gl);
  renderLayer(gl,underInteractionLayer);
  if (bucketMouseWheelListener == null || !bucketMouseWheelListener.isZoomedIn()) {
    renderPoolAndMemoLayerBackground(gl);
    renderLayer(gl,poolLayer);
    renderLayer(gl,transitionLayer);
    renderLayer(gl,stackLayer);
    renderLayer(gl,spawnLayer);
    gl.glPushName(pickingManager.getPickingID(iUniqueID,EPickingType.MEMO_PAD_SELECTION,MEMO_PAD_PICKING_ID));
    renderLayer(gl,memoLayer);
    gl.glPopName();
    glConnectionLineRenderer.render(gl);
  }
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    bucketMouseWheelListener.render();
  }
  colorMappingBarMiniView.render(gl,layoutRenderStyle.getColorBarXPos(),layoutRenderStyle.getColorBarYPos(),4);
  if (bBusyMode || bBusyModeChanged)   updateBusyMode(gl);
}",0.99328165374677
58999,"/** 
 * Constructor.
 */
public GLRemoteRendering(final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum,final ARemoteViewLayoutRenderStyle.LayoutMode layoutMode){
  super(iGLCanvasID,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_REMOTE_RENDERING;
  this.layoutMode=layoutMode;
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    layoutRenderStyle=new BucketLayoutRenderStyle(viewFrustum);
    bucketMouseWheelListener=new BucketMouseWheelListener(this,(BucketLayoutRenderStyle)layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(pickingTriggerMouseAdapter);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    layoutRenderStyle=new JukeboxLayoutRenderStyle(viewFrustum);
  }
  underInteractionLayer=layoutRenderStyle.initUnderInteractionLayer();
  stackLayer=layoutRenderStyle.initStackLayer();
  poolLayer=layoutRenderStyle.initPoolLayer(-1);
  memoLayer=layoutRenderStyle.initMemoLayer();
  transitionLayer=layoutRenderStyle.initTransitionLayer();
  spawnLayer=layoutRenderStyle.initSpawnLayer();
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    glConnectionLineRenderer=new GLConnectionLineRendererBucket(underInteractionLayer,stackLayer,poolLayer);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    glConnectionLineRenderer=new GLConnectionLineRendererJukebox(underInteractionLayer,stackLayer,poolLayer);
  }
  pickingTriggerMouseAdapter.addGLCanvas(this);
  arSlerpActions=new ArrayList<SlerpAction>();
  iAlUninitializedPathwayIDs=new ArrayList<Integer>();
  createEventMediator();
  dragAndDrop=new GLDragAndDrop();
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.BOLD,24),false);
  trashCan=new TrashCan();
  colorMappingBarMiniView=new GLColorMappingBarMiniView(viewFrustum);
}","/** 
 * Constructor.
 */
public GLRemoteRendering(final int iGLCanvasID,final String sLabel,final IViewFrustum viewFrustum,final ARemoteViewLayoutRenderStyle.LayoutMode layoutMode){
  super(iGLCanvasID,sLabel,viewFrustum,true);
  viewType=EManagedObjectType.GL_REMOTE_RENDERING;
  this.layoutMode=layoutMode;
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    layoutRenderStyle=new BucketLayoutRenderStyle(viewFrustum);
    super.renderStyle=layoutRenderStyle;
    bucketMouseWheelListener=new BucketMouseWheelListener(this,(BucketLayoutRenderStyle)layoutRenderStyle);
    parentGLCanvas.removeMouseWheelListener(pickingTriggerMouseAdapter);
    parentGLCanvas.addMouseWheelListener(bucketMouseWheelListener);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    layoutRenderStyle=new JukeboxLayoutRenderStyle(viewFrustum);
  }
  underInteractionLayer=layoutRenderStyle.initUnderInteractionLayer();
  stackLayer=layoutRenderStyle.initStackLayer();
  poolLayer=layoutRenderStyle.initPoolLayer(-1);
  memoLayer=layoutRenderStyle.initMemoLayer();
  transitionLayer=layoutRenderStyle.initTransitionLayer();
  spawnLayer=layoutRenderStyle.initSpawnLayer();
  if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.BUCKET)) {
    glConnectionLineRenderer=new GLConnectionLineRendererBucket(underInteractionLayer,stackLayer,poolLayer);
  }
 else   if (layoutMode.equals(ARemoteViewLayoutRenderStyle.LayoutMode.JUKEBOX)) {
    glConnectionLineRenderer=new GLConnectionLineRendererJukebox(underInteractionLayer,stackLayer,poolLayer);
  }
  pickingTriggerMouseAdapter.addGLCanvas(this);
  arSlerpActions=new ArrayList<SlerpAction>();
  iAlUninitializedPathwayIDs=new ArrayList<Integer>();
  createEventMediator();
  dragAndDrop=new GLDragAndDrop();
  textRenderer=new TextRenderer(new Font(""String_Node_Str"",Font.BOLD,24),false);
  trashCan=new TrashCan();
  colorMappingBarMiniView=new GLColorMappingBarMiniView(viewFrustum);
}",0.9895912668189896
59000,"@Override public synchronized void display(GL gl){
  gl.glCallList(iGLDisplayListToCall);
  if (bBusyModeChanged)   updateBusyMode(gl);
}","@Override public synchronized void display(GL gl){
  gl.glCallList(iGLDisplayListToCall);
  if (bBusyModeChanged || bBusyMode)   updateBusyMode(gl);
}",0.9547038327526132
